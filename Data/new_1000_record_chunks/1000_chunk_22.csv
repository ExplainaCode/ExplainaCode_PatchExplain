record_number,buggy_code,fixed_code
21001,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  String containerId=new Regex(parameter,""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + containerId);
  Form password=br.getForm(0);
  if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
    String latestPassword=this.getPluginConfig().getStringProperty(""String_Node_Str"");
    if (latestPassword != null) {
      password.put(""String_Node_Str"",latestPassword);
      br.submitForm(password);
    }
    password=br.getForm(0);
    if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
      latestPassword=PluginUtils.askPassword(this);
      password.put(""String_Node_Str"",latestPassword);
      br.setDebug(true);
      br.submitForm(password);
      password=br.getForm(0);
      if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
        PluginUtils.informPasswordWrong(this,latestPassword);
        return null;
      }
      getPluginConfig().setProperty(""String_Node_Str"",latestPassword);
      getPluginConfig().save();
    }
  }
  boolean valid=true;
  for (int i=0; i < 5; ++i) {
    Form captcha=br.getForm(0);
    if (br.containsHTML(""String_Node_Str"")) {
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      if (url == null)       url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p;
      if (url.contains(""String_Node_Str"")) {
        String code=getCaptchaCode(""String_Node_Str"",file,param);
        if (code == null)         continue;
        String[] codep=code.split(""String_Node_Str"");
        p=new Point(Integer.parseInt(codep[0]),Integer.parseInt(codep[1]));
      }
 else       p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),JDL.L(""String_Node_Str"",""String_Node_Str""));
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else     if (captcha != null && !captcha.hasInputFieldByName(""String_Node_Str"")) {
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else {
      valid=true;
      break;
    }
  }
  if (valid == false)   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] containers=br.getRegex(""String_Node_Str"").getColumn(0);
  HashMap<String,String> map=new HashMap<String,String>();
  for (  String c : containers) {
    Context cx=Context.enter();
    Scriptable scope=cx.initStandardObjects();
    c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
    String code=Context.toString(result);
    String[] row=new Regex(code,""String_Node_Str"").getRow(0);
    if (row != null) {
      map.put(row[1],row[0]);
    }
 else {
    }
  }
  File container=null;
  if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
  if (container != null) {
    decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
    container.delete();
    if (decryptedLinks.size() > 0)     return decryptedLinks;
  }
  Form[] forms=br.getForms();
  progress.setRange(forms.length / 2);
  for (  Form form : forms) {
    Browser clone;
    if (form.getInputField(""String_Node_Str"").getValue() != null && form.getInputField(""String_Node_Str"").getValue().length() > 0) {
      progress.increase(1);
      clone=br.cloneBrowser();
      clone.submitForm(form);
      clone.setDebug(true);
      String[] srcs=clone.getRegex(""String_Node_Str"").getColumn(0);
      for (      String col : srcs) {
        col=Encoding.htmlDecode(col);
        clone.getPage(col);
        if (clone.containsHTML(""String_Node_Str"")) {
          String[] evals=clone.getRegex(""String_Node_Str"").getColumn(0);
          for (          String c : evals) {
            Context cx=Context.enter();
            Scriptable scope=cx.initStandardObjects();
            c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
            String code=Context.toString(result);
            String versch;
            if (code.startsWith(""String_Node_Str"")) {
              versch=new Regex(code,""String_Node_Str"").getMatch(0);
            }
 else {
              versch=new Regex(code,""String_Node_Str"").getMatch(0);
            }
            versch=Encoding.Base64Decode(versch);
            versch=new Regex(versch,""String_Node_Str"").getMatch(0);
            versch=Encoding.htmlDecode(versch);
            decryptedLinks.add(this.createDownloadlink(versch));
            String[] row=new Regex(code,""String_Node_Str"").getRow(0);
            if (row != null) {
              map.put(row[1],row[0]);
            }
 else {
            }
          }
        }
      }
    }
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  String containerId=new Regex(parameter,""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + containerId);
  Form password=br.getForm(0);
  if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
    String latestPassword=this.getPluginConfig().getStringProperty(""String_Node_Str"");
    if (latestPassword != null) {
      password.put(""String_Node_Str"",latestPassword);
      br.submitForm(password);
    }
    password=br.getForm(0);
    if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
      latestPassword=PluginUtils.askPassword(this);
      password.put(""String_Node_Str"",latestPassword);
      br.setDebug(true);
      br.submitForm(password);
      password=br.getForm(0);
      if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
        PluginUtils.informPasswordWrong(this,latestPassword);
        return null;
      }
      getPluginConfig().setProperty(""String_Node_Str"",latestPassword);
      getPluginConfig().save();
    }
  }
  boolean valid=true;
  for (int i=0; i < 5; ++i) {
    Form captcha=br.getForm(0);
    if (br.containsHTML(""String_Node_Str"")) {
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      if (url == null)       url=captcha.getRegex(""String_Node_Str"").getMatch(1);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p;
      if (url.contains(""String_Node_Str"")) {
        String code=getCaptchaCode(""String_Node_Str"",file,param);
        if (code == null)         continue;
        String[] codep=code.split(""String_Node_Str"");
        p=new Point(Integer.parseInt(codep[0]),Integer.parseInt(codep[1]));
      }
 else       p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),JDL.L(""String_Node_Str"",""String_Node_Str""));
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else     if (captcha != null && !captcha.hasInputFieldByName(""String_Node_Str"")) {
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else {
      valid=true;
      break;
    }
  }
  if (valid == false)   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] containers=br.getRegex(""String_Node_Str"").getColumn(0);
  HashMap<String,String> map=new HashMap<String,String>();
  for (  String c : containers) {
    @SuppressWarnings(""String_Node_Str"") Context cx=Context.enter();
    Scriptable scope=cx.initStandardObjects();
    c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
    String code=Context.toString(result);
    String[] row=new Regex(code,""String_Node_Str"").getRow(0);
    if (row != null) {
      map.put(row[1],row[0]);
    }
 else {
    }
  }
  File container=null;
  if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
  if (container != null) {
    decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
    container.delete();
    if (decryptedLinks.size() > 0)     return decryptedLinks;
  }
  Form[] forms=br.getForms();
  progress.setRange(forms.length / 2);
  for (  Form form : forms) {
    Browser clone;
    if (form.getInputField(""String_Node_Str"").getValue() != null && form.getInputField(""String_Node_Str"").getValue().length() > 0) {
      progress.increase(1);
      clone=br.cloneBrowser();
      clone.submitForm(form);
      clone.setDebug(true);
      String[] srcs=clone.getRegex(""String_Node_Str"").getColumn(0);
      for (      String col : srcs) {
        col=Encoding.htmlDecode(col);
        clone.getPage(col);
        if (clone.containsHTML(""String_Node_Str"")) {
          String[] evals=clone.getRegex(""String_Node_Str"").getColumn(0);
          for (          String c : evals) {
            @SuppressWarnings(""String_Node_Str"") Context cx=Context.enter();
            Scriptable scope=cx.initStandardObjects();
            c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
            String code=Context.toString(result);
            String versch;
            versch=new Regex(code,""String_Node_Str"").getMatch(0);
            versch=Encoding.Base64Decode(versch);
            versch=new Regex(versch,""String_Node_Str"").getMatch(0);
            versch=Encoding.htmlDecode(versch);
            decryptedLinks.add(this.createDownloadlink(versch));
            String[] row=new Regex(code,""String_Node_Str"").getRow(0);
            if (row != null) {
              map.put(row[1],row[0]);
            }
 else {
            }
          }
        }
      }
    }
  }
  return decryptedLinks;
}"
21002,"public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.submitForm(br.getForm(1));
  String link=br.getRegex(Pattern.compile(""String_Node_Str"")).getMatch(0);
  downloadLink.setFinalFileName(downloadLink.toString());
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,link);
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  Form DLForm=br.getForm(1);
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  br.submitForm(DLForm);
  String link=br.getRegex(Pattern.compile(""String_Node_Str"")).getMatch(0);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,link,true,0);
  dl.startDownload();
}"
21003,"public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException {
  try {
    setBrowserExclusive();
    br.setFollowRedirects(true);
    br.getPage(downloadLink.getDownloadURL());
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    String name=br.getRegex(""String_Node_Str"").getMatch(0).trim();
    downloadLink.setName(name);
    return AvailableStatus.TRUE;
  }
 catch (  Exception e) {
    logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
  }
  throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
}","public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException {
  try {
    setBrowserExclusive();
    br.setCustomCharset(""String_Node_Str"");
    br.setFollowRedirects(true);
    br.getPage(downloadLink.getDownloadURL());
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    String name=br.getRegex(""String_Node_Str"").getMatch(0).trim();
    String filesize=br.getRegex(""String_Node_Str"").getMatch(0).trim();
    if (filesize.contains(""String_Node_Str"")) {
      filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
    }
    if (filesize.contains(""String_Node_Str"")) {
      filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
    }
    if (filesize.contains(""String_Node_Str"")) {
      filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
    }
    if (name == null || filesize == null)     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    downloadLink.setName(name);
    downloadLink.setDownloadSize(Regex.getSize(filesize));
    return AvailableStatus.TRUE;
  }
 catch (  Exception e) {
    logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
  }
  throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
}"
21004,"public int getMaxSimultanFreeDownloadNum(){
  return 1;
}","public int getMaxSimultanFreeDownloadNum(){
  return 20;
}"
21005,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  Form captchaForm=br.getForm(0);
  String code=""String_Node_Str"";
  for (int i=0; i < 5; i++) {
    if (!br.containsHTML(""String_Node_Str""))     break;
    String captchaurl0=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaurl0 == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    String captchaurl=""String_Node_Str"" + captchaurl0;
    code=getCaptchaCode(captchaurl,downloadLink);
    if (captchaForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    captchaForm.put(""String_Node_Str"",code);
    br.submitForm(captchaForm);
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String[] countDownInfo=br.getRegex(""String_Node_Str"").getRow(0);
  Form dlform=br.getForm(0);
  dlform.getInputFields().clear();
  dlform.setAction(""String_Node_Str"" + countDownInfo[1]);
  dlform.setMethod(Form.MethodType.POST);
  dlform.put(""String_Node_Str"",code);
  dlform.put(""String_Node_Str"",countDownInfo[0]);
  br.submitForm(dlform);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,br.toString().trim(),true,20);
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  Form captchaForm=br.getForm(0);
  String code=""String_Node_Str"";
  for (int i=0; i < 5; i++) {
    if (!br.containsHTML(""String_Node_Str""))     break;
    String captchaurl0=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaurl0 == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    String captchaurl=""String_Node_Str"" + captchaurl0;
    code=getCaptchaCode(captchaurl,downloadLink);
    if (captchaForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    captchaForm.put(""String_Node_Str"",code);
    br.submitForm(captchaForm);
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String[] countDownInfo=br.getRegex(""String_Node_Str"").getRow(0);
  Form dlform=br.getForm(0);
  dlform.getInputFields().clear();
  dlform.setAction(""String_Node_Str"" + countDownInfo[1]);
  dlform.setMethod(Form.MethodType.POST);
  dlform.put(""String_Node_Str"",code);
  dlform.put(""String_Node_Str"",countDownInfo[0]);
  br.submitForm(dlform);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,br.toString().trim(),true,0);
  dl.startDownload();
}"
21006,"public int getMaxSimultanFreeDownloadNum(){
  return 1;
}","public int getMaxSimultanFreeDownloadNum(){
  return 20;
}"
21007,"public int getMaxSimultanFreeDownloadNum(){
  return 5;
}","public int getMaxSimultanFreeDownloadNum(){
  return 20;
}"
21008,"public boolean initAddon(){
  return new GuiRunnable<Boolean>(){
    @Override public Boolean runSave(){
      if (JDUtilities.getJavaVersion() < 1.6) {
        logger.severe(""String_Node_Str"" + JDUtilities.getJavaVersion());
        return false;
      }
      if (!SystemTray.isSupported()) {
        logger.severe(""String_Node_Str"");
        return false;
      }
      try {
        JDUtilities.getController().addControlListener(JDLightTray.this);
        if (SwingGui.getInstance() != null && SwingGui.getInstance() != null) {
          guiFrame=SwingGui.getInstance().getMainFrame();
          if (guiFrame != null)           guiFrame.addWindowListener(JDLightTray.this);
        }
        logger.info(""String_Node_Str"");
        initGUI();
      }
 catch (      Exception e) {
        return false;
      }
      return true;
    }
  }
.getReturnValue();
}","public boolean initAddon(){
  return new GuiRunnable<Boolean>(){
    @Override public Boolean runSave(){
      if (JDUtilities.getJavaVersion() < 1.6) {
        logger.severe(""String_Node_Str"" + JDUtilities.getJavaVersion());
        return false;
      }
      if (!SystemTray.isSupported()) {
        logger.severe(""String_Node_Str"");
        return false;
      }
      try {
        JDUtilities.getController().addControlListener(JDLightTray.this);
        if (SwingGui.getInstance() != null && SwingGui.getInstance() != null) {
          guiFrame=SwingGui.getInstance().getMainFrame();
          if (guiFrame != null) {
            guiFrame.addWindowListener(JDLightTray.this);
          }
        }
        logger.info(""String_Node_Str"");
        initGUI();
      }
 catch (      Exception e) {
        return false;
      }
      return true;
    }
  }
.getReturnValue();
}"
21009,"public void controlEvent(ControlEvent event){
  if (event.getID() == ControlEvent.CONTROL_INIT_COMPLETE && event.getSource() instanceof Main) {
    logger.info(""String_Node_Str"");
    guiFrame=SwingGui.getInstance().getMainFrame();
    if (subConfig.getBooleanProperty(PROPERTY_START_MINIMIZED,false)) {
      guiFrame.setExtendedState(JFrame.ICONIFIED);
    }
    guiFrame.addWindowListener(this);
    return;
  }
  super.controlEvent(event);
}","public void controlEvent(ControlEvent event){
  if (event.getID() == ControlEvent.CONTROL_INIT_COMPLETE && event.getSource() instanceof Main) {
    logger.info(""String_Node_Str"");
    guiFrame=SwingGui.getInstance().getMainFrame();
    if (subConfig.getBooleanProperty(PROPERTY_START_MINIMIZED,false)) {
      guiFrame.setExtendedState(JFrame.ICONIFIED);
    }
    guiFrame.addWindowStateListener(new WindowStateListener(){
      public void windowStateChanged(      WindowEvent evt){
        int oldState=evt.getOldState();
        int newState=evt.getNewState();
        if ((oldState & Frame.ICONIFIED) == 0 && (newState & Frame.ICONIFIED) != 0) {
          System.out.println(""String_Node_Str"");
        }
 else         if ((oldState & Frame.ICONIFIED) != 0 && (newState & Frame.ICONIFIED) == 0) {
          System.out.println(""String_Node_Str"");
        }
        if ((oldState & Frame.MAXIMIZED_BOTH) == 0 && (newState & Frame.MAXIMIZED_BOTH) != 0) {
          System.out.println(""String_Node_Str"");
        }
 else         if ((oldState & Frame.MAXIMIZED_BOTH) != 0 && (newState & Frame.MAXIMIZED_BOTH) == 0) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
);
    guiFrame.addWindowListener(this);
    return;
  }
  super.controlEvent(event);
}"
21010,"public void windowIconified(WindowEvent arg0){
  if (subConfig.getBooleanProperty(PROPERTY_MINIMIZE_TO_TRAY,true)) {
    if (System.currentTimeMillis() > this.lastDeIconifiedEvent + 750) {
      this.lastDeIconifiedEvent=System.currentTimeMillis();
      if (guiFrame.isVisible()) {
        guiFrame.setVisible(false);
      }
 else {
        guiFrame.setVisible(true);
        guiFrame.setExtendedState(JFrame.NORMAL);
        guiFrame.toFront();
      }
    }
 else {
      guiFrame.setVisible(true);
      guiFrame.setExtendedState(JFrame.NORMAL);
      miniIt();
    }
  }
}","public void windowIconified(WindowEvent arg0){
  System.out.println(arg0.getOldState() + ""String_Node_Str"" + arg0.getNewState());
  System.out.println(arg0);
  if (subConfig.getBooleanProperty(PROPERTY_MINIMIZE_TO_TRAY,true)) {
    if (System.currentTimeMillis() > this.lastDeIconifiedEvent + 750) {
      this.lastDeIconifiedEvent=System.currentTimeMillis();
      if (guiFrame.isVisible()) {
        guiFrame.setVisible(false);
      }
 else {
        guiFrame.setVisible(true);
        guiFrame.setExtendedState(JFrame.NORMAL);
        guiFrame.toFront();
      }
    }
 else {
      guiFrame.setVisible(true);
      guiFrame.setExtendedState(JFrame.NORMAL);
      miniIt();
    }
  }
}"
21011,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  Form DLForm0=br.getForm(0);
  if (DLForm0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  DLForm0.remove(""String_Node_Str"");
  br.submitForm(DLForm0);
  if (br.containsHTML(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
  }
 else {
    Form DLForm1=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (DLForm1 == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    String passCode=null;
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm1.put(""String_Node_Str"",passCode);
    }
    int tt=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
    sleep(tt * 1001,downloadLink);
    br.submitForm(DLForm1);
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      downloadLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (passCode != null) {
      downloadLink.setProperty(""String_Node_Str"",passCode);
    }
    String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    dl.startDownload();
  }
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  Form DLForm0=br.getForm(0);
  if (DLForm0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  DLForm0.remove(""String_Node_Str"");
  br.submitForm(DLForm0);
  if (br.containsHTML(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
  }
 else {
    Form DLForm1=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (DLForm1 == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    String passCode=null;
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm1.put(""String_Node_Str"",passCode);
    }
    int tt=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
    sleep(tt * 1001,downloadLink);
    br.submitForm(DLForm1);
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      downloadLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (passCode != null) {
      downloadLink.setProperty(""String_Node_Str"",passCode);
    }
    String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    dl.startDownload();
  }
}"
21012,"/** 
 * returns the annotation pattern array
 * @return
 */
public static String[] getAnnotationUrls(){
  StringBuilder completePattern=new StringBuilder();
  String[] list={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String pattern : list) {
    if (completePattern.length() > 0) {
      completePattern.append(""String_Node_Str"");
    }
    completePattern.append(pattern);
  }
  logger.finest(""String_Node_Str"" + list.length + ""String_Node_Str"");
  return new String[]{completePattern.toString()};
}","/** 
 * returns the annotation pattern array
 * @return
 */
public static String[] getAnnotationUrls(){
  StringBuilder completePattern=new StringBuilder();
  String[] list={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String pattern : list) {
    if (completePattern.length() > 0) {
      completePattern.append(""String_Node_Str"");
    }
    completePattern.append(pattern);
  }
  logger.finest(""String_Node_Str"" + list.length + ""String_Node_Str"");
  return new String[]{completePattern.toString()};
}"
21013,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  String containerId=new Regex(parameter,""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + containerId);
  Form password=br.getForm(0);
  if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
    String latestPassword=this.getPluginConfig().getStringProperty(""String_Node_Str"");
    if (latestPassword != null) {
      password.put(""String_Node_Str"",latestPassword);
      br.submitForm(password);
    }
    password=br.getForm(0);
    if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
      latestPassword=PluginUtils.askPassword(this);
      password.put(""String_Node_Str"",latestPassword);
      br.setDebug(true);
      br.submitForm(password);
      password=br.getForm(0);
      if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
        PluginUtils.informPasswordWrong(this,latestPassword);
        return null;
      }
      getPluginConfig().setProperty(""String_Node_Str"",latestPassword);
      getPluginConfig().save();
    }
  }
  boolean valid=true;
  for (int i=0; i < 5; ++i) {
    Form captcha=br.getForm(0);
    if (br.containsHTML(""String_Node_Str"")) {
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      if (url == null)       url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p;
      if (url.contains(""String_Node_Str"")) {
        String code=getCaptchaCode(""String_Node_Str"",file,param);
        if (code == null)         continue;
        String[] codep=code.split(""String_Node_Str"");
        p=new Point(Integer.parseInt(codep[0]),Integer.parseInt(codep[1]));
      }
 else       p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),JDL.L(""String_Node_Str"",""String_Node_Str""));
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else     if (captcha != null && !captcha.hasInputFieldByName(""String_Node_Str"")) {
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else {
      valid=true;
      break;
    }
  }
  if (valid == false)   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] containers=br.getRegex(""String_Node_Str"").getColumn(0);
  HashMap<String,String> map=new HashMap<String,String>();
  for (  String c : containers) {
    Context cx=Context.enter();
    Scriptable scope=cx.initStandardObjects();
    c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
    String code=Context.toString(result);
    String[] row=new Regex(code,""String_Node_Str"").getRow(0);
    if (row != null) {
      map.put(row[1],row[0]);
    }
 else {
    }
  }
  File container=null;
  if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    Browser.download(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    Browser.download(container,map.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    Browser.download(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    Browser.download(container,map.get(""String_Node_Str""));
  }
  if (container != null) {
    decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
    container.delete();
    if (decryptedLinks.size() > 0)     return decryptedLinks;
  }
  Form[] forms=br.getForms();
  progress.setRange(forms.length / 2);
  for (  Form form : forms) {
    Browser clone;
    if (form.getInputField(""String_Node_Str"").getValue() != null && form.getInputField(""String_Node_Str"").getValue().length() > 0) {
      progress.increase(1);
      clone=br.cloneBrowser();
      clone.submitForm(form);
      clone.setDebug(true);
      String[] srcs=clone.getRegex(""String_Node_Str"").getColumn(0);
      for (      String col : srcs) {
        col=Encoding.htmlDecode(col);
        clone.getPage(col);
        if (clone.containsHTML(""String_Node_Str"")) {
          String[] evals=clone.getRegex(""String_Node_Str"").getColumn(0);
          for (          String c : evals) {
            Context cx=Context.enter();
            Scriptable scope=cx.initStandardObjects();
            c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
            String code=Context.toString(result);
            String versch;
            if (code.startsWith(""String_Node_Str"")) {
              versch=new Regex(code,""String_Node_Str"").getMatch(0);
            }
 else {
              versch=new Regex(code,""String_Node_Str"").getMatch(0);
            }
            versch=Encoding.Base64Decode(versch);
            versch=new Regex(versch,""String_Node_Str"").getMatch(0);
            versch=Encoding.htmlDecode(versch);
            decryptedLinks.add(this.createDownloadlink(versch));
            String[] row=new Regex(code,""String_Node_Str"").getRow(0);
            if (row != null) {
              map.put(row[1],row[0]);
            }
 else {
            }
          }
        }
      }
    }
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  String containerId=new Regex(parameter,""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + containerId);
  Form password=br.getForm(0);
  if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
    String latestPassword=this.getPluginConfig().getStringProperty(""String_Node_Str"");
    if (latestPassword != null) {
      password.put(""String_Node_Str"",latestPassword);
      br.submitForm(password);
    }
    password=br.getForm(0);
    if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
      latestPassword=PluginUtils.askPassword(this);
      password.put(""String_Node_Str"",latestPassword);
      br.setDebug(true);
      br.submitForm(password);
      password=br.getForm(0);
      if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
        PluginUtils.informPasswordWrong(this,latestPassword);
        return null;
      }
      getPluginConfig().setProperty(""String_Node_Str"",latestPassword);
      getPluginConfig().save();
    }
  }
  boolean valid=true;
  for (int i=0; i < 5; ++i) {
    Form captcha=br.getForm(0);
    if (br.containsHTML(""String_Node_Str"")) {
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      if (url == null)       url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p;
      if (url.contains(""String_Node_Str"")) {
        String code=getCaptchaCode(""String_Node_Str"",file,param);
        if (code == null)         continue;
        String[] codep=code.split(""String_Node_Str"");
        p=new Point(Integer.parseInt(codep[0]),Integer.parseInt(codep[1]));
      }
 else       p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),JDL.L(""String_Node_Str"",""String_Node_Str""));
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else     if (captcha != null && !captcha.hasInputFieldByName(""String_Node_Str"")) {
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else {
      valid=true;
      break;
    }
  }
  if (valid == false)   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] containers=br.getRegex(""String_Node_Str"").getColumn(0);
  HashMap<String,String> map=new HashMap<String,String>();
  for (  String c : containers) {
    Context cx=Context.enter();
    Scriptable scope=cx.initStandardObjects();
    c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
    String code=Context.toString(result);
    String[] row=new Regex(code,""String_Node_Str"").getRow(0);
    if (row != null) {
      map.put(row[1],row[0]);
    }
 else {
    }
  }
  File container=null;
  if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
  if (container != null) {
    decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
    container.delete();
    if (decryptedLinks.size() > 0)     return decryptedLinks;
  }
  Form[] forms=br.getForms();
  progress.setRange(forms.length / 2);
  for (  Form form : forms) {
    Browser clone;
    if (form.getInputField(""String_Node_Str"").getValue() != null && form.getInputField(""String_Node_Str"").getValue().length() > 0) {
      progress.increase(1);
      clone=br.cloneBrowser();
      clone.submitForm(form);
      clone.setDebug(true);
      String[] srcs=clone.getRegex(""String_Node_Str"").getColumn(0);
      for (      String col : srcs) {
        col=Encoding.htmlDecode(col);
        clone.getPage(col);
        if (clone.containsHTML(""String_Node_Str"")) {
          String[] evals=clone.getRegex(""String_Node_Str"").getColumn(0);
          for (          String c : evals) {
            Context cx=Context.enter();
            Scriptable scope=cx.initStandardObjects();
            c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
            String code=Context.toString(result);
            String versch;
            if (code.startsWith(""String_Node_Str"")) {
              versch=new Regex(code,""String_Node_Str"").getMatch(0);
            }
 else {
              versch=new Regex(code,""String_Node_Str"").getMatch(0);
            }
            versch=Encoding.Base64Decode(versch);
            versch=new Regex(versch,""String_Node_Str"").getMatch(0);
            versch=Encoding.htmlDecode(versch);
            decryptedLinks.add(this.createDownloadlink(versch));
            String[] row=new Regex(code,""String_Node_Str"").getRow(0);
            if (row != null) {
              map.put(row[1],row[0]);
            }
 else {
            }
          }
        }
      }
    }
  }
  return decryptedLinks;
}"
21014,"public static void main(String args[]){
  try {
    log=new StringBuilder();
    FileHandler handler=new FileHandler(""String_Node_Str"",false);
    logger=Logger.getLogger(""String_Node_Str"");
    logger.addHandler(handler);
    boolean OSFilter=true;
    File cfg;
    if ((cfg=JDUtilities.getResourceFile(""String_Node_Str"")).exists()) {
      JDUtilities.getResourceFile(""String_Node_Str"").mkdirs();
      cfg.renameTo(JDUtilities.getResourceFile(""String_Node_Str""));
    }
    for (int i=0; i < args.length; i++) {
      String p=args[i];
      if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        OSFilter=false;
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        OSFilter=false;
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        Browser.setVerbose(true);
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        RESTORE=true;
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        String br=args[++i];
        if (br.equalsIgnoreCase(""String_Node_Str""))         br=null;
        WebUpdater.getConfig(""String_Node_Str"").setProperty(WebUpdater.PARAM_BRANCH,br);
        WebUpdater.getConfig(""String_Node_Str"").save();
        System.out.println(""String_Node_Str"" + br);
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        OSFilter=false;
        clone=true;
      }
 else       if (clone && clonePrefix.size() == 0) {
        clonePrefix.add(new Server(100,p.trim()));
      }
    }
    Browser.init();
    guiConfig=WebUpdater.getConfig(""String_Node_Str"");
    log.append(""String_Node_Str"" + JDUtilities.getResourceFile(""String_Node_Str"") + ""String_Node_Str"");
    log.append(WebUpdater.getConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
    System.out.println(WebUpdater.getConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
    System.out.println(WebUpdater.getConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
    log.append(WebUpdater.getConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
    initGUI();
    try {
      Browser br=new Browser();
      TICKET_TIME=Integer.parseInt(br.getPage(""String_Node_Str"").trim());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (TICKET_TIME < 0) {
      warnings.setText(""String_Node_Str"");
      if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(frame,""String_Node_Str"")) {
      }
 else {
        while (true) {
          Thread.sleep(10000000);
        }
      }
    }
 else {
      warnings.setText(""String_Node_Str"");
      while (TICKET_TIME > 0) {
        Thread.sleep(1000);
        warnings.setText(""String_Node_Str"" + Formatter.formatSeconds(TICKET_TIME / 1000) + ""String_Node_Str"");
        TICKET_TIME-=1000;
      }
      warnings.setText(""String_Node_Str"");
    }
    for (int i=0; i < args.length; i++) {
      Main.log(log,""String_Node_Str"" + i + ""String_Node_Str""+ args[i]+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
      logWindow.setText(log.toString());
    }
    final WebUpdater updater=new WebUpdater();
    updater.setOSFilter(OSFilter);
    updater.getBroadcaster().addListener(new MessageListener(){
      private String msg0=""String_Node_Str"";
      private String msg1=""String_Node_Str"";
      private String msg2=""String_Node_Str"";
      public void onMessage(      MessageEvent event){
        if (updater.getErrors() > 0) {
          JOptionPane.showConfirmDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_OPTION,JOptionPane.WARNING_MESSAGE);
          Main.log(log,""String_Node_Str"");
          Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
          Main.log(log,""String_Node_Str"" + JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
          JDUtilities.runCommand(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath(),0);
          logWindow.setText(log.toString());
          JDIO.writeLocalFile(JDUtilities.getResourceFile(""String_Node_Str""),log.toString());
          System.exit(0);
          return;
        }
        if (event.getID() == WebUpdater.DO_UPDATE_FAILED || event.getID() == FileUpdate.ERROR) {
          msg2=msg1;
          msg1=msg0;
          msg0=event.getMessage();
          warnings.setText(msg2 + ""String_Node_Str"" + msg1+ ""String_Node_Str""+ msg0+ ""String_Node_Str"");
        }
        if (event.getID() == WebUpdater.DO_UPDATE_SUCCESS) {
          warnings.setText(""String_Node_Str"");
        }
        Main.log(log,event.getMessage() + ""String_Node_Str"");
      }
    }
);
    Main.log(log,""String_Node_Str"" + new Date() + ""String_Node_Str"");
    checkBackup();
    updater.ignorePlugins(false);
    checkUpdateMessage();
    updater.setLogger(log);
    updater.setDownloadProgress(progressload);
    Main.trace(""String_Node_Str"");
    if (RESTORE) {
      JDIO.removeByPattern(JDUtilities.getResourceFile(""String_Node_Str"").getParentFile(),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE));
    }
    ArrayList<FileUpdate> files;
    try {
      files=updater.getAvailableFiles();
    }
 catch (    Exception e) {
      Main.trace(""String_Node_Str"");
      Main.log(log,""String_Node_Str"");
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e1) {
      }
      files=new ArrayList<FileUpdate>();
    }
    if (files != null) {
      updater.filterAvailableUpdates(files);
      JDUpdateUtils.backupDataBase();
      updater.updateFiles(files,null);
    }
    Restarter.main(new String[]{});
    Main.trace(updater.getLogger().toString());
    Main.trace(""String_Node_Str"");
    logWindow.setText(log.toString());
    Main.trace(JDUtilities.getResourceFile(""String_Node_Str"").getAbsoluteFile());
    if (JDUtilities.getResourceFile(""String_Node_Str"").exists()) {
      JDUtilities.getResourceFile(""String_Node_Str"").delete();
    }
    Main.log(log,""String_Node_Str"" + JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
    Main.log(log,""String_Node_Str"" + JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
    JDUtilities.getDatabaseConnector().shutdownDatabase();
    JDUtilities.runCommand(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath(),0);
    logWindow.setText(log.toString());
    JDIO.writeLocalFile(JDUtilities.getResourceFile(""String_Node_Str""),log.toString());
    Main.log(log,""String_Node_Str"" + updater.getErrors());
    System.exit(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Main.log(log,""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public static void main(String args[]){
  try {
    log=new StringBuilder();
    FileHandler handler=new FileHandler(""String_Node_Str"",false);
    logger=Logger.getLogger(""String_Node_Str"");
    logger.addHandler(handler);
    boolean OSFilter=true;
    File cfg;
    if ((cfg=JDUtilities.getResourceFile(""String_Node_Str"")).exists()) {
      JDUtilities.getResourceFile(""String_Node_Str"").mkdirs();
      cfg.renameTo(JDUtilities.getResourceFile(""String_Node_Str""));
    }
    for (int i=0; i < args.length; i++) {
      String p=args[i];
      if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        OSFilter=false;
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        OSFilter=false;
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        Browser.setVerbose(true);
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        RESTORE=true;
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        String br=args[++i];
        if (br.equalsIgnoreCase(""String_Node_Str""))         br=null;
        WebUpdater.getConfig(""String_Node_Str"").setProperty(WebUpdater.PARAM_BRANCH,new Branch(br));
        WebUpdater.getConfig(""String_Node_Str"").save();
        System.out.println(""String_Node_Str"" + br);
      }
 else       if (p.trim().equalsIgnoreCase(""String_Node_Str"")) {
        OSFilter=false;
        clone=true;
      }
 else       if (clone && clonePrefix.size() == 0) {
        clonePrefix.add(new Server(100,p.trim()));
      }
    }
    Browser.init();
    guiConfig=WebUpdater.getConfig(""String_Node_Str"");
    log.append(""String_Node_Str"" + JDUtilities.getResourceFile(""String_Node_Str"") + ""String_Node_Str"");
    log.append(WebUpdater.getConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
    System.out.println(WebUpdater.getConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
    System.out.println(WebUpdater.getConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
    log.append(WebUpdater.getConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
    initGUI();
    try {
      Browser br=new Browser();
      TICKET_TIME=Integer.parseInt(br.getPage(""String_Node_Str"").trim());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (TICKET_TIME < 0) {
      warnings.setText(""String_Node_Str"");
      if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(frame,""String_Node_Str"")) {
      }
 else {
        while (true) {
          Thread.sleep(10000000);
        }
      }
    }
 else {
      warnings.setText(""String_Node_Str"");
      while (TICKET_TIME > 0) {
        Thread.sleep(1000);
        warnings.setText(""String_Node_Str"" + Formatter.formatSeconds(TICKET_TIME / 1000) + ""String_Node_Str"");
        TICKET_TIME-=1000;
      }
      warnings.setText(""String_Node_Str"");
    }
    for (int i=0; i < args.length; i++) {
      Main.log(log,""String_Node_Str"" + i + ""String_Node_Str""+ args[i]+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
      logWindow.setText(log.toString());
    }
    final WebUpdater updater=new WebUpdater();
    updater.setOSFilter(OSFilter);
    updater.getBroadcaster().addListener(new MessageListener(){
      private String msg0=""String_Node_Str"";
      private String msg1=""String_Node_Str"";
      private String msg2=""String_Node_Str"";
      public void onMessage(      MessageEvent event){
        if (updater.getErrors() > 0) {
          JOptionPane.showConfirmDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_OPTION,JOptionPane.WARNING_MESSAGE);
          Main.log(log,""String_Node_Str"");
          Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
          Main.log(log,""String_Node_Str"" + JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
          JDUtilities.runCommand(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath(),0);
          logWindow.setText(log.toString());
          JDIO.writeLocalFile(JDUtilities.getResourceFile(""String_Node_Str""),log.toString());
          System.exit(0);
          return;
        }
        if (event.getID() == WebUpdater.DO_UPDATE_FAILED || event.getID() == FileUpdate.ERROR) {
          msg2=msg1;
          msg1=msg0;
          msg0=event.getMessage();
          warnings.setText(msg2 + ""String_Node_Str"" + msg1+ ""String_Node_Str""+ msg0+ ""String_Node_Str"");
        }
        if (event.getID() == WebUpdater.DO_UPDATE_SUCCESS) {
          warnings.setText(""String_Node_Str"");
        }
        Main.log(log,event.getMessage() + ""String_Node_Str"");
      }
    }
);
    Main.log(log,""String_Node_Str"" + new Date() + ""String_Node_Str"");
    checkBackup();
    updater.ignorePlugins(false);
    checkUpdateMessage();
    updater.setLogger(log);
    updater.setDownloadProgress(progressload);
    Main.trace(""String_Node_Str"");
    if (RESTORE) {
      JDIO.removeByPattern(JDUtilities.getResourceFile(""String_Node_Str"").getParentFile(),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE));
    }
    ArrayList<FileUpdate> files;
    try {
      files=updater.getAvailableFiles();
    }
 catch (    Exception e) {
      Main.trace(""String_Node_Str"");
      Main.log(log,""String_Node_Str"");
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e1) {
      }
      files=new ArrayList<FileUpdate>();
    }
    if (files != null) {
      updater.filterAvailableUpdates(files);
      JDUpdateUtils.backupDataBase();
      updater.updateFiles(files,null);
    }
    Restarter.main(new String[]{});
    Main.trace(updater.getLogger().toString());
    Main.trace(""String_Node_Str"");
    logWindow.setText(log.toString());
    Main.trace(JDUtilities.getResourceFile(""String_Node_Str"").getAbsoluteFile());
    if (JDUtilities.getResourceFile(""String_Node_Str"").exists()) {
      JDUtilities.getResourceFile(""String_Node_Str"").delete();
    }
    Main.log(log,""String_Node_Str"" + JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
    Main.log(log,""String_Node_Str"" + JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
    JDUtilities.getDatabaseConnector().shutdownDatabase();
    JDUtilities.runCommand(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath(),0);
    logWindow.setText(log.toString());
    JDIO.writeLocalFile(JDUtilities.getResourceFile(""String_Node_Str""),log.toString());
    Main.log(log,""String_Node_Str"" + updater.getErrors());
    System.exit(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Main.log(log,""String_Node_Str"" + e.getLocalizedMessage());
  }
}"
21015,"public static void main(String[] args) throws Exception {
  String branch=null;
  branch=""String_Node_Str"";
  Browser.setGlobalConnectTimeout(500000);
  Browser.setGlobalReadTimeout(500000);
  Updater upd=new Updater();
  if (branch != null)   WebUpdater.getConfig(""String_Node_Str"").setProperty(WebUpdater.PARAM_BRANCH,branch);
  WebUpdater.getConfig(""String_Node_Str"").save();
  System.out.println(""String_Node_Str"");
  upd.webupdate();
  upd.removeFileOverhead();
  System.out.println(""String_Node_Str"");
  upd.movePlugins(getCFG(""String_Node_Str""));
  upd.moveJars(getCFG(""String_Node_Str""));
  upd.cleanUp();
  if (branch == null)   branch=JOptionPane.showInputDialog(upd.frame,""String_Node_Str"");
  upd.createBranch(branch);
  ArrayList<File> list=upd.getFileList();
  upd.upload(list);
  upd.merge();
  upd.checkHashes();
  upd.clone2(upd.branch,""String_Node_Str"");
  upd.uploadHashList();
  System.exit(0);
}","public static void main(String[] args) throws Exception {
  String branch=null;
  branch=""String_Node_Str"";
  Browser.setGlobalConnectTimeout(500000);
  Browser.setGlobalReadTimeout(500000);
  Updater upd=new Updater();
  if (branch != null)   WebUpdater.getConfig(""String_Node_Str"").setProperty(WebUpdater.PARAM_BRANCH,new Branch(branch));
  WebUpdater.getConfig(""String_Node_Str"").save();
  System.out.println(""String_Node_Str"");
  upd.webupdate();
  upd.removeFileOverhead();
  System.out.println(""String_Node_Str"");
  upd.movePlugins(getCFG(""String_Node_Str""));
  upd.moveJars(getCFG(""String_Node_Str""));
  upd.cleanUp();
  if (branch == null)   branch=JOptionPane.showInputDialog(upd.frame,""String_Node_Str"");
  upd.createBranch(branch);
  ArrayList<File> list=upd.getFileList();
  upd.upload(list);
  upd.merge();
  upd.checkHashes();
  upd.clone2(upd.branch,""String_Node_Str"");
  upd.uploadHashList();
  System.exit(0);
}"
21016,"/** 
 * filters the available actions
 * @param actions2
 */
private void setActions(ArrayList<ToolBarAction> actions2){
  Collections.sort(actions2,new Comparator<ToolBarAction>(){
    public int compare(    ToolBarAction o1,    ToolBarAction o2){
      int ia=WHITELIST.indexOf(o1.getID());
      int ib=WHITELIST.indexOf(o2.getID());
      return ia < ib ? -1 : 1;
    }
  }
);
  this.list=new ArrayList<String>();
  list.addAll(GUIUtils.getConfig().getGenericProperty(""String_Node_Str"",ToolBar.DEFAULT_LIST));
  for (Iterator<ToolBarAction> it=actions2.iterator(); it.hasNext(); ) {
    ToolBarAction a=it.next();
    if (a.getValue(ToolBarAction.IMAGE_KEY) == null) {
      it.remove();
      list.remove(a.getID());
      continue;
    }
    if (!WHITELIST.contains(a.getID())) {
      it.remove();
      list.remove(a.getID());
      System.out.println(""String_Node_Str"" + a.getID() + ""String_Node_Str"");
      continue;
    }
  }
  this.actions=actions2;
}","/** 
 * filters the available actions
 * @param actions2
 */
private void setActions(ArrayList<ToolBarAction> actions2){
  Collections.sort(actions2,new Comparator<ToolBarAction>(){
    public int compare(    ToolBarAction o1,    ToolBarAction o2){
      int ia=WHITELIST.indexOf(o1.getID());
      int ib=WHITELIST.indexOf(o2.getID());
      return ia < ib ? -1 : 1;
    }
  }
);
  this.list=new ArrayList<String>();
  list.addAll(GUIUtils.getConfig().getGenericProperty(""String_Node_Str"",ToolBar.DEFAULT_LIST));
  for (Iterator<ToolBarAction> it=actions2.iterator(); it.hasNext(); ) {
    ToolBarAction a=it.next();
    if (a.getValue(ToolBarAction.IMAGE_KEY) == null) {
      it.remove();
      list.remove(a.getID());
      continue;
    }
    if (!WHITELIST.contains(a.getID())) {
      it.remove();
      list.remove(a.getID());
      System.out.println(""String_Node_Str"" + a.getID() + ""String_Node_Str"");
      continue;
    }
  }
  this.actions=actions2;
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      tableModel.fireTableDataChanged();
      return null;
    }
  }
.start();
}"
21017,"@Override public void setValueAt(Object value,int row,int col){
  if (col == 0) {
    if ((Boolean)value) {
      list.add(actions.get(row).getID());
    }
 else {
      list.remove(actions.get(row).getID());
    }
    GUIUtils.getConfig().setProperty(""String_Node_Str"",list);
    GUIUtils.getConfig().save();
    Collections.sort(list,new Comparator<String>(){
      public int compare(      String o1,      String o2){
        int ia=WHITELIST.indexOf(o1);
        int ib=WHITELIST.indexOf(o2);
        return ia < ib ? -1 : 1;
      }
    }
);
    while (list.remove(""String_Node_Str"")) {
    }
    for (int i=1; i < list.size(); i++) {
      int b=WHITELIST.indexOf(list.get(i));
      int a=WHITELIST.indexOf(list.get(i - 1));
      for (int ii=a; ii < b; ii++) {
        if (WHITELIST.get(ii).equals(""String_Node_Str"")) {
          list.add(i,""String_Node_Str"");
          i++;
          break;
        }
      }
    }
    MainToolBar.getInstance().setList(list.toArray(new String[]{}));
  }
}","@Override public void setValueAt(Object value,int row,int col){
  if (col == 0) {
    if ((Boolean)value) {
      list.add(actions.get(row).getID());
    }
 else {
      list.remove(actions.get(row).getID());
    }
    GUIUtils.getConfig().setProperty(""String_Node_Str"",list);
    GUIUtils.getConfig().save();
    Collections.sort(list,new Comparator<String>(){
      public int compare(      String o1,      String o2){
        int ia=WHITELIST.indexOf(o1);
        int ib=WHITELIST.indexOf(o2);
        return ia < ib ? -1 : 1;
      }
    }
);
    while (list.remove(""String_Node_Str"")) {
    }
    for (int i=1; i < list.size(); i++) {
      int b=WHITELIST.indexOf(list.get(i));
      int a=WHITELIST.indexOf(list.get(i - 1));
      if (a > 0 && b > 0) {
        for (int ii=a; ii < b; ii++) {
          if (WHITELIST.get(ii).equals(""String_Node_Str"")) {
            list.add(i,""String_Node_Str"");
            i++;
            break;
          }
        }
      }
    }
    MainToolBar.getInstance().setList(list.toArray(new String[]{}));
  }
}"
21018,"/** 
 * loads branches.lst from a random (0-2) updateserver.
 * @return
 */
private Branch[] getBranches(){
  ArrayList<String> mirrors=new ArrayList<String>();
  for (  String m : UPDATE_MIRROR)   mirrors.add(m);
  for (int i=0; i < UPDATE_MIRROR.length; i++) {
    String serv=mirrors.remove((int)(Math.random() * (UPDATE_MIRROR.length - 1 - i)));
    try {
      br.getPage(serv + ""String_Node_Str"");
      if (br.getRequest().getHttpConnection().isOK()) {
        String[] bs=Regex.getLines(br.toString());
        ArrayList<Branch> ret=new ArrayList<Branch>();
        this.branches=new Branch[bs.length];
        for (int ii=0; ii < bs.length; ii++) {
          Branch branch=new Branch(bs[i]);
          if (branch.isBeta() && betaBranch == null) {
            betaBranch=branch;
          }
 else           if (!branch.isBeta()) {
            ret.add(branch);
          }
        }
        branches=ret.toArray(new Branch[]{});
        System.out.println(""String_Node_Str"" + serv + ""String_Node_Str""+ br);
        return branches;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      errorWait();
    }
    System.err.println(""String_Node_Str"" + serv);
  }
  branches=new Branch[]{};
  return branches;
}","/** 
 * loads branches.lst from a random (0-2) updateserver.
 * @return
 */
private Branch[] getBranches(){
  ArrayList<String> mirrors=new ArrayList<String>();
  for (  String m : UPDATE_MIRROR)   mirrors.add(m);
  for (int i=0; i < UPDATE_MIRROR.length; i++) {
    String serv=mirrors.remove((int)(Math.random() * (UPDATE_MIRROR.length - 1 - i)));
    try {
      br.getPage(serv + ""String_Node_Str"");
      if (br.getRequest().getHttpConnection().isOK()) {
        String[] bs=Regex.getLines(br.toString());
        ArrayList<Branch> ret=new ArrayList<Branch>();
        this.branches=new Branch[bs.length];
        for (int ii=0; ii < bs.length; ii++) {
          Branch branch=new Branch(bs[ii]);
          if (branch.isBeta() && betaBranch == null) {
            betaBranch=branch;
          }
 else           if (!branch.isBeta()) {
            ret.add(branch);
          }
        }
        branches=ret.toArray(new Branch[]{});
        System.out.println(""String_Node_Str"" + serv + ""String_Node_Str""+ br);
        return branches;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      errorWait();
    }
    System.err.println(""String_Node_Str"" + serv);
  }
  branches=new Branch[]{};
  return branches;
}"
21019,"public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.setFollowRedirects(false);
  String uid1=br.getRegex(""String_Node_Str"").getMatch(0);
  String uid2=br.getRegex(""String_Node_Str"").getMatch(0);
  String hcode=br.getRegex(""String_Node_Str"").getMatch(0);
  String ip=br.getRegex(""String_Node_Str"").getMatch(0);
  Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (form == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  form.put(""String_Node_Str"",uid1);
  form.put(""String_Node_Str"",uid2);
  form.put(""String_Node_Str"",hcode);
  form.put(""String_Node_Str"",""String_Node_Str"");
  form.put(""String_Node_Str"",ip);
  form.put(""String_Node_Str"",""String_Node_Str"");
  br.submitForm(form);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,1);
  dl.startDownload();
}","public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.setFollowRedirects(false);
  String md5crypt=br.getRegex(""String_Node_Str"").getMatch(0);
  String host=br.getRegex(""String_Node_Str"").getMatch(0);
  String uid=br.getRegex(""String_Node_Str"").getMatch(0);
  String name=br.getRegex(""String_Node_Str"").getMatch(0);
  String realuid=br.getRegex(""String_Node_Str"").getMatch(0);
  String realname=br.getRegex(""String_Node_Str"").getMatch(0);
  String optiondir=br.getRegex(""String_Node_Str"").getMatch(0);
  String pin=br.getRegex(""String_Node_Str"").getMatch(0);
  String ssserver=br.getRegex(""String_Node_Str"").getMatch(0);
  String sssize=br.getRegex(""String_Node_Str"").getMatch(0);
  String free=br.getRegex(""String_Node_Str"").getMatch(0);
  Form form=new Form();
  form.setMethod(Form.MethodType.POST);
  form.setAction(""String_Node_Str"");
  form.put(""String_Node_Str"",md5crypt);
  form.put(""String_Node_Str"",host);
  form.put(""String_Node_Str"",uid);
  form.put(""String_Node_Str"",name);
  form.put(""String_Node_Str"",realuid);
  form.put(""String_Node_Str"",realname);
  form.put(""String_Node_Str"",optiondir);
  form.put(""String_Node_Str"",pin);
  form.put(""String_Node_Str"",ssserver);
  form.put(""String_Node_Str"",sssize);
  form.put(""String_Node_Str"",free);
  br.submitForm(form);
  String dllink=br.getRedirectLocation();
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,-20);
  if (!(dl.getConnection().isContentDisposition())) {
    br.followConnection();
    System.out.print(br.toString());
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    if (br.containsHTML(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
    }
    throw new PluginException(LinkStatus.ERROR_FATAL);
  }
  dl.startDownload();
}"
21020,"public int getMaxSimultanFreeDownloadNum(){
  return 1;
}","public int getMaxSimultanFreeDownloadNum(){
  return 20;
}"
21021,"public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  br.clearCookies(link.getDownloadURL());
  br.getPage(link.getDownloadURL());
  int sleep=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
  if (br.containsHTML(""String_Node_Str"")) {
    int block=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0)) * 1000 + 1;
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,block);
  }
  String Captcha=getCaptchaCode(br.getRegex(""String_Node_Str"").getMatch(0),link);
  br.getPage(""String_Node_Str"" + Captcha);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  sleep(sleep * 1001,link);
  br.getPage(""String_Node_Str"");
  String dllink=null;
  dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
  dl.startDownload();
}","public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  br.clearCookies(link.getDownloadURL());
  br.getPage(link.getDownloadURL());
  int sleep=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
  if (br.containsHTML(""String_Node_Str"")) {
    int block=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0)) * 1000 + 1;
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,block);
  }
  String Captcha=getCaptchaCode(""String_Node_Str"" + br.getRegex(""String_Node_Str"").getMatch(0),link);
  br.getPage(""String_Node_Str"" + Captcha);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  sleep(sleep * 1001,link);
  br.getPage(""String_Node_Str"");
  String dllink=null;
  dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
  dl.startDownload();
}"
21022,"public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(filename.trim());
  parameter.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  filesize.replace(""String_Node_Str"",""String_Node_Str"");
  parameter.setName(filename.trim());
  parameter.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}"
21023,"public void handleFree(DownloadLink downloadLink) throws Exception {
  String linkurl=null;
  if (isVideo) {
    String urlpart=br.getRegex(""String_Node_Str"").getMatch(0);
    String key=br.getRegex(""String_Node_Str"").getMatch(0);
    linkurl=urlpart + ""String_Node_Str"" + key+ ""String_Node_Str"";
  }
 else {
    requestFileInformation(downloadLink);
    br.setFollowRedirects(true);
    String id=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
    br.getPage(""String_Node_Str"" + id);
    String strwait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (strwait != null && !br.containsHTML(""String_Node_Str"")) {
      long waittime=Long.parseLong(strwait.trim());
      waittime=(waittime * 1000) + 1;
      this.sleep(waittime,downloadLink);
    }
    br.getPage(""String_Node_Str"" + id);
    linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  if (linkurl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,linkurl,false,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getResponseCode() != 200 && con.getResponseCode() != 206) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 1000l);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String linkurl=null;
  if (isVideo) {
    String urlpart=br.getRegex(""String_Node_Str"").getMatch(0);
    String key=br.getRegex(""String_Node_Str"").getMatch(0);
    linkurl=urlpart + ""String_Node_Str"" + key+ ""String_Node_Str"";
  }
 else {
    requestFileInformation(downloadLink);
    br.setFollowRedirects(true);
    String id=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
    br.getPage(""String_Node_Str"" + id);
    String strwait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (strwait != null && !br.containsHTML(""String_Node_Str"")) {
      long waittime=Long.parseLong(strwait.trim());
      waittime=(waittime * 1000) + 1;
      this.sleep(waittime,downloadLink);
    }
    br.getPage(""String_Node_Str"" + id);
    linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  if (linkurl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,linkurl,false,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getResponseCode() != 200 && con.getResponseCode() != 206) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 1000l);
  }
  dl.startDownload();
}"
21024,"public void correctDownloadLink(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  br.setCookie(link.getDownloadURL(),""String_Node_Str"",""String_Node_Str"");
  if (!Regex.matches(link.getDownloadURL(),""String_Node_Str"")) {
    if (Regex.matches(link.getDownloadURL(),""String_Node_Str"")) {
      this.isVideo=true;
    }
 else {
      br.setFollowRedirects(true);
      br.getPage(link.getDownloadURL());
      String urlpart=""String_Node_Str"";
      String correctUrl=urlpart + br.getRegex(""String_Node_Str"").getMatch(0);
      link.setUrlDownload(correctUrl);
    }
  }
}","public void correctDownloadLink(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  br.setCookie(link.getDownloadURL(),""String_Node_Str"",""String_Node_Str"");
  if (!Regex.matches(link.getDownloadURL(),""String_Node_Str"")) {
    if (!Regex.matches(link.getDownloadURL(),""String_Node_Str"")) {
      br.setFollowRedirects(true);
      br.getPage(link.getDownloadURL());
      String urlpart=""String_Node_Str"";
      String correctUrl=urlpart + br.getRegex(""String_Node_Str"").getMatch(0);
      link.setUrlDownload(correctUrl);
    }
  }
}"
21025,"public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  if (isVideo) {
    FilePackage fp=FilePackage.getInstance();
    String packagename=br.getRegex(""String_Node_Str"").getMatch(0);
    fp.setName(packagename);
    if (packagename != null) {
      downloadLink.setName(packagename + ""String_Node_Str"");
      fp.add(downloadLink);
      return AvailableStatus.TRUE;
    }
  }
 else {
    String redirect=br.getRegex(""String_Node_Str"").getMatch(0);
    br.setCookie(redirect,""String_Node_Str"",""String_Node_Str"");
    br.getPage(redirect);
    if (!(br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))) {
      String filename=br.getRegex(""String_Node_Str"").getMatch(0);
      String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
      if (!(filename == null || filesize == null)) {
        downloadLink.setName(filename);
        downloadLink.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
        return AvailableStatus.TRUE;
      }
    }
  }
  throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
}","public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  if (Regex.matches(downloadLink.getDownloadURL(),""String_Node_Str"")) {
    this.isVideo=true;
    String filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename != null) {
      downloadLink.setFinalFileName(filename + ""String_Node_Str"");
      return AvailableStatus.TRUE;
    }
  }
 else {
    String redirect=br.getRegex(""String_Node_Str"").getMatch(0);
    br.setCookie(redirect,""String_Node_Str"",""String_Node_Str"");
    br.getPage(redirect);
    if (!(br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))) {
      String filename=br.getRegex(""String_Node_Str"").getMatch(0);
      String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
      if (!(filename == null || filesize == null)) {
        downloadLink.setName(filename);
        downloadLink.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
        return AvailableStatus.TRUE;
      }
    }
  }
  throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
}"
21026,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  if (parameter.matches(""String_Node_Str"")) {
    parameter=parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    decryptedLinks.add(createDownloadlink(parameter));
  }
 else {
    br.getPage(parameter);
    String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links.length == 0)     return null;
    for (    String dl : links) {
      dl=dl.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      decryptedLinks.add(createDownloadlink(dl));
    }
  }
  return decryptedLinks;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  if (parameter.matches(""String_Node_Str"")) {
    parameter=parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    decryptedLinks.add(createDownloadlink(parameter));
  }
 else {
    br.getPage(parameter);
    String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links.length == 0)     return null;
    for (    String dl : links) {
      dl=dl.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      decryptedLinks.add(createDownloadlink(dl));
    }
  }
  return decryptedLinks;
}"
21027,"public void correctDownloadLink(DownloadLink link) throws Exception {
  link.setUrlDownload(link.getDownloadURL().replaceFirst(""String_Node_Str"",""String_Node_Str""));
}","@Override public void correctDownloadLink(DownloadLink link) throws Exception {
  link.setUrlDownload(link.getDownloadURL().replaceFirst(""String_Node_Str"",""String_Node_Str""));
}"
21028,"public int getMaxSimultanFreeDownloadNum(){
  return 3;
}","@Override public int getMaxSimultanFreeDownloadNum(){
  return 3;
}"
21029,"public void init(){
  dont:   if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN)) {
    SubConfiguration cfg=SubConfiguration.getConfig(DIALOGS_CONFIG);
    Object value;
    if ((value=cfg.getProperty(getDontShowAgainKey())) != null && value instanceof Integer) {
      int i=((Integer)value).intValue();
      int ret=(i & (UserIO.RETURN_OK | UserIO.RETURN_CANCEL)) | UserIO.RETURN_DONT_SHOW_AGAIN | UserIO.RETURN_SKIPPED_BY_DONT_SHOW;
      if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN_IGNORES_CANCEL) && JDFlags.hasAllFlags(ret,UserIO.RETURN_CANCEL)) {
        break dont;
      }
      if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN_IGNORES_OK) && JDFlags.hasAllFlags(ret,UserIO.RETURN_OK)) {
        break dont;
      }
      this.returnValue=ret;
      return;
    }
  }
  this.setModal(true);
  this.setLayout(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  this.buttonBar=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  btnOK=new JButton(this.okOption);
  JButton focus=btnOK;
  btnOK.addActionListener(this);
  btnCancel=new JButton(this.cancelOption);
  btnCancel.addActionListener(this);
  if (icon != null) {
    add(new JLabel(this.icon),""String_Node_Str"");
  }
  contentpane=contentInit();
  add(contentpane,""String_Node_Str"");
  add(this.countDownLabel,""String_Node_Str"");
  if ((flag & UserIO.DONT_SHOW_AGAIN) > 0) {
    dont=new JCheckBox();
    dont.setHorizontalAlignment(JCheckBox.TRAILING);
    add(dontlabel=new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"")));
    add(dont,""String_Node_Str"");
  }
  add(buttonBar,""String_Node_Str"");
  if ((flag & UserIO.NO_OK_OPTION) == 0) {
    getRootPane().setDefaultButton(btnOK);
    btnOK.addHierarchyListener(new HierarchyListener(){
      public void hierarchyChanged(      HierarchyEvent e){
        if ((e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) != 0) {
          JButton defaultButton=(JButton)e.getComponent();
          JRootPane root=SwingUtilities.getRootPane(defaultButton);
          if (root != null) {
            root.setDefaultButton(defaultButton);
          }
        }
      }
    }
);
    focus=btnOK;
    buttonBar.add(btnOK,""String_Node_Str"");
  }
  if ((flag & UserIO.NO_CANCEL_OPTION) == 0) {
    buttonBar.add(btnCancel,""String_Node_Str"");
    if ((flag & UserIO.NO_OK_OPTION) != 0) {
      this.getRootPane().setDefaultButton(btnCancel);
      btnCancel.requestFocusInWindow();
      focus=btnCancel;
    }
  }
  this.addButtons(buttonBar);
  this.setMinimumSize(new Dimension(300,-1));
  if (JDFlags.hasNoFlags(flag,UserIO.NO_COUNTDOWN)) {
    this.countdown(UserIO.getCountdownTime());
  }
 else {
    countDownLabel.setVisible(false);
  }
  if (dont != null) {
    btnOK.addMouseListener(new JDMouseAdapter(){
      public void mouseEntered(      MouseEvent e){
        if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN_IGNORES_OK)) {
          dont.setEnabled(false);
          dontlabel.setEnabled(false);
        }
      }
      public void mouseExited(      MouseEvent e){
        dont.setEnabled(true);
        dontlabel.setEnabled(true);
      }
    }
);
    btnCancel.addMouseListener(new JDMouseAdapter(){
      public void mouseEntered(      MouseEvent e){
        if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN_IGNORES_CANCEL)) {
          dont.setEnabled(false);
          dontlabel.setEnabled(false);
        }
      }
      public void mouseExited(      MouseEvent e){
        dont.setEnabled(true);
        dontlabel.setEnabled(true);
      }
    }
);
  }
  this.setAlwaysOnTop(true);
  this.invalidate();
  this.pack();
  this.setResizable(true);
  this.toFront();
  this.setMinimumSize(this.getPreferredSize());
  if (DEFAULT_DIMENSION != null)   this.setSize(DEFAULT_DIMENSION);
  if (SwingGui.getInstance() == null) {
    this.setLocation(Screen.getCenterOfComponent(null,this));
  }
 else   if (SwingGui.getInstance().getMainFrame().getExtendedState() == JFrame.ICONIFIED || !SwingGui.getInstance().getMainFrame().isVisible()) {
    this.setLocation(Screen.getDockBottomRight(this));
  }
 else {
    this.setLocation(Screen.getCenterOfComponent(SwingGui.getInstance().getMainFrame(),this));
  }
  KeyStroke ks=KeyStroke.getKeyStroke(""String_Node_Str"");
  focus.getInputMap().put(ks,""String_Node_Str"");
  focus.getInputMap(JButton.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(ks,""String_Node_Str"");
  focus.getInputMap(JButton.WHEN_IN_FOCUSED_WINDOW).put(ks,""String_Node_Str"");
  focus.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    private static final long serialVersionUID=-4143073679291503041L;
    public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
);
  focus.requestFocus();
  this.packed();
  this.setVisible(true);
}","public void init(){
  dont:   if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN)) {
    SubConfiguration cfg=SubConfiguration.getConfig(DIALOGS_CONFIG);
    Object value;
    if ((value=cfg.getProperty(getDontShowAgainKey())) != null && value instanceof Integer) {
      int i=((Integer)value).intValue();
      int ret=(i & (UserIO.RETURN_OK | UserIO.RETURN_CANCEL)) | UserIO.RETURN_DONT_SHOW_AGAIN | UserIO.RETURN_SKIPPED_BY_DONT_SHOW;
      if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN_IGNORES_CANCEL) && JDFlags.hasAllFlags(ret,UserIO.RETURN_CANCEL)) {
        break dont;
      }
      if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN_IGNORES_OK) && JDFlags.hasAllFlags(ret,UserIO.RETURN_OK)) {
        break dont;
      }
      this.returnValue=ret;
      return;
    }
  }
  this.setModal(true);
  this.setLayout(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  this.buttonBar=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  btnOK=new JButton(this.okOption);
  JButton focus=btnOK;
  btnOK.addActionListener(this);
  btnCancel=new JButton(this.cancelOption);
  btnCancel.addActionListener(this);
  if (icon != null) {
    add(new JLabel(this.icon),""String_Node_Str"");
  }
  contentpane=contentInit();
  add(contentpane,""String_Node_Str"");
  add(this.countDownLabel,""String_Node_Str"");
  if ((flag & UserIO.DONT_SHOW_AGAIN) > 0) {
    dont=new JCheckBox();
    dont.setHorizontalAlignment(JCheckBox.TRAILING);
    add(dontlabel=new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"")));
    add(dont,""String_Node_Str"");
  }
  add(buttonBar,""String_Node_Str"");
  if ((flag & UserIO.NO_OK_OPTION) == 0) {
    getRootPane().setDefaultButton(btnOK);
    btnOK.addHierarchyListener(new HierarchyListener(){
      public void hierarchyChanged(      HierarchyEvent e){
        if ((e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) != 0) {
          JButton defaultButton=(JButton)e.getComponent();
          JRootPane root=SwingUtilities.getRootPane(defaultButton);
          if (root != null) {
            root.setDefaultButton(defaultButton);
          }
        }
      }
    }
);
    focus=btnOK;
    buttonBar.add(btnOK,""String_Node_Str"");
  }
  if ((flag & UserIO.NO_CANCEL_OPTION) == 0) {
    buttonBar.add(btnCancel,""String_Node_Str"");
    if ((flag & UserIO.NO_OK_OPTION) != 0) {
      this.getRootPane().setDefaultButton(btnCancel);
      btnCancel.requestFocusInWindow();
      focus=btnCancel;
    }
  }
  this.addButtons(buttonBar);
  this.setMinimumSize(new Dimension(300,-1));
  if (JDFlags.hasNoFlags(flag,UserIO.NO_COUNTDOWN)) {
    this.countdown(UserIO.getCountdownTime());
  }
 else {
    countDownLabel.setVisible(false);
  }
  if (dont != null) {
    btnOK.addMouseListener(new JDMouseAdapter(){
      public void mouseEntered(      MouseEvent e){
        if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN_IGNORES_OK)) {
          dont.setEnabled(false);
          dontlabel.setEnabled(false);
        }
      }
      public void mouseExited(      MouseEvent e){
        dont.setEnabled(true);
        dontlabel.setEnabled(true);
      }
    }
);
    btnCancel.addMouseListener(new JDMouseAdapter(){
      public void mouseEntered(      MouseEvent e){
        if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN_IGNORES_CANCEL)) {
          dont.setEnabled(false);
          dontlabel.setEnabled(false);
        }
      }
      public void mouseExited(      MouseEvent e){
        dont.setEnabled(true);
        dontlabel.setEnabled(true);
      }
    }
);
  }
  this.invalidate();
  this.pack();
  this.setResizable(true);
  this.toFront();
  this.setMinimumSize(this.getPreferredSize());
  if (DEFAULT_DIMENSION != null)   this.setSize(DEFAULT_DIMENSION);
  if (SwingGui.getInstance() == null) {
    this.setLocation(Screen.getCenterOfComponent(null,this));
  }
 else   if (SwingGui.getInstance().getMainFrame().getExtendedState() == JFrame.ICONIFIED || !SwingGui.getInstance().getMainFrame().isVisible()) {
    this.setLocation(Screen.getDockBottomRight(this));
  }
 else {
    this.setLocation(Screen.getCenterOfComponent(SwingGui.getInstance().getMainFrame(),this));
  }
  KeyStroke ks=KeyStroke.getKeyStroke(""String_Node_Str"");
  focus.getInputMap().put(ks,""String_Node_Str"");
  focus.getInputMap(JButton.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(ks,""String_Node_Str"");
  focus.getInputMap(JButton.WHEN_IN_FOCUSED_WINDOW).put(ks,""String_Node_Str"");
  focus.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    private static final long serialVersionUID=-4143073679291503041L;
    public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
);
  focus.requestFocus();
  this.packed();
  this.setVisible(true);
  DummyFrame.getDialogParent().setAlwaysOnTop(true);
  DummyFrame.getDialogParent().setAlwaysOnTop(false);
}"
21030,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  for (int retry=0; retry < 5; retry++) {
    LoadImage li=LoadImage.loadFile(getHost());
    li.baseUrl=param.toString();
    li.load(getHost());
    String captchaCode=getCaptchaCode(""String_Node_Str"",li.file,param);
    captchaCode=captchaCode.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (captchaCode.contains(""String_Node_Str"")) {
      String[] values=captchaCode.split(""String_Node_Str"");
      captchaCode=Integer.toString(Integer.parseInt(values[0]) - Integer.parseInt(values[1]));
    }
 else     if (captchaCode.contains(""String_Node_Str"")) {
      String[] values=captchaCode.split(""String_Node_Str"");
      captchaCode=Integer.toString(Integer.parseInt(values[0]) + Integer.parseInt(values[1]));
    }
    br=li.br;
    Form form=br.getForm(0);
    form.getInputFieldByType(""String_Node_Str"").setValue(captchaCode);
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      break;
    }
  }
  if (!br.containsHTML(""String_Node_Str""))   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  for (  String link : links) {
    decryptedLinks.add(createDownloadlink(link));
  }
  String container=""String_Node_Str"" + getHost() + ""String_Node_Str""+ br.getRegex(""String_Node_Str"").getMatch(0);
  if (container != null && decryptedLinks.size() == 0) {
    File containerFile=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + container);
    Browser.download(containerFile,container);
    decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(containerFile));
    containerFile.delete();
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  for (int retry=0; retry < 5; retry++) {
    LoadImage li=LoadImage.loadFile(""String_Node_Str"");
    li.baseUrl=param.toString();
    li.load(getHost());
    String captchaCode=getCaptchaCode(""String_Node_Str"",li.file,param);
    captchaCode=captchaCode.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (captchaCode.contains(""String_Node_Str"")) {
      String[] values=captchaCode.split(""String_Node_Str"");
      captchaCode=Integer.toString(Integer.parseInt(values[0]) - Integer.parseInt(values[1]));
    }
 else     if (captchaCode.contains(""String_Node_Str"")) {
      String[] values=captchaCode.split(""String_Node_Str"");
      captchaCode=Integer.toString(Integer.parseInt(values[0]) + Integer.parseInt(values[1]));
    }
    br=li.br;
    Form form=br.getForm(0);
    form.getInputFieldByType(""String_Node_Str"").setValue(captchaCode);
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      break;
    }
  }
  if (!br.containsHTML(""String_Node_Str""))   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  for (  String link : links) {
    decryptedLinks.add(createDownloadlink(link));
  }
  String container=""String_Node_Str"" + getHost() + ""String_Node_Str""+ br.getRegex(""String_Node_Str"").getMatch(0);
  if (container != null && decryptedLinks.size() == 0) {
    File containerFile=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + container);
    Browser.download(containerFile,container);
    decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(containerFile));
    containerFile.delete();
  }
  return decryptedLinks;
}"
21031,"public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  String freepage=downloadLink.getDownloadURL() + ""String_Node_Str"";
  br.getPage(freepage);
  String captchaid=br.getRegex(""String_Node_Str"").getMatch(0);
  if (captchaid == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String captchaurl=""String_Node_Str"" + captchaid;
  String code=getCaptchaCode(captchaurl,downloadLink);
  Form captchaForm=br.getForm(2);
  if (captchaForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  captchaForm.put(""String_Node_Str"",code);
  br.submitForm(captchaForm);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  Form DLForm0=br.getForm(2);
  if (DLForm0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  br.submitForm(DLForm0);
  String dlframe=downloadLink.getDownloadURL() + ""String_Node_Str"";
  br.getPage(dlframe);
  String dllink0=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String dllink1=""String_Node_Str"" + dllink0;
  br.getPage(dllink1);
  String dllink=br.getRedirectLocation();
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,-20);
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  String freepage=downloadLink.getDownloadURL() + ""String_Node_Str"";
  br.getPage(freepage);
  String captchaid=br.getRegex(""String_Node_Str"").getMatch(0);
  if (captchaid == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String captchaurl=""String_Node_Str"" + captchaid;
  String code=getCaptchaCode(captchaurl,downloadLink);
  Form captchaForm=br.getForm(2);
  if (captchaForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  captchaForm.put(""String_Node_Str"",code);
  br.submitForm(captchaForm);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  Form DLForm0=br.getForm(2);
  if (DLForm0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  br.submitForm(DLForm0);
  String dlframe=downloadLink.getDownloadURL() + ""String_Node_Str"";
  br.getPage(dlframe);
  String dllink0=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String dllink1=""String_Node_Str"" + dllink0;
  br.getPage(dllink1);
  String dllink=br.getRedirectLocation();
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  dl.startDownload();
}"
21032,"public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  String freepage=link.getDownloadURL() + ""String_Node_Str"";
  br.getPage(freepage);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setName(filename);
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  String freepage=link.getDownloadURL() + ""String_Node_Str"";
  br.getPage(freepage);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setFinalFileName(filename);
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
21033,"public static void main(String ss[]) throws Exception {
  String[] list=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  while (true) {
    long time=0;
    long s, e;
    Browser br=new Browser();
    for (    String serv : list) {
      s=System.currentTimeMillis();
      try {
        URLConnectionAdapter con=br.openGetConnection(serv + ""String_Node_Str"");
        e=System.currentTimeMillis();
        con.disconnect();
      }
 catch (      Exception ee) {
        e=100000;
        ee.printStackTrace();
      }
      System.out.println(serv + ""String_Node_Str"" + (e - s));
      time+=(e - s);
    }
    time/=list.length;
    System.err.println(""String_Node_Str"" + time);
    Thread.sleep(10000);
  }
}","/** 
 * pings the updateservers to observe them
 * @param ss
 * @throws Exception
 */
public static void main(String ss[]) throws Exception {
  String[] list=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  while (true) {
    long time=0;
    long s, e;
    Browser br=new Browser();
    File file=File.createTempFile(""String_Node_Str"" + System.currentTimeMillis(),""String_Node_Str"");
    for (    String serv : list) {
      s=System.currentTimeMillis();
      try {
        URLConnectionAdapter con=br.openGetConnection(serv + ""String_Node_Str"");
        System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - s) + ""String_Node_Str"");
        br.downloadConnection(file,con);
        e=System.currentTimeMillis();
        con.disconnect();
      }
 catch (      Exception ee) {
        e=100000;
        ee.printStackTrace();
      }
      System.out.println(serv + ""String_Node_Str"" + (e - s));
      time+=(e - s);
    }
    time/=(list.length);
    System.err.println(""String_Node_Str"" + file.length() / time + ""String_Node_Str"");
    Thread.sleep(10000);
  }
}"
21034,"/** 
 * Recursive method used to find all classes in a given directory and subdirs.
 * @author DZone Snippts Section. http://snippets.dzone.com/posts/show/4831
 * @param directory
 * @param packageName
 * @return
 * @throws ClassNotFoundException
 */
private static List<Class<?>> findPlugins(URL directory,String packageName,ClassLoader classLoader) throws ClassNotFoundException {
  ArrayList<Class<?>> classes=new ArrayList<Class<?>>();
  File[] files=null;
  try {
    files=new File(directory.toURI().getPath()).listFiles();
  }
 catch (  Exception e) {
  }
  if (files == null) {
    try {
      String path=directory.toString().substring(4);
      String[] splitted=path.split(""String_Node_Str"");
      splitted[1]=splitted[1].substring(1);
      File file=new File(new URL(splitted[0]).toURI());
      JarInputStream jarFile=new JarInputStream(new FileInputStream(file));
      JarEntry e;
      while ((e=jarFile.getNextJarEntry()) != null) {
        if (e.getName().startsWith(splitted[1])) {
          Class<?> c=classLoader.loadClass(e.getName().substring(0,e.getName().length() - 6).replace(""String_Node_Str"",""String_Node_Str""));
          if (c != null) {
            classes.add(c);
          }
        }
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
 else {
    for (    File file : files) {
      if (file.isDirectory()) {
        try {
          classes.addAll(findPlugins(file.toURI().toURL(),packageName + ""String_Node_Str"" + file.getName(),classLoader));
        }
 catch (        MalformedURLException e) {
          e.printStackTrace();
        }
      }
 else       if (file.getName().endsWith(""String_Node_Str"")) {
        Class<?> c=classLoader.loadClass(packageName + '.' + file.getName().substring(0,file.getName().length() - 6));
        classes.add(c);
      }
    }
  }
  return classes;
}","/** 
 * Recursive method used to find all classes in a given directory and subdirs.
 * @author DZone Snippts Section. http://snippets.dzone.com/posts/show/4831
 * @param directory
 * @param packageName
 * @return
 * @throws ClassNotFoundException
 */
private static List<Class<?>> findPlugins(URL directory,String packageName,ClassLoader classLoader) throws ClassNotFoundException {
  ArrayList<Class<?>> classes=new ArrayList<Class<?>>();
  File[] files=null;
  try {
    files=new File(directory.toURI().getPath()).listFiles();
  }
 catch (  Exception e) {
  }
  if (files == null) {
    try {
      String path=directory.toString().substring(4);
      String[] splitted=path.split(""String_Node_Str"");
      splitted[1]=splitted[1].substring(1);
      File file=new File(new URL(splitted[0]).toURI());
      JarInputStream jarFile=new JarInputStream(new FileInputStream(file));
      JarEntry e;
      while ((e=jarFile.getNextJarEntry()) != null) {
        if (e.getName().startsWith(splitted[1])) {
          Class<?> c=classLoader.loadClass(e.getName().substring(0,e.getName().length() - 6).replace(""String_Node_Str"",""String_Node_Str""));
          if (c != null) {
            classes.add(c);
          }
        }
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
 else {
    for (    File file : files) {
      try {
        if (file.isDirectory()) {
          try {
            classes.addAll(findPlugins(file.toURI().toURL(),packageName + ""String_Node_Str"" + file.getName(),classLoader));
          }
 catch (          MalformedURLException e) {
            e.printStackTrace();
          }
        }
 else         if (file.getName().endsWith(""String_Node_Str"")) {
          Class<?> c=classLoader.loadClass(packageName + '.' + file.getName().substring(0,file.getName().length() - 6));
          classes.add(c);
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
  return classes;
}"
21035,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  String[] redirectLinks=br.getRegex(""String_Node_Str"").getColumn(0);
  if (redirectLinks.length == 0)   return null;
  FilePackage fp=FilePackage.getInstance();
  String password=br.getRegex(""String_Node_Str"").getMatch(0);
  String name=br.getRegex(""String_Node_Str"").getMatch(0);
  fp.setPassword(password);
  fp.setName(name);
  for (  String redlnk : redirectLinks) {
    br.getPage(""String_Node_Str"" + redlnk);
    handleCaptcha();
    String[] hostLinks=br.getRegex(""String_Node_Str"").getColumn(0);
    for (    String hstlnk : hostLinks) {
      DownloadLink dl=createDownloadlink(hstlnk);
      dl.setFilePackage(fp);
      decryptedLinks.add(dl);
    }
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  if (parameter.matches(""String_Node_Str""))   domain=""String_Node_Str"";
 else   if (parameter.matches(""String_Node_Str""))   domain=""String_Node_Str"";
  br.getPage(parameter);
  String[] redirectLinks=br.getRegex(""String_Node_Str"").getColumn(0);
  if (redirectLinks.length == 0)   return null;
  FilePackage fp=FilePackage.getInstance();
  String password=br.getRegex(""String_Node_Str"").getMatch(0);
  String name=br.getRegex(""String_Node_Str"").getMatch(0);
  fp.setPassword(password);
  fp.setName(name);
  for (  String redlnk : redirectLinks) {
    br.getPage(this.domain + redlnk);
    handleCaptcha();
    String[] hostLinks=br.getRegex(""String_Node_Str"").getColumn(0);
    for (    String hstlnk : hostLinks) {
      DownloadLink dl=createDownloadlink(hstlnk);
      dl.setFilePackage(fp);
      decryptedLinks.add(dl);
    }
  }
  return decryptedLinks;
}"
21036,"public void handleCaptcha() throws Exception {
  boolean valid=true;
  for (int i=0; i < 5; ++i) {
    if (br.containsHTML(""String_Node_Str"")) {
      Form captcha=br.getForm(1);
      captcha.setAction(""String_Node_Str"" + captcha.getAction());
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=""String_Node_Str"" + captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),JDL.L(""String_Node_Str"",""String_Node_Str""));
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else {
      valid=true;
      break;
    }
  }
  if (valid == false)   throw new DecrypterException(DecrypterException.CAPTCHA);
}","public void handleCaptcha() throws Exception {
  boolean valid=true;
  for (int i=0; i < 5; ++i) {
    if (br.containsHTML(""String_Node_Str"")) {
      Form captcha=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      captcha.setAction(this.domain + captcha.getAction());
      valid=false;
      File file=this.getLocalCaptchaFile();
      String url=this.domain + captcha.getRegex(""String_Node_Str"").getMatch(0);
      Browser.download(file,br.cloneBrowser().openGetConnection(url));
      Point p=UserIO.getInstance().requestClickPositionDialog(file,JDL.L(""String_Node_Str"",""String_Node_Str""),JDL.L(""String_Node_Str"",""String_Node_Str""));
      if (p == null)       throw new DecrypterException(DecrypterException.CAPTCHA);
      captcha.put(""String_Node_Str"",""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
      captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
      br.submitForm(captcha);
    }
 else {
      valid=true;
      break;
    }
  }
  if (valid == false)   throw new DecrypterException(DecrypterException.CAPTCHA);
}"
21037,"/** 
 * Name des Hintergrundbildes setzen
 * @param backgroundImage
 */
public void setBackgroundImage(String backgroundImage){
  this.backgroundImage=backgroundImage;
}","/** 
 * Name des Hintergrundbildes setzen
 * @param backgroundImage
 */
public void setBackgroundImage(String backgroundImage){
  image=null;
  this.backgroundImage=backgroundImage;
}"
21038,"private void addActionListeners(){
  btColorChoose.addActionListener(this);
  btPreview.addActionListener(this);
  btFinished.addActionListener(this);
  btLoadBackgroundImage.addActionListener(this);
  btCreateBackgroundFilter.addActionListener(this);
  mode.addActionListener(this);
}","private void addActionListeners(){
  btColorChoose.addActionListener(this);
  btPreview.addActionListener(this);
  btFinished.addActionListener(this);
  btLoadBackgroundImage.addActionListener(this);
  btCreateBackgroundFilter.addActionListener(this);
  colorModeBox.addActionListener(this);
}"
21039,"public void actionPerformed(final ActionEvent e){
  if (e.getSource() == btPreview) {
    dialogImage.setDistance((Integer)thresholdSpinner.getValue());
    dialogImage.setColorDistanceMode(modeByte);
    dialogImage.setColor(colorChooser.getColor().getRGB());
    bgim.add(dialogImage);
    bgim.clearCaptchaAll();
    bgim.remove(dialogImage);
    final Image image2=bgim.getScaledCaptchaImage();
    new GuiRunnable<Object>(){
      public Object runSave(){
        bgv.image=image2;
        bgv.repaint();
        return null;
      }
    }
.waitForEDT();
  }
 else   if (e.getSource() == btColorChoose) {
    new GuiRunnable<Object>(){
      public Object runSave(){
        JDialog dialog=JColorChooser.createDialog(colorChooser,JDL.L(""String_Node_Str"",""String_Node_Str""),true,colorChooser,null,null);
        dialog.setVisible(true);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        return null;
      }
    }
.waitForEDT();
  }
 else   if (e.getSource() == btFinished) {
    bgim.add(dialogImage);
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.dispose();
        return null;
      }
    }
.waitForEDT();
    ret=dialogImage;
  }
 else   if (e.getSource() == btLoadBackgroundImage) {
    File fch=JDFileChooser.getFile(JDFileChooser.ImagesOnly);
    File fout=new File(bgim.methode.file,""String_Node_Str"" + JDHash.getMD5(fch) + ""String_Node_Str""+ JDIO.getFileExtension(fch));
    JDIO.copyFile(fch,fout);
    dialogImage=new BackGroundImage();
    dialogImage.setBackgroundImage(fout.getName());
    dialogImage.setColor(colorChooser.getColor().getRGB());
    dialogImage.setDistance((Integer)thresholdSpinner.getValue());
    dialogImage.setColorDistanceMode(modeByte);
    bgim.add(dialogImage);
    bgim.clearCaptchaAll();
    bgim.remove(dialogImage);
    btPreview.setEnabled(true);
    final Image image2=bgim.getScaledCaptchaImage();
    new GuiRunnable<Object>(){
      public Object runSave(){
        bgv.image=image2;
        bgv.repaint();
        return null;
      }
    }
.waitForEDT();
  }
 else   if (e.getSource() == btCreateBackgroundFilter) {
    File fout=BackgroundFilterCreater.create(bgim.methode);
    dialogImage=new BackGroundImage();
    dialogImage.setBackgroundImage(fout.getName());
    dialogImage.setColor(colorChooser.getColor().getRGB());
    dialogImage.setDistance((Integer)thresholdSpinner.getValue());
    dialogImage.setColorDistanceMode(modeByte);
    bgim.add(dialogImage);
    bgim.clearCaptchaAll();
    bgim.remove(dialogImage);
    btPreview.setEnabled(true);
    final Image image2=bgim.getScaledCaptchaImage();
    new GuiRunnable<Object>(){
      public Object runSave(){
        bgv.image=image2;
        bgv.repaint();
        return null;
      }
    }
.waitForEDT();
  }
 else   if (e.getSource() == mode) {
    modeByte=((ColorMode)mode.getSelectedItem()).mode;
  }
}","public void actionPerformed(final ActionEvent e){
  if (e.getSource() == btPreview) {
    dialogImage.setDistance((Integer)thresholdSpinner.getValue());
    dialogImage.setColorDistanceMode(colorMode);
    dialogImage.setColor(colorChooser.getColor().getRGB());
    bgim.add(dialogImage);
    bgim.clearCaptchaAll();
    bgim.remove(dialogImage);
    final Image image2=bgim.getScaledCaptchaImage();
    new GuiRunnable<Object>(){
      public Object runSave(){
        bgv.image=image2;
        bgv.repaint();
        return null;
      }
    }
.waitForEDT();
  }
 else   if (e.getSource() == btColorChoose) {
    new GuiRunnable<Object>(){
      public Object runSave(){
        JDialog dialog=JColorChooser.createDialog(colorChooser,JDL.L(""String_Node_Str"",""String_Node_Str""),true,colorChooser,null,null);
        dialog.setVisible(true);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        return null;
      }
    }
.waitForEDT();
  }
 else   if (e.getSource() == btFinished) {
    if (dialogImage != null)     bgim.add(dialogImage);
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.dispose();
        return null;
      }
    }
.waitForEDT();
    ret=dialogImage;
  }
 else   if (e.getSource() == btLoadBackgroundImage) {
    File fch=JDFileChooser.getFile(JDFileChooser.ImagesOnly);
    if (fch != null) {
      File fout=new File(bgim.methode.file,""String_Node_Str"" + JDHash.getMD5(fch) + ""String_Node_Str""+ JDIO.getFileExtension(fch));
      JDIO.copyFile(fch,fout);
      dialogImage=new BackGroundImage();
      dialogImage.setBackgroundImage(fout.getName());
      dialogImage.setColor(colorChooser.getColor().getRGB());
      dialogImage.setDistance((Integer)thresholdSpinner.getValue());
      dialogImage.setColorDistanceMode(colorMode);
      bgim.add(dialogImage);
      bgim.clearCaptchaAll();
      bgim.remove(dialogImage);
      btPreview.setEnabled(true);
      final Image image2=bgim.getScaledCaptchaImage();
      new GuiRunnable<Object>(){
        public Object runSave(){
          bgv.image=image2;
          bgv.repaint();
          return null;
        }
      }
.waitForEDT();
    }
  }
 else   if (e.getSource() == btCreateBackgroundFilter) {
    File fout=BackgroundFilterCreater.create(bgim.methode);
    if (fout != null && fout.exists()) {
      dialogImage=new BackGroundImage();
      dialogImage.setBackgroundImage(fout.getName());
      dialogImage.setColor(colorChooser.getColor().getRGB());
      dialogImage.setDistance((Integer)thresholdSpinner.getValue());
      dialogImage.setColorDistanceMode(colorMode);
      bgim.add(dialogImage);
      bgim.clearCaptchaAll();
      bgim.remove(dialogImage);
      btPreview.setEnabled(true);
      final Image image2=bgim.getScaledCaptchaImage();
      new GuiRunnable<Object>(){
        public Object runSave(){
          bgv.image=image2;
          bgv.repaint();
          return null;
        }
      }
.waitForEDT();
    }
  }
 else   if (e.getSource() == colorModeBox) {
    colorMode=((ColorMode)colorModeBox.getSelectedItem()).mode;
  }
}"
21040,"private void initCaptchaImages(){
  bgim.getCaptchaImage().reset();
  final Image image=bgim.getScaledCaptchaImage();
  new GuiRunnable<Object>(){
    public Object runSave(){
      images=new JPanel();
      images.setBorder(new TitledBorder(JDL.L(""String_Node_Str"",""String_Node_Str"")));
      images.setLayout(new BoxLayout(images,BoxLayout.Y_AXIS));
      images.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"")));
      bg1=new ImageComponent(image);
      images.add(bg1);
      images.add(Box.createRigidArea(new Dimension(0,10)));
      images.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
      if (dialogImage != null) {
        threshold=dialogImage.getDistance();
        modeByte=dialogImage.getColorDistanceMode();
        bgim.add(dialogImage);
        bgim.clearCaptchaAll();
        bgim.remove(dialogImage);
      }
 else       bgim.clearCaptchaAll();
      bgv=new ImageComponent(bgim.getScaledCaptchaImage());
      images.add(bgv);
      return null;
    }
  }
.waitForEDT();
}","private void initCaptchaImages(){
  bgim.getCaptchaImage().reset();
  final Image image=bgim.getScaledCaptchaImage();
  new GuiRunnable<Object>(){
    public Object runSave(){
      imagePanel=new JPanel();
      imagePanel.setBorder(new TitledBorder(JDL.L(""String_Node_Str"",""String_Node_Str"")));
      imagePanel.setLayout(new BoxLayout(imagePanel,BoxLayout.Y_AXIS));
      imagePanel.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"")));
      bg1=new ImageComponent(image);
      imagePanel.add(bg1);
      imagePanel.add(Box.createRigidArea(new Dimension(0,10)));
      imagePanel.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
      if (dialogImage != null) {
        threshold=dialogImage.getDistance();
        colorMode=dialogImage.getColorDistanceMode();
        bgim.add(dialogImage);
        bgim.clearCaptchaAll();
        bgim.remove(dialogImage);
      }
 else       bgim.clearCaptchaAll();
      bgv=new ImageComponent(bgim.getScaledCaptchaImage());
      imagePanel.add(bgv);
      return null;
    }
  }
.waitForEDT();
}"
21041,"private void addComponentsToDialog(){
  new GuiRunnable<Object>(){
    public Object runSave(){
      JPanel box=new JPanel();
      box.setLayout(new GridBagLayout());
      GridBagConstraints gbc=Utilities.getGBC(0,0,1,1);
      gbc.anchor=GridBagConstraints.NORTH;
      gbc.fill=GridBagConstraints.BOTH;
      gbc.weighty=1;
      gbc.weightx=1;
      box.add(images,gbc);
      Box menu=new Box(BoxLayout.X_AXIS);
      menu.add(btLoadBackgroundImage);
      menu.add(btCreateBackgroundFilter);
      menu.add(btColorChoose);
      menu.add(btPreview);
      menu.add(thresholdSpinner);
      menu.add(mode);
      menu.add(btFinished);
      gbc.gridy=1;
      box.add(menu,gbc);
      dialog.add(box);
      dialog.pack();
      addActionListeners();
      dialog.setVisible(true);
      return null;
    }
  }
.waitForEDT();
}","private void addComponentsToDialog(){
  new GuiRunnable<Object>(){
    public Object runSave(){
      JPanel box=new JPanel();
      box.setLayout(new GridBagLayout());
      GridBagConstraints gbc=Utilities.getGBC(0,0,1,1);
      gbc.anchor=GridBagConstraints.NORTH;
      gbc.fill=GridBagConstraints.BOTH;
      gbc.weighty=1;
      gbc.weightx=1;
      box.add(imagePanel,gbc);
      Box menu=new Box(BoxLayout.X_AXIS);
      menu.add(btLoadBackgroundImage);
      menu.add(btCreateBackgroundFilter);
      menu.add(btColorChoose);
      menu.add(btPreview);
      menu.add(thresholdSpinner);
      menu.add(colorModeBox);
      menu.add(btFinished);
      gbc.gridy=1;
      box.add(menu,gbc);
      dialog.add(box);
      dialog.pack();
      addActionListeners();
      dialog.setVisible(true);
      return null;
    }
  }
.waitForEDT();
}"
21042,"private void initComponents(){
  new GuiRunnable<Object>(){
    public Object runSave(){
      thresholdSpinner=new JSpinner(new SpinnerNumberModel(threshold,0,360,1));
      thresholdSpinner.setToolTipText(""String_Node_Str"");
      btLoadBackgroundImage=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      btCreateBackgroundFilter=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      Color defColor=Color.WHITE;
      if (dialogImage != null)       defColor=new Color(dialogImage.getColor());
      colorChooser=new JColorChooser(defColor);
      btColorChoose=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      btPreview=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      if (dialogImage == null)       btPreview.setEnabled(false);
      mode=new JComboBox(ColorMode.cModes);
      mode.setSelectedItem(new ColorMode(modeByte));
      btFinished=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return null;
    }
  }
.waitForEDT();
}","private void initComponents(){
  new GuiRunnable<Object>(){
    public Object runSave(){
      thresholdSpinner=new JSpinner(new SpinnerNumberModel(threshold,0,360,1));
      thresholdSpinner.setToolTipText(""String_Node_Str"");
      btLoadBackgroundImage=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      btCreateBackgroundFilter=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      Color defColor=Color.WHITE;
      if (dialogImage != null)       defColor=new Color(dialogImage.getColor());
      colorChooser=new JColorChooser(defColor);
      btColorChoose=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      btPreview=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      if (dialogImage == null)       btPreview.setEnabled(false);
      colorModeBox=new JComboBox(ColorMode.cModes);
      colorModeBox.setSelectedItem(new ColorMode(colorMode));
      btFinished=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return null;
    }
  }
.waitForEDT();
}"
21043,"public void actionPerformed(ActionEvent e){
  if (e.getSource() == btExit) {
    manager.save();
    new GuiRunnable<Object>(){
      public Object runSave(){
        mainDialog.dispose();
        return null;
      }
    }
.waitForEDT();
  }
 else   if (e.getSource() == btAdd) {
    BackGroundImageDialog bgiaDialog=new BackGroundImageDialog(manager);
    showImage(bgiaDialog.getNewBackGroundImage());
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == btExit) {
    manager.save();
    new GuiRunnable<Object>(){
      public Object runSave(){
        mainDialog.dispose();
        return null;
      }
    }
.waitForEDT();
  }
 else   if (e.getSource() == btAdd) {
    BackGroundImageDialog bgiaDialog=new BackGroundImageDialog(manager);
    showImage(bgiaDialog.getNewBackGroundImage());
    mainDialog.pack();
  }
}"
21044,"public void showImages(){
  new GuiRunnable<Object>(){
    public Object runSave(){
      imageBox=new JPanel();
      imageBox.setLayout(new BoxLayout(imageBox,BoxLayout.Y_AXIS));
      panel.add(imageBox);
      return null;
    }
  }
.waitForEDT();
  for (  BackGroundImage bgi : manager.getBackgroundList()) {
    bgi.getImage(manager.methode);
    showImage(bgi);
  }
}","public void showImages(){
  new GuiRunnable<Object>(){
    public Object runSave(){
      imageBox=new JPanel();
      imageBox.setLayout(new BoxLayout(imageBox,BoxLayout.Y_AXIS));
      panel.add(imageBox);
      return null;
    }
  }
.waitForEDT();
  for (  BackGroundImage bgi : manager.getBackgroundList()) {
    if (bgi != null) {
      bgi.getImage(manager.methode);
      showImage(bgi);
    }
  }
}"
21045,"void showImage(final BackGroundImage bgio){
  new GuiRunnable<Object>(){
    public Object runSave(){
      final JPanel tmpPanel=new JPanel();
      final ImageComponent ic=new ImageComponent(bgio.getImage(manager.methode));
      tmpPanel.add(ic,BorderLayout.WEST);
      final JButton edit=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      final JButton del=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      edit.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          new GuiRunnable<Object>(){
            public Object runSave(){
              tmpPanel.remove(ic);
              tmpPanel.remove(edit);
              tmpPanel.remove(del);
              BackGroundImage dialogImage=bgio;
              manager.remove(bgio);
              tmpPanel.revalidate();
              mainDialog.pack();
              BackGroundImageDialog bgiaDialog=new BackGroundImageDialog(manager);
              bgiaDialog.dialogImage=dialogImage;
              dialogImage=bgiaDialog.getNewBackGroundImage();
              showImage(dialogImage);
              return null;
            }
          }
.waitForEDT();
        }
      }
);
      del.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          new GuiRunnable<Object>(){
            public Object runSave(){
              tmpPanel.remove(ic);
              tmpPanel.remove(del);
              tmpPanel.remove(edit);
              manager.remove(bgio);
              tmpPanel.revalidate();
              mainDialog.pack();
              return null;
            }
          }
.waitForEDT();
        }
      }
);
      tmpPanel.add(edit,BorderLayout.SOUTH);
      tmpPanel.add(del,BorderLayout.EAST);
      imageBox.add(tmpPanel);
      return null;
    }
  }
.waitForEDT();
}","void showImage(final BackGroundImage bgio){
  if (bgio == null)   return;
  new GuiRunnable<Object>(){
    public Object runSave(){
      final JPanel tmpPanel=new JPanel();
      final ImageComponent ic=new ImageComponent(bgio.getImage(manager.methode));
      tmpPanel.add(ic,BorderLayout.WEST);
      final JButton edit=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      final JButton del=new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      edit.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          new GuiRunnable<Object>(){
            public Object runSave(){
              BackGroundImage dialogImage=bgio.clone();
              BackGroundImageDialog bgiaDialog=new BackGroundImageDialog(manager);
              bgiaDialog.dialogImage=dialogImage;
              dialogImage=bgiaDialog.getNewBackGroundImage();
              if (dialogImage != null) {
                if (!bgio.getBackgroundImage().equals(dialogImage.getBackgroundImage())) {
                  bgio.setBackgroundImage(dialogImage.getBackgroundImage());
                  ic.image=bgio.getImage(manager.methode);
                  ic.revalidate();
                  ic.repaint();
                }
                bgio.setColor(dialogImage.getColor());
                bgio.setColorDistanceMode(dialogImage.getColorDistanceMode());
                bgio.setDistance(dialogImage.getDistance());
              }
              return null;
            }
          }
.waitForEDT();
        }
      }
);
      del.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          new GuiRunnable<Object>(){
            public Object runSave(){
              tmpPanel.remove(ic);
              tmpPanel.remove(del);
              tmpPanel.remove(edit);
              manager.remove(bgio);
              tmpPanel.revalidate();
              mainDialog.pack();
              return null;
            }
          }
.waitForEDT();
        }
      }
);
      tmpPanel.add(edit,BorderLayout.SOUTH);
      tmpPanel.add(del,BorderLayout.EAST);
      imageBox.add(tmpPanel);
      return null;
    }
  }
.waitForEDT();
}"
21046,"public BackGroundImageGUIList(EasyFile methode){
  manager=new BackGroundImageManager(methode);
}","public BackGroundImageGUIList(EasyFile methode){
  this.manager=new BackGroundImageManager(methode);
}"
21047,"/** 
 * @return true wenn erfolgreich geladen wurde
 */
public boolean start(){
  try {
    loadinfo=getLoadInfo();
    if (loadinfo == null)     return false;
    final JDialog dialog=new GuiRunnable<JDialog>(){
      public JDialog runSave(){
        return new JDialog(owner);
      }
    }
.getReturnValue();
    dialog.setModal(true);
    dialog.setAlwaysOnTop(true);
    br.getPage(loadinfo.link);
    if (host == null) {
      host=br.getHost().toLowerCase();
      if (host.matches(""String_Node_Str""))       host=host.substring(host.indexOf('.') + 1);
    }
    if (dir == null)     dir=JDUtilities.getJDHomeDirectoryFromEnvironment().getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
    new File(dir).mkdir();
    if (loadDirect()) {
      if (opendir)       openDir(dir);
      return true;
    }
    dialog.setTitle(JDL.L(""String_Node_Str"",""String_Node_Str""));
    images=getAllImages(br);
    loadImages();
    dialog.addWindowListener(new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        for (        LoadImage loadImage : images) {
          loadImage.file.delete();
        }
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
);
    final ArrayList<JButton> bts=new ArrayList<JButton>();
    for (int j=0; j < images.size(); j++) {
      final LoadImage f=images.get(j);
      if (f == null || f.file == null || !f.file.exists() || f.file.length() < 100)       continue;
      final BufferedImage captchaImage=JDImage.getImage(f.file);
      if (captchaImage == null) {
        f.file.delete();
        continue;
      }
      int area=captchaImage.getHeight(null) * captchaImage.getHeight(null);
      if (area < 50 || area > 50000 || captchaImage.getHeight(null) > 400 || captchaImage.getWidth(null) > 400 || captchaImage.getWidth(null) < 10 || captchaImage.getHeight(null) < 5) {
        f.file.delete();
        continue;
      }
      double faktor=Math.max((double)captchaImage.getWidth(null) / 100,(double)captchaImage.getHeight(null) / 100);
      final int width=(int)(captchaImage.getWidth(null) / faktor);
      final int height=(int)(captchaImage.getHeight(null) / faktor);
      JButton ic=new GuiRunnable<JButton>(){
        public JButton runSave(){
          return new JButton(new ImageIcon(captchaImage.getScaledInstance(width,height,Image.SCALE_SMOOTH)));
        }
      }
.getReturnValue();
      ic.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          selectedImage=f;
        }
      }
);
      bts.add(ic);
    }
    final JPanel panel=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        return new JPanel(new GridLayout((int)Math.ceil(((double)bts.size()) / 5),5));
      }
    }
.getReturnValue();
    for (    JButton button : bts) {
      panel.add(button);
    }
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.add(new JScrollPane(panel));
        dialog.pack();
        dialog.setLocation(Screen.getCenterOfComponent(owner,dialog));
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    if (selectedImage != null && selectedImage.file != null) {
      loadProcess();
      if (opendir)       openDir(dir);
      return dir.length() > 0;
    }
 else     return false;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","/** 
 * @return true wenn erfolgreich geladen wurde
 */
public boolean start(){
  try {
    loadinfo=getLoadInfo();
    if (loadinfo == null)     return false;
    final JDialog dialog=new GuiRunnable<JDialog>(){
      public JDialog runSave(){
        return new JDialog(owner);
      }
    }
.getReturnValue();
    dialog.setModal(true);
    dialog.setAlwaysOnTop(true);
    br.getPage(loadinfo.link);
    if (host == null) {
      host=br.getHost().toLowerCase();
      if (host.matches(""String_Node_Str""))       host=host.substring(host.indexOf('.') + 1);
    }
    if (dir == null)     dir=JDUtilities.getJDHomeDirectoryFromEnvironment().getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
    new File(dir).mkdir();
    if (loadDirect()) {
      if (opendir)       openDir(dir);
      return true;
    }
    dialog.setTitle(JDL.L(""String_Node_Str"",""String_Node_Str""));
    images=getAllImages(br);
    loadImages();
    dialog.addWindowListener(new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        for (        LoadImage loadImage : images) {
          loadImage.file.delete();
        }
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
);
    final ArrayList<JButton> bts=new ArrayList<JButton>();
    for (int j=0; j < images.size(); j++) {
      final LoadImage f=images.get(j);
      if (f == null || f.file == null || !f.file.exists() || f.file.length() < 100)       continue;
      final BufferedImage captchaImage=JDImage.getImage(f.file);
      if (captchaImage == null) {
        f.file.delete();
        continue;
      }
      int area=captchaImage.getHeight(null) * captchaImage.getHeight(null);
      if (area < 50 || area > 50000 || captchaImage.getHeight(null) > 400 || captchaImage.getWidth(null) > 400 || captchaImage.getWidth(null) < 10 || captchaImage.getHeight(null) < 5) {
        f.file.delete();
        continue;
      }
      double faktor=Math.max((double)captchaImage.getWidth(null) / 100,(double)captchaImage.getHeight(null) / 100);
      final int width=(int)(captchaImage.getWidth(null) / faktor);
      final int height=(int)(captchaImage.getHeight(null) / faktor);
      JButton ic=new GuiRunnable<JButton>(){
        public JButton runSave(){
          return new JButton(new ImageIcon(captchaImage.getScaledInstance(width,height,Image.SCALE_SMOOTH)));
        }
      }
.getReturnValue();
      ic.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          selectedImage=f;
          dialog.dispose();
        }
      }
);
      bts.add(ic);
    }
    final JPanel panel=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        return new JPanel(new GridLayout((int)Math.ceil(((double)bts.size()) / 5),5));
      }
    }
.getReturnValue();
    for (    JButton button : bts) {
      panel.add(button);
    }
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.add(new JScrollPane(panel));
        dialog.pack();
        dialog.setLocation(Screen.getCenterOfComponent(owner,dialog));
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    if (selectedImage != null && selectedImage.file != null) {
      loadProcess();
      if (opendir)       openDir(dir);
      return dir.length() > 0;
    }
 else     return false;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}"
21048,"/** 
 * legt ein backup vom aktuellen Captcha an
 */
@SuppressWarnings(""String_Node_Str"") public void backUP(){
  colorPointListBackUp=(Vector<CPoint>)colorPointList.clone();
  backUpCaptcha=new Captcha(workingCaptcha.getHeight(),workingCaptcha.getWidth());
  backUpCaptcha.grid=new int[workingCaptcha.getWidth()][workingCaptcha.getHeight()];
  for (int a=0; a < workingCaptcha.grid.length; a++) {
    backUpCaptcha.grid[a]=workingCaptcha.grid[a].clone();
  }
}","/** 
 * legt ein backup vom aktuellen Captcha an
 */
@SuppressWarnings(""String_Node_Str"") public void backUP(){
  if (colorPointList != null)   colorPointListBackUp=(Vector<CPoint>)colorPointList.clone();
 else   colorPointListBackUp=null;
  backUpCaptcha=new Captcha(workingCaptcha.getHeight(),workingCaptcha.getWidth());
  backUpCaptcha.grid=new int[workingCaptcha.getWidth()][workingCaptcha.getHeight()];
  for (int a=0; a < workingCaptcha.grid.length; a++) {
    backUpCaptcha.grid[a]=workingCaptcha.grid[a].clone();
  }
}"
21049,"public void addPixel(final CPoint p){
  if (!colorTrainer.colorPointList.contains(p)) {
    backUP();
    addPixel(p);
    ic.image=colorTrainer.getScaledWorkingCaptchaImage();
    new GuiRunnable<Object>(){
      public Object runSave(){
        panel.repaint();
        panel.revalidate();
        return null;
      }
    }
.waitForEDT();
  }
}","public void addPixel(final CPoint p){
  if (!colorTrainer.colorPointList.contains(p)) {
    backUP();
    colorTrainer.addCPoint(p);
    ic.image=colorTrainer.getScaledWorkingCaptchaImage();
    new GuiRunnable<Object>(){
      public Object runSave(){
        panel.repaint();
        panel.revalidate();
        return null;
      }
    }
.waitForEDT();
  }
}"
21050,"public int trainCaptcha(final File captchafile,int letterNum){
  if (!captchafile.exists()) {
    if (Utilities.isLoggerActive()) {
      logger.severe(captchafile.getAbsolutePath() + ""String_Node_Str"");
    }
    return -1;
  }
  if (isShowDebugGui()) {
    destroyScrollPaneWindows();
  }
  final String captchaHash=JDHash.getMD5(captchafile);
  if (isCaptchaInMTH(captchaHash)) {
    if (Utilities.isLoggerActive()) {
      logger.fine(""String_Node_Str"" + captchafile);
    }
    return -1;
  }
  Image captchaImage=Utilities.loadImage(captchafile);
  final Captcha captcha=createCaptcha(captchaImage);
  if (captcha == null)   return -1;
  String code=null;
  new GuiRunnable<Object>(){
    public Object runSave(){
      if (f != null) {
        f.dispose();
      }
      f=new JDialog(DummyFrame.getDialogParent());
      f.setLocation(500,10);
      f.setLayout(new GridBagLayout());
      f.add(new JLabel(""String_Node_Str"" + captchafile.getName()),Utilities.getGBC(0,0,10,1));
      f.add(new ImageComponent(captcha.getImage()),Utilities.getGBC(0,1,10,1));
      f.setSize(1400,800);
      f.pack();
      f.setVisible(true);
      return null;
    }
  }
.waitForEDT();
  final String guess=checkCaptcha(captchafile,captcha);
  final Letter[] letters=captcha.getLetters(letterNum);
  if (letters == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
class MyRunnable implements Runnable {
    public String code=null;
    public int ret=0;
    public void run(){
      if (getCodeFromFileName(captchafile.getName()) == null) {
        code=new GuiRunnable<String>(){
          public String runSave(){
            return JOptionPane.showInputDialog(""String_Node_Str"" + guess,guess);
          }
        }
.getReturnValue();
        if (code != null && code.equals(guess)) {
          code=""String_Node_Str"";
        }
 else         if (code == null) {
          if (new GuiRunnable<Boolean>(){
            public Boolean runSave(){
              return JOptionPane.showConfirmDialog(new JFrame(),""String_Node_Str"") == JOptionPane.OK_OPTION;
            }
          }
.getReturnValue()) {
            ret=-2;
          }
        }
      }
 else {
        code=getCodeFromFileName(captchafile.getName());
        if (Utilities.isLoggerActive()) {
          logger.warning(""String_Node_Str"" + captchaHash + ""String_Node_Str""+ code);
        }
      }
synchronized (this) {
        this.notify();
      }
    }
  }
  MyRunnable run=new MyRunnable();
  Thread inpThread=new Thread(run);
  inpThread.start();
  new GuiRunnable<Object>(){
    public Object runSave(){
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,3,10,1));
      f.add(new ImageComponent(captcha.getImageWithGaps(1)),Utilities.getGBC(0,4,10,1));
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,5,10,1));
      for (int i=0; i < letters.length; i++) {
        f.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,6,1,1));
        JLabel jl=new JLabel(""String_Node_Str"");
        jl.setForeground(Color.RED);
        f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
      }
      f.pack();
      return null;
    }
  }
.waitForEDT();
  final LetterComperator[] lcs=captcha.getLetterComperators();
  if (lcs == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (lcs.length != letters.length) {
    logger.severe(""String_Node_Str"" + lcs.length + ""String_Node_Str""+ letters.length);
  }
  new GuiRunnable<Object>(){
    public Object runSave(){
      if (guess != null) {
        f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,3,10,1));
        f.add(new ImageComponent(captcha.getImageWithGaps(1)),Utilities.getGBC(0,4,10,1));
        f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,5,10,1));
        for (int i=0; i < letters.length; i++) {
          f.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,6,1,1));
          JLabel jl=new JLabel(""String_Node_Str"");
          jl.setForeground(Color.RED);
          f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
        }
        f.pack();
        for (int i=0; i < lcs.length; i++) {
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new ImageComponent(lcs[i].getB().getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,8,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,8,1,1));
          }
          JLabel jl=new JLabel(""String_Node_Str"");
          jl.setForeground(Color.RED);
          f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new JLabel(""String_Node_Str"" + lcs[i].getDecodedValue()),Utilities.getGBC(i * 2 + 1,9,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,9,1,1));
          }
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new JLabel(""String_Node_Str"" + Math.round(10 * lcs[i].getValityPercent()) / 10.0),Utilities.getGBC(i * 2 + 1,10,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,10,1,1));
          }
        }
        f.pack();
      }
 else {
        if (Utilities.isLoggerActive()) {
          logger.warning(""String_Node_Str"");
        }
      }
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,11,10,1));
      f.add(new ImageComponent(captcha.getImage()),Utilities.getGBC(0,12,10,1));
      f.pack();
      return null;
    }
  }
.waitForEDT();
  if (Utilities.isLoggerActive()) {
    logger.info(""String_Node_Str"" + guess + ""String_Node_Str""+ captcha.getValityPercent());
  }
  if (inpThread.isAlive()) {
synchronized (run) {
      try {
        run.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  if (run.ret == -2)   return -2;
  code=run.code;
  if (code == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (code.length() == 0) {
    code=guess;
  }
  if (code.length() != letters.length) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (code.indexOf(""String_Node_Str"") < 0) {
    String[] oldName=captchafile.getName().split(""String_Node_Str"");
    String ext=oldName[oldName.length - 1];
    String newName=captchafile.getParentFile().getAbsolutePath() + ""String_Node_Str"" + getMethodDirName()+ ""String_Node_Str""+ code+ ""String_Node_Str""+ ext;
    captchafile.renameTo(new File(newName));
  }
  int ret=0;
  for (int j=0; j < letters.length; j++) {
    final int i=j;
    if (!code.substring(i,i + 1).equals(""String_Node_Str"")) {
      if (guess != null && code.length() > i && guess.length() > i && code.substring(i,i + 1).equals(guess.substring(i,i + 1))) {
        ret++;
        if (lcs[i] != null) {
          lcs[i].getB().markGood();
        }
        if (lcs[i].getValityPercent() > 50) {
          letters[i].setOwner(this);
          letters[i].setSourcehash(captchaHash);
          letters[i].setDecodedValue(code.substring(i,i + 1));
          new Thread(new Runnable(){
            public void run(){
              final BasicWindow bws=new GuiRunnable<BasicWindow>(){
                public BasicWindow runSave(){
                  return BasicWindow.showImage(letters[i].getImage(2),""String_Node_Str"" + letters[i].getDecodedValue());
                }
              }
.getReturnValue();
              try {
                Thread.sleep(1000);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
              new GuiRunnable<Object>(){
                public Object runSave(){
                  bws.dispose();
                  return null;
                }
              }
.waitForEDT();
            }
          }
).start();
          letterDB.add(letters[i]);
        }
        if (!jas.getBoolean(""String_Node_Str"")) {
          letters[i].setOwner(this);
          letters[i].setSourcehash(captchaHash);
          letters[i].setDecodedValue(code.substring(i,i + 1));
          letterDB.add(letters[i]);
          new GuiRunnable<Object>(){
            public Object runSave(){
              f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
              return null;
            }
          }
.waitForEDT();
        }
 else {
          new GuiRunnable<Object>(){
            public Object runSave(){
              f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
              return null;
            }
          }
.waitForEDT();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            f.pack();
            return null;
          }
        }
.waitForEDT();
      }
 else {
        if (Utilities.isLoggerActive()) {
          logger.info(letterDB + ""String_Node_Str"");
        }
        if (lcs != null && lcs[i] != null && letterDB.size() > 30 && lcs[i] != null && lcs[i].getB() != null) {
          lcs[i].getB().markBad();
        }
        letters[i].setOwner(this);
        letters[i].setSourcehash(captchaHash);
        letters[i].setDecodedValue(code.substring(i,i + 1));
        letterDB.add(letters[i]);
        new GuiRunnable<Object>(){
          public Object runSave(){
            BasicWindow.showImage(letters[i].getImage(2),""String_Node_Str"" + letters[i].getDecodedValue());
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
            f.pack();
            return null;
          }
        }
.waitForEDT();
      }
    }
 else {
      new GuiRunnable<Object>(){
        public Object runSave(){
          f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
          f.pack();
          return null;
        }
      }
.waitForEDT();
    }
  }
  sortLetterDB();
  new Thread(new Runnable(){
    public void run(){
      saveMTHFile();
    }
  }
).start();
  return ret;
}","public int trainCaptcha(final File captchafile,int letterNum){
  if (!captchafile.exists()) {
    if (Utilities.isLoggerActive()) {
      logger.severe(captchafile.getAbsolutePath() + ""String_Node_Str"");
    }
    return -1;
  }
  if (isShowDebugGui()) {
    destroyScrollPaneWindows();
  }
  final String captchaHash=JDHash.getMD5(captchafile);
  if (isCaptchaInMTH(captchaHash)) {
    if (Utilities.isLoggerActive()) {
      logger.fine(""String_Node_Str"" + captchafile);
    }
    return -1;
  }
  Image captchaImage=Utilities.loadImage(captchafile);
  final Captcha captcha=createCaptcha(captchaImage);
  if (captcha == null)   return -1;
  String code=null;
  new GuiRunnable<Object>(){
    public Object runSave(){
      if (f != null) {
        f.dispose();
      }
      f=new JDialog(DummyFrame.getDialogParent());
      f.setLocation(500,10);
      f.setLayout(new GridBagLayout());
      f.add(new JLabel(""String_Node_Str"" + captchafile.getName()),Utilities.getGBC(0,0,10,1));
      f.add(new ImageComponent(captcha.getImage()),Utilities.getGBC(0,1,10,1));
      f.setSize(1400,800);
      f.pack();
      f.setVisible(true);
      return null;
    }
  }
.waitForEDT();
  final String guess=checkCaptcha(captchafile,captcha);
  final Letter[] letters=captcha.getLetters(letterNum);
  if (letters == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
class MyRunnable implements Runnable {
    public String code=null;
    public int ret=0;
    public void run(){
      if (getCodeFromFileName(captchafile.getName()) == null) {
        code=new GuiRunnable<String>(){
          public String runSave(){
            return JOptionPane.showInputDialog(""String_Node_Str"" + guess,guess);
          }
        }
.getReturnValue();
        if (code != null && code.equals(guess)) {
          code=""String_Node_Str"";
        }
 else         if (code == null) {
          if (new GuiRunnable<Boolean>(){
            public Boolean runSave(){
              return JOptionPane.showConfirmDialog(new JFrame(),""String_Node_Str"") == JOptionPane.OK_OPTION;
            }
          }
.getReturnValue()) {
            ret=-2;
          }
        }
      }
 else {
        code=getCodeFromFileName(captchafile.getName());
        if (Utilities.isLoggerActive()) {
          logger.warning(""String_Node_Str"" + captchaHash + ""String_Node_Str""+ code);
        }
      }
synchronized (this) {
        this.notify();
      }
    }
  }
  MyRunnable run=new MyRunnable();
  Thread inpThread=new Thread(run);
  inpThread.start();
  new GuiRunnable<Object>(){
    public Object runSave(){
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,3,10,1));
      f.add(new ImageComponent(captcha.getImageWithGaps(1)),Utilities.getGBC(0,4,10,1));
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,5,10,1));
      for (int i=0; i < letters.length; i++) {
        f.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,6,1,1));
        JLabel jl=new JLabel(""String_Node_Str"");
        jl.setForeground(Color.RED);
        f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
      }
      f.pack();
      return null;
    }
  }
.waitForEDT();
  final LetterComperator[] lcs=captcha.getLetterComperators();
  if (lcs == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (lcs.length != letters.length) {
    logger.severe(""String_Node_Str"" + lcs.length + ""String_Node_Str""+ letters.length);
  }
  new GuiRunnable<Object>(){
    public Object runSave(){
      if (guess != null) {
        f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,3,10,1));
        f.add(new ImageComponent(captcha.getImageWithGaps(1)),Utilities.getGBC(0,4,10,1));
        f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,5,10,1));
        for (int i=0; i < letters.length; i++) {
          f.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,6,1,1));
          JLabel jl=new JLabel(""String_Node_Str"");
          jl.setForeground(Color.RED);
          f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
        }
        f.pack();
        for (int i=0; i < lcs.length; i++) {
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new ImageComponent(lcs[i].getB().getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,8,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,8,1,1));
          }
          JLabel jl=new JLabel(""String_Node_Str"");
          jl.setForeground(Color.RED);
          f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new JLabel(""String_Node_Str"" + lcs[i].getDecodedValue()),Utilities.getGBC(i * 2 + 1,9,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,9,1,1));
          }
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new JLabel(""String_Node_Str"" + Math.round(10 * lcs[i].getValityPercent()) / 10.0),Utilities.getGBC(i * 2 + 1,10,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,10,1,1));
          }
        }
        f.pack();
      }
 else {
        if (Utilities.isLoggerActive()) {
          logger.warning(""String_Node_Str"");
        }
      }
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,11,10,1));
      f.add(new ImageComponent(captcha.getImage()),Utilities.getGBC(0,12,10,1));
      f.pack();
      return null;
    }
  }
.waitForEDT();
  if (Utilities.isLoggerActive()) {
    logger.info(""String_Node_Str"" + guess + ""String_Node_Str""+ captcha.getValityPercent());
  }
  if (inpThread.isAlive()) {
synchronized (run) {
      try {
        run.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  if (run.ret == -2)   return -2;
  code=run.code;
  if (code == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (code.length() == 0) {
    code=guess;
  }
  if (code.length() != letters.length) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (code.indexOf(""String_Node_Str"") < 0) {
    String[] oldName=captchafile.getName().split(""String_Node_Str"");
    String ext=oldName[oldName.length - 1];
    String newName=captchafile.getParentFile().getAbsolutePath() + ""String_Node_Str"" + getMethodDirName()+ ""String_Node_Str""+ code+ ""String_Node_Str""+ ext;
    captchafile.renameTo(new File(newName));
  }
  int ret=0;
  for (int j=0; j < letters.length; j++) {
    final int i=j;
    if (!code.substring(i,i + 1).equals(""String_Node_Str"")) {
      if (guess != null && code.length() > i && guess.length() > i && code.substring(i,i + 1).equals(guess.substring(i,i + 1))) {
        ret++;
        if (lcs[i] != null) {
          lcs[i].getB().markGood();
        }
        if (lcs[i].getValityPercent() > 50) {
          letters[i].setOwner(this);
          letters[i].setSourcehash(captchaHash);
          letters[i].setDecodedValue(code.substring(i,i + 1));
          new Thread(new Runnable(){
            public void run(){
            }
          }
).start();
          letterDB.add(letters[i]);
        }
        if (!jas.getBoolean(""String_Node_Str"")) {
          letters[i].setOwner(this);
          letters[i].setSourcehash(captchaHash);
          letters[i].setDecodedValue(code.substring(i,i + 1));
          letterDB.add(letters[i]);
          new GuiRunnable<Object>(){
            public Object runSave(){
              f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
              return null;
            }
          }
.waitForEDT();
        }
 else {
          new GuiRunnable<Object>(){
            public Object runSave(){
              f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
              return null;
            }
          }
.waitForEDT();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            f.pack();
            return null;
          }
        }
.waitForEDT();
      }
 else {
        if (Utilities.isLoggerActive()) {
          logger.info(letterDB + ""String_Node_Str"");
        }
        if (lcs != null && lcs[i] != null && letterDB.size() > 30 && lcs[i] != null && lcs[i].getB() != null) {
          lcs[i].getB().markBad();
        }
        letters[i].setOwner(this);
        letters[i].setSourcehash(captchaHash);
        letters[i].setDecodedValue(code.substring(i,i + 1));
        letterDB.add(letters[i]);
        new GuiRunnable<Object>(){
          public Object runSave(){
            BasicWindow.showImage(letters[i].getImage(2),""String_Node_Str"" + letters[i].getDecodedValue());
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
            f.pack();
            return null;
          }
        }
.waitForEDT();
      }
    }
 else {
      new GuiRunnable<Object>(){
        public Object runSave(){
          f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
          f.pack();
          return null;
        }
      }
.waitForEDT();
    }
  }
  sortLetterDB();
  new Thread(new Runnable(){
    public void run(){
      saveMTHFile();
    }
  }
).start();
  return ret;
}"
21051,"public static Vector<CPoint> getColors(File folder,String hoster,Vector<CPoint> c){
  File file=new File(JDUtilities.getJDHomeDirectoryFromEnvironment() + ""String_Node_Str"" + JDUtilities.getJACMethodsDirectory()+ hoster+ ""String_Node_Str"");
  File[] list=folder.listFiles();
  Captcha[] cs=new Captcha[15 < list.length ? 15 : list.length];
  JAntiCaptcha jac=new JAntiCaptcha(Utilities.getMethodDir(),""String_Node_Str"");
  if (c == null)   c=load(file);
  ColorTrainer lastCC=null;
  for (int i=0; i < cs.length; i++) {
    File captchafile=list[i];
    Image captchaImage=Utilities.loadImage(captchafile);
    if (captchaImage == null)     continue;
    Captcha captcha=jac.createCaptcha(captchaImage);
    if (captcha == null)     continue;
    EasyFile ef=new EasyFile(file.getParent());
    BackGroundImageTrainer bgit=new BackGroundImageTrainer(ef.getName());
    bgit.captchaImage=captcha;
    bgit.load();
    bgit.clearCaptcha();
    captcha.setCaptchaFile(captchafile);
    cs[i]=captcha;
    final ColorTrainer cc=new ColorTrainer();
    cc.ret=c;
    if (lastCC != null) {
      final ColorTrainer last=lastCC;
      cc.fastSelection=lastCC.fastSelection;
      cc.foreground=lastCC.foreground;
      cc.add=lastCC.add;
      cc.ret=lastCC.ret;
      cc.tollerance=lastCC.tollerance;
      new GuiRunnable<Object>(){
        public Object runSave(){
          cc.mode.setSelectedItem(last.mode.getSelectedItem());
          return null;
        }
      }
.waitForEDT();
    }
    cc.init(captcha);
synchronized (cc) {
      try {
        cc.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    lastCC=cc;
    if (cc.close)     break;
  }
  if (new GuiRunnable<Boolean>(){
    public Boolean runSave(){
      return JOptionPane.showConfirmDialog(null,JDL.L(""String_Node_Str"",""String_Node_Str""),JDL.L(""String_Node_Str"",""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
    }
  }
.getReturnValue())   saveColors(c,file);
  return c;
}","public static Vector<CPoint> getColors(File folder,String hoster,Vector<CPoint> c){
  File file=new File(JDUtilities.getJDHomeDirectoryFromEnvironment() + ""String_Node_Str"" + JDUtilities.getJACMethodsDirectory()+ hoster+ ""String_Node_Str"");
  File[] list=folder.listFiles();
  Captcha[] cs=new Captcha[15 < list.length ? 15 : list.length];
  JAntiCaptcha jac=new JAntiCaptcha(Utilities.getMethodDir(),""String_Node_Str"");
  if (c == null)   c=load(file);
  ColorTrainer lastCC=null;
  for (int i=0; i < cs.length; i++) {
    File captchafile=list[i];
    Image captchaImage=Utilities.loadImage(captchafile);
    if (captchaImage == null)     continue;
    Captcha captcha=jac.createCaptcha(captchaImage);
    if (captcha == null)     continue;
    EasyFile ef=new EasyFile(file.getParent());
    BackGroundImageTrainer bgit=new BackGroundImageTrainer(ef.getName());
    bgit.captchaImage=captcha;
    bgit.load();
    bgit.clearCaptcha();
    captcha.setCaptchaFile(captchafile);
    cs[i]=captcha;
    final ColorTrainer cc=new ColorTrainer();
    cc.ret=c;
    if (lastCC != null) {
      final ColorTrainer last=lastCC;
      cc.fastSelection=lastCC.fastSelection;
      cc.foreground=lastCC.foreground;
      cc.add=lastCC.add;
      cc.tollerance=lastCC.tollerance;
      new GuiRunnable<Object>(){
        public Object runSave(){
          cc.mode.setSelectedItem(last.mode.getSelectedItem());
          return null;
        }
      }
.waitForEDT();
    }
    cc.init(captcha);
synchronized (cc) {
      try {
        cc.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    lastCC=cc;
    c=cc.ret;
    if (cc.close)     break;
  }
  if (new GuiRunnable<Boolean>(){
    public Boolean runSave(){
      return JOptionPane.showConfirmDialog(null,JDL.L(""String_Node_Str"",""String_Node_Str""),JDL.L(""String_Node_Str"",""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
    }
  }
.getReturnValue())   saveColors(c,file);
  return c;
}"
21052,"public static boolean load(final String host2,final boolean opendir){
  try {
    final JDialog dialog=new GuiRunnable<JDialog>(){
      public JDialog runSave(){
        return new JDialog(DummyFrame.getDialogParent());
      }
    }
.getReturnValue();
    dialog.setModal(true);
    final JPanel p=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        JPanel ret=new JPanel(new GridLayout(3,2));
        ret.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        return ret;
      }
    }
.getReturnValue();
    final JDTextField tfl=new GuiRunnable<JDTextField>(){
      public JDTextField runSave(){
        return new JDTextField();
      }
    }
.getReturnValue();
    tfl.setBorder(BorderFactory.createEtchedBorder());
    p.add(tfl);
    JSpinner sm=new GuiRunnable<JSpinner>(){
      public JSpinner runSave(){
        p.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        return new JSpinner(new SpinnerNumberModel(100,1,4000,1));
      }
    }
.getReturnValue();
    p.add(sm);
    JButton ok=new GuiRunnable<JButton>(){
      public JButton runSave(){
        return new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
.getReturnValue();
    ok.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        dialog.remove(p);
        dialog.validate();
        dialog.setVisible(false);
      }
    }
);
    p.add(ok);
    WindowListener l=new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        tfl.setText(""String_Node_Str"");
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
;
    JButton cancel=new GuiRunnable<JButton>(){
      public JButton runSave(){
        return new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
.getReturnValue();
    cancel.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        tfl.setText(""String_Node_Str"");
        dialog.dispose();
      }
    }
);
    p.add(cancel);
    dialog.addWindowListener(l);
    dialog.add(p);
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.setLocation(Screen.getCenterOfComponent(DummyFrame.getDialogParent(),dialog));
        dialog.pack();
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    final String link=tfl.getText();
    if (link == null || link.matches(""String_Node_Str""))     return false;
    final int menge=(Integer)sm.getValue();
    final ProgressDialog pd=new GuiRunnable<ProgressDialog>(){
      public ProgressDialog runSave(){
        return new ProgressDialog(DummyFrame.getDialogParent(),JDL.L(""String_Node_Str"",""String_Node_Str""),null,false,true);
      }
    }
.getReturnValue();
    final Browser br=new Browser();
    br.getPage(link);
    String host=host2;
    if (host == null) {
      host=br.getHost().toLowerCase();
      if (host.matches(""String_Node_Str""))       host=host.substring(host.indexOf('.') + 1);
    }
    final String dir=JDUtilities.getJDHomeDirectoryFromEnvironment().getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
    new File(dir).mkdir();
    final String ct=br.getHttpConnection().getContentType().toLowerCase();
    if (ct != null && ct.contains(""String_Node_Str"")) {
      dialog.dispose();
      Runnable runnable=new Runnable(){
        public void run(){
          for (int k=0; k < menge; k++) {
            try {
              String ft=""String_Node_Str"";
              if (ct.equals(""String_Node_Str""))               ft=""String_Node_Str"";
 else {
                ft=ct.replaceFirst(""String_Node_Str"",""String_Node_Str"");
              }
              File f2=new File(dir + System.currentTimeMillis() + ft);
              br.getDownload(f2,link);
              final int c=k;
              new GuiRunnable<Object>(){
                public Object runSave(){
                  pd.setValue(c);
                  return null;
                }
              }
.waitForEDT();
            }
 catch (            Exception ev) {
              ev.printStackTrace();
            }
          }
          pd.dispose();
        }
      }
;
      Thread th=new Thread(runnable);
      th.start();
      pd.setThread(th);
      pd.setVisible(true);
      if (opendir)       openDir(dir);
      return true;
    }
    dialog.setTitle(JDL.L(""String_Node_Str"",""String_Node_Str""));
    final ArrayList<LoadImage> images=new ArrayList<LoadImage>();
    String[] imagea=getImages(br);
    for (int i=0; i < imagea.length; i++) {
      LoadImage li=new LoadImage();
      li.form=-1;
      li.location=i;
      li.br=br;
      li.imageUrl=imagea[i];
      images.add(li);
    }
    Form[] forms=getForms(br);
    for (int i=0; i < forms.length; i++) {
      Form form=forms[i];
      Browser brc=br.cloneBrowser();
      brc.submitForm(form);
      imagea=getImages(brc);
      for (int b=0; b < imagea.length; b++) {
        LoadImage li=new LoadImage();
        li.form=i;
        li.location=b;
        li.br=brc;
        li.imageUrl=imagea[b];
        if (images.contains(li))         continue;
        images.add(li);
      }
    }
    final File[] files=new File[images.size()];
    dialog.removeWindowListener(l);
    dialog.addWindowListener(new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        for (        File file : files) {
          file.delete();
        }
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
);
    final Thread th=new Thread(new Runnable(){
      public void run(){
        final Thread[] jb=new Thread[images.size()];
        for (int j=0; j < images.size(); j++) {
          final int i=j;
          jb[i]=new Thread(new Runnable(){
            public void run(){
              LoadImage image=images.get(i);
              String ft=""String_Node_Str"";
              if (image.toLowerCase().contains(""String_Node_Str""))               ft=""String_Node_Str"";
 else               if (image.toLowerCase().contains(""String_Node_Str""))               ft=""String_Node_Str"";
 else {
                try {
                  br.getPage(image.imageUrl);
                  String ct2=br.getHttpConnection().getContentType().toLowerCase();
                  if (ct2 != null && ct2.contains(""String_Node_Str"")) {
                    if (ct2.equals(""String_Node_Str""))                     ft=""String_Node_Str"";
 else {
                      ft=ct2.replaceFirst(""String_Node_Str"",""String_Node_Str"");
                    }
                  }
                }
 catch (                Exception e) {
                }
              }
              final String filetype=ft;
              final File f=new File(dir,System.currentTimeMillis() + filetype);
              files[i]=f;
              try {
                image.br.getDownload(f,image.imageUrl);
                image.file=f;
              }
 catch (              Exception e) {
              }
synchronized (jb[i]) {
                jb[i].notify();
              }
            }
          }
);
          jb[i].start();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            pd.setMaximum(images.size());
            return null;
          }
        }
.waitForEDT();
        int c=0;
        for (        Thread thread : jb) {
          while (thread.isAlive()) {
synchronized (thread) {
              try {
                thread.wait(3000);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
            }
          }
          final int d=c++;
          new GuiRunnable<Object>(){
            public Object runSave(){
              pd.setValue(d);
              return null;
            }
          }
.waitForEDT();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            pd.setVisible(false);
            return null;
          }
        }
.waitForEDT();
      }
    }
);
    th.start();
    new GuiRunnable<Object>(){
      public Object runSave(){
        pd.setThread(th);
        pd.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    final LoadImage ef=new LoadImage();
    final ArrayList<JButton> bts=new ArrayList<JButton>();
    for (int j=0; j < images.size(); j++) {
      final LoadImage f=images.get(j);
      if (!f.file.exists() || f.file.length() < 100)       continue;
      final BufferedImage captchaImage=JDImage.getImage(f.file);
      if (captchaImage == null) {
        f.file.delete();
        continue;
      }
      int area=captchaImage.getHeight(null) * captchaImage.getHeight(null);
      if (area < 50 || area > 50000 || captchaImage.getHeight(null) > 400 || captchaImage.getWidth(null) > 400 || captchaImage.getWidth(null) < 10 || captchaImage.getHeight(null) < 5) {
        f.file.delete();
        continue;
      }
      double faktor=Math.max((double)captchaImage.getWidth(null) / 100,(double)captchaImage.getHeight(null) / 100);
      final int width=(int)(captchaImage.getWidth(null) / faktor);
      final int height=(int)(captchaImage.getHeight(null) / faktor);
      JButton ic=new GuiRunnable<JButton>(){
        public JButton runSave(){
          return new JButton(new ImageIcon(captchaImage.getScaledInstance(width,height,Image.SCALE_SMOOTH)));
        }
      }
.getReturnValue();
      ic.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          dialog.dispose();
          ef.file=f.file;
          ef.br=f.br;
          ef.location=f.location;
          ef.form=f.form;
          ef.imageUrl=f.imageUrl;
        }
      }
);
      bts.add(ic);
    }
    final JPanel panel=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        return new JPanel(new GridLayout((int)Math.ceil(((double)bts.size()) / 5),5));
      }
    }
.getReturnValue();
    for (    JButton button : bts) {
      panel.add(button);
    }
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.add(new JScrollPane(panel));
        dialog.pack();
        dialog.setLocation(Screen.getCenterOfComponent(DummyFrame.getDialogParent(),dialog));
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    if (ef.file != null) {
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            for (int j=0; j < files.length; j++) {
              File file=files[j];
              if (!file.equals(ef.file))               file.delete();
            }
            String filetype=""String_Node_Str"";
            if (ef.file.getName().toLowerCase().contains(""String_Node_Str""))             filetype=""String_Node_Str"";
 else             if (ef.file.getName().toLowerCase().contains(""String_Node_Str""))             filetype=""String_Node_Str"";
            Browser brss=br.cloneBrowser();
            brss.getPage(link);
            if (ef.form != -1) {
              brss.submitForm(getForms(brss)[ef.form]);
            }
            final String[] im=getImages(brss);
            File f2=new File(dir + System.currentTimeMillis() + filetype);
            brss.getDownload(f2,im[ef.location]);
            if (im[ef.location].equals(ef.toString())) {
              for (int k=0; k < menge - 2; k++) {
                final Browser brs=brss.cloneBrowser();
                try {
                  f2=new File(dir + System.currentTimeMillis() + filetype);
                  brs.getDownload(f2,ef.imageUrl);
                }
 catch (                Exception ev) {
                  ev.printStackTrace();
                }
                final int d=k;
                new GuiRunnable<Object>(){
                  public Object runSave(){
                    pd.setValue(d);
                    return null;
                  }
                }
.waitForEDT();
              }
            }
 else {
              for (int k=0; k < menge - 2; k++) {
                final Browser brs=br.cloneBrowser();
                brs.getPage(link);
                if (ef.form != -1) {
                  brs.submitForm(getForms(brs)[ef.form]);
                }
                try {
                  f2=new File(dir + System.currentTimeMillis() + filetype);
                  brs.getDownload(f2,getImages(brs)[ef.location]);
                }
 catch (                Exception ev) {
                  ev.printStackTrace();
                }
                final int d=k;
                new GuiRunnable<Object>(){
                  public Object runSave(){
                    pd.setValue(d);
                    return null;
                  }
                }
.waitForEDT();
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          new GuiRunnable<Object>(){
            public Object runSave(){
              pd.dispose();
              return null;
            }
          }
.waitForEDT();
        }
      }
;
      new GuiRunnable<Object>(){
        public Object runSave(){
          Thread th2=new Thread(runnable);
          th2.start();
          pd.setMaximum(menge);
          pd.setValue(1);
          pd.setThread(th2);
          pd.setVisible(true);
          return null;
        }
      }
.waitForEDT();
    }
 else     return false;
    if (opendir)     openDir(dir);
    return dir.length() > 0;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","public static boolean load(final String host2,final boolean opendir){
  try {
    final JDialog dialog=new GuiRunnable<JDialog>(){
      public JDialog runSave(){
        return new JDialog(DummyFrame.getDialogParent());
      }
    }
.getReturnValue();
    dialog.setModal(true);
    final JPanel p=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        JPanel ret=new JPanel(new GridLayout(3,2));
        ret.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        return ret;
      }
    }
.getReturnValue();
    final JDTextField tfl=new GuiRunnable<JDTextField>(){
      public JDTextField runSave(){
        return new JDTextField();
      }
    }
.getReturnValue();
    tfl.setBorder(BorderFactory.createEtchedBorder());
    p.add(tfl);
    JSpinner sm=new GuiRunnable<JSpinner>(){
      public JSpinner runSave(){
        p.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        return new JSpinner(new SpinnerNumberModel(100,1,4000,1));
      }
    }
.getReturnValue();
    p.add(sm);
    JButton ok=new GuiRunnable<JButton>(){
      public JButton runSave(){
        return new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
.getReturnValue();
    ok.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        dialog.remove(p);
        dialog.validate();
        dialog.setVisible(false);
      }
    }
);
    p.add(ok);
    WindowListener l=new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        tfl.setText(""String_Node_Str"");
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
;
    JButton cancel=new GuiRunnable<JButton>(){
      public JButton runSave(){
        return new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
.getReturnValue();
    cancel.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        tfl.setText(""String_Node_Str"");
        dialog.dispose();
      }
    }
);
    p.add(cancel);
    dialog.addWindowListener(l);
    dialog.add(p);
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.setLocation(Screen.getCenterOfComponent(DummyFrame.getDialogParent(),dialog));
        dialog.pack();
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    final String link=tfl.getText();
    if (link == null || link.matches(""String_Node_Str""))     return false;
    final int menge=(Integer)sm.getValue();
    final ProgressDialog pd=new GuiRunnable<ProgressDialog>(){
      public ProgressDialog runSave(){
        return new ProgressDialog(DummyFrame.getDialogParent(),JDL.L(""String_Node_Str"",""String_Node_Str""),null,false,true);
      }
    }
.getReturnValue();
    final Browser br=new Browser();
    br.getPage(link);
    String host=host2;
    if (host == null) {
      host=br.getHost().toLowerCase();
      if (host.matches(""String_Node_Str""))       host=host.substring(host.indexOf('.') + 1);
    }
    final String dir=JDUtilities.getJDHomeDirectoryFromEnvironment().getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
    new File(dir).mkdir();
    final String ct=br.getHttpConnection().getContentType().toLowerCase();
    if (ct != null && ct.contains(""String_Node_Str"")) {
      dialog.dispose();
      Runnable runnable=new Runnable(){
        public void run(){
          for (int k=0; k < menge; k++) {
            try {
              String ft=""String_Node_Str"";
              if (ct.equals(""String_Node_Str""))               ft=""String_Node_Str"";
 else {
                ft=ct.replaceFirst(""String_Node_Str"",""String_Node_Str"");
              }
              File f2=new File(dir + System.currentTimeMillis() + ft);
              br.getDownload(f2,link);
              final int c=k;
              new GuiRunnable<Object>(){
                public Object runSave(){
                  pd.setValue(c);
                  return null;
                }
              }
.waitForEDT();
            }
 catch (            Exception ev) {
              ev.printStackTrace();
            }
          }
          pd.dispose();
        }
      }
;
      Thread th=new Thread(runnable);
      th.start();
      pd.setThread(th);
      pd.setVisible(true);
      if (opendir)       openDir(dir);
      return true;
    }
    dialog.setTitle(JDL.L(""String_Node_Str"",""String_Node_Str""));
    final ArrayList<LoadImage> images=new ArrayList<LoadImage>();
    String[] imagea=getImages(br);
    for (int i=0; i < imagea.length; i++) {
      LoadImage li=new LoadImage();
      li.form=-1;
      li.location=i;
      li.br=br;
      li.imageUrl=imagea[i];
      images.add(li);
    }
    Form[] forms=getForms(br);
    for (int i=0; i < forms.length; i++) {
      Form form=forms[i];
      Browser brc=br.cloneBrowser();
      brc.submitForm(form);
      imagea=getImages(brc);
      for (int b=0; b < imagea.length; b++) {
        LoadImage li=new LoadImage();
        li.form=i;
        li.location=b;
        li.br=brc;
        li.imageUrl=imagea[b];
        if (images.contains(li))         continue;
        images.add(li);
      }
    }
    final File[] files=new File[images.size()];
    dialog.removeWindowListener(l);
    dialog.addWindowListener(new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        for (        File file : files) {
          file.delete();
        }
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
);
    final Thread th=new Thread(new Runnable(){
      public void run(){
        final Thread[] jb=new Thread[images.size()];
        for (int j=0; j < images.size(); j++) {
          final int i=j;
          jb[i]=new Thread(new Runnable(){
            public void run(){
              LoadImage image=images.get(i);
              String ft=""String_Node_Str"";
              if (image.toLowerCase().contains(""String_Node_Str""))               ft=""String_Node_Str"";
 else               if (image.toLowerCase().contains(""String_Node_Str""))               ft=""String_Node_Str"";
 else {
                try {
                  br.getPage(image.imageUrl);
                  String ct2=br.getHttpConnection().getContentType().toLowerCase();
                  if (ct2 != null && ct2.contains(""String_Node_Str"")) {
                    if (ct2.equals(""String_Node_Str""))                     ft=""String_Node_Str"";
 else {
                      ft=ct2.replaceFirst(""String_Node_Str"",""String_Node_Str"");
                    }
                  }
                }
 catch (                Exception e) {
                }
              }
              final String filetype=ft;
              final File f=new File(dir,System.currentTimeMillis() + filetype);
              files[i]=f;
              try {
                image.br.getDownload(f,image.imageUrl);
                image.file=f;
              }
 catch (              Exception e) {
              }
synchronized (jb[i]) {
                jb[i].notify();
              }
            }
          }
);
          jb[i].start();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            pd.setMaximum(images.size());
            return null;
          }
        }
.waitForEDT();
        int c=0;
        for (        Thread thread : jb) {
          while (thread.isAlive()) {
synchronized (thread) {
              try {
                thread.wait(3000);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
            }
          }
          final int d=c++;
          new GuiRunnable<Object>(){
            public Object runSave(){
              pd.setValue(d);
              return null;
            }
          }
.waitForEDT();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            pd.setVisible(false);
            return null;
          }
        }
.waitForEDT();
      }
    }
);
    th.start();
    new GuiRunnable<Object>(){
      public Object runSave(){
        pd.setThread(th);
        pd.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    final LoadImage ef=new LoadImage();
    final ArrayList<JButton> bts=new ArrayList<JButton>();
    for (int j=0; j < images.size(); j++) {
      final LoadImage f=images.get(j);
      if (f == null || f.file == null || !f.file.exists() || f.file.length() < 100)       continue;
      final BufferedImage captchaImage=JDImage.getImage(f.file);
      if (captchaImage == null) {
        f.file.delete();
        continue;
      }
      int area=captchaImage.getHeight(null) * captchaImage.getHeight(null);
      if (area < 50 || area > 50000 || captchaImage.getHeight(null) > 400 || captchaImage.getWidth(null) > 400 || captchaImage.getWidth(null) < 10 || captchaImage.getHeight(null) < 5) {
        f.file.delete();
        continue;
      }
      double faktor=Math.max((double)captchaImage.getWidth(null) / 100,(double)captchaImage.getHeight(null) / 100);
      final int width=(int)(captchaImage.getWidth(null) / faktor);
      final int height=(int)(captchaImage.getHeight(null) / faktor);
      JButton ic=new GuiRunnable<JButton>(){
        public JButton runSave(){
          return new JButton(new ImageIcon(captchaImage.getScaledInstance(width,height,Image.SCALE_SMOOTH)));
        }
      }
.getReturnValue();
      ic.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          dialog.dispose();
          ef.file=f.file;
          ef.br=f.br;
          ef.location=f.location;
          ef.form=f.form;
          ef.imageUrl=f.imageUrl;
        }
      }
);
      bts.add(ic);
    }
    final JPanel panel=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        return new JPanel(new GridLayout((int)Math.ceil(((double)bts.size()) / 5),5));
      }
    }
.getReturnValue();
    for (    JButton button : bts) {
      panel.add(button);
    }
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.add(new JScrollPane(panel));
        dialog.pack();
        dialog.setLocation(Screen.getCenterOfComponent(DummyFrame.getDialogParent(),dialog));
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    if (ef.file != null) {
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            for (int j=0; j < files.length; j++) {
              File file=files[j];
              if (!file.equals(ef.file))               file.delete();
            }
            String filetype=""String_Node_Str"";
            if (ef.file.getName().toLowerCase().contains(""String_Node_Str""))             filetype=""String_Node_Str"";
 else             if (ef.file.getName().toLowerCase().contains(""String_Node_Str""))             filetype=""String_Node_Str"";
            Browser brss=br.cloneBrowser();
            brss.getPage(link);
            if (ef.form != -1) {
              brss.submitForm(getForms(brss)[ef.form]);
            }
            final String[] im=getImages(brss);
            File f2=new File(dir + System.currentTimeMillis() + filetype);
            brss.getDownload(f2,im[ef.location]);
            if (im[ef.location].equals(ef.toString())) {
              for (int k=0; k < menge - 2; k++) {
                final Browser brs=brss.cloneBrowser();
                try {
                  f2=new File(dir + System.currentTimeMillis() + filetype);
                  brs.getDownload(f2,ef.imageUrl);
                }
 catch (                Exception ev) {
                  ev.printStackTrace();
                }
                final int d=k;
                new GuiRunnable<Object>(){
                  public Object runSave(){
                    pd.setValue(d);
                    return null;
                  }
                }
.waitForEDT();
              }
            }
 else {
              for (int k=0; k < menge - 2; k++) {
                final Browser brs=br.cloneBrowser();
                brs.getPage(link);
                if (ef.form != -1) {
                  brs.submitForm(getForms(brs)[ef.form]);
                }
                try {
                  f2=new File(dir + System.currentTimeMillis() + filetype);
                  brs.getDownload(f2,getImages(brs)[ef.location]);
                }
 catch (                Exception ev) {
                  ev.printStackTrace();
                }
                final int d=k;
                new GuiRunnable<Object>(){
                  public Object runSave(){
                    pd.setValue(d);
                    return null;
                  }
                }
.waitForEDT();
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          new GuiRunnable<Object>(){
            public Object runSave(){
              pd.dispose();
              return null;
            }
          }
.waitForEDT();
        }
      }
;
      new GuiRunnable<Object>(){
        public Object runSave(){
          Thread th2=new Thread(runnable);
          th2.start();
          pd.setMaximum(menge);
          pd.setValue(1);
          pd.setThread(th2);
          pd.setVisible(true);
          return null;
        }
      }
.waitForEDT();
    }
 else     return false;
    if (opendir)     openDir(dir);
    return dir.length() > 0;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}"
21053,"public static boolean load(final String host2,final boolean opendir){
  try {
    final JDialog dialog=new GuiRunnable<JDialog>(){
      public JDialog runSave(){
        return new JDialog(DummyFrame.getDialogParent());
      }
    }
.getReturnValue();
    dialog.setModal(true);
    final JPanel p=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        JPanel ret=new JPanel(new GridLayout(3,2));
        ret.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        return ret;
      }
    }
.getReturnValue();
    final JDTextField tfl=new GuiRunnable<JDTextField>(){
      public JDTextField runSave(){
        return new JDTextField();
      }
    }
.getReturnValue();
    tfl.setBorder(BorderFactory.createEtchedBorder());
    p.add(tfl);
    JSpinner sm=new GuiRunnable<JSpinner>(){
      public JSpinner runSave(){
        p.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        return new JSpinner(new SpinnerNumberModel(100,1,4000,1));
      }
    }
.getReturnValue();
    p.add(sm);
    JButton ok=new GuiRunnable<JButton>(){
      public JButton runSave(){
        return new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
.getReturnValue();
    ok.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        dialog.remove(p);
        dialog.validate();
        dialog.setVisible(false);
      }
    }
);
    p.add(ok);
    WindowListener l=new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        tfl.setText(""String_Node_Str"");
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
;
    JButton cancel=new GuiRunnable<JButton>(){
      public JButton runSave(){
        return new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
.getReturnValue();
    cancel.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        tfl.setText(""String_Node_Str"");
        dialog.dispose();
      }
    }
);
    p.add(cancel);
    dialog.addWindowListener(l);
    dialog.add(p);
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.setLocation(Screen.getCenterOfComponent(DummyFrame.getDialogParent(),dialog));
        dialog.pack();
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    final String link=tfl.getText();
    if (link == null || link.matches(""String_Node_Str""))     return false;
    final int menge=(Integer)sm.getValue();
    final ProgressDialog pd=new GuiRunnable<ProgressDialog>(){
      public ProgressDialog runSave(){
        return new ProgressDialog(DummyFrame.getDialogParent(),JDL.L(""String_Node_Str"",""String_Node_Str""),null,false,true);
      }
    }
.getReturnValue();
    final Browser br=new Browser();
    br.getPage(link);
    String host=host2;
    if (host == null) {
      host=br.getHost().toLowerCase();
      if (host.matches(""String_Node_Str""))       host=host.substring(host.indexOf('.') + 1);
    }
    final String dir=JDUtilities.getJDHomeDirectoryFromEnvironment().getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
    new File(dir).mkdir();
    final String ct=br.getHttpConnection().getContentType().toLowerCase();
    if (ct != null && ct.contains(""String_Node_Str"")) {
      dialog.dispose();
      Runnable runnable=new Runnable(){
        public void run(){
          for (int k=0; k < menge; k++) {
            try {
              String ft=""String_Node_Str"";
              if (ct.equals(""String_Node_Str""))               ft=""String_Node_Str"";
 else {
                ft=ct.replaceFirst(""String_Node_Str"",""String_Node_Str"");
              }
              File f2=new File(dir + System.currentTimeMillis() + ft);
              br.getDownload(f2,link);
              final int c=k;
              new GuiRunnable<Object>(){
                public Object runSave(){
                  pd.setValue(c);
                  return null;
                }
              }
.waitForEDT();
            }
 catch (            Exception ev) {
              ev.printStackTrace();
            }
          }
          pd.dispose();
        }
      }
;
      Thread th=new Thread(runnable);
      th.start();
      pd.setThread(th);
      pd.setVisible(true);
      if (opendir)       openDir(dir);
      return true;
    }
    dialog.setTitle(JDL.L(""String_Node_Str"",""String_Node_Str""));
    final ArrayList<LoadImage> images=new ArrayList<LoadImage>();
    String[] imagea=getImages(br);
    for (int i=0; i < imagea.length; i++) {
      LoadImage li=new LoadImage();
      li.form=-1;
      li.location=i;
      li.br=br;
      li.imageUrl=imagea[i];
      images.add(li);
    }
    Form[] forms=getForms(br);
    for (int i=0; i < forms.length; i++) {
      Form form=forms[i];
      Browser brc=br.cloneBrowser();
      brc.submitForm(form);
      imagea=getImages(brc);
      for (int b=0; b < imagea.length; b++) {
        LoadImage li=new LoadImage();
        li.form=i;
        li.location=b;
        li.br=brc;
        li.imageUrl=imagea[b];
        if (images.contains(li))         continue;
        images.add(li);
      }
    }
    final File[] files=new File[images.size()];
    dialog.removeWindowListener(l);
    dialog.addWindowListener(new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        for (        File file : files) {
          file.delete();
        }
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
);
    final Thread th=new Thread(new Runnable(){
      public void run(){
        final Thread[] jb=new Thread[images.size()];
        for (int j=0; j < images.size(); j++) {
          final int i=j;
          jb[i]=new Thread(new Runnable(){
            public void run(){
              LoadImage image=images.get(i);
              String ft=""String_Node_Str"";
              if (image.toLowerCase().contains(""String_Node_Str""))               ft=""String_Node_Str"";
 else               if (image.toLowerCase().contains(""String_Node_Str""))               ft=""String_Node_Str"";
 else {
                try {
                  br.getPage(image.imageUrl);
                  String ct2=br.getHttpConnection().getContentType().toLowerCase();
                  if (ct2 != null && ct2.contains(""String_Node_Str"")) {
                    if (ct2.equals(""String_Node_Str""))                     ft=""String_Node_Str"";
 else {
                      ft=ct2.replaceFirst(""String_Node_Str"",""String_Node_Str"");
                    }
                  }
                }
 catch (                Exception e) {
                }
              }
              final String filetype=ft;
              final File f=new File(dir,System.currentTimeMillis() + filetype);
              files[i]=f;
              try {
                image.br.getDownload(f,image.imageUrl);
                image.file=f;
              }
 catch (              Exception e) {
              }
synchronized (jb[i]) {
                jb[i].notify();
              }
            }
          }
);
          jb[i].start();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            pd.setMaximum(images.size());
            return null;
          }
        }
.waitForEDT();
        int c=0;
        for (        Thread thread : jb) {
          while (thread.isAlive()) {
synchronized (thread) {
              try {
                thread.wait(3000);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
            }
          }
          final int d=c++;
          new GuiRunnable<Object>(){
            public Object runSave(){
              pd.setValue(d);
              return null;
            }
          }
.waitForEDT();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            pd.setVisible(false);
            return null;
          }
        }
.waitForEDT();
      }
    }
);
    th.start();
    new GuiRunnable<Object>(){
      public Object runSave(){
        pd.setThread(th);
        pd.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    final LoadImage ef=new LoadImage();
    final ArrayList<JButton> bts=new ArrayList<JButton>();
    for (int j=0; j < images.size(); j++) {
      final LoadImage f=images.get(j);
      if (!f.file.exists() || f.file.length() < 100)       continue;
      final BufferedImage captchaImage=JDImage.getImage(f.file);
      int area=captchaImage.getHeight(null) * captchaImage.getHeight(null);
      if (area < 50 || area > 50000 || captchaImage.getHeight(null) > 400 || captchaImage.getWidth(null) > 400 || captchaImage.getWidth(null) < 10 || captchaImage.getHeight(null) < 5) {
        f.file.delete();
        continue;
      }
      double faktor=Math.max((double)captchaImage.getWidth(null) / 100,(double)captchaImage.getHeight(null) / 100);
      final int width=(int)(captchaImage.getWidth(null) / faktor);
      final int height=(int)(captchaImage.getHeight(null) / faktor);
      JButton ic=new GuiRunnable<JButton>(){
        public JButton runSave(){
          return new JButton(new ImageIcon(captchaImage.getScaledInstance(width,height,Image.SCALE_SMOOTH)));
        }
      }
.getReturnValue();
      ic.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          dialog.dispose();
          ef.file=f.file;
          ef.br=f.br;
          ef.location=f.location;
          ef.form=f.form;
          ef.imageUrl=f.imageUrl;
        }
      }
);
      bts.add(ic);
    }
    final JPanel panel=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        return new JPanel(new GridLayout((int)Math.ceil(((double)bts.size()) / 5),5));
      }
    }
.getReturnValue();
    for (    JButton button : bts) {
      panel.add(button);
    }
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.add(new JScrollPane(panel));
        dialog.pack();
        dialog.setLocation(Screen.getCenterOfComponent(DummyFrame.getDialogParent(),dialog));
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    if (ef.file != null) {
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            for (int j=0; j < files.length; j++) {
              File file=files[j];
              if (!file.equals(ef.file))               file.delete();
            }
            String filetype=""String_Node_Str"";
            if (ef.file.getName().toLowerCase().contains(""String_Node_Str""))             filetype=""String_Node_Str"";
 else             if (ef.file.getName().toLowerCase().contains(""String_Node_Str""))             filetype=""String_Node_Str"";
            Browser brss=br.cloneBrowser();
            brss.getPage(link);
            if (ef.form != -1) {
              brss.submitForm(getForms(brss)[ef.form]);
            }
            final String[] im=getImages(brss);
            File f2=new File(dir + System.currentTimeMillis() + filetype);
            brss.getDownload(f2,im[ef.location]);
            if (im[ef.location].equals(ef.toString())) {
              for (int k=0; k < menge - 2; k++) {
                final Browser brs=brss.cloneBrowser();
                try {
                  f2=new File(dir + System.currentTimeMillis() + filetype);
                  brs.getDownload(f2,ef.imageUrl);
                }
 catch (                Exception ev) {
                  ev.printStackTrace();
                }
                final int d=k;
                new GuiRunnable<Object>(){
                  public Object runSave(){
                    pd.setValue(d);
                    return null;
                  }
                }
.waitForEDT();
              }
            }
 else {
              for (int k=0; k < menge - 2; k++) {
                final Browser brs=br.cloneBrowser();
                brs.getPage(link);
                if (ef.form != -1) {
                  brs.submitForm(getForms(brs)[ef.form]);
                }
                try {
                  f2=new File(dir + System.currentTimeMillis() + filetype);
                  brs.getDownload(f2,getImages(brs)[ef.location]);
                }
 catch (                Exception ev) {
                  ev.printStackTrace();
                }
                final int d=k;
                new GuiRunnable<Object>(){
                  public Object runSave(){
                    pd.setValue(d);
                    return null;
                  }
                }
.waitForEDT();
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          new GuiRunnable<Object>(){
            public Object runSave(){
              pd.dispose();
              return null;
            }
          }
.waitForEDT();
        }
      }
;
      new GuiRunnable<Object>(){
        public Object runSave(){
          Thread th2=new Thread(runnable);
          th2.start();
          pd.setMaximum(menge);
          pd.setValue(1);
          pd.setThread(th2);
          pd.setVisible(true);
          return null;
        }
      }
.waitForEDT();
    }
 else     return false;
    if (opendir)     openDir(dir);
    return dir.length() > 0;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","public static boolean load(final String host2,final boolean opendir){
  try {
    final JDialog dialog=new GuiRunnable<JDialog>(){
      public JDialog runSave(){
        return new JDialog(DummyFrame.getDialogParent());
      }
    }
.getReturnValue();
    dialog.setModal(true);
    final JPanel p=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        JPanel ret=new JPanel(new GridLayout(3,2));
        ret.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        return ret;
      }
    }
.getReturnValue();
    final JDTextField tfl=new GuiRunnable<JDTextField>(){
      public JDTextField runSave(){
        return new JDTextField();
      }
    }
.getReturnValue();
    tfl.setBorder(BorderFactory.createEtchedBorder());
    p.add(tfl);
    JSpinner sm=new GuiRunnable<JSpinner>(){
      public JSpinner runSave(){
        p.add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        return new JSpinner(new SpinnerNumberModel(100,1,4000,1));
      }
    }
.getReturnValue();
    p.add(sm);
    JButton ok=new GuiRunnable<JButton>(){
      public JButton runSave(){
        return new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
.getReturnValue();
    ok.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        dialog.remove(p);
        dialog.validate();
        dialog.setVisible(false);
      }
    }
);
    p.add(ok);
    WindowListener l=new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        tfl.setText(""String_Node_Str"");
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
;
    JButton cancel=new GuiRunnable<JButton>(){
      public JButton runSave(){
        return new JButton(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
.getReturnValue();
    cancel.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        tfl.setText(""String_Node_Str"");
        dialog.dispose();
      }
    }
);
    p.add(cancel);
    dialog.addWindowListener(l);
    dialog.add(p);
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.setLocation(Screen.getCenterOfComponent(DummyFrame.getDialogParent(),dialog));
        dialog.pack();
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    final String link=tfl.getText();
    if (link == null || link.matches(""String_Node_Str""))     return false;
    final int menge=(Integer)sm.getValue();
    final ProgressDialog pd=new GuiRunnable<ProgressDialog>(){
      public ProgressDialog runSave(){
        return new ProgressDialog(DummyFrame.getDialogParent(),JDL.L(""String_Node_Str"",""String_Node_Str""),null,false,true);
      }
    }
.getReturnValue();
    final Browser br=new Browser();
    br.getPage(link);
    String host=host2;
    if (host == null) {
      host=br.getHost().toLowerCase();
      if (host.matches(""String_Node_Str""))       host=host.substring(host.indexOf('.') + 1);
    }
    final String dir=JDUtilities.getJDHomeDirectoryFromEnvironment().getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
    new File(dir).mkdir();
    final String ct=br.getHttpConnection().getContentType().toLowerCase();
    if (ct != null && ct.contains(""String_Node_Str"")) {
      dialog.dispose();
      Runnable runnable=new Runnable(){
        public void run(){
          for (int k=0; k < menge; k++) {
            try {
              String ft=""String_Node_Str"";
              if (ct.equals(""String_Node_Str""))               ft=""String_Node_Str"";
 else {
                ft=ct.replaceFirst(""String_Node_Str"",""String_Node_Str"");
              }
              File f2=new File(dir + System.currentTimeMillis() + ft);
              br.getDownload(f2,link);
              final int c=k;
              new GuiRunnable<Object>(){
                public Object runSave(){
                  pd.setValue(c);
                  return null;
                }
              }
.waitForEDT();
            }
 catch (            Exception ev) {
              ev.printStackTrace();
            }
          }
          pd.dispose();
        }
      }
;
      Thread th=new Thread(runnable);
      th.start();
      pd.setThread(th);
      pd.setVisible(true);
      if (opendir)       openDir(dir);
      return true;
    }
    dialog.setTitle(JDL.L(""String_Node_Str"",""String_Node_Str""));
    final ArrayList<LoadImage> images=new ArrayList<LoadImage>();
    String[] imagea=getImages(br);
    for (int i=0; i < imagea.length; i++) {
      LoadImage li=new LoadImage();
      li.form=-1;
      li.location=i;
      li.br=br;
      li.imageUrl=imagea[i];
      images.add(li);
    }
    Form[] forms=getForms(br);
    for (int i=0; i < forms.length; i++) {
      Form form=forms[i];
      Browser brc=br.cloneBrowser();
      brc.submitForm(form);
      imagea=getImages(brc);
      for (int b=0; b < imagea.length; b++) {
        LoadImage li=new LoadImage();
        li.form=i;
        li.location=b;
        li.br=brc;
        li.imageUrl=imagea[b];
        if (images.contains(li))         continue;
        images.add(li);
      }
    }
    final File[] files=new File[images.size()];
    dialog.removeWindowListener(l);
    dialog.addWindowListener(new WindowListener(){
      public void windowActivated(      WindowEvent e){
      }
      public void windowClosed(      WindowEvent e){
      }
      public void windowClosing(      WindowEvent e){
        for (        File file : files) {
          file.delete();
        }
        dialog.dispose();
      }
      public void windowDeactivated(      WindowEvent e){
      }
      public void windowDeiconified(      WindowEvent e){
      }
      public void windowIconified(      WindowEvent e){
      }
      public void windowOpened(      WindowEvent e){
      }
    }
);
    final Thread th=new Thread(new Runnable(){
      public void run(){
        final Thread[] jb=new Thread[images.size()];
        for (int j=0; j < images.size(); j++) {
          final int i=j;
          jb[i]=new Thread(new Runnable(){
            public void run(){
              LoadImage image=images.get(i);
              String ft=""String_Node_Str"";
              if (image.toLowerCase().contains(""String_Node_Str""))               ft=""String_Node_Str"";
 else               if (image.toLowerCase().contains(""String_Node_Str""))               ft=""String_Node_Str"";
 else {
                try {
                  br.getPage(image.imageUrl);
                  String ct2=br.getHttpConnection().getContentType().toLowerCase();
                  if (ct2 != null && ct2.contains(""String_Node_Str"")) {
                    if (ct2.equals(""String_Node_Str""))                     ft=""String_Node_Str"";
 else {
                      ft=ct2.replaceFirst(""String_Node_Str"",""String_Node_Str"");
                    }
                  }
                }
 catch (                Exception e) {
                }
              }
              final String filetype=ft;
              final File f=new File(dir,System.currentTimeMillis() + filetype);
              files[i]=f;
              try {
                image.br.getDownload(f,image.imageUrl);
                image.file=f;
              }
 catch (              Exception e) {
              }
synchronized (jb[i]) {
                jb[i].notify();
              }
            }
          }
);
          jb[i].start();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            pd.setMaximum(images.size());
            return null;
          }
        }
.waitForEDT();
        int c=0;
        for (        Thread thread : jb) {
          while (thread.isAlive()) {
synchronized (thread) {
              try {
                thread.wait(3000);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
            }
          }
          final int d=c++;
          new GuiRunnable<Object>(){
            public Object runSave(){
              pd.setValue(d);
              return null;
            }
          }
.waitForEDT();
        }
        new GuiRunnable<Object>(){
          public Object runSave(){
            pd.setVisible(false);
            return null;
          }
        }
.waitForEDT();
      }
    }
);
    th.start();
    new GuiRunnable<Object>(){
      public Object runSave(){
        pd.setThread(th);
        pd.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    final LoadImage ef=new LoadImage();
    final ArrayList<JButton> bts=new ArrayList<JButton>();
    for (int j=0; j < images.size(); j++) {
      final LoadImage f=images.get(j);
      if (!f.file.exists() || f.file.length() < 100)       continue;
      final BufferedImage captchaImage=JDImage.getImage(f.file);
      if (captchaImage == null) {
        f.file.delete();
        continue;
      }
      int area=captchaImage.getHeight(null) * captchaImage.getHeight(null);
      if (area < 50 || area > 50000 || captchaImage.getHeight(null) > 400 || captchaImage.getWidth(null) > 400 || captchaImage.getWidth(null) < 10 || captchaImage.getHeight(null) < 5) {
        f.file.delete();
        continue;
      }
      double faktor=Math.max((double)captchaImage.getWidth(null) / 100,(double)captchaImage.getHeight(null) / 100);
      final int width=(int)(captchaImage.getWidth(null) / faktor);
      final int height=(int)(captchaImage.getHeight(null) / faktor);
      JButton ic=new GuiRunnable<JButton>(){
        public JButton runSave(){
          return new JButton(new ImageIcon(captchaImage.getScaledInstance(width,height,Image.SCALE_SMOOTH)));
        }
      }
.getReturnValue();
      ic.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          dialog.dispose();
          ef.file=f.file;
          ef.br=f.br;
          ef.location=f.location;
          ef.form=f.form;
          ef.imageUrl=f.imageUrl;
        }
      }
);
      bts.add(ic);
    }
    final JPanel panel=new GuiRunnable<JPanel>(){
      public JPanel runSave(){
        return new JPanel(new GridLayout((int)Math.ceil(((double)bts.size()) / 5),5));
      }
    }
.getReturnValue();
    for (    JButton button : bts) {
      panel.add(button);
    }
    new GuiRunnable<Object>(){
      public Object runSave(){
        dialog.add(new JScrollPane(panel));
        dialog.pack();
        dialog.setLocation(Screen.getCenterOfComponent(DummyFrame.getDialogParent(),dialog));
        dialog.setVisible(true);
        return null;
      }
    }
.waitForEDT();
    if (ef.file != null) {
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            for (int j=0; j < files.length; j++) {
              File file=files[j];
              if (!file.equals(ef.file))               file.delete();
            }
            String filetype=""String_Node_Str"";
            if (ef.file.getName().toLowerCase().contains(""String_Node_Str""))             filetype=""String_Node_Str"";
 else             if (ef.file.getName().toLowerCase().contains(""String_Node_Str""))             filetype=""String_Node_Str"";
            Browser brss=br.cloneBrowser();
            brss.getPage(link);
            if (ef.form != -1) {
              brss.submitForm(getForms(brss)[ef.form]);
            }
            final String[] im=getImages(brss);
            File f2=new File(dir + System.currentTimeMillis() + filetype);
            brss.getDownload(f2,im[ef.location]);
            if (im[ef.location].equals(ef.toString())) {
              for (int k=0; k < menge - 2; k++) {
                final Browser brs=brss.cloneBrowser();
                try {
                  f2=new File(dir + System.currentTimeMillis() + filetype);
                  brs.getDownload(f2,ef.imageUrl);
                }
 catch (                Exception ev) {
                  ev.printStackTrace();
                }
                final int d=k;
                new GuiRunnable<Object>(){
                  public Object runSave(){
                    pd.setValue(d);
                    return null;
                  }
                }
.waitForEDT();
              }
            }
 else {
              for (int k=0; k < menge - 2; k++) {
                final Browser brs=br.cloneBrowser();
                brs.getPage(link);
                if (ef.form != -1) {
                  brs.submitForm(getForms(brs)[ef.form]);
                }
                try {
                  f2=new File(dir + System.currentTimeMillis() + filetype);
                  brs.getDownload(f2,getImages(brs)[ef.location]);
                }
 catch (                Exception ev) {
                  ev.printStackTrace();
                }
                final int d=k;
                new GuiRunnable<Object>(){
                  public Object runSave(){
                    pd.setValue(d);
                    return null;
                  }
                }
.waitForEDT();
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          new GuiRunnable<Object>(){
            public Object runSave(){
              pd.dispose();
              return null;
            }
          }
.waitForEDT();
        }
      }
;
      new GuiRunnable<Object>(){
        public Object runSave(){
          Thread th2=new Thread(runnable);
          th2.start();
          pd.setMaximum(menge);
          pd.setValue(1);
          pd.setThread(th2);
          pd.setVisible(true);
          return null;
        }
      }
.waitForEDT();
    }
 else     return false;
    if (opendir)     openDir(dir);
    return dir.length() > 0;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}"
21054,"public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  Regex infos=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL));
  String fileName=infos.getMatch(0);
  String fileSize=infos.getMatch(1);
  if (fileName == null || fileSize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize + ""String_Node_Str"";
  downloadLink.setName(fileName.trim());
  downloadLink.setDownloadSize(Regex.getSize(fileSize.trim()));
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  String fileSize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileName == null || fileSize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  downloadLink.setName(fileName.trim());
  downloadLink.setDownloadSize(Regex.getSize(fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}"
21055,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  setBrowserExclusive();
  br.getPage(""String_Node_Str"");
  br.getPage(parameter);
  Form form=br.getForm(1);
  if (form == null)   return null;
  if (br.containsHTML(""String_Node_Str"")) {
    for (int i=1; i <= 5; i++) {
      String folderPass=getUserInput(""String_Node_Str"",param);
      form.put(""String_Node_Str"",folderPass);
      br.submitForm(form);
      if (br.containsHTML(""String_Node_Str""))       throw new DecrypterException(""String_Node_Str"");
      if (!br.containsHTML(""String_Node_Str""))       break;
    }
    if (br.containsHTML(""String_Node_Str""))     throw new DecrypterException(""String_Node_Str"");
  }
  for (int i=1; i <= 5; i++) {
    String code=getCaptchaCode(""String_Node_Str"",param);
    form.put(""String_Node_Str"",""String_Node_Str"" + getCode(code));
    Browser br3=br.cloneBrowser();
    br3.submitForm(form);
    String error=br3.getRegex(""String_Node_Str"").getMatch(0);
    if (error == null)     break;
    if (error != null && i == 5)     throw new DecrypterException(""String_Node_Str"");
  }
  String password=br.getRegex(""String_Node_Str"").getMatch(0,2);
  if (password != null)   password=password.trim();
  String[] mirrors=br.getRegex(""String_Node_Str"").getColumn(0);
  if (mirrors.length == 0)   return null;
  for (  String mirror : mirrors) {
    ArrayList<DownloadLink> tempDecryptedLinks=new ArrayList<DownloadLink>();
    Browser br2=br.cloneBrowser();
    while (form.hasInputFieldByName(""String_Node_Str""))     form.remove(""String_Node_Str"");
    form.put(""String_Node_Str"",mirror);
    br2.submitForm(form);
    String[][] containers=br2.getRegex(""String_Node_Str"").getMatches();
    for (    String[] container : containers) {
      Browser br3=br2.cloneBrowser();
      File containerFile=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + container[1]);
      br3.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
      br3.getDownload(containerFile,container[0]);
      if (!JDUtilities.getController().isContainerFile(containerFile)) {
        containerFile.delete();
        continue;
      }
      ArrayList<DownloadLink> dLinks=JDUtilities.getController().getContainerLinks(containerFile);
      containerFile.delete();
      if (dLinks.size() != 0) {
        if (password != null && !password.isEmpty()) {
          for (          DownloadLink dLink : dLinks) {
            dLink.addSourcePluginPassword(password);
            tempDecryptedLinks.add(dLink);
          }
        }
 else         tempDecryptedLinks.addAll(dLinks);
      }
      if (tempDecryptedLinks.size() != 0)       break;
    }
    if (tempDecryptedLinks.size() == 0) {
      String[] links=br2.getRegex(""String_Node_Str"").getColumn(0);
      if (links.length == 0)       return null;
      progress.setRange(mirrors.length * links.length);
      for (      String link : links) {
        br2.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
        br2.getPage(link);
        String rdLink=br2.getRegex(""String_Node_Str"").getMatch(0);
        if (rdLink == null) {
          Form rsForm=br2.getForm(0);
          if (rsForm != null) {
            rdLink=rsForm.getAction();
          }
 else           rdLink=br2.getRegex(""String_Node_Str"").getMatch(0);
        }
        if (rdLink == null || rdLink.trim().isEmpty())         return null;
 else         rdLink=rdLink.trim();
        DownloadLink dLink;
        dLink=createDownloadlink(rdLink);
        if (password != null && !password.isEmpty())         dLink.addSourcePluginPassword(password);
        tempDecryptedLinks.add(dLink);
        progress.increase(1);
      }
    }
    decryptedLinks.addAll(tempDecryptedLinks);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  setBrowserExclusive();
  br.getPage(""String_Node_Str"");
  br.getPage(parameter);
  Form form=br.getForm(1);
  if (form == null)   return null;
  if (br.containsHTML(""String_Node_Str"")) {
    for (int i=1; i <= 5; i++) {
      String folderPass=getUserInput(""String_Node_Str"",param);
      form.put(""String_Node_Str"",folderPass);
      br.submitForm(form);
      if (br.containsHTML(""String_Node_Str""))       throw new DecrypterException(""String_Node_Str"");
      if (!br.containsHTML(""String_Node_Str""))       break;
    }
    if (br.containsHTML(""String_Node_Str""))     throw new DecrypterException(""String_Node_Str"");
  }
  for (int i=1; i <= 5; i++) {
    String code=getCaptchaCode(""String_Node_Str"",param);
    form.put(""String_Node_Str"",""String_Node_Str"" + getCode(code));
    Browser br3=br.cloneBrowser();
    br3.submitForm(form);
    String error=br3.getRegex(""String_Node_Str"").getMatch(0);
    if (error == null)     break;
    if (error != null && i == 5)     throw new DecrypterException(""String_Node_Str"");
  }
  String password=br.getRegex(""String_Node_Str"").getMatch(0,2);
  if (password != null)   password=password.trim();
  String[] mirrors=br.getRegex(""String_Node_Str"").getColumn(0);
  if (mirrors.length == 0)   return null;
  for (  String mirror : mirrors) {
    ArrayList<DownloadLink> tempDecryptedLinks=new ArrayList<DownloadLink>();
    Browser br2=br.cloneBrowser();
    while (form.hasInputFieldByName(""String_Node_Str""))     form.remove(""String_Node_Str"");
    form.put(""String_Node_Str"",mirror);
    br2.submitForm(form);
    String[][] containers=br2.getRegex(""String_Node_Str"").getMatches();
    for (    String[] container : containers) {
      Browser br3=br2.cloneBrowser();
      File containerFile=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + container[1]);
      br3.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
      br3.getDownload(containerFile,container[0]);
      if (!JDUtilities.getController().isContainerFile(containerFile)) {
        containerFile.delete();
        continue;
      }
      ArrayList<DownloadLink> dLinks=JDUtilities.getController().getContainerLinks(containerFile);
      containerFile.delete();
      if (dLinks.size() != 0) {
        if (password != null && !password.isEmpty()) {
          for (          DownloadLink dLink : dLinks) {
            dLink.addSourcePluginPassword(password);
            tempDecryptedLinks.add(dLink);
          }
        }
 else         tempDecryptedLinks.addAll(dLinks);
      }
      if (tempDecryptedLinks.size() != 0)       break;
    }
    if (tempDecryptedLinks.size() == 0) {
      String[] links=br2.getRegex(""String_Node_Str"").getColumn(0);
      if (links.length == 0)       continue;
      progress.setRange(mirrors.length * links.length);
      for (      String link : links) {
        br2.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
        br2.getPage(link);
        String rdLink=br2.getRegex(""String_Node_Str"").getMatch(0);
        if (rdLink == null) {
          Form rsForm=br2.getForm(0);
          if (rsForm != null) {
            rdLink=rsForm.getAction();
          }
 else           rdLink=br2.getRegex(""String_Node_Str"").getMatch(0);
        }
        if (rdLink == null || rdLink.trim().isEmpty())         continue;
 else         rdLink=rdLink.trim();
        DownloadLink dLink;
        dLink=createDownloadlink(rdLink);
        if (password != null && !password.isEmpty())         dLink.addSourcePluginPassword(password);
        tempDecryptedLinks.add(dLink);
        progress.increase(1);
      }
    }
    decryptedLinks.addAll(tempDecryptedLinks);
  }
  return decryptedLinks;
}"
21056,"public void update(){
  if (fp == null)   return;
  notifyUpdate=false;
  if (!txtSize.isFocusOwner())   txtSize.setText(Formatter.formatReadable(fp.getTotalEstimatedPackageSize()));
  if (!txtName.isFocusOwner())   txtName.setText(fp.getName());
  if (!txtComment.isFocusOwner())   txtComment.setText(fp.getComment());
  if (!txtPassword.isFocusOwner())   txtPassword.setText(fp.getPassword());
  if (!brwSaveTo.isFocusOwner())   brwSaveTo.setText(fp.getDownloadDirectory());
  if (!chbExtract.isFocusOwner())   chbExtract.setSelected(fp.isExtractAfterDownload());
  revalidate();
  notifyUpdate=true;
}","public void update(){
  if (fp == null || notifyUpdate == false)   return;
  notifyUpdate=false;
  if (!txtSize.isFocusOwner())   txtSize.setText(Formatter.formatReadable(fp.getTotalEstimatedPackageSize()));
  if (!txtName.isFocusOwner())   txtName.setText(fp.getName());
  if (!txtComment.isFocusOwner())   txtComment.setText(fp.getComment());
  if (!txtPassword.isFocusOwner())   txtPassword.setText(fp.getPassword());
  if (!brwSaveTo.isFocusOwner())   brwSaveTo.setText(fp.getDownloadDirectory());
  if (!chbExtract.isFocusOwner())   chbExtract.setSelected(fp.isExtractAfterDownload());
  revalidate();
  notifyUpdate=true;
}"
21057,"public void update(){
  if (fp == null)   return;
  notifyUpdate=false;
  if (!txtName.isFocusOwner())   txtName.setText(fp.getName());
  if (!txtComment.isFocusOwner())   txtComment.setText(fp.getComment());
  if (!txtPassword.isFocusOwner())   txtPassword.setText(fp.getPassword());
  if (!brwSaveTo.isFocusOwner())   brwSaveTo.setText(fp.getDownloadDirectory());
  if (!chbExtract.isFocusOwner())   chbExtract.setSelected(fp.isExtractAfterDownload());
  if (!chbUseSubdirectory.isFocusOwner())   chbUseSubdirectory.setSelected(fp.useSubDir());
  revalidate();
  notifyUpdate=true;
}","public void update(){
  if (fp == null || notifyUpdate == false)   return;
  notifyUpdate=false;
  if (!txtName.isFocusOwner())   txtName.setText(fp.getName());
  if (!txtComment.isFocusOwner())   txtComment.setText(fp.getComment());
  if (!txtPassword.isFocusOwner())   txtPassword.setText(fp.getPassword());
  if (!brwSaveTo.isFocusOwner())   brwSaveTo.setText(fp.getDownloadDirectory());
  if (!chbExtract.isFocusOwner())   chbExtract.setSelected(fp.isExtractAfterDownload());
  if (!chbUseSubdirectory.isFocusOwner())   chbUseSubdirectory.setSelected(fp.useSubDir());
  revalidate();
  notifyUpdate=true;
}"
21058,"private JMenu buildpriomenu(ArrayList<DownloadLink> links){
  JMenuItem tmp;
  JMenu prioPopup=new JMenu(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links.size()+ ""String_Node_Str"");
  Integer prio=null;
  if (links.size() == 1)   prio=links.get(0).getPriority();
  prioPopup.setIcon(JDTheme.II(""String_Node_Str"",16,16));
  HashMap<String,Object> prop=null;
  for (int i=3; i >= 1; i--) {
    prop=new HashMap<String,Object>();
    prop.put(""String_Node_Str"",links);
    prop.put(""String_Node_Str"",new Integer(i));
    prioPopup.add(tmp=new JMenuItem(new LinkGrabberTableAction(linkgrabber,JDTheme.II(""String_Node_Str"" + i,16,16),prioDescs[i + 1],LinkGrabberTableAction.DOWNLOAD_PRIO,new Property(""String_Node_Str"",prop))));
    if (prio != null && i == prio) {
      tmp.setEnabled(false);
      tmp.setIcon(JDTheme.II(""String_Node_Str"" + i,16,16));
    }
 else     tmp.setEnabled(true);
  }
  return prioPopup;
}","private JMenu buildpriomenu(ArrayList<DownloadLink> links){
  JMenuItem tmp;
  JMenu prioPopup=new JMenu(JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links.size()+ ""String_Node_Str"");
  Integer prio=null;
  if (links.size() == 1)   prio=links.get(0).getPriority();
  prioPopup.setIcon(JDTheme.II(""String_Node_Str"",16,16));
  HashMap<String,Object> prop=null;
  for (int i=3; i >= -1; i--) {
    prop=new HashMap<String,Object>();
    prop.put(""String_Node_Str"",links);
    prop.put(""String_Node_Str"",new Integer(i));
    prioPopup.add(tmp=new JMenuItem(new LinkGrabberTableAction(linkgrabber,JDTheme.II(""String_Node_Str"" + i,16,16),prioDescs[i + 1],LinkGrabberTableAction.DOWNLOAD_PRIO,new Property(""String_Node_Str"",prop))));
    if (prio != null && i == prio) {
      tmp.setEnabled(false);
      tmp.setIcon(JDTheme.II(""String_Node_Str"" + i,16,16));
    }
 else     tmp.setEnabled(true);
  }
  return prioPopup;
}"
21059,"/** 
 * Sucht alle Links heraus
 * @param data ist der Quelltext einer Html-Datei
 * @param url der Link von dem der Quelltext stammt (um die base automatisch zu setzen)
 * @return Linkliste aus data extrahiert
 */
public static String[] getHttpLinks(String data,String url){
  data=data.trim();
  String protocolPattern=""String_Node_Str"";
  if (!data.matches(""String_Node_Str"")) {
    int c=new Regex(data,""String_Node_Str"" + protocolPattern + ""String_Node_Str"").count();
    if (c == 0)     return new String[]{};
 else     if (c == 1 && data.length() < 100 && data.matches(""String_Node_Str"" + protocolPattern + ""String_Node_Str"")) {
      String link=data.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
      URLConnectionAdapter con=null;
      try {
        if (!link.matches(""String_Node_Str"") || (con=new Browser().openGetConnection(link.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""))).isOK()) {
          if (con != null)           con.disconnect();
          return new String[]{link.replaceAll(""String_Node_Str"",""String_Node_Str"")};
        }
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
      if (con != null)       con.disconnect();
    }
  }
  url=url == null ? ""String_Node_Str"" : url;
  Matcher m;
  String link;
  String basename=""String_Node_Str"";
  String host=""String_Node_Str"";
  LinkedList<String> set=new LinkedList<String>();
  Pattern[] basePattern=new Pattern[]{Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  for (  Pattern element : basePattern) {
    m=element.matcher(data);
    if (m.find()) {
      url=m.group(2);
      break;
    }
  }
  String pro=""String_Node_Str"";
  if (url != null && url.trim().length() > 0) {
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    url=url.replace(pro + ""String_Node_Str"",""String_Node_Str"");
    int dot=url.lastIndexOf('/');
    if (dot != -1) {
      basename=pro + ""String_Node_Str"" + url.substring(0,dot + 1);
    }
 else {
      basename=pro + ""String_Node_Str"" + url+ ""String_Node_Str"";
    }
    dot=url.indexOf('/');
    if (dot != -1) {
      host=pro + ""String_Node_Str"" + url.substring(0,dot);
    }
 else {
      host=pro + ""String_Node_Str"" + url;
    }
    url=pro + ""String_Node_Str"" + url;
  }
 else {
    url=""String_Node_Str"";
  }
final class Httppattern {
    public Pattern p;
    public int group;
    public Httppattern(    Pattern p,    int group){
      this.p=p;
      this.group=group;
    }
  }
  Httppattern[] linkAndFormPattern=new Httppattern[]{new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),1),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),1),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),3),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),2),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),2)};
  for (  Httppattern element : linkAndFormPattern) {
    m=element.p.matcher(data);
    while (m.find()) {
      link=m.group(element.group);
      link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (!(link.length() > 3 && link.matches(""String_Node_Str"" + protocolPattern + ""String_Node_Str"")) && link.length() > 0) {
        if (link.length() > 2 && link.startsWith(""String_Node_Str"")) {
          link=pro + ""String_Node_Str"" + link;
        }
        if (link.charAt(0) == '/') {
          link=host + link;
        }
 else         if (link.charAt(0) == '#') {
          link=url + link;
        }
 else {
          link=basename + link;
        }
      }
      link=link.trim();
      try {
        new URL(link);
        if (!set.contains(link)) {
          set.add(link);
        }
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  m=Pattern.compile(""String_Node_Str"" + protocolPattern + ""String_Node_Str""+ protocolPattern+ ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(data);
  while (m.find()) {
    link=m.group(0);
    link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
    link=link.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    link=link.trim();
    if (!set.contains(link)) {
      set.add(link);
    }
  }
  return set.toArray(new String[set.size()]);
}","/** 
 * Sucht alle Links heraus
 * @param data ist der Quelltext einer Html-Datei
 * @param url der Link von dem der Quelltext stammt (um die base automatisch zu setzen)
 * @return Linkliste aus data extrahiert
 */
public static String[] getHttpLinks(String data,String url){
  data=data.trim();
  String protocolPattern=""String_Node_Str"";
  if (!data.matches(""String_Node_Str"")) {
    int c=new Regex(data,""String_Node_Str"" + protocolPattern + ""String_Node_Str"").count();
    if (c == 0)     return new String[]{};
 else     if (c == 1 && data.length() < 100 && data.matches(""String_Node_Str"" + protocolPattern + ""String_Node_Str"")) {
      String link=data.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
      URLConnectionAdapter con=null;
      try {
        if (!link.matches(""String_Node_Str"") || (con=new Browser().openGetConnection(link.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""))).isOK()) {
          if (con != null)           con.disconnect();
          return new String[]{link.replaceAll(""String_Node_Str"",""String_Node_Str"")};
        }
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
      if (con != null)       con.disconnect();
    }
  }
  url=url == null ? ""String_Node_Str"" : url;
  Matcher m;
  String link;
  String basename=""String_Node_Str"";
  String host=""String_Node_Str"";
  LinkedList<String> set=new LinkedList<String>();
  Pattern[] basePattern=new Pattern[]{Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  for (  Pattern element : basePattern) {
    m=element.matcher(data);
    if (m.find()) {
      url=m.group(2);
      break;
    }
  }
  String pro=""String_Node_Str"";
  if (url != null && url.trim().length() > 0) {
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    url=url.replace(pro + ""String_Node_Str"",""String_Node_Str"");
    int dot=url.lastIndexOf('/');
    if (dot != -1) {
      basename=pro + ""String_Node_Str"" + url.substring(0,dot + 1);
    }
 else {
      basename=pro + ""String_Node_Str"" + url+ ""String_Node_Str"";
    }
    dot=url.indexOf('/');
    if (dot != -1) {
      host=pro + ""String_Node_Str"" + url.substring(0,dot);
    }
 else {
      host=pro + ""String_Node_Str"" + url;
    }
    url=pro + ""String_Node_Str"" + url;
  }
 else {
    url=""String_Node_Str"";
  }
final class Httppattern {
    public Pattern p;
    public int group;
    public Httppattern(    Pattern p,    int group){
      this.p=p;
      this.group=group;
    }
  }
  Httppattern[] linkAndFormPattern=new Httppattern[]{new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),1),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),1),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),3),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),2),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),2)};
  for (  Httppattern element : linkAndFormPattern) {
    m=element.p.matcher(data);
    while (m.find()) {
      link=m.group(element.group);
      link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (!(link.length() > 3 && link.matches(""String_Node_Str"" + protocolPattern + ""String_Node_Str"")) && link.length() > 0) {
        if (link.length() > 2 && link.startsWith(""String_Node_Str"")) {
          link=pro + ""String_Node_Str"" + link;
        }
        if (link.charAt(0) == '/') {
          link=host + link;
        }
 else         if (link.charAt(0) == '#') {
          link=url + link;
        }
 else {
          link=basename + link;
        }
      }
      link=link.trim();
      try {
        new URL(link);
        if (!set.contains(link)) {
          set.add(link);
        }
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  m=Pattern.compile(""String_Node_Str"" + protocolPattern + ""String_Node_Str""+ protocolPattern+ ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(data);
  while (m.find()) {
    link=m.group(0);
    link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
    link=link.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    link=link.trim();
    if (!set.contains(link)) {
      set.add(link);
    }
  }
  return set.toArray(new String[set.size()]);
}"
21060,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  String dlpage0=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dlpage0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String dlpage1=""String_Node_Str"" + dlpage0;
  br.getPage(dlpage1);
  String captchaid=br.getRegex(""String_Node_Str"").getMatch(0);
  if (captchaid == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String captchaurl=""String_Node_Str"" + captchaid;
  String code=getCaptchaCode(captchaurl,downloadLink);
  Form captchaForm=br.getForm(1);
  if (captchaForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  captchaForm.put(""String_Node_Str"",code);
  br.submitForm(captchaForm);
  String dllink=br.getRedirectLocation();
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  try {
    ((Ftp)JDUtilities.getNewPluginForHostInstance(""String_Node_Str"")).download(Encoding.urlDecode(dllink,true),downloadLink);
  }
 catch (  InterruptedIOException e) {
    if (downloadLink.isAborted())     return;
    throw e;
  }
catch (  IOException e) {
    if (e.toString().contains(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1000l);
    }
 else     throw e;
  }
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  Form form=br.getForm(2);
  form.setAction(""String_Node_Str"");
  if (form == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  this.sleep(5 * 1001l,downloadLink);
  br.submitForm(form);
  this.sleep(10 * 1001l,downloadLink);
  URLConnectionAdapter con=br.cloneBrowser().openGetConnection(""String_Node_Str"" + System.currentTimeMillis());
  con.disconnect();
  String captchaid=br.getRegex(""String_Node_Str"").getMatch(0);
  if (captchaid == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String captchaurl=""String_Node_Str"" + captchaid;
  String code=getCaptchaCode(captchaurl,downloadLink);
  this.sleep(10 * 1001l,downloadLink);
  Form captchaForm=br.getForm(1);
  if (captchaForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  captchaForm.put(""String_Node_Str"",code);
  br.setFollowRedirects(false);
  br.submitForm(captchaForm);
  String dllink=br.getRedirectLocation();
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  try {
    ((Ftp)JDUtilities.getNewPluginForHostInstance(""String_Node_Str"")).download(Encoding.urlDecode(dllink,true),downloadLink);
  }
 catch (  InterruptedIOException e) {
    if (downloadLink.isAborted())     return;
    throw e;
  }
catch (  IOException e) {
    if (e.toString().contains(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1000l);
    }
 else     throw e;
  }
}"
21061,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  Regex reg=br.getRegex(""String_Node_Str"");
  String filesize=reg.getMatch(1);
  String filename0=reg.getMatch(0);
  if (filename0 == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=filename0.replaceAll(""String_Node_Str"",""String_Node_Str"");
  link.setName(filename);
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  Regex reg=br.getRegex(""String_Node_Str"");
  String filesize=reg.getMatch(1);
  String filename0=reg.getMatch(0);
  if (filename0 == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=filename0.replaceAll(""String_Node_Str"",""String_Node_Str"");
  link.setName(filename);
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
21062,"public void actionPerformed(ActionEvent e){
  if (e.getSource() == menuItem) {
    menuItem.setSelected(!menuItem.isSelected());
    if (menuItem.isSelected()) {
      UserIO.getInstance().requestMessageDialog(JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      UserIO.getInstance().requestMessageDialog(JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == menuItem) {
    if (menuItem.isSelected()) {
      UserIO.getInstance().requestMessageDialog(JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      UserIO.getInstance().requestMessageDialog(JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
  }
}"
21063,"private void initConfigEntries(){
  ConfigEntry cfg;
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,PARAM_NICK,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTAREA,subConfig,PARAM_PERFORM,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ConfigContainer lngse=new ConfigContainer(JDL.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CONTAINER,lngse));
  lngse.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,PARAM_DOAUTOTRANSLAT,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  ConfigEntry conditionEntry=cfg;
  map=new HashMap<String,String>();
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  map.put(""String_Node_Str"",JDL.L(""String_Node_Str"",""String_Node_Str""));
  ArrayList<String> ar=new ArrayList<String>();
  for (  String string : map.keySet()) {
    ar.add(map.get(string));
  }
  lngse.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,subConfig,PARAM_NATIVELANGUAGE,ar.toArray(new String[]{}),JDL.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  lngse.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,PARAM_DOAUTOTRANSLATSELF,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  lngse.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,subConfig,PARAM_DESLANGUAGE,ar.toArray(new String[]{}),JDL.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
}","private void initConfigEntries(){
  ConfigEntry cfg;
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,PARAM_NICK,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTAREA,subConfig,PARAM_PERFORM,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ConfigContainer lngse=new ConfigContainer(JDL.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CONTAINER,lngse));
  lngse.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,PARAM_DOAUTOTRANSLAT,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  ConfigEntry conditionEntry=cfg;
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngmap.add(new JDLocale(""String_Node_Str""));
  lngse.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,subConfig,PARAM_NATIVELANGUAGE,lngmap.toArray(new JDLocale[]{}),JDL.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(JDL.DEFAULT_LOCALE);
  lngse.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,PARAM_DOAUTOTRANSLATSELF,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  lngse.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,subConfig,PARAM_DESLANGUAGE,lngmap.toArray(new JDLocale[]{}),JDL.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(JDL.DEFAULT_LOCALE);
}"
21064,"public void addToText(final User user,String style,String msg){
  String dest=subConfig.getStringProperty(PARAM_NATIVELANGUAGE,map.get(System.getProperty(""String_Node_Str"")));
  if (subConfig.getBooleanProperty(PARAM_DOAUTOTRANSLAT,false) && dest != null && !msg.contains(""String_Node_Str"")) {
    for (    String next : map.keySet()) {
      if (map.get(next).equals(dest)) {
        String tmp=JDL.translate(next,msg);
        if (!tmp.equalsIgnoreCase(msg)) {
          tmp+=""String_Node_Str"" + msg + ""String_Node_Str"";
          msg=tmp;
        }
        break;
      }
    }
  }
  final String msg2=msg;
  Date dt=new Date();
  SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (user != null) {
    sb.append(""String_Node_Str"" + user.getStyle() + (getUser(conn.getNick()) == user ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ df.format(dt)+ ""String_Node_Str""+ user.getNickLink(""String_Node_Str"")+ (style == JDChat.STYLE_PM ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"" + df.format(dt) + ""String_Node_Str"");
  }
  if (conn != null && msg.contains(conn.getNick())) {
    style=STYLE_HIGHLIGHT;
  }
  if (style != null) {
    sb.append(""String_Node_Str"" + style + ""String_Node_Str""+ msg+ ""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"" + msg + ""String_Node_Str"");
  }
  if (sb.length() > TEXT_BUFFER) {
    String tmp=sb.toString();
    tmp=tmp.substring(tmp.indexOf(""String_Node_Str"",sb.length() / 3)).trim();
    sb=new StringBuilder();
    sb.append(tmp);
  }
  changed=true;
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      if (changed) {
        if (!SwingGui.getInstance().getMainFrame().isActive() && conn != null && msg2.contains(conn.getNick())) {
          SwingGui.getInstance().getMainFrame().toFront();
        }
        textArea.setText(STYLE + ""String_Node_Str"" + sb.toString()+ ""String_Node_Str"");
        int max=scrollPane.getVerticalScrollBar().getMaximum();
        scrollPane.getVerticalScrollBar().setValue(max);
        changed=false;
      }
    }
  }
);
}","public void addToText(final User user,String style,String msg){
  JDLocale dest=subConfig.getGenericProperty(PARAM_NATIVELANGUAGE,new JDLocale(""String_Node_Str""));
  if (subConfig.getBooleanProperty(PARAM_DOAUTOTRANSLAT,false) && dest != null && !msg.contains(""String_Node_Str"")) {
    for (    JDLocale loc : lngmap) {
      if (loc.getLanguageCode().equalsIgnoreCase(dest.getLanguageCode())) {
        String tmp=JDL.translate(loc.getLanguageCode(),msg);
        if (tmp != null && !tmp.equalsIgnoreCase(msg)) {
          tmp+=""String_Node_Str"" + msg + ""String_Node_Str"";
          msg=tmp;
        }
        break;
      }
    }
  }
  final String msg2=msg;
  Date dt=new Date();
  SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (user != null) {
    sb.append(""String_Node_Str"" + user.getStyle() + (getUser(conn.getNick()) == user ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ df.format(dt)+ ""String_Node_Str""+ user.getNickLink(""String_Node_Str"")+ (style == JDChat.STYLE_PM ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"" + df.format(dt) + ""String_Node_Str"");
  }
  if (conn != null && msg.contains(conn.getNick())) {
    style=STYLE_HIGHLIGHT;
  }
  if (style != null) {
    sb.append(""String_Node_Str"" + style + ""String_Node_Str""+ msg+ ""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"" + msg + ""String_Node_Str"");
  }
  if (sb.length() > TEXT_BUFFER) {
    String tmp=sb.toString();
    tmp=tmp.substring(tmp.indexOf(""String_Node_Str"",sb.length() / 3)).trim();
    sb=new StringBuilder();
    sb.append(tmp);
  }
  changed=true;
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      if (changed) {
        if (!SwingGui.getInstance().getMainFrame().isActive() && conn != null && msg2.contains(conn.getNick())) {
          SwingGui.getInstance().getMainFrame().toFront();
        }
        textArea.setText(STYLE + ""String_Node_Str"" + sb.toString()+ ""String_Node_Str"");
        int max=scrollPane.getVerticalScrollBar().getMaximum();
        scrollPane.getVerticalScrollBar().setValue(max);
        changed=false;
      }
    }
  }
);
}"
21065,"private String prepareToSend(String trim){
  String dest=subConfig.getStringProperty(PARAM_DESLANGUAGE,map.get(System.getProperty(""String_Node_Str"")));
  if (subConfig.getBooleanProperty(PARAM_DOAUTOTRANSLATSELF,false) && dest != null) {
    for (    String next : map.keySet()) {
      if (map.get(next).equals(dest)) {
        trim=JDL.translate(next,trim);
        String tmp=JDL.translate(next,trim);
        if (!tmp.equalsIgnoreCase(trim)) {
          tmp+=""String_Node_Str"" + trim + ""String_Node_Str"";
          trim=tmp;
        }
        break;
      }
    }
  }
  return trim;
}","private String prepareToSend(String trim){
  JDLocale dest=subConfig.getGenericProperty(PARAM_DESLANGUAGE,new JDLocale(""String_Node_Str""));
  if (subConfig.getBooleanProperty(PARAM_DOAUTOTRANSLATSELF,false) && dest != null) {
    for (    JDLocale loc : lngmap) {
      if (loc.getLanguageCode().equalsIgnoreCase(dest.getLanguageCode())) {
        String tmp=JDL.translate(loc.getLanguageCode(),trim);
        if (tmp != null && !tmp.equalsIgnoreCase(trim)) {
          tmp+=""String_Node_Str"" + trim + ""String_Node_Str"";
          trim=tmp;
        }
        break;
      }
    }
  }
  return trim;
}"
21066,"public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
21067,"public int getMaxSimultanFreeDownloadNum(){
  return 10;
}","public int getMaxSimultanFreeDownloadNum(){
  return 20;
}"
21068,"public static String toRapidshareComPremium(File file,String userid,String pass){
  try {
    Browser br=new Browser();
    String[] data=br.getPage(""String_Node_Str"").split(""String_Node_Str"");
    PostFormDataRequest r=(PostFormDataRequest)br.createPostFormDataRequest(""String_Node_Str"" + data[0].trim() + ""String_Node_Str"");
    r.addFormData(new FormData(""String_Node_Str"",""String_Node_Str""));
    r.addFormData(new FormData(""String_Node_Str"",file.getName(),file));
    r.addFormData(new FormData(""String_Node_Str"",userid));
    r.addFormData(new FormData(""String_Node_Str"",pass));
    r.connect();
    String code=r.read();
    System.out.println(code);
    String[] lines=Regex.getLines(code);
    return lines[1];
  }
 catch (  Exception e) {
    JDLogger.exception(e);
    return null;
  }
}","public static String toRapidshareComPremium(File file,String userid,String pass){
  try {
    Browser br=new Browser();
    String[] data=br.getPage(""String_Node_Str"").split(""String_Node_Str"");
    PostFormDataRequest r=(PostFormDataRequest)br.createPostFormDataRequest(""String_Node_Str"" + data[0].trim() + ""String_Node_Str"");
    r.addFormData(new FormData(""String_Node_Str"",""String_Node_Str""));
    r.addFormData(new FormData(""String_Node_Str"",file.getName(),file));
    r.addFormData(new FormData(""String_Node_Str"",userid));
    r.addFormData(new FormData(""String_Node_Str"",pass));
    br.openRequestConnection(r);
    String code=r.read();
    System.out.println(code);
    String[] lines=Regex.getLines(code);
    return lines[1];
  }
 catch (  Exception e) {
    JDLogger.exception(e);
    return null;
  }
}"
21069,"public void init(){
  if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN)) {
    SubConfiguration cfg=SubConfiguration.getConfig(DIALOGS_CONFIG);
    Object value;
    if ((value=cfg.getProperty(""String_Node_Str"" + JDHash.getMD5(this.toString()))) != null) {
      if (value instanceof Integer) {
        int i=((Integer)value).intValue();
        this.returnValue=(i & (UserIO.RETURN_OK | UserIO.RETURN_CANCEL)) | UserIO.RETURN_DONT_SHOW_AGAIN | UserIO.RETURN_SKIPPED_BY_DONT_SHOW;
      }
      return;
    }
  }
  this.setModal(true);
  this.setLayout(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  btnOK=new JButton(this.okOption);
  btnOK.addActionListener(this);
  btnCancel=new JButton(this.cancelOption);
  btnCancel.addActionListener(this);
  if (icon != null) {
    add(new JLabel(this.icon),""String_Node_Str"");
  }
  contentpane=contentInit();
  add(contentpane,""String_Node_Str"");
  add(this.countDownLabel,""String_Node_Str"");
  if ((flag & UserIO.DONT_SHOW_AGAIN) > 0) {
    dont=new JCheckBox();
    dont.setHorizontalAlignment(JCheckBox.TRAILING);
    add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"")));
    add(dont,""String_Node_Str"");
  }
  if ((flag & UserIO.NO_OK_OPTION) == 0) {
    getRootPane().setDefaultButton(btnOK);
    btnOK.requestFocusInWindow();
    add(btnOK,""String_Node_Str"");
  }
  if ((flag & UserIO.NO_CANCEL_OPTION) == 0) {
    add(btnCancel,""String_Node_Str"");
    if ((flag & UserIO.NO_OK_OPTION) != 0) {
      this.getRootPane().setDefaultButton(btnCancel);
      btnCancel.requestFocusInWindow();
    }
  }
  this.setMinimumSize(new Dimension(300,-1));
  if (JDFlags.hasNoFlags(flag,UserIO.NO_COUNTDOWN)) {
    this.countdown(UserIO.getCountdownTime());
  }
 else {
    countDownLabel.setVisible(false);
  }
  this.setAlwaysOnTop(true);
  this.invalidate();
  this.pack();
  this.setResizable(true);
  this.packed();
  this.toFront();
  this.setMinimumSize(this.getPreferredSize());
  if (DEFAULT_DIMENSION != null)   this.setSize(DEFAULT_DIMENSION);
  if (SwingGui.getInstance() == null) {
    this.setLocation(Screen.getCenterOfComponent(null,this));
  }
 else   if (SwingGui.getInstance().getMainFrame().getExtendedState() == JFrame.ICONIFIED || !SwingGui.getInstance().getMainFrame().isVisible()) {
    this.setLocation(Screen.getDockBottomRight(this));
  }
 else {
    this.setLocation(Screen.getCenterOfComponent(SwingGui.getInstance().getMainFrame(),this));
  }
  this.setVisible(true);
  this.pack();
}","public void init(){
  if (JDFlags.hasAllFlags(flag,UserIO.DONT_SHOW_AGAIN)) {
    SubConfiguration cfg=SubConfiguration.getConfig(DIALOGS_CONFIG);
    Object value;
    if ((value=cfg.getProperty(""String_Node_Str"" + JDHash.getMD5(this.toString()))) != null) {
      if (value instanceof Integer) {
        int i=((Integer)value).intValue();
        this.returnValue=(i & (UserIO.RETURN_OK | UserIO.RETURN_CANCEL)) | UserIO.RETURN_DONT_SHOW_AGAIN | UserIO.RETURN_SKIPPED_BY_DONT_SHOW;
      }
      return;
    }
  }
  this.setModal(true);
  this.setLayout(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  btnOK=new JButton(this.okOption);
  JButton focus=btnOK;
  btnOK.addActionListener(this);
  btnCancel=new JButton(this.cancelOption);
  btnCancel.addActionListener(this);
  if (icon != null) {
    add(new JLabel(this.icon),""String_Node_Str"");
  }
  contentpane=contentInit();
  add(contentpane,""String_Node_Str"");
  add(this.countDownLabel,""String_Node_Str"");
  if ((flag & UserIO.DONT_SHOW_AGAIN) > 0) {
    dont=new JCheckBox();
    dont.setHorizontalAlignment(JCheckBox.TRAILING);
    add(new JLabel(JDL.L(""String_Node_Str"",""String_Node_Str"")));
    add(dont,""String_Node_Str"");
  }
  if ((flag & UserIO.NO_OK_OPTION) == 0) {
    getRootPane().setDefaultButton(btnOK);
    btnOK.addHierarchyListener(new HierarchyListener(){
      public void hierarchyChanged(      HierarchyEvent e){
        if ((e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) != 0) {
          JButton defaultButton=(JButton)e.getComponent();
          JRootPane root=SwingUtilities.getRootPane(defaultButton);
          if (root != null) {
            root.setDefaultButton(defaultButton);
          }
        }
      }
    }
);
    focus=btnOK;
    add(btnOK,""String_Node_Str"");
  }
  if ((flag & UserIO.NO_CANCEL_OPTION) == 0) {
    add(btnCancel,""String_Node_Str"");
    if ((flag & UserIO.NO_OK_OPTION) != 0) {
      this.getRootPane().setDefaultButton(btnCancel);
      btnCancel.requestFocusInWindow();
      focus=btnCancel;
    }
  }
  this.setMinimumSize(new Dimension(300,-1));
  if (JDFlags.hasNoFlags(flag,UserIO.NO_COUNTDOWN)) {
    this.countdown(UserIO.getCountdownTime());
  }
 else {
    countDownLabel.setVisible(false);
  }
  this.setAlwaysOnTop(true);
  this.invalidate();
  this.pack();
  this.setResizable(true);
  this.toFront();
  this.setMinimumSize(this.getPreferredSize());
  if (DEFAULT_DIMENSION != null)   this.setSize(DEFAULT_DIMENSION);
  if (SwingGui.getInstance() == null) {
    this.setLocation(Screen.getCenterOfComponent(null,this));
  }
 else   if (SwingGui.getInstance().getMainFrame().getExtendedState() == JFrame.ICONIFIED || !SwingGui.getInstance().getMainFrame().isVisible()) {
    this.setLocation(Screen.getDockBottomRight(this));
  }
 else {
    this.setLocation(Screen.getCenterOfComponent(SwingGui.getInstance().getMainFrame(),this));
  }
  KeyStroke ks=KeyStroke.getKeyStroke(""String_Node_Str"");
  focus.getInputMap().put(ks,""String_Node_Str"");
  focus.getInputMap(JButton.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(ks,""String_Node_Str"");
  focus.getInputMap(JButton.WHEN_IN_FOCUSED_WINDOW).put(ks,""String_Node_Str"");
  focus.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
);
  focus.requestFocus();
  this.packed();
  this.setVisible(true);
}"
21070,"public void setIcon(String key){
  putValue(IMAGE_KEY,key);
  putValue(AbstractAction.SMALL_ICON,JDTheme.II(key,24,24));
}","public void setIcon(String key){
  if (key.length() < 3)   return;
  putValue(AbstractAction.SMALL_ICON,JDTheme.II(key,24,24));
  putValue(IMAGE_KEY,key);
}"
21071,"public LinkgrabberView(){
  super();
  this.setContent(LinkGrabberPanel.getLinkGrabber());
  this.setDefaultInfoPanel(new LinkGrabberInfoPanel());
  ViewToolbar toolbar=new ViewToolbar();
  toolbar.setList(new String[]{""String_Node_Str"",""String_Node_Str""});
  this.setToolBar(toolbar);
  ael=new AWTEventListener(){
    public void eventDispatched(    AWTEvent event){
      if (event.getID() == KeyEvent.KEY_TYPED) {
        char keycode=((KeyEvent)event).getKeyChar();
        if (keycode == '\r' || keycode == '\n') {
          LinkGrabberPanel.getLinkGrabber().confirmButton.doClick(500);
        }
      }
    }
  }
;
  LinkGrabberController.getInstance().addListener(new LinkGrabberControllerListener(){
    public void onLinkGrabberControllerEvent(    LinkGrabberControllerEvent event){
switch (event.getID()) {
case LinkGrabberControllerEvent.ADDED:
        JDGui.getInstance().requestPanel(UserIF.Panels.DOWNLOADLIST,null);
      break;
  }
}
}
);
}","public LinkgrabberView(){
  super();
  this.setContent(LinkGrabberPanel.getLinkGrabber());
  this.setDefaultInfoPanel(new LinkGrabberInfoPanel());
  ViewToolbar toolbar=new ViewToolbar();
  toolbar.setList(new String[]{""String_Node_Str"",""String_Node_Str""});
  this.setToolBar(toolbar);
  LinkGrabberController.getInstance().addListener(new LinkGrabberControllerListener(){
    public void onLinkGrabberControllerEvent(    LinkGrabberControllerEvent event){
switch (event.getID()) {
case LinkGrabberControllerEvent.ADDED:
        JDGui.getInstance().requestPanel(UserIF.Panels.DOWNLOADLIST,null);
      break;
  }
}
}
);
}"
21072,"@Override protected void onShow(){
  Toolkit.getDefaultToolkit().addAWTEventListener(ael,AWTEvent.KEY_EVENT_MASK);
}","@Override protected void onShow(){
}"
21073,"@Override protected void onHide(){
  Toolkit.getDefaultToolkit().removeAWTEventListener(ael);
}","@Override protected void onHide(){
}"
21074,"public void setDefaults(int i,AbstractButton ab){
  if (i == 0) {
    ab.setContentAreaFilled(false);
    ab.setText(""String_Node_Str"");
  }
 else {
    ab.getAction().putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,InputEvent.CTRL_DOWN_MASK));
    confirmButton=ab;
  }
}","public void setDefaults(int i,AbstractButton ab){
  if (i == 0) {
    ab.setContentAreaFilled(false);
    ab.setText(""String_Node_Str"");
  }
 else {
    confirmButton=ab;
  }
}"
21075,"public static JFrame getDialogParent(){
  if (SwingGui.getInstance() != null)   return SwingGui.getInstance().getMainFrame();
  return new DummyFrame();
}","public static JFrame getDialogParent(){
  if (SwingGui.getInstance() != null)   return SwingGui.getInstance().getMainFrame();
  if (PARENT == null)   PARENT=new DummyFrame();
  return PARENT;
}"
21076,"public boolean isSelected(){
  return (Boolean)getValue(SELECTED_KEY);
}","public boolean isSelected(){
  Object value=getValue(SELECTED_KEY);
  if (value == null)   return false;
  return (Boolean)value;
}"
21077,"@Override public void setContent(SwitchPanel tabbedPanel){
  TabbedPanelView view=new TabbedPanelView(tabbedPanel);
  if (!mainTabbedPane.contains(view)) {
    mainTabbedPane.addTab(view);
  }
  mainTabbedPane.setSelectedComponent(view);
}","@Override public void setContent(SwitchPanel tabbedPanel){
  View view;
  if (tabbedPanel instanceof View) {
    view=(View)tabbedPanel;
  }
 else {
    view=new TabbedPanelView(tabbedPanel);
  }
  if (!mainTabbedPane.contains(view)) {
    mainTabbedPane.addTab(view);
  }
  mainTabbedPane.setSelectedComponent(view);
}"
21078,"public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (br.containsHTML(IP_BLOCKED_MSG1) || br.containsHTML(IP_BLOCKED_MSG2)) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
  }
  String linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (linkurl == null) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  }
  br.setFollowRedirects(false);
  dl=br.openDownload(downloadLink,linkurl,false,1);
  if (dl.getConnection().isContentDisposition()) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  URLConnectionAdapter con=dl.getConnection();
  if (con.getResponseCode() != 200 && con.getResponseCode() != 206) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 1000l);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (br.containsHTML(IP_BLOCKED_MSG1) || br.containsHTML(IP_BLOCKED_MSG2)) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
  }
  String linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (linkurl == null) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  }
  br.setFollowRedirects(false);
  dl=br.openDownload(downloadLink,linkurl,false,1);
  if (!(dl.getConnection().isContentDisposition())) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  URLConnectionAdapter con=dl.getConnection();
  if (con.getResponseCode() != 200 && con.getResponseCode() != 206) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 1000l);
  }
  dl.startDownload();
}"
21079,"public void handleFree(DownloadLink downloadLink) throws Exception {
  String url=null;
  br.setDebug(true);
  for (int i=0; i < 3; i++) {
    requestFileInformation(downloadLink);
    if (downloadLink.getStringProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      url=br.getRedirectLocation();
    }
 else {
      if (!br.containsHTML(""String_Node_Str"")) {
        String passCode;
        DownloadLink link=downloadLink;
        Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        if (link.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=Plugin.getUserInput(null,link);
        }
 else {
          passCode=link.getStringProperty(""String_Node_Str"",null);
        }
        form.put(""String_Node_Str"",passCode);
        br.submitForm(form);
        form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        if (form != null && !br.containsHTML(""String_Node_Str"")) {
          link.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          link.setProperty(""String_Node_Str"",passCode);
        }
      }
      String qk=null, pk=null, r=null;
      String[] parameters=br.getRegex(""String_Node_Str"").getRow(0);
      qk=parameters[0];
      pk=parameters[1];
      r=parameters[2];
      br.getPage(""String_Node_Str"" + qk + ""String_Node_Str""+ pk+ ""String_Node_Str""+ r);
      String error=br.getRegex(""String_Node_Str"").getMatch(0);
      if (error != null && !error.trim().equalsIgnoreCase(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
      String js=br.getRegex(""String_Node_Str"").getMatch(0).trim();
      String vars=br.getRegex(""String_Node_Str"").getMatch(0).trim();
      Context cx=Context.enter();
      Scriptable scope=cx.initStandardObjects();
      String eval=""String_Node_Str"" + vars + ""String_Node_Str""+ js+ ""String_Node_Str"";
      Object result=cx.evaluateString(scope,eval,""String_Node_Str"",1,null);
      url=Context.toString(result);
    }
  }
  dl=br.openDownload(downloadLink,url,true,0);
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  String url=null;
  try {
    for (int i=0; i < 3; i++) {
      if (url != null)       break;
      requestFileInformation(downloadLink);
      try {
        Recaptcha rc=new Recaptcha(br);
        Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        String id=br.getRegex(""String_Node_Str"").getMatch(0);
        if (id != null) {
          rc.setId(id);
          InputField challenge=new InputField(""String_Node_Str"",null);
          InputField code=new InputField(""String_Node_Str"",null);
          form.addInputField(challenge);
          form.addInputField(code);
          rc.setForm(form);
          rc.load();
          File cf=rc.downloadCaptcha(getLocalCaptchaFile());
          try {
            String c=getCaptchaCode(cf,downloadLink);
            rc.setCode(c);
          }
 catch (          PluginException e) {
            throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
          }
        }
      }
 catch (      Exception e) {
      }
      if (downloadLink.getStringProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
        url=br.getRedirectLocation();
      }
 else {
        if (!br.containsHTML(""String_Node_Str"")) {
          String passCode;
          DownloadLink link=downloadLink;
          Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
          if (link.getStringProperty(""String_Node_Str"",null) == null) {
            passCode=Plugin.getUserInput(null,link);
          }
 else {
            passCode=link.getStringProperty(""String_Node_Str"",null);
          }
          form.put(""String_Node_Str"",passCode);
          br.submitForm(form);
          form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
          if (form != null && !br.containsHTML(""String_Node_Str"")) {
            link.setProperty(""String_Node_Str"",null);
            throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            link.setProperty(""String_Node_Str"",passCode);
          }
        }
        String qk=null, pk=null, r=null;
        String[] parameters=br.getRegex(""String_Node_Str"").getRow(0);
        qk=parameters[0];
        pk=parameters[1];
        r=parameters[2];
        br.getPage(""String_Node_Str"" + qk + ""String_Node_Str""+ pk+ ""String_Node_Str""+ r);
        String error=br.getRegex(""String_Node_Str"").getMatch(0);
        if (error != null && !error.trim().equalsIgnoreCase(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
        String js=br.getRegex(""String_Node_Str"").getMatch(0).trim();
        String vars=br.getRegex(""String_Node_Str"").getMatch(0).trim();
        Context cx=Context.enter();
        Scriptable scope=cx.initStandardObjects();
        String eval=""String_Node_Str"" + vars + ""String_Node_Str""+ js+ ""String_Node_Str"";
        Object result=cx.evaluateString(scope,eval,""String_Node_Str"",1,null);
        url=Context.toString(result);
      }
    }
    dl=br.openDownload(downloadLink,url,true,0);
    dl.startDownload();
  }
 catch (  EvaluatorException e) {
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
}"
21080,"public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(filename.trim());
  parameter.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(filename.trim());
  parameter.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
21081,"/** 
 * returns permissionmask, ?, user?, group?, size?, date, name
 * @return
 * @throws IOException
 */
public String[][] list() throws IOException {
  InetSocketAddress pasv=pasv();
  sendLine(""String_Node_Str"");
  Socket dataSocket=new Socket(pasv.getHostName(),pasv.getPort());
  BufferedReader input=new BufferedReader(new InputStreamReader(dataSocket.getInputStream(),""String_Node_Str""));
  StringBuilder sb=new StringBuilder();
  String response=readLine();
  if (!response.startsWith(""String_Node_Str"")) {
    throw new IOException(""String_Node_Str"" + response);
  }
  char[] buffer=new char[4096];
  int bytesRead=0;
  while ((bytesRead=input.read(buffer)) != -1) {
    sb.append(buffer,0,bytesRead);
  }
  input.close();
  response=readLine();
  String[][] matches=new Regex(sb.toString(),""String_Node_Str"").getMatches();
  return matches;
}","/** 
 * returns permissionmask, ?, user?, group?, size?, date, name
 * @return
 * @throws IOException
 */
public String[][] list() throws IOException {
  InetSocketAddress pasv=pasv();
  sendLine(""String_Node_Str"");
  Socket dataSocket=new Socket(pasv.getHostName(),pasv.getPort());
  BufferedReader input=new BufferedReader(new InputStreamReader(dataSocket.getInputStream(),""String_Node_Str""));
  StringBuilder sb=new StringBuilder();
  String response=readLine();
  if (!response.startsWith(""String_Node_Str"")) {
    throw new IOException(""String_Node_Str"" + response);
  }
  char[] buffer=new char[4096];
  int bytesRead=0;
  while ((bytesRead=input.read(buffer)) != -1) {
    sb.append(buffer,0,bytesRead);
  }
  input.close();
  shutDownSocket(dataSocket);
  response=readLine();
  String[][] matches=new Regex(sb.toString(),""String_Node_Str"").getMatches();
  return matches;
}"
21082,"/** 
 * Lädt eine LinkListe
 * @param file Die Datei, aus der die Links gelesen werden
 * @return Ein neuer ArrayList mit den DownloadLinks
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") private ArrayList<FilePackage> loadDownloadLinks() throws Exception {
  Object obj=JDUtilities.getDatabaseConnector().getLinks();
  if (obj != null && obj instanceof ArrayList && (((ArrayList)obj).size() == 0 || ((ArrayList)obj).size() > 0 && ((ArrayList)obj).get(0) instanceof FilePackage)) {
    ArrayList<FilePackage> packages=(ArrayList<FilePackage>)obj;
    Iterator<FilePackage> iterator=packages.iterator();
    DownloadLink localLink;
    PluginForHost pluginForHost=null;
    PluginsC pluginForContainer=null;
    String tmp2=null;
    Iterator<DownloadLink> it;
    FilePackage fp;
    while (iterator.hasNext()) {
      fp=iterator.next();
      if (fp.getDownloadLinkList().size() == 0) {
        iterator.remove();
        continue;
      }
      it=fp.getDownloadLinkList().iterator();
      while (it.hasNext()) {
        localLink=it.next();
        if (!localLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          tmp2=localLink.getLinkStatus().getErrorMessage();
          localLink.getLinkStatus().reset();
          localLink.getLinkStatus().setErrorMessage(tmp2);
        }
        if (localLink.getLinkStatus().hasStatus(LinkStatus.FINISHED) && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION) == 1) {
          it.remove();
          if (fp.getDownloadLinkList().size() == 0) {
            iterator.remove();
            continue;
          }
        }
 else {
          try {
            pluginForHost=JDUtilities.getNewPluginForHostInstance(localLink.getHost());
          }
 catch (          Exception e) {
            JDLogger.exception(e);
          }
          try {
            if (localLink.getContainer() != null) {
              pluginForContainer=JDUtilities.getPluginForContainer(localLink.getContainer(),localLink.getContainerFile());
              if (pluginForContainer == null) {
                localLink.setEnabled(false);
              }
            }
          }
 catch (          NullPointerException e) {
            JDLogger.exception(e);
          }
          if (pluginForHost != null) {
            localLink.setLoadedPlugin(pluginForHost);
          }
          if (pluginForContainer != null) {
            localLink.setLoadedPluginForContainer(pluginForContainer);
          }
          if (pluginForHost == null) {
            logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
          }
        }
      }
    }
    return packages;
  }
 else   if (obj != null && obj instanceof Vector && (((Vector)obj).size() == 0 || ((Vector)obj).size() > 0 && ((Vector)obj).get(0) instanceof FilePackage)) {
    Vector<FilePackage> packages=(Vector<FilePackage>)obj;
    ArrayList<FilePackage> convert=new ArrayList<FilePackage>();
    Iterator<FilePackage> iterator=packages.iterator();
    DownloadLink localLink;
    PluginForHost pluginForHost=null;
    PluginsC pluginForContainer=null;
    String tmp1=null;
    String tmp2=null;
    Iterator<DownloadLink> it;
    FilePackage fp;
    while (iterator.hasNext()) {
      fp=iterator.next();
      if (fp.getDownloadLinkList() == null) {
        fp.convert();
      }
      convert.add(fp);
      if (fp.getDownloadLinkList().size() == 0) {
        convert.remove(fp);
        continue;
      }
      it=fp.getDownloadLinkList().iterator();
      while (it.hasNext()) {
        localLink=it.next();
        if (!localLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          tmp1=localLink.getLinkStatus().getStatusText();
          tmp2=localLink.getLinkStatus().getErrorMessage();
          localLink.getLinkStatus().reset();
          localLink.getLinkStatus().setErrorMessage(tmp2);
          localLink.getLinkStatus().setStatusText(tmp1);
        }
        if (localLink.getLinkStatus().hasStatus(LinkStatus.FINISHED) && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION) == 1) {
          it.remove();
          if (fp.getDownloadLinkList().size() == 0) {
            convert.remove(fp);
            continue;
          }
        }
 else {
          try {
            pluginForHost=JDUtilities.getNewPluginForHostInstance(localLink.getHost());
          }
 catch (          Exception e) {
            JDLogger.exception(e);
          }
          try {
            if (localLink.getContainer() != null) {
              pluginForContainer=JDUtilities.getPluginForContainer(localLink.getContainer(),localLink.getContainerFile());
              if (pluginForContainer == null) {
                localLink.setEnabled(false);
              }
            }
          }
 catch (          NullPointerException e) {
            JDLogger.exception(e);
          }
          if (pluginForHost != null) {
            localLink.setLoadedPlugin(pluginForHost);
          }
          if (pluginForContainer != null) {
            localLink.setLoadedPluginForContainer(pluginForContainer);
          }
          if (pluginForHost == null) {
            logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
          }
        }
      }
    }
    return convert;
  }
  throw new Exception(""String_Node_Str"");
}","/** 
 * Lädt eine LinkListe
 * @param file Die Datei, aus der die Links gelesen werden
 * @return Ein neuer ArrayList mit den DownloadLinks
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") private ArrayList<FilePackage> loadDownloadLinks() throws Exception {
  Object obj=JDUtilities.getDatabaseConnector().getLinks();
  if (obj != null && obj instanceof ArrayList && (((ArrayList)obj).size() == 0 || ((ArrayList)obj).size() > 0 && ((ArrayList)obj).get(0) instanceof FilePackage)) {
    ArrayList<FilePackage> packages=(ArrayList<FilePackage>)obj;
    Iterator<FilePackage> iterator=packages.iterator();
    DownloadLink localLink;
    PluginForHost pluginForHost=null;
    PluginsC pluginForContainer=null;
    String tmp2=null;
    Iterator<DownloadLink> it;
    FilePackage fp;
    while (iterator.hasNext()) {
      fp=iterator.next();
      if (fp.getDownloadLinkList().size() == 0) {
        iterator.remove();
        continue;
      }
      it=fp.getDownloadLinkList().iterator();
      while (it.hasNext()) {
        localLink=it.next();
        if (!localLink.getLinkStatus().isFinished()) {
          tmp2=localLink.getLinkStatus().getErrorMessage();
          localLink.getLinkStatus().reset();
          localLink.getLinkStatus().setErrorMessage(tmp2);
        }
        if (localLink.getLinkStatus().isFinished() && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION) == 1) {
          it.remove();
          if (fp.getDownloadLinkList().size() == 0) {
            iterator.remove();
            continue;
          }
        }
 else {
          try {
            pluginForHost=JDUtilities.getNewPluginForHostInstance(localLink.getHost());
          }
 catch (          Exception e) {
            JDLogger.exception(e);
          }
          try {
            if (localLink.getContainer() != null) {
              pluginForContainer=JDUtilities.getPluginForContainer(localLink.getContainer(),localLink.getContainerFile());
              if (pluginForContainer == null) {
                localLink.setEnabled(false);
              }
            }
          }
 catch (          NullPointerException e) {
            JDLogger.exception(e);
          }
          if (pluginForHost != null) {
            localLink.setLoadedPlugin(pluginForHost);
          }
          if (pluginForContainer != null) {
            localLink.setLoadedPluginForContainer(pluginForContainer);
          }
          if (pluginForHost == null) {
            logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
          }
        }
      }
    }
    return packages;
  }
 else   if (obj != null && obj instanceof Vector && (((Vector)obj).size() == 0 || ((Vector)obj).size() > 0 && ((Vector)obj).get(0) instanceof FilePackage)) {
    Vector<FilePackage> packages=(Vector<FilePackage>)obj;
    ArrayList<FilePackage> convert=new ArrayList<FilePackage>();
    Iterator<FilePackage> iterator=packages.iterator();
    DownloadLink localLink;
    PluginForHost pluginForHost=null;
    PluginsC pluginForContainer=null;
    String tmp1=null;
    String tmp2=null;
    Iterator<DownloadLink> it;
    FilePackage fp;
    while (iterator.hasNext()) {
      fp=iterator.next();
      if (fp.getDownloadLinkList() == null) {
        fp.convert();
      }
      convert.add(fp);
      if (fp.getDownloadLinkList().size() == 0) {
        convert.remove(fp);
        continue;
      }
      it=fp.getDownloadLinkList().iterator();
      while (it.hasNext()) {
        localLink=it.next();
        if (!localLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          tmp1=localLink.getLinkStatus().getStatusText();
          tmp2=localLink.getLinkStatus().getErrorMessage();
          localLink.getLinkStatus().reset();
          localLink.getLinkStatus().setErrorMessage(tmp2);
          localLink.getLinkStatus().setStatusText(tmp1);
        }
        if (localLink.getLinkStatus().hasStatus(LinkStatus.FINISHED) && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION) == 1) {
          it.remove();
          if (fp.getDownloadLinkList().size() == 0) {
            convert.remove(fp);
            continue;
          }
        }
 else {
          try {
            pluginForHost=JDUtilities.getNewPluginForHostInstance(localLink.getHost());
          }
 catch (          Exception e) {
            JDLogger.exception(e);
          }
          try {
            if (localLink.getContainer() != null) {
              pluginForContainer=JDUtilities.getPluginForContainer(localLink.getContainer(),localLink.getContainerFile());
              if (pluginForContainer == null) {
                localLink.setEnabled(false);
              }
            }
          }
 catch (          NullPointerException e) {
            JDLogger.exception(e);
          }
          if (pluginForHost != null) {
            localLink.setLoadedPlugin(pluginForHost);
          }
          if (pluginForContainer != null) {
            localLink.setLoadedPluginForContainer(pluginForContainer);
          }
          if (pluginForHost == null) {
            logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
          }
        }
      }
    }
    return convert;
  }
  throw new Exception(""String_Node_Str"");
}"
21083,"/** 
 * Setzt den Status der Downloadliste zurück. zB. bei einem Abbruch
 */
private void clearDownloadListStatus(){
  ArrayList<DownloadLink> links=new ArrayList<DownloadLink>(DownloadControllers.keySet());
  for (  DownloadLink link : links) {
    this.deactivateDownload(link);
  }
  PluginForHost.resetStatics();
  ArrayList<FilePackage> fps;
  fps=dlc.getPackages();
synchronized (fps) {
    for (    FilePackage filePackage : fps) {
      links=filePackage.getDownloadLinkList();
      for (int i=0; i < links.size(); i++) {
        if (!links.get(i).getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          links.get(i).getLinkStatus().setStatusText(null);
          links.get(i).setAborted(false);
          links.get(i).getLinkStatus().setStatus(LinkStatus.TODO);
          links.get(i).getLinkStatus().resetWaitTime();
        }
      }
    }
  }
  DownloadController.getInstance().fireGlobalUpdate();
}","/** 
 * Setzt den Status der Downloadliste zurück. zB. bei einem Abbruch
 */
private void clearDownloadListStatus(){
  ArrayList<DownloadLink> links=new ArrayList<DownloadLink>(DownloadControllers.keySet());
  for (  DownloadLink link : links) {
    this.deactivateDownload(link);
  }
  PluginForHost.resetStatics();
  ArrayList<FilePackage> fps;
  fps=dlc.getPackages();
synchronized (fps) {
    for (    FilePackage filePackage : fps) {
      links=filePackage.getDownloadLinkList();
      for (int i=0; i < links.size(); i++) {
        if (!links.get(i).getLinkStatus().isFinished()) {
          links.get(i).getLinkStatus().setStatusText(null);
          links.get(i).setAborted(false);
          links.get(i).getLinkStatus().setStatus(LinkStatus.TODO);
          links.get(i).getLinkStatus().resetWaitTime();
        }
      }
    }
  }
  DownloadController.getInstance().fireGlobalUpdate();
}"
21084,"public DownloadLink getDownloadLinkByFileOutput(File file,Integer Linkstatus){
  ArrayList<FilePackage> packages=JDUtilities.getDownloadController().getPackages();
  try {
    Iterator<FilePackage> iterator=packages.iterator();
    FilePackage fp=null;
    DownloadLink nextDownloadLink;
    while (iterator.hasNext()) {
      fp=iterator.next();
      Iterator<DownloadLink> it2=fp.getDownloadLinkList().iterator();
      while (it2.hasNext()) {
        nextDownloadLink=it2.next();
        if (new File(nextDownloadLink.getFileOutput()).getAbsoluteFile().equals(file.getAbsoluteFile())) {
          if (Linkstatus != null) {
            if (nextDownloadLink.getLinkStatus().hasStatus(Linkstatus))             return nextDownloadLink;
          }
 else           return nextDownloadLink;
        }
      }
    }
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  return null;
}","public DownloadLink getDownloadLinkByFileOutput(File file,Integer Linkstatus){
  ArrayList<DownloadLink> links=JDUtilities.getDownloadController().getAllDownloadLinks();
  try {
    for (    DownloadLink nextDownloadLink : links) {
      if (new File(nextDownloadLink.getFileOutput()).getAbsoluteFile().equals(file.getAbsoluteFile())) {
        if (Linkstatus != null) {
          if (nextDownloadLink.getLinkStatus().hasStatus(Linkstatus))           return nextDownloadLink;
        }
 else         return nextDownloadLink;
      }
    }
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  return null;
}"
21085,"/** 
 * Hier werden ControlEvent ausgewertet
 * @param event
 */
@SuppressWarnings(""String_Node_Str"") public void controlEvent(ControlEvent event){
  if (event == null) {
    logger.warning(""String_Node_Str"");
    return;
  }
switch (event.getID()) {
case ControlEvent.CONTROL_INIT_COMPLETE:
    watchdog=DownloadWatchDog.getInstance();
  break;
case ControlEvent.CONTROL_ON_FILEOUTPUT:
File[] list=(File[])event.getParameter();
for (File file : list) {
if (isContainerFile(file)) {
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_RELOADCONTAINER,true)) {
    loadContainerFile(file);
  }
}
}
break;
case ControlEvent.CONTROL_LOG_OCCURED:
break;
case ControlEvent.CONTROL_SYSTEM_EXIT:
break;
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
if (!(event.getSource() instanceof PluginForHost)) {
return;
}
lastDownloadFinished=((SingleDownloadController)event.getParameter()).getDownloadLink();
addToFinished(lastDownloadFinished);
if (lastDownloadFinished.getFilePackage().getRemainingLinks() == 0) {
Interaction.handleInteraction(Interaction.INTERACTION_DOWNLOAD_PACKAGE_FINISHED,this);
if (JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION) == 2) {
JDUtilities.getDownloadController().removePackage(lastDownloadFinished.getFilePackage());
break;
}
}
if (lastDownloadFinished.getLinkStatus().hasStatus(LinkStatus.FINISHED) && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION) == 0) {
lastDownloadFinished.getFilePackage().remove(lastDownloadFinished);
}
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED:
if (uiInterface == null) return;
if (event.getParameter() != null && event.getParameter() instanceof ArrayList && ((ArrayList)event.getParameter()).size() > 0) {
ArrayList<DownloadLink> links=(ArrayList<DownloadLink>)event.getParameter();
uiInterface.addLinksToGrabber(links,false);
}
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED_HIDEGRABBER:
if (event.getParameter() != null && event.getParameter() instanceof ArrayList && ((ArrayList)event.getParameter()).size() > 0) {
ArrayList<DownloadLink> links=(ArrayList<DownloadLink>)event.getParameter();
uiInterface.addLinksToGrabber(links,true);
}
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED_HIDEGRABBER_START:
if (event.getParameter() != null && event.getParameter() instanceof ArrayList && ((ArrayList)event.getParameter()).size() > 0) {
ArrayList<DownloadLink> links=(ArrayList<DownloadLink>)event.getParameter();
uiInterface.addLinksToGrabber(links,true);
if (getDownloadStatus() == JDController.DOWNLOAD_NOT_RUNNING) {
toggleStartStop();
}
}
break;
}
}","/** 
 * Hier werden ControlEvent ausgewertet
 * @param event
 */
@SuppressWarnings(""String_Node_Str"") public void controlEvent(ControlEvent event){
  if (event == null) {
    logger.warning(""String_Node_Str"");
    return;
  }
switch (event.getID()) {
case ControlEvent.CONTROL_INIT_COMPLETE:
    watchdog=DownloadWatchDog.getInstance();
  break;
case ControlEvent.CONTROL_ON_FILEOUTPUT:
File[] list=(File[])event.getParameter();
for (File file : list) {
if (isContainerFile(file)) {
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_RELOADCONTAINER,true)) {
    loadContainerFile(file);
  }
}
}
break;
case ControlEvent.CONTROL_LOG_OCCURED:
break;
case ControlEvent.CONTROL_SYSTEM_EXIT:
break;
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
if (!(event.getSource() instanceof PluginForHost)) {
return;
}
lastDownloadFinished=((SingleDownloadController)event.getParameter()).getDownloadLink();
addToFinished(lastDownloadFinished);
if (lastDownloadFinished.getFilePackage().getRemainingLinks() == 0) {
Interaction.handleInteraction(Interaction.INTERACTION_DOWNLOAD_PACKAGE_FINISHED,this);
if (JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION) == 2) {
JDUtilities.getDownloadController().removePackage(lastDownloadFinished.getFilePackage());
break;
}
}
if (lastDownloadFinished.getLinkStatus().isFinished() && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION) == 0) {
lastDownloadFinished.getFilePackage().remove(lastDownloadFinished);
}
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED:
if (uiInterface == null) return;
if (event.getParameter() != null && event.getParameter() instanceof ArrayList && ((ArrayList)event.getParameter()).size() > 0) {
ArrayList<DownloadLink> links=(ArrayList<DownloadLink>)event.getParameter();
uiInterface.addLinksToGrabber(links,false);
}
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED_HIDEGRABBER:
if (event.getParameter() != null && event.getParameter() instanceof ArrayList && ((ArrayList)event.getParameter()).size() > 0) {
ArrayList<DownloadLink> links=(ArrayList<DownloadLink>)event.getParameter();
uiInterface.addLinksToGrabber(links,true);
}
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED_HIDEGRABBER_START:
if (event.getParameter() != null && event.getParameter() instanceof ArrayList && ((ArrayList)event.getParameter()).size() > 0) {
ArrayList<DownloadLink> links=(ArrayList<DownloadLink>)event.getParameter();
uiInterface.addLinksToGrabber(links,true);
if (getDownloadStatus() == JDController.DOWNLOAD_NOT_RUNNING) {
toggleStartStop();
}
}
break;
}
}"
21086,"public void updateCollectives(){
synchronized (downloadLinkList) {
    totalEstimatedPackageSize_v2=0;
    totalDownloadSpeed_v2=0;
    linksFinished=0;
    linksInProgress=0;
    linksFailed=0;
    totalBytesLoaded_v2=0;
    long avg=0;
    DownloadLink next;
    int i=0;
    for (Iterator<DownloadLink> it=downloadLinkList.iterator(); it.hasNext(); ) {
      next=it.next();
      if (next.getDownloadSize() > 0) {
        if (next.isEnabled()) {
          totalEstimatedPackageSize_v2+=next.getDownloadSize();
        }
        avg=(i * avg + next.getDownloadSize()) / (i + 1);
        i++;
      }
 else {
        if (it.hasNext()) {
          if (next.isEnabled()) {
            totalEstimatedPackageSize_v2+=avg;
          }
        }
 else {
          if (next.isEnabled()) {
            totalEstimatedPackageSize_v2+=avg / 2;
          }
        }
      }
      totalDownloadSpeed_v2+=Math.max(0,next.getDownloadSpeed());
      if (next.isEnabled()) {
        totalBytesLoaded_v2+=next.getDownloadCurrent();
      }
      linksInProgress+=next.getLinkStatus().isPluginActive() ? 1 : 0;
      if (next.getLinkStatus().hasStatus(LinkStatus.FINISHED) || next.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS)) {
        linksFinished+=1;
      }
      if (next.getLinkStatus().isFailed() && next.isEnabled()) {
        linksFailed++;
      }
    }
  }
  updateTime=System.currentTimeMillis();
}","public void updateCollectives(){
synchronized (downloadLinkList) {
    totalEstimatedPackageSize_v2=0;
    totalDownloadSpeed_v2=0;
    linksFinished=0;
    linksInProgress=0;
    linksFailed=0;
    totalBytesLoaded_v2=0;
    long avg=0;
    DownloadLink next;
    int i=0;
    for (Iterator<DownloadLink> it=downloadLinkList.iterator(); it.hasNext(); ) {
      next=it.next();
      if (next.getDownloadSize() > 0) {
        if (next.isEnabled()) {
          totalEstimatedPackageSize_v2+=next.getDownloadSize();
        }
        avg=(i * avg + next.getDownloadSize()) / (i + 1);
        i++;
      }
 else {
        if (it.hasNext()) {
          if (next.isEnabled()) {
            totalEstimatedPackageSize_v2+=avg;
          }
        }
 else {
          if (next.isEnabled()) {
            totalEstimatedPackageSize_v2+=avg / 2;
          }
        }
      }
      totalDownloadSpeed_v2+=Math.max(0,next.getDownloadSpeed());
      if (next.isEnabled()) {
        totalBytesLoaded_v2+=next.getDownloadCurrent();
      }
      linksInProgress+=next.getLinkStatus().isPluginActive() ? 1 : 0;
      if (next.getLinkStatus().isFinished()) {
        linksFinished+=1;
      }
      if (next.getLinkStatus().isFailed() && next.isEnabled()) {
        linksFailed++;
      }
    }
  }
  updateTime=System.currentTimeMillis();
}"
21087,"public boolean isFailed(){
  return !hasOnlyStatus(FINISHED | ERROR_IP_BLOCKED | TODO| PLUGIN_ACTIVE| PLUGIN_IN_PROGRESS| DOWNLOADINTERFACE_IN_PROGRESS| WAITING_USERIO);
}","public boolean isFailed(){
  return !hasOnlyStatus(FINISHED | ERROR_ALREADYEXISTS | ERROR_IP_BLOCKED| TODO| PLUGIN_ACTIVE| PLUGIN_IN_PROGRESS| DOWNLOADINTERFACE_IN_PROGRESS| WAITING_USERIO);
}"
21088,"public void onUnrarEvent(int id,UnrarWrapper wrapper){
  LinkStatus ls=wrapper.getDownloadLink().getLinkStatus();
  if (wrapper.getDownloadLink().getFilePackage() == FilePackage.getDefaultFilePackage() && wrapper.getProgressController() == null) {
    logger.warning(""String_Node_Str"" + wrapper.getDownloadLink());
    ProgressController progress=new ProgressController(JDL.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getFileOutput()),100);
    wrapper.setProgressController(progress);
  }
  if (wrapper.getProgressController() != null) {
    onUnrarDummyEvent(id,wrapper);
    return;
  }
switch (id) {
case JDUnrarConstants.INVALID_BINARY:
    logger.severe(""String_Node_Str"");
  this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
this.getPluginConfig().save();
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED:
ArrayList<DownloadLink> list=this.getArchiveList(wrapper.getDownloadLink());
for (DownloadLink link : list) {
if (link == null) continue;
LinkStatus lls=link.getLinkStatus();
if (wrapper.getException() != null) {
lls.addStatus(LinkStatus.ERROR_POST_PROCESS);
lls.setErrorMessage(""String_Node_Str"" + wrapper.getException().getMessage());
link.requestGuiUpdate();
}
 else {
lls.addStatus(LinkStatus.ERROR_POST_PROCESS);
lls.setErrorMessage(""String_Node_Str"");
link.requestGuiUpdate();
}
}
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PASSWORD_NEEDED_TO_CONTINUE:
wrapper.getDownloadLink().requestGuiUpdate();
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,true)) {
String pass=JDUtilities.getGUI().showCountdownUserInputDialog(JDL.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getName()),null);
if (pass == null) {
ls.addStatus(LinkStatus.ERROR_POST_PROCESS);
ls.setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
this.onFinished(wrapper);
break;
}
wrapper.setPassword(pass);
}
break;
case JDUnrarConstants.WRAPPER_CRACK_PASSWORD:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_NEW_STATUS:
break;
case JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
assignRealDownloadDir(wrapper);
break;
case JDUnrarConstants.WRAPPER_PASSWORD_FOUND:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
wrapper.getDownloadLink().requestGuiUpdate();
wrapper.getDownloadLink().setPluginProgress(null);
break;
case JDUnrarConstants.WRAPPER_PASSWORT_CRACKING:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getCrackProgress(),100,Color.GREEN.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getCrackProgress());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_ON_PROGRESS:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getExtractedSize(),wrapper.getTotalSize(),Color.YELLOW.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getExtractedSize());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_START_EXTRACTION:
break;
case JDUnrarConstants.WRAPPER_STARTED:
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC:
list=this.getArchiveList(wrapper.getDownloadLink());
list.add(null);
DownloadLink crc=null;
if (wrapper.getCurrentVolume() > 0) {
crc=list.size() >= wrapper.getCurrentVolume() ? list.get(wrapper.getCurrentVolume() - 1) : null;
}
if (crc != null) {
crc.getLinkStatus().removeStatus(LinkStatus.FINISHED);
crc.getLinkStatus().addStatus(LinkStatus.ERROR_DOWNLOAD_FAILED);
crc.getLinkStatus().setValue(LinkStatus.VALUE_FAILED_HASH);
crc.getLinkStatus().setErrorMessage(JDL.LF(""String_Node_Str"",""String_Node_Str"",crc.getName()));
crc.requestGuiUpdate();
}
 else {
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
link.requestGuiUpdate();
}
}
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED:
break;
case JDUnrarConstants.WRAPPER_FINISHED_SUCCESSFULL:
list=this.getArchiveList(wrapper.getDownloadLink());
File[] files=new File[wrapper.getFiles().size()];
int i=0;
for (ArchivFile af : wrapper.getFiles()) {
files[i++]=af.getFile();
}
JDUtilities.getController().fireControlEvent(new ControlEvent(wrapper,ControlEvent.CONTROL_ON_FILEOUTPUT,files));
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().addStatus(LinkStatus.FINISHED);
link.getLinkStatus().removeStatus(LinkStatus.ERROR_POST_PROCESS);
link.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
link.requestGuiUpdate();
}
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,false)) {
File fileOutput=new File(wrapper.getDownloadLink().getFileOutput());
String packname=wrapper.getDownloadLink().getFilePackage().getName();
File infoFiles=new File(fileOutput.getParentFile(),packname.replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
if (infoFiles.exists() && infoFiles.delete()) {
logger.info(infoFiles.getName() + ""String_Node_Str"");
}
}
this.onFinished(wrapper);
break;
default :
}
}","public void onUnrarEvent(int id,UnrarWrapper wrapper){
  LinkStatus ls=wrapper.getDownloadLink().getLinkStatus();
  if (wrapper.getDownloadLink().getFilePackage() == FilePackage.getDefaultFilePackage() && wrapper.getProgressController() == null) {
    logger.warning(""String_Node_Str"" + wrapper.getDownloadLink());
    ProgressController progress=new ProgressController(JDL.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getFileOutput()),100);
    wrapper.setProgressController(progress);
  }
  if (wrapper.getProgressController() != null) {
    onUnrarDummyEvent(id,wrapper);
    return;
  }
switch (id) {
case JDUnrarConstants.INVALID_BINARY:
    logger.severe(""String_Node_Str"");
  this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
this.getPluginConfig().save();
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED:
ArrayList<DownloadLink> list=this.getArchiveList(wrapper.getDownloadLink());
for (DownloadLink link : list) {
if (link == null) continue;
LinkStatus lls=link.getLinkStatus();
if (wrapper.getException() != null) {
lls.addStatus(LinkStatus.ERROR_POST_PROCESS);
lls.setErrorMessage(""String_Node_Str"" + wrapper.getException().getMessage());
link.requestGuiUpdate();
}
 else {
lls.addStatus(LinkStatus.ERROR_POST_PROCESS);
lls.setErrorMessage(""String_Node_Str"");
link.requestGuiUpdate();
}
}
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PASSWORD_NEEDED_TO_CONTINUE:
wrapper.getDownloadLink().requestGuiUpdate();
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,true)) {
String pass=JDUtilities.getGUI().showCountdownUserInputDialog(JDL.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getName()),null);
if (pass == null) {
ls.addStatus(LinkStatus.ERROR_POST_PROCESS);
ls.setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
this.onFinished(wrapper);
break;
}
wrapper.setPassword(pass);
}
break;
case JDUnrarConstants.WRAPPER_CRACK_PASSWORD:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_NEW_STATUS:
break;
case JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
assignRealDownloadDir(wrapper);
break;
case JDUnrarConstants.WRAPPER_PASSWORD_FOUND:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
wrapper.getDownloadLink().requestGuiUpdate();
wrapper.getDownloadLink().setPluginProgress(null);
break;
case JDUnrarConstants.WRAPPER_PASSWORT_CRACKING:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getCrackProgress(),100,Color.GREEN.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getCrackProgress());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_ON_PROGRESS:
wrapper.getDownloadLink().getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getExtractedSize(),wrapper.getTotalSize(),Color.YELLOW.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getExtractedSize());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_START_EXTRACTION:
break;
case JDUnrarConstants.WRAPPER_STARTED:
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC:
list=this.getArchiveList(wrapper.getDownloadLink());
try {
if (wrapper.getCurrentFile() != null) {
logger.info(""String_Node_Str"" + wrapper.getCurrentFile().getFile() + ""String_Node_Str"");
wrapper.getCurrentFile().getFile().delete();
}
}
 catch (Exception e) {
}
DownloadLink crc=null;
if (wrapper.getCurrentVolume() > 0) {
crc=list.size() >= wrapper.getCurrentVolume() ? list.get(wrapper.getCurrentVolume() - 1) : null;
}
if (crc != null) {
for (DownloadLink link : list) {
if (link == null) {
continue;
}
if (link == crc) {
link.getLinkStatus().removeStatus(LinkStatus.FINISHED);
link.getLinkStatus().removeStatus(LinkStatus.ERROR_ALREADYEXISTS);
link.getLinkStatus().addStatus(LinkStatus.ERROR_DOWNLOAD_FAILED);
link.getLinkStatus().setValue(LinkStatus.VALUE_FAILED_HASH);
link.getLinkStatus().setErrorMessage(JDL.LF(""String_Node_Str"",""String_Node_Str"",crc.getName()));
}
 else {
link.getLinkStatus().addStatus(LinkStatus.ERROR_POST_PROCESS);
link.getLinkStatus().setErrorMessage(""String_Node_Str"");
}
link.requestGuiUpdate();
}
}
 else {
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
link.requestGuiUpdate();
}
}
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED:
break;
case JDUnrarConstants.WRAPPER_FINISHED_SUCCESSFULL:
list=this.getArchiveList(wrapper.getDownloadLink());
File[] files=new File[wrapper.getFiles().size()];
int i=0;
for (ArchivFile af : wrapper.getFiles()) {
files[i++]=af.getFile();
}
JDUtilities.getController().fireControlEvent(new ControlEvent(wrapper,ControlEvent.CONTROL_ON_FILEOUTPUT,files));
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().addStatus(LinkStatus.FINISHED);
link.getLinkStatus().removeStatus(LinkStatus.ERROR_POST_PROCESS);
link.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
link.requestGuiUpdate();
}
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,false)) {
File fileOutput=new File(wrapper.getDownloadLink().getFileOutput());
String packname=wrapper.getDownloadLink().getFilePackage().getName();
File infoFiles=new File(fileOutput.getParentFile(),packname.replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
if (infoFiles.exists() && infoFiles.delete()) {
logger.info(infoFiles.getName() + ""String_Node_Str"");
}
}
this.onFinished(wrapper);
break;
default :
}
}"
21089,"/** 
 * Gibt alle downloadlinks zum übergebenen link zurück. d.h. alle links die zu dem archiv gehören
 * @param downloadLink
 * @return
 */
private ArrayList<DownloadLink> getArchiveList(DownloadLink downloadLink){
  ArrayList<DownloadLink> ret=new ArrayList<DownloadLink>();
  File file;
  int type=JDUnrar.getArchivePartType(downloadLink);
  String name=null;
  int nums=0;
  int i=0;
switch (type) {
case JDUnrarConstants.NO_START_PART:
case JDUnrarConstants.MULTIPART_START_PART:
case JDUnrarConstants.MULTIPART_START_PART_V2:
    name=this.getArchiveName(downloadLink);
  String test=null;
if ((test=new Regex(downloadLink.getFileOutput(),""String_Node_Str"").getMatch(0)) != null) {
  nums=test.length();
  i=1;
  while ((file=new File(new File(downloadLink.getFileOutput()).getParentFile(),name + ""String_Node_Str"" + Formatter.fillString(i + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nums)+ ""String_Node_Str"")).exists() || JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.FINISHED) != null) {
    DownloadLink dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.FINISHED);
    if (dl == null)     dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.ERROR_ALREADYEXISTS);
    ret.add(dl);
    i++;
  }
  break;
}
 else if ((test=new Regex(downloadLink.getFileOutput(),""String_Node_Str"").getMatch(0)) != null) {
  ret.add(downloadLink);
  i=0;
  nums=-1;
  for (int a=5; a > 0; a--) {
    String len=""String_Node_Str"";
    for (int b=a; b > 0; b--) {
      len=len + ""String_Node_Str"";
    }
    if (new File(test + len).exists()) {
      nums=a;
      break;
    }
  }
  if (nums != -1) {
    while ((file=new File(new File(downloadLink.getFileOutput()).getParentFile(),name + ""String_Node_Str"" + Formatter.fillString(i + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nums))).exists() || JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.FINISHED) != null) {
      DownloadLink dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.FINISHED);
      if (dl == null)       dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.ERROR_ALREADYEXISTS);
      ret.add(dl);
      i++;
    }
  }
}
break;
case JDUnrarConstants.SINGLE_PART_ARCHIVE:
ret.add(downloadLink);
break;
}
return ret;
}","/** 
 * Gibt alle downloadlinks zum übergebenen link zurück. d.h. alle links die zu dem archiv gehören
 * @param downloadLink
 * @return
 */
private ArrayList<DownloadLink> getArchiveList(DownloadLink downloadLink){
  ArrayList<DownloadLink> ret=new ArrayList<DownloadLink>();
  File file;
  int type=JDUnrar.getArchivePartType(downloadLink);
  String name=null;
  int nums=0;
  int i=0;
switch (type) {
case JDUnrarConstants.NO_START_PART:
case JDUnrarConstants.MULTIPART_START_PART:
case JDUnrarConstants.MULTIPART_START_PART_V2:
    name=this.getArchiveName(downloadLink);
  String test=null;
if ((test=new Regex(downloadLink.getFileOutput(),""String_Node_Str"").getMatch(0)) != null) {
  nums=test.length();
  i=1;
  while ((file=new File(new File(downloadLink.getFileOutput()).getParentFile(),name + ""String_Node_Str"" + Formatter.fillString(i + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nums)+ ""String_Node_Str"")).exists() || JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.FINISHED) != null) {
    DownloadLink dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.FINISHED);
    if (dl == null)     dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.ERROR_ALREADYEXISTS);
    if (dl == null)     dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,null);
    if (dl != null)     ret.add(dl);
    i++;
  }
  break;
}
 else if ((test=new Regex(downloadLink.getFileOutput(),""String_Node_Str"").getMatch(0)) != null) {
  ret.add(downloadLink);
  i=0;
  nums=-1;
  for (int a=5; a > 0; a--) {
    String len=""String_Node_Str"";
    for (int b=a; b > 0; b--) {
      len=len + ""String_Node_Str"";
    }
    if (new File(test + len).exists()) {
      nums=a;
      break;
    }
  }
  if (nums != -1) {
    while ((file=new File(new File(downloadLink.getFileOutput()).getParentFile(),name + ""String_Node_Str"" + Formatter.fillString(i + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nums))).exists() || JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.FINISHED) != null) {
      DownloadLink dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.FINISHED);
      if (dl == null)       dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,LinkStatus.ERROR_ALREADYEXISTS);
      if (dl == null)       dl=JDUtilities.getController().getDownloadLinkByFileOutput(file,null);
      if (dl != null)       ret.add(dl);
      i++;
    }
  }
}
break;
case JDUnrarConstants.SINGLE_PART_ARCHIVE:
ret.add(downloadLink);
break;
}
return ret;
}"
21090,"public void controlEvent(final ControlEvent event){
  new GuiRunnable<Object>(){
    public Object runSave(){
switch (event.getID()) {
case ControlEvent.CONTROL_DOWNLOAD_START:
        stopButton.setEnabled(true);
      pauseButton.setEnabled(true);
    playButton.setEnabled(false);
  if (speedmeter != null)   speedmeter.start();
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
case ControlEvent.CONTROL_DOWNLOAD_STOP:
stopButton.setEnabled(false);
setPause(false);
pauseButton.setEnabled(false);
playButton.setEnabled(true);
if (speedmeter != null) speedmeter.stop();
break;
}
return null;
}
}
.start();
}","public void controlEvent(final ControlEvent event){
  new GuiRunnable<Object>(){
    public Object runSave(){
switch (event.getID()) {
case ControlEvent.CONTROL_DOWNLOAD_START:
        stopButton.setEnabled(true);
      pauseButton.setEnabled(true);
    playButton.setEnabled(false);
  speedmeter.start();
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
case ControlEvent.CONTROL_DOWNLOAD_STOP:
stopButton.setEnabled(false);
setPause(false);
pauseButton.setEnabled(false);
playButton.setEnabled(true);
speedmeter.stop();
break;
}
return null;
}
}
.start();
}"
21091,"public Object runSave(){
switch (event.getID()) {
case ControlEvent.CONTROL_DOWNLOAD_START:
    stopButton.setEnabled(true);
  pauseButton.setEnabled(true);
playButton.setEnabled(false);
if (speedmeter != null) speedmeter.start();
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
case ControlEvent.CONTROL_DOWNLOAD_STOP:
stopButton.setEnabled(false);
setPause(false);
pauseButton.setEnabled(false);
playButton.setEnabled(true);
if (speedmeter != null) speedmeter.stop();
break;
}
return null;
}","public Object runSave(){
switch (event.getID()) {
case ControlEvent.CONTROL_DOWNLOAD_START:
    stopButton.setEnabled(true);
  pauseButton.setEnabled(true);
playButton.setEnabled(false);
speedmeter.start();
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
case ControlEvent.CONTROL_DOWNLOAD_STOP:
stopButton.setEnabled(false);
setPause(false);
pauseButton.setEnabled(false);
playButton.setEnabled(true);
speedmeter.stop();
break;
}
return null;
}"
21092,"@Override public void onPropertyChanged(Property source,final String key){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (key == Configuration.PARAM_LATEST_RECONNECT_RESULT) {
        updateReconnectButtons();
      }
 else       if (key == Configuration.PARAM_CLIPBOARD_ALWAYS_ACTIVE) {
        updateClipboardButton();
      }
 else       if (key == Configuration.PARAM_ALLOW_RECONNECT) {
        updateReconnectButtonIcon();
      }
 else       if (key == Configuration.PARAM_DOWNLOAD_PAUSE_SPEED) {
        updatePauseButton();
      }
    }
  }
);
}","@Override public void onPropertyChanged(Property source,final String key){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (key == Configuration.PARAM_LATEST_RECONNECT_RESULT) {
        updateReconnectButtons();
      }
 else       if (key == Configuration.PARAM_CLIPBOARD_ALWAYS_ACTIVE) {
        updateClipboardButton();
      }
 else       if (key == Configuration.PARAM_ALLOW_RECONNECT) {
        updateReconnectButtonIcon();
      }
 else       if (key == Configuration.PARAM_DOWNLOAD_PAUSE_SPEED) {
        updatePauseButton();
      }
 else       if (key == SimpleGuiConstants.PARAM_SHOW_SPEEDMETER) {
        updateSpeedMeterPanel();
      }
    }
  }
);
}"
21093,"private void initListeners(){
  JDController.getInstance().addControlListener(new ConfigPropertyListener(Configuration.PARAM_LATEST_RECONNECT_RESULT,Configuration.PARAM_CLIPBOARD_ALWAYS_ACTIVE,Configuration.PARAM_ALLOW_RECONNECT,Configuration.PARAM_DOWNLOAD_PAUSE_SPEED){
    @Override public void onPropertyChanged(    Property source,    final String key){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (key == Configuration.PARAM_LATEST_RECONNECT_RESULT) {
            updateReconnectButtons();
          }
 else           if (key == Configuration.PARAM_CLIPBOARD_ALWAYS_ACTIVE) {
            updateClipboardButton();
          }
 else           if (key == Configuration.PARAM_ALLOW_RECONNECT) {
            updateReconnectButtonIcon();
          }
 else           if (key == Configuration.PARAM_DOWNLOAD_PAUSE_SPEED) {
            updatePauseButton();
          }
        }
      }
);
    }
  }
);
}","private void initListeners(){
  JDController.getInstance().addControlListener(new ConfigPropertyListener(Configuration.PARAM_LATEST_RECONNECT_RESULT,Configuration.PARAM_CLIPBOARD_ALWAYS_ACTIVE,Configuration.PARAM_ALLOW_RECONNECT,Configuration.PARAM_DOWNLOAD_PAUSE_SPEED,SimpleGuiConstants.PARAM_SHOW_SPEEDMETER){
    @Override public void onPropertyChanged(    Property source,    final String key){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (key == Configuration.PARAM_LATEST_RECONNECT_RESULT) {
            updateReconnectButtons();
          }
 else           if (key == Configuration.PARAM_CLIPBOARD_ALWAYS_ACTIVE) {
            updateClipboardButton();
          }
 else           if (key == Configuration.PARAM_ALLOW_RECONNECT) {
            updateReconnectButtonIcon();
          }
 else           if (key == Configuration.PARAM_DOWNLOAD_PAUSE_SPEED) {
            updatePauseButton();
          }
 else           if (key == SimpleGuiConstants.PARAM_SHOW_SPEEDMETER) {
            updateSpeedMeterPanel();
          }
        }
      }
);
    }
  }
);
}"
21094,"private void addSpeedMeter(){
  speedmeter=new SpeedMeterPanel();
  speedmeter.setPreferredSize(new Dimension(100,30));
  if (SubConfiguration.getConfig(SimpleGuiConstants.GUICONFIGNAME).getBooleanProperty(SimpleGuiConstants.PARAM_SHOW_SPEEDMETER,true)) {
    add(speedmeter,""String_Node_Str"");
  }
}","private void addSpeedMeter(){
  speedmeter=new SpeedMeterPanel();
  updateSpeedMeterPanel();
}"
21095,"public void controlEvent(final ControlEvent event){
  EventQueue.invokeLater(new Runnable(){
    public void run(){
switch (event.getID()) {
case ControlEvent.CONTROL_INIT_COMPLETE:
        logger.info(""String_Node_Str"");
      SimpleGUI.this.setWaiting(false);
    SimpleGUI.this.setEnabled(true);
  if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_START_DOWNLOADS_AFTER_START,false)) {
    new Thread(){
      public void run(){
        this.setName(""String_Node_Str"");
        final ProgressController pc=new ProgressController(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        pc.getBroadcaster().addListener(new ProgressControllerListener(){
          public void onProgressControllerEvent(          ProgressControllerEvent event){
            pc.setStatusText(""String_Node_Str"");
          }
        }
);
        pc.finalize(10 * 1000l);
        while (!pc.isFinished()) {
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
            break;
          }
        }
        if (!pc.isAbort())         JDUtilities.getController().startDownloads();
      }
    }
.start();
  }
break;
case ControlEvent.CONTROL_PLUGIN_ACTIVE:
logger.info(""String_Node_Str"" + event.getSource());
setTitle(JDUtilities.getJDTitle());
break;
case ControlEvent.CONTROL_SYSTEM_EXIT:
SimpleGUI.this.setVisible(false);
SimpleGUI.this.dispose();
break;
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
logger.info(""String_Node_Str"" + event.getSource());
setTitle(JDUtilities.getJDTitle());
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
if (speedmeter != null) speedmeter.stop();
for (DownloadLink link : DownloadController.getInstance().getAllDownloadLinks()) {
if (link.getLinkStatus().hasStatus(LinkStatus.TODO)) {
logger.info(""String_Node_Str"");
return;
}
}
logger.info(""String_Node_Str"");
break;
case ControlEvent.CONTROL_DOWNLOAD_START:
Balloon.showIfHidden(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
if (speedmeter != null) speedmeter.start();
break;
case ControlEvent.CONTROL_DOWNLOAD_STOP:
Balloon.showIfHidden(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
if (speedmeter != null) speedmeter.stop();
break;
}
}
}
);
}","public void controlEvent(final ControlEvent event){
  EventQueue.invokeLater(new Runnable(){
    public void run(){
switch (event.getID()) {
case ControlEvent.CONTROL_INIT_COMPLETE:
        logger.info(""String_Node_Str"");
      SimpleGUI.this.setWaiting(false);
    SimpleGUI.this.setEnabled(true);
  if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_START_DOWNLOADS_AFTER_START,false)) {
    new Thread(){
      public void run(){
        this.setName(""String_Node_Str"");
        final ProgressController pc=new ProgressController(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        pc.getBroadcaster().addListener(new ProgressControllerListener(){
          public void onProgressControllerEvent(          ProgressControllerEvent event){
            pc.setStatusText(""String_Node_Str"");
          }
        }
);
        pc.finalize(10 * 1000l);
        while (!pc.isFinished()) {
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
            break;
          }
        }
        if (!pc.isAbort())         JDUtilities.getController().startDownloads();
      }
    }
.start();
  }
break;
case ControlEvent.CONTROL_PLUGIN_ACTIVE:
logger.info(""String_Node_Str"" + event.getSource());
setTitle(JDUtilities.getJDTitle());
break;
case ControlEvent.CONTROL_SYSTEM_EXIT:
SimpleGUI.this.setVisible(false);
SimpleGUI.this.dispose();
break;
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
logger.info(""String_Node_Str"" + event.getSource());
setTitle(JDUtilities.getJDTitle());
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
for (DownloadLink link : DownloadController.getInstance().getAllDownloadLinks()) {
if (link.getLinkStatus().hasStatus(LinkStatus.TODO)) {
logger.info(""String_Node_Str"");
return;
}
}
logger.info(""String_Node_Str"");
break;
case ControlEvent.CONTROL_DOWNLOAD_START:
Balloon.showIfHidden(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
break;
case ControlEvent.CONTROL_DOWNLOAD_STOP:
Balloon.showIfHidden(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
break;
}
}
}
);
}"
21096,"public void actionPerformed(ActionEvent e){
  opacity+=fadeSteps;
  if (opacity > 1) {
    opacity=1;
    fadeTimer.stop();
    fadeTimer=null;
  }
 else   if (opacity < 0) {
    opacity=0;
    this.setVisible(false);
    fadeTimer.stop();
    fadeTimer=null;
  }
  update();
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == fadeTimer) {
    opacity+=fadeSteps;
    if (opacity > 1) {
      opacity=1;
      fadeTimer.stop();
      fadeTimer=null;
    }
 else     if (opacity < 0) {
      opacity=0;
      this.setVisible(false);
      fadeTimer.stop();
      fadeTimer=null;
    }
    update();
  }
 else   if (e.getSource() instanceof JMenuItem) {
    SimpleGuiConstants.GUI_CONFIG.setProperty(SimpleGuiConstants.PARAM_SHOW_SPEEDMETER,false);
    SimpleGuiConstants.GUI_CONFIG.save();
  }
}"
21097,"public SpeedMeterPanel(){
  this.i=0;
  this.window=SubConfiguration.getConfig(SimpleGuiConstants.GUICONFIGNAME).getIntegerProperty(SimpleGuiConstants.PARAM_SHOW_SPEEDMETER_WINDOWSIZE,60);
  this.setOpaque(false);
  this.setBorder(BorderFactory.createEtchedBorder());
  this.cache=new int[CAPACITY];
  for (int x=0; x < CAPACITY; x++) {
    cache[x]=0;
  }
  this.setVisible(false);
  JDUtilities.getController().addControlListener(this);
}","public SpeedMeterPanel(){
  this.i=0;
  this.window=SubConfiguration.getConfig(SimpleGuiConstants.GUICONFIGNAME).getIntegerProperty(SimpleGuiConstants.PARAM_SHOW_SPEEDMETER_WINDOWSIZE,60);
  this.setOpaque(false);
  this.setBorder(BorderFactory.createEtchedBorder());
  this.addMouseListener(this);
  this.cache=new int[CAPACITY];
  for (int x=0; x < CAPACITY; x++) {
    cache[x]=0;
  }
  this.setVisible(false);
  JDUtilities.getController().addControlListener(this);
}"
21098,"protected void sendMessage(String channel2,String text){
  lastAction=System.currentTimeMillis();
  setNickAway(false);
  if (text.startsWith(""String_Node_Str"")) {
    int end=text.indexOf(""String_Node_Str"");
    if (end < 0) {
      end=text.length();
    }
    String cmd=text.substring(1,end);
    String rest=text.substring(end).trim();
    if (Regex.matches(cmd,CMD_PM)) {
      textField.setText(""String_Node_Str"");
      end=rest.indexOf(""String_Node_Str"");
      if (end < 0) {
        end=rest.length();
      }
      conn.doPrivmsg(rest.substring(0,end).trim(),prepareToSend(rest.substring(end).trim()));
      lastCommand=""String_Node_Str"" + rest.substring(0,end).trim() + ""String_Node_Str"";
      addToText(null,STYLE_PM,""String_Node_Str"" + rest.substring(0,end).trim() + ""String_Node_Str""+ Utils.prepareMsg(rest.substring(end).trim()));
    }
 else     if (Regex.matches(cmd,CMD_SLAP)) {
      conn.doPrivmsg(channel2,new String(new byte[]{1}) + ""String_Node_Str"" + ""String_Node_Str""+ rest+ ""String_Node_Str""+ new String(new byte[]{1}));
      addToText(null,STYLE_ACTION,conn.getNick() + ""String_Node_Str"" + rest+ ""String_Node_Str"");
      lastCommand=""String_Node_Str"";
    }
 else     if (Regex.matches(cmd,CMD_ACTION)) {
      lastCommand=""String_Node_Str"";
      conn.doPrivmsg(channel2,new String(new byte[]{1}) + ""String_Node_Str"" + prepareToSend(rest.trim())+ new String(new byte[]{1}));
      addToText(null,STYLE_ACTION,conn.getNick() + ""String_Node_Str"" + Utils.prepareMsg(rest.trim()));
    }
 else     if (Regex.matches(cmd,CMD_VERSION)) {
      String msg=""String_Node_Str"" + JDUtilities.getJDTitle() + ""String_Node_Str""+ JDUtilities.getJavaVersion()+ ""String_Node_Str""+ OSDetector.getOSString()+ ""String_Node_Str"";
      conn.doPrivmsg(channel2,new String(new byte[]{1}) + ""String_Node_Str"" + prepareToSend(msg)+ new String(new byte[]{1}));
      addToText(null,STYLE_ACTION,conn.getNick() + ""String_Node_Str"" + Utils.prepareMsg(msg));
    }
 else     if (Regex.matches(cmd,CMD_MODE)) {
      end=rest.indexOf(""String_Node_Str"");
      if (end < 0) {
        end=rest.length();
      }
      lastCommand=""String_Node_Str"";
      conn.doMode(CHANNEL,rest.trim());
    }
 else     if (Regex.matches(cmd,CMD_TRANSLATE)) {
      end=rest.indexOf(""String_Node_Str"");
      if (end < 0) {
        end=rest.length();
      }
      String[] tofrom=rest.substring(0,end).trim().split(""String_Node_Str"");
      if (tofrom == null || tofrom.length != 2) {
        addToText(null,STYLE_ERROR,""String_Node_Str"" + rest.substring(0,end).trim() + ""String_Node_Str"");
        return;
      }
      String t;
      t=JDLocale.translate(tofrom[0],tofrom[1],Utils.prepareMsg(rest.substring(end).trim()));
      lastCommand=""String_Node_Str"" + rest.substring(0,end).trim() + ""String_Node_Str"";
      textField.setText(t);
    }
 else     if (Regex.matches(cmd,CMD_TOPIC)) {
      conn.doTopic(CHANNEL,prepareToSend(rest));
      lastCommand=""String_Node_Str"";
    }
 else     if (Regex.matches(cmd,CMD_JOIN)) {
      conn.doJoin(CHANNEL,null);
      setLoggedIn(true);
      perform();
    }
 else     if (Regex.matches(cmd,CMD_NICK)) {
      conn.doNick(rest.trim());
      lastCommand=""String_Node_Str"";
      subConfig.setProperty(PARAM_NICK,rest.trim());
      subConfig.save();
    }
 else     if (Regex.matches(cmd,CMD_CONNECT)) {
      if (conn == null || !conn.isConnected()) {
        initIRC();
      }
    }
 else     if (Regex.matches(cmd,CMD_DISCONNECT)) {
      if (conn != null && conn.isConnected()) {
        conn.close();
      }
    }
 else     if (Regex.matches(cmd,CMD_EXIT)) {
      setEnabled(false);
    }
 else {
      addToText(null,STYLE_ERROR,""String_Node_Str"" + cmd + ""String_Node_Str"");
    }
    textField.requestFocus();
  }
 else {
    conn.doPrivmsg(channel2,prepareToSend(text));
    addToText(getUser(conn.getNick()),STYLE_SELF,Utils.prepareMsg(text));
    textField.setText(""String_Node_Str"");
    textField.requestFocus();
  }
}","protected void sendMessage(String channel2,String text){
  lastAction=System.currentTimeMillis();
  setNickAway(false);
  if (text.startsWith(""String_Node_Str"")) {
    int end=text.indexOf(""String_Node_Str"");
    if (end < 0) {
      end=text.length();
    }
    String cmd=text.substring(1,end).trim();
    String rest=text.substring(end).trim();
    if (Regex.matches(cmd,CMD_PM)) {
      textField.setText(""String_Node_Str"");
      end=rest.indexOf(""String_Node_Str"");
      if (end < 0) {
        end=rest.length();
      }
      conn.doPrivmsg(rest.substring(0,end).trim(),prepareToSend(rest.substring(end).trim()));
      lastCommand=""String_Node_Str"" + rest.substring(0,end).trim() + ""String_Node_Str"";
      addToText(null,STYLE_PM,""String_Node_Str"" + rest.substring(0,end).trim() + ""String_Node_Str""+ Utils.prepareMsg(rest.substring(end).trim()));
    }
 else     if (Regex.matches(cmd,CMD_SLAP)) {
      conn.doPrivmsg(channel2,new String(new byte[]{1}) + ""String_Node_Str"" + ""String_Node_Str""+ rest+ ""String_Node_Str""+ new String(new byte[]{1}));
      addToText(null,STYLE_ACTION,conn.getNick() + ""String_Node_Str"" + rest+ ""String_Node_Str"");
      lastCommand=""String_Node_Str"";
    }
 else     if (Regex.matches(cmd,CMD_ACTION)) {
      lastCommand=""String_Node_Str"";
      conn.doPrivmsg(channel2,new String(new byte[]{1}) + ""String_Node_Str"" + prepareToSend(rest.trim())+ new String(new byte[]{1}));
      addToText(null,STYLE_ACTION,conn.getNick() + ""String_Node_Str"" + Utils.prepareMsg(rest.trim()));
    }
 else     if (Regex.matches(cmd,CMD_VERSION)) {
      String msg=""String_Node_Str"" + JDUtilities.getJDTitle() + ""String_Node_Str""+ JDUtilities.getJavaVersion()+ ""String_Node_Str""+ OSDetector.getOSString()+ ""String_Node_Str"";
      conn.doPrivmsg(channel2,new String(new byte[]{1}) + ""String_Node_Str"" + prepareToSend(msg)+ new String(new byte[]{1}));
      addToText(null,STYLE_ACTION,conn.getNick() + ""String_Node_Str"" + Utils.prepareMsg(msg));
    }
 else     if (Regex.matches(cmd,CMD_MODE)) {
      end=rest.indexOf(""String_Node_Str"");
      if (end < 0) {
        end=rest.length();
      }
      lastCommand=""String_Node_Str"";
      conn.doMode(CHANNEL,rest.trim());
    }
 else     if (Regex.matches(cmd,CMD_TRANSLATE)) {
      end=rest.indexOf(""String_Node_Str"");
      if (end < 0) {
        end=rest.length();
      }
      String[] tofrom=rest.substring(0,end).trim().split(""String_Node_Str"");
      if (tofrom == null || tofrom.length != 2) {
        addToText(null,STYLE_ERROR,""String_Node_Str"" + rest.substring(0,end).trim() + ""String_Node_Str"");
        return;
      }
      String t;
      t=JDLocale.translate(tofrom[0],tofrom[1],Utils.prepareMsg(rest.substring(end).trim()));
      lastCommand=""String_Node_Str"" + rest.substring(0,end).trim() + ""String_Node_Str"";
      textField.setText(t);
    }
 else     if (Regex.matches(cmd,CMD_TOPIC)) {
      conn.doTopic(CHANNEL,prepareToSend(rest));
      lastCommand=""String_Node_Str"";
    }
 else     if (Regex.matches(cmd,CMD_JOIN)) {
      NAMES.clear();
      if (conn != null)       addToText(null,STYLE_NOTICE,""String_Node_Str"" + rest);
      if (conn != null)       conn.doPart(CHANNEL,""String_Node_Str"" + rest);
      CHANNEL=rest;
      if (conn != null)       conn.doJoin(CHANNEL,null);
      lastCommand=""String_Node_Str"" + rest;
      setLoggedIn(true);
      perform();
    }
 else     if (Regex.matches(cmd,CMD_NICK)) {
      conn.doNick(rest.trim());
      lastCommand=""String_Node_Str"";
      subConfig.setProperty(PARAM_NICK,rest.trim());
      subConfig.save();
    }
 else     if (Regex.matches(cmd,CMD_CONNECT)) {
      if (conn == null || !conn.isConnected()) {
        initIRC();
      }
    }
 else     if (Regex.matches(cmd,CMD_DISCONNECT)) {
      if (conn != null && conn.isConnected()) {
        conn.close();
      }
    }
 else     if (Regex.matches(cmd,CMD_EXIT)) {
      setEnabled(false);
    }
 else {
      addToText(null,STYLE_ERROR,""String_Node_Str"" + cmd + ""String_Node_Str"");
    }
  }
 else {
    conn.doPrivmsg(channel2,prepareToSend(text));
    addToText(getUser(conn.getNick()),STYLE_SELF,Utils.prepareMsg(text));
  }
  textField.setText(""String_Node_Str"");
  textField.requestFocus();
}"
21099,"private boolean checkUnrarCommandIntern(){
  String path=this.getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  String hash=this.getPluginConfig().getStringProperty(JDUnrarConstants.UNRAR_HASH,null);
  if (hash != null && hash.length() == 32 && path != null && path.length() != 0) {
    String curhash=JDHash.getMD5(new File(path));
    if (curhash != null && curhash.equalsIgnoreCase(hash))     return true;
  }
 else {
    path=null;
    hash=null;
  }
  if (path == null || path.length() == 0) {
    if (OSDetector.isWindows()) {
      path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
      this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
      this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
      this.getPluginConfig().save();
      return true;
    }
 else {
      if (OSDetector.isLinux()) {
        path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
        chmodUnrar(path);
        if (isUnrarCommandValid(path)) {
          this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
          this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
          this.getPluginConfig().save();
          return true;
        }
      }
      if (OSDetector.isMac()) {
        path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
        chmodUnrar(path);
        if (isUnrarCommandValid(path)) {
          this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
          this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
          this.getPluginConfig().save();
          return true;
        }
      }
      if (isUnrarCommandValid(""String_Node_Str"")) {
        path=""String_Node_Str"";
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
        this.getPluginConfig().save();
        return true;
      }
      if (isUnrarCommandValid(""String_Node_Str"")) {
        path=""String_Node_Str"";
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
        this.getPluginConfig().save();
        return true;
      }
      try {
        String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
        for (        String element : charset) {
          File fi=new File(element,""String_Node_Str"");
          File fi2=new File(element,""String_Node_Str"");
          if (fi.isFile() && isUnrarCommandValid(fi.getAbsolutePath())) {
            path=fi.getAbsolutePath();
            this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
            this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
            this.getPluginConfig().save();
            return true;
          }
 else           if (fi2.isFile() && isUnrarCommandValid(fi2.getAbsolutePath())) {
            path=fi2.getAbsolutePath();
            this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
            this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
            this.getPluginConfig().save();
            return true;
          }
        }
      }
 catch (      Throwable e) {
      }
      this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
      this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
      this.getPluginConfig().save();
      return false;
    }
  }
  this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
  this.getPluginConfig().save();
  return false;
}","private boolean checkUnrarCommandIntern(){
  String path=this.getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  String hash=this.getPluginConfig().getStringProperty(JDUnrarConstants.UNRAR_HASH,null);
  if (hash != null && hash.length() == 32 && path != null && path.length() != 0) {
    String curhash=JDHash.getMD5(new File(path));
    if (curhash != null) {
      if (curhash.equalsIgnoreCase(hash)) {
        return true;
      }
 else {
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,curhash);
        this.getPluginConfig().save();
        return true;
      }
    }
  }
 else {
    path=null;
    hash=null;
  }
  if (path == null || path.length() == 0) {
    if (OSDetector.isWindows()) {
      path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
      this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
      this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
      this.getPluginConfig().save();
      return true;
    }
 else {
      if (OSDetector.isLinux()) {
        path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
        chmodUnrar(path);
        if (isUnrarCommandValid(path)) {
          this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
          this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
          this.getPluginConfig().save();
          return true;
        }
      }
      if (OSDetector.isMac()) {
        path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
        chmodUnrar(path);
        if (isUnrarCommandValid(path)) {
          this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
          this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
          this.getPluginConfig().save();
          return true;
        }
      }
      if (isUnrarCommandValid(""String_Node_Str"")) {
        path=""String_Node_Str"";
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
        this.getPluginConfig().save();
        return true;
      }
      if (isUnrarCommandValid(""String_Node_Str"")) {
        path=""String_Node_Str"";
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
        this.getPluginConfig().save();
        return true;
      }
      try {
        String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
        for (        String element : charset) {
          File fi=new File(element,""String_Node_Str"");
          File fi2=new File(element,""String_Node_Str"");
          if (fi.isFile() && isUnrarCommandValid(fi.getAbsolutePath())) {
            path=fi.getAbsolutePath();
            this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
            this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
            this.getPluginConfig().save();
            return true;
          }
 else           if (fi2.isFile() && isUnrarCommandValid(fi2.getAbsolutePath())) {
            path=fi2.getAbsolutePath();
            this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
            this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
            this.getPluginConfig().save();
            return true;
          }
        }
      }
 catch (      Throwable e) {
      }
      this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
      this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
      this.getPluginConfig().save();
      return false;
    }
  }
  this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
  this.getPluginConfig().save();
  return false;
}"
21100,"/** 
 * Startet das abwarbeiten der extractqueue
 */
private void addToQueue(final DownloadLink link){
  if (getPluginConfig().getStringProperty(JDUnrarConstants.UNRAR_HASH,null) == null) {
    logger.warning(""String_Node_Str"");
    return;
  }
  if (!new File(link.getFileOutput()).exists())   return;
  link.getLinkStatus().removeStatus(LinkStatus.ERROR_POST_PROCESS);
  link.getLinkStatus().setErrorMessage(null);
  File dl=this.getExtractToPath(link);
  if (link.getHost().equals(DUMMY_HOSTER)) {
    ProgressController progress=new ProgressController(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",link.getFileOutput()),100);
    link.setProperty(""String_Node_Str"",progress);
  }
  UnrarWrapper wrapper=new UnrarWrapper(link);
  wrapper.addUnrarListener(this);
  wrapper.setExtractTo(dl);
  wrapper.setRemoveAfterExtract(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,false));
  wrapper.setMoveFilesToBaseDirAfterExtraction(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_COPY_FILES_TO_BASE_DIR_AFTER_EXTRACT,false));
  wrapper.setOverwrite(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_OVERWRITE,true));
  wrapper.setUnrarCommand(getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND));
  ArrayList<String> pwList=new ArrayList<String>();
  String[] linkPws=JDUtilities.passwordStringToArray(link.getFilePackage().getPassword());
  for (  String pw : linkPws) {
    pwList.add(pw);
  }
  pwList.addAll(PasswordListController.getInstance().getPasswordList());
  pwList.add(this.getArchiveName(link));
  pwList.add(new File(link.getFileOutput()).getName());
  wrapper.setPasswordList(pwList.toArray(new String[]{}));
  queue.add(wrapper);
  queue.start();
  ArrayList<DownloadLink> list=this.getArchiveList(link);
  for (  DownloadLink l : list) {
    if (l == null)     continue;
    l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,dl.getAbsolutePath());
  }
}","/** 
 * Startet das abwarbeiten der extractqueue
 */
private void addToQueue(final DownloadLink link){
  if (getPluginConfig().getStringProperty(JDUnrarConstants.UNRAR_HASH,null) == null) {
    logger.warning(""String_Node_Str"");
    return;
  }
  if (!new File(link.getFileOutput()).exists())   return;
  link.getLinkStatus().removeStatus(LinkStatus.ERROR_POST_PROCESS);
  link.getLinkStatus().setErrorMessage(null);
  File dl=this.getExtractToPath(link);
  if (link.getHost().equals(DUMMY_HOSTER)) {
    ProgressController progress=new ProgressController(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",link.getFileOutput()),100);
    link.setProperty(""String_Node_Str"",progress);
  }
  UnrarWrapper wrapper=new UnrarWrapper(link);
  wrapper.addUnrarListener(this);
  wrapper.setExtractTo(dl);
  wrapper.setRemoveAfterExtract(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,false));
  wrapper.setOverwrite(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_OVERWRITE,true));
  wrapper.setUnrarCommand(getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND));
  ArrayList<String> pwList=new ArrayList<String>();
  String[] linkPws=JDUtilities.passwordStringToArray(link.getFilePackage().getPassword());
  for (  String pw : linkPws) {
    pwList.add(pw);
  }
  pwList.addAll(PasswordListController.getInstance().getPasswordList());
  pwList.add(this.getArchiveName(link));
  pwList.add(new File(link.getFileOutput()).getName());
  wrapper.setPasswordList(pwList.toArray(new String[]{}));
  queue.add(wrapper);
  queue.start();
  ArrayList<DownloadLink> list=this.getArchiveList(link);
  for (  DownloadLink l : list) {
    if (l == null)     continue;
    l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,dl.getAbsolutePath());
  }
}"
21101,"public void initConfig(){
  SubConfiguration subConfig=getPluginConfig();
  ConfigEntry ce;
  ConfigEntry conditionEntry;
  String hash=this.getPluginConfig().getStringProperty(JDUnrarConstants.UNRAR_HASH,null);
  if (hash == null) {
    config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
    ce.setDefaultValue(""String_Node_Str"");
  }
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_USE_EXTRACT_PATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,JDUnrarConstants.CONFIG_KEY_UNRARPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_OVERWRITE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  this.passwordConfig=new ConfigContainer(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,passwordConfig));
  passwordConfig.addEntry(new ConfigEntry(ConfigContainer.TYPE_LISTCONTROLLED,(ListController)PasswordListController.getInstance(),JDLocale.LF(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  ConfigContainer ext=new ConfigContainer(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,ext));
  ext.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,JDUnrarConstants.CONFIG_KEY_SUBPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,JDUnrarConstants.CONFIG_KEY_SUBPATH_MINNUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,600).setDefaultValue(0));
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_DEEP_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_COPY_FILES_TO_BASE_DIR_AFTER_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
}","public void initConfig(){
  SubConfiguration subConfig=getPluginConfig();
  ConfigEntry ce;
  ConfigEntry conditionEntry;
  String hash=this.getPluginConfig().getStringProperty(JDUnrarConstants.UNRAR_HASH,null);
  if (hash == null) {
    config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
    ce.setDefaultValue(""String_Node_Str"");
  }
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_USE_EXTRACT_PATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,JDUnrarConstants.CONFIG_KEY_UNRARPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_OVERWRITE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  this.passwordConfig=new ConfigContainer(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,passwordConfig));
  passwordConfig.addEntry(new ConfigEntry(ConfigContainer.TYPE_LISTCONTROLLED,(ListController)PasswordListController.getInstance(),JDLocale.LF(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  ConfigContainer ext=new ConfigContainer(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,ext));
  ext.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,JDUnrarConstants.CONFIG_KEY_SUBPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,JDUnrarConstants.CONFIG_KEY_SUBPATH_MINNUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,600).setDefaultValue(0));
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_DEEP_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
}"
21102,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  File file=this.getLocalCaptchaFile();
  Form form=br.getForm(1);
  Browser.download(file,br.cloneBrowser().openGetConnection(""String_Node_Str""));
  Point p=UserIO.getInstance().requestClickPositionDialog(file,JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  if (p == null)   throw new DecrypterException(DecrypterException.CAPTCHA);
  form.remove(""String_Node_Str"");
  form.remove(""String_Node_Str"");
  form.put(""String_Node_Str"",p.x + ""String_Node_Str"");
  form.put(""String_Node_Str"",p.y + ""String_Node_Str"");
  br.submitForm(form);
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  for (  String link : links) {
    decryptedLinks.add(createDownloadlink(link.trim()));
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  File file=this.getLocalCaptchaFile();
  Form form=br.getForm(0);
  Browser.download(file,br.cloneBrowser().openGetConnection(""String_Node_Str""));
  Point p=UserIO.getInstance().requestClickPositionDialog(file,JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  if (p == null)   throw new DecrypterException(DecrypterException.CAPTCHA);
  form.remove(""String_Node_Str"");
  form.remove(""String_Node_Str"");
  form.put(""String_Node_Str"",p.x + ""String_Node_Str"");
  form.put(""String_Node_Str"",p.y + ""String_Node_Str"");
  br.submitForm(form);
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  for (  String link : links) {
    decryptedLinks.add(createDownloadlink(link.trim()));
  }
  return decryptedLinks;
}"
21103,"public void fireTableChanged(int id,ArrayList<DownloadLink> links){
  if (tablerefreshinprogress)   return;
  final ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(links);
  final int id2=id;
  new Thread(){
    public void run(){
      tablerefreshinprogress=true;
synchronized (DownloadController.ControllerLock) {
synchronized (JDUtilities.getController().getPackages()) {
          try {
            internalTreeTable.fireTableChanged(id2,links2);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        tablerefreshinprogress=false;
      }
    }
  }
.start();
}","public void fireTableChanged(int id,ArrayList<DownloadLink> links){
  if (tablerefreshinprogress)   return;
  final ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(links);
  final int id2=id;
  new Thread(){
    public void run(){
      tablerefreshinprogress=true;
synchronized (DownloadController.ControllerLock) {
synchronized (JDUtilities.getController().getPackages()) {
          try {
            internalTreeTable.fireTableChanged(id2,links2);
          }
 catch (          Exception e) {
            logger.severe(""String_Node_Str"");
            updateTableTask(REFRESH_DATA_AND_STRUCTURE_CHANGED,null);
          }
        }
        tablerefreshinprogress=false;
      }
    }
  }
.start();
}"
21104,"public void fireTableChanged(){
  if (tablerefreshinprogress)   return;
  new Thread(){
    public void run(){
      tablerefreshinprogress=true;
      this.setName(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
synchronized (LGINSTANCE.getPackages()) {
          if (gatherer_running) {
            ArrayList<LinkGrabberFilePackage> fps=LGINSTANCE.getPackages();
            int count=0;
            for (            LinkGrabberFilePackage fp : fps) {
              count+=1 + fp.size();
            }
            if (count > (internalTreeTable.getVisibleRect().getHeight() / 16.0)) {
              for (              LinkGrabberFilePackage fp : fps) {
                if (!fp.getBooleanProperty(LinkGrabberTreeTable.PROPERTY_USEREXPAND,false))                 fp.setProperty(LinkGrabberTreeTable.PROPERTY_EXPANDED,false);
              }
            }
 else {
              for (              LinkGrabberFilePackage fp : fps) {
                if (!fp.getBooleanProperty(LinkGrabberTreeTable.PROPERTY_USEREXPAND,false))                 fp.setProperty(LinkGrabberTreeTable.PROPERTY_EXPANDED,true);
              }
            }
          }
          try {
            internalTreeTable.fireTableChanged();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          tablerefreshinprogress=false;
        }
      }
    }
  }
.start();
}","public void fireTableChanged(){
  if (tablerefreshinprogress)   return;
  new Thread(){
    public void run(){
      tablerefreshinprogress=true;
      this.setName(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
synchronized (LGINSTANCE.getPackages()) {
          if (gatherer_running) {
            ArrayList<LinkGrabberFilePackage> fps=LGINSTANCE.getPackages();
            int count=0;
            for (            LinkGrabberFilePackage fp : fps) {
              count+=1 + fp.size();
            }
            if (count > (internalTreeTable.getVisibleRect().getHeight() / 16.0)) {
              for (              LinkGrabberFilePackage fp : fps) {
                if (!fp.getBooleanProperty(LinkGrabberTreeTable.PROPERTY_USEREXPAND,false))                 fp.setProperty(LinkGrabberTreeTable.PROPERTY_EXPANDED,false);
              }
            }
 else {
              for (              LinkGrabberFilePackage fp : fps) {
                if (!fp.getBooleanProperty(LinkGrabberTreeTable.PROPERTY_USEREXPAND,false))                 fp.setProperty(LinkGrabberTreeTable.PROPERTY_EXPANDED,true);
              }
            }
          }
          try {
            internalTreeTable.fireTableChanged();
          }
 catch (          Exception e) {
            logger.severe(""String_Node_Str"");
            Update_Async.restart();
          }
          tablerefreshinprogress=false;
        }
      }
    }
  }
.start();
}"
21105,"public Object runSave(){
  JDFileChooser fc=new JDFileChooser();
  fc.setApproveButtonText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
  fc.setCurrentDirectory(new File(selected_packages2.get(0).getDownloadDirectory()));
  if (fc.showOpenDialog(INSTANCE) == JDFileChooser.APPROVE_OPTION) {
    if (fc.getSelectedFile() != null) {
      for (      LinkGrabberFilePackage fp2 : selected_packages2) {
        fp2.setDownloadDirectory(fc.getSelectedFile().getAbsolutePath());
      }
    }
  }
  return null;
}","public File runSave(){
  JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
  fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
  if (fc.showSaveDialog(SimpleGUI.CURRENTGUI) == JDFileChooser.APPROVE_OPTION)   return fc.getSelectedFile();
  return null;
}"
21106,"public void run(){
  this.setName(""String_Node_Str"");
  if (arg0.getSource() == INSTANCE.Update_Async) {
    if (visible)     fireTableChanged();
    return;
  }
  if (arg0.getSource() == INSTANCE.gathertimer) {
    gathertimer.stop();
    if (waitingList.size() > 0) {
      startLinkGatherer();
    }
    return;
  }
  ArrayList<LinkGrabberFilePackage> selected_packages=new ArrayList<LinkGrabberFilePackage>();
  ArrayList<DownloadLink> selected_links=new ArrayList<DownloadLink>();
  int prio=0;
  String pw=""String_Node_Str"";
  HashMap<String,Object> prop=new HashMap<String,Object>();
  LinkGrabberFilePackage fp;
  String ext=null;
  Set<String> hoster=null;
  String name=null;
  int col=0;
  boolean b=false;
synchronized (LinkGrabberController.ControllerLock) {
synchronized (LGINSTANCE.getPackages()) {
      ArrayList<LinkGrabberFilePackage> fps=LGINSTANCE.getPackages();
      if (arg0.getSource() instanceof LinkGrabberTaskPane) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_ALL:
          LGINSTANCE.getFILTERPACKAGE().clear();
        selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
      break;
case LinkGrabberTreeTableAction.CLEAR:
    stopLinkGatherer();
  lc.abortLinkCheck();
LGINSTANCE.getFILTERPACKAGE().clear();
selected_packages=new ArrayList<LinkGrabberFilePackage>(LGINSTANCE.getPackages());
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.GUI_LOAD:
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setDialogTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(null) == JDFileChooser.APPROVE_OPTION) {
File ret2=fc.getSelectedFile();
if (ret2 != null) {
JDUtilities.getController().loadContainerFile(ret2);
}
}
return null;
}
}
.start();
return;
}
}
 else if (arg0.getSource() instanceof JMenuItem) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.SELECT_HOSTER:
hoster=(Set<String>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_ALL:
LGINSTANCE.getFILTERPACKAGE().clear();
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
case LinkGrabberTreeTableAction.EDIT_DIR:
case LinkGrabberTreeTableAction.SPLIT_HOSTER:
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.SORT:
col=(Integer)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
case LinkGrabberTreeTableAction.DE_ACTIVATE:
prop=(HashMap<String,Object>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_links=(ArrayList<DownloadLink>)prop.get(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.DELETE:
case LinkGrabberTreeTableAction.SET_PW:
case LinkGrabberTreeTableAction.NEW_PACKAGE:
case LinkGrabberTreeTableAction.MERGE_PACKAGE:
case LinkGrabberTreeTableAction.ADD_SELECTED_LINKS:
selected_links=(ArrayList<DownloadLink>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.EXT_FILTER:
ext=(String)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
b=((JCheckBoxMenuItem)arg0.getSource()).isSelected();
break;
}
}
 else if (arg0.getSource() instanceof LinkGrabberTreeTableAction) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.DELETE:
selected_links=(ArrayList<DownloadLink>)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.SORT_ALL:
col=(Integer)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_SELECTED_LINKS:
{
ArrayList<LinkGrabberFilePackage> selected_packages2=new ArrayList<LinkGrabberFilePackage>();
while (selected_links.size() > 0) {
ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(selected_links);
LinkGrabberFilePackage fp3=LGINSTANCE.getFPwithLink(selected_links.get(0));
if (fp3 == null) {
logger.warning(""String_Node_Str"");
selected_links.remove(selected_links.get(0));
continue;
}
LinkGrabberFilePackage fp4=new LinkGrabberFilePackage(fp3.getName());
fp4.setDownloadDirectory(fp3.getDownloadDirectory());
fp4.setPassword(fp3.getPassword());
fp4.setExtractAfterDownload(fp3.isExtractAfterDownload());
fp4.setUseSubDir(fp3.useSubDir());
fp4.setComment(fp3.getComment());
for (DownloadLink dl : links2) {
if (LGINSTANCE.getFPwithLink(dl) != null && LGINSTANCE.getFPwithLink(dl) == fp3) {
fp4.add(dl);
selected_links.remove(dl);
}
}
selected_packages2.add(fp4);
}
confirmPackages(selected_packages2);
}
break;
case LinkGrabberTreeTableAction.SPLIT_HOSTER:
{
for (LinkGrabberFilePackage fp2 : selected_packages) {
synchronized (fp2) {
ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(fp2.getDownloadLinks());
Set<String> hosts=INSTANCE.getHosterList(links2);
for (String host : hosts) {
LinkGrabberFilePackage fp3=new LinkGrabberFilePackage(fp2.getName());
fp3.setDownloadDirectory(fp2.getDownloadDirectory());
fp3.setPassword(fp2.getPassword());
fp3.setExtractAfterDownload(fp2.isExtractAfterDownload());
fp3.setUseSubDir(fp2.useSubDir());
fp3.setComment(fp2.getComment());
for (DownloadLink dl : links2) {
if (dl.getPlugin().getHost().equalsIgnoreCase(host)) {
fp3.add(dl);
}
}
LGINSTANCE.addPackage(fp3);
}
}
}
}
break;
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.removeOffline();
}
break;
case LinkGrabberTreeTableAction.SORT:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.sort(col,false);
}
break;
case LinkGrabberTreeTableAction.SORT_ALL:
if (LGINSTANCE.size() == 1) {
LGINSTANCE.getPackages().get(0).sort(col,false);
}
 else LGINSTANCE.sort(col);
break;
case LinkGrabberTreeTableAction.SELECT_HOSTER:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.keepHostersOnly(hoster);
}
break;
case LinkGrabberTreeTableAction.EDIT_DIR:
final ArrayList<LinkGrabberFilePackage> selected_packages2=new ArrayList<LinkGrabberFilePackage>(selected_packages);
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser();
fc.setApproveButtonText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
fc.setCurrentDirectory(new File(selected_packages2.get(0).getDownloadDirectory()));
if (fc.showOpenDialog(INSTANCE) == JDFileChooser.APPROVE_OPTION) {
if (fc.getSelectedFile() != null) {
for (LinkGrabberFilePackage fp2 : selected_packages2) {
fp2.setDownloadDirectory(fc.getSelectedFile().getAbsolutePath());
}
}
}
return null;
}
}
.start();
break;
case LinkGrabberTreeTableAction.MERGE_PACKAGE:
fp=LGINSTANCE.getFPwithLink(selected_links.get(0));
name=fp.getName();
case LinkGrabberTreeTableAction.NEW_PACKAGE:
fp=LGINSTANCE.getFPwithLink(selected_links.get(0));
LinkGrabberFilePackage nfp;
if (name == null) name=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),fp.getName());
if (name != null) {
nfp=new LinkGrabberFilePackage(name,LGINSTANCE);
nfp.setDownloadDirectory(fp.getDownloadDirectory());
nfp.setExtractAfterDownload(fp.isExtractAfterDownload());
nfp.setUseSubDir(fp.useSubDir());
nfp.setComment(fp.getComment());
ArrayList<String> passwords=null;
for (DownloadLink link : selected_links) {
fp=LGINSTANCE.getFPwithLink(link);
if (fp != null) passwords=JDUtilities.mergePasswords(passwords,fp.getPassword());
}
nfp.addAll(selected_links);
if (passwords != null) nfp.setPassword(JDUtilities.passwordArrayToString(passwords.toArray(new String[passwords.size()])));
if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
LGINSTANCE.addPackageAt(nfp,0);
}
 else {
LGINSTANCE.addPackage(nfp);
}
}
return;
case LinkGrabberTreeTableAction.SET_PW:
pw=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),null);
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setProperty(""String_Node_Str"",pw);
}
return;
case LinkGrabberTreeTableAction.DE_ACTIVATE:
b=(Boolean)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setEnabled(b);
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.ADD_ALL:
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
confirmPackages(selected_packages);
return;
case LinkGrabberTreeTableAction.DELETE:
for (DownloadLink link : selected_links) {
link.setProperty(""String_Node_Str"",true);
fp=LGINSTANCE.getFPwithLink(link);
if (fp == null) continue;
fp.remove(link);
}
return;
case LinkGrabberTreeTableAction.CLEAR:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.setDownloadLinks(new ArrayList<DownloadLink>());
}
return;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
prio=(Integer)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setPriority(prio);
}
return;
case LinkGrabberTreeTableAction.EXT_FILTER:
LGINSTANCE.FilterExtension(ext,b);
return;
}
}
}
}","public void run(){
  this.setName(""String_Node_Str"");
  if (arg0.getSource() == INSTANCE.Update_Async) {
    if (visible)     fireTableChanged();
    return;
  }
  if (arg0.getSource() == INSTANCE.gathertimer) {
    gathertimer.stop();
    if (waitingList.size() > 0) {
      startLinkGatherer();
    }
    return;
  }
  ArrayList<LinkGrabberFilePackage> selected_packages=new ArrayList<LinkGrabberFilePackage>();
  ArrayList<DownloadLink> selected_links=new ArrayList<DownloadLink>();
  int prio=0;
  String pw=""String_Node_Str"";
  HashMap<String,Object> prop=new HashMap<String,Object>();
  LinkGrabberFilePackage fp;
  String ext=null;
  Set<String> hoster=null;
  String name=null;
  int col=0;
  boolean b=false;
synchronized (LinkGrabberController.ControllerLock) {
synchronized (LGINSTANCE.getPackages()) {
      ArrayList<LinkGrabberFilePackage> fps=LGINSTANCE.getPackages();
      if (arg0.getSource() instanceof LinkGrabberTaskPane) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_ALL:
          LGINSTANCE.getFILTERPACKAGE().clear();
        selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
      break;
case LinkGrabberTreeTableAction.CLEAR:
    stopLinkGatherer();
  lc.abortLinkCheck();
LGINSTANCE.getFILTERPACKAGE().clear();
selected_packages=new ArrayList<LinkGrabberFilePackage>(LGINSTANCE.getPackages());
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.GUI_LOAD:
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setDialogTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(null) == JDFileChooser.APPROVE_OPTION) {
File ret2=fc.getSelectedFile();
if (ret2 != null) {
JDUtilities.getController().loadContainerFile(ret2);
}
}
return null;
}
}
.start();
return;
}
}
 else if (arg0.getSource() instanceof JMenuItem) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.SELECT_HOSTER:
hoster=(Set<String>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_ALL:
LGINSTANCE.getFILTERPACKAGE().clear();
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
case LinkGrabberTreeTableAction.EDIT_DIR:
case LinkGrabberTreeTableAction.SPLIT_HOSTER:
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.SORT:
col=(Integer)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
case LinkGrabberTreeTableAction.DE_ACTIVATE:
prop=(HashMap<String,Object>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_links=(ArrayList<DownloadLink>)prop.get(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.DELETE:
case LinkGrabberTreeTableAction.SET_PW:
case LinkGrabberTreeTableAction.NEW_PACKAGE:
case LinkGrabberTreeTableAction.MERGE_PACKAGE:
case LinkGrabberTreeTableAction.SAVE_DLC:
case LinkGrabberTreeTableAction.ADD_SELECTED_LINKS:
selected_links=(ArrayList<DownloadLink>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.EXT_FILTER:
ext=(String)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
b=((JCheckBoxMenuItem)arg0.getSource()).isSelected();
break;
}
}
 else if (arg0.getSource() instanceof LinkGrabberTreeTableAction) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.DELETE:
selected_links=(ArrayList<DownloadLink>)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.SORT_ALL:
col=(Integer)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_SELECTED_LINKS:
{
ArrayList<LinkGrabberFilePackage> selected_packages2=new ArrayList<LinkGrabberFilePackage>();
while (selected_links.size() > 0) {
ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(selected_links);
LinkGrabberFilePackage fp3=LGINSTANCE.getFPwithLink(selected_links.get(0));
if (fp3 == null) {
logger.warning(""String_Node_Str"");
selected_links.remove(selected_links.get(0));
continue;
}
LinkGrabberFilePackage fp4=new LinkGrabberFilePackage(fp3.getName());
fp4.setDownloadDirectory(fp3.getDownloadDirectory());
fp4.setPassword(fp3.getPassword());
fp4.setExtractAfterDownload(fp3.isExtractAfterDownload());
fp4.setUseSubDir(fp3.useSubDir());
fp4.setComment(fp3.getComment());
for (DownloadLink dl : links2) {
if (LGINSTANCE.getFPwithLink(dl) != null && LGINSTANCE.getFPwithLink(dl) == fp3) {
fp4.add(dl);
selected_links.remove(dl);
}
}
selected_packages2.add(fp4);
}
confirmPackages(selected_packages2);
}
break;
case LinkGrabberTreeTableAction.SPLIT_HOSTER:
{
for (LinkGrabberFilePackage fp2 : selected_packages) {
synchronized (fp2) {
ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(fp2.getDownloadLinks());
Set<String> hosts=INSTANCE.getHosterList(links2);
for (String host : hosts) {
LinkGrabberFilePackage fp3=new LinkGrabberFilePackage(fp2.getName());
fp3.setDownloadDirectory(fp2.getDownloadDirectory());
fp3.setPassword(fp2.getPassword());
fp3.setExtractAfterDownload(fp2.isExtractAfterDownload());
fp3.setUseSubDir(fp2.useSubDir());
fp3.setComment(fp2.getComment());
for (DownloadLink dl : links2) {
if (dl.getPlugin().getHost().equalsIgnoreCase(host)) {
fp3.add(dl);
}
}
LGINSTANCE.addPackage(fp3);
}
}
}
}
break;
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.removeOffline();
}
break;
case LinkGrabberTreeTableAction.SORT:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.sort(col,false);
}
break;
case LinkGrabberTreeTableAction.SORT_ALL:
if (LGINSTANCE.size() == 1) {
LGINSTANCE.getPackages().get(0).sort(col,false);
}
 else LGINSTANCE.sort(col);
break;
case LinkGrabberTreeTableAction.SELECT_HOSTER:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.keepHostersOnly(hoster);
}
break;
case LinkGrabberTreeTableAction.EDIT_DIR:
final ArrayList<LinkGrabberFilePackage> selected_packages2=new ArrayList<LinkGrabberFilePackage>(selected_packages);
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser();
fc.setApproveButtonText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
fc.setCurrentDirectory(new File(selected_packages2.get(0).getDownloadDirectory()));
if (fc.showOpenDialog(INSTANCE) == JDFileChooser.APPROVE_OPTION) {
if (fc.getSelectedFile() != null) {
for (LinkGrabberFilePackage fp2 : selected_packages2) {
fp2.setDownloadDirectory(fc.getSelectedFile().getAbsolutePath());
}
}
}
return null;
}
}
.start();
break;
case LinkGrabberTreeTableAction.MERGE_PACKAGE:
fp=LGINSTANCE.getFPwithLink(selected_links.get(0));
name=fp.getName();
case LinkGrabberTreeTableAction.NEW_PACKAGE:
fp=LGINSTANCE.getFPwithLink(selected_links.get(0));
LinkGrabberFilePackage nfp;
if (name == null) name=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),fp.getName());
if (name != null) {
nfp=new LinkGrabberFilePackage(name,LGINSTANCE);
nfp.setDownloadDirectory(fp.getDownloadDirectory());
nfp.setExtractAfterDownload(fp.isExtractAfterDownload());
nfp.setUseSubDir(fp.useSubDir());
nfp.setComment(fp.getComment());
ArrayList<String> passwords=null;
for (DownloadLink link : selected_links) {
fp=LGINSTANCE.getFPwithLink(link);
if (fp != null) passwords=JDUtilities.mergePasswords(passwords,fp.getPassword());
}
nfp.addAll(selected_links);
if (passwords != null) nfp.setPassword(JDUtilities.passwordArrayToString(passwords.toArray(new String[passwords.size()])));
if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
LGINSTANCE.addPackageAt(nfp,0);
}
 else {
LGINSTANCE.addPackage(nfp);
}
}
return;
case LinkGrabberTreeTableAction.SAVE_DLC:
{
GuiRunnable<File> temp=new GuiRunnable<File>(){
public File runSave(){
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showSaveDialog(SimpleGUI.CURRENTGUI) == JDFileChooser.APPROVE_OPTION) return fc.getSelectedFile();
return null;
}
}
;
File ret=temp.getReturnValue();
if (ret == null) return;
if (JDIO.getFileExtension(ret) == null || !JDIO.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
JDUtilities.getController().saveDLC(ret,selected_links);
return;
}
case LinkGrabberTreeTableAction.SET_PW:
pw=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),null);
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setProperty(""String_Node_Str"",pw);
}
return;
case LinkGrabberTreeTableAction.DE_ACTIVATE:
b=(Boolean)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setEnabled(b);
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.ADD_ALL:
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
confirmPackages(selected_packages);
return;
case LinkGrabberTreeTableAction.DELETE:
for (DownloadLink link : selected_links) {
link.setProperty(""String_Node_Str"",true);
fp=LGINSTANCE.getFPwithLink(link);
if (fp == null) continue;
fp.remove(link);
}
return;
case LinkGrabberTreeTableAction.CLEAR:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.setDownloadLinks(new ArrayList<DownloadLink>());
}
return;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
prio=(Integer)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setPriority(prio);
}
return;
case LinkGrabberTreeTableAction.EXT_FILTER:
LGINSTANCE.FilterExtension(ext,b);
return;
}
}
}
}"
21107,"@SuppressWarnings(""String_Node_Str"") public void actionPerformed(final ActionEvent arg0){
  new Thread(){
    public void run(){
      this.setName(""String_Node_Str"");
      if (arg0.getSource() == INSTANCE.Update_Async) {
        if (visible)         fireTableChanged();
        return;
      }
      if (arg0.getSource() == INSTANCE.gathertimer) {
        gathertimer.stop();
        if (waitingList.size() > 0) {
          startLinkGatherer();
        }
        return;
      }
      ArrayList<LinkGrabberFilePackage> selected_packages=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<DownloadLink> selected_links=new ArrayList<DownloadLink>();
      int prio=0;
      String pw=""String_Node_Str"";
      HashMap<String,Object> prop=new HashMap<String,Object>();
      LinkGrabberFilePackage fp;
      String ext=null;
      Set<String> hoster=null;
      String name=null;
      int col=0;
      boolean b=false;
synchronized (LinkGrabberController.ControllerLock) {
synchronized (LGINSTANCE.getPackages()) {
          ArrayList<LinkGrabberFilePackage> fps=LGINSTANCE.getPackages();
          if (arg0.getSource() instanceof LinkGrabberTaskPane) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_ALL:
              LGINSTANCE.getFILTERPACKAGE().clear();
            selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
          break;
case LinkGrabberTreeTableAction.CLEAR:
        stopLinkGatherer();
      lc.abortLinkCheck();
    LGINSTANCE.getFILTERPACKAGE().clear();
  selected_packages=new ArrayList<LinkGrabberFilePackage>(LGINSTANCE.getPackages());
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.GUI_LOAD:
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setDialogTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(null) == JDFileChooser.APPROVE_OPTION) {
File ret2=fc.getSelectedFile();
if (ret2 != null) {
JDUtilities.getController().loadContainerFile(ret2);
}
}
return null;
}
}
.start();
return;
}
}
 else if (arg0.getSource() instanceof JMenuItem) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.SELECT_HOSTER:
hoster=(Set<String>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_ALL:
LGINSTANCE.getFILTERPACKAGE().clear();
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
case LinkGrabberTreeTableAction.EDIT_DIR:
case LinkGrabberTreeTableAction.SPLIT_HOSTER:
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.SORT:
col=(Integer)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
case LinkGrabberTreeTableAction.DE_ACTIVATE:
prop=(HashMap<String,Object>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_links=(ArrayList<DownloadLink>)prop.get(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.DELETE:
case LinkGrabberTreeTableAction.SET_PW:
case LinkGrabberTreeTableAction.NEW_PACKAGE:
case LinkGrabberTreeTableAction.MERGE_PACKAGE:
case LinkGrabberTreeTableAction.ADD_SELECTED_LINKS:
selected_links=(ArrayList<DownloadLink>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.EXT_FILTER:
ext=(String)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
b=((JCheckBoxMenuItem)arg0.getSource()).isSelected();
break;
}
}
 else if (arg0.getSource() instanceof LinkGrabberTreeTableAction) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.DELETE:
selected_links=(ArrayList<DownloadLink>)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.SORT_ALL:
col=(Integer)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_SELECTED_LINKS:
{
ArrayList<LinkGrabberFilePackage> selected_packages2=new ArrayList<LinkGrabberFilePackage>();
while (selected_links.size() > 0) {
ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(selected_links);
LinkGrabberFilePackage fp3=LGINSTANCE.getFPwithLink(selected_links.get(0));
if (fp3 == null) {
logger.warning(""String_Node_Str"");
selected_links.remove(selected_links.get(0));
continue;
}
LinkGrabberFilePackage fp4=new LinkGrabberFilePackage(fp3.getName());
fp4.setDownloadDirectory(fp3.getDownloadDirectory());
fp4.setPassword(fp3.getPassword());
fp4.setExtractAfterDownload(fp3.isExtractAfterDownload());
fp4.setUseSubDir(fp3.useSubDir());
fp4.setComment(fp3.getComment());
for (DownloadLink dl : links2) {
if (LGINSTANCE.getFPwithLink(dl) != null && LGINSTANCE.getFPwithLink(dl) == fp3) {
fp4.add(dl);
selected_links.remove(dl);
}
}
selected_packages2.add(fp4);
}
confirmPackages(selected_packages2);
}
break;
case LinkGrabberTreeTableAction.SPLIT_HOSTER:
{
for (LinkGrabberFilePackage fp2 : selected_packages) {
synchronized (fp2) {
ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(fp2.getDownloadLinks());
Set<String> hosts=INSTANCE.getHosterList(links2);
for (String host : hosts) {
LinkGrabberFilePackage fp3=new LinkGrabberFilePackage(fp2.getName());
fp3.setDownloadDirectory(fp2.getDownloadDirectory());
fp3.setPassword(fp2.getPassword());
fp3.setExtractAfterDownload(fp2.isExtractAfterDownload());
fp3.setUseSubDir(fp2.useSubDir());
fp3.setComment(fp2.getComment());
for (DownloadLink dl : links2) {
if (dl.getPlugin().getHost().equalsIgnoreCase(host)) {
fp3.add(dl);
}
}
LGINSTANCE.addPackage(fp3);
}
}
}
}
break;
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.removeOffline();
}
break;
case LinkGrabberTreeTableAction.SORT:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.sort(col,false);
}
break;
case LinkGrabberTreeTableAction.SORT_ALL:
if (LGINSTANCE.size() == 1) {
LGINSTANCE.getPackages().get(0).sort(col,false);
}
 else LGINSTANCE.sort(col);
break;
case LinkGrabberTreeTableAction.SELECT_HOSTER:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.keepHostersOnly(hoster);
}
break;
case LinkGrabberTreeTableAction.EDIT_DIR:
final ArrayList<LinkGrabberFilePackage> selected_packages2=new ArrayList<LinkGrabberFilePackage>(selected_packages);
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser();
fc.setApproveButtonText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
fc.setCurrentDirectory(new File(selected_packages2.get(0).getDownloadDirectory()));
if (fc.showOpenDialog(INSTANCE) == JDFileChooser.APPROVE_OPTION) {
if (fc.getSelectedFile() != null) {
for (LinkGrabberFilePackage fp2 : selected_packages2) {
fp2.setDownloadDirectory(fc.getSelectedFile().getAbsolutePath());
}
}
}
return null;
}
}
.start();
break;
case LinkGrabberTreeTableAction.MERGE_PACKAGE:
fp=LGINSTANCE.getFPwithLink(selected_links.get(0));
name=fp.getName();
case LinkGrabberTreeTableAction.NEW_PACKAGE:
fp=LGINSTANCE.getFPwithLink(selected_links.get(0));
LinkGrabberFilePackage nfp;
if (name == null) name=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),fp.getName());
if (name != null) {
nfp=new LinkGrabberFilePackage(name,LGINSTANCE);
nfp.setDownloadDirectory(fp.getDownloadDirectory());
nfp.setExtractAfterDownload(fp.isExtractAfterDownload());
nfp.setUseSubDir(fp.useSubDir());
nfp.setComment(fp.getComment());
ArrayList<String> passwords=null;
for (DownloadLink link : selected_links) {
fp=LGINSTANCE.getFPwithLink(link);
if (fp != null) passwords=JDUtilities.mergePasswords(passwords,fp.getPassword());
}
nfp.addAll(selected_links);
if (passwords != null) nfp.setPassword(JDUtilities.passwordArrayToString(passwords.toArray(new String[passwords.size()])));
if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
LGINSTANCE.addPackageAt(nfp,0);
}
 else {
LGINSTANCE.addPackage(nfp);
}
}
return;
case LinkGrabberTreeTableAction.SET_PW:
pw=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),null);
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setProperty(""String_Node_Str"",pw);
}
return;
case LinkGrabberTreeTableAction.DE_ACTIVATE:
b=(Boolean)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setEnabled(b);
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.ADD_ALL:
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
confirmPackages(selected_packages);
return;
case LinkGrabberTreeTableAction.DELETE:
for (DownloadLink link : selected_links) {
link.setProperty(""String_Node_Str"",true);
fp=LGINSTANCE.getFPwithLink(link);
if (fp == null) continue;
fp.remove(link);
}
return;
case LinkGrabberTreeTableAction.CLEAR:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.setDownloadLinks(new ArrayList<DownloadLink>());
}
return;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
prio=(Integer)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setPriority(prio);
}
return;
case LinkGrabberTreeTableAction.EXT_FILTER:
LGINSTANCE.FilterExtension(ext,b);
return;
}
}
}
}
}
.start();
}","@SuppressWarnings(""String_Node_Str"") public void actionPerformed(final ActionEvent arg0){
  new Thread(){
    public void run(){
      this.setName(""String_Node_Str"");
      if (arg0.getSource() == INSTANCE.Update_Async) {
        if (visible)         fireTableChanged();
        return;
      }
      if (arg0.getSource() == INSTANCE.gathertimer) {
        gathertimer.stop();
        if (waitingList.size() > 0) {
          startLinkGatherer();
        }
        return;
      }
      ArrayList<LinkGrabberFilePackage> selected_packages=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<DownloadLink> selected_links=new ArrayList<DownloadLink>();
      int prio=0;
      String pw=""String_Node_Str"";
      HashMap<String,Object> prop=new HashMap<String,Object>();
      LinkGrabberFilePackage fp;
      String ext=null;
      Set<String> hoster=null;
      String name=null;
      int col=0;
      boolean b=false;
synchronized (LinkGrabberController.ControllerLock) {
synchronized (LGINSTANCE.getPackages()) {
          ArrayList<LinkGrabberFilePackage> fps=LGINSTANCE.getPackages();
          if (arg0.getSource() instanceof LinkGrabberTaskPane) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_ALL:
              LGINSTANCE.getFILTERPACKAGE().clear();
            selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
          break;
case LinkGrabberTreeTableAction.CLEAR:
        stopLinkGatherer();
      lc.abortLinkCheck();
    LGINSTANCE.getFILTERPACKAGE().clear();
  selected_packages=new ArrayList<LinkGrabberFilePackage>(LGINSTANCE.getPackages());
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.GUI_LOAD:
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setDialogTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(null) == JDFileChooser.APPROVE_OPTION) {
File ret2=fc.getSelectedFile();
if (ret2 != null) {
JDUtilities.getController().loadContainerFile(ret2);
}
}
return null;
}
}
.start();
return;
}
}
 else if (arg0.getSource() instanceof JMenuItem) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.SELECT_HOSTER:
hoster=(Set<String>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_ALL:
LGINSTANCE.getFILTERPACKAGE().clear();
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
selected_packages=new ArrayList<LinkGrabberFilePackage>(fps);
selected_packages.add(LGINSTANCE.getFILTERPACKAGE());
break;
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
case LinkGrabberTreeTableAction.EDIT_DIR:
case LinkGrabberTreeTableAction.SPLIT_HOSTER:
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.SORT:
col=(Integer)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new ArrayList<LinkGrabberFilePackage>(INSTANCE.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
case LinkGrabberTreeTableAction.DE_ACTIVATE:
prop=(HashMap<String,Object>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_links=(ArrayList<DownloadLink>)prop.get(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.DELETE:
case LinkGrabberTreeTableAction.SET_PW:
case LinkGrabberTreeTableAction.NEW_PACKAGE:
case LinkGrabberTreeTableAction.MERGE_PACKAGE:
case LinkGrabberTreeTableAction.SAVE_DLC:
case LinkGrabberTreeTableAction.ADD_SELECTED_LINKS:
selected_links=(ArrayList<DownloadLink>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.EXT_FILTER:
ext=(String)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
b=((JCheckBoxMenuItem)arg0.getSource()).isSelected();
break;
}
}
 else if (arg0.getSource() instanceof LinkGrabberTreeTableAction) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.DELETE:
selected_links=(ArrayList<DownloadLink>)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.SORT_ALL:
col=(Integer)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_SELECTED_LINKS:
{
ArrayList<LinkGrabberFilePackage> selected_packages2=new ArrayList<LinkGrabberFilePackage>();
while (selected_links.size() > 0) {
ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(selected_links);
LinkGrabberFilePackage fp3=LGINSTANCE.getFPwithLink(selected_links.get(0));
if (fp3 == null) {
logger.warning(""String_Node_Str"");
selected_links.remove(selected_links.get(0));
continue;
}
LinkGrabberFilePackage fp4=new LinkGrabberFilePackage(fp3.getName());
fp4.setDownloadDirectory(fp3.getDownloadDirectory());
fp4.setPassword(fp3.getPassword());
fp4.setExtractAfterDownload(fp3.isExtractAfterDownload());
fp4.setUseSubDir(fp3.useSubDir());
fp4.setComment(fp3.getComment());
for (DownloadLink dl : links2) {
if (LGINSTANCE.getFPwithLink(dl) != null && LGINSTANCE.getFPwithLink(dl) == fp3) {
fp4.add(dl);
selected_links.remove(dl);
}
}
selected_packages2.add(fp4);
}
confirmPackages(selected_packages2);
}
break;
case LinkGrabberTreeTableAction.SPLIT_HOSTER:
{
for (LinkGrabberFilePackage fp2 : selected_packages) {
synchronized (fp2) {
ArrayList<DownloadLink> links2=new ArrayList<DownloadLink>(fp2.getDownloadLinks());
Set<String> hosts=INSTANCE.getHosterList(links2);
for (String host : hosts) {
LinkGrabberFilePackage fp3=new LinkGrabberFilePackage(fp2.getName());
fp3.setDownloadDirectory(fp2.getDownloadDirectory());
fp3.setPassword(fp2.getPassword());
fp3.setExtractAfterDownload(fp2.isExtractAfterDownload());
fp3.setUseSubDir(fp2.useSubDir());
fp3.setComment(fp2.getComment());
for (DownloadLink dl : links2) {
if (dl.getPlugin().getHost().equalsIgnoreCase(host)) {
fp3.add(dl);
}
}
LGINSTANCE.addPackage(fp3);
}
}
}
}
break;
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.removeOffline();
}
break;
case LinkGrabberTreeTableAction.SORT:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.sort(col,false);
}
break;
case LinkGrabberTreeTableAction.SORT_ALL:
if (LGINSTANCE.size() == 1) {
LGINSTANCE.getPackages().get(0).sort(col,false);
}
 else LGINSTANCE.sort(col);
break;
case LinkGrabberTreeTableAction.SELECT_HOSTER:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.keepHostersOnly(hoster);
}
break;
case LinkGrabberTreeTableAction.EDIT_DIR:
final ArrayList<LinkGrabberFilePackage> selected_packages2=new ArrayList<LinkGrabberFilePackage>(selected_packages);
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser();
fc.setApproveButtonText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
fc.setCurrentDirectory(new File(selected_packages2.get(0).getDownloadDirectory()));
if (fc.showOpenDialog(INSTANCE) == JDFileChooser.APPROVE_OPTION) {
if (fc.getSelectedFile() != null) {
for (LinkGrabberFilePackage fp2 : selected_packages2) {
fp2.setDownloadDirectory(fc.getSelectedFile().getAbsolutePath());
}
}
}
return null;
}
}
.start();
break;
case LinkGrabberTreeTableAction.MERGE_PACKAGE:
fp=LGINSTANCE.getFPwithLink(selected_links.get(0));
name=fp.getName();
case LinkGrabberTreeTableAction.NEW_PACKAGE:
fp=LGINSTANCE.getFPwithLink(selected_links.get(0));
LinkGrabberFilePackage nfp;
if (name == null) name=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),fp.getName());
if (name != null) {
nfp=new LinkGrabberFilePackage(name,LGINSTANCE);
nfp.setDownloadDirectory(fp.getDownloadDirectory());
nfp.setExtractAfterDownload(fp.isExtractAfterDownload());
nfp.setUseSubDir(fp.useSubDir());
nfp.setComment(fp.getComment());
ArrayList<String> passwords=null;
for (DownloadLink link : selected_links) {
fp=LGINSTANCE.getFPwithLink(link);
if (fp != null) passwords=JDUtilities.mergePasswords(passwords,fp.getPassword());
}
nfp.addAll(selected_links);
if (passwords != null) nfp.setPassword(JDUtilities.passwordArrayToString(passwords.toArray(new String[passwords.size()])));
if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
LGINSTANCE.addPackageAt(nfp,0);
}
 else {
LGINSTANCE.addPackage(nfp);
}
}
return;
case LinkGrabberTreeTableAction.SAVE_DLC:
{
GuiRunnable<File> temp=new GuiRunnable<File>(){
public File runSave(){
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showSaveDialog(SimpleGUI.CURRENTGUI) == JDFileChooser.APPROVE_OPTION) return fc.getSelectedFile();
return null;
}
}
;
File ret=temp.getReturnValue();
if (ret == null) return;
if (JDIO.getFileExtension(ret) == null || !JDIO.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
JDUtilities.getController().saveDLC(ret,selected_links);
return;
}
case LinkGrabberTreeTableAction.SET_PW:
pw=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),null);
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setProperty(""String_Node_Str"",pw);
}
return;
case LinkGrabberTreeTableAction.DE_ACTIVATE:
b=(Boolean)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setEnabled(b);
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.ADD_ALL:
case LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES:
confirmPackages(selected_packages);
return;
case LinkGrabberTreeTableAction.DELETE:
for (DownloadLink link : selected_links) {
link.setProperty(""String_Node_Str"",true);
fp=LGINSTANCE.getFPwithLink(link);
if (fp == null) continue;
fp.remove(link);
}
return;
case LinkGrabberTreeTableAction.CLEAR:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.setDownloadLinks(new ArrayList<DownloadLink>());
}
return;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
prio=(Integer)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setPriority(prio);
}
return;
case LinkGrabberTreeTableAction.EXT_FILTER:
LGINSTANCE.FilterExtension(ext,b);
return;
}
}
}
}
}
.start();
}"
21108,"public void mousePressed(MouseEvent e){
  if (e.getSource() != this)   return;
  Point point=e.getPoint();
  int row=rowAtPoint(point);
  int col=getRealcolumnAtPoint(e.getX());
  if (getPathForRow(row) == null) {
    getTreeSelectionModel().clearSelection();
    if (e.getButton() == MouseEvent.BUTTON3) {
      JPopupMenu popup=new JPopupMenu();
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkGrabberTreeTableAction.ADD_ALL)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkGrabberTreeTableAction.DELETE_OFFLINE)));
      popup.add(buildExtMenu());
      if (popup.getComponentCount() != 0)       popup.show(this,point.x,point.y);
    }
    return;
  }
  if (!isRowSelected(row) && e.getButton() == MouseEvent.BUTTON3) {
    getTreeSelectionModel().clearSelection();
    getTreeSelectionModel().addSelectionPath(getPathForRow(row));
  }
  if (e.isPopupTrigger() || e.getButton() == MouseEvent.BUTTON3) {
    ArrayList<DownloadLink> alllinks=getAllSelectedDownloadLinks();
    int links_enabled=0;
    for (    DownloadLink next : alllinks) {
      if (next.isEnabled()) {
        links_enabled++;
      }
    }
    int links_disabled=alllinks.size() - links_enabled;
    ArrayList<LinkGrabberFilePackage> sfp=getSelectedFilePackages();
    Object obj=getPathForRow(row).getLastPathComponent();
    JPopupMenu popup=new JPopupMenu();
    if (obj instanceof LinkGrabberFilePackage || obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkGrabberTreeTableAction.ADD_ALL)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkGrabberTreeTableAction.DELETE_OFFLINE)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.DELETE,new Property(""String_Node_Str"",alllinks))));
      if (sfp.size() > 0) {
        popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES)));
      }
 else {
        popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.ADD_SELECTED_LINKS,new Property(""String_Node_Str"",alllinks))));
      }
      popup.add(new JSeparator());
    }
    if (obj instanceof LinkGrabberFilePackage) {
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.SPLIT_HOSTER)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.EDIT_DIR)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str""+ this.getModel().getColumnName(col)+ ""String_Node_Str"",LinkGrabberTreeTableAction.SORT,new Property(""String_Node_Str"",col))));
      popup.add(new JSeparator());
    }
    if (obj instanceof LinkGrabberFilePackage || obj instanceof DownloadLink) {
      popup.add(buildpriomenu(alllinks));
      popup.add(buildExtMenu());
      Set<String> hoster=linkgrabber.getHosterList(alllinks);
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + hoster.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.SELECT_HOSTER,new Property(""String_Node_Str"",hoster))));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.NEW_PACKAGE,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.MERGE_PACKAGE,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.SET_PW,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JSeparator());
      HashMap<String,Object> prop=new HashMap<String,Object>();
      prop.put(""String_Node_Str"",alllinks);
      prop.put(""String_Node_Str"",true);
      if (links_disabled > 0)       popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links_disabled+ ""String_Node_Str"",LinkGrabberTreeTableAction.DE_ACTIVATE,new Property(""String_Node_Str"",prop))));
      prop=new HashMap<String,Object>();
      prop.put(""String_Node_Str"",alllinks);
      prop.put(""String_Node_Str"",false);
      if (links_enabled > 0)       popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links_enabled+ ""String_Node_Str"",LinkGrabberTreeTableAction.DE_ACTIVATE,new Property(""String_Node_Str"",prop))));
    }
    if (popup.getComponentCount() != 0)     popup.show(this,point.x,point.y);
  }
}","public void mousePressed(MouseEvent e){
  if (e.getSource() != this)   return;
  Point point=e.getPoint();
  int row=rowAtPoint(point);
  int col=getRealcolumnAtPoint(e.getX());
  if (getPathForRow(row) == null) {
    getTreeSelectionModel().clearSelection();
    if (e.getButton() == MouseEvent.BUTTON3) {
      JPopupMenu popup=new JPopupMenu();
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkGrabberTreeTableAction.ADD_ALL)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkGrabberTreeTableAction.DELETE_OFFLINE)));
      popup.add(buildExtMenu());
      if (popup.getComponentCount() != 0)       popup.show(this,point.x,point.y);
    }
    return;
  }
  if (!isRowSelected(row) && e.getButton() == MouseEvent.BUTTON3) {
    getTreeSelectionModel().clearSelection();
    getTreeSelectionModel().addSelectionPath(getPathForRow(row));
  }
  if (e.isPopupTrigger() || e.getButton() == MouseEvent.BUTTON3) {
    ArrayList<DownloadLink> alllinks=getAllSelectedDownloadLinks();
    int links_enabled=0;
    for (    DownloadLink next : alllinks) {
      if (next.isEnabled()) {
        links_enabled++;
      }
    }
    int links_disabled=alllinks.size() - links_enabled;
    ArrayList<LinkGrabberFilePackage> sfp=getSelectedFilePackages();
    Object obj=getPathForRow(row).getLastPathComponent();
    JPopupMenu popup=new JPopupMenu();
    if (obj instanceof LinkGrabberFilePackage || obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkGrabberTreeTableAction.ADD_ALL)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkGrabberTreeTableAction.DELETE_OFFLINE)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.DELETE,new Property(""String_Node_Str"",alllinks))));
      if (sfp.size() > 0) {
        popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.ADD_SELECTED_PACKAGES)));
      }
 else {
        popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.ADD_SELECTED_LINKS,new Property(""String_Node_Str"",alllinks))));
      }
      popup.add(new JSeparator());
    }
    if (obj instanceof LinkGrabberFilePackage) {
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.SPLIT_HOSTER)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.EDIT_DIR)));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str""+ this.getModel().getColumnName(col)+ ""String_Node_Str"",LinkGrabberTreeTableAction.SORT,new Property(""String_Node_Str"",col))));
      popup.add(new JSeparator());
    }
    if (obj instanceof LinkGrabberFilePackage || obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.SAVE_DLC,new Property(""String_Node_Str"",alllinks))));
      popup.add(buildpriomenu(alllinks));
      popup.add(buildExtMenu());
      Set<String> hoster=linkgrabber.getHosterList(alllinks);
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + hoster.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.SELECT_HOSTER,new Property(""String_Node_Str"",hoster))));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.NEW_PACKAGE,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.MERGE_PACKAGE,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",LinkGrabberTreeTableAction.SET_PW,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JSeparator());
      HashMap<String,Object> prop=new HashMap<String,Object>();
      prop.put(""String_Node_Str"",alllinks);
      prop.put(""String_Node_Str"",true);
      if (links_disabled > 0)       popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links_disabled+ ""String_Node_Str"",LinkGrabberTreeTableAction.DE_ACTIVATE,new Property(""String_Node_Str"",prop))));
      prop=new HashMap<String,Object>();
      prop.put(""String_Node_Str"",alllinks);
      prop.put(""String_Node_Str"",false);
      if (links_enabled > 0)       popup.add(new JMenuItem(new LinkGrabberTreeTableAction(linkgrabber,JDTheme.II(""String_Node_Str"",16,16),JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links_enabled+ ""String_Node_Str"",LinkGrabberTreeTableAction.DE_ACTIVATE,new Property(""String_Node_Str"",prop))));
    }
    if (popup.getComponentCount() != 0)     popup.show(this,point.x,point.y);
  }
}"
21109,"private boolean checkUnrarCommandIntern(){
  String path=this.getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  String hash=this.getPluginConfig().getStringProperty(JDUnrarConstants.UNRAR_HASH,null);
  if (hash != null && hash.length() == 32 && path != null && path.length() != 0) {
    String curhash=JDHash.getMD5(path);
    if (curhash != null && curhash.equalsIgnoreCase(hash))     return true;
  }
 else {
    path=null;
    hash=null;
  }
  if (path == null || path.length() == 0) {
    if (OSDetector.isWindows()) {
      path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
      this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
      this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
      this.getPluginConfig().save();
      return true;
    }
 else {
      if (OSDetector.isLinux()) {
        path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
        chmodUnrar(path);
        if (isUnrarCommandValid(path)) {
          this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
          this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
          this.getPluginConfig().save();
          return true;
        }
      }
      if (OSDetector.isMac()) {
        path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
        chmodUnrar(path);
        if (isUnrarCommandValid(path)) {
          this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
          this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
          this.getPluginConfig().save();
          return true;
        }
      }
      if (isUnrarCommandValid(""String_Node_Str"")) {
        path=""String_Node_Str"";
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
        this.getPluginConfig().save();
        return true;
      }
      if (isUnrarCommandValid(""String_Node_Str"")) {
        path=""String_Node_Str"";
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
        this.getPluginConfig().save();
        return true;
      }
      try {
        String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
        for (        String element : charset) {
          File fi=new File(element,""String_Node_Str"");
          File fi2=new File(element,""String_Node_Str"");
          if (fi.isFile() && isUnrarCommandValid(fi.getAbsolutePath())) {
            path=fi.getAbsolutePath();
            this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
            this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
            this.getPluginConfig().save();
            return true;
          }
 else           if (fi2.isFile() && isUnrarCommandValid(fi2.getAbsolutePath())) {
            path=fi2.getAbsolutePath();
            this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
            this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
            this.getPluginConfig().save();
            return true;
          }
        }
      }
 catch (      Throwable e) {
      }
      this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
      this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
      this.getPluginConfig().save();
      return false;
    }
  }
  this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
  this.getPluginConfig().save();
  return false;
}","private boolean checkUnrarCommandIntern(){
  String path=this.getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  String hash=this.getPluginConfig().getStringProperty(JDUnrarConstants.UNRAR_HASH,null);
  if (hash != null && hash.length() == 32 && path != null && path.length() != 0) {
    String curhash=JDHash.getMD5(new File(path));
    if (curhash != null && curhash.equalsIgnoreCase(hash))     return true;
  }
 else {
    path=null;
    hash=null;
  }
  if (path == null || path.length() == 0) {
    if (OSDetector.isWindows()) {
      path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
      this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
      this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
      this.getPluginConfig().save();
      return true;
    }
 else {
      if (OSDetector.isLinux()) {
        path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
        chmodUnrar(path);
        if (isUnrarCommandValid(path)) {
          this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
          this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
          this.getPluginConfig().save();
          return true;
        }
      }
      if (OSDetector.isMac()) {
        path=JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath();
        chmodUnrar(path);
        if (isUnrarCommandValid(path)) {
          this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
          this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
          this.getPluginConfig().save();
          return true;
        }
      }
      if (isUnrarCommandValid(""String_Node_Str"")) {
        path=""String_Node_Str"";
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
        this.getPluginConfig().save();
        return true;
      }
      if (isUnrarCommandValid(""String_Node_Str"")) {
        path=""String_Node_Str"";
        this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
        this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
        this.getPluginConfig().save();
        return true;
      }
      try {
        String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
        for (        String element : charset) {
          File fi=new File(element,""String_Node_Str"");
          File fi2=new File(element,""String_Node_Str"");
          if (fi.isFile() && isUnrarCommandValid(fi.getAbsolutePath())) {
            path=fi.getAbsolutePath();
            this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
            this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
            this.getPluginConfig().save();
            return true;
          }
 else           if (fi2.isFile() && isUnrarCommandValid(fi2.getAbsolutePath())) {
            path=fi2.getAbsolutePath();
            this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,path);
            this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,JDHash.getMD5(path));
            this.getPluginConfig().save();
            return true;
          }
        }
      }
 catch (      Throwable e) {
      }
      this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
      this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
      this.getPluginConfig().save();
      return false;
    }
  }
  this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  this.getPluginConfig().setProperty(JDUnrarConstants.UNRAR_HASH,null);
  this.getPluginConfig().save();
  return false;
}"
21110,"private String[] getUserDatafromBasicauth(String basicauth){
  if (basicauth == null || basicauth.length() == 0)   return null;
  if (basicauth.startsWith(""String_Node_Str""))   basicauth=new Regex(basicauth,""String_Node_Str"").getMatch(0);
  basicauth=Encoding.Base64Decode(basicauth);
  String[] dat=new Regex(basicauth,(""String_Node_Str"")).getRow(0);
  return new String[]{dat[0],dat[1]};
}","public static String[] getUserDatafromBasicauth(String basicauth){
  if (basicauth == null || basicauth.length() == 0)   return null;
  if (basicauth.startsWith(""String_Node_Str""))   basicauth=new Regex(basicauth,""String_Node_Str"").getMatch(0);
  basicauth=Encoding.Base64Decode(basicauth);
  String[] dat=new Regex(basicauth,(""String_Node_Str"")).getRow(0);
  return new String[]{dat[0],dat[1]};
}"
21111,"public void prepareShutdown(){
  logger.info(""String_Node_Str"");
  stopDownloads();
  logger.info(""String_Node_Str"");
  JDUtilities.getDownloadController().saveDownloadLinksSyncnonThread();
  logger.info(""String_Node_Str"");
  AccountController.getInstance().saveSyncnonThread();
  logger.info(""String_Node_Str"");
  PasswordListController.getInstance().saveSync();
  logger.info(""String_Node_Str"");
  HTACCESSController.getInstance().saveSync();
  logger.info(""String_Node_Str"");
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SYSTEM_EXIT,this));
  logger.info(""String_Node_Str"");
  Interaction.handleInteraction(Interaction.INTERACTION_EXIT,null);
  logger.info(""String_Node_Str"");
  JDUtilities.getDatabaseConnector().shutdownDatabase();
}","public void prepareShutdown(){
  logger.info(""String_Node_Str"");
  stopDownloads();
  logger.info(""String_Node_Str"");
  JDUtilities.getDownloadController().saveDownloadLinksSyncnonThread();
  logger.info(""String_Node_Str"");
  AccountController.getInstance().saveSyncnonThread();
  logger.info(""String_Node_Str"");
  PasswordListController.getInstance().saveSync();
  logger.info(""String_Node_Str"");
  HTACCESSController.getInstance().saveSync();
  logger.info(""String_Node_Str"");
  fireControlEventDirect(new ControlEvent(this,ControlEvent.CONTROL_SYSTEM_EXIT,this));
  logger.info(""String_Node_Str"");
  Interaction.handleInteraction(Interaction.INTERACTION_EXIT,null);
  logger.info(""String_Node_Str"");
  JDUtilities.getDatabaseConnector().shutdownDatabase();
}"
21112,"/** 
 * Displays only if mainframe is hidden
 */
public static void showIfHidden(String title,ImageIcon icon,String htmlmessage){
  if (!SimpleGUI.CURRENTGUI.isActive())   Balloon.show(title,icon,htmlmessage);
}","/** 
 * Displays only if mainframe is hidden
 */
public static void showIfHidden(String title,ImageIcon icon,String htmlmessage){
  if (SimpleGUI.CURRENTGUI != null && !SimpleGUI.CURRENTGUI.isActive())   Balloon.show(title,icon,htmlmessage);
}"
21113,"public void confirmPackage(LinkGrabberFilePackage fpv2,String host,int index){
  if (fpv2 == null)   return;
  ArrayList<DownloadLink> linkList=fpv2.getDownloadLinks();
  if (linkList.isEmpty())   return;
  FilePackage fp=FilePackage.getInstance();
  fp.setName(fpv2.getName());
  fp.setComment(fpv2.getComment());
  fp.setPassword(fpv2.getPassword());
  fp.setExtractAfterDownload(fpv2.isExtractAfterDownload());
  addToDownloadDirs(fpv2.getDownloadDirectory(),fpv2.getName());
  if (fpv2.useSubDir()) {
    File file=new File(new File(fpv2.getDownloadDirectory()),fp.getName());
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
      if (!file.exists())       file.mkdirs();
    }
    fp.setDownloadDirectory(file.getAbsolutePath());
  }
 else {
    fp.setDownloadDirectory(fpv2.getDownloadDirectory());
  }
  int files=0;
  if (host == null) {
    files=linkList.size();
    fp.addLinks(linkList);
    for (    DownloadLink link : linkList) {
      boolean avail=true;
      if (link.isAvailabilityStatusChecked())       avail=link.isAvailable();
      link.getLinkStatus().reset();
      if (!avail)       link.getLinkStatus().addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
      link.setFilePackage(fp);
    }
    fpv2.setDownloadLinks(new ArrayList<DownloadLink>());
  }
 else {
    ArrayList<DownloadLink> linkListHost=new ArrayList<DownloadLink>();
    for (int i=fpv2.getDownloadLinks().size() - 1; i >= 0; --i) {
      if (linkList.get(i).getHost().compareTo(host) == 0) {
        DownloadLink link=linkList.remove(i);
        boolean avail=true;
        if (link.isAvailabilityStatusChecked())         avail=link.isAvailable();
        link.getLinkStatus().reset();
        if (!avail)         link.getLinkStatus().addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
        linkListHost.add(link);
        link.setFilePackage(fp);
        ++files;
      }
    }
    if (files == 0)     return;
    fp.addLinks(linkListHost);
    fpv2.setDownloadLinks(linkList);
  }
  if (!fpv2.isIgnored()) {
    if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
      JDUtilities.getDownloadController().addPackageAt(fp,index);
    }
 else {
      JDUtilities.getDownloadController().addPackage(fp);
    }
  }
}","public void confirmPackage(LinkGrabberFilePackage fpv2,String host,int index){
  if (fpv2 == null)   return;
  ArrayList<DownloadLink> linkList=fpv2.getDownloadLinks();
  if (linkList.isEmpty())   return;
  FilePackage fp=FilePackage.getInstance();
  fp.setName(fpv2.getName());
  fp.setComment(fpv2.getComment());
  fp.setPassword(fpv2.getPassword());
  fp.setExtractAfterDownload(fpv2.isExtractAfterDownload());
  addToDownloadDirs(fpv2.getDownloadDirectory(),fpv2.getName());
  if (fpv2.useSubDir()) {
    File file=new File(new File(fpv2.getDownloadDirectory()),fp.getName());
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
      if (!file.exists())       file.mkdirs();
    }
    fp.setDownloadDirectory(file.getAbsolutePath());
  }
 else {
    fp.setDownloadDirectory(fpv2.getDownloadDirectory());
  }
  int files=0;
  if (host == null) {
    files=linkList.size();
    fp.addLinks(linkList);
    for (    DownloadLink link : linkList) {
      boolean avail=true;
      if (link.isAvailabilityStatusChecked())       avail=link.isAvailable();
      link.getLinkStatus().reset();
      if (!avail)       link.getLinkStatus().addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
      link.setFilePackage(fp);
    }
    fpv2.setDownloadLinks(new ArrayList<DownloadLink>());
  }
 else {
    ArrayList<DownloadLink> linkListHost=new ArrayList<DownloadLink>();
    for (int i=fpv2.getDownloadLinks().size() - 1; i >= 0; --i) {
      if (linkList.get(i).getHost().compareTo(host) == 0) {
        DownloadLink link=linkList.remove(i);
        boolean avail=true;
        if (link.isAvailabilityStatusChecked())         avail=link.isAvailable();
        link.getLinkStatus().reset();
        if (!avail)         link.getLinkStatus().addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
        linkListHost.add(link);
        link.setFilePackage(fp);
        ++files;
      }
    }
    if (files == 0)     return;
    fp.addLinks(linkListHost);
    fpv2.setDownloadLinks(linkList);
  }
  if (!fpv2.isIgnored()) {
    if (SimpleGuiConstants.GUI_CONFIG != null && SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
      JDUtilities.getDownloadController().addPackageAt(fp,index);
    }
 else {
      JDUtilities.getDownloadController().addPackage(fp);
    }
  }
}"
21114,"public void run0(){
  logger.finer(""String_Node_Str"" + getID() + ""String_Node_Str""+ startByte+ ""String_Node_Str""+ endByte);
  if (startByte >= endByte && endByte > 0 || startByte >= getFileSize() && endByte > 0) {
    return;
  }
  if (chunkNum > 1) {
    connection=copyConnection(connection);
    if (connection == null) {
      if (startByte >= fileSize && fileSize > 0 && downloadLink.getLinkStatus().hasStatus(LinkStatus.ERROR_DOWNLOAD_FAILED)) {
        downloadLink.getLinkStatus().removeStatus(LinkStatus.ERROR_DOWNLOAD_FAILED);
        logger.finer(""String_Node_Str"");
        return;
      }
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
  }
 else   if (startByte > 0) {
    connection=copyConnection(connection);
    if (connection == null) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
    if (startByte > 0 && (connection.getHeaderField(""String_Node_Str"") == null || connection.getHeaderField(""String_Node_Str"").length() == 0)) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
  }
  if (startByte > 0) {
    String[][] range=new Regex(connection.getHeaderField(""String_Node_Str""),""String_Node_Str"").getMatches();
    if (speedDebug) {
      logger.finer(""String_Node_Str"" + connection.getHeaderField(""String_Node_Str""));
    }
    if (range == null && chunkNum > 1) {
      if (dl.fakeContentRangeHeader()) {
        logger.severe(""String_Node_Str"");
        String[][] fixrange=new Regex(connection.getRequestProperty(""String_Node_Str""),""String_Node_Str"").getMatches();
        long gotSB=Formatter.filterLong(fixrange[0][0]);
        long gotEB;
        if (fixrange[0][1] == null) {
          gotEB=Formatter.filterLong(fixrange[0][0]) + connection.getLongContentLength() - 1;
        }
 else {
          gotEB=Formatter.filterLong(fixrange[0][1]);
        }
        if (gotSB != startByte) {
          logger.severe(""String_Node_Str"" + gotSB + ""String_Node_Str""+ gotEB+ ""String_Node_Str""+ 0);
        }
        if (endByte <= 0) {
          endByte=gotEB - 1;
        }
        if (gotEB == endByte) {
          logger.finer(""String_Node_Str"");
        }
 else         if (gotEB == endByte + 1) {
          logger.finer(""String_Node_Str"");
        }
        if (gotEB < endByte) {
          logger.severe(""String_Node_Str"");
        }
        if (gotEB > endByte + 1) {
          logger.warning(""String_Node_Str"" + endByte + ""String_Node_Str""+ gotEB);
        }
        if (chunks.indexOf(this) == chunkNum - 1) {
          logger.severe(""String_Node_Str"");
          endByte=Math.max(endByte,gotEB);
        }
 else {
          endByte=Math.min(endByte,gotEB);
        }
        if (gotSB == gotEB) {
          return;
        }
        if (speedDebug) {
          logger.finer(""String_Node_Str"" + startByte + ""String_Node_Str""+ endByte);
        }
      }
 else {
        if (connection.getLongContentLength() == startByte) {
          return;
        }
        error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + connection.getHeaderField(""String_Node_Str""));
        logger.severe(""String_Node_Str"" + chunks.indexOf(this) + connection.getHeaderField(""String_Node_Str"")+ ""String_Node_Str""+ connection.getHeaderField(""String_Node_Str""));
        return;
      }
    }
 else     if (range != null) {
      long gotSB=Formatter.filterLong(range[0][0]);
      long gotEB=Formatter.filterLong(range[0][1]);
      if (gotSB != startByte) {
        logger.severe(""String_Node_Str"" + range[0][0] + ""String_Node_Str""+ range[0][1]+ ""String_Node_Str""+ 0);
      }
      if (endByte <= 0) {
        endByte=gotEB - 1;
      }
      if (gotEB == endByte) {
        logger.finer(""String_Node_Str"");
      }
 else       if (gotEB == endByte + 1) {
        logger.finer(""String_Node_Str"");
      }
      if (gotEB < endByte) {
        logger.severe(""String_Node_Str"" + range[0] + ""String_Node_Str""+ range[1]+ ""String_Node_Str""+ endByte);
      }
      if (gotEB > endByte + 1) {
        logger.warning(""String_Node_Str"" + endByte + ""String_Node_Str""+ gotEB);
      }
      if (chunks.indexOf(this) == chunkNum - 1) {
        logger.severe(""String_Node_Str"");
        endByte=Math.max(endByte,gotEB);
      }
 else {
        endByte=Math.min(endByte,gotEB);
      }
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + startByte + ""String_Node_Str""+ endByte);
      }
    }
 else {
      endByte=connection.getLongContentLength() - 1;
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + endByte);
      }
    }
  }
  if (endByte <= 0) {
    endByte=connection.getLongContentLength() - 1;
    if (speedDebug) {
      logger.finer(""String_Node_Str"" + endByte);
    }
  }
  if (isInterrupted() || downloadLink.isAborted()) {
    userInterrupt=true;
  }
  addChunksDownloading(+1);
  download();
  bytesPerSecond=0;
  desiredBps=0;
  addChunksDownloading(-1);
  if (isInterrupted() || downloadLink.isAborted()) {
    logger.severe(""String_Node_Str"");
  }
  logger.finer(""String_Node_Str"" + chunks.indexOf(this) + ""String_Node_Str""+ getBytesLoaded()+ ""String_Node_Str"");
}","public void run0(){
  logger.finer(""String_Node_Str"" + getID() + ""String_Node_Str""+ startByte+ ""String_Node_Str""+ endByte);
  if (startByte >= endByte && endByte > 0 || startByte >= getFileSize() && endByte > 0) {
    return;
  }
  if (chunkNum > 1) {
    connection=copyConnection(connection);
    if (connection == null) {
      if (startByte >= fileSize && fileSize > 0 && downloadLink.getLinkStatus().hasStatus(LinkStatus.ERROR_DOWNLOAD_FAILED)) {
        downloadLink.getLinkStatus().removeStatus(LinkStatus.ERROR_DOWNLOAD_FAILED);
        logger.finer(""String_Node_Str"");
        return;
      }
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
  }
 else   if (startByte > 0) {
    connection=copyConnection(connection);
    if (connection == null) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
    if (startByte > 0 && (connection.getHeaderField(""String_Node_Str"") == null || connection.getHeaderField(""String_Node_Str"").length() == 0)) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
  }
  if (startByte > 0) {
    String[][] range=new Regex(connection.getHeaderField(""String_Node_Str""),""String_Node_Str"").getMatches();
    if (speedDebug) {
      logger.finer(""String_Node_Str"" + connection.getHeaderField(""String_Node_Str""));
    }
    if (range == null && chunkNum > 1) {
      if (dl.fakeContentRangeHeader()) {
        logger.severe(""String_Node_Str"");
        String[][] fixrange=new Regex(connection.getRequestProperty(""String_Node_Str""),""String_Node_Str"").getMatches();
        long gotSB=Formatter.filterLong(fixrange[0][0]);
        long gotEB;
        if (fixrange[0][1] == null) {
          gotEB=Formatter.filterLong(fixrange[0][0]) + connection.getLongContentLength() - 1;
        }
 else {
          gotEB=Formatter.filterLong(fixrange[0][1]);
        }
        if (gotSB != startByte) {
          logger.severe(""String_Node_Str"" + gotSB + ""String_Node_Str""+ gotEB+ ""String_Node_Str""+ 0);
        }
        if (endByte <= 0) {
          endByte=gotEB - 1;
        }
        if (gotEB == endByte) {
          logger.finer(""String_Node_Str"");
        }
 else         if (gotEB == endByte + 1) {
          logger.finer(""String_Node_Str"");
        }
        if (gotEB < endByte) {
          logger.severe(""String_Node_Str"");
        }
        if (gotEB > endByte + 1) {
          logger.warning(""String_Node_Str"" + endByte + ""String_Node_Str""+ gotEB);
        }
        if (chunks.indexOf(this) == chunkNum - 1) {
          logger.severe(""String_Node_Str"");
          endByte=Math.max(endByte,gotEB);
        }
 else {
          endByte=Math.min(endByte,gotEB);
        }
        if (gotSB == gotEB) {
          return;
        }
        if (speedDebug) {
          logger.finer(""String_Node_Str"" + startByte + ""String_Node_Str""+ endByte);
        }
      }
 else {
        if (connection.getLongContentLength() == startByte) {
          return;
        }
        error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + connection.getHeaderField(""String_Node_Str""));
        logger.severe(""String_Node_Str"" + chunks.indexOf(this) + connection.getHeaderField(""String_Node_Str"")+ ""String_Node_Str""+ connection.getHeaderField(""String_Node_Str""));
        return;
      }
    }
 else     if (range != null) {
      long gotSB=Formatter.filterLong(range[0][0]);
      long gotEB=Formatter.filterLong(range[0][1]);
      long gotS=Formatter.filterLong(range[0][2]);
      if (gotSB != startByte) {
        logger.severe(""String_Node_Str"" + range[0][0] + ""String_Node_Str""+ range[0][1]+ ""String_Node_Str""+ 0);
      }
      if (endByte <= 0) {
        endByte=gotS - 1;
      }
      if (gotEB == endByte) {
        logger.finer(""String_Node_Str"");
      }
 else       if (gotEB == endByte + 1) {
        logger.finer(""String_Node_Str"");
      }
      if (gotEB < endByte) {
        logger.severe(""String_Node_Str"" + range[0] + ""String_Node_Str""+ range[1]+ ""String_Node_Str""+ endByte);
      }
      if (gotEB > endByte + 1) {
        logger.warning(""String_Node_Str"" + endByte + ""String_Node_Str""+ gotEB);
      }
      endByte=Math.min(endByte,gotEB);
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + startByte + ""String_Node_Str""+ endByte);
      }
    }
 else {
      endByte=connection.getLongContentLength() - 1;
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + endByte);
      }
    }
  }
  if (endByte <= 0) {
    endByte=connection.getLongContentLength() - 1;
    if (speedDebug) {
      logger.finer(""String_Node_Str"" + endByte);
    }
  }
  if (isInterrupted() || downloadLink.isAborted()) {
    userInterrupt=true;
  }
  addChunksDownloading(+1);
  download();
  bytesPerSecond=0;
  desiredBps=0;
  addChunksDownloading(-1);
  if (isInterrupted() || downloadLink.isAborted()) {
    logger.severe(""String_Node_Str"");
  }
  logger.finer(""String_Node_Str"" + chunks.indexOf(this) + ""String_Node_Str""+ getBytesLoaded()+ ""String_Node_Str"");
}"
21115,"public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  boolean resume=true;
  int chunks=0;
  if (downloadLink.getBooleanProperty(""String_Node_Str"",false) == true)   resume=false;
  if (downloadLink.getBooleanProperty(""String_Node_Str"",false) == true || resume == false) {
    chunks=1;
  }
  dl=br.openDownload(downloadLink,downloadLink.getDownloadURL(),resume,chunks);
  if (!dl.startDownload()) {
    if (downloadLink.getLinkStatus().getErrorMessage() != null && downloadLink.getLinkStatus().getErrorMessage().startsWith(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
      if (downloadLink.getBooleanProperty(""String_Node_Str"",false) == false) {
        downloadLink.setProperty(""String_Node_Str"",new Boolean(true));
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
    }
    if (downloadLink.getLinkStatus().getErrorMessage() != null && downloadLink.getLinkStatus().getErrorMessage().startsWith(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
      if (downloadLink.getBooleanProperty(""String_Node_Str"",false) == false) {
        downloadLink.setChunksProgress(null);
        downloadLink.setProperty(""String_Node_Str"",new Boolean(true));
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
    }
  }
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  br.setDebug(true);
  boolean resume=true;
  int chunks=0;
  if (downloadLink.getBooleanProperty(""String_Node_Str"",false) == true)   resume=false;
  if (downloadLink.getBooleanProperty(""String_Node_Str"",false) == true || resume == false) {
    chunks=1;
  }
  dl=br.openDownload(downloadLink,downloadLink.getDownloadURL(),resume,chunks);
  if (!dl.startDownload()) {
    if (downloadLink.getLinkStatus().getErrorMessage() != null && downloadLink.getLinkStatus().getErrorMessage().startsWith(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
      if (downloadLink.getBooleanProperty(""String_Node_Str"",false) == false) {
        downloadLink.setProperty(""String_Node_Str"",new Boolean(true));
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
    }
    if (downloadLink.getLinkStatus().getErrorMessage() != null && downloadLink.getLinkStatus().getErrorMessage().startsWith(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
      if (downloadLink.getBooleanProperty(""String_Node_Str"",false) == false) {
        downloadLink.setChunksProgress(null);
        downloadLink.setProperty(""String_Node_Str"",new Boolean(true));
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
    }
  }
}"
21116,"private String cleanFileName(String name){
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  int lastPoint=name.lastIndexOf(""String_Node_Str"");
  if (lastPoint <= 0)   return name;
  String extension=name.substring(name.length() - lastPoint + 1);
  if (extension.length() > 0 && extension.length() < 6) {
    name=name.substring(0,lastPoint);
  }
  return JDUtilities.removeEndingPoints(name);
}","private String cleanFileName(String name){
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  name=getNameMatch(name,""String_Node_Str"");
  int lastPoint=name.lastIndexOf(""String_Node_Str"");
  if (lastPoint <= 0)   return name;
  String extension=name.substring(name.length() - lastPoint + 1);
  if (extension.length() > 0 && lastPoint > 0) {
    name=name.substring(0,lastPoint);
  }
  return JDUtilities.removeEndingPoints(name);
}"
21117,"public static boolean preferReconnect(){
  if (hasWaittimeLinks && SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",true) && JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_LATEST_RECONNECT_RESULT,true))   return true;
  return false;
}","public static boolean preferReconnect(){
  if (hasWaittimeLinks && JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true) && SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",true)&& JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_LATEST_RECONNECT_RESULT,true))   return true;
  return false;
}"
21118,"public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(false);
  String dllink=""String_Node_Str"";
  if (br.containsHTML(""String_Node_Str"")) {
    if (!br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  Form form=br.getForm(0);
  if (form != null && form.hasInputFieldByName(""String_Node_Str"")) {
    form.setAction(downloadLink.getDownloadURL());
    form.remove(""String_Node_Str"");
    form.put(""String_Node_Str"",Encoding.urlEncode(downloadLink.getDownloadURL()));
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      int minutes=0, seconds=0, hours=0;
      String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
 else {
      form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (form == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      form.setAction(downloadLink.getDownloadURL());
      br.submitForm(form);
      URLConnectionAdapter con2=br.getHttpConnection();
      dllink=br.getRedirectLocation();
      if (con2.getContentType().contains(""String_Node_Str"")) {
        if (br.containsHTML(""String_Node_Str""))         dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
  }
  if (dllink != null && dllink != ""String_Node_Str"") {
    dl=br.openDownload(downloadLink,dllink,true,-20);
    dl.startDownload();
  }
 else   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(false);
  String dllink=""String_Node_Str"";
  if (br.containsHTML(""String_Node_Str"")) {
    if (!br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  Form form=br.getForm(0);
  if (form != null && form.hasInputFieldByName(""String_Node_Str"")) {
    form.setAction(downloadLink.getDownloadURL());
    form.remove(""String_Node_Str"");
    form.put(""String_Node_Str"",Encoding.urlEncode(downloadLink.getDownloadURL()));
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      int minutes=0, seconds=0, hours=0;
      String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
 else {
      form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (form == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      form.setAction(downloadLink.getDownloadURL());
      br.submitForm(form);
      URLConnectionAdapter con2=br.getHttpConnection();
      dllink=br.getRedirectLocation();
      if (con2.getContentType().contains(""String_Node_Str"")) {
        if (br.containsHTML(""String_Node_Str""))         dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
  }
  if (dllink != null && dllink != ""String_Node_Str"") {
    dl=br.openDownload(downloadLink,dllink,true,-20);
    dl.setResume(true);
    dl.startDownload();
  }
 else   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
}"
21119,"public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  String filename=null;
  String filesize=null;
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.getForm(0) == null) {
    filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  }
 else {
    filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  downloadLink.setName(filename);
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  String filename=null;
  String filesize=null;
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,""String_Node_Str"");
  }
  if (br.getForm(0) == null) {
    filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  }
 else {
    filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  downloadLink.setName(filename);
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
21120,"public AccountInfo fetchAccountInfo(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  String api=""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ account.getPass()+ ""String_Node_Str"";
  br.getPage(api);
  String error=br.getRegex(""String_Node_Str"").getMatch(0);
  if (error != null) {
    ai.setStatus(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.trim()));
    ai.setValid(false);
    return ai;
  }
  String[][] matches=br.getRegex(""String_Node_Str"").getMatches();
  HashMap<String,String> data=getMap(matches);
  ai.setTrafficLeft((Long.parseLong(data.get(""String_Node_Str"")) / 1000) * 1024l * 1024l);
  ai.setTrafficMax(25 * 1024 * 1024* 1024l);
  ai.setFilesNum(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setPremiumPoints(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setNewPremiumPoints(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setUsedSpace(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setTrafficShareLeft((Long.parseLong(data.get(""String_Node_Str"")) / 1000) * 1024l * 1024l);
  ai.setValidUntil(Long.parseLong(data.get(""String_Node_Str"")) * 1000);
  if (ai.getValidUntil() < System.currentTimeMillis()) {
    ai.setExpired(true);
  }
  account.setProperty(""String_Node_Str"",ai);
  return ai;
}","public AccountInfo fetchAccountInfo(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  String api=""String_Node_Str"" + Encoding.urlEncode(account.getUser()) + ""String_Node_Str""+ Encoding.urlEncode(account.getPass())+ ""String_Node_Str"";
  br.getPage(api);
  String error=br.getRegex(""String_Node_Str"").getMatch(0);
  if (error != null) {
    ai.setStatus(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.trim()));
    ai.setValid(false);
    return ai;
  }
  String[][] matches=br.getRegex(""String_Node_Str"").getMatches();
  HashMap<String,String> data=getMap(matches);
  ai.setTrafficLeft((Long.parseLong(data.get(""String_Node_Str"")) / 1000) * 1024l * 1024l);
  ai.setTrafficMax(25 * 1024 * 1024* 1024l);
  ai.setFilesNum(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setPremiumPoints(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setNewPremiumPoints(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setUsedSpace(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setTrafficShareLeft((Long.parseLong(data.get(""String_Node_Str"")) / 1000) * 1024l * 1024l);
  ai.setValidUntil(Long.parseLong(data.get(""String_Node_Str"")) * 1000);
  if (ai.getValidUntil() < System.currentTimeMillis()) {
    ai.setExpired(true);
  }
  account.setProperty(""String_Node_Str"",ai);
  return ai;
}"
21121,"private Component getFilePackageCell(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  fp=(FilePackage)value;
switch (column) {
case DownloadTreeTableModel.COL_PART:
    co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  ((JRendererLabel)co).setText(fp.getName());
if (fp.getLinksFailed() > 0) {
  ((JRendererLabel)co).setIcon(!fp.getBooleanProperty(DownloadTreeTable.PROPERTY_EXPANDED,false) ? icon_fp_closed_error : icon_fp_open_error);
}
 else {
  ((JRendererLabel)co).setIcon(!fp.getBooleanProperty(DownloadTreeTable.PROPERTY_EXPANDED,false) ? icon_fp_closed : icon_fp_open);
}
((JRendererLabel)co).setBorder(null);
((JComponent)co).setToolTipText(null);
return co;
case DownloadTreeTableModel.COL_HOSTER:
value=fp.getHoster();
break;
case DownloadTreeTableModel.COL_PROGRESS:
if (fp.isFinished()) {
progress.setMaximum(100);
progress.setValue(100);
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
sb.append(""String_Node_Str"");
}
 else {
sb.append(""String_Node_Str"").append(Formatter.formatReadable(Math.max(0,fp.getTotalEstimatedPackageSize()))).append(')');
}
progress.setString(sb.toString());
}
 else {
progress.setMaximum(Math.max(1,fp.getTotalEstimatedPackageSize()));
progress.setValue(fp.getTotalKBLoaded());
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(fp.getPercent())).append('%');
}
 else {
sb.append(c.format(fp.getPercent())).append(""String_Node_Str"").append(Formatter.formatReadable(progress.getRealValue())).append('/').append(Formatter.formatReadable(Math.max(0,progress.getRealMax()))).append(')');
}
progress.setString(sb.toString());
}
progress.setToolTipText(null);
return progress;
case DownloadTreeTableModel.COL_STATUS:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
this.statuspanel.setBackground(co.getBackground());
statuspanel.setPainter(((JRendererLabel)co).getPainter());
if (fp.isFinished()) {
statuspanel.left.setText(""String_Node_Str"");
}
 else if (fp.getTotalDownloadSpeed() > 0) {
clearSB();
sb.append('[').append(fp.getLinksInProgress()).append('/').append(fp.size()).append(""String_Node_Str"");
sb.append(strETA).append(' ').append(Formatter.formatSeconds(fp.getETA())).append(""String_Node_Str"").append(Formatter.formatReadable(fp.getTotalDownloadSpeed())).append(""String_Node_Str"");
statuspanel.left.setText(sb.toString());
}
 else if (fp.getLinksInProgress() > 0) {
clearSB();
sb.append(fp.getLinksInProgress()).append('/').append(fp.size()).append(' ').append(strDownloadLinkActive);
statuspanel.left.setText(sb.toString());
}
 else {
statuspanel.left.setText(""String_Node_Str"");
}
counter=0;
clearSB();
if (fp.isFinished()) {
statuspanel.rights[counter].setIcon(this.imgFinished);
counter++;
}
 else if (JDController.getInstance().getWatchdog() != null && JDController.getInstance().getWatchdog().isStopMark(value)) {
statuspanel.rights[counter].setIcon(imgStopMark);
if (counter > 0) sb.append(""String_Node_Str"");
counter++;
sb.append(strTTStopMark);
}
 else if (fp.getTotalDownloadSpeed() > 0) {
}
 else if (fp.getLinksInProgress() > 0) {
}
 else {
}
statuspanel.clearIcons(counter);
statuspanel.setToolTipText(sb.toString());
statuspanel.setBorder(null);
return statuspanel;
}
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setBorder(null);
((JComponent)co).setToolTipText(null);
return co;
}","private Component getFilePackageCell(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  fp=(FilePackage)value;
switch (column) {
case DownloadTreeTableModel.COL_PART:
    co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  ((JRendererLabel)co).setText(fp.getName());
if (fp.getLinksFailed() > 0) {
  ((JRendererLabel)co).setIcon(!fp.getBooleanProperty(DownloadTreeTable.PROPERTY_EXPANDED,false) ? icon_fp_closed_error : icon_fp_open_error);
}
 else {
  ((JRendererLabel)co).setIcon(!fp.getBooleanProperty(DownloadTreeTable.PROPERTY_EXPANDED,false) ? icon_fp_closed : icon_fp_open);
}
((JRendererLabel)co).setBorder(null);
((JComponent)co).setToolTipText(null);
return co;
case DownloadTreeTableModel.COL_HOSTER:
value=fp.getHoster();
break;
case DownloadTreeTableModel.COL_PROGRESS:
if (fp.isFinished()) {
progress.setMaximum(100);
progress.setValue(100);
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
sb.append(""String_Node_Str"");
}
 else {
sb.append(""String_Node_Str"").append(Formatter.formatReadable(Math.max(0,fp.getTotalEstimatedPackageSize()))).append(')');
}
progress.setString(sb.toString());
}
 else {
progress.setMaximum(Math.max(1,fp.getTotalEstimatedPackageSize()));
progress.setValue(fp.getTotalKBLoaded());
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(fp.getPercent())).append('%');
}
 else {
sb.append(c.format(fp.getPercent())).append(""String_Node_Str"").append(Formatter.formatReadable(progress.getRealValue())).append('/').append(Formatter.formatReadable(Math.max(0,progress.getRealMax()))).append(')');
}
progress.setString(sb.toString());
}
progress.setToolTipText(null);
progress.setForeground(null);
return progress;
case DownloadTreeTableModel.COL_STATUS:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
this.statuspanel.setBackground(co.getBackground());
statuspanel.setPainter(((JRendererLabel)co).getPainter());
if (fp.isFinished()) {
statuspanel.left.setText(""String_Node_Str"");
}
 else if (fp.getTotalDownloadSpeed() > 0) {
clearSB();
sb.append('[').append(fp.getLinksInProgress()).append('/').append(fp.size()).append(""String_Node_Str"");
sb.append(strETA).append(' ').append(Formatter.formatSeconds(fp.getETA())).append(""String_Node_Str"").append(Formatter.formatReadable(fp.getTotalDownloadSpeed())).append(""String_Node_Str"");
statuspanel.left.setText(sb.toString());
}
 else if (fp.getLinksInProgress() > 0) {
clearSB();
sb.append(fp.getLinksInProgress()).append('/').append(fp.size()).append(' ').append(strDownloadLinkActive);
statuspanel.left.setText(sb.toString());
}
 else {
statuspanel.left.setText(""String_Node_Str"");
}
counter=0;
clearSB();
if (fp.isFinished()) {
statuspanel.rights[counter].setIcon(this.imgFinished);
counter++;
}
 else if (JDController.getInstance().getWatchdog() != null && JDController.getInstance().getWatchdog().isStopMark(value)) {
statuspanel.rights[counter].setIcon(imgStopMark);
if (counter > 0) sb.append(""String_Node_Str"");
counter++;
sb.append(strTTStopMark);
}
 else if (fp.getTotalDownloadSpeed() > 0) {
}
 else if (fp.getLinksInProgress() > 0) {
}
 else {
}
statuspanel.clearIcons(counter);
statuspanel.setToolTipText(sb.toString());
statuspanel.setBorder(null);
return statuspanel;
}
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setBorder(null);
((JComponent)co).setToolTipText(null);
return co;
}"
21122,"private Component getDownloadLinkCell(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  dLink=(DownloadLink)value;
switch (column) {
case DownloadTreeTableModel.COL_PART:
    co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  clearSB();
if (dLink.getLinkStatus().isFailed()) {
  ((JRendererLabel)co).setIcon(this.imgFileFailed);
}
 else {
  ((JRendererLabel)co).setIcon(dLink.getIcon());
}
((JRendererLabel)co).setText(dLink.getName());
((JRendererLabel)co).setToolTipText(dLink.getName() + ""String_Node_Str"" + dLink.getFileInfomationString());
((JRendererLabel)co).setBorder(leftGap);
return co;
case DownloadTreeTableModel.COL_HOSTER:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
clearSB();
((JRendererLabel)co).setBorder(null);
if (dLink.getPlugin() == null) {
((JComponent)co).setToolTipText(null);
((JRendererLabel)co).setText(""String_Node_Str"");
}
 else {
if (dLink.getPlugin().useIcon()) {
sb.append(dLink.getPlugin().getHost());
sb.append(dLink.getPlugin().getSessionInfo());
((JRendererLabel)co).setText(dLink.getPlugin().getSessionInfo());
((JRendererLabel)co).setIcon(dLink.getPlugin().getHosterIcon());
((JComponent)co).setToolTipText(sb.toString());
}
 else {
sb.append(dLink.getPlugin().getHost());
sb.append(dLink.getPlugin().getSessionInfo());
((JRendererLabel)co).setText(sb.toString());
((JComponent)co).setToolTipText(sb.toString());
}
}
return co;
case DownloadTreeTableModel.COL_PROGRESS:
if (dLink.getPlugin() == null) {
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JComponent)co).setToolTipText(null);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(strPluginError);
((JRendererLabel)co).setBorder(null);
return co;
}
 else if (!dLink.getPlugin().getWrapper().usePlugin()) {
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JComponent)co).setToolTipText(null);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(strPluginDisabled);
((JRendererLabel)co).setBorder(null);
return co;
}
 else if (dLink.getPluginProgress() != null) {
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
}
 else {
progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
}
progress.setMaximum(dLink.getPluginProgress().getTotal());
progress.setValue(dLink.getPluginProgress().getCurrent());
progress.setToolTipText(null);
return progress;
}
 else if ((dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED) && dLink.getPlugin().getRemainingHosterWaittime() > 0) || (dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE) && dLink.getLinkStatus().getRemainingWaittime() > 0)) {
progress.setMaximum(dLink.getLinkStatus().getTotalWaitTime());
progress.setForeground(COL_PROGRESS_ERROR);
progress.setValue(dLink.getLinkStatus().getRemainingWaittime());
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(10000 * progress.getPercentComplete() / 100.0)).append('%');
}
 else {
sb.append(c.format(10000 * progress.getPercentComplete() / 100.0)).append(""String_Node_Str"").append(progress.getValue() / 1000).append('/').append(progress.getMaximum() / 1000).append(strSecondsAbrv).append(')');
}
progress.setString(sb.toString());
progress.setToolTipText(null);
return progress;
}
 else if (dLink.getDownloadCurrent() > 0) {
if (!dLink.getLinkStatus().isPluginActive()) {
if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
sb.append(""String_Node_Str"");
}
 else {
sb.append(""String_Node_Str"").append(Formatter.formatReadable(Math.max(0,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
 else {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(dLink.getPercent() / 100.0)).append('%');
}
 else {
sb.append(c.format(dLink.getPercent() / 100.0)).append(""String_Node_Str"").append(Formatter.formatReadable(dLink.getDownloadCurrent())).append('/').append(Formatter.formatReadable(Math.max(0,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
}
 else {
if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
progress.setString(strWaitIO);
}
 else {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(dLink.getPercent() / 100.0)).append('%');
}
 else {
sb.append(c.format(dLink.getPercent() / 100.0)).append(""String_Node_Str"").append(Formatter.formatReadable(dLink.getDownloadCurrent())).append('/').append(Formatter.formatReadable(Math.max(0,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
}
progress.setMaximum(10000);
progress.setToolTipText(null);
progress.setValue(dLink.getPercent());
return progress;
}
progress.setMaximum(10000);
progress.setValue(0);
if (dLink.getDownloadSize() > 1) {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(dLink.getPercent() / 100.0)).append('%');
}
 else {
sb.append(c.format(dLink.getPercent() / 100.0)).append(""String_Node_Str"").append(Formatter.formatReadable(dLink.getDownloadCurrent())).append('/').append(Formatter.formatReadable(Math.max(0,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
 else {
progress.setString(""String_Node_Str"");
}
progress.setToolTipText(null);
return progress;
case DownloadTreeTableModel.COL_STATUS:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
this.statuspanel.setBackground(co.getBackground());
statuspanel.setPainter(((JRendererLabel)co).getPainter());
if (dLink.getPluginProgress() != null && dLink.getPluginProgress().getPercent() > 0.0 && dLink.getPluginProgress().getPercent() < 100.0) {
statuspanel.left.setText(dLink.getLinkStatus().getStatusString());
}
 else if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
statuspanel.left.setText(dLink.getLinkStatus().getStatusString());
}
 else if (dLink.getLinkStatus().isFailed()) {
statuspanel.left.setText(dLink.getLinkStatus().getStatusString());
}
 else {
statuspanel.left.setText(dLink.getLinkStatus().getStatusString());
}
counter=0;
this.clearSB();
if (JDController.getInstance().getWatchdog() != null && JDController.getInstance().getWatchdog().isStopMark(value)) {
statuspanel.rights[counter].setIcon(imgStopMark);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTStopMark);
counter++;
}
if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
statuspanel.rights[counter].setIcon(imgFinished);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTFinished);
counter++;
}
 else if (dLink.getLinkStatus().isFailed()) {
statuspanel.rights[counter].setIcon(imgFailed);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTFailed);
counter++;
}
if (counter <= StatusLabel.ICONCOUNT && dLink.getPluginProgress() != null && dLink.getPluginProgress().getPercent() > 0.0 && dLink.getPluginProgress().getPercent() < 100.0) {
statuspanel.rights[counter].setIcon(imgExtract);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTExtract);
counter++;
}
if (counter <= StatusLabel.ICONCOUNT) {
switch (dLink.getPriority()) {
case 0:
default :
break;
case -1:
statuspanel.rights[counter].setIcon(imgPriorityS);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTPriorityS);
counter++;
break;
case 1:
statuspanel.rights[counter].setIcon(imgPriority1);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTPriority1);
counter++;
break;
case 2:
statuspanel.rights[counter].setIcon(imgPriority2);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTPriority2);
counter++;
break;
case 3:
statuspanel.rights[counter].setIcon(imgPriority3);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTPriority3);
counter++;
break;
}
}
statuspanel.setToolTipText(sb.toString());
statuspanel.clearIcons(counter);
statuspanel.setBorder(null);
return statuspanel;
}
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setBorder(null);
((JRendererLabel)co).setToolTipText(null);
return co;
}","private Component getDownloadLinkCell(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  dLink=(DownloadLink)value;
switch (column) {
case DownloadTreeTableModel.COL_PART:
    co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  clearSB();
if (dLink.getLinkStatus().isFailed()) {
  ((JRendererLabel)co).setIcon(this.imgFileFailed);
}
 else {
  ((JRendererLabel)co).setIcon(dLink.getIcon());
}
((JRendererLabel)co).setText(dLink.getName());
((JRendererLabel)co).setToolTipText(dLink.getName() + ""String_Node_Str"" + dLink.getFileInfomationString());
((JRendererLabel)co).setBorder(leftGap);
return co;
case DownloadTreeTableModel.COL_HOSTER:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
clearSB();
((JRendererLabel)co).setBorder(null);
if (dLink.getPlugin() == null) {
((JComponent)co).setToolTipText(null);
((JRendererLabel)co).setText(""String_Node_Str"");
}
 else {
if (dLink.getPlugin().useIcon()) {
sb.append(dLink.getPlugin().getHost());
sb.append(dLink.getPlugin().getSessionInfo());
((JRendererLabel)co).setText(dLink.getPlugin().getSessionInfo());
((JRendererLabel)co).setIcon(dLink.getPlugin().getHosterIcon());
((JComponent)co).setToolTipText(sb.toString());
}
 else {
sb.append(dLink.getPlugin().getHost());
sb.append(dLink.getPlugin().getSessionInfo());
((JRendererLabel)co).setText(sb.toString());
((JComponent)co).setToolTipText(sb.toString());
}
}
return co;
case DownloadTreeTableModel.COL_PROGRESS:
if (dLink.getPlugin() == null) {
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JComponent)co).setToolTipText(null);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(strPluginError);
((JRendererLabel)co).setBorder(null);
return co;
}
 else if (!dLink.getPlugin().getWrapper().usePlugin()) {
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JComponent)co).setToolTipText(null);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(strPluginDisabled);
((JRendererLabel)co).setBorder(null);
return co;
}
 else if (dLink.getPluginProgress() != null) {
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
}
 else {
progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
}
progress.setMaximum(dLink.getPluginProgress().getTotal());
progress.setValue(dLink.getPluginProgress().getCurrent());
progress.setToolTipText(null);
progress.setForeground(null);
return progress;
}
 else if ((dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED) && dLink.getPlugin().getRemainingHosterWaittime() > 0) || (dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE) && dLink.getLinkStatus().getRemainingWaittime() > 0)) {
progress.setMaximum(dLink.getLinkStatus().getTotalWaitTime());
progress.setForeground(COL_PROGRESS_ERROR);
progress.setValue(dLink.getLinkStatus().getRemainingWaittime());
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(10000 * progress.getPercentComplete() / 100.0)).append('%');
}
 else {
sb.append(c.format(10000 * progress.getPercentComplete() / 100.0)).append(""String_Node_Str"").append(progress.getValue() / 1000).append('/').append(progress.getMaximum() / 1000).append(strSecondsAbrv).append(')');
}
progress.setString(sb.toString());
progress.setToolTipText(null);
return progress;
}
 else if (dLink.getDownloadCurrent() > 0) {
if (!dLink.getLinkStatus().isPluginActive()) {
if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
sb.append(""String_Node_Str"");
}
 else {
sb.append(""String_Node_Str"").append(Formatter.formatReadable(Math.max(0,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
 else {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(dLink.getPercent() / 100.0)).append('%');
}
 else {
sb.append(c.format(dLink.getPercent() / 100.0)).append(""String_Node_Str"").append(Formatter.formatReadable(dLink.getDownloadCurrent())).append('/').append(Formatter.formatReadable(Math.max(0,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
}
 else {
if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
progress.setString(strWaitIO);
}
 else {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(dLink.getPercent() / 100.0)).append('%');
}
 else {
sb.append(c.format(dLink.getPercent() / 100.0)).append(""String_Node_Str"").append(Formatter.formatReadable(dLink.getDownloadCurrent())).append('/').append(Formatter.formatReadable(Math.max(0,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
}
progress.setMaximum(10000);
progress.setToolTipText(null);
progress.setValue(dLink.getPercent());
progress.setForeground(null);
return progress;
}
progress.setMaximum(10000);
progress.setValue(0);
if (dLink.getDownloadSize() > 1) {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(dLink.getPercent() / 100.0)).append('%');
}
 else {
sb.append(c.format(dLink.getPercent() / 100.0)).append(""String_Node_Str"").append(Formatter.formatReadable(dLink.getDownloadCurrent())).append('/').append(Formatter.formatReadable(Math.max(0,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
 else {
progress.setString(""String_Node_Str"");
}
progress.setToolTipText(null);
progress.setForeground(null);
return progress;
case DownloadTreeTableModel.COL_STATUS:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
this.statuspanel.setBackground(co.getBackground());
statuspanel.setPainter(((JRendererLabel)co).getPainter());
if (dLink.getPluginProgress() != null && dLink.getPluginProgress().getPercent() > 0.0 && dLink.getPluginProgress().getPercent() < 100.0) {
statuspanel.left.setText(dLink.getLinkStatus().getStatusString());
}
 else if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
statuspanel.left.setText(dLink.getLinkStatus().getStatusString());
}
 else if (dLink.getLinkStatus().isFailed()) {
statuspanel.left.setText(dLink.getLinkStatus().getStatusString());
}
 else {
statuspanel.left.setText(dLink.getLinkStatus().getStatusString());
}
counter=0;
this.clearSB();
if (JDController.getInstance().getWatchdog() != null && JDController.getInstance().getWatchdog().isStopMark(value)) {
statuspanel.rights[counter].setIcon(imgStopMark);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTStopMark);
counter++;
}
if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
statuspanel.rights[counter].setIcon(imgFinished);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTFinished);
counter++;
}
 else if (dLink.getLinkStatus().isFailed()) {
statuspanel.rights[counter].setIcon(imgFailed);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTFailed);
counter++;
}
if (counter <= StatusLabel.ICONCOUNT && dLink.getPluginProgress() != null && dLink.getPluginProgress().getPercent() > 0.0 && dLink.getPluginProgress().getPercent() < 100.0) {
statuspanel.rights[counter].setIcon(imgExtract);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTExtract);
counter++;
}
if (counter <= StatusLabel.ICONCOUNT) {
switch (dLink.getPriority()) {
case 0:
default :
break;
case -1:
statuspanel.rights[counter].setIcon(imgPriorityS);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTPriorityS);
counter++;
break;
case 1:
statuspanel.rights[counter].setIcon(imgPriority1);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTPriority1);
counter++;
break;
case 2:
statuspanel.rights[counter].setIcon(imgPriority2);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTPriority2);
counter++;
break;
case 3:
statuspanel.rights[counter].setIcon(imgPriority3);
if (counter > 0) sb.append(""String_Node_Str"");
sb.append(strTTPriority3);
counter++;
break;
}
}
statuspanel.setToolTipText(sb.toString());
statuspanel.clearIcons(counter);
statuspanel.setBorder(null);
return statuspanel;
}
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setBorder(null);
((JRendererLabel)co).setToolTipText(null);
return co;
}"
21123,"private void initQuickConfig(){
  JLabel config=(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.setIcon(JDTheme.II(""String_Node_Str"",16,16));
  topOrBottom=new JCheckBox(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  topOrBottom.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      SimpleGuiConstants.GUI_CONFIG.setProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,topOrBottom.isSelected());
      SimpleGuiConstants.GUI_CONFIG.save();
    }
  }
);
  if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
    topOrBottom.setSelected(true);
  }
  startAFteradding=new JCheckBox(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  startAFteradding.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      SimpleGuiConstants.GUI_CONFIG.setProperty(SimpleGuiConstants.PARAM_START_AFTER_ADDING_LINKS,startAFteradding.isSelected());
      SimpleGuiConstants.GUI_CONFIG.save();
    }
  }
);
  if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true)) {
    startAFteradding.setSelected(true);
  }
  add(config,D1_LABEL_ICON);
  startAFteradding.setToolTipText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  add(startAFteradding,TaskPanel.D2_CHECKBOX);
  startAFteradding.setToolTipText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  add(topOrBottom,TaskPanel.D2_CHECKBOX);
}","private void initQuickConfig(){
  JLabel config=(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.setIcon(JDTheme.II(""String_Node_Str"",16,16));
  topOrBottom=new JCheckBox(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  topOrBottom.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      SimpleGuiConstants.GUI_CONFIG.setProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,topOrBottom.isSelected());
      SimpleGuiConstants.GUI_CONFIG.save();
    }
  }
);
  if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
    topOrBottom.setSelected(true);
  }
  startAfterAdding=new JCheckBox(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  startAfterAdding.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      SimpleGuiConstants.GUI_CONFIG.setProperty(SimpleGuiConstants.PARAM_START_AFTER_ADDING_LINKS,startAfterAdding.isSelected());
      SimpleGuiConstants.GUI_CONFIG.save();
    }
  }
);
  if (SimpleGuiConstants.GUI_CONFIG.getBooleanProperty(SimpleGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true)) {
    startAfterAdding.setSelected(true);
  }
  add(config,D1_LABEL_ICON);
  startAfterAdding.setToolTipText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  add(startAfterAdding,TaskPanel.D2_CHECKBOX);
  startAfterAdding.setToolTipText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  add(topOrBottom,TaskPanel.D2_CHECKBOX);
}"
21124,"private void update(){
  if (updateinprogress)   return;
  new Thread(){
    public void run(){
      updateinprogress=true;
      this.setName(""String_Node_Str"");
      packages.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",fps.size()));
      long tot=0;
      long links=0;
synchronized (fps) {
        for (        LinkGrabberFilePackage fp : fps) {
          tot+=fp.getDownloadSize(false);
          links+=fp.getDownloadLinks().size();
        }
      }
      downloadlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",links));
      filteredlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",lgi.getFILTERPACKAGE().size()));
      totalsize.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(tot)));
      updateinprogress=false;
    }
  }
.start();
}","/** 
 * TODO: soll man über events aktuallisiert werden
 */
private void update(){
  if (updateinprogress)   return;
  new Thread(){
    public void run(){
      updateinprogress=true;
      this.setName(""String_Node_Str"");
      packages.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",fps.size()));
      long tot=0;
      long links=0;
synchronized (fps) {
        for (        LinkGrabberFilePackage fp : fps) {
          tot+=fp.getDownloadSize(false);
          links+=fp.getDownloadLinks().size();
        }
      }
      downloadlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",links));
      filteredlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",lgi.getFILTERPACKAGE().size()));
      totalsize.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(tot)));
      updateinprogress=false;
    }
  }
.start();
}"
21125,"/** 
 * TODO: soll mal über events aktuallisiert werden
 */
private void update(){
  if (updateinprogress)   return;
  new Thread(){
    public void run(){
      updateinprogress=true;
      this.setName(""String_Node_Str"");
      DownloadController dlc=JDUtilities.getDownloadController();
      packages.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getPackages().size()));
      downloadlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getAllDownloadLinks().size()));
      long tot=0;
      long loaded=0;
      for (      DownloadLink l : dlc.getAllDownloadLinks()) {
        if (!l.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS) && l.isEnabled()) {
          tot+=l.getDownloadSize();
          loaded+=l.getDownloadCurrent();
        }
      }
      totalsize.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(tot)));
      final long tot2=tot;
      new GuiRunnable<Object>(){
        public Object runSave(){
          progress.setMaximum(tot2);
          return null;
        }
      }
.waitForEDT();
      progress.setValue(loaded);
      progress.setToolTipText(Math.round((loaded * 10000.0) / tot) / 100.0 + ""String_Node_Str"");
      long speedm=JDUtilities.getController().getSpeedMeter();
      if (speedm > 1024) {
        speed.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(speedm) + ""String_Node_Str""));
        long etanum=(tot - loaded) / speedm;
        eta.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatSeconds(etanum)));
      }
 else {
        eta.setText(""String_Node_Str"");
        speed.setText(""String_Node_Str"");
      }
      updateinprogress=false;
    }
  }
.start();
}","/** 
 * TODO: soll mal über events aktuallisiert werden
 */
private void update(){
  if (updateinprogress)   return;
  new Thread(){
    public void run(){
      updateinprogress=true;
      this.setName(""String_Node_Str"");
      DownloadController dlc=JDUtilities.getDownloadController();
      packages.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getPackages().size()));
      downloadlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getAllDownloadLinks().size()));
      long tot=0;
      long loaded=0;
      for (      DownloadLink l : dlc.getAllDownloadLinks()) {
        if (!l.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS) && l.isEnabled()) {
          tot+=l.getDownloadSize();
          loaded+=l.getDownloadCurrent();
        }
      }
      totalsize.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(tot)));
      final long tot2=tot;
      final long loaded2=loaded;
      new GuiRunnable<Object>(){
        public Object runSave(){
          progress.setMaximum(tot2);
          progress.setValue(loaded2);
          progress.setToolTipText(Math.round((loaded2 * 10000.0) / tot2) / 100.0 + ""String_Node_Str"");
          return null;
        }
      }
.waitForEDT();
      long speedm=JDUtilities.getController().getSpeedMeter();
      if (speedm > 1024) {
        speed.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(speedm) + ""String_Node_Str""));
        long etanum=(tot - loaded) / speedm;
        eta.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatSeconds(etanum)));
      }
 else {
        eta.setText(""String_Node_Str"");
        speed.setText(""String_Node_Str"");
      }
      updateinprogress=false;
    }
  }
.start();
}"
21126,"public void run(){
  updateinprogress=true;
  this.setName(""String_Node_Str"");
  DownloadController dlc=JDUtilities.getDownloadController();
  packages.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getPackages().size()));
  downloadlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getAllDownloadLinks().size()));
  long tot=0;
  long loaded=0;
  for (  DownloadLink l : dlc.getAllDownloadLinks()) {
    if (!l.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS) && l.isEnabled()) {
      tot+=l.getDownloadSize();
      loaded+=l.getDownloadCurrent();
    }
  }
  totalsize.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(tot)));
  final long tot2=tot;
  new GuiRunnable<Object>(){
    public Object runSave(){
      progress.setMaximum(tot2);
      return null;
    }
  }
.waitForEDT();
  progress.setValue(loaded);
  progress.setToolTipText(Math.round((loaded * 10000.0) / tot) / 100.0 + ""String_Node_Str"");
  long speedm=JDUtilities.getController().getSpeedMeter();
  if (speedm > 1024) {
    speed.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(speedm) + ""String_Node_Str""));
    long etanum=(tot - loaded) / speedm;
    eta.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatSeconds(etanum)));
  }
 else {
    eta.setText(""String_Node_Str"");
    speed.setText(""String_Node_Str"");
  }
  updateinprogress=false;
}","public void run(){
  updateinprogress=true;
  this.setName(""String_Node_Str"");
  DownloadController dlc=JDUtilities.getDownloadController();
  packages.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getPackages().size()));
  downloadlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getAllDownloadLinks().size()));
  long tot=0;
  long loaded=0;
  for (  DownloadLink l : dlc.getAllDownloadLinks()) {
    if (!l.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS) && l.isEnabled()) {
      tot+=l.getDownloadSize();
      loaded+=l.getDownloadCurrent();
    }
  }
  totalsize.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(tot)));
  final long tot2=tot;
  final long loaded2=loaded;
  new GuiRunnable<Object>(){
    public Object runSave(){
      progress.setMaximum(tot2);
      progress.setValue(loaded2);
      progress.setToolTipText(Math.round((loaded2 * 10000.0) / tot2) / 100.0 + ""String_Node_Str"");
      return null;
    }
  }
.waitForEDT();
  long speedm=JDUtilities.getController().getSpeedMeter();
  if (speedm > 1024) {
    speed.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatReadable(speedm) + ""String_Node_Str""));
    long etanum=(tot - loaded) / speedm;
    eta.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Formatter.formatSeconds(etanum)));
  }
 else {
    eta.setText(""String_Node_Str"");
    speed.setText(""String_Node_Str"");
  }
  updateinprogress=false;
}"
21127,"public Object runSave(){
  progress.setMaximum(tot2);
  return null;
}","public Object runSave(){
  progress.setMaximum(tot2);
  progress.setValue(loaded2);
  progress.setToolTipText(Math.round((loaded2 * 10000.0) / tot2) / 100.0 + ""String_Node_Str"");
  return null;
}"
21128,"public void handleFree(DownloadLink downloadLink) throws Exception {
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  br.setDebug(true);
  String picture_name=new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (picture_name == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String gallery_name=new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (gallery_name != null) {
    gallery_name=gallery_name.trim();
  }
  String imagelink=DecryptLink(new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0));
  String filename=Plugin.extractFileNameFromURL(imagelink);
  downloadLink.setFinalFileName(filename);
  if (gallery_name != null)   downloadLink.addSubdirectory(gallery_name);
  dl=br.openDownload(downloadLink,imagelink);
  if (dl.getConnection().getResponseCode() == 404) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  br.setFollowRedirects(true);
  String pfilename=downloadLink.getName();
  br.getPage(downloadLink.getDownloadURL());
  br.setDebug(true);
  String picture_name=new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (picture_name == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String gallery_name=new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (gallery_name != null) {
    gallery_name=gallery_name.trim();
  }
  String imagelink=DecryptLink(new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0));
  if (gallery_name != null)   downloadLink.addSubdirectory(gallery_name);
  dl=br.openDownload(downloadLink,imagelink);
  if (dl.getConnection().getResponseCode() == 404) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  downloadLink.setFinalFileName(pfilename);
  dl.startDownload();
}"
21129,"public void handleFree(DownloadLink downloadLink) throws Exception {
  boolean do_download=false;
  getFileInformation(downloadLink);
  br.setFollowRedirects(true);
  String watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
  if (watchAd != null) {
    downloadLink.getLinkStatus().setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    watchAd=""String_Node_Str"".concat(watchAd);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    br.getPage(watchAd);
    String ticketTimeS=br.getRegex(""String_Node_Str"").getMatch(0);
    if (ticketTimeS == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    int ticketTime=Integer.parseInt(ticketTimeS) * 1000;
    this.sleep(ticketTime,downloadLink);
    br.getPage(watchAd);
  }
  for (int retry=1; retry <= 5; retry++) {
    Form captchaForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    String tag=br.getRegex(""String_Node_Str"").getMatch(0);
    String secret=br.getRegex(""String_Node_Str"").getMatch(0).substring(2);
    if (captchaForm == null || captchaurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    if (tag != null && secret != null) {
      captchaForm.put(""String_Node_Str"",tag);
      InputField nv=new InputField(secret,""String_Node_Str"");
      captchaForm.addInputField(nv);
    }
 else     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    captchaForm.setAction(br.getURL());
    URLConnectionAdapter con=br.openGetConnection(captchaurl);
    File file=this.getLocalCaptchaFile(this);
    Browser.download(file,con);
    String captchaCode=getCaptchaCode(file,downloadLink);
    captchaForm.put(""String_Node_Str"",captchaCode);
    br.submitForm(captchaForm);
    String directLink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (directLink != null) {
      dl=br.openDownload(downloadLink,directLink,true,-2);
      do_download=true;
      break;
    }
  }
  if (!do_download) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
 else   dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  boolean do_download=false;
  getFileInformation(downloadLink);
  br.setFollowRedirects(true);
  String watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
  if (watchAd != null) {
    downloadLink.getLinkStatus().setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    watchAd=""String_Node_Str"".concat(watchAd);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    br.getPage(watchAd);
    String ticketTimeS=br.getRegex(""String_Node_Str"").getMatch(0);
    if (ticketTimeS == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    int ticketTime=Integer.parseInt(ticketTimeS) * 1000;
    this.sleep(ticketTime,downloadLink);
    br.getPage(watchAd);
  }
  for (int retry=1; retry <= 5; retry++) {
    Form captchaForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    String tag=br.getRegex(""String_Node_Str"").getMatch(0);
    String secret=br.getRegex(""String_Node_Str"").getMatch(0).substring(2);
    if (captchaForm == null || captchaurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    if (tag != null && secret != null) {
      captchaForm.put(""String_Node_Str"",tag);
      InputField nv=new InputField(secret,""String_Node_Str"");
      captchaForm.addInputField(nv);
    }
 else     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    captchaForm.setAction(br.getURL());
    URLConnectionAdapter con=br.openGetConnection(captchaurl);
    File file=this.getLocalCaptchaFile(this);
    Browser.download(file,con);
    String captchaCode=getCaptchaCode(file,downloadLink);
    captchaForm.put(""String_Node_Str"",captchaCode);
    br.submitForm(captchaForm);
    String directLink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (directLink != null) {
      dl=br.openDownload(downloadLink,directLink,true,-2);
      do_download=true;
      break;
    }
  }
  if (!do_download) {
    throw new PluginException(LinkStatus.ERROR_FATAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  }
 else   dl.startDownload();
}"
21130,"private Component getDownloadLinkCell(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  dLink=(DownloadLink)value;
switch (column) {
case DownloadTreeTableModel.COL_PART:
    co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  clearSB();
((JRendererLabel)co).setIcon(dLink.getIcon());
((JRendererLabel)co).setText(dLink.getName());
((JRendererLabel)co).setBorder(leftGap);
return co;
case DownloadTreeTableModel.COL_HOSTER:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
clearSB();
((JRendererLabel)co).setBorder(null);
sb.append(dLink.getPlugin().getHost());
sb.append(dLink.getPlugin().getSessionInfo());
((JRendererLabel)co).setText(sb.toString());
return co;
case DownloadTreeTableModel.COL_PROGRESS:
if (dLink.getPlugin() == null) {
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(strPluginError);
((JRendererLabel)co).setBorder(null);
return co;
}
 else if (!dLink.getPlugin().getWrapper().usePlugin()) {
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(strPluginDisabled);
((JRendererLabel)co).setBorder(null);
return co;
}
 else if (dLink.getPluginProgress() != null) {
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
}
 else {
progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
}
progress.setMaximum(dLink.getPluginProgress().getTotal());
progress.setValue(dLink.getPluginProgress().getCurrent());
return progress;
}
 else if ((dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED) && dLink.getPlugin().getRemainingHosterWaittime() > 0) || (dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE) && dLink.getLinkStatus().getRemainingWaittime() > 0)) {
progress.setMaximum(dLink.getLinkStatus().getTotalWaitTime());
progress.setForeground(COL_PROGRESS_ERROR);
progress.setValue(dLink.getLinkStatus().getRemainingWaittime());
clearSB();
col=((TableColumnExt)table.getColumnModel().getColumn(column));
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(10000 * progress.getPercentComplete() / 100.0)).append('%');
}
 else {
sb.append(c.format(10000 * progress.getPercentComplete() / 100.0)).append(""String_Node_Str"").append(progress.getValue() / 1000).append('/').append(progress.getMaximum() / 1000).append(strSecondsAbrv).append(')');
}
progress.setString(sb.toString());
return progress;
}
 else if (dLink.getDownloadCurrent() > 0) {
if (!dLink.getLinkStatus().isPluginActive()) {
if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
sb.append(""String_Node_Str"");
}
 else {
sb.append(""String_Node_Str"").append(JDUtilities.formatBytesToMB(dLink.getDownloadCurrent())).append('/').append(JDUtilities.formatBytesToMB(Math.max(1,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
 else {
progress.setString(""String_Node_Str"");
}
}
 else {
if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
progress.setString(strWaitIO);
}
 else {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(dLink.getPercent() / 100.0)).append('%');
}
 else {
sb.append(c.format(dLink.getPercent() / 100.0)).append(""String_Node_Str"").append(JDUtilities.formatBytesToMB(dLink.getDownloadCurrent())).append('/').append(JDUtilities.formatBytesToMB(Math.max(1,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
}
progress.setMaximum(10000);
progress.setValue(dLink.getPercent());
return progress;
}
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(""String_Node_Str"");
((JRendererLabel)co).setBorder(null);
return co;
case DownloadTreeTableModel.COL_STATUS_ICON:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setText(""String_Node_Str"");
if (dLink.getPluginProgress() != null && dLink.getPluginProgress().getPercent() > 0.0 && dLink.getPluginProgress().getPercent() < 100.0) {
((JRendererLabel)co).setIcon(imgExtract);
}
 else if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
((JRendererLabel)co).setIcon(imgFinished);
}
 else if (dLink.getLinkStatus().isFailed()) {
((JRendererLabel)co).setIcon(imgFailed);
}
 else {
((JRendererLabel)co).setIcon(null);
}
((JRendererLabel)co).setBorder(null);
return co;
case DownloadTreeTableModel.COL_STATUS:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setIcon(null);
if (dLink.getPluginProgress() != null && dLink.getPluginProgress().getPercent() > 0.0 && dLink.getPluginProgress().getPercent() < 100.0) {
((JRendererLabel)co).setText(dLink.getLinkStatus().getStatusString());
}
 else if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
((JRendererLabel)co).setText(""String_Node_Str"");
}
 else if (dLink.getLinkStatus().isFailed()) {
((JRendererLabel)co).setText(""String_Node_Str"");
}
 else {
((JRendererLabel)co).setText(dLink.getLinkStatus().getStatusString());
}
((JRendererLabel)co).setBorder(null);
return co;
}
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setBorder(null);
return co;
}","private Component getDownloadLinkCell(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  dLink=(DownloadLink)value;
switch (column) {
case DownloadTreeTableModel.COL_PART:
    co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  clearSB();
((JRendererLabel)co).setIcon(dLink.getIcon());
((JRendererLabel)co).setText(dLink.getName());
((JRendererLabel)co).setBorder(leftGap);
return co;
case DownloadTreeTableModel.COL_HOSTER:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
clearSB();
((JRendererLabel)co).setBorder(null);
sb.append(dLink.getPlugin().getHost());
sb.append(dLink.getPlugin().getSessionInfo());
((JRendererLabel)co).setText(sb.toString());
return co;
case DownloadTreeTableModel.COL_PROGRESS:
if (dLink.getPlugin() == null) {
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(strPluginError);
((JRendererLabel)co).setBorder(null);
return co;
}
 else if (!dLink.getPlugin().getWrapper().usePlugin()) {
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(strPluginDisabled);
((JRendererLabel)co).setBorder(null);
return co;
}
 else if (dLink.getPluginProgress() != null) {
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
}
 else {
progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
}
progress.setMaximum(dLink.getPluginProgress().getTotal());
progress.setValue(dLink.getPluginProgress().getCurrent());
return progress;
}
 else if ((dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED) && dLink.getPlugin().getRemainingHosterWaittime() > 0) || (dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE) && dLink.getLinkStatus().getRemainingWaittime() > 0)) {
progress.setMaximum(dLink.getLinkStatus().getTotalWaitTime());
progress.setForeground(COL_PROGRESS_ERROR);
progress.setValue(dLink.getLinkStatus().getRemainingWaittime());
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(10000 * progress.getPercentComplete() / 100.0)).append('%');
}
 else {
sb.append(c.format(10000 * progress.getPercentComplete() / 100.0)).append(""String_Node_Str"").append(progress.getValue() / 1000).append('/').append(progress.getMaximum() / 1000).append(strSecondsAbrv).append(')');
}
progress.setString(sb.toString());
return progress;
}
 else if (dLink.getDownloadCurrent() > 0) {
if (!dLink.getLinkStatus().isPluginActive()) {
if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 40) {
}
 else if (col.getWidth() < 170) {
sb.append(""String_Node_Str"");
}
 else {
sb.append(""String_Node_Str"").append(JDUtilities.formatBytesToMB(dLink.getDownloadCurrent())).append('/').append(JDUtilities.formatBytesToMB(Math.max(1,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
 else {
progress.setString(""String_Node_Str"");
}
}
 else {
if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
progress.setString(strWaitIO);
}
 else {
clearSB();
col=this.table.getCols()[column];
if (col.getWidth() < 60) {
}
 else if (col.getWidth() < 170) {
sb.append(c.format(dLink.getPercent() / 100.0)).append('%');
}
 else {
sb.append(c.format(dLink.getPercent() / 100.0)).append(""String_Node_Str"").append(JDUtilities.formatBytesToMB(dLink.getDownloadCurrent())).append('/').append(JDUtilities.formatBytesToMB(Math.max(1,dLink.getDownloadSize()))).append(')');
}
progress.setString(sb.toString());
}
}
progress.setMaximum(10000);
progress.setValue(dLink.getPercent());
return progress;
}
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setIcon(null);
((JRendererLabel)co).setText(""String_Node_Str"");
((JRendererLabel)co).setBorder(null);
return co;
case DownloadTreeTableModel.COL_STATUS_ICON:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setText(""String_Node_Str"");
if (dLink.getPluginProgress() != null && dLink.getPluginProgress().getPercent() > 0.0 && dLink.getPluginProgress().getPercent() < 100.0) {
((JRendererLabel)co).setIcon(imgExtract);
}
 else if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
((JRendererLabel)co).setIcon(imgFinished);
}
 else if (dLink.getLinkStatus().isFailed()) {
((JRendererLabel)co).setIcon(imgFailed);
}
 else {
((JRendererLabel)co).setIcon(null);
}
((JRendererLabel)co).setBorder(null);
return co;
case DownloadTreeTableModel.COL_STATUS:
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setIcon(null);
if (dLink.getPluginProgress() != null && dLink.getPluginProgress().getPercent() > 0.0 && dLink.getPluginProgress().getPercent() < 100.0) {
((JRendererLabel)co).setText(dLink.getLinkStatus().getStatusString());
}
 else if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
((JRendererLabel)co).setText(""String_Node_Str"");
}
 else if (dLink.getLinkStatus().isFailed()) {
((JRendererLabel)co).setText(""String_Node_Str"");
}
 else {
((JRendererLabel)co).setText(dLink.getLinkStatus().getStatusString());
}
((JRendererLabel)co).setBorder(null);
return co;
}
co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
((JRendererLabel)co).setBorder(null);
return co;
}"
21131,"public void mousePressed(MouseEvent e){
  if (e.getSource() != this)   return;
  Point point=e.getPoint();
  int row=rowAtPoint(point);
  int col=getRealcolumnAtPoint(e.getX());
  JMenuItem tmp;
  if (!isRowSelected(row) && e.getButton() == MouseEvent.BUTTON3) {
    getTreeSelectionModel().clearSelection();
    getTreeSelectionModel().addSelectionPath(getPathForRow(row));
  }
  if (e.isPopupTrigger() || e.getButton() == MouseEvent.BUTTON3) {
    if (getPathForRow(row) == null) {
      return;
    }
    Vector<DownloadLink> alllinks=getAllSelectedDownloadLinks();
    Vector<DownloadLink> resumlinks=getAllSelectedDownloadLinks();
    Vector<DownloadLink> allnoncon=new Vector<DownloadLink>();
    int links_enabled=0;
    for (    DownloadLink next : alllinks) {
      if (next.getLinkType() == DownloadLink.LINKTYPE_NORMAL) {
        allnoncon.add(next);
      }
      if (next.isEnabled()) {
        links_enabled++;
      }
      if (!next.getLinkStatus().isPluginActive() && next.getLinkStatus().isFailed()) {
        resumlinks.add(next);
      }
    }
    int links_disabled=alllinks.size() - links_enabled;
    Vector<FilePackage> sfp=getSelectedFilePackages();
    Object obj=getPathForRow(row).getLastPathComponent();
    JPopupMenu popup=new JPopupMenu();
    if (obj instanceof FilePackage || obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.DELETE,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JSeparator());
    }
    popup.add(createExtrasMenu(obj));
    if (obj instanceof FilePackage) {
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str""),TreeTableAction.DOWNLOAD_DIR,new Property(""String_Node_Str"",new File(((FilePackage)obj).getDownloadDirectory())))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str""+ this.getModel().getColumnName(col)+ ""String_Node_Str"",TreeTableAction.SORT,new Property(""String_Node_Str"",col))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",TreeTableAction.EDIT_NAME,new Property(""String_Node_Str"",sfp))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",TreeTableAction.EDIT_DIR,new Property(""String_Node_Str"",sfp))));
      popup.add(new JSeparator());
    }
    if (obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str""),TreeTableAction.DOWNLOAD_DIR,new Property(""String_Node_Str"",new File(((DownloadLink)obj).getFileOutput()).getParentFile()))));
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str""),TreeTableAction.DOWNLOAD_BROWSE_LINK,new Property(""String_Node_Str"",obj))));
      if (((DownloadLink)obj).getLinkType() != DownloadLink.LINKTYPE_NORMAL)       tmp.setEnabled(false);
    }
    if (obj instanceof FilePackage || obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_DLC,new Property(""String_Node_Str"",alllinks))));
      popup.add(buildpriomenu(alllinks));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_COPY_PASSWORD,new Property(""String_Node_Str"",alllinks))));
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + allnoncon.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_COPY_URL,new Property(""String_Node_Str"",allnoncon))));
      if (allnoncon.size() == 0)       tmp.setEnabled(false);
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.CHECK,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.NEW_PACKAGE,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.SET_PW,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JSeparator());
      HashMap<String,Object> prop=new HashMap<String,Object>();
      prop.put(""String_Node_Str"",alllinks);
      prop.put(""String_Node_Str"",true);
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links_disabled+ ""String_Node_Str"",TreeTableAction.DE_ACTIVATE,new Property(""String_Node_Str"",prop))));
      if (links_disabled == 0)       tmp.setEnabled(false);
      prop=new HashMap<String,Object>();
      prop.put(""String_Node_Str"",alllinks);
      prop.put(""String_Node_Str"",false);
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links_enabled+ ""String_Node_Str"",TreeTableAction.DE_ACTIVATE,new Property(""String_Node_Str"",prop))));
      if (links_enabled == 0)       tmp.setEnabled(false);
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + resumlinks.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_RESUME,new Property(""String_Node_Str"",resumlinks))));
      if (resumlinks.size() == 0)       tmp.setEnabled(false);
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_RESET,new Property(""String_Node_Str"",alllinks))));
    }
    if (popup.getComponentCount() != 0)     popup.show(this,point.x,point.y);
  }
}","public void mousePressed(MouseEvent e){
  if (e.getSource() != this)   return;
  Point point=e.getPoint();
  int row=rowAtPoint(point);
  int col=getRealcolumnAtPoint(e.getX());
  JMenuItem tmp;
  if (!isRowSelected(row) && e.getButton() == MouseEvent.BUTTON3) {
    getTreeSelectionModel().clearSelection();
    getTreeSelectionModel().addSelectionPath(getPathForRow(row));
  }
  if (e.isPopupTrigger() || e.getButton() == MouseEvent.BUTTON3) {
    if (getPathForRow(row) == null) {
      return;
    }
    Vector<DownloadLink> alllinks=getAllSelectedDownloadLinks();
    Vector<DownloadLink> resumlinks=new Vector<DownloadLink>();
    Vector<DownloadLink> allnoncon=new Vector<DownloadLink>();
    int links_enabled=0;
    for (    DownloadLink next : alllinks) {
      if (next.getLinkType() == DownloadLink.LINKTYPE_NORMAL) {
        allnoncon.add(next);
      }
      if (next.isEnabled()) {
        links_enabled++;
      }
      if (!next.getLinkStatus().isPluginActive() && next.getLinkStatus().isFailed()) {
        resumlinks.add(next);
      }
    }
    int links_disabled=alllinks.size() - links_enabled;
    Vector<FilePackage> sfp=getSelectedFilePackages();
    Object obj=getPathForRow(row).getLastPathComponent();
    JPopupMenu popup=new JPopupMenu();
    if (obj instanceof FilePackage || obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.DELETE,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JSeparator());
    }
    popup.add(createExtrasMenu(obj));
    if (obj instanceof FilePackage) {
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str""),TreeTableAction.DOWNLOAD_DIR,new Property(""String_Node_Str"",new File(((FilePackage)obj).getDownloadDirectory())))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str""+ this.getModel().getColumnName(col)+ ""String_Node_Str"",TreeTableAction.SORT,new Property(""String_Node_Str"",col))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",TreeTableAction.EDIT_NAME,new Property(""String_Node_Str"",sfp))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + sfp.size()+ ""String_Node_Str"",TreeTableAction.EDIT_DIR,new Property(""String_Node_Str"",sfp))));
      popup.add(new JSeparator());
    }
    if (obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str""),TreeTableAction.DOWNLOAD_DIR,new Property(""String_Node_Str"",new File(((DownloadLink)obj).getFileOutput()).getParentFile()))));
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str""),TreeTableAction.DOWNLOAD_BROWSE_LINK,new Property(""String_Node_Str"",obj))));
      if (((DownloadLink)obj).getLinkType() != DownloadLink.LINKTYPE_NORMAL)       tmp.setEnabled(false);
    }
    if (obj instanceof FilePackage || obj instanceof DownloadLink) {
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_DLC,new Property(""String_Node_Str"",alllinks))));
      popup.add(buildpriomenu(alllinks));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_COPY_PASSWORD,new Property(""String_Node_Str"",alllinks))));
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + allnoncon.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_COPY_URL,new Property(""String_Node_Str"",allnoncon))));
      if (allnoncon.size() == 0)       tmp.setEnabled(false);
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.CHECK,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.NEW_PACKAGE,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.SET_PW,new Property(""String_Node_Str"",alllinks))));
      popup.add(new JSeparator());
      HashMap<String,Object> prop=new HashMap<String,Object>();
      prop.put(""String_Node_Str"",alllinks);
      prop.put(""String_Node_Str"",true);
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links_disabled+ ""String_Node_Str"",TreeTableAction.DE_ACTIVATE,new Property(""String_Node_Str"",prop))));
      if (links_disabled == 0)       tmp.setEnabled(false);
      prop=new HashMap<String,Object>();
      prop.put(""String_Node_Str"",alllinks);
      prop.put(""String_Node_Str"",false);
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + links_enabled+ ""String_Node_Str"",TreeTableAction.DE_ACTIVATE,new Property(""String_Node_Str"",prop))));
      if (links_enabled == 0)       tmp.setEnabled(false);
      popup.add(tmp=new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + resumlinks.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_RESUME,new Property(""String_Node_Str"",resumlinks))));
      if (resumlinks.size() == 0)       tmp.setEnabled(false);
      popup.add(new JMenuItem(new TreeTableAction(panel,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + alllinks.size()+ ""String_Node_Str"",TreeTableAction.DOWNLOAD_RESET,new Property(""String_Node_Str"",alllinks))));
    }
    if (popup.getComponentCount() != 0)     popup.show(this,point.x,point.y);
  }
}"
21132,"private void startLinkCheck(){
  if (checkThread != null && checkThread.isAlive()) {
    return;
  }
  checkThread=new Thread(){
    public void run(){
      setName(""String_Node_Str"");
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.START));
      pc=new ProgressController(""String_Node_Str"");
      pc.getBroadcaster().addListener(LinkCheck.getLinkChecker());
      pc.setRange(0);
      while (LinksToCheck.size() != 0) {
        Vector<DownloadLink> currentList;
synchronized (LinksToCheck) {
          currentList=new Vector<DownloadLink>(LinksToCheck);
          pc.addToMax(currentList.size());
        }
        HashMap<String,Vector<DownloadLink>> map=new HashMap<String,Vector<DownloadLink>>();
        for (        DownloadLink dl : currentList) {
          Vector<DownloadLink> localList=map.get(dl.getPlugin().getHost());
          if (localList == null) {
            localList=new Vector<DownloadLink>();
            map.put(dl.getPlugin().getHost(),localList);
          }
          localList.add(dl);
        }
        checkJobbers=new Jobber(4);
        Vector<DownloadLink> hosterList;
        for (Iterator<Vector<DownloadLink>> it=map.values().iterator(); it.hasNext(); ) {
          hosterList=it.next();
          CheckThread cthread=new CheckThread(hosterList);
          checkJobbers.add(cthread);
        }
        int todo=checkJobbers.getJobsAdded();
        checkJobbers.start();
        while (checkJobbers.getJobsFinished() != todo) {
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            return;
          }
        }
        checkJobbers.stop();
synchronized (LinksToCheck) {
          LinksToCheck.removeAll(currentList);
        }
      }
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException e) {
        return;
      }
      pc.finalize();
      pc.getBroadcaster().removeListener(LinkCheck.getLinkChecker());
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.STOP));
      check_running=false;
    }
  }
;
  checkThread.start();
}","private void startLinkCheck(){
  if (checkThread != null && checkThread.isAlive()) {
    return;
  }
  checkThread=new Thread(){
    public void run(){
      setName(""String_Node_Str"");
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.START));
      pc=new ProgressController(""String_Node_Str"");
      pc.getBroadcaster().addListener(LinkCheck.getLinkChecker());
      pc.setRange(0);
      while (LinksToCheck.size() != 0) {
        Vector<DownloadLink> currentList;
synchronized (LinksToCheck) {
          currentList=new Vector<DownloadLink>(LinksToCheck);
          pc.addToMax(currentList.size());
        }
        HashMap<String,Vector<DownloadLink>> map=new HashMap<String,Vector<DownloadLink>>();
        for (        DownloadLink dl : currentList) {
          Vector<DownloadLink> localList=map.get(dl.getPlugin().getHost());
          if (localList == null) {
            localList=new Vector<DownloadLink>();
            map.put(dl.getPlugin().getHost(),localList);
          }
          localList.add(dl);
        }
        checkJobbers=new Jobber(4);
        Vector<DownloadLink> hosterList;
        for (Iterator<Vector<DownloadLink>> it=map.values().iterator(); it.hasNext(); ) {
          hosterList=it.next();
          CheckThread cthread=new CheckThread(hosterList);
          checkJobbers.add(cthread);
        }
        int todo=checkJobbers.getJobsAdded();
        checkJobbers.start();
        while (checkJobbers.getJobsFinished() != todo) {
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            return;
          }
        }
        checkJobbers.stop();
synchronized (LinksToCheck) {
          LinksToCheck.removeAll(currentList);
        }
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
      pc.finalize();
      pc.getBroadcaster().removeListener(LinkCheck.getLinkChecker());
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.STOP));
      check_running=false;
    }
  }
;
  checkThread.start();
}"
21133,"public void actionPerformed(ActionEvent arg0){
  if (arg0.getSource() == checkTimer) {
    checkTimer.stop();
    checkTimer.removeActionListener(this);
    checkTimer=null;
    if (LinksToCheck.size() > 0) {
      startLinkCheck();
    }
    return;
  }
}","public void actionPerformed(ActionEvent arg0){
  if (arg0.getSource() == checkTimer) {
    checkTimer.stop();
    if (LinksToCheck.size() > 0) {
      startLinkCheck();
    }
    return;
  }
}"
21134,"public void abortLinkCheck(){
  check_running=false;
  if (checkTimer != null) {
    checkTimer.stop();
    checkTimer.removeActionListener(this);
  }
  if (checkThread != null && checkThread.isAlive()) {
    EventQueue.invokeLater(new Runnable(){
      public void run(){
        pc.setStatusText(pc.getStatusText() + ""String_Node_Str"");
        pc.finalize(5000l);
      }
    }
);
    checkJobbers.stop();
    checkThread.interrupt();
  }
synchronized (LinksToCheck) {
    LinksToCheck=new Vector<DownloadLink>();
  }
}","public void abortLinkCheck(){
  check_running=false;
  checkTimer.stop();
  if (checkThread != null && checkThread.isAlive()) {
    EventQueue.invokeLater(new Runnable(){
      public void run(){
        pc.setStatusText(pc.getStatusText() + ""String_Node_Str"");
        pc.finalize(5000l);
      }
    }
);
    checkJobbers.stop();
    checkThread.interrupt();
  }
synchronized (LinksToCheck) {
    LinksToCheck=new Vector<DownloadLink>();
  }
}"
21135,"public synchronized void checkLinks(Vector<DownloadLink> links){
  if (links == null || links.size() == 0)   return;
  check_running=true;
  for (  DownloadLink element : links) {
synchronized (LinksToCheck) {
      if (!LinksToCheck.contains(element))       LinksToCheck.add(element);
    }
  }
  if (checkTimer != null) {
    checkTimer.stop();
    checkTimer.removeActionListener(this);
    checkTimer=null;
  }
  checkTimer=new Timer(2000,this);
  checkTimer.setInitialDelay(2000);
  checkTimer.setRepeats(false);
  checkTimer.start();
}","public synchronized void checkLinks(Vector<DownloadLink> links){
  if (links == null || links.size() == 0)   return;
  check_running=true;
  for (  DownloadLink element : links) {
synchronized (LinksToCheck) {
      if (!LinksToCheck.contains(element))       LinksToCheck.add(element);
    }
  }
  checkTimer.restart();
}"
21136,"private LinkCheck(){
}","private LinkCheck(){
  checkTimer=new Timer(2000,this);
  checkTimer.setInitialDelay(2000);
  checkTimer.setRepeats(false);
}"
21137,"private void addToPackages(LinkGrabberFilePackage fp,DownloadLink link){
synchronized (packages) {
    LinkGrabberFilePackage fptmp=getFPwithLink(link);
    if (!packages.contains(fp))     packages.add(fp);
    fp.add(link);
    if (fptmp != null)     fptmp.remove(link);
  }
}","private void addToPackages(LinkGrabberFilePackage fp,DownloadLink link){
synchronized (packages) {
    LinkGrabberFilePackage fptmp=getFPwithLink(link);
    if (!packages.contains(fp))     packages.add(fp);
    fp.add(link);
    if (fptmp != null && fp != fptmp)     fptmp.remove(link);
  }
}"
21138,"@SuppressWarnings(""String_Node_Str"") public void actionPerformed(ActionEvent arg0){
  if (arg0.getSource() == this.Update_Async) {
    fireTableChanged(1,null);
    return;
  }
  if (arg0.getSource() == this.gathertimer) {
    gathertimer.stop();
    gathertimer.removeActionListener(this);
    gathertimer=null;
    if (waitingList.size() > 0) {
      startLinkGatherer();
    }
    return;
  }
  Vector<LinkGrabberFilePackage> selected_packages=new Vector<LinkGrabberFilePackage>();
  Vector<DownloadLink> selected_links=new Vector<DownloadLink>();
  int prio=0;
  String pw=""String_Node_Str"";
  HashMap<String,Object> prop=new HashMap<String,Object>();
  LinkGrabberFilePackage fp;
  Set<String> hoster=null;
  JDFileChooser fc;
  int col=0;
  boolean b=false;
synchronized (packages) {
    if (arg0.getSource() instanceof LinkGrabberTaskPane) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_ALL:
        selected_packages=new Vector<LinkGrabberFilePackage>(packages);
      break;
case LinkGrabberTreeTableAction.CLEAR:
    stopLinkGatherer();
  selected_packages=new Vector<LinkGrabberFilePackage>(packages);
break;
case LinkGrabberTreeTableAction.ADD_SELECTED:
selected_packages=new Vector<LinkGrabberFilePackage>(this.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.GUI_ADD:
String cb=""String_Node_Str"";
try {
cb=(String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
}
 catch (Exception e1) {
}
String data=LinkInputDialog.showDialog(null,cb);
if (data != null && data.length() > 0) {
JDUtilities.getController().distributeLinks(data);
}
return;
case LinkGrabberTreeTableAction.GUI_LOAD:
}
}
 else if (arg0.getSource() instanceof JMenuItem) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.SELECT_HOSTER:
hoster=(Set<String>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new Vector<LinkGrabberFilePackage>(packages);
break;
case LinkGrabberTreeTableAction.ADD_ALL:
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
selected_packages=new Vector<LinkGrabberFilePackage>(packages);
break;
case LinkGrabberTreeTableAction.ADD_SELECTED:
case LinkGrabberTreeTableAction.EDIT_DIR:
selected_packages=new Vector<LinkGrabberFilePackage>(this.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.SORT:
col=(Integer)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new Vector<LinkGrabberFilePackage>(this.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
case LinkGrabberTreeTableAction.DE_ACTIVATE:
prop=(HashMap<String,Object>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_links=(Vector<DownloadLink>)prop.get(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.DELETE:
case LinkGrabberTreeTableAction.SET_PW:
case LinkGrabberTreeTableAction.NEW_PACKAGE:
selected_links=(Vector<DownloadLink>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
 else if (arg0.getSource() instanceof LinkGrabberTreeTableAction) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.SORT_ALL:
col=(Integer)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.removeOffline();
}
Update_Async.restart();
break;
case LinkGrabberTreeTableAction.SORT:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.sort(col);
}
Update_Async.restart();
break;
case LinkGrabberTreeTableAction.SORT_ALL:
sort(col);
Update_Async.restart();
break;
case LinkGrabberTreeTableAction.SELECT_HOSTER:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.keepHostersOnly(hoster);
}
Update_Async.restart();
break;
case LinkGrabberTreeTableAction.EDIT_DIR:
fc=new JDFileChooser();
fc.setApproveButtonText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
fc.setCurrentDirectory(new File(selected_packages.get(0).getDownloadDirectory()));
if (fc.showOpenDialog(this) == JDFileChooser.APPROVE_OPTION) {
if (fc.getSelectedFile() != null) {
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.setDownloadDirectory(fc.getSelectedFile().getAbsolutePath());
}
}
}
break;
case LinkGrabberTreeTableAction.NEW_PACKAGE:
fp=this.getFPwithLink(selected_links.get(0));
String name=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),fp.getName());
if (name != null) {
LinkGrabberFilePackage nfp=new LinkGrabberFilePackage(name,this);
for (DownloadLink link : selected_links) {
removeFromPackages(link);
addToPackages(nfp,link);
}
Update_Async.restart();
}
return;
case LinkGrabberTreeTableAction.SET_PW:
pw=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),null);
for (int i=0; i < selected_links.size(); i++) {
fp=this.getFPwithLink(selected_links.elementAt(i));
selected_links.elementAt(i).setProperty(""String_Node_Str"",pw);
if (fp != null) fp.getBroadcaster().fireEvent(new LinkGrabberFilePackageEvent(fp,LinkGrabberFilePackageEvent.UPDATE_EVENT));
}
return;
case LinkGrabberTreeTableAction.DE_ACTIVATE:
b=(Boolean)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setEnabled(b);
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.ADD_ALL:
case LinkGrabberTreeTableAction.ADD_SELECTED:
confirmPackages(selected_packages);
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.DELETE:
for (DownloadLink link : selected_links) {
link.setProperty(""String_Node_Str"",true);
removeFromPackages(link);
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.CLEAR:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.setDownloadLinks(new Vector<DownloadLink>());
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
prio=(Integer)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.elementAt(i).setPriority(prio);
}
return;
}
}
}","@SuppressWarnings(""String_Node_Str"") public void actionPerformed(ActionEvent arg0){
  if (arg0.getSource() == this.Update_Async) {
    fireTableChanged(1,null);
    return;
  }
  if (arg0.getSource() == this.gathertimer) {
    gathertimer.stop();
    if (waitingList.size() > 0) {
      startLinkGatherer();
    }
    return;
  }
  Vector<LinkGrabberFilePackage> selected_packages=new Vector<LinkGrabberFilePackage>();
  Vector<DownloadLink> selected_links=new Vector<DownloadLink>();
  int prio=0;
  String pw=""String_Node_Str"";
  HashMap<String,Object> prop=new HashMap<String,Object>();
  LinkGrabberFilePackage fp;
  Set<String> hoster=null;
  JDFileChooser fc;
  int col=0;
  boolean b=false;
synchronized (packages) {
    if (arg0.getSource() instanceof LinkGrabberTaskPane) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.ADD_ALL:
        selected_packages=new Vector<LinkGrabberFilePackage>(packages);
      break;
case LinkGrabberTreeTableAction.CLEAR:
    stopLinkGatherer();
  selected_packages=new Vector<LinkGrabberFilePackage>(packages);
break;
case LinkGrabberTreeTableAction.ADD_SELECTED:
selected_packages=new Vector<LinkGrabberFilePackage>(this.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.GUI_ADD:
String cb=""String_Node_Str"";
try {
cb=(String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
}
 catch (Exception e1) {
}
String data=LinkInputDialog.showDialog(null,cb);
if (data != null && data.length() > 0) {
JDUtilities.getController().distributeLinks(data);
}
return;
case LinkGrabberTreeTableAction.GUI_LOAD:
fc=new JDFileChooser(""String_Node_Str"");
fc.setDialogTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(null) == JDFileChooser.APPROVE_OPTION) {
File ret2=fc.getSelectedFile();
if (ret2 != null) {
JDUtilities.getController().loadContainerFile(ret2);
}
}
return;
}
}
 else if (arg0.getSource() instanceof JMenuItem) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.SELECT_HOSTER:
hoster=(Set<String>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new Vector<LinkGrabberFilePackage>(packages);
break;
case LinkGrabberTreeTableAction.ADD_ALL:
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
selected_packages=new Vector<LinkGrabberFilePackage>(packages);
break;
case LinkGrabberTreeTableAction.ADD_SELECTED:
case LinkGrabberTreeTableAction.EDIT_DIR:
selected_packages=new Vector<LinkGrabberFilePackage>(this.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.SORT:
col=(Integer)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_packages=new Vector<LinkGrabberFilePackage>(this.internalTreeTable.getSelectedFilePackages());
break;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
case LinkGrabberTreeTableAction.DE_ACTIVATE:
prop=(HashMap<String,Object>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selected_links=(Vector<DownloadLink>)prop.get(""String_Node_Str"");
break;
case LinkGrabberTreeTableAction.DELETE:
case LinkGrabberTreeTableAction.SET_PW:
case LinkGrabberTreeTableAction.NEW_PACKAGE:
selected_links=(Vector<DownloadLink>)((LinkGrabberTreeTableAction)((JMenuItem)arg0.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
 else if (arg0.getSource() instanceof LinkGrabberTreeTableAction) {
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.SORT_ALL:
col=(Integer)((LinkGrabberTreeTableAction)arg0.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
switch (arg0.getID()) {
case LinkGrabberTreeTableAction.DELETE_OFFLINE:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.removeOffline();
}
Update_Async.restart();
break;
case LinkGrabberTreeTableAction.SORT:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.sort(col);
}
Update_Async.restart();
break;
case LinkGrabberTreeTableAction.SORT_ALL:
sort(col);
Update_Async.restart();
break;
case LinkGrabberTreeTableAction.SELECT_HOSTER:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.keepHostersOnly(hoster);
}
Update_Async.restart();
break;
case LinkGrabberTreeTableAction.EDIT_DIR:
fc=new JDFileChooser();
fc.setApproveButtonText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
fc.setCurrentDirectory(new File(selected_packages.get(0).getDownloadDirectory()));
if (fc.showOpenDialog(this) == JDFileChooser.APPROVE_OPTION) {
if (fc.getSelectedFile() != null) {
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.setDownloadDirectory(fc.getSelectedFile().getAbsolutePath());
}
}
}
break;
case LinkGrabberTreeTableAction.NEW_PACKAGE:
fp=this.getFPwithLink(selected_links.get(0));
String name=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),fp.getName());
if (name != null) {
LinkGrabberFilePackage nfp=new LinkGrabberFilePackage(name,this);
for (DownloadLink link : selected_links) {
removeFromPackages(link);
addToPackages(nfp,link);
}
Update_Async.restart();
}
return;
case LinkGrabberTreeTableAction.SET_PW:
pw=SimpleGUI.CURRENTGUI.showUserInputDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""),null);
for (int i=0; i < selected_links.size(); i++) {
fp=this.getFPwithLink(selected_links.elementAt(i));
selected_links.elementAt(i).setProperty(""String_Node_Str"",pw);
if (fp != null) fp.getBroadcaster().fireEvent(new LinkGrabberFilePackageEvent(fp,LinkGrabberFilePackageEvent.UPDATE_EVENT));
}
return;
case LinkGrabberTreeTableAction.DE_ACTIVATE:
b=(Boolean)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.get(i).setEnabled(b);
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.ADD_ALL:
case LinkGrabberTreeTableAction.ADD_SELECTED:
confirmPackages(selected_packages);
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.DELETE:
for (DownloadLink link : selected_links) {
link.setProperty(""String_Node_Str"",true);
removeFromPackages(link);
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.CLEAR:
for (LinkGrabberFilePackage fp2 : selected_packages) {
fp2.setDownloadLinks(new Vector<DownloadLink>());
}
Update_Async.restart();
return;
case LinkGrabberTreeTableAction.DOWNLOAD_PRIO:
prio=(Integer)prop.get(""String_Node_Str"");
for (int i=0; i < selected_links.size(); i++) {
selected_links.elementAt(i).setPriority(prio);
}
return;
}
}
}"
21139,"private LinkGrabberPanel(){
  super(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  PACKAGENAME_UNSORTED=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
  PACKAGENAME_UNCHECKED=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
  guiConfig=JDUtilities.getSubConfig(SimpleGuiConstants.GUICONFIGNAME);
  internalTreeTable=new LinkGrabberTreeTable(new LinkGrabberTreeTableModel(this),this);
  JScrollPane scrollPane=new JScrollPane(internalTreeTable);
  this.add(scrollPane,""String_Node_Str"");
  FilePackageInfo=new LinkGrabberFilePackageInfo();
  Update_Async=new Timer(50,this);
  Update_Async.setInitialDelay(50);
  Update_Async.setRepeats(false);
  INSTANCE=this;
}","private LinkGrabberPanel(){
  super(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  PACKAGENAME_UNSORTED=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
  PACKAGENAME_UNCHECKED=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
  guiConfig=JDUtilities.getSubConfig(SimpleGuiConstants.GUICONFIGNAME);
  internalTreeTable=new LinkGrabberTreeTable(new LinkGrabberTreeTableModel(this),this);
  JScrollPane scrollPane=new JScrollPane(internalTreeTable);
  this.add(scrollPane,""String_Node_Str"");
  FilePackageInfo=new LinkGrabberFilePackageInfo();
  Update_Async=new Timer(50,this);
  Update_Async.setInitialDelay(50);
  Update_Async.setRepeats(false);
  gathertimer=new Timer(2000,LinkGrabberPanel.this);
  gathertimer.setInitialDelay(2000);
  gathertimer.setRepeats(false);
  INSTANCE=this;
}"
21140,"public synchronized void addLinks(DownloadLink[] linkList){
  for (  DownloadLink element : linkList) {
    if (isDupe(element))     continue;
    addToWaitingList(element);
  }
  Update_Async.restart();
  if (gathertimer != null) {
    gathertimer.stop();
    gathertimer.removeActionListener(LinkGrabberPanel.this);
    gathertimer=null;
  }
  gathertimer=new Timer(2000,LinkGrabberPanel.this);
  gathertimer.setInitialDelay(2000);
  gathertimer.setRepeats(false);
  gathertimer.start();
}","public synchronized void addLinks(DownloadLink[] linkList){
  for (  DownloadLink element : linkList) {
    if (isDupe(element))     continue;
    addToWaitingList(element);
  }
  Update_Async.restart();
  gathertimer.restart();
}"
21141,"private void update(){
  DownloadController dlc=JDUtilities.getDownloadController();
  packages.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getPackages().size()));
  downloadlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getAllDownloadLinks().size()));
  long tot=0;
  long loaded=0;
  for (  DownloadLink l : dlc.getAllDownloadLinks()) {
    tot+=l.getDownloadSize();
    loaded+=l.getDownloadCurrent();
  }
  totalsize.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",JDUtilities.formatKbReadable(tot / 1024)));
  progress.setMaximum(tot);
  progress.setValue(loaded);
  if (JDUtilities.getController().getSpeedMeter() > 1024) {
    speed.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",JDUtilities.formatBytesToMB(JDUtilities.getController().getSpeedMeter()) + ""String_Node_Str""));
    long etanum=(tot - loaded) / JDUtilities.getController().getSpeedMeter();
    eta.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",JDUtilities.formatSeconds(etanum)));
  }
 else {
    eta.setText(""String_Node_Str"");
    speed.setText(""String_Node_Str"");
  }
}","private void update(){
  DownloadController dlc=JDUtilities.getDownloadController();
  packages.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getPackages().size()));
  downloadlinks.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dlc.getAllDownloadLinks().size()));
  long tot=0;
  long loaded=0;
  for (  DownloadLink l : dlc.getAllDownloadLinks()) {
    if (!l.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS) && l.isEnabled())     tot+=l.getDownloadSize();
    loaded+=l.getDownloadCurrent();
  }
  totalsize.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",JDUtilities.formatKbReadable(tot / 1024)));
  progress.setMaximum(tot);
  progress.setValue(loaded);
  if (JDUtilities.getController().getSpeedMeter() > 1024) {
    speed.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",JDUtilities.formatBytesToMB(JDUtilities.getController().getSpeedMeter()) + ""String_Node_Str""));
    long etanum=(tot - loaded) / JDUtilities.getController().getSpeedMeter();
    eta.setText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",JDUtilities.formatSeconds(etanum)));
  }
 else {
    eta.setText(""String_Node_Str"");
    speed.setText(""String_Node_Str"");
  }
}"
21142,"private void getJACInfo(){
  Document doc;
  File f=JDUtilities.getResourceFile(""String_Node_Str"" + methodDirName + ""String_Node_Str""+ ""String_Node_Str"");
  if (!f.exists()) {
    if (JAntiCaptcha.isLoggerActive()) {
      logger.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    return;
  }
  doc=UTILITIES.parseXmlString(JDIO.getLocalFile(f),false);
  if (doc == null) {
    if (JAntiCaptcha.isLoggerActive()) {
      logger.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    return;
  }
  NodeList nl=doc.getFirstChild().getChildNodes();
  for (int i=0; i < nl.getLength(); i++) {
    Node childNode=nl.item(i);
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      setMethodAuthor(UTILITIES.getAttribute(childNode,""String_Node_Str""));
      setMethodName(UTILITIES.getAttribute(childNode,""String_Node_Str""));
      this.extern=UTILITIES.getAttribute(childNode,""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"");
      this.os=UTILITIES.getAttribute(childNode,""String_Node_Str"");
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.srcFile=UTILITIES.getAttribute(childNode,""String_Node_Str"");
      this.dstFile=UTILITIES.getAttribute(childNode,""String_Node_Str"");
      this.command=UTILITIES.getAttribute(childNode,""String_Node_Str"");
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      try {
        setLetterNum(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
      }
 catch (      Exception e) {
      }
      try {
        setLetterMinNum(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
      }
 catch (      Exception e) {
      }
      try {
        setLetterMaxNum(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
      }
 catch (      Exception e) {
      }
      setImageType(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      setResultFile(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
  }
}","private void getJACInfo(){
  Document doc;
  File f=JDUtilities.getResourceFile(""String_Node_Str"" + methodDirName + ""String_Node_Str""+ ""String_Node_Str"");
  if (!f.exists()) {
    if (JAntiCaptcha.isLoggerActive()) {
      logger.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    return;
  }
  doc=UTILITIES.parseXmlString(JDIO.getLocalFile(f),false);
  if (doc == null) {
    if (JAntiCaptcha.isLoggerActive()) {
      logger.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    return;
  }
  NodeList nl=doc.getFirstChild().getChildNodes();
  for (int i=0; i < nl.getLength(); i++) {
    Node childNode=nl.item(i);
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      setMethodAuthor(UTILITIES.getAttribute(childNode,""String_Node_Str""));
      setMethodName(UTILITIES.getAttribute(childNode,""String_Node_Str""));
      try {
        this.extern=UTILITIES.getAttribute(childNode,""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"");
      }
 catch (      Exception e) {
      }
      this.os=UTILITIES.getAttribute(childNode,""String_Node_Str"");
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.srcFile=UTILITIES.getAttribute(childNode,""String_Node_Str"");
      this.dstFile=UTILITIES.getAttribute(childNode,""String_Node_Str"");
      this.command=UTILITIES.getAttribute(childNode,""String_Node_Str"");
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      try {
        setLetterNum(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
      }
 catch (      Exception e) {
      }
      try {
        setLetterMinNum(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
      }
 catch (      Exception e) {
      }
      try {
        setLetterMaxNum(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
      }
 catch (      Exception e) {
      }
      setImageType(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      setResultFile(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
  }
}"
21143,"/** 
 * Diese Methode erstellt einen neuen Captchadialog und liefert den eingegebenen Text zurück.
 * @param controller Der Controller
 * @param plugin Das Plugin, das dieses Captcha fordert
 * @param host der Host von dem die Methode verwendet werden soll
 * @param file
 * @return Der vom Benutzer eingegebene Text
 * @throws InterruptedException
 */
public static String getCaptcha(Plugin plugin,String method,File file,boolean forceJAC) throws InterruptedException {
  String host;
  if (method == null) {
    host=plugin.getHost();
  }
 else {
    host=method.toLowerCase();
  }
  JDUtilities.getController().fireControlEvent(new ControlEvent(plugin,ControlEvent.CONTROL_CAPTCHA_LOADED,file));
  jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + host + ""String_Node_Str""+ JAntiCaptcha.hasMethod(JDUtilities.getJACMethodsDirectory(),host));
  if (forceJAC || JAntiCaptcha.hasMethod(JDUtilities.getJACMethodsDirectory(),host) && JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_JAC_METHODS + ""String_Node_Str"" + host,true) && !configuration.getBooleanProperty(Configuration.PARAM_CAPTCHA_JAC_DISABLE,false)) {
    if (!JAntiCaptcha.hasMethod(JDUtilities.getJACMethodsDirectory(),host) || !JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_JAC_METHODS + ""String_Node_Str"" + host,true)) {
      return null;
    }
    JFrame jf=new JFrame();
    Image captchaImage;
    try {
      captchaImage=ImageIO.read(file);
      MediaTracker mediaTracker=new MediaTracker(jf);
      mediaTracker.addImage(captchaImage,0);
      try {
        mediaTracker.waitForID(0);
      }
 catch (      InterruptedException e) {
        return null;
      }
      mediaTracker.removeImage(captchaImage);
      JAntiCaptcha jac=new JAntiCaptcha(JDUtilities.getJACMethodsDirectory(),host);
      Captcha captcha=jac.createCaptcha(captchaImage);
      String captchaCode=jac.checkCaptcha(captcha);
      if (jac.isExtern()) {
        if (captchaCode == null || captchaCode.trim().length() == 0) {
          plugin.setCaptchaDetectID(Plugin.CAPTCHA_USER_INPUT);
          acquireUserIOSemaphore();
          captchaCode=JDUtilities.getController().getCaptchaCodeFromUser(plugin,file,captchaCode);
          releaseUserIOSemaphore();
        }
        return captchaCode;
      }
      jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + captchaCode);
      jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + captcha.getValityPercent());
      jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + captcha.isPerfectObjectDetection());
      plugin.setLastCaptcha(captcha);
      String code=null;
      plugin.setCaptchaDetectID(Plugin.CAPTCHA_JAC);
      LetterComperator[] lcs=captcha.getLetterComperators();
      double vp=0.0;
      if (lcs == null) {
        vp=100.0;
      }
 else {
        for (        LetterComperator element : lcs) {
          if (element == null) {
            vp=100.0;
            break;
          }
          vp=Math.max(vp,element.getValityPercent());
        }
      }
      jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + vp);
      if (plugin.useUserinputIfCaptchaUnknown() && vp > (double)JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.AUTOTRAIN_ERROR_LEVEL,18)) {
        plugin.setCaptchaDetectID(Plugin.CAPTCHA_USER_INPUT);
        acquireUserIOSemaphore();
        code=JDUtilities.getController().getCaptchaCodeFromUser(plugin,file,captchaCode);
        releaseUserIOSemaphore();
      }
 else {
        return captchaCode;
      }
      if (code != null && code.equals(captchaCode)) {
        return captchaCode;
      }
      return code;
    }
 catch (    IOException e1) {
      JDLogger.exception(e1);
      return null;
    }
  }
 else {
    acquireUserIOSemaphore();
    plugin.setCaptchaDetectID(Plugin.CAPTCHA_USER_INPUT);
    String code=JDUtilities.getController().getCaptchaCodeFromUser(plugin,file,null);
    releaseUserIOSemaphore();
    return code;
  }
}","/** 
 * Diese Methode erstellt einen neuen Captchadialog und liefert den eingegebenen Text zurück.
 * @param controller Der Controller
 * @param plugin Das Plugin, das dieses Captcha fordert
 * @param host der Host von dem die Methode verwendet werden soll
 * @param file
 * @return Der vom Benutzer eingegebene Text
 * @throws InterruptedException
 */
public static String getCaptcha(Plugin plugin,String method,File file,boolean forceJAC) throws InterruptedException {
  String host;
  if (method == null) {
    host=plugin.getHost();
  }
 else {
    host=method.toLowerCase();
  }
  JDUtilities.getController().fireControlEvent(new ControlEvent(plugin,ControlEvent.CONTROL_CAPTCHA_LOADED,file));
  jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + host + ""String_Node_Str""+ JAntiCaptcha.hasMethod(JDUtilities.getJACMethodsDirectory(),host));
  if (forceJAC || JAntiCaptcha.hasMethod(JDUtilities.getJACMethodsDirectory(),host) && JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_JAC_METHODS + ""String_Node_Str"" + host,true) && !configuration.getBooleanProperty(Configuration.PARAM_CAPTCHA_JAC_DISABLE,false)) {
    if (!JAntiCaptcha.hasMethod(JDUtilities.getJACMethodsDirectory(),host) || !JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_JAC_METHODS + ""String_Node_Str"" + host,true)) {
      return null;
    }
    JFrame jf=SimpleGUI.CURRENTGUI;
    Image captchaImage;
    try {
      captchaImage=ImageIO.read(file);
      MediaTracker mediaTracker=new MediaTracker(jf);
      mediaTracker.addImage(captchaImage,0);
      try {
        mediaTracker.waitForID(0);
      }
 catch (      InterruptedException e) {
        return null;
      }
      mediaTracker.removeImage(captchaImage);
      JAntiCaptcha jac=new JAntiCaptcha(JDUtilities.getJACMethodsDirectory(),host);
      Captcha captcha=jac.createCaptcha(captchaImage);
      String captchaCode=jac.checkCaptcha(captcha);
      if (jac.isExtern()) {
        if (captchaCode == null || captchaCode.trim().length() == 0) {
          plugin.setCaptchaDetectID(Plugin.CAPTCHA_USER_INPUT);
          acquireUserIOSemaphore();
          captchaCode=JDUtilities.getController().getCaptchaCodeFromUser(plugin,file,captchaCode);
          releaseUserIOSemaphore();
        }
        return captchaCode;
      }
      jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + captchaCode);
      jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + captcha.getValityPercent());
      jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + captcha.isPerfectObjectDetection());
      plugin.setLastCaptcha(captcha);
      String code=null;
      plugin.setCaptchaDetectID(Plugin.CAPTCHA_JAC);
      LetterComperator[] lcs=captcha.getLetterComperators();
      double vp=0.0;
      if (lcs == null) {
        vp=100.0;
      }
 else {
        for (        LetterComperator element : lcs) {
          if (element == null) {
            vp=100.0;
            break;
          }
          vp=Math.max(vp,element.getValityPercent());
        }
      }
      jd.controlling.JDLogger.getLogger().info(""String_Node_Str"" + vp);
      if (plugin.useUserinputIfCaptchaUnknown() && vp > (double)JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.AUTOTRAIN_ERROR_LEVEL,18)) {
        plugin.setCaptchaDetectID(Plugin.CAPTCHA_USER_INPUT);
        acquireUserIOSemaphore();
        code=JDUtilities.getController().getCaptchaCodeFromUser(plugin,file,captchaCode);
        releaseUserIOSemaphore();
      }
 else {
        return captchaCode;
      }
      if (code != null && code.equals(captchaCode)) {
        return captchaCode;
      }
      return code;
    }
 catch (    IOException e1) {
      JDLogger.exception(e1);
      return null;
    }
  }
 else {
    acquireUserIOSemaphore();
    plugin.setCaptchaDetectID(Plugin.CAPTCHA_USER_INPUT);
    String code=JDUtilities.getController().getCaptchaCodeFromUser(plugin,file,null);
    releaseUserIOSemaphore();
    return code;
  }
}"
21144,"@Override protected void setupChunks() throws Exception {
  try {
    if (checkResumabled() && isResume()) {
      logger.finer(""String_Node_Str"");
      this.setupResume();
    }
 else {
      logger.finer(""String_Node_Str"");
      this.setupVirginStart();
    }
  }
 catch (  Exception e) {
    try {
      if (outputChannel != null)       outputChannel.force(false);
      logger.info(""String_Node_Str"");
      if (outputFile != null)       outputFile.close();
      if (outputChannel != null)       outputChannel.close();
    }
 catch (    Exception e2) {
      e2.printStackTrace();
    }
    addException(e);
    throw e;
  }
}","@Override protected void setupChunks() throws Exception {
  try {
    if (isResume() && checkResumabled()) {
      logger.finer(""String_Node_Str"");
      this.setupResume();
    }
 else {
      logger.finer(""String_Node_Str"");
      this.setupVirginStart();
    }
  }
 catch (  Exception e) {
    try {
      if (outputChannel != null)       outputChannel.force(false);
      logger.info(""String_Node_Str"");
      if (outputFile != null)       outputFile.close();
      if (outputChannel != null)       outputChannel.close();
    }
 catch (    Exception e2) {
      e2.printStackTrace();
    }
    addException(e);
    throw e;
  }
}"
21145,"public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  this.setBrowserExclusive();
  try {
    login(account);
  }
 catch (  PluginException e) {
    ai.setValid(false);
    return ai;
  }
  String trafficleft=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  String validuntil=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  ai.setTrafficLeft(trafficleft);
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  try {
    Date date=dateFormat.parse(validuntil);
    ai.setValidUntil(date.getTime());
  }
 catch (  ParseException e) {
    return null;
  }
  ai.setValid(true);
  return ai;
}","public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  this.setBrowserExclusive();
  try {
    login(account);
  }
 catch (  PluginException e) {
    ai.setValid(false);
    return ai;
  }
  String trafficleft=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  String validuntil=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  ai.setTrafficLeft(trafficleft);
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String[] splitted=validuntil.split(""String_Node_Str"");
  Date date=dateFormat.parse(splitted[2] + ""String_Node_Str"" + splitted[1]+ ""String_Node_Str""+ splitted[0]);
  ai.setValidUntil(date.getTime());
  ai.setValid(true);
  return ai;
}"
21146,"private void buildGui(){
  setLayout(new GridBagLayout());
  txtName=new JDTextField();
  txtName.setAutoSelect(true);
  txtName.addKeyListener(this);
  txtPassword=new JDTextField();
  txtComment=new JDTextField();
  chbExtract=new JCheckBox(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  chbExtract.setSelected(true);
  chbExtract.setHorizontalTextPosition(SwingConstants.LEFT);
  brwSaveTo=new ComboBrowseFile(""String_Node_Str"");
  brwSaveTo.setEditable(true);
  brwSaveTo.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
  brwSaveTo.setText(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
  txtName.setPreferredSize(new Dimension(450,20));
  txtComment.setPreferredSize(new Dimension(450,20));
  brwSaveTo.setPreferredSize(new Dimension(450,20));
  txtName.setMinimumSize(new Dimension(250,20));
  txtComment.setMinimumSize(new Dimension(250,20));
  brwSaveTo.setMinimumSize(new Dimension(250,20));
  PlainDocument doc=(PlainDocument)txtName.getDocument();
  doc.addDocumentListener(new DocumentListener(){
    public void changedUpdate(    DocumentEvent e){
      onPackageNameChanged(PackageTab.this);
    }
    public void insertUpdate(    DocumentEvent e){
      onPackageNameChanged(PackageTab.this);
    }
    public void removeUpdate(    DocumentEvent e){
      onPackageNameChanged(PackageTab.this);
    }
  }
);
  InternalTableModel internalTableModel=new InternalTableModel();
  table=new JTable(internalTableModel);
  table.setGridColor(Color.BLUE);
  table.setAutoCreateColumnsFromModel(true);
  table.setDragEnabled(true);
  table.setDefaultRenderer(String.class,new InternalTableCellRenderer());
  table.addKeyListener(this);
  table.addMouseListener(this);
  table.getTableHeader().setPreferredSize(new Dimension(-1,25));
  table.getTableHeader().setReorderingAllowed(false);
  table.getTableHeader().addMouseListener(this);
  setPreferredSize(new Dimension(700,350));
  TableColumn col=null;
  for (int c=0; c < internalTableModel.getColumnCount(); c++) {
    col=table.getColumnModel().getColumn(c);
switch (c) {
case 0:
      col.setMinWidth(20);
    col.setMaxWidth(30);
  col.setPreferredWidth(30);
break;
case 1:
col.setMinWidth(50);
col.setMaxWidth(200);
col.setPreferredWidth(150);
break;
case 2:
col.setMinWidth(50);
col.setPreferredWidth(150);
break;
case 3:
col.setMinWidth(50);
col.setMaxWidth(120);
col.setPreferredWidth(100);
break;
case 4:
col.setPreferredWidth(150);
break;
}
}
int n=10;
JPanel north=new JPanel(new BorderLayout(n,n));
JPanel east=new JPanel(new GridLayout(0,1,n / 2,n / 2));
JPanel center=new JPanel(new GridLayout(0,1,n / 2,n / 2));
JPanel extractPW=new JPanel(new GridBagLayout());
north.add(east,BorderLayout.WEST);
north.add(center,BorderLayout.CENTER);
JDUtilities.addToGridBag(extractPW,txtPassword,0,0,1,1,100,100,null,GridBagConstraints.BOTH,GridBagConstraints.WEST);
JDUtilities.addToGridBag(extractPW,chbExtract,1,0,1,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.EAST);
east.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
east.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
east.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
east.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
center.add(txtName);
center.add(brwSaveTo);
center.add(extractPW);
center.add(txtComment);
setLayout(new BorderLayout(n,n));
setBorder(new EmptyBorder(n,n,n,n));
add(north,BorderLayout.NORTH);
add(new JScrollPane(table),BorderLayout.CENTER);
buildMenu();
}","private void buildGui(){
  setLayout(new GridBagLayout());
  txtName=new JDTextField();
  txtName.setAutoSelect(true);
  txtPassword=new JDTextField();
  txtComment=new JDTextField();
  chbExtract=new JCheckBox(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  chbExtract.setSelected(true);
  chbExtract.setHorizontalTextPosition(SwingConstants.LEFT);
  brwSaveTo=new ComboBrowseFile(""String_Node_Str"");
  brwSaveTo.setEditable(true);
  brwSaveTo.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
  brwSaveTo.setText(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
  txtName.setPreferredSize(new Dimension(450,20));
  txtComment.setPreferredSize(new Dimension(450,20));
  brwSaveTo.setPreferredSize(new Dimension(450,20));
  txtName.setMinimumSize(new Dimension(250,20));
  txtComment.setMinimumSize(new Dimension(250,20));
  brwSaveTo.setMinimumSize(new Dimension(250,20));
  PlainDocument doc=(PlainDocument)txtName.getDocument();
  doc.addDocumentListener(new DocumentListener(){
    public void changedUpdate(    DocumentEvent e){
      onPackageNameChanged(PackageTab.this);
    }
    public void insertUpdate(    DocumentEvent e){
      onPackageNameChanged(PackageTab.this);
    }
    public void removeUpdate(    DocumentEvent e){
      onPackageNameChanged(PackageTab.this);
    }
  }
);
  InternalTableModel internalTableModel=new InternalTableModel();
  table=new JTable(internalTableModel);
  table.setGridColor(Color.BLUE);
  table.setAutoCreateColumnsFromModel(true);
  table.setDragEnabled(true);
  table.setDefaultRenderer(String.class,new InternalTableCellRenderer());
  table.addKeyListener(this);
  txtName.addKeyListener(this);
  table.addMouseListener(this);
  table.getTableHeader().setPreferredSize(new Dimension(-1,25));
  table.getTableHeader().setReorderingAllowed(false);
  table.getTableHeader().addMouseListener(this);
  setPreferredSize(new Dimension(700,350));
  TableColumn col=null;
  for (int c=0; c < internalTableModel.getColumnCount(); c++) {
    col=table.getColumnModel().getColumn(c);
switch (c) {
case 0:
      col.setMinWidth(20);
    col.setMaxWidth(30);
  col.setPreferredWidth(30);
break;
case 1:
col.setMinWidth(50);
col.setMaxWidth(200);
col.setPreferredWidth(150);
break;
case 2:
col.setMinWidth(50);
col.setPreferredWidth(150);
break;
case 3:
col.setMinWidth(50);
col.setMaxWidth(120);
col.setPreferredWidth(100);
break;
case 4:
col.setPreferredWidth(150);
break;
}
}
int n=10;
JPanel north=new JPanel(new BorderLayout(n,n));
JPanel east=new JPanel(new GridLayout(0,1,n / 2,n / 2));
JPanel center=new JPanel(new GridLayout(0,1,n / 2,n / 2));
JPanel extractPW=new JPanel(new GridBagLayout());
north.add(east,BorderLayout.WEST);
north.add(center,BorderLayout.CENTER);
JDUtilities.addToGridBag(extractPW,txtPassword,0,0,1,1,100,100,null,GridBagConstraints.BOTH,GridBagConstraints.WEST);
JDUtilities.addToGridBag(extractPW,chbExtract,1,0,1,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.EAST);
east.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
east.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
east.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
east.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
center.add(txtName);
center.add(brwSaveTo);
center.add(extractPW);
center.add(txtComment);
setLayout(new BorderLayout(n,n));
setBorder(new EmptyBorder(n,n,n,n));
add(north,BorderLayout.NORTH);
add(new JScrollPane(table),BorderLayout.CENTER);
buildMenu();
}"
21147,"public final boolean doReconnect(){
  retries++;
  ProgressController progress=new ProgressController(this.toString(),10);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + retries);
  int waittime=JDUtilities.getConfiguration().getIntegerProperty(PARAM_IPCHECKWAITTIME,0);
  int maxretries=JDUtilities.getConfiguration().getIntegerProperty(PARAM_RETRIES,0);
  int waitForIp=JDUtilities.getConfiguration().getIntegerProperty(PARAM_WAITFORIPCHANGE,10);
  logger.info(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ retries);
  String preIp=JDUtilities.getIPAddress(null);
  progress.increase(1);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + preIp);
  logger.finer(""String_Node_Str"" + preIp);
  if (!runCommands(progress)) {
    logger.info(""String_Node_Str"");
    return false;
  }
  logger.finer(""String_Node_Str"" + waittime + ""String_Node_Str"");
  try {
    Thread.sleep(waittime * 1000);
  }
 catch (  InterruptedException e) {
  }
  String afterIP=JDUtilities.getIPAddress(null);
  if (!JDUtilities.validateIP(afterIP)) {
    logger.warning(""String_Node_Str"" + afterIP + ""String_Node_Str""+ JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_GLOBAL_IP_MASK,""String_Node_Str"" + ""String_Node_Str""));
    JDUtilities.getGUI().displayMiniWarning(String.format(JDLocale.L(""String_Node_Str"",""String_Node_Str""),afterIP),null,20);
    afterIP=""String_Node_Str"";
  }
  logger.finer(""String_Node_Str"" + afterIP);
  progress.setStatusText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",afterIP,preIp));
  long endTime=System.currentTimeMillis() + waitForIp * 1000;
  logger.info(""String_Node_Str"" + waitForIp + ""String_Node_Str"");
  while (System.currentTimeMillis() <= endTime && (afterIP.equals(preIp) || afterIP.equals(""String_Node_Str""))) {
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException e) {
    }
    afterIP=JDUtilities.getIPAddress(null);
    progress.setStatusText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",afterIP,preIp));
    logger.finer(""String_Node_Str"" + afterIP);
  }
  logger.finer(""String_Node_Str"" + afterIP);
  if (afterIP.equals(""String_Node_Str"") && !afterIP.equals(preIp)) {
    logger.warning(""String_Node_Str"");
    endTime=System.currentTimeMillis() + 120 * 1000;
    while (System.currentTimeMillis() <= endTime && (afterIP.equals(preIp) || afterIP.equals(""String_Node_Str""))) {
      try {
        Thread.sleep(20 * 1000);
      }
 catch (      InterruptedException e) {
      }
      afterIP=JDUtilities.getIPAddress(null);
      progress.setStatusText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",preIp,afterIP));
      logger.finer(""String_Node_Str"" + afterIP);
    }
  }
  if (!afterIP.equals(preIp) && !afterIP.equals(""String_Node_Str"")) {
    progress.finalize();
    logger.info(""String_Node_Str"" + afterIP);
    return true;
  }
  if (maxretries == -1 || retries <= maxretries) {
    progress.finalize();
    return doReconnect();
  }
  progress.finalize();
  logger.info(""String_Node_Str"" + afterIP);
  return false;
}","public final boolean doReconnect(){
  retries++;
  ProgressController progress=new ProgressController(this.toString(),10);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + retries);
  int waittime=JDUtilities.getConfiguration().getIntegerProperty(PARAM_IPCHECKWAITTIME,0);
  int maxretries=JDUtilities.getConfiguration().getIntegerProperty(PARAM_RETRIES,0);
  int waitForIp=JDUtilities.getConfiguration().getIntegerProperty(PARAM_WAITFORIPCHANGE,10);
  logger.info(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ retries);
  String preIp=JDUtilities.getIPAddress(null);
  progress.increase(1);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + preIp);
  logger.finer(""String_Node_Str"" + preIp);
  if (!runCommands(progress)) {
    logger.info(""String_Node_Str"");
    return false;
  }
  logger.finer(""String_Node_Str"" + waittime + ""String_Node_Str"");
  try {
    Thread.sleep(waittime * 1000);
  }
 catch (  InterruptedException e) {
  }
  String afterIP=JDUtilities.getIPAddress(null);
  if (!JDUtilities.validateIP(afterIP)) {
    logger.warning(""String_Node_Str"" + afterIP + ""String_Node_Str""+ JDUtilities.getSubConfig(""String_Node_Str"").getStringProperty(Configuration.PARAM_GLOBAL_IP_MASK,""String_Node_Str"" + ""String_Node_Str""));
    JDUtilities.getGUI().displayMiniWarning(String.format(JDLocale.L(""String_Node_Str"",""String_Node_Str""),afterIP),null,20);
    afterIP=""String_Node_Str"";
  }
  logger.finer(""String_Node_Str"" + afterIP);
  progress.setStatusText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",afterIP,preIp));
  long endTime=System.currentTimeMillis() + waitForIp * 1000;
  logger.info(""String_Node_Str"" + waitForIp + ""String_Node_Str"");
  while (System.currentTimeMillis() <= endTime && (afterIP.equals(preIp) || afterIP.equals(""String_Node_Str""))) {
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException e) {
    }
    afterIP=JDUtilities.getIPAddress(null);
    progress.setStatusText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",afterIP,preIp));
    logger.finer(""String_Node_Str"" + afterIP);
  }
  logger.finer(""String_Node_Str"" + afterIP);
  if (afterIP.equals(""String_Node_Str"") && !afterIP.equals(preIp)) {
    logger.warning(""String_Node_Str"");
    endTime=System.currentTimeMillis() + 120 * 1000;
    while (System.currentTimeMillis() <= endTime && (afterIP.equals(preIp) || afterIP.equals(""String_Node_Str""))) {
      try {
        Thread.sleep(20 * 1000);
      }
 catch (      InterruptedException e) {
      }
      afterIP=JDUtilities.getIPAddress(null);
      progress.setStatusText(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",preIp,afterIP));
      logger.finer(""String_Node_Str"" + afterIP);
    }
  }
  if (!afterIP.equals(preIp) && !afterIP.equals(""String_Node_Str"")) {
    progress.finalize();
    logger.info(""String_Node_Str"" + afterIP);
    return true;
  }
  if (maxretries == -1 || retries <= maxretries) {
    progress.finalize();
    return doReconnect();
  }
  progress.finalize();
  logger.info(""String_Node_Str"" + afterIP);
  return false;
}"
21148,"/** 
 * ÃœberprÃ¼ft ob eine IP gÃ¼ltig ist. das verwendete Pattern aknn in der config editiert werden.
 * @param ip
 * @return
 */
public static boolean validateIP(String ip){
  return Pattern.compile(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_GLOBAL_IP_MASK,""String_Node_Str"" + ""String_Node_Str"")).matcher(ip).matches();
}","/** 
 * ÃœberprÃ¼ft ob eine IP gÃ¼ltig ist. das verwendete Pattern aknn in der config editiert werden.
 * @param ip
 * @return
 */
public static boolean validateIP(String ip){
  return Pattern.compile(JDUtilities.getSubConfig(""String_Node_Str"").getStringProperty(Configuration.PARAM_GLOBAL_IP_MASK,""String_Node_Str"" + ""String_Node_Str"")).matcher(ip).matches();
}"
21149,"public CountdownConfirmDialog(final Frame owner,final String title,final int countdown,final boolean defaultResult,final Dimension size,final int style,final String... msg){
  super(owner);
  this.titleText=title;
  if (title != null)   this.setTitle(title);
  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  setModal(true);
  if ((style & STYLE_NOTALWAYSONTOP) == 0)   setAlwaysOnTop(true);
  addWindowListener(new WindowListener(){
    public void windowActivated(    WindowEvent e){
    }
    public void windowClosed(    WindowEvent e){
      window_Closed=true;
      setVisible(false);
    }
    public void windowClosing(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowOpened(    WindowEvent e){
    }
  }
);
  setLayout(new GridBagLayout());
  countdownThread=new Thread(){
    @Override public void run(){
      while (!isVisible() && isDisplayable()) {
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      int c=countdown;
      while (--c >= 0) {
        if (countdownThread == null) {
          return;
        }
        if (titleText != null) {
          setTitle(JDUtilities.formatSeconds(c) + ""String_Node_Str"" + titleText);
        }
 else {
          setTitle(JDUtilities.formatSeconds(c) + ""String_Node_Str"");
        }
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        if (!isVisible()) {
          return;
        }
      }
      result=defaultResult;
      setVisible(false);
    }
  }
;
  if ((style & STYLE_NO_MSGLABLE) == 0) {
    if ((style & STYLE_MSGLABLE) != 0) {
      htmlArea=new JLabel(msg[0]);
    }
 else {
      htmlArea=new JTextPane();
      ((JTextPane)htmlArea).setEditable(false);
      ((JTextPane)htmlArea).setContentType(""String_Node_Str"");
      ((JTextPane)htmlArea).setText(msg[0]);
      ((JTextPane)htmlArea).requestFocusInWindow();
      ((JTextPane)htmlArea).addHyperlinkListener(this);
    }
  }
  if ((style & STYLE_INPUTFIELD) != 0) {
    if (msg != null) {
      if ((style & STYLE_NO_MSGLABLE) != 0) {
        inputField=new JTextField(msg[0]);
      }
 else       if (msg.length > 1) {
        inputField=new JTextField(msg[1]);
      }
    }
    if (inputField == null)     inputField=new JTextField();
    inputField.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
      }
      public void keyTyped(      KeyEvent e){
        if (countdownThread != null && countdownThread.isAlive()) {
          countdownThread.interrupt();
        }
        countdownThread=null;
      }
    }
);
  }
  int g=0;
  if ((style & STYLE_NO_MSGLABLE) == 0) {
    scrollPane=new JScrollPane(htmlArea);
    JDUtilities.addToGridBag(this,scrollPane,0,g++,3,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.NORTHWEST);
  }
  if ((style & STYLE_INPUTFIELD) != 0)   JDUtilities.addToGridBag(this,inputField,0,g++,3,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.NORTHWEST);
  if ((style & STYLE_DETAILLABLE) != 0) {
    final JButton btnDetails=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    final JPanel pan=new JPanel();
    btnDetails.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        JTextArea detailLable=new JTextArea();
        detailLable.setText(msg[1]);
        detailLable.setEditable(false);
        JScrollPane sp=new JScrollPane(detailLable,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        sp.setPreferredSize(new Dimension(getWidth() - 20,200));
        setSize(new Dimension(getWidth(),getHeight() + 200 - btnDetails.getHeight()));
        pan.remove(btnDetails);
        pan.invalidate();
        pan.repaint();
        pan.add(sp);
        sp.repaint();
        sp.validate();
        pan.validate();
        countdownThread=null;
      }
    }
);
    pan.add(btnDetails);
    JDUtilities.addToGridBag(this,pan,0,g++,3,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.NORTHWEST);
  }
  int d=0;
  if ((style & STYLE_STOP_COUNTDOWN) != 0) {
    btnCnTh=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    btnCnTh.addActionListener(this);
    JDUtilities.addToGridBag(this,btnCnTh,d++,2,1,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.WEST);
  }
  if ((style & STYLE_OK) != 0 || (style & STYLE_YES) != 0) {
    btnOK=new JButton((style & STYLE_YES) != 0 ? JDLocale.L(""String_Node_Str"",""String_Node_Str"") : JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    btnOK.addActionListener(this);
    getRootPane().setDefaultButton(btnOK);
    JDUtilities.addToGridBag(this,btnOK,d++,2,1,1,1,0,null,GridBagConstraints.NONE,GridBagConstraints.EAST);
  }
  if ((style & STYLE_CANCEL) != 0 || (style & STYLE_NO) != 0) {
    btnBAD=new JButton((style & STYLE_NO) != 0 ? JDLocale.L(""String_Node_Str"",""String_Node_Str"") : JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    btnBAD.addActionListener(this);
    JDUtilities.addToGridBag(this,btnBAD,d++,2,1,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.EAST);
  }
  pack();
  if (size != null) {
    int width=size.width;
    int hight=size.height;
    if (width < 0 || getWidth() > width)     width=getWidth();
    if (hight < 0 || getHeight() > hight)     hight=getHeight();
    setSize(width,hight);
  }
  setLocation(JDUtilities.getCenterOfComponent(null,this));
  countdownThread.start();
  setVisible(true);
}","public CountdownConfirmDialog(final Frame owner,final String title,final int countdown,final boolean defaultResult,final Dimension size,final int style,final String... msg){
  super(owner);
  this.titleText=title;
  if (title != null)   this.setTitle(title);
  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  setModal(true);
  if ((style & STYLE_NOTALWAYSONTOP) == 0)   setAlwaysOnTop(true);
  addWindowListener(new WindowListener(){
    public void windowActivated(    WindowEvent e){
    }
    public void windowClosed(    WindowEvent e){
      window_Closed=true;
      setVisible(false);
    }
    public void windowClosing(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowOpened(    WindowEvent e){
    }
  }
);
  setLayout(new GridBagLayout());
  countdownThread=new Thread(){
    @Override public void run(){
      while (!isVisible() && isDisplayable()) {
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      int c=countdown;
      while (--c >= 0) {
        if (countdownThread == null) {
          return;
        }
        if (titleText != null) {
          setTitle(JDUtilities.formatSeconds(c) + ""String_Node_Str"" + titleText);
        }
 else {
          setTitle(JDUtilities.formatSeconds(c) + ""String_Node_Str"");
        }
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        if (!isVisible()) {
          return;
        }
      }
      result=defaultResult;
      setVisible(false);
    }
  }
;
  if ((style & STYLE_NO_MSGLABLE) == 0) {
    if ((style & STYLE_MSGLABLE) != 0) {
      htmlArea=new JLabel(msg[0]);
    }
 else {
      htmlArea=new JTextPane();
      ((JTextPane)htmlArea).setEditable(false);
      ((JTextPane)htmlArea).setContentType(""String_Node_Str"");
      ((JTextPane)htmlArea).setText(msg[0]);
      ((JTextPane)htmlArea).requestFocusInWindow();
      ((JTextPane)htmlArea).addHyperlinkListener(this);
    }
  }
  if ((style & STYLE_INPUTFIELD) != 0) {
    if (msg != null) {
      if ((style & STYLE_NO_MSGLABLE) != 0) {
        inputField=new JTextField(msg[0]);
      }
 else       if (msg.length > 1) {
        inputField=new JTextField(msg[1]);
      }
    }
    if (inputField == null)     inputField=new JTextField();
    inputField.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
      }
      public void keyTyped(      KeyEvent e){
        if (countdownThread != null && countdownThread.isAlive()) {
          countdownThread.interrupt();
        }
        countdownThread=null;
      }
    }
);
    input=inputField.getText();
  }
  int g=0;
  if ((style & STYLE_NO_MSGLABLE) == 0) {
    scrollPane=new JScrollPane(htmlArea);
    JDUtilities.addToGridBag(this,scrollPane,0,g++,3,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.NORTHWEST);
  }
  if ((style & STYLE_INPUTFIELD) != 0)   JDUtilities.addToGridBag(this,inputField,0,g++,3,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.NORTHWEST);
  if ((style & STYLE_DETAILLABLE) != 0) {
    final JButton btnDetails=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    final JPanel pan=new JPanel();
    btnDetails.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        JTextArea detailLable=new JTextArea();
        detailLable.setText(msg[1]);
        detailLable.setEditable(false);
        JScrollPane sp=new JScrollPane(detailLable,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        sp.setPreferredSize(new Dimension(getWidth() - 20,200));
        setSize(new Dimension(getWidth(),getHeight() + 200 - btnDetails.getHeight()));
        pan.remove(btnDetails);
        pan.invalidate();
        pan.repaint();
        pan.add(sp);
        sp.repaint();
        sp.validate();
        pan.validate();
        countdownThread=null;
      }
    }
);
    pan.add(btnDetails);
    JDUtilities.addToGridBag(this,pan,0,g++,3,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.NORTHWEST);
  }
  int d=0;
  if ((style & STYLE_STOP_COUNTDOWN) != 0) {
    btnCnTh=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    btnCnTh.addActionListener(this);
    JDUtilities.addToGridBag(this,btnCnTh,d++,2,1,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.WEST);
  }
  if ((style & STYLE_OK) != 0 || (style & STYLE_YES) != 0) {
    btnOK=new JButton((style & STYLE_YES) != 0 ? JDLocale.L(""String_Node_Str"",""String_Node_Str"") : JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    btnOK.addActionListener(this);
    getRootPane().setDefaultButton(btnOK);
    JDUtilities.addToGridBag(this,btnOK,d++,2,1,1,1,0,null,GridBagConstraints.NONE,GridBagConstraints.EAST);
  }
  if ((style & STYLE_CANCEL) != 0 || (style & STYLE_NO) != 0) {
    btnBAD=new JButton((style & STYLE_NO) != 0 ? JDLocale.L(""String_Node_Str"",""String_Node_Str"") : JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    btnBAD.addActionListener(this);
    JDUtilities.addToGridBag(this,btnBAD,d++,2,1,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.EAST);
  }
  pack();
  if (size != null) {
    int width=size.width;
    int hight=size.height;
    if (width < 0 || getWidth() > width)     width=getWidth();
    if (hight < 0 || getHeight() > hight)     hight=getHeight();
    setSize(width,hight);
  }
  setLocation(JDUtilities.getCenterOfComponent(null,this));
  countdownThread.start();
  setVisible(true);
}"
21150,"public Account getAccount(){
  String pass=new String(txtPassword.getPassword());
  if (account == null)   return null;
  if (!account.getUser().equals(txtUsername.getText()) || !account.getPass().equals(pass)) {
    account.setUser(txtUsername.getText());
    account.setPass(pass);
    account.setProperty(""String_Node_Str"",null);
  }
  account.setEnabled(chkEnable.isSelected());
  return account;
}","public Account getAccount(){
  String pass=new String(txtPassword.getPassword());
  if (account == null)   return null;
  if (!account.getUser().equals(txtUsername.getText()) || !account.getPass().equals(pass)) {
    account.setUser(txtUsername.getText());
    account.setPass(pass);
    account.getProperties().clear();
  }
  account.setEnabled(chkEnable.isSelected());
  return account;
}"
21151,"private void tryClickNLoad(CryptedLink cryptedLink){
  if (this.isClickNLoadEnabled() && OPEN_CLICK_N_LOAD >= 0 && OPEN_CLICK_N_LOAD <= 25) {
    try {
      JDUtilities.acquireUserIO_Semaphore();
    }
 catch (    InterruptedException e1) {
      return;
    }
    if (OPEN_CLICK_N_LOAD < 0)     return;
    boolean open=JDUtilities.getGUI().showConfirmDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",this.getHost()));
    if (open) {
      try {
        JLinkButton.openURL(""String_Node_Str"" + Encoding.urlEncode(cryptedLink.getCryptedUrl().replace(""String_Node_Str"",""String_Node_Str"")));
        OPEN_CLICK_N_LOAD++;
      }
 catch (      Exception e) {
        open=false;
      }
    }
    if (!open) {
      OPEN_CLICK_N_LOAD=-1;
    }
    JDUtilities.releaseUserIO_Semaphore();
  }
}","private void tryClickNLoad(CryptedLink cryptedLink){
  if (this.isClickNLoadEnabled() && OPEN_CLICK_N_LOAD >= 0 && OPEN_CLICK_N_LOAD <= 25) {
    try {
      JDUtilities.acquireUserIO_Semaphore();
    }
 catch (    InterruptedException e1) {
      return;
    }
    if (OPEN_CLICK_N_LOAD < 0)     return;
    boolean open=JDUtilities.getGUI().showConfirmDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",this.getHost()));
    if (open) {
      try {
        JLinkButton.openURL(cryptedLink.getCryptedUrl());
        OPEN_CLICK_N_LOAD++;
      }
 catch (      Exception e) {
        open=false;
      }
    }
    if (!open) {
      OPEN_CLICK_N_LOAD=-1;
    }
    JDUtilities.releaseUserIO_Semaphore();
  }
}"
21152,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  br.getPage(param.getCryptedUrl());
  br.forceDebug(true);
  Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  while (form != null) {
    String url=form.getRegex(""String_Node_Str"").getMatch(0);
    File captchaFile=this.getLocalCaptchaFile(this);
    Browser.download(captchaFile,br.cloneBrowser().openGetConnection(url));
    String captchaCode=Plugin.getCaptchaCode(captchaFile,this,param);
    if (captchaCode == null)     return null;
    form.put(""String_Node_Str"",captchaCode);
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      br.getPage(param.getCryptedUrl());
      form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      break;
    }
  }
  String[] container=br.getRegex(""String_Node_Str"").getColumn(0);
  if (container != null && container.length > 0) {
    File file=null;
    for (    String c : container) {
      URLConnectionAdapter con=br.openGetConnection(""String_Node_Str"" + c);
      if (con.getResponseCode() == 200) {
        br.downloadConnection(file=JDUtilities.getResourceFile(""String_Node_Str"" + c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")),con);
        break;
      }
 else {
        con.disconnect();
      }
    }
    if (file != null && file.exists() && file.length() > 100) {
      JDUtilities.getController().loadContainerFile(file);
    }
 else {
      throw new DecrypterException(""String_Node_Str"");
    }
  }
 else {
    throw new DecrypterException(""String_Node_Str"");
  }
  return new ArrayList<DownloadLink>();
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  if (true)   throw new DecrypterException(""String_Node_Str"");
  br.getPage(param.getCryptedUrl());
  br.forceDebug(true);
  Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  while (form != null) {
    String url=form.getRegex(""String_Node_Str"").getMatch(0);
    File captchaFile=this.getLocalCaptchaFile(this);
    Browser.download(captchaFile,br.cloneBrowser().openGetConnection(url));
    String captchaCode=Plugin.getCaptchaCode(captchaFile,this,param);
    if (captchaCode == null)     return null;
    form.put(""String_Node_Str"",captchaCode);
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      br.getPage(param.getCryptedUrl());
      form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      break;
    }
  }
  String[] container=br.getRegex(""String_Node_Str"").getColumn(0);
  if (container != null && container.length > 0) {
    File file=null;
    for (    String c : container) {
      URLConnectionAdapter con=br.openGetConnection(""String_Node_Str"" + c);
      if (con.getResponseCode() == 200) {
        br.downloadConnection(file=JDUtilities.getResourceFile(""String_Node_Str"" + c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")),con);
        break;
      }
 else {
        con.disconnect();
      }
    }
    if (file != null && file.exists() && file.length() > 100) {
      JDUtilities.getController().loadContainerFile(file);
    }
 else {
      throw new DecrypterException(""String_Node_Str"");
    }
  }
 else {
    throw new DecrypterException(""String_Node_Str"");
  }
  return new ArrayList<DownloadLink>();
}"
21153,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> ar=decryptItMain(param);
  if (ar.size() > 1) {
    SJTable sjt=new SJTable(SimpleGUI.CURRENTGUI.getFrame(),ar);
    ar=sjt.dls;
  }
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  SerienjunkiesThread[] threads=new SerienjunkiesThread[ar.size()];
  this.progress=progress;
  for (int i=0; i < threads.length; i++) {
    DownloadLink downloadLink=ar.get(i);
    threads[i]=new SerienjunkiesThread(downloadLink,param);
    threads[i].start();
  }
  for (int i=0; i < threads.length; i++) {
    if (ar.get(i) != null) {
      while (threads[i].isAlive()) {
synchronized (threads[i]) {
          threads[i].wait();
        }
      }
      if (threads[i].result != null)       decryptedLinks.addAll(threads[i].result);
    }
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> ar=decryptItMain(param);
  if (ar.size() > 1) {
    SerienjunkiesSJTable sjt=new SerienjunkiesSJTable(SimpleGUI.CURRENTGUI.getFrame(),ar);
    ar=sjt.dls;
  }
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  SerienjunkiesThread[] threads=new SerienjunkiesThread[ar.size()];
  this.progress=progress;
  for (int i=0; i < threads.length; i++) {
    DownloadLink downloadLink=ar.get(i);
    threads[i]=new SerienjunkiesThread(downloadLink,param);
    threads[i].start();
  }
  for (int i=0; i < threads.length; i++) {
    if (ar.get(i) != null) {
      while (threads[i].isAlive()) {
synchronized (threads[i]) {
          threads[i].wait();
        }
      }
      if (threads[i].result != null)       decryptedLinks.addAll(threads[i].result);
    }
  }
  return decryptedLinks;
}"
21154,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  br.setDebug(true);
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  downloadLink.setUrlDownload(""String_Node_Str"" + Netloadin.getID(downloadLink.getDownloadURL()) + ""String_Node_Str"");
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.getPage(downloadLink.getDownloadURL());
  checkPassword(downloadLink);
  if (linkStatus.isFailed())   return;
  String url=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL | Pattern.CASE_INSENSITIVE)).getMatch(0);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(FILE_DAMAGED)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (!br.containsHTML(DOWNLOAD_START) || url == null) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    logger.severe(br.toString());
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.getPage(url);
  if (br.containsHTML(FILE_DAMAGED)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (!br.containsHTML(DOWNLOAD_CAPTCHA)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  String captchaURL=br.getRegex(""String_Node_Str"").getMatch(0);
  Form[] forms=br.getForms();
  Form captchaPost=forms[0];
  captchaPost.setAction(""String_Node_Str"");
  if (captchaURL == null) {
    if (br.containsHTML(""String_Node_Str"")) {
      linkStatus.addStatus(LinkStatus.ERROR_RETRY);
      return;
    }
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  File file=this.getLocalCaptchaFile(this);
  Browser c=br.cloneBrowser();
  Browser.download(file,c.openGetConnection(captchaURL));
  captchaPost.put(""String_Node_Str"",Plugin.getCaptchaCode(file,this,downloadLink));
  br.submitForm(captchaPost);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(FILE_DAMAGED)) {
    logger.warning(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (br.containsHTML(LIMIT_REACHED) || br.containsHTML(DOWNLOAD_LIMIT)) {
    String wait=new Regex(br.getRequest().getHtmlCode(),DOWNLOAD_WAIT_TIME).getMatch(0);
    long waitTime=0;
    if (wait != null) {
      waitTime=Long.parseLong(wait);
      waitTime=waitTime * 10L;
    }
    if (waitTime == 0) {
      logger.finest(""String_Node_Str"");
      sleep(30000l,downloadLink);
      linkStatus.addStatus(LinkStatus.ERROR_RETRY);
      return;
    }
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    linkStatus.setValue(waitTime);
    return;
  }
  if (br.containsHTML(CAPTCHA_WRONG)) {
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  String finalURL=br.getRegex(NEW_HOST_URL).getMatch(0);
  sleep(20000,downloadLink);
  dl=RAFDownload.download(downloadLink,br.createRequest(finalURL));
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  br.setDebug(true);
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  downloadLink.setUrlDownload(""String_Node_Str"" + Netloadin.getID(downloadLink.getDownloadURL()) + ""String_Node_Str"");
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.getPage(downloadLink.getDownloadURL());
  checkPassword(downloadLink);
  if (linkStatus.isFailed())   return;
  String url=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL | Pattern.CASE_INSENSITIVE)).getMatch(0);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(FILE_DAMAGED)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (!br.containsHTML(DOWNLOAD_START) || url == null) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    logger.severe(br.toString());
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.getPage(url);
  if (br.containsHTML(FILE_DAMAGED)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (!br.containsHTML(DOWNLOAD_CAPTCHA)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  String captchaURL=br.getRegex(""String_Node_Str"").getMatch(0);
  Form[] forms=br.getForms();
  Form captchaPost=forms[0];
  captchaPost.setAction(""String_Node_Str"");
  if (captchaURL == null) {
    if (br.containsHTML(""String_Node_Str"")) {
      linkStatus.addStatus(LinkStatus.ERROR_RETRY);
      return;
    }
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  File file=this.getLocalCaptchaFile(this);
  Browser c=br.cloneBrowser();
  Browser.download(file,c.openGetConnection(captchaURL));
  captchaPost.put(""String_Node_Str"",Plugin.getCaptchaCode(file,this,downloadLink));
  br.submitForm(captchaPost);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(FILE_DAMAGED)) {
    logger.warning(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (br.containsHTML(LIMIT_REACHED) || br.containsHTML(DOWNLOAD_LIMIT)) {
    String wait=new Regex(br.getRequest().getHtmlCode(),DOWNLOAD_WAIT_TIME).getMatch(0);
    long waitTime=0;
    if (wait != null) {
      waitTime=Long.parseLong(wait);
      waitTime=waitTime * 10L;
    }
    if (waitTime == 0) {
      logger.finest(""String_Node_Str"");
      sleep(30000l,downloadLink);
      linkStatus.addStatus(LinkStatus.ERROR_RETRY);
      return;
    }
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    linkStatus.setValue(waitTime);
    return;
  }
  if (br.containsHTML(CAPTCHA_WRONG)) {
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,60 * 2000l);
  }
  String finalURL=br.getRegex(NEW_HOST_URL).getMatch(0);
  sleep(20000,downloadLink);
  dl=RAFDownload.download(downloadLink,br.createRequest(finalURL));
  dl.startDownload();
}"
21155,"public void handle(DownloadLink downloadLink) throws Exception {
  try {
    while (waitForNextStartAllowed(downloadLink)) {
    }
  }
 catch (  InterruptedException e) {
    return;
  }
  putLastTimeStarted(System.currentTimeMillis());
  if (!isAGBChecked()) {
    logger.severe(""String_Node_Str"" + getPluginID());
    downloadLink.getLinkStatus().addStatus(LinkStatus.ERROR_AGB_NOT_SIGNED);
    downloadLink.getLinkStatus().setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  if (downloadLink.isDupeCheckallowed()) {
    if (DownloadInterface.preDownloadCheckFailed(downloadLink))     return;
  }
  Long t=0l;
  if (HOSTER_WAIT_UNTIL_TIMES.containsKey(this.getClass())) {
    t=HOSTER_WAIT_UNTIL_TIMES.get(this.getClass());
  }
  if (!enablePremium || !JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,true)) {
    if (t > 0) {
      this.resetHosterWaitTime();
      this.fireControlEvent(ControlEvent.CONTROL_SPECIFIED_DOWNLOADLINKS_CHANGED,JDUtilities.getController().getDownloadLinks(this));
    }
    try {
      handleFree(downloadLink);
      if (dl != null && dl.getConnection() != null) {
        try {
          dl.getConnection().disconnect();
        }
 catch (        Exception e) {
        }
      }
    }
 catch (    PluginException e) {
      e.fillLinkStatus(downloadLink.getLinkStatus());
    }
    return;
  }
  Account account=null;
  ArrayList<Account> disabled=new ArrayList<Account>();
  ArrayList<Account> accounts=getPremiumAccounts();
synchronized (accounts) {
    for (int i=0; i < accounts.size(); i++) {
      Account next=accounts.get(i);
      if (!next.isTempDisabled() && next.isEnabled() && next.getPass() != null && next.getPass().trim().length() > 0) {
        account=next;
        break;
      }
 else       if (next.isTempDisabled() && next.isEnabled()) {
        disabled.add(next);
      }
    }
  }
  if (account != null) {
    try {
      handlePremium(downloadLink,account);
      if (dl != null && dl.getConnection() != null) {
        try {
          dl.getConnection().disconnect();
        }
 catch (        Exception e) {
        }
      }
    }
 catch (    PluginException e) {
      e.fillLinkStatus(downloadLink.getLinkStatus());
    }
synchronized (accounts) {
      if (downloadLink.getLinkStatus().hasStatus(LinkStatus.ERROR_PREMIUM)) {
        if (downloadLink.getLinkStatus().getValue() == LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE) {
          logger.severe(""String_Node_Str"" + account.getUser() + ""String_Node_Str"");
          account.setTempDisabled(true);
          account.setStatus(downloadLink.getLinkStatus().getErrorMessage());
          getPluginConfig().save();
        }
 else         if (downloadLink.getLinkStatus().getValue() == LinkStatus.VALUE_ID_PREMIUM_DISABLE) {
          account.setEnabled(false);
          account.setStatus(downloadLink.getLinkStatus().getLongErrorMessage());
          getPluginConfig().save();
          logger.severe(""String_Node_Str"" + account.getUser() + ""String_Node_Str"");
        }
 else {
          account.setEnabled(false);
          account.setStatus(downloadLink.getLinkStatus().getLongErrorMessage());
          getPluginConfig().save();
          logger.severe(""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ downloadLink.getLinkStatus().getLongErrorMessage());
        }
      }
 else {
        account.setStatus(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        getPluginConfig().save();
      }
    }
  }
 else {
    if (t > 0) {
      this.resetHosterWaitTime();
      this.fireControlEvent(ControlEvent.CONTROL_SPECIFIED_DOWNLOADLINKS_CHANGED,JDUtilities.getController().getDownloadLinks(this));
    }
    try {
      handleFree(downloadLink);
      if (dl != null && dl.getConnection() != null) {
        try {
          dl.getConnection().disconnect();
        }
 catch (        Exception e) {
        }
      }
    }
 catch (    PluginException e) {
      e.fillLinkStatus(downloadLink.getLinkStatus());
    }
synchronized (accounts) {
      if (disabled.size() > 0) {
        int randId=(int)(Math.random() * disabled.size());
        disabled.get(randId).setTempDisabled(false);
        getPluginConfig().save();
      }
    }
  }
  return;
}","public void handle(DownloadLink downloadLink) throws Exception {
  try {
    while (waitForNextStartAllowed(downloadLink)) {
    }
  }
 catch (  InterruptedException e) {
    return;
  }
  putLastTimeStarted(System.currentTimeMillis());
  if (!isAGBChecked()) {
    logger.severe(""String_Node_Str"" + getPluginID());
    downloadLink.getLinkStatus().addStatus(LinkStatus.ERROR_AGB_NOT_SIGNED);
    downloadLink.getLinkStatus().setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  if (downloadLink.isDupeCheckallowed()) {
    if (DownloadInterface.preDownloadCheckFailed(downloadLink))     return;
  }
  Long t=0l;
  if (HOSTER_WAIT_UNTIL_TIMES.containsKey(this.getClass())) {
    t=HOSTER_WAIT_UNTIL_TIMES.get(this.getClass());
  }
  if (!enablePremium || !JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,true)) {
    if (t > 0) {
      this.resetHosterWaitTime();
      this.fireControlEvent(ControlEvent.CONTROL_SPECIFIED_DOWNLOADLINKS_CHANGED,JDUtilities.getController().getDownloadLinks(this));
    }
    try {
      handleFree(downloadLink);
      if (dl != null && dl.getConnection() != null) {
        try {
          dl.getConnection().disconnect();
        }
 catch (        Exception e) {
        }
      }
    }
 catch (    PluginException e) {
      e.fillLinkStatus(downloadLink.getLinkStatus());
    }
    return;
  }
  Account account=null;
  ArrayList<Account> disabled=new ArrayList<Account>();
  ArrayList<Account> accounts=getPremiumAccounts();
synchronized (accounts) {
    for (int i=0; i < accounts.size(); i++) {
      Account next=accounts.get(i);
      if (!next.isTempDisabled() && next.isEnabled() && next.getPass() != null && next.getPass().trim().length() > 0) {
        account=next;
        break;
      }
 else       if (next.isTempDisabled() && next.isEnabled()) {
        disabled.add(next);
      }
    }
  }
  if (account != null) {
    try {
      handlePremium(downloadLink,account);
      if (dl != null && dl.getConnection() != null) {
        try {
          dl.getConnection().disconnect();
        }
 catch (        Exception e) {
        }
      }
    }
 catch (    PluginException e) {
      e.fillLinkStatus(downloadLink.getLinkStatus());
    }
synchronized (accounts) {
      if (downloadLink.getLinkStatus().hasStatus(LinkStatus.ERROR_PREMIUM)) {
        if (downloadLink.getLinkStatus().getValue() == LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE) {
          logger.severe(""String_Node_Str"" + account.getUser() + ""String_Node_Str"");
          account.setTempDisabled(true);
          account.setStatus(downloadLink.getLinkStatus().getErrorMessage());
          getPluginConfig().save();
        }
 else         if (downloadLink.getLinkStatus().getValue() == LinkStatus.VALUE_ID_PREMIUM_DISABLE) {
          account.setEnabled(false);
          account.setStatus(downloadLink.getLinkStatus().getLongErrorMessage());
          getPluginConfig().save();
          logger.severe(""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ downloadLink.getLinkStatus().getLongErrorMessage());
        }
 else {
          account.setEnabled(false);
          account.setStatus(downloadLink.getLinkStatus().getLongErrorMessage());
          getPluginConfig().save();
          logger.severe(""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ downloadLink.getLinkStatus().getLongErrorMessage());
        }
      }
 else {
        account.setStatus(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        getPluginConfig().save();
      }
    }
  }
 else {
    if (t > 0) {
      this.resetHosterWaitTime();
      this.fireControlEvent(ControlEvent.CONTROL_SPECIFIED_DOWNLOADLINKS_CHANGED,JDUtilities.getController().getDownloadLinks(this));
    }
    try {
      handleFree(downloadLink);
      if (dl != null && dl.getConnection() != null) {
        try {
          dl.getConnection().disconnect();
        }
 catch (        Exception e) {
        }
      }
    }
 catch (    PluginException e) {
      e.fillLinkStatus(downloadLink.getLinkStatus());
    }
synchronized (accounts) {
      if (disabled.size() > 0) {
        int randId=(int)(Math.random() * disabled.size());
        disabled.get(randId).setTempDisabled(false);
        getPluginConfig().save();
      }
    }
  }
  return;
}"
21156,"public void handleFree1(DownloadLink link,Account account) throws Exception {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (account != null) {
    br.getPage(""String_Node_Str"");
    br.postPage(""String_Node_Str"",""String_Node_Str"" + Encoding.urlEncode(account.getUser()) + ""String_Node_Str""+ Encoding.urlEncode(account.getPass()));
  }
  br.getPage(""String_Node_Str"" + dlID);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  Form form=br.getForm(0);
  if (form.containsHTML(""String_Node_Str""))   form=br.getForm(1);
  if (form.containsHTML(""String_Node_Str"")) {
    String passCode;
    if (link.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,link);
    }
 else {
      passCode=link.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
    br.submitForm(form);
    form=br.getForm(0);
    if (form != null && form.containsHTML(""String_Node_Str""))     form=br.getForm(1);
    if (form != null && form.containsHTML(""String_Node_Str"")) {
      link.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_FATAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.setProperty(""String_Node_Str"",passCode);
    }
  }
  if (form != null && form.containsHTML(""String_Node_Str"")) {
    String captcha=form.getRegex(""String_Node_Str"").getMatch(0);
    File file=this.getLocalCaptchaFile(this);
    URLConnectionAdapter con=br.cloneBrowser().openGetConnection(captcha);
    Browser.download(file,con);
    String code=null;
    try {
      code=Plugin.getCaptchaCode(file,this,link);
    }
 catch (    PluginException ee) {
    }
    if (this.getPluginConfig().getIntegerProperty(CAPTCHA_MODE,0) != 1) {
      if (code == null || code.contains(""String_Node_Str"") || code.trim().length() != 4) {
        throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 1000l);
      }
    }
    if (code == null)     throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    form.put(""String_Node_Str"",code);
    br.submitForm(form);
    form=br.getForm(0);
    if (form != null && form.containsHTML(""String_Node_Str""))     form=br.getForm(1);
    if (form != null && form.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  doDownload(link,url,true,1);
}","public void handleFree1(DownloadLink link,Account account) throws Exception {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (account != null) {
    br.getPage(""String_Node_Str"");
    br.postPage(""String_Node_Str"",""String_Node_Str"" + Encoding.urlEncode(account.getUser()) + ""String_Node_Str""+ Encoding.urlEncode(account.getPass()));
  }
  br.getPage(""String_Node_Str"" + dlID);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  Form form=br.getForm(0);
  if (form.containsHTML(""String_Node_Str""))   form=br.getForm(1);
  if (form.containsHTML(""String_Node_Str"")) {
    String passCode;
    if (link.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,link);
    }
 else {
      passCode=link.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
    br.submitForm(form);
    form=br.getForm(0);
    if (form != null && form.containsHTML(""String_Node_Str""))     form=br.getForm(1);
    if (form != null && form.containsHTML(""String_Node_Str"")) {
      link.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_FATAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.setProperty(""String_Node_Str"",passCode);
    }
  }
  if (form != null && form.containsHTML(""String_Node_Str"")) {
    String captcha=form.getRegex(""String_Node_Str"").getMatch(0);
    File file=this.getLocalCaptchaFile(this);
    URLConnectionAdapter con=br.cloneBrowser().openGetConnection(captcha);
    Browser.download(file,con);
    String code=null;
    try {
      code=Plugin.getCaptchaCode(file,this,link);
    }
 catch (    PluginException ee) {
    }
    if (this.getPluginConfig().getIntegerProperty(CAPTCHA_MODE,0) != 1) {
      if (code == null || code.contains(""String_Node_Str"") || code.trim().length() != 4) {
        throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 1000l);
      }
    }
    if (code == null)     throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    form.put(""String_Node_Str"",code);
    br.submitForm(form);
    form=br.getForm(0);
    if (form != null && form.containsHTML(""String_Node_Str""))     form=br.getForm(1);
    if (form != null && form.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    if (CACHE != null) {
      CACHE.add(new String[]{JDHash.getMD5(file),code});
      HashMap<String,String> map=new HashMap<String,String>();
      if (CACHE.size() > 2) {
        for (        String[] h : CACHE) {
          map.put(h[0],h[1]);
        }
        Browser c=br.cloneBrowser();
        try {
          c.postPage(""String_Node_Str"",map);
        }
 catch (        Exception e) {
        }
        if (!c.getRequest().getHttpConnection().isOK())         CACHE=null;
        CACHE.clear();
      }
    }
  }
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  doDownload(link,url,true,1);
}"
21157,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  try {
    if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
      if (Sniffy.hasSniffer())       throw new SnifferException();
    }
    String freeOrPremiumSelectPostURL=null;
    Request request=null;
    String error=null;
    long startTime=System.currentTimeMillis();
    Rapidshare.correctURL(downloadLink);
    br=login(account,true);
    br.setFollowRedirects(false);
    br.setAcceptLanguage(ACCEPT_LANGUAGE);
    br.getPage(downloadLink.getDownloadURL());
    String directurl=br.getRedirectLocation();
    if (directurl == null) {
      logger.finest(""String_Node_Str"");
      if (account.getStringProperty(""String_Node_Str"",null) == null)       throw new PluginException(LinkStatus.ERROR_PREMIUM,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
      if ((error=findError(br.toString())) != null) {
        logger.warning(error);
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120 * 1000l);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.substring(11,error.indexOf(""String_Node_Str""))),3600 * 1000l);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
        }
      }
      freeOrPremiumSelectPostURL=new Regex(br,PATTERN_FIND_MIRROR_URL).getMatch(0);
      if (freeOrPremiumSelectPostURL == null) {
        if ((error=findError(br + ""String_Node_Str"")) != null) {
          throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
        }
        reportUnknownError(br,1);
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      Form[] forms=br.getForms();
      br.submitForm(forms[1]);
      String postTarget=getDownloadTarget(downloadLink,br.toString());
      if (postTarget == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      request=br.createGetRequest(postTarget);
    }
 else {
      logger.finest(""String_Node_Str"");
      request=br.createGetRequest(directurl);
    }
    dl=new RAFDownload(this,downloadLink,request);
    dl.setResume(true);
    dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
    URLConnectionAdapter urlConnection;
    try {
      urlConnection=dl.connect(br);
    }
 catch (    Exception e) {
      br.setRequest(request);
      request=br.createGetRequest(null);
      logger.info(""String_Node_Str"" + request.getUrl().toString().substring(0,35));
      dl=new RAFDownload(this,downloadLink,request);
      dl.setResume(true);
      dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
      urlConnection=dl.connect(br);
    }
    if (!urlConnection.isContentDisposition() && urlConnection.getHeaderField(""String_Node_Str"") != null) {
      br.setRequest(request);
      br.followConnection();
      if ((error=findError(br.toString())) != null) {
        logger.warning(error);
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120 * 1000l);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.substring(11,error.indexOf(""String_Node_Str""))),3600 * 1000l);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
        }
      }
 else {
        reportUnknownError(br.toString(),6);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
    }
    downloadLink.setProperty(""String_Node_Str"",(System.currentTimeMillis() - startTime));
    dl.startDownload();
    downloadLink.setProperty(""String_Node_Str"",(System.currentTimeMillis() - startTime));
    int dif=(int)((System.currentTimeMillis() - startTime) / 1000);
    if (dif > 0)     downloadLink.setProperty(""String_Node_Str"",(downloadLink.getDownloadSize() / dif) / 1024);
    if (downloadLink.getStringProperty(""String_Node_Str"") != null) {
      new File(downloadLink.getFileOutput()).delete();
      downloadLink.getLinkStatus().setStatusText(""String_Node_Str"" + downloadLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str""+ downloadLink.getProperty(""String_Node_Str"")+ ""String_Node_Str"");
      ArrayList<DownloadLink> ret=new ArrayList<DownloadLink>();
      String msg=""String_Node_Str"";
      for (      DownloadLink dLink : downloadLink.getFilePackage().getDownloadLinks()) {
        if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          ret.add(dLink);
          msg+=""String_Node_Str"" + dLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str""+ dLink.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
        }
 else         if (dLink.getLinkStatus().isFailed()) {
          ret.add(dLink);
          msg+=""String_Node_Str"" + dLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str"";
        }
 else {
          return;
        }
      }
      final String passToThread=msg;
      new Thread(){
        public void run(){
          TextAreaDialog.showDialog(SimpleGUI.CURRENTGUI.getFrame(),""String_Node_Str"",""String_Node_Str"",passToThread);
        }
      }
.start();
    }
  }
  finally {
    if (!downloadLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
      selectedServer=null;
    }
  }
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  try {
    if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
      if (Sniffy.hasSniffer())       throw new SnifferException();
    }
    String freeOrPremiumSelectPostURL=null;
    Request request=null;
    String error=null;
    long startTime=System.currentTimeMillis();
    Rapidshare.correctURL(downloadLink);
    br=login(account,true);
    br.setFollowRedirects(false);
    br.setAcceptLanguage(ACCEPT_LANGUAGE);
    br.getPage(downloadLink.getDownloadURL());
    String directurl=br.getRedirectLocation();
    if (directurl == null) {
      logger.finest(""String_Node_Str"");
      if (account.getStringProperty(""String_Node_Str"",null) == null) {
        logger.info(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PREMIUM,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
      }
      if ((error=findError(br.toString())) != null) {
        logger.warning(error);
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120 * 1000l);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          logger.finest(""String_Node_Str"" + br);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          logger.finest(""String_Node_Str"" + br);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          logger.finest(""String_Node_Str"" + br);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          logger.finest(""String_Node_Str"" + br);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          logger.finest(""String_Node_Str"" + br);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.substring(11,error.indexOf(""String_Node_Str""))),3600 * 1000l);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          account.setProperty(""String_Node_Str"",null);
          logger.finest(""String_Node_Str"" + br);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
        }
      }
      freeOrPremiumSelectPostURL=new Regex(br,PATTERN_FIND_MIRROR_URL).getMatch(0);
      if (freeOrPremiumSelectPostURL == null) {
        if ((error=findError(br + ""String_Node_Str"")) != null) {
          throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
        }
        reportUnknownError(br,1);
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      Form[] forms=br.getForms();
      br.submitForm(forms[1]);
      String postTarget=getDownloadTarget(downloadLink,br.toString());
      if (postTarget == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      request=br.createGetRequest(postTarget);
    }
 else {
      logger.finest(""String_Node_Str"");
      request=br.createGetRequest(directurl);
    }
    dl=new RAFDownload(this,downloadLink,request);
    dl.setResume(true);
    dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
    URLConnectionAdapter urlConnection;
    try {
      urlConnection=dl.connect(br);
    }
 catch (    Exception e) {
      br.setRequest(request);
      request=br.createGetRequest(null);
      logger.info(""String_Node_Str"" + request.getUrl().toString().substring(0,35));
      dl=new RAFDownload(this,downloadLink,request);
      dl.setResume(true);
      dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
      urlConnection=dl.connect(br);
    }
    if (!urlConnection.isContentDisposition() && urlConnection.getHeaderField(""String_Node_Str"") != null) {
      br.setRequest(request);
      br.followConnection();
      if ((error=findError(br.toString())) != null) {
        logger.warning(error);
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120 * 1000l);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
        if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_PREMIUM,dynTranslate(error),LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.substring(11,error.indexOf(""String_Node_Str""))),3600 * 1000l);
        }
 else         if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),LinkStatus.VALUE_ID_PREMIUM_DISABLE);
        }
 else {
          account.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
        }
      }
 else {
        reportUnknownError(br.toString(),6);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
    }
    downloadLink.setProperty(""String_Node_Str"",(System.currentTimeMillis() - startTime));
    dl.startDownload();
    downloadLink.setProperty(""String_Node_Str"",(System.currentTimeMillis() - startTime));
    int dif=(int)((System.currentTimeMillis() - startTime) / 1000);
    if (dif > 0)     downloadLink.setProperty(""String_Node_Str"",(downloadLink.getDownloadSize() / dif) / 1024);
    if (downloadLink.getStringProperty(""String_Node_Str"") != null) {
      new File(downloadLink.getFileOutput()).delete();
      downloadLink.getLinkStatus().setStatusText(""String_Node_Str"" + downloadLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str""+ downloadLink.getProperty(""String_Node_Str"")+ ""String_Node_Str"");
      ArrayList<DownloadLink> ret=new ArrayList<DownloadLink>();
      String msg=""String_Node_Str"";
      for (      DownloadLink dLink : downloadLink.getFilePackage().getDownloadLinks()) {
        if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          ret.add(dLink);
          msg+=""String_Node_Str"" + dLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str""+ dLink.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
        }
 else         if (dLink.getLinkStatus().isFailed()) {
          ret.add(dLink);
          msg+=""String_Node_Str"" + dLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str"";
        }
 else {
          return;
        }
      }
      final String passToThread=msg;
      new Thread(){
        public void run(){
          TextAreaDialog.showDialog(SimpleGUI.CURRENTGUI.getFrame(),""String_Node_Str"",""String_Node_Str"",passToThread);
        }
      }
.start();
    }
  }
  finally {
    if (!downloadLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
      selectedServer=null;
    }
  }
}"
21158,"@Override public AccountInfo getAccountInformation(Account account) throws Exception {
  if (account.getProperty(""String_Node_Str"") != null) {
    AccountInfo ai=(AccountInfo)account.getProperty(""String_Node_Str"");
    if ((System.currentTimeMillis() - ai.getCreateTime()) < 5 * 60 * 1000) {
      return ai;
    }
  }
  AccountInfo ai=new AccountInfo(this,account);
  String api=""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ account.getPass()+ ""String_Node_Str"";
  br.getPage(api);
  String error=br.getRegex(""String_Node_Str"").getMatch(0);
  if (error != null) {
    ai.setStatus(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.trim()));
    ai.setValid(false);
    return ai;
  }
  String[][] matches=br.getRegex(""String_Node_Str"").getMatches();
  HashMap<String,String> data=getMap(matches);
  ai.setTrafficLeft((Long.parseLong(data.get(""String_Node_Str"")) / 1000) * 1024l * 1024l);
  ai.setTrafficMax(12 * 1024 * 1024* 1024l);
  ai.setFilesNum(Integer.parseInt(data.get(""String_Node_Str"")));
  ai.setPremiumPoints(Integer.parseInt(data.get(""String_Node_Str"")));
  ai.setNewPremiumPoints(Integer.parseInt(data.get(""String_Node_Str"")));
  ai.setUsedSpace(Integer.parseInt(data.get(""String_Node_Str"")));
  ai.setTrafficShareLeft((Integer.parseInt(data.get(""String_Node_Str"")) / 1000) * 1024l * 1024l);
  ai.setValidUntil(Long.parseLong(data.get(""String_Node_Str"")) * 1000);
  if (ai.getValidUntil() < System.currentTimeMillis()) {
    ai.setExpired(true);
  }
  account.setProperty(""String_Node_Str"",ai);
  return ai;
}","@Override public AccountInfo getAccountInformation(Account account) throws Exception {
  if (account.getProperty(""String_Node_Str"") != null) {
    AccountInfo ai=(AccountInfo)account.getProperty(""String_Node_Str"");
    if ((System.currentTimeMillis() - ai.getCreateTime()) < 5 * 60 * 1000) {
      return ai;
    }
  }
  AccountInfo ai=new AccountInfo(this,account);
  String api=""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ account.getPass()+ ""String_Node_Str"";
  br.getPage(api);
  String error=br.getRegex(""String_Node_Str"").getMatch(0);
  if (error != null) {
    ai.setStatus(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.trim()));
    ai.setValid(false);
    return ai;
  }
  String[][] matches=br.getRegex(""String_Node_Str"").getMatches();
  HashMap<String,String> data=getMap(matches);
  ai.setTrafficLeft((Long.parseLong(data.get(""String_Node_Str"")) / 1000) * 1024l * 1024l);
  ai.setTrafficMax(12 * 1024 * 1024* 1024l);
  ai.setFilesNum(Integer.parseInt(data.get(""String_Node_Str"")));
  ai.setPremiumPoints(Integer.parseInt(data.get(""String_Node_Str"")));
  ai.setNewPremiumPoints(Integer.parseInt(data.get(""String_Node_Str"")));
  ai.setUsedSpace(Long.parseLong(data.get(""String_Node_Str"")));
  ai.setTrafficShareLeft((Integer.parseInt(data.get(""String_Node_Str"")) / 1000) * 1024l * 1024l);
  ai.setValidUntil(Long.parseLong(data.get(""String_Node_Str"")) * 1000);
  if (ai.getValidUntil() < System.currentTimeMillis()) {
    ai.setExpired(true);
  }
  account.setProperty(""String_Node_Str"",ai);
  return ai;
}"
21159,"public JDUpdater() throws Exception {
  String wd=new File(""String_Node_Str"").getAbsolutePath();
  JFileChooser fc=new JFileChooser();
  System.out.print(""String_Node_Str"");
  fc.setApproveButtonText(""String_Node_Str"");
  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  fc.setSelectedFile((File)CONFIG.getProperty(""String_Node_Str"",new File(new File(wd).getParentFile(),""String_Node_Str"")));
  if (fc.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
    logger.severe(""String_Node_Str"");
    return;
  }
  SKIP_UPLOAD=(JOptionPane.showConfirmDialog(null,""String_Node_Str"") == JOptionPane.OK_OPTION);
  workingdir=fc.getSelectedFile();
  if (workingdir == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
  CONFIG.setProperty(""String_Node_Str"",workingdir);
  System.out.print(""String_Node_Str"" + workingdir.getAbsolutePath() + ""String_Node_Str"");
  if (!new File(""String_Node_Str"").getAbsolutePath().equals(workingdir.getAbsolutePath())) {
    System.out.print(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + workingdir + ""String_Node_Str""+ new File(""String_Node_Str"").getAbsolutePath());
    return;
  }
  fc=new JFileChooser();
  System.out.print(""String_Node_Str"");
  fc.setApproveButtonText(""String_Node_Str"");
  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  fc.setSelectedFile((File)CONFIG.getProperty(""String_Node_Str"",new File(new File(wd).getParentFile(),""String_Node_Str"")));
  if (fc.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
    logger.severe(""String_Node_Str"");
    return;
  }
  dir=fc.getSelectedFile();
  if (dir == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
  CONFIG.setProperty(""String_Node_Str"",dir);
  CONFIG.save();
  System.out.print(""String_Node_Str"" + dir.getAbsolutePath() + ""String_Node_Str"");
  webRoot=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + webRoot);
  System.out.println(""String_Node_Str"");
  WebUpdater updater=new WebUpdater();
  updater.useUpdatePrefixFromServer(false);
  updater.setOSFilter(false);
  WebUpdater.setJDDirectory(workingdir);
  updater.ignorePlugins(false);
  Vector<Vector<String>> files=null;
  try {
    files=updater.getAvailableFiles();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  ArrayList<File> localfiles=getLocalFileList(workingdir);
  HashMap<String,String> webupdaterfiles=new HashMap<String,String>();
  if (files == null)   files=new Vector<Vector<String>>();
  for (int i=0; i < files.size(); i++) {
    String path=files.get(i).get(0).split(""String_Node_Str"")[0];
    File f=new File(this.workingdir,path);
    webupdaterfiles.put(f.getAbsolutePath(),files.get(i).get(1));
  }
  System.out.println(""String_Node_Str"");
  ArrayList<String> hashlist=new ArrayList<String>();
  for (  File f : localfiles) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      hashlist.add(JDHash.getMD5(f));
    }
    if (!webupdaterfiles.containsKey(f.getAbsolutePath())) {
      if (!f.isDirectory()) {
        int answer=JOptionPane.showConfirmDialog(null,""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
        if (answer == JOptionPane.CANCEL_OPTION)         break;
        if (answer == JOptionPane.OK_OPTION) {
          if (!f.delete()) {
            logger.severe(""String_Node_Str"" + f + ""String_Node_Str"");
            return;
          }
        }
      }
    }
  }
  System.out.println(hashlist);
  System.out.println(""String_Node_Str"");
  if (files != null) {
    updater.filterAvailableUpdates(files);
    updater.updateFiles(files);
  }
  System.out.println(""String_Node_Str"");
  while (true) {
    fc=new JFileChooser();
    System.out.println(""String_Node_Str"");
    fc.setApproveButtonText(""String_Node_Str"");
    fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    fc.setSelectedFile(this.workingdir);
    if (fc.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
      break;
    }
    File[] filesToRemove=fc.getSelectedFiles();
    if (filesToRemove == null) {
      break;
    }
    for (    File f : filesToRemove) {
      if (JOptionPane.showConfirmDialog(null,""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"") == JOptionPane.OK_OPTION) {
        if (!JDUtilities.removeDirectoryOrFile(f)) {
          logger.severe(""String_Node_Str"" + f + ""String_Node_Str"");
        }
 else {
          System.out.println(""String_Node_Str"" + f);
        }
        return;
      }
    }
  }
  if (!update()) {
    logger.severe(""String_Node_Str"");
    return;
  }
  filelist=new ArrayList<File>();
  scanDir(new File(wd));
  logger.info(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  for (  File file : filelist) {
    String sub=file.toString().substring(new File(wd).toString().length() + 1).replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (sub.startsWith(""String_Node_Str""))     continue;
    sb.append(""String_Node_Str"" + sub + ""String_Node_Str""+ webRoot+ sub+ ""String_Node_Str""+ JDHash.getMD5(file)+ ""String_Node_Str"");
  }
  logger.info(sb + ""String_Node_Str"");
  upload(sb + ""String_Node_Str"");
}","public JDUpdater() throws Exception {
  String wd=new File(""String_Node_Str"").getAbsolutePath();
  JFileChooser fc=new JFileChooser();
  System.out.print(""String_Node_Str"");
  fc.setApproveButtonText(""String_Node_Str"");
  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  fc.setSelectedFile((File)CONFIG.getProperty(""String_Node_Str"",new File(new File(wd).getParentFile(),""String_Node_Str"")));
  Thread.sleep(3000);
  if (fc.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
    logger.severe(""String_Node_Str"");
    return;
  }
  Thread.sleep(3000);
  SKIP_UPLOAD=(JOptionPane.showConfirmDialog(null,""String_Node_Str"") == JOptionPane.OK_OPTION);
  workingdir=fc.getSelectedFile();
  if (workingdir == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
  CONFIG.setProperty(""String_Node_Str"",workingdir);
  System.out.print(""String_Node_Str"" + workingdir.getAbsolutePath() + ""String_Node_Str"");
  if (!new File(""String_Node_Str"").getAbsolutePath().equals(workingdir.getAbsolutePath())) {
    System.out.print(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + workingdir + ""String_Node_Str""+ new File(""String_Node_Str"").getAbsolutePath());
    return;
  }
  fc=new JFileChooser();
  System.out.print(""String_Node_Str"");
  fc.setApproveButtonText(""String_Node_Str"");
  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  fc.setSelectedFile((File)CONFIG.getProperty(""String_Node_Str"",new File(new File(wd).getParentFile(),""String_Node_Str"")));
  Thread.sleep(3000);
  if (fc.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
    logger.severe(""String_Node_Str"");
    return;
  }
  dir=fc.getSelectedFile();
  if (dir == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
  CONFIG.setProperty(""String_Node_Str"",dir);
  CONFIG.save();
  System.out.print(""String_Node_Str"" + dir.getAbsolutePath() + ""String_Node_Str"");
  webRoot=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + webRoot);
  System.out.println(""String_Node_Str"");
  WebUpdater updater=new WebUpdater();
  updater.useUpdatePrefixFromServer(false);
  updater.setOSFilter(false);
  WebUpdater.setJDDirectory(workingdir);
  updater.ignorePlugins(false);
  Vector<Vector<String>> files=null;
  try {
    files=updater.getAvailableFiles();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  ArrayList<File> localfiles=getLocalFileList(workingdir);
  HashMap<String,String> webupdaterfiles=new HashMap<String,String>();
  if (files == null)   files=new Vector<Vector<String>>();
  for (int i=0; i < files.size(); i++) {
    String path=files.get(i).get(0).split(""String_Node_Str"")[0];
    File f=new File(this.workingdir,path);
    webupdaterfiles.put(f.getAbsolutePath(),files.get(i).get(1));
  }
  System.out.println(""String_Node_Str"");
  ArrayList<String> hashlist=new ArrayList<String>();
  for (  File f : localfiles) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      hashlist.add(JDHash.getMD5(f));
    }
    if (!webupdaterfiles.containsKey(f.getAbsolutePath())) {
      if (!f.isDirectory()) {
        Thread.sleep(3000);
        int answer=JOptionPane.showConfirmDialog(null,""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
        if (answer == JOptionPane.CANCEL_OPTION)         break;
        if (answer == JOptionPane.OK_OPTION) {
          if (!f.delete()) {
            logger.severe(""String_Node_Str"" + f + ""String_Node_Str"");
            return;
          }
        }
      }
    }
  }
  System.out.println(hashlist);
  System.out.println(""String_Node_Str"");
  if (files != null) {
    updater.filterAvailableUpdates(files);
    updater.updateFiles(files);
  }
  System.out.println(""String_Node_Str"");
  while (true) {
    fc=new JFileChooser();
    System.out.println(""String_Node_Str"");
    fc.setApproveButtonText(""String_Node_Str"");
    fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    fc.setSelectedFile(this.workingdir);
    Thread.sleep(3000);
    if (fc.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
      break;
    }
    File[] filesToRemove=fc.getSelectedFiles();
    if (filesToRemove == null) {
      break;
    }
    for (    File f : filesToRemove) {
      Thread.sleep(3000);
      if (JOptionPane.showConfirmDialog(null,""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"") == JOptionPane.OK_OPTION) {
        if (!JDUtilities.removeDirectoryOrFile(f)) {
          logger.severe(""String_Node_Str"" + f + ""String_Node_Str"");
        }
 else {
          System.out.println(""String_Node_Str"" + f);
        }
        return;
      }
    }
  }
  if (!update()) {
    logger.severe(""String_Node_Str"");
    return;
  }
  filelist=new ArrayList<File>();
  scanDir(new File(wd));
  logger.info(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  for (  File file : filelist) {
    String sub=file.toString().substring(new File(wd).toString().length() + 1).replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (sub.startsWith(""String_Node_Str""))     continue;
    sb.append(""String_Node_Str"" + sub + ""String_Node_Str""+ webRoot+ sub+ ""String_Node_Str""+ JDHash.getMD5(file)+ ""String_Node_Str"");
  }
  logger.info(sb + ""String_Node_Str"");
  upload(sb + ""String_Node_Str"");
}"
21160,"private boolean update(){
  if (SKIP_UPLOAD)   return true;
  ftp=new SimpleFTP();
  try {
    ftp.connect(""String_Node_Str"",1200,""String_Node_Str"",JOptionPane.showInputDialog(""String_Node_Str""));
    ftp.bin();
    ftp.cwd(""String_Node_Str"");
    return secureUploadFolder(dir,null,webRoot);
  }
 catch (  HeadlessException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return false;
}","private boolean update(){
  if (SKIP_UPLOAD)   return true;
  ftp=new SimpleFTP();
  try {
    Thread.sleep(3000);
    ftp.connect(""String_Node_Str"",1200,""String_Node_Str"",JOptionPane.showInputDialog(""String_Node_Str""));
    ftp.bin();
    ftp.cwd(""String_Node_Str"");
    return secureUploadFolder(dir,null,webRoot);
  }
 catch (  HeadlessException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return false;
}"
21161,"public void createPanel(JPanel panel,int nr){
  if (premiumActivated) {
    chkEnable=new JCheckBox(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",nr));
    chkEnable.setForeground(INACTIVE);
  }
 else {
    chkEnable=new JCheckBox(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",nr));
    chkEnable.setForeground(DISABLED);
  }
  panel.add(chkEnable,""String_Node_Str"");
  chkEnable.addChangeListener(this);
  panel.add(btnCheck=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
  btnCheck.addActionListener(this);
  panel.add(btnDelete=new JButton(JDUtilities.getScaledImageIcon(JDTheme.V(""String_Node_Str""),-1,14)));
  btnDelete.addActionListener(this);
  panel.add(new JSeparator(),""String_Node_Str"");
  panel.add(txtStatus=new JTextField(""String_Node_Str""),""String_Node_Str"");
  txtStatus.setEditable(false);
  panel.add(lblUsername=new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
  panel.add(txtUsername=new JTextField(""String_Node_Str""));
  txtUsername.addFocusListener(this);
  panel.add(lblPassword=new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
  panel.add(txtPassword=new JDPasswordField(),""String_Node_Str"");
  txtPassword.addFocusListener(this);
  chkEnable.setSelected(false);
}","public void createPanel(JPanel panel,int nr){
  if (premiumActivated) {
    chkEnable=new JCheckBox(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",nr));
    chkEnable.setForeground(INACTIVE);
  }
 else {
    chkEnable=new JCheckBox(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",nr));
    chkEnable.setForeground(DISABLED);
  }
  panel.add(chkEnable,""String_Node_Str"");
  chkEnable.addChangeListener(this);
  panel.add(btnCheck=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
  btnCheck.addActionListener(this);
  panel.add(btnDelete=new JButton(JDUtilities.getScaledImageIcon(JDTheme.V(""String_Node_Str""),-1,14)));
  btnDelete.addActionListener(this);
  panel.add(new JSeparator(),""String_Node_Str"");
  panel.add(txtStatus=new JTextField(""String_Node_Str""),""String_Node_Str"");
  txtStatus.setEditable(false);
  panel.add(lblUsername=new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
  panel.add(txtUsername=new JTextField(""String_Node_Str""));
  txtUsername.addFocusListener(this);
  panel.add(lblPassword=new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
  panel.add(txtPassword=new JDPasswordField(),""String_Node_Str"");
  txtPassword.addFocusListener(this);
  this.account=new Account(txtUsername.getText(),new String(txtPassword.getPassword()));
  chkEnable.setSelected(false);
  account.setEnabled(chkEnable.isSelected());
}"
21162,"/** 
 * List ist immer eine ArrayList<Account> mit Daten aus der config
 * @param list
 */
@SuppressWarnings(""String_Node_Str"") public void setAccounts(Object list){
  ArrayList<Account> accounts=(ArrayList<Account>)list;
  for (int i=0; i < accountNum; i++) {
    if (i >= accounts.size())     break;
    accs[i].setAccount(accounts.get(i));
  }
  createDataset();
}","/** 
 * List ist immer eine ArrayList<Account> mit Daten aus der config
 * @param list
 */
@SuppressWarnings(""String_Node_Str"") public void setAccounts(Object list){
  ArrayList<Account> accounts=(ArrayList<Account>)list;
  for (int i=0; i < accountNum; i++) {
    if (i >= accounts.size())     break;
    if (accounts.get(i) != null)     accs[i].setAccount(accounts.get(i));
  }
  createDataset();
}"
21163,"@Override public ArrayList<MenuItem> createMenuitems(){
  ArrayList<MenuItem> menuList=new ArrayList<MenuItem>();
  if (!this.enablePremium)   return null;
  MenuItem account;
  MenuItem m=new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1);
  m.setActionListener(this);
  MenuItem premium=new MenuItem(MenuItem.CONTAINER,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0);
  menuList.add(m);
  ArrayList<Account> accounts=getPremiumAccounts();
  int i=1;
  int c=0;
  for (  Account a : accounts) {
    try {
      c++;
      if (getAccountwithoutUsername()) {
        if (a.getPass() == null || a.getPass().trim().length() == 0)         continue;
        account=new MenuItem(MenuItem.CONTAINER,i++ + ""String_Node_Str"" + ""String_Node_Str""+ (i - 1),0);
      }
 else {
        if (a.getUser() == null || a.getUser().trim().length() == 0)         continue;
        account=new MenuItem(MenuItem.CONTAINER,i++ + ""String_Node_Str"" + a.getUser(),0);
        m=new MenuItem(MenuItem.TOGGLE,JDLocale.L(""String_Node_Str"",""String_Node_Str""),100 + c - 1);
        m.setSelected(a.isEnabled());
        m.setActionListener(this);
        account.addMenuItem(m);
        m=new MenuItem(JDLocale.L(""String_Node_Str"",""String_Node_Str""),200 + c - 1);
        m.setActionListener(this);
        account.addMenuItem(m);
        premium.addMenuItem(account);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (premium.getSize() != 0) {
    menuList.add(premium);
  }
 else {
    menuList.add(new MenuItem(JDLocale.L(""String_Node_Str"",""String_Node_Str""),-1));
  }
  return menuList;
}","@Override public ArrayList<MenuItem> createMenuitems(){
  ArrayList<MenuItem> menuList=new ArrayList<MenuItem>();
  if (!this.enablePremium)   return null;
  MenuItem account;
  MenuItem m=new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1);
  m.setActionListener(this);
  MenuItem premium=new MenuItem(MenuItem.CONTAINER,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0);
  menuList.add(m);
  ArrayList<Account> accounts=getPremiumAccounts();
  int i=1;
  int c=0;
  for (  Account a : accounts) {
    if (a == null)     continue;
    try {
      c++;
      if (getAccountwithoutUsername()) {
        if (a.getPass() == null || a.getPass().trim().length() == 0)         continue;
        account=new MenuItem(MenuItem.CONTAINER,i++ + ""String_Node_Str"" + ""String_Node_Str""+ (i - 1),0);
      }
 else {
        if (a.getUser() == null || a.getUser().trim().length() == 0)         continue;
        account=new MenuItem(MenuItem.CONTAINER,i++ + ""String_Node_Str"" + a.getUser(),0);
        m=new MenuItem(MenuItem.TOGGLE,JDLocale.L(""String_Node_Str"",""String_Node_Str""),100 + c - 1);
        m.setSelected(a.isEnabled());
        m.setActionListener(this);
        account.addMenuItem(m);
        m=new MenuItem(JDLocale.L(""String_Node_Str"",""String_Node_Str""),200 + c - 1);
        m.setActionListener(this);
        account.addMenuItem(m);
        premium.addMenuItem(account);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (premium.getSize() != 0) {
    menuList.add(premium);
  }
 else {
    menuList.add(new MenuItem(JDLocale.L(""String_Node_Str"",""String_Node_Str""),-1));
  }
  return menuList;
}"
21164,"@Override public boolean getFileInformation(DownloadLink downloadLink){
  try {
    br.getPage(downloadLink.getDownloadURL());
    if (br.getRedirectLocation() == null) {
      String filename=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
      String filesize;
      if ((filesize=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0)) != null) {
        downloadLink.setDownloadSize((int)Math.round(Double.parseDouble(filesize) * 1024 * 1024));
      }
 else       if ((filesize=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0)) != null) {
        downloadLink.setDownloadSize((int)Math.round(Double.parseDouble(filesize) * 1024));
      }
      downloadLink.setName(filename);
      return true;
    }
  }
 catch (  Exception e) {
  }
  downloadLink.setAvailable(false);
  return false;
}","@Override public boolean getFileInformation(DownloadLink downloadLink){
  try {
    br.getPage(downloadLink.getDownloadURL());
    if (br.getRedirectLocation() == null) {
      String filename=br.getRegex(""String_Node_Str"").getMatch(0);
      String filesize;
      if ((filesize=br.getRegex(""String_Node_Str"").getMatch(0)) != null) {
        downloadLink.setDownloadSize((int)Math.round(Double.parseDouble(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")) * 1024 * 1024));
      }
 else       if ((filesize=br.getRegex(""String_Node_Str"").getMatch(0)) != null) {
        downloadLink.setDownloadSize((int)Math.round(Double.parseDouble(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")) * 1024));
      }
      downloadLink.setName(filename);
      return true;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  downloadLink.setAvailable(false);
  return false;
}"
21165,"public boolean isPremium(){
  if (UserInfo.containsKey(""String_Node_Str"")) {
    return true;
  }
  return false;
}","public boolean isPremium(){
  if (UserInfo.containsKey(""String_Node_Str"")) {
    Date d=new Date(Long.parseLong(UserInfo.get(""String_Node_Str"")) * 1000l);
    if (d.compareTo(new Date()) >= 0)     return true;
  }
  return false;
}"
21166,"public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  this.setBrowserExclusive();
  try {
    login(account);
  }
 catch (  PluginException e) {
    ai.setValid(false);
    return ai;
  }
  if (!UserInfo.containsKey(""String_Node_Str"")) {
    ai.setValid(false);
    return ai;
  }
  if (!UserInfo.containsKey(""String_Node_Str"")) {
    ai.setValid(true);
    ai.setStatus(""String_Node_Str"");
    return ai;
  }
  Date d=new Date(Long.parseLong(UserInfo.get(""String_Node_Str"")) * 1000l);
  if (d.compareTo(new Date()) >= 0) {
    ai.setValid(true);
  }
 else {
    ai.setValid(false);
  }
  ai.setValidUntil(d.getTime());
  return ai;
}","public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  this.setBrowserExclusive();
  try {
    login(account);
  }
 catch (  PluginException e) {
    ai.setValid(false);
    return ai;
  }
  if (!UserInfo.containsKey(""String_Node_Str"")) {
    ai.setValid(false);
    return ai;
  }
  if (!UserInfo.containsKey(""String_Node_Str"")) {
    ai.setValid(true);
    ai.setStatus(""String_Node_Str"");
    return ai;
  }
  Date d=new Date(Long.parseLong(UserInfo.get(""String_Node_Str"")) * 1000l);
  if (d.compareTo(new Date()) >= 0) {
    ai.setValid(true);
    ai.setValidUntil(d.getTime());
  }
 else {
    ai.setValid(true);
    ai.setStatus(""String_Node_Str"");
  }
  return ai;
}"
21167,"@Override public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  setBrowserExclusive();
  try {
    login(account);
  }
 catch (  PluginException e) {
    ai.setValid(false);
    return ai;
  }
  if (!isPremium()) {
    ai.setValid(false);
    ai.setStatus(""String_Node_Str"");
    return ai;
  }
  br.getPage(""String_Node_Str"");
  String points=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (points != null)   ai.setPremiumPoints(points);
  String expire=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  ai.setValidUntil(Regex.getMilliSeconds(expire,""String_Node_Str"",null));
  ai.setTrafficLeft(-1);
  ai.setValid(true);
  return ai;
}","@Override public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  setBrowserExclusive();
  try {
    login(account);
  }
 catch (  PluginException e) {
    ai.setValid(false);
    return ai;
  }
  if (!isPremium()) {
    ai.setValid(false);
    ai.setStatus(""String_Node_Str"");
    return ai;
  }
  br.getPage(""String_Node_Str"");
  String points=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (points != null)   ai.setPremiumPoints(points);
  String expire=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  ai.setValidUntil(Regex.getMilliSeconds(expire,""String_Node_Str"",Locale.ENGLISH));
  ai.setTrafficLeft(-1);
  ai.setValid(true);
  return ai;
}"
21168,"public void addLinksWithoutGrabber(final Vector<DownloadLink> parameter){
  if (parameter == null || parameter.size() == 0) {
    return;
  }
  Vector<DownloadLink> linkList=checkLinks(parameter);
  Vector<Vector<DownloadLink>> links=new Vector<Vector<DownloadLink>>();
  Vector<String> packages=new Vector<String>();
  SubConfiguration guiConfig=JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME);
  for (int i=0; i < linkList.size(); i++) {
    if (!guiConfig.getBooleanProperty(""String_Node_Str"",true)) {
      packages.add(removeExtension(linkList.get(i).getName()));
      links.get(0).add(linkList.get(i));
    }
 else {
      int bestSim=0;
      int bestIndex=-1;
      for (int j=0; j < packages.size(); j++) {
        int sim=comparePackages(packages.get(j),removeExtension(linkList.get(i).getName()));
        if (sim > bestSim) {
          bestSim=sim;
          bestIndex=j;
        }
      }
      if (bestSim > guiConfig.getIntegerProperty(""String_Node_Str"",98) && bestIndex != -1) {
        links.get(bestIndex).add(linkList.get(i));
      }
 else {
        packages.add(removeExtension(linkList.get(i).getName()));
        Vector<DownloadLink> temp=new Vector<DownloadLink>();
        temp.add(linkList.get(i));
        links.add(temp);
      }
    }
  }
  for (int i=0; i < packages.size(); i++) {
    int rand=(int)(Math.random() * 0xffffff);
    Color c=new Color(rand);
    c=c.brighter();
    FilePackage fp=new FilePackage();
    fp.setProperty(""String_Node_Str"",c);
    fp.setName(packages.get(i));
    String downloadDir=JDUtilities.getConfiguration().getDefaultDownloadDirectory();
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
      File file=new File(new File(downloadDir),packages.get(i));
      if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
        if (!file.exists()) {
          file.mkdirs();
        }
      }
 else       fp.setDownloadDirectory(file.getAbsolutePath());
    }
 else {
      fp.setDownloadDirectory(downloadDir);
    }
    fp.setDownloadLinks(links.get(i));
    for (int j=0; j < links.get(i).size(); j++) {
      links.get(i).get(j).setFilePackage(fp);
    }
    JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","public void addLinksWithoutGrabber(final Vector<DownloadLink> parameter){
  if (parameter == null || parameter.size() == 0) {
    return;
  }
  Vector<DownloadLink> linkList=checkLinks(parameter);
  Vector<Vector<DownloadLink>> links=new Vector<Vector<DownloadLink>>();
  Vector<String> packages=new Vector<String>();
  SubConfiguration guiConfig=JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME);
  for (int i=0; i < linkList.size(); i++) {
    if (!guiConfig.getBooleanProperty(""String_Node_Str"",true)) {
      packages.add(removeExtension(linkList.get(i).getName()));
      links.get(0).add(linkList.get(i));
    }
 else {
      int bestSim=0;
      int bestIndex=-1;
      for (int j=0; j < packages.size(); j++) {
        int sim=comparePackages(packages.get(j),removeExtension(linkList.get(i).getName()));
        if (sim > bestSim) {
          bestSim=sim;
          bestIndex=j;
        }
      }
      if (bestSim > guiConfig.getIntegerProperty(""String_Node_Str"",98) && bestIndex != -1) {
        links.get(bestIndex).add(linkList.get(i));
      }
 else {
        packages.add(removeExtension(linkList.get(i).getName()));
        Vector<DownloadLink> temp=new Vector<DownloadLink>();
        temp.add(linkList.get(i));
        links.add(temp);
      }
    }
  }
  for (int i=0; i < packages.size(); i++) {
    int rand=(int)(Math.random() * 0xffffff);
    Color c=new Color(rand);
    c=c.brighter();
    FilePackage fp=new FilePackage();
    fp.setProperty(""String_Node_Str"",c);
    fp.setName(packages.get(i));
    String downloadDir=JDUtilities.getConfiguration().getDefaultDownloadDirectory();
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
      File file=new File(new File(downloadDir),packages.get(i));
      if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
        if (!file.exists())         file.mkdirs();
      }
      fp.setDownloadDirectory(file.getAbsolutePath());
    }
 else {
      fp.setDownloadDirectory(downloadDir);
    }
    fp.setDownloadLinks(links.get(i));
    for (int j=0; j < links.get(i).size(); j++) {
      links.get(i).get(j).setFilePackage(fp);
    }
    JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}"
21169,"private void confirmPackage(int idx,String host){
  PackageTab tab=tabList.get(idx);
  Vector<DownloadLink> linkList=tab.getLinkList();
  if (linkList.isEmpty())   return;
  FilePackage fp=new FilePackage();
  fp.setName(tab.getPackageName());
  fp.setComment(tab.getComment());
  fp.setPassword(tab.getPassword());
  fp.setExtractAfterDownload(tab.isExtract());
  addToDownloadDirs(tab.getDownloadDirectory(),tab.getPackageName());
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
    File file=new File(new File(tab.getDownloadDirectory()),tab.getPackageName());
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
      if (!file.exists())       file.mkdirs();
    }
 else {
      fp.setDownloadDirectory(file.getAbsolutePath());
    }
  }
 else {
    fp.setDownloadDirectory(tab.getDownloadDirectory());
  }
  int files=0;
  if (host == null) {
    files=linkList.size();
    fp.setDownloadLinks(linkList);
    for (    DownloadLink link : linkList) {
      boolean avail=true;
      if (link.isAvailabilityChecked())       avail=link.isAvailable();
      link.getLinkStatus().reset();
      if (!avail)       link.getLinkStatus().addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
      link.setFilePackage(fp);
    }
  }
 else {
    Vector<DownloadLink> linkListHost=new Vector<DownloadLink>();
    for (int i=tab.getLinkList().size() - 1; i >= 0; --i) {
      if (linkList.elementAt(i).getHost().compareTo(host) == 0) {
        DownloadLink link=linkList.remove(i);
        boolean avail=true;
        if (link.isAvailabilityChecked())         avail=link.isAvailable();
        link.getLinkStatus().reset();
        if (!avail)         link.getLinkStatus().addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
        totalLinkList.remove(link);
        linkListHost.add(link);
        link.setFilePackage(fp);
        ++files;
      }
    }
    if (files == 0)     return;
    fp.setDownloadLinks(linkListHost);
    tab.setLinkList(linkList);
  }
  parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
  if (mStartAfterAdding.isSelected())   parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
  parentFrame.setDropTargetText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + files);
}","private void confirmPackage(int idx,String host){
  PackageTab tab=tabList.get(idx);
  Vector<DownloadLink> linkList=tab.getLinkList();
  if (linkList.isEmpty())   return;
  FilePackage fp=new FilePackage();
  fp.setName(tab.getPackageName());
  fp.setComment(tab.getComment());
  fp.setPassword(tab.getPassword());
  fp.setExtractAfterDownload(tab.isExtract());
  addToDownloadDirs(tab.getDownloadDirectory(),tab.getPackageName());
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
    File file=new File(new File(tab.getDownloadDirectory()),tab.getPackageName());
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
      if (!file.exists())       file.mkdirs();
    }
    fp.setDownloadDirectory(file.getAbsolutePath());
  }
 else {
    fp.setDownloadDirectory(tab.getDownloadDirectory());
  }
  int files=0;
  if (host == null) {
    files=linkList.size();
    fp.setDownloadLinks(linkList);
    for (    DownloadLink link : linkList) {
      boolean avail=true;
      if (link.isAvailabilityChecked())       avail=link.isAvailable();
      link.getLinkStatus().reset();
      if (!avail)       link.getLinkStatus().addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
      link.setFilePackage(fp);
    }
  }
 else {
    Vector<DownloadLink> linkListHost=new Vector<DownloadLink>();
    for (int i=tab.getLinkList().size() - 1; i >= 0; --i) {
      if (linkList.elementAt(i).getHost().compareTo(host) == 0) {
        DownloadLink link=linkList.remove(i);
        boolean avail=true;
        if (link.isAvailabilityChecked())         avail=link.isAvailable();
        link.getLinkStatus().reset();
        if (!avail)         link.getLinkStatus().addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
        totalLinkList.remove(link);
        linkListHost.add(link);
        link.setFilePackage(fp);
        ++files;
      }
    }
    if (files == 0)     return;
    fp.setDownloadLinks(linkListHost);
    tab.setLinkList(linkList);
  }
  parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
  if (mStartAfterAdding.isSelected())   parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
  parentFrame.setDropTargetText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + files);
}"
21170,"public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else {
        requestParameter.put(key,value);
      }
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0) {
          setspeed=0;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1) {
          maxdls=1;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
        }
 else {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
synchronized (JDWebinterface.Link_Adder_Packages) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  JDWebinterface.Link_Adder_Packages.get(i).setName(Encoding.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
            }
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                for (int ii=0; ii < JDWebinterface.Link_Adder_Packages.get(i).size(); ii++) {
                  links.add(JDWebinterface.Link_Adder_Packages.get(i).get(ii));
                }
              }
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                if (link.isAvailabilityChecked() == true && link.isAvailable() == false) {
                  link.getFilePackage().remove(link);
                }
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
                      if (!file.exists()) {
                        file.mkdirs();
                      }
                    }
 else                     fp.setDownloadDirectory(file.getAbsolutePath());
                  }
 else {
                    fp.setDownloadDirectory(fp.getDownloadDirectory());
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0) {
                JDWebinterface.Link_Adder_Packages.remove(index);
              }
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.getLinkStatus().setStatus(LinkStatus.TODO);
              link.getLinkStatus().setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDReconnect implements Runnable {
        JDReconnect(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          boolean tmp=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
          if (JDUtilities.getController().getRunningDownloadNum() > 0) {
            JDUtilities.getController().stopDownloads();
          }
          if (Reconnecter.waitForNewIP(1)) {
            logger.info(""String_Node_Str"");
          }
 else {
            logger.info(""String_Node_Str"");
          }
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,tmp);
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDReconnect jdrc=new JDReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jdc=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_STOP_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdrs=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        addLinks(waitingLinkList);
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        File container=JDUtilities.getResourceFile(""String_Node_Str"" + requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=JDUtilities.getController().getContainerLinks(container);
        addLinks(waitingLinkList);
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String passwordList=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        for (        OptionalPluginWrapper wrapper : OptionalPluginWrapper.getOptionalWrapper()) {
          if (wrapper.isEnabled() && wrapper.getPlugin().getClass().getName().endsWith(""String_Node_Str"")) {
            ArrayList<String> pws=new ArrayList<String>();
            for (            String pw : Regex.getLines(passwordList)) {
              pws.add(0,pw);
            }
            Object obj=wrapper.getPlugin().interact(""String_Node_Str"",pws);
            if (obj == null)             logger.warning(""String_Node_Str"");
            break;
          }
        }
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}","public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else {
        requestParameter.put(key,value);
      }
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0) {
          setspeed=0;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1) {
          maxdls=1;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
        }
 else {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
synchronized (JDWebinterface.Link_Adder_Packages) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  JDWebinterface.Link_Adder_Packages.get(i).setName(Encoding.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
            }
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                for (int ii=0; ii < JDWebinterface.Link_Adder_Packages.get(i).size(); ii++) {
                  links.add(JDWebinterface.Link_Adder_Packages.get(i).get(ii));
                }
              }
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                if (link.isAvailabilityChecked() == true && link.isAvailable() == false) {
                  link.getFilePackage().remove(link);
                }
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
                      if (!file.exists())                       file.mkdirs();
                    }
                    fp.setDownloadDirectory(file.getAbsolutePath());
                  }
 else {
                    fp.setDownloadDirectory(fp.getDownloadDirectory());
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0) {
                JDWebinterface.Link_Adder_Packages.remove(index);
              }
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.getLinkStatus().setStatus(LinkStatus.TODO);
              link.getLinkStatus().setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDReconnect implements Runnable {
        JDReconnect(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          boolean tmp=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
          if (JDUtilities.getController().getRunningDownloadNum() > 0) {
            JDUtilities.getController().stopDownloads();
          }
          if (Reconnecter.waitForNewIP(1)) {
            logger.info(""String_Node_Str"");
          }
 else {
            logger.info(""String_Node_Str"");
          }
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,tmp);
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDReconnect jdrc=new JDReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jdc=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_STOP_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdrs=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        addLinks(waitingLinkList);
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        File container=JDUtilities.getResourceFile(""String_Node_Str"" + requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=JDUtilities.getController().getContainerLinks(container);
        addLinks(waitingLinkList);
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String passwordList=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        for (        OptionalPluginWrapper wrapper : OptionalPluginWrapper.getOptionalWrapper()) {
          if (wrapper.isEnabled() && wrapper.getPlugin().getClass().getName().endsWith(""String_Node_Str"")) {
            ArrayList<String> pws=new ArrayList<String>();
            for (            String pw : Regex.getLines(passwordList)) {
              pws.add(0,pw);
            }
            Object obj=wrapper.getPlugin().interact(""String_Node_Str"",pws);
            if (obj == null)             logger.warning(""String_Node_Str"");
            break;
          }
        }
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}"
21171,"@Override public boolean getFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getPage(downloadLink.getDownloadURL());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL | Pattern.CASE_INSENSITIVE)).getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return true;
}","@Override public boolean getFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL | Pattern.CASE_INSENSITIVE)).getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return true;
}"
21172,"static public final String decrypterPattern_Redirecter_Plugin(){
  StringBuilder completePattern=new StringBuilder();
  String[] list={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String pattern : list) {
    if (completePattern.length() > 0) {
      completePattern.append(""String_Node_Str"");
    }
    completePattern.append(pattern);
  }
  logger.finest(""String_Node_Str"" + list.length + ""String_Node_Str"");
  return completePattern.toString();
}","static public final String decrypterPattern_Redirecter_Plugin(){
  StringBuilder completePattern=new StringBuilder();
  String[] list={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String pattern : list) {
    if (completePattern.length() > 0) {
      completePattern.append(""String_Node_Str"");
    }
    completePattern.append(pattern);
  }
  logger.finest(""String_Node_Str"" + list.length + ""String_Node_Str"");
  return completePattern.toString();
}"
21173,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setCookiesExclusive(true);
  br.setReadTimeout(5 * 60 * 1000);
  br.setConnectTimeout(5 * 60 * 1000);
  for (int retry=1; retry <= 10; retry++) {
    try {
      br.clearCookies(this.getHost());
      br.getPage(parameter);
      String pass=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
      Vector<String> passwords=new Vector<String>();
      passwords.add(""String_Node_Str"");
      if (pass != null && !pass.equals(""String_Node_Str"")) {
        passwords.add(pass);
      }
      Form form=br.getForm(1);
      if (form != null && form.containsHTML(""String_Node_Str"")) {
        File file;
        int i=10;
        while (true) {
          i--;
          if (i <= 0) {
            logger.severe(""String_Node_Str"");
            return null;
          }
          file=this.getLocalCaptchaFile(this);
          Browser.download(file,br.cloneBrowser().openGetConnection(""String_Node_Str""));
          try {
            File f=convert(file);
            if (f == null || !f.exists())             continue;
            file=f;
            break;
          }
 catch (          Exception e) {
            continue;
          }
        }
        String captcha=getCaptchaCode(file,this,param);
        form.put(""String_Node_Str"",captcha);
        br.submitForm(form);
        if (br.containsHTML(""String_Node_Str""))         continue;
      }
      Form[] forms=br.getForms();
      progress.setRange(forms.length);
      DDLWarez_Linkgrabber DDLWarez_Linkgrabbers[]=new DDLWarez_Linkgrabber[forms.length];
      for (int i=0; i < forms.length; ++i) {
synchronized (Worker_Delay) {
          Thread.sleep(Worker_Delay);
        }
        DDLWarez_Linkgrabbers[i]=new DDLWarez_Linkgrabber(progress,i,br.cloneBrowser());
        DDLWarez_Linkgrabbers[i].setjob(forms[i]);
        DDLWarez_Linkgrabbers[i].start();
      }
      for (int i=0; i < forms.length; ++i) {
        try {
          DDLWarez_Linkgrabbers[i].join();
          if (DDLWarez_Linkgrabbers[i].status() == DDLWarez_Linkgrabber.THREADPASS) {
            DownloadLink link=createDownloadlink(DDLWarez_Linkgrabbers[i].getlink());
            link.setSourcePluginPasswords(passwords);
            decryptedLinks.add(link);
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      return decryptedLinks;
    }
 catch (    DecrypterException e2) {
      throw e2;
    }
catch (    Exception e) {
      e.printStackTrace();
      logger.finest(""String_Node_Str"");
    }
  }
  return null;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setCookiesExclusive(true);
  br.setReadTimeout(5 * 60 * 1000);
  br.setConnectTimeout(5 * 60 * 1000);
  for (int retry=1; retry <= 10; retry++) {
    try {
      br.clearCookies(this.getHost());
      br.getPage(parameter);
      String pass=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
      Vector<String> passwords=new Vector<String>();
      passwords.add(""String_Node_Str"");
      if (pass != null && !pass.equals(""String_Node_Str"")) {
        passwords.add(pass);
      }
      Form form=br.getForm(1);
      if (form != null && form.containsHTML(""String_Node_Str"")) {
        File file;
        int i=10;
        while (true) {
          i--;
          if (i <= 0) {
            logger.severe(""String_Node_Str"");
            return null;
          }
          file=this.getLocalCaptchaFile(this);
          Browser.download(file,br.cloneBrowser().openGetConnection(""String_Node_Str"" + br.getHost() + ""String_Node_Str""+ br.getRegex(""String_Node_Str"").getMatch(0)));
          try {
            File f=convert(file);
            if (f == null || !f.exists())             continue;
            file=f;
            break;
          }
 catch (          Exception e) {
            continue;
          }
        }
        String captcha=getCaptchaCode(file,this,param);
        form.put(""String_Node_Str"",captcha);
        br.submitForm(form);
        if (br.containsHTML(""String_Node_Str""))         continue;
      }
      Form[] forms=br.getForms();
      progress.setRange(forms.length);
      DDLWarez_Linkgrabber DDLWarez_Linkgrabbers[]=new DDLWarez_Linkgrabber[forms.length];
      for (int i=0; i < forms.length; ++i) {
synchronized (Worker_Delay) {
          Thread.sleep(Worker_Delay);
        }
        DDLWarez_Linkgrabbers[i]=new DDLWarez_Linkgrabber(progress,i,br.cloneBrowser());
        DDLWarez_Linkgrabbers[i].setjob(forms[i]);
        DDLWarez_Linkgrabbers[i].start();
      }
      for (int i=0; i < forms.length; ++i) {
        try {
          DDLWarez_Linkgrabbers[i].join();
          if (DDLWarez_Linkgrabbers[i].status() == DDLWarez_Linkgrabber.THREADPASS) {
            DownloadLink link=createDownloadlink(DDLWarez_Linkgrabbers[i].getlink());
            link.setSourcePluginPasswords(passwords);
            decryptedLinks.add(link);
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      return decryptedLinks;
    }
 catch (    DecrypterException e2) {
      throw e2;
    }
catch (    Exception e) {
      e.printStackTrace();
      logger.finest(""String_Node_Str"");
    }
  }
  return null;
}"
21174,"public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
    if (Sniffy.hasSniffer())     throw new SnifferException();
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  Rapidshare.correctURL(downloadLink);
  String freeOrPremiumSelectPostURL=null;
  br.setAcceptLanguage(ACCEPT_LANGUAGE);
  br.setFollowRedirects(false);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    logger.info(""String_Node_Str"");
    this.handlePremium(downloadLink,new Account(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  freeOrPremiumSelectPostURL=new Regex(br,PATTERN_FIND_MIRROR_URL).getMatch(0);
  if (freeOrPremiumSelectPostURL == null) {
    String error=null;
    if ((error=findError(br + ""String_Node_Str"")) != null) {
      throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
    }
    reportUnknownError(br,1);
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  Form[] forms=br.getForms();
  br.submitForm(forms[0]);
  String error=null;
  if ((error=findError(br + ""String_Node_Str"")) != null) {
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120000l);
    }
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120 * 1000l);
    }
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.substring(11,error.indexOf(""String_Node_Str""))),3600 * 1000l);
    }
    if (new Regex(error,""String_Node_Str"").matches()) {
      String waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      if (waitfor == null) {
        waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      }
      long waitTime=60 * 60 * 1000l;
      try {
        waitTime=new Long(waitfor.trim()) * 60 * 1000l;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
    }
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  if (new Regex(br,PATTERM_MATCHER_ALREADY_LOADING).matches()) {
    logger.severe(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,120 * 1000l);
  }
 else   if ((error=findError(br + ""String_Node_Str"")) != null) {
    reportUnknownError(br,2);
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  String ticketTime=new Regex(br,PATTERN_FIND_TICKET_WAITTIME).getMatch(0);
  if (ticketTime != null && ticketTime.equals(""String_Node_Str"")) {
    ticketTime=null;
  }
  String ticketCode=br + ""String_Node_Str"";
  String tt=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
  String fun=""String_Node_Str"" + tt + ""String_Node_Str"";
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  String code=Context.toString(result);
  if (tt != null)   ticketCode=code;
  Context.exit();
  if (ticketCode.contains(""String_Node_Str"")) {
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120000);
  }
  if (new Regex(ticketCode,""String_Node_Str"").matches()) {
    String waitfor=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
    long waitTime=60 * 60 * 1000l;
    try {
      waitTime=new Long(waitfor.trim()) * 60 * 1000l;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
  }
  long pendingTime=0;
  if (ticketTime != null) {
    pendingTime=Long.parseLong(ticketTime);
    if (getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) > 0) {
      logger.warning(""String_Node_Str"" + pendingTime + ""String_Node_Str""+ (pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100));
      pendingTime=pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100;
    }
    pendingTime*=1000;
  }
  waitTicketTime(downloadLink,pendingTime);
  String postTarget=getDownloadTarget(downloadLink,ticketCode);
  System.out.println(postTarget);
  if (linkStatus.isFailed())   return;
  Request request=br.createPostRequest(postTarget,""String_Node_Str"" + Math.random() * 40 + ""String_Node_Str"" + Math.random() * 40);
  dl=new RAFDownload(this,downloadLink,request);
  long startTime=System.currentTimeMillis();
  HTTPConnection con=dl.connect();
  if (!con.isContentDisposition() && con.getHeaderField(""String_Node_Str"") != null) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  downloadLink.setProperty(""String_Node_Str"",(System.currentTimeMillis() - startTime));
  dl.startDownload();
  downloadLink.setProperty(""String_Node_Str"",(System.currentTimeMillis() - startTime));
  int dif=(int)((System.currentTimeMillis() - startTime) / 1000);
  if (dif > 0)   downloadLink.setProperty(""String_Node_Str"",(downloadLink.getDownloadSize() / dif) / 1024);
  if (downloadLink.getStringProperty(""String_Node_Str"") != null) {
    new File(downloadLink.getFileOutput()).delete();
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"" + downloadLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str""+ downloadLink.getProperty(""String_Node_Str"")+ ""String_Node_Str"");
    ArrayList<DownloadLink> ret=new ArrayList<DownloadLink>();
    String msg=""String_Node_Str"";
    for (    DownloadLink dLink : downloadLink.getFilePackage().getDownloadLinks()) {
      if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
        ret.add(dLink);
        msg+=""String_Node_Str"" + dLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str""+ dLink.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
      }
 else       if (dLink.getLinkStatus().isFailed()) {
        ret.add(dLink);
        msg+=""String_Node_Str"" + dLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str"";
      }
 else {
        return;
      }
    }
    TextAreaDialog.showDialog(SimpleGUI.CURRENTGUI.getFrame(),""String_Node_Str"",""String_Node_Str"",msg);
  }
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
    if (Sniffy.hasSniffer())     throw new SnifferException();
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  Rapidshare.correctURL(downloadLink);
  String freeOrPremiumSelectPostURL=null;
  br.setAcceptLanguage(ACCEPT_LANGUAGE);
  br.setFollowRedirects(false);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    logger.info(""String_Node_Str"");
    this.handlePremium(downloadLink,new Account(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  if (br.toString().contains(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FATAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  }
  freeOrPremiumSelectPostURL=new Regex(br,PATTERN_FIND_MIRROR_URL).getMatch(0);
  if (freeOrPremiumSelectPostURL == null) {
    String error=null;
    if ((error=findError(br + ""String_Node_Str"")) != null) {
      throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
    }
    reportUnknownError(br,1);
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  Form[] forms=br.getForms();
  br.submitForm(forms[0]);
  String error=null;
  if ((error=findError(br + ""String_Node_Str"")) != null) {
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120000l);
    }
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120 * 1000l);
    }
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDLocale.LF(""String_Node_Str"",""String_Node_Str"",error.substring(11,error.indexOf(""String_Node_Str""))),3600 * 1000l);
    }
    if (new Regex(error,""String_Node_Str"").matches()) {
      String waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      if (waitfor == null) {
        waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      }
      long waitTime=60 * 60 * 1000l;
      try {
        waitTime=new Long(waitfor.trim()) * 60 * 1000l;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
    }
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  if (new Regex(br,PATTERM_MATCHER_ALREADY_LOADING).matches()) {
    logger.severe(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,120 * 1000l);
  }
 else   if ((error=findError(br + ""String_Node_Str"")) != null) {
    reportUnknownError(br,2);
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  String ticketTime=new Regex(br,PATTERN_FIND_TICKET_WAITTIME).getMatch(0);
  if (ticketTime != null && ticketTime.equals(""String_Node_Str"")) {
    ticketTime=null;
  }
  String ticketCode=br + ""String_Node_Str"";
  String tt=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
  String fun=""String_Node_Str"" + tt + ""String_Node_Str"";
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  String code=Context.toString(result);
  if (tt != null)   ticketCode=code;
  Context.exit();
  if (ticketCode.contains(""String_Node_Str"")) {
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",120000);
  }
  if (new Regex(ticketCode,""String_Node_Str"").matches()) {
    String waitfor=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
    long waitTime=60 * 60 * 1000l;
    try {
      waitTime=new Long(waitfor.trim()) * 60 * 1000l;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
  }
  long pendingTime=0;
  if (ticketTime != null) {
    pendingTime=Long.parseLong(ticketTime);
    if (getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) > 0) {
      logger.warning(""String_Node_Str"" + pendingTime + ""String_Node_Str""+ (pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100));
      pendingTime=pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100;
    }
    pendingTime*=1000;
  }
  waitTicketTime(downloadLink,pendingTime);
  String postTarget=getDownloadTarget(downloadLink,ticketCode);
  System.out.println(postTarget);
  if (linkStatus.isFailed())   return;
  Request request=br.createPostRequest(postTarget,""String_Node_Str"" + Math.random() * 40 + ""String_Node_Str"" + Math.random() * 40);
  dl=new RAFDownload(this,downloadLink,request);
  long startTime=System.currentTimeMillis();
  HTTPConnection con=dl.connect();
  if (!con.isContentDisposition() && con.getHeaderField(""String_Node_Str"") != null) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  downloadLink.setProperty(""String_Node_Str"",(System.currentTimeMillis() - startTime));
  dl.startDownload();
  downloadLink.setProperty(""String_Node_Str"",(System.currentTimeMillis() - startTime));
  int dif=(int)((System.currentTimeMillis() - startTime) / 1000);
  if (dif > 0)   downloadLink.setProperty(""String_Node_Str"",(downloadLink.getDownloadSize() / dif) / 1024);
  if (downloadLink.getStringProperty(""String_Node_Str"") != null) {
    new File(downloadLink.getFileOutput()).delete();
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"" + downloadLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str""+ downloadLink.getProperty(""String_Node_Str"")+ ""String_Node_Str"");
    ArrayList<DownloadLink> ret=new ArrayList<DownloadLink>();
    String msg=""String_Node_Str"";
    for (    DownloadLink dLink : downloadLink.getFilePackage().getDownloadLinks()) {
      if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
        ret.add(dLink);
        msg+=""String_Node_Str"" + dLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str""+ dLink.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
      }
 else       if (dLink.getLinkStatus().isFailed()) {
        ret.add(dLink);
        msg+=""String_Node_Str"" + dLink.getStringProperty(""String_Node_Str"") + ""String_Node_Str"";
      }
 else {
        return;
      }
    }
    TextAreaDialog.showDialog(SimpleGUI.CURRENTGUI.getFrame(),""String_Node_Str"",""String_Node_Str"",msg);
  }
}"
21175,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  getFileInformation(downloadLink);
  String url=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
  br.setFollowRedirects(true);
  dl=br.openDownload(downloadLink,""String_Node_Str"" + url);
  HTTPConnection con=dl.getConnection();
  if (!con.isContentDisposition()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  getFileInformation(downloadLink);
  String url=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
  br.setFollowRedirects(true);
  dl=br.openDownload(downloadLink,url);
  HTTPConnection con=dl.getConnection();
  if (!con.isContentDisposition()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}"
21176,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  int maxCaptchaTries=5;
  String code;
  String page=null;
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  int tries=0;
  while (tries < maxCaptchaTries) {
    File captchaFile=Plugin.getLocalCaptchaFile(this,""String_Node_Str"");
    Browser.download(captchaFile,br.openGetConnection(""String_Node_Str""));
    code=Plugin.getCaptchaCode(captchaFile,this,downloadLink);
    page=br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + code);
    tries++;
    if (!page.contains(""String_Node_Str"")) {
      break;
    }
  }
  if (page != null && page.contains(""String_Node_Str"")) {
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  if (Regex.matches(page,PATTERN_MATCHER_ERROR)) {
    String error=new Regex(page,""String_Node_Str"").getMatch(0);
    logger.severe(""String_Node_Str"" + error);
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  br.setFollowRedirects(false);
  String wait=new Regex(br,""String_Node_Str"").getMatch(0);
  if (wait != null) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,new Long(wait) * 1000 * 60l);
  }
  Form[] forms=br.getForms();
  if (forms.length < 2) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 1000 * 60l);
  }
  page=br.submitForm(forms[1]);
  sleep(61000,downloadLink);
  dl=RAFDownload.download(downloadLink,br.createGetRequest(null));
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  int maxCaptchaTries=5;
  String code;
  String page=null;
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  int tries=0;
  while (tries < maxCaptchaTries) {
    File captchaFile=Plugin.getLocalCaptchaFile(this,""String_Node_Str"");
    Browser.download(captchaFile,br.openGetConnection(""String_Node_Str""));
    code=Plugin.getCaptchaCode(captchaFile,this,downloadLink);
    page=br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + code);
    tries++;
    if (!page.contains(""String_Node_Str"")) {
      break;
    }
  }
  if (page != null && page.contains(""String_Node_Str"")) {
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  if (Regex.matches(page,PATTERN_MATCHER_ERROR)) {
    String error=new Regex(page,""String_Node_Str"").getMatch(0);
    logger.severe(""String_Node_Str"" + error);
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  br.setFollowRedirects(false);
  if (br.toString().contains(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 1000 * 60l);
  }
  String wait=new Regex(br,""String_Node_Str"").getMatch(0);
  if (wait != null) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,new Long(wait) * 1000 * 60l);
  }
  Form[] forms=br.getForms();
  if (forms.length < 2) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 1000 * 60l);
  }
  page=br.submitForm(forms[1]);
  sleep(61000,downloadLink);
  dl=RAFDownload.download(downloadLink,br.createGetRequest(null));
  dl.startDownload();
}"
21177,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  getFileInformation(downloadLink);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  int waittime=0;
  if (wait != null)   waittime=Integer.parseInt(wait.trim());
  if (waittime > 60) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waittime * 1000l);
  }
 else {
    sleep(waittime * 1000l,downloadLink);
  }
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  String id=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  if (id == null)   id=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + id);
  Form form=br.getForm(3);
  String captchaUrl=form.getRegex(""String_Node_Str"").getMatch(0);
  File captchaFile=this.getLocalCaptchaFile(this);
  try {
    Browser.download(captchaFile,br.cloneBrowser().openGetConnection(captchaUrl));
  }
 catch (  Exception e) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  String captchaCode=Plugin.getCaptchaCode(captchaFile,this,downloadLink);
  form.put(""String_Node_Str"",captchaCode);
  br.setFollowRedirects(true);
  dl=br.openDownload(downloadLink,form,true,1);
  if (!dl.getConnection().isContentDisposition()) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  getFileInformation(downloadLink);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  int waittime=0;
  if (wait != null)   waittime=Integer.parseInt(wait.trim());
  if (waittime > 60) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waittime * 1000l);
  }
 else {
    sleep(waittime * 1000l,downloadLink);
  }
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  String id=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + id);
  Form form=br.getForm(3);
  String captchaUrl=""String_Node_Str"" + br.getHost() + ""String_Node_Str""+ br.getRegex(""String_Node_Str"").getMatch(0);
  File captchaFile=this.getLocalCaptchaFile(this);
  try {
    Browser.download(captchaFile,br.cloneBrowser().openGetConnection(captchaUrl));
  }
 catch (  Exception e) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  String captchaCode=Plugin.getCaptchaCode(captchaFile,this,downloadLink);
  form.put(""String_Node_Str"",captchaCode);
  br.setFollowRedirects(true);
  dl=br.openDownload(downloadLink,form,true,1);
  if (!dl.getConnection().isContentDisposition()) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  dl.startDownload();
}"
21178,"public void addLinksWithoutGrabber(final Vector<DownloadLink> parameter){
  if (parameter == null || parameter.size() == 0) {
    return;
  }
  Vector<DownloadLink> linkList=checkLinks(parameter);
  Vector<Vector<DownloadLink>> links=new Vector<Vector<DownloadLink>>();
  Vector<String> packages=new Vector<String>();
  SubConfiguration guiConfig=JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME);
  for (int i=0; i < linkList.size(); i++) {
    if (!guiConfig.getBooleanProperty(""String_Node_Str"",true)) {
      packages.add(removeExtension(linkList.get(i).getName()));
      links.get(0).add(linkList.get(i));
    }
 else {
      int bestSim=0;
      int bestIndex=-1;
      for (int j=0; j < packages.size(); j++) {
        int sim=comparePackages(packages.get(j),removeExtension(linkList.get(i).getName()));
        if (sim > bestSim) {
          bestSim=sim;
          bestIndex=j;
        }
      }
      if (bestSim > guiConfig.getIntegerProperty(""String_Node_Str"",98) && bestIndex != -1) {
        links.get(bestIndex).add(linkList.get(i));
      }
 else {
        packages.add(removeExtension(linkList.get(i).getName()));
        Vector<DownloadLink> temp=new Vector<DownloadLink>();
        temp.add(linkList.get(i));
        links.add(temp);
      }
    }
  }
  for (int i=0; i < packages.size(); i++) {
    int rand=(int)(Math.random() * 0xffffff);
    Color c=new Color(rand);
    c=c.brighter();
    FilePackage fp=new FilePackage();
    fp.setProperty(""String_Node_Str"",c);
    fp.setName(packages.get(i));
    String downloadDir=JDUtilities.getConfiguration().getDefaultDownloadDirectory();
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
      File file=new File(new File(downloadDir),packages.get(i));
      fp.setDownloadDirectory(file.getAbsolutePath());
    }
 else {
      fp.setDownloadDirectory(downloadDir);
    }
    fp.setDownloadLinks(links.get(i));
    for (int j=0; j < links.get(i).size(); j++) {
      links.get(i).get(j).setFilePackage(fp);
    }
    JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","public void addLinksWithoutGrabber(final Vector<DownloadLink> parameter){
  if (parameter == null || parameter.size() == 0) {
    return;
  }
  Vector<DownloadLink> linkList=checkLinks(parameter);
  Vector<Vector<DownloadLink>> links=new Vector<Vector<DownloadLink>>();
  Vector<String> packages=new Vector<String>();
  SubConfiguration guiConfig=JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME);
  for (int i=0; i < linkList.size(); i++) {
    if (!guiConfig.getBooleanProperty(""String_Node_Str"",true)) {
      packages.add(removeExtension(linkList.get(i).getName()));
      links.get(0).add(linkList.get(i));
    }
 else {
      int bestSim=0;
      int bestIndex=-1;
      for (int j=0; j < packages.size(); j++) {
        int sim=comparePackages(packages.get(j),removeExtension(linkList.get(i).getName()));
        if (sim > bestSim) {
          bestSim=sim;
          bestIndex=j;
        }
      }
      if (bestSim > guiConfig.getIntegerProperty(""String_Node_Str"",98) && bestIndex != -1) {
        links.get(bestIndex).add(linkList.get(i));
      }
 else {
        packages.add(removeExtension(linkList.get(i).getName()));
        Vector<DownloadLink> temp=new Vector<DownloadLink>();
        temp.add(linkList.get(i));
        links.add(temp);
      }
    }
  }
  for (int i=0; i < packages.size(); i++) {
    int rand=(int)(Math.random() * 0xffffff);
    Color c=new Color(rand);
    c=c.brighter();
    FilePackage fp=new FilePackage();
    fp.setProperty(""String_Node_Str"",c);
    fp.setName(packages.get(i));
    String downloadDir=JDUtilities.getConfiguration().getDefaultDownloadDirectory();
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
      File file=new File(new File(downloadDir),packages.get(i));
      if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
        if (!file.exists()) {
          file.mkdirs();
        }
      }
 else       fp.setDownloadDirectory(file.getAbsolutePath());
    }
 else {
      fp.setDownloadDirectory(downloadDir);
    }
    fp.setDownloadLinks(links.get(i));
    for (int j=0; j < links.get(i).size(); j++) {
      links.get(i).get(j).setFilePackage(fp);
    }
    JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}"
21179,"private void confirmPackage(int idx,String host){
  PackageTab tab=tabList.get(idx);
  Vector<DownloadLink> linkList=tab.getLinkList();
  int files=linkList.size();
  if (files == 0) {
    return;
  }
  Color c=new Color((int)(Math.random() * 0xffffff));
  c=c.brighter();
  FilePackage fp=new FilePackage();
  fp.setProperty(""String_Node_Str"",c);
  fp.setName(tab.getPackageName());
  fp.setComment(tab.getComment());
  fp.setPassword(tab.getPassword());
  fp.setExtractAfterDownload(tab.isExtract());
  addToDownloadDirs(tab.getDownloadDirectory(),tab.getPackageName());
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
    File file=new File(new File(tab.getDownloadDirectory()),tab.getPackageName());
    fp.setDownloadDirectory(file.getAbsolutePath());
  }
 else {
    fp.setDownloadDirectory(tab.getDownloadDirectory());
  }
  if (host == null) {
    fp.setDownloadLinks(linkList);
    for (int i=0; i < files; i++) {
      linkList.elementAt(i).setFilePackage(fp);
    }
  }
 else {
    Vector<DownloadLink> linkListHost=new Vector<DownloadLink>();
    files=0;
    for (int i=tab.getLinkList().size() - 1; i >= 0; --i) {
      if (linkList.elementAt(i).getHost().compareTo(host) == 0) {
        DownloadLink link=linkList.remove(i);
        totalLinkList.remove(link);
        linkListHost.add(link);
        link.setFilePackage(fp);
        ++files;
      }
    }
    if (files == 0) {
      return;
    }
    fp.setDownloadLinks(linkListHost);
    tab.setLinkList(linkList);
  }
  parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
  if (mStartAfterAdding.isSelected())   parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
  parentFrame.setDropTargetText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + files);
}","private void confirmPackage(int idx,String host){
  PackageTab tab=tabList.get(idx);
  Vector<DownloadLink> linkList=tab.getLinkList();
  int files=linkList.size();
  if (files == 0) {
    return;
  }
  Color c=new Color((int)(Math.random() * 0xffffff));
  c=c.brighter();
  FilePackage fp=new FilePackage();
  fp.setProperty(""String_Node_Str"",c);
  fp.setName(tab.getPackageName());
  fp.setComment(tab.getComment());
  fp.setPassword(tab.getPassword());
  fp.setExtractAfterDownload(tab.isExtract());
  addToDownloadDirs(tab.getDownloadDirectory(),tab.getPackageName());
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
    File file=new File(new File(tab.getDownloadDirectory()),tab.getPackageName());
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
      if (!file.exists()) {
        file.mkdirs();
      }
    }
 else     fp.setDownloadDirectory(file.getAbsolutePath());
  }
 else {
    fp.setDownloadDirectory(tab.getDownloadDirectory());
  }
  if (host == null) {
    fp.setDownloadLinks(linkList);
    for (int i=0; i < files; i++) {
      linkList.elementAt(i).setFilePackage(fp);
    }
  }
 else {
    Vector<DownloadLink> linkListHost=new Vector<DownloadLink>();
    files=0;
    for (int i=tab.getLinkList().size() - 1; i >= 0; --i) {
      if (linkList.elementAt(i).getHost().compareTo(host) == 0) {
        DownloadLink link=linkList.remove(i);
        totalLinkList.remove(link);
        linkListHost.add(link);
        link.setFilePackage(fp);
        ++files;
      }
    }
    if (files == 0) {
      return;
    }
    fp.setDownloadLinks(linkListHost);
    tab.setLinkList(linkList);
  }
  parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
  if (mStartAfterAdding.isSelected())   parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
  parentFrame.setDropTargetText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + files);
}"
21180,"public ConfigContainer setupContainer(){
  ConfigContainer container=new ConfigContainer(this);
  config=JDUtilities.getSubConfig(""String_Node_Str"");
  ConfigEntry ce;
  ConfigEntry conditionEntry;
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,JDUtilities.getConfiguration(),Configuration.PARAM_DOWNLOAD_DIRECTORY,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,JDUtilities.getConfiguration(),Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  String[] removeDownloads=new String[]{JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str"")};
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX_INDEX,JDUtilities.getConfiguration(),Configuration.PARAM_FINISHED_DOWNLOADS_ACTION,removeDownloads,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(removeDownloads[1]);
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME),SimpleGUI.PARAM_START_DOWNLOADS_AFTER_START,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  String[] fileExists=new String[]{JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str"")};
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX_INDEX,config,Configuration.PARAM_FILE_EXISTS,fileExists,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(fileExists[1]);
  ConfigContainer network=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  container.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,network));
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_READ_TIMEOUT,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,120000));
  ce.setDefaultValue(100000);
  ce.setStep(500);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_CONNECT_TIMEOUT,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,120000));
  ce.setDefaultValue(100000);
  ce.setStep(500);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,SingleDownloadController.WAIT_TIME_ON_CONNECTION_LOSS,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,24 * 60 * 60));
  ce.setDefaultValue(5 * 60);
  ce.setStep(1);
  network.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  network.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,Configuration.USE_PROXY,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""));
  conditionEntry.setDefaultValue(false);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_HOST,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PROXY_PORT,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,65535));
  ce.setDefaultValue(8080);
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_USER,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_PASS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  network.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,Configuration.USE_SOCKS,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""));
  conditionEntry.setDefaultValue(false);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.SOCKS_HOST,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.SOCKS_PORT,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,65535));
  ce.setDefaultValue(1080);
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_USER_SOCKS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_PASS_SOCKS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  ConfigContainer download=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  container.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,download));
  download.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,20));
  ce.setDefaultValue(2);
  ce.setStep(1);
  download.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN_PER_HOST,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,20));
  ce.setDefaultValue(0);
  ce.setStep(1);
  download.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,20));
  conditionEntry.setDefaultValue(2);
  conditionEntry.setStep(1);
  download.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,PluginForHost.PARAM_MAX_RETRIES,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,20));
  ce.setDefaultValue(3);
  ce.setStep(1);
  download.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ConfigContainer extended=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  container.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,extended));
  extended.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,Configuration.PARAM_GLOBAL_IP_DISABLE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PARAM_GLOBAL_IP_CHECK_SITE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PARAM_GLOBAL_IP_PATTERN,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PARAM_GLOBAL_IP_MASK,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"" + ""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str""),10,60 * 60));
  ce.setDefaultValue(10 * 60);
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",false);
  extended.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,Configuration.PARAM_DO_CRC,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,4));
  ce.setDefaultValue(1);
  return container;
}","public ConfigContainer setupContainer(){
  ConfigContainer container=new ConfigContainer(this);
  config=JDUtilities.getSubConfig(""String_Node_Str"");
  ConfigEntry ce;
  ConfigEntry conditionEntry;
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,JDUtilities.getConfiguration(),Configuration.PARAM_DOWNLOAD_DIRECTORY,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,JDUtilities.getConfiguration(),Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
    container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,JDUtilities.getConfiguration(),Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
    ce.setDefaultValue(false);
  }
  String[] removeDownloads=new String[]{JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str"")};
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX_INDEX,JDUtilities.getConfiguration(),Configuration.PARAM_FINISHED_DOWNLOADS_ACTION,removeDownloads,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(removeDownloads[1]);
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME),SimpleGUI.PARAM_START_DOWNLOADS_AFTER_START,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  String[] fileExists=new String[]{JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str"")};
  container.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX_INDEX,config,Configuration.PARAM_FILE_EXISTS,fileExists,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(fileExists[1]);
  ConfigContainer network=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  container.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,network));
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_READ_TIMEOUT,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,120000));
  ce.setDefaultValue(100000);
  ce.setStep(500);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_CONNECT_TIMEOUT,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,120000));
  ce.setDefaultValue(100000);
  ce.setStep(500);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,SingleDownloadController.WAIT_TIME_ON_CONNECTION_LOSS,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,24 * 60 * 60));
  ce.setDefaultValue(5 * 60);
  ce.setStep(1);
  network.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  network.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,Configuration.USE_PROXY,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""));
  conditionEntry.setDefaultValue(false);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_HOST,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PROXY_PORT,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,65535));
  ce.setDefaultValue(8080);
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_USER,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_PASS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  network.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,Configuration.USE_SOCKS,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""));
  conditionEntry.setDefaultValue(false);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.SOCKS_HOST,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.SOCKS_PORT,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,65535));
  ce.setDefaultValue(1080);
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_USER_SOCKS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  network.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PROXY_PASS_SOCKS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  ConfigContainer download=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  container.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,download));
  download.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,20));
  ce.setDefaultValue(2);
  ce.setStep(1);
  download.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN_PER_HOST,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,20));
  ce.setDefaultValue(0);
  ce.setStep(1);
  download.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,20));
  conditionEntry.setDefaultValue(2);
  conditionEntry.setStep(1);
  download.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,PluginForHost.PARAM_MAX_RETRIES,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,20));
  ce.setDefaultValue(3);
  ce.setStep(1);
  download.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ConfigContainer extended=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  container.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,extended));
  extended.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,Configuration.PARAM_GLOBAL_IP_DISABLE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PARAM_GLOBAL_IP_CHECK_SITE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PARAM_GLOBAL_IP_PATTERN,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,config,Configuration.PARAM_GLOBAL_IP_MASK,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"" + ""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str""),10,60 * 60));
  ce.setDefaultValue(10 * 60);
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",false);
  extended.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,Configuration.PARAM_DO_CRC,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,config,""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  extended.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,config,""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,4));
  ce.setDefaultValue(1);
  return container;
}"
21181,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  getFileInformation(downloadLink);
  Form free=br.getForm(4);
  free.put(""String_Node_Str"",""String_Node_Str"");
  br.setDebug(true);
  br.submitForm(free);
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  this.sleep(60000,downloadLink);
  dl=br.openDownload(downloadLink,url,true,1);
  if (dl.getConnection().getResponseCode() == 404) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  getFileInformation(downloadLink);
  Form free=br.getForm(4);
  if (free == null)   throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  free.put(""String_Node_Str"",""String_Node_Str"");
  br.setDebug(true);
  br.submitForm(free);
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  this.sleep(60000,downloadLink);
  dl=br.openDownload(downloadLink,url,true,1);
  if (dl.getConnection().getResponseCode() == 404) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  dl.startDownload();
}"
21182,"public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else {
        requestParameter.put(key,value);
      }
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0) {
          setspeed=0;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1) {
          maxdls=1;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
        }
 else {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
synchronized (JDWebinterface.Link_Adder_Packages) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  JDWebinterface.Link_Adder_Packages.get(i).setName(Encoding.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
            }
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                for (int ii=0; ii < JDWebinterface.Link_Adder_Packages.get(i).size(); ii++) {
                  links.add(JDWebinterface.Link_Adder_Packages.get(i).get(ii));
                }
              }
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                if (link.isAvailabilityChecked() == true && link.isAvailable() == false) {
                  link.getFilePackage().remove(link);
                }
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    fp.setDownloadDirectory(file.getAbsolutePath());
                  }
 else {
                    fp.setDownloadDirectory(fp.getDownloadDirectory());
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0) {
                JDWebinterface.Link_Adder_Packages.remove(index);
              }
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.getLinkStatus().setStatus(LinkStatus.TODO);
              link.getLinkStatus().setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDReconnect implements Runnable {
        JDReconnect(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          boolean tmp=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
          if (JDUtilities.getController().getRunningDownloadNum() > 0) {
            JDUtilities.getController().stopDownloads();
          }
          if (Reconnecter.waitForNewIP(1)) {
            logger.info(""String_Node_Str"");
          }
 else {
            logger.info(""String_Node_Str"");
          }
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,tmp);
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDReconnect jdrc=new JDReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jdc=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_STOP_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdrs=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        addLinks(waitingLinkList);
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        File container=JDUtilities.getResourceFile(""String_Node_Str"" + requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=JDUtilities.getController().getContainerLinks(container);
        addLinks(waitingLinkList);
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String passwordList=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        for (        OptionalPluginWrapper wrapper : OptionalPluginWrapper.getOptionalWrapper()) {
          if (wrapper.isEnabled() && wrapper.getPlugin().getClass().getName().endsWith(""String_Node_Str"")) {
            ArrayList<String> pws=new ArrayList<String>();
            for (            String pw : Regex.getLines(passwordList)) {
              pws.add(0,pw);
            }
            Object obj=wrapper.getPlugin().interact(""String_Node_Str"",pws);
            if (obj == null)             logger.warning(""String_Node_Str"");
            break;
          }
        }
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}","public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else {
        requestParameter.put(key,value);
      }
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0) {
          setspeed=0;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1) {
          maxdls=1;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
        }
 else {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
synchronized (JDWebinterface.Link_Adder_Packages) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  JDWebinterface.Link_Adder_Packages.get(i).setName(Encoding.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
            }
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                for (int ii=0; ii < JDWebinterface.Link_Adder_Packages.get(i).size(); ii++) {
                  links.add(JDWebinterface.Link_Adder_Packages.get(i).get(ii));
                }
              }
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                if (link.isAvailabilityChecked() == true && link.isAvailable() == false) {
                  link.getFilePackage().remove(link);
                }
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
                      if (!file.exists()) {
                        file.mkdirs();
                      }
                    }
 else                     fp.setDownloadDirectory(file.getAbsolutePath());
                  }
 else {
                    fp.setDownloadDirectory(fp.getDownloadDirectory());
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0) {
                JDWebinterface.Link_Adder_Packages.remove(index);
              }
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.getLinkStatus().setStatus(LinkStatus.TODO);
              link.getLinkStatus().setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDReconnect implements Runnable {
        JDReconnect(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          boolean tmp=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
          if (JDUtilities.getController().getRunningDownloadNum() > 0) {
            JDUtilities.getController().stopDownloads();
          }
          if (Reconnecter.waitForNewIP(1)) {
            logger.info(""String_Node_Str"");
          }
 else {
            logger.info(""String_Node_Str"");
          }
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,tmp);
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDReconnect jdrc=new JDReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jdc=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_STOP_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdrs=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        addLinks(waitingLinkList);
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        File container=JDUtilities.getResourceFile(""String_Node_Str"" + requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=JDUtilities.getController().getContainerLinks(container);
        addLinks(waitingLinkList);
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String passwordList=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        for (        OptionalPluginWrapper wrapper : OptionalPluginWrapper.getOptionalWrapper()) {
          if (wrapper.isEnabled() && wrapper.getPlugin().getClass().getName().endsWith(""String_Node_Str"")) {
            ArrayList<String> pws=new ArrayList<String>();
            for (            String pw : Regex.getLines(passwordList)) {
              pws.add(0,pw);
            }
            Object obj=wrapper.getPlugin().interact(""String_Node_Str"",pws);
            if (obj == null)             logger.warning(""String_Node_Str"");
            break;
          }
        }
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}"
21183,"public ArrayList<DownloadLink> getAvailableDownloads(DownloadLink downloadLink,int activeCaptchas) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  this.downloadLink=downloadLink;
  String link=(String)downloadLink.getProperty(""String_Node_Str"");
  String[] mirrors=(String[])downloadLink.getProperty(""String_Node_Str"");
  int c=0;
  while (active > activeCaptchas) {
    if (c++ == 120)     break;
    Thread.sleep(100);
  }
  downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
  downloadLink.requestGuiUpdate();
  ArrayList<DownloadLink> dls=getDLinks(link);
  if (dls.size() < 1) {
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    if (linkStatus.getErrorMessage() == null || linkStatus.getErrorMessage().endsWith(""String_Node_Str""))     linkStatus.setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    logger.warning(""String_Node_Str"");
    return null;
  }
  Vector<Integer> down=new Vector<Integer>();
  Vector<DownloadLink> ret=new Vector<DownloadLink>();
  ArrayList<DownloadLink> fp=new ArrayList<DownloadLink>();
  for (int i=dls.size() - 1; i >= 0; i--) {
    DistributeData distributeData=new DistributeData(dls.get(i).getDownloadURL());
    Vector<DownloadLink> links=distributeData.findLinks();
    boolean online=false;
    DownloadLink[] it2=links.toArray(new DownloadLink[links.size()]);
    if (it2.length > 0) {
      boolean[] re=it2[0].getPlugin().checkLinks(it2);
      if (re == null || re.length != it2.length) {
        re=new boolean[it2.length];
        for (int j=0; j < re.length; j++) {
          re[j]=it2[j].isAvailable();
        }
      }
      for (int j=0; j < it2.length; j++) {
        if (re[j]) {
          fp.add(it2[j]);
          online=true;
        }
 else         down.add(j);
      }
      if (online) {
        ret.addAll(links);
      }
    }
  }
  if (mirrors != null) {
    for (    String element : mirrors) {
      if (down.size() > 0) {
        try {
          dls=getDLinks(element);
          Iterator<Integer> iter=down.iterator();
          while (iter.hasNext()) {
            Integer integer=(Integer)iter.next();
            DistributeData distributeData=new DistributeData(dls.get(integer).getDownloadURL());
            Vector<DownloadLink> links=distributeData.findLinks();
            DownloadLink[] it2=links.toArray(new DownloadLink[links.size()]);
            if (it2.length > 0) {
              boolean online=false;
              boolean[] re=it2[0].getPlugin().checkLinks(it2);
              if (re == null || re.length != it2.length) {
                re=new boolean[it2.length];
                for (int j=0; j < re.length; j++) {
                  re[j]=it2[j].isAvailable();
                }
              }
              for (int i=0; i < it2.length; i++) {
                if (re[i]) {
                  fp.add(it2[i]);
                  online=true;
                  iter.remove();
                }
              }
              if (online) {
                ret.addAll(links);
              }
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        break;
      }
    }
  }
  if (down.size() > 0) {
    linkStatus.addStatus(LinkStatus.ERROR_FATAL);
    linkStatus.setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    return null;
  }
  Iterator<DownloadLink> fpi=fp.iterator();
  while (fpi.hasNext()) {
    fpi.next().addSourcePluginPasswords(passwords);
  }
  return fp;
}","public ArrayList<DownloadLink> getAvailableDownloads(DownloadLink downloadLink,int activeCaptchas) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  this.downloadLink=downloadLink;
  String link=(String)downloadLink.getProperty(""String_Node_Str"");
  String[] mirrors=(String[])downloadLink.getProperty(""String_Node_Str"");
  int c=0;
  while (active > activeCaptchas) {
    if (c++ == 120)     break;
    Thread.sleep(100);
  }
  downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
  downloadLink.requestGuiUpdate();
  ArrayList<DownloadLink> dls=getDLinks(link);
  if (dls.size() < 1) {
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    if (linkStatus.getErrorMessage() == null || linkStatus.getErrorMessage().endsWith(""String_Node_Str""))     linkStatus.setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    logger.warning(""String_Node_Str"");
    return null;
  }
  ArrayList<DownloadLink> finaldls=new ArrayList<DownloadLink>();
  for (  DownloadLink dls2 : dls) {
    DistributeData distributeData=new DistributeData(dls2.getDownloadURL());
    finaldls.addAll(distributeData.findLinks());
  }
  if (finaldls.size() > 0) {
    try {
      DownloadLink[] linksar=finaldls.toArray(new DownloadLink[finaldls.size()]);
      linksar[0].getPlugin().checkLinks(linksar);
      for (      DownloadLink downloadLink2 : linksar) {
        if (!downloadLink2.isAvailable()) {
          finaldls=null;
          break;
        }
      }
    }
 catch (    Exception e) {
      finaldls=null;
    }
  }
  if (mirrors != null && finaldls == null) {
    for (    String element : mirrors) {
      try {
        dls=getDLinks(element);
        finaldls=new ArrayList<DownloadLink>();
        for (        DownloadLink dls2 : dls) {
          DistributeData distributeData=new DistributeData(dls2.getDownloadURL());
          finaldls.addAll(distributeData.findLinks());
        }
        if (finaldls.size() > 0) {
          try {
            DownloadLink[] linksar=finaldls.toArray(new DownloadLink[finaldls.size()]);
            linksar[0].getPlugin().checkLinks(linksar);
            for (            DownloadLink downloadLink2 : linksar) {
              if (!downloadLink2.isAvailable()) {
                finaldls=null;
                break;
              }
            }
          }
 catch (          Exception e) {
            finaldls=null;
          }
        }
      }
 catch (      Exception e) {
        finaldls=null;
        e.printStackTrace();
      }
      if (finaldls != null)       break;
    }
  }
  if (finaldls == null) {
    linkStatus.addStatus(LinkStatus.ERROR_FATAL);
    linkStatus.setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    return null;
  }
  for (  DownloadLink downloadLink2 : finaldls) {
    downloadLink2.addSourcePluginPasswords(passwords);
  }
  return finaldls;
}"
21184,"public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else {
        requestParameter.put(key,value);
      }
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0) {
          setspeed=0;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1) {
          maxdls=1;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
        }
 else {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
synchronized (JDWebinterface.Link_Adder_Packages) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  JDWebinterface.Link_Adder_Packages.get(i).setName(Encoding.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
            }
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                for (int ii=0; ii < JDWebinterface.Link_Adder_Packages.get(i).size(); ii++) {
                  links.add(JDWebinterface.Link_Adder_Packages.get(i).get(ii));
                }
              }
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                if (link.isAvailabilityChecked() == true && link.isAvailable() == false) {
                  link.getFilePackage().remove(link);
                }
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    fp.setDownloadDirectory(file.getAbsolutePath());
                  }
 else {
                    fp.setDownloadDirectory(fp.getDownloadDirectory());
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0) {
                JDWebinterface.Link_Adder_Packages.remove(index);
              }
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.getLinkStatus().setStatus(LinkStatus.TODO);
              link.getLinkStatus().setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDReconnect implements Runnable {
        JDReconnect(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          boolean tmp=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
          if (JDUtilities.getController().getRunningDownloadNum() > 0) {
            JDUtilities.getController().stopDownloads();
          }
          if (Reconnecter.waitForNewIP(1)) {
            logger.info(""String_Node_Str"");
          }
 else {
            logger.info(""String_Node_Str"");
          }
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,tmp);
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDReconnect jdrc=new JDReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jdc=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_STOP_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdrs=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        addLinks(waitingLinkList);
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        File container=JDUtilities.getResourceFile(""String_Node_Str"" + requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=loadContainerFile(container);
        addLinks(waitingLinkList);
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String passwordList=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        for (        OptionalPluginWrapper wrapper : OptionalPluginWrapper.getOptionalWrapper()) {
          if (wrapper.isEnabled() && wrapper.getPlugin().getClass().getName().endsWith(""String_Node_Str"")) {
            ArrayList<String> pws=new ArrayList<String>();
            for (            String pw : Regex.getLines(passwordList)) {
              pws.add(0,pw);
            }
            Object obj=wrapper.getPlugin().interact(""String_Node_Str"",pws);
            if (obj == null)             logger.warning(""String_Node_Str"");
            break;
          }
        }
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}","public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else {
        requestParameter.put(key,value);
      }
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0) {
          setspeed=0;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1) {
          maxdls=1;
        }
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
        }
 else {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
synchronized (JDWebinterface.Link_Adder_Packages) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  JDWebinterface.Link_Adder_Packages.get(i).setName(Encoding.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
            }
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                for (int ii=0; ii < JDWebinterface.Link_Adder_Packages.get(i).size(); ii++) {
                  links.add(JDWebinterface.Link_Adder_Packages.get(i).get(ii));
                }
              }
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                if (link.isAvailabilityChecked() == true && link.isAvailable() == false) {
                  link.getFilePackage().remove(link);
                }
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    fp.setDownloadDirectory(file.getAbsolutePath());
                  }
 else {
                    fp.setDownloadDirectory(fp.getDownloadDirectory());
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0) {
                JDWebinterface.Link_Adder_Packages.remove(index);
              }
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.getLinkStatus().setStatus(LinkStatus.TODO);
              link.getLinkStatus().setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDReconnect implements Runnable {
        JDReconnect(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          boolean tmp=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
          if (JDUtilities.getController().getRunningDownloadNum() > 0) {
            JDUtilities.getController().stopDownloads();
          }
          if (Reconnecter.waitForNewIP(1)) {
            logger.info(""String_Node_Str"");
          }
 else {
            logger.info(""String_Node_Str"");
          }
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,tmp);
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDReconnect jdrc=new JDReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jdc=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getGUI().fireUIEvent(new UIEvent(this,UIEvent.UI_STOP_DOWNLOADS,null));
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdrs=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        addLinks(waitingLinkList);
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        File container=JDUtilities.getResourceFile(""String_Node_Str"" + requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=JDUtilities.getController().getContainerLinks(container);
        addLinks(waitingLinkList);
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String passwordList=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        for (        OptionalPluginWrapper wrapper : OptionalPluginWrapper.getOptionalWrapper()) {
          if (wrapper.isEnabled() && wrapper.getPlugin().getClass().getName().endsWith(""String_Node_Str"")) {
            ArrayList<String> pws=new ArrayList<String>();
            for (            String pw : Regex.getLines(passwordList)) {
              pws.add(0,pw);
            }
            Object obj=wrapper.getPlugin().interact(""String_Node_Str"",pws);
            if (obj == null)             logger.warning(""String_Node_Str"");
            break;
          }
        }
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}"
21185,"public String getContainerFile(){
  String Filename=new File(containerFile).getName();
  return JDUtilities.getResourceFile(""String_Node_Str"" + Filename).getAbsolutePath();
}","public String getContainerFile(){
  if (containerFile == null)   return null;
  String Filename=new File(containerFile).getName();
  return JDUtilities.getResourceFile(""String_Node_Str"" + Filename).getAbsolutePath();
}"
21186,"private void chmodUnrar(String path){
  Executer exec=new Executer(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  exec.setRunin(path);
  exec.setWaitTimeout(2);
  exec.start();
  exec.waitTimeout();
}","private void chmodUnrar(String path){
  Executer exec=new Executer(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  exec.setRunin(path);
  exec.setWaitTimeout(-1);
  exec.start();
  exec.waitTimeout();
}"
21187,"@Override public boolean getFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  url=downloadLink.getDownloadURL() + ""String_Node_Str"";
  this.setBrowserExclusive();
  br.setAcceptLanguage(""String_Node_Str"");
  String id=new Regex(url,""String_Node_Str"").getMatch(0);
  br.postPage(""String_Node_Str"",""String_Node_Str"" + id);
  String infos[][]=br.getRegex(""String_Node_Str"").getMatches();
  if (infos.length != 1 && infos[0].length != 4 && !infos[0][1].equalsIgnoreCase(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setDownloadSize(Long.parseLong(infos[0][3].trim()));
  downloadLink.setName(infos[0][2].trim());
  return true;
}","@Override public boolean getFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  url=downloadLink.getDownloadURL() + ""String_Node_Str"";
  this.setBrowserExclusive();
  br.setAcceptLanguage(""String_Node_Str"");
  String id=new Regex(url,""String_Node_Str"").getMatch(0);
  if (br.postPage(""String_Node_Str"",""String_Node_Str"" + id).matches(""String_Node_Str"")) {
    br.getPage(""String_Node_Str"");
    String[] strings=br.getRegex(""String_Node_Str"").getRow(0);
    downloadLink.setDownloadSize(Regex.getSize(strings[0].trim()));
    downloadLink.setName(strings[1].trim());
    return true;
  }
  String infos[][]=br.getRegex(""String_Node_Str"").getMatches();
  if (infos.length != 1 && infos[0].length != 4 && !infos[0][1].equalsIgnoreCase(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setDownloadSize(Long.parseLong(infos[0][3].trim()));
  downloadLink.setName(infos[0][2].trim());
  return true;
}"
21188,"/** 
 * das controllevent fängt heruntergeladene file ab und wertet sie aus
 */
@SuppressWarnings(""String_Node_Str"") @Override public void controlEvent(ControlEvent event){
  super.controlEvent(event);
  DownloadLink link;
switch (event.getID()) {
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
    if (this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
      if (!(event.getSource() instanceof PluginForHost)) {
        return;
      }
      link=((SingleDownloadController)event.getParameter()).getDownloadLink();
      link=findStartLink(link);
      if (link == null)       return;
      if (link.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
        if (link.getFilePackage().isExtractAfterDownload() || link.getFilePackage() == FilePackage.getDefaultFilePackage()) {
          if (isArchiveComplete(link)) {
            this.addToQueue(link);
          }
        }
      }
    }
  break;
case ControlEvent.CONTROL_ON_FILEOUTPUT:
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_DEEP_EXTRACT,true)) {
  try {
    File[] list=(File[])event.getParameter();
    for (    File archiveStartFile : list) {
      if (getArchivePartType(archiveStartFile) == JDUnrarConstants.NO_RAR_ARCHIVE || getArchivePartType(archiveStartFile) == JDUnrarConstants.NO_START_PART)       continue;
      link=JDUtilities.getController().getDownloadLinkByFileOutput(archiveStartFile);
      if (link == null) {
        link=new DownloadLink(null,archiveStartFile.getName(),DUMMY_HOSTER,""String_Node_Str"",true);
        link.setDownloadSize(archiveStartFile.length());
        FilePackage fp=new FilePackage();
        fp.setDownloadDirectory(archiveStartFile.getParent());
        link.setFilePackage(fp);
      }
      link=this.findStartLink(link);
      if (link == null) {
        continue;
      }
      final DownloadLink finalLink=link;
      System.out.print(""String_Node_Str"" + archiveStartFile);
      new Thread(){
        public void run(){
          addToQueue(finalLink);
        }
      }
.start();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
break;
case ControlEvent.CONTROL_DOWNLOADLIST_ADDED_LINKS:
ArrayList<DownloadLink> list=(ArrayList<DownloadLink>)event.getParameter();
FilePackage old=null;
for (DownloadLink l : list) {
if (l.getFilePackage() == old) continue;
old=l.getFilePackage();
String[] pws=JDUtilities.passwordStringToArray(l.getFilePackage().getPassword());
for (String pw : pws) {
PasswordList.addPassword(pw);
}
}
PasswordList.save();
break;
case ControlEvent.CONTROL_LINKLIST_CONTEXT_MENU:
ArrayList<MenuItem> items=(ArrayList<MenuItem>)event.getParameter();
MenuItem m;
MenuItem container=new MenuItem(MenuItem.CONTAINER,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0);
items.add(container);
if (event.getSource() instanceof DownloadLink) {
link=(DownloadLink)event.getSource();
container.addMenuItem(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1000).setActionListener(this));
m.setEnabled(false);
boolean isLocalyAvailable=(new File(link.getFileOutput()).exists() || new File(link.getStringProperty(DownloadLink.STATIC_OUTPUTFILE,link.getFileOutput())).exists());
if (isLocalyAvailable && link.getName().matches(""String_Node_Str"")) m.setEnabled(true);
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(m=new MenuItem(MenuItem.SEPARATOR));
container.addMenuItem(m=new MenuItem(MenuItem.NORMAL,JDLocale.LF(""String_Node_Str"",""String_Node_Str""),1003).setActionListener(this));
m.setProperty(""String_Node_Str"",link);
File dir=this.getExtractToPath(link);
while (dir != null && !dir.exists()) dir=dir.getParentFile();
if (dir != null) {
container.addMenuItem(m=new MenuItem(MenuItem.NORMAL,JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dir.getAbsolutePath()),1002).setActionListener(this));
m.setProperty(""String_Node_Str"",link);
}
}
 else {
FilePackage fp=(FilePackage)event.getSource();
container.addMenuItem(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1001).setActionListener(this));
m.setProperty(""String_Node_Str"",fp);
}
break;
}
}","/** 
 * das controllevent fängt heruntergeladene file ab und wertet sie aus
 */
@SuppressWarnings(""String_Node_Str"") @Override public void controlEvent(ControlEvent event){
  super.controlEvent(event);
  DownloadLink link;
switch (event.getID()) {
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
    if (this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
      if (!(event.getSource() instanceof PluginForHost)) {
        return;
      }
      link=((SingleDownloadController)event.getParameter()).getDownloadLink();
      link=findStartLink(link);
      if (link == null)       return;
      if (link.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
        if (link.getFilePackage().isExtractAfterDownload() || link.getFilePackage() == FilePackage.getDefaultFilePackage()) {
          if (isArchiveComplete(link)) {
            this.addToQueue(link);
          }
        }
      }
    }
  break;
case ControlEvent.CONTROL_ON_FILEOUTPUT:
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_DEEP_EXTRACT,true)) {
  try {
    File[] list=(File[])event.getParameter();
    for (    File archiveStartFile : list) {
      if (getArchivePartType(archiveStartFile) == JDUnrarConstants.NO_RAR_ARCHIVE || getArchivePartType(archiveStartFile) == JDUnrarConstants.NO_START_PART)       continue;
      link=JDUtilities.getController().getDownloadLinkByFileOutput(archiveStartFile);
      if (link == null) {
        link=new DownloadLink(null,archiveStartFile.getName(),DUMMY_HOSTER,""String_Node_Str"",true);
        link.setDownloadSize(archiveStartFile.length());
        FilePackage fp=new FilePackage();
        fp.setDownloadDirectory(archiveStartFile.getParent());
        link.setFilePackage(fp);
      }
      link=this.findStartLink(link);
      if (link == null) {
        continue;
      }
      final DownloadLink finalLink=link;
      System.out.print(""String_Node_Str"" + archiveStartFile);
      new Thread(){
        public void run(){
          addToQueue(finalLink);
        }
      }
.start();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
break;
case ControlEvent.CONTROL_DOWNLOADLIST_ADDED_LINKS:
ArrayList<DownloadLink> list=(ArrayList<DownloadLink>)event.getParameter();
FilePackage old=null;
for (DownloadLink l : list) {
if (l.getFilePackage() == old) continue;
old=l.getFilePackage();
String[] pws=JDUtilities.passwordStringToArray(l.getFilePackage().getPassword());
for (String pw : pws) {
PasswordList.addPassword(pw);
}
}
PasswordList.save();
break;
case ControlEvent.CONTROL_LINKLIST_CONTEXT_MENU:
ArrayList<MenuItem> items=(ArrayList<MenuItem>)event.getParameter();
MenuItem m;
MenuItem container=new MenuItem(MenuItem.CONTAINER,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0);
items.add(container);
if (event.getSource() instanceof DownloadLink) {
link=(DownloadLink)event.getSource();
container.addMenuItem(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1000).setActionListener(this));
m.setEnabled(false);
boolean isLocalyAvailable=(new File(link.getFileOutput()).exists() || new File(link.getStringProperty(DownloadLink.STATIC_OUTPUTFILE,link.getFileOutput())).exists());
if (isLocalyAvailable && link.getName().matches(""String_Node_Str"")) m.setEnabled(true);
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(m=new MenuItem(MenuItem.TOGGLE,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1005).setActionListener(this));
m.setSelected(link.getFilePackage().isExtractAfterDownload());
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(m=new MenuItem(MenuItem.SEPARATOR));
container.addMenuItem(m=new MenuItem(MenuItem.NORMAL,JDLocale.LF(""String_Node_Str"",""String_Node_Str""),1003).setActionListener(this));
m.setProperty(""String_Node_Str"",link);
File dir=this.getExtractToPath(link);
while (dir != null && !dir.exists()) dir=dir.getParentFile();
container.addMenuItem(m=new MenuItem(MenuItem.NORMAL,JDLocale.LF(""String_Node_Str"",""String_Node_Str"",dir.getAbsolutePath()),1002).setActionListener(this));
m.setEnabled(dir != null);
m.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH + ""String_Node_Str"",dir.getAbsolutePath());
m.setProperty(""String_Node_Str"",link);
}
 else {
FilePackage fp=(FilePackage)event.getSource();
container.addMenuItem(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1001).setActionListener(this));
m.setProperty(""String_Node_Str"",fp);
container.addMenuItem(m=new MenuItem(MenuItem.TOGGLE,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1006).setActionListener(this));
m.setSelected(fp.isExtractAfterDownload());
m.setProperty(""String_Node_Str"",fp);
}
break;
}
}"
21189,"public void initConfig(){
  SubConfiguration subConfig=getPluginConfig();
  ConfigEntry ce;
  ConfigEntry conditionEntry;
  if (OSDetector.isWindows()) {
    subConfig.setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
    subConfig.save();
  }
  String unrar=this.getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  if (unrar == null || !isUnrarCommandValid(unrar)) {
    checkUnrarCommand();
  }
  if (!OSDetector.isWindows())   config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_USE_EXTRACT_PATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,JDUnrarConstants.CONFIG_KEY_UNRARPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_OVERWRITE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  this.passwordConfig=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,passwordConfig));
  JDUtilities.getSubConfig(PasswordList.PROPERTY_PASSWORDLIST).addConfigurationListener(new ConfigurationListener(){
    @Override public void onPostSave(    SubConfiguration subConfiguration){
    }
    @Override public void onPreSave(    SubConfiguration subConfiguration){
      PasswordList.cleanList();
    }
  }
);
  passwordConfig.addEntry(new ConfigEntry(ConfigContainer.TYPE_TEXTAREA,JDUtilities.getSubConfig(PasswordList.PROPERTY_PASSWORDLIST),""String_Node_Str"",JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Regex.getLines(JDUtilities.getSubConfig(PasswordList.PROPERTY_PASSWORDLIST).getStringProperty(""String_Node_Str"",""String_Node_Str"")).length + ""String_Node_Str"")));
  ConfigContainer ext=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,ext));
  ext.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,JDUnrarConstants.CONFIG_KEY_SUBPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,JDUnrarConstants.CONFIG_KEY_SUBPATH_MINNUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,600).setDefaultValue(0));
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_DEEP_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
}","public void initConfig(){
  SubConfiguration subConfig=getPluginConfig();
  ConfigEntry ce;
  ConfigEntry conditionEntry;
  if (OSDetector.isWindows()) {
    subConfig.setProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath());
    subConfig.save();
  }
  String unrar=this.getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,null);
  if (unrar == null || !isUnrarCommandValid(unrar)) {
    checkUnrarCommand();
  }
  if (!OSDetector.isWindows())   config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_USE_EXTRACT_PATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,JDUnrarConstants.CONFIG_KEY_UNRARPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_OVERWRITE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
  this.passwordConfig=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,passwordConfig));
  JDUtilities.getSubConfig(PasswordList.PROPERTY_PASSWORDLIST).addConfigurationListener(new ConfigurationListener(){
    @Override public void onPostSave(    SubConfiguration subConfiguration){
    }
    @Override public void onPreSave(    SubConfiguration subConfiguration){
      PasswordList.cleanList();
    }
  }
);
  passwordConfig.addEntry(new ConfigEntry(ConfigContainer.TYPE_TEXTAREA,JDUtilities.getSubConfig(PasswordList.PROPERTY_PASSWORDLIST),""String_Node_Str"",JDLocale.LF(""String_Node_Str"",""String_Node_Str"",Regex.getLines(JDUtilities.getSubConfig(PasswordList.PROPERTY_PASSWORDLIST).getStringProperty(""String_Node_Str"",""String_Node_Str"")).length + ""String_Node_Str"")));
  ConfigContainer ext=new ConfigContainer(this,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CONTAINER,ext));
  ext.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  conditionEntry.setDefaultValue(false);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,JDUnrarConstants.CONFIG_KEY_SUBPATH,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,""String_Node_Str"",true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,JDUnrarConstants.CONFIG_KEY_SUBPATH_MINNUM,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,600).setDefaultValue(0));
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_DEEP_EXTRACT,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(true);
  ext.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(false);
}"
21190,"private void actionPerformedOnMenuItem(ActionEvent e,MenuItem source){
  SubConfiguration cfg=this.getPluginConfig();
  DownloadLink link;
switch (source.getActionID()) {
case 1:
    cfg.setProperty(""String_Node_Str"",!cfg.getBooleanProperty(""String_Node_Str"",true));
  cfg.save();
break;
case 21:
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setMultiSelectionEnabled(true);
FileFilter ff=new FileFilter(){
public boolean accept(File pathname){
if (pathname.getName().matches(""String_Node_Str"")) return true;
if (!pathname.getName().matches(""String_Node_Str"") && pathname.getName().matches(""String_Node_Str"")) {
return true;
}
if (pathname.isDirectory()) return true;
return false;
}
@Override public String getDescription(){
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
}
}
;
fc.setFileFilter(ff);
if (fc.showOpenDialog(SimpleGUI.CURRENTGUI.getFrame()) == JDFileChooser.APPROVE_OPTION) {
File[] list=fc.getSelectedFiles();
if (list == null) return;
for (File archiveStartFile : list) {
link=JDUtilities.getController().getDownloadLinkByFileOutput(archiveStartFile);
if (link == null) {
link=new DownloadLink(null,archiveStartFile.getName(),DUMMY_HOSTER,""String_Node_Str"",true);
link.setDownloadSize(archiveStartFile.length());
FilePackage fp=new FilePackage();
fp.setDownloadDirectory(archiveStartFile.getParent());
link.setFilePackage(fp);
}
link=this.findStartLink(link);
if (link == null) {
continue;
}
final DownloadLink finalLink=link;
System.out.print(""String_Node_Str"" + archiveStartFile);
new Thread(){
public void run(){
addToQueue(finalLink);
}
}
.start();
}
}
break;
case 4:
SimpleGUI.showConfigDialog(SimpleGUI.CURRENTGUI.getFrame(),config);
break;
case 5:
SimpleGUI.showConfigDialog(SimpleGUI.CURRENTGUI.getFrame(),passwordConfig);
break;
case 1000:
link=this.findStartLink((DownloadLink)source.getProperty(""String_Node_Str""));
if (link == null) {
return;
}
final DownloadLink finalLink=link;
System.out.print(""String_Node_Str"" + link);
new Thread(){
public void run(){
addToQueue(finalLink);
}
}
.start();
break;
case 1001:
FilePackage fp=(FilePackage)source.getProperty(""String_Node_Str"");
ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
for (DownloadLink l : fp.getDownloadLinks()) {
if (l.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
if (l.getName().matches(""String_Node_Str"") || (!l.getName().matches(""String_Node_Str"") && l.getName().matches(""String_Node_Str""))) {
links.add(l);
}
}
}
if (links.size() <= 0) return;
for (DownloadLink link0 : links) {
link=link0;
link=this.findStartLink(link);
if (link == null) {
continue;
}
final DownloadLink finalLink0=link;
System.out.print(""String_Node_Str"" + link);
new Thread(){
public void run(){
addToQueue(finalLink0);
}
}
.start();
}
break;
case 1002:
link=(DownloadLink)source.getProperty(""String_Node_Str"");
if (link == null) {
return;
}
String path=link.getStringProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH);
JDUtilities.openExplorer(new File(path));
break;
case 1003:
link=(DownloadLink)source.getProperty(""String_Node_Str"");
ArrayList<DownloadLink> list=this.getArchiveList(link);
fc=new JDFileChooser(""String_Node_Str"");
fc.setMultiSelectionEnabled(false);
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
ff=new FileFilter(){
public boolean accept(File pathname){
if (pathname.isDirectory()) return true;
return false;
}
@Override public String getDescription(){
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
}
}
;
fc.setFileFilter(ff);
File extractto=this.getExtractToPath(link);
while (extractto != null && !extractto.isDirectory()) extractto=extractto.getParentFile();
fc.setCurrentDirectory(extractto);
if (fc.showOpenDialog(SimpleGUI.CURRENTGUI.getFrame()) == JDFileChooser.APPROVE_OPTION) {
File dl=fc.getSelectedFile();
if (dl == null) {
return;
}
for (DownloadLink l : list) {
l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTTOPATH,dl);
}
}
break;
}
}","private void actionPerformedOnMenuItem(ActionEvent e,MenuItem source){
  SubConfiguration cfg=this.getPluginConfig();
  DownloadLink link;
switch (source.getActionID()) {
case 1:
    cfg.setProperty(""String_Node_Str"",!cfg.getBooleanProperty(""String_Node_Str"",true));
  cfg.save();
break;
case 21:
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setMultiSelectionEnabled(true);
FileFilter ff=new FileFilter(){
public boolean accept(File pathname){
if (pathname.getName().matches(""String_Node_Str"")) return true;
if (!pathname.getName().matches(""String_Node_Str"") && pathname.getName().matches(""String_Node_Str"")) {
return true;
}
if (pathname.isDirectory()) return true;
return false;
}
@Override public String getDescription(){
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
}
}
;
fc.setFileFilter(ff);
if (fc.showOpenDialog(SimpleGUI.CURRENTGUI.getFrame()) == JDFileChooser.APPROVE_OPTION) {
File[] list=fc.getSelectedFiles();
if (list == null) return;
for (File archiveStartFile : list) {
link=JDUtilities.getController().getDownloadLinkByFileOutput(archiveStartFile);
if (link == null) {
link=new DownloadLink(null,archiveStartFile.getName(),DUMMY_HOSTER,""String_Node_Str"",true);
link.setDownloadSize(archiveStartFile.length());
FilePackage fp=new FilePackage();
fp.setDownloadDirectory(archiveStartFile.getParent());
link.setFilePackage(fp);
}
link=this.findStartLink(link);
if (link == null) {
continue;
}
final DownloadLink finalLink=link;
System.out.print(""String_Node_Str"" + archiveStartFile);
new Thread(){
public void run(){
addToQueue(finalLink);
}
}
.start();
}
}
break;
case 4:
SimpleGUI.showConfigDialog(SimpleGUI.CURRENTGUI.getFrame(),config);
break;
case 5:
SimpleGUI.showConfigDialog(SimpleGUI.CURRENTGUI.getFrame(),passwordConfig);
break;
case 1000:
link=this.findStartLink((DownloadLink)source.getProperty(""String_Node_Str""));
if (link == null) {
return;
}
final DownloadLink finalLink=link;
System.out.print(""String_Node_Str"" + link);
new Thread(){
public void run(){
addToQueue(finalLink);
}
}
.start();
break;
case 1001:
FilePackage fp=(FilePackage)source.getProperty(""String_Node_Str"");
ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
for (DownloadLink l : fp.getDownloadLinks()) {
if (l.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
if (l.getName().matches(""String_Node_Str"") || (!l.getName().matches(""String_Node_Str"") && l.getName().matches(""String_Node_Str""))) {
links.add(l);
}
}
}
if (links.size() <= 0) return;
for (DownloadLink link0 : links) {
link=link0;
link=this.findStartLink(link);
if (link == null) {
continue;
}
final DownloadLink finalLink0=link;
System.out.print(""String_Node_Str"" + link);
new Thread(){
public void run(){
addToQueue(finalLink0);
}
}
.start();
}
break;
case 1002:
link=(DownloadLink)source.getProperty(""String_Node_Str"");
if (link == null) {
return;
}
String path=link.getStringProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH + ""String_Node_Str"");
if (!new File(path).exists()) {
JDUtilities.getGUI().showMessageDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",path));
}
 else {
JDUtilities.openExplorer(new File(path));
}
break;
case 1003:
link=(DownloadLink)source.getProperty(""String_Node_Str"");
ArrayList<DownloadLink> list=this.getArchiveList(link);
fc=new JDFileChooser(""String_Node_Str"");
fc.setMultiSelectionEnabled(false);
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
ff=new FileFilter(){
public boolean accept(File pathname){
if (pathname.isDirectory()) return true;
return false;
}
@Override public String getDescription(){
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
}
}
;
fc.setFileFilter(ff);
File extractto=this.getExtractToPath(link);
while (extractto != null && !extractto.isDirectory()) extractto=extractto.getParentFile();
fc.setCurrentDirectory(extractto);
if (fc.showOpenDialog(SimpleGUI.CURRENTGUI.getFrame()) == JDFileChooser.APPROVE_OPTION) {
File dl=fc.getSelectedFile();
if (dl == null) {
return;
}
for (DownloadLink l : list) {
l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTTOPATH,dl);
}
}
break;
case 1005:
link=(DownloadLink)source.getProperty(""String_Node_Str"");
if (link == null) {
return;
}
link.getFilePackage().setExtractAfterDownload(!link.getFilePackage().isExtractAfterDownload());
break;
case 1006:
fp=(FilePackage)source.getProperty(""String_Node_Str"");
if (fp == null) {
return;
}
fp.setExtractAfterDownload(!fp.isExtractAfterDownload());
break;
}
}"
21191,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  url=downloadLink.getDownloadURL() + ""String_Node_Str"";
  if (!getFileInformation(downloadLink)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  File captchaFile=this.getLocalCaptchaFile(this);
  try {
    Browser.download(captchaFile,br.cloneBrowser().openGetConnection(""String_Node_Str""));
  }
 catch (  Exception e) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  captchaCode=Plugin.getCaptchaCode(captchaFile,this,downloadLink);
  Form form=br.getForm(1);
  if (form.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
  }
  form.put(""String_Node_Str"",captchaCode);
  br.submitForm(form);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
    }
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  if (br.containsHTML(""String_Node_Str"") | br.containsHTML(""String_Node_Str"")) {
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    linkStatus.setValue(3600000l);
    return;
  }
  downloadLink.setProperty(""String_Node_Str"",passCode);
  String all=br.getRegex(""String_Node_Str"").getMatch(-1);
  String dec=br.getRegex(""String_Node_Str"").getMatch(-1);
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  String fun=""String_Node_Str"" + all + ""String_Node_Str""+ dec+ ""String_Node_Str"";
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  url=Context.toString(result);
  Context.exit();
  sleep(15000,downloadLink);
  br.setFollowRedirects(true);
  dl=br.openDownload(downloadLink,url);
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  url=downloadLink.getDownloadURL() + ""String_Node_Str"";
  if (!getFileInformation(downloadLink)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  br.getPage(url);
  File captchaFile=this.getLocalCaptchaFile(this);
  try {
    Browser.download(captchaFile,br.cloneBrowser().openGetConnection(""String_Node_Str""));
  }
 catch (  Exception e) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  captchaCode=Plugin.getCaptchaCode(captchaFile,this,downloadLink);
  Form form=br.getForm(1);
  if (form.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
  }
  form.put(""String_Node_Str"",captchaCode);
  br.submitForm(form);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
    }
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  if (br.containsHTML(""String_Node_Str"") | br.containsHTML(""String_Node_Str"")) {
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    linkStatus.setValue(3600000l);
    return;
  }
  downloadLink.setProperty(""String_Node_Str"",passCode);
  String all=br.getRegex(""String_Node_Str"").getMatch(-1);
  String dec=br.getRegex(""String_Node_Str"").getMatch(-1);
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  String fun=""String_Node_Str"" + all + ""String_Node_Str""+ dec+ ""String_Node_Str"";
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  url=Context.toString(result);
  Context.exit();
  sleep(15000,downloadLink);
  br.setFollowRedirects(true);
  dl=br.openDownload(downloadLink,url);
  dl.startDownload();
}"
21192,"public void handlePremium(DownloadLink parameter,Account account) throws Exception {
  DownloadLink downloadLink=(DownloadLink)parameter;
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  getFileInformation(parameter);
  login(account);
  if (!this.isPremium()) {
    throw new PluginException(LinkStatus.ERROR_PREMIUM,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
  }
  br.getPage(downloadLink.getDownloadURL());
  Form form=br.getForm(1);
  if (form.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
      linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
      return;
    }
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  url=br.getRegex(""String_Node_Str"").getMatch(0);
  br.setFollowRedirects(true);
  dl=br.openDownload(downloadLink,url,true,1);
  dl.startDownload();
}","public void handlePremium(DownloadLink parameter,Account account) throws Exception {
  DownloadLink downloadLink=(DownloadLink)parameter;
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  getFileInformation(parameter);
  url=downloadLink.getDownloadURL() + ""String_Node_Str"";
  login(account);
  if (!this.isPremium()) {
    throw new PluginException(LinkStatus.ERROR_PREMIUM,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
  }
  br.getPage(url);
  Form form=br.getForm(1);
  if (form.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
      linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
      return;
    }
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  url=br.getRegex(""String_Node_Str"").getMatch(0);
  br.setFollowRedirects(true);
  dl=br.openDownload(downloadLink,url,true,1);
  dl.startDownload();
}"
21193,"public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
    if (Sniffy.hasSniffer())     throw new SnifferException();
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  Rapidshare.correctURL(downloadLink);
  checkMirrorsInProgress(downloadLink);
  String freeOrPremiumSelectPostURL=null;
  Browser br=new Browser();
  br.setAcceptLanguage(ACCEPT_LANGUAGE);
  br.setFollowRedirects(false);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    logger.info(""String_Node_Str"");
    this.handlePremium(downloadLink,new Account(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  freeOrPremiumSelectPostURL=new Regex(br,PATTERN_FIND_MIRROR_URL).getMatch(0);
  if (freeOrPremiumSelectPostURL == null) {
    String error=null;
    if ((error=findError(br + ""String_Node_Str"")) != null) {
      throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
    }
    reportUnknownError(br,1);
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  Form[] forms=br.getForms();
  br.submitForm(forms[0]);
  String error=null;
  if ((error=findError(br + ""String_Node_Str"")) != null) {
    if (new Regex(error,""String_Node_Str"").matches()) {
      String waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      if (waitfor == null) {
        waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      }
      long waitTime=60 * 60 * 1000l;
      try {
        waitTime=new Long(waitfor.trim()) * 60 * 1000l;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
    }
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  if (Regex.matches(br,PATTERN_MATCHER_TOO_MANY_USERS)) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,120 * 1000l);
  }
 else   if (new Regex(br,PATTERM_MATCHER_ALREADY_LOADING).matches()) {
    logger.severe(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,120 * 1000l);
  }
 else   if ((error=findError(br + ""String_Node_Str"")) != null) {
    reportUnknownError(br,2);
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  String ticketTime=new Regex(br,PATTERN_FIND_TICKET_WAITTIME).getMatch(0);
  if (ticketTime != null && ticketTime.equals(""String_Node_Str"")) {
    ticketTime=null;
  }
  String ticketCode=br + ""String_Node_Str"";
  String tt=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
  String fun=""String_Node_Str"" + tt + ""String_Node_Str"";
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  String code=Context.toString(result);
  if (tt != null)   ticketCode=code;
  Context.exit();
  if (new Regex(ticketCode,""String_Node_Str"").matches()) {
    String waitfor=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
    long waitTime=60 * 60 * 1000l;
    try {
      waitTime=new Long(waitfor.trim()) * 60 * 1000l;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
  }
  long pendingTime=0;
  if (ticketTime != null) {
    pendingTime=Long.parseLong(ticketTime);
    if (getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) > 0) {
      logger.warning(""String_Node_Str"" + pendingTime + ""String_Node_Str""+ (pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100));
      pendingTime=pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100;
    }
    pendingTime*=1000;
  }
  waitTicketTime(downloadLink,pendingTime);
  if (ticketCode.contains(""String_Node_Str"")) {
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,120000);
  }
  String postTarget=getDownloadTarget(downloadLink,ticketCode);
  if (linkStatus.isFailed())   return;
  Request request=br.createPostRequest(postTarget,""String_Node_Str"" + Math.random() * 40 + ""String_Node_Str"" + Math.random() * 40);
  dl=new RAFDownload(this,downloadLink,request);
  HTTPConnection con=dl.connect();
  if (!con.isContentDisposition() && con.getHeaderField(""String_Node_Str"") != null) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
    if (Sniffy.hasSniffer())     throw new SnifferException();
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  Rapidshare.correctURL(downloadLink);
  checkMirrorsInProgress(downloadLink);
  String freeOrPremiumSelectPostURL=null;
  Browser br=new Browser();
  br.setAcceptLanguage(ACCEPT_LANGUAGE);
  br.setFollowRedirects(false);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    logger.info(""String_Node_Str"");
    this.handlePremium(downloadLink,new Account(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  freeOrPremiumSelectPostURL=new Regex(br,PATTERN_FIND_MIRROR_URL).getMatch(0);
  if (freeOrPremiumSelectPostURL == null) {
    String error=null;
    if ((error=findError(br + ""String_Node_Str"")) != null) {
      throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
    }
    reportUnknownError(br,1);
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  Form[] forms=br.getForms();
  br.submitForm(forms[0]);
  String error=null;
  if ((error=findError(br + ""String_Node_Str"")) != null) {
    if (new Regex(error,""String_Node_Str"").matches()) {
      String waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      if (waitfor == null) {
        waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      }
      long waitTime=60 * 60 * 1000l;
      try {
        waitTime=new Long(waitfor.trim()) * 60 * 1000l;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
    }
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  if (Regex.matches(br,PATTERN_MATCHER_TOO_MANY_USERS)) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,120 * 1000l);
  }
 else   if (new Regex(br,PATTERM_MATCHER_ALREADY_LOADING).matches()) {
    logger.severe(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,120 * 1000l);
  }
 else   if ((error=findError(br + ""String_Node_Str"")) != null) {
    reportUnknownError(br,2);
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  String ticketTime=new Regex(br,PATTERN_FIND_TICKET_WAITTIME).getMatch(0);
  if (ticketTime != null && ticketTime.equals(""String_Node_Str"")) {
    ticketTime=null;
  }
  String ticketCode=br + ""String_Node_Str"";
  String tt=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
  String fun=""String_Node_Str"" + tt + ""String_Node_Str"";
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  String code=Context.toString(result);
  if (tt != null)   ticketCode=code;
  Context.exit();
  if (ticketCode.contains(""String_Node_Str"")) {
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,120000);
  }
  if (new Regex(ticketCode,""String_Node_Str"").matches()) {
    String waitfor=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
    long waitTime=60 * 60 * 1000l;
    try {
      waitTime=new Long(waitfor.trim()) * 60 * 1000l;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
  }
  long pendingTime=0;
  if (ticketTime != null) {
    pendingTime=Long.parseLong(ticketTime);
    if (getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) > 0) {
      logger.warning(""String_Node_Str"" + pendingTime + ""String_Node_Str""+ (pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100));
      pendingTime=pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100;
    }
    pendingTime*=1000;
  }
  waitTicketTime(downloadLink,pendingTime);
  String postTarget=getDownloadTarget(downloadLink,ticketCode);
  if (linkStatus.isFailed())   return;
  Request request=br.createPostRequest(postTarget,""String_Node_Str"" + Math.random() * 40 + ""String_Node_Str"" + Math.random() * 40);
  dl=new RAFDownload(this,downloadLink,request);
  HTTPConnection con=dl.connect();
  if (!con.isContentDisposition() && con.getHeaderField(""String_Node_Str"") != null) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}"
21194,"public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
    if (Sniffy.hasSniffer())     throw new SnifferException();
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  Rapidshare.correctURL(downloadLink);
  checkMirrorsInProgress(downloadLink);
  String freeOrPremiumSelectPostURL=null;
  Browser br=new Browser();
  br.setAcceptLanguage(ACCEPT_LANGUAGE);
  br.setFollowRedirects(false);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    logger.info(""String_Node_Str"");
    this.handlePremium(downloadLink,new Account(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  freeOrPremiumSelectPostURL=new Regex(br,PATTERN_FIND_MIRROR_URL).getMatch(0);
  if (freeOrPremiumSelectPostURL == null) {
    String error=null;
    if ((error=findError(br + ""String_Node_Str"")) != null) {
      throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
    }
    reportUnknownError(br,1);
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  Form[] forms=br.getForms();
  br.submitForm(forms[0]);
  String error=null;
  if ((error=findError(br + ""String_Node_Str"")) != null) {
    if (new Regex(error,""String_Node_Str"").matches()) {
      String waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      if (waitfor == null) {
        waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      }
      long waitTime=60 * 60 * 1000l;
      try {
        waitTime=new Long(waitfor.trim()) * 60 * 1000l;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
    }
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  if (Regex.matches(br,PATTERN_MATCHER_TOO_MANY_USERS)) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,120 * 1000l);
  }
 else   if (new Regex(br,PATTERM_MATCHER_ALREADY_LOADING).matches()) {
    logger.severe(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,120 * 1000l);
  }
 else   if ((error=findError(br + ""String_Node_Str"")) != null) {
    reportUnknownError(br,2);
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  String ticketTime=new Regex(br,PATTERN_FIND_TICKET_WAITTIME).getMatch(0);
  if (ticketTime != null && ticketTime.equals(""String_Node_Str"")) {
    ticketTime=null;
  }
  String ticketCode=br + ""String_Node_Str"";
  String tt=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
  String fun=""String_Node_Str"" + tt + ""String_Node_Str"";
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  String code=Context.toString(result);
  if (tt != null)   ticketCode=code;
  Context.exit();
  if (new Regex(ticketCode,""String_Node_Str"").matches()) {
    String waitfor=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
    long waitTime=60 * 60 * 1000l;
    try {
      waitTime=new Long(waitfor.trim()) * 60 * 1000l;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
  }
  long pendingTime=0;
  if (ticketTime != null) {
    pendingTime=Long.parseLong(ticketTime);
    if (getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) > 0) {
      logger.warning(""String_Node_Str"" + pendingTime + ""String_Node_Str""+ (pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100));
      pendingTime=pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100;
    }
    pendingTime*=1000;
  }
  waitTicketTime(downloadLink,pendingTime);
  String postTarget=getDownloadTarget(downloadLink,ticketCode);
  if (linkStatus.isFailed())   return;
  Request request=br.createPostRequest(postTarget,""String_Node_Str"" + Math.random() * 40 + ""String_Node_Str"" + Math.random() * 40);
  dl=new RAFDownload(this,downloadLink,request);
  HTTPConnection con=dl.connect();
  if (!con.isContentDisposition() && con.getHeaderField(""String_Node_Str"") != null) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
    if (Sniffy.hasSniffer())     throw new SnifferException();
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  Rapidshare.correctURL(downloadLink);
  checkMirrorsInProgress(downloadLink);
  String freeOrPremiumSelectPostURL=null;
  Browser br=new Browser();
  br.setAcceptLanguage(ACCEPT_LANGUAGE);
  br.setFollowRedirects(false);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    logger.info(""String_Node_Str"");
    this.handlePremium(downloadLink,new Account(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  freeOrPremiumSelectPostURL=new Regex(br,PATTERN_FIND_MIRROR_URL).getMatch(0);
  if (freeOrPremiumSelectPostURL == null) {
    String error=null;
    if ((error=findError(br + ""String_Node_Str"")) != null) {
      throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
    }
    reportUnknownError(br,1);
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  Form[] forms=br.getForms();
  br.submitForm(forms[0]);
  String error=null;
  if ((error=findError(br + ""String_Node_Str"")) != null) {
    if (new Regex(error,""String_Node_Str"").matches()) {
      String waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      if (waitfor == null) {
        waitfor=new Regex(br,""String_Node_Str"").getMatch(0);
      }
      long waitTime=60 * 60 * 1000l;
      try {
        waitTime=new Long(waitfor.trim()) * 60 * 1000l;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
    }
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  if (Regex.matches(br,PATTERN_MATCHER_TOO_MANY_USERS)) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,120 * 1000l);
  }
 else   if (new Regex(br,PATTERM_MATCHER_ALREADY_LOADING).matches()) {
    logger.severe(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,120 * 1000l);
  }
 else   if ((error=findError(br + ""String_Node_Str"")) != null) {
    reportUnknownError(br,2);
    throw new PluginException(LinkStatus.ERROR_FATAL,dynTranslate(error));
  }
  String ticketTime=new Regex(br,PATTERN_FIND_TICKET_WAITTIME).getMatch(0);
  if (ticketTime != null && ticketTime.equals(""String_Node_Str"")) {
    ticketTime=null;
  }
  String ticketCode=br + ""String_Node_Str"";
  String tt=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
  String fun=""String_Node_Str"" + tt + ""String_Node_Str"";
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  String code=Context.toString(result);
  if (tt != null)   ticketCode=code;
  Context.exit();
  if (new Regex(ticketCode,""String_Node_Str"").matches()) {
    String waitfor=new Regex(ticketCode,""String_Node_Str"").getMatch(0);
    long waitTime=60 * 60 * 1000l;
    try {
      waitTime=new Long(waitfor.trim()) * 60 * 1000l;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waitTime);
  }
  long pendingTime=0;
  if (ticketTime != null) {
    pendingTime=Long.parseLong(ticketTime);
    if (getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) > 0) {
      logger.warning(""String_Node_Str"" + pendingTime + ""String_Node_Str""+ (pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100));
      pendingTime=pendingTime + getPluginConfig().getIntegerProperty(PROPERTY_INCREASE_TICKET,0) * pendingTime / 100;
    }
    pendingTime*=1000;
  }
  waitTicketTime(downloadLink,pendingTime);
  if (ticketCode.contains(""String_Node_Str"")) {
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    logger.warning(""String_Node_Str"");
    this.sleep(120000,downloadLink);
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    handleFree(downloadLink);
    return;
  }
  String postTarget=getDownloadTarget(downloadLink,ticketCode);
  if (linkStatus.isFailed())   return;
  Request request=br.createPostRequest(postTarget,""String_Node_Str"" + Math.random() * 40 + ""String_Node_Str"" + Math.random() * 40);
  dl=new RAFDownload(this,downloadLink,request);
  HTTPConnection con=dl.connect();
  if (!con.isContentDisposition() && con.getHeaderField(""String_Node_Str"") != null) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}"
21195,"/** 
 * Gibt den Archivtyp zurück. möglich sind: ARCHIVE_TYPE_7Z (bad) ARCHIVE_TYPE_NONE (bad) ARCHIVE_TYPE_UNIX ARCHIVE_TYPE_NORMAL
 * @param file
 * @return
 */
private int getArchiveType(File file){
  String name=file.getName();
  if (name.matches(""String_Node_Str""))   return ARCHIVE_TYPE_7Z;
  if (name.matches(""String_Node_Str""))   return ARCHIVE_TYPE_UNIX;
  if (name.matches(""String_Node_Str""))   return ARCHIVE_TYPE_NORMAL;
  return ARCHIVE_TYPE_NONE;
}","/** 
 * Gibt den Archivtyp zurück. möglich sind: ARCHIVE_TYPE_7Z (bad) ARCHIVE_TYPE_NONE (bad) ARCHIVE_TYPE_UNIX ARCHIVE_TYPE_NORMAL
 * @param file
 * @return
 */
private int getArchiveType(File file){
  String name=file.getName();
  if (name.matches(""String_Node_Str""))   return ARCHIVE_TYPE_7Z;
  if (name.matches(""String_Node_Str"")) {
    try {
      Signature fs=FileSignatures.getFileSignature(file);
      if (fs.getId().equals(""String_Node_Str""))       return ARCHIVE_TYPE_RAR;
 else       if (fs.getId().equals(""String_Node_Str""))       return ARCHIVE_TYPE_7Z;
    }
 catch (    IOException e) {
    }
    return ARCHIVE_TYPE_UNIX;
  }
  if (name.matches(""String_Node_Str""))   return ARCHIVE_TYPE_NORMAL;
{
    try {
      Signature fs=FileSignatures.getFileSignature(file);
      if (fs.getId().equals(""String_Node_Str""))       return ARCHIVE_TYPE_RAR;
 else       if (fs.getId().equals(""String_Node_Str""))       return ARCHIVE_TYPE_7Z;
    }
 catch (    IOException e) {
    }
    return ARCHIVE_TYPE_NONE;
  }
}"
21196,"@Override public boolean getFileInformation(DownloadLink downloadLink){
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.setFollowRedirects(false);
  downloadurl=downloadLink.getDownloadURL();
  try {
    br.getPage(downloadurl);
    if (!br.containsHTML(""String_Node_Str"")) {
      String linkinfo[][]=new Regex(br.getRequest().getHtmlCode(),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatches();
      if (linkinfo.length != 1) {
        linkinfo=br.getRegex(""String_Node_Str"").getMatches();
      }
      if (linkinfo[0][2].matches(""String_Node_Str"")) {
        downloadLink.setDownloadSize((int)Math.round(Double.parseDouble(linkinfo[0][1]) * 1024 * 1024));
      }
 else       if (linkinfo[0][2].matches(""String_Node_Str"")) {
        downloadLink.setDownloadSize((int)Math.round(Double.parseDouble(linkinfo[0][1]) * 1024));
      }
      downloadLink.setName(linkinfo[0][0]);
      return true;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  downloadLink.setAvailable(false);
  return false;
}","@Override public boolean getFileInformation(DownloadLink downloadLink){
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.setFollowRedirects(false);
  downloadurl=downloadLink.getDownloadURL();
  try {
    br.getPage(downloadurl);
    if (!br.containsHTML(""String_Node_Str"")) {
      String[] linkinfo=null;
      try {
        linkinfo=new Regex(br.getRequest().getHtmlCode(),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getRow(0);
      }
 catch (      Exception e) {
      }
      if (linkinfo == null || linkinfo.length < 1) {
        linkinfo=new Regex(br.getRequest().getHtmlCode(),""String_Node_Str"").getRow(0);
      }
      downloadLink.setDownloadSize(Regex.getSize(linkinfo[1]));
      downloadLink.setName(linkinfo[0]);
      return true;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  downloadLink.setAvailable(false);
  return false;
}"
21197,"private DownloadLink findStartLink(DownloadLink link){
  int type=getArchivePartType(link);
switch (type) {
case JDUnrarConstants.MULTIPART_START_PART:
case JDUnrarConstants.MULTIPART_START_PART_V2:
    break;
case JDUnrarConstants.SINGLE_PART_ARCHIVE:
  return link;
case JDUnrarConstants.NO_RAR_ARCHIVE:
return null;
}
File file=null;
String filename=null;
if (type == JDUnrarConstants.MULTIPART_START_PART) {
filename=new Regex(link.getFileOutput(),""String_Node_Str"").getMatch(0);
if (!(file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if (!(file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if (!(file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if (!(file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if (!(file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else {
return null;
}
}
 else if (type == JDUnrarConstants.MULTIPART_START_PART_V2) {
filename=new Regex(link.getFileOutput(),""String_Node_Str"").getMatch(0);
if (!(file=new File(filename + ""String_Node_Str"")).exists()) {
return null;
}
}
DownloadLink dlink=JDUtilities.getController().getDownloadLinkByFileOutput(file);
if (dlink == null) {
System.out.print(""String_Node_Str"");
dlink=new DownloadLink(null,file.getName(),DUMMY_HOSTER,""String_Node_Str"",true);
dlink.getLinkStatus().setStatus(link.getLinkStatus().getStatus());
FilePackage fp=new FilePackage();
fp.setDownloadDirectory(file.getParent());
dlink.setFilePackage(fp);
}
return dlink;
}","private DownloadLink findStartLink(DownloadLink link){
  int type=getArchivePartType(link);
switch (type) {
case JDUnrarConstants.MULTIPART_START_PART:
case JDUnrarConstants.MULTIPART_START_PART_V2:
    break;
case JDUnrarConstants.SINGLE_PART_ARCHIVE:
  return link;
case JDUnrarConstants.NO_RAR_ARCHIVE:
return null;
}
File file=null;
String filename=null;
if (type == JDUnrarConstants.MULTIPART_START_PART) {
filename=new Regex(link.getFileOutput(),""String_Node_Str"").getMatch(0);
if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else {
return null;
}
}
 else if (type == JDUnrarConstants.MULTIPART_START_PART_V2) {
filename=new Regex(link.getFileOutput(),""String_Node_Str"").getMatch(0);
if (!(file=new File(filename + ""String_Node_Str"")).exists()) {
return null;
}
}
DownloadLink dlink=JDUtilities.getController().getDownloadLinkByFileOutput(file);
if (dlink == null) {
System.out.print(""String_Node_Str"");
dlink=new DownloadLink(null,file.getName(),DUMMY_HOSTER,""String_Node_Str"",true);
dlink.getLinkStatus().setStatus(link.getLinkStatus().getStatus());
FilePackage fp=new FilePackage();
fp.setDownloadDirectory(file.getParent());
dlink.setFilePackage(fp);
}
return dlink;
}"
21198,"public int getMaxSimultanFreeDownloadNum(){
  return 2;
}","public int getMaxSimultanFreeDownloadNum(){
  return 1;
}"
21199,"public Request createFormRequest(Form form) throws Exception {
  if (form == null)   return null;
  String base=null;
  if (request != null)   base=request.getUrl().toString();
  String action=form.getAction(base);
switch (form.method) {
case Form.METHOD_GET:
    StringBuilder stbuffer=new StringBuilder();
  boolean first=true;
for (Map.Entry<String,InputField> entry : form.getVars().entrySet()) {
  if (entry.getKey() != null && entry.getValue().getValue() != null && entry.getValue().getValue().length() > 0) {
    if (first) {
      first=false;
    }
 else {
      stbuffer.append(""String_Node_Str"");
    }
    stbuffer.append(entry.getKey());
    stbuffer.append(""String_Node_Str"");
    stbuffer.append(entry.getValue().getValue());
  }
}
String varString=stbuffer.toString();
if (varString != null && !varString.matches(""String_Node_Str"")) {
if (action.matches(""String_Node_Str"")) {
action+=""String_Node_Str"";
}
 else if (action.matches(""String_Node_Str"")) {
action+=""String_Node_Str"";
}
action+=varString;
}
return createGetRequest(action);
case Form.METHOD_POST:
return createPostRequest(action,form.getVarsMap());
}
return null;
}","public Request createFormRequest(Form form) throws Exception {
  if (form == null)   return null;
  String base=null;
  if (request != null)   base=request.getUrl().toString();
  String action=form.getAction(base);
switch (form.method) {
case Form.METHOD_GET:
    StringBuilder stbuffer=new StringBuilder();
  boolean first=true;
for (Map.Entry<String,InputField> entry : form.getVars().entrySet()) {
  if (entry.getKey() != null) {
    if (first) {
      first=false;
    }
 else {
      stbuffer.append(""String_Node_Str"");
    }
    stbuffer.append(entry.getKey());
    stbuffer.append(""String_Node_Str"");
    if (entry.getValue().getValue() != null) {
      stbuffer.append(entry.getValue().getValue());
    }
 else {
      stbuffer.append(""String_Node_Str"");
    }
  }
}
String varString=stbuffer.toString();
if (varString != null && !varString.matches(""String_Node_Str"")) {
if (action.matches(""String_Node_Str"")) {
action+=""String_Node_Str"";
}
 else if (action.matches(""String_Node_Str"")) {
action+=""String_Node_Str"";
}
action+=varString;
}
return createGetRequest(action);
case Form.METHOD_POST:
return createPostRequest(action,form.getVarsMap());
}
return null;
}"
21200,"public String getPostDataString(){
  if (postData.isEmpty()) {
    return null;
  }
  StringBuilder buffer=new StringBuilder();
  for (  Map.Entry<String,String> entry : postData.entrySet()) {
    if (entry.getKey() != null && entry.getValue() != null && entry.getValue().length() > 0) {
      buffer.append(""String_Node_Str"");
      buffer.append(entry.getKey());
      buffer.append(""String_Node_Str"");
      buffer.append(entry.getValue());
    }
  }
  return buffer.toString().substring(1);
}","public String getPostDataString(){
  if (postData.isEmpty()) {
    return null;
  }
  StringBuilder buffer=new StringBuilder();
  for (  Map.Entry<String,String> entry : postData.entrySet()) {
    if (entry.getKey() != null) {
      buffer.append(""String_Node_Str"");
      buffer.append(entry.getKey());
      buffer.append(""String_Node_Str"");
      if (entry.getValue() != null) {
        buffer.append(entry.getValue());
      }
 else {
        buffer.append(""String_Node_Str"");
      }
    }
  }
  return buffer.toString().substring(1);
}"
21201,"public String getPass(){
  return pass;
}","public String getPass(){
  return pass.trim();
}"
21202,"public String getUser(){
  return user;
}","public String getUser(){
  return user.trim();
}"
21203,"/** 
 * @param args
 * @throws UnsupportedEncodingException 
 * @throws java.text.ParseException
 * @throws ParseException
 * @throws UnsupportedEncodingException
 * @throws java.text.ParseException
 */
public static void main(String[] args) throws UnsupportedEncodingException {
  if (false) {
    SimpleDateFormat DATE_FORMAT=new SimpleDateFormat(""String_Node_Str"");
    String expires=""String_Node_Str"";
    try {
      System.out.println(DATE_FORMAT.parse(expires));
    }
 catch (    ParseException e) {
      e.printStackTrace();
      try {
        System.out.println(new SimpleDateFormat(""String_Node_Str"").parse(expires));
      }
 catch (      ParseException e2) {
        e2.printStackTrace();
      }
    }
  }
  if (false) {
    String l[]={""String_Node_Str""};
    for (    String kk : l) {
      System.out.print(kk + ""String_Node_Str"");
      System.out.println(Plugin.getFileNameFromDispositionHeader(kk));
    }
  }
  System.out.println(Encoding.urlEncode(""String_Node_Str""));
  System.out.println(Encoding.urlEncode(""String_Node_Str""));
  System.out.println(new String(Plugin.extractFileNameFromURL(""String_Node_Str"").getBytes(""String_Node_Str""),""String_Node_Str""));
  System.out.println(Encoding.urlEncode(""String_Node_Str""));
}","/** 
 * @param args
 * @throws UnsupportedEncodingException
 * @throws java.text.ParseException
 * @throws ParseException
 * @throws UnsupportedEncodingException
 * @throws java.text.ParseException
 */
public static void main(String[] args) throws UnsupportedEncodingException {
  if (false) {
    SimpleDateFormat DATE_FORMAT=new SimpleDateFormat(""String_Node_Str"");
    String expires=""String_Node_Str"";
    try {
      System.out.println(DATE_FORMAT.parse(expires));
    }
 catch (    ParseException e) {
      e.printStackTrace();
      try {
        System.out.println(new SimpleDateFormat(""String_Node_Str"").parse(expires));
      }
 catch (      ParseException e2) {
        e2.printStackTrace();
      }
    }
  }
  if (false) {
    String l[]={""String_Node_Str""};
    for (    String kk : l) {
      System.out.print(kk + ""String_Node_Str"");
      System.out.println(Plugin.getFileNameFromDispositionHeader(kk));
    }
  }
}"
21204,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  if (!getFileInformation(downloadLink)) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  captchaCode=null;
  String steplink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (steplink == null) {
    downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (downloadurl == null) {
      downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (downloadurl == null) {
      downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (downloadurl == null) {
      throw new PluginException(LinkStatus.ERROR_FATAL);
    }
  }
 else {
    downloadurl=""String_Node_Str"" + steplink;
    br.getPage(downloadurl);
    if (br.getRedirectLocation() != null) {
      downloadurl=br.getRedirectLocation();
      br.getPage(downloadurl);
    }
    Form capform=br.getFormbyName(""String_Node_Str"");
    if (capform != null) {
      BufferedImage image=getCSSCaptchaImage(capform.getHtmlCode());
      captchaFile=getLocalCaptchaFile(this);
      ImageIO.write(image,""String_Node_Str"",captchaFile);
      captchaCode=Plugin.getCaptchaCode(this,""String_Node_Str"",captchaFile,false,downloadLink);
      capform.setVariable(0,captchaCode);
      downloadurl=""String_Node_Str"" + steplink + ""String_Node_Str""+ captchaCode;
      br.getPage(downloadurl);
      if (br.getRedirectLocation() != null && br.getRedirectLocation().contains(""String_Node_Str"")) {
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
    }
    steplink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (steplink == null) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    downloadurl=""String_Node_Str"" + steplink;
    br.getPage(downloadurl);
    if (br.getRedirectLocation() == null || br.getRedirectLocation().contains(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    downloadurl=br.getRedirectLocation();
    if (downloadurl == null) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
  }
  downloadurl=downloadurl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=br.openDownload(downloadLink,downloadurl,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  if (!getFileInformation(downloadLink)) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  captchaCode=null;
  String steplink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (steplink == null) {
    downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (downloadurl == null) {
      downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (downloadurl == null) {
      downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (downloadurl == null) {
      throw new PluginException(LinkStatus.ERROR_FATAL);
    }
  }
 else {
    downloadurl=""String_Node_Str"" + steplink;
    br.getPage(downloadurl);
    if (br.getRedirectLocation() != null) {
      downloadurl=br.getRedirectLocation();
      br.getPage(downloadurl);
    }
    Form capform=br.getFormbyName(""String_Node_Str"");
    if (capform != null) {
      BufferedImage image=getCSSCaptchaImage(capform.getHtmlCode());
      captchaFile=getLocalCaptchaFile(this);
      captchaFile.mkdirs();
      ImageIO.write(image,""String_Node_Str"",captchaFile);
      captchaCode=Plugin.getCaptchaCode(this,""String_Node_Str"",captchaFile,false,downloadLink);
      capform.setVariable(0,captchaCode);
      downloadurl=""String_Node_Str"" + steplink + ""String_Node_Str""+ captchaCode;
      br.getPage(downloadurl);
      if (br.getRedirectLocation() != null && br.getRedirectLocation().contains(""String_Node_Str"")) {
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
    }
    steplink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (steplink == null) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    downloadurl=""String_Node_Str"" + steplink;
    br.getPage(downloadurl);
    if (br.getRedirectLocation() == null || br.getRedirectLocation().contains(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    downloadurl=br.getRedirectLocation();
    if (downloadurl == null) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
  }
  downloadurl=downloadurl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=br.openDownload(downloadLink,downloadurl,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  }
  dl.startDownload();
}"
21205,"private void initGUI(){
  buildMenu();
  sortPackages=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  sortPackages.addActionListener(this);
  acceptAll=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  acceptAll.addActionListener(this);
  accept=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  accept.addActionListener(this);
  insertAtPosition=new JComboBox(new String[]{JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str"")});
  insertAtPosition.setSelectedIndex(guiConfig.getIntegerProperty(PROPERTY_POSITION,1));
  insertAtPosition.addActionListener(this);
  progress=new JProgressBar();
  progress.setBorder(BorderFactory.createEtchedBorder());
  progress.setString(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  progress.setStringPainted(true);
  tabbedPane=new JTabbedPane();
  tabbedPane.addChangeListener(this);
  tabbedPane.addMouseListener(this);
  tabbedPane.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
  tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  tabbedPane.setTabPlacement(JTabbedPane.LEFT);
  if (System.getProperty(""String_Node_Str"").toLowerCase().indexOf(""String_Node_Str"") >= 0) {
    logger.finer(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    tabbedPane.setTabPlacement(JTabbedPane.TOP);
  }
  new DropTarget(tabbedPane,this);
  setName(""String_Node_Str"");
  this.addWindowListener(this);
  this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  int n=7;
  JPanel panel=new JPanel(new BorderLayout(n,n));
  panel.setBorder(new EmptyBorder(n,n,n,n));
  setContentPane(panel);
  JPanel inner=new JPanel(new BorderLayout(n,n));
  JPanel south=new JPanel(new BorderLayout(n,n));
  JPanel bpanel=new JPanel(new FlowLayout(FlowLayout.RIGHT,n,0));
  south.add(sortPackages,BorderLayout.WEST);
  bpanel.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  bpanel.add(insertAtPosition);
  JSeparator separator=new JSeparator(SwingConstants.VERTICAL);
  separator.setPreferredSize(new Dimension(5,20));
  bpanel.add(separator);
  bpanel.add(acceptAll);
  bpanel.add(accept);
  south.add(bpanel,BorderLayout.CENTER);
  panel.add(inner,BorderLayout.CENTER);
  inner.add(tabbedPane,BorderLayout.CENTER);
  inner.add(progress,BorderLayout.SOUTH);
  panel.add(south,BorderLayout.SOUTH);
  getRootPane().setDefaultButton(acceptAll);
  setPreferredSize(new Dimension(640,480));
  setLocationRelativeTo(null);
  pack();
  setVisible(true);
}","private void initGUI(){
  buildMenu();
  sortPackages=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  sortPackages.addActionListener(this);
  acceptAll=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  acceptAll.addActionListener(this);
  accept=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  accept.addActionListener(this);
  insertAtPosition=new JComboBox(new String[]{JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str"")});
  insertAtPosition.setSelectedIndex(guiConfig.getIntegerProperty(PROPERTY_POSITION,1));
  insertAtPosition.addActionListener(this);
  progress=new JProgressBar();
  progress.setBorder(BorderFactory.createEtchedBorder());
  progress.setString(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  progress.setStringPainted(true);
  tabbedPane=new JTabbedPane();
  tabbedPane.addChangeListener(this);
  tabbedPane.addMouseListener(this);
  tabbedPane.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
  tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  tabbedPane.setTabPlacement(JTabbedPane.LEFT);
  if (System.getProperty(""String_Node_Str"").toLowerCase().indexOf(""String_Node_Str"") >= 0) {
    logger.finer(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    tabbedPane.setTabPlacement(JTabbedPane.TOP);
  }
  new DropTarget(tabbedPane,this);
  setName(""String_Node_Str"");
  this.addWindowListener(this);
  this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  int n=7;
  JPanel panel=new JPanel(new BorderLayout(n,n));
  panel.setBorder(new EmptyBorder(n,n,n,n));
  setContentPane(panel);
  JPanel inner=new JPanel(new BorderLayout(n,n));
  JPanel south=new JPanel(new BorderLayout(n,n));
  JPanel bpanel=new JPanel(new FlowLayout(FlowLayout.RIGHT,n,0));
  south.add(sortPackages,BorderLayout.WEST);
  bpanel.add(new JLabel(JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  bpanel.add(insertAtPosition);
  JSeparator separator=new JSeparator(SwingConstants.VERTICAL);
  separator.setPreferredSize(new Dimension(5,20));
  bpanel.add(separator);
  bpanel.add(acceptAll);
  bpanel.add(accept);
  south.add(bpanel,BorderLayout.CENTER);
  panel.add(inner,BorderLayout.CENTER);
  inner.add(tabbedPane,BorderLayout.CENTER);
  inner.add(progress,BorderLayout.SOUTH);
  panel.add(south,BorderLayout.SOUTH);
  getRootPane().setDefaultButton(acceptAll);
  setPreferredSize(new Dimension(640,480));
  setLocationRelativeTo(null);
  pack();
}"
21206,"public void showDialog(){
  setVisible(true);
  this.setLocation(JDUtilities.getCenterOfComponent(parentFrame,this));
  setVisible(false);
  setModal(true);
  setVisible(true);
}","public void showDialog(){
  setModal(true);
  this.setLocation(JDUtilities.getCenterOfComponent(parentFrame,this));
  setVisible(true);
}"
21207,"public void loadPluginForHost(){
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public void loadPluginForHost(){
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PluginWrapper.LOAD_ON_INIT);
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  new HostPluginWrapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
21208,"/** 
 * Sucht in dem übergebenen vector nach weiteren decryptbaren Links und decrypted diese
 * @param decryptedLinks
 * @return
 */
private boolean deepDecrypt(ArrayList<DownloadLink> decryptedLinks){
  if (decryptedLinks.isEmpty())   return false;
  final Vector<DownloadLink> newdecryptedLinks=new Vector<DownloadLink>();
class DThread extends Thread implements JDRunnable {
    private DownloadLink link=null;
    public DThread(    DownloadLink link){
      this.link=link;
    }
    public void run(){
      String url=link.getDownloadURL();
      if (url != null) {
        url=HTMLParser.getHttpLinkList(url);
        try {
          url=URLDecoder.decode(url,""String_Node_Str"");
        }
 catch (        Exception e) {
          logger.warning(""String_Node_Str"");
        }
      }
      boolean coulddecrypt=false;
      for (      DecryptPluginWrapper pDecrypt : DecryptPluginWrapper.getDecryptWrapper()) {
        if (pDecrypt.usePlugin() && pDecrypt.canHandle(url)) {
          try {
            PluginForDecrypt plg=(PluginForDecrypt)pDecrypt.getNewPluginInstance();
            CryptedLink[] decryptableLinks=plg.getDecryptableLinks(url);
            url=plg.cutMatches(url);
            for (            CryptedLink cLink : decryptableLinks) {
              cLink.setDecrypterPassword(link.getDecrypterPassword());
            }
            ArrayList<DownloadLink> dLinks=plg.decryptLinks(decryptableLinks);
            for (            DownloadLink dLink : dLinks) {
              dLink.addSourcePluginPasswords(link.getSourcePluginPasswords());
            }
            coulddecrypt=true;
            if (dLinks != null && dLinks.size() > 0) {
              newdecryptedLinks.addAll(dLinks);
            }
            break;
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
      if (coulddecrypt == false) {
        newdecryptedLinks.add(link);
      }
    }
    public void go() throws Exception {
      run();
    }
  }
  Jobber decryptJobbers=new Jobber(4);
  for (int b=decryptedLinks.size() - 1; b >= 0; b--) {
    DThread dthread=new DThread(decryptedLinks.get(b));
    decryptJobbers.add(dthread);
  }
  int todo=decryptJobbers.getJobsAdded();
  decryptJobbers.start();
  while (decryptJobbers.getJobsFinished() != todo) {
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
    }
  }
  boolean hasdeep=decryptedLinks.size() != newdecryptedLinks.size();
  decryptedLinks.clear();
  decryptedLinks.addAll(newdecryptedLinks);
  return hasdeep;
}","/** 
 * Sucht in dem übergebenen vector nach weiteren decryptbaren Links und decrypted diese
 * @param decryptedLinks
 * @return
 */
private boolean deepDecrypt(ArrayList<DownloadLink> decryptedLinks){
  if (decryptedLinks.isEmpty())   return false;
  final Vector<DownloadLink> newdecryptedLinks=new Vector<DownloadLink>();
  final Vector<DownloadLink> notdecryptedLinks=new Vector<DownloadLink>();
class DThread extends Thread implements JDRunnable {
    private DownloadLink link=null;
    public DThread(    DownloadLink link){
      this.link=link;
    }
    public void run(){
      String url=link.getDownloadURL();
      if (url != null) {
        url=HTMLParser.getHttpLinkList(url);
        try {
          url=URLDecoder.decode(url,""String_Node_Str"");
        }
 catch (        Exception e) {
          logger.warning(""String_Node_Str"");
        }
      }
      boolean coulddecrypt=false;
      for (      DecryptPluginWrapper pDecrypt : DecryptPluginWrapper.getDecryptWrapper()) {
        if (pDecrypt.usePlugin() && pDecrypt.canHandle(url)) {
          try {
            PluginForDecrypt plg=(PluginForDecrypt)pDecrypt.getNewPluginInstance();
            CryptedLink[] decryptableLinks=plg.getDecryptableLinks(url);
            url=plg.cutMatches(url);
            for (            CryptedLink cLink : decryptableLinks) {
              cLink.setDecrypterPassword(link.getDecrypterPassword());
            }
            ArrayList<DownloadLink> dLinks=plg.decryptLinks(decryptableLinks);
            for (            DownloadLink dLink : dLinks) {
              dLink.addSourcePluginPasswords(link.getSourcePluginPasswords());
            }
            coulddecrypt=true;
            if (dLinks != null && dLinks.size() > 0) {
              newdecryptedLinks.addAll(dLinks);
            }
            break;
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
      if (coulddecrypt == false) {
        notdecryptedLinks.add(link);
      }
    }
    public void go() throws Exception {
      run();
    }
  }
  Jobber decryptJobbers=new Jobber(4);
  for (int b=decryptedLinks.size() - 1; b >= 0; b--) {
    DThread dthread=new DThread(decryptedLinks.get(b));
    decryptJobbers.add(dthread);
  }
  int todo=decryptJobbers.getJobsAdded();
  decryptJobbers.start();
  while (decryptJobbers.getJobsFinished() != todo) {
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
    }
  }
  decryptedLinks.clear();
  decryptedLinks.addAll(newdecryptedLinks);
  decryptedLinks.addAll(notdecryptedLinks);
  return newdecryptedLinks.size() > 0;
}"
21209,"private void startLinkGatherer(){
class DThread extends Thread implements JDRunnable {
    private Vector<DownloadLink> links=null;
    public DThread(    Vector<DownloadLink> links){
      this.links=links;
    }
    public void run(){
      while (links.size() > 0 && gathererrunning == true) {
        DownloadLink link=links.remove(0);
        if (!guiConfig.getBooleanProperty(PROPERTY_ONLINE_CHECK,true)) {
          addingLinkList.add(link);
          try {
            Thread.sleep(5);
          }
 catch (          InterruptedException e) {
          }
        }
 else {
          if (!link.isAvailabilityChecked()) {
            Vector<DownloadLink> dlinks=new Vector<DownloadLink>();
            dlinks.add(link);
            dlinks.addAll(links);
            if (dlinks.size() > 1) {
              boolean[] ret=((PluginForHost)link.getPlugin()).checkLinks(dlinks.toArray(new DownloadLink[]{}));
              if (ret != null) {
                for (int i=0; i < dlinks.size(); i++) {
                  dlinks.get(i).setAvailable(ret[i]);
                }
              }
            }
          }
          link.isAvailable();
          addingLinkList.add(link);
        }
        progress.setValue(progress.getValue() + 1);
      }
    }
    public void go() throws Exception {
      run();
    }
  }
class AThread extends Thread {
    public AThread(){
    }
    public void run(){
      while (gathererrunning == true) {
        while (addingLinkList.size() > 0 && gathererrunning == true) {
          DownloadLink link=addingLinkList.remove(0);
          attachLinkToPackage(link);
          reprintTabbedPane();
        }
        reprintTabbedPane();
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      while (addingLinkList.size() > 0) {
        DownloadLink link=addingLinkList.remove(0);
        attachLinkToPackage(link);
        reprintTabbedPane();
      }
    }
  }
  progress.setMaximum(0);
  progress.setString(null);
  if (gatherer != null && gatherer.isAlive()) {
    return;
  }
  gatherer=new Thread(){
    public synchronized void run(){
      gathererrunning=true;
      AThread athread=new AThread();
      athread.start();
      decryptJobbers=new Jobber(4);
      int maxperjob=20;
      while (waitingLinkList.size() > 0 && gathererrunning == true) {
        if (waitingLinkList.size() == 1) {
          maxperjob=4;
        }
 else {
          maxperjob=20;
        }
        Set<String> ks=waitingLinkList.keySet();
        String it=ks.iterator().next();
        Vector<DownloadLink> links=waitingLinkList.remove(it);
        Vector<DownloadLink> links2=new Vector<DownloadLink>();
        while (links.size() > 0) {
          links2.add(links.remove(0));
          if (links2.size() > maxperjob) {
            progress.setMaximum(progress.getMaximum() + links2.size());
            DThread dthread=new DThread(links2);
            decryptJobbers.add(dthread);
            links2=new Vector<DownloadLink>();
            break;
          }
        }
        links.addAll(links2);
        if (links.size() > maxperjob) {
          waitingLinkList.put(it + System.currentTimeMillis(),links);
        }
 else {
          progress.setMaximum(progress.getMaximum() + links.size());
          DThread dthread=new DThread(links);
          decryptJobbers.add(dthread);
        }
        if (!decryptJobbers.isAlive() && decryptJobbers.getJobsAdded() != decryptJobbers.getJobsFinished()) {
          decryptJobbers.start();
        }
      }
      int todo=decryptJobbers.getJobsAdded();
      while (decryptJobbers.getJobsFinished() != todo) {
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      progress.setString(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      decryptJobbers.stop();
      gathererrunning=false;
    }
  }
;
  gatherer.start();
}","private void startLinkGatherer(){
class DThread extends Thread implements JDRunnable {
    private Vector<DownloadLink> links=null;
    public DThread(    Vector<DownloadLink> links){
      this.links=links;
    }
    public void run(){
      while (links.size() > 0 && gathererrunning == true) {
        DownloadLink link=links.remove(0);
        if (!guiConfig.getBooleanProperty(PROPERTY_ONLINE_CHECK,true)) {
          addingLinkList.add(link);
          try {
            Thread.sleep(5);
          }
 catch (          InterruptedException e) {
          }
        }
 else {
          if (!link.isAvailabilityChecked()) {
            Vector<DownloadLink> dlinks=new Vector<DownloadLink>();
            dlinks.add(link);
            dlinks.addAll(links);
            if (dlinks.size() > 1) {
              boolean[] ret=((PluginForHost)link.getPlugin()).checkLinks(dlinks.toArray(new DownloadLink[]{}));
              if (ret != null) {
                for (int i=0; i < dlinks.size(); i++) {
                  dlinks.get(i).setAvailable(ret[i]);
                }
              }
            }
          }
          link.isAvailable();
          addingLinkList.add(link);
        }
        progress.setValue(progress.getValue() + 1);
      }
    }
    public void go() throws Exception {
      run();
    }
  }
class AThread extends Thread {
    public AThread(){
    }
    public void run(){
      while (gathererrunning == true) {
        while (addingLinkList.size() > 0 && gathererrunning == true) {
          DownloadLink link=addingLinkList.remove(0);
          attachLinkToPackage(link);
        }
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      while (addingLinkList.size() > 0) {
        DownloadLink link=addingLinkList.remove(0);
        attachLinkToPackage(link);
      }
      reprintTabbedPane();
    }
  }
  progress.setMaximum(0);
  progress.setString(null);
  if (gatherer != null && gatherer.isAlive()) {
    return;
  }
  gatherer=new Thread(){
    public synchronized void run(){
      gathererrunning=true;
      AThread athread=new AThread();
      athread.start();
      decryptJobbers=new Jobber(4);
      int maxperjob=20;
      while (waitingLinkList.size() > 0 && gathererrunning == true) {
        if (waitingLinkList.size() == 1) {
          maxperjob=4;
        }
 else {
          maxperjob=20;
        }
        Set<String> ks=waitingLinkList.keySet();
        String it=ks.iterator().next();
        Vector<DownloadLink> links=waitingLinkList.remove(it);
        Vector<DownloadLink> links2=new Vector<DownloadLink>();
        while (links.size() > 0) {
          links2.add(links.remove(0));
          if (links2.size() > maxperjob) {
            progress.setMaximum(progress.getMaximum() + links2.size());
            DThread dthread=new DThread(links2);
            decryptJobbers.add(dthread);
            links2=new Vector<DownloadLink>();
            break;
          }
        }
        links.addAll(links2);
        if (links.size() > maxperjob) {
          waitingLinkList.put(it + System.currentTimeMillis(),links);
        }
 else {
          progress.setMaximum(progress.getMaximum() + links.size());
          DThread dthread=new DThread(links);
          decryptJobbers.add(dthread);
        }
        if (!decryptJobbers.isAlive() && decryptJobbers.getJobsAdded() != decryptJobbers.getJobsFinished()) {
          decryptJobbers.start();
        }
      }
      int todo=decryptJobbers.getJobsAdded();
      while (decryptJobbers.getJobsFinished() != todo) {
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      progress.setString(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      decryptJobbers.stop();
      gathererrunning=false;
    }
  }
;
  gatherer.start();
}"
21210,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  br.getPage(downloadLink.getDownloadURL());
  br.setFollowRedirects(true);
  br.setDebug(true);
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
  }
  Form[] forms=br.getForms();
  if (getPluginConfig().getBooleanProperty(""String_Node_Str"",false)) {
    Form login=forms[0];
    login.put(""String_Node_Str"",getPluginConfig().getStringProperty(""String_Node_Str""));
    login.put(""String_Node_Str"",getPluginConfig().getStringProperty(""String_Node_Str""));
    login.put(""String_Node_Str"",""String_Node_Str"");
    br.submitForm(login);
    if (br.containsHTML(""String_Node_Str"")) {
      logger.severe(""String_Node_Str"" + getPluginConfig().getStringProperty(""String_Node_Str"") + ""String_Node_Str"");
      getPluginConfig().setProperty(""String_Node_Str"",false);
      getPluginConfig().save();
    }
  }
  if (forms.length < 2) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  Form captchaForm=forms[1];
  String captchaCode=getCaptchaCode(""String_Node_Str"",downloadLink);
  captchaForm.put(""String_Node_Str"",captchaCode);
  br.submitForm(captchaForm);
  Form download=br.getFormbyID(""String_Node_Str"");
  dl=br.openDownload(downloadLink,download);
  if (!dl.getConnection().isContentDisposition()) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink parameter) throws Exception {
  getFileInformation(parameter);
  handleFree0(parameter);
}"
21211,"@Override public boolean getFileInformation(DownloadLink downloadLink) throws IOException {
  br.getPage(downloadLink.getDownloadURL());
  String[] dat=br.getRegex(""String_Node_Str"").getRow(0);
  downloadLink.setName(dat[0]);
  downloadLink.setDownloadSize(Regex.getSize(dat[1]));
  return true;
}","@Override public boolean getFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  setBrowserExclusive();
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    return true;
  }
  String[] dat=br.getRegex(""String_Node_Str"").getRow(0);
  if (dat.length != 2)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(dat[0]);
  downloadLink.setDownloadSize(Regex.getSize(dat[1]));
  return true;
}"
21212,"public GigaSizeCom(PluginWrapper wrapper){
  super(wrapper);
  setConfigElements();
}","public GigaSizeCom(PluginWrapper wrapper){
  super(wrapper);
  enablePremium(""String_Node_Str"");
}"
21213,"public void windowIconified(WindowEvent arg0){
  if (new Date().getTime() > this.lastDeIconifiedEvent + 750) {
    guiFrame.setVisible(false);
  }
 else {
    guiFrame.setExtendedState(Frame.NORMAL);
    guiFrame.setVisible(true);
  }
}","public void windowIconified(WindowEvent arg0){
  miniIt();
}"
21214,"public void windowDeiconified(WindowEvent arg0){
  this.lastDeIconifiedEvent=new Date().getTime();
}","public void windowDeiconified(WindowEvent arg0){
  windowIconified(arg0);
}"
21215,"public void mouseClicked(MouseEvent e){
  if (SwingUtilities.isLeftMouseButton(e)) {
    if (toolParent.isVisible()) {
      hideTooltip();
    }
    if (e.getClickCount() > 1) {
      guiFrame.setVisible(!guiFrame.isVisible());
      if (guiFrame.isVisible())       guiFrame.setExtendedState(Frame.NORMAL);
    }
  }
 else   if (SwingUtilities.isRightMouseButton(e)) {
    showPopup(e.getPoint());
  }
}","public void mouseClicked(MouseEvent arg0){
}"
21216,"public void mousePressed(MouseEvent e){
  if (e.getSource() instanceof TrayIcon) {
    if (e.getClickCount() >= (subConfig.getBooleanProperty(PROPERTY_SINGLE_CLICK,false) ? 1 : 2) && !SwingUtilities.isRightMouseButton(e)) {
      guiFrame.setVisible(!guiFrame.isVisible());
      if (guiFrame.isVisible())       guiFrame.setExtendedState(Frame.NORMAL);
    }
 else {
      if (trayIconPopup != null && trayIconPopup.isShowing()) {
        trayIconPopup.dispose();
        trayIconPopup=null;
      }
 else       if (SwingUtilities.isRightMouseButton(e)) {
        trayIconPopup=new TrayIconPopup();
        calcLocation(trayIconPopup,e.getPoint());
        trayIconPopup.setVisible(true);
      }
    }
  }
}","public void mousePressed(MouseEvent e){
  if (e.getSource() instanceof TrayIcon) {
    if (e.getClickCount() >= (subConfig.getBooleanProperty(PROPERTY_SINGLE_CLICK,false) ? 1 : 2) && !SwingUtilities.isRightMouseButton(e)) {
      miniIt();
    }
 else {
      if (trayIconPopup != null && trayIconPopup.isShowing()) {
        trayIconPopup.dispose();
        trayIconPopup=null;
      }
 else       if (SwingUtilities.isRightMouseButton(e)) {
        trayIconPopup=new TrayIconPopup();
        calcLocation(trayIconPopup,e.getPoint());
        trayIconPopup.setVisible(true);
      }
    }
  }
}"
21217,"public void windowIconified(WindowEvent arg0){
  if (subConfig.getBooleanProperty(PROPERTY_MINIMIZE_TO_TRAY,true)) {
    if (new Date().getTime() > this.lastDeIconifiedEvent + 750) {
      guiFrame.setVisible(false);
    }
 else {
      guiFrame.setExtendedState(Frame.NORMAL);
      guiFrame.setVisible(true);
    }
  }
}","public void windowIconified(WindowEvent arg0){
  if (subConfig.getBooleanProperty(PROPERTY_MINIMIZE_TO_TRAY,true)) {
    miniIt();
  }
}"
21218,"public void windowDeiconified(WindowEvent arg0){
  this.lastDeIconifiedEvent=new Date().getTime();
}","public void windowDeiconified(WindowEvent arg0){
  windowIconified(arg0);
}"
21219,"/** 
 * Sucht in dem übergebenen vector nach weiteren decryptbaren Links und decrypted diese
 * @param decryptedLinks
 * @return
 */
private boolean deepDecrypt(final ArrayList<DownloadLink> decryptedLinks){
  if (decryptedLinks.isEmpty())   return false;
  final ArrayList<DownloadLink> newdecryptedLinks=new ArrayList<DownloadLink>();
  boolean hasDecryptedLinks=false;
class DThread {
    Thread thread;
    public Thread getThread(){
      return thread;
    }
    public void setThread(    Thread thread){
      this.thread=thread;
    }
    boolean canDecrypt=false;
    public boolean couldDecrypt(){
      return canDecrypt;
    }
    public void setCouldDecrypt(    boolean bool){
      canDecrypt=bool;
    }
  }
  ArrayList<DThread> decryptThread=new ArrayList<DThread>();
  for (int b=decryptedLinks.size() - 1; b >= 0; b--) {
    final int i=b;
    final DThread dThread=new DThread();
    dThread.setThread(new Thread(new Runnable(){
      public void run(){
        DownloadLink link=decryptedLinks.get(i);
        String url=link.getDownloadURL();
        if (url != null) {
          url=HTMLParser.getHttpLinkList(url);
          try {
            url=URLDecoder.decode(url,""String_Node_Str"");
          }
 catch (          Exception e) {
            logger.warning(""String_Node_Str"");
          }
        }
        dThread.setCouldDecrypt(false);
        for (        DecryptPluginWrapper pDecrypt : DecryptPluginWrapper.getDecryptWrapper()) {
          if (pDecrypt.usePlugin() && pDecrypt.canHandle(url)) {
            try {
              PluginForDecrypt plg=(PluginForDecrypt)pDecrypt.getNewPluginInstance();
              CryptedLink[] decryptableLinks=plg.getDecryptableLinks(url);
              url=plg.cutMatches(url);
              for (              CryptedLink cLink : decryptableLinks) {
                cLink.setDecrypterPassword(link.getDecrypterPassword());
              }
              ArrayList<DownloadLink> dLinks=plg.decryptLinks(decryptableLinks);
              for (              DownloadLink dLink : dLinks) {
                dLink.addSourcePluginPasswords(link.getSourcePluginPasswords());
              }
              newdecryptedLinks.addAll(dLinks);
              dThread.setCouldDecrypt(true);
              break;
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
));
    dThread.getThread().start();
    decryptThread.add(dThread);
  }
  for (int j=decryptThread.size() - 1; j >= 0; j--) {
    DThread thread=decryptThread.get(j);
    while (thread.getThread().isAlive()) {
      try {
        Thread.sleep(2);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    if (thread.couldDecrypt()) {
      decryptedLinks.remove(j);
      hasDecryptedLinks=true;
    }
  }
  decryptedLinks.addAll(newdecryptedLinks);
  return hasDecryptedLinks;
}","/** 
 * Sucht in dem übergebenen vector nach weiteren decryptbaren Links und decrypted diese
 * @param decryptedLinks
 * @return
 */
private boolean deepDecrypt(final ArrayList<DownloadLink> decryptedLinks){
  if (decryptedLinks.isEmpty())   return false;
  boolean hasDecryptedLinks=false;
class DThread extends Thread {
    private int number=0;
    private DownloadLink link=null;
    private Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
    boolean canDecrypt=false;
    public DThread(    int i,    DownloadLink link){
      this.link=link;
      this.number=i;
    }
    public Vector<DownloadLink> getDecryptedLinks(){
      return this.decryptedLinks;
    }
    public boolean couldDecrypt(){
      return canDecrypt;
    }
    public int getNumber(){
      return number;
    }
    public void setCouldDecrypt(    boolean bool){
      canDecrypt=bool;
    }
    public void run(){
      String url=link.getDownloadURL();
      if (url != null) {
        url=HTMLParser.getHttpLinkList(url);
        try {
          url=URLDecoder.decode(url,""String_Node_Str"");
        }
 catch (        Exception e) {
          logger.warning(""String_Node_Str"");
        }
      }
      for (      DecryptPluginWrapper pDecrypt : DecryptPluginWrapper.getDecryptWrapper()) {
        if (pDecrypt.usePlugin() && pDecrypt.canHandle(url)) {
          try {
            PluginForDecrypt plg=(PluginForDecrypt)pDecrypt.getNewPluginInstance();
            CryptedLink[] decryptableLinks=plg.getDecryptableLinks(url);
            url=plg.cutMatches(url);
            for (            CryptedLink cLink : decryptableLinks) {
              cLink.setDecrypterPassword(link.getDecrypterPassword());
            }
            ArrayList<DownloadLink> dLinks=plg.decryptLinks(decryptableLinks);
            for (            DownloadLink dLink : dLinks) {
              dLink.addSourcePluginPasswords(link.getSourcePluginPasswords());
            }
            setCouldDecrypt(true);
            if (dLinks != null && dLinks.size() > 0) {
              decryptedLinks.addAll(dLinks);
            }
            break;
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  ArrayList<DThread> decryptThread=new ArrayList<DThread>();
  for (int b=decryptedLinks.size() - 1; b >= 0; b--) {
    DThread dthread=new DThread(b,decryptedLinks.get(b));
    dthread.start();
    decryptThread.add(dthread);
  }
  Vector<DownloadLink> newdecryptedLinks=new Vector<DownloadLink>();
  for (int j=decryptThread.size() - 1; j >= 0; j--) {
    DThread thread=decryptThread.get(j);
    while (thread.isAlive()) {
      try {
        Thread.sleep(2);
      }
 catch (      InterruptedException e) {
      }
      if (thread.couldDecrypt()) {
        decryptedLinks.remove(thread.getNumber());
        if (thread.getDecryptedLinks().size() > 0) {
          newdecryptedLinks.addAll(thread.getDecryptedLinks());
          hasDecryptedLinks=true;
        }
      }
    }
  }
  decryptedLinks.addAll(newdecryptedLinks);
  return hasDecryptedLinks;
}"
21220,"public DDLWarez_Linkgrabber(int id,Browser br){
  downloadlink=null;
  gotjob=false;
  _status=THREADFAIL;
  Worker_ID=id;
  this.br=br;
}","public DDLWarez_Linkgrabber(ProgressController progress,int id,Browser br){
  downloadlink=null;
  gotjob=false;
  _status=THREADFAIL;
  Worker_ID=id;
  this.br=br;
  this.progress=progress;
}"
21221,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  for (int retry=1; retry <= 10; retry++) {
    try {
      br.setReadTimeout(5 * 60 * 1000);
      br.setConnectTimeout(5 * 60 * 1000);
      br.getPage(parameter);
      String pass=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
      Vector<String> passwords=new Vector<String>();
      passwords.add(""String_Node_Str"");
      if (pass != null && !pass.equals(""String_Node_Str"")) {
        passwords.add(pass);
      }
      Form[] forms=br.getForms();
      progress.setRange(forms.length);
      DDLWarez_Linkgrabber DDLWarez_Linkgrabbers[]=new DDLWarez_Linkgrabber[forms.length];
      for (int i=0; i < forms.length; ++i) {
synchronized (Worker_Delay) {
          Thread.sleep(Worker_Delay);
        }
        DDLWarez_Linkgrabbers[i]=new DDLWarez_Linkgrabber(i,br.cloneBrowser());
        DDLWarez_Linkgrabbers[i].setjob(forms[i]);
        DDLWarez_Linkgrabbers[i].start();
      }
      for (int i=0; i < forms.length; ++i) {
        try {
          DDLWarez_Linkgrabbers[i].join();
          if (DDLWarez_Linkgrabbers[i].status() == DDLWarez_Linkgrabber.THREADPASS) {
            DownloadLink link=createDownloadlink(DDLWarez_Linkgrabbers[i].getlink());
            link.setSourcePluginPasswords(passwords);
            decryptedLinks.add(link);
          }
          progress.increase(1);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      return decryptedLinks;
    }
 catch (    Exception e) {
      logger.finest(""String_Node_Str"");
    }
  }
  return null;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  for (int retry=1; retry <= 10; retry++) {
    try {
      br.setReadTimeout(5 * 60 * 1000);
      br.setConnectTimeout(5 * 60 * 1000);
      br.getPage(parameter);
      String pass=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
      Vector<String> passwords=new Vector<String>();
      passwords.add(""String_Node_Str"");
      if (pass != null && !pass.equals(""String_Node_Str"")) {
        passwords.add(pass);
      }
      Form[] forms=br.getForms();
      progress.setRange(forms.length);
      DDLWarez_Linkgrabber DDLWarez_Linkgrabbers[]=new DDLWarez_Linkgrabber[forms.length];
      for (int i=0; i < forms.length; ++i) {
synchronized (Worker_Delay) {
          Thread.sleep(Worker_Delay);
        }
        DDLWarez_Linkgrabbers[i]=new DDLWarez_Linkgrabber(progress,i,br.cloneBrowser());
        DDLWarez_Linkgrabbers[i].setjob(forms[i]);
        DDLWarez_Linkgrabbers[i].start();
      }
      for (int i=0; i < forms.length; ++i) {
        try {
          DDLWarez_Linkgrabbers[i].join();
          if (DDLWarez_Linkgrabbers[i].status() == DDLWarez_Linkgrabber.THREADPASS) {
            DownloadLink link=createDownloadlink(DDLWarez_Linkgrabbers[i].getlink());
            link.setSourcePluginPasswords(passwords);
            decryptedLinks.add(link);
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      return decryptedLinks;
    }
 catch (    Exception e) {
      logger.finest(""String_Node_Str"");
    }
  }
  return null;
}"
21222,"@Override public void run(){
  if (gotjob == true) {
    logger.finest(""String_Node_Str"" + new Integer(Worker_ID) + ""String_Node_Str"");
    String base=br.getBaseURL();
    String action=form.getAction(base);
    if (action.contains(""String_Node_Str"")) {
      Browser clone=br.cloneBrowser();
      for (int retry=1; retry <= 10; retry++) {
        try {
          clone.submitForm(form);
          downloadlink=clone.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
          break;
        }
 catch (        Exception e) {
          logger.finest(""String_Node_Str"" + new Integer(Worker_ID) + ""String_Node_Str"");
synchronized (DDLWarez.Worker_Delay) {
            DDLWarez.Worker_Delay=1000;
          }
        }
        try {
          Thread.sleep(1500);
        }
 catch (        InterruptedException e) {
        }
      }
    }
 else {
      logger.finest(""String_Node_Str"" + new Integer(Worker_ID) + ""String_Node_Str"");
      _status=THREADFAIL;
      return;
    }
  }
  logger.finest(""String_Node_Str"" + new Integer(Worker_ID) + ""String_Node_Str"");
  _status=THREADPASS;
}","@Override public void run(){
  if (gotjob == true) {
    logger.finest(""String_Node_Str"" + new Integer(Worker_ID) + ""String_Node_Str"");
    String base=br.getBaseURL();
    String action=form.getAction(base);
    if (action.contains(""String_Node_Str"")) {
      Browser clone=br.cloneBrowser();
      for (int retry=1; retry <= 10; retry++) {
        try {
          clone.submitForm(form);
          downloadlink=clone.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
          break;
        }
 catch (        Exception e) {
          logger.finest(""String_Node_Str"" + new Integer(Worker_ID) + ""String_Node_Str"");
synchronized (DDLWarez.Worker_Delay) {
            DDLWarez.Worker_Delay=1000;
          }
        }
        try {
          Thread.sleep(1500);
        }
 catch (        InterruptedException e) {
        }
      }
    }
 else {
      logger.finest(""String_Node_Str"" + new Integer(Worker_ID) + ""String_Node_Str"");
      _status=THREADFAIL;
      progress.increase(1);
      return;
    }
  }
  logger.finest(""String_Node_Str"" + new Integer(Worker_ID) + ""String_Node_Str"");
  _status=THREADPASS;
  progress.increase(1);
}"
21223,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String link=downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str"");
  downloadLink.setUrlDownload(link);
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  if (br.containsHTML(FILE_NOT_FOUND)) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(DOWNLOAD_NOTALLOWED)) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  Form login=br.getFormbyValue(""String_Node_Str"");
  login.put(""String_Node_Str"",account.getUser());
  login.put(""String_Node_Str"",account.getPass());
  br.submitForm(login);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    linkStatus.addStatus(LinkStatus.ERROR_PREMIUM);
    linkStatus.setValue(LinkStatus.VALUE_ID_PREMIUM_DISABLE);
    downloadLink.getLinkStatus().setErrorMessage(""String_Node_Str"");
    return;
  }
  link=br.getRegex(PATTERN_PREMIUM_REDIRECT).getMatch(0);
  br.getPage(link);
  if (br.containsHTML(PASSWORD_PROTECTED)) {
    String password=Plugin.getUserInput(JDLocale.L(""String_Node_Str"",""String_Node_Str""),downloadLink);
    br.postPage(link,""String_Node_Str"" + password);
  }
 else {
  }
  link=br.getRegex(PATTERN_PREMIUM_FINALURL).getMatch(0);
  if (link == null) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  dl=RAFDownload.download(downloadLink,br.createGetRequest(link),true,0);
  HTTPConnection con=dl.connect(br);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  if (Plugin.getFileNameFormHeader(con) == null || Plugin.getFileNameFormHeader(con).indexOf(""String_Node_Str"") >= 0) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String link=downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str"");
  downloadLink.setUrlDownload(link);
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  if (br.containsHTML(FILE_NOT_FOUND)) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(DOWNLOAD_NOTALLOWED)) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  Form login=br.getFormbyValue(""String_Node_Str"");
  login.put(""String_Node_Str"",account.getUser());
  login.put(""String_Node_Str"",account.getPass());
  br.submitForm(login);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    linkStatus.addStatus(LinkStatus.ERROR_PREMIUM);
    linkStatus.setValue(LinkStatus.VALUE_ID_PREMIUM_DISABLE);
    downloadLink.getLinkStatus().setErrorMessage(""String_Node_Str"");
    return;
  }
  link=br.getRegex(PATTERN_PREMIUM_REDIRECT).getMatch(0);
  br.getPage(link);
  if (br.containsHTML(PASSWORD_PROTECTED)) {
    String password=Plugin.getUserInput(JDLocale.L(""String_Node_Str"",""String_Node_Str""),downloadLink);
    br.postPage(link,""String_Node_Str"" + password);
  }
 else {
  }
  link=br.getRegex(PATTERN_PREMIUM_FINALURL).getMatch(0);
  if (link == null) {
    throw new PluginException(LinkStatus.ERROR_PREMIUM,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
  }
  dl=RAFDownload.download(downloadLink,br.createGetRequest(link),true,0);
  HTTPConnection con=dl.connect(br);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  if (Plugin.getFileNameFormHeader(con) == null || Plugin.getFileNameFormHeader(con).indexOf(""String_Node_Str"") >= 0) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  dl.startDownload();
}"
21224,"/** 
 * Startet das abwarbeiten der extractqueue
 */
private void addToQueue(final DownloadLink link){
  if (!new File(link.getFileOutput()).exists()) {
    return;
  }
  System.out.println(""String_Node_Str"" + link);
  link.getLinkStatus().removeStatus(LinkStatus.ERROR_POST_PROCESS);
  link.getLinkStatus().setErrorMessage(null);
  File dl=this.getExtractToPath(link);
  if (link.getHost().equals(DUMMY_HOSTER)) {
    ProgressController progress=new ProgressController(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",link.getFileOutput()),100);
    link.setProperty(""String_Node_Str"",progress);
  }
  UnrarWrapper wrapper=new UnrarWrapper(link);
  wrapper.addUnrarListener(this);
  wrapper.setExtractTo(dl);
  wrapper.setRemoveAfterExtract(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,false));
  wrapper.setOverwrite(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_OVERWRITE,true));
  wrapper.setUnrarCommand(getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND));
  ArrayList<String> pwList=new ArrayList<String>();
  String[] linkPws=JDUtilities.passwordStringToArray(link.getFilePackage().getPassword());
  for (  String pw : linkPws) {
    pwList.add(pw);
  }
  pwList.addAll(PasswordList.getPasswordList());
  wrapper.setPasswordList(pwList.toArray(new String[]{}));
  queue.add(wrapper);
  queue.start();
  ArrayList<DownloadLink> list=this.getArchiveList(link);
  for (  DownloadLink l : list) {
    if (l == null)     continue;
    l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,dl.getAbsolutePath());
  }
}","/** 
 * Startet das abwarbeiten der extractqueue
 */
private void addToQueue(final DownloadLink link){
  if (!new File(link.getFileOutput()).exists()) {
    return;
  }
  System.out.println(""String_Node_Str"" + link + ""String_Node_Str""+ CODEPAGE+ ""String_Node_Str"");
  link.getLinkStatus().removeStatus(LinkStatus.ERROR_POST_PROCESS);
  link.getLinkStatus().setErrorMessage(null);
  File dl=this.getExtractToPath(link);
  if (link.getHost().equals(DUMMY_HOSTER)) {
    ProgressController progress=new ProgressController(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",link.getFileOutput()),100);
    link.setProperty(""String_Node_Str"",progress);
  }
  UnrarWrapper wrapper=new UnrarWrapper(link);
  wrapper.addUnrarListener(this);
  wrapper.setExtractTo(dl);
  wrapper.setRemoveAfterExtract(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,false));
  wrapper.setOverwrite(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_OVERWRITE,true));
  wrapper.setUnrarCommand(getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND));
  ArrayList<String> pwList=new ArrayList<String>();
  String[] linkPws=JDUtilities.passwordStringToArray(link.getFilePackage().getPassword());
  for (  String pw : linkPws) {
    pwList.add(pw);
  }
  pwList.addAll(PasswordList.getPasswordList());
  wrapper.setPasswordList(pwList.toArray(new String[]{}));
  queue.add(wrapper);
  queue.start();
  ArrayList<DownloadLink> list=this.getArchiveList(link);
  for (  DownloadLink l : list) {
    if (l == null)     continue;
    l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,dl.getAbsolutePath());
  }
}"
21225,"@Override public void onBufferChanged(Executer exec,DynByteBuffer buffer,int latestNum){
  String lastLine;
  try {
    lastLine=new String(buffer.getLast(buffer.position() - lastLinePosition),Executer.CODEPAGE);
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    lastLine=new String(buffer.getLast(buffer.position() - lastLinePosition));
  }
  if (new Regex(lastLine,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).matches()) {
    exec.writetoOutputStream(this.password);
  }
  if (new Regex(lastLine,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).matches()) {
    exec.interrupt();
  }
 else   if (new Regex(lastLine,""String_Node_Str"").matches()) {
    exec.writetoOutputStream(""String_Node_Str"");
  }
}","@Override public void onBufferChanged(Executer exec,DynByteBuffer buffer,int latestNum){
  String lastLine;
  try {
    lastLine=new String(buffer.getLast(buffer.position() - lastLinePosition),JDUnrar.CODEPAGE);
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    lastLine=new String(buffer.getLast(buffer.position() - lastLinePosition));
  }
  if (new Regex(lastLine,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).matches()) {
    exec.writetoOutputStream(this.password);
  }
  if (new Regex(lastLine,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).matches()) {
    exec.interrupt();
  }
 else   if (new Regex(lastLine,""String_Node_Str"").matches()) {
    exec.writetoOutputStream(""String_Node_Str"");
  }
}"
21226,"private void crackPassword(){
  ArchivFile file=null;
  this.crackProgress=0;
  fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
  for (  ArchivFile f : files) {
    if (f.isProtected()) {
      if (file == null) {
        file=f;
        continue;
      }
 else       if (f.getSize() < file.getSize()) {
        file=f;
      }
    }
  }
  File fileFile=new File(this.file.getParentFile(),System.currentTimeMillis() + ""String_Node_Str"");
  JDUtilities.writeLocalFile(fileFile,file.getFilepath());
  fileFile.deleteOnExit();
  if (file.getSize() < 2097152) {
    int c=0;
    for (    String pass : this.passwordList) {
      crackProgress=((c++) * 100) / passwordList.length;
      fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
      pass=escapePassword(pass);
      Executer exec=new Executer(unrarCommand);
      exec.setDebug(DEBUG);
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(""String_Node_Str"" + fileFile.getName());
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(this.file.getName());
      exec.setRunin(this.file.getParentFile().getAbsolutePath());
      exec.setWaitTimeout(-1);
      exec.addProcessListener(new PasswordListener(pass),Executer.LISTENER_ERRORSTREAM);
      exec.start();
      exec.waitTimeout();
      String res=exec.getOutputStream() + ""String_Node_Str"" + exec.getErrorStream();
      if (res.indexOf(""String_Node_Str"") != -1 || res.contains(""String_Node_Str"")) {
        continue;
      }
 else       if (res.matches(""String_Node_Str"")) {
        this.password=pass;
        crackProgress=100;
        fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
        return;
      }
 else {
        continue;
      }
    }
  }
 else {
    int c=0;
    for (    String pass : this.passwordList) {
      crackProgress=((c++) * 100) / passwordList.length;
      fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
      Executer exec=new Executer(unrarCommand);
      exec.setDebug(DEBUG);
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(""String_Node_Str"" + fileFile.getName());
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(this.file.getName());
      exec.setRunin(this.file.getParentFile().getAbsolutePath());
      exec.setWaitTimeout(-1);
      exec.addProcessListener(new PasswordListener(pass),Executer.LISTENER_ERRORSTREAM);
      exec.addProcessListener(new ProcessListener(){
        @Override public void onBufferChanged(        Executer exec,        DynByteBuffer buffer,        int latestNum){
          if (buffer.position() >= 50) {
            exec.interrupt();
            System.out.println(""String_Node_Str"");
          }
        }
        @Override public void onProcess(        Executer exec,        String latestLine,        DynByteBuffer sb){
        }
      }
,Executer.LISTENER_STDSTREAM);
      exec.start();
      exec.waitTimeout();
      String res=exec.getErrorStream();
      if (new Regex(res,""String_Node_Str"").matches() || res.contains(""String_Node_Str"")) {
        continue;
      }
      String sig=""String_Node_Str"";
      DynByteBuffer buff=exec.getInputStreamBuffer();
      buff.flip();
      for (int i=0; i < buff.limit(); i++) {
        byte f=buff.get();
        String s=Integer.toHexString((int)f);
        s=(s.length() < 2 ? ""String_Node_Str"" + s : s);
        s=s.substring(s.length() - 2);
        sig+=s;
      }
      JDUtilities.getLogger().finest(exec.getInputStreamBuffer() + ""String_Node_Str"" + sig);
      if (sig.trim().length() < 8)       continue;
      Signature signature=FileSignatures.getSignature(sig);
      if (signature != null) {
        if (signature.getExtension().matcher(file.getFilepath()).matches()) {
          this.password=pass;
          crackProgress=100;
          fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
          return;
        }
 else {
          if (!signature.getDesc().equals(""String_Node_Str"")) {
            this.password=pass;
          }
 else {
            if (password == null)             password=pass;
          }
        }
      }
    }
  }
  crackProgress=100;
  fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
}","private void crackPassword(){
  ArchivFile file=null;
  this.crackProgress=0;
  fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
  for (  ArchivFile f : files) {
    if (f.isProtected()) {
      if (file == null) {
        file=f;
        continue;
      }
 else       if (f.getSize() < file.getSize()) {
        file=f;
      }
    }
  }
  File fileFile=new File(this.file.getParentFile(),System.currentTimeMillis() + ""String_Node_Str"");
  JDUtilities.writeLocalFile(fileFile,file.getFilepath());
  fileFile.deleteOnExit();
  if (file.getSize() < 2097152) {
    int c=0;
    for (    String pass : this.passwordList) {
      crackProgress=((c++) * 100) / passwordList.length;
      fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
      pass=escapePassword(pass);
      Executer exec=new Executer(unrarCommand);
      exec.setCodepage(JDUnrar.CODEPAGE);
      exec.setDebug(DEBUG);
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(""String_Node_Str"" + fileFile.getName());
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(this.file.getName());
      exec.setRunin(this.file.getParentFile().getAbsolutePath());
      exec.setWaitTimeout(-1);
      exec.addProcessListener(new PasswordListener(pass),Executer.LISTENER_ERRORSTREAM);
      exec.start();
      exec.waitTimeout();
      String res=exec.getOutputStream() + ""String_Node_Str"" + exec.getErrorStream();
      if (res.indexOf(""String_Node_Str"") != -1 || res.contains(""String_Node_Str"")) {
        continue;
      }
 else       if (res.matches(""String_Node_Str"")) {
        this.password=pass;
        crackProgress=100;
        fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
        return;
      }
 else {
        continue;
      }
    }
  }
 else {
    int c=0;
    for (    String pass : this.passwordList) {
      crackProgress=((c++) * 100) / passwordList.length;
      fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
      Executer exec=new Executer(unrarCommand);
      exec.setCodepage(JDUnrar.CODEPAGE);
      exec.setDebug(DEBUG);
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(""String_Node_Str"" + fileFile.getName());
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(""String_Node_Str"");
      exec.addParameter(this.file.getName());
      exec.setRunin(this.file.getParentFile().getAbsolutePath());
      exec.setWaitTimeout(-1);
      exec.addProcessListener(new PasswordListener(pass),Executer.LISTENER_ERRORSTREAM);
      exec.addProcessListener(new ProcessListener(){
        @Override public void onBufferChanged(        Executer exec,        DynByteBuffer buffer,        int latestNum){
          if (buffer.position() >= 50) {
            exec.interrupt();
            System.out.println(""String_Node_Str"");
          }
        }
        @Override public void onProcess(        Executer exec,        String latestLine,        DynByteBuffer sb){
        }
      }
,Executer.LISTENER_STDSTREAM);
      exec.start();
      exec.waitTimeout();
      String res=exec.getErrorStream();
      if (new Regex(res,""String_Node_Str"").matches() || res.contains(""String_Node_Str"")) {
        continue;
      }
      String sig=""String_Node_Str"";
      DynByteBuffer buff=exec.getInputStreamBuffer();
      buff.flip();
      for (int i=0; i < buff.limit(); i++) {
        byte f=buff.get();
        String s=Integer.toHexString((int)f);
        s=(s.length() < 2 ? ""String_Node_Str"" + s : s);
        s=s.substring(s.length() - 2);
        sig+=s;
      }
      JDUtilities.getLogger().finest(exec.getInputStreamBuffer() + ""String_Node_Str"" + sig);
      if (sig.trim().length() < 8)       continue;
      Signature signature=FileSignatures.getSignature(sig);
      if (signature != null) {
        if (signature.getExtension().matcher(file.getFilepath()).matches()) {
          this.password=pass;
          crackProgress=100;
          fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
          return;
        }
 else {
          if (!signature.getDesc().equals(""String_Node_Str"")) {
            this.password=pass;
          }
 else {
            if (password == null)             password=pass;
          }
        }
      }
    }
  }
  crackProgress=100;
  fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
}"
21227,"/** 
 * Gibt das ArchiveFile zum lokalen Pfad currentWorkingFile zurück
 * @param currentWorkingFile
 * @return
 */
ArchivFile getArchivFile(String currentWorkingFile){
  currentWorkingFile=Encoding.filterString(currentWorkingFile);
  for (  ArchivFile af : files) {
    if (Encoding.filterString(af.getFilepath()).equals(currentWorkingFile)) {
      return af;
    }
  }
  return null;
}","/** 
 * Gibt das ArchiveFile zum lokalen Pfad currentWorkingFile zurück. Falls sonderzeichen den namensmatch unmöglich machen, Wird über levensthein veruscht den besten Trefer zu finden
 * @param currentWorkingFile
 * @return
 */
ArchivFile getArchivFile(String currentWorkingFile){
  for (  ArchivFile af : files) {
    if (af.getFilepath().equals(currentWorkingFile)) {
      return af;
    }
  }
  ArchivFile best=null;
  int value=Integer.MAX_VALUE;
  int cur;
  for (  ArchivFile af : files) {
    cur=JDUtilities.getLevenshteinDistance(best.getFilepath(),currentWorkingFile);
    if (cur < value) {
      value=cur;
      best=af;
    }
  }
  return best;
}"
21228,"@Override public void onProcess(Executer exec,String latestLine,DynByteBuffer totalBuffer){
  String match=null;
  if (latestLine.length() > 0) {
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      String currentWorkingFile=match.trim();
      currentlyWorkingOn=getArchivFile(currentWorkingFile);
      fireEvent(JDUnrarConstants.WRAPPER_PROGRESS_NEW_SINGLE_FILE_STARTED);
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      archiveParts.add(match.trim());
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      currentVolume=Integer.parseInt(match.trim());
      long ext=totalSize / volumeNum * (currentVolume - 1);
      if (ext == 0) {
        return;
      }
      try {
        speed=ext / ((System.currentTimeMillis() - startTime) / 1000);
      }
 catch (      Exception e) {
      }
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      exactProgress=true;
      currentlyWorkingOn.setPercent(Integer.parseInt(match));
      fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
      return;
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      currentlyWorkingOn.setPercent(100);
      fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
      fireEvent(JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED);
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      String currentWorkingFile=match.trim();
      currentlyWorkingOn=getArchivFile(currentWorkingFile);
      match=new Regex(latestLine,""String_Node_Str"").getMatch(0);
      currentVolume=Integer.parseInt(match.trim());
      exec.interrupt();
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED;
      exec.interrupt();
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      exec.interrupt();
    }
  }
}","@Override public void onProcess(Executer exec,String latestLine,DynByteBuffer totalBuffer){
  String match=null;
  if (latestLine.length() > 0) {
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      String currentWorkingFile=match.trim();
      currentlyWorkingOn=getArchivFile(currentWorkingFile);
      fireEvent(JDUnrarConstants.WRAPPER_PROGRESS_NEW_SINGLE_FILE_STARTED);
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      archiveParts.add(match.trim());
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      currentVolume=Integer.parseInt(match.trim());
      long ext=totalSize / volumeNum * (currentVolume - 1);
      if (ext == 0) {
        return;
      }
      try {
        speed=ext / ((System.currentTimeMillis() - startTime) / 1000);
      }
 catch (      Exception e) {
      }
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      if (currentlyWorkingOn != null) {
        exactProgress=true;
        currentlyWorkingOn.setPercent(Integer.parseInt(match));
        fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
      }
      return;
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      if (currentlyWorkingOn != null) {
        currentlyWorkingOn.setPercent(100);
        fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
        fireEvent(JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED);
      }
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      String currentWorkingFile=match.trim();
      currentlyWorkingOn=getArchivFile(currentWorkingFile);
      match=new Regex(latestLine,""String_Node_Str"").getMatch(0);
      currentVolume=Integer.parseInt(match.trim());
      exec.interrupt();
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED;
      exec.interrupt();
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      exec.interrupt();
    }
  }
}"
21229,"private boolean extract(){
  fireEvent(JDUnrarConstants.WRAPPER_START_EXTRACTION);
  Executer exec=new Executer(unrarCommand);
  exec.setDebug(DEBUG);
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  if (overwriteFiles) {
    exec.addParameter(""String_Node_Str"");
  }
 else {
    exec.addParameter(""String_Node_Str"");
  }
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(file.getAbsolutePath());
  if (extractTo != null) {
    extractTo.mkdirs();
    exec.setRunin(extractTo.getAbsolutePath());
  }
 else {
    exec.setRunin(file.getParentFile().getAbsolutePath());
  }
  exec.setWaitTimeout(-1);
  exec.addProcessListener(new ExtractListener(),Executer.LISTENER_ERRORSTREAM | Executer.LISTENER_ERRORSTREAM);
  exec.addProcessListener(new PasswordListener(password),Executer.LISTENER_ERRORSTREAM);
  exec.start();
  this.startTime=System.currentTimeMillis();
  Thread inter=new Thread(){
    public void run(){
      while (true) {
        if (!exactProgress) {
          if (!exactProgress) {
            long est=speed * ((System.currentTimeMillis() - startTime) / 1000);
            for (            ArchivFile f : files) {
              long part=Math.min(est,f.getSize());
              est-=part;
              if (part == 0 && f.getSize() == 0) {
                f.setPercent(100);
              }
 else {
                f.setPercent((int)((part * 100) / f.getSize()));
              }
              if (est <= 0)               break;
            }
            fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
          }
 else {
            return;
          }
        }
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
  }
;
  statusid=-1;
  inter.start();
  exec.waitTimeout();
  inter.interrupt();
  config.setProperty(""String_Node_Str"",speed);
  config.save();
  if (statusid > 0)   return false;
  return true;
}","private boolean extract(){
  fireEvent(JDUnrarConstants.WRAPPER_START_EXTRACTION);
  Executer exec=new Executer(unrarCommand);
  exec.setCodepage(JDUnrar.CODEPAGE);
  exec.setDebug(DEBUG);
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  if (overwriteFiles) {
    exec.addParameter(""String_Node_Str"");
  }
 else {
    exec.addParameter(""String_Node_Str"");
  }
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(""String_Node_Str"");
  exec.addParameter(file.getAbsolutePath());
  if (extractTo != null) {
    extractTo.mkdirs();
    exec.setRunin(extractTo.getAbsolutePath());
  }
 else {
    exec.setRunin(file.getParentFile().getAbsolutePath());
  }
  exec.setWaitTimeout(-1);
  exec.addProcessListener(new ExtractListener(),Executer.LISTENER_ERRORSTREAM | Executer.LISTENER_ERRORSTREAM);
  exec.addProcessListener(new PasswordListener(password),Executer.LISTENER_ERRORSTREAM);
  exec.start();
  this.startTime=System.currentTimeMillis();
  Thread inter=new Thread(){
    public void run(){
      while (true) {
        if (!exactProgress) {
          if (!exactProgress) {
            long est=speed * ((System.currentTimeMillis() - startTime) / 1000);
            for (            ArchivFile f : files) {
              long part=Math.min(est,f.getSize());
              est-=part;
              if (part == 0 && f.getSize() == 0) {
                f.setPercent(100);
              }
 else {
                f.setPercent((int)((part * 100) / f.getSize()));
              }
              if (est <= 0)               break;
            }
            fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
          }
 else {
            return;
          }
        }
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
  }
;
  statusid=-1;
  inter.start();
  exec.waitTimeout();
  inter.interrupt();
  config.setProperty(""String_Node_Str"",speed);
  config.save();
  if (statusid > 0)   return false;
  return true;
}"
21230,"private boolean open() throws UnrarException {
  String pass=null;
  int i=0;
  fireEvent(JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE);
  int c=0;
  while (true) {
    Executer exec=new Executer(unrarCommand);
    exec.setDebug(DEBUG);
    if (i > 0) {
      if (passwordList.length < i) {
        return false;
      }
      pass=this.passwordList[i - 1];
    }
    if (c > 0) {
      crackProgress=((c) * 100) / passwordList.length;
      fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
    }
    c++;
    i++;
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(""String_Node_Str"");
    exec.addProcessListener(new PasswordListener(pass),Executer.LISTENER_ERRORSTREAM);
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(file.getName());
    exec.setRunin(file.getParentFile().getAbsolutePath());
    exec.setWaitTimeout(-1);
    exec.setDebug(true);
    exec.start();
    exec.waitTimeout();
    String res=exec.getOutputStream() + ""String_Node_Str"" + exec.getErrorStream();
    JDUtilities.getLogger().finest(res);
    String match;
    if ((match=new Regex(res,Pattern.compile(""String_Node_Str"")).getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      match=new Regex(match,""String_Node_Str"").getMatch(0);
      currentVolume=Integer.parseInt(match.trim());
      return false;
    }
    if (res.contains(""String_Node_Str"") || res.contains(""String_Node_Str"")) {
      throw new UnrarException(""String_Node_Str"" + file.getAbsolutePath());
    }
    if (res.indexOf(""String_Node_Str"") != -1 || res.contains(""String_Node_Str"")) {
      JDUtilities.getLogger().finest(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ pass);
      continue;
    }
 else {
      String[] volumes=Pattern.compile(""String_Node_Str"",Pattern.DOTALL).split(res);
      ArchivFile tmp=null;
      String namen=""String_Node_Str"";
      this.files=new ArrayList<ArchivFile>();
      this.totalSize=0;
      for (      String volume : volumes) {
        res=volume;
        Pattern patternvolumes=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        Matcher matchervolumes=patternvolumes.matcher(res);
        String vol=new Regex(res,""String_Node_Str"").getMatch(0);
        if (vol != null) {
          volumeNum=Integer.parseInt(vol.trim());
        }
        while (matchervolumes.find()) {
          String name=matchervolumes.group(1);
          name=Encoding.UTF8Encode(name);
          if (name.matches(""String_Node_Str"")) {
            name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            long size=Long.parseLong(matchervolumes.group(2));
            this.isProtected=true;
            if (pass != null && password != pass) {
              this.password=pass;
              fireEvent(JDUnrarConstants.WRAPPER_PASSWORD_FOUND);
            }
            if (!name.equals(namen) && !matchervolumes.group(4).equals(""String_Node_Str"")) {
              tmp=new ArchivFile(name);
              tmp.setSize(size);
              tmp.setPath(this.getExtractTo());
              tmp.setProtected(true);
              tmp.addVolume(vol);
              files.add(tmp);
              namen=name;
              totalSize+=size;
            }
 else             if (name.equals(namen)) {
              tmp.addVolume(vol);
            }
          }
 else {
            name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            if (!name.equals(namen) && !matchervolumes.group(4).equals(""String_Node_Str"")) {
              tmp=new ArchivFile(name);
              tmp.setPath(this.getExtractTo());
              long size;
              tmp.setSize(size=Long.parseLong(matchervolumes.group(2)));
              totalSize+=size;
              tmp.setProtected(false);
              tmp.addVolume(vol);
              files.add(tmp);
              namen=name;
            }
 else             if (name.equals(namen)) {
              tmp.addVolume(vol);
            }
          }
        }
      }
      if (res.indexOf(""String_Node_Str"") != -1) {
        return false;
      }
      return true;
    }
  }
}","private boolean open() throws UnrarException {
  String pass=null;
  int i=0;
  fireEvent(JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE);
  int c=0;
  while (true) {
    Executer exec=new Executer(unrarCommand);
    exec.setCodepage(JDUnrar.CODEPAGE);
    exec.setDebug(DEBUG);
    if (i > 0) {
      if (passwordList.length < i) {
        return false;
      }
      pass=this.passwordList[i - 1];
    }
    if (c > 0) {
      crackProgress=((c) * 100) / passwordList.length;
      fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
    }
    c++;
    i++;
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(""String_Node_Str"");
    exec.addProcessListener(new PasswordListener(pass),Executer.LISTENER_ERRORSTREAM);
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(file.getName());
    exec.setRunin(file.getParentFile().getAbsolutePath());
    exec.setWaitTimeout(-1);
    exec.setDebug(true);
    exec.start();
    exec.waitTimeout();
    String res=exec.getOutputStream() + ""String_Node_Str"" + exec.getErrorStream();
    JDUtilities.getLogger().finest(res);
    String match;
    if ((match=new Regex(res,Pattern.compile(""String_Node_Str"")).getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      match=new Regex(match,""String_Node_Str"").getMatch(0);
      currentVolume=Integer.parseInt(match.trim());
      return false;
    }
    if (res.contains(""String_Node_Str"") || res.contains(""String_Node_Str"")) {
      throw new UnrarException(""String_Node_Str"" + file.getAbsolutePath());
    }
    if (res.indexOf(""String_Node_Str"") != -1 || res.contains(""String_Node_Str"")) {
      JDUtilities.getLogger().finest(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ pass);
      continue;
    }
 else {
      String[] volumes=Pattern.compile(""String_Node_Str"",Pattern.DOTALL).split(res);
      ArchivFile tmp=null;
      String namen=""String_Node_Str"";
      this.files=new ArrayList<ArchivFile>();
      this.totalSize=0;
      for (      String volume : volumes) {
        res=volume;
        Pattern patternvolumes=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        Matcher matchervolumes=patternvolumes.matcher(res);
        String vol=new Regex(res,""String_Node_Str"").getMatch(0);
        if (vol != null) {
          volumeNum=Integer.parseInt(vol.trim());
        }
        while (matchervolumes.find()) {
          String name=matchervolumes.group(1);
          if (name.matches(""String_Node_Str"")) {
            name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            long size=Long.parseLong(matchervolumes.group(2));
            this.isProtected=true;
            if (pass != null && password != pass) {
              this.password=pass;
              fireEvent(JDUnrarConstants.WRAPPER_PASSWORD_FOUND);
            }
            if (!name.equals(namen) && !matchervolumes.group(4).equals(""String_Node_Str"")) {
              tmp=new ArchivFile(name);
              tmp.setSize(size);
              tmp.setPath(this.getExtractTo());
              tmp.setProtected(true);
              tmp.addVolume(vol);
              files.add(tmp);
              namen=name;
              totalSize+=size;
            }
 else             if (name.equals(namen)) {
              tmp.addVolume(vol);
            }
          }
 else {
            name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            if (!name.equals(namen) && !matchervolumes.group(4).equals(""String_Node_Str"")) {
              tmp=new ArchivFile(name);
              tmp.setPath(this.getExtractTo());
              long size;
              tmp.setSize(size=Long.parseLong(matchervolumes.group(2)));
              totalSize+=size;
              tmp.setProtected(false);
              tmp.addVolume(vol);
              files.add(tmp);
              namen=name;
            }
 else             if (name.equals(namen)) {
              tmp.addVolume(vol);
            }
          }
        }
      }
      if (res.indexOf(""String_Node_Str"") != -1) {
        return false;
      }
      return true;
    }
  }
}"
21231,"@SuppressWarnings(""String_Node_Str"") private void go(){
  final JDInit init=new JDInit(splashScreen);
  logger.info(""String_Node_Str"");
  init.init();
  init.loadImages();
  Main.setSplashStatus(splashScreen,10,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.loadConfiguration();
  if (debug) {
    JDUtilities.getLogger().setLevel(Level.ALL);
  }
  JDInit.setupProxy();
  JDInit.setupSocks();
  CFGConfig.getConfig(""String_Node_Str"").save();
  init.removeFiles();
  if (JDUtilities.getConfiguration().getInteractions().size() > 0 && JDUtilities.getSubConfig(Configuration.CONFIG_INTERACTIONS).getProperty(Configuration.PARAM_INTERACTIONS,null) == null) {
    JDUtilities.getSubConfig(Configuration.CONFIG_INTERACTIONS).setProperty(Configuration.PARAM_INTERACTIONS,JDUtilities.getConfiguration().getInteractions());
    JDUtilities.getConfiguration().setInteractions(new Vector<Interaction>());
    JDUtilities.saveConfig();
  }
  Main.setSplashStatus(splashScreen,10,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  final JDController controller=init.initController();
  if (debug || JDUtilities.getConfiguration().getBooleanProperty(Configuration.LOGGER_FILELOG,false)) {
    try {
      File log=JDUtilities.getResourceFile(""String_Node_Str"" + (debug ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str"");
      if (!log.getParentFile().exists()) {
        log.getParentFile().mkdir();
      }
      controller.setLogFileWriter(new BufferedWriter(new FileWriter(log)));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  Main.setSplashStatus(splashScreen,10,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.doWebupdate(false);
  Main.setSplashStatus(splashScreen,15,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.initPlugins();
  Main.setSplashStatus(splashScreen,20,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.initGUI(controller);
  Main.setSplashStatus(splashScreen,20,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.loadDownloadQueue();
  Main.setSplashStatus(splashScreen,100,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  controller.setInitStatus(JDController.INIT_STATUS_COMPLETE);
  Properties pr=System.getProperties();
  TreeSet propKeys=new TreeSet(pr.keySet());
  for (Iterator it=propKeys.iterator(); it.hasNext(); ) {
    String key=(String)it.next();
    logger.finer(""String_Node_Str"" + key + ""String_Node_Str""+ pr.get(key));
  }
  logger.info(""String_Node_Str"" + JDUtilities.getJDTitle());
  logger.info(""String_Node_Str"" + JDUtilities.getRunType());
  try {
    splashScreen.finish();
  }
 catch (  Exception e) {
  }
  init.checkUpdate();
  init.checkMessage();
  Level level=JDUtilities.getLogger().getLevel();
  if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL_JARED && (JDUtilities.getConfiguration().getBooleanProperty(Configuration.LOGGER_FILELOG,false) || level.equals(Level.ALL) || level.equals(Level.FINER)|| level.equals(Level.FINE)) && !debug) {
    JDUtilities.getGUI().showHelpMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.LF(""String_Node_Str"",""String_Node_Str"",level.getName(),JDUtilities.getConfiguration().getBooleanProperty(Configuration.LOGGER_FILELOG,false) ? JDLocale.L(""String_Node_Str"",""String_Node_Str"") : JDLocale.L(""String_Node_Str"",""String_Node_Str"")),true,JDLocale.L(""String_Node_Str"",""String_Node_Str""),null,10);
  }
  JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_INIT_COMPLETE,null));
  try {
    Thread.sleep(3000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  new PackageManager().interact(this);
}","@SuppressWarnings(""String_Node_Str"") private void go(){
  final JDInit init=new JDInit(splashScreen);
  logger.info(""String_Node_Str"");
  init.init();
  init.loadImages();
  Main.setSplashStatus(splashScreen,10,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.loadConfiguration();
  if (debug) {
    JDUtilities.getLogger().setLevel(Level.ALL);
  }
  JDInit.setupProxy();
  JDInit.setupSocks();
  CFGConfig.getConfig(""String_Node_Str"").save();
  init.removeFiles();
  if (JDUtilities.getConfiguration().getInteractions().size() > 0 && JDUtilities.getSubConfig(Configuration.CONFIG_INTERACTIONS).getProperty(Configuration.PARAM_INTERACTIONS,null) == null) {
    JDUtilities.getSubConfig(Configuration.CONFIG_INTERACTIONS).setProperty(Configuration.PARAM_INTERACTIONS,JDUtilities.getConfiguration().getInteractions());
    JDUtilities.getConfiguration().setInteractions(new Vector<Interaction>());
    JDUtilities.saveConfig();
  }
  Main.setSplashStatus(splashScreen,10,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  final JDController controller=init.initController();
  if (debug || JDUtilities.getConfiguration().getBooleanProperty(Configuration.LOGGER_FILELOG,false)) {
    try {
      File log=JDUtilities.getResourceFile(""String_Node_Str"" + (debug ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str"");
      if (!log.getParentFile().exists()) {
        log.getParentFile().mkdir();
      }
      controller.setLogFileWriter(new BufferedWriter(new FileWriter(log)));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  Main.setSplashStatus(splashScreen,10,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.doWebupdate(false);
  Main.setSplashStatus(splashScreen,15,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.initPlugins();
  Main.setSplashStatus(splashScreen,20,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.initGUI(controller);
  Main.setSplashStatus(splashScreen,20,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  init.loadDownloadQueue();
  Main.setSplashStatus(splashScreen,100,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  controller.setInitStatus(JDController.INIT_STATUS_COMPLETE);
  Properties pr=System.getProperties();
  TreeSet propKeys=new TreeSet(pr.keySet());
  for (Iterator it=propKeys.iterator(); it.hasNext(); ) {
    String key=(String)it.next();
    logger.finer(""String_Node_Str"" + key + ""String_Node_Str""+ pr.get(key));
  }
  logger.info(""String_Node_Str"" + JDUtilities.getRunType());
  try {
    splashScreen.finish();
  }
 catch (  Exception e) {
  }
  init.checkUpdate();
  init.checkMessage();
  Level level=JDUtilities.getLogger().getLevel();
  if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL_JARED && (JDUtilities.getConfiguration().getBooleanProperty(Configuration.LOGGER_FILELOG,false) || level.equals(Level.ALL) || level.equals(Level.FINER)|| level.equals(Level.FINE)) && !debug) {
    JDUtilities.getGUI().showHelpMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.LF(""String_Node_Str"",""String_Node_Str"",level.getName(),JDUtilities.getConfiguration().getBooleanProperty(Configuration.LOGGER_FILELOG,false) ? JDLocale.L(""String_Node_Str"",""String_Node_Str"") : JDLocale.L(""String_Node_Str"",""String_Node_Str"")),true,JDLocale.L(""String_Node_Str"",""String_Node_Str""),null,10);
  }
  JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_INIT_COMPLETE,null));
  try {
    Thread.sleep(3000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  new PackageManager().interact(this);
}"
21232,"/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  JDSounds.PT(""String_Node_Str"");
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    linkListPane.moveSelectedItems(e.getID());
  break;
case JDAction.APP_ALLOW_RECONNECT:
logger.finer(""String_Node_Str"");
boolean checked=!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
if (checked) {
displayMiniWarning(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),10000);
}
JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,checked);
JDUtilities.saveConfig();
break;
case JDAction.APP_PAUSE_DOWNLOADS:
btnPause.setSelected(!btnPause.isSelected());
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
btnPause.setIcon(new ImageIcon(JDUtilities.getImage(getPauseImage())));
break;
case JDAction.APP_CLIPBOARD:
logger.finer(""String_Node_Str"");
ClipboardHandler.getClipboard().toggleActivation();
break;
case JDAction.APP_START_STOP_DOWNLOADS:
logger.finer(""String_Node_Str"");
startStopDownloads();
btnStartStop.setIcon(new ImageIcon(JDUtilities.getImage(getStartStopDownloadImage())));
btnPause.setIcon(new ImageIcon(JDUtilities.getImage(getPauseImage())));
break;
case JDAction.APP_SAVE_DLC:
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (ret == null) {
return;
}
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(frame) == JDFileChooser.APPROVE_OPTION) {
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_RESTART:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_RESTART));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
new Thread(){
@Override public void run(){
doReconnect();
}
}
.start();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
linkListPane.removeSelectedLinks();
}
}
 else {
linkListPane.removeSelectedLinks();
}
break;
case JDAction.APP_OPEN_OPT_CONFIG:
SimpleGUI.showConfigDialog(frame,new ConfigPanelAddons(JDUtilities.getConfiguration()),false);
break;
case JDAction.ITEMS_REMOVE_PACKAGES:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
JDUtilities.getController().removeCompletedPackages();
}
}
 else {
JDUtilities.getController().removeCompletedPackages();
}
break;
case JDAction.ITEMS_REMOVE_LINKS:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
JDUtilities.getController().removeCompletedDownloadLinks();
}
}
 else {
JDUtilities.getController().removeCompletedDownloadLinks();
}
break;
case JDAction.ITEMS_DND:
toggleDnD();
break;
case JDAction.ABOUT:
JDAboutDialog.getDialog().setVisible(true);
break;
case JDAction.CHANGES:
showChangelogDialog();
break;
case JDAction.ITEMS_ADD:
String cb=""String_Node_Str"";
try {
cb=(String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
}
 catch (Exception e1) {
}
String data=LinkInputDialog.showDialog(frame,cb.trim());
if (data != null && data.length() > 0) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.HELP:
try {
JLinkButton.openURL(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.WIKI:
try {
JLinkButton.openURL(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.APP_CONFIGURATION:
showConfig();
break;
}
}","/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  JDSounds.PT(""String_Node_Str"");
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    linkListPane.moveSelectedItems(e.getID());
  break;
case JDAction.APP_ALLOW_RECONNECT:
logger.finer(""String_Node_Str"");
boolean checked=!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
if (checked) {
displayMiniWarning(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),10000);
}
JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,checked);
JDUtilities.saveConfig();
break;
case JDAction.APP_PAUSE_DOWNLOADS:
btnPause.setSelected(!btnPause.isSelected());
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
btnPause.setIcon(new ImageIcon(JDUtilities.getImage(getPauseImage())));
break;
case JDAction.APP_CLIPBOARD:
logger.finer(""String_Node_Str"");
ClipboardHandler.getClipboard().toggleActivation();
break;
case JDAction.APP_START_STOP_DOWNLOADS:
logger.finer(""String_Node_Str"");
startStopDownloads();
btnStartStop.setIcon(new ImageIcon(JDUtilities.getImage(getStartStopDownloadImage())));
btnPause.setIcon(new ImageIcon(JDUtilities.getImage(getPauseImage())));
break;
case JDAction.APP_SAVE_DLC:
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (ret == null) {
return;
}
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(frame) == JDFileChooser.APPROVE_OPTION) {
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_RESTART:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_RESTART));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
new Thread(){
@Override public void run(){
doReconnect();
}
}
.start();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
linkListPane.removeSelectedLinks();
}
}
 else {
linkListPane.removeSelectedLinks();
}
break;
case JDAction.APP_OPEN_OPT_CONFIG:
SimpleGUI.showConfigDialog(frame,new ConfigPanelAddons(JDUtilities.getConfiguration()),false);
JDUtilities.saveConfig();
break;
case JDAction.ITEMS_REMOVE_PACKAGES:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
JDUtilities.getController().removeCompletedPackages();
}
}
 else {
JDUtilities.getController().removeCompletedPackages();
}
break;
case JDAction.ITEMS_REMOVE_LINKS:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
JDUtilities.getController().removeCompletedDownloadLinks();
}
}
 else {
JDUtilities.getController().removeCompletedDownloadLinks();
}
break;
case JDAction.ITEMS_DND:
toggleDnD();
break;
case JDAction.ABOUT:
JDAboutDialog.getDialog().setVisible(true);
break;
case JDAction.CHANGES:
showChangelogDialog();
break;
case JDAction.ITEMS_ADD:
String cb=""String_Node_Str"";
try {
cb=(String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
}
 catch (Exception e1) {
}
String data=LinkInputDialog.showDialog(frame,cb.trim());
if (data != null && data.length() > 0) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.HELP:
try {
JLinkButton.openURL(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.WIKI:
try {
JLinkButton.openURL(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.APP_CONFIGURATION:
showConfig();
break;
}
}"
21233,"@Override public void handleFree(DownloadLink parameter) throws Exception {
  LinkStatus linkStatus=parameter.getLinkStatus();
  DownloadLink downloadLink=parameter;
  this.setBrowserExclusive();
  String link=downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  br.forceDebug(true);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(DOWNLOAD_NOTALLOWED)) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  Form form=br.getFormbyValue(""String_Node_Str"");
  if (form != null) {
    br.submitForm(form);
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
    }
  }
 else {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
    }
  }
  if (br.containsHTML(PASSWORD_PROTECTED)) {
    String password=Plugin.getUserInput(JDLocale.L(""String_Node_Str"",""String_Node_Str""),downloadLink);
    br.postPage(link,""String_Node_Str"" + password);
  }
  if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  form=br.getFormbyValue(""String_Node_Str"");
  Request r=br.createFormRequest(form);
  dl=RAFDownload.download(downloadLink,r,false,1);
  HTTPConnection con=dl.connect(br);
  if (con == null) {
    if (br.containsHTML(""String_Node_Str"")) {
      linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
      linkStatus.setValue(30000l);
      return;
    }
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  if (con.getHeaderField(""String_Node_Str"") != null && con.getHeaderField(""String_Node_Str"").indexOf(""String_Node_Str"") > 0) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  if (Plugin.getFileNameFormHeader(con) == null || Plugin.getFileNameFormHeader(con).indexOf(""String_Node_Str"") >= 0) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink parameter) throws Exception {
  LinkStatus linkStatus=parameter.getLinkStatus();
  DownloadLink downloadLink=parameter;
  this.setBrowserExclusive();
  String link=downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  br.forceDebug(true);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(DOWNLOAD_NOTALLOWED)) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  Form form=br.getFormbyValue(""String_Node_Str"");
  if (form != null) {
    br.submitForm(form);
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
    }
  }
 else {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
    }
  }
  if (br.containsHTML(PASSWORD_PROTECTED)) {
    String password=Plugin.getUserInput(JDLocale.L(""String_Node_Str"",""String_Node_Str""),downloadLink);
    br.postPage(link,""String_Node_Str"" + password);
  }
  if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  form=br.getFormbyValue(""String_Node_Str"");
  dl=br.openDownload(downloadLink,form);
  HTTPConnection con=dl.getConnection();
  if (con == null) {
    if (br.containsHTML(""String_Node_Str"")) {
      linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
      linkStatus.setValue(30000l);
      return;
    }
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  if (con.getHeaderField(""String_Node_Str"") != null && con.getHeaderField(""String_Node_Str"").indexOf(""String_Node_Str"") > 0) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  if (Plugin.getFileNameFormHeader(con) == null || Plugin.getFileNameFormHeader(con).indexOf(""String_Node_Str"") >= 0) {
    linkStatus.addStatus(LinkStatus.ERROR_RETRY);
    return;
  }
  dl.startDownload();
}"
21234,"public ShareOnlineBiz(PluginWrapper wrapper){
  super(wrapper);
}","public ShareOnlineBiz(PluginWrapper wrapper){
  super(wrapper);
  this.enablePremium(""String_Node_Str"");
}"
21235,"public JDChat(PluginWrapper wrapper){
  super(wrapper);
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
}","public JDChat(PluginWrapper wrapper){
  super(wrapper);
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  initConfigEntries();
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
  COMMANDS.add(""String_Node_Str"");
}"
21236,"public boolean initAddon(){
  NAMES=new ArrayList<User>();
  sb=new StringBuffer();
  initConfigEntries();
  return true;
}","public boolean initAddon(){
  NAMES=new ArrayList<User>();
  sb=new StringBuffer();
  return true;
}"
21237,"/** 
 * Startet das abwarbeiten der extractqueue
 */
private void addToQueue(final DownloadLink link){
  if (!new File(link.getFileOutput()).exists()) {
    return;
  }
  System.out.println(""String_Node_Str"" + link + ""String_Node_Str""+ CODEPAGE+ ""String_Node_Str"");
  link.getLinkStatus().removeStatus(LinkStatus.ERROR_POST_PROCESS);
  link.getLinkStatus().setErrorMessage(null);
  File dl=this.getExtractToPath(link);
  if (link.getHost().equals(DUMMY_HOSTER)) {
    ProgressController progress=new ProgressController(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",link.getFileOutput()),100);
    link.setProperty(""String_Node_Str"",progress);
  }
  UnrarWrapper wrapper=new UnrarWrapper(link);
  wrapper.addUnrarListener(this);
  wrapper.setExtractTo(dl);
  wrapper.setRemoveAfterExtract(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,false));
  wrapper.setOverwrite(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_OVERWRITE,true));
  wrapper.setUnrarCommand(getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND));
  ArrayList<String> pwList=new ArrayList<String>();
  String[] linkPws=JDUtilities.passwordStringToArray(link.getFilePackage().getPassword());
  for (  String pw : linkPws) {
    pwList.add(pw);
  }
  pwList.addAll(PasswordList.getPasswordList());
  wrapper.setPasswordList(pwList.toArray(new String[]{}));
  queue.add(wrapper);
  queue.start();
  ArrayList<DownloadLink> list=this.getArchiveList(link);
  for (  DownloadLink l : list) {
    if (l == null)     continue;
    l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,dl.getAbsolutePath());
  }
}","/** 
 * Startet das abwarbeiten der extractqueue
 */
private void addToQueue(final DownloadLink link){
  if (!new File(link.getFileOutput()).exists()) {
    return;
  }
  System.out.println(""String_Node_Str"" + link + ""String_Node_Str""+ CODEPAGE+ ""String_Node_Str"");
  link.getLinkStatus().removeStatus(LinkStatus.ERROR_POST_PROCESS);
  link.getLinkStatus().setErrorMessage(null);
  File dl=this.getExtractToPath(link);
  if (link.getHost().equals(DUMMY_HOSTER)) {
    ProgressController progress=new ProgressController(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",link.getFileOutput()),100);
    link.setProperty(""String_Node_Str"",progress);
  }
  UnrarWrapper wrapper=new UnrarWrapper(link);
  wrapper.addUnrarListener(this);
  wrapper.setExtractTo(dl);
  wrapper.setRemoveAfterExtract(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,false));
  wrapper.setOverwrite(this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_OVERWRITE,true));
  wrapper.setUnrarCommand(getPluginConfig().getStringProperty(JDUnrarConstants.CONFIG_KEY_UNRARCOMMAND));
  ArrayList<String> pwList=new ArrayList<String>();
  String[] linkPws=JDUtilities.passwordStringToArray(link.getFilePackage().getPassword());
  for (  String pw : linkPws) {
    pwList.add(pw);
  }
  pwList.addAll(PasswordList.getPasswordList());
  pwList.add(this.getArchiveName(link));
  pwList.add(new File(link.getFileOutput()).getName());
  wrapper.setPasswordList(pwList.toArray(new String[]{}));
  queue.add(wrapper);
  queue.start();
  ArrayList<DownloadLink> list=this.getArchiveList(link);
  for (  DownloadLink l : list) {
    if (l == null)     continue;
    l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,dl.getAbsolutePath());
  }
}"
21238,"/** 
 * Als Dummy wird ein downloadlink bezeicnet, der nicht ind er downloadliste war, sondern nur angelegt wurde um als container für ein externes archiv zu dienen. Zur Fortschrittsanzeige wird ein progresscontroller verwendet
 * @param id
 * @param wrapper
 */
private void onUnrarDummyEvent(int id,UnrarWrapper wrapper){
  ProgressController pc=(ProgressController)wrapper.getDownloadLink().getProperty(""String_Node_Str"");
  int min;
switch (id) {
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED:
    if (wrapper.getException() != null) {
      pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str""+ wrapper.getException().getMessage());
    }
 else {
      pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
    }
  this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_FAILED_PASSWORD:
pc.setStatusText(""String_Node_Str"");
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,true)) {
String pass=JDUtilities.getGUI().showUserInputDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getName()));
if (pass == null) {
this.onFinished(wrapper);
break;
}
wrapper.setPassword(pass);
}
break;
case JDUnrarConstants.WRAPPER_PASSWORT_CRACKING:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
pc.setRange(100);
pc.setStatus(wrapper.getCrackProgress());
break;
case JDUnrarConstants.WRAPPER_CRACK_PASSWORD:
break;
case JDUnrarConstants.WRAPPER_NEW_STATUS:
break;
case JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
break;
case JDUnrarConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
min=this.getPluginConfig().getIntegerProperty(JDUnrarConstants.CONFIG_KEY_SUBPATH_MINNUM,0);
if (min > 0) {
ArrayList<ArchivFile> files=wrapper.getFiles();
int i=0;
for (ArchivFile af : files) {
if (af.getSize() > 0) i++;
}
if (i < min) {
Boolean usesub=this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,false);
this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,false);
File dl=this.getExtractToPath(wrapper.getDownloadLink());
wrapper.setExtractTo(dl);
this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,usesub);
}
}
break;
case JDUnrarConstants.WRAPPER_PASSWORD_FOUND:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
break;
case JDUnrarConstants.WRAPPER_ON_PROGRESS:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
pc.setRange(wrapper.getTotalSize());
pc.setStatus(wrapper.getExtractedSize());
break;
case JDUnrarConstants.WRAPPER_START_EXTRACTION:
break;
case JDUnrarConstants.WRAPPER_STARTED:
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED:
break;
case JDUnrarConstants.WRAPPER_FINISHED_SUCCESSFULL:
File[] files=new File[wrapper.getFiles().size()];
int i=0;
for (ArchivFile af : wrapper.getFiles()) {
files[i++]=af.getFile();
}
JDUtilities.getController().fireControlEvent(new ControlEvent(wrapper,ControlEvent.CONTROL_ON_FILEOUTPUT,files));
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,false)) {
File fileOutput=new File(wrapper.getDownloadLink().getFileOutput());
File infoFiles=new File(fileOutput.getParentFile(),fileOutput.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
if (infoFiles.exists() && infoFiles.delete()) {
logger.info(infoFiles.getName() + ""String_Node_Str"");
}
}
this.onFinished(wrapper);
break;
default :
System.out.println(""String_Node_Str"");
}
}","/** 
 * Als Dummy wird ein downloadlink bezeicnet, der nicht ind er downloadliste war, sondern nur angelegt wurde um als container für ein externes archiv zu dienen. Zur Fortschrittsanzeige wird ein progresscontroller verwendet
 * @param id
 * @param wrapper
 */
private void onUnrarDummyEvent(int id,UnrarWrapper wrapper){
  ProgressController pc=(ProgressController)wrapper.getDownloadLink().getProperty(""String_Node_Str"");
  int min;
switch (id) {
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED:
    if (wrapper.getException() != null) {
      pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str""+ wrapper.getException().getMessage());
    }
 else {
      pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
    }
  this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PASSWORD_NEEDED_TO_CONTINUE:
pc.setStatusText(""String_Node_Str"");
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,true)) {
String pass=JDUtilities.getGUI().showUserInputDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getName()));
if (pass == null) {
this.onFinished(wrapper);
break;
}
wrapper.setPassword(pass);
}
break;
case JDUnrarConstants.WRAPPER_PASSWORT_CRACKING:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
pc.setRange(100);
pc.setStatus(wrapper.getCrackProgress());
break;
case JDUnrarConstants.WRAPPER_CRACK_PASSWORD:
break;
case JDUnrarConstants.WRAPPER_NEW_STATUS:
break;
case JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
break;
case JDUnrarConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
assignRealDownloadDir(wrapper);
break;
case JDUnrarConstants.WRAPPER_PASSWORD_FOUND:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
break;
case JDUnrarConstants.WRAPPER_ON_PROGRESS:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
pc.setRange(wrapper.getTotalSize());
pc.setStatus(wrapper.getExtractedSize());
break;
case JDUnrarConstants.WRAPPER_START_EXTRACTION:
break;
case JDUnrarConstants.WRAPPER_STARTED:
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC:
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED:
break;
case JDUnrarConstants.WRAPPER_FINISHED_SUCCESSFULL:
File[] files=new File[wrapper.getFiles().size()];
int i=0;
for (ArchivFile af : wrapper.getFiles()) {
files[i++]=af.getFile();
}
JDUtilities.getController().fireControlEvent(new ControlEvent(wrapper,ControlEvent.CONTROL_ON_FILEOUTPUT,files));
pc.setStatusText(wrapper.getFile().getName() + ""String_Node_Str"" + ""String_Node_Str"");
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,false)) {
File fileOutput=new File(wrapper.getDownloadLink().getFileOutput());
File infoFiles=new File(fileOutput.getParentFile(),fileOutput.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
if (infoFiles.exists() && infoFiles.delete()) {
logger.info(infoFiles.getName() + ""String_Node_Str"");
}
}
this.onFinished(wrapper);
break;
default :
System.out.println(""String_Node_Str"");
}
}"
21239,"public void onUnrarEvent(int id,UnrarWrapper wrapper){
  LinkStatus ls=wrapper.getDownloadLink().getLinkStatus();
  if (wrapper.getDownloadLink().getFilePackage() == FilePackage.getDefaultFilePackage() && wrapper.getDownloadLink().getProperty(""String_Node_Str"") == null) {
    logger.warning(""String_Node_Str"" + wrapper.getDownloadLink());
    ProgressController progress=new ProgressController(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getFileOutput()),100);
    wrapper.getDownloadLink().setProperty(""String_Node_Str"",progress);
  }
  if (wrapper.getDownloadLink().getProperty(""String_Node_Str"") != null) {
    onUnrarDummyEvent(id,wrapper);
    return;
  }
  int min;
switch (id) {
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED:
    ArrayList<DownloadLink> list=this.getArchiveList(wrapper.getDownloadLink());
  for (  DownloadLink link : list) {
    if (link == null)     continue;
    LinkStatus lls=link.getLinkStatus();
    if (wrapper.getException() != null) {
      lls.addStatus(LinkStatus.ERROR_POST_PROCESS);
      lls.setErrorMessage(""String_Node_Str"" + wrapper.getException().getMessage());
      link.requestGuiUpdate();
    }
 else {
      lls.addStatus(LinkStatus.ERROR_POST_PROCESS);
      lls.setErrorMessage(""String_Node_Str"");
      link.requestGuiUpdate();
    }
  }
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_FAILED_PASSWORD:
wrapper.getDownloadLink().requestGuiUpdate();
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,true)) {
String pass=JDUtilities.getGUI().showUserInputDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getName()));
if (pass == null) {
ls.addStatus(LinkStatus.ERROR_POST_PROCESS);
ls.setStatusText(""String_Node_Str"");
this.onFinished(wrapper);
break;
}
wrapper.setPassword(pass);
}
break;
case JDUnrarConstants.WRAPPER_CRACK_PASSWORD:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_NEW_STATUS:
break;
case JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
min=this.getPluginConfig().getIntegerProperty(JDUnrarConstants.CONFIG_KEY_SUBPATH_MINNUM,0);
if (min > 0) {
ArrayList<ArchivFile> files=wrapper.getFiles();
int i=0;
for (ArchivFile af : files) {
if (af.getSize() > 0) i++;
}
if (min <= i) {
Boolean usesub=this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,false);
this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,false);
File dl=this.getExtractToPath(wrapper.getDownloadLink());
wrapper.setExtractTo(dl);
this.getPluginConfig().setProperty(JDUnrarConstants.CONFIG_KEY_USE_SUBPATH,usesub);
ArrayList<DownloadLink> linkList=this.getArchiveList(wrapper.getDownloadLink());
for (DownloadLink l : linkList) {
if (l == null) continue;
l.setProperty(JDUnrarConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,dl.getAbsolutePath());
}
}
}
break;
case JDUnrarConstants.WRAPPER_PASSWORD_FOUND:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
wrapper.getDownloadLink().setPluginProgress(null);
break;
case JDUnrarConstants.WRAPPER_PASSWORT_CRACKING:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getCrackProgress(),100,Color.GREEN.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getCrackProgress());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_ON_PROGRESS:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getExtractedSize(),wrapper.getTotalSize(),Color.YELLOW.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getExtractedSize());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_START_EXTRACTION:
break;
case JDUnrarConstants.WRAPPER_STARTED:
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC:
list=this.getArchiveList(wrapper.getDownloadLink());
DownloadLink crc=list.size() >= wrapper.getCurrentVolume() ? list.get(wrapper.getCurrentVolume() - 1) : null;
if (crc != null) {
crc.getLinkStatus().removeStatus(LinkStatus.FINISHED);
crc.getLinkStatus().addStatus(LinkStatus.ERROR_DOWNLOAD_FAILED);
crc.getLinkStatus().setErrorMessage(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",crc.getName()));
crc.requestGuiUpdate();
}
 else {
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().setErrorMessage(""String_Node_Str"");
link.requestGuiUpdate();
}
}
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED:
break;
case JDUnrarConstants.WRAPPER_FINISHED_SUCCESSFULL:
list=this.getArchiveList(wrapper.getDownloadLink());
File[] files=new File[wrapper.getFiles().size()];
int i=0;
for (ArchivFile af : wrapper.getFiles()) {
files[i++]=af.getFile();
}
JDUtilities.getController().fireControlEvent(new ControlEvent(wrapper,ControlEvent.CONTROL_ON_FILEOUTPUT,files));
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().addStatus(LinkStatus.FINISHED);
link.getLinkStatus().setStatusText(""String_Node_Str"");
link.requestGuiUpdate();
}
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,false)) {
File fileOutput=new File(wrapper.getDownloadLink().getFileOutput());
File infoFiles=new File(fileOutput.getParentFile(),fileOutput.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
if (infoFiles.exists() && infoFiles.delete()) {
logger.info(infoFiles.getName() + ""String_Node_Str"");
}
}
this.onFinished(wrapper);
break;
default :
System.out.println(""String_Node_Str"");
}
}","public void onUnrarEvent(int id,UnrarWrapper wrapper){
  LinkStatus ls=wrapper.getDownloadLink().getLinkStatus();
  if (wrapper.getDownloadLink().getFilePackage() == FilePackage.getDefaultFilePackage() && wrapper.getDownloadLink().getProperty(""String_Node_Str"") == null) {
    logger.warning(""String_Node_Str"" + wrapper.getDownloadLink());
    ProgressController progress=new ProgressController(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getFileOutput()),100);
    wrapper.getDownloadLink().setProperty(""String_Node_Str"",progress);
  }
  if (wrapper.getDownloadLink().getProperty(""String_Node_Str"") != null) {
    onUnrarDummyEvent(id,wrapper);
    return;
  }
  int min;
switch (id) {
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED:
    ArrayList<DownloadLink> list=this.getArchiveList(wrapper.getDownloadLink());
  for (  DownloadLink link : list) {
    if (link == null)     continue;
    LinkStatus lls=link.getLinkStatus();
    if (wrapper.getException() != null) {
      lls.addStatus(LinkStatus.ERROR_POST_PROCESS);
      lls.setErrorMessage(""String_Node_Str"" + wrapper.getException().getMessage());
      link.requestGuiUpdate();
    }
 else {
      lls.addStatus(LinkStatus.ERROR_POST_PROCESS);
      lls.setErrorMessage(""String_Node_Str"");
      link.requestGuiUpdate();
    }
  }
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PASSWORD_NEEDED_TO_CONTINUE:
wrapper.getDownloadLink().requestGuiUpdate();
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,true)) {
String pass=JDUtilities.getGUI().showUserInputDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",wrapper.getDownloadLink().getName()));
if (pass == null) {
ls.addStatus(LinkStatus.ERROR_POST_PROCESS);
ls.setStatusText(""String_Node_Str"");
this.onFinished(wrapper);
break;
}
wrapper.setPassword(pass);
}
break;
case JDUnrarConstants.WRAPPER_CRACK_PASSWORD:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_NEW_STATUS:
break;
case JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
assignRealDownloadDir(wrapper);
break;
case JDUnrarConstants.WRAPPER_PASSWORD_FOUND:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
wrapper.getDownloadLink().setPluginProgress(null);
break;
case JDUnrarConstants.WRAPPER_PASSWORT_CRACKING:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getCrackProgress(),100,Color.GREEN.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getCrackProgress());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_ON_PROGRESS:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getExtractedSize(),wrapper.getTotalSize(),Color.YELLOW.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getExtractedSize());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_START_EXTRACTION:
break;
case JDUnrarConstants.WRAPPER_STARTED:
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC:
list=this.getArchiveList(wrapper.getDownloadLink());
DownloadLink crc=list.size() >= wrapper.getCurrentVolume() ? list.get(wrapper.getCurrentVolume() - 1) : null;
if (crc != null) {
crc.getLinkStatus().removeStatus(LinkStatus.FINISHED);
crc.getLinkStatus().addStatus(LinkStatus.ERROR_DOWNLOAD_FAILED);
crc.getLinkStatus().setErrorMessage(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",crc.getName()));
crc.requestGuiUpdate();
}
 else {
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().setErrorMessage(""String_Node_Str"");
link.requestGuiUpdate();
}
}
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED:
break;
case JDUnrarConstants.WRAPPER_FINISHED_SUCCESSFULL:
list=this.getArchiveList(wrapper.getDownloadLink());
File[] files=new File[wrapper.getFiles().size()];
int i=0;
for (ArchivFile af : wrapper.getFiles()) {
files[i++]=af.getFile();
}
JDUtilities.getController().fireControlEvent(new ControlEvent(wrapper,ControlEvent.CONTROL_ON_FILEOUTPUT,files));
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().addStatus(LinkStatus.FINISHED);
link.getLinkStatus().setStatusText(""String_Node_Str"");
link.requestGuiUpdate();
}
if (this.getPluginConfig().getBooleanProperty(JDUnrarConstants.CONFIG_KEY_REMOVE_INFO_FILE,false)) {
File fileOutput=new File(wrapper.getDownloadLink().getFileOutput());
File infoFiles=new File(fileOutput.getParentFile(),fileOutput.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
if (infoFiles.exists() && infoFiles.delete()) {
logger.info(infoFiles.getName() + ""String_Node_Str"");
}
}
this.onFinished(wrapper);
break;
default :
System.out.println(""String_Node_Str"");
}
}"
21240,"private boolean open() throws UnrarException {
  String pass=null;
  int i=0;
  fireEvent(JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE);
  int c=0;
  while (true) {
    Executer exec=new Executer(unrarCommand);
    exec.setCodepage(JDUnrar.CODEPAGE);
    exec.setDebug(DEBUG);
    if (i > 0) {
      if (passwordList.length < i) {
        return false;
      }
      pass=this.passwordList[i - 1];
    }
    if (c > 0) {
      crackProgress=((c) * 100) / passwordList.length;
      fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
    }
    c++;
    i++;
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(""String_Node_Str"");
    exec.addProcessListener(new PasswordListener(pass),Executer.LISTENER_ERRORSTREAM);
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(file.getName());
    exec.setRunin(file.getParentFile().getAbsolutePath());
    exec.setWaitTimeout(-1);
    exec.setDebug(true);
    exec.start();
    exec.waitTimeout();
    String res=exec.getOutputStream() + ""String_Node_Str"" + exec.getErrorStream();
    JDUtilities.getLogger().finest(res);
    String match;
    if ((match=new Regex(res,Pattern.compile(""String_Node_Str"")).getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      match=new Regex(match,""String_Node_Str"").getMatch(0);
      currentVolume=Integer.parseInt(match.trim());
      return false;
    }
    if (res.contains(""String_Node_Str"") || res.contains(""String_Node_Str"")) {
      throw new UnrarException(""String_Node_Str"" + file.getAbsolutePath());
    }
    if (res.indexOf(""String_Node_Str"") != -1 || res.contains(""String_Node_Str"")) {
      JDUtilities.getLogger().finest(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ pass);
      continue;
    }
 else {
      String[] volumes=Pattern.compile(""String_Node_Str"",Pattern.DOTALL).split(res);
      ArchivFile tmp=null;
      String namen=""String_Node_Str"";
      this.files=new ArrayList<ArchivFile>();
      this.totalSize=0;
      for (      String volume : volumes) {
        res=volume;
        Pattern patternvolumes=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        Matcher matchervolumes=patternvolumes.matcher(res);
        String vol=new Regex(res,""String_Node_Str"").getMatch(0);
        if (vol != null) {
          volumeNum=Integer.parseInt(vol.trim());
        }
        while (matchervolumes.find()) {
          String name=matchervolumes.group(1);
          if (name.matches(""String_Node_Str"")) {
            name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            long size=Long.parseLong(matchervolumes.group(2));
            this.isProtected=true;
            if (pass != null && password != pass) {
              this.password=pass;
              fireEvent(JDUnrarConstants.WRAPPER_PASSWORD_FOUND);
            }
            if (!name.equals(namen) && !matchervolumes.group(4).equals(""String_Node_Str"")) {
              tmp=new ArchivFile(name);
              tmp.setSize(size);
              tmp.setPath(this.getExtractTo());
              tmp.setProtected(true);
              tmp.addVolume(vol);
              files.add(tmp);
              namen=name;
              totalSize+=size;
            }
 else             if (name.equals(namen)) {
              tmp.addVolume(vol);
            }
          }
 else {
            name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            if (!name.equals(namen) && !matchervolumes.group(4).equals(""String_Node_Str"")) {
              tmp=new ArchivFile(name);
              tmp.setPath(this.getExtractTo());
              long size;
              tmp.setSize(size=Long.parseLong(matchervolumes.group(2)));
              totalSize+=size;
              tmp.setProtected(false);
              tmp.addVolume(vol);
              files.add(tmp);
              namen=name;
            }
 else             if (name.equals(namen)) {
              tmp.addVolume(vol);
            }
          }
        }
      }
      if (res.indexOf(""String_Node_Str"") != -1) {
        return false;
      }
      return true;
    }
  }
}","private boolean open() throws UnrarException {
  String pass=null;
  int i=0;
  fireEvent(JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE);
  int c=0;
  while (true) {
    Executer exec=new Executer(unrarCommand);
    exec.setCodepage(JDUnrar.CODEPAGE);
    exec.setDebug(DEBUG);
    if (i > 0) {
      if (passwordList.length < i) {
        fireEvent(JDUnrarConstants.WRAPPER_PASSWORD_NEEDED_TO_CONTINUE);
        if (password == null)         return false;
        pass=password;
        password=null;
      }
 else {
        pass=this.passwordList[i - 1];
      }
    }
    if (c > 0) {
      crackProgress=((c) * 100) / passwordList.length;
      fireEvent(JDUnrarConstants.WRAPPER_PASSWORT_CRACKING);
    }
    c++;
    i++;
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(""String_Node_Str"");
    exec.addProcessListener(new PasswordListener(pass),Executer.LISTENER_ERRORSTREAM);
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(""String_Node_Str"");
    exec.addParameter(file.getName());
    exec.setRunin(file.getParentFile().getAbsolutePath());
    exec.setWaitTimeout(-1);
    exec.setDebug(true);
    exec.start();
    exec.waitTimeout();
    String res=exec.getOutputStream() + ""String_Node_Str"" + exec.getErrorStream();
    JDUtilities.getLogger().finest(res);
    String match;
    if ((match=new Regex(res,Pattern.compile(""String_Node_Str"")).getMatch(0)) != null) {
      statusid=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      match=new Regex(match,""String_Node_Str"").getMatch(0);
      currentVolume=Integer.parseInt(match.trim());
      return false;
    }
    if (res.contains(""String_Node_Str"") || res.contains(""String_Node_Str"")) {
      throw new UnrarException(""String_Node_Str"" + file.getAbsolutePath());
    }
    if (res.indexOf(""String_Node_Str"") != -1 || res.contains(""String_Node_Str"")) {
      JDUtilities.getLogger().finest(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ pass);
      continue;
    }
 else {
      String[] volumes=Pattern.compile(""String_Node_Str"",Pattern.DOTALL).split(res);
      ArchivFile tmp=null;
      String namen=""String_Node_Str"";
      this.files=new ArrayList<ArchivFile>();
      this.totalSize=0;
      for (      String volume : volumes) {
        res=volume;
        Pattern patternvolumes=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        Matcher matchervolumes=patternvolumes.matcher(res);
        String vol=new Regex(res,""String_Node_Str"").getMatch(0);
        if (vol != null) {
          volumeNum=Integer.parseInt(vol.trim());
        }
        while (matchervolumes.find()) {
          String name=matchervolumes.group(1);
          if (name.matches(""String_Node_Str"")) {
            name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            long size=Long.parseLong(matchervolumes.group(2));
            this.isProtected=true;
            if (pass != null && password != pass) {
              this.password=pass;
              fireEvent(JDUnrarConstants.WRAPPER_PASSWORD_FOUND);
            }
            if (!name.equals(namen) && !matchervolumes.group(4).equals(""String_Node_Str"")) {
              tmp=new ArchivFile(name);
              tmp.setSize(size);
              tmp.setPath(this.getExtractTo());
              tmp.setProtected(true);
              tmp.addVolume(vol);
              files.add(tmp);
              namen=name;
              totalSize+=size;
            }
 else             if (name.equals(namen)) {
              tmp.addVolume(vol);
            }
          }
 else {
            name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            if (!name.equals(namen) && !matchervolumes.group(4).equals(""String_Node_Str"")) {
              tmp=new ArchivFile(name);
              tmp.setPath(this.getExtractTo());
              long size;
              tmp.setSize(size=Long.parseLong(matchervolumes.group(2)));
              totalSize+=size;
              tmp.setProtected(false);
              tmp.addVolume(vol);
              files.add(tmp);
              namen=name;
            }
 else             if (name.equals(namen)) {
              tmp.addVolume(vol);
            }
          }
        }
      }
      if (res.indexOf(""String_Node_Str"") != -1) {
        return false;
      }
      return true;
    }
  }
}"
21241,"public void writetoOutputStream(String data){
  if (data == null || data.length() == 0)   data=""String_Node_Str"";
  data=data.trim() + ""String_Node_Str"";
  try {
    outputStream.write(data.getBytes());
    if (isDebug())     logger.finest(""String_Node_Str"" + data);
    outputStream.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void writetoOutputStream(String data){
  if (data == null || data.length() == 0)   data=""String_Node_Str"";
  try {
    outputStream.write(data.getBytes());
    outputStream.write(""String_Node_Str"".getBytes());
    if (isDebug())     logger.finest(""String_Node_Str"" + data);
    outputStream.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
21242,"public void interrupt(){
  super.interrupt();
  if (sbeObserver != null)   this.sbeObserver.interrupt();
  if (sboObserver != null)   this.sboObserver.interrupt();
  process.destroy();
}","public void interrupt(){
  new InterruptedException(""String_Node_Str"").printStackTrace();
  super.interrupt();
  if (sbeObserver != null)   this.sbeObserver.interrupt();
  if (sboObserver != null)   this.sboObserver.interrupt();
  process.destroy();
}"
21243,"public Installer(){
  ConfigContainer configContainer;
  configContainer=new ConfigContainer(this,""String_Node_Str"");
  configContainer.addEntry(new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME),SimpleGUI.PARAM_LOCALE,JDLocale.getLocaleIDs().toArray(new String[]{}),JDLocale.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(Locale.getDefault()));
  SimpleGUI.showConfigDialog(null,configContainer,true);
  if (JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(SimpleGUI.PARAM_LOCALE) == null) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    this.aborted=true;
    return;
  }
  JDLocale.setLocale(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(SimpleGUI.PARAM_LOCALE,""String_Node_Str""));
  configContainer=new ConfigContainer(this,""String_Node_Str"");
  configContainer.addEntry(new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,JDUtilities.getConfiguration(),Configuration.PARAM_DOWNLOAD_DIRECTORY,JDLocale.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath()));
  SimpleGUI.showConfigDialog(null,configContainer,true);
  if (JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY) == null) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    this.aborted=true;
    return;
  }
  JDUtilities.saveConfig();
}","public Installer(){
  ConfigContainer configContainer;
  configContainer=new ConfigContainer(this,""String_Node_Str"");
  configContainer.addEntry(new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME),SimpleGUI.PARAM_LOCALE,JDLocale.getLocaleIDs().toArray(new String[]{}),JDLocale.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(Locale.getDefault()));
  SimpleGUI.showConfigDialog(null,configContainer);
  if (JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(SimpleGUI.PARAM_LOCALE) == null) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    this.aborted=true;
    return;
  }
  JDLocale.setLocale(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(SimpleGUI.PARAM_LOCALE,""String_Node_Str""));
  configContainer=new ConfigContainer(this,""String_Node_Str"");
  configContainer.addEntry(new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,JDUtilities.getConfiguration(),Configuration.PARAM_DOWNLOAD_DIRECTORY,JDLocale.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(JDUtilities.getResourceFile(""String_Node_Str"").getAbsolutePath()));
  SimpleGUI.showConfigDialog(null,configContainer);
  if (JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY) == null) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    this.aborted=true;
    return;
  }
  JDUtilities.saveConfig();
}"
21244,"/** 
 * Constructor
 */
@SuppressWarnings(""String_Node_Str"") public DatabaseConnector(){
  try {
    logger.info(""String_Node_Str"");
    new Exception().printStackTrace();
    con=DriverManager.getConnection(""String_Node_Str"" + configpath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    con.setAutoCommit(true);
    con.createStatement().executeUpdate(""String_Node_Str"");
    boolean checktables=true;
    try {
      ResultSet rs=con.createStatement().executeQuery(""String_Node_Str"");
    }
 catch (    Exception e) {
      logger.warning(""String_Node_Str"");
      e.printStackTrace();
      checktables=false;
    }
    if (!new File(configpath + ""String_Node_Str"").exists() | !checktables) {
      logger.info(""String_Node_Str"");
      con.createStatement().executeUpdate(""String_Node_Str"");
      con.createStatement().executeUpdate(""String_Node_Str"");
      PreparedStatement pst=con.prepareStatement(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      File f=null;
      for (      String tmppath : new File(configpath).list()) {
        try {
          if (tmppath.endsWith(""String_Node_Str"")) {
            logger.finest(""String_Node_Str"" + tmppath);
            Object props=JDUtilities.loadObject(null,f=JDUtilities.getResourceFile(""String_Node_Str"" + tmppath),false);
            if (props != null) {
              pst.setString(1,tmppath.split(""String_Node_Str"")[0]);
              pst.setObject(2,props);
              pst.execute();
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    ResultSet rs=con.createStatement().executeQuery(""String_Node_Str"");
    String str;
    Object obj;
    while (rs.next()) {
      try {
        str=rs.getString(1);
        obj=rs.getObject(2);
        dbdata.put(str,obj);
        System.out.println(str);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Constructor
 */
@SuppressWarnings(""String_Node_Str"") public DatabaseConnector(){
  try {
    logger.info(""String_Node_Str"");
    con=DriverManager.getConnection(""String_Node_Str"" + configpath + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    con.setAutoCommit(true);
    con.createStatement().executeUpdate(""String_Node_Str"");
    boolean checktables=true;
    try {
      ResultSet rs=con.createStatement().executeQuery(""String_Node_Str"");
    }
 catch (    Exception e) {
      logger.warning(""String_Node_Str"");
      e.printStackTrace();
      checktables=false;
    }
    if (!new File(configpath + ""String_Node_Str"").exists() | !checktables) {
      logger.info(""String_Node_Str"");
      con.createStatement().executeUpdate(""String_Node_Str"");
      con.createStatement().executeUpdate(""String_Node_Str"");
      PreparedStatement pst=con.prepareStatement(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      File f=null;
      for (      String tmppath : new File(configpath).list()) {
        try {
          if (tmppath.endsWith(""String_Node_Str"")) {
            logger.finest(""String_Node_Str"" + tmppath);
            Object props=JDUtilities.loadObject(null,f=JDUtilities.getResourceFile(""String_Node_Str"" + tmppath),false);
            if (props != null) {
              pst.setString(1,tmppath.split(""String_Node_Str"")[0]);
              pst.setObject(2,props);
              pst.execute();
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    ResultSet rs=con.createStatement().executeQuery(""String_Node_Str"");
    String str;
    Object obj;
    while (rs.next()) {
      try {
        str=rs.getString(1);
        obj=rs.getObject(2);
        dbdata.put(str,obj);
        System.out.println(str);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
21245,"/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  JDSounds.PT(""String_Node_Str"");
  ConfigPanelAddons config;
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    linkListPane.moveSelectedItems(e.getID());
  break;
case JDAction.COLLAPSE_ALL:
linkListPane.collapseAll();
break;
case JDAction.EXPAND_ALL:
linkListPane.expandAll();
break;
case JDAction.APP_ALLOW_RECONNECT:
logger.finer(""String_Node_Str"");
boolean checked=!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
if (checked) {
displayMiniWarning(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),10000);
}
JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,checked);
JDUtilities.saveConfig();
break;
case JDAction.APP_PAUSE_DOWNLOADS:
btnPause.setSelected(!btnPause.isSelected());
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
btnPause.setIcon(new ImageIcon(JDUtilities.getImage(getPauseImage())));
break;
case JDAction.APP_CLIPBOARD:
logger.finer(""String_Node_Str"");
ClipboardHandler.getClipboard().toggleActivation();
break;
case JDAction.APP_START_STOP_DOWNLOADS:
logger.finer(""String_Node_Str"");
startStopDownloads();
btnStartStop.setIcon(new ImageIcon(JDUtilities.getImage(getStartStopDownloadImage())));
btnPause.setIcon(new ImageIcon(JDUtilities.getImage(getPauseImage())));
break;
case JDAction.APP_SAVE_DLC:
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (ret == null) {
return;
}
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(frame) == JDFileChooser.APPROVE_OPTION) {
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_RESTART:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_RESTART));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
new Thread(){
@Override public void run(){
doReconnect();
}
}
.start();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
linkListPane.removeSelectedLinks();
}
}
 else {
linkListPane.removeSelectedLinks();
}
break;
case JDAction.APP_OPEN_OPT_CONFIG:
config=new ConfigPanelAddons(JDUtilities.getConfiguration());
JPanel panel=new JPanel(new BorderLayout());
panel.add(new JPanel(),BorderLayout.NORTH);
panel.add(config,BorderLayout.CENTER);
ConfigurationPopup pop=new ConfigurationPopup(frame,config,panel);
pop.setModal(true);
pop.setAlwaysOnTop(true);
pop.setLocation(JDUtilities.getCenterOfComponent(frame,pop));
pop.setVisible(true);
break;
case JDAction.ITEMS_REMOVE_PACKAGES:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
JDUtilities.getController().removeCompletedPackages();
}
}
 else {
JDUtilities.getController().removeCompletedPackages();
}
break;
case JDAction.ITEMS_REMOVE_LINKS:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
JDUtilities.getController().removeCompletedDownloadLinks();
}
}
 else {
JDUtilities.getController().removeCompletedDownloadLinks();
}
break;
case JDAction.ITEMS_DND:
toggleDnD();
break;
case JDAction.ABOUT:
JDAboutDialog.getDialog().setVisible(true);
break;
case JDAction.CHANGES:
showChangelogDialog();
break;
case JDAction.ITEMS_ADD:
String cb=""String_Node_Str"";
try {
cb=(String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
}
 catch (Exception e1) {
}
String data=LinkInputDialog.showDialog(frame,cb.trim());
if (data != null && data.length() > 0) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.HELP:
try {
JLinkButton.openURL(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.WIKI:
try {
JLinkButton.openURL(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.APP_CONFIGURATION:
showConfig();
break;
}
}","/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  JDSounds.PT(""String_Node_Str"");
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    linkListPane.moveSelectedItems(e.getID());
  break;
case JDAction.COLLAPSE_ALL:
linkListPane.collapseAll();
break;
case JDAction.EXPAND_ALL:
linkListPane.expandAll();
break;
case JDAction.APP_ALLOW_RECONNECT:
logger.finer(""String_Node_Str"");
boolean checked=!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
if (checked) {
displayMiniWarning(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),10000);
}
JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,checked);
JDUtilities.saveConfig();
break;
case JDAction.APP_PAUSE_DOWNLOADS:
btnPause.setSelected(!btnPause.isSelected());
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
btnPause.setIcon(new ImageIcon(JDUtilities.getImage(getPauseImage())));
break;
case JDAction.APP_CLIPBOARD:
logger.finer(""String_Node_Str"");
ClipboardHandler.getClipboard().toggleActivation();
break;
case JDAction.APP_START_STOP_DOWNLOADS:
logger.finer(""String_Node_Str"");
startStopDownloads();
btnStartStop.setIcon(new ImageIcon(JDUtilities.getImage(getStartStopDownloadImage())));
btnPause.setIcon(new ImageIcon(JDUtilities.getImage(getPauseImage())));
break;
case JDAction.APP_SAVE_DLC:
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (ret == null) {
return;
}
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showOpenDialog(frame) == JDFileChooser.APPROVE_OPTION) {
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_RESTART:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_RESTART));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
new Thread(){
@Override public void run(){
doReconnect();
}
}
.start();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
linkListPane.removeSelectedLinks();
}
}
 else {
linkListPane.removeSelectedLinks();
}
break;
case JDAction.APP_OPEN_OPT_CONFIG:
SimpleGUI.showConfigDialog(frame,new ConfigPanelAddons(JDUtilities.getConfiguration()));
break;
case JDAction.ITEMS_REMOVE_PACKAGES:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
JDUtilities.getController().removeCompletedPackages();
}
}
 else {
JDUtilities.getController().removeCompletedPackages();
}
break;
case JDAction.ITEMS_REMOVE_LINKS:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (showConfirmDialog(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
JDUtilities.getController().removeCompletedDownloadLinks();
}
}
 else {
JDUtilities.getController().removeCompletedDownloadLinks();
}
break;
case JDAction.ITEMS_DND:
toggleDnD();
break;
case JDAction.ABOUT:
JDAboutDialog.getDialog().setVisible(true);
break;
case JDAction.CHANGES:
showChangelogDialog();
break;
case JDAction.ITEMS_ADD:
String cb=""String_Node_Str"";
try {
cb=(String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
}
 catch (Exception e1) {
}
String data=LinkInputDialog.showDialog(frame,cb.trim());
if (data != null && data.length() > 0) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.HELP:
try {
JLinkButton.openURL(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.WIKI:
try {
JLinkButton.openURL(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.APP_CONFIGURATION:
showConfig();
break;
}
}"
21246,"public static void showConfigDialog(Frame parent,ConfigContainer container,boolean alwaysOnTop){
  ConfigPanel config=new ConfigEntriesPanel(container);
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(new JPanel(),BorderLayout.NORTH);
  panel.add(config,BorderLayout.CENTER);
  ConfigurationPopup pop=new ConfigurationPopup(parent,config,panel);
  pop.setModal(true);
  pop.setAlwaysOnTop(alwaysOnTop);
  pop.setLocation(JDUtilities.getCenterOfComponent(parent,pop));
  pop.setVisible(true);
}","public static void showConfigDialog(Frame parent,ConfigPanel config){
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(new JPanel(),BorderLayout.NORTH);
  panel.add(config,BorderLayout.CENTER);
  ConfigurationPopup pop=new ConfigurationPopup(parent,config,panel);
  pop.setModal(true);
  pop.setAlwaysOnTop(true);
  pop.setLocation(JDUtilities.getCenterOfComponent(parent,pop));
  pop.setVisible(true);
}"
21247,"public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  Browser br=new Browser();
  br.postPage(""String_Node_Str"" + getHost() + ""String_Node_Str"",""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ account.getPass()+ ""String_Node_Str"");
  if (br.getRedirectLocation() == null || !br.getRedirectLocation().trim().equalsIgnoreCase(""String_Node_Str"")) {
    ai.setValid(false);
    return ai;
  }
  br.getPage(""String_Node_Str"");
  String validUntil=br.getRegex(""String_Node_Str"").getMatch(0).trim();
  String days=new Regex(validUntil,""String_Node_Str"").getMatch(0);
  String hours=new Regex(validUntil,""String_Node_Str"").getMatch(0);
  long res=0;
  if (days != null)   res+=Long.parseLong(days.trim()) * 24 * 60* 60* 1000;
  if (hours != null)   res+=Long.parseLong(hours.trim()) * 60 * 60* 1000;
  res+=new Date().getTime();
  logger.info(new Date(res) + ""String_Node_Str"");
  ai.setValidUntil(res);
  return ai;
}","public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  Browser br=new Browser();
  br.postPage(""String_Node_Str"" + getHost() + ""String_Node_Str"",""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ account.getPass()+ ""String_Node_Str"");
  if (br.getRedirectLocation() == null || !br.getRedirectLocation().trim().equalsIgnoreCase(""String_Node_Str"")) {
    ai.setValid(false);
    return ai;
  }
  br.getPage(""String_Node_Str"");
  String validUntil=br.getRegex(""String_Node_Str"").getMatch(0).trim();
  String days=new Regex(validUntil,""String_Node_Str"").getMatch(0);
  String hours=new Regex(validUntil,""String_Node_Str"").getMatch(0);
  long res=0;
  if (days != null)   res+=Long.parseLong(days.trim()) * 24 * 60* 60* 1000;
  if (hours != null)   res+=Long.parseLong(hours.trim()) * 60 * 60* 1000;
  res+=new Date().getTime();
  ai.setValidUntil(res);
  return ai;
}"
21248,"@Override public ArrayList<MenuItem> createMenuitems(){
  ArrayList<MenuItem> menu=new ArrayList<MenuItem>();
  menu.add(new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1).setActionListener(this));
  menu.add(new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0).setActionListener(this));
  return menu;
}","@Override public ArrayList<MenuItem> createMenuitems(){
  ArrayList<MenuItem> menu=new ArrayList<MenuItem>();
  menu.add(new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0).setActionListener(this));
  menu.add(new MenuItem(MenuItem.SEPARATOR));
  menu.add(new MenuItem(MenuItem.NORMAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""),1).setActionListener(this));
  return menu;
}"
21249,"private DownloadLink findStartLink(DownloadLink link){
  int type=getArchivePartType(link);
switch (type) {
case JDUnrarConstants.MULTIPART_START_PART:
case JDUnrarConstants.SINGLE_PART_ARCHIVE:
case JDUnrarConstants.NO_RAR_ARCHIVE:
    return null;
}
String filename=new Regex(link.getFileOutput(),""String_Node_Str"").getMatch(0);
File file;
if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else {
  return null;
}
DownloadLink dlink=JDUtilities.getController().getDownloadLinkByFileOutput(file);
if (dlink == null) {
  System.out.print(""String_Node_Str"");
  dlink=new DownloadLink(null,file.getName(),DUMMY_HOSTER,""String_Node_Str"",true);
  dlink.getLinkStatus().setStatus(link.getLinkStatus().getStatus());
  FilePackage fp=new FilePackage();
  fp.setDownloadDirectory(file.getParent());
  dlink.setFilePackage(fp);
}
return dlink;
}","private DownloadLink findStartLink(DownloadLink link){
  int type=getArchivePartType(link);
switch (type) {
case JDUnrarConstants.MULTIPART_START_PART:
case JDUnrarConstants.SINGLE_PART_ARCHIVE:
    break;
case JDUnrarConstants.NO_RAR_ARCHIVE:
  return null;
}
String filename=new Regex(link.getFileOutput(),""String_Node_Str"").getMatch(0);
File file;
if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else if ((file=new File(filename + ""String_Node_Str"")).exists()) {
}
 else {
return null;
}
DownloadLink dlink=JDUtilities.getController().getDownloadLinkByFileOutput(file);
if (dlink == null) {
System.out.print(""String_Node_Str"");
dlink=new DownloadLink(null,file.getName(),DUMMY_HOSTER,""String_Node_Str"",true);
dlink.getLinkStatus().setStatus(link.getLinkStatus().getStatus());
FilePackage fp=new FilePackage();
fp.setDownloadDirectory(file.getParent());
dlink.setFilePackage(fp);
}
return dlink;
}"
21250,"private void save(){
  if (new CountdownConfirmDialog(this.frame,JDLocale.L(""String_Node_Str"",""String_Node_Str""),10,true,CountdownConfirmDialog.STYLE_YES | CountdownConfirmDialog.STYLE_NO).result) {
    Configuration configuration=JDUtilities.getConfiguration();
    StringBuffer b=new StringBuffer();
    for (    String element : JDRR.steps) {
      b.append(element + System.getProperty(""String_Node_Str""));
    }
    methode=b.toString().trim();
    if (JDRR.auth != null) {
      user=new Regex(JDRR.auth,""String_Node_Str"").getMatch(0);
      pass=new Regex(JDRR.auth,""String_Node_Str"").getMatch(0);
      configuration.setProperty(Configuration.PARAM_HTTPSEND_USER,user);
      configuration.setProperty(Configuration.PARAM_HTTPSEND_PASS,pass);
    }
    btnCancel.setText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    configuration.setProperty(Configuration.PARAM_HTTPSEND_IP,routerip.getText().trim());
    configuration.setProperty(Configuration.PARAM_HTTPSEND_REQUESTS,methode);
    configuration.setProperty(Configuration.PARAM_HTTPSEND_ROUTERNAME,""String_Node_Str"");
    configuration.setProperty(Configuration.PARAM_RECONNECT_TYPE,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    if (reconnect_duration <= 2000) {
      reconnect_duration=2000;
    }
    configuration.setProperty(Configuration.PARAM_HTTPSEND_WAITFORIPCHANGE,(reconnect_duration / 1000) * 2);
    configuration.setProperty(Configuration.PARAM_HTTPSEND_IPCHECKWAITTIME,(reconnect_duration / 1000) / 2);
    JDUtilities.saveConfig();
  }
}","private void save(){
  if (new CountdownConfirmDialog(this.frame,JDLocale.L(""String_Node_Str"",""String_Node_Str""),10,true,CountdownConfirmDialog.STYLE_YES | CountdownConfirmDialog.STYLE_NO).result) {
    Configuration configuration=JDUtilities.getConfiguration();
    StringBuffer b=new StringBuffer();
    for (    String element : JDRR.steps) {
      b.append(element + System.getProperty(""String_Node_Str""));
    }
    methode=b.toString().trim();
    if (JDRR.auth != null) {
      user=new Regex(JDRR.auth,""String_Node_Str"").getMatch(0);
      pass=new Regex(JDRR.auth,""String_Node_Str"").getMatch(0);
      configuration.setProperty(Configuration.PARAM_HTTPSEND_USER,user);
      configuration.setProperty(Configuration.PARAM_HTTPSEND_PASS,pass);
    }
    btnCancel.setText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    configuration.setProperty(Configuration.PARAM_HTTPSEND_IP,routerip.getText().trim());
    configuration.setProperty(Configuration.PARAM_HTTPSEND_REQUESTS,methode);
    configuration.setProperty(Configuration.PARAM_HTTPSEND_ROUTERNAME,""String_Node_Str"");
    configuration.setProperty(Configuration.PARAM_RECONNECT_TYPE,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    if (reconnect_duration <= 2000) {
      reconnect_duration=2000;
    }
    configuration.setProperty(Configuration.PARAM_HTTPSEND_WAITFORIPCHANGE,(reconnect_duration / 1000) * 2);
    configuration.setProperty(Configuration.PARAM_HTTPSEND_IPCHECKWAITTIME,(reconnect_duration / 1000) / 2);
    JDUtilities.saveConfig();
    saved=true;
  }
}"
21251,"@Override public void onBufferChanged(Executer exec,DynByteBuffer buffer,int latestNum){
  String lastLine=new String(buffer.getLast(buffer.position() - lastLinePosition));
  if (new Regex(lastLine,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).matches()) {
    exec.writetoOutputStream(this.password);
  }
}","@Override public void onBufferChanged(Executer exec,DynByteBuffer buffer,int latestNum){
  String lastLine=new String(buffer.getLast(buffer.position() - lastLinePosition));
  if (new Regex(lastLine,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).matches()) {
    exec.writetoOutputStream(this.password);
  }
  if (new Regex(lastLine,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).matches()) {
    exec.interrupt();
  }
}"
21252,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.getPage(downloadLink.getDownloadURL().replaceFirst(""String_Node_Str"",""String_Node_Str""));
  Regex reg=br.getRegex(""String_Node_Str"");
  String url=reg.getMatches()[0][0];
  dl=new RAFDownload(this,downloadLink,br.createGetRequest(url));
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.getPage(downloadLink.getDownloadURL().replaceFirst(""String_Node_Str"",""String_Node_Str""));
  Form download=br.getForm(0);
  download.put(""String_Node_Str"",(Math.random() * 160) + ""String_Node_Str"");
  download.put(""String_Node_Str"",(Math.random() * 60) + ""String_Node_Str"");
  download.put(""String_Node_Str"",null);
  br.submitForm(download);
  String fnc=br.getRegex(""String_Node_Str"").getMatch(0);
  String link=new jd.parser.JavaScript(fnc).runJavaScript();
  dl=br.openDownload(downloadLink,link,true,1);
  if (!dl.getConnection().isContentDisposition()) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}"
21253,"@Override public boolean initAddon(){
  if (JDUtilities.getJavaVersion() >= 1.6) {
    try {
      JDUtilities.getController().addControlListener(this);
      if (SimpleGUI.CURRENTGUI != null && SimpleGUI.CURRENTGUI.getFrame() != null) {
        guiFrame=SimpleGUI.CURRENTGUI.getFrame();
        guiFrame.addWindowListener(this);
      }
      logger.info(""String_Node_Str"");
      initGUI();
    }
 catch (    Exception e) {
      return false;
    }
    return true;
  }
 else {
    logger.severe(""String_Node_Str"" + JDUtilities.getJavaVersion());
    return false;
  }
}","@Override public boolean initAddon(){
  if (JDUtilities.getJavaVersion() < 1.6) {
    logger.severe(""String_Node_Str"" + JDUtilities.getJavaVersion());
    return false;
  }
  if (!SystemTray.isSupported()) {
    logger.severe(""String_Node_Str"");
    return false;
  }
  try {
    JDUtilities.getController().addControlListener(this);
    if (SimpleGUI.CURRENTGUI != null && SimpleGUI.CURRENTGUI.getFrame() != null) {
      guiFrame=SimpleGUI.CURRENTGUI.getFrame();
      guiFrame.addWindowListener(this);
    }
    logger.info(""String_Node_Str"");
    initGUI();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}"
21254,"public boolean initAddon(){
  if (JDUtilities.getJavaVersion() >= 1.6) {
    try {
      JDUtilities.getController().addControlListener(this);
      if (SimpleGUI.CURRENTGUI != null && SimpleGUI.CURRENTGUI.getFrame() != null) {
        guiFrame=SimpleGUI.CURRENTGUI.getFrame();
        guiFrame.addWindowListener(this);
      }
      logger.info(""String_Node_Str"");
      initGUI();
      return true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      return false;
    }
  }
 else {
    logger.severe(""String_Node_Str"" + JDUtilities.getJavaVersion());
    return false;
  }
}","public boolean initAddon(){
  if (JDUtilities.getJavaVersion() < 1.6) {
    logger.severe(""String_Node_Str"" + JDUtilities.getJavaVersion());
    return false;
  }
  if (!SystemTray.isSupported()) {
    logger.severe(""String_Node_Str"");
    return false;
  }
  try {
    JDUtilities.getController().addControlListener(this);
    if (SimpleGUI.CURRENTGUI != null && SimpleGUI.CURRENTGUI.getFrame() != null) {
      guiFrame=SimpleGUI.CURRENTGUI.getFrame();
      guiFrame.addWindowListener(this);
    }
    logger.info(""String_Node_Str"");
    initGUI();
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}"
21255,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  String downloadId;
  String password=null;
  br.setFollowRedirects(false);
  if (new Regex(parameter,PATTEREN_SUPPORTED_MAIN).matches()) {
    String page=br.getPage(parameter);
    String links[]=new Regex(page,PATTERN_DL_LINK_PAGE).getColumn(0);
    for (    String link : links) {
      decryptedLinks.add(createDownloadlink(""String_Node_Str"" + link));
    }
    return decryptedLinks;
  }
 else   if (new Regex(parameter,PATTERN_SUPPORTED_CRYPT).matches()) {
    downloadId=new Regex(parameter,PATTERN_SUPPORTED_CRYPT).getMatch(0);
    String page=br.getPage(""String_Node_Str"" + downloadId + ""String_Node_Str"");
    password=new Regex(page,PATTERN_PASSWORD).getMatch(0);
    page=br.getPage(parameter);
    String links[]=new Regex(page,PATTERN_REDIRECT_LINKS).getColumn(0);
    for (    String link : links) {
      br.getPage(link);
      DownloadLink dlLink=createDownloadlink(br.getRedirectLocation());
      dlLink.addSourcePluginPassword(password);
      decryptedLinks.add(dlLink);
    }
    return decryptedLinks;
  }
 else   if (new Regex(parameter,PATTERN_SUPPORTED_REDIRECT).matches()) {
    String id=new Regex(parameter,PATTERN_SUPPORTED_REDIRECT).getMatch(0);
    decryptedLinks.add(createDownloadlink(""String_Node_Str"" + id + ""String_Node_Str""));
    return decryptedLinks;
  }
  return null;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink param) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  String downloadId;
  String password=null;
  br.setFollowRedirects(false);
  if (new Regex(parameter,PATTEREN_SUPPORTED_MAIN).matches()) {
    String page=br.getPage(parameter);
    String links[]=new Regex(page,PATTERN_DL_LINK_PAGE).getColumn(0);
    for (    String link : links) {
      decryptedLinks.add(createDownloadlink(""String_Node_Str"" + link));
    }
    return decryptedLinks;
  }
 else   if (new Regex(parameter,PATTERN_SUPPORTED_CRYPT).matches()) {
    downloadId=new Regex(parameter,PATTERN_SUPPORTED_CRYPT).getMatch(0);
    String page=br.getPage(""String_Node_Str"" + downloadId + ""String_Node_Str"");
    password=new Regex(page,PATTERN_PASSWORD).getMatch(0);
    page=br.getPage(parameter);
    String links[]=new Regex(page,PATTERN_REDIRECT_LINKS).getColumn(0);
    for (    String link : links) {
      br.getPage(link);
      DownloadLink dlLink=createDownloadlink(br.getRedirectLocation());
      dlLink.addSourcePluginPassword(password);
      dlLink.setDecrypterPassword(password);
      decryptedLinks.add(dlLink);
    }
    return decryptedLinks;
  }
 else   if (new Regex(parameter,PATTERN_SUPPORTED_REDIRECT).matches()) {
    String id=new Regex(parameter,PATTERN_SUPPORTED_REDIRECT).getMatch(0);
    decryptedLinks.add(createDownloadlink(""String_Node_Str"" + id + ""String_Node_Str""));
    return decryptedLinks;
  }
  return null;
}"
21256,"@Override protected void installDefaults(){
  EVEN_ROW_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ODD_ROW_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  SELECTED_ROW_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  GRID_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  PACKAGE_ROW_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  SELECTED_ROW_BORDER_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_DONE=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_ERROR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_DISABLED=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_WAIT=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  table.setShowGrid(false);
  table.setRowHeight(table.getFont().getSize() + 6);
  table.setGridColor(GRID_COLOR);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      table.repaint();
    }
  }
);
  table.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      table.repaint();
    }
    public void focusLost(    FocusEvent e){
      table.repaint();
    }
  }
);
}","@Override protected void installDefaults(){
  EVEN_ROW_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ODD_ROW_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  SELECTED_ROW_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  GRID_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  PACKAGE_ROW_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  SELECTED_ROW_BORDER_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_DONE=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_DONE_Package=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_Progress=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_ERROR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_DISABLED=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  COLOR_WAIT=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  table.setShowGrid(false);
  table.setRowHeight(table.getFont().getSize() + 6);
  table.setGridColor(GRID_COLOR);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      table.repaint();
    }
  }
);
  table.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      table.repaint();
    }
    public void focusLost(    FocusEvent e){
      table.repaint();
    }
  }
);
}"
21257,"@Override public void paint(Graphics g,JComponent c){
  int vRowHeight=c.getFont().getSize() + 6;
  Rectangle clip=g.getClipBounds();
  int x=clip.x;
  int y=clip.y;
  int w=clip.width;
  int h=clip.height;
  int row=0;
  int y2=y + h;
  if (y != 0) {
    int diff=y % vRowHeight;
    row=y / vRowHeight;
    y-=diff;
  }
  TreePath path;
  Color color;
  DownloadLink dLink;
  while (y < y2) {
    path=((DownloadTreeTable)c).getPathForRow(row);
    color=row % 2 == 0 ? EVEN_ROW_COLOR : ODD_ROW_COLOR;
    if (((DownloadTreeTable)c).isRowSelected(row)) {
      color=SELECTED_ROW_COLOR;
    }
 else {
      if (path != null && path.getLastPathComponent() instanceof FilePackage) {
        if (((FilePackage)path.getLastPathComponent()).isFinished()) {
          color=COLOR_DONE;
        }
 else {
          color=PACKAGE_ROW_COLOR;
        }
        g.setColor(Color.BLACK);
        g.drawLine(x,y,w,y);
      }
 else       if (path != null && path.getLastPathComponent() instanceof DownloadLink) {
        dLink=(DownloadLink)path.getLastPathComponent();
        if (!dLink.isEnabled()) {
          color=COLOR_DISABLED;
        }
 else         if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          color=COLOR_DONE;
        }
 else         if (dLink.getLinkStatus().isFailed()) {
          color=COLOR_ERROR;
        }
 else         if (dLink.getLinkStatus().getRemainingWaittime() > 0 || dLink.getPlugin() == null || dLink.getPlugin().getRemainingHosterWaittime() > 0) {
          color=COLOR_WAIT;
        }
      }
    }
    if (((DownloadTreeTable)c).mouseOverRow == row) {
      if (((JTable)c).isRowSelected(row)) {
        g.setColor(color.darker());
        g.fillRect(x,y + 1,w,vRowHeight - 2);
        g.setColor(SELECTED_ROW_BORDER_COLOR);
        g.draw3DRect(x,y,w,vRowHeight - 1,true);
      }
 else {
        g.setColor(color.darker());
        g.fillRect(x,y + 1,w,vRowHeight - 1);
      }
    }
 else {
      if (((JTable)c).isRowSelected(row)) {
        g.setColor(color);
        g.fillRect(x,y + 1,w,vRowHeight - 2);
        g.setColor(SELECTED_ROW_BORDER_COLOR);
        g.draw3DRect(x,y,w,vRowHeight - 1,false);
      }
 else {
        g.setColor(color);
        g.fillRect(x,y + 1,w,vRowHeight - 1);
      }
    }
    y+=vRowHeight;
    row++;
  }
  super.paint(g,c);
  x=0;
  g.setColor(GRID_COLOR);
  TableColumnModel vModel=table.getColumnModel();
  for (int i=0; i < vModel.getColumnCount(); i++) {
    TableColumn vColumn=vModel.getColumn(i);
    x+=vColumn.getWidth();
    if (x >= clip.x && x <= clip.x + clip.width) {
      g.drawLine(x - 1,clip.y,x - 1,clip.y + clip.height);
    }
  }
}","@Override public void paint(Graphics g,JComponent c){
  int vRowHeight=c.getFont().getSize() + 6;
  Rectangle clip=g.getClipBounds();
  int x=clip.x;
  int y=clip.y;
  int w=clip.width;
  int h=clip.height;
  int row=0;
  int y2=y + h;
  if (y != 0) {
    int diff=y % vRowHeight;
    row=y / vRowHeight;
    y-=diff;
  }
  TreePath path;
  Color color;
  DownloadLink dLink;
  while (y < y2) {
    path=((DownloadTreeTable)c).getPathForRow(row);
    color=row % 2 == 0 ? EVEN_ROW_COLOR : ODD_ROW_COLOR;
    if (((DownloadTreeTable)c).isRowSelected(row)) {
      color=SELECTED_ROW_COLOR;
    }
 else {
      if (path != null && path.getLastPathComponent() instanceof FilePackage) {
        if (((FilePackage)path.getLastPathComponent()).isFinished()) {
          color=COLOR_DONE_Package;
        }
 else         if ((((FilePackage)path.getLastPathComponent()).getLinksInProgress() > 0)) {
          color=COLOR_Progress;
        }
 else {
          color=PACKAGE_ROW_COLOR;
        }
        g.setColor(Color.BLACK);
        g.drawLine(x,y,w,y);
      }
 else       if (path != null && path.getLastPathComponent() instanceof DownloadLink) {
        dLink=(DownloadLink)path.getLastPathComponent();
        if (!dLink.isEnabled()) {
          color=COLOR_DISABLED;
        }
 else         if (dLink.getLinkStatus().hasStatus(LinkStatus.PLUGIN_IN_PROGRESS)) {
          color=COLOR_Progress;
        }
 else         if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          color=COLOR_DONE;
        }
 else         if (dLink.getLinkStatus().isFailed()) {
          color=COLOR_ERROR;
        }
 else         if (dLink.getLinkStatus().getRemainingWaittime() > 0 || dLink.getPlugin() == null || dLink.getPlugin().getRemainingHosterWaittime() > 0) {
          color=COLOR_WAIT;
        }
      }
    }
    if (((DownloadTreeTable)c).mouseOverRow == row) {
      if (((JTable)c).isRowSelected(row)) {
        g.setColor(color.darker());
        g.fillRect(x,y + 1,w,vRowHeight - 2);
        g.setColor(SELECTED_ROW_BORDER_COLOR);
        g.draw3DRect(x,y,w,vRowHeight - 1,true);
      }
 else {
        g.setColor(color.darker());
        g.fillRect(x,y + 1,w,vRowHeight - 1);
      }
    }
 else {
      if (((JTable)c).isRowSelected(row)) {
        g.setColor(color);
        g.fillRect(x,y + 1,w,vRowHeight - 2);
        g.setColor(SELECTED_ROW_BORDER_COLOR);
        g.draw3DRect(x,y,w,vRowHeight - 1,false);
      }
 else {
        g.setColor(color);
        g.fillRect(x,y + 1,w,vRowHeight - 1);
      }
    }
    y+=vRowHeight;
    row++;
  }
  super.paint(g,c);
  x=0;
  g.setColor(GRID_COLOR);
  TableColumnModel vModel=table.getColumnModel();
  for (int i=0; i < vModel.getColumnCount(); i++) {
    TableColumn vColumn=vModel.getColumn(i);
    x+=vColumn.getWidth();
    if (x >= clip.x && x <= clip.x + clip.width) {
      g.drawLine(x - 1,clip.y,x - 1,clip.y + clip.height);
    }
  }
}"
21258,"TreeTableRenderer(DownloadTreeTable downloadTreeTable){
  FONT_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  PACKAGE_PROGRESS_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ERROR_PROGRESS_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  DONE_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  INACTIVE_PROGRESS_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ACTIVE_PROGRESS_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  PACKAGE_PROGRESS_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ERROR_PROGRESS_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  DONE_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  INACTIVE_PROGRESS_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ACTIVE_PROGRESS_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  PACKAGE_PROGRESS_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ERROR_PROGRESS_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  DONE_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  INACTIVE_PROGRESS_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ACTIVE_PROGRESS_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  table=downloadTreeTable;
  label=new JLabel();
  label.setOpaque(false);
  miniBar=new MiniBar();
  progress=new JProgressBar();
  Dimension dim=progress.getPreferredSize();
  dim.width=Math.max(dim.width,300);
  progress.setPreferredSize(dim);
  progress.setMinimumSize(dim);
  if (JDUtilities.getJavaVersion() >= 1.6) {
    ui=new TreeProgressBarUI();
    ui.setSelectionForeground(Color.BLACK);
    progress.setUI(ui);
  }
  progress.setBorderPainted(false);
  progress.setStringPainted(true);
  progress.setOpaque(false);
}","TreeTableRenderer(DownloadTreeTable downloadTreeTable){
  FONT_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  PACKAGE_PROGRESS_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ERROR_PROGRESS_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  DONE_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  DONE_COLOR_Package=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  INACTIVE_PROGRESS_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ACTIVE_PROGRESS_COLOR=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  PACKAGE_PROGRESS_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ERROR_PROGRESS_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  DONE_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  INACTIVE_PROGRESS_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ACTIVE_PROGRESS_COLOR_FONT_A=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  PACKAGE_PROGRESS_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ERROR_PROGRESS_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  DONE_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  INACTIVE_PROGRESS_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  ACTIVE_PROGRESS_COLOR_FONT_B=JDTheme.C(""String_Node_Str"",""String_Node_Str"");
  table=downloadTreeTable;
  label=new JLabel();
  label.setOpaque(false);
  miniBar=new MiniBar();
  progress=new JProgressBar();
  Dimension dim=progress.getPreferredSize();
  dim.width=Math.max(dim.width,300);
  progress.setPreferredSize(dim);
  progress.setMinimumSize(dim);
  if (JDUtilities.getJavaVersion() >= 1.6) {
    ui=new TreeProgressBarUI();
    ui.setSelectionForeground(Color.BLACK);
    progress.setUI(ui);
  }
  progress.setBorderPainted(false);
  progress.setStringPainted(true);
  progress.setOpaque(false);
}"
21259,"@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  column=this.table.getColumn(column).getModelIndex();
  if (column == DownloadTreeTableModel.COL_STATUS && value instanceof FilePackage) {
    String label=""String_Node_Str"";
    fp=(FilePackage)value;
    if (fp.getLinksInProgress() > 0) {
      label=fp.getLinksInProgress() + ""String_Node_Str"" + fp.size()+ ""String_Node_Str""+ JDLocale.L(""String_Node_Str"",""String_Node_Str"");
    }
    if (fp.getTotalDownloadSpeed() > 0) {
      label=""String_Node_Str"" + fp.getLinksInProgress() + ""String_Node_Str""+ fp.size()+ ""String_Node_Str""+ JDUtilities.formatSeconds(fp.getETA())+ ""String_Node_Str""+ JDUtilities.formatKbReadable(fp.getTotalDownloadSpeed() / 1024)+ ""String_Node_Str"";
    }
    if (fp.isFinished()) {
      label=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
    }
    miniBar.setText(label);
    miniBar.setPercent(fp.getPercent() / 100.0);
    return miniBar;
  }
 else   if (column == DownloadTreeTableModel.COL_PROGRESS && value instanceof DownloadLink) {
    dLink=(DownloadLink)value;
    if (dLink.getPlugin() == null) {
      progress.setForeground(ERROR_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(DONE_COLOR_FONT_A);
        ui.setSelectionBackground(DONE_COLOR_FONT_B);
      }
      progress.setString(""String_Node_Str"");
    }
 else     if (dLink.getPluginProgress() != null) {
      progress.setForeground(dLink.getPluginProgress().getColor());
      if (ui != null) {
        ui.setSelectionForeground(DONE_COLOR_FONT_A);
        ui.setSelectionBackground(DONE_COLOR_FONT_B);
      }
      progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
      progress.setMaximum((int)dLink.getPluginProgress().getTotal());
      progress.setValue((int)dLink.getPluginProgress().getCurrent());
      return progress;
    }
 else     if ((dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED) && dLink.getPlugin().getRemainingHosterWaittime() > 0) || (dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE) && dLink.getLinkStatus().getRemainingWaittime() > 0)) {
      progress.setMaximum((int)dLink.getLinkStatus().getTotalWaitTime());
      progress.setForeground(ERROR_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(ERROR_PROGRESS_COLOR_FONT_A);
        ui.setSelectionBackground(ERROR_PROGRESS_COLOR_FONT_B);
      }
      progress.setValue((int)dLink.getLinkStatus().getRemainingWaittime());
      progress.setString(c.format(10000 * progress.getPercentComplete() / 100.0) + ""String_Node_Str"" + progress.getValue() / 1000 + ""String_Node_Str"" + progress.getMaximum() / 1000 + ""String_Node_Str"");
      return progress;
    }
 else     if ((int)dLink.getDownloadCurrent() > 0) {
      if (!dLink.getLinkStatus().isPluginActive()) {
        if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          progress.setForeground(DONE_COLOR);
          if (ui != null) {
            ui.setSelectionForeground(DONE_COLOR_FONT_A);
            ui.setSelectionBackground(DONE_COLOR_FONT_B);
          }
          progress.setString(""String_Node_Str"");
        }
 else {
          progress.setForeground(INACTIVE_PROGRESS_COLOR);
          if (ui != null) {
            ui.setSelectionForeground(INACTIVE_PROGRESS_COLOR_FONT_A);
            ui.setSelectionBackground(INACTIVE_PROGRESS_COLOR_FONT_B);
          }
          progress.setString(""String_Node_Str"");
        }
      }
 else {
        progress.setForeground(ACTIVE_PROGRESS_COLOR);
        if (ui != null) {
          ui.setSelectionForeground(ACTIVE_PROGRESS_COLOR_FONT_A);
          ui.setSelectionBackground(ACTIVE_PROGRESS_COLOR_FONT_B);
        }
        if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
          progress.setString(SimpleGUI.WAITING_USER_IO);
        }
 else {
          progress.setString(c.format(dLink.getPercent() / 100.0) + ""String_Node_Str"" + JDUtilities.formatBytesToMB(dLink.getDownloadCurrent())+ ""String_Node_Str""+ JDUtilities.formatBytesToMB(Math.max(1,dLink.getDownloadSize()))+ ""String_Node_Str"");
        }
      }
      progress.setMaximum(10000);
      progress.setValue(dLink.getPercent());
      return progress;
    }
    label.setText(""String_Node_Str"");
    return label;
  }
 else   if (column == DownloadTreeTableModel.COL_PROGRESS && value instanceof FilePackage) {
    fp=(FilePackage)value;
    if (fp.isFinished()) {
      progress.setForeground(DONE_COLOR);
      progress.setMaximum(100);
      progress.setValue(100);
      progress.setString(""String_Node_Str"");
    }
 else {
      progress.setMaximum(Math.max(1,fp.getTotalEstimatedPackageSize()));
      progress.setForeground(PACKAGE_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(PACKAGE_PROGRESS_COLOR_FONT_A);
        ui.setSelectionBackground(PACKAGE_PROGRESS_COLOR_FONT_B);
      }
      if (fp.getPercent() == 0.0) {
        progress.setValue(0);
        progress.setString(""String_Node_Str"");
      }
 else {
        progress.setValue(fp.getTotalKBLoaded());
        progress.setString(c.format(fp.getPercent()) + ""String_Node_Str"" + JDUtilities.formatKbReadable(progress.getValue())+ ""String_Node_Str""+ JDUtilities.formatKbReadable(Math.max(1,fp.getTotalEstimatedPackageSize()))+ ""String_Node_Str"");
      }
    }
    return progress;
  }
  co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  co.setForeground(FONT_COLOR);
  co.setBackground(FONT_COLOR);
  return co;
}","@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  column=this.table.getColumn(column).getModelIndex();
  if (column == DownloadTreeTableModel.COL_STATUS && value instanceof FilePackage) {
    String label=""String_Node_Str"";
    fp=(FilePackage)value;
    if (fp.getLinksInProgress() > 0) {
      label=fp.getLinksInProgress() + ""String_Node_Str"" + fp.size()+ ""String_Node_Str""+ JDLocale.L(""String_Node_Str"",""String_Node_Str"");
    }
    if (fp.getTotalDownloadSpeed() > 0) {
      label=""String_Node_Str"" + fp.getLinksInProgress() + ""String_Node_Str""+ fp.size()+ ""String_Node_Str""+ JDUtilities.formatSeconds(fp.getETA())+ ""String_Node_Str""+ JDUtilities.formatKbReadable(fp.getTotalDownloadSpeed() / 1024)+ ""String_Node_Str"";
    }
    if (fp.isFinished()) {
      label=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
    }
    miniBar.setText(label);
    miniBar.setPercent(fp.getPercent() / 100.0);
    return miniBar;
  }
 else   if (column == DownloadTreeTableModel.COL_PROGRESS && value instanceof DownloadLink) {
    dLink=(DownloadLink)value;
    if (dLink.getPlugin() == null) {
      progress.setForeground(ERROR_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(DONE_COLOR_FONT_A);
        ui.setSelectionBackground(DONE_COLOR_FONT_B);
      }
      progress.setString(""String_Node_Str"");
    }
 else     if (dLink.getPluginProgress() != null) {
      progress.setForeground(dLink.getPluginProgress().getColor());
      if (ui != null) {
        ui.setSelectionForeground(DONE_COLOR_FONT_A);
        ui.setSelectionBackground(DONE_COLOR_FONT_B);
      }
      progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
      progress.setMaximum((int)dLink.getPluginProgress().getTotal());
      progress.setValue((int)dLink.getPluginProgress().getCurrent());
      return progress;
    }
 else     if ((dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED) && dLink.getPlugin().getRemainingHosterWaittime() > 0) || (dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE) && dLink.getLinkStatus().getRemainingWaittime() > 0)) {
      progress.setMaximum((int)dLink.getLinkStatus().getTotalWaitTime());
      progress.setForeground(ERROR_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(ERROR_PROGRESS_COLOR_FONT_A);
        ui.setSelectionBackground(ERROR_PROGRESS_COLOR_FONT_B);
      }
      progress.setValue((int)dLink.getLinkStatus().getRemainingWaittime());
      progress.setString(c.format(10000 * progress.getPercentComplete() / 100.0) + ""String_Node_Str"" + progress.getValue() / 1000 + ""String_Node_Str"" + progress.getMaximum() / 1000 + ""String_Node_Str"");
      return progress;
    }
 else     if ((int)dLink.getDownloadCurrent() > 0) {
      if (!dLink.getLinkStatus().isPluginActive()) {
        if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          progress.setForeground(DONE_COLOR);
          if (ui != null) {
            ui.setSelectionForeground(DONE_COLOR_FONT_A);
            ui.setSelectionBackground(DONE_COLOR_FONT_B);
          }
          progress.setString(""String_Node_Str"");
        }
 else {
          progress.setForeground(INACTIVE_PROGRESS_COLOR);
          if (ui != null) {
            ui.setSelectionForeground(INACTIVE_PROGRESS_COLOR_FONT_A);
            ui.setSelectionBackground(INACTIVE_PROGRESS_COLOR_FONT_B);
          }
          progress.setString(""String_Node_Str"");
        }
      }
 else {
        progress.setForeground(ACTIVE_PROGRESS_COLOR);
        if (ui != null) {
          ui.setSelectionForeground(ACTIVE_PROGRESS_COLOR_FONT_A);
          ui.setSelectionBackground(ACTIVE_PROGRESS_COLOR_FONT_B);
        }
        if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
          progress.setString(SimpleGUI.WAITING_USER_IO);
        }
 else {
          progress.setString(c.format(dLink.getPercent() / 100.0) + ""String_Node_Str"" + JDUtilities.formatBytesToMB(dLink.getDownloadCurrent())+ ""String_Node_Str""+ JDUtilities.formatBytesToMB(Math.max(1,dLink.getDownloadSize()))+ ""String_Node_Str"");
        }
      }
      progress.setMaximum(10000);
      progress.setValue(dLink.getPercent());
      return progress;
    }
    label.setText(""String_Node_Str"");
    return label;
  }
 else   if (column == DownloadTreeTableModel.COL_PROGRESS && value instanceof FilePackage) {
    fp=(FilePackage)value;
    if (fp.isFinished()) {
      progress.setForeground(DONE_COLOR_Package);
      progress.setMaximum(100);
      progress.setValue(100);
      progress.setString(""String_Node_Str"");
    }
 else {
      progress.setMaximum(Math.max(1,fp.getTotalEstimatedPackageSize()));
      progress.setForeground(PACKAGE_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(PACKAGE_PROGRESS_COLOR_FONT_A);
        ui.setSelectionBackground(PACKAGE_PROGRESS_COLOR_FONT_B);
      }
      if (fp.getPercent() == 0.0) {
        progress.setValue(0);
        progress.setString(""String_Node_Str"");
      }
 else {
        progress.setValue(fp.getTotalKBLoaded());
        progress.setString(c.format(fp.getPercent()) + ""String_Node_Str"" + JDUtilities.formatKbReadable(progress.getValue())+ ""String_Node_Str""+ JDUtilities.formatKbReadable(Math.max(1,fp.getTotalEstimatedPackageSize()))+ ""String_Node_Str"");
      }
    }
    return progress;
  }
  co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  co.setForeground(FONT_COLOR);
  co.setBackground(FONT_COLOR);
  return co;
}"
21260,"public boolean isFinished(){
  if (System.currentTimeMillis() - updateTime > UPDATE_INTERVAL) {
    updateTime=System.currentTimeMillis();
    boolean value=true;
synchronized (downloadLinks) {
      for (      DownloadLink lk : downloadLinks) {
        if (!lk.getLinkStatus().hasStatus(LinkStatus.FINISHED) && lk.isEnabled()) {
          value=false;
          break;
        }
      }
    }
    isFinished=value;
  }
  return isFinished;
}","public boolean isFinished(){
  if (System.currentTimeMillis() - updateTime1 > UPDATE_INTERVAL) {
    updateTime1=System.currentTimeMillis();
    boolean value=true;
    if (linksFinished > 0) {
synchronized (downloadLinks) {
        for (        DownloadLink lk : downloadLinks) {
          if (!lk.getLinkStatus().hasStatus(LinkStatus.FINISHED) && lk.isEnabled()) {
            value=false;
            break;
          }
        }
      }
    }
 else {
      value=false;
    }
    isFinished=value;
  }
  return isFinished;
}"
21261,"public void updateCollectives(){
  updateTime=System.currentTimeMillis();
  totalEstimatedPackageSize=0;
  totalDownloadSpeed=0;
  linksFinished=0;
  linksInProgress=0;
  linksFailed=0;
  totalBytesLoaded=0;
  long avg=0;
  DownloadLink next;
  int i=0;
synchronized (downloadLinks) {
    for (Iterator<DownloadLink> it=downloadLinks.iterator(); it.hasNext(); ) {
      next=it.next();
      if (next.getDownloadSize() > 0) {
        if (next.isEnabled()) {
          totalEstimatedPackageSize+=next.getDownloadSize() / 1024;
        }
        avg=(i * avg + next.getDownloadSize() / 1024) / (i + 1);
        i++;
      }
 else {
        if (it.hasNext()) {
          if (next.isEnabled()) {
            totalEstimatedPackageSize+=avg;
          }
        }
 else {
          if (next.isEnabled()) {
            totalEstimatedPackageSize+=avg / 2;
          }
        }
      }
      totalDownloadSpeed+=Math.max(0,next.getDownloadSpeed());
      if (next.isEnabled()) {
        totalBytesLoaded+=next.getDownloadCurrent() / 1024;
      }
      linksInProgress+=next.getLinkStatus().isPluginActive() ? 1 : 0;
      linksFinished+=next.getLinkStatus().hasStatus(LinkStatus.FINISHED) ? 1 : 0;
      if (!next.getLinkStatus().hasStatus(LinkStatus.FINISHED | LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS | LinkStatus.FINISHED)) {
        linksFailed++;
      }
    }
  }
}","public void updateCollectives(){
synchronized (downloadLinks) {
    totalEstimatedPackageSize=0;
    totalDownloadSpeed=0;
    linksFinished=0;
    linksInProgress=0;
    linksFailed=0;
    totalBytesLoaded=0;
    long avg=0;
    DownloadLink next;
    int i=0;
    for (Iterator<DownloadLink> it=downloadLinks.iterator(); it.hasNext(); ) {
      next=it.next();
      if (next.getDownloadSize() > 0) {
        if (next.isEnabled()) {
          totalEstimatedPackageSize+=next.getDownloadSize() / 1024;
        }
        avg=(i * avg + next.getDownloadSize() / 1024) / (i + 1);
        i++;
      }
 else {
        if (it.hasNext()) {
          if (next.isEnabled()) {
            totalEstimatedPackageSize+=avg;
          }
        }
 else {
          if (next.isEnabled()) {
            totalEstimatedPackageSize+=avg / 2;
          }
        }
      }
      totalDownloadSpeed+=Math.max(0,next.getDownloadSpeed());
      if (next.isEnabled()) {
        totalBytesLoaded+=next.getDownloadCurrent() / 1024;
      }
      linksInProgress+=next.getLinkStatus().isPluginActive() ? 1 : 0;
      linksFinished+=next.getLinkStatus().hasStatus(LinkStatus.FINISHED) ? 1 : 0;
      if (!next.getLinkStatus().hasStatus(LinkStatus.FINISHED | LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS | LinkStatus.FINISHED)) {
        linksFailed++;
      }
    }
  }
  updateTime=System.currentTimeMillis();
}"
21262,"/** 
 * Startet den Download. Nach dem Aufruf dieser Funktion können keine Downlaodparameter mehr gesetzt werden bzw bleiben wirkungslos.
 * @return
 * @throws Exception
 */
public boolean startDownload() throws Exception {
  if (!connected)   connect();
  DownloadLink block=JDUtilities.getController().getLinkThatBlocks(downloadLink);
  downloadLink.getLinkStatus().setStatusText(null);
  if (connection.getHeaderField(""String_Node_Str"") != null) {
    error(LinkStatus.ERROR_PLUGIN_DEFEKT,""String_Node_Str"");
    return false;
  }
  if (block != null) {
    logger.severe(""String_Node_Str"" + downloadLink.getFileOutput());
    error(LinkStatus.ERROR_LINK_IN_PROGRESS,String.format(JDLocale.L(""String_Node_Str"",""String_Node_Str""),block.getPlugin().getHost()));
    if (!handleErrors()) {
      return false;
    }
  }
  File fileOutput=new File(downloadLink.getFileOutput());
  if (fileOutput.getParentFile() == null) {
    error(LinkStatus.ERROR_FATAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    if (!handleErrors()) {
      return false;
    }
  }
  if (!fileOutput.getParentFile().exists()) {
    fileOutput.getParentFile().mkdirs();
  }
  loop:   if (fileOutput.exists()) {
    logger.severe(""String_Node_Str"" + fileOutput);
    if (this.downloadLink.getLinkType() == DownloadLink.LINKTYPE_JDU) {
      if (new File(downloadLink.getFileOutput()).delete()) {
        logger.severe(""String_Node_Str"");
        break loop;
      }
 else {
        error(LinkStatus.ERROR_FATAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        if (!handleErrors()) {
          return false;
        }
      }
    }
    if (JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_FILE_EXISTS) == 0) {
      if (new File(downloadLink.getFileOutput()).delete()) {
        logger.severe(""String_Node_Str"");
      }
 else {
        error(LinkStatus.ERROR_ALREADYEXISTS,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        if (!handleErrors()) {
          return false;
        }
      }
    }
 else {
      error(LinkStatus.ERROR_ALREADYEXISTS,null);
      if (!handleErrors()) {
        return false;
      }
    }
  }
  try {
    linkStatus.addStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
    setupChunks();
    waitForChunks();
    onChunksReady();
    linkStatus.removeStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
    if (!handleErrors()) {
      return false;
    }
 else {
      return true;
    }
  }
 catch (  Exception e) {
    handleErrors();
    linkStatus.removeStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
    return false;
  }
}","/** 
 * Startet den Download. Nach dem Aufruf dieser Funktion können keine Downlaodparameter mehr gesetzt werden bzw bleiben wirkungslos.
 * @return
 * @throws Exception
 */
public boolean startDownload() throws Exception {
  if (!connected)   connect();
  DownloadLink block=JDUtilities.getController().getLinkThatBlocks(downloadLink);
  downloadLink.getLinkStatus().setStatusText(null);
  if (connection == null || !connection.isOK()) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  if (connection.getHeaderField(""String_Node_Str"") != null) {
    error(LinkStatus.ERROR_PLUGIN_DEFEKT,""String_Node_Str"");
    return false;
  }
  if (block != null) {
    logger.severe(""String_Node_Str"" + downloadLink.getFileOutput());
    error(LinkStatus.ERROR_LINK_IN_PROGRESS,String.format(JDLocale.L(""String_Node_Str"",""String_Node_Str""),block.getPlugin().getHost()));
    if (!handleErrors()) {
      return false;
    }
  }
  File fileOutput=new File(downloadLink.getFileOutput());
  if (fileOutput.getParentFile() == null) {
    error(LinkStatus.ERROR_FATAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    if (!handleErrors()) {
      return false;
    }
  }
  if (!fileOutput.getParentFile().exists()) {
    fileOutput.getParentFile().mkdirs();
  }
  loop:   if (fileOutput.exists()) {
    logger.severe(""String_Node_Str"" + fileOutput);
    if (this.downloadLink.getLinkType() == DownloadLink.LINKTYPE_JDU) {
      if (new File(downloadLink.getFileOutput()).delete()) {
        logger.severe(""String_Node_Str"");
        break loop;
      }
 else {
        error(LinkStatus.ERROR_FATAL,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        if (!handleErrors()) {
          return false;
        }
      }
    }
    if (JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_FILE_EXISTS) == 0) {
      if (new File(downloadLink.getFileOutput()).delete()) {
        logger.severe(""String_Node_Str"");
      }
 else {
        error(LinkStatus.ERROR_ALREADYEXISTS,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        if (!handleErrors()) {
          return false;
        }
      }
    }
 else {
      error(LinkStatus.ERROR_ALREADYEXISTS,null);
      if (!handleErrors()) {
        return false;
      }
    }
  }
  try {
    linkStatus.addStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
    setupChunks();
    waitForChunks();
    onChunksReady();
    linkStatus.removeStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
    if (!handleErrors()) {
      return false;
    }
 else {
      return true;
    }
  }
 catch (  Exception e) {
    handleErrors();
    linkStatus.removeStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
    return false;
  }
}"
21263,"public HTTPConnection connect() throws Exception {
  if (request == null)   throw new IllegalStateException(""String_Node_Str"");
  this.connected=true;
  if (this.isResume() && this.checkResumabled()) {
    connectResumable();
  }
 else {
    if (this.isFileSizeVerified()) {
      int tmp=Math.min(Math.max(1,(int)(downloadLink.getDownloadSize() / Chunk.MIN_CHUNKSIZE)),getChunkNum());
      tmp=Math.min(tmp,plugin.getFreeConnections());
      if (tmp != getChunkNum()) {
        logger.finer(""String_Node_Str"" + getChunkNum() + ""String_Node_Str""+ tmp);
        setChunkNum(tmp);
      }
    }
    if (downloadLink.getDownloadSize() > 0 && this.getChunkNum() > 1 && !this.isFirstChunkRangeless()) {
      connectFirstRange();
    }
 else {
      request.getHeaders().remove(""String_Node_Str"");
      request.connect();
    }
  }
  if (this.plugin.getBrowser().isDebug())   logger.finest(request.printHeaders());
  if (request.getLocation() != null) {
    throw new PluginException(LinkStatus.ERROR_DOWNLOAD_FAILED,DownloadInterface.ERROR_REDIRECTED);
  }
  connection=request.getHttpConnection();
  if (connection.getRange() != null) {
    if (connection.getRange()[2] > 0) {
      this.setFilesizeCheck(true);
      this.downloadLink.setDownloadSize(connection.getRange()[2]);
    }
  }
 else {
    if (connection.getContentLength() > 0) {
      this.setFilesizeCheck(true);
      this.downloadLink.setDownloadSize(connection.getContentLength());
    }
  }
  if (this.downloadLink.getFinalFileName() == null) {
    String name=Plugin.getFileNameFormHeader(connection);
    this.downloadLink.setFinalFileName(name);
  }
  fileSize=downloadLink.getDownloadSize();
  return connection;
}","public HTTPConnection connect() throws Exception {
  if (request == null)   throw new IllegalStateException(""String_Node_Str"");
  this.connected=true;
  if (this.isResume() && this.checkResumabled()) {
    connectResumable();
  }
 else {
    if (this.isFileSizeVerified()) {
      int tmp=Math.min(Math.max(1,(int)(downloadLink.getDownloadSize() / Chunk.MIN_CHUNKSIZE)),getChunkNum());
      tmp=Math.min(tmp,plugin.getFreeConnections());
      if (tmp != getChunkNum()) {
        logger.finer(""String_Node_Str"" + getChunkNum() + ""String_Node_Str""+ tmp);
        setChunkNum(tmp);
      }
    }
    if (this.isFileSizeVerified() && downloadLink.getDownloadSize() > 0 && this.getChunkNum() > 1 && !this.isFirstChunkRangeless()) {
      connectFirstRange();
    }
 else {
      request.getHeaders().remove(""String_Node_Str"");
      request.connect();
    }
  }
  if (this.plugin.getBrowser().isDebug())   logger.finest(request.printHeaders());
  if (request.getLocation() != null) {
    throw new PluginException(LinkStatus.ERROR_DOWNLOAD_FAILED,DownloadInterface.ERROR_REDIRECTED);
  }
  connection=request.getHttpConnection();
  if (connection.getRange() != null) {
    if (connection.getRange()[2] > 0) {
      this.setFilesizeCheck(true);
      this.downloadLink.setDownloadSize(connection.getRange()[2]);
    }
  }
 else {
    if (connection.getContentLength() > 0) {
      this.setFilesizeCheck(true);
      this.downloadLink.setDownloadSize(connection.getContentLength());
    }
  }
  if (this.downloadLink.getFinalFileName() == null) {
    String name=Plugin.getFileNameFormHeader(connection);
    this.downloadLink.setFinalFileName(name);
  }
  fileSize=downloadLink.getDownloadSize();
  return connection;
}"
21264,"/** 
 * Setzt die anzahl der schon geladenen partbytes. Ist für resume wichtig.
 * @param loaded
 */
public void setLoaded(long loaded){
  totalPartBytes=loaded;
  addToTotalLinkBytesLoaded(loaded);
}","/** 
 * Setzt die anzahl der schon geladenen partbytes. Ist für resume wichtig.
 * @param loaded
 */
public void setLoaded(long loaded){
  loaded=Math.max(0,loaded);
  totalPartBytes=loaded;
  addToTotalLinkBytesLoaded(loaded);
}"
21265,"private void setupResume() throws FileNotFoundException {
  long parts=fileSize / getChunkNum();
  logger.info(""String_Node_Str"" + fileSize + ""String_Node_Str""+ parts);
  Chunk chunk;
  this.createOutputChannel();
  addToChunksInProgress(getChunkNum());
  for (int i=0; i < getChunkNum(); i++) {
    if (i == getChunkNum() - 1) {
      chunk=new Chunk(downloadLink.getChunksProgress()[i] + 1,-1,connection);
      chunk.setLoaded((downloadLink.getChunksProgress()[i] - i * parts + 1));
    }
 else {
      chunk=new Chunk(downloadLink.getChunksProgress()[i] + 1,(i + 1) * parts - 1,connection);
      chunk.setLoaded((downloadLink.getChunksProgress()[i] - i * parts + 1));
    }
    addChunk(chunk);
  }
}","private void setupResume() throws FileNotFoundException {
  long parts=fileSize / getChunkNum();
  logger.info(""String_Node_Str"" + fileSize + ""String_Node_Str""+ parts);
  Chunk chunk;
  this.createOutputChannel();
  addToChunksInProgress(getChunkNum());
  for (int i=0; i < getChunkNum(); i++) {
    if (i == getChunkNum() - 1) {
      chunk=new Chunk(downloadLink.getChunksProgress()[i] == 0 ? 0 : downloadLink.getChunksProgress()[i] + 1,-1,connection);
      chunk.setLoaded((downloadLink.getChunksProgress()[i] - i * parts + 1));
    }
 else {
      chunk=new Chunk(downloadLink.getChunksProgress()[i] == 0 ? 0 : downloadLink.getChunksProgress()[i] + 1,(i + 1) * parts - 1,connection);
      chunk.setLoaded((downloadLink.getChunksProgress()[i] - i * parts + 1));
    }
    addChunk(chunk);
  }
}"
21266,"/** 
 * premiumdownload Methode
 * @param step
 * @param downloadLink
 * @return
 */
public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
    if (Sniffy.hasSniffer())     throw new SnifferException();
  }
  Rapidshare.correctURL(downloadLink);
  checkMirrorsInProgress(downloadLink);
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  br.setAcceptLanguage(ACCEPT_LANGUAGE);
  br.setFollowRedirects(false);
  br.setAuth(null,account.getUser().trim(),account.getPass().trim());
  Request request=br.createGetRequest(downloadLink.getDownloadURL());
  dl=new RAFDownload(this,downloadLink,request);
  dl.setResume(true);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  HTTPConnection urlConnection;
  try {
    urlConnection=dl.connect();
  }
 catch (  Exception e) {
    br.setRequest(request);
    request=br.createGetRequest(null);
    dl=new RAFDownload(this,downloadLink,request);
    dl.setResume(true);
    dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
    urlConnection=dl.connect();
  }
  if (!urlConnection.isContentDisposition() && urlConnection.getHeaderField(""String_Node_Str"") != null) {
    br.setRequest(request);
    br.followConnection();
    String error;
    if ((error=findError(br.toString())) != null) {
      logger.warning(error);
      if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
        throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
      }
 else       if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
        throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
      }
 else       if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
        throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
      }
 else       if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
        throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
      }
 else {
        throw new PluginException(LinkStatus.ERROR_FATAL,error);
      }
    }
 else {
      reportUnknownError(br.toString(),6);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
  }
  dl.startDownload();
}","/** 
 * premiumdownload Methode
 * @param step
 * @param downloadLink
 * @return
 */
public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  if (downloadLink.getLinkType() == DownloadLink.LINKTYPE_CONTAINER) {
    if (Sniffy.hasSniffer())     throw new SnifferException();
  }
  Rapidshare.correctURL(downloadLink);
  checkMirrorsInProgress(downloadLink);
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  br.setAcceptLanguage(ACCEPT_LANGUAGE);
  br.setFollowRedirects(false);
  br.setDebug(true);
  br.setAuth(null,account.getUser().trim(),account.getPass().trim());
  Request request=br.createGetRequest(downloadLink.getDownloadURL());
  dl=new RAFDownload(this,downloadLink,request);
  dl.setResume(true);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  HTTPConnection urlConnection;
  try {
    urlConnection=dl.connect();
  }
 catch (  Exception e) {
    br.setRequest(request);
    request=br.createGetRequest(null);
    dl=new RAFDownload(this,downloadLink,request);
    dl.setResume(true);
    dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
    urlConnection=dl.connect();
  }
  if (!urlConnection.isContentDisposition() && urlConnection.getHeaderField(""String_Node_Str"") != null) {
    br.setRequest(request);
    br.followConnection();
    String error;
    if ((error=findError(br.toString())) != null) {
      logger.warning(error);
      if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
        throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
      }
 else       if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
        throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
      }
 else       if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
        throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_TEMP_DISABLE);
      }
 else       if (Regex.matches(error,Pattern.compile(""String_Node_Str""))) {
        throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
      }
 else {
        throw new PluginException(LinkStatus.ERROR_FATAL,error);
      }
    }
 else {
      reportUnknownError(br.toString(),6);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
  }
  dl.startDownload();
}"
21267,"public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  br.setDebug(true);
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  correctURL(downloadLink);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    long wait=Regex.getMilliSeconds(br.getRegex(""String_Node_Str"").getMatch(0));
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    logger.info(""String_Node_Str"");
    linkStatus.setValue(wait);
    return;
  }
  String error=new Regex(br.getURL(),""String_Node_Str"").getMatch(0);
  if (error == null) {
    error=new Regex(br.getURL(),""String_Node_Str"").getMatch(0);
  }
  if (error != null) {
    String message=JDLocale.L(""String_Node_Str"" + error,error.replaceAll(""String_Node_Str"",""String_Node_Str""));
    linkStatus.addStatus(LinkStatus.ERROR_FATAL);
    linkStatus.setErrorMessage(message);
    return;
  }
  br.setFollowRedirects(false);
  Form form=br.getFormbyValue(""String_Node_Str"");
  Request request=br.createFormRequest(form);
  dl=new RAFDownload(this,downloadLink,request);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  dl.setResume(true);
  try {
    dl.connect();
  }
 catch (  Exception e) {
    error=new Regex(request.getLocation(),""String_Node_Str"").getMatch(0);
    if (error == null) {
      error=new Regex(request.getLocation(),""String_Node_Str"").getMatch(0);
    }
    if (error != null) {
      String message=JDLocale.L(""String_Node_Str"" + error,error.replaceAll(""String_Node_Str"",""String_Node_Str""));
      throw new PluginException(LinkStatus.ERROR_FATAL,message);
    }
    if (request.getLocation() != null) {
      br.setRequest(request);
      request.getHttpConnection().disconnect();
      request=br.createGetRequest(null);
      dl=new RAFDownload(this,downloadLink,request);
      dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
      dl.setResume(true);
      dl.connect();
    }
  }
  if (request.getHttpConnection().getContentLength() == 0) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  br.setDebug(true);
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  br.setCookiesExclusive(true);
  br.clearCookies(getHost());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  correctURL(downloadLink);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    long wait=Regex.getMilliSeconds(br.getRegex(""String_Node_Str"").getMatch(0));
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    logger.info(""String_Node_Str"");
    linkStatus.setValue(wait);
    return;
  }
  String error=new Regex(br.getURL(),""String_Node_Str"").getMatch(0);
  if (error == null) {
    error=new Regex(br.getURL(),""String_Node_Str"").getMatch(0);
  }
  if (error != null) {
    String message=JDLocale.L(""String_Node_Str"" + error,error.replaceAll(""String_Node_Str"",""String_Node_Str""));
    linkStatus.addStatus(LinkStatus.ERROR_FATAL);
    linkStatus.setErrorMessage(message);
    return;
  }
  br.setFollowRedirects(false);
  Form form=br.getFormbyValue(""String_Node_Str"");
  Request request=br.createFormRequest(form);
  sleep(10000l,downloadLink);
  dl=new RAFDownload(this,downloadLink,request);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  dl.setResume(true);
  try {
    dl.connect();
  }
 catch (  Exception e) {
    error=new Regex(request.getLocation(),""String_Node_Str"").getMatch(0);
    if (error == null) {
      error=new Regex(request.getLocation(),""String_Node_Str"").getMatch(0);
    }
    if (error != null) {
      String message=JDLocale.L(""String_Node_Str"" + error,error.replaceAll(""String_Node_Str"",""String_Node_Str""));
      throw new PluginException(LinkStatus.ERROR_FATAL,message);
    }
    if (request.getLocation() != null) {
      br.setRequest(request);
      request.getHttpConnection().disconnect();
      request=br.createGetRequest(null);
      dl=new RAFDownload(this,downloadLink,request);
      dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
      dl.setResume(true);
      dl.connect();
    }
  }
  if (request.getHttpConnection().getContentLength() == 0) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  }
  dl.startDownload();
}"
21268,"/** 
 * das controllevent fängt heruntergeladene file ab und wertet sie aus
 */
@SuppressWarnings(""String_Node_Str"") @Override public void controlEvent(ControlEvent event){
  super.controlEvent(event);
switch (event.getID()) {
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
    if (!(event.getSource() instanceof PluginForHost)) {
      return;
    }
  DownloadLink link=((SingleDownloadController)event.getParameter()).getDownloadLink();
link=findStartLink(link);
if (link.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
if (link.getFilePackage().isExtractAfterDownload()) {
  if (getArchivePartType(link) == JDUnrarConstants.MULTIPART_START_PART || getArchivePartType(link) == JDUnrarConstants.SINGLE_PART_ARCHIVE) {
    if (archiveIsComplete(link)) {
      this.addToQueue(link);
    }
  }
}
}
break;
case ControlEvent.CONTROL_DOWNLOADLIST_ADDED_LINKS:
ArrayList<DownloadLink> list=(ArrayList<DownloadLink>)event.getParameter();
FilePackage old=null;
for (DownloadLink l : list) {
if (l.getFilePackage() == old) continue;
old=l.getFilePackage();
String[] pws=PasswordList.passwordStringtoArray(l.getFilePackage().getPassword());
for (String pw : pws) {
PasswordList.addPassword(pw);
}
}
PasswordList.save();
break;
case ControlEvent.CONTROL_LINKLIST_CONTEXT_MENU:
ArrayList<MenuItem> items=(ArrayList<MenuItem>)event.getParameter();
MenuItem m;
if (event.getSource() instanceof DownloadLink) {
link=(DownloadLink)event.getSource();
items.add(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(LOCALE_PREFIX + ""String_Node_Str"",""String_Node_Str""),1000).setActionListener(this));
m.setEnabled(link.getLinkStatus().hasStatus(LinkStatus.FINISHED) && link.getName().matches(""String_Node_Str""));
m.setProperty(""String_Node_Str"",link);
items.add(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(LOCALE_PREFIX + ""String_Node_Str"",""String_Node_Str""),1002).setActionListener(this));
m.setEnabled(link.getStringProperty(""String_Node_Str"") != null);
m.setProperty(""String_Node_Str"",link);
}
 else {
FilePackage fp=(FilePackage)event.getSource();
items.add(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(LOCALE_PREFIX + ""String_Node_Str"",""String_Node_Str""),1001).setActionListener(this));
m.setProperty(""String_Node_Str"",fp);
}
break;
}
}","/** 
 * das controllevent fängt heruntergeladene file ab und wertet sie aus
 */
@SuppressWarnings(""String_Node_Str"") @Override public void controlEvent(ControlEvent event){
  super.controlEvent(event);
switch (event.getID()) {
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
    if (!(event.getSource() instanceof PluginForHost)) {
      return;
    }
  DownloadLink link=((SingleDownloadController)event.getParameter()).getDownloadLink();
link=findStartLink(link);
if (link.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
if (link.getFilePackage().isExtractAfterDownload()) {
  if (getArchivePartType(link) == JDUnrarConstants.MULTIPART_START_PART || getArchivePartType(link) == JDUnrarConstants.SINGLE_PART_ARCHIVE) {
    if (archiveIsComplete(link)) {
      this.addToQueue(link);
    }
  }
}
}
break;
case ControlEvent.CONTROL_DOWNLOADLIST_ADDED_LINKS:
ArrayList<DownloadLink> list=(ArrayList<DownloadLink>)event.getParameter();
FilePackage old=null;
for (DownloadLink l : list) {
if (l.getFilePackage() == old) continue;
old=l.getFilePackage();
String[] pws=PasswordList.passwordStringtoArray(l.getFilePackage().getPassword());
for (String pw : pws) {
PasswordList.addPassword(pw);
}
}
PasswordList.save();
break;
case ControlEvent.CONTROL_LINKLIST_CONTEXT_MENU:
ArrayList<MenuItem> items=(ArrayList<MenuItem>)event.getParameter();
MenuItem m;
if (event.getSource() instanceof DownloadLink) {
link=(DownloadLink)event.getSource();
items.add(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(LOCALE_PREFIX + ""String_Node_Str"",""String_Node_Str""),1000).setActionListener(this));
m.setEnabled(false);
if (link.getLinkStatus().hasStatus(LinkStatus.FINISHED) && link.getName().matches(""String_Node_Str"")) m.setEnabled(true);
if (new File(link.getFileOutput()).exists() && link.getName().matches(""String_Node_Str"")) m.setEnabled(true);
m.setProperty(""String_Node_Str"",link);
items.add(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(LOCALE_PREFIX + ""String_Node_Str"",""String_Node_Str""),1002).setActionListener(this));
m.setEnabled(link.getStringProperty(""String_Node_Str"") != null);
m.setProperty(""String_Node_Str"",link);
}
 else {
FilePackage fp=(FilePackage)event.getSource();
items.add(m=new MenuItem(MenuItem.NORMAL,JDLocale.L(LOCALE_PREFIX + ""String_Node_Str"",""String_Node_Str""),1001).setActionListener(this));
m.setProperty(""String_Node_Str"",fp);
}
break;
}
}"
21269,"public void onUnrarEvent(int id,UnrarWrapper wrapper){
switch (id) {
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED:
    if (wrapper.getException() != null) {
      wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"" + wrapper.getException().getMessage());
      wrapper.getDownloadLink().requestGuiUpdate();
    }
 else {
      wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
      wrapper.getDownloadLink().requestGuiUpdate();
    }
  this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_FAILED_PASSWORD:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_CRACK_PASSWORD:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_NEW_STATUS:
break;
case JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
break;
case JDUnrarConstants.WRAPPER_PASSWORD_FOUND:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_ON_PROGRESS:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getExtractedSize(),wrapper.getTotalSize(),Color.YELLOW.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getExtractedSize());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_START_EXTRACTION:
break;
case JDUnrarConstants.WRAPPER_STARTED:
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().reset();
wrapper.getDownloadLink().requestGuiUpdate();
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED:
break;
case JDUnrarConstants.WRAPPER_FINISHED_SUCCESSFULL:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
this.onFinished(wrapper);
break;
default :
System.out.println(""String_Node_Str"");
}
}","public void onUnrarEvent(int id,UnrarWrapper wrapper){
switch (id) {
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED:
    if (wrapper.getException() != null) {
      wrapper.getDownloadLink().getLinkStatus().setErrorMessage(""String_Node_Str"" + wrapper.getException().getMessage());
      wrapper.getDownloadLink().requestGuiUpdate();
    }
 else {
      wrapper.getDownloadLink().getLinkStatus().setErrorMessage(""String_Node_Str"");
      wrapper.getDownloadLink().requestGuiUpdate();
    }
  this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_FAILED_PASSWORD:
wrapper.getDownloadLink().getLinkStatus().setErrorMessage(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_CRACK_PASSWORD:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_NEW_STATUS:
break;
case JDUnrarConstants.WRAPPER_START_OPEN_ARCHIVE:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
break;
case JDUnrarConstants.WRAPPER_PASSWORD_FOUND:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_ON_PROGRESS:
wrapper.getDownloadLink().getLinkStatus().setStatusText(""String_Node_Str"");
if (wrapper.getDownloadLink().getPluginProgress() == null) {
wrapper.getDownloadLink().setPluginProgress(new PluginProgress(wrapper.getExtractedSize(),wrapper.getTotalSize(),Color.YELLOW.darker()));
}
 else {
wrapper.getDownloadLink().getPluginProgress().setCurrent(wrapper.getExtractedSize());
}
wrapper.getDownloadLink().requestGuiUpdate();
break;
case JDUnrarConstants.WRAPPER_START_EXTRACTION:
break;
case JDUnrarConstants.WRAPPER_STARTED:
break;
case JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC:
ArrayList<DownloadLink> list=this.getArchiveList(wrapper.getDownloadLink());
DownloadLink crc=list.size() >= wrapper.getCurrentVolume() ? list.get(wrapper.getCurrentVolume()) : null;
wrapper.getDownloadLink().getLinkStatus().setErrorMessage(""String_Node_Str"");
wrapper.getDownloadLink().requestGuiUpdate();
if (crc != null) {
crc.getLinkStatus().removeStatus(LinkStatus.FINISHED);
crc.getLinkStatus().addStatus(LinkStatus.ERROR_DOWNLOAD_FAILED);
crc.getLinkStatus().setErrorMessage(""String_Node_Str"");
crc.requestGuiUpdate();
}
 else {
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().setErrorMessage(""String_Node_Str"");
link.requestGuiUpdate();
}
}
this.onFinished(wrapper);
break;
case JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED:
break;
case JDUnrarConstants.WRAPPER_FINISHED_SUCCESSFULL:
list=this.getArchiveList(wrapper.getDownloadLink());
for (DownloadLink link : list) {
if (link == null) continue;
link.getLinkStatus().setStatusText(""String_Node_Str"");
link.requestGuiUpdate();
}
this.onFinished(wrapper);
break;
default :
System.out.println(""String_Node_Str"");
}
}"
21270,"public void onProcess(Executer exec,String latestLine,StringBuffer buffer){
  System.out.println(latestLine);
  if (latestLine.length() > 0) {
  }
  String match;
  if (latestLine.length() > 0) {
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      String currentWorkingFile=match.trim();
      this.currentlyWorkingOn=getArchivFile(currentWorkingFile);
      this.fireEvent(JDUnrarConstants.WRAPPER_PROGRESS_NEW_SINGLE_FILE_STARTED);
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      this.currentVolume=Integer.parseInt(match.trim());
      long ext=this.totalSize / this.volumeNum * (currentVolume - 1);
      if (ext == 0) {
        return;
      }
      try {
        this.speed=ext / ((System.currentTimeMillis() - this.startTime) / 1000);
      }
 catch (      Exception e) {
      }
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      this.exactProgress=true;
      currentlyWorkingOn.setPercent(Integer.parseInt(match));
      this.fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
    }
    if (latestLine.startsWith(""String_Node_Str"")) {
      currentlyWorkingOn.setPercent(100);
      this.fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
      this.fireEvent(JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED);
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      this.status=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      exec.interrupt();
    }
  }
}","public void onProcess(Executer exec,String latestLine,StringBuffer buffer){
  System.out.println(latestLine);
  if (latestLine.length() > 0) {
  }
  String match;
  if (latestLine.length() > 0) {
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      String currentWorkingFile=match.trim();
      this.currentlyWorkingOn=getArchivFile(currentWorkingFile);
      this.fireEvent(JDUnrarConstants.WRAPPER_PROGRESS_NEW_SINGLE_FILE_STARTED);
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      this.currentVolume=Integer.parseInt(match.trim());
      long ext=this.totalSize / this.volumeNum * (currentVolume - 1);
      if (ext == 0) {
        return;
      }
      try {
        this.speed=ext / ((System.currentTimeMillis() - this.startTime) / 1000);
      }
 catch (      Exception e) {
      }
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      this.exactProgress=true;
      currentlyWorkingOn.setPercent(Integer.parseInt(match));
      this.fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
    }
    if (latestLine.startsWith(""String_Node_Str"")) {
      currentlyWorkingOn.setPercent(100);
      this.fireEvent(JDUnrarConstants.WRAPPER_ON_PROGRESS);
      this.fireEvent(JDUnrarConstants.WRAPPER_PROGRESS_SINGLE_FILE_FINISHED);
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      this.status=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      System.err.println(""String_Node_Str"" + match);
      exec.interrupt();
    }
    if ((match=new Regex(latestLine,""String_Node_Str"").getMatch(0)) != null) {
      this.status=JDUnrarConstants.WRAPPER_EXTRACTION_FAILED_CRC;
      exec.interrupt();
    }
  }
}"
21271,"/** 
 * Prüft anhand der Globalen IP Check einstellungen die IP
 * @return ip oder /offline
 */
public static String getIPAddress(){
  Browser br=new Browser();
  if (JDUtilities.getSubConfig(""String_Node_Str"").getBooleanProperty(Configuration.PARAM_GLOBAL_IP_DISABLE,false)) {
    logger.finer(""String_Node_Str"");
    return System.currentTimeMillis() + ""String_Node_Str"";
  }
  String site=JDUtilities.getSubConfig(""String_Node_Str"").getStringProperty(Configuration.PARAM_GLOBAL_IP_CHECK_SITE,""String_Node_Str"");
  String patt=JDUtilities.getSubConfig(""String_Node_Str"").getStringProperty(Configuration.PARAM_GLOBAL_IP_PATTERN,""String_Node_Str"");
  try {
    logger.finer(""String_Node_Str"" + site);
    Pattern pattern=Pattern.compile(patt);
    Matcher matcher=pattern.matcher(br.getPage(site));
    if (matcher.find()) {
      if (matcher.groupCount() > 0) {
        return matcher.group(1);
      }
 else {
        logger.severe(""String_Node_Str"" + patt);
      }
    }
    logger.info(""String_Node_Str"" + patt + ""String_Node_Str""+ site+ ""String_Node_Str""+ br.toString());
  }
 catch (  Exception e1) {
    logger.severe(""String_Node_Str"" + e1.toString());
  }
  try {
    logger.finer(""String_Node_Str"");
    Pattern pattern=Pattern.compile(patt);
    Matcher matcher=pattern.matcher(br.getPage(""String_Node_Str""));
    if (matcher.find()) {
      if (matcher.groupCount() > 0) {
        return matcher.group(1);
      }
 else {
        logger.severe(""String_Node_Str"" + patt);
      }
    }
    return ""String_Node_Str"";
  }
 catch (  Exception e1) {
    logger.severe(""String_Node_Str"" + e1.toString());
    logger.info(""String_Node_Str"");
  }
  return ""String_Node_Str"";
}","/** 
 * Prüft anhand der Globalen IP Check einstellungen die IP
 * @return ip oder /offline
 */
public static String getIPAddress(){
  Browser br=new Browser();
  br.setConnectTimeout(5000);
  br.setReadTimeout(5000);
  if (JDUtilities.getSubConfig(""String_Node_Str"").getBooleanProperty(Configuration.PARAM_GLOBAL_IP_DISABLE,false)) {
    logger.finer(""String_Node_Str"");
    return System.currentTimeMillis() + ""String_Node_Str"";
  }
  String site=JDUtilities.getSubConfig(""String_Node_Str"").getStringProperty(Configuration.PARAM_GLOBAL_IP_CHECK_SITE,""String_Node_Str"");
  String patt=JDUtilities.getSubConfig(""String_Node_Str"").getStringProperty(Configuration.PARAM_GLOBAL_IP_PATTERN,""String_Node_Str"");
  try {
    logger.finer(""String_Node_Str"" + site);
    Pattern pattern=Pattern.compile(patt);
    Matcher matcher=pattern.matcher(br.getPage(site));
    if (matcher.find()) {
      if (matcher.groupCount() > 0) {
        return matcher.group(1);
      }
 else {
        logger.severe(""String_Node_Str"" + patt);
      }
    }
    logger.info(""String_Node_Str"" + patt + ""String_Node_Str""+ site+ ""String_Node_Str""+ br.toString());
  }
 catch (  Exception e1) {
    logger.severe(""String_Node_Str"" + e1.toString());
  }
  try {
    logger.finer(""String_Node_Str"");
    Pattern pattern=Pattern.compile(patt);
    Matcher matcher=pattern.matcher(br.getPage(""String_Node_Str""));
    if (matcher.find()) {
      if (matcher.groupCount() > 0) {
        return matcher.group(1);
      }
 else {
        logger.severe(""String_Node_Str"" + patt);
      }
    }
    return ""String_Node_Str"";
  }
 catch (  Exception e1) {
    logger.severe(""String_Node_Str"" + e1.toString());
    logger.info(""String_Node_Str"");
  }
  return ""String_Node_Str"";
}"
21272,"public static String objectToXml(Serializable obj) throws IOException {
  ByteArrayOutputStream ba;
  DataOutputStream out=new DataOutputStream(ba=new ByteArrayOutputStream());
  XMLEncoder xmlEncoder=new XMLEncoder(out);
  xmlEncoder.writeObject(obj);
  xmlEncoder.close();
  out.close();
  return new String(ba.toByteArray());
}","public static String objectToXml(Object obj) throws IOException {
  ByteArrayOutputStream ba;
  DataOutputStream out=new DataOutputStream(ba=new ByteArrayOutputStream());
  XMLEncoder xmlEncoder=new XMLEncoder(out);
  xmlEncoder.writeObject(obj);
  xmlEncoder.close();
  out.close();
  return new String(ba.toByteArray());
}"
21273,"@Override public void run(){
  PluginForHost plugin;
  linkStatus.setStatusText(null);
  linkStatus.setErrorMessage(null);
  logger.info(""String_Node_Str"" + downloadLink.getName());
  currentPlugin=plugin=(PluginForHost)downloadLink.getPlugin();
  fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_ACTIVE,this));
  linkStatus.setInProgress(true);
  handlePlugin();
  linkStatus.setInProgress(false);
  fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_INACTIVE,this));
  plugin.clean();
  downloadLink.requestGuiUpdate();
}","@Override public void run(){
  PluginForHost plugin;
  linkStatus.setStatusText(null);
  linkStatus.setErrorMessage(null);
  linkStatus.resetWaitTime();
  logger.info(""String_Node_Str"" + downloadLink.getName());
  currentPlugin=plugin=(PluginForHost)downloadLink.getPlugin();
  fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_ACTIVE,this));
  linkStatus.setInProgress(true);
  handlePlugin();
  linkStatus.setInProgress(false);
  fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_INACTIVE,this));
  plugin.clean();
  downloadLink.requestGuiUpdate();
}"
21274,"private void retry(DownloadLink downloadLink,PluginForHost plugin){
  int r;
  if (downloadLink.getLinkStatus().getValue() > 0) {
    downloadLink.getLinkStatus().setStatusText(null);
  }
  if ((r=downloadLink.getLinkStatus().getRetryCount()) <= plugin.getMaxRetries()) {
    downloadLink.getLinkStatus().reset();
    downloadLink.getLinkStatus().setRetryCount(r + 1);
    downloadLink.getLinkStatus().setErrorMessage(null);
    try {
      plugin.sleep(Math.max((int)downloadLink.getLinkStatus().getValue(),2000),downloadLink);
    }
 catch (    InterruptedException e) {
      downloadLink.getLinkStatus().setStatusText(null);
      return;
    }
  }
 else {
  }
}","private void retry(DownloadLink downloadLink,PluginForHost plugin){
  int r;
  if (downloadLink.getLinkStatus().getValue() > 0) {
    downloadLink.getLinkStatus().setStatusText(null);
  }
  if ((r=downloadLink.getLinkStatus().getRetryCount()) <= plugin.getMaxRetries()) {
    downloadLink.getLinkStatus().reset();
    downloadLink.getLinkStatus().setRetryCount(r + 1);
    downloadLink.getLinkStatus().setErrorMessage(null);
    try {
      plugin.sleep(Math.max((int)downloadLink.getLinkStatus().getValue(),2000),downloadLink);
    }
 catch (    InterruptedException e) {
      downloadLink.getLinkStatus().setStatusText(null);
      return;
    }
  }
 else {
    downloadLink.getLinkStatus().addStatus(LinkStatus.ERROR_FATAL);
  }
}"
21275,"@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  column=this.table.getColumn(column).getModelIndex();
  if (column == DownloadTreeTableModel.COL_STATUS && value instanceof FilePackage) {
    String label=""String_Node_Str"";
    fp=(FilePackage)value;
    if (fp.getLinksInProgress() > 0) {
      label=fp.getLinksInProgress() + ""String_Node_Str"" + fp.size()+ ""String_Node_Str""+ JDLocale.L(""String_Node_Str"",""String_Node_Str"");
    }
    if (fp.getTotalDownloadSpeed() > 0) {
      label=""String_Node_Str"" + fp.getLinksInProgress() + ""String_Node_Str""+ fp.size()+ ""String_Node_Str""+ JDUtilities.formatSeconds(fp.getETA())+ ""String_Node_Str""+ JDUtilities.formatKbReadable(fp.getTotalDownloadSpeed() / 1024)+ ""String_Node_Str"";
    }
    miniBar.setText(label);
    miniBar.setPercent(fp.getPercent() / 100.0);
    return miniBar;
  }
 else   if (column == DownloadTreeTableModel.COL_PROGRESS && value instanceof DownloadLink) {
    dLink=(DownloadLink)value;
    if (dLink.getPlugin() == null) {
      progress.setForeground(ERROR_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(DONE_COLOR_FONT_A);
        ui.setSelectionBackground(DONE_COLOR_FONT_B);
      }
      progress.setString(""String_Node_Str"");
    }
 else     if (dLink.getPluginProgress() != null) {
      progress.setForeground(dLink.getPluginProgress().getColor());
      if (ui != null) {
        ui.setSelectionForeground(DONE_COLOR_FONT_A);
        ui.setSelectionBackground(DONE_COLOR_FONT_B);
      }
      progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
      progress.setMaximum((int)dLink.getPluginProgress().getTotal());
      progress.setValue((int)dLink.getPluginProgress().getCurrent());
      return progress;
    }
 else     if (dLink.getLinkStatus().getRemainingWaittime() == 0 && dLink.getPlugin().getRemainingHosterWaittime() <= 0 && (int)dLink.getDownloadCurrent() > 0) {
      if (!dLink.getLinkStatus().isPluginActive()) {
        if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          progress.setForeground(DONE_COLOR);
          if (ui != null) {
            ui.setSelectionForeground(DONE_COLOR_FONT_A);
            ui.setSelectionBackground(DONE_COLOR_FONT_B);
          }
          progress.setString(""String_Node_Str"");
        }
 else {
          progress.setForeground(INACTIVE_PROGRESS_COLOR);
          if (ui != null) {
            ui.setSelectionForeground(INACTIVE_PROGRESS_COLOR_FONT_A);
            ui.setSelectionBackground(INACTIVE_PROGRESS_COLOR_FONT_B);
          }
          progress.setString(""String_Node_Str"");
        }
      }
 else {
        progress.setForeground(ACTIVE_PROGRESS_COLOR);
        if (ui != null) {
          ui.setSelectionForeground(ACTIVE_PROGRESS_COLOR_FONT_A);
          ui.setSelectionBackground(ACTIVE_PROGRESS_COLOR_FONT_B);
        }
        if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
          progress.setString(SimpleGUI.WAITING_USER_IO);
        }
 else {
          progress.setString(c.format(dLink.getPercent() / 100.0) + ""String_Node_Str"" + JDUtilities.formatBytesToMB(dLink.getDownloadCurrent())+ ""String_Node_Str""+ JDUtilities.formatBytesToMB(Math.max(1,dLink.getDownloadSize()))+ ""String_Node_Str"");
        }
      }
      progress.setMaximum(10000);
      progress.setValue(dLink.getPercent());
      return progress;
    }
 else     if ((dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED) && dLink.getPlugin().getRemainingHosterWaittime() > 0) || (dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE) && dLink.getLinkStatus().getRemainingWaittime() > 0)) {
      progress.setMaximum((int)dLink.getLinkStatus().getTotalWaitTime());
      progress.setForeground(ERROR_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(ERROR_PROGRESS_COLOR_FONT_A);
        ui.setSelectionBackground(ERROR_PROGRESS_COLOR_FONT_B);
      }
      progress.setValue((int)dLink.getLinkStatus().getRemainingWaittime());
      progress.setString(c.format(10000 * progress.getPercentComplete() / 100.0) + ""String_Node_Str"" + progress.getValue() / 1000 + ""String_Node_Str"" + progress.getMaximum() / 1000 + ""String_Node_Str"");
      return progress;
    }
 else     if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
      progress.setForeground(ACTIVE_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(ACTIVE_PROGRESS_COLOR_FONT_A);
        ui.setSelectionBackground(ACTIVE_PROGRESS_COLOR_FONT_B);
      }
      progress.setString(SimpleGUI.WAITING_USER_IO);
      return progress;
    }
    label.setText(""String_Node_Str"");
    return label;
  }
 else   if (column == DownloadTreeTableModel.COL_PROGRESS && value instanceof FilePackage) {
    fp=(FilePackage)value;
    progress.setMaximum(Math.max(1,fp.getTotalEstimatedPackageSize()));
    progress.setForeground(PACKAGE_PROGRESS_COLOR);
    if (ui != null) {
      ui.setSelectionForeground(PACKAGE_PROGRESS_COLOR_FONT_A);
      ui.setSelectionBackground(PACKAGE_PROGRESS_COLOR_FONT_B);
    }
    if (fp.getPercent() == 0.0) {
      progress.setValue(0);
      progress.setString(""String_Node_Str"");
    }
 else {
      progress.setValue(fp.getTotalKBLoaded());
      progress.setString(c.format(fp.getPercent()) + ""String_Node_Str"" + JDUtilities.formatKbReadable(progress.getValue())+ ""String_Node_Str""+ JDUtilities.formatKbReadable(Math.max(1,fp.getTotalEstimatedPackageSize()))+ ""String_Node_Str"");
    }
    return progress;
  }
  co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  co.setForeground(FONT_COLOR);
  co.setBackground(FONT_COLOR);
  return co;
}","@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  column=this.table.getColumn(column).getModelIndex();
  if (column == DownloadTreeTableModel.COL_STATUS && value instanceof FilePackage) {
    String label=""String_Node_Str"";
    fp=(FilePackage)value;
    if (fp.getLinksInProgress() > 0) {
      label=fp.getLinksInProgress() + ""String_Node_Str"" + fp.size()+ ""String_Node_Str""+ JDLocale.L(""String_Node_Str"",""String_Node_Str"");
    }
    if (fp.getTotalDownloadSpeed() > 0) {
      label=""String_Node_Str"" + fp.getLinksInProgress() + ""String_Node_Str""+ fp.size()+ ""String_Node_Str""+ JDUtilities.formatSeconds(fp.getETA())+ ""String_Node_Str""+ JDUtilities.formatKbReadable(fp.getTotalDownloadSpeed() / 1024)+ ""String_Node_Str"";
    }
    miniBar.setText(label);
    miniBar.setPercent(fp.getPercent() / 100.0);
    return miniBar;
  }
 else   if (column == DownloadTreeTableModel.COL_PROGRESS && value instanceof DownloadLink) {
    dLink=(DownloadLink)value;
    if (dLink.getPlugin() == null) {
      progress.setForeground(ERROR_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(DONE_COLOR_FONT_A);
        ui.setSelectionBackground(DONE_COLOR_FONT_B);
      }
      progress.setString(""String_Node_Str"");
    }
 else     if (dLink.getPluginProgress() != null) {
      progress.setForeground(dLink.getPluginProgress().getColor());
      if (ui != null) {
        ui.setSelectionForeground(DONE_COLOR_FONT_A);
        ui.setSelectionBackground(DONE_COLOR_FONT_B);
      }
      progress.setString(dLink.getPluginProgress().getPercent() + ""String_Node_Str"");
      progress.setMaximum((int)dLink.getPluginProgress().getTotal());
      progress.setValue((int)dLink.getPluginProgress().getCurrent());
      return progress;
    }
 else     if ((dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED) && dLink.getPlugin().getRemainingHosterWaittime() > 0) || (dLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE) && dLink.getLinkStatus().getRemainingWaittime() > 0)) {
      progress.setMaximum((int)dLink.getLinkStatus().getTotalWaitTime());
      progress.setForeground(ERROR_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(ERROR_PROGRESS_COLOR_FONT_A);
        ui.setSelectionBackground(ERROR_PROGRESS_COLOR_FONT_B);
      }
      progress.setValue((int)dLink.getLinkStatus().getRemainingWaittime());
      progress.setString(c.format(10000 * progress.getPercentComplete() / 100.0) + ""String_Node_Str"" + progress.getValue() / 1000 + ""String_Node_Str"" + progress.getMaximum() / 1000 + ""String_Node_Str"");
      return progress;
    }
 else     if ((int)dLink.getDownloadCurrent() > 0) {
      if (!dLink.getLinkStatus().isPluginActive()) {
        if (dLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          progress.setForeground(DONE_COLOR);
          if (ui != null) {
            ui.setSelectionForeground(DONE_COLOR_FONT_A);
            ui.setSelectionBackground(DONE_COLOR_FONT_B);
          }
          progress.setString(""String_Node_Str"");
        }
 else {
          progress.setForeground(INACTIVE_PROGRESS_COLOR);
          if (ui != null) {
            ui.setSelectionForeground(INACTIVE_PROGRESS_COLOR_FONT_A);
            ui.setSelectionBackground(INACTIVE_PROGRESS_COLOR_FONT_B);
          }
          progress.setString(""String_Node_Str"");
        }
      }
 else {
        progress.setForeground(ACTIVE_PROGRESS_COLOR);
        if (ui != null) {
          ui.setSelectionForeground(ACTIVE_PROGRESS_COLOR_FONT_A);
          ui.setSelectionBackground(ACTIVE_PROGRESS_COLOR_FONT_B);
        }
        if (dLink.getLinkStatus().hasStatus(LinkStatus.WAITING_USERIO)) {
          progress.setString(SimpleGUI.WAITING_USER_IO);
        }
 else {
          progress.setString(c.format(dLink.getPercent() / 100.0) + ""String_Node_Str"" + JDUtilities.formatBytesToMB(dLink.getDownloadCurrent())+ ""String_Node_Str""+ JDUtilities.formatBytesToMB(Math.max(1,dLink.getDownloadSize()))+ ""String_Node_Str"");
        }
      }
      progress.setMaximum(10000);
      progress.setValue(dLink.getPercent());
      return progress;
    }
    label.setText(""String_Node_Str"");
    return label;
  }
 else   if (column == DownloadTreeTableModel.COL_PROGRESS && value instanceof FilePackage) {
    fp=(FilePackage)value;
    if (fp.isFinished()) {
      progress.setForeground(DONE_COLOR);
      progress.setMaximum(100);
      progress.setValue(100);
      progress.setString(""String_Node_Str"");
    }
 else {
      progress.setMaximum(Math.max(1,fp.getTotalEstimatedPackageSize()));
      progress.setForeground(PACKAGE_PROGRESS_COLOR);
      if (ui != null) {
        ui.setSelectionForeground(PACKAGE_PROGRESS_COLOR_FONT_A);
        ui.setSelectionBackground(PACKAGE_PROGRESS_COLOR_FONT_B);
      }
      if (fp.getPercent() == 0.0) {
        progress.setValue(0);
        progress.setString(""String_Node_Str"");
      }
 else {
        progress.setValue(fp.getTotalKBLoaded());
        progress.setString(c.format(fp.getPercent()) + ""String_Node_Str"" + JDUtilities.formatKbReadable(progress.getValue())+ ""String_Node_Str""+ JDUtilities.formatKbReadable(Math.max(1,fp.getTotalEstimatedPackageSize()))+ ""String_Node_Str"");
      }
    }
    return progress;
  }
  co=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  co.setForeground(FONT_COLOR);
  co.setBackground(FONT_COLOR);
  return co;
}"
21276,"/** 
 * Setzt den Linkstatus. Es dürfen nur LInkStatus.*STATUS ids verwendet werden
 * @param status
 */
public void setStatus(int status){
  this.status=status;
  lastestStatus=status;
}","/** 
 * Setzt den Linkstatus. Es dürfen nur LInkStatus.*STATUS ids verwendet werden
 * @param status
 */
public void setStatus(int status){
  if (status == FINISHED) {
    resetWaitTime();
  }
  this.status=status;
  lastestStatus=status;
}"
21277,"public void reset(){
  setStatus(TODO);
  statusText=null;
  retryCount=0;
  totalWaitTime=0;
  value=0;
  resetWaitTime();
}","public void reset(){
  setStatus(TODO);
  statusText=null;
  retryCount=0;
  value=0;
  resetWaitTime();
}"
21278,"@Override public void handleFree(DownloadLink parameter) throws Exception {
  if (parameter.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(parameter);
    return;
  }
  br.setFollowRedirects(true);
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(NOT_AVAILABLE)) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
 else   if (br.containsHTML(SERVER_DOWN) || br.containsHTML(NO_SLOT)) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  }
  br.getPage(Encoding.htmlDecode(""String_Node_Str"" + br.getRegex(baseLink).getMatch(0)));
  br.setCookie(br.getURL(),""String_Node_Str"",""String_Node_Str"");
  br.getPage(Encoding.htmlDecode(""String_Node_Str"" + br.getRegex(frameForCaptcha).getMatch(0)));
  File captchaFile=this.getLocalCaptchaFile(this);
  Browser.download(captchaFile,Encoding.htmlDecode(""String_Node_Str"" + br.getRegex(patternForCaptcha).getMatch(0)));
  String captchaCode=Plugin.getCaptchaCode(captchaFile,this,parameter);
  Form captchaForm=br.getForm(0);
  captchaForm.put(""String_Node_Str"",captchaCode);
  br.submitForm(captchaForm);
  if (br.containsHTML(CAPTCHA_WRONG)) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  br.openPostConnection(Encoding.htmlDecode(br.getRegex(patternForDownloadlink).getMatch(0)),""String_Node_Str"");
  if (br.getHttpConnection().isContentDisposition()) {
    dl=new RAFDownload(this,parameter,br.getHttpConnection());
    dl.startDownload();
  }
 else {
    br.followConnection();
    if (br.containsHTML(DOWNLOAD_LIMIT)) {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(br.getRegex(WAIT_TIME).getMatch(0)));
    }
 else     if (br.containsHTML(PATTERN_DOWNLOADING_TOO_MANY_FILES)) {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 1000l);
    }
  }
}","@Override public void handleFree(DownloadLink parameter) throws Exception {
  if (parameter.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(parameter);
    return;
  }
  br.setFollowRedirects(true);
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,3 * 60 * 1000l);
  }
  if (br.containsHTML(NOT_AVAILABLE)) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
 else   if (br.containsHTML(SERVER_DOWN) || br.containsHTML(NO_SLOT)) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  }
  br.getPage(Encoding.htmlDecode(""String_Node_Str"" + br.getRegex(baseLink).getMatch(0)));
  br.setCookie(br.getURL(),""String_Node_Str"",""String_Node_Str"");
  br.getPage(Encoding.htmlDecode(""String_Node_Str"" + br.getRegex(frameForCaptcha).getMatch(0)));
  File captchaFile=this.getLocalCaptchaFile(this);
  Browser.download(captchaFile,Encoding.htmlDecode(""String_Node_Str"" + br.getRegex(patternForCaptcha).getMatch(0)));
  String captchaCode=Plugin.getCaptchaCode(captchaFile,this,parameter);
  Form captchaForm=br.getForm(0);
  captchaForm.put(""String_Node_Str"",captchaCode);
  br.submitForm(captchaForm);
  if (br.containsHTML(CAPTCHA_WRONG)) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  br.openPostConnection(Encoding.htmlDecode(br.getRegex(patternForDownloadlink).getMatch(0)),""String_Node_Str"");
  if (br.getHttpConnection().isContentDisposition()) {
    dl=new RAFDownload(this,parameter,br.getHttpConnection());
    dl.startDownload();
  }
 else {
    br.followConnection();
    if (br.containsHTML(DOWNLOAD_LIMIT)) {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(br.getRegex(WAIT_TIME).getMatch(0)));
    }
 else     if (br.containsHTML(PATTERN_DOWNLOADING_TOO_MANY_FILES)) {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 1000l);
    }
  }
}"
21279,"@Override public boolean getFileInformation(DownloadLink downloadLink) throws IOException {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str""))   return true;
  downloadLink.setUrlDownload(downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
  downloadLink.setUrlDownload(downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(NOT_AVAILABLE)) {
    br.setFollowRedirects(false);
    return false;
  }
 else   if (br.containsHTML(SERVER_DOWN)) {
    br.setFollowRedirects(false);
    return false;
  }
 else {
    String fileName=Encoding.htmlDecode(new Regex(br.toString().replaceAll(""String_Node_Str"",""String_Node_Str""),FILENAME).getMatch(0));
    String fileSize=new Regex(br.toString(),FILESIZE).getMatch(-1);
    downloadLink.setName(fileName);
    downloadLink.setDownloadSize(Regex.getSize(fileSize));
  }
  br.setFollowRedirects(false);
  return true;
}","@Override public boolean getFileInformation(DownloadLink downloadLink) throws IOException {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str""))   return true;
  downloadLink.setUrlDownload(downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
  downloadLink.setUrlDownload(downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(NOT_AVAILABLE) && !br.containsHTML(""String_Node_Str"")) {
    br.setFollowRedirects(false);
    return false;
  }
 else   if (br.containsHTML(SERVER_DOWN)) {
    br.setFollowRedirects(false);
    return false;
  }
 else {
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.getLinkStatus().setErrorMessage(""String_Node_Str"");
      downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    }
 else {
      String fileName=Encoding.htmlDecode(new Regex(br.toString().replaceAll(""String_Node_Str"",""String_Node_Str""),FILENAME).getMatch(0));
      String fileSize=new Regex(br.toString(),FILESIZE).getMatch(-1);
      downloadLink.setName(fileName);
      downloadLink.setDownloadSize(Regex.getSize(fileSize));
    }
  }
  br.setFollowRedirects(false);
  return true;
}"
21280,"public Configuration loadConfiguration(){
  Object obj=JDUtilities.getDatabaseConnector().getData(""String_Node_Str"");
  if (obj == null) {
    File file=JDUtilities.getResourceFile(JDUtilities.CONFIG_PATH);
    if (file.exists()) {
      logger.info(""String_Node_Str"");
      obj=JDUtilities.loadObject(null,file,Configuration.saveAsXML);
      System.out.println(obj.getClass().getName());
      JDUtilities.getDatabaseConnector().saveConfiguration(""String_Node_Str"",obj);
    }
  }
  if (obj != null && ((Configuration)obj).getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY) != null) {
    Configuration configuration=(Configuration)obj;
    JDUtilities.setConfiguration(configuration);
    JDUtilities.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.WARNING));
    JDTheme.setTheme(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(SimpleGUI.PARAM_THEME,""String_Node_Str""));
    JDSounds.setSoundTheme(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(JDSounds.PARAM_CURRENTTHEME,""String_Node_Str""));
  }
 else {
    Configuration configuration=new Configuration();
    JDUtilities.setConfiguration(configuration);
    JDUtilities.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.WARNING));
    JDTheme.setTheme(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(SimpleGUI.PARAM_THEME,""String_Node_Str""));
    JDSounds.setSoundTheme(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(JDSounds.PARAM_CURRENTTHEME,""String_Node_Str""));
    JDUtilities.getDatabaseConnector().saveConfiguration(""String_Node_Str"",JDUtilities.getConfiguration());
    installerVisible=true;
    try {
      splashScreen.finish();
    }
 catch (    Exception e) {
    }
    SimpleGUI.setUIManager();
    Installer inst=new Installer();
    if (!inst.isAborted()) {
      File home=JDUtilities.getResourceFile(""String_Node_Str"");
      if (home.canWrite() && !JDUtilities.getResourceFile(""String_Node_Str"").exists()) {
        JOptionPane.showMessageDialog(null,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        try {
          Browser.download(new File(home,""String_Node_Str""),""String_Node_Str"");
          JDUtilities.saveConfig();
          logger.info(JDUtilities.runCommand(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + JDUtilities.RUNTYPE_LOCAL_JARED},home.getAbsolutePath(),0));
          System.exit(0);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (!home.canWrite()) {
        logger.info(""String_Node_Str"");
        JOptionPane.showMessageDialog(new JFrame(),JDLocale.L(""String_Node_Str"",""String_Node_Str"" + home));
        JDUtilities.removeDirectoryOrFile(JDUtilities.getResourceFile(""String_Node_Str""));
        System.exit(1);
      }
    }
 else {
      logger.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(new JFrame(),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      JDUtilities.removeDirectoryOrFile(JDUtilities.getResourceFile(""String_Node_Str""));
      System.exit(0);
    }
  }
  afterConfigIsLoaded();
  return JDUtilities.getConfiguration();
}","public Configuration loadConfiguration(){
  Object obj=JDUtilities.getDatabaseConnector().getData(""String_Node_Str"");
  if (obj == null) {
    File file=JDUtilities.getResourceFile(JDUtilities.CONFIG_PATH);
    if (file.exists()) {
      logger.info(""String_Node_Str"");
      obj=JDUtilities.loadObject(null,file,Configuration.saveAsXML);
      System.out.println(obj.getClass().getName());
      JDUtilities.getDatabaseConnector().saveConfiguration(""String_Node_Str"",obj);
    }
  }
  if (obj != null && ((Configuration)obj).getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY) != null) {
    Configuration configuration=(Configuration)obj;
    JDUtilities.setConfiguration(configuration);
    JDUtilities.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.WARNING));
    JDTheme.setTheme(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(SimpleGUI.PARAM_THEME,""String_Node_Str""));
    JDSounds.setSoundTheme(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(JDSounds.PARAM_CURRENTTHEME,""String_Node_Str""));
  }
 else {
    Configuration configuration=new Configuration();
    JDUtilities.setConfiguration(configuration);
    JDUtilities.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.WARNING));
    JDTheme.setTheme(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(SimpleGUI.PARAM_THEME,""String_Node_Str""));
    JDSounds.setSoundTheme(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getStringProperty(JDSounds.PARAM_CURRENTTHEME,""String_Node_Str""));
    JDUtilities.getDatabaseConnector().saveConfiguration(""String_Node_Str"",JDUtilities.getConfiguration());
    installerVisible=true;
    try {
      splashScreen.finish();
    }
 catch (    Exception e) {
    }
    SimpleGUI.setUIManager();
    Installer inst=new Installer();
    if (!inst.isAborted()) {
      File home=JDUtilities.getResourceFile(""String_Node_Str"");
      if (home.canWrite() && !JDUtilities.getResourceFile(""String_Node_Str"").exists()) {
        JOptionPane.showMessageDialog(null,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        try {
          Browser.download(new File(home,""String_Node_Str""),""String_Node_Str"");
          JDUtilities.saveConfig();
          logger.info(JDUtilities.runCommand(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + JDUtilities.RUNTYPE_LOCAL_JARED},home.getAbsolutePath(),0));
          System.exit(0);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (!home.canWrite()) {
        logger.info(""String_Node_Str"");
        JOptionPane.showMessageDialog(new JFrame(),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        JDUtilities.removeDirectoryOrFile(JDUtilities.getResourceFile(""String_Node_Str""));
        System.exit(1);
      }
    }
 else {
      logger.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(new JFrame(),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      JDUtilities.removeDirectoryOrFile(JDUtilities.getResourceFile(""String_Node_Str""));
      System.exit(0);
    }
  }
  return JDUtilities.getConfiguration();
}"
21281,"public boolean doInteraction(Object arg){
  int okCounter=0;
  Configuration configuration=JDUtilities.getConfiguration();
  String script=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_REQUESTS);
  String user=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_USER);
  String pass=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_PASS);
  String ip=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_IP);
  retries++;
  logger.info(""String_Node_Str"" + retries);
  ProgressController progress=new ProgressController(JDLocale.L(""String_Node_Str"",""String_Node_Str""),10);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"" + retries));
  if (user != null || pass != null) {
    Authenticator.setDefault(new InternalAuthenticator(user,pass));
  }
  if (script == null) {
    progress.finalize();
    return parseError(""String_Node_Str"");
  }
  String preIp=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + preIp);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + preIp);
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Document xmlScript;
  variables=new HashMap<String,String>();
  variables.put(""String_Node_Str"",user);
  variables.put(""String_Node_Str"",pass);
  variables.put(""String_Node_Str"",new BASE64Encoder().encode((user + ""String_Node_Str"" + pass).getBytes()));
  variables.put(""String_Node_Str"",ip);
  headerProperties=new HashMap<String,String>();
  progress.increase(1);
  try {
    xmlScript=HTTPLiveHeader.parseXmlString(script,false);
    Node root=xmlScript.getChildNodes().item(0);
    if (root == null || !root.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      progress.finalize();
      return parseError(""String_Node_Str"");
    }
    NodeList steps=root.getChildNodes();
    progress.addToMax(steps.getLength());
    for (int step=0; step < steps.getLength(); step++) {
      progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + step);
      progress.increase(1);
      Node current=steps.item(step);
      if (current.getNodeType() == 3) {
        continue;
      }
      if (!current.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
        progress.finalize();
        return parseError(""String_Node_Str"" + current.getNodeName());
      }
      NodeList toDos=current.getChildNodes();
      for (int toDoStep=0; toDoStep < toDos.getLength(); toDoStep++) {
        Node toDo=toDos.item(toDoStep);
        progress.setStatusText(String.format(JDLocale.L(""String_Node_Str"",""String_Node_Str""),toDo.getNodeName()));
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          NamedNodeMap attributes=toDo.getAttributes();
          for (int attribute=0; attribute < attributes.getLength(); attribute++) {
            String key=attributes.item(attribute).getNodeName();
            String value=attributes.item(attribute).getNodeValue();
            String[] tmp=value.split(""String_Node_Str"");
            String[] params=new Regex(value,""String_Node_Str"").getColumn(-1);
            if (params.length > 0) {
              String req;
              if (value.startsWith(params[0])) {
                req=""String_Node_Str"";
                logger.finer(""String_Node_Str"" + variables);
                logger.finer(""String_Node_Str"" + headerProperties);
                for (int i=0; i <= tmp.length; i++) {
                  logger.finer(""String_Node_Str"" + params[i - 1] + ""String_Node_Str"");
                  req+=getModifiedVariable(params[i - 1]);
                  if (i < tmp.length) {
                    req+=tmp[i];
                  }
                }
              }
 else {
                req=tmp[0];
                logger.finer(""String_Node_Str"" + variables);
                logger.finer(""String_Node_Str"" + headerProperties);
                for (int i=1; i <= tmp.length; i++) {
                  if (i > params.length) {
                    continue;
                  }
                  logger.finer(""String_Node_Str"" + params[i - 1] + ""String_Node_Str"");
                  req+=getModifiedVariable(params[i - 1]);
                  if (i < tmp.length) {
                    req+=tmp[i];
                  }
                }
              }
              value=req;
            }
            variables.put(key,value);
          }
          logger.finer(""String_Node_Str"" + variables);
        }
        Browser br=null;
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          if (toDo.getChildNodes().getLength() != 1) {
            progress.finalize();
            return parseError(""String_Node_Str"");
          }
          br=doRequest(toDo.getChildNodes().item(0).getNodeValue().trim());
          if (br == null || !br.getHttpConnection().isOK()) {
            okCounter--;
            logger.severe(""String_Node_Str"");
          }
 else {
            okCounter++;
          }
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          logger.finer(""String_Node_Str"");
          if (toDo.getChildNodes().getLength() != 1) {
            progress.finalize();
            return parseError(""String_Node_Str"");
          }
          NamedNodeMap attributes=toDo.getAttributes();
          if (attributes.getNamedItem(""String_Node_Str"") == null) {
            progress.finalize();
            return parseError(""String_Node_Str"" + toDo);
          }
          String[] keys=attributes.getNamedItem(""String_Node_Str"").getNodeValue().split(""String_Node_Str"");
          getVariables(toDo.getChildNodes().item(0).getNodeValue().trim(),keys,br);
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          NamedNodeMap attributes=toDo.getAttributes();
          Node item=attributes.getNamedItem(""String_Node_Str"");
          logger.finer(""String_Node_Str"" + item.getNodeValue() + ""String_Node_Str"");
          if (item == null) {
            return parseError(""String_Node_Str"");
          }
          int seconds=JDUtilities.filterInt(item.getNodeValue());
          Thread.sleep(seconds * 1000);
        }
      }
    }
  }
 catch (  SAXException e) {
    progress.finalize();
    return parseError(e.getMessage());
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
    progress.finalize();
    return parseError(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    progress.finalize();
    return parseError(e.getCause() + ""String_Node_Str"" + e.getMessage());
  }
  int waittime=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_IPCHECKWAITTIME,0);
  int maxretries=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_RETRIES,0);
  int waitForIp=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_WAITFORIPCHANGE,10);
  logger.finer(""String_Node_Str"" + waittime + ""String_Node_Str"");
  progress.increase(1);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  try {
    Thread.sleep(waittime * 1000);
  }
 catch (  InterruptedException e) {
  }
  String afterIP=JDUtilities.getIPAddress();
  if (!JDUtilities.validateIP(afterIP)) {
    logger.warning(""String_Node_Str"" + afterIP + ""String_Node_Str""+ JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_GLOBAL_IP_MASK,""String_Node_Str"" + ""String_Node_Str""));
    JDUtilities.getGUI().displayMiniWarning(String.format(JDLocale.L(""String_Node_Str"",""String_Node_Str""),afterIP),null,20);
    afterIP=""String_Node_Str"";
  }
  progress.increase(1);
  String pattern;
  pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
  progress.setStatusText(String.format(pattern,preIp,afterIP));
  long endTime=System.currentTimeMillis() + waitForIp * 1000;
  while (System.currentTimeMillis() <= endTime && (afterIP.equalsIgnoreCase(""String_Node_Str"") || afterIP == null || afterIP.equals(preIp))) {
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException e) {
    }
    afterIP=JDUtilities.getIPAddress();
    try {
      pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
      progress.setStatusText(String.format(pattern,preIp,afterIP));
    }
 catch (    Exception e) {
    }
    logger.finer(""String_Node_Str"" + afterIP);
  }
  logger.finer(""String_Node_Str"" + afterIP);
  if (afterIP.equals(""String_Node_Str"") && !afterIP.equals(preIp)) {
    logger.warning(""String_Node_Str"");
    endTime=System.currentTimeMillis() + 120 * 1000;
    while (System.currentTimeMillis() <= endTime && (afterIP.equalsIgnoreCase(""String_Node_Str"") || afterIP == null || afterIP.equals(preIp))) {
      try {
        Thread.sleep(20 * 1000);
      }
 catch (      InterruptedException e) {
      }
      afterIP=JDUtilities.getIPAddress();
      try {
        pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
        progress.setStatusText(String.format(pattern,preIp,afterIP));
      }
 catch (      Exception e) {
      }
      logger.finer(""String_Node_Str"" + afterIP);
    }
  }
  if (!afterIP.equals(preIp) && !afterIP.equalsIgnoreCase(""String_Node_Str"")) {
    progress.finalize();
    logger.info(""String_Node_Str"" + afterIP);
    return true;
  }
  if (retries <= maxretries) {
    progress.finalize();
    return doInteraction(arg);
  }
  progress.finalize();
  logger.info(""String_Node_Str"" + afterIP);
  return false;
}","public boolean doInteraction(Object arg){
  int okCounter=0;
  Configuration configuration=JDUtilities.getConfiguration();
  String script=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_REQUESTS);
  String user=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_USER);
  String pass=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_PASS);
  String ip=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_IP);
  retries++;
  logger.info(""String_Node_Str"" + retries);
  ProgressController progress=new ProgressController(JDLocale.L(""String_Node_Str"",""String_Node_Str""),10);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + retries);
  if (user != null || pass != null) {
    Authenticator.setDefault(new InternalAuthenticator(user,pass));
  }
  if (script == null) {
    progress.finalize();
    return parseError(""String_Node_Str"");
  }
  String preIp=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + preIp);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + preIp);
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Document xmlScript;
  variables=new HashMap<String,String>();
  variables.put(""String_Node_Str"",user);
  variables.put(""String_Node_Str"",pass);
  variables.put(""String_Node_Str"",new BASE64Encoder().encode((user + ""String_Node_Str"" + pass).getBytes()));
  variables.put(""String_Node_Str"",ip);
  headerProperties=new HashMap<String,String>();
  progress.increase(1);
  try {
    xmlScript=HTTPLiveHeader.parseXmlString(script,false);
    Node root=xmlScript.getChildNodes().item(0);
    if (root == null || !root.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      progress.finalize();
      return parseError(""String_Node_Str"");
    }
    NodeList steps=root.getChildNodes();
    progress.addToMax(steps.getLength());
    for (int step=0; step < steps.getLength(); step++) {
      progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + step);
      progress.increase(1);
      Node current=steps.item(step);
      if (current.getNodeType() == 3) {
        continue;
      }
      if (!current.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
        progress.finalize();
        return parseError(""String_Node_Str"" + current.getNodeName());
      }
      NodeList toDos=current.getChildNodes();
      for (int toDoStep=0; toDoStep < toDos.getLength(); toDoStep++) {
        Node toDo=toDos.item(toDoStep);
        progress.setStatusText(String.format(JDLocale.L(""String_Node_Str"",""String_Node_Str""),toDo.getNodeName()));
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          NamedNodeMap attributes=toDo.getAttributes();
          for (int attribute=0; attribute < attributes.getLength(); attribute++) {
            String key=attributes.item(attribute).getNodeName();
            String value=attributes.item(attribute).getNodeValue();
            String[] tmp=value.split(""String_Node_Str"");
            String[] params=new Regex(value,""String_Node_Str"").getColumn(-1);
            if (params.length > 0) {
              String req;
              if (value.startsWith(params[0])) {
                req=""String_Node_Str"";
                logger.finer(""String_Node_Str"" + variables);
                logger.finer(""String_Node_Str"" + headerProperties);
                for (int i=0; i <= tmp.length; i++) {
                  logger.finer(""String_Node_Str"" + params[i - 1] + ""String_Node_Str"");
                  req+=getModifiedVariable(params[i - 1]);
                  if (i < tmp.length) {
                    req+=tmp[i];
                  }
                }
              }
 else {
                req=tmp[0];
                logger.finer(""String_Node_Str"" + variables);
                logger.finer(""String_Node_Str"" + headerProperties);
                for (int i=1; i <= tmp.length; i++) {
                  if (i > params.length) {
                    continue;
                  }
                  logger.finer(""String_Node_Str"" + params[i - 1] + ""String_Node_Str"");
                  req+=getModifiedVariable(params[i - 1]);
                  if (i < tmp.length) {
                    req+=tmp[i];
                  }
                }
              }
              value=req;
            }
            variables.put(key,value);
          }
          logger.finer(""String_Node_Str"" + variables);
        }
        Browser br=null;
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          if (toDo.getChildNodes().getLength() != 1) {
            progress.finalize();
            return parseError(""String_Node_Str"");
          }
          br=doRequest(toDo.getChildNodes().item(0).getNodeValue().trim());
          if (br == null || !br.getHttpConnection().isOK()) {
            okCounter--;
            logger.severe(""String_Node_Str"");
          }
 else {
            okCounter++;
          }
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          logger.finer(""String_Node_Str"");
          if (toDo.getChildNodes().getLength() != 1) {
            progress.finalize();
            return parseError(""String_Node_Str"");
          }
          NamedNodeMap attributes=toDo.getAttributes();
          if (attributes.getNamedItem(""String_Node_Str"") == null) {
            progress.finalize();
            return parseError(""String_Node_Str"" + toDo);
          }
          String[] keys=attributes.getNamedItem(""String_Node_Str"").getNodeValue().split(""String_Node_Str"");
          getVariables(toDo.getChildNodes().item(0).getNodeValue().trim(),keys,br);
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          NamedNodeMap attributes=toDo.getAttributes();
          Node item=attributes.getNamedItem(""String_Node_Str"");
          logger.finer(""String_Node_Str"" + item.getNodeValue() + ""String_Node_Str"");
          if (item == null) {
            return parseError(""String_Node_Str"");
          }
          int seconds=JDUtilities.filterInt(item.getNodeValue());
          Thread.sleep(seconds * 1000);
        }
      }
    }
  }
 catch (  SAXException e) {
    progress.finalize();
    return parseError(e.getMessage());
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
    progress.finalize();
    return parseError(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    progress.finalize();
    return parseError(e.getCause() + ""String_Node_Str"" + e.getMessage());
  }
  int waittime=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_IPCHECKWAITTIME,0);
  int maxretries=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_RETRIES,0);
  int waitForIp=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_WAITFORIPCHANGE,10);
  logger.finer(""String_Node_Str"" + waittime + ""String_Node_Str"");
  progress.increase(1);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  try {
    Thread.sleep(waittime * 1000);
  }
 catch (  InterruptedException e) {
  }
  String afterIP=JDUtilities.getIPAddress();
  if (!JDUtilities.validateIP(afterIP)) {
    logger.warning(""String_Node_Str"" + afterIP + ""String_Node_Str""+ JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_GLOBAL_IP_MASK,""String_Node_Str"" + ""String_Node_Str""));
    JDUtilities.getGUI().displayMiniWarning(String.format(JDLocale.L(""String_Node_Str"",""String_Node_Str""),afterIP),null,20);
    afterIP=""String_Node_Str"";
  }
  progress.increase(1);
  String pattern;
  pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
  progress.setStatusText(String.format(pattern,preIp,afterIP));
  long endTime=System.currentTimeMillis() + waitForIp * 1000;
  while (System.currentTimeMillis() <= endTime && (afterIP.equalsIgnoreCase(""String_Node_Str"") || afterIP == null || afterIP.equals(preIp))) {
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException e) {
    }
    afterIP=JDUtilities.getIPAddress();
    try {
      pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
      progress.setStatusText(String.format(pattern,preIp,afterIP));
    }
 catch (    Exception e) {
    }
    logger.finer(""String_Node_Str"" + afterIP);
  }
  logger.finer(""String_Node_Str"" + afterIP);
  if (afterIP.equals(""String_Node_Str"") && !afterIP.equals(preIp)) {
    logger.warning(""String_Node_Str"");
    endTime=System.currentTimeMillis() + 120 * 1000;
    while (System.currentTimeMillis() <= endTime && (afterIP.equalsIgnoreCase(""String_Node_Str"") || afterIP == null || afterIP.equals(preIp))) {
      try {
        Thread.sleep(20 * 1000);
      }
 catch (      InterruptedException e) {
      }
      afterIP=JDUtilities.getIPAddress();
      try {
        pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
        progress.setStatusText(String.format(pattern,preIp,afterIP));
      }
 catch (      Exception e) {
      }
      logger.finer(""String_Node_Str"" + afterIP);
    }
  }
  if (!afterIP.equals(preIp) && !afterIP.equalsIgnoreCase(""String_Node_Str"")) {
    progress.finalize();
    logger.info(""String_Node_Str"" + afterIP);
    return true;
  }
  if (retries <= maxretries) {
    progress.finalize();
    return doInteraction(arg);
  }
  progress.finalize();
  logger.info(""String_Node_Str"" + afterIP);
  return false;
}"
21282,"private void getSourceEntries(){
  sourceEntries.clear();
  sourcePatterns.clear();
  Vector<String> keys=new Vector<String>();
  String[][] matches;
  for (  File file : getSourceFiles(sourceFolder)) {
    matches=new Regex(JDUtilities.getLocalFile(file),Pattern.compile(""String_Node_Str"")).getMatches();
    for (    String[] match : matches) {
      match[0]=match[0].trim();
      if (keys.contains(match[0]))       continue;
      if (match[0].indexOf(""String_Node_Str"") == -1) {
        match[0]=Encoding.UTF8Decode(match[0]);
        match[1]=Encoding.UTF8Decode(match[1]);
        keys.add(match[0]);
        sourceEntries.add(new String[]{match[0],match[1]});
      }
 else {
        if (match[0].contains(""String_Node_Str""))         match[0]=match[0].substring(0,match[0].indexOf(""String_Node_Str"") + 1);
        match[0]=match[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
        match[0]=match[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (keys.contains(match[0]))         continue;
        keys.add(Encoding.UTF8Decode(match[0]));
        sourcePatterns.add(Pattern.compile(match[0],Pattern.CASE_INSENSITIVE));
      }
    }
  }
}","private void getSourceEntries(){
  sourceEntries.clear();
  sourcePatterns.clear();
  Vector<String> keys=new Vector<String>();
  String[][] matches;
  for (  File file : getSourceFiles(sourceFolder)) {
    matches=new Regex(JDUtilities.getLocalFile(file),Pattern.compile(""String_Node_Str"")).getMatches();
    for (    String[] match : matches) {
      match[0]=match[0].trim();
      if (keys.contains(match[0]))       continue;
      if (match[0].indexOf(""String_Node_Str"") == -1) {
        match[0]=Encoding.UTF8Decode(match[0]);
        match[1]=Encoding.UTF8Decode(match[1].substring(1,match[1].length() - 1));
        keys.add(match[0]);
        sourceEntries.add(new String[]{match[0],match[1]});
      }
 else {
        if (match[0].contains(""String_Node_Str""))         match[0]=match[0].substring(0,match[0].indexOf(""String_Node_Str"") + 1);
        match[0]=match[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
        match[0]=match[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (keys.contains(match[0]))         continue;
        keys.add(Encoding.UTF8Decode(match[0]));
        sourcePatterns.add(Pattern.compile(match[0],Pattern.CASE_INSENSITIVE));
      }
    }
  }
}"
21283,"public static String getJDTitle(){
  String ret=JDUtilities.JD_TITLE + ""String_Node_Str"" + JDUtilities.JD_VERSION+ JDUtilities.getRevision();
  if (JDUtilities.getController() != null && JDUtilities.getController().getWaitingUpdates() != null && JDUtilities.getController().getWaitingUpdates().size() > 0) {
    ret+=""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"") + JDUtilities.getController().getWaitingUpdates().size();
  }
  return ret;
}","public static String getJDTitle(){
  String ret=JDUtilities.JD_TITLE + ""String_Node_Str"" + JDUtilities.JD_VERSION+ JDUtilities.getRevision();
  if (JDUtilities.getController() != null && JDUtilities.getController().getWaitingUpdates() != null && JDUtilities.getController().getWaitingUpdates().size() > 0) {
    ret+=""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ JDUtilities.getController().getWaitingUpdates().size();
  }
  return ret;
}"
21284,"/** 
 * Erzeugt einen neuen DownloadLink
 * @param plugin Das Plugins, das für diesen Download zuständig ist
 * @param name Bezeichnung des Downloads
 * @param host Anbieter, von dem dieser Download gestartet wird
 * @param urlDownload Die Download URL (Entschlüsselt)
 * @param isEnabled Markiert diesen DownloadLink als aktiviert oder deaktiviert
 */
public DownloadLink(PluginForHost plugin,String name,String host,String urlDownload,boolean isEnabled){
  this.plugin=plugin;
  setName(name);
  sourcePluginPasswords=new Vector<String>();
  downloadMax=0;
  this.host=host == null ? null : host.toLowerCase();
  this.isEnabled=isEnabled;
  speedMeter=new SpeedMeter();
  if (urlDownload != null) {
    this.urlDownload=urlDownload.trim();
  }
 else {
    this.urlDownload=null;
  }
  if (name == null && urlDownload != null) {
    this.name=Plugin.extractFileNameFromURL(getDownloadURL());
  }
}","/** 
 * Erzeugt einen neuen DownloadLink
 * @param plugin Das Plugins, das für diesen Download zuständig ist
 * @param name Bezeichnung des Downloads
 * @param host Anbieter, von dem dieser Download gestartet wird
 * @param urlDownload Die Download URL (Entschlüsselt)
 * @param isEnabled Markiert diesen DownloadLink als aktiviert oder deaktiviert
 */
public DownloadLink(PluginForHost plugin,String name,String host,String urlDownload,boolean isEnabled){
  this.plugin=plugin;
  setName(name);
  sourcePluginPasswords=new Vector<String>();
  downloadMax=0;
  this.host=host == null ? null : host.toLowerCase();
  this.isEnabled=isEnabled;
  speedMeter=new SpeedMeter();
  this.setUrlDownload(urlDownload);
  if (name == null && urlDownload != null) {
    this.name=Plugin.extractFileNameFromURL(getDownloadURL());
  }
}"
21285,"private boolean checkResumabled(){
  if (!isResume() || downloadLink.getChunksProgress() == null) {
    return false;
  }
  long loaded=0;
  long fileSize=getFileSize();
  int chunks=downloadLink.getChunksProgress().length;
  long part=fileSize / chunks;
  for (int i=0; i < chunks; i++) {
    loaded+=downloadLink.getChunksProgress()[i] - i * part;
  }
  if (chunks > 0) {
    setChunkNum(chunks);
    logger.info(""String_Node_Str"" + chunks + ""String_Node_Str"");
    return true;
  }
  return false;
}","private boolean checkResumabled(){
  if (!isResume() || downloadLink.getChunksProgress() == null) {
    return false;
  }
  long loaded=0;
  long fileSize=getFileSize();
  int chunks=downloadLink.getChunksProgress().length;
  long part=fileSize / chunks;
  long dif;
  long last=-1;
  for (int i=0; i < chunks; i++) {
    dif=downloadLink.getChunksProgress()[i] - i * part;
    if (dif < 0)     return false;
    if (downloadLink.getChunksProgress()[i] <= last)     return false;
    last=downloadLink.getChunksProgress()[i];
    loaded+=dif;
  }
  if (chunks > 0) {
    setChunkNum(chunks);
    logger.info(""String_Node_Str"" + chunks + ""String_Node_Str"");
    return true;
  }
  return false;
}"
21286,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  String user=account.getUser();
  String pass=account.getPass();
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  downloadLink.setUrlDownload(downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
  downloadLink.setUrlDownload(downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (user == null || pass == null) {
    linkStatus.setStatus(LinkStatus.ERROR_PREMIUM);
    return;
  }
  br.setCookiesExclusive(true);
  br.setFollowRedirects(true);
  br.getPage(""String_Node_Str"");
  Form login=br.getFormbyValue(""String_Node_Str"");
  login.put(""String_Node_Str"",account.getUser());
  login.put(""String_Node_Str"",account.getPass());
  br.submitForm(login);
  br.setFollowRedirects(true);
  HTTPConnection con=br.openGetConnection(downloadLink.getDownloadURL());
  if (con.getHeaderField(""String_Node_Str"") == null) {
    br.followConnection();
    if (br.containsHTML(NOT_AVAILABLE)) {
      linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
      return;
    }
 else     if (br.containsHTML(SERVER_DOWN)) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setValue(20 * 60 * 1000l);
      return;
    }
 else {
      String red=br.getRegex(""String_Node_Str"").getMatch(0);
      con=br.openGetConnection(red);
    }
  }
  dl=new RAFDownload(this,downloadLink,con);
  dl.setResume(true);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  dl.startDownload();
  return;
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  String user=account.getUser();
  String pass=account.getPass();
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  downloadLink.setUrlDownload(downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
  downloadLink.setUrlDownload(downloadLink.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (user == null || pass == null) {
    linkStatus.setStatus(LinkStatus.ERROR_PREMIUM);
    return;
  }
  br.setCookiesExclusive(true);
  br.setFollowRedirects(true);
  br.getPage(""String_Node_Str"");
  Form login=br.getFormbyValue(""String_Node_Str"");
  login.put(""String_Node_Str"",account.getUser());
  login.put(""String_Node_Str"",account.getPass());
  br.submitForm(login);
  br.setFollowRedirects(true);
  String error=br.getRegex(""String_Node_Str"").getMatch(0);
  if (error != null) {
    throw new PluginException(LinkStatus.ERROR_PREMIUM,error,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
  }
  HTTPConnection con=br.openGetConnection(downloadLink.getDownloadURL());
  if (con.getHeaderField(""String_Node_Str"") == null) {
    br.followConnection();
    if (br.containsHTML(NOT_AVAILABLE)) {
      linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
      return;
    }
 else     if (br.containsHTML(SERVER_DOWN)) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setValue(20 * 60 * 1000l);
      return;
    }
 else {
      String red=br.getRegex(""String_Node_Str"").getMatch(0);
      con=br.openGetConnection(red);
    }
  }
  dl=new RAFDownload(this,downloadLink,con);
  dl.setResume(true);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  dl.startDownload();
  return;
}"
21287,"public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  Browser br=new Browser();
  br.postPage(""String_Node_Str"" + getHost() + ""String_Node_Str"",""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ account.getPass()+ ""String_Node_Str"");
  if (br.getRedirectLocation() == null) {
    ai.setValid(false);
    return ai;
  }
  br.getPage(""String_Node_Str"");
  String validUntil=br.getRegex(""String_Node_Str"").getMatch(0).trim();
  String days=new Regex(validUntil,""String_Node_Str"").getMatch(0);
  String hours=new Regex(validUntil,""String_Node_Str"").getMatch(0);
  long res=0;
  if (days != null)   res+=Long.parseLong(days.trim()) * 24 * 60* 60* 1000;
  if (hours != null)   res+=Long.parseLong(hours.trim()) * 60 * 60* 1000;
  res+=new Date().getTime();
  logger.info(new Date(res) + ""String_Node_Str"");
  ai.setValidUntil(res);
  return ai;
}","public AccountInfo getAccountInformation(Account account) throws Exception {
  AccountInfo ai=new AccountInfo(this,account);
  Browser br=new Browser();
  br.postPage(""String_Node_Str"" + getHost() + ""String_Node_Str"",""String_Node_Str"" + account.getUser() + ""String_Node_Str""+ account.getPass()+ ""String_Node_Str"");
  if (br.getRedirectLocation() == null || !br.getRedirectLocation().trim().equalsIgnoreCase(""String_Node_Str"")) {
    ai.setValid(false);
    return ai;
  }
  br.getPage(""String_Node_Str"");
  String validUntil=br.getRegex(""String_Node_Str"").getMatch(0).trim();
  String days=new Regex(validUntil,""String_Node_Str"").getMatch(0);
  String hours=new Regex(validUntil,""String_Node_Str"").getMatch(0);
  long res=0;
  if (days != null)   res+=Long.parseLong(days.trim()) * 24 * 60* 60* 1000;
  if (hours != null)   res+=Long.parseLong(hours.trim()) * 60 * 60* 1000;
  res+=new Date().getTime();
  logger.info(new Date(res) + ""String_Node_Str"");
  ai.setValidUntil(res);
  return ai;
}"
21288,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  checkMirrorsInProgress(downloadLink);
  downloadLink.setUrlDownload(""String_Node_Str"" + Netloadin.getID(downloadLink.getDownloadURL()) + ""String_Node_Str"");
  br.setFollowRedirects(false);
  br.setAuth(""String_Node_Str"",account.getUser(),account.getPass());
  br.openGetConnection(downloadLink.getDownloadURL());
  HTTPConnection con;
  if (br.getRedirectLocation() == null) {
    br.followConnection();
    checkPassword(downloadLink,linkStatus);
    checkErrors(linkStatus);
    String url=br.getRedirectLocation();
    if (url == null)     url=br.getRegex(""String_Node_Str"").getMatch(0);
    if (url == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT,""String_Node_Str"");
    con=br.openGetConnection(url);
    for (int i=0; i < 10 && (!con.isOK()); i++) {
      try {
        con=br.openGetConnection(url);
      }
 catch (      Exception e) {
        try {
          Thread.sleep(150);
        }
 catch (        InterruptedException e2) {
          e2.printStackTrace();
        }
      }
    }
  }
 else {
    con=br.openGetConnection(null);
  }
  if (!con.isContentDisposition()) {
    if (br.followConnection() == null)     throw new PluginException(LinkStatus.ERROR_RETRY,""String_Node_Str"");
    checkPassword(downloadLink,linkStatus);
    checkErrors(linkStatus);
  }
  dl=new RAFDownload(this,downloadLink,con);
  dl.setResume(true);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    ((PluginForHost)PluginWrapper.getNewInstance(""String_Node_Str"")).handleFree(downloadLink);
    return;
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  checkMirrorsInProgress(downloadLink);
  downloadLink.setUrlDownload(""String_Node_Str"" + Netloadin.getID(downloadLink.getDownloadURL()) + ""String_Node_Str"");
  br.setFollowRedirects(false);
  br.setAuth(""String_Node_Str"",account.getUser(),account.getPass());
  br.openGetConnection(downloadLink.getDownloadURL());
  HTTPConnection con;
  String user=br.getCookie(""String_Node_Str"",""String_Node_Str"");
  if (user == null) {
    logger.severe(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PREMIUM,LinkStatus.VALUE_ID_PREMIUM_DISABLE);
  }
  if (br.getRedirectLocation() == null) {
    br.followConnection();
    checkPassword(downloadLink,linkStatus);
    checkErrors(linkStatus);
    String url=br.getRedirectLocation();
    if (url == null)     url=br.getRegex(""String_Node_Str"").getMatch(0);
    if (url == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT,""String_Node_Str"");
    con=br.openGetConnection(url);
    for (int i=0; i < 10 && (!con.isOK()); i++) {
      try {
        con=br.openGetConnection(url);
      }
 catch (      Exception e) {
        try {
          Thread.sleep(150);
        }
 catch (        InterruptedException e2) {
          e2.printStackTrace();
        }
      }
    }
  }
 else {
    con=br.openGetConnection(null);
  }
  if (!con.isContentDisposition()) {
    if (br.followConnection() == null)     throw new PluginException(LinkStatus.ERROR_RETRY,""String_Node_Str"");
    checkPassword(downloadLink,linkStatus);
    checkErrors(linkStatus);
  }
  dl=new RAFDownload(this,downloadLink,con);
  dl.setResume(true);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  dl.startDownload();
}"
21289,"@SuppressWarnings(""String_Node_Str"") public synchronized void onDownloadedPackage(final DownloadLink downloadLink){
  final PackageData dat=(PackageData)downloadLink.getProperty(""String_Node_Str"");
  logger.finer(""String_Node_Str"");
  if (dat == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
  dat.setProperty(""String_Node_Str"",downloadLink.getFileOutput());
  dat.setDownloaded(true);
  ArrayList<PackageData> data=(ArrayList<PackageData>)CFGConfig.getConfig(""String_Node_Str"").getProperty(""String_Node_Str"",new ArrayList<PackageData>());
  for (  PackageData pd : data) {
    if (pd.isDownloaded())     logger.finer(pd.getStringProperty(""String_Node_Str"") + ""String_Node_Str"" + pd.getStringProperty(""String_Node_Str""));
    if (pd == dat)     logger.finer(""String_Node_Str"");
  }
  CFGConfig.getConfig(""String_Node_Str"").save();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      JDUtilities.getController().removeDownloadLink(downloadLink);
      JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
      boolean ch=false;
      all:       for (      FilePackage fp : JDUtilities.getController().getPackages()) {
        for (        DownloadLink dLink : fp.getDownloadLinks()) {
          if (dLink.getLinkType() == DownloadLink.LINKTYPE_JDU) {
            ch=true;
            break all;
          }
        }
      }
      if (!ch) {
        String list=""String_Node_Str"";
        for (        PackageData pa : getDownloadedPackages()) {
          list+=pa.getStringProperty(""String_Node_Str"") + ""String_Node_Str"" + pa.getStringProperty(""String_Node_Str"")+ ""String_Node_Str"";
        }
        String message=JDLocale.LF(""String_Node_Str"",""String_Node_Str"",list);
        boolean ret=JDUtilities.getGUI().showCountdownConfirmDialog(message,15);
        if (ret) {
          new JDInit().doWebupdate(JDUtilities.getConfiguration().getIntegerProperty(Configuration.CID,-1),true);
        }
      }
    }
  }
.start();
}","@SuppressWarnings(""String_Node_Str"") public synchronized void onDownloadedPackage(final DownloadLink downloadLink){
  PackageData d=(PackageData)downloadLink.getProperty(""String_Node_Str"");
  final PackageData dat;
  logger.finer(""String_Node_Str"");
  ArrayList<PackageData> data=this.getPackageData();
  boolean found=false;
  for (  PackageData pd : data) {
    if (pd.equals(d)) {
      logger.finer(""String_Node_Str"");
{
        dat=pd;
        found=true;
        dat.setProperty(""String_Node_Str"",downloadLink.getFileOutput());
        dat.setDownloaded(true);
        CFGConfig.getConfig(""String_Node_Str"").save();
        new Thread(){
          @Override public void run(){
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            JDUtilities.getController().removeDownloadLink(downloadLink);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            boolean ch=false;
            all:             for (            FilePackage fp : JDUtilities.getController().getPackages()) {
              for (              DownloadLink dLink : fp.getDownloadLinks()) {
                if (dLink.getLinkType() == DownloadLink.LINKTYPE_JDU) {
                  ch=true;
                  break all;
                }
              }
            }
            if (!ch) {
              String list=""String_Node_Str"";
              for (              PackageData pa : getDownloadedPackages()) {
                list+=pa.getStringProperty(""String_Node_Str"") + ""String_Node_Str"" + pa.getStringProperty(""String_Node_Str"")+ ""String_Node_Str"";
              }
              String message=JDLocale.LF(""String_Node_Str"",""String_Node_Str"",list);
              boolean ret=JDUtilities.getGUI().showCountdownConfirmDialog(message,15);
              if (ret) {
                new JDInit().doWebupdate(JDUtilities.getConfiguration().getIntegerProperty(Configuration.CID,-1),true);
              }
            }
          }
        }
.start();
        break;
      }
    }
  }
  if (!found) {
    logger.severe(""String_Node_Str"" + d + ""String_Node_Str"");
  }
}"
21290,"@SuppressWarnings(""String_Node_Str"") public ArrayList<PackageData> getPackageData(){
  if (PACKAGE_DATA != null)   return PACKAGE_DATA;
  Browser br=new Browser();
  br.setFollowRedirects(true);
  ArrayList<PackageData> data=(ArrayList<PackageData>)CFGConfig.getConfig(""String_Node_Str"").getProperty(""String_Node_Str"",new ArrayList<PackageData>());
  for (  PackageData pd : data) {
    pd.setSortID(-1);
  }
  CFGConfig.getConfig(""String_Node_Str"").setProperty(""String_Node_Str"",data);
  try {
    br.getPage(""String_Node_Str"" + JDUtilities.getRevision() + ""String_Node_Str""+ System.currentTimeMillis());
    String xml=""String_Node_Str"" + br.getMatch(""String_Node_Str"") + ""String_Node_Str"";
    DocumentBuilderFactory factory;
    InputSource inSource;
    Document doc;
    factory=DocumentBuilderFactory.newInstance();
    factory.setValidating(false);
    inSource=new InputSource(new StringReader(xml));
    doc=factory.newDocumentBuilder().parse(inSource);
    NodeList packages=doc.getFirstChild().getChildNodes();
    PackageData tmp;
    int ii=0;
    all:     for (int i=0; i < packages.getLength(); i++) {
      Node entry=packages.item(i);
      tmp=new PackageData();
      NodeList values=entry.getChildNodes();
      int id=-1;
      for (int t=0; t < values.getLength(); t++) {
        if (values.item(t).getNodeName().equalsIgnoreCase(""String_Node_Str"") && values.item(t).getTextContent().equalsIgnoreCase(""String_Node_Str"")) {
          tmp.setPreselected(true);
        }
        if (values.item(t).getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          id=Integer.parseInt(values.item(t).getTextContent().trim());
          tmp.setId(id);
        }
        tmp.setProperty(values.item(t).getNodeName(),values.item(t).getTextContent());
      }
      if (id < 0)       continue;
      for (      PackageData pd : data) {
        if (pd.getId() == tmp.getId()) {
          ii++;
          pd.setSortID(ii);
          pd.getProperties().putAll(tmp.getProperties());
          continue all;
        }
      }
      if (tmp.isPreselected()) {
        tmp.setSelected(true);
      }
      ii++;
      tmp.setSortID(ii);
      data.add(tmp);
    }
    PACKAGE_DATA=data;
    CFGConfig.getConfig(""String_Node_Str"").save();
    return data;
  }
 catch (  Exception e) {
    return new ArrayList<PackageData>();
  }
}","@SuppressWarnings(""String_Node_Str"") public ArrayList<PackageData> getPackageData(){
  if (PACKAGE_DATA != null)   return PACKAGE_DATA;
  Browser br=new Browser();
  br.setFollowRedirects(true);
  ArrayList<PackageData> data=(ArrayList<PackageData>)CFGConfig.getConfig(""String_Node_Str"").getProperty(""String_Node_Str"",new ArrayList<PackageData>());
  for (  PackageData pd : data) {
    pd.setSortID(-1);
  }
  CFGConfig.getConfig(""String_Node_Str"").setProperty(""String_Node_Str"",data);
  try {
    br.getPage(""String_Node_Str"" + JDUtilities.getRevision() + ""String_Node_Str""+ System.currentTimeMillis());
    String xml=""String_Node_Str"" + br.getMatch(""String_Node_Str"") + ""String_Node_Str"";
    DocumentBuilderFactory factory;
    InputSource inSource;
    Document doc;
    factory=DocumentBuilderFactory.newInstance();
    factory.setValidating(false);
    inSource=new InputSource(new StringReader(xml));
    doc=factory.newDocumentBuilder().parse(inSource);
    NodeList packages=doc.getFirstChild().getChildNodes();
    PackageData tmp;
    int ii=0;
    all:     for (int i=0; i < packages.getLength(); i++) {
      Node entry=packages.item(i);
      tmp=new PackageData();
      NodeList values=entry.getChildNodes();
      int id=-1;
      for (int t=0; t < values.getLength(); t++) {
        if (values.item(t).getNodeName().equalsIgnoreCase(""String_Node_Str"") && values.item(t).getTextContent().equalsIgnoreCase(""String_Node_Str"")) {
          tmp.setPreselected(true);
        }
        if (values.item(t).getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          id=Integer.parseInt(values.item(t).getTextContent().trim());
          tmp.setId(id);
        }
        tmp.setProperty(values.item(t).getNodeName(),values.item(t).getTextContent());
      }
      if (id < 0)       continue;
      for (      PackageData pd : data) {
        if (pd.getId() == tmp.getId()) {
          ii++;
          pd.setSortID(ii);
          pd.getProperties().putAll(tmp.getProperties());
          continue all;
        }
      }
      if (tmp.isPreselected()) {
        tmp.setSelected(true);
      }
      ii++;
      tmp.setSortID(ii);
      data.add(tmp);
    }
    PACKAGE_DATA=data;
    CFGConfig.getConfig(""String_Node_Str"").setProperty(""String_Node_Str"",PACKAGE_DATA);
    CFGConfig.getConfig(""String_Node_Str"").save();
    return data;
  }
 catch (  Exception e) {
    return new ArrayList<PackageData>();
  }
}"
21291,"public void processParameters(String[] input) throws RemoteException {
  boolean addLinksSwitch=false;
  boolean addContainersSwitch=false;
  boolean addPasswordsSwitch=false;
  boolean extractSwitch=false;
  Vector<String> linksToAdd=new Vector<String>();
  Vector<String> containersToAdd=new Vector<String>();
  Vector<String> paths=new Vector<String>();
  long extractTime=0;
  boolean doExtract=false;
  boolean hideGrabber=false;
  boolean startDownload=false;
  JDController controller=JDUtilities.getController();
  for (  String currentArg : input) {
    if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      Server.showCmdHelp();
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=true;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addContainersSwitch=true;
      addLinksSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addContainersSwitch=false;
      addLinksSwitch=false;
      addPasswordsSwitch=true;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      doExtract=true;
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=true;
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      startDownload=true;
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      if (controller.getDownloadStatus() == JDController.DOWNLOAD_RUNNING) {
        controller.fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_STARTSTOP_DOWNLOAD,this));
      }
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      JACController.showDialog(false);
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      JACController.showDialog(true);
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      JDUtilities.getGUI().setGUIStatus(UIInterface.WINDOW_STATUS_MINIMIZED);
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      JDUtilities.getGUI().setGUIStatus(UIInterface.WINDOW_STATUS_FOREGROUND);
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      hideGrabber=true;
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      Reconnecter.waitForNewIP(1);
    }
 else     if (addLinksSwitch && currentArg.charAt(0) != '-') {
      linksToAdd.add(currentArg);
    }
 else     if (addContainersSwitch && currentArg.charAt(0) != '-') {
      if (new File(currentArg).exists()) {
        containersToAdd.add(currentArg);
      }
 else {
        logger.warning(""String_Node_Str"");
      }
    }
 else     if (addPasswordsSwitch && !(currentArg.charAt(0) == '-')) {
      UnrarPassword.addToPasswordlist(currentArg);
      logger.info(""String_Node_Str"" + currentArg);
    }
 else     if (extractSwitch && !(currentArg.charAt(0) == '-')) {
      if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
        logger.info(currentArg + ""String_Node_Str"");
        extractTime=-1;
      }
 else       if (extractTime == -1) {
        if (currentArg.matches(""String_Node_Str"")) {
          extractTime=Integer.parseInt(currentArg);
        }
 else {
          extractTime=0;
        }
      }
 else       if (!currentArg.matches(""String_Node_Str"")) {
        paths.add(currentArg);
      }
    }
 else     if (currentArg.contains(""String_Node_Str"") && !(currentArg.charAt(0) == '-')) {
      addContainersSwitch=false;
      addLinksSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      linksToAdd.add(currentArg);
    }
 else     if (new File(currentArg).exists() && !(currentArg.charAt(0) == '-')) {
      addContainersSwitch=false;
      addLinksSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      containersToAdd.add(currentArg);
    }
 else {
      addContainersSwitch=false;
      addLinksSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
    }
  }
  if (linksToAdd.size() > 0) {
    logger.info(""String_Node_Str"" + linksToAdd.toString());
  }
  if (containersToAdd.size() > 0) {
    logger.info(""String_Node_Str"" + containersToAdd.toString());
  }
  for (int i=0; i < containersToAdd.size(); i++) {
    JDUtilities.getController().loadContainerFile(new File(containersToAdd.get(i)));
  }
  String linksToAddString=""String_Node_Str"";
  for (int i=0; i < linksToAdd.size(); i++) {
    linksToAddString+=linksToAdd.get(i) + ""String_Node_Str"";
  }
  if (!linksToAddString.equals(""String_Node_Str"")) {
    DistributeData distributeData=new DistributeData(linksToAddString,hideGrabber,startDownload);
    distributeData.addControlListener(JDUtilities.getController());
    distributeData.start();
  }
 else   if (startDownload) {
    if (controller.getDownloadStatus() == JDController.DOWNLOAD_NOT_RUNNING) {
      controller.fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_STARTSTOP_DOWNLOAD,this));
    }
  }
  if (doExtract) {
    logger.info(""String_Node_Str"" + paths.toString() + ""String_Node_Str""+ extractTime+ ""String_Node_Str"");
    Server.extract(paths,extractTime,false);
  }
}","public void processParameters(String[] input) throws RemoteException {
  boolean addLinksSwitch=false;
  boolean addContainersSwitch=false;
  boolean addPasswordsSwitch=false;
  boolean extractSwitch=false;
  Vector<String> linksToAdd=new Vector<String>();
  Vector<String> containersToAdd=new Vector<String>();
  Vector<String> paths=new Vector<String>();
  long extractTime=0;
  boolean doExtract=false;
  boolean hideGrabber=false;
  boolean startDownload=false;
  JDController controller=JDUtilities.getController();
  for (  String currentArg : input) {
    if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      Server.showCmdHelp();
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=true;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addContainersSwitch=true;
      addLinksSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addContainersSwitch=false;
      addLinksSwitch=false;
      addPasswordsSwitch=true;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      doExtract=true;
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=true;
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      startDownload=true;
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      if (controller.getDownloadStatus() == JDController.DOWNLOAD_RUNNING) {
        controller.fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_STARTSTOP_DOWNLOAD,this));
      }
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      JACController.showDialog(false);
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      JACController.showDialog(true);
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      JDUtilities.getGUI().setGUIStatus(UIInterface.WINDOW_STATUS_MINIMIZED);
      logger.info(currentArg + ""String_Node_Str"");
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      JDUtilities.getGUI().setGUIStatus(UIInterface.WINDOW_STATUS_FOREGROUND);
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      hideGrabber=true;
    }
 else     if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
      addLinksSwitch=false;
      addContainersSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      logger.info(currentArg + ""String_Node_Str"");
      Reconnecter.waitForNewIP(1);
    }
 else     if (addLinksSwitch && currentArg.charAt(0) != '-') {
      linksToAdd.add(currentArg);
    }
 else     if (addContainersSwitch && currentArg.charAt(0) != '-') {
      if (new File(currentArg).exists()) {
        containersToAdd.add(currentArg);
      }
 else {
        logger.warning(""String_Node_Str"");
      }
    }
 else     if (addPasswordsSwitch && !(currentArg.charAt(0) == '-')) {
      UnrarPassword.addToPasswordlist(currentArg);
      logger.info(""String_Node_Str"" + currentArg);
    }
 else     if (extractSwitch && !(currentArg.charAt(0) == '-')) {
      if (currentArg.equals(""String_Node_Str"") || currentArg.equals(""String_Node_Str"")) {
        logger.info(currentArg + ""String_Node_Str"");
        extractTime=-1;
      }
 else       if (extractTime == -1) {
        if (currentArg.matches(""String_Node_Str"")) {
          extractTime=Integer.parseInt(currentArg);
        }
 else {
          extractTime=0;
        }
      }
 else       if (!currentArg.matches(""String_Node_Str"")) {
        paths.add(currentArg);
      }
    }
 else     if (currentArg.contains(""String_Node_Str"") && !(currentArg.charAt(0) == '-')) {
      addContainersSwitch=false;
      addLinksSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      linksToAdd.add(currentArg);
    }
 else     if (new File(currentArg).exists() && !(currentArg.charAt(0) == '-')) {
      addContainersSwitch=false;
      addLinksSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
      containersToAdd.add(currentArg);
    }
 else {
      addContainersSwitch=false;
      addLinksSwitch=false;
      addPasswordsSwitch=false;
      extractSwitch=false;
    }
  }
  if (linksToAdd.size() > 0) {
    logger.info(""String_Node_Str"" + linksToAdd.toString());
  }
  if (containersToAdd.size() > 0) {
    logger.info(""String_Node_Str"" + containersToAdd.toString());
  }
  for (int i=0; i < containersToAdd.size(); i++) {
    JDUtilities.getController().loadContainerFile(new File(containersToAdd.get(i)));
  }
  String linksToAddString=""String_Node_Str"";
  for (int i=0; i < linksToAdd.size(); i++) {
    linksToAddString+=linksToAdd.get(i) + ""String_Node_Str"";
  }
  linksToAddString=linksToAddString.trim();
  if (!linksToAddString.equals(""String_Node_Str"")) {
    DistributeData distributeData=new DistributeData(linksToAddString,hideGrabber,startDownload);
    distributeData.addControlListener(JDUtilities.getController());
    distributeData.start();
  }
 else   if (startDownload) {
    if (controller.getDownloadStatus() == JDController.DOWNLOAD_NOT_RUNNING) {
      controller.fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_STARTSTOP_DOWNLOAD,this));
    }
  }
  if (doExtract) {
    logger.info(""String_Node_Str"" + paths.toString() + ""String_Node_Str""+ extractTime+ ""String_Node_Str"");
    Server.extract(paths,extractTime,false);
  }
}"
21292,"/** 
 * Sucht alle Links heraus
 * @param data ist der Quelltext einer Html-Datei
 * @param url der Link von dem der Quelltext stammt (um die base automatisch zu setzen)
 * @return Linkliste aus data extrahiert
 */
public static String[] getHttpLinks(String data,String url){
  String[] protocols=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String protocolPattern=""String_Node_Str"";
  for (int i=0; i < protocols.length; i++) {
    protocolPattern+=protocols[i] + (i + 1 == protocols.length ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  url=url == null ? ""String_Node_Str"" : url;
  Matcher m;
  String link;
  String basename=""String_Node_Str"";
  String host=""String_Node_Str"";
  LinkedList<String> set=new LinkedList<String>();
  Pattern[] basePattern=new Pattern[]{Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  for (  Pattern element : basePattern) {
    m=element.matcher(data);
    if (m.find()) {
      url=Encoding.htmlDecode(m.group(1));
      break;
    }
  }
  if (url != null) {
    url=url.replace(""String_Node_Str"",""String_Node_Str"");
    int dot=url.lastIndexOf('/');
    if (dot != -1) {
      basename=url.substring(0,dot + 1);
    }
 else {
      basename=""String_Node_Str"" + url + ""String_Node_Str"";
    }
    dot=url.indexOf('/');
    if (dot != -1) {
      host=""String_Node_Str"" + url.substring(0,dot);
    }
 else {
      host=""String_Node_Str"" + url;
    }
    url=""String_Node_Str"" + url;
  }
 else {
    url=""String_Node_Str"";
  }
  Pattern[] linkAndFormPattern=new Pattern[]{Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  for (  Pattern element : linkAndFormPattern) {
    m=element.matcher(data);
    while (m.find()) {
      link=Encoding.htmlDecode(m.group(1));
      link=link.replaceAll(protocols[0] + ""String_Node_Str"",""String_Node_Str"");
      if (link.length() > 6 && link.substring(0,7).equals(""String_Node_Str"")) {
        ;
      }
 else       if (link.length() > 0) {
        if (link.length() > 2 && link.substring(0,3).equals(""String_Node_Str"")) {
          link=""String_Node_Str"" + link;
        }
        if (link.charAt(0) == '/') {
          link=host + link;
        }
 else         if (link.charAt(0) == '#') {
          link=url + link;
        }
 else {
          link=basename + link;
        }
      }
      if (!set.contains(link)) {
        set.add(link);
      }
    }
  }
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  m=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(data);
  while (m.find()) {
    link=""String_Node_Str"" + m.group(0);
    link=Encoding.htmlDecode(link);
    link=link.replaceAll(protocols[0] + ""String_Node_Str"",""String_Node_Str"");
    if (!set.contains(link)) {
      set.add(link);
    }
  }
  m=Pattern.compile(protocolPattern + ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(data);
  while (m.find()) {
    link=m.group(0);
    link=Encoding.htmlDecode(link);
    link=link.replaceAll(protocols[0] + ""String_Node_Str"",""String_Node_Str"");
    if (!set.contains(link)) {
      set.add(link);
    }
  }
  return set.toArray(new String[set.size()]);
}","/** 
 * Sucht alle Links heraus
 * @param data ist der Quelltext einer Html-Datei
 * @param url der Link von dem der Quelltext stammt (um die base automatisch zu setzen)
 * @return Linkliste aus data extrahiert
 */
public static String[] getHttpLinks(String data,String url){
  data=data.trim();
  String[] protocols=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String protocolPattern=""String_Node_Str"";
  for (int i=0; i < protocols.length; i++) {
    protocolPattern+=protocols[i] + (i + 1 == protocols.length ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  url=url == null ? ""String_Node_Str"" : url;
  Matcher m;
  String link;
  String basename=""String_Node_Str"";
  String host=""String_Node_Str"";
  LinkedList<String> set=new LinkedList<String>();
  Pattern[] basePattern=new Pattern[]{Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  for (  Pattern element : basePattern) {
    m=element.matcher(data);
    if (m.find()) {
      url=Encoding.htmlDecode(m.group(1));
      break;
    }
  }
  if (url != null) {
    url=url.replace(""String_Node_Str"",""String_Node_Str"");
    int dot=url.lastIndexOf('/');
    if (dot != -1) {
      basename=url.substring(0,dot + 1);
    }
 else {
      basename=""String_Node_Str"" + url + ""String_Node_Str"";
    }
    dot=url.indexOf('/');
    if (dot != -1) {
      host=""String_Node_Str"" + url.substring(0,dot);
    }
 else {
      host=""String_Node_Str"" + url;
    }
    url=""String_Node_Str"" + url;
  }
 else {
    url=""String_Node_Str"";
  }
  Pattern[] linkAndFormPattern=new Pattern[]{Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  for (  Pattern element : linkAndFormPattern) {
    m=element.matcher(data);
    while (m.find()) {
      link=Encoding.htmlDecode(m.group(1));
      link=link.replaceAll(protocols[0] + ""String_Node_Str"",""String_Node_Str"");
      if (link.length() > 6 && link.substring(0,7).equals(""String_Node_Str"")) {
        ;
      }
 else       if (link.length() > 0) {
        if (link.length() > 2 && link.substring(0,3).equals(""String_Node_Str"")) {
          link=""String_Node_Str"" + link;
        }
        if (link.charAt(0) == '/') {
          link=host + link;
        }
 else         if (link.charAt(0) == '#') {
          link=url + link;
        }
 else {
          link=basename + link;
        }
      }
      link=link.trim();
      if (!set.contains(link)) {
        set.add(link);
      }
    }
  }
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  m=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(data);
  while (m.find()) {
    link=""String_Node_Str"" + m.group(0);
    link=Encoding.htmlDecode(link);
    link=link.replaceAll(protocols[0] + ""String_Node_Str"",""String_Node_Str"");
    link=link.trim();
    if (!set.contains(link)) {
      set.add(link);
    }
  }
  m=Pattern.compile(protocolPattern + ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(data);
  while (m.find()) {
    link=m.group(0);
    link=Encoding.htmlDecode(link);
    link=link.replaceAll(protocols[0] + ""String_Node_Str"",""String_Node_Str"");
    link=link.trim();
    if (!set.contains(link)) {
      set.add(link);
    }
  }
  return set.toArray(new String[set.size()]);
}"
21293,"private DownloadLink createdl(String parameter,String[] info){
  int size=100;
  String name=null, linkName=null, title=null;
  String[] mirrors=null;
  if (info != null) {
    name=Encoding.htmlDecode(info[1]);
    if (info[0] != null)     size=Integer.parseInt(info[0]);
    title=Encoding.htmlDecode(info[3]);
    mirrors=getMirrors(parameter,info[2]);
  }
  if (title == null)   title=""String_Node_Str"";
  try {
    linkName=((title.length() > 10 ? title.substring(0,10) : title) + ""String_Node_Str"" + name).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim() + ""String_Node_Str"";
  }
 catch (  Exception e) {
  }
  if (linkName == null || parameter.matches(""String_Node_Str"") || parameter.matches(""String_Node_Str"")) {
    size=100;
    linkName=parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  String hostname=getHostname(parameter);
  DownloadLink dlink=new DownloadLink(null,name,getHost(),""String_Node_Str"" + hostname + ""String_Node_Str""+ linkName,true);
  dlink.setName(linkName);
  dlink.setProperty(""String_Node_Str"",parameter);
  dlink.setProperty(""String_Node_Str"",mirrors);
  dlink.addSourcePluginPasswords(passwords);
  if (name != null) {
    dlink.setDownloadSize(size * 1024 * 1024);
  }
  dlink.getLinkStatus().setStatusText(""String_Node_Str"");
  return dlink;
}","private DownloadLink createdl(String parameter,String[] info){
  int size=100;
  String name=null, linkName=null, title=null;
  String[] mirrors=null;
  if (info != null) {
    name=Encoding.htmlDecode(info[1]);
    if (info[0] != null)     size=Integer.parseInt(info[0]);
    title=Encoding.htmlDecode(info[3]);
    mirrors=getMirrors(parameter,info[2]);
  }
  if (title == null)   title=""String_Node_Str"";
  try {
    linkName=((title.length() > 10 ? title.substring(0,10) : title) + ""String_Node_Str"" + name).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim() + ""String_Node_Str"";
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (linkName == null || parameter.matches(""String_Node_Str"") || parameter.matches(""String_Node_Str"")) {
    size=100;
    linkName=parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  String hostname=getHostname(parameter);
  DownloadLink dlink=new DownloadLink(null,name,getHost(),""String_Node_Str"" + hostname + ""String_Node_Str""+ linkName,true);
  dlink.setName(linkName);
  dlink.setProperty(""String_Node_Str"",parameter);
  dlink.setProperty(""String_Node_Str"",mirrors);
  dlink.addSourcePluginPasswords(passwords);
  if (name != null) {
    dlink.setDownloadSize(size * 1024 * 1024);
  }
  dlink.getLinkStatus().setStatusText(""String_Node_Str"");
  return dlink;
}"
21294,"public ArrayList<DownloadLink> decryptIt(CryptedLink param) throws Exception {
  String parameter=param.toString();
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  if (parameter.matches(""String_Node_Str"")) {
    boolean isP=parameter.contains(""String_Node_Str"");
    int catst=getSerienJunkiesCat(isP);
    scatChecked=false;
    int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
    if (sCatNewestDownload == catst) {
      br.getPage(""String_Node_Str"");
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(br + ""String_Node_Str"");
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          break;
        }
      }
      if (name == null) {
        return decryptedLinks;
      }
      br.getPage(parameter);
      name+=""String_Node_Str"";
      String[] bet=null;
      while (bet == null) {
        name=name.substring(0,name.length() - 1);
        if (name.length() == 0) {
          return decryptedLinks;
        }
        try {
          bet=br.getRegex(""String_Node_Str"" + name + ""String_Node_Str"").getMatches()[0];
        }
 catch (        Exception e) {
        }
      }
      lastHtmlCode=br + ""String_Node_Str"";
      String[] links=HTMLParser.getHttpLinks(bet[1],br.getRequest().getUrl().toString());
      if (getPluginConfig().getStringProperty(""String_Node_Str"",mirrorManagement[0]).equals(mirrorManagement[2])) {
        for (        String element : links) {
          DownloadLink dl_link=createDownloadlink(element);
          dl_link.addSourcePluginPasswords(passwords);
          decryptedLinks.add(dl_link);
        }
      }
 else {
        boolean got=false;
        for (        String element : links) {
          DownloadLink dl_link=createDownloadlink(element);
          if (JDUtilities.getPluginForHost(getHostname(element)).getMaxSimultanDownloadNum(dl_link) > 1) {
            dl_link.addSourcePluginPasswords(passwords);
            decryptedLinks.add(dl_link);
            got=true;
            break;
          }
        }
        if (!got) {
          for (          String element : links) {
            DownloadLink dl_link=createDownloadlink(element);
            dl_link.addSourcePluginPasswords(passwords);
            decryptedLinks.add(dl_link);
            break;
          }
        }
      }
      return decryptedLinks;
    }
 else     if (catst == sCatGrabb) {
      String htmlcode=""String_Node_Str"";
      if (isP) {
        br.getPage(parameter);
        htmlcode=br + ""String_Node_Str"";
      }
 else {
        br.getPage(""String_Node_Str"" + cat);
        htmlcode=br + ""String_Node_Str"";
        try {
          int pages=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
          for (int i=2; i < pages + 1; i++) {
            htmlcode+=""String_Node_Str"" + br.getPage(""String_Node_Str"" + cat + ""String_Node_Str""+ i);
          }
        }
 catch (        Exception e) {
        }
      }
      HashMap<String,Integer> mirrors=new HashMap<String,Integer>();
      String[] titles=htmlcode.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      for (      String element : titles) {
        String title=new Regex(element,""String_Node_Str"").getMatch(0);
        String[] sp=element.split(""String_Node_Str"");
        int b=1;
        for (        String element2 : sp) {
          String size=""String_Node_Str"";
          try {
            String[] dsize=new Regex(element2,""String_Node_Str"").getMatches()[0];
            double si=Double.parseDouble(dsize[0].replaceAll(""String_Node_Str"",""String_Node_Str""));
            if (dsize.length > 1 && dsize[1].equalsIgnoreCase(""String_Node_Str"")) {
              si=si * 1024;
            }
            size=""String_Node_Str"" + si;
            size=size.substring(0,size.indexOf(""String_Node_Str""));
          }
 catch (          Exception e) {
          }
          FilePackage fp=new FilePackage();
          fp.setName(title + (b > 1 ? ""String_Node_Str"" + b : ""String_Node_Str""));
          b++;
          fp.setPassword(UnrarPassword.passwordArrayToString(passwords.toArray(new String[passwords.size()])));
          String[][] links=new Regex(element2,""String_Node_Str"").getMatches();
          for (          String[] element3 : links) {
            String[] sp2=element3[1].split(""String_Node_Str"");
            if (getPluginConfig().getStringProperty(""String_Node_Str"",mirrorManagement[0]).equals(mirrorManagement[2])) {
              for (              String bb : sp2) {
                String[] links2=HTMLParser.getHttpLinks(bb,parameter);
                for (                String element4 : links2) {
                  if (canHandle(element4)) {
                    DownloadLink dl=createdl(element4,new String[]{size,element3[0],element3[1],title});
                    dl.setFilePackage(fp);
                    decryptedLinks.add(dl);
                  }
                }
              }
            }
 else {
              boolean isOk=false;
              boolean breakit=false;
              if (getPluginConfig().getStringProperty(""String_Node_Str"",mirrorManagement[0]).equals(mirrorManagement[0])) {
                for (                String bb : sp2) {
                  String[] links2=HTMLParser.getHttpLinks(bb,parameter);
                  for (                  String element4 : links2) {
                    if (canHandle(element4)) {
                      DownloadLink dl=createdl(element4,new String[]{size,element3[0],element3[1],title});
                      if (JDUtilities.getPluginForHost(getHostname(element4)).getMaxSimultanDownloadNum(dl) > 1) {
                        dl.setFilePackage(fp);
                        decryptedLinks.add(dl);
                        breakit=true;
                      }
                    }
                  }
                  if (breakit) {
                    isOk=true;
                    break;
                  }
                }
              }
              if (!isOk) {
                String[] link=null;
                String lastHost=null;
                Integer lastint=Integer.MAX_VALUE;
                out:                 for (                String bb : sp2) {
                  String[] links2=HTMLParser.getHttpLinks(bb,parameter);
                  for (                  String element4 : links2) {
                    if (canHandle(element4)) {
                      String hostn=getHostname(element4);
                      if (!mirrors.containsKey(hostn)) {
                        System.out.println(links2);
                        mirrors.put(hostn,1);
                        link=null;
                        DownloadLink dl=createdl(element4,new String[]{size,element3[0],element3[1],title});
                        dl.setFilePackage(fp);
                        decryptedLinks.add(dl);
                        break out;
                      }
 else {
                        Integer currentInt=mirrors.get(hostn);
                        if (currentInt < lastint) {
                          lastint=currentInt;
                          lastHost=hostn;
                          link=links2;
                        }
                        break;
                      }
                    }
                  }
                }
                if (link != null) {
                  mirrors.put(lastHost,(mirrors.get(lastHost) + 1));
                  for (                  String element4 : link) {
                    DownloadLink dl=createdl(element4,new String[]{size,element3[0],element3[1],title});
                    dl.setFilePackage(fp);
                    decryptedLinks.add(dl);
                    break;
                  }
                }
              }
            }
          }
        }
      }
      return decryptedLinks;
    }
 else {
      return decryptedLinks;
    }
  }
  String[] info=getLinkName(parameter);
  if (info == null) {
    br.getPage(""String_Node_Str"" + parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    lastHtmlCode=br + ""String_Node_Str"";
    info=getLinkName(parameter);
  }
  decryptedLinks.add(createdl(parameter,info));
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param) throws Exception {
  String parameter=param.toString().trim();
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  if (parameter.matches(""String_Node_Str"")) {
    boolean isP=parameter.contains(""String_Node_Str"");
    int catst=getSerienJunkiesCat(isP);
    scatChecked=false;
    int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
    if (sCatNewestDownload == catst) {
      br.getPage(""String_Node_Str"");
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(br + ""String_Node_Str"");
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          break;
        }
      }
      if (name == null) {
        return decryptedLinks;
      }
      br.getPage(parameter);
      name+=""String_Node_Str"";
      String[] bet=null;
      while (bet == null) {
        name=name.substring(0,name.length() - 1);
        if (name.length() == 0) {
          return decryptedLinks;
        }
        try {
          bet=br.getRegex(""String_Node_Str"" + name + ""String_Node_Str"").getMatches()[0];
        }
 catch (        Exception e) {
        }
      }
      lastHtmlCode=br + ""String_Node_Str"";
      String[] links=HTMLParser.getHttpLinks(bet[1],br.getRequest().getUrl().toString());
      if (getPluginConfig().getStringProperty(""String_Node_Str"",mirrorManagement[0]).equals(mirrorManagement[2])) {
        for (        String element : links) {
          DownloadLink dl_link=createDownloadlink(element);
          dl_link.addSourcePluginPasswords(passwords);
          decryptedLinks.add(dl_link);
        }
      }
 else {
        boolean got=false;
        for (        String element : links) {
          DownloadLink dl_link=createDownloadlink(element);
          if (JDUtilities.getPluginForHost(getHostname(element)).getMaxSimultanDownloadNum(dl_link) > 1) {
            dl_link.addSourcePluginPasswords(passwords);
            decryptedLinks.add(dl_link);
            got=true;
            break;
          }
        }
        if (!got) {
          for (          String element : links) {
            DownloadLink dl_link=createDownloadlink(element);
            dl_link.addSourcePluginPasswords(passwords);
            decryptedLinks.add(dl_link);
            break;
          }
        }
      }
      return decryptedLinks;
    }
 else     if (catst == sCatGrabb) {
      String htmlcode=""String_Node_Str"";
      if (isP) {
        br.getPage(parameter);
        htmlcode=br + ""String_Node_Str"";
      }
 else {
        br.getPage(""String_Node_Str"" + cat);
        htmlcode=br + ""String_Node_Str"";
        try {
          int pages=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
          for (int i=2; i < pages + 1; i++) {
            htmlcode+=""String_Node_Str"" + br.getPage(""String_Node_Str"" + cat + ""String_Node_Str""+ i);
          }
        }
 catch (        Exception e) {
        }
      }
      HashMap<String,Integer> mirrors=new HashMap<String,Integer>();
      String[] titles=htmlcode.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      for (      String element : titles) {
        String title=new Regex(element,""String_Node_Str"").getMatch(0);
        String[] sp=element.split(""String_Node_Str"");
        int b=1;
        for (        String element2 : sp) {
          String size=""String_Node_Str"";
          try {
            String[] dsize=new Regex(element2,""String_Node_Str"").getMatches()[0];
            double si=Double.parseDouble(dsize[0].replaceAll(""String_Node_Str"",""String_Node_Str""));
            if (dsize.length > 1 && dsize[1].equalsIgnoreCase(""String_Node_Str"")) {
              si=si * 1024;
            }
            size=""String_Node_Str"" + si;
            size=size.substring(0,size.indexOf(""String_Node_Str""));
          }
 catch (          Exception e) {
          }
          FilePackage fp=new FilePackage();
          fp.setName(title + (b > 1 ? ""String_Node_Str"" + b : ""String_Node_Str""));
          b++;
          fp.setPassword(UnrarPassword.passwordArrayToString(passwords.toArray(new String[passwords.size()])));
          String[][] links=new Regex(element2,""String_Node_Str"").getMatches();
          for (          String[] element3 : links) {
            String[] sp2=element3[1].split(""String_Node_Str"");
            if (getPluginConfig().getStringProperty(""String_Node_Str"",mirrorManagement[0]).equals(mirrorManagement[2])) {
              for (              String bb : sp2) {
                String[] links2=HTMLParser.getHttpLinks(bb,parameter);
                for (                String element4 : links2) {
                  if (canHandle(element4)) {
                    DownloadLink dl=createdl(element4,new String[]{size,element3[0],element3[1],title});
                    dl.setFilePackage(fp);
                    decryptedLinks.add(dl);
                  }
                }
              }
            }
 else {
              boolean isOk=false;
              boolean breakit=false;
              if (getPluginConfig().getStringProperty(""String_Node_Str"",mirrorManagement[0]).equals(mirrorManagement[0])) {
                for (                String bb : sp2) {
                  String[] links2=HTMLParser.getHttpLinks(bb,parameter);
                  for (                  String element4 : links2) {
                    if (canHandle(element4)) {
                      DownloadLink dl=createdl(element4,new String[]{size,element3[0],element3[1],title});
                      if (JDUtilities.getPluginForHost(getHostname(element4)).getMaxSimultanDownloadNum(dl) > 1) {
                        dl.setFilePackage(fp);
                        decryptedLinks.add(dl);
                        breakit=true;
                      }
                    }
                  }
                  if (breakit) {
                    isOk=true;
                    break;
                  }
                }
              }
              if (!isOk) {
                String[] link=null;
                String lastHost=null;
                Integer lastint=Integer.MAX_VALUE;
                out:                 for (                String bb : sp2) {
                  String[] links2=HTMLParser.getHttpLinks(bb,parameter);
                  for (                  String element4 : links2) {
                    if (canHandle(element4)) {
                      String hostn=getHostname(element4);
                      if (!mirrors.containsKey(hostn)) {
                        mirrors.put(hostn,1);
                        link=null;
                        DownloadLink dl=createdl(element4,new String[]{size,element3[0],element3[1],title});
                        dl.setFilePackage(fp);
                        decryptedLinks.add(dl);
                        break out;
                      }
 else {
                        Integer currentInt=mirrors.get(hostn);
                        if (currentInt < lastint) {
                          lastint=currentInt;
                          lastHost=hostn;
                          link=links2;
                        }
                        break;
                      }
                    }
                  }
                }
                if (link != null) {
                  mirrors.put(lastHost,(mirrors.get(lastHost) + 1));
                  for (                  String element4 : link) {
                    DownloadLink dl=createdl(element4,new String[]{size,element3[0],element3[1],title});
                    dl.setFilePackage(fp);
                    decryptedLinks.add(dl);
                    break;
                  }
                }
              }
            }
          }
        }
      }
      return decryptedLinks;
    }
 else {
      return decryptedLinks;
    }
  }
  String[] info=getLinkName(parameter);
  if (info == null) {
    br.getPage(""String_Node_Str"" + parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    lastHtmlCode=br + ""String_Node_Str"";
    info=getLinkName(parameter);
  }
  decryptedLinks.add(createdl(parameter,info));
  return decryptedLinks;
}"
21295,"private String[] getLinkName(String link){
  String[] titles=lastHtmlCode.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  for (  String element : titles) {
    String title=new Regex(element,""String_Node_Str"").getMatch(0);
    String[] sp=element.split(""String_Node_Str"");
    for (    String element2 : sp) {
      String size=new Regex(element2,""String_Node_Str"").getMatch(0);
      String[][] links=new Regex(element2.replaceAll(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").getMatches();
      for (      String[] element3 : links) {
        try {
          if (element3[1].contains(link)) {
            return new String[]{size,element3[0],element3[1],title};
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
  return null;
}","private String[] getLinkName(String link){
  String[] titles=lastHtmlCode.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  for (  String element : titles) {
    String title=new Regex(element,""String_Node_Str"").getMatch(0);
    String[] sp=element.split(""String_Node_Str"");
    for (    String element2 : sp) {
      String size=new Regex(element2,""String_Node_Str"").getMatch(0);
      String[][] links=new Regex(element2.replaceAll(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").getMatches();
      for (      String[] element3 : links) {
        try {
          if (element3[1].toLowerCase().contains(Encoding.UTF8Decode(link).toLowerCase())) {
            return new String[]{size,element3[0],element3[1],title};
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
  return null;
}"
21296,"public void setAGBChecked(Boolean value){
  getPluginConfig().setProperty(AGB_CHECKED,value);
  getPluginConfig().save();
}","public void setAGBChecked(Boolean value){
  super.getPluginConfig().setProperty(AGB_CHECKED,value);
  super.getPluginConfig().save();
}"
21297,"public boolean isAGBChecked(){
  return getPluginConfig().getBooleanProperty(AGB_CHECKED,false);
}","public boolean isAGBChecked(){
  return super.getPluginConfig().getBooleanProperty(AGB_CHECKED,false);
}"
21298,"/** 
 * prüft ob ein Archiv mit einem passwortgeschützt ist, nicht passwortgeschwützt oder passwortgeschützte Dateien hat und gibt die passwortgeschützten Dateien der Größe nach aufsteigend sortiert aus
 * @param file
 * @return HashMap
 */
@SuppressWarnings(""String_Node_Str"") public String[] getProtectedFiles(File file,String pass){
  String[] params=new String[6];
  if (pass == null || pass == ""String_Node_Str"") {
    params[0]=""String_Node_Str"";
  }
 else {
    params[0]=""String_Node_Str"" + pass;
  }
  params[1]=""String_Node_Str"";
  params[2]=""String_Node_Str"";
  params[3]=""String_Node_Str"";
  params[4]=""String_Node_Str"";
  params[5]=file.getName();
  Process p=JUnrar.createProcess(unrar,params,file.getParentFile());
  String str=startInputListenerwithoutprogress(p);
  if (str.indexOf(""String_Node_Str"") != -1) {
    logger.finer(""String_Node_Str"");
    logger.finer(str);
    return FILE_ERROR;
  }
  if (str.indexOf(""String_Node_Str"") != -1) {
    return PASSWORD_PROTECTEDARCHIV;
  }
 else {
    Pattern patternvolumes=Pattern.compile(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matchervolumes=patternvolumes.matcher(str);
    HashMap<String,Long> protectedFiles=new HashMap<String,Long>();
    String namen=""String_Node_Str"";
    while (matchervolumes.find()) {
      String name=matchervolumes.group(1);
      if (!name.contains(System.getProperty(""String_Node_Str""))) {
        filesWithoutFolder++;
      }
      if (name.matches(""String_Node_Str"")) {
        name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        long size=Long.parseLong(matchervolumes.group(2));
        if (!name.equals(namen)) {
          namen=name;
          volumess.add(size);
          if (size > 0) {
            protectedFiles.put(name,size);
          }
        }
      }
 else {
        name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        if (!name.equals(namen)) {
          namen=name;
          volumess.add(Long.parseLong(matchervolumes.group(2)));
        }
      }
    }
    if (volumess.size() == 0) {
      logger.severe(""String_Node_Str"" + file.getName());
      logger.severe(str);
      return FILE_ERROR;
    }
    if (protectedFiles.size() == 0) {
      logger.finer(""String_Node_Str"");
      return NO_PROTECTEDFILE;
    }
    logger.finer(""String_Node_Str"");
    protectedFiles=(HashMap<String,Long>)JUnrar.revSortByValue(protectedFiles);
    Entry<String,Long> entry=protectedFiles.entrySet().iterator().next();
    if (2097152 >= entry.getValue()) {
      extendPasswordSearch=false;
      return new String[]{entry.getKey()};
    }
 else {
      logger.finer(""String_Node_Str"");
      extendPasswordSearch=true;
      for (      Map.Entry<String,Long> ent : protectedFiles.entrySet()) {
        String name=ent.getKey();
        if (isInFilesignatures(name)) {
          return new String[]{name};
        }
      }
      Set<String> set=protectedFiles.keySet();
      return set.toArray(new String[set.size()]);
    }
  }
}","/** 
 * prüft ob ein Archiv mit einem passwortgeschützt ist, nicht passwortgeschwützt oder passwortgeschützte Dateien hat und gibt die passwortgeschützten Dateien der Größe nach aufsteigend sortiert aus
 * @param file
 * @return HashMap
 */
@SuppressWarnings(""String_Node_Str"") public String[] getProtectedFiles(File file,String pass){
  String[] params=new String[6];
  if (pass == null || pass == ""String_Node_Str"") {
    params[0]=""String_Node_Str"";
  }
 else {
    params[0]=""String_Node_Str"" + pass;
  }
  params[1]=""String_Node_Str"";
  params[2]=""String_Node_Str"";
  params[3]=""String_Node_Str"";
  params[4]=""String_Node_Str"";
  params[5]=file.getName();
  Process p=JUnrar.createProcess(unrar,params,file.getParentFile());
  String str=startInputListenerwithoutprogress(p);
  if (str.indexOf(""String_Node_Str"") != -1) {
    logger.finer(""String_Node_Str"");
    logger.finer(str);
    return FILE_ERROR;
  }
  if (str.indexOf(""String_Node_Str"") != -1) {
    return PASSWORD_PROTECTEDARCHIV;
  }
 else {
    Pattern patternvolumes=Pattern.compile(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matchervolumes=patternvolumes.matcher(str);
    HashMap<String,Long> protectedFiles=new HashMap<String,Long>();
    String namen=""String_Node_Str"";
    while (matchervolumes.find()) {
      String name=matchervolumes.group(1);
      if (name.matches(""String_Node_Str"")) {
        name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        long size=Long.parseLong(matchervolumes.group(2));
        if (!name.equals(namen)) {
          if (!name.contains(System.getProperty(""String_Node_Str""))) {
            filesWithoutFolder++;
          }
          namen=name;
          volumess.add(size);
          if (size > 0) {
            protectedFiles.put(name,size);
          }
        }
      }
 else {
        name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        if (!name.equals(namen)) {
          if (!name.contains(System.getProperty(""String_Node_Str""))) {
            filesWithoutFolder++;
          }
          namen=name;
          volumess.add(Long.parseLong(matchervolumes.group(2)));
        }
      }
    }
    if (volumess.size() == 0) {
      logger.severe(""String_Node_Str"" + file.getName());
      logger.severe(str);
      return FILE_ERROR;
    }
    if (protectedFiles.size() == 0) {
      logger.finer(""String_Node_Str"");
      return NO_PROTECTEDFILE;
    }
    logger.finer(""String_Node_Str"");
    protectedFiles=(HashMap<String,Long>)JUnrar.revSortByValue(protectedFiles);
    Entry<String,Long> entry=protectedFiles.entrySet().iterator().next();
    if (2097152 >= entry.getValue()) {
      extendPasswordSearch=false;
      return new String[]{entry.getKey()};
    }
 else {
      logger.finer(""String_Node_Str"");
      extendPasswordSearch=true;
      for (      Map.Entry<String,Long> ent : protectedFiles.entrySet()) {
        String name=ent.getKey();
        if (isInFilesignatures(name)) {
          return new String[]{name};
        }
      }
      Set<String> set=protectedFiles.keySet();
      return set.toArray(new String[set.size()]);
    }
  }
}"
21299,"private String execprozess(File file,String password){
  try {
    LinkedList<String> params=new LinkedList<String>();
    if (password != ""String_Node_Str"") {
      params.add(""String_Node_Str"" + password);
    }
 else {
      params.add(""String_Node_Str"");
    }
    if (overwriteFiles) {
      params.add(""String_Node_Str"");
    }
 else {
      params.add(""String_Node_Str"");
    }
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    File parent;
    boolean b=false;
    if (extractFolder != null && extractFolder.isDirectory()) {
      b=true;
      parent=extractFolder;
      params.add(file.getAbsolutePath());
    }
 else {
      parent=file.getParentFile();
      params.add(file.getName());
    }
    if (autoFolder > 0) {
      if (filesWithoutFolder >= autoFolder) {
        parent=new File(parent,file.getName().replaceFirst(""String_Node_Str"",""String_Node_Str""));
        parent.mkdirs();
      }
    }
    Process p=JUnrar.createProcess(unrar,params.toArray(new String[]{}),parent);
    String str=startInputListener(p,parent);
    if (str == null)     return null;
    if (str.matches(allOk)) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(str);
      if (deleteInfoFile) {
        File infoFiles=new File(file.getParentFile(),file.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        if (infoFiles.exists() && infoFiles.delete()) {
          logger.info(infoFiles.getName() + ""String_Node_Str"");
        }
      }
      if (autoDelete) {
        while (matcher.find()) {
          File delfile;
          if (b) {
            delfile=new File(matcher.group(1));
          }
 else {
            delfile=new File(file.getParentFile(),matcher.group(1));
          }
          if (!delfile.isFile()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
 else           if (!delfile.delete()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
        }
      }
 else       if (b) {
        while (matcher.find()) {
          File ufile=new File(file.getParentFile(),matcher.group(1));
          unpackedlist.add(ufile);
        }
        saveUnpackedList();
      }
      pattern=Pattern.compile(""String_Node_Str"");
      matcher=pattern.matcher(str);
      HashMap<File,String> nfiles=new HashMap<File,String>();
      while (matcher.find()) {
        File f=new File(parent,matcher.group(2));
        nfiles.put(f,null);
        unpackedFiles.add(f);
      }
      JUnrar un=new JUnrar();
      un.files=nfiles;
      un.standardPassword=standardPassword;
      un.autoDelete=autoDelete;
      un.link=link;
      un.unrar=unrar;
      un.autoFolder=autoFolder;
      un.useToextractlist=false;
      un.overwriteFiles=overwriteFiles;
      un.progressInTerminal=progressInTerminal;
      unpackedFiles.addAll(un.unrar());
      Iterator<File> iter=unpackedFiles.iterator();
      while (iter.hasNext()) {
        File file2=(File)iter.next();
        if (!file2.exists()) {
          iter.remove();
        }
      }
    }
    UnrarPassword.pushPasswordToTop(password);
    return str;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","private String execprozess(File file,String password){
  try {
    LinkedList<String> params=new LinkedList<String>();
    if (password != ""String_Node_Str"") {
      params.add(""String_Node_Str"" + password);
    }
 else {
      params.add(""String_Node_Str"");
    }
    if (overwriteFiles) {
      params.add(""String_Node_Str"");
    }
 else {
      params.add(""String_Node_Str"");
    }
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    File parent;
    boolean b=false;
    if (extractFolder != null && extractFolder.isDirectory()) {
      b=true;
      parent=extractFolder;
      params.add(file.getAbsolutePath());
    }
 else {
      parent=file.getParentFile();
      params.add(file.getAbsolutePath());
    }
    if (autoFolder > 0) {
      if (filesWithoutFolder >= autoFolder) {
        b=true;
        parent=new File(parent,file.getName().replaceFirst(""String_Node_Str"",""String_Node_Str""));
        parent.mkdirs();
      }
    }
    Process p=JUnrar.createProcess(unrar,params.toArray(new String[]{}),parent);
    String str=startInputListener(p,parent);
    if (str == null)     return null;
    if (str.matches(allOk)) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(str);
      if (deleteInfoFile) {
        File infoFiles=new File(file.getParentFile(),file.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        if (infoFiles.exists() && infoFiles.delete()) {
          logger.info(infoFiles.getName() + ""String_Node_Str"");
        }
      }
      if (autoDelete) {
        while (matcher.find()) {
          File delfile;
          if (b) {
            delfile=new File(matcher.group(1));
          }
 else {
            delfile=new File(file.getParentFile(),matcher.group(1));
          }
          if (!delfile.isFile()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
 else           if (!delfile.delete()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
        }
      }
 else       if (b) {
        while (matcher.find()) {
          File ufile=new File(parent,matcher.group(1));
          unpackedlist.add(ufile);
        }
        saveUnpackedList();
      }
      pattern=Pattern.compile(""String_Node_Str"");
      matcher=pattern.matcher(str);
      HashMap<File,String> nfiles=new HashMap<File,String>();
      while (matcher.find()) {
        File f=new File(parent,matcher.group(2));
        nfiles.put(f,null);
        unpackedFiles.add(f);
      }
      JUnrar un=new JUnrar();
      un.files=nfiles;
      un.standardPassword=standardPassword;
      un.autoDelete=autoDelete;
      un.link=link;
      un.unrar=unrar;
      un.autoFolder=autoFolder;
      un.useToextractlist=false;
      un.overwriteFiles=overwriteFiles;
      un.progressInTerminal=progressInTerminal;
      unpackedFiles.addAll(un.unrar());
      Iterator<File> iter=unpackedFiles.iterator();
      while (iter.hasNext()) {
        File file2=(File)iter.next();
        if (!file2.exists()) {
          iter.remove();
        }
      }
    }
    UnrarPassword.pushPasswordToTop(password);
    return str;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
21300,"public static boolean doReconnect(){
  if (Reconnecter.waitForRunningRequests() > 0 && LAST_RECONNECT_SUCCESS) {
    return true;
  }
  boolean ipChangeSuccess=false;
  IS_RECONNECTING=true;
  if (Reconnecter.isGlobalDisabled()) {
    if (System.currentTimeMillis() - lastIPUpdate > 1000 * JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(""String_Node_Str"",60 * 10)) {
      ipChangeSuccess=Reconnecter.checkExternalIPChange();
      JDUtilities.getGUI().displayMiniWarning(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),60000);
    }
    if (!ipChangeSuccess) {
      IS_RECONNECTING=false;
      return false;
    }
  }
  ArrayList<DownloadLink> disabled=new ArrayList<DownloadLink>();
  if (!ipChangeSuccess) {
    if (JDUtilities.getController().getForbiddenReconnectDownloadNum() > 0) {
      IS_RECONNECTING=false;
      return false;
    }
    Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_RECONNECT,JDUtilities.getController());
    String type=JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_RECONNECT_TYPE,null);
    if (type == null) {
      IS_RECONNECTING=false;
      logger.severe(""String_Node_Str"");
      return false;
    }
    IS_RECONNECTING=true;
    logger.info(""String_Node_Str"");
    boolean interrupt=JDUtilities.getSubConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",true);
    if (interrupt) {
      JDUtilities.getController().pauseDownloads(true);
      Iterator<FilePackage> iterator=JDUtilities.getController().getPackages().iterator();
      FilePackage fp=null;
      DownloadLink nextDownloadLink;
      while (iterator.hasNext()) {
        fp=iterator.next();
        Iterator<DownloadLink> it2=fp.getDownloadLinks().iterator();
        while (it2.hasNext()) {
          nextDownloadLink=it2.next();
          if (nextDownloadLink.getLinkStatus().hasStatus(LinkStatus.PLUGIN_IN_PROGRESS)) {
            nextDownloadLink.setEnabled(false);
            logger.info(""String_Node_Str"" + nextDownloadLink);
            disabled.add(nextDownloadLink);
          }
        }
      }
    }
    if (type.equals(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
      ipChangeSuccess=new ExternReconnect().interact(null);
    }
 else     if (type.equals(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
      ipChangeSuccess=new BatchReconnect().interact(null);
    }
 else {
      ipChangeSuccess=new HTTPLiveHeader().interact(null);
    }
    if (interrupt) {
      JDUtilities.getController().pauseDownloads(false);
      for (      DownloadLink link : disabled) {
        logger.info(""String_Node_Str"" + link);
        link.setEnabled(true);
      }
    }
    LAST_RECONNECT_SUCCESS=ipChangeSuccess;
    logger.info(""String_Node_Str"" + ipChangeSuccess);
  }
  if (ipChangeSuccess) {
    Reconnecter.resetAllLinks();
  }
  if (ipChangeSuccess) {
    Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,JDUtilities.getController());
  }
  IS_RECONNECTING=false;
  lastIPUpdate=System.currentTimeMillis();
  CURRENT_IP=JDUtilities.getIPAddress();
  RECONNECT_REQUESTS=0;
  return ipChangeSuccess;
}","public static boolean doReconnect(){
  if (Reconnecter.waitForRunningRequests() > 0 && LAST_RECONNECT_SUCCESS) {
    return true;
  }
  boolean ipChangeSuccess=false;
  IS_RECONNECTING=true;
  if (Reconnecter.isGlobalDisabled()) {
    if (System.currentTimeMillis() - lastIPUpdate > 1000 * JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(""String_Node_Str"",60 * 10)) {
      ipChangeSuccess=Reconnecter.checkExternalIPChange();
      JDUtilities.getGUI().displayMiniWarning(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""),60000);
    }
    if (!ipChangeSuccess) {
      IS_RECONNECTING=false;
      return false;
    }
  }
  ArrayList<DownloadLink> disabled=new ArrayList<DownloadLink>();
  if (!ipChangeSuccess) {
    if (JDUtilities.getController().getForbiddenReconnectDownloadNum() > 0) {
      IS_RECONNECTING=false;
      return false;
    }
    Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_RECONNECT,JDUtilities.getController());
    String type=JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_RECONNECT_TYPE,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    if (type == null) {
      IS_RECONNECTING=false;
      logger.severe(""String_Node_Str"");
      return false;
    }
    IS_RECONNECTING=true;
    logger.info(""String_Node_Str"");
    boolean interrupt=JDUtilities.getSubConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",true);
    if (interrupt) {
      JDUtilities.getController().pauseDownloads(true);
      Iterator<FilePackage> iterator=JDUtilities.getController().getPackages().iterator();
      FilePackage fp=null;
      DownloadLink nextDownloadLink;
      while (iterator.hasNext()) {
        fp=iterator.next();
        Iterator<DownloadLink> it2=fp.getDownloadLinks().iterator();
        while (it2.hasNext()) {
          nextDownloadLink=it2.next();
          if (nextDownloadLink.getLinkStatus().hasStatus(LinkStatus.PLUGIN_IN_PROGRESS)) {
            nextDownloadLink.setEnabled(false);
            logger.info(""String_Node_Str"" + nextDownloadLink);
            disabled.add(nextDownloadLink);
          }
        }
      }
    }
    if (type.equals(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
      ipChangeSuccess=new ExternReconnect().interact(null);
    }
 else     if (type.equals(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
      ipChangeSuccess=new BatchReconnect().interact(null);
    }
 else {
      ipChangeSuccess=new HTTPLiveHeader().interact(null);
    }
    if (interrupt) {
      JDUtilities.getController().pauseDownloads(false);
      for (      DownloadLink link : disabled) {
        logger.info(""String_Node_Str"" + link);
        link.setEnabled(true);
      }
    }
    LAST_RECONNECT_SUCCESS=ipChangeSuccess;
    logger.info(""String_Node_Str"" + ipChangeSuccess);
  }
  if (ipChangeSuccess) {
    Reconnecter.resetAllLinks();
  }
  if (ipChangeSuccess) {
    Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,JDUtilities.getController());
  }
  IS_RECONNECTING=false;
  lastIPUpdate=System.currentTimeMillis();
  CURRENT_IP=JDUtilities.getIPAddress();
  RECONNECT_REQUESTS=0;
  return ipChangeSuccess;
}"
21301,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    new Serienjunkies().handleFree(downloadLink);
    return;
  }
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  downloadLink.setUrlDownload(""String_Node_Str"" + Netloadin.getID(downloadLink.getDownloadURL()) + ""String_Node_Str"");
  br.setCookiesExclusive(true);
  br.clearCookies(HOST);
  br.getPage(downloadLink.getDownloadURL());
  checkPassword(downloadLink,linkStatus);
  if (linkStatus.isFailed())   return;
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(FILE_DAMAGED)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (!br.containsHTML(DOWNLOAD_START) || url == null) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.getPage(url);
  if (br.containsHTML(FILE_DAMAGED)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (!br.containsHTML(DOWNLOAD_CAPTCHA)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  String captchaURL=br.getRegex(""String_Node_Str"").getMatch(0);
  Form[] forms=br.getForms();
  Form captchaPost=forms[0];
  captchaPost.action=""String_Node_Str"";
  if (captchaURL == null) {
    if (br.containsHTML(""String_Node_Str"")) {
      linkStatus.addStatus(LinkStatus.ERROR_RETRY);
      return;
    }
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  File file=this.getLocalCaptchaFile(this);
  Browser c=br.cloneBrowser();
  if (!Browser.download(file,c.openGetConnection(captchaURL)) || !file.exists()) {
    logger.severe(""String_Node_Str"" + captchaURL);
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  captchaPost.getVars().put(""String_Node_Str"",this.getCaptchaCode(file,downloadLink));
  br.submitForm(captchaPost);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(FILE_DAMAGED)) {
    logger.warning(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (br.containsHTML(LIMIT_REACHED) || br.containsHTML(DOWNLOAD_LIMIT)) {
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    long waitTime=Long.parseLong(new Regex(br.getRequest().getHtmlCode(),DOWNLOAD_WAIT_TIME).getMatch(0));
    waitTime=waitTime * 10L;
    linkStatus.setValue(waitTime);
    return;
  }
  if (br.containsHTML(CAPTCHA_WRONG)) {
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  String finalURL=br.getRegex(NEW_HOST_URL).getMatch(0);
  sleep(20000,downloadLink);
  dl=new RAFDownload(this,downloadLink,br.openGetConnection(finalURL));
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    new Serienjunkies().handleFree(downloadLink);
    return;
  }
  br.setDebug(true);
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  downloadLink.setUrlDownload(""String_Node_Str"" + Netloadin.getID(downloadLink.getDownloadURL()) + ""String_Node_Str"");
  br.setCookiesExclusive(true);
  br.clearCookies(HOST);
  br.getPage(downloadLink.getDownloadURL());
  checkPassword(downloadLink,linkStatus);
  if (linkStatus.isFailed())   return;
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(FILE_DAMAGED)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (!br.containsHTML(DOWNLOAD_START) || url == null) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.getPage(url);
  if (br.containsHTML(FILE_DAMAGED)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (!br.containsHTML(DOWNLOAD_CAPTCHA)) {
    linkStatus.setErrorMessage(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  String captchaURL=br.getRegex(""String_Node_Str"").getMatch(0);
  Form[] forms=br.getForms();
  Form captchaPost=forms[0];
  captchaPost.action=""String_Node_Str"";
  if (captchaURL == null) {
    if (br.containsHTML(""String_Node_Str"")) {
      linkStatus.addStatus(LinkStatus.ERROR_RETRY);
      return;
    }
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    return;
  }
  File file=this.getLocalCaptchaFile(this);
  Browser c=br.cloneBrowser();
  if (!Browser.download(file,c.openGetConnection(captchaURL)) || !file.exists()) {
    logger.severe(""String_Node_Str"" + captchaURL);
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  captchaPost.getVars().put(""String_Node_Str"",this.getCaptchaCode(file,downloadLink));
  br.submitForm(captchaPost);
  if (br.containsHTML(FILE_NOT_FOUND)) {
    linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
    return;
  }
  if (br.containsHTML(FILE_DAMAGED)) {
    logger.warning(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(20 * 60 * 1000l);
    return;
  }
  if (br.containsHTML(LIMIT_REACHED) || br.containsHTML(DOWNLOAD_LIMIT)) {
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    long waitTime=Long.parseLong(new Regex(br.getRequest().getHtmlCode(),DOWNLOAD_WAIT_TIME).getMatch(0));
    waitTime=waitTime * 10L;
    linkStatus.setValue(waitTime);
    return;
  }
  if (br.containsHTML(CAPTCHA_WRONG)) {
    linkStatus.addStatus(LinkStatus.ERROR_CAPTCHA);
    return;
  }
  String finalURL=br.getRegex(NEW_HOST_URL).getMatch(0);
  sleep(20000,downloadLink);
  dl=new RAFDownload(this,downloadLink,br.openGetConnection(finalURL));
  dl.startDownload();
}"
21302,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    new Serienjunkies().handleFree(downloadLink);
    return;
  }
  String user=account.getUser();
  String pass=account.getPass();
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  downloadLink.setUrlDownload(""String_Node_Str"" + Netloadin.getID(downloadLink.getDownloadURL()) + ""String_Node_Str"");
  br.setFollowRedirects(false);
  br.getPage(""String_Node_Str"" + HOST);
  br.postPage(""String_Node_Str"" + HOST + ""String_Node_Str"",""String_Node_Str"" + user + ""String_Node_Str""+ pass+ ""String_Node_Str"");
  if (br.getRedirectLocation() == null) {
    linkStatus.addStatus(LinkStatus.ERROR_PREMIUM);
    return;
  }
  br.getPage(downloadLink.getDownloadURL());
  HTTPConnection con;
  if (br.getRedirectLocation() == null) {
    checkPassword(downloadLink,linkStatus);
    if (linkStatus.isFailed())     return;
    if (br.containsHTML(FILE_NOT_FOUND)) {
      linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
      return;
    }
    if (br.containsHTML(FILE_DAMAGED)) {
      linkStatus.setErrorMessage(""String_Node_Str"");
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setValue(20 * 60 * 1000l);
      return;
    }
    String url=br.getRedirectLocation();
    if (url == null)     url=br.getRegex(""String_Node_Str"").getMatch(0);
    if (url == null) {
      logger.severe(""String_Node_Str"");
      linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
      return;
    }
    con=br.openGetConnection(url);
    for (int i=0; i < 10 && (!con.isOK()); i++) {
      try {
        con=br.openGetConnection(url);
      }
 catch (      Exception e) {
        try {
          Thread.sleep(150);
        }
 catch (        InterruptedException e2) {
          e2.printStackTrace();
        }
      }
    }
  }
 else {
    con=br.openGetConnection(null);
  }
  sleep(100,downloadLink);
  dl=new RAFDownload(this,downloadLink,con);
  dl.setResume(true);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  dl.setLoadPreBytes(1);
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  if (downloadLink.getDownloadURL().matches(""String_Node_Str"")) {
    new Serienjunkies().handleFree(downloadLink);
    return;
  }
  String user=account.getUser();
  String pass=account.getPass();
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  downloadLink.setUrlDownload(""String_Node_Str"" + Netloadin.getID(downloadLink.getDownloadURL()) + ""String_Node_Str"");
  br.setDebug(true);
  br.setFollowRedirects(false);
  br.postPage(""String_Node_Str"" + HOST + ""String_Node_Str"",""String_Node_Str"" + user + ""String_Node_Str""+ pass+ ""String_Node_Str"");
  if (br.getRedirectLocation() == null) {
    linkStatus.addStatus(LinkStatus.ERROR_PREMIUM);
    return;
  }
  br.getPage(downloadLink.getDownloadURL());
  HTTPConnection con;
  if (br.getRedirectLocation() == null) {
    checkPassword(downloadLink,linkStatus);
    if (linkStatus.isFailed())     return;
    if (br.containsHTML(FILE_NOT_FOUND)) {
      linkStatus.addStatus(LinkStatus.ERROR_FILE_NOT_FOUND);
      return;
    }
    if (br.containsHTML(FILE_DAMAGED)) {
      linkStatus.setErrorMessage(""String_Node_Str"");
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setValue(20 * 60 * 1000l);
      return;
    }
    String url=br.getRedirectLocation();
    if (url == null)     url=br.getRegex(""String_Node_Str"").getMatch(0);
    if (url == null) {
      logger.severe(""String_Node_Str"");
      linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
      return;
    }
    con=br.openGetConnection(url);
    for (int i=0; i < 10 && (!con.isOK()); i++) {
      try {
        con=br.openGetConnection(url);
      }
 catch (      Exception e) {
        try {
          Thread.sleep(150);
        }
 catch (        InterruptedException e2) {
          e2.printStackTrace();
        }
      }
    }
  }
 else {
    con=br.openGetConnection(null);
  }
  sleep(100,downloadLink);
  dl=new RAFDownload(this,downloadLink,con);
  dl.setResume(true);
  dl.setChunkNum(JDUtilities.getSubConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_CHUNKS,2));
  dl.setLoadPreBytes(1);
  dl.startDownload();
}"
21303,"public void run0(){
  logger.finer(""String_Node_Str"" + getID() + ""String_Node_Str""+ startByte+ ""String_Node_Str""+ endByte);
  if (startByte >= endByte && endByte > 0 || startByte >= getFileSize() && endByte > 0) {
    return;
  }
  if (chunkNum > 1) {
    if (getPreBytes(this) > 0) {
      loadPreBytes();
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + startByte + ""String_Node_Str""+ endByte);
      }
    }
    connection=copyConnection(connection);
    if (connection == null) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
  }
 else   if (startByte > 0) {
    connection=copyConnection(connection);
    if (connection == null) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
    if (startByte + getPreBytes(this) > 0 && (connection.getHeaderField(""String_Node_Str"") == null || connection.getHeaderField(""String_Node_Str"").length() == 0)) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
  }
  if (startByte + getPreBytes(this) > 0) {
    String[][] range=new Regex(connection.getHeaderField(""String_Node_Str""),""String_Node_Str"").getMatches();
    if (speedDebug) {
      logger.finer(""String_Node_Str"" + connection.getHeaderField(""String_Node_Str""));
    }
    if (range == null && chunkNum > 1) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + connection.getHeaderField(""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this) + connection.getHeaderField(""String_Node_Str"")+ ""String_Node_Str""+ connection.getHeaderField(""String_Node_Str""));
      return;
    }
 else     if (range != null) {
      long gotSB=JDUtilities.filterLong(range[0][0]);
      long gotEB=JDUtilities.filterLong(range[0][1]);
      if (gotSB != startByte + (getPreBytes(this) > 0 ? getPreBytes(this) : 0)) {
        logger.severe(""String_Node_Str"" + range[0] + ""String_Node_Str""+ range[1]+ ""String_Node_Str""+ (startByte + (getPreBytes(this) > 0 ? getPreBytes(this) : 0)));
      }
      if (endByte <= 0) {
        endByte=gotEB;
      }
 else {
        if (gotEB == endByte) {
          logger.finer(""String_Node_Str"");
        }
 else         if (gotEB == endByte + 1) {
          logger.finer(""String_Node_Str"");
        }
        if (gotEB < endByte) {
          logger.severe(""String_Node_Str"" + range[0] + ""String_Node_Str""+ range[1]+ ""String_Node_Str""+ endByte);
        }
        if (gotEB > endByte + 1) {
          logger.warning(""String_Node_Str"" + endByte + ""String_Node_Str""+ gotEB);
        }
        endByte=Math.min(endByte,gotEB);
      }
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + startByte + ""String_Node_Str""+ endByte);
      }
    }
 else {
      endByte=connection.getContentLength() - 1;
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + endByte);
      }
    }
  }
  if (endByte <= 0) {
    endByte=connection.getContentLength() - 1;
    if (speedDebug) {
      logger.finer(""String_Node_Str"" + endByte);
    }
  }
  if (isInterrupted() || downloadLink.isAborted()) {
    logger.severe(""String_Node_Str"");
  }
  addChunksDownloading(+1);
  download();
  bytesPerSecond=0;
  desiredBps=0;
  addChunksDownloading(-1);
  if (isInterrupted() || downloadLink.isAborted()) {
    logger.severe(""String_Node_Str"");
  }
  logger.finer(""String_Node_Str"" + chunks.indexOf(this) + ""String_Node_Str""+ getBytesLoaded()+ ""String_Node_Str"");
}","public void run0(){
  logger.finer(""String_Node_Str"" + getID() + ""String_Node_Str""+ startByte+ ""String_Node_Str""+ endByte);
  if (startByte >= endByte && endByte > 0 || startByte >= getFileSize() && endByte > 0) {
    return;
  }
  if (chunkNum > 1) {
    if (getPreBytes(this) > 0) {
      loadPreBytes();
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + startByte + ""String_Node_Str""+ endByte);
      }
    }
    connection=copyConnection(connection);
    if (connection.getContentLength() == startByte) {
      return;
    }
    if (connection == null) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
  }
 else   if (startByte > 0) {
    connection=copyConnection(connection);
    if (connection.getContentLength() == startByte) {
      return;
    }
    if (connection == null) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
    if (startByte + getPreBytes(this) > 0 && (connection.getHeaderField(""String_Node_Str"") == null || connection.getHeaderField(""String_Node_Str"").length() == 0)) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this));
      return;
    }
  }
  if (startByte + getPreBytes(this) > 0) {
    String[][] range=new Regex(connection.getHeaderField(""String_Node_Str""),""String_Node_Str"").getMatches();
    if (speedDebug) {
      logger.finer(""String_Node_Str"" + connection.getHeaderField(""String_Node_Str""));
    }
    if (range == null && chunkNum > 1) {
      error(LinkStatus.ERROR_DOWNLOAD_FAILED,JDLocale.L(""String_Node_Str"",""String_Node_Str"") + connection.getHeaderField(""String_Node_Str""));
      logger.severe(""String_Node_Str"" + chunks.indexOf(this) + connection.getHeaderField(""String_Node_Str"")+ ""String_Node_Str""+ connection.getHeaderField(""String_Node_Str""));
      return;
    }
 else     if (range != null) {
      long gotSB=JDUtilities.filterLong(range[0][0]);
      long gotEB=JDUtilities.filterLong(range[0][1]);
      if (gotSB != startByte + (getPreBytes(this) > 0 ? getPreBytes(this) : 0)) {
        logger.severe(""String_Node_Str"" + range[0] + ""String_Node_Str""+ range[1]+ ""String_Node_Str""+ (startByte + (getPreBytes(this) > 0 ? getPreBytes(this) : 0)));
      }
      if (endByte <= 0) {
        endByte=gotEB;
      }
 else {
        if (gotEB == endByte) {
          logger.finer(""String_Node_Str"");
        }
 else         if (gotEB == endByte + 1) {
          logger.finer(""String_Node_Str"");
        }
        if (gotEB < endByte) {
          logger.severe(""String_Node_Str"" + range[0] + ""String_Node_Str""+ range[1]+ ""String_Node_Str""+ endByte);
        }
        if (gotEB > endByte + 1) {
          logger.warning(""String_Node_Str"" + endByte + ""String_Node_Str""+ gotEB);
        }
        endByte=Math.min(endByte,gotEB);
      }
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + startByte + ""String_Node_Str""+ endByte);
      }
    }
 else {
      endByte=connection.getContentLength() - 1;
      if (speedDebug) {
        logger.finer(""String_Node_Str"" + endByte);
      }
    }
  }
  if (endByte <= 0) {
    endByte=connection.getContentLength() - 1;
    if (speedDebug) {
      logger.finer(""String_Node_Str"" + endByte);
    }
  }
  if (isInterrupted() || downloadLink.isAborted()) {
    logger.severe(""String_Node_Str"");
  }
  addChunksDownloading(+1);
  download();
  bytesPerSecond=0;
  desiredBps=0;
  addChunksDownloading(-1);
  if (isInterrupted() || downloadLink.isAborted()) {
    logger.severe(""String_Node_Str"");
  }
  logger.finer(""String_Node_Str"" + chunks.indexOf(this) + ""String_Node_Str""+ getBytesLoaded()+ ""String_Node_Str"");
}"
21304,"/** 
 * gibt das interne properties objekt zurück indem die Plugineinstellungen gespeichert werden
 * @return internes property objekt
 */
public SubConfiguration getPluginConfig(){
  if (!JDUtilities.getResourceFile(""String_Node_Str"" + getPluginName() + ""String_Node_Str"").exists()) {
    SubConfiguration cfg=JDUtilities.getSubConfig(getPluginName());
    if (JDUtilities.getConfiguration().getProperty(""String_Node_Str"" + getPluginName()) != null) {
      cfg.setProperties(((Property)JDUtilities.getConfiguration().getProperty(""String_Node_Str"" + getPluginName())).getProperties());
      cfg.save();
      return cfg;
    }
    return JDUtilities.getSubConfig(getPluginName());
  }
 else {
    return JDUtilities.getSubConfig(getPluginName());
  }
}","/** 
 * p gibt das interne properties objekt zurück indem die Plugineinstellungen gespeichert werden
 * @return internes property objekt
 */
public SubConfiguration getPluginConfig(){
  SubConfiguration cfg=JDUtilities.getSubConfig(getPluginName());
  if (cfg.getCount() <= 1) {
    if (JDUtilities.getConfiguration().getProperty(""String_Node_Str"" + getPluginName()) != null) {
      cfg.setProperties(((Property)JDUtilities.getConfiguration().getProperty(""String_Node_Str"" + getPluginName())).getProperties());
      cfg.save();
      return cfg;
    }
  }
  return cfg;
}"
21305,"public void handle0(DownloadLink downloadLink) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  String link=(String)downloadLink.getProperty(""String_Node_Str"");
  String[] mirrors=(String[])downloadLink.getProperty(""String_Node_Str"");
  int c=0;
  while (active) {
    if (c++ == 120)     break;
    try {
      downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  active=true;
  downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
  downloadLink.requestGuiUpdate();
  ArrayList<DownloadLink> dls=getDLinks(link);
  if (dls.size() < 1) {
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    linkStatus.setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    logger.warning(""String_Node_Str"");
    active=false;
    return;
  }
  FilePackage fp=downloadLink.getFilePackage();
  int index=fp.indexOf(downloadLink);
  fp.remove(downloadLink);
  Vector<Integer> down=new Vector<Integer>();
  Vector<DownloadLink> ret=new Vector<DownloadLink>();
  for (int i=dls.size() - 1; i >= 0; i--) {
    DistributeData distributeData=new DistributeData(dls.get(i).getDownloadURL());
    Vector<DownloadLink> links=distributeData.findLinks();
    Iterator<DownloadLink> it2=links.iterator();
    boolean online=false;
    while (it2.hasNext()) {
      DownloadLink downloadLink3=(DownloadLink)it2.next();
      if (downloadLink3.isAvailable()) {
        fp.add(index,downloadLink3);
        online=true;
      }
 else {
        down.add(i);
      }
    }
    if (online) {
      ret.addAll(links);
    }
  }
  if (mirrors != null) {
    for (    String element : mirrors) {
      if (down.size() > 0) {
        try {
          dls=getDLinks(element);
          Iterator<Integer> iter=down.iterator();
          while (iter.hasNext()) {
            Integer integer=(Integer)iter.next();
            DistributeData distributeData=new DistributeData(dls.get(down.get(integer)).getDownloadURL());
            Vector<DownloadLink> links=distributeData.findLinks();
            Iterator<DownloadLink> it2=links.iterator();
            boolean online=false;
            while (it2.hasNext()) {
              DownloadLink downloadLink3=(DownloadLink)it2.next();
              if (downloadLink3.isAvailable()) {
                fp.add(index,downloadLink3);
                online=true;
                iter.remove();
              }
            }
            if (online) {
              ret.addAll(links);
            }
          }
        }
 catch (        Exception e) {
        }
      }
 else {
        break;
      }
    }
  }
  if (down.size() > 0) {
    fp.add(downloadLink);
    linkStatus.addStatus(LinkStatus.ERROR_FATAL);
    linkStatus.setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    active=false;
    return;
  }
  active=false;
}","public void handle0(DownloadLink downloadLink) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  String link=(String)downloadLink.getProperty(""String_Node_Str"");
  String[] mirrors=(String[])downloadLink.getProperty(""String_Node_Str"");
  int c=0;
  while (active) {
    if (c++ == 120)     break;
    try {
      downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  active=true;
  downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
  downloadLink.requestGuiUpdate();
  ArrayList<DownloadLink> dls=getDLinks(link);
  if (dls.size() < 1) {
    linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFEKT);
    linkStatus.setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    logger.warning(""String_Node_Str"");
    active=false;
    return;
  }
  FilePackage fp=downloadLink.getFilePackage();
  int index=fp.indexOf(downloadLink);
  fp.remove(downloadLink);
  Vector<Integer> down=new Vector<Integer>();
  Vector<DownloadLink> ret=new Vector<DownloadLink>();
  for (int i=dls.size() - 1; i >= 0; i--) {
    DistributeData distributeData=new DistributeData(dls.get(i).getDownloadURL());
    Vector<DownloadLink> links=distributeData.findLinks();
    Iterator<DownloadLink> it2=links.iterator();
    boolean online=false;
    while (it2.hasNext()) {
      DownloadLink downloadLink3=(DownloadLink)it2.next();
      if (downloadLink3.isAvailable()) {
        fp.add(index,downloadLink3);
        online=true;
      }
 else {
        down.add(i);
      }
    }
    if (online) {
      ret.addAll(links);
    }
  }
  if (mirrors != null) {
    for (    String element : mirrors) {
      if (down.size() > 0) {
        try {
          dls=getDLinks(element);
          Iterator<Integer> iter=down.iterator();
          while (iter.hasNext()) {
            Integer integer=(Integer)iter.next();
            DistributeData distributeData=new DistributeData(dls.get(integer).getDownloadURL());
            Vector<DownloadLink> links=distributeData.findLinks();
            Iterator<DownloadLink> it2=links.iterator();
            boolean online=false;
            while (it2.hasNext()) {
              DownloadLink downloadLink3=(DownloadLink)it2.next();
              if (downloadLink3.isAvailable()) {
                fp.add(index,downloadLink3);
                online=true;
                iter.remove();
              }
            }
            if (online) {
              ret.addAll(links);
            }
          }
        }
 catch (        Exception e) {
        }
      }
 else {
        break;
      }
    }
  }
  if (down.size() > 0) {
    fp.add(downloadLink);
    linkStatus.addStatus(LinkStatus.ERROR_FATAL);
    linkStatus.setErrorMessage(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    active=false;
    return;
  }
  active=false;
}"
21306,"private String EinzelLinks(String url){
  String links=""String_Node_Str"";
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str"")) {
    url=""String_Node_Str"" + url;
  }
  try {
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    RequestInfo reqinfo=HTTP.getRequest(new URL(url));
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,false);
        }
        String captchaAdress=""String_Node_Str"" + matcher.group(2);
        captchaFile=Plugin.getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=Browser.download(captchaFile,captchaAdress);
        logger.info(""String_Node_Str"" + fileDownloaded);
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=HTTP.getRequest(new URL(url));
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=JDUtilities.getCaptcha(this,""String_Node_Str"",captchaFile,false);
        reqinfo=HTTP.postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,true);
          if (useUserinputIfCaptchaUnknown() && getCaptchaDetectionID() == Plugin.CAPTCHA_USER_INPUT && getLastCaptcha() != null && getLastCaptcha().getLetterComperators() != null) {
            LetterComperator[] lcs=getLastCaptcha().getLetterComperators();
            getLastCaptcha().setCorrectcaptchaCode(capTxt.trim());
            if (lcs.length == capTxt.trim().length()) {
              for (int i=0; i < capTxt.length(); i++) {
                if (lcs[i] != null && lcs[i].getDecodedValue() != null && capTxt.substring(i,i + 1).equalsIgnoreCase(lcs[i].getDecodedValue()) && lcs[i].getValityPercent() < 30.0) {
                  logger.severe(""String_Node_Str"" + i + ""String_Node_Str""+ lcs[i].getDecodedValue()+ ""String_Node_Str""+ lcs[i].getValityPercent()+ ""String_Node_Str""+ capTxt.substring(i,i + 1));
                }
 else {
                  logger.severe(""String_Node_Str"" + i + ""String_Node_Str""+ lcs[i].getDecodedValue()+ ""String_Node_Str""+ lcs[i].getValityPercent()+ ""String_Node_Str""+ capTxt.substring(i,i + 1));
                  final String character=capTxt.substring(i,i + 1);
                  logger.info(""String_Node_Str"");
                  Letter letter=lcs[i].getA();
                  String captchaHash=UTILITIES.getLocalHash(captchaFile);
                  letter.setSourcehash(captchaHash);
                  letter.setOwner(getLastCaptcha().owner);
                  letter.setDecodedValue(character);
                  getLastCaptcha().owner.letterDB.add(letter);
                  getLastCaptcha().owner.saveMTHFile();
                }
              }
            }
 else {
              logger.info(""String_Node_Str"");
            }
          }
        }
        break;
      }
    }
    links=reqinfo.getLocation();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}","private String EinzelLinks(String url){
  String links=""String_Node_Str"";
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str"")) {
    url=""String_Node_Str"" + url;
  }
  try {
    if (!url.matches(""String_Node_Str"")) {
      url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
      url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    RequestInfo reqinfo=HTTP.getRequest(new URL(url));
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,false);
        }
        String captchaAdress=""String_Node_Str"" + matcher.group(2);
        captchaFile=Plugin.getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=Browser.download(captchaFile,captchaAdress);
        logger.info(""String_Node_Str"" + fileDownloaded);
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=HTTP.getRequest(new URL(url));
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=JDUtilities.getCaptcha(this,""String_Node_Str"",captchaFile,false);
        reqinfo=HTTP.postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,true);
          if (useUserinputIfCaptchaUnknown() && getCaptchaDetectionID() == Plugin.CAPTCHA_USER_INPUT && getLastCaptcha() != null && getLastCaptcha().getLetterComperators() != null) {
            LetterComperator[] lcs=getLastCaptcha().getLetterComperators();
            getLastCaptcha().setCorrectcaptchaCode(capTxt.trim());
            if (lcs.length == capTxt.trim().length()) {
              for (int i=0; i < capTxt.length(); i++) {
                if (lcs[i] != null && lcs[i].getDecodedValue() != null && capTxt.substring(i,i + 1).equalsIgnoreCase(lcs[i].getDecodedValue()) && lcs[i].getValityPercent() < 30.0) {
                  logger.severe(""String_Node_Str"" + i + ""String_Node_Str""+ lcs[i].getDecodedValue()+ ""String_Node_Str""+ lcs[i].getValityPercent()+ ""String_Node_Str""+ capTxt.substring(i,i + 1));
                }
 else {
                  logger.severe(""String_Node_Str"" + i + ""String_Node_Str""+ lcs[i].getDecodedValue()+ ""String_Node_Str""+ lcs[i].getValityPercent()+ ""String_Node_Str""+ capTxt.substring(i,i + 1));
                  final String character=capTxt.substring(i,i + 1);
                  logger.info(""String_Node_Str"");
                  Letter letter=lcs[i].getA();
                  String captchaHash=UTILITIES.getLocalHash(captchaFile);
                  letter.setSourcehash(captchaHash);
                  letter.setOwner(getLastCaptcha().owner);
                  letter.setDecodedValue(character);
                  getLastCaptcha().owner.letterDB.add(letter);
                  getLastCaptcha().owner.saveMTHFile();
                }
              }
            }
 else {
              logger.info(""String_Node_Str"");
            }
          }
        }
        break;
      }
    }
    links=reqinfo.getLocation();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}"
21307,"public JHelpDialog(JFrame frame,final String title,String html,final int countdown){
  super(frame);
  parentFrame=frame;
  setLayout(new GridBagLayout());
  this.setModal(false);
  setBtn1(new JButton(""String_Node_Str""));
  setBtn2(new JButton(""String_Node_Str""));
  setBtn3(new JButton(""String_Node_Str""));
  btn4=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  getBtn1().addActionListener(this);
  getBtn2().addActionListener(this);
  getBtn3().addActionListener(this);
  btn4.addActionListener(this);
  setTitle(title);
  htmlArea=new JTextPane();
  htmlArea.setEditable(false);
  htmlArea.setContentType(""String_Node_Str"");
  htmlArea.setText(html);
  htmlArea.setOpaque(false);
  htmlArea.requestFocusInWindow();
  setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
  Icon imageIcon=new ImageIcon(JDUtilities.getImage(JDTheme.V(""String_Node_Str"")));
  JDUtilities.addToGridBag(this,new JLabel(imageIcon),0,0,1,1,0,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHWEST);
  JDUtilities.addToGridBag(this,htmlArea,1,0,3,1,1,1,insets,GridBagConstraints.BOTH,GridBagConstraints.NORTHWEST);
  JDUtilities.addToGridBag(this,getBtn1(),2,1,1,1,1,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHEAST);
  JDUtilities.addToGridBag(this,getBtn2(),3,1,1,1,0,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHEAST);
  JDUtilities.addToGridBag(this,getBtn3(),4,1,1,1,0,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHEAST);
  if (countdown > 0) {
    JDUtilities.addToGridBag(this,btn4,1,1,1,1,0,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHEAST);
    countdownThread=new Thread(){
      @Override public void run(){
        int c=countdown;
        while (--c >= 0 && stopTimer == false) {
          if (countdownThread == null)           return;
          setTitle(title + ""String_Node_Str"" + JDUtilities.formatSeconds(c)+ ""String_Node_Str"");
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
          }
          if (!isVisible())           return;
        }
        if (stopTimer == false) {
          dispose();
        }
 else {
          setTitle(title);
        }
      }
    }
;
    countdownThread.start();
  }
  pack();
  getRootPane().setDefaultButton(getBtn1());
  setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
}","public JHelpDialog(JFrame frame,final String title,String html,final int countdown){
  super(frame);
  parentFrame=frame;
  setLayout(new GridBagLayout());
  this.setModal(false);
  setBtn1(new JButton(""String_Node_Str""));
  setBtn2(new JButton(""String_Node_Str""));
  setBtn3(new JButton(""String_Node_Str""));
  btn4=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  getBtn1().addActionListener(this);
  getBtn2().addActionListener(this);
  getBtn3().addActionListener(this);
  btn4.addActionListener(this);
  setTitle(title);
  htmlArea=new JTextPane();
  htmlArea.setEditable(false);
  htmlArea.setContentType(""String_Node_Str"");
  htmlArea.setText(html);
  htmlArea.setOpaque(false);
  htmlArea.requestFocusInWindow();
  setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
  Icon imageIcon=new ImageIcon(JDUtilities.getImage(JDTheme.V(""String_Node_Str"")));
  JDUtilities.addToGridBag(this,new JLabel(imageIcon),0,0,1,1,0,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHWEST);
  JDUtilities.addToGridBag(this,htmlArea,1,0,3,1,1,1,insets,GridBagConstraints.BOTH,GridBagConstraints.NORTHWEST);
  JDUtilities.addToGridBag(this,getBtn1(),2,1,1,1,1,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHEAST);
  JDUtilities.addToGridBag(this,getBtn2(),3,1,1,1,0,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHEAST);
  JDUtilities.addToGridBag(this,getBtn3(),4,1,1,1,0,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHEAST);
  if (countdown > 0) {
    JDUtilities.addToGridBag(this,btn4,1,1,1,1,0,0,insets,GridBagConstraints.NONE,GridBagConstraints.NORTHEAST);
    countdownThread=new Thread(){
      @Override public void run(){
        int c=countdown;
        while (--c >= 0 && stopTimer == false) {
          if (countdownThread == null)           return;
          setTitle(title + ""String_Node_Str"" + JDUtilities.formatSeconds(c)+ ""String_Node_Str"");
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
          }
          if (!isVisible())           return;
        }
        if (stopTimer == false) {
          dispose();
        }
 else {
          setTitle(title);
        }
      }
    }
;
    countdownThread.start();
  }
  pack();
  getRootPane().setDefaultButton(getBtn1());
  setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  this.setAlwaysOnTop(true);
}"
21308,"private void checkNewInstalled(){
  boolean ch=false;
  String links=""String_Node_Str"";
  for (  PackageData pa : getPackageData()) {
    if (pa.isInstalled()) {
      pa.setInstalled(false);
      ch=true;
      links+=JDLocale.LF(""String_Node_Str"",""String_Node_Str"",pa.getStringProperty(""String_Node_Str""),pa.getStringProperty(""String_Node_Str""),pa.getStringProperty(""String_Node_Str""));
    }
  }
  if (!ch)   return;
  JDUtilities.getGUI().showCountdownConfirmDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",links),15);
}","private void checkNewInstalled(){
  String links=""String_Node_Str"";
  String error=""String_Node_Str"";
  for (  PackageData pa : getPackageData()) {
    if (pa.isInstalled()) {
      if (pa.getInstalledVersion() != Integer.parseInt(pa.getStringProperty(""String_Node_Str""))) {
        error+=JDLocale.LF(""String_Node_Str"",""String_Node_Str"",pa.getStringProperty(""String_Node_Str""),pa.getStringProperty(""String_Node_Str""),pa.getStringProperty(""String_Node_Str""));
      }
 else {
        links+=JDLocale.LF(""String_Node_Str"",""String_Node_Str"",pa.getStringProperty(""String_Node_Str""),pa.getStringProperty(""String_Node_Str""),pa.getStringProperty(""String_Node_Str""));
      }
      pa.setInstalled(false);
    }
  }
  if (!links.equals(""String_Node_Str""))   JDUtilities.getGUI().showCountdownConfirmDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",links),15);
  if (!error.equals(""String_Node_Str""))   JDUtilities.getGUI().showCountdownConfirmDialog(JDLocale.LF(""String_Node_Str"",""String_Node_Str"",links),15);
}"
21309,"@SuppressWarnings(""String_Node_Str"") public static void main(String args[]){
  final StringBuffer log=new StringBuffer();
  UIManager.LookAndFeelInfo[] info=UIManager.getInstalledLookAndFeels();
  SubConfiguration guiConfig=SubConfiguration.getSubConfig(""String_Node_Str"");
  String paf=guiConfig.getStringProperty(""String_Node_Str"",null);
  boolean plafisSet=false;
  log.append(""String_Node_Str"");
  log.append(SubConfiguration.getSubConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
  System.out.println(SubConfiguration.getSubConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
  System.out.println(SubConfiguration.getSubConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
  log.append(SubConfiguration.getSubConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
  if (SubConfiguration.getSubConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",false)) {
    String host=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String port=new Integer(SubConfiguration.getSubConfig(""String_Node_Str"").getIntegerProperty(""String_Node_Str"",8080)).toString();
    String user=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String pass=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",host);
    System.setProperty(""String_Node_Str"",port);
    System.setProperty(""String_Node_Str"",user);
    System.setProperty(""String_Node_Str"",pass);
    Main.log(log,""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  }
 else {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Main.log(log,""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  }
  if (SubConfiguration.getSubConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",false)) {
    String user=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String pass=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String host=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String port=new Integer(SubConfiguration.getSubConfig(""String_Node_Str"").getIntegerProperty(""String_Node_Str"",1080)).toString();
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",host);
    System.setProperty(""String_Node_Str"",port);
    System.setProperty(""String_Node_Str"",user);
    System.setProperty(""String_Node_Str"",pass);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",host);
    System.setProperty(""String_Node_Str"",port);
    System.setProperty(""String_Node_Str"",user);
    System.setProperty(""String_Node_Str"",pass);
    Main.log(log,""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  }
 else {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Main.log(log,""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  }
  if (paf != null) {
    for (    LookAndFeelInfo element : info) {
      if (element.getName().equals(paf)) {
        try {
          UIManager.setLookAndFeel(element.getClassName());
          plafisSet=true;
          break;
        }
 catch (        UnsupportedLookAndFeelException e) {
        }
catch (        ClassNotFoundException e) {
        }
catch (        InstantiationException e) {
        }
catch (        IllegalAccessException e) {
        }
      }
    }
  }
 else {
    for (int i=0; i < info.length; i++) {
      if (!info[i].getName().matches(""String_Node_Str"")) {
        try {
          UIManager.setLookAndFeel(info[i].getClassName());
          plafisSet=true;
          break;
        }
 catch (        UnsupportedLookAndFeelException e) {
        }
catch (        ClassNotFoundException e) {
        }
catch (        InstantiationException e) {
        }
catch (        IllegalAccessException e) {
        }
      }
    }
  }
  if (!plafisSet) {
    try {
      UIManager.setLookAndFeel(new WindowsLookAndFeel());
    }
 catch (    UnsupportedLookAndFeelException e) {
    }
  }
  File file=new File(""String_Node_Str"");
  if (file.exists()) {
    file.deleteOnExit();
  }
  JFrame frame=new JFrame();
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setTitle(""String_Node_Str"");
  frame.setLayout(new GridBagLayout());
  final JProgressBar progresslist=new JProgressBar();
  progresslist.setMaximum(100);
  progresslist.setStringPainted(true);
  final JProgressBar progressload=new JProgressBar();
  progressload.setMaximum(100);
  progressload.setStringPainted(true);
  final JTextArea logWindow=new JTextArea(30,120);
  JScrollPane scrollPane=new JScrollPane(logWindow);
  logWindow.setEditable(true);
  Main.addToGridBag(frame,new JLabel(""String_Node_Str""),REL,REL,REM,1,0,0,INSETS,NORESIZE,NORTHWEST);
  Main.addToGridBag(frame,new JLabel(""String_Node_Str""),REL,REL,REL,1,0,0,INSETS,NORESIZE,NORTHWEST);
  Main.addToGridBag(frame,progresslist,REL,REL,REM,1,1,0,INSETS,BOTHRESIZE,NORTHWEST);
  Main.addToGridBag(frame,new JLabel(""String_Node_Str""),REL,REL,REL,1,0,0,INSETS,NORESIZE,NORTHWEST);
  Main.addToGridBag(frame,progressload,REL,REL,REM,1,1,0,INSETS,BOTHRESIZE,NORTHWEST);
  Main.log(log,""String_Node_Str"");
  logWindow.setText(log.toString());
  Main.addToGridBag(frame,scrollPane,REL,REL,REM,1,1,1,INSETS,BOTHRESIZE,NORTHWEST);
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  int n=5;
  ((JComponent)frame.getContentPane()).setBorder(new EmptyBorder(n,n,n,n));
  frame.pack();
  frame.setLocationRelativeTo(null);
  frame.setVisible(true);
  boolean restart=false;
  int runtype=1;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
    }
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      restart=true;
    }
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      runtype=0;
    }
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      runtype=1;
    }
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      runtype=2;
    }
    Main.log(log,""String_Node_Str"" + i + ""String_Node_Str""+ args[i]+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
    logWindow.setText(log.toString());
  }
  new Thread(){
    public void run(){
      while (true) {
        logWindow.setText(log.toString());
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
.start();
  WebUpdater updater=new WebUpdater(null);
  updater.setLogger(log);
  updater.setListProgress(progresslist);
  updater.setDownloadProgress(progressload);
  Main.trace(""String_Node_Str"");
  Vector<Vector<String>> files=updater.getAvailableFiles();
  if (files != null) {
    updater.filterAvailableUpdates(files);
    progresslist.setValue(100);
    updater.updateFiles(files);
  }
  SubConfiguration jdus=SubConfiguration.getSubConfig(""String_Node_Str"");
  ArrayList<PackageData> data=(ArrayList<PackageData>)jdus.getProperty(""String_Node_Str"",new ArrayList<PackageData>());
  for (  PackageData pa : data) {
    if (!pa.isDownloaded())     continue;
    File zip=new File(pa.getStringProperty(""String_Node_Str""));
    Main.log(log,""String_Node_Str"" + zip + System.getProperty(""String_Node_Str"")+ System.getProperty(""String_Node_Str""));
    UnZip u=new UnZip(zip,new File(""String_Node_Str""));
    File[] efiles;
    try {
      efiles=u.extract();
      if (files != null) {
        for (        File element : efiles) {
          Main.log(log,""String_Node_Str"" + element + System.getProperty(""String_Node_Str""));
          if (element.getAbsolutePath().endsWith(""String_Node_Str"")) {
            pa.setProperty(""String_Node_Str"",element.getAbsolutePath());
          }
        }
        pa.setInstalled(true);
        pa.setUpdating(false);
        pa.setDownloaded(false);
        pa.setInstalledVersion(Integer.parseInt(pa.getStringProperty(""String_Node_Str"")));
        Main.log(log,""String_Node_Str"" + zip + System.getProperty(""String_Node_Str""));
        zip.delete();
        zip.deleteOnExit();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      zip.delete();
      zip.deleteOnExit();
    }
  }
  jdus.save();
  Main.trace(updater.getLogger().toString());
  Main.trace(""String_Node_Str"");
  logWindow.setText(log.toString());
  Main.trace(new File(""String_Node_Str"").getAbsoluteFile());
  if (restart) {
    if (new File(""String_Node_Str"").exists()) {
      new File(""String_Node_Str"").delete();
    }
    Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
    if (runtype == 2) {
      Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
      Main.runCommand(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},new File(""String_Node_Str"").getAbsolutePath(),0);
    }
 else     if (runtype == 1 && new File(""String_Node_Str"").exists()) {
      Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
      Main.runCommand(""String_Node_Str"",new String[]{""String_Node_Str""},new File(""String_Node_Str"").getAbsolutePath(),0);
    }
 else {
      Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
      Main.runCommand(""String_Node_Str"",new String[]{""String_Node_Str""},new File(""String_Node_Str"").getAbsolutePath(),0);
    }
  }
  logWindow.setText(log.toString());
  Main.writeLocalFile(new File(""String_Node_Str""),log.toString());
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
  }
  System.exit(0);
}","@SuppressWarnings(""String_Node_Str"") public static void main(String args[]){
  final StringBuffer log=new StringBuffer();
  UIManager.LookAndFeelInfo[] info=UIManager.getInstalledLookAndFeels();
  SubConfiguration guiConfig=SubConfiguration.getSubConfig(""String_Node_Str"");
  String paf=guiConfig.getStringProperty(""String_Node_Str"",null);
  boolean plafisSet=false;
  log.append(""String_Node_Str"");
  log.append(SubConfiguration.getSubConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
  System.out.println(SubConfiguration.getSubConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
  System.out.println(SubConfiguration.getSubConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
  log.append(SubConfiguration.getSubConfig(""String_Node_Str"").getProperties() + ""String_Node_Str"");
  if (SubConfiguration.getSubConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",false)) {
    String host=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String port=new Integer(SubConfiguration.getSubConfig(""String_Node_Str"").getIntegerProperty(""String_Node_Str"",8080)).toString();
    String user=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String pass=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",host);
    System.setProperty(""String_Node_Str"",port);
    System.setProperty(""String_Node_Str"",user);
    System.setProperty(""String_Node_Str"",pass);
    Main.log(log,""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  }
 else {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Main.log(log,""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  }
  if (SubConfiguration.getSubConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",false)) {
    String user=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String pass=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String host=SubConfiguration.getSubConfig(""String_Node_Str"").getStringProperty(""String_Node_Str"",""String_Node_Str"");
    String port=new Integer(SubConfiguration.getSubConfig(""String_Node_Str"").getIntegerProperty(""String_Node_Str"",1080)).toString();
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",host);
    System.setProperty(""String_Node_Str"",port);
    System.setProperty(""String_Node_Str"",user);
    System.setProperty(""String_Node_Str"",pass);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",host);
    System.setProperty(""String_Node_Str"",port);
    System.setProperty(""String_Node_Str"",user);
    System.setProperty(""String_Node_Str"",pass);
    Main.log(log,""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  }
 else {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Main.log(log,""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  }
  if (paf != null) {
    for (    LookAndFeelInfo element : info) {
      if (element.getName().equals(paf)) {
        try {
          UIManager.setLookAndFeel(element.getClassName());
          plafisSet=true;
          break;
        }
 catch (        UnsupportedLookAndFeelException e) {
        }
catch (        ClassNotFoundException e) {
        }
catch (        InstantiationException e) {
        }
catch (        IllegalAccessException e) {
        }
      }
    }
  }
 else {
    for (int i=0; i < info.length; i++) {
      if (!info[i].getName().matches(""String_Node_Str"")) {
        try {
          UIManager.setLookAndFeel(info[i].getClassName());
          plafisSet=true;
          break;
        }
 catch (        UnsupportedLookAndFeelException e) {
        }
catch (        ClassNotFoundException e) {
        }
catch (        InstantiationException e) {
        }
catch (        IllegalAccessException e) {
        }
      }
    }
  }
  if (!plafisSet) {
    try {
      UIManager.setLookAndFeel(new WindowsLookAndFeel());
    }
 catch (    UnsupportedLookAndFeelException e) {
    }
  }
  File file=new File(""String_Node_Str"");
  if (file.exists()) {
    file.deleteOnExit();
  }
  JFrame frame=new JFrame();
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setTitle(""String_Node_Str"");
  frame.setLayout(new GridBagLayout());
  final JProgressBar progresslist=new JProgressBar();
  progresslist.setMaximum(100);
  progresslist.setStringPainted(true);
  final JProgressBar progressload=new JProgressBar();
  progressload.setMaximum(100);
  progressload.setStringPainted(true);
  final JTextArea logWindow=new JTextArea(30,120);
  JScrollPane scrollPane=new JScrollPane(logWindow);
  logWindow.setEditable(true);
  Main.addToGridBag(frame,new JLabel(""String_Node_Str""),REL,REL,REM,1,0,0,INSETS,NORESIZE,NORTHWEST);
  Main.addToGridBag(frame,new JLabel(""String_Node_Str""),REL,REL,REL,1,0,0,INSETS,NORESIZE,NORTHWEST);
  Main.addToGridBag(frame,progresslist,REL,REL,REM,1,1,0,INSETS,BOTHRESIZE,NORTHWEST);
  Main.addToGridBag(frame,new JLabel(""String_Node_Str""),REL,REL,REL,1,0,0,INSETS,NORESIZE,NORTHWEST);
  Main.addToGridBag(frame,progressload,REL,REL,REM,1,1,0,INSETS,BOTHRESIZE,NORTHWEST);
  Main.log(log,""String_Node_Str"");
  logWindow.setText(log.toString());
  Main.addToGridBag(frame,scrollPane,REL,REL,REM,1,1,1,INSETS,BOTHRESIZE,NORTHWEST);
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  int n=5;
  ((JComponent)frame.getContentPane()).setBorder(new EmptyBorder(n,n,n,n));
  frame.pack();
  frame.setLocationRelativeTo(null);
  frame.setVisible(true);
  boolean restart=false;
  int runtype=1;
  for (int i=0; i < args.length; i++) {
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
    }
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      restart=true;
    }
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      runtype=0;
    }
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      runtype=1;
    }
    if (args[i].trim().equalsIgnoreCase(""String_Node_Str"")) {
      runtype=2;
    }
    Main.log(log,""String_Node_Str"" + i + ""String_Node_Str""+ args[i]+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
    logWindow.setText(log.toString());
  }
  new Thread(){
    public void run(){
      while (true) {
        logWindow.setText(log.toString());
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
.start();
  WebUpdater updater=new WebUpdater(null);
  updater.setLogger(log);
  updater.setListProgress(progresslist);
  updater.setDownloadProgress(progressload);
  Main.trace(""String_Node_Str"");
  Vector<Vector<String>> files=updater.getAvailableFiles();
  if (files != null) {
    updater.filterAvailableUpdates(files);
    progresslist.setValue(100);
    updater.updateFiles(files);
  }
  SubConfiguration jdus=SubConfiguration.getSubConfig(""String_Node_Str"");
  ArrayList<PackageData> data=(ArrayList<PackageData>)jdus.getProperty(""String_Node_Str"",new ArrayList<PackageData>());
  for (  PackageData pa : data) {
    if (!pa.isDownloaded())     continue;
    File zip=new File(pa.getStringProperty(""String_Node_Str""));
    Main.log(log,""String_Node_Str"" + zip + System.getProperty(""String_Node_Str"")+ System.getProperty(""String_Node_Str""));
    UnZip u=new UnZip(zip,new File(""String_Node_Str""));
    File[] efiles;
    try {
      efiles=u.extract();
      if (files != null) {
        for (        File element : efiles) {
          Main.log(log,""String_Node_Str"" + element + System.getProperty(""String_Node_Str""));
          if (element.getAbsolutePath().endsWith(""String_Node_Str"")) {
            pa.setProperty(""String_Node_Str"",element.getAbsolutePath());
          }
        }
        pa.setInstalled(true);
        pa.setUpdating(false);
        pa.setDownloaded(false);
        pa.setInstalledVersion(Integer.parseInt(pa.getStringProperty(""String_Node_Str"")));
        Main.log(log,""String_Node_Str"" + zip + System.getProperty(""String_Node_Str""));
        zip.delete();
        zip.deleteOnExit();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      StackTraceElement[] trace=e.getStackTrace();
      for (int i=0; i < trace.length; i++)       Main.log(log,""String_Node_Str"" + trace[i] + ""String_Node_Str"");
      zip.delete();
      zip.deleteOnExit();
      pa.setInstalled(true);
      pa.setUpdating(false);
      pa.setDownloaded(false);
    }
  }
  jdus.save();
  Main.trace(updater.getLogger().toString());
  Main.trace(""String_Node_Str"");
  logWindow.setText(log.toString());
  Main.trace(new File(""String_Node_Str"").getAbsoluteFile());
  if (restart) {
    if (new File(""String_Node_Str"").exists()) {
      new File(""String_Node_Str"").delete();
    }
    Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
    if (runtype == 2) {
      Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
      Main.runCommand(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},new File(""String_Node_Str"").getAbsolutePath(),0);
    }
 else     if (runtype == 1 && new File(""String_Node_Str"").exists()) {
      Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
      Main.runCommand(""String_Node_Str"",new String[]{""String_Node_Str""},new File(""String_Node_Str"").getAbsolutePath(),0);
    }
 else {
      Main.log(log,""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
      Main.runCommand(""String_Node_Str"",new String[]{""String_Node_Str""},new File(""String_Node_Str"").getAbsolutePath(),0);
    }
  }
  logWindow.setText(log.toString());
  Main.writeLocalFile(new File(""String_Node_Str""),log.toString());
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
  }
  System.exit(0);
}"
21310,"public void addRow(String[] value){
  tableData.add(value);
  this.fireTableRowsInserted(tableData.size() - 1,tableData.size() - 1);
}","public void addRow(String[] value){
  tableData.add(value);
  this.fireTableRowsInserted(tableData.size() - 1,tableData.size() - 1);
  setInfoLabels();
}"
21311,"public void setValueAt(String value,int row,int col){
  tableData.get(row)[col]=value;
  this.fireTableCellUpdated(row,col);
}","public void setValueAt(Object value,int row,int col){
  tableData.get(row)[col]=(String)value;
  this.fireTableCellUpdated(row,col);
  setInfoLabels();
}"
21312,"public void deleteRow(int index){
  tableData.remove(index);
  this.fireTableRowsDeleted(index,index);
}","public void deleteRow(int index){
  oldEntries.remove(tableData.remove(index)[0]);
  this.fireTableRowsDeleted(index,index);
  setInfoLabels();
}"
21313,"private void initList(){
  Vector<String[]> source=new Vector<String[]>();
  if (sourceFolder != null)   source=getSourceEntries(sourceFolder);
  Vector<String[]> file=new Vector<String[]>();
  if (languageFile != null)   file=getLanguageFileEntries(languageFile);
  tableModel.setData(getData(source,file));
  mnuEntries.setEnabled(true);
  mnuKey.setEnabled(true);
  mnuReload.setEnabled(true);
  mnuSave.setEnabled(true);
  mnuSaveAs.setEnabled(true);
  setInfoLabels();
}","private void initList(){
  Vector<String[]> source=new Vector<String[]>();
  if (sourceFolder != null)   source=getSourceEntries(sourceFolder);
  Vector<String[]> file=new Vector<String[]>();
  if (languageFile != null)   file=getLanguageFileEntries(languageFile);
  tableModel.setData(getData(source,file));
  mnuEntries.setEnabled(true);
  mnuKey.setEnabled(true);
  mnuReload.setEnabled(true);
  mnuSave.setEnabled(true);
  mnuSaveAs.setEnabled(true);
}"
21314,"/** 
 * setzt den Statischen Dateinamen. Ist dieser wert != null, sow ird er zum Speichern der Datei verwendet. ist er ==null, so wird der dateiName im Plugin automatisch ermittelt. ACHTUNG: Diese Funktion sollte nicht ! von den Plugins verwendet werden. Sie dient dazu der Gui die Möglichkeit zu geben unabhängig von den Plugins einen Downloadnamen festzulegen. userinputs>automatische erkenung Plugins solten setName(String) verwenden um den Speichernamen anzugeben.
 */
public void setStaticFileName(String staticFileName){
  if (staticFileName != null && staticFileName.length() > 3) {
    this.staticFileName=JDUtilities.validateFileandPathName(staticFileName);
    updatePartID();
  }
 else   this.staticFileName=null;
}","/** 
 * setzt den Statischen Dateinamen. Ist dieser wert != null, sow ird er zum Speichern der Datei verwendet. ist er ==null, so wird der dateiName im Plugin automatisch ermittelt. ACHTUNG: Diese Funktion sollte nicht ! von den Plugins verwendet werden. Sie dient dazu der Gui die Möglichkeit zu geben unabhängig von den Plugins einen Downloadnamen festzulegen. userinputs>automatische erkenung Plugins solten setName(String) verwenden um den Speichernamen anzugeben.
 */
public void setStaticFileName(String staticFileName){
  if (staticFileName != null && staticFileName.length() > 3) {
    this.staticFileName=JDUtilities.removeEndingPoints(JDUtilities.validateFileandPathName(staticFileName));
    updatePartID();
  }
 else   this.staticFileName=null;
}"
21315,"/** 
 * Setzt den Namen des Downloads neu
 * @param name Neuer Name des Downloads
 */
public void setName(String name){
  if (name != null && name.length() > 3) {
    this.name=JDUtilities.validateFileandPathName(name);
    updatePartID();
  }
}","/** 
 * Setzt den Namen des Downloads neu
 * @param name Neuer Name des Downloads
 */
public void setName(String name){
  if (name != null && name.length() > 3) {
    this.name=JDUtilities.removeEndingPoints(JDUtilities.validateFileandPathName(name));
    updatePartID();
  }
}"
21316,"/** 
 * Setzt ein Subdirectory für den DeonloadLink neu
 * @param downloadPath der neue downloadPfad
 */
public void setSubdirectory(String subdir){
  if (subdir != null && name.length() > 0) {
    this.subdirectory=JDUtilities.validateFileandPathName(subdir);
  }
 else   this.subdirectory=null;
}","/** 
 * Setzt ein Subdirectory für den DeonloadLink neu
 * @param downloadPath der neue downloadPfad
 */
public void setSubdirectory(String subdir){
  if (subdir != null && name.length() > 0) {
    this.subdirectory=JDUtilities.removeEndingPoints(JDUtilities.validateFileandPathName(subdir));
  }
 else   this.subdirectory=null;
}"
21317,"public void setName(String name){
  this.name=name;
}","public void setName(String name){
  this.name=JDUtilities.removeEndingPoints(name);
}"
21318,"public void setDownloadDirectory(String subFolder){
  downloadDirectory=subFolder;
}","public void setDownloadDirectory(String subFolder){
  downloadDirectory=JDUtilities.removeEndingPoints(subFolder);
}"
21319,"/** 
 * GIbt den Integer der sich in src befindet zurück. alle nicht integerzeichen werden ausgefiltert
 * @param src 
 * @return Integer in src
 */
public static int filterInt(String src){
  try {
    return Integer.parseInt(JDUtilities.filterString(src,""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    return 0;
  }
}","/** 
 * GIbt den Integer der sich in src befindet zurück. alle nicht integerzeichen werden ausgefiltert
 * @param src
 * @return Integer in src
 */
public static int filterInt(String src){
  try {
    return Integer.parseInt(JDUtilities.filterString(src,""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    return 0;
  }
}"
21320,"public static String validateFileandPathName(String name){
  return name.replaceAll(""String_Node_Str"",""String_Node_Str"");
}","public static String validateFileandPathName(String name){
  if (name == null)   return null;
  return name.replaceAll(""String_Node_Str"",""String_Node_Str"");
}"
21321,"/** 
 * Minimiert die GUI. als ID können die GUI_STATUS_IDS aus UIInterface,* verwendet werden
 */
public void setGUIStatus(int id);","/** 
 * Minimiert die GUI. als ID können die GUI_STATUS_IDS aus UIInterface, verwendet werden
 */
public void setGUIStatus(int id);"
21322,"/** 
 * Zeigt einen Eingabe Dialog an
 * @param string Die Nachricht, die angezeigt werden soll
 * @return Der vom Benutzer eingegebene Text
 */
public String showUserInputDialog(String string);","/** 
 * Zeigt einen Eingabe Dialog an
 * @param string Die Nachricht, die angezeigt werden soll
 * @param def default Wert
 * @return Der vom Benutzer eingegebene Text
 */
public String showUserInputDialog(String string,String def);"
21323,"public String showUserInputDialog(String string){
  logger.info(""String_Node_Str"");
  return JOptionPane.showInputDialog(frame,string);
}","public String showUserInputDialog(String string,String def){
  logger.info(""String_Node_Str"");
  return JOptionPane.showInputDialog(frame,string,def);
}"
21324,"public PluginStep doStep0(PluginStep step,DownloadLink downloadLink){
  try {
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
      String link=(String)downloadLink.getProperty(""String_Node_Str"");
    String[] mirrors=(String[])downloadLink.getProperty(""String_Node_Str"");
  downloadLink.setStatusText(""String_Node_Str"");
downloadLink.requestGuiUpdate();
Vector<DownloadLink> dls=getDLinks(link);
FilePackage fp=downloadLink.getFilePackage();
int index=fp.indexOf(downloadLink);
fp.remove(downloadLink);
Vector<Integer> down=new Vector<Integer>();
Vector<DownloadLink> ret=new Vector<DownloadLink>();
for (int i=dls.size() - 1; i >= 0; i--) {
DistributeData distributeData=new DistributeData(dls.get(i).getDownloadURL());
Vector<DownloadLink> links=distributeData.findLinks();
Iterator<DownloadLink> it2=links.iterator();
boolean online=false;
while (it2.hasNext()) {
DownloadLink downloadLink3=(DownloadLink)it2.next();
if (downloadLink3.isAvailable()) {
fp.add(index,downloadLink3);
online=true;
}
 else {
down.add(i);
}
}
if (online) ret.addAll(links);
}
if (mirrors != null) {
for (int i=0; i < mirrors.length; i++) {
if (down.size() > 0) {
try {
dls=getDLinks(mirrors[i]);
Iterator<Integer> iter=down.iterator();
while (iter.hasNext()) {
Integer integer=(Integer)iter.next();
DistributeData distributeData=new DistributeData(dls.get(down.get(integer)).getDownloadURL());
Vector<DownloadLink> links=distributeData.findLinks();
Iterator<DownloadLink> it2=links.iterator();
boolean online=false;
while (it2.hasNext()) {
DownloadLink downloadLink3=(DownloadLink)it2.next();
if (downloadLink3.isAvailable()) {
fp.add(index,downloadLink3);
online=true;
iter.remove();
}
}
if (online) ret.addAll(links);
}
}
 catch (Exception e) {
}
}
 else break;
}
}
if (down.size() > 0) {
fp.add(downloadLink);
downloadLink.setStatus(DownloadLink.STATUS_ERROR_PLUGIN_SPECIFIC);
step.setStatus(PluginStep.STATUS_ERROR);
step.setParameter(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
return step;
}
}
}
 catch (Exception e) {
}
return null;
}","public PluginStep doStep0(PluginStep step,DownloadLink downloadLink){
  try {
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
      String link=(String)downloadLink.getProperty(""String_Node_Str"");
    String[] mirrors=(String[])downloadLink.getProperty(""String_Node_Str"");
  downloadLink.setStatusText(""String_Node_Str"");
downloadLink.requestGuiUpdate();
Vector<DownloadLink> dls=getDLinks(link);
if (dls.size() < 2) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_PLUGIN_SPECIFIC);
step.setStatus(PluginStep.STATUS_ERROR);
step.setParameter(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
logger.warning(""String_Node_Str"");
return step;
}
FilePackage fp=downloadLink.getFilePackage();
int index=fp.indexOf(downloadLink);
fp.remove(downloadLink);
Vector<Integer> down=new Vector<Integer>();
Vector<DownloadLink> ret=new Vector<DownloadLink>();
for (int i=dls.size() - 1; i >= 0; i--) {
DistributeData distributeData=new DistributeData(dls.get(i).getDownloadURL());
Vector<DownloadLink> links=distributeData.findLinks();
Iterator<DownloadLink> it2=links.iterator();
boolean online=false;
while (it2.hasNext()) {
DownloadLink downloadLink3=(DownloadLink)it2.next();
if (downloadLink3.isAvailable()) {
fp.add(index,downloadLink3);
online=true;
}
 else {
down.add(i);
}
}
if (online) ret.addAll(links);
}
if (mirrors != null) {
for (int i=0; i < mirrors.length; i++) {
if (down.size() > 0) {
try {
dls=getDLinks(mirrors[i]);
Iterator<Integer> iter=down.iterator();
while (iter.hasNext()) {
Integer integer=(Integer)iter.next();
DistributeData distributeData=new DistributeData(dls.get(down.get(integer)).getDownloadURL());
Vector<DownloadLink> links=distributeData.findLinks();
Iterator<DownloadLink> it2=links.iterator();
boolean online=false;
while (it2.hasNext()) {
DownloadLink downloadLink3=(DownloadLink)it2.next();
if (downloadLink3.isAvailable()) {
fp.add(index,downloadLink3);
online=true;
iter.remove();
}
}
if (online) ret.addAll(links);
}
}
 catch (Exception e) {
}
}
 else break;
}
}
if (down.size() > 0) {
fp.add(downloadLink);
downloadLink.setStatus(DownloadLink.STATUS_ERROR_PLUGIN_SPECIFIC);
step.setStatus(PluginStep.STATUS_ERROR);
step.setParameter(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
return step;
}
}
}
 catch (Exception e) {
}
return null;
}"
21325,"/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  CURRENTGUI=this;
  linkListPane=new DownloadLinksTreeTablePanel(this);
  progressBar=new TabProgress();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(progressBar);
  splitpane.setTopComponent(linkListPane);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=createMenuButton(actionStartStopDownload);
  btnPause=createMenuButton(actionPause);
  btnPause.setEnabled(false);
  btnPause.setSelected(false);
  btnReconnect=createMenuButton(doReconnect);
  btnClipBoard=createMenuButton(actionClipBoard);
  btnReconnect.setSelected(false);
  btnClipBoard.setSelected(false);
  btnCes=createMenuButton(this.actionCes);
  toolBar.setFloatable(true);
  toolBar.add(btnStartStop);
  toolBar.add(btnPause);
  toolBar.add(createMenuButton(actionItemsAdd));
  toolBar.add(createMenuButton(actionItemsDelete));
  toolBar.addSeparator();
  toolBar.add(createMenuButton(actionItemsBottom));
  toolBar.add(createMenuButton(actionItemsDown));
  toolBar.add(createMenuButton(actionItemsUp));
  toolBar.add(createMenuButton(actionItemsTop));
  toolBar.addSeparator();
  toolBar.add(createMenuButton(actionConfig));
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(createMenuButton(this.actionReconnect));
  toolBar.add(btnClipBoard);
  toolBar.addSeparator();
  toolBar.add(createMenuButton(this.actionUpdate));
  if (JDUtilities.getSubConfig(""String_Node_Str"").getBooleanProperty(Configuration.JAC_USE_CES,false))   toolBar.add(btnCes);
  JPanel panel=new JPanel(new BorderLayout());
  int n=2;
  toolBar.setBorder(new EmptyBorder(n,0,n,0));
  n=5;
  panel.setBorder(new EmptyBorder(0,n,0,n));
  JPanel toolbar2=new JPanel(new BorderLayout(n,n));
  n=3;
  statusBar.setBorder(new EmptyBorder(n,0,n,0));
  frame.setContentPane(panel);
  JLabel advert=new JLabel(JDUtilities.getscaledImageIcon(JDTheme.V(""String_Node_Str""),-1,32));
  advert.setOpaque(true);
  toolbar2.setOpaque(true);
  advert.setBackground(Color.orange);
  advert.setBorder(new EmptyBorder(0,n,0,n));
  toolbar2.setBackground(Color.orange);
  toolbar2.add(toolBar,BorderLayout.CENTER);
  panel.add(toolbar2,BorderLayout.NORTH);
  panel.add(splitpane,BorderLayout.CENTER);
  panel.add(statusBar,BorderLayout.SOUTH);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}","/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  CURRENTGUI=this;
  linkListPane=new DownloadLinksTreeTablePanel(this);
  progressBar=new TabProgress();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(progressBar);
  splitpane.setTopComponent(linkListPane);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=createMenuButton(actionStartStopDownload);
  btnPause=createMenuButton(actionPause);
  btnPause.setEnabled(false);
  btnPause.setSelected(false);
  btnReconnect=createMenuButton(doReconnect);
  btnClipBoard=createMenuButton(actionClipBoard);
  btnReconnect.setSelected(false);
  btnClipBoard.setSelected(false);
  btnCes=createMenuButton(this.actionCes);
  toolBar.setFloatable(false);
  toolBar.add(btnStartStop);
  toolBar.add(btnPause);
  toolBar.add(createMenuButton(actionItemsAdd));
  toolBar.add(createMenuButton(actionItemsDelete));
  toolBar.addSeparator();
  toolBar.add(createMenuButton(actionItemsBottom));
  toolBar.add(createMenuButton(actionItemsDown));
  toolBar.add(createMenuButton(actionItemsUp));
  toolBar.add(createMenuButton(actionItemsTop));
  toolBar.addSeparator();
  toolBar.add(createMenuButton(actionConfig));
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(createMenuButton(this.actionReconnect));
  toolBar.add(btnClipBoard);
  toolBar.addSeparator();
  toolBar.add(createMenuButton(this.actionUpdate));
  if (JDUtilities.getSubConfig(""String_Node_Str"").getBooleanProperty(Configuration.JAC_USE_CES,false))   toolBar.add(btnCes);
  JPanel panel=new JPanel(new BorderLayout());
  int n=2;
  toolBar.setBorder(new EmptyBorder(n,0,n,0));
  n=5;
  panel.setBorder(new EmptyBorder(0,n,0,n));
  JPanel toolbar2=new JPanel(new BorderLayout(n,n));
  n=3;
  statusBar.setBorder(new EmptyBorder(n,0,n,0));
  frame.setContentPane(panel);
  JLabel advert=new JLabel(JDUtilities.getscaledImageIcon(JDTheme.V(""String_Node_Str""),-1,32));
  advert.setOpaque(true);
  toolbar2.setOpaque(true);
  advert.setBackground(Color.orange);
  advert.setBorder(new EmptyBorder(0,n,0,n));
  toolbar2.setBackground(Color.orange);
  toolbar2.add(toolBar,BorderLayout.CENTER);
  panel.add(toolbar2,BorderLayout.NORTH);
  panel.add(splitpane,BorderLayout.CENTER);
  panel.add(statusBar,BorderLayout.SOUTH);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}"
21326,"public boolean canImport(TreeTableTransferHandler.TransferSupport info){
  if (draggingPathes == null || draggingPathes.length <= 0)   return false;
  int row=((JTable.DropLocation)info.getDropLocation()).getRow();
  TreePath current=treeTable.getPathForRow(row);
  for (  TreePath path : draggingPathes) {
    if (path.getLastPathComponent() == current.getLastPathComponent())     return false;
  }
  if (draggingPathes[0].getLastPathComponent() instanceof FilePackage) {
    if (current.getLastPathComponent() instanceof FilePackage)     return true;
    return false;
  }
 else {
    return true;
  }
}","public boolean canImport(TreeTableTransferHandler.TransferSupport info){
  if (draggingPathes == null || draggingPathes.length <= 0)   return false;
  int row=((JTable.DropLocation)info.getDropLocation()).getRow();
  TreePath current=treeTable.getPathForRow(row);
  if (current == null)   return false;
  for (  TreePath path : draggingPathes) {
    if (path.getLastPathComponent() == current.getLastPathComponent())     return false;
  }
  if (draggingPathes[0].getLastPathComponent() instanceof FilePackage) {
    if (current.getLastPathComponent() instanceof FilePackage)     return true;
    return false;
  }
 else {
    return true;
  }
}"
21327,"/** 
 * Diese Methode sucht nach passwörtern in einem Datensatz
 * @param data
 * @return
 */
public static Vector<String> findPasswords(String data){
  if (data == null)   return new Vector<String>();
  Iterator<String> iter=JUnrar.getPasswordList().iterator();
  Vector<String> ret=new Vector<String>();
  while (iter.hasNext()) {
    String pass=(String)iter.next();
    if (data.contains(pass))     ret.add(pass);
  }
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher matcher=pattern.matcher(data);
  while (matcher.find()) {
    String pass=matcher.group(2);
    if (pass.length() > 2 && !pass.matches(""String_Node_Str"") && !ret.contains(pass))     ret.add(pass);
  }
  pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(data);
  while (matcher.find()) {
    String pass=matcher.group(2);
    if (pass.length() > 4 && !pass.matches(""String_Node_Str"") && !ret.contains(pass))     ret.add(pass);
  }
  pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(data);
  while (matcher.find()) {
    String pass=matcher.group(2);
    if (pass.length() > 2 && !pass.matches(""String_Node_Str"") && !ret.contains(pass))     ret.add(pass);
  }
  pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(data);
  while (matcher.find()) {
    String pass=matcher.group(2);
    if (pass.length() > 2 && !pass.matches(""String_Node_Str"") && !ret.contains(pass))     ret.add(pass);
  }
  return ret;
}","/** 
 * Diese Methode sucht nach passwörtern in einem Datensatz
 * @param data
 * @return
 */
public static Vector<String> findPasswords(String data){
  if (data == null)   return new Vector<String>();
  Iterator<String> iter=JUnrar.getPasswordList().iterator();
  Vector<String> ret=new Vector<String>();
  while (iter.hasNext()) {
    String pass=(String)iter.next();
    if (pass.length() > 8 && data.contains(pass))     ret.add(pass);
  }
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher matcher=pattern.matcher(data);
  while (matcher.find()) {
    String pass=matcher.group(2);
    if (pass.length() > 2 && !pass.matches(""String_Node_Str"") && !ret.contains(pass))     ret.add(pass);
  }
  pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(data);
  while (matcher.find()) {
    String pass=matcher.group(2);
    if (pass.length() > 4 && !pass.matches(""String_Node_Str"") && !ret.contains(pass))     ret.add(pass);
  }
  pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(data);
  while (matcher.find()) {
    String pass=matcher.group(2);
    if (pass.length() > 2 && !pass.matches(""String_Node_Str"") && !ret.contains(pass))     ret.add(pass);
  }
  pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  matcher=pattern.matcher(data);
  while (matcher.find()) {
    String pass=matcher.group(2);
    if (pass.length() > 2 && !pass.matches(""String_Node_Str"") && !ret.contains(pass))     ret.add(pass);
  }
  return ret;
}"
21328,"private void confirmPackage(int idx,String host){
  PackageTab tab=tabList.get(idx);
  Vector<DownloadLink> linkList=tab.getLinkList();
  int files=linkList.size();
  if (files == 0)   return;
  Color c=new Color((int)(Math.random() * 0xffffff));
  c=c.brighter();
  FilePackage fp=new FilePackage();
  fp.setProperty(""String_Node_Str"",c);
  fp.setName(tab.getPackageName());
  fp.setComment(tab.getComment());
  fp.setPassword(tab.getPassword());
  JUnrar unrar=new JUnrar(false);
  unrar.addToPasswordlist(tab.getPassword());
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
    File file=new File(new File(tab.getDownloadDirectory()),tab.getPackageName());
    if (!file.exists()) {
      file.mkdirs();
    }
    if (file.exists()) {
      fp.setDownloadDirectory(file.getAbsolutePath());
    }
 else {
      fp.setDownloadDirectory(tab.getDownloadDirectory());
    }
  }
 else {
    fp.setDownloadDirectory(tab.getDownloadDirectory());
  }
  if (host == null) {
    fp.setDownloadLinks(linkList);
    for (int i=0; i < files; i++) {
      linkList.elementAt(i).setFilePackage(fp);
    }
  }
 else {
    Vector<DownloadLink> linkListHost=new Vector<DownloadLink>();
    files=0;
    for (int i=0; i < tab.getLinkList().size(); i++) {
      if (linkList.elementAt(i).getHost().compareTo(host) == 0) {
        DownloadLink link=linkList.remove(i);
        linkListHost.add(link);
        link.setFilePackage(fp);
        ++files;
      }
    }
    if (files == 0)     return;
    fp.setDownloadLinks(linkListHost);
    tab.setLinkList(linkList);
  }
  parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
  parentFrame.setDropTargetText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + files);
}","private void confirmPackage(int idx,String host){
  PackageTab tab=tabList.get(idx);
  Vector<DownloadLink> linkList=tab.getLinkList();
  int files=linkList.size();
  if (files == 0)   return;
  Color c=new Color((int)(Math.random() * 0xffffff));
  c=c.brighter();
  FilePackage fp=new FilePackage();
  fp.setProperty(""String_Node_Str"",c);
  fp.setName(tab.getPackageName());
  fp.setComment(tab.getComment());
  fp.setPassword(tab.getPassword());
  JUnrar unrar=new JUnrar(false);
  unrar.addToPasswordlist(tab.getPassword());
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
    File file=new File(new File(tab.getDownloadDirectory()),tab.getPackageName());
    if (!file.exists()) {
      file.mkdirs();
    }
    if (file.exists()) {
      fp.setDownloadDirectory(file.getAbsolutePath());
    }
 else {
      fp.setDownloadDirectory(tab.getDownloadDirectory());
    }
  }
 else {
    fp.setDownloadDirectory(tab.getDownloadDirectory());
  }
  if (host == null) {
    fp.setDownloadLinks(linkList);
    for (int i=0; i < files; i++) {
      linkList.elementAt(i).setFilePackage(fp);
    }
  }
 else {
    Vector<DownloadLink> linkListHost=new Vector<DownloadLink>();
    files=0;
    for (int i=tab.getLinkList().size() - 1; i >= 0; --i) {
      if (linkList.elementAt(i).getHost().compareTo(host) == 0) {
        DownloadLink link=linkList.remove(i);
        linkListHost.add(link);
        link.setFilePackage(fp);
        ++files;
      }
    }
    if (files == 0)     return;
    fp.setDownloadLinks(linkListHost);
    tab.setLinkList(linkList);
  }
  parentFrame.fireUIEvent(new UIEvent(this,UIEvent.UI_PACKAGE_GRABBED,fp));
  parentFrame.setDropTargetText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + files);
}"
21329,"public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equals(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
    int[] rows=table.getSelectedRows();
    for (int i=rows.length - 1; i >= 0; i--) {
      int id=rows[i];
      linkList.remove(id);
    }
    this.refreshTable();
  }
  if (e.getActionCommand().equals(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
    PackageTab newTab=addTab();
    int[] rows=table.getSelectedRows();
    if (0 < rows.length) {
      DownloadLink linksToTransfer[]=new DownloadLink[rows.length];
      int targetIndex=0;
      for (int i=rows.length - 1; i >= 0; i--) {
        linksToTransfer[targetIndex++]=this.getLinkAt(rows[i]);
        linkList.remove(rows[i]);
      }
      newTab.addLinks(linksToTransfer);
      this.refreshTable();
    }
  }
 else   if (e.getActionCommand().equals(JDLocale.L(""String_Node_Str""))) {
    int[] rows=table.getSelectedRows();
    Vector<Integer> ret=new Vector<Integer>();
    Vector<DownloadLink> list=new Vector<DownloadLink>();
    for (int i=0; i < rows.length; i++) {
      ret.add(rows[i]);
      list.add(linkList.get(rows[i]));
    }
    linkList=list;
    this.refreshTable();
  }
 else   if (e.getActionCommand().equals(JDLocale.L(""String_Node_Str""))) {
    int[] rows=table.getSelectedRows();
    Vector<Integer> ret=new Vector<Integer>();
    Vector<DownloadLink> list=new Vector<DownloadLink>();
    for (int i=0; i < rows.length; i++) {
      ret.add(rows[i]);
      list.add(linkList.get(rows[i]));
    }
    linkList=list;
    int idx=tabbedPane.getSelectedIndex();
    confirmPackage(idx);
    removePackageAt(idx);
    if (tabList.size() == 0) {
      this.setVisible(false);
      dispose();
    }
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equals(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
    int[] rows=table.getSelectedRows();
    for (int i=rows.length - 1; i >= 0; i--) {
      totalLinkList.remove(linkList.remove(rows[i]));
    }
    this.refreshTable();
  }
 else   if (e.getActionCommand().equals(JDLocale.L(""String_Node_Str"",""String_Node_Str""))) {
    PackageTab newTab=addTab();
    int[] rows=table.getSelectedRows();
    if (0 < rows.length) {
      DownloadLink linksToTransfer[]=new DownloadLink[rows.length];
      int targetIndex=0;
      for (int i=rows.length - 1; i >= 0; i--) {
        linksToTransfer[targetIndex++]=this.getLinkAt(rows[i]);
        linkList.remove(rows[i]);
      }
      newTab.addLinks(linksToTransfer);
      this.refreshTable();
    }
  }
 else   if (e.getActionCommand().equals(JDLocale.L(""String_Node_Str""))) {
    int[] rows=table.getSelectedRows();
    Vector<DownloadLink> list=new Vector<DownloadLink>();
    for (int i=0; i < rows.length; i++) {
      list.add(linkList.get(rows[i]));
    }
    totalLinkList.removeAll(linkList);
    totalLinkList.addAll(list);
    linkList=list;
    this.refreshTable();
  }
 else   if (e.getActionCommand().equals(JDLocale.L(""String_Node_Str""))) {
    int[] rows=table.getSelectedRows();
    Vector<DownloadLink> list=new Vector<DownloadLink>();
    for (int i=0; i < rows.length; i++) {
      list.add(linkList.get(rows[i]));
    }
    linkList=list;
    int idx=tabbedPane.getSelectedIndex();
    confirmPackage(idx);
    removePackageAt(idx);
    if (tabList.size() == 0) {
      this.setVisible(false);
      dispose();
    }
  }
}"
21330,"public PluginStep doStep(PluginStep step,DownloadLink downloadLink){
  if (step == null)   return null;
  try {
    if (!getFileInformation(downloadLink)) {
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_NOT_FOUND);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    String steplink=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
    if (steplink == null) {
      downloadurl=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
      if (downloadurl == null) {
        downloadurl=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
      }
      if (downloadurl == null) {
        downloadurl=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
      }
      if (downloadurl == null) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        return step;
      }
    }
 else {
      downloadurl=""String_Node_Str"" + steplink + ""String_Node_Str"";
      downloadcookie=requestInfo.getCookie();
      requestInfo=HTTP.getRequest(new URL(downloadurl),requestInfo.getCookie(),referrerurl,false);
      downloadcookie=downloadcookie + requestInfo.getCookie();
      referrerurl=downloadurl;
      if (requestInfo.getLocation() != null) {
        downloadurl=requestInfo.getLocation();
        requestInfo=HTTP.getRequest(new URL(downloadurl),requestInfo.getCookie(),referrerurl,false);
        downloadcookie=requestInfo.getCookie();
        referrerurl=downloadurl;
      }
      if (requestInfo.containsHTML(""String_Node_Str"")) {
        captchaFile=getLocalCaptchaFile(this);
        HTTPConnection captcha_con=new HTTPConnection(new URL(""String_Node_Str"").openConnection());
        captcha_con.setRequestProperty(""String_Node_Str"",referrerurl);
        captcha_con.setRequestProperty(""String_Node_Str"",downloadcookie);
        if (!captcha_con.getContentType().contains(""String_Node_Str"") && !JDUtilities.download(captchaFile,captcha_con) || !captchaFile.exists()) {
          logger.severe(""String_Node_Str"");
          step.setStatus(PluginStep.STATUS_ERROR);
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
          return step;
        }
        if ((captchaCode=Plugin.getCaptchaCode(captchaFile,this)) == null) {
          step.setStatus(PluginStep.STATUS_ERROR);
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
          return step;
        }
        downloadurl=""String_Node_Str"" + steplink + ""String_Node_Str""+ captchaCode;
        requestInfo=HTTP.getRequest((new URL(downloadurl)),downloadcookie,referrerurl,false);
        if (requestInfo.getLocation() != null && requestInfo.getLocation().contains(""String_Node_Str"")) {
          step.setStatus(PluginStep.STATUS_ERROR);
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
          return step;
        }
        downloadcookie=downloadcookie + requestInfo.getCookie();
      }
      steplink=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
      if (steplink == null) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        return step;
      }
      downloadurl=""String_Node_Str"" + steplink;
      requestInfo=HTTP.getRequest(new URL(downloadurl),downloadcookie,referrerurl,false);
      if (requestInfo.getLocation() == null || requestInfo.getLocation().contains(""String_Node_Str"")) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        return step;
      }
      downloadurl=requestInfo.getLocation();
      if (downloadurl == null) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        return step;
      }
    }
    requestInfo=HTTP.getRequestWithoutHtmlCode(new URL(downloadurl),requestInfo.getCookie(),referrerurl,false);
    HTTPConnection urlConnection=requestInfo.getConnection();
    String filename=getFileNameFormHeader(urlConnection);
    if (urlConnection.getContentLength() == 0) {
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    downloadLink.setDownloadMax(urlConnection.getContentLength());
    downloadLink.setName(filename);
    long length=downloadLink.getDownloadMax();
    dl=new RAFDownload(this,downloadLink,urlConnection);
    dl.setChunkNum(1);
    dl.setResume(false);
    dl.setFilesize(length);
    if (!dl.startDownload() && step.getStatus() != PluginStep.STATUS_ERROR && step.getStatus() != PluginStep.STATUS_TODO) {
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    return step;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  step.setStatus(PluginStep.STATUS_ERROR);
  downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
  return step;
}","public PluginStep doStep(PluginStep step,DownloadLink downloadLink){
  if (step == null)   return null;
  try {
    if (!getFileInformation(downloadLink)) {
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_NOT_FOUND);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    String steplink=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
    if (steplink == null) {
      downloadurl=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
      if (downloadurl == null) {
        downloadurl=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
      }
      if (downloadurl == null) {
        downloadurl=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
      }
      if (downloadurl == null) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        return step;
      }
    }
 else {
      downloadurl=""String_Node_Str"" + steplink + ""String_Node_Str"";
      downloadcookie=requestInfo.getCookie();
      requestInfo=HTTP.getRequest(new URL(downloadurl),requestInfo.getCookie(),referrerurl,false);
      downloadcookie=downloadcookie + requestInfo.getCookie();
      referrerurl=downloadurl;
      if (requestInfo.getLocation() != null) {
        downloadurl=requestInfo.getLocation();
        requestInfo=HTTP.getRequest(new URL(downloadurl),requestInfo.getCookie(),referrerurl,false);
        downloadcookie=requestInfo.getCookie();
        referrerurl=downloadurl;
      }
      if (requestInfo.containsHTML(""String_Node_Str"")) {
        captchaFile=getLocalCaptchaFile(this);
        HTTPConnection captcha_con=new HTTPConnection(new URL(""String_Node_Str"").openConnection());
        captcha_con.setRequestProperty(""String_Node_Str"",referrerurl);
        captcha_con.setRequestProperty(""String_Node_Str"",downloadcookie);
        if (!captcha_con.getContentType().contains(""String_Node_Str"") && !JDUtilities.download(captchaFile,captcha_con) || !captchaFile.exists()) {
          logger.severe(""String_Node_Str"");
          step.setStatus(PluginStep.STATUS_ERROR);
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
          return step;
        }
        if ((captchaCode=Plugin.getCaptchaCode(captchaFile,this)) == null) {
          step.setStatus(PluginStep.STATUS_ERROR);
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
          return step;
        }
        downloadurl=""String_Node_Str"" + steplink + ""String_Node_Str""+ captchaCode;
        requestInfo=HTTP.getRequest((new URL(downloadurl)),downloadcookie,referrerurl,false);
        if (requestInfo.getLocation() != null && requestInfo.getLocation().contains(""String_Node_Str"")) {
          step.setStatus(PluginStep.STATUS_ERROR);
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
          return step;
        }
        downloadcookie=downloadcookie + requestInfo.getCookie();
      }
      steplink=requestInfo.getRegexp(""String_Node_Str"").getFirstMatch();
      if (steplink == null) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        return step;
      }
      downloadurl=""String_Node_Str"" + steplink;
      requestInfo=HTTP.getRequest(new URL(downloadurl),downloadcookie,referrerurl,false);
      if (requestInfo.getLocation() == null || requestInfo.getLocation().contains(""String_Node_Str"")) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        return step;
      }
      downloadurl=requestInfo.getLocation();
      if (downloadurl == null) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        return step;
      }
    }
    downloadurl=downloadurl.replaceAll(""String_Node_Str"",""String_Node_Str"");
    requestInfo=HTTP.getRequestWithoutHtmlCode(new URL(downloadurl),requestInfo.getCookie(),referrerurl,false);
    HTTPConnection urlConnection=requestInfo.getConnection();
    String filename=getFileNameFormHeader(urlConnection);
    if (urlConnection.getContentLength() == 0) {
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    downloadLink.setDownloadMax(urlConnection.getContentLength());
    downloadLink.setName(filename);
    long length=downloadLink.getDownloadMax();
    dl=new RAFDownload(this,downloadLink,urlConnection);
    dl.setChunkNum(1);
    dl.setResume(false);
    dl.setFilesize(length);
    if (!dl.startDownload() && step.getStatus() != PluginStep.STATUS_ERROR && step.getStatus() != PluginStep.STATUS_TODO) {
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    return step;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  step.setStatus(PluginStep.STATUS_ERROR);
  downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
  return step;
}"
21331,"public void valueChanged(ListSelectionEvent e){
  if (plugins.get(((DefaultListSelectionModel)e.getSource()).getMinSelectionIndex()).getConfig().getEntries().size() != 0)   btnEdit.setEnabled(true);
 else   btnEdit.setEnabled(false);
}","public void valueChanged(ListSelectionEvent e){
  if ((((DefaultListSelectionModel)e.getSource()).getMinSelectionIndex() != -1) && (plugins.get(((DefaultListSelectionModel)e.getSource()).getMinSelectionIndex()).getConfig().getEntries().size() != 0))   btnEdit.setEnabled(true);
 else   btnEdit.setEnabled(false);
}"
21332,"public void fireTableChanged(){
  int rowIndex=table.getSelectedRow();
  table.tableChanged(new TableModelEvent(table.getModel()));
  table.getSelectionModel().addSelectionInterval(rowIndex,rowIndex);
}","public void fireTableChanged(){
  int rowIndex=table.getSelectedRow();
  table.tableChanged(new TableModelEvent(this.table.getModel()));
  table.getSelectionModel().addSelectionInterval(rowIndex,rowIndex);
}"
21333,"public String getColumnName(int column){
switch (column) {
case 0:
    return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 1:
  return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 2:
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 3:
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 4:
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 5:
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
}
return super.getColumnName(column);
}","public String getColumnName(int column){
switch (column) {
case 0:
    return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 1:
  return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 2:
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 3:
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 4:
return JDLocale.L(""String_Node_Str"",""String_Node_Str"");
}
return super.getColumnName(column);
}"
21334,"public int getColumnCount(){
  return 6;
}","public int getColumnCount(){
  return 5;
}"
21335,"public Object getValueAt(int rowIndex,int columnIndex){
switch (columnIndex) {
case 0:
    return rowIndex + ""String_Node_Str"";
case 1:
  return configuration.getBooleanProperty(getConfigParamKey(plugins.get(rowIndex)),false) ? JDLocale.L(""String_Node_Str"",""String_Node_Str"") : JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 2:
return plugins.get(rowIndex).getPluginName();
case 3:
return plugins.get(rowIndex).getVersion();
case 4:
return plugins.get(rowIndex).getCoder();
case 5:
return plugins.get(rowIndex).getRequirements();
}
return null;
}","public Object getValueAt(int rowIndex,int columnIndex){
switch (columnIndex) {
case 0:
    return configuration.getBooleanProperty(getConfigParamKey(plugins.get(rowIndex)),false) ? JDLocale.L(""String_Node_Str"",""String_Node_Str"") : JDLocale.L(""String_Node_Str"",""String_Node_Str"");
case 1:
  return plugins.get(rowIndex).getPluginName();
case 2:
return plugins.get(rowIndex).getVersion();
case 3:
return plugins.get(rowIndex).getCoder();
case 4:
return plugins.get(rowIndex).getRequirements();
}
return null;
}"
21336,"@Override public void initPanel(){
  setLayout(new BorderLayout(10,10));
  table=new JTable();
  InternalTableModel internalTableModel=new InternalTableModel();
  table.setModel(new InternalTableModel());
  TableColumn column=null;
  for (int c=0; c < internalTableModel.getColumnCount(); c++) {
    column=table.getColumnModel().getColumn(c);
switch (c) {
case 0:
      column.setPreferredWidth(30);
    break;
case 1:
  column.setPreferredWidth(70);
break;
case 2:
column.setPreferredWidth(600);
break;
}
}
table.addMouseListener(this);
JScrollPane scrollpane=new JScrollPane(table);
scrollpane.setPreferredSize(new Dimension(400,200));
btnEdit=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
btnEdit.setEnabled(false);
table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
public void valueChanged(ListSelectionEvent e){
if (plugins.get(((DefaultListSelectionModel)e.getSource()).getMinSelectionIndex()).getConfig().getEntries().size() != 0) btnEdit.setEnabled(true);
 else btnEdit.setEnabled(false);
}
}
);
btnEdit.addActionListener(this);
enableDisable=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
enableDisable.addActionListener(this);
openPluginDir=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
openPluginDir.addActionListener(this);
link=new JLinkButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
JPanel contentPanel=new JPanel(new BorderLayout(5,5));
int n=5;
contentPanel.setBorder(new EmptyBorder(0,n,0,n));
String text=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
contentPanel.add(new JLabel(text),BorderLayout.NORTH);
contentPanel.add(scrollpane,BorderLayout.CENTER);
JPanel buttonPanel=new JPanel(new FlowLayout(5,5,FlowLayout.LEFT));
buttonPanel.add(btnEdit);
buttonPanel.add(enableDisable);
buttonPanel.add(openPluginDir);
buttonPanel.add(link);
add(contentPanel,BorderLayout.CENTER);
add(buttonPanel,BorderLayout.SOUTH);
}","@Override public void initPanel(){
  setLayout(new BorderLayout(10,10));
  table=new JTable();
  InternalTableModel internalTableModel=new InternalTableModel();
  table.setModel(new InternalTableModel());
  TableColumn column=null;
  for (int c=0; c < internalTableModel.getColumnCount(); c++) {
    column=table.getColumnModel().getColumn(c);
switch (c) {
case 0:
      column.setPreferredWidth(70);
    break;
case 1:
  column.setPreferredWidth(300);
break;
}
}
table.addMouseListener(this);
JScrollPane scrollpane=new JScrollPane(table);
scrollpane.setPreferredSize(new Dimension(400,200));
btnEdit=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
btnEdit.setEnabled(false);
table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
public void valueChanged(ListSelectionEvent e){
if ((((DefaultListSelectionModel)e.getSource()).getMinSelectionIndex() != -1) && (plugins.get(((DefaultListSelectionModel)e.getSource()).getMinSelectionIndex()).getConfig().getEntries().size() != 0)) btnEdit.setEnabled(true);
 else btnEdit.setEnabled(false);
}
}
);
btnEdit.addActionListener(this);
enableDisable=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
enableDisable.addActionListener(this);
openPluginDir=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
openPluginDir.addActionListener(this);
link=new JLinkButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
JPanel contentPanel=new JPanel(new BorderLayout(5,5));
int n=5;
contentPanel.setBorder(new EmptyBorder(0,n,0,n));
String text=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
contentPanel.add(new JLabel(text),BorderLayout.NORTH);
contentPanel.add(scrollpane,BorderLayout.CENTER);
JPanel buttonPanel=new JPanel(new FlowLayout(5,5,FlowLayout.LEFT));
buttonPanel.add(btnEdit);
buttonPanel.add(enableDisable);
buttonPanel.add(openPluginDir);
buttonPanel.add(link);
add(contentPanel,BorderLayout.CENTER);
add(buttonPanel,BorderLayout.SOUTH);
}"
21337,"public void actionPerformed(ActionEvent e){
  if (e.getSource() == btnOK) {
    captchaText=textField.getText();
    setVisible(false);
    dispose();
  }
  if (e.getSource() == btnBAD) {
    captchaText=null;
    setVisible(false);
    dispose();
  }
  if (countdownThread != null && countdownThread.isAlive())   this.countdownThread.interrupt();
  if (jacThread != null && jacThread.isAlive())   this.jacThread.interrupt();
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == btnOK) {
    captchaText=textField.getText();
    this.dispose();
  }
  if (e.getSource() == btnBAD) {
    captchaText=null;
    this.dispose();
  }
  if (countdownThread != null && countdownThread.isAlive())   this.countdownThread.interrupt();
  if (jacThread != null && jacThread.isAlive())   this.jacThread.interrupt();
}"
21338,"@SuppressWarnings(""String_Node_Str"") public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else       requestParameter.put(key,value);
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0)         setspeed=0;
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1)         maxdls=1;
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
      }
 else       JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
synchronized (JDWebinterface.Link_Adder_Packages) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  JDWebinterface.Link_Adder_Packages.get(i).setName(JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
            }
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                for (int ii=0; ii < JDWebinterface.Link_Adder_Packages.get(i).size(); ii++) {
                  links.add(JDWebinterface.Link_Adder_Packages.get(i).get(ii));
                }
              }
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                if (link.isAvailabilityChecked() == true && link.isAvailable() == false)                 link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    if (!file.exists()) {
                      file.mkdirs();
                    }
                    if (file.exists()) {
                      fp.setDownloadDirectory(file.getAbsolutePath());
                    }
 else {
                      fp.setDownloadDirectory(fp.getDownloadDirectory());
                    }
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0)               JDWebinterface.Link_Adder_Packages.remove(index);
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setStatus(DownloadLink.STATUS_TODO);
              link.setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDReconnect implements Runnable {
        JDReconnect(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          boolean tmp=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
          if (JDUtilities.getController().getRunningDownloadNum() > 0) {
            JDUtilities.getController().stopDownloads();
          }
          if (Reconnecter.waitForNewIP(1)) {
            logger.info(""String_Node_Str"");
          }
 else {
            logger.info(""String_Node_Str"");
          }
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,tmp);
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDReconnect jdrc=new JDReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jdc=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getController().startDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getController().stopDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdrs=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        DownloadLink link;
        DownloadLink next;
        while (waitingLinkList.size() > 0) {
          link=waitingLinkList.remove(0);
          if (!guiConfig.getBooleanProperty(PROPERTY_ONLINE_CHECK,false)) {
            attachLinkTopackage(link);
            try {
              Thread.sleep(5);
            }
 catch (            InterruptedException e) {
            }
          }
 else {
            if (!link.isAvailabilityChecked()) {
              Iterator<DownloadLink> it=waitingLinkList.iterator();
              Vector<String> links=new Vector<String>();
              Vector<DownloadLink> dlLinks=new Vector<DownloadLink>();
              links.add(link.getDownloadURL());
              dlLinks.add(link);
              while (it.hasNext()) {
                next=it.next();
                if (next.getPlugin().getClass() == link.getPlugin().getClass()) {
                  dlLinks.add(next);
                  links.add(next.getDownloadURL());
                }
              }
              if (links.size() > 1) {
                boolean[] ret=((PluginForHost)link.getPlugin()).checkLinks(links.toArray(new String[]{}));
                if (ret != null) {
                  for (int ii=0; ii < links.size(); ii++) {
                    dlLinks.get(ii).setAvailable(ret[ii]);
                  }
                }
              }
            }
            if (link.isAvailable() || ((PluginForHost)link.getPlugin()).isListOffline()) {
              attachLinkTopackage(link);
            }
          }
        }
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String password_list=JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str""));
        JUnrar unrar=new JUnrar(false);
        unrar.editPasswordlist(SimpleMatches.getLines(password_list));
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else       requestParameter.put(key,value);
    }
  }
  logger.info(requestParameter.toString());
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0)         setspeed=0;
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1)         maxdls=1;
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
        }
 else         JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
synchronized (JDWebinterface.Link_Adder_Packages) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  JDWebinterface.Link_Adder_Packages.get(i).setName(JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
            }
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (int i=0; i < JDWebinterface.Link_Adder_Packages.size(); i++) {
                for (int ii=0; ii < JDWebinterface.Link_Adder_Packages.get(i).size(); ii++) {
                  links.add(JDWebinterface.Link_Adder_Packages.get(i).get(ii));
                }
              }
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                if (link.isAvailabilityChecked() == true && link.isAvailable() == false)                 link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    if (!file.exists()) {
                      file.mkdirs();
                    }
                    if (file.exists()) {
                      fp.setDownloadDirectory(file.getAbsolutePath());
                    }
 else {
                      fp.setDownloadDirectory(fp.getDownloadDirectory());
                    }
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0)               JDWebinterface.Link_Adder_Packages.remove(index);
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setStatus(DownloadLink.STATUS_TODO);
              link.setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDReconnect implements Runnable {
        JDReconnect(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          boolean tmp=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
          if (JDUtilities.getController().getRunningDownloadNum() > 0) {
            JDUtilities.getController().stopDownloads();
          }
          if (Reconnecter.waitForNewIP(1)) {
            logger.info(""String_Node_Str"");
          }
 else {
            logger.info(""String_Node_Str"");
          }
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,tmp);
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDReconnect jdrc=new JDReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jdc=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getController().startDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      JDUtilities.getController().stopDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdrs=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        DownloadLink link;
        DownloadLink next;
        while (waitingLinkList.size() > 0) {
          link=waitingLinkList.remove(0);
          if (!guiConfig.getBooleanProperty(PROPERTY_ONLINE_CHECK,false)) {
            attachLinkTopackage(link);
            try {
              Thread.sleep(5);
            }
 catch (            InterruptedException e) {
            }
          }
 else {
            if (!link.isAvailabilityChecked()) {
              Iterator<DownloadLink> it=waitingLinkList.iterator();
              Vector<String> links=new Vector<String>();
              Vector<DownloadLink> dlLinks=new Vector<DownloadLink>();
              links.add(link.getDownloadURL());
              dlLinks.add(link);
              while (it.hasNext()) {
                next=it.next();
                if (next.getPlugin().getClass() == link.getPlugin().getClass()) {
                  dlLinks.add(next);
                  links.add(next.getDownloadURL());
                }
              }
              if (links.size() > 1) {
                boolean[] ret=((PluginForHost)link.getPlugin()).checkLinks(links.toArray(new String[]{}));
                if (ret != null) {
                  for (int ii=0; ii < links.size(); ii++) {
                    dlLinks.get(ii).setAvailable(ret[ii]);
                  }
                }
              }
            }
            if (link.isAvailable() || ((PluginForHost)link.getPlugin()).isListOffline()) {
              attachLinkTopackage(link);
            }
          }
        }
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String password_list=JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str""));
        JUnrar unrar=new JUnrar(false);
        unrar.editPasswordlist(SimpleMatches.getLines(password_list));
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}"
21339,"private JButton createMenuButton(JDAction action){
  JButton bt=new JButton(action);
  bt.setFocusPainted(false);
  bt.setBorderPainted(false);
  bt.setText(null);
  return bt;
}","private JButton createMenuButton(JDAction action){
  JButton bt=new JButton(action);
  bt.setFocusPainted(false);
  bt.setBorderPainted(false);
  bt.setOpaque(false);
  bt.setText(null);
  return bt;
}"
21340,"@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  if (parameter.matches(""String_Node_Str"")) {
    boolean isP=parameter.contains(""String_Node_Str"");
    int catst=getSerienJunkiesCat(isP);
    scatChecked=false;
    int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
    if (sCatNewestDownload == catst) {
      request.withHtmlCode=false;
      request.redirect=false;
      request.getRequest(""String_Node_Str"");
      request.withHtmlCode=true;
      request.getRequest(""String_Node_Str"");
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(request.getHtmlCode());
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          break;
        }
      }
      if (name == null)       return null;
      request.getRequest(parameter);
      name+=""String_Node_Str"";
      String[] bet=null;
      while (bet == null) {
        name=name.substring(0,name.length() - 1);
        if (name.length() == 0)         return null;
        try {
          bet=request.getRegexp(""String_Node_Str"" + name + ""String_Node_Str"").getMatches()[0];
        }
 catch (        Exception e) {
        }
      }
      lastHtmlCode=request.getHtmlCode();
      String[] links=getHttpLinks(bet[1],request.urlToString());
      for (int i=0; i < links.length; i++) {
        decryptedLinks.add(this.createDownloadlink(links[i]));
      }
      step.setParameter(decryptedLinks);
      return null;
    }
 else     if (catst == sCatGrabb) {
      String htmlcode=""String_Node_Str"";
      if (isP) {
        request.getRequest(parameter);
        htmlcode=request.getHtmlCode();
      }
 else {
        request.getRequest(""String_Node_Str"" + cat);
        htmlcode=request.getHtmlCode();
        try {
          int pages=Integer.parseInt(request.getRegexp(""String_Node_Str"").getFirstMatch());
          for (int i=2; i < pages + 1; i++) {
            htmlcode+=""String_Node_Str"" + request.getRequest(""String_Node_Str"" + cat + ""String_Node_Str""+ i);
          }
        }
 catch (        Exception e) {
        }
      }
      String[] titles=htmlcode.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      for (int g=0; g < titles.length; g++) {
        String title=new Regexp(titles[g],""String_Node_Str"").getFirstMatch();
        String[] sp=titles[g].split(""String_Node_Str"");
        for (int d=0; d < sp.length; d++) {
          String size=new Regexp(sp[d],""String_Node_Str"").getFirstMatch();
          String[][] links=new Regexp(sp[d],""String_Node_Str"").getMatches();
          for (int i=0; i < links.length; i++) {
            String[] links2=getHttpLinks(links[i][1],parameter);
            for (int j=0; j < links2.length; j++) {
              if (canHandle(links2[j])) {
                if (this.getProperties().getBooleanProperty(""String_Node_Str"",false)) {
                  decryptedLinks.addAll((new jd.plugins.host.Serienjunkies()).getDLinks(links2[j]));
                }
 else {
                  decryptedLinks.add(createdl(links2[j],new String[]{size,links[i][0],links[i][1],title}));
                }
              }
            }
          }
        }
      }
      step.setParameter(decryptedLinks);
      return null;
    }
 else {
      return null;
    }
  }
if (this.getProperties().getBooleanProperty(""String_Node_Str"",false)) {
  step.setParameter((new jd.plugins.host.Serienjunkies()).getDLinks(parameter));
}
 else {
  String[] info=getLinkName(parameter);
  if (info == null) {
    request.getRequest(""String_Node_Str"" + parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    lastHtmlCode=request.getHtmlCode();
    info=getLinkName(parameter);
  }
  decryptedLinks.add(createdl(parameter,info));
  step.setParameter(decryptedLinks);
}
}
return null;
}","@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    request.withHtmlCode=false;
  request.redirect=false;
request.getRequest(""String_Node_Str"");
request.withHtmlCode=true;
Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
if (parameter.matches(""String_Node_Str"")) {
boolean isP=parameter.contains(""String_Node_Str"");
int catst=getSerienJunkiesCat(isP);
scatChecked=false;
int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
if (sCatNewestDownload == catst) {
request.getRequest(""String_Node_Str"");
Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
Matcher matcher=pattern.matcher(request.getHtmlCode());
String name=null;
while (matcher.find()) {
if (Integer.parseInt(matcher.group(1)) == cat) {
  name=matcher.group(2).toLowerCase();
  break;
}
}
if (name == null) return null;
request.getRequest(parameter);
name+=""String_Node_Str"";
String[] bet=null;
while (bet == null) {
name=name.substring(0,name.length() - 1);
if (name.length() == 0) return null;
try {
  bet=request.getRegexp(""String_Node_Str"" + name + ""String_Node_Str"").getMatches()[0];
}
 catch (Exception e) {
}
}
lastHtmlCode=request.getHtmlCode();
String[] links=getHttpLinks(bet[1],request.urlToString());
for (int i=0; i < links.length; i++) {
decryptedLinks.add(this.createDownloadlink(links[i]));
}
step.setParameter(decryptedLinks);
return null;
}
 else if (catst == sCatGrabb) {
String htmlcode=""String_Node_Str"";
if (isP) {
request.getRequest(parameter);
htmlcode=request.getHtmlCode();
}
 else {
request.getRequest(""String_Node_Str"" + cat);
htmlcode=request.getHtmlCode();
try {
  int pages=Integer.parseInt(request.getRegexp(""String_Node_Str"").getFirstMatch());
  for (int i=2; i < pages + 1; i++) {
    htmlcode+=""String_Node_Str"" + request.getRequest(""String_Node_Str"" + cat + ""String_Node_Str""+ i);
  }
}
 catch (Exception e) {
}
}
String[] titles=htmlcode.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
for (int g=0; g < titles.length; g++) {
String title=new Regexp(titles[g],""String_Node_Str"").getFirstMatch();
String[] sp=titles[g].split(""String_Node_Str"");
for (int d=0; d < sp.length; d++) {
  String size=new Regexp(sp[d],""String_Node_Str"").getFirstMatch();
  String[][] links=new Regexp(sp[d],""String_Node_Str"").getMatches();
  for (int i=0; i < links.length; i++) {
    String[] links2=getHttpLinks(links[i][1],parameter);
    for (int j=0; j < links2.length; j++) {
      if (canHandle(links2[j])) {
        if (this.getProperties().getBooleanProperty(""String_Node_Str"",false)) {
          decryptedLinks.addAll((new jd.plugins.host.Serienjunkies()).getDLinks(links2[j]));
        }
 else {
          decryptedLinks.add(createdl(links2[j],new String[]{size,links[i][0],links[i][1],title}));
        }
      }
    }
  }
}
}
step.setParameter(decryptedLinks);
return null;
}
 else {
return null;
}
}
if (this.getProperties().getBooleanProperty(""String_Node_Str"",false)) {
step.setParameter((new jd.plugins.host.Serienjunkies()).getDLinks(parameter));
}
 else {
String[] info=getLinkName(parameter);
if (info == null) {
request.getRequest(""String_Node_Str"" + parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
lastHtmlCode=request.getHtmlCode();
info=getLinkName(parameter);
}
decryptedLinks.add(createdl(parameter,info));
step.setParameter(decryptedLinks);
}
}
return null;
}"
21341,"/** 
 * @author JD-Team Fügt einen neuen ConfigTab hinzu
 * @param configPanel
 */
@SuppressWarnings(""String_Node_Str"") private void addConfigPanel(Class configPanelClass,String img,String title){
  this.configClasses.add(configPanelClass);
  int n=10;
  JPanel p=new JPanel(new BorderLayout(n,n));
  p.setBorder(new EmptyBorder(n,n,n,n));
  this.containerPanels.add(p);
  configPanels.add(null);
  int m=2;
  JPanel headerPanel=new JPanel(new BorderLayout(m,m));
  ImageIcon icon=new ImageIcon(JDUtilities.getImage(img));
  try {
    headerPanel.add(new JLinkButton(title,icon,new URL(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + title.replaceAll(""String_Node_Str"",""String_Node_Str""))),BorderLayout.NORTH);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  headerPanel.add(new JXTitledSeparator(""String_Node_Str""),BorderLayout.SOUTH);
  p.add(headerPanel,BorderLayout.NORTH);
  tabbedPane.addTab(title,new ImageIcon(icon.getImage().getScaledInstance(20,-1,Image.SCALE_SMOOTH)),p);
}","/** 
 * @author JD-Team Fügt einen neuen ConfigTab hinzu
 * @param configPanel
 */
@SuppressWarnings(""String_Node_Str"") private void addConfigPanel(Class configPanelClass,String img,String title){
  this.configClasses.add(configPanelClass);
  int n=10;
  JPanel p=new JPanel(new BorderLayout(n,n));
  p.setBorder(new EmptyBorder(n,n,n,n));
  this.containerPanels.add(p);
  configPanels.add(null);
  int m=2;
  JPanel headerPanel=new JPanel(new BorderLayout(m,m));
  ImageIcon icon=new ImageIcon(JDUtilities.getImage(img));
  try {
    headerPanel.add(new JLinkButton(title,icon,new URL(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + title.replaceAll(""String_Node_Str"",""String_Node_Str""))),BorderLayout.WEST);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  headerPanel.add(new JXTitledSeparator(""String_Node_Str""),BorderLayout.SOUTH);
  p.add(headerPanel,BorderLayout.NORTH);
  tabbedPane.addTab(title,new ImageIcon(icon.getImage().getScaledInstance(20,-1,Image.SCALE_SMOOTH)),p);
}"
21342,"/** 
 * @param parent
 * @param uiinterface
 */
private ConfigurationDialog(JFrame parent,UIInterface uiinterface){
  DIALOG=this;
  this.guiConfig=JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME);
  PARENTFRAME=parent;
  this.uiinterface=uiinterface;
  setTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  setIconImage(JDUtilities.getImage(JDTheme.V(""String_Node_Str"")));
  this.setName(""String_Node_Str"");
  configuration=JDUtilities.getConfiguration();
  tabbedPane=new JTabbedPane();
  tabbedPane.setBorder(null);
  tabbedPane.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
  if (UIManager.getLookAndFeel().getName().toLowerCase().contains(""String_Node_Str""))   tabbedPane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
  tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  tabbedPane.setTabPlacement(JTabbedPane.LEFT);
  if (System.getProperty(""String_Node_Str"").toLowerCase().indexOf(""String_Node_Str"") >= 0) {
    tabbedPane.setTabPlacement(JTabbedPane.TOP);
  }
  this.addConfigPanel(ConfigPanelGeneral.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelDownload.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelGUI.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelReconnect.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelUnrar.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelPluginForHost.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelPluginForDecrypt.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  if (guiConfig.getBooleanProperty(SimpleGUI.PARAM_USE_EXPERT_VIEW,false)) {
    this.addConfigPanel(ConfigPanelCaptcha.class,JDTheme.V(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelInfoFileWriter.class,JDTheme.V(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelEventmanager.class,JDTheme.V(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelPluginsOptional.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelPluginForContainer.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelUpdater.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  }
  this.addConfigPanel(ConfigPanelRessources.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelLinks.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  int maxLength=0;
  int tabs=tabbedPane.getTabCount();
  for (int i=0; i < tabs; i++) {
    maxLength=Math.max(maxLength,tabbedPane.getTitleAt(i).length());
  }
  for (int i=0; i < tabs; i++) {
    tabbedPane.setTitleAt(i,fill(tabbedPane.getTitleAt(i),maxLength + 1));
  }
  tabbedPane.setFont(new Font(Font.MONOSPACED,Font.PLAIN,12));
  btnSave=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  btnSave.addActionListener(this);
  btnCancel=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  btnCancel.addActionListener(this);
  btnRestart=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  btnRestart.addActionListener(this);
  chbExpert=new JCheckBox(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  chbExpert.setSelected(guiConfig.getBooleanProperty(SimpleGUI.PARAM_USE_EXPERT_VIEW,false));
  chbExpert.addActionListener(this);
  setLayout(new GridBagLayout());
  int n=5;
  JPanel cp=new JPanel(new BorderLayout(n,n));
  int b=12;
  cp.setBorder(new EmptyBorder(b,b,b,b));
  setContentPane(cp);
  JPanel sp=new JPanel(new BorderLayout(n,n));
  JPanel btPanel=new JPanel(new FlowLayout(n,n,FlowLayout.RIGHT));
  btPanel.add(btnRestart);
  btPanel.add(btnSave);
  btPanel.add(btnCancel);
  sp.add(chbExpert,BorderLayout.WEST);
  sp.add(btPanel,BorderLayout.EAST);
  cp.add(tabbedPane,BorderLayout.CENTER);
  cp.add(sp,BorderLayout.SOUTH);
  JDUtilities.getLogger().info(""String_Node_Str"" + JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getIntegerProperty(SimpleGUI.SELECTED_CONFIG_TAB,0));
  tabbedPane.addChangeListener(this);
  if (configClasses.size() <= JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getIntegerProperty(SimpleGUI.SELECTED_CONFIG_TAB,0) || JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getIntegerProperty(SimpleGUI.SELECTED_CONFIG_TAB,0) == 0) {
    paintPanel(0);
  }
 else {
    tabbedPane.setSelectedIndex(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getIntegerProperty(SimpleGUI.SELECTED_CONFIG_TAB,0));
  }
  LocationListener list=new LocationListener();
  this.addComponentListener(list);
  this.addWindowListener(list);
  pack();
  SimpleGUI.restoreWindow(parent,null,this);
  this.setVisible(true);
}","/** 
 * @param parent
 * @param uiinterface
 */
private ConfigurationDialog(JFrame parent,UIInterface uiinterface){
  DIALOG=this;
  this.guiConfig=JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME);
  PARENTFRAME=parent;
  this.uiinterface=uiinterface;
  setTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  setIconImage(JDUtilities.getImage(JDTheme.V(""String_Node_Str"")));
  this.setName(""String_Node_Str"");
  configuration=JDUtilities.getConfiguration();
  tabbedPane=new JTabbedPane();
  tabbedPane.setBorder(null);
  tabbedPane.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
  String laf=UIManager.getLookAndFeel().getName().toLowerCase();
  if (laf.contains(""String_Node_Str"") || laf.contains(""String_Node_Str""))   tabbedPane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
  tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  tabbedPane.setTabPlacement(JTabbedPane.LEFT);
  if (System.getProperty(""String_Node_Str"").toLowerCase().indexOf(""String_Node_Str"") >= 0) {
    tabbedPane.setTabPlacement(JTabbedPane.TOP);
  }
  this.addConfigPanel(ConfigPanelGeneral.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelDownload.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelGUI.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelReconnect.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelUnrar.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelPluginForHost.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelPluginForDecrypt.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  if (guiConfig.getBooleanProperty(SimpleGUI.PARAM_USE_EXPERT_VIEW,false)) {
    this.addConfigPanel(ConfigPanelCaptcha.class,JDTheme.V(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelInfoFileWriter.class,JDTheme.V(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelEventmanager.class,JDTheme.V(""String_Node_Str"",""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelPluginsOptional.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelPluginForContainer.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    this.addConfigPanel(ConfigPanelUpdater.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  }
  this.addConfigPanel(ConfigPanelRessources.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.addConfigPanel(ConfigPanelLinks.class,JDTheme.V(""String_Node_Str""),JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  int maxLength=0;
  int tabs=tabbedPane.getTabCount();
  for (int i=0; i < tabs; i++) {
    maxLength=Math.max(maxLength,tabbedPane.getTitleAt(i).length());
  }
  for (int i=0; i < tabs; i++) {
    tabbedPane.setTitleAt(i,fill(tabbedPane.getTitleAt(i),maxLength + 1));
  }
  tabbedPane.setFont(new Font(Font.MONOSPACED,Font.PLAIN,12));
  btnSave=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  btnSave.addActionListener(this);
  btnCancel=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  btnCancel.addActionListener(this);
  btnRestart=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  btnRestart.addActionListener(this);
  chbExpert=new JCheckBox(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  chbExpert.setSelected(guiConfig.getBooleanProperty(SimpleGUI.PARAM_USE_EXPERT_VIEW,false));
  chbExpert.addActionListener(this);
  setLayout(new GridBagLayout());
  int n=5;
  JPanel cp=new JPanel(new BorderLayout(n,n));
  int b=12;
  cp.setBorder(new EmptyBorder(b,b,b,b));
  setContentPane(cp);
  JPanel sp=new JPanel(new BorderLayout(n,n));
  JPanel btPanel=new JPanel(new FlowLayout(n,n,FlowLayout.RIGHT));
  btPanel.add(btnRestart);
  btPanel.add(btnSave);
  btPanel.add(btnCancel);
  sp.add(chbExpert,BorderLayout.WEST);
  sp.add(btPanel,BorderLayout.EAST);
  cp.add(tabbedPane,BorderLayout.CENTER);
  cp.add(sp,BorderLayout.SOUTH);
  JDUtilities.getLogger().info(""String_Node_Str"" + JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getIntegerProperty(SimpleGUI.SELECTED_CONFIG_TAB,0));
  tabbedPane.addChangeListener(this);
  if (configClasses.size() <= JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getIntegerProperty(SimpleGUI.SELECTED_CONFIG_TAB,0) || JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getIntegerProperty(SimpleGUI.SELECTED_CONFIG_TAB,0) == 0) {
    paintPanel(0);
  }
 else {
    tabbedPane.setSelectedIndex(JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getIntegerProperty(SimpleGUI.SELECTED_CONFIG_TAB,0));
  }
  LocationListener list=new LocationListener();
  this.addComponentListener(list);
  this.addWindowListener(list);
  pack();
  SimpleGUI.restoreWindow(parent,null,this);
  this.setVisible(true);
}"
21343,"private String EinzelLinks(String url){
  String links=""String_Node_Str"";
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    RequestInfo reqinfo=getRequest(new URL(url));
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      if (aborted)       return null;
      reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,false);
        }
        String captchaAdress=""String_Node_Str"" + matcher.group(2);
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,captchaAdress);
        logger.info(""String_Node_Str"" + fileDownloaded);
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=JDUtilities.getCaptcha(this,""String_Node_Str"",captchaFile,false);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,true);
        }
        break;
      }
    }
    links=reqinfo.getLocation();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}","private String EinzelLinks(String url){
  String links=""String_Node_Str"";
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    RequestInfo reqinfo=getRequest(new URL(url));
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      if (aborted)       return null;
      reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,false);
        }
        String captchaAdress=""String_Node_Str"" + matcher.group(2);
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,captchaAdress);
        logger.info(""String_Node_Str"" + fileDownloaded);
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=JDUtilities.getCaptcha(this,""String_Node_Str"",captchaFile,false);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,true);
        }
        break;
      }
    }
    links=reqinfo.getLocation();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}"
21344,"private int getWaittime(){
  return this.getProperties().getIntegerProperty(""String_Node_Str"",5) * 60000;
}","private int getWaittime(){
  return subConfig.getIntegerProperty(""String_Node_Str"",5) * 60000;
}"
21345,"@Override public boolean initAddon(){
  if (JDUtilities.getJavaVersion() >= 1.5) {
    logger.info(""String_Node_Str"");
    ConfigEntry cfg;
    config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,getProperties(),""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
    cfg.setDefaultValue(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
    config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,getProperties(),""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,60).setDefaultValue(5));
    cfg.setDefaultValue(""String_Node_Str"");
    config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,getProperties(),""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
    cfg.setDefaultValue(true);
    i=new check();
    i.start();
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean initAddon(){
  if (JDUtilities.getJavaVersion() >= 1.5) {
    logger.info(""String_Node_Str"");
    i=new check();
    i.start();
    return true;
  }
 else {
    return false;
  }
}"
21346,"private void checkFolder(){
  boolean dabei=false;
  File folder=new File(this.getProperties().getStringProperty(""String_Node_Str"",JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY)));
  if (folder.isDirectory()) {
    String[] help=folder.list();
    for (int i=0; i < help.length; i++) {
      if (help[i].endsWith(""String_Node_Str"") || help[i].endsWith(""String_Node_Str"") || help[i].endsWith(""String_Node_Str"")) {
        File container=new File(folder,help[i]);
        for (int j=0; j < added.size(); j++) {
          if (container.getAbsolutePath().equals(added.get(i))) {
            dabei=true;
            break;
          }
        }
        if (!dabei) {
          JDUtilities.getController().loadContainerFile(container);
          added.add(container.getAbsolutePath());
          if (this.getProperties().getBooleanProperty(""String_Node_Str"",true)) {
            container.delete();
          }
        }
      }
    }
  }
}","private void checkFolder(){
  boolean dabei=false;
  File folder=new File(subConfig.getStringProperty(""String_Node_Str"",JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY)));
  if (folder.isDirectory()) {
    String[] help=folder.list();
    for (int i=0; i < help.length; i++) {
      if (help[i].endsWith(""String_Node_Str"") || help[i].endsWith(""String_Node_Str"") || help[i].endsWith(""String_Node_Str"")) {
        File container=new File(folder,help[i]);
        for (int j=0; j < added.size(); j++) {
          if (container.getAbsolutePath().equals(added.get(i))) {
            dabei=true;
            break;
          }
        }
        if (!dabei) {
          JDUtilities.getController().loadContainerFile(container);
          added.add(container.getAbsolutePath());
          if (subConfig.getBooleanProperty(""String_Node_Str"",true)) {
            container.delete();
          }
        }
      }
    }
  }
}"
21347,"@Override public void run(){
  int c=0;
  if (IS_RUNNING)   logger.warning(""String_Node_Str"");
  while (IS_RUNNING) {
    if (c++ == 1200)     IS_RUNNING=false;
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  IS_RUNNING=true;
  JUnrar unrar=getUnrar();
  if (lastFinishedDownload == null) {
    LinkedList<String> folders=new LinkedList<String>();
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
      Iterator<DownloadLink> iter=JDUtilities.getController().getFinishedLinks().iterator();
      while (iter.hasNext()) {
        DownloadLink element=(DownloadLink)iter.next();
        logger.info(""String_Node_Str"" + element.getFileOutput());
        File folder=new File(element.getFileOutput()).getParentFile();
        logger.info(""String_Node_Str"" + folder);
        if (folder.exists()) {
          if (folders.indexOf(folder.getAbsolutePath()) == -1) {
            logger.info(""String_Node_Str"" + folder.getAbsolutePath());
            folders.add(folder.getAbsolutePath());
          }
        }
      }
    }
    folders.add(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
    logger.info(""String_Node_Str"" + folders);
    unrar.setFolders(folders);
  }
  LinkedList<String> followingFiles=new LinkedList<String>();
  Iterator<DownloadLink> ff=JDUtilities.getController().getDownloadLinks().iterator();
  while (ff.hasNext()) {
    DownloadLink dl=ff.next();
    if (dl.getStatus() != DownloadLink.STATUS_DONE && dl.getStatus() != DownloadLink.STATUS_DONE) {
      followingFiles.add(dl.getName());
    }
  }
  unrar.followingFiles=followingFiles.toArray(new String[followingFiles.size()]);
  LinkedList<File> unpacked=unrar.unrar();
  Iterator<File> iter=unpacked.iterator();
  LinkedList<mergeFile> mergeFiles=new LinkedList<mergeFile>();
  while (iter.hasNext()) {
    File file=(File)iter.next();
    if (!mergeFiles.contains((mergeFile)file))     mergeFiles.add((mergeFile)file);
    if (JDUtilities.getController().isContainerFile(file)) {
      if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_RELOADCONTAINER,true))       JDUtilities.getController().loadContainerFile(file);
    }
  }
  Boolean DELETE_MERGEDFILES=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_DELETE_MERGEDFILES,true);
  if (lastFinishedDownload != null && JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_USE_HJMERGE,true)) {
    Merge.mergeIt(new File(lastFinishedDownload.getFileOutput()),unrar.followingFiles,DELETE_MERGEDFILES,unrar.extractFolder);
    Iterator<mergeFile> miter=mergeFiles.iterator();
    while (miter.hasNext()) {
      mergeFile mergeFile=(mergeFile)miter.next();
      Merge.mergeIt(mergeFile,unrar.followingFiles,DELETE_MERGEDFILES,unrar.extractFolder);
    }
  }
  IS_RUNNING=false;
  this.setCallCode(Interaction.INTERACTION_CALL_SUCCESS);
  Interaction.handleInteraction(Interaction.INTERACTION_AFTER_UNRAR,null);
}","@Override public void run(){
  int c=0;
  if (IS_RUNNING)   logger.warning(""String_Node_Str"");
  while (IS_RUNNING) {
    if (c++ == 1200)     IS_RUNNING=false;
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  IS_RUNNING=true;
  JUnrar unrar=getUnrar();
  if (lastFinishedDownload == null) {
    LinkedList<String> folders=new LinkedList<String>();
    if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
      Iterator<DownloadLink> iter=JDUtilities.getController().getFinishedLinks().iterator();
      while (iter.hasNext()) {
        DownloadLink element=(DownloadLink)iter.next();
        logger.info(""String_Node_Str"" + element.getFileOutput());
        File folder=new File(element.getFileOutput()).getParentFile();
        logger.info(""String_Node_Str"" + folder);
        if (folder.exists()) {
          if (folders.indexOf(folder.getAbsolutePath()) == -1) {
            logger.info(""String_Node_Str"" + folder.getAbsolutePath());
            folders.add(folder.getAbsolutePath());
          }
        }
      }
    }
    folders.add(JDUtilities.getConfiguration().getDefaultDownloadDirectory());
    logger.info(""String_Node_Str"" + folders);
    unrar.setFolders(folders);
  }
  LinkedList<String> followingFiles=new LinkedList<String>();
  Iterator<DownloadLink> ff=JDUtilities.getController().getDownloadLinks().iterator();
  while (ff.hasNext()) {
    DownloadLink dl=ff.next();
    if (dl.getStatus() != DownloadLink.STATUS_DONE && dl.getStatus() != DownloadLink.STATUS_DONE) {
      followingFiles.add(dl.getName());
    }
  }
  unrar.followingFiles=followingFiles.toArray(new String[followingFiles.size()]);
  LinkedList<File> unpacked=unrar.unrar();
  Iterator<File> iter=unpacked.iterator();
  LinkedList<mergeFile> mergeFiles=new LinkedList<mergeFile>();
  while (iter.hasNext()) {
    File file=(File)iter.next();
    mergeFile mergeFile=new mergeFile(file.getAbsolutePath());
    if (!mergeFiles.contains(mergeFile))     mergeFiles.add(mergeFile);
    if (JDUtilities.getController().isContainerFile(file)) {
      if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_RELOADCONTAINER,true))       JDUtilities.getController().loadContainerFile(file);
    }
  }
  Boolean DELETE_MERGEDFILES=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_DELETE_MERGEDFILES,true);
  if (lastFinishedDownload != null && JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_USE_HJMERGE,true)) {
    Merge.mergeIt(new File(lastFinishedDownload.getFileOutput()),unrar.followingFiles,DELETE_MERGEDFILES,unrar.extractFolder);
    Iterator<mergeFile> miter=mergeFiles.iterator();
    while (miter.hasNext()) {
      mergeFile mergeFile=(mergeFile)miter.next();
      Merge.mergeIt(mergeFile,unrar.followingFiles,DELETE_MERGEDFILES,unrar.extractFolder);
    }
  }
  IS_RUNNING=false;
  this.setCallCode(Interaction.INTERACTION_CALL_SUCCESS);
  Interaction.handleInteraction(Interaction.INTERACTION_AFTER_UNRAR,null);
}"
21348,"private String execprozess(File file,String password){
  try {
    LinkedList<String> params=new LinkedList<String>();
    if (password != ""String_Node_Str"") {
      params.add(""String_Node_Str"" + password);
    }
 else {
      params.add(""String_Node_Str"");
    }
    if (overwriteFiles) {
      params.add(""String_Node_Str"");
    }
 else {
      params.add(""String_Node_Str"");
    }
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    File parent;
    boolean b=false;
    if (extractFolder != null && extractFolder.isDirectory()) {
      b=true;
      parent=extractFolder;
      params.add(file.getAbsolutePath());
    }
 else {
      parent=file.getParentFile();
      params.add(file.getName());
    }
    Process p=createProcess(unrar,params.toArray(new String[]{}),parent);
    String str=startInputListener(p,parent);
    if (str.matches(allOk)) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(str);
      if (deleteInfoFile) {
        File infoFiles=new File(file.getParentFile(),file.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        if (infoFiles.exists() && infoFiles.delete())         logger.info(infoFiles.getName() + ""String_Node_Str"");
      }
      if (autoDelete) {
        while (matcher.find()) {
          File delfile;
          if (b)           delfile=new File(matcher.group(1));
 else           delfile=new File(file.getParentFile(),matcher.group(1));
          if (!delfile.isFile()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
 else           if (!delfile.delete()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
        }
      }
 else       if (b) {
        while (matcher.find()) {
          File ufile=new File(file.getParentFile(),matcher.group(1));
          unpackedlist.add(ufile);
        }
        saveUnpackedList();
      }
      pattern=Pattern.compile(""String_Node_Str"");
      matcher=pattern.matcher(str);
      HashMap<File,String> nfiles=new HashMap<File,String>();
      while (matcher.find()) {
        File f=new File(parent,matcher.group(1));
        nfiles.put(f,null);
        unpackedFiles.add(f);
      }
      JUnrar un=new JUnrar();
      un.files=nfiles;
      un.standardPassword=standardPassword;
      un.autoDelete=autoDelete;
      un.unrar=unrar;
      un.useToextractlist=false;
      un.overwriteFiles=overwriteFiles;
      un.progressInTerminal=progressInTerminal;
      unpackedFiles.addAll(un.unrar());
      Iterator<File> iter=unpackedFiles.iterator();
      while (iter.hasNext()) {
        File file2=(File)iter.next();
        if (!file2.exists())         iter.remove();
      }
    }
    return str;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","private String execprozess(File file,String password){
  try {
    LinkedList<String> params=new LinkedList<String>();
    if (password != ""String_Node_Str"") {
      params.add(""String_Node_Str"" + password);
    }
 else {
      params.add(""String_Node_Str"");
    }
    if (overwriteFiles) {
      params.add(""String_Node_Str"");
    }
 else {
      params.add(""String_Node_Str"");
    }
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    File parent;
    boolean b=false;
    if (extractFolder != null && extractFolder.isDirectory()) {
      b=true;
      parent=extractFolder;
      params.add(file.getAbsolutePath());
    }
 else {
      parent=file.getParentFile();
      params.add(file.getName());
    }
    Process p=createProcess(unrar,params.toArray(new String[]{}),parent);
    String str=startInputListener(p,parent);
    if (str.matches(allOk)) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(str);
      if (deleteInfoFile) {
        File infoFiles=new File(file.getParentFile(),file.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        if (infoFiles.exists() && infoFiles.delete())         logger.info(infoFiles.getName() + ""String_Node_Str"");
      }
      if (autoDelete) {
        while (matcher.find()) {
          File delfile;
          if (b)           delfile=new File(matcher.group(1));
 else           delfile=new File(file.getParentFile(),matcher.group(1));
          if (!delfile.isFile()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
 else           if (!delfile.delete()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
        }
      }
 else       if (b) {
        while (matcher.find()) {
          File ufile=new File(file.getParentFile(),matcher.group(1));
          unpackedlist.add(ufile);
        }
        saveUnpackedList();
      }
      pattern=Pattern.compile(""String_Node_Str"");
      matcher=pattern.matcher(str);
      HashMap<File,String> nfiles=new HashMap<File,String>();
      while (matcher.find()) {
        File f=new File(parent,matcher.group(2));
        nfiles.put(f,null);
        unpackedFiles.add(f);
      }
      JUnrar un=new JUnrar();
      un.files=nfiles;
      un.standardPassword=standardPassword;
      un.autoDelete=autoDelete;
      un.unrar=unrar;
      un.useToextractlist=false;
      un.overwriteFiles=overwriteFiles;
      un.progressInTerminal=progressInTerminal;
      unpackedFiles.addAll(un.unrar());
      Iterator<File> iter=unpackedFiles.iterator();
      while (iter.hasNext()) {
        File file2=(File)iter.next();
        if (!file2.exists())         iter.remove();
      }
    }
    return str;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
21349,"public void run(){
  int c=countdown * 1000;
  long t=System.currentTimeMillis();
  while (c >= 0) {
    if (!isVisible())     return;
    t=System.currentTimeMillis();
    setTitle(""String_Node_Str"" + JDUtilities.formatSeconds(c / 1000));
    if (c < 3000)     JDSounds.P(""String_Node_Str"");
    long dif=System.currentTimeMillis() - t;
    c-=dif;
    try {
      if (dif < 1000)       Thread.sleep(1000 - dif);
      c-=(1000 - dif);
    }
 catch (    InterruptedException e) {
    }
  }
  captchaText=textField.getText();
  dispose();
}","public void run(){
  int c=countdown * 1000;
  long t=System.currentTimeMillis();
  while (c >= 0) {
    if (!isVisible())     return;
    t=System.currentTimeMillis();
    setTitle(""String_Node_Str"" + JDUtilities.formatSeconds(c / 1000));
    if (c < 3000)     JDSounds.P(""String_Node_Str"");
    long dif=System.currentTimeMillis() - t;
    c-=dif;
    try {
      if (dif < 1000)       Thread.sleep(1000 - dif);
      c-=(1000 - dif);
    }
 catch (    InterruptedException e) {
    }
    if (!isVisible())     return;
  }
  captchaText=textField.getText();
  dispose();
}"
21350,"/** 
 * Erstellt einen neuen Dialog.
 * @param owner Das übergeordnete Fenster
 * @param plugin Das Plugin, das dieses Captcha auslesen möchte (name des Hosts wird von JAC benötigt)
 * @param file Pfad des Bildes, das angezeigt werden soll
 */
public CaptchaDialog(final Frame owner,final Plugin plugin,final File file,final String def){
  super(owner);
  JDSounds.PT(""String_Node_Str"");
  setModal(true);
  addWindowListener(new WindowListener(){
    public void windowActivated(    WindowEvent e){
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      dispose();
      CaptchaDialog cd=new CaptchaDialog(owner,plugin,file,def);
      cd.countdown=countdown;
      cd.setVisible(true);
      captchaText=cd.getCaptchaText();
    }
    public void windowDeactivated(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowOpened(    WindowEvent e){
    }
  }
);
  setLayout(new GridBagLayout());
  ImageIcon imageIcon=null;
  String code=""String_Node_Str"";
  final Configuration configuration=JDUtilities.getConfiguration();
  imageIcon=new ImageIcon(file.getAbsolutePath());
  if (plugin != null && plugin.getCaptchaDetectionID() != Plugin.CAPTCHA_USER_INPUT && !configuration.getBooleanProperty(Configuration.PARAM_CAPTCHA_JAC_DISABLE,false) && JAntiCaptcha.hasMethod(JDUtilities.getJACMethodsDirectory(),plugin.getHost())) {
    setTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    final String host=plugin.getHost();
    this.jacThread=new Thread(""String_Node_Str""){
      public void run(){
        String code=JDUtilities.getCaptcha(plugin,host,file,true);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        if (textField.getText().length() == 0 || code.toLowerCase().startsWith(textField.getText().toLowerCase())) {
          textField.setText(code);
          if (isVisible() && textField.getText().equalsIgnoreCase(code) && textField.getText().length() > 0) {
            captchaText=textField.getText();
            dispose();
          }
        }
 else {
          textField.setText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
          setTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        }
      }
    }
;
    this.jacThread.start();
  }
 else {
    this.countdownThread=new Thread(){
      public void run(){
        int c=countdown * 1000;
        long t=System.currentTimeMillis();
        while (c >= 0) {
          if (!isVisible())           return;
          t=System.currentTimeMillis();
          setTitle(""String_Node_Str"" + JDUtilities.formatSeconds(c / 1000));
          if (c < 3000)           JDSounds.P(""String_Node_Str"");
          long dif=System.currentTimeMillis() - t;
          c-=dif;
          try {
            if (dif < 1000)             Thread.sleep(1000 - dif);
            c-=(1000 - dif);
          }
 catch (          InterruptedException e) {
          }
        }
        captchaText=textField.getText();
        dispose();
      }
    }
;
    this.countdownThread.start();
  }
  JLabel label=new JLabel(imageIcon);
  textField=new JTextField(10);
  if (def != null)   code=def;
  btnOK=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  btnBAD=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  textField.setText(code);
  textField.selectAll();
  btnOK.addActionListener(this);
  btnBAD.addActionListener(this);
  getRootPane().setDefaultButton(btnOK);
  setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
  JDUtilities.addToGridBag(this,label,0,0,2,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(this,textField,0,1,1,1,1,1,null,GridBagConstraints.NONE,GridBagConstraints.EAST);
  JDUtilities.addToGridBag(this,btnOK,1,1,1,1,1,1,null,GridBagConstraints.NONE,GridBagConstraints.WEST);
  JDUtilities.addToGridBag(this,btnBAD,2,1,1,1,1,1,null,GridBagConstraints.NONE,GridBagConstraints.WEST);
  if (plugin != null && plugin.getLastCaptcha() != null && plugin.getLastCaptcha().getLetterComperators() != null) {
    JPanel p=new JPanel();
    p.add(new JLabel(""String_Node_Str""));
    JDUtilities.addToGridBag(this,p,0,2,2,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.CENTER);
    if (JDUtilities.getSubConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",true)) {
      JPanel p2=new JPanel();
      p2.add(new JLabel(""String_Node_Str""));
      JPanel p3=new JPanel();
      p3.add(new JLabel(""String_Node_Str""));
      LetterComperator[] lcs=plugin.getLastCaptcha().getLetterComperators();
      for (int i=0; i < lcs.length; i++) {
        Letter a=lcs[i].getA();
        Letter b=lcs[i].getB();
        if (a != null)         p.add(new JLabel(new ImageIcon(a.getImage(2))));
        if (b != null)         p2.add(new JLabel(new ImageIcon(b.getImage(2))));
        p3.add(new JLabel(""String_Node_Str"" + Math.round(lcs[i].getValityPercent())));
      }
      JDUtilities.addToGridBag(this,p2,0,3,2,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.CENTER);
      JDUtilities.addToGridBag(this,p3,0,4,2,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.CENTER);
    }
  }
  pack();
  setLocation(JDUtilities.getCenterOfComponent(null,this));
  textField.requestFocusInWindow();
}","/** 
 * Erstellt einen neuen Dialog.
 * @param owner Das übergeordnete Fenster
 * @param plugin Das Plugin, das dieses Captcha auslesen möchte (name des Hosts wird von JAC benötigt)
 * @param file Pfad des Bildes, das angezeigt werden soll
 */
public CaptchaDialog(final Frame owner,final Plugin plugin,final File file,final String def){
  super(owner);
  JDSounds.PT(""String_Node_Str"");
  setModal(true);
  addWindowListener(new WindowListener(){
    public void windowActivated(    WindowEvent e){
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      dispose();
      CaptchaDialog cd=new CaptchaDialog(owner,plugin,file,def);
      cd.countdown=countdown;
      cd.setVisible(true);
      captchaText=cd.getCaptchaText();
    }
    public void windowDeactivated(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowOpened(    WindowEvent e){
    }
  }
);
  setLayout(new GridBagLayout());
  ImageIcon imageIcon=null;
  String code=""String_Node_Str"";
  final Configuration configuration=JDUtilities.getConfiguration();
  imageIcon=new ImageIcon(file.getAbsolutePath());
  if (plugin != null && plugin.getCaptchaDetectionID() != Plugin.CAPTCHA_USER_INPUT && !configuration.getBooleanProperty(Configuration.PARAM_CAPTCHA_JAC_DISABLE,false) && JAntiCaptcha.hasMethod(JDUtilities.getJACMethodsDirectory(),plugin.getHost())) {
    setTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
    final String host=plugin.getHost();
    this.jacThread=new Thread(""String_Node_Str""){
      public void run(){
        String code=JDUtilities.getCaptcha(plugin,host,file,true);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        if (textField.getText().length() == 0 || code.toLowerCase().startsWith(textField.getText().toLowerCase())) {
          textField.setText(code);
          if (isVisible() && textField.getText().equalsIgnoreCase(code) && textField.getText().length() > 0) {
            captchaText=textField.getText();
            dispose();
          }
        }
 else {
          textField.setText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
          setTitle(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        }
      }
    }
;
    this.jacThread.start();
  }
 else {
    this.countdownThread=new Thread(){
      public void run(){
        int c=countdown * 1000;
        long t=System.currentTimeMillis();
        while (c >= 0) {
          if (!isVisible())           return;
          t=System.currentTimeMillis();
          setTitle(""String_Node_Str"" + JDUtilities.formatSeconds(c / 1000));
          if (c < 3000)           JDSounds.P(""String_Node_Str"");
          long dif=System.currentTimeMillis() - t;
          c-=dif;
          try {
            if (dif < 1000)             Thread.sleep(1000 - dif);
            c-=(1000 - dif);
          }
 catch (          InterruptedException e) {
          }
          if (!isVisible())           return;
        }
        captchaText=textField.getText();
        dispose();
      }
    }
;
    this.countdownThread.start();
  }
  JLabel label=new JLabel(imageIcon);
  textField=new JTextField(10);
  if (def != null)   code=def;
  btnOK=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  btnBAD=new JButton(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  textField.setText(code);
  textField.selectAll();
  btnOK.addActionListener(this);
  btnBAD.addActionListener(this);
  getRootPane().setDefaultButton(btnOK);
  setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
  JDUtilities.addToGridBag(this,label,0,0,2,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(this,textField,0,1,1,1,1,1,null,GridBagConstraints.NONE,GridBagConstraints.EAST);
  JDUtilities.addToGridBag(this,btnOK,1,1,1,1,1,1,null,GridBagConstraints.NONE,GridBagConstraints.WEST);
  JDUtilities.addToGridBag(this,btnBAD,2,1,1,1,1,1,null,GridBagConstraints.NONE,GridBagConstraints.WEST);
  if (plugin != null && plugin.getLastCaptcha() != null && plugin.getLastCaptcha().getLetterComperators() != null) {
    JPanel p=new JPanel();
    p.add(new JLabel(""String_Node_Str""));
    JDUtilities.addToGridBag(this,p,0,2,2,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.CENTER);
    if (JDUtilities.getSubConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",true)) {
      JPanel p2=new JPanel();
      p2.add(new JLabel(""String_Node_Str""));
      JPanel p3=new JPanel();
      p3.add(new JLabel(""String_Node_Str""));
      LetterComperator[] lcs=plugin.getLastCaptcha().getLetterComperators();
      for (int i=0; i < lcs.length; i++) {
        Letter a=lcs[i].getA();
        Letter b=lcs[i].getB();
        if (a != null)         p.add(new JLabel(new ImageIcon(a.getImage(2))));
        if (b != null)         p2.add(new JLabel(new ImageIcon(b.getImage(2))));
        p3.add(new JLabel(""String_Node_Str"" + Math.round(lcs[i].getValityPercent())));
      }
      JDUtilities.addToGridBag(this,p2,0,3,2,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.CENTER);
      JDUtilities.addToGridBag(this,p3,0,4,2,1,0,0,null,GridBagConstraints.NONE,GridBagConstraints.CENTER);
    }
  }
  pack();
  setLocation(JDUtilities.getCenterOfComponent(null,this));
  textField.requestFocusInWindow();
}"
21351,"@SuppressWarnings(""String_Node_Str"") public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String method=requ[0];
  String cPath=requ[1];
  String protocol=requ[2];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
        ;
      }
 else       requestParameter.put(key,value);
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (url.startsWith(""String_Node_Str"") == true) {
synchronized (JDWebinterface.Link_Adder_Packages) {
      for (int i=0; i <= JDWebinterface.Link_Adder_Packages.size(); i++) {
        if (requestParameter.containsKey(""String_Node_Str"" + i)) {
          JDWebinterface.Link_Adder_Packages.get(i).setName(requestParameter.get(""String_Node_Str"" + i).toString());
        }
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0)         setspeed=0;
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      ;
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1)         maxdls=1;
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
      }
 else       JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              logger.info(""String_Node_Str"");
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              logger.info(""String_Node_Str"");
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    if (!file.exists()) {
                      file.mkdirs();
                    }
                    if (file.exists()) {
                      fp.setDownloadDirectory(file.getAbsolutePath());
                    }
 else {
                      fp.setDownloadDirectory(fp.getDownloadDirectory());
                    }
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=0; index < JDWebinterface.Link_Adder_Packages.size(); index++) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0)               JDWebinterface.Link_Adder_Packages.remove(index);
            }
          }
        }
      }
      ;
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setStatus(DownloadLink.STATUS_TODO);
              link.setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      JDUtilities.getController().requestReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(5000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jds=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      JDUtilities.getController().startDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      JDUtilities.getController().stopDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(5000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdr=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> LinkstoAdd=new DistributeData(AddLinks).findLinks();
        for (int i=0; i < LinkstoAdd.size(); i++) {
          attachLinkTopackage(LinkstoAdd.get(i));
        }
      }
    }
    ;
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String password_list=JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str""));
        JUnrar unrar=new JUnrar(false);
        unrar.editPasswordlist(JDUtilities.splitByNewline(password_list));
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
    ;
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
    ;
  }
}","@SuppressWarnings(""String_Node_Str"") public void handle(){
  String request=headers.get(null);
  String[] requ=request.split(""String_Node_Str"");
  String method=requ[0];
  String cPath=requ[1];
  String protocol=requ[2];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=JDUtilities.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
        ;
      }
 else       requestParameter.put(key,value);
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (url.startsWith(""String_Node_Str"") == true) {
synchronized (JDWebinterface.Link_Adder_Packages) {
      for (int i=0; i <= JDWebinterface.Link_Adder_Packages.size(); i++) {
        if (requestParameter.containsKey(""String_Node_Str"" + i)) {
          JDWebinterface.Link_Adder_Packages.get(i).setName(JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
        }
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0)         setspeed=0;
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      ;
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1)         maxdls=1;
        JDUtilities.getSubConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,false);
      }
 else       JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (JDWebinterface.Link_Adder_Packages) {
          Integer download_id=0;
          Integer package_id=0;
          String[] ids;
          int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
          int counter_index=0;
          DownloadLink link;
          int index;
          Vector<DownloadLink> links=new Vector<DownloadLink>();
          for (counter_index=1; counter_index <= counter_max; counter_index++) {
            if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
              ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
              package_id=JDUtilities.filterInt(ids[0].toString());
              download_id=JDUtilities.filterInt(ids[1].toString());
              links.add(JDWebinterface.Link_Adder_Packages.get(package_id).get(download_id));
            }
          }
          if (requestParameter.containsKey(""String_Node_Str"")) {
            String dowhat=requestParameter.get(""String_Node_Str"");
            if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              logger.info(""String_Node_Str"");
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                link.getFilePackage().remove(link);
              }
            }
 else             if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
              logger.info(""String_Node_Str"");
              for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                link=it.next();
                FilePackage fp=null;
                for (int i=0; i < JDUtilities.getController().getPackages().size(); i++) {
                  if (link.getFilePackage().getName().compareToIgnoreCase(JDUtilities.getController().getPackages().get(i).getName()) == 0) {
                    fp=JDUtilities.getController().getPackages().get(i);
                  }
                }
                if (fp == null) {
                  fp=new FilePackage();
                  fp.setName(link.getFilePackage().getName());
                  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_PACKETNAME_AS_SUBFOLDER,false)) {
                    File file=new File(new File(fp.getDownloadDirectory()),fp.getName());
                    if (!file.exists()) {
                      file.mkdirs();
                    }
                    if (file.exists()) {
                      fp.setDownloadDirectory(file.getAbsolutePath());
                    }
 else {
                      fp.setDownloadDirectory(fp.getDownloadDirectory());
                    }
                  }
                }
                fp.add(link);
                link.setFilePackage(fp);
                JDUtilities.getController().addLink(link);
              }
              JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,null));
            }
            for (index=JDWebinterface.Link_Adder_Packages.size() - 1; index >= 0; index--) {
              if (JDWebinterface.Link_Adder_Packages.get(index).size() == 0)               JDWebinterface.Link_Adder_Packages.remove(index);
            }
          }
        }
      }
      ;
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        int counter_max=JDUtilities.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        Vector<DownloadLink> links=new Vector<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=JDUtilities.filterInt(ids[0].toString());
            download_id=JDUtilities.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinks().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setStatus(DownloadLink.STATUS_TODO);
              link.setStatusText(""String_Node_Str"");
              link.reset();
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            JDUtilities.getController().removeDownloadLinks(links);
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_LINKLIST_STRUCTURE_CHANGED,this));
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            JDUtilities.getController().fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADLINKS_DATA_CHANGED,this));
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      JDUtilities.getController().requestReconnect();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
class JDClose implements Runnable {
        JDClose(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(5000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.getController().exit();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDClose jds=new JDClose();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      JDUtilities.getController().startDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      JDUtilities.getController().stopDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
class JDRestart implements Runnable {
        JDRestart(){
          new Thread(this).start();
        }
        public void run(){
          try {
            Thread.sleep(5000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          JDUtilities.restartJD();
        }
      }
      @SuppressWarnings(""String_Node_Str"") JDRestart jdr=new JDRestart();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String AddLinks=JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str""));
        Vector<DownloadLink> LinkstoAdd=new DistributeData(AddLinks).findLinks();
        for (int i=0; i < LinkstoAdd.size(); i++) {
          attachLinkTopackage(LinkstoAdd.get(i));
        }
      }
    }
    ;
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      logger.info(""String_Node_Str"");
      if (requestParameter.containsKey(""String_Node_Str"")) {
        String password_list=JDUtilities.htmlDecode(requestParameter.get(""String_Node_Str""));
        JUnrar unrar=new JUnrar(false);
        unrar.editPasswordlist(JDUtilities.splitByNewline(password_list));
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    String tempurl=url + ""String_Node_Str"";
    File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
    ;
  }
  if (!fileToRead.exists()) {
    response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
    ;
  }
}"
21352,"@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  if (parameter.matches(""String_Node_Str"")) {
    boolean isP=parameter.contains(""String_Node_Str"");
    int catst=getSerienJunkiesCat(isP);
    scatChecked=false;
    int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
    if (sCatNewestDownload == catst) {
      request.withHtmlCode=false;
      request.redirect=false;
      request.getRequest(""String_Node_Str"");
      request.withHtmlCode=true;
      request.getRequest(""String_Node_Str"");
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(request.getHtmlCode());
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          break;
        }
      }
      if (name == null)       return null;
      request.getRequest(parameter);
      name+=""String_Node_Str"";
      String[] bet=null;
      while (bet == null) {
        name=name.substring(0,name.length() - 1);
        if (name.length() == 0)         return null;
        try {
          bet=request.getRegexp(""String_Node_Str"" + name + ""String_Node_Str"").getMatches()[0];
        }
 catch (        Exception e) {
        }
      }
      lastHtmlCode=request.getHtmlCode();
      String[] links=getHttpLinks(bet[1],request.urlToString());
      for (int i=0; i < links.length; i++) {
        decryptedLinks.add(this.createDownloadlink(links[i]));
      }
      step.setParameter(decryptedLinks);
      return null;
    }
 else     if (catst == sCatGrabb) {
      String htmlcode=""String_Node_Str"";
      if (isP) {
        request.getRequest(parameter);
        htmlcode=request.getHtmlCode();
      }
 else {
        request.getRequest(""String_Node_Str"" + cat);
        htmlcode=request.getHtmlCode();
        try {
          int pages=Integer.parseInt(request.getRegexp(""String_Node_Str"").getFirstMatch());
          for (int i=2; i < pages + 1; i++) {
            htmlcode+=""String_Node_Str"" + request.getRequest(""String_Node_Str"" + cat + ""String_Node_Str""+ i);
          }
        }
 catch (        Exception e) {
        }
      }
      String[] titles=htmlcode.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      for (int g=0; g < titles.length; g++) {
        String title=new Regexp(titles[g],""String_Node_Str"").getFirstMatch();
        String[] sp=titles[g].split(""String_Node_Str"");
        for (int d=0; d < sp.length; d++) {
          String size=new Regexp(sp[d],""String_Node_Str"").getFirstMatch();
          String[][] links=new Regexp(sp[d],""String_Node_Str"").getMatches();
          for (int i=0; i < links.length; i++) {
            String[] links2=getHttpLinks(links[i][1],parameter);
            for (int j=0; j < links2.length; j++) {
              if (canHandle(links2[j])) {
                if (this.getProperties().getBooleanProperty(""String_Node_Str"",false)) {
                  step.setParameter((new jd.plugins.host.Serienjunkies()).getDLinks(links2[j]));
                }
 else {
                  decryptedLinks.add(createdl(links2[j],new String[]{size,links[i][0],links[i][1],title}));
                  step.setParameter(decryptedLinks);
                }
              }
            }
          }
        }
      }
      step.setParameter(decryptedLinks);
      return null;
    }
 else {
      return null;
    }
  }
if (this.getProperties().getBooleanProperty(""String_Node_Str"",false)) {
  step.setParameter((new jd.plugins.host.Serienjunkies()).getDLinks(parameter));
}
 else {
  String[] info=getLinkName(parameter);
  if (info == null) {
    request.getRequest(""String_Node_Str"" + parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    lastHtmlCode=request.getHtmlCode();
    info=getLinkName(parameter);
  }
  decryptedLinks.add(createdl(parameter,info));
  step.setParameter(decryptedLinks);
}
}
return null;
}","@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  if (parameter.matches(""String_Node_Str"")) {
    boolean isP=parameter.contains(""String_Node_Str"");
    int catst=getSerienJunkiesCat(isP);
    scatChecked=false;
    int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
    if (sCatNewestDownload == catst) {
      request.withHtmlCode=false;
      request.redirect=false;
      request.getRequest(""String_Node_Str"");
      request.withHtmlCode=true;
      request.getRequest(""String_Node_Str"");
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(request.getHtmlCode());
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          break;
        }
      }
      if (name == null)       return null;
      request.getRequest(parameter);
      name+=""String_Node_Str"";
      String[] bet=null;
      while (bet == null) {
        name=name.substring(0,name.length() - 1);
        if (name.length() == 0)         return null;
        try {
          bet=request.getRegexp(""String_Node_Str"" + name + ""String_Node_Str"").getMatches()[0];
        }
 catch (        Exception e) {
        }
      }
      lastHtmlCode=request.getHtmlCode();
      String[] links=getHttpLinks(bet[1],request.urlToString());
      for (int i=0; i < links.length; i++) {
        decryptedLinks.add(this.createDownloadlink(links[i]));
      }
      step.setParameter(decryptedLinks);
      return null;
    }
 else     if (catst == sCatGrabb) {
      String htmlcode=""String_Node_Str"";
      if (isP) {
        request.getRequest(parameter);
        htmlcode=request.getHtmlCode();
      }
 else {
        request.getRequest(""String_Node_Str"" + cat);
        htmlcode=request.getHtmlCode();
        try {
          int pages=Integer.parseInt(request.getRegexp(""String_Node_Str"").getFirstMatch());
          for (int i=2; i < pages + 1; i++) {
            htmlcode+=""String_Node_Str"" + request.getRequest(""String_Node_Str"" + cat + ""String_Node_Str""+ i);
          }
        }
 catch (        Exception e) {
        }
      }
      String[] titles=htmlcode.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      for (int g=0; g < titles.length; g++) {
        String title=new Regexp(titles[g],""String_Node_Str"").getFirstMatch();
        String[] sp=titles[g].split(""String_Node_Str"");
        for (int d=0; d < sp.length; d++) {
          String size=new Regexp(sp[d],""String_Node_Str"").getFirstMatch();
          String[][] links=new Regexp(sp[d],""String_Node_Str"").getMatches();
          for (int i=0; i < links.length; i++) {
            String[] links2=getHttpLinks(links[i][1],parameter);
            for (int j=0; j < links2.length; j++) {
              if (canHandle(links2[j])) {
                if (this.getProperties().getBooleanProperty(""String_Node_Str"",false)) {
                  decryptedLinks.addAll((new jd.plugins.host.Serienjunkies()).getDLinks(links2[j]));
                }
 else {
                  decryptedLinks.add(createdl(links2[j],new String[]{size,links[i][0],links[i][1],title}));
                }
              }
            }
          }
        }
      }
      step.setParameter(decryptedLinks);
      return null;
    }
 else {
      return null;
    }
  }
if (this.getProperties().getBooleanProperty(""String_Node_Str"",false)) {
  step.setParameter((new jd.plugins.host.Serienjunkies()).getDLinks(parameter));
}
 else {
  String[] info=getLinkName(parameter);
  if (info == null) {
    request.getRequest(""String_Node_Str"" + parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    lastHtmlCode=request.getHtmlCode();
    info=getLinkName(parameter);
  }
  decryptedLinks.add(createdl(parameter,info));
  step.setParameter(decryptedLinks);
}
}
return null;
}"
21353,"@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    checkFolder();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    added=new ArrayList<String>();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    if (running) {
      threadend=false;
    }
 else {
      i=new check();
      i.start();
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    checkFolder();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    added=new ArrayList<String>();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    if (running) {
      threadend=false;
    }
 else {
      i=new check();
      i.start();
      running=true;
    }
  }
}"
21354,"@Override public void enable(boolean enable) throws Exception {
  if (JDUtilities.getJavaVersion() >= 1.5) {
    if (enable) {
      logger.info(""String_Node_Str"");
      ConfigEntry cfg;
      config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,getProperties(),""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
      cfg.setDefaultValue(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
      config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,getProperties(),""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
      cfg.setDefaultValue(true);
      i=new check();
      i.start();
    }
  }
 else {
    logger.severe(""String_Node_Str"");
  }
}","@Override public void enable(boolean enable) throws Exception {
  if (JDUtilities.getJavaVersion() >= 1.5) {
    if (enable) {
      logger.info(""String_Node_Str"");
      ConfigEntry cfg;
      config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,getProperties(),""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
      cfg.setDefaultValue(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
      config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,getProperties(),""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str""),1,60).setDefaultValue(5));
      cfg.setDefaultValue(""String_Node_Str"");
      config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,getProperties(),""String_Node_Str"",JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
      cfg.setDefaultValue(true);
      i=new check();
      i.start();
    }
  }
 else {
    logger.severe(""String_Node_Str"");
  }
}"
21355,"public void run(){
  threadend=true;
  while (threadend) {
    checkFolder();
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
  }
  running=false;
}","public void run(){
  threadend=true;
  while (threadend) {
    checkFolder();
    try {
      Thread.sleep(getWaittime());
    }
 catch (    InterruptedException e) {
    }
  }
  running=false;
}"
21356,"public void actionPerformed(ActionEvent e){
  boolean ba=false;
  if (e.getSource() == add) {
    int a=v.size() + 1;
    this.v.add(new ScheduleFrame(""String_Node_Str"" + a));
    reloadList();
    SwingUtilities.updateComponentTreeUI(this);
  }
  if (e.getSource() == remove) {
    try {
      ScheduleFrame s=(ScheduleFrame)v.elementAt(list.getSelectedIndex());
      this.v.remove(list.getSelectedIndex());
      this.reloadList();
      this.status_panel.removeAll();
      renameLabels();
      SwingUtilities.updateComponentTreeUI(this);
    }
 catch (    Exception ex) {
    }
  }
  if (e.getSource() == show) {
    try {
      int item=this.list.getSelectedIndex();
      ScheduleFrame sched;
      if (visible == false) {
        this.status.stop();
        this.status_panel.removeAll();
        sched=(ScheduleFrame)v.elementAt(item);
        visible=true;
        this.status_panel.add(sched);
        this.show.setText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        this.controls(false);
      }
 else {
        visible=false;
        this.show.setText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        this.status_panel.removeAll();
        this.status.start();
        this.controls(true);
      }
      SwingUtilities.updateComponentTreeUI(this);
    }
 catch (    Exception ex) {
    }
  }
  if (e.getSource() == status) {
    int size=v.size();
    this.status_panel.removeAll();
    this.status_panel.setLayout(new GridLayout(size,1));
    for (int i=0; i < size; ++i) {
      ScheduleFrame s=(ScheduleFrame)v.elementAt(i);
      int a=i + 1;
      this.status_panel.add(new JLabel(""String_Node_Str"" + a + ""String_Node_Str""+ s.status.getText()));
    }
    SwingUtilities.updateComponentTreeUI(this);
  }
}","public void actionPerformed(ActionEvent e){
  boolean ba=false;
  if (e.getSource() == add) {
    int a=v.size() + 1;
    this.v.add(new ScheduleFrame(""String_Node_Str"" + a));
    reloadList();
    SwingUtilities.updateComponentTreeUI(this);
  }
  if (e.getSource() == remove) {
    try {
      ScheduleFrame s=(ScheduleFrame)v.elementAt(list.getSelectedIndex());
      this.v.remove(list.getSelectedIndex());
      this.reloadList();
      this.status_panel.removeAll();
      renameLabels();
      SwingUtilities.updateComponentTreeUI(this);
    }
 catch (    Exception ex) {
    }
  }
  if (e.getSource() == show) {
    try {
      int item=this.list.getSelectedIndex();
      ScheduleFrame sched;
      if (visible == false) {
        this.status.stop();
        this.status_panel.removeAll();
        sched=(ScheduleFrame)v.elementAt(item);
        visible=true;
        this.status_panel.add(sched);
        this.show.setText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        this.controls(false);
      }
 else {
        visible=false;
        this.show.setText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
        this.status_panel.removeAll();
        this.status.start();
        this.controls(true);
      }
      SwingUtilities.updateComponentTreeUI(this);
    }
 catch (    Exception ex) {
    }
  }
  if (e.getSource() == status) {
    int size=v.size();
    this.status_panel.removeAll();
    this.status_panel.setLayout(new GridLayout(size,1));
    for (int i=0; i < size; ++i) {
      ScheduleFrame s=(ScheduleFrame)v.elementAt(i);
      int a=i + 1;
      this.status_panel.add(new JLabel(""String_Node_Str"" + a + ""String_Node_Str""+ s.status.getText()));
    }
    SwingUtilities.updateComponentTreeUI(this);
  }
  if (e.getSource() == swa) {
    if (this.sw.my_t_running == true) {
      this.sw.my_t.stop();
      this.sw.my_t_running=false;
      this.swa.setText(""String_Node_Str"");
    }
 else {
      this.sw.my_t.start();
      this.sw.my_t_running=true;
      this.swa.setText(""String_Node_Str"");
    }
  }
}"
21357,"public ScheduleControl(){
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      setVisible(false);
      int size=v.size();
      for (int i=0; i < size; ++i) {
        ScheduleFrame s=(ScheduleFrame)v.elementAt(i);
        s.setVisible(false);
      }
    }
  }
);
  this.setTitle(""String_Node_Str"");
  this.setSize(400,300);
  this.setResizable(false);
  this.setLocation(300,300);
  this.menu.setLayout(new FlowLayout());
  this.menu.add(this.list);
  this.list.add(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.menu.add(this.show);
  this.menu.add(this.add);
  this.menu.add(this.remove);
  this.getContentPane().setLayout(new FlowLayout());
  this.getContentPane().add(menu);
  this.getContentPane().add(status_panel);
  this.add.addActionListener(this);
  this.remove.addActionListener(this);
  this.show.addActionListener(this);
  SwingUtilities.updateComponentTreeUI(this);
}","public ScheduleControl(){
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      setVisible(false);
    }
  }
);
  this.setTitle(""String_Node_Str"");
  this.setSize(450,300);
  this.setResizable(false);
  this.setLocation(300,300);
  this.menu.setLayout(new FlowLayout());
  this.menu.add(this.list);
  this.list.add(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  this.menu.add(this.show);
  this.menu.add(this.add);
  this.menu.add(this.remove);
  this.menu.add(this.swa);
  this.swa.setToolTipText(""String_Node_Str"");
  this.getContentPane().setLayout(new FlowLayout());
  this.getContentPane().add(menu);
  this.getContentPane().add(status_panel);
  this.add.addActionListener(this);
  this.remove.addActionListener(this);
  this.show.addActionListener(this);
  this.swa.addActionListener(this);
  SwingUtilities.updateComponentTreeUI(this);
}"
21358,"public void windowClosing(WindowEvent e){
  setVisible(false);
  int size=v.size();
  for (int i=0; i < size; ++i) {
    ScheduleFrame s=(ScheduleFrame)v.elementAt(i);
    s.setVisible(false);
  }
}","public void windowClosing(WindowEvent e){
  setVisible(false);
}"
21359,"@Override public boolean doInteraction(Object arg){
  Configuration configuration=JDUtilities.getConfiguration();
  String script=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_REQUESTS);
  String user=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_USER);
  String pass=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_PASS);
  String ip=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_IP);
  retries++;
  logger.info(""String_Node_Str"" + retries);
  ProgressController progress=new ProgressController(JDLocale.L(""String_Node_Str"",""String_Node_Str""),10);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"" + retries));
  if (user != null || pass != null)   Authenticator.setDefault(new InternalAuthenticator(user,pass));
  if (script == null) {
    progress.finalize();
    return parseError(""String_Node_Str"");
  }
  String preIp=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + preIp);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + preIp);
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Document xmlScript;
  variables=new HashMap<String,String>();
  variables.put(""String_Node_Str"",user);
  variables.put(""String_Node_Str"",pass);
  variables.put(""String_Node_Str"",new BASE64Encoder().encode((user + ""String_Node_Str"" + pass).getBytes()));
  variables.put(""String_Node_Str"",ip);
  headerProperties=new HashMap<String,String>();
  progress.increase(1);
  try {
    xmlScript=parseXmlString(script,false);
    Node root=xmlScript.getChildNodes().item(0);
    if (root == null || !root.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      progress.finalize();
      return parseError(""String_Node_Str"");
    }
    RequestInfo requestInfo=null;
    NodeList steps=root.getChildNodes();
    progress.addToMax(steps.getLength());
    for (int step=0; step < steps.getLength(); step++) {
      progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + step);
      progress.increase(1);
      Node current=steps.item(step);
      if (current.getNodeType() == 3) {
        continue;
      }
      if (!current.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
        progress.finalize();
        return parseError(""String_Node_Str"" + current.getNodeName());
      }
      NodeList toDos=current.getChildNodes();
      for (int toDoStep=0; toDoStep < toDos.getLength(); toDoStep++) {
        Node toDo=toDos.item(toDoStep);
        progress.setStatusText(JDUtilities.sprintf(JDLocale.L(""String_Node_Str"",""String_Node_Str""),new String[]{toDo.getNodeName()}));
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          NamedNodeMap attributes=toDo.getAttributes();
          for (int attribute=0; attribute < attributes.getLength(); attribute++) {
            String key=attributes.item(attribute).getNodeName();
            String value=attributes.item(attribute).getNodeValue();
            String[] tmp=value.split(""String_Node_Str"");
            ArrayList<String> params=Plugin.getAllSimpleMatches(value,""String_Node_Str"",1);
            if (params.size() > 0) {
              String req;
              if (value.startsWith(params.get(0))) {
                req=""String_Node_Str"";
                logger.finer(""String_Node_Str"" + this.variables);
                logger.finer(""String_Node_Str"" + this.headerProperties);
                for (int i=0; i <= tmp.length; i++) {
                  logger.finer(""String_Node_Str"" + params.get(i - 1) + ""String_Node_Str"");
                  req+=getModifiedVariable(params.get(i - 1));
                  if (i < tmp.length) {
                    req+=tmp[i];
                  }
                }
              }
 else {
                req=tmp[0];
                logger.finer(""String_Node_Str"" + this.variables);
                logger.finer(""String_Node_Str"" + this.headerProperties);
                for (int i=1; i <= tmp.length; i++) {
                  if (i > params.size())                   continue;
                  logger.finer(""String_Node_Str"" + params.get(i - 1) + ""String_Node_Str"");
                  req+=getModifiedVariable(params.get(i - 1));
                  if (i < tmp.length) {
                    req+=tmp[i];
                  }
                }
              }
              value=req;
            }
            variables.put(key,value);
          }
          logger.finer(""String_Node_Str"" + variables);
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          if (toDo.getChildNodes().getLength() != 1) {
            progress.finalize();
            return parseError(""String_Node_Str"");
          }
          requestInfo=doRequest(toDo.getChildNodes().item(0).getNodeValue().trim());
          if (requestInfo == null) {
            logger.severe(""String_Node_Str"" + toDo.getChildNodes().item(0).getNodeValue().trim());
          }
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          logger.finer(""String_Node_Str"");
          if (toDo.getChildNodes().getLength() != 1) {
            progress.finalize();
            return parseError(""String_Node_Str"");
          }
          NamedNodeMap attributes=toDo.getAttributes();
          if (attributes.getNamedItem(""String_Node_Str"") == null) {
            progress.finalize();
            return parseError(""String_Node_Str"" + toDo);
          }
          String[] keys=attributes.getNamedItem(""String_Node_Str"").getNodeValue().split(""String_Node_Str"");
          getVariables(toDo.getChildNodes().item(0).getNodeValue().trim(),keys,requestInfo);
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          NamedNodeMap attributes=toDo.getAttributes();
          Node item=attributes.getNamedItem(""String_Node_Str"");
          logger.finer(""String_Node_Str"" + item.getNodeValue() + ""String_Node_Str"");
          if (item == null) {
            return parseError(""String_Node_Str"");
          }
          int seconds=JDUtilities.filterInt(item.getNodeValue());
          Thread.sleep(seconds * 1000);
        }
      }
    }
  }
 catch (  SAXException e) {
    progress.finalize();
    return this.parseError(e.getMessage());
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
    progress.finalize();
    return this.parseError(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    progress.finalize();
    return this.parseError(e.getCause() + ""String_Node_Str"" + e.getMessage());
  }
  int waittime=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_IPCHECKWAITTIME,0);
  int maxretries=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_RETRIES,0);
  int waitForIp=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_WAITFORIPCHANGE,10);
  logger.finer(""String_Node_Str"" + waittime + ""String_Node_Str"");
  progress.increase(1);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  try {
    Thread.sleep(waittime * 1000);
  }
 catch (  InterruptedException e) {
  }
  String afterIP=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + afterIP);
  progress.increase(1);
  String pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
  progress.setStatusText(JDUtilities.sprintf(pattern,new String[]{preIp,afterIP}));
  long endTime=System.currentTimeMillis() + waitForIp * 1000;
  while (System.currentTimeMillis() <= endTime && (afterIP.equalsIgnoreCase(""String_Node_Str"") || afterIP == null || afterIP.equals(preIp))) {
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException e) {
    }
    afterIP=JDUtilities.getIPAddress();
    pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
    progress.setStatusText(JDUtilities.sprintf(pattern,new String[]{preIp,afterIP}));
    logger.finer(""String_Node_Str"" + afterIP);
  }
  if (!afterIP.equals(preIp) && !afterIP.equalsIgnoreCase(""String_Node_Str"")) {
    progress.finalize();
    logger.info(""String_Node_Str"" + afterIP);
    return true;
  }
  if (retries <= maxretries) {
    progress.finalize();
    return doInteraction(arg);
  }
  progress.finalize();
  logger.info(""String_Node_Str"" + afterIP);
  return false;
}","@Override public boolean doInteraction(Object arg){
  Configuration configuration=JDUtilities.getConfiguration();
  String script=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_REQUESTS);
  String user=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_USER);
  String pass=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_PASS);
  String ip=configuration.getStringProperty(Configuration.PARAM_HTTPSEND_IP);
  retries++;
  logger.info(""String_Node_Str"" + retries);
  ProgressController progress=new ProgressController(JDLocale.L(""String_Node_Str"",""String_Node_Str""),10);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"" + retries));
  if (user != null || pass != null)   Authenticator.setDefault(new InternalAuthenticator(user,pass));
  if (script == null) {
    progress.finalize();
    return parseError(""String_Node_Str"");
  }
  String preIp=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + preIp);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + preIp);
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  script=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Document xmlScript;
  variables=new HashMap<String,String>();
  variables.put(""String_Node_Str"",user);
  variables.put(""String_Node_Str"",pass);
  variables.put(""String_Node_Str"",new BASE64Encoder().encode((user + ""String_Node_Str"" + pass).getBytes()));
  variables.put(""String_Node_Str"",ip);
  headerProperties=new HashMap<String,String>();
  progress.increase(1);
  try {
    xmlScript=parseXmlString(script,false);
    Node root=xmlScript.getChildNodes().item(0);
    if (root == null || !root.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      progress.finalize();
      return parseError(""String_Node_Str"");
    }
    RequestInfo requestInfo=null;
    NodeList steps=root.getChildNodes();
    progress.addToMax(steps.getLength());
    for (int step=0; step < steps.getLength(); step++) {
      progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str"") + step);
      progress.increase(1);
      Node current=steps.item(step);
      if (current.getNodeType() == 3) {
        continue;
      }
      if (!current.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
        progress.finalize();
        return parseError(""String_Node_Str"" + current.getNodeName());
      }
      NodeList toDos=current.getChildNodes();
      for (int toDoStep=0; toDoStep < toDos.getLength(); toDoStep++) {
        Node toDo=toDos.item(toDoStep);
        try {
          progress.setStatusText(JDUtilities.sprintf(JDLocale.L(""String_Node_Str"",""String_Node_Str""),new String[]{toDo.getNodeName()}));
        }
 catch (        Exception e) {
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          NamedNodeMap attributes=toDo.getAttributes();
          for (int attribute=0; attribute < attributes.getLength(); attribute++) {
            String key=attributes.item(attribute).getNodeName();
            String value=attributes.item(attribute).getNodeValue();
            String[] tmp=value.split(""String_Node_Str"");
            ArrayList<String> params=Plugin.getAllSimpleMatches(value,""String_Node_Str"",1);
            if (params.size() > 0) {
              String req;
              if (value.startsWith(params.get(0))) {
                req=""String_Node_Str"";
                logger.finer(""String_Node_Str"" + this.variables);
                logger.finer(""String_Node_Str"" + this.headerProperties);
                for (int i=0; i <= tmp.length; i++) {
                  logger.finer(""String_Node_Str"" + params.get(i - 1) + ""String_Node_Str"");
                  req+=getModifiedVariable(params.get(i - 1));
                  if (i < tmp.length) {
                    req+=tmp[i];
                  }
                }
              }
 else {
                req=tmp[0];
                logger.finer(""String_Node_Str"" + this.variables);
                logger.finer(""String_Node_Str"" + this.headerProperties);
                for (int i=1; i <= tmp.length; i++) {
                  if (i > params.size())                   continue;
                  logger.finer(""String_Node_Str"" + params.get(i - 1) + ""String_Node_Str"");
                  req+=getModifiedVariable(params.get(i - 1));
                  if (i < tmp.length) {
                    req+=tmp[i];
                  }
                }
              }
              value=req;
            }
            variables.put(key,value);
          }
          logger.finer(""String_Node_Str"" + variables);
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          if (toDo.getChildNodes().getLength() != 1) {
            progress.finalize();
            return parseError(""String_Node_Str"");
          }
          requestInfo=doRequest(toDo.getChildNodes().item(0).getNodeValue().trim());
          if (requestInfo == null) {
            logger.severe(""String_Node_Str"" + toDo.getChildNodes().item(0).getNodeValue().trim());
          }
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          logger.finer(""String_Node_Str"");
          if (toDo.getChildNodes().getLength() != 1) {
            progress.finalize();
            return parseError(""String_Node_Str"");
          }
          NamedNodeMap attributes=toDo.getAttributes();
          if (attributes.getNamedItem(""String_Node_Str"") == null) {
            progress.finalize();
            return parseError(""String_Node_Str"" + toDo);
          }
          String[] keys=attributes.getNamedItem(""String_Node_Str"").getNodeValue().split(""String_Node_Str"");
          getVariables(toDo.getChildNodes().item(0).getNodeValue().trim(),keys,requestInfo);
        }
        if (toDo.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
          NamedNodeMap attributes=toDo.getAttributes();
          Node item=attributes.getNamedItem(""String_Node_Str"");
          logger.finer(""String_Node_Str"" + item.getNodeValue() + ""String_Node_Str"");
          if (item == null) {
            return parseError(""String_Node_Str"");
          }
          int seconds=JDUtilities.filterInt(item.getNodeValue());
          Thread.sleep(seconds * 1000);
        }
      }
    }
  }
 catch (  SAXException e) {
    progress.finalize();
    return this.parseError(e.getMessage());
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
    progress.finalize();
    return this.parseError(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
    progress.finalize();
    return this.parseError(e.getCause() + ""String_Node_Str"" + e.getMessage());
  }
  int waittime=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_IPCHECKWAITTIME,0);
  int maxretries=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_RETRIES,0);
  int waitForIp=configuration.getIntegerProperty(Configuration.PARAM_HTTPSEND_WAITFORIPCHANGE,10);
  logger.finer(""String_Node_Str"" + waittime + ""String_Node_Str"");
  progress.increase(1);
  progress.setStatusText(JDLocale.L(""String_Node_Str"",""String_Node_Str""));
  try {
    Thread.sleep(waittime * 1000);
  }
 catch (  InterruptedException e) {
  }
  String afterIP=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + afterIP);
  progress.increase(1);
  String pattern;
  try {
    pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
    progress.setStatusText(JDUtilities.sprintf(pattern,new String[]{preIp,afterIP}));
  }
 catch (  Exception e) {
  }
  long endTime=System.currentTimeMillis() + waitForIp * 1000;
  while (System.currentTimeMillis() <= endTime && (afterIP.equalsIgnoreCase(""String_Node_Str"") || afterIP == null || afterIP.equals(preIp))) {
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException e) {
    }
    afterIP=JDUtilities.getIPAddress();
    try {
      pattern=JDLocale.L(""String_Node_Str"",""String_Node_Str"");
      progress.setStatusText(JDUtilities.sprintf(pattern,new String[]{preIp,afterIP}));
    }
 catch (    Exception e) {
    }
    logger.finer(""String_Node_Str"" + afterIP);
  }
  if (!afterIP.equals(preIp) && !afterIP.equalsIgnoreCase(""String_Node_Str"")) {
    progress.finalize();
    logger.info(""String_Node_Str"" + afterIP);
    return true;
  }
  if (retries <= maxretries) {
    progress.finalize();
    return doInteraction(arg);
  }
  progress.finalize();
  logger.info(""String_Node_Str"" + afterIP);
  return false;
}"
21360,"private Vector<String> ContainerLinks(String url){
  Vector<String> links=new Vector<String>();
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    RequestInfo reqinfo=getRequest(new URL(url));
    String cookie=reqinfo.getCookie();
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,false);
        }
        ArrayList<ArrayList<String>> gifs=getAllSimpleMatches(reqinfo.getHtmlCode(),patternCaptcha);
        String captchaAdress=""String_Node_Str"" + gifs.get(0).get(1);
        HTTPConnection con=getRequestWithoutHtmlCode(new URL(captchaAdress),cookie,null,true).getConnection();
        if (con.getContentLength() < 1000) {
          while (!JDUtilities.getController().requestReconnect()) {
            try {
              Thread.sleep(5000);
            }
 catch (            InterruptedException e) {
            }
          }
          reqinfo=getRequest(new URL(url));
          cookie=reqinfo.getCookie();
          continue;
        }
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,con);
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
            cookie=reqinfo.getCookie();
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        logger.info(""String_Node_Str"" + captchaFile);
        capTxt=Plugin.getCaptchaCode(captchaFile,this);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,true);
          if (useUserinputIfCaptchaUnknown() && this.getCaptchaDetectionID() == Plugin.CAPTCHA_USER_INPUT && this.getLastCaptcha() != null && this.getLastCaptcha().getLetterComperators() != null) {
            LetterComperator[] lcs=this.getLastCaptcha().getLetterComperators();
            this.getLastCaptcha().setCorrectcaptchaCode(capTxt.trim());
            if (lcs.length == capTxt.trim().length()) {
              for (int i=0; i < capTxt.length(); i++) {
                if (lcs[i] != null && lcs[i].getDecodedValue() != null && capTxt.substring(i,i + 1).equalsIgnoreCase(lcs[i].getDecodedValue()) && lcs[i].getValityPercent() < 30.0) {
                  logger.severe(""String_Node_Str"" + i + ""String_Node_Str""+ lcs[i].getDecodedValue()+ ""String_Node_Str""+ lcs[i].getValityPercent()+ ""String_Node_Str""+ capTxt.substring(i,i + 1));
                }
 else {
                  logger.severe(""String_Node_Str"" + i + ""String_Node_Str""+ lcs[i].getDecodedValue()+ ""String_Node_Str""+ lcs[i].getValityPercent()+ ""String_Node_Str""+ capTxt.substring(i,i + 1));
                  final String character=capTxt.substring(i,i + 1);
                  logger.info(""String_Node_Str"");
                  Letter letter=lcs[i].getA();
                  String captchaHash=UTILITIES.getLocalHash(captchaFile);
                  letter.setSourcehash(captchaHash);
                  letter.setOwner(this.getLastCaptcha().owner);
                  letter.setDecodedValue(character);
                  this.getLastCaptcha().owner.letterDB.add(letter);
                  this.getLastCaptcha().owner.saveMTHFile();
                }
              }
            }
 else {
              logger.info(""String_Node_Str"");
            }
          }
        }
        break;
      }
    }
    if (reqinfo.getLocation() != null) {
      links.add(reqinfo.getLocation());
    }
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(reqinfo.getHtmlCode());
    while (matcher.find()) {
      reqinfo=getRequest(new URL(matcher.group(1)));
      reqinfo=getRequest(new URL(getBetween(reqinfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"")));
      String loc=reqinfo.getLocation();
      if (loc != null)       links.add(loc);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}","private Vector<String> ContainerLinks(String url){
  Vector<String> links=new Vector<String>();
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    RequestInfo reqinfo=getRequest(new URL(url));
    String cookie=reqinfo.getCookie();
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,false);
        }
        ArrayList<ArrayList<String>> gifs=getAllSimpleMatches(reqinfo.getHtmlCode(),patternCaptcha);
        String captchaAdress=""String_Node_Str"" + gifs.get(0).get(1);
        HTTPConnection con=getRequestWithoutHtmlCode(new URL(captchaAdress),cookie,null,true).getConnection();
        if (con.getContentLength() < 1000) {
          while (!JDUtilities.getController().requestReconnect()) {
            try {
              Thread.sleep(5000);
            }
 catch (            InterruptedException e) {
            }
          }
          reqinfo=getRequest(new URL(url));
          cookie=reqinfo.getCookie();
          continue;
        }
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,con);
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
            cookie=reqinfo.getCookie();
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        logger.info(""String_Node_Str"" + captchaFile);
        capTxt=Plugin.getCaptchaCode(captchaFile,this);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(this,captchaFile,capTxt,true);
          if (useUserinputIfCaptchaUnknown() && this.getCaptchaDetectionID() == Plugin.CAPTCHA_USER_INPUT && this.getLastCaptcha() != null && this.getLastCaptcha().getLetterComperators() != null) {
            LetterComperator[] lcs=this.getLastCaptcha().getLetterComperators();
            this.getLastCaptcha().setCorrectcaptchaCode(capTxt.trim());
            if (lcs.length == capTxt.trim().length()) {
              for (int i=0; i < capTxt.length(); i++) {
                if (lcs[i] != null && lcs[i].getDecodedValue() != null && capTxt.substring(i,i + 1).equalsIgnoreCase(lcs[i].getDecodedValue()) && lcs[i].getValityPercent() < 30.0) {
                  logger.severe(""String_Node_Str"" + i + ""String_Node_Str""+ lcs[i].getDecodedValue()+ ""String_Node_Str""+ lcs[i].getValityPercent()+ ""String_Node_Str""+ capTxt.substring(i,i + 1));
                }
 else {
                  logger.severe(""String_Node_Str"" + i + ""String_Node_Str""+ lcs[i].getDecodedValue()+ ""String_Node_Str""+ lcs[i].getValityPercent()+ ""String_Node_Str""+ capTxt.substring(i,i + 1));
                  final String character=capTxt.substring(i,i + 1);
                  logger.info(""String_Node_Str"");
                  Letter letter=lcs[i].getA();
                  String captchaHash=UTILITIES.getLocalHash(captchaFile);
                  letter.setSourcehash(captchaHash);
                  letter.setOwner(this.getLastCaptcha().owner);
                  letter.setDecodedValue(character);
                  this.getLastCaptcha().owner.letterDB.add(letter);
                  this.getLastCaptcha().owner.saveMTHFile();
                }
              }
            }
 else {
              logger.info(""String_Node_Str"");
            }
          }
        }
        break;
      }
    }
    if (reqinfo.getLocation() != null) {
      links.add(reqinfo.getLocation());
    }
    Form[] forms=reqinfo.getForms();
    for (int i=0; i < forms.length; i++) {
      if (!forms[i].action.contains(""String_Node_Str"")) {
        try {
          reqinfo=getRequest(new URL(forms[i].action));
          reqinfo=getRequest(new URL(getBetween(reqinfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"")),null,null,false);
          String loc=reqinfo.getLocation();
          if (loc != null)           links.add(loc);
        }
 catch (        Exception e) {
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}"
21361,"private void setConfigElements(){
  Vector<String> m1=new Vector<String>();
  Vector<String> m2=new Vector<String>();
  for (int i=0; i < serverList1.length; i++)   m1.add(getServerName(serverList1[i]));
  for (int i=0; i < serverList2.length; i++)   m2.add(getServerName(serverList2[i]));
  m1.add(""String_Node_Str"");
  m2.add(""String_Node_Str"");
  ConfigEntry cfg;
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,getProperties(),PROPERTY_SELECTED_SERVER,m1.toArray(new String[]{}),""String_Node_Str""));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,getProperties(),PROPERTY_SELECTED_SERVER2,m2.toArray(new String[]{}),""String_Node_Str""));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_TELEKOMSERVER,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_PRESELECTED,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(true);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,getProperties(),PROPERTY_PREMIUM_USER,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_PASSWORDFIELD,getProperties(),PROPERTY_PREMIUM_PASS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,getProperties(),PROPERTY_PREMIUM_USER_2,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_PASSWORDFIELD,getProperties(),PROPERTY_PREMIUM_PASS_2,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_PREMIUM_2,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,getProperties(),PROPERTY_PREMIUM_USER_3,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_PASSWORDFIELD,getProperties(),PROPERTY_PREMIUM_PASS_3,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_PREMIUM_3,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_SSL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_FREE_IF_LIMIT_NOT_REACHED,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,getProperties(),PROPERTY_WAIT_WHEN_BOT_DETECTED,JDLocale.L(""String_Node_Str"",""String_Node_Str""),-1,600000).setDefaultValue(-1).setStep(1000));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,getProperties(),PROPERTY_INCREASE_TICKET,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,500).setDefaultValue(0).setExpertEntry(true).setStep(1));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,getProperties(),PROPERTY_BYTES_TO_LOAD,JDLocale.L(""String_Node_Str"",""String_Node_Str""),-1,100000).setDefaultValue(-1).setStep(500));
  cfg.setDefaultValue(true);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
}","private void setConfigElements(){
  Vector<String> m1=new Vector<String>();
  Vector<String> m2=new Vector<String>();
  for (int i=0; i < serverList1.length; i++)   m1.add(getServerName(serverList1[i]));
  for (int i=0; i < serverList2.length; i++)   m2.add(getServerName(serverList2[i]));
  m1.add(""String_Node_Str"");
  m2.add(""String_Node_Str"");
  ConfigEntry cfg;
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,getProperties(),PROPERTY_SELECTED_SERVER,m1.toArray(new String[]{}),""String_Node_Str""));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,getProperties(),PROPERTY_SELECTED_SERVER2,m2.toArray(new String[]{}),""String_Node_Str""));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_TELEKOMSERVER,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_PRESELECTED,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(true);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,getProperties(),PROPERTY_PREMIUM_USER,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_PASSWORDFIELD,getProperties(),PROPERTY_PREMIUM_PASS,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_PREMIUM,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,getProperties(),PROPERTY_PREMIUM_USER_2,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_PASSWORDFIELD,getProperties(),PROPERTY_PREMIUM_PASS_2,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_PREMIUM_2,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,""String_Node_Str"" + JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,getProperties(),PROPERTY_PREMIUM_USER_3,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_PASSWORDFIELD,getProperties(),PROPERTY_PREMIUM_PASS_3,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(""String_Node_Str"");
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_PREMIUM_3,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_USE_SSL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,getProperties(),PROPERTY_FREE_IF_LIMIT_NOT_REACHED,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  cfg.setDefaultValue(false);
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,getProperties(),PROPERTY_WAIT_WHEN_BOT_DETECTED,JDLocale.L(""String_Node_Str"",""String_Node_Str""),-1,600000).setDefaultValue(-1).setStep(1000));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,getProperties(),PROPERTY_INCREASE_TICKET,JDLocale.L(""String_Node_Str"",""String_Node_Str""),0,500).setDefaultValue(0).setExpertEntry(true).setStep(1));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,getProperties(),PROPERTY_BYTES_TO_LOAD,JDLocale.L(""String_Node_Str"",""String_Node_Str""),-1,100000).setDefaultValue(-1).setStep(500));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_LABEL,JDLocale.L(""String_Node_Str"",""String_Node_Str"")));
}"
21362,"/** 
 * Diese Methode erstellt einen neuen Captchadialog und liefert den eingegebenen Text zurück.
 * @param controller Der Controller
 * @param plugin Das Plugin, das dieses Captcha fordert
 * @param host der Host von dem die Methode verwendet werden soll
 * @param file
 * @return Der vom Benutzer eingegebene Text
 */
public static String getCaptcha(Plugin plugin,String method,File file,boolean forceJAC){
  String host;
  if (method == null) {
    host=plugin.getHost();
  }
 else {
    host=method;
  }
  logger.info(""String_Node_Str"" + host + ""String_Node_Str""+ JAntiCaptcha.hasMethod(getJACMethodsDirectory(),host));
  if (forceJAC || (JAntiCaptcha.hasMethod(getJACMethodsDirectory(),host) && JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_JAC_METHODS + ""String_Node_Str"" + host,true) && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_CAPTCHA_INPUT_SHOWTIME,0) <= 0 && !configuration.getBooleanProperty(Configuration.PARAM_CAPTCHA_JAC_DISABLE,false))) {
    if (!JAntiCaptcha.hasMethod(getJACMethodsDirectory(),host) || !JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_JAC_METHODS + ""String_Node_Str"" + host,true)) {
      return null;
    }
    JFrame jf=new JFrame();
    Image captchaImage=new JFrame().getToolkit().getImage(file.getAbsolutePath());
    MediaTracker mediaTracker=new MediaTracker(jf);
    mediaTracker.addImage(captchaImage,0);
    try {
      mediaTracker.waitForID(0);
    }
 catch (    InterruptedException e) {
      return null;
    }
    mediaTracker.removeImage(captchaImage);
    JAntiCaptcha jac=new JAntiCaptcha(getJACMethodsDirectory(),host);
    Captcha captcha=jac.createCaptcha(captchaImage);
    String captchaCode=jac.checkCaptcha(captcha);
    logger.info(""String_Node_Str"" + captchaCode);
    logger.info(""String_Node_Str"" + captcha.getValityPercent());
    plugin.setLastCaptcha(captcha);
    String code=null;
    plugin.setCaptchaDetectID(Plugin.CAPTCHA_JAC);
    LetterComperator[] lcs=captcha.getLetterComperators();
    double vp=0.0;
    for (int i=0; i < lcs.length; i++) {
      vp=Math.max(vp,lcs[i].getValityPercent());
    }
    logger.info(""String_Node_Str"" + vp);
    if (vp > 14.0) {
      plugin.setCaptchaDetectID(Plugin.CAPTCHA_USER_INPUT);
      code=getController().getCaptchaCodeFromUser(plugin,file,captchaCode);
    }
 else {
      return captchaCode;
    }
    if (code.equals(captchaCode))     return captchaCode;
    return code;
  }
 else {
    return getController().getCaptchaCodeFromUser(plugin,file,null);
  }
}","/** 
 * Diese Methode erstellt einen neuen Captchadialog und liefert den eingegebenen Text zurück.
 * @param controller Der Controller
 * @param plugin Das Plugin, das dieses Captcha fordert
 * @param host der Host von dem die Methode verwendet werden soll
 * @param file
 * @return Der vom Benutzer eingegebene Text
 */
public static String getCaptcha(Plugin plugin,String method,File file,boolean forceJAC){
  String host;
  if (method == null) {
    host=plugin.getHost();
  }
 else {
    host=method;
  }
  logger.info(""String_Node_Str"" + host + ""String_Node_Str""+ JAntiCaptcha.hasMethod(getJACMethodsDirectory(),host));
  if (forceJAC || (JAntiCaptcha.hasMethod(getJACMethodsDirectory(),host) && JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_JAC_METHODS + ""String_Node_Str"" + host,true) && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_CAPTCHA_INPUT_SHOWTIME,0) <= 0 && !configuration.getBooleanProperty(Configuration.PARAM_CAPTCHA_JAC_DISABLE,false))) {
    if (!JAntiCaptcha.hasMethod(getJACMethodsDirectory(),host) || !JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_JAC_METHODS + ""String_Node_Str"" + host,true)) {
      return null;
    }
    JFrame jf=new JFrame();
    Image captchaImage=new JFrame().getToolkit().getImage(file.getAbsolutePath());
    MediaTracker mediaTracker=new MediaTracker(jf);
    mediaTracker.addImage(captchaImage,0);
    try {
      mediaTracker.waitForID(0);
    }
 catch (    InterruptedException e) {
      return null;
    }
    mediaTracker.removeImage(captchaImage);
    JAntiCaptcha jac=new JAntiCaptcha(getJACMethodsDirectory(),host);
    Captcha captcha=jac.createCaptcha(captchaImage);
    String captchaCode=jac.checkCaptcha(captcha);
    logger.info(""String_Node_Str"" + captchaCode);
    logger.info(""String_Node_Str"" + captcha.getValityPercent());
    plugin.setLastCaptcha(captcha);
    String code=null;
    plugin.setCaptchaDetectID(Plugin.CAPTCHA_JAC);
    LetterComperator[] lcs=captcha.getLetterComperators();
    if (lcs == null)     return null;
    double vp=0.0;
    for (int i=0; i < lcs.length; i++) {
      vp=Math.max(vp,lcs[i].getValityPercent());
    }
    logger.info(""String_Node_Str"" + vp);
    if (vp > 14.0) {
      plugin.setCaptchaDetectID(Plugin.CAPTCHA_USER_INPUT);
      code=getController().getCaptchaCodeFromUser(plugin,file,captchaCode);
    }
 else {
      return captchaCode;
    }
    if (code.equals(captchaCode))     return captchaCode;
    return code;
  }
 else {
    return getController().getCaptchaCodeFromUser(plugin,file,null);
  }
}"
21363,"public PluginStep doFreeStep(PluginStep step,DownloadLink downloadLink) throws Exception {
switch (step.getStep()) {
case PluginStep.STEP_WAIT_TIME:
    Form[] forms=Form.getForms(downloadLink.getDownloadURL());
  if (forms.length < 2) {
    step.setStatus(PluginStep.STATUS_ERROR);
    logger.severe(""String_Node_Str"");
    downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_NOT_FOUND);
    return null;
  }
form=forms[1];
form.remove(""String_Node_Str"");
form.put(""String_Node_Str"",""String_Node_Str"");
requestInfo=form.getRequestInfo();
return step;
case PluginStep.STEP_PENDING:
if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
return step;
}
try {
waittime=Long.parseLong(new Regexp(requestInfo.getHtmlCode(),""String_Node_Str"").getFirstMatch()) * 1000;
}
 catch (Exception e) {
try {
waittime=Long.parseLong(new Regexp(requestInfo.getHtmlCode(),""String_Node_Str"").getFirstMatch()) * 60000;
downloadLink.setStatus(DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT);
step.setStatus(PluginStep.STATUS_ERROR);
}
 catch (Exception es) {
step.setStatus(PluginStep.STATUS_ERROR);
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
return null;
}
}
step.setParameter((long)waittime);
return step;
case PluginStep.STEP_GET_CAPTCHA_FILE:
String ticketCode=JDUtilities.htmlDecode(new Regexp(requestInfo.getHtmlCode(),""String_Node_Str"").getFirstMatch());
RequestInfo req=new RequestInfo(ticketCode,null,requestInfo.getCookie(),requestInfo.getHeaders(),requestInfo.getResponseCode());
req.setConnection(requestInfo.getConnection());
form=Form.getForms(req)[0];
captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
String captchaAdress=new Regexp(ticketCode,""String_Node_Str"").getFirstMatch();
logger.info(""String_Node_Str"" + captchaAdress);
boolean fileDownloaded=JDUtilities.download(captchaFile,getRequestWithoutHtmlCode(new URL(captchaAdress),requestInfo.getCookie(),null,true).getConnection());
if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
step.setStatus(PluginStep.STATUS_ERROR);
return step;
}
try {
code=Plugin.getCaptchaCode(captchaFile,this);
}
 catch (Exception e) {
}
if (code == null || code == ""String_Node_Str"") {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_BOT_DETECTED);
step.setStatus(PluginStep.STATUS_ERROR);
JDUtilities.appendInfoToFilename(captchaFile,""String_Node_Str"",false);
return step;
}
form.put(""String_Node_Str"",code);
step=nextStep(step);
case PluginStep.STEP_DOWNLOAD:
if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
return step;
}
URLConnection urlConnection=form.getConnection();
downloadLink.setName(getFileNameFormHeader(urlConnection));
downloadLink.setDownloadMax(urlConnection.getContentLength());
if (!hasEnoughHDSpace(downloadLink)) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_NO_FREE_SPACE);
step.setStatus(PluginStep.STATUS_ERROR);
return step;
}
int errorid;
if ((errorid=download(downloadLink,urlConnection)) == DOWNLOAD_SUCCESS) {
step.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
JDUtilities.appendInfoToFilename(captchaFile,""String_Node_Str"" + code,true);
return null;
}
 else if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
}
 else {
if (errorid != DOWNLOAD_ERROR_DOWNLOAD_INCOMPLETE && errorid != DOWNLOAD_ERROR_INVALID_OUTPUTFILE && errorid != DOWNLOAD_ERROR_OUTPUTFILE_ALREADYEXISTS && errorid != DOWNLOAD_ERROR_RENAME_FAILED && errorid != DOWNLOAD_ERROR_SECURITY) {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
JDUtilities.appendInfoToFilename(captchaFile,""String_Node_Str"" + code,false);
}
step.setStatus(PluginStep.STATUS_ERROR);
}
}
return step;
}","public PluginStep doFreeStep(PluginStep step,DownloadLink downloadLink) throws Exception {
switch (step.getStep()) {
case PluginStep.STEP_WAIT_TIME:
    Form[] forms=Form.getForms(downloadLink.getDownloadURL());
  if (forms.length < 2) {
    step.setStatus(PluginStep.STATUS_ERROR);
    logger.severe(""String_Node_Str"");
    downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_NOT_FOUND);
    return null;
  }
form=forms[1];
form.remove(""String_Node_Str"");
form.put(""String_Node_Str"",""String_Node_Str"");
requestInfo=form.getRequestInfo();
return step;
case PluginStep.STEP_PENDING:
if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
return step;
}
try {
waittime=Long.parseLong(new Regexp(requestInfo.getHtmlCode(),""String_Node_Str"").getFirstMatch()) * 1000;
}
 catch (Exception e) {
try {
waittime=Long.parseLong(new Regexp(requestInfo.getHtmlCode(),""String_Node_Str"").getFirstMatch()) * 60000;
downloadLink.setStatus(DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT);
step.setStatus(PluginStep.STATUS_ERROR);
}
 catch (Exception es) {
step.setStatus(PluginStep.STATUS_ERROR);
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
return null;
}
}
step.setParameter((long)waittime);
return step;
case PluginStep.STEP_GET_CAPTCHA_FILE:
String ticketCode=JDUtilities.htmlDecode(new Regexp(requestInfo.getHtmlCode(),""String_Node_Str"").getFirstMatch());
RequestInfo req=new RequestInfo(ticketCode,null,requestInfo.getCookie(),requestInfo.getHeaders(),requestInfo.getResponseCode());
req.setConnection(requestInfo.getConnection());
form=Form.getForms(req)[0];
captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
String captchaAdress=new Regexp(ticketCode,""String_Node_Str"").getFirstMatch();
logger.info(""String_Node_Str"" + captchaAdress);
boolean fileDownloaded=JDUtilities.download(captchaFile,getRequestWithoutHtmlCode(new URL(captchaAdress),requestInfo.getCookie(),null,true).getConnection());
if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
step.setStatus(PluginStep.STATUS_ERROR);
return step;
}
try {
code=Plugin.getCaptchaCode(captchaFile,this);
}
 catch (Exception e) {
}
if (code == null || code == ""String_Node_Str"") {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_BOT_DETECTED);
step.setStatus(PluginStep.STATUS_ERROR);
JDUtilities.appendInfoToFilename(captchaFile,""String_Node_Str"",false);
return step;
}
form.put(""String_Node_Str"",code);
step.setStatus(PluginStep.STATUS_SKIP);
return step;
case PluginStep.STEP_DOWNLOAD:
if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
return step;
}
URLConnection urlConnection=form.getConnection();
downloadLink.setName(getFileNameFormHeader(urlConnection));
downloadLink.setDownloadMax(urlConnection.getContentLength());
if (!hasEnoughHDSpace(downloadLink)) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_NO_FREE_SPACE);
step.setStatus(PluginStep.STATUS_ERROR);
return step;
}
int errorid;
if ((errorid=download(downloadLink,urlConnection)) == DOWNLOAD_SUCCESS) {
step.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
JDUtilities.appendInfoToFilename(captchaFile,""String_Node_Str"" + code,true);
return null;
}
 else if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
}
 else {
if (errorid != DOWNLOAD_ERROR_DOWNLOAD_INCOMPLETE && errorid != DOWNLOAD_ERROR_INVALID_OUTPUTFILE && errorid != DOWNLOAD_ERROR_OUTPUTFILE_ALREADYEXISTS && errorid != DOWNLOAD_ERROR_RENAME_FAILED && errorid != DOWNLOAD_ERROR_SECURITY) {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
JDUtilities.appendInfoToFilename(captchaFile,""String_Node_Str"" + code,false);
}
step.setStatus(PluginStep.STATUS_ERROR);
}
}
return step;
}"
21364,"private Vector<String> ContainerLinks(String url){
  Vector<String> links=new Vector<String>();
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    RequestInfo reqinfo=getRequest(new URL(url));
    String cookie=reqinfo.getCookie();
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,false);
        }
        Vector<Vector<String>> gifs=getAllSimpleMatches(reqinfo.getHtmlCode(),patternCaptcha);
        String captchaAdress=""String_Node_Str"" + gifs.firstElement().get(1);
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,getRequestWithoutHtmlCode(new URL(captchaAdress),cookie,null,true).getConnection());
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
            cookie=reqinfo.getCookie();
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=Plugin.getCaptchaCode(captchaFile,this);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,true);
        }
        break;
      }
    }
    if (reqinfo.getLocation() != null) {
      links.add(reqinfo.getLocation());
    }
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(reqinfo.getHtmlCode());
    while (matcher.find()) {
      reqinfo=getRequest(new URL(matcher.group(1)));
      reqinfo=getRequest(new URL(getBetween(reqinfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"")));
      String loc=reqinfo.getLocation();
      if (loc != null)       links.add(loc);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}","private Vector<String> ContainerLinks(String url){
  Vector<String> links=new Vector<String>();
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    RequestInfo reqinfo=getRequest(new URL(url));
    reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
    String cookie=reqinfo.getCookie();
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,false);
        }
        Vector<Vector<String>> gifs=getAllSimpleMatches(reqinfo.getHtmlCode(),patternCaptcha);
        String captchaAdress=""String_Node_Str"" + gifs.firstElement().get(1);
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,getRequestWithoutHtmlCode(new URL(captchaAdress),cookie,null,true).getConnection());
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
            reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
            cookie=reqinfo.getCookie();
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=Plugin.getCaptchaCode(captchaFile,this);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,true);
        }
        break;
      }
    }
    if (reqinfo.getLocation() != null) {
      links.add(reqinfo.getLocation());
    }
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(reqinfo.getHtmlCode());
    while (matcher.find()) {
      reqinfo=getRequest(new URL(matcher.group(1)));
      reqinfo=getRequest(new URL(getBetween(reqinfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"")));
      String loc=reqinfo.getLocation();
      if (loc != null)       links.add(loc);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}"
21365,"@Override public Pattern getSupportedLinks(){
  boolean rscom=(Boolean)this.getProperties().getProperty(""String_Node_Str"",true);
  boolean rsde=(Boolean)this.getProperties().getProperty(""String_Node_Str"",false);
  boolean net=(Boolean)this.getProperties().getProperty(""String_Node_Str"",false);
  boolean uploaded=(Boolean)this.getProperties().getProperty(""String_Node_Str"",false);
  boolean cat=(Boolean)this.getProperties().getProperty(""String_Node_Str"",true);
  next=false;
  String hosterStr=""String_Node_Str"";
  if (rscom || rsde || net|| uploaded) {
    hosterStr+=""String_Node_Str"";
    if (rscom)     hosterStr+=isNext() + ""String_Node_Str"";
    if (rsde)     hosterStr+=isNext() + ""String_Node_Str"";
    if (net)     hosterStr+=isNext() + ""String_Node_Str"";
    if (uploaded)     hosterStr+=isNext() + ""String_Node_Str"";
    if (cat)     hosterStr+=isNext() + ""String_Node_Str"";
    hosterStr+=""String_Node_Str"";
  }
 else {
    hosterStr+=""String_Node_Str"";
  }
  return Pattern.compile(""String_Node_Str"" + (cat ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ hosterStr+ ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
}","@Override public Pattern getSupportedLinks(){
  return null;
}"
21366,"private String EinzelLinks(String url){
  String links=""String_Node_Str"";
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    RequestInfo reqinfo=getRequest(new URL(url));
    String cookie=reqinfo.getCookie();
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,false);
        }
        String captchaAdress=""String_Node_Str"" + matcher.group(2);
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,getRequestWithoutHtmlCode(new URL(captchaAdress),cookie,null,true).getConnection());
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
            cookie=reqinfo.getCookie();
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=JDUtilities.getCaptcha(this,""String_Node_Str"",captchaFile,false);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,true);
        }
        break;
      }
    }
    links=reqinfo.getLocation();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}","private String EinzelLinks(String url){
  String links=""String_Node_Str"";
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
    RequestInfo reqinfo=getRequest(new URL(url));
    reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
    String cookie=reqinfo.getCookie();
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,false);
        }
        String captchaAdress=""String_Node_Str"" + matcher.group(2);
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,getRequestWithoutHtmlCode(new URL(captchaAdress),cookie,null,true).getConnection());
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
            reqinfo.setHtmlCode(reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
            cookie=reqinfo.getCookie();
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=JDUtilities.getCaptcha(this,""String_Node_Str"",captchaFile,false);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,true);
        }
        break;
      }
    }
    links=reqinfo.getLocation();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}"
21367,"@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  try {
    URL url=new URL(parameter);
    if (parameter.matches(""String_Node_Str"")) {
      request.withHtmlCode=false;
      request.redirect=false;
      request.getRequest(""String_Node_Str"");
      request.withHtmlCode=true;
      request.getRequest(""String_Node_Str"");
      int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(request.getHtmlCode());
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          System.out.println(name);
          break;
        }
      }
      if (name == null)       return null;
      request.getRequest(parameter);
      name+=""String_Node_Str"";
      String bet=null;
      while (bet == null) {
        name=name.substring(0,name.length() - 1);
        if (name.length() == 0)         return null;
        bet=request.getRegexp(""String_Node_Str"" + name + ""String_Node_Str"").getFirstMatch();
      }
      String[] links=getHttpLinks(bet,request.urlToString());
      for (int i=0; i < links.length; i++) {
        decryptedLinks.add(this.createDownloadlink(links[i]));
      }
      step.setParameter(decryptedLinks);
      return null;
    }
    String modifiedURL=url.toString();
    modifiedURL=modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
    modifiedURL=modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
    modifiedURL=modifiedURL.substring(modifiedURL.lastIndexOf(""String_Node_Str""));
    patternCaptcha=Pattern.compile(String.format(dynamicCaptcha,new Object[]{modifiedURL}));
    logger.fine(""String_Node_Str"" + patternCaptcha);
    RequestInfo reqinfo=getRequest(url,null,null,true);
    if (reqinfo.getLocation() != null)     reqinfo=getRequest(url,null,null,true);
    String furl=getSimpleMatch(reqinfo.getHtmlCode(),""String_Node_Str"" + modifiedURL + ""String_Node_Str"",0);
    if (furl != null) {
      url=new URL(furl + modifiedURL);
      logger.info(""String_Node_Str"" + furl + modifiedURL);
      reqinfo=getRequest(url,null,null,true);
      parameter=furl + modifiedURL;
    }
    Vector<Vector<String>> links;
    links=getAllSimpleMatches(reqinfo.getHtmlCode(),""String_Node_Str"");
    Vector<String> helpvector=new Vector<String>();
    String helpstring=""String_Node_Str"";
    if (parameter.indexOf(""String_Node_Str"") >= 0 || parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpstring=EinzelLinks(parameter);
      progress.increase(1);
      decryptedLinks.add(this.createDownloadlink(helpstring));
    }
 else     if (parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpvector=ContainerLinks(parameter);
      progress.increase(1);
      for (int j=0; j < helpvector.size(); j++) {
        decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
      }
    }
 else     if (parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpvector=ContainerLinks(parameter);
      progress.increase(1);
      for (int j=0; j < helpvector.size(); j++) {
        decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
      }
    }
 else {
      logger.info(""String_Node_Str"");
      progress.setRange(links.size());
      for (int i=0; i < links.size(); i++) {
        progress.increase(1);
        if (links.get(i).get(0).indexOf(""String_Node_Str"") >= 0) {
          helpstring=EinzelLinks(links.get(i).get(0));
          decryptedLinks.add(this.createDownloadlink(helpstring));
        }
 else         if (links.get(i).get(0).indexOf(""String_Node_Str"") >= 0) {
          helpvector=ContainerLinks(links.get(i).get(0));
          for (int j=0; j < helpvector.size(); j++) {
            decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
          }
        }
 else {
          decryptedLinks.add(this.createDownloadlink(links.get(i).get(0)));
          decryptedLinks.add(this.createDownloadlink(links.get(i).get(0)));
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
step.setParameter(decryptedLinks);
}
return null;
}","@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  try {
    URL url=new URL(parameter);
    if (parameter.matches(""String_Node_Str"")) {
      request.withHtmlCode=false;
      request.redirect=false;
      request.getRequest(""String_Node_Str"");
      request.withHtmlCode=true;
      request.getRequest(""String_Node_Str"");
      int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(request.getHtmlCode());
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          break;
        }
      }
      if (name == null)       return null;
      request.getRequest(parameter);
      name+=""String_Node_Str"";
      String bet=null;
      while (bet == null) {
        name=name.substring(0,name.length() - 1);
        if (name.length() == 0)         return null;
        bet=request.getRegexp(""String_Node_Str"" + name + ""String_Node_Str"").getFirstMatch();
      }
      String[] links=getHttpLinks(bet,request.urlToString());
      for (int i=0; i < links.length; i++) {
        decryptedLinks.add(this.createDownloadlink(links[i]));
      }
      step.setParameter(decryptedLinks);
      return null;
    }
    String modifiedURL=JDUtilities.htmlDecode(url.toString());
    modifiedURL=modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
    modifiedURL=modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
    modifiedURL=modifiedURL.substring(modifiedURL.lastIndexOf(""String_Node_Str""));
    patternCaptcha=Pattern.compile(dynamicCaptcha);
    logger.fine(""String_Node_Str"" + patternCaptcha);
    RequestInfo reqinfo=getRequest(url,null,null,true);
    if (reqinfo.getLocation() != null)     reqinfo=getRequest(url,null,null,true);
    String furl=getSimpleMatch(reqinfo.getHtmlCode(),""String_Node_Str"" + modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",0);
    if (furl != null) {
      url=new URL(furl + modifiedURL);
      logger.info(""String_Node_Str"" + furl + modifiedURL);
      reqinfo=getRequest(url,null,null,true);
      parameter=furl + modifiedURL;
    }
    Vector<Vector<String>> links;
    links=getAllSimpleMatches(reqinfo.getHtmlCode(),""String_Node_Str"");
    Vector<String> helpvector=new Vector<String>();
    String helpstring=""String_Node_Str"";
    if (parameter.indexOf(""String_Node_Str"") >= 0 || parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpstring=EinzelLinks(parameter);
      progress.increase(1);
      decryptedLinks.add(this.createDownloadlink(helpstring));
    }
 else     if (parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpvector=ContainerLinks(parameter);
      progress.increase(1);
      for (int j=0; j < helpvector.size(); j++) {
        decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
      }
    }
 else     if (parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpvector=ContainerLinks(parameter);
      progress.increase(1);
      for (int j=0; j < helpvector.size(); j++) {
        decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
      }
    }
 else {
      logger.info(""String_Node_Str"");
      progress.setRange(links.size());
      for (int i=0; i < links.size(); i++) {
        progress.increase(1);
        if (links.get(i).get(0).indexOf(""String_Node_Str"") >= 0) {
          helpstring=EinzelLinks(links.get(i).get(0));
          decryptedLinks.add(this.createDownloadlink(helpstring));
        }
 else         if (links.get(i).get(0).indexOf(""String_Node_Str"") >= 0) {
          helpvector=ContainerLinks(links.get(i).get(0));
          for (int j=0; j < helpvector.size(); j++) {
            decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
          }
        }
 else {
          decryptedLinks.add(this.createDownloadlink(links.get(i).get(0)));
          decryptedLinks.add(this.createDownloadlink(links.get(i).get(0)));
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
step.setParameter(decryptedLinks);
}
return null;
}"
21368,"public String toString(){
  try {
    return requestInfo.getHtmlCode();
  }
 catch (  Exception ec) {
  }
  return null;
}","public String toString(){
  return captchaCode.toString();
}"
21369,"@SuppressWarnings(""String_Node_Str"") public URLConnection getConnection(){
  if (method == METHOD_UNKNOWN) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    return null;
  }
 else   if (method == METHOD_PUT) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    return null;
  }
  if (baseRequest == null)   return null;
  URL baseurl=baseRequest.getConnection().getURL();
  if (action == null || action.matches(""String_Node_Str"")) {
    if (baseurl == null)     return null;
    action=baseurl.toString();
  }
 else   if (!action.matches(""String_Node_Str"")) {
    if (baseurl == null)     return null;
    if (action.charAt(0) == '/')     action=""String_Node_Str"" + baseurl.getHost() + action;
 else     if (action.charAt(0) == '?' || action.charAt(0) == '&') {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str""))       action=base + action;
 else       action=base + ""String_Node_Str"" + action;
    }
 else {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str""))       action=base.substring(0,base.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + action;
 else       action=base + ""String_Node_Str"" + action;
    }
  }
  StringBuffer stbuffer=new StringBuffer();
  boolean first=true;
  for (  Map.Entry<String,String> entry : vars.entrySet()) {
    if (first)     first=false;
 else     stbuffer.append(""String_Node_Str"");
    stbuffer.append(entry.getKey());
    stbuffer.append(""String_Node_Str"");
    stbuffer.append(JDUtilities.urlEncode(entry.getValue()));
  }
  String varString=stbuffer.toString();
  if (method == METHOD_GET) {
    if (varString != null && !varString.matches(""String_Node_Str"")) {
      if (action.matches(""String_Node_Str""))       action+=""String_Node_Str"";
 else       if (action.matches(""String_Node_Str""))       action+=""String_Node_Str"";
      action+=varString;
    }
    try {
      URLConnection urlConnection=new URL(action).openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConnection.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      for (      Map.Entry<String,String> entry : requestPoperties.entrySet()) {
        urlConnection.setRequestProperty(entry.getKey(),entry.getValue());
      }
      urlConnection.setRequestProperty(""String_Node_Str"",baseurl.toString());
      return urlConnection;
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (method == METHOD_POST) {
    try {
      URLConnection urlConnection=new URL(action).openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConnection.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      for (      Map.Entry<String,String> entry : requestPoperties.entrySet()) {
        urlConnection.setRequestProperty(entry.getKey(),entry.getValue());
      }
      urlConnection.setRequestProperty(""String_Node_Str"",baseurl.toString());
      urlConnection.setDoOutput(true);
      OutputStreamWriter wr=new OutputStreamWriter(urlConnection.getOutputStream());
      wr.write(varString);
      wr.flush();
      wr.close();
      return urlConnection;
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (method == METHOD_FILEPOST) {
    try {
      String boundary=MultiPartFormOutputStream.createBoundary();
      URLConnection urlConn=MultiPartFormOutputStream.createConnection(new URL(action));
      urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConn.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConn.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      for (      Map.Entry<String,String> entry : requestPoperties.entrySet()) {
        urlConn.setRequestProperty(entry.getKey(),entry.getValue());
      }
      urlConn.setRequestProperty(""String_Node_Str"",baseurl.toString());
      urlConn.setRequestProperty(""String_Node_Str"",MultiPartFormOutputStream.getContentType(boundary));
      urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      MultiPartFormOutputStream out=new MultiPartFormOutputStream(urlConn.getOutputStream(),boundary);
      for (      Map.Entry<String,String> entry : vars.entrySet()) {
        out.writeField(entry.getKey(),URLEncoder.encode(entry.getValue()));
      }
      out.writeFile(filetoPostName,null,fileToPost);
      out.close();
      return urlConn;
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public URLConnection getConnection(){
  if (method == METHOD_UNKNOWN) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    return null;
  }
 else   if (method == METHOD_PUT) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    return null;
  }
  if (baseRequest == null)   return null;
  URL baseurl=baseRequest.getConnection().getURL();
  if (action == null || action.matches(""String_Node_Str"")) {
    if (baseurl == null)     return null;
    action=baseurl.toString();
  }
 else   if (!action.matches(""String_Node_Str"")) {
    if (baseurl == null)     return null;
    if (action.charAt(0) == '/')     action=""String_Node_Str"" + baseurl.getHost() + action;
 else     if (action.charAt(0) == '&') {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str""))       action=base + action;
 else       action=base + ""String_Node_Str"" + action;
    }
 else     if (action.charAt(0) == '?') {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str"")) {
        action=base.replaceFirst(""String_Node_Str"",""String_Node_Str"") + action;
      }
 else       action=base + ""String_Node_Str"" + action;
    }
 else {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str""))       action=base.substring(0,base.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + action;
 else       action=base + ""String_Node_Str"" + action;
    }
  }
  StringBuffer stbuffer=new StringBuffer();
  boolean first=true;
  for (  Map.Entry<String,String> entry : vars.entrySet()) {
    if (first)     first=false;
 else     stbuffer.append(""String_Node_Str"");
    stbuffer.append(entry.getKey());
    stbuffer.append(""String_Node_Str"");
    stbuffer.append(JDUtilities.urlEncode(entry.getValue()));
  }
  String varString=stbuffer.toString();
  if (method == METHOD_GET) {
    if (varString != null && !varString.matches(""String_Node_Str"")) {
      if (action.matches(""String_Node_Str""))       action+=""String_Node_Str"";
 else       if (action.matches(""String_Node_Str""))       action+=""String_Node_Str"";
      action+=varString;
    }
    try {
      URLConnection urlConnection=new URL(action).openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConnection.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      for (      Map.Entry<String,String> entry : requestPoperties.entrySet()) {
        urlConnection.setRequestProperty(entry.getKey(),entry.getValue());
      }
      urlConnection.setRequestProperty(""String_Node_Str"",baseurl.toString());
      return urlConnection;
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (method == METHOD_POST) {
    try {
      URLConnection urlConnection=new URL(action).openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConnection.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      for (      Map.Entry<String,String> entry : requestPoperties.entrySet()) {
        urlConnection.setRequestProperty(entry.getKey(),entry.getValue());
      }
      urlConnection.setRequestProperty(""String_Node_Str"",baseurl.toString());
      urlConnection.setDoOutput(true);
      OutputStreamWriter wr=new OutputStreamWriter(urlConnection.getOutputStream());
      wr.write(varString);
      wr.flush();
      wr.close();
      return urlConnection;
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (method == METHOD_FILEPOST) {
    try {
      String boundary=MultiPartFormOutputStream.createBoundary();
      URLConnection urlConn=MultiPartFormOutputStream.createConnection(new URL(action));
      urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConn.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConn.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      for (      Map.Entry<String,String> entry : requestPoperties.entrySet()) {
        urlConn.setRequestProperty(entry.getKey(),entry.getValue());
      }
      urlConn.setRequestProperty(""String_Node_Str"",baseurl.toString());
      urlConn.setRequestProperty(""String_Node_Str"",MultiPartFormOutputStream.getContentType(boundary));
      urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      MultiPartFormOutputStream out=new MultiPartFormOutputStream(urlConn.getOutputStream(),boundary);
      for (      Map.Entry<String,String> entry : vars.entrySet()) {
        out.writeField(entry.getKey(),URLEncoder.encode(entry.getValue()));
      }
      out.writeFile(filetoPostName,null,fileToPost);
      out.close();
      return urlConn;
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}"
21370,"private String execprozess(File file,String password){
  try {
    LinkedList<String> params=new LinkedList<String>();
    if (password != ""String_Node_Str"") {
      params.add(""String_Node_Str"" + password);
    }
 else {
      params.add(""String_Node_Str"");
    }
    if (overwriteFiles) {
      params.add(""String_Node_Str"");
    }
 else {
      params.add(""String_Node_Str"");
    }
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    File parent;
    boolean b=false;
    if (extractFolder != null && extractFolder.isDirectory()) {
      b=true;
      parent=extractFolder;
      params.add(file.getAbsolutePath());
    }
 else {
      parent=file.getParentFile();
      params.add(file.getName());
    }
    Process p=createProcess(unrar,params.toArray(new String[]{}),parent);
    String str=startInputListener(p,parent);
    if (str.matches(allOk)) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(str);
      if (autoDelete) {
        while (matcher.find()) {
          File delfile;
          if (b)           delfile=new File(matcher.group(1));
 else           delfile=new File(file.getParentFile(),matcher.group(1));
          if (!delfile.isFile()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
 else           if (!delfile.delete()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
        }
      }
 else       if (b) {
        while (matcher.find()) {
          File ufile=new File(file.getParentFile(),matcher.group(1));
          unpackedlist.add(ufile);
        }
        saveUnpackedList();
      }
      pattern=Pattern.compile(""String_Node_Str"");
      matcher=pattern.matcher(str);
      HashMap<File,String> nfiles=new HashMap<File,String>();
      while (matcher.find()) {
        File f=new File(parent,matcher.group(1));
        nfiles.put(f,null);
        unpackedFiles.add(f);
      }
      JUnrar un=new JUnrar();
      un.files=nfiles;
      un.standardPassword=standardPassword;
      un.autoDelete=autoDelete;
      un.unrar=unrar;
      un.useToextractlist=false;
      un.overwriteFiles=overwriteFiles;
      unpackedFiles.addAll(un.unpackedFiles);
      Iterator<File> iter=unpackedFiles.iterator();
      while (iter.hasNext()) {
        File file2=(File)iter.next();
        if (!file2.exists())         iter.remove();
      }
    }
    return str;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","private String execprozess(File file,String password){
  try {
    LinkedList<String> params=new LinkedList<String>();
    if (password != ""String_Node_Str"") {
      params.add(""String_Node_Str"" + password);
    }
 else {
      params.add(""String_Node_Str"");
    }
    if (overwriteFiles) {
      params.add(""String_Node_Str"");
    }
 else {
      params.add(""String_Node_Str"");
    }
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    File parent;
    boolean b=false;
    if (extractFolder != null && extractFolder.isDirectory()) {
      b=true;
      parent=extractFolder;
      params.add(file.getAbsolutePath());
    }
 else {
      parent=file.getParentFile();
      params.add(file.getName());
    }
    Process p=createProcess(unrar,params.toArray(new String[]{}),parent);
    String str=startInputListener(p,parent);
    if (str.matches(allOk)) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(str);
      if (autoDelete) {
        while (matcher.find()) {
          File delfile;
          if (b)           delfile=new File(matcher.group(1));
 else           delfile=new File(file.getParentFile(),matcher.group(1));
          if (!delfile.isFile()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
 else           if (!delfile.delete()) {
            logger.warning(str);
            logger.warning(""String_Node_Str"" + delfile.getName());
          }
        }
      }
 else       if (b) {
        while (matcher.find()) {
          File ufile=new File(file.getParentFile(),matcher.group(1));
          unpackedlist.add(ufile);
        }
        saveUnpackedList();
      }
      pattern=Pattern.compile(""String_Node_Str"");
      matcher=pattern.matcher(str);
      HashMap<File,String> nfiles=new HashMap<File,String>();
      while (matcher.find()) {
        File f=new File(parent,matcher.group(1));
        nfiles.put(f,null);
        unpackedFiles.add(f);
      }
      JUnrar un=new JUnrar();
      un.files=nfiles;
      un.standardPassword=standardPassword;
      un.autoDelete=autoDelete;
      un.unrar=unrar;
      un.useToextractlist=false;
      un.overwriteFiles=overwriteFiles;
      unpackedFiles.addAll(un.unrar());
      Iterator<File> iter=unpackedFiles.iterator();
      while (iter.hasNext()) {
        File file2=(File)iter.next();
        if (!file2.exists())         iter.remove();
      }
    }
    return str;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
21371,"@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  RequestInfo reqinfo;
try {
  while (true) {
    Vector<Vector<String>> results=null;
    reqinfo=getRequest(new URL(parameter));
    String htmlCode=reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < favorites.length + 1; i++) {
      String favPattern;
      if (favorites.length == i) {
        favPattern=""String_Node_Str"";
      }
 else {
        String favorit=favorites[i].trim();
        if (favorit.length() == 0)         continue;
        favPattern=""String_Node_Str"" + favorit + ""String_Node_Str"";
        ;
      }
      results=getAllSimpleMatches(htmlCode,Pattern.compile(favPattern,Pattern.MULTILINE | Pattern.DOTALL));
      if (results != null && results.isEmpty() == false) {
        break;
      }
    }
    String formURL=""String_Node_Str"" + host + results.get(0).get(0);
    String postvar=results.get(0).get(2) + ""String_Node_Str"" + results.get(0).get(3)+ ""String_Node_Str""+ results.get(0).get(4)+ ""String_Node_Str""+ results.get(0).get(5)+ ""String_Node_Str""+ results.get(0).get(6)+ ""String_Node_Str""+ results.get(0).get(7)+ ""String_Node_Str""+ results.get(0).get(8)+ ""String_Node_Str""+ results.get(0).get(9);
    String captchaurl=""String_Node_Str"" + host + results.get(0).get(1);
    File file=this.getLocalCaptchaFile(this);
    if (!JDUtilities.download(file,captchaurl) || !file.exists()) {
      logger.severe(""String_Node_Str"" + captchaurl);
      step.setParameter(null);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    String plainCaptcha=getCaptchaCode(file,this);
    String inpHidden=""String_Node_Str"" + plainCaptcha + ""String_Node_Str""+ postvar;
    pw=getFirstMatch(reqinfo.getHtmlCode(),PASSWORT,1);
    if (pw.matches(""String_Node_Str"") || pw.matches(""String_Node_Str"") || pw.matches(""String_Node_Str"")|| pw.matches(""String_Node_Str""))     pw=DEFAULT_PASSWORD;
 else     if (pw.matches(""String_Node_Str""))     pw=""String_Node_Str"";
    reqinfo=postRequest(new URL(formURL),inpHidden);
    if (reqinfo.getHtmlCode().contains(ERROR_CAPTCHA)) {
      if (file != null && plainCaptcha != null) {
        JDUtilities.appendInfoToFilename(file,plainCaptcha,false);
      }
      logger.severe(""String_Node_Str"");
      continue;
    }
 else     if (reqinfo.getHtmlCode().contains(ERROR_CAPTCHA_TIME)) {
      logger.severe(""String_Node_Str"");
      continue;
    }
    if (file != null && plainCaptcha != null) {
      JDUtilities.appendInfoToFilename(file,plainCaptcha,true);
    }
    break;
  }
  Vector<Vector<String>> links=getAllSimpleMatches(reqinfo.getHtmlCode(),DL_LINK);
  progress.setRange(links.size());
  for (int i=0; i < links.size(); i++) {
    String link=JDUtilities.urlEncode(links.get(i).get(0));
    link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
    decryptedLinks.add(this.createDownloadlink(link).addSourcePluginPassword(pw));
    progress.increase(1);
  }
  step.setParameter(decryptedLinks);
}
 catch (IOException e) {
  e.printStackTrace();
}
}
return null;
}","@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  RequestInfo reqinfo;
try {
  while (true) {
    Vector<Vector<String>> results=null;
    reqinfo=getRequest(new URL(parameter));
    String htmlCode=reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < favorites.length + 1; i++) {
      String favPattern;
      if (favorites.length == i) {
        favPattern=""String_Node_Str"";
      }
 else {
        String favorit=favorites[i].trim();
        if (favorit.length() == 0)         continue;
        favPattern=""String_Node_Str"" + favorit + ""String_Node_Str"";
        ;
      }
      results=getAllSimpleMatches(htmlCode,Pattern.compile(favPattern,Pattern.MULTILINE | Pattern.DOTALL));
      if (results != null && results.isEmpty() == false) {
        break;
      }
    }
    String formURL=""String_Node_Str"" + host + results.get(0).get(0);
    String postvar=results.get(0).get(2) + ""String_Node_Str"" + results.get(0).get(3)+ ""String_Node_Str""+ results.get(0).get(4)+ ""String_Node_Str""+ results.get(0).get(5)+ ""String_Node_Str""+ results.get(0).get(6)+ ""String_Node_Str""+ results.get(0).get(7)+ ""String_Node_Str""+ results.get(0).get(8)+ ""String_Node_Str""+ results.get(0).get(9);
    String captchaurl=""String_Node_Str"" + host + results.get(0).get(1);
    File file=this.getLocalCaptchaFile(this);
    if (!JDUtilities.download(file,captchaurl) || !file.exists()) {
      logger.severe(""String_Node_Str"" + captchaurl);
      step.setParameter(null);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    String plainCaptcha=getCaptchaCode(file,this);
    String inpHidden=""String_Node_Str"" + plainCaptcha + ""String_Node_Str""+ postvar;
    pw=getFirstMatch(reqinfo.getHtmlCode(),PASSWORT,1);
    if (pw.matches(""String_Node_Str"") || pw.matches(""String_Node_Str"") || pw.matches(""String_Node_Str"")|| pw.matches(""String_Node_Str""))     pw=DEFAULT_PASSWORD;
 else     if (pw.matches(""String_Node_Str""))     pw=""String_Node_Str"";
    reqinfo=postRequest(new URL(formURL),inpHidden);
    if (reqinfo.getHtmlCode().contains(ERROR_CAPTCHA)) {
      if (file != null && plainCaptcha != null) {
        JDUtilities.appendInfoToFilename(file,plainCaptcha,false);
      }
      logger.severe(""String_Node_Str"");
      continue;
    }
 else     if (reqinfo.getHtmlCode().contains(ERROR_CAPTCHA_TIME)) {
      logger.severe(""String_Node_Str"");
      continue;
    }
    if (file != null && plainCaptcha != null) {
      JDUtilities.appendInfoToFilename(file,plainCaptcha,true);
    }
    break;
  }
  Form[] forms=reqinfo.getForms();
  progress.setRange(forms.length);
  for (int i=0; i < forms.length; i++) {
    String link=JDUtilities.urlEncode(JDUtilities.htmlDecode(forms[i].action));
    link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
    decryptedLinks.add(this.createDownloadlink(link).addSourcePluginPassword(pw));
    progress.increase(1);
  }
  step.setParameter(decryptedLinks);
}
 catch (IOException e) {
  e.printStackTrace();
}
}
return null;
}"
21372,"/** 
 * @return gibt das globale speedmeter zurück
 */
public int getSpeedMeter(){
  Iterator<DownloadLink> iter=getDownloadLinks().iterator();
  int ret=0;
  int c=0;
  while (iter.hasNext()) {
    DownloadLink element=(DownloadLink)iter.next();
    if (element.isInProgress()) {
      c++;
      ret+=element.getDownloadSpeed();
    }
  }
  if (c > 0) {
    int maxspeed=JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,0) * 1024;
    if (maxspeed != 0) {
      int maxsp=maxspeed / c;
      int overhead=0;
      iter=getDownloadLinks().iterator();
      while (iter.hasNext()) {
        DownloadLink element=(DownloadLink)iter.next();
        if (element.isInProgress()) {
          int elspeed=element.getDownloadSpeed();
          int sp=maxsp + overhead;
          if (elspeed < sp)           overhead=sp - elspeed;
 else           overhead=0;
          element.setMaximalspeed(sp);
        }
      }
      if (overhead > 0) {
        iter=getDownloadLinks().iterator();
        int sp=maxsp + overhead;
        while (iter.hasNext()) {
          DownloadLink element=(DownloadLink)iter.next();
          if (element.isInProgress()) {
            if (element.getMaximalspeed() < sp) {
              element.setMaximalspeed(sp);
              break;
            }
          }
        }
      }
    }
 else {
      iter=getDownloadLinks().iterator();
      int sp=ret + 204800;
      while (iter.hasNext()) {
        DownloadLink element=(DownloadLink)iter.next();
        if (element.isInProgress()) {
          element.setMaximalspeed(sp);
        }
      }
    }
  }
  return ret;
}","/** 
 * @return gibt das globale speedmeter zurück
 */
public int getSpeedMeter(){
  Iterator<DownloadLink> iter=getDownloadLinks().iterator();
  int ret=0;
  int c=0;
  int maxspeed=JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,0) * 1024;
  boolean isLimited=(maxspeed != 0);
  while (iter.hasNext()) {
    DownloadLink element=(DownloadLink)iter.next();
    if (element.isInProgress()) {
      c++;
      ret+=element.getDownloadSpeed();
      element.isLimited=isLimited;
    }
  }
  if (c > 0) {
    if (maxspeed != 0) {
      int maxsp=maxspeed / c;
      int overhead=0;
      iter=getDownloadLinks().iterator();
      while (iter.hasNext()) {
        DownloadLink element=(DownloadLink)iter.next();
        if (element.isInProgress()) {
          int elspeed=element.getDownloadSpeed();
          int sp=maxsp + overhead;
          if (elspeed < sp)           overhead=sp - elspeed;
 else           overhead=0;
          element.setMaximalspeed(sp);
        }
      }
      if (overhead > 0) {
        iter=getDownloadLinks().iterator();
        int sp=maxsp + overhead;
        while (iter.hasNext()) {
          DownloadLink element=(DownloadLink)iter.next();
          if (element.isInProgress()) {
            if (element.getMaximalspeed() < sp) {
              element.setMaximalspeed(sp);
              break;
            }
          }
        }
      }
    }
 else {
      iter=getDownloadLinks().iterator();
      int sp=ret + 204800;
      while (iter.hasNext()) {
        DownloadLink element=(DownloadLink)iter.next();
        if (element.isInProgress()) {
          element.setMaximalspeed(sp);
        }
      }
    }
  }
  return ret;
}"
21373,"@SuppressWarnings(""String_Node_Str"") public URLConnection getConnection(){
  if (method == METHOD_UNKNOWN) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    return null;
  }
 else   if (method == METHOD_PUT) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    return null;
  }
  if (baseRequest == null)   return null;
  URL baseurl=baseRequest.getConnection().getURL();
  if (action == null || action.matches(""String_Node_Str"")) {
    if (baseurl == null)     return null;
    action=baseurl.toString();
  }
 else   if (!action.matches(""String_Node_Str"")) {
    if (baseurl == null)     return null;
    if (action.charAt(0) == '/')     action=""String_Node_Str"" + baseurl.getHost() + action;
 else     if (action.charAt(0) == '?' || action.charAt(0) == '&') {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str""))       action=base + action;
 else       action=base + ""String_Node_Str"" + action;
    }
 else {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str""))       action=base.substring(0,base.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + action;
 else       action=base + ""String_Node_Str"" + action;
    }
  }
  StringBuffer buffer=new StringBuffer();
  boolean first=true;
  for (  Map.Entry<String,String> entry : vars.entrySet()) {
    if (first)     first=false;
 else     buffer.append(""String_Node_Str"");
    buffer.append(entry.getKey());
    buffer.append(""String_Node_Str"");
    buffer.append(URLEncoder.encode(entry.getValue()));
  }
  String varString=buffer.toString();
  if (method == METHOD_GET) {
    if (varString != null && !varString.matches(""String_Node_Str"")) {
      if (action.matches(""String_Node_Str""))       action+=""String_Node_Str"";
 else       if (action.matches(""String_Node_Str""))       action+=""String_Node_Str"";
      action+=varString;
    }
    try {
      URLConnection urlConnection=new URL(action).openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConnection.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      urlConnection.setRequestProperty(""String_Node_Str"",baseurl.toString());
      return urlConnection;
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (method == METHOD_POST) {
    try {
      URLConnection urlConnection=new URL(action).openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConnection.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      urlConnection.setRequestProperty(""String_Node_Str"",baseurl.toString());
      urlConnection.setDoOutput(true);
      OutputStreamWriter wr=new OutputStreamWriter(urlConnection.getOutputStream());
      wr.write(varString);
      wr.flush();
      wr.close();
      return urlConnection;
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public URLConnection getConnection(){
  if (method == METHOD_UNKNOWN) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    return null;
  }
 else   if (method == METHOD_PUT) {
    JDUtilities.getLogger().severe(""String_Node_Str"");
    return null;
  }
  if (baseRequest == null)   return null;
  URL baseurl=baseRequest.getConnection().getURL();
  if (action == null || action.matches(""String_Node_Str"")) {
    if (baseurl == null)     return null;
    action=baseurl.toString();
  }
 else   if (!action.matches(""String_Node_Str"")) {
    if (baseurl == null)     return null;
    if (action.charAt(0) == '/')     action=""String_Node_Str"" + baseurl.getHost() + action;
 else     if (action.charAt(0) == '?' || action.charAt(0) == '&') {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str""))       action=base + action;
 else       action=base + ""String_Node_Str"" + action;
    }
 else {
      String base=baseurl.toString();
      if (base.matches(""String_Node_Str""))       action=base.substring(0,base.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"" + action;
 else       action=base + ""String_Node_Str"" + action;
    }
  }
  StringBuffer buffer=new StringBuffer();
  boolean first=true;
  for (  Map.Entry<String,String> entry : vars.entrySet()) {
    if (first)     first=false;
 else     buffer.append(""String_Node_Str"");
    buffer.append(entry.getKey());
    buffer.append(""String_Node_Str"");
    buffer.append(URLEncoder.encode(entry.getValue()));
  }
  String varString=buffer.toString();
  if (method == METHOD_GET) {
    if (varString != null && !varString.matches(""String_Node_Str"")) {
      if (action.matches(""String_Node_Str""))       action+=""String_Node_Str"";
 else       if (action.matches(""String_Node_Str""))       action+=""String_Node_Str"";
      action+=varString;
    }
    try {
      URLConnection urlConnection=new URL(action).openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConnection.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      for (      Map.Entry<String,String> entry : requestPoperties.entrySet()) {
        urlConnection.setRequestProperty(entry.getKey(),entry.getValue());
      }
      urlConnection.setRequestProperty(""String_Node_Str"",baseurl.toString());
      return urlConnection;
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (method == METHOD_POST) {
    try {
      URLConnection urlConnection=new URL(action).openConnection();
      urlConnection.setRequestProperty(""String_Node_Str"",Plugin.ACCEPT_LANGUAGE);
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlConnection.setRequestProperty(""String_Node_Str"",baseRequest.getCookie());
      for (      Map.Entry<String,String> entry : requestPoperties.entrySet()) {
        urlConnection.setRequestProperty(entry.getKey(),entry.getValue());
      }
      urlConnection.setRequestProperty(""String_Node_Str"",baseurl.toString());
      urlConnection.setDoOutput(true);
      OutputStreamWriter wr=new OutputStreamWriter(urlConnection.getOutputStream());
      wr.write(varString);
      wr.flush();
      wr.close();
      return urlConnection;
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}"
21374,"public String toString(){
  String ret=""String_Node_Str"";
  ret+=""String_Node_Str"" + action + ""String_Node_Str"";
  if (method == METHOD_POST)   ret+=""String_Node_Str"";
 else   if (method == METHOD_GET)   ret+=""String_Node_Str"";
 else   if (method == METHOD_PUT)   ret+=""String_Node_Str"";
 else   if (method == METHOD_UNKNOWN)   ret+=""String_Node_Str"";
  for (  Map.Entry<String,String> entry : vars.entrySet()) {
    ret+=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"";
  }
  for (  Map.Entry<String,String> entry : formProperties.entrySet()) {
    ret+=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"";
  }
  return ret;
}","public String toString(){
  String ret=""String_Node_Str"";
  ret+=""String_Node_Str"" + action + ""String_Node_Str"";
  if (method == METHOD_POST)   ret+=""String_Node_Str"";
 else   if (method == METHOD_GET)   ret+=""String_Node_Str"";
 else   if (method == METHOD_PUT)   ret+=""String_Node_Str"";
 else   if (method == METHOD_UNKNOWN)   ret+=""String_Node_Str"";
  for (  Map.Entry<String,String> entry : vars.entrySet()) {
    ret+=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"";
  }
  for (  Map.Entry<String,String> entry : formProperties.entrySet()) {
    ret+=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"";
  }
  for (  Map.Entry<String,String> entry : requestPoperties.entrySet()) {
    ret+=""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"";
  }
  return ret;
}"
21375,"public boolean download(DownloadLink downloadLink,URLConnection urlConnection,int bytesToLoad,int resumeAt){
  File fileOutput=new File(downloadLink.getFileOutput() + ""String_Node_Str"");
  if (fileOutput == null || fileOutput.getParentFile() == null)   return false;
  if (!fileOutput.getParentFile().exists()) {
    fileOutput.getParentFile().mkdirs();
  }
  downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_IN_PROGRESS);
  long downloadedBytes=0;
  long start, end, time;
  try {
    int maxspeed=downloadLink.getMaximalspeed();
    ByteBuffer buffer=ByteBuffer.allocateDirect(maxspeed);
    FileOutputStream fos=new FileOutputStream(fileOutput,true);
    urlConnection.setReadTimeout(getReadTimeoutFromConfiguration());
    urlConnection.setConnectTimeout(getConnectTimeoutFromConfiguration());
    ReadableByteChannel source=Channels.newChannel(urlConnection.getInputStream());
    WritableByteChannel dest=fos.getChannel();
    String range=urlConnection.getHeaderField(""String_Node_Str"");
    if (range == null || bytesToLoad > 0) {
      logger.severe(""String_Node_Str"");
      source.close();
      dest.close();
      fos.close();
      return download(downloadLink,urlConnection,bytesToLoad);
    }
    range=""String_Node_Str"" + range + ""String_Node_Str"";
    logger.info(range);
    String[] dat=Plugin.getSimpleMatches(range,""String_Node_Str"");
    int contentLen=Integer.parseInt(dat[2]);
    int startAt=Integer.parseInt(dat[0]);
    downloadedBytes=startAt;
    downloadLink.setDownloadMax(contentLen);
    downloadLink.setDownloadCurrent(startAt);
    logger.info(""String_Node_Str"");
    start=System.currentTimeMillis();
    buffer.clear();
    long bytesPerSecond=0;
    long deltaTime=0L;
    long timer=-System.currentTimeMillis();
    while (!aborted && !downloadLink.isAborted()) {
      if (maxspeed != (maxspeed=downloadLink.getMaximalspeed())) {
        buffer=ByteBuffer.allocateDirect(downloadLink.getMaximalspeed());
        buffer.clear();
      }
      int bytes=source.read(buffer);
      Thread.sleep(25);
      if (bytes == -1)       break;
      buffer.flip();
      dest.write(buffer);
      buffer.compact();
      downloadedBytes+=bytes;
      bytesPerSecond+=bytes;
      deltaTime=timer + System.currentTimeMillis();
      if (deltaTime > 1000) {
        downloadLink.addBytes(bytesPerSecond,deltaTime);
        bytesPerSecond=0;
        deltaTime=0L;
        timer=-System.currentTimeMillis();
      }
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_DATA_CHANGED,downloadLink));
      downloadLink.setDownloadCurrent(downloadedBytes);
      if (bytesToLoad > 0 && downloadedBytes >= bytesToLoad)       break;
    }
    if (downloadedBytes < contentLen) {
      logger.info(aborted + ""String_Node_Str"" + downloadLink.isAborted()+ ""String_Node_Str""+ downloadedBytes+ ""String_Node_Str""+ contentLen);
      downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_INCOMPLETE);
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
      source.close();
      dest.close();
      fos.close();
      return false;
    }
    end=System.currentTimeMillis();
    time=end - start;
    source.close();
    dest.close();
    fos.close();
    if (new File(downloadLink.getFileOutput()).exists()) {
      new File(downloadLink.getFileOutput()).delete();
    }
    logger.info(new File(downloadLink.getFileOutput()).exists() + ""String_Node_Str"");
    logger.info(new File(downloadLink.getFileOutput()).canWrite() + ""String_Node_Str"");
    logger.info(fileOutput.exists() + ""String_Node_Str"");
    logger.info(fileOutput.canWrite() + ""String_Node_Str"");
    if (!fileOutput.renameTo(new File(downloadLink.getFileOutput()))) {
      logger.severe(""String_Node_Str"" + fileOutput + ""String_Node_Str""+ downloadLink.getFileOutput());
      downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_INCOMPLETE);
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
      return false;
    }
    downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_FINISHED);
    firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
    logger.info(""String_Node_Str"" + fileOutput.getAbsolutePath());
    logger.info(downloadedBytes + ""String_Node_Str"" + time+ ""String_Node_Str"");
    return true;
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  SecurityException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
  downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_INCOMPLETE);
  return false;
}","public boolean download(DownloadLink downloadLink,URLConnection urlConnection,int bytesToLoad,int resumeAt){
  File fileOutput=new File(downloadLink.getFileOutput() + ""String_Node_Str"");
  if (fileOutput == null || fileOutput.getParentFile() == null)   return false;
  if (!fileOutput.getParentFile().exists()) {
    fileOutput.getParentFile().mkdirs();
  }
  downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_IN_PROGRESS);
  long downloadedBytes=0;
  long start, end, time;
  try {
    int maxspeed=downloadLink.getMaximalspeed();
    ByteBuffer buffer=ByteBuffer.allocateDirect(maxspeed);
    FileOutputStream fos=new FileOutputStream(fileOutput,true);
    urlConnection.setReadTimeout(getReadTimeoutFromConfiguration());
    urlConnection.setConnectTimeout(getConnectTimeoutFromConfiguration());
    ReadableByteChannel source=Channels.newChannel(urlConnection.getInputStream());
    WritableByteChannel dest=fos.getChannel();
    String range=urlConnection.getHeaderField(""String_Node_Str"");
    if (range == null || bytesToLoad > 0) {
      logger.severe(""String_Node_Str"");
      source.close();
      dest.close();
      fos.close();
      return download(downloadLink,urlConnection,bytesToLoad);
    }
    range=""String_Node_Str"" + range + ""String_Node_Str"";
    logger.info(range);
    String[] dat=Plugin.getSimpleMatches(range,""String_Node_Str"");
    int contentLen=Integer.parseInt(dat[2]);
    int startAt=Integer.parseInt(dat[0]);
    downloadedBytes=startAt;
    downloadLink.setDownloadMax(contentLen);
    downloadLink.setDownloadCurrent(startAt);
    logger.info(""String_Node_Str"");
    start=System.currentTimeMillis();
    buffer.clear();
    long bytesPerSecond=0;
    long deltaTime=0L;
    long timer=-System.currentTimeMillis();
    while (!aborted && !downloadLink.isAborted()) {
      int bytes=source.read(buffer);
      if (downloadLink.isLimited)       Thread.sleep(25);
      if (bytes == -1)       break;
      buffer.flip();
      dest.write(buffer);
      buffer.compact();
      downloadedBytes+=bytes;
      bytesPerSecond+=bytes;
      deltaTime=timer + System.currentTimeMillis();
      if (deltaTime > 1000) {
        downloadLink.addBytes(bytesPerSecond,deltaTime);
        bytesPerSecond=0;
        deltaTime=0L;
        timer=-System.currentTimeMillis();
        if (maxspeed != (maxspeed=downloadLink.getMaximalspeed())) {
          buffer=ByteBuffer.allocateDirect(downloadLink.getMaximalspeed());
          buffer.clear();
        }
      }
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_DATA_CHANGED,downloadLink));
      downloadLink.setDownloadCurrent(downloadedBytes);
      if (bytesToLoad > 0 && downloadedBytes >= bytesToLoad)       break;
    }
    if (downloadedBytes < contentLen) {
      logger.info(aborted + ""String_Node_Str"" + downloadLink.isAborted()+ ""String_Node_Str""+ downloadedBytes+ ""String_Node_Str""+ contentLen);
      downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_INCOMPLETE);
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
      source.close();
      dest.close();
      fos.close();
      return false;
    }
    end=System.currentTimeMillis();
    time=end - start;
    source.close();
    dest.close();
    fos.close();
    if (new File(downloadLink.getFileOutput()).exists()) {
      new File(downloadLink.getFileOutput()).delete();
    }
    logger.info(new File(downloadLink.getFileOutput()).exists() + ""String_Node_Str"");
    logger.info(new File(downloadLink.getFileOutput()).canWrite() + ""String_Node_Str"");
    logger.info(fileOutput.exists() + ""String_Node_Str"");
    logger.info(fileOutput.canWrite() + ""String_Node_Str"");
    if (!fileOutput.renameTo(new File(downloadLink.getFileOutput()))) {
      logger.severe(""String_Node_Str"" + fileOutput + ""String_Node_Str""+ downloadLink.getFileOutput());
      downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_INCOMPLETE);
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
      return false;
    }
    downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_FINISHED);
    firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
    logger.info(""String_Node_Str"" + fileOutput.getAbsolutePath());
    logger.info(downloadedBytes + ""String_Node_Str"" + time+ ""String_Node_Str"");
    return true;
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  SecurityException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
  downloadLink.setStatus(DownloadLink.STATUS_DOWNLOAD_INCOMPLETE);
  return false;
}"
21376,"public static String toRapidshareCom(File file){
  try {
    Form form=Form.getForms(""String_Node_Str"")[0];
    form.fileToPost=new File(""String_Node_Str"");
    System.out.println(form.getRequestInfo().getHtmlCode());
    System.out.println(form.toString());
  }
 catch (  Exception e) {
  }
  return ""String_Node_Str"";
}","public static String toRapidshareCom(File file){
  try {
    Form form=Form.getForms(""String_Node_Str"")[0];
    form.fileToPost=file;
    System.out.println(form.getRequestInfo().getHtmlCode());
    System.out.println(form.toString());
  }
 catch (  Exception e) {
  }
  return ""String_Node_Str"";
}"
21377,"@SuppressWarnings(""String_Node_Str"") private void go(){
  JDInit init=new JDInit();
  String a=JDUtilities.getLocalHash(JDUtilities.getResourceFile(""String_Node_Str"")).substring(0,6);
  String b=JDUtilities.getLocalHash(JDUtilities.getResourceFile(""String_Node_Str"")).substring(0,6);
  String c=JDUtilities.getLocalHash(JDUtilities.getResourceFile(""String_Node_Str"")).substring(0,6);
  logger.info(a + ""String_Node_Str"" + b+ ""String_Node_Str""+ c);
  logger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  logger.info(""String_Node_Str"");
  init.init();
  init.loadImages();
  JWindow window=new JWindow(){
    public void paint(    Graphics g){
      Image splashImage=JDUtilities.getImage(""String_Node_Str"");
      g.drawImage(splashImage,0,0,this);
    }
  }
;
  window.setSize(450,100);
  window.setLocationRelativeTo(null);
  if (JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getBooleanProperty(SimpleGUI.PARAM_SHOW_SPLASH,true)) {
    window.setVisible(true);
  }
  init.loadConfiguration();
  final JDController controller=init.initController();
  if (init.installerWasVisible()) {
    init.doWebupdate(JDUtilities.getConfiguration().getIntegerProperty(Configuration.CID,-1),true);
  }
 else {
    init.initGUI(controller);
    JDUtilities.initFileLogger();
    init.initPlugins();
    init.loadDownloadQueue();
    init.loadModules();
    init.checkUpdate();
    if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL_JARED) {
      init.doWebupdate(JDUtilities.getConfiguration().getIntegerProperty(Configuration.CID,-1),false);
    }
  }
  controller.setInitStatus(JDController.INIT_STATUS_COMPLETE);
  Vector<Interaction> interactions=JDUtilities.getConfiguration().getInteractions();
  int s=interactions.size();
  for (int i=interactions.size() - 1; i >= 0; i--) {
    if (interactions.get(i) instanceof ResetLink || interactions.get(i) instanceof JDExit || interactions.get(i) instanceof ExternExecute) {
    }
 else {
      interactions.remove(i);
    }
  }
  if (interactions.size() < s) {
    JDUtilities.getConfiguration().setInteractions(interactions);
    JDUtilities.saveConfig();
  }
  window.dispose();
  controller.getUiInterface().onJDInitComplete();
  Properties pr=System.getProperties();
  TreeSet propKeys=new TreeSet(pr.keySet());
  for (Iterator it=propKeys.iterator(); it.hasNext(); ) {
    String key=(String)it.next();
    logger.finer(""String_Node_Str"" + key + ""String_Node_Str""+ pr.get(key));
  }
  logger.info(""String_Node_Str"" + JDUtilities.getJDTitle());
  logger.info(""String_Node_Str"" + JDUtilities.getRunType());
  logger.info(""String_Node_Str"" + JDUtilities.getLastChangeAuthor());
  logger.info(""String_Node_Str"" + JDUtilities.getCurrentWorkingDirectory(null));
}","@SuppressWarnings(""String_Node_Str"") private void go(){
  JDInit init=new JDInit();
  logger.info(""String_Node_Str"");
  init.init();
  init.loadImages();
  JWindow window=new JWindow(){
    public void paint(    Graphics g){
      Image splashImage=JDUtilities.getImage(""String_Node_Str"");
      g.drawImage(splashImage,0,0,this);
    }
  }
;
  window.setSize(450,100);
  window.setLocationRelativeTo(null);
  if (JDUtilities.getSubConfig(SimpleGUI.GUICONFIGNAME).getBooleanProperty(SimpleGUI.PARAM_SHOW_SPLASH,true)) {
    window.setVisible(true);
  }
  init.loadConfiguration();
  final JDController controller=init.initController();
  if (init.installerWasVisible()) {
    init.doWebupdate(JDUtilities.getConfiguration().getIntegerProperty(Configuration.CID,-1),true);
  }
 else {
    init.initGUI(controller);
    JDUtilities.initFileLogger();
    init.initPlugins();
    init.loadDownloadQueue();
    init.loadModules();
    init.checkUpdate();
    if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL_JARED) {
      init.doWebupdate(JDUtilities.getConfiguration().getIntegerProperty(Configuration.CID,-1),false);
    }
  }
  controller.setInitStatus(JDController.INIT_STATUS_COMPLETE);
  Vector<Interaction> interactions=JDUtilities.getConfiguration().getInteractions();
  int s=interactions.size();
  for (int i=interactions.size() - 1; i >= 0; i--) {
    if (interactions.get(i) instanceof ResetLink || interactions.get(i) instanceof JDExit || interactions.get(i) instanceof ExternExecute) {
    }
 else {
      interactions.remove(i);
    }
  }
  if (interactions.size() < s) {
    JDUtilities.getConfiguration().setInteractions(interactions);
    JDUtilities.saveConfig();
  }
  window.dispose();
  controller.getUiInterface().onJDInitComplete();
  Properties pr=System.getProperties();
  TreeSet propKeys=new TreeSet(pr.keySet());
  for (Iterator it=propKeys.iterator(); it.hasNext(); ) {
    String key=(String)it.next();
    logger.finer(""String_Node_Str"" + key + ""String_Node_Str""+ pr.get(key));
  }
  logger.info(""String_Node_Str"" + JDUtilities.getJDTitle());
  logger.info(""String_Node_Str"" + JDUtilities.getRunType());
  logger.info(""String_Node_Str"" + JDUtilities.getLastChangeAuthor());
  logger.info(""String_Node_Str"" + JDUtilities.getCurrentWorkingDirectory(null));
}"
21378,"public static boolean isLoggerActive(){
  return true;
}","public static boolean isLoggerActive(){
  return false;
}"
21379,"/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabDownloadTable=new TabDownloadLinks(this);
  progressBar=new TabProgress();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(progressBar);
  splitpane.setTopComponent(tabDownloadTable);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  if (JDUtilities.getImage(JDTheme.I(""String_Node_Str"")) != null)   btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(JDTheme.I(""String_Node_Str""))));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  btnPause=new JToggleButton(actionPause);
  if (JDUtilities.getImage(JDTheme.I(""String_Node_Str"")) != null)   btnPause.setSelectedIcon(new ImageIcon(JDUtilities.getImage(JDTheme.I(""String_Node_Str""))));
  btnPause.setFocusPainted(false);
  btnPause.setBorderPainted(false);
  btnPause.setText(null);
  btnPause.setEnabled(false);
  btnToggleReconnect=new JToggleButton(doReconnect);
  if (JDUtilities.getImage(JDTheme.I(""String_Node_Str"")) != null)   btnToggleReconnect.setSelectedIcon(new ImageIcon(JDUtilities.getImage(JDTheme.I(""String_Node_Str""))));
  btnToggleReconnect.setFocusPainted(false);
  btnToggleReconnect.setBorderPainted(false);
  btnToggleReconnect.setText(null);
  btnToggleReconnect.setEnabled(true);
  btnToggleReconnect.setSelected(JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,false));
  JButton btnAdd=new JButton(actionItemsAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionItemsDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  JButton btnConfig=new JButton(this.actionConfig);
  btnConfig.setFocusPainted(false);
  btnConfig.setBorderPainted(false);
  btnConfig.setText(null);
  JButton btnReconnect=new JButton(this.actionReconnect);
  btnReconnect.setFocusPainted(false);
  btnReconnect.setBorderPainted(false);
  btnReconnect.setText(null);
  JButton btnUpdate=new JButton(this.actionUpdate);
  btnUpdate.setFocusPainted(false);
  btnUpdate.setBorderPainted(false);
  btnUpdate.setText(null);
  JButton btnSave=new JButton(this.actionSaveDLC);
  btnSave.setFocusPainted(false);
  btnSave.setBorderPainted(false);
  btnSave.setText(null);
  JButton btnLoad=new JButton(this.actionLoadDLC);
  btnLoad.setFocusPainted(false);
  btnLoad.setBorderPainted(false);
  btnLoad.setText(null);
  JButton btnLog=new JButton(this.actionLog);
  btnLog.setFocusPainted(false);
  btnLog.setBorderPainted(false);
  btnLog.setText(null);
  btnClipBoard=new JButton(this.actionClipBoard);
  btnClipBoard.setFocusPainted(false);
  btnClipBoard.setBorderPainted(false);
  btnClipBoard.setText(null);
  JButton btnHelp=new JButton(this.actionHelp);
  btnHelp.setFocusPainted(false);
  btnHelp.setBorderPainted(false);
  btnHelp.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnLoad);
  toolBar.add(btnSave);
  toolBar.addSeparator();
  toolBar.add(btnStartStop);
  toolBar.add(btnPause);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  toolBar.addSeparator();
  toolBar.add(btnUpdate);
  toolBar.addSeparator();
  toolBar.add(btnConfig);
  toolBar.add(btnLog);
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(btnClipBoard);
  toolBar.add(btnToggleReconnect);
  toolBar.add(btnHelp);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,splitpane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}","/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabDownloadTable=new TabDownloadLinks(this);
  progressBar=new TabProgress();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(progressBar);
  splitpane.setTopComponent(tabDownloadTable);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=new JButton(actionStartStopDownload);
  if (JDUtilities.getImage(JDTheme.I(""String_Node_Str"")) != null)   btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(JDTheme.I(""String_Node_Str""))));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  btnPause=new JButton(actionPause);
  if (JDUtilities.getImage(JDTheme.I(""String_Node_Str"")) != null)   btnPause.setSelectedIcon(new ImageIcon(JDUtilities.getImage(JDTheme.I(""String_Node_Str""))));
  btnPause.setFocusPainted(false);
  btnPause.setBorderPainted(false);
  btnPause.setText(null);
  btnPause.setEnabled(false);
  btnToggleReconnect=new JButton(doReconnect);
  if (JDUtilities.getImage(JDTheme.I(""String_Node_Str"")) != null)   btnToggleReconnect.setSelectedIcon(new ImageIcon(JDUtilities.getImage(JDTheme.I(""String_Node_Str""))));
  btnToggleReconnect.setFocusPainted(false);
  btnToggleReconnect.setBorderPainted(false);
  btnToggleReconnect.setText(null);
  btnToggleReconnect.setEnabled(true);
  btnToggleReconnect.setSelected(JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,false));
  JButton btnAdd=new JButton(actionItemsAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionItemsDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  JButton btnConfig=new JButton(this.actionConfig);
  btnConfig.setFocusPainted(false);
  btnConfig.setBorderPainted(false);
  btnConfig.setText(null);
  JButton btnReconnect=new JButton(this.actionReconnect);
  btnReconnect.setFocusPainted(false);
  btnReconnect.setBorderPainted(false);
  btnReconnect.setText(null);
  JButton btnUpdate=new JButton(this.actionUpdate);
  btnUpdate.setFocusPainted(false);
  btnUpdate.setBorderPainted(false);
  btnUpdate.setText(null);
  JButton btnSave=new JButton(this.actionSaveDLC);
  btnSave.setFocusPainted(false);
  btnSave.setBorderPainted(false);
  btnSave.setText(null);
  JButton btnLoad=new JButton(this.actionLoadDLC);
  btnLoad.setFocusPainted(false);
  btnLoad.setBorderPainted(false);
  btnLoad.setText(null);
  JButton btnLog=new JButton(this.actionLog);
  btnLog.setFocusPainted(false);
  btnLog.setBorderPainted(false);
  btnLog.setText(null);
  btnClipBoard=new JButton(this.actionClipBoard);
  btnClipBoard.setFocusPainted(false);
  btnClipBoard.setBorderPainted(false);
  btnClipBoard.setText(null);
  JButton btnHelp=new JButton(this.actionHelp);
  btnHelp.setFocusPainted(false);
  btnHelp.setBorderPainted(false);
  btnHelp.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnLoad);
  toolBar.add(btnSave);
  toolBar.addSeparator();
  toolBar.add(btnStartStop);
  toolBar.add(btnPause);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  toolBar.addSeparator();
  toolBar.add(btnUpdate);
  toolBar.addSeparator();
  toolBar.add(btnConfig);
  toolBar.add(btnLog);
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(btnClipBoard);
  toolBar.add(btnToggleReconnect);
  toolBar.add(btnHelp);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,splitpane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}"
21380,"/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == btnToggleReconnect) {
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,btnToggleReconnect.isSelected());
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    if (btnToggleReconnect.isSelected())     this.showMessageDialog(""String_Node_Str"");
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_PAUSE_DOWNLOADS:
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
break;
case JDAction.APP_TESTER:
logger.finer(""String_Node_Str"");
Interaction.handleInteraction(Interaction.INTERACTION_TESTTRIGGER,false);
break;
case JDAction.APP_UNRAR:
logger.finer(""String_Node_Str"");
JDUtilities.getController().getUnrarModule().interact(null);
break;
case JDAction.APP_CLIPBOARD:
logger.finer(""String_Node_Str"");
JDUtilities.getController().getClipboard().toggleActivation();
btnClipBoard.setIcon(new ImageIcon(JDUtilities.getImage(getClipBoardImage())));
break;
case JDAction.APP_PASSWORDLIST:
new jdUnrarPasswordListDialog(((SimpleGUI)JDUtilities.getController().getUiInterface()).getFrame()).setVisible(true);
break;
case JDAction.APP_START_STOP_DOWNLOADS:
this.startStopDownloads();
break;
case JDAction.APP_SAVE_DLC:
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (ret == null) return;
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
this.doReconnect();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,this.getDownloadLinks()));
}
}
 else {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,this.getDownloadLinks()));
}
break;
case JDAction.ITEMS_DND:
this.toggleDnD();
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.HELP:
try {
JLinkButton.OpenURL(""String_Node_Str"");
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}","/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == btnToggleReconnect) {
    btnToggleReconnect.setSelected(!btnToggleReconnect.isSelected());
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,btnToggleReconnect.isSelected());
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    if (btnToggleReconnect.isSelected())     this.showMessageDialog(""String_Node_Str"");
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_PAUSE_DOWNLOADS:
this.btnPause.setSelected(!btnPause.isSelected());
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
break;
case JDAction.APP_TESTER:
logger.finer(""String_Node_Str"");
Interaction.handleInteraction(Interaction.INTERACTION_TESTTRIGGER,false);
break;
case JDAction.APP_UNRAR:
logger.finer(""String_Node_Str"");
JDUtilities.getController().getUnrarModule().interact(null);
break;
case JDAction.APP_CLIPBOARD:
logger.finer(""String_Node_Str"");
JDUtilities.getController().getClipboard().toggleActivation();
btnClipBoard.setIcon(new ImageIcon(JDUtilities.getImage(getClipBoardImage())));
break;
case JDAction.APP_PASSWORDLIST:
new jdUnrarPasswordListDialog(((SimpleGUI)JDUtilities.getController().getUiInterface()).getFrame()).setVisible(true);
break;
case JDAction.APP_START_STOP_DOWNLOADS:
btnStartStop.setSelected(!btnStartStop.isSelected());
this.startStopDownloads();
break;
case JDAction.APP_SAVE_DLC:
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (ret == null) return;
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
this.doReconnect();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!guiConfig.getBooleanProperty(PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,this.getDownloadLinks()));
}
}
 else {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,this.getDownloadLinks()));
}
break;
case JDAction.ITEMS_DND:
this.toggleDnD();
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.HELP:
try {
JLinkButton.OpenURL(""String_Node_Str"");
}
 catch (Exception e1) {
e1.printStackTrace();
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}"
21381,"private PluginStep doPremiumStep(PluginStep step,DownloadLink downloadLink){
  String server1=this.getProperties().getStringProperty(PROPERTY_SELECTED_SERVER,""String_Node_Str"");
  String server2=this.getProperties().getStringProperty(PROPERTY_SELECTED_SERVER2,""String_Node_Str"");
  String serverAbb=serverMap.get(server1);
  String server2Abb=serverMap.get(server2);
  logger.info(""String_Node_Str"" + serverMap);
  logger.info(""String_Node_Str"" + server1 + ""String_Node_Str""+ server2+ ""String_Node_Str""+ serverAbb+ ""String_Node_Str""+ server2Abb);
  if (serverAbb == null) {
    serverAbb=serverList1[(int)(Math.random() * (serverList1.length - 1))];
    logger.finer(""String_Node_Str"" + serverAbb);
  }
  if (server2Abb == null) {
    server2Abb=serverList2[(int)(Math.random() * (serverList2.length - 1))];
    logger.finer(""String_Node_Str"" + server2Abb);
  }
  Boolean telekom=!(this.getProperties().getProperty(PROPERTY_USE_TELEKOMSERVER) == null || !(Boolean)this.getProperties().getProperty(PROPERTY_USE_TELEKOMSERVER));
  String user=(String)this.getProperties().getProperty(PROPERTY_PREMIUM_USER);
  String pass=(String)this.getProperties().getProperty(PROPERTY_PREMIUM_PASS);
switch (step.getStep()) {
case PluginStep.STEP_WAIT_TIME:
    try {
      String link=downloadLink.getUrlDownloadDecrypted();
      if (this.getProperties().getBooleanProperty(PROPERTY_USE_SSL,true))       link=link.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      requestInfo=getRequest(new URL(link),null,""String_Node_Str"",false);
      if (requestInfo.getHtmlCode().indexOf(hardwareDefektString) > 0) {
        step.setStatus(PluginStep.STATUS_ERROR);
        logger.severe(""String_Node_Str"");
        step.setParameter(60 * 10);
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
        return step;
      }
      if (requestInfo.containsHTML(deletedByUploaderString)) {
        step.setStatus(PluginStep.STATUS_ERROR);
        logger.severe(""String_Node_Str"");
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_NOT_FOUND);
        return step;
      }
      String newURL=getFirstMatch(requestInfo.getHtmlCode(),patternForNewHost,1);
      if (newURL != null) {
        if (aborted) {
          logger.warning(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_TODO);
          step.setStatus(PluginStep.STATUS_TODO);
          return step;
        }
        requestInfo=postRequest(new URL(newURL),null,null,null,""String_Node_Str"",true);
        HashMap<String,String> fields=getInputHiddenFields(requestInfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"");
        String post=joinMap(fields,""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + user+ ""String_Node_Str""+ pass;
        String url;
        if (fields.get(""String_Node_Str"") == null) {
          url=""String_Node_Str"";
        }
 else {
          url=""String_Node_Str"" + fields.get(""String_Node_Str"") + ""String_Node_Str"";
        }
        if (aborted) {
          logger.warning(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_TODO);
          step.setStatus(PluginStep.STATUS_TODO);
          return step;
        }
        requestInfo=postRequest(new URL(url),post);
        String cookie=requestInfo.getCookie();
        HashMap<String,String> fields2=getInputHiddenFields(requestInfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"");
        if (fields2.get(""String_Node_Str"") == null || fields2.get(""String_Node_Str"") == null) {
          step.setStatus(PluginStep.STATUS_ERROR);
          logger.severe(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_PREMIUM_LOGIN);
          return step;
        }
        this.finalCookie=cookie;
        post=""String_Node_Str"" + fields2.get(""String_Node_Str"") + ""String_Node_Str""+ fields2.get(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ fields.get(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        url=""String_Node_Str"" + fields.get(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ fields.get(""String_Node_Str"")+ ""String_Node_Str""+ fields.get(""String_Node_Str"");
        requestInfo=postRequestWithoutHtmlCode(new URL(url),cookie,url,post,true);
        HashMap<String,String> fields3=getInputHiddenFields(requestInfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"");
        post=joinMap(fields3,""String_Node_Str"",""String_Node_Str"");
        if (!requestInfo.isOK()) {
          logger.info(""String_Node_Str"");
          logger.warning(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
          step.setStatus(PluginStep.STATUS_ERROR);
          return step;
        }
        if (requestInfo.getConnection().getHeaderField(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
        }
 else {
          logger.info(""String_Node_Str"");
          if (aborted) {
            logger.warning(""String_Node_Str"");
            downloadLink.setStatus(DownloadLink.STATUS_TODO);
            step.setStatus(PluginStep.STATUS_TODO);
            return step;
          }
          try {
            requestInfo=readFromURL(requestInfo.getConnection());
          }
 catch (          Exception e) {
            if (requestInfo.getResponseCode() == 403) {
              logger.severe(""String_Node_Str"");
              downloadLink.setStatus(DownloadLink.STATUS_ERROR_PLUGIN_SPECIFIC);
              step.setParameter(""String_Node_Str"");
              step.setStatus(PluginStep.STATUS_ERROR);
              return step;
            }
          }
          Vector<String> urlStrings=getAllSimpleMatches(requestInfo.getHtmlCode(),""String_Node_Str"",1);
          logger.info(""String_Node_Str"" + serverAbb);
          logger.info(""String_Node_Str"" + server2Abb);
          url=null;
          if (telekom) {
            for (int i=0; i < urlStrings.size(); i++) {
              if (urlStrings.get(i).indexOf(""String_Node_Str"") > 0) {
                url=""String_Node_Str"" + urlStrings.get(i);
                break;
              }
            }
          }
          if (url == null) {
            for (int i=0; i < urlStrings.size(); i++) {
              if (urlStrings.get(i).indexOf(serverAbb + ""String_Node_Str"") > 0) {
                url=""String_Node_Str"" + urlStrings.get(i);
                logger.finer(""String_Node_Str"" + url.substring(0,30));
                break;
              }
            }
          }
          if (url == null) {
            for (int i=0; i < urlStrings.size(); i++) {
              if (urlStrings.get(i).indexOf(server2Abb + ""String_Node_Str"") > 0) {
                url=""String_Node_Str"" + urlStrings.get(i);
                logger.finer(""String_Node_Str"" + url.substring(0,30));
                break;
              }
            }
          }
          if (url == null && urlStrings.size() > 0) {
            url=""String_Node_Str"" + urlStrings.get((int)Math.ceil(Math.random() * urlStrings.size()) - 1);
            logger.finer(""String_Node_Str"" + url.substring(0,30));
          }
          if (url == null) {
            logger.severe(""String_Node_Str"");
            downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
            step.setStatus(PluginStep.STATUS_ERROR);
            return step;
          }
        }
        downloadLink.setStatusText(""String_Node_Str"" + url.substring(8,14));
        this.finalURL=url;
      }
 else {
        String strFileAbused=getFirstMatch(requestInfo.getHtmlCode(),patternErrorFileAbused,0);
        if (strFileAbused != null) {
          logger.severe(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_ABUSED);
          step.setStatus(PluginStep.STATUS_ERROR);
          return step;
        }
        String strFileNotFound=getFirstMatch(requestInfo.getHtmlCode(),patternErrorFileNotFound,0);
        if (strFileNotFound != null) {
          logger.severe(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_NOT_FOUND);
          step.setStatus(PluginStep.STATUS_ERROR);
          return step;
        }
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        logger.warning(""String_Node_Str"");
        return step;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      step.setStatus(PluginStep.STATUS_ERROR);
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
    }
  break;
case PluginStep.STEP_PENDING:
step.setStatus(PluginStep.STATUS_SKIP);
downloadLink.setStatusText(""String_Node_Str"");
step=nextStep(step);
case PluginStep.STEP_GET_CAPTCHA_FILE:
step.setStatus(PluginStep.STATUS_SKIP);
downloadLink.setStatusText(""String_Node_Str"");
step=nextStep(step);
case PluginStep.STEP_DOWNLOAD:
try {
if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
return step;
}
logger.info(""String_Node_Str"" + finalURL.substring(0,30));
HashMap<String,String> ranger=new HashMap<String,String>();
URLConnection urlConnection;
File fileOutput=new File(downloadLink.getFileOutput() + ""String_Node_Str"");
if (fileOutput.exists()) {
ranger.put(""String_Node_Str"",""String_Node_Str"" + fileOutput.length() + ""String_Node_Str"");
requestInfo=getRequestWithoutHtmlCode(new URL(finalURL),finalCookie,finalURL,ranger,true);
urlConnection=requestInfo.getConnection();
int length=urlConnection.getContentLength() + (int)fileOutput.length();
logger.info(requestInfo.getHeaders() + ""String_Node_Str"" + length);
downloadLink.setDownloadMax(length);
if (download(downloadLink,urlConnection,1024 * getProperties().getIntegerProperty(PROPERTY_BYTES_TO_LOAD,-1),(int)fileOutput.length())) {
step.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
return null;
}
 else if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
}
 else {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN_RETRY);
step.setStatus(PluginStep.STATUS_ERROR);
}
}
 else {
requestInfo=getRequestWithoutHtmlCode(new URL(finalURL),finalCookie,finalURL,ranger,true);
urlConnection=requestInfo.getConnection();
int length=urlConnection.getContentLength();
logger.info(requestInfo.getHeaders() + ""String_Node_Str"");
downloadLink.setDownloadMax(length);
String name=getFileNameFormHeader(urlConnection);
if (name.toLowerCase().matches(""String_Node_Str"")) name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
downloadLink.setName(name);
if (download(downloadLink,urlConnection,1024 * getProperties().getIntegerProperty(PROPERTY_BYTES_TO_LOAD,-1))) {
step.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
return null;
}
 else if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
}
 else {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN_RETRY);
step.setStatus(PluginStep.STATUS_ERROR);
}
}
}
 catch (IOException e) {
logger.severe(""String_Node_Str"" + e.toString());
}
}
return step;
}","private PluginStep doPremiumStep(PluginStep step,DownloadLink downloadLink){
  String server1=this.getProperties().getStringProperty(PROPERTY_SELECTED_SERVER,""String_Node_Str"");
  String server2=this.getProperties().getStringProperty(PROPERTY_SELECTED_SERVER2,""String_Node_Str"");
  String serverAbb=serverMap.get(server1);
  String server2Abb=serverMap.get(server2);
  logger.info(""String_Node_Str"" + serverMap);
  logger.info(""String_Node_Str"" + server1 + ""String_Node_Str""+ server2+ ""String_Node_Str""+ serverAbb+ ""String_Node_Str""+ server2Abb);
  if (serverAbb == null) {
    serverAbb=serverList1[(int)(Math.random() * (serverList1.length - 1))];
    logger.finer(""String_Node_Str"" + serverAbb);
  }
  if (server2Abb == null) {
    server2Abb=serverList2[(int)(Math.random() * (serverList2.length - 1))];
    logger.finer(""String_Node_Str"" + server2Abb);
  }
  Boolean telekom=!(this.getProperties().getProperty(PROPERTY_USE_TELEKOMSERVER) == null || !(Boolean)this.getProperties().getProperty(PROPERTY_USE_TELEKOMSERVER));
  String user=(String)this.getProperties().getProperty(PROPERTY_PREMIUM_USER);
  String pass=(String)this.getProperties().getProperty(PROPERTY_PREMIUM_PASS);
switch (step.getStep()) {
case PluginStep.STEP_WAIT_TIME:
    try {
      String link=downloadLink.getUrlDownloadDecrypted();
      if (this.getProperties().getBooleanProperty(PROPERTY_USE_SSL,true))       link=link.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      requestInfo=getRequest(new URL(link),null,""String_Node_Str"",false);
      if (requestInfo.getHtmlCode().indexOf(hardwareDefektString) > 0) {
        step.setStatus(PluginStep.STATUS_ERROR);
        logger.severe(""String_Node_Str"");
        step.setParameter(60 * 10);
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
        return step;
      }
      if (requestInfo.containsHTML(deletedByUploaderString)) {
        step.setStatus(PluginStep.STATUS_ERROR);
        logger.severe(""String_Node_Str"");
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_NOT_FOUND);
        return step;
      }
      String newURL=getFirstMatch(requestInfo.getHtmlCode(),patternForNewHost,1);
      if (newURL != null) {
        if (aborted) {
          logger.warning(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_TODO);
          step.setStatus(PluginStep.STATUS_TODO);
          return step;
        }
        requestInfo=postRequest(new URL(newURL),null,null,null,""String_Node_Str"",true);
        HashMap<String,String> fields=getInputHiddenFields(requestInfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"");
        String post=joinMap(fields,""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDUtilities.urlEncode(user)+ ""String_Node_Str""+ JDUtilities.urlEncode(pass);
        String url;
        if (fields.get(""String_Node_Str"") == null) {
          url=""String_Node_Str"";
        }
 else {
          url=""String_Node_Str"" + fields.get(""String_Node_Str"") + ""String_Node_Str"";
        }
        if (aborted) {
          logger.warning(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_TODO);
          step.setStatus(PluginStep.STATUS_TODO);
          return step;
        }
        requestInfo=postRequest(new URL(url),post);
        String cookie=requestInfo.getCookie();
        HashMap<String,String> fields2=getInputHiddenFields(requestInfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"");
        if (fields2.get(""String_Node_Str"") == null || fields2.get(""String_Node_Str"") == null) {
          step.setStatus(PluginStep.STATUS_ERROR);
          logger.severe(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_PREMIUM_LOGIN);
          return step;
        }
        this.finalCookie=cookie;
        post=""String_Node_Str"" + fields2.get(""String_Node_Str"") + ""String_Node_Str""+ fields2.get(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ fields.get(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
        url=""String_Node_Str"" + fields.get(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ fields.get(""String_Node_Str"")+ ""String_Node_Str""+ fields.get(""String_Node_Str"");
        requestInfo=postRequestWithoutHtmlCode(new URL(url),cookie,url,post,true);
        HashMap<String,String> fields3=getInputHiddenFields(requestInfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"");
        post=joinMap(fields3,""String_Node_Str"",""String_Node_Str"");
        if (!requestInfo.isOK()) {
          logger.info(""String_Node_Str"");
          logger.warning(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
          step.setStatus(PluginStep.STATUS_ERROR);
          return step;
        }
        if (requestInfo.getConnection().getHeaderField(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
        }
 else {
          logger.info(""String_Node_Str"");
          if (aborted) {
            logger.warning(""String_Node_Str"");
            downloadLink.setStatus(DownloadLink.STATUS_TODO);
            step.setStatus(PluginStep.STATUS_TODO);
            return step;
          }
          try {
            requestInfo=readFromURL(requestInfo.getConnection());
          }
 catch (          Exception e) {
            if (requestInfo.getResponseCode() == 403) {
              logger.severe(""String_Node_Str"");
              downloadLink.setStatus(DownloadLink.STATUS_ERROR_PLUGIN_SPECIFIC);
              step.setParameter(""String_Node_Str"");
              step.setStatus(PluginStep.STATUS_ERROR);
              return step;
            }
          }
          Vector<String> urlStrings=getAllSimpleMatches(requestInfo.getHtmlCode(),""String_Node_Str"",1);
          logger.info(""String_Node_Str"" + serverAbb);
          logger.info(""String_Node_Str"" + server2Abb);
          url=null;
          if (telekom) {
            for (int i=0; i < urlStrings.size(); i++) {
              if (urlStrings.get(i).indexOf(""String_Node_Str"") > 0) {
                url=""String_Node_Str"" + urlStrings.get(i);
                break;
              }
            }
          }
          if (url == null) {
            for (int i=0; i < urlStrings.size(); i++) {
              if (urlStrings.get(i).indexOf(serverAbb + ""String_Node_Str"") > 0) {
                url=""String_Node_Str"" + urlStrings.get(i);
                logger.finer(""String_Node_Str"" + url.substring(0,30));
                break;
              }
            }
          }
          if (url == null) {
            for (int i=0; i < urlStrings.size(); i++) {
              if (urlStrings.get(i).indexOf(server2Abb + ""String_Node_Str"") > 0) {
                url=""String_Node_Str"" + urlStrings.get(i);
                logger.finer(""String_Node_Str"" + url.substring(0,30));
                break;
              }
            }
          }
          if (url == null && urlStrings.size() > 0) {
            url=""String_Node_Str"" + urlStrings.get((int)Math.ceil(Math.random() * urlStrings.size()) - 1);
            logger.finer(""String_Node_Str"" + url.substring(0,30));
          }
          if (url == null) {
            logger.severe(""String_Node_Str"");
            downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
            step.setStatus(PluginStep.STATUS_ERROR);
            return step;
          }
        }
        downloadLink.setStatusText(""String_Node_Str"" + url.substring(8,14));
        this.finalURL=url;
      }
 else {
        String strFileAbused=getFirstMatch(requestInfo.getHtmlCode(),patternErrorFileAbused,0);
        if (strFileAbused != null) {
          logger.severe(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_ABUSED);
          step.setStatus(PluginStep.STATUS_ERROR);
          return step;
        }
        String strFileNotFound=getFirstMatch(requestInfo.getHtmlCode(),patternErrorFileNotFound,0);
        if (strFileNotFound != null) {
          logger.severe(""String_Node_Str"");
          downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_NOT_FOUND);
          step.setStatus(PluginStep.STATUS_ERROR);
          return step;
        }
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        step.setStatus(PluginStep.STATUS_ERROR);
        logger.warning(""String_Node_Str"");
        return step;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      step.setStatus(PluginStep.STATUS_ERROR);
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
    }
  break;
case PluginStep.STEP_PENDING:
step.setStatus(PluginStep.STATUS_SKIP);
downloadLink.setStatusText(""String_Node_Str"");
step=nextStep(step);
case PluginStep.STEP_GET_CAPTCHA_FILE:
step.setStatus(PluginStep.STATUS_SKIP);
downloadLink.setStatusText(""String_Node_Str"");
step=nextStep(step);
case PluginStep.STEP_DOWNLOAD:
try {
if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
return step;
}
logger.info(""String_Node_Str"" + finalURL.substring(0,30));
HashMap<String,String> ranger=new HashMap<String,String>();
URLConnection urlConnection;
File fileOutput=new File(downloadLink.getFileOutput() + ""String_Node_Str"");
if (fileOutput.exists()) {
ranger.put(""String_Node_Str"",""String_Node_Str"" + fileOutput.length() + ""String_Node_Str"");
requestInfo=getRequestWithoutHtmlCode(new URL(finalURL),finalCookie,finalURL,ranger,true);
urlConnection=requestInfo.getConnection();
int length=urlConnection.getContentLength() + (int)fileOutput.length();
logger.info(requestInfo.getHeaders() + ""String_Node_Str"" + length);
downloadLink.setDownloadMax(length);
if (download(downloadLink,urlConnection,1024 * getProperties().getIntegerProperty(PROPERTY_BYTES_TO_LOAD,-1),(int)fileOutput.length())) {
step.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
return null;
}
 else if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
}
 else {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN_RETRY);
step.setStatus(PluginStep.STATUS_ERROR);
}
}
 else {
requestInfo=getRequestWithoutHtmlCode(new URL(finalURL),finalCookie,finalURL,ranger,true);
urlConnection=requestInfo.getConnection();
int length=urlConnection.getContentLength();
logger.info(requestInfo.getHeaders() + ""String_Node_Str"");
downloadLink.setDownloadMax(length);
String name=getFileNameFormHeader(urlConnection);
if (name.toLowerCase().matches(""String_Node_Str"")) name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
downloadLink.setName(name);
if (download(downloadLink,urlConnection,1024 * getProperties().getIntegerProperty(PROPERTY_BYTES_TO_LOAD,-1))) {
step.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
return null;
}
 else if (aborted) {
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
step.setStatus(PluginStep.STATUS_TODO);
}
 else {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN_RETRY);
step.setStatus(PluginStep.STATUS_ERROR);
}
}
}
 catch (IOException e) {
logger.severe(""String_Node_Str"" + e.toString());
}
}
return step;
}"
21382,"/** 
 * @author JD-Team Macht ein urlRawEncode und spart dabei die angegebenenZeichen aus
 * @param str
 * @return str URLCodiert
 */
public static String urlEncode(String str){
  try {
    str=URLDecoder.decode(str,""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  String allowed=""String_Node_Str"";
  String ret=""String_Node_Str"";
  int i;
  for (i=0; i < str.length(); i++) {
    char letter=str.charAt(i);
    if (allowed.indexOf(letter) >= 0) {
      ret+=letter;
    }
 else {
      ret+=""String_Node_Str"" + Integer.toString(letter,16);
    }
  }
  return ret;
}","/** 
 * @author JD-Team Macht ein urlRawEncode und spart dabei die angegebenenZeichen aus
 * @param str
 * @return str URLCodiert
 */
public static String urlEncode(String str){
  String allowed=""String_Node_Str"";
  String ret=""String_Node_Str"";
  int i;
  for (i=0; i < str.length(); i++) {
    char letter=str.charAt(i);
    if (allowed.indexOf(letter) >= 0) {
      ret+=letter;
    }
 else {
      ret+=""String_Node_Str"" + Integer.toString(letter,16);
    }
  }
  return ret;
}"
21383,"/** 
 * MTH File wird geladen und verarbeitet
 */
private void loadMTHFile(){
  File f=JDUtilities.getResourceFile(""String_Node_Str"" + this.methodDirName + ""String_Node_Str""+ ""String_Node_Str"");
  mth=UTILITIES.parseXmlString(JDUtilities.getLocalFile(f),false);
  logger.info(""String_Node_Str"" + f);
  if (mth == null) {
    if (JAntiCaptcha.isLoggerActive())     logger.severe(""String_Node_Str"");
  }
  createLetterDBFormMTH();
}","/** 
 * MTH File wird geladen und verarbeitet
 */
private void loadMTHFile(){
  File f=JDUtilities.getResourceFile(""String_Node_Str"" + this.methodDirName + ""String_Node_Str""+ ""String_Node_Str"");
  Document mth=UTILITIES.parseXmlString(JDUtilities.getLocalFile(f),false);
  logger.info(""String_Node_Str"" + f);
  if (mth == null) {
    if (JAntiCaptcha.isLoggerActive())     logger.severe(""String_Node_Str"");
  }
  createLetterDBFormMTH(mth);
}"
21384,"/** 
 * Aus gründen der geschwindigkeit wird die MTH XMl in einen vector umgewandelt
 */
private void createLetterDBFormMTH(){
  letterDB=new Vector<Letter>();
  long start1=UTILITIES.getTimer();
  try {
    if (mth == null || mth.getFirstChild() == null)     return;
    NodeList nl=mth.getFirstChild().getChildNodes();
    Letter tmp;
    for (int i=0; i < nl.getLength(); i++) {
      Node childNode=nl.item(i);
      if (childNode.getNodeName().equals(""String_Node_Str"")) {
        NamedNodeMap att=childNode.getAttributes();
        tmp=new Letter();
        tmp.setOwner(this);
        if (!tmp.setTextGrid(childNode.getTextContent()))         continue;
        ;
        String id=UTILITIES.getAttribute(childNode,""String_Node_Str"");
        if (id != null) {
          tmp.id=Integer.parseInt(id);
        }
        tmp.setSourcehash(att.getNamedItem(""String_Node_Str"").getNodeValue());
        tmp.setDecodedValue(att.getNamedItem(""String_Node_Str"").getNodeValue());
        tmp.setBadDetections(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
        tmp.setGoodDetections(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
        letterDB.add(tmp);
      }
 else       if (childNode.getNodeName().equals(""String_Node_Str"")) {
        if (JAntiCaptcha.isLoggerActive())         logger.fine(""String_Node_Str"");
        long start2=UTILITIES.getTimer();
        String[] map=childNode.getTextContent().split(""String_Node_Str"");
        letterMap=new int[map.length][map.length];
        for (int x=0; x < map.length; x++) {
          String[] row=map[x].split(""String_Node_Str"");
          for (int y=0; y < map.length; y++) {
            letterMap[x][y]=Integer.parseInt(row[y]);
          }
        }
        if (JAntiCaptcha.isLoggerActive())         logger.fine(""String_Node_Str"" + (UTILITIES.getTimer() - start2));
      }
    }
  }
 catch (  Exception e) {
    if (JAntiCaptcha.isLoggerActive())     logger.severe(""String_Node_Str"");
  }
  if (JAntiCaptcha.isLoggerActive())   logger.fine(""String_Node_Str"" + (UTILITIES.getTimer() - start1));
}","/** 
 * Aus gründen der geschwindigkeit wird die MTH XMl in einen vector umgewandelt
 */
private void createLetterDBFormMTH(Document mth){
  letterDB=new Vector<Letter>();
  long start1=UTILITIES.getTimer();
  try {
    if (mth == null || mth.getFirstChild() == null)     return;
    NodeList nl=mth.getFirstChild().getChildNodes();
    Letter tmp;
    for (int i=0; i < nl.getLength(); i++) {
      Node childNode=nl.item(i);
      if (childNode.getNodeName().equals(""String_Node_Str"")) {
        NamedNodeMap att=childNode.getAttributes();
        tmp=new Letter();
        tmp.setOwner(this);
        if (!tmp.setTextGrid(childNode.getTextContent()))         continue;
        ;
        String id=UTILITIES.getAttribute(childNode,""String_Node_Str"");
        if (id != null) {
          tmp.id=Integer.parseInt(id);
        }
        tmp.setSourcehash(att.getNamedItem(""String_Node_Str"").getNodeValue());
        tmp.setDecodedValue(att.getNamedItem(""String_Node_Str"").getNodeValue());
        tmp.setBadDetections(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
        tmp.setGoodDetections(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
        letterDB.add(tmp);
      }
 else       if (childNode.getNodeName().equals(""String_Node_Str"")) {
        if (JAntiCaptcha.isLoggerActive())         logger.fine(""String_Node_Str"");
        long start2=UTILITIES.getTimer();
        String[] map=childNode.getTextContent().split(""String_Node_Str"");
        letterMap=new int[map.length][map.length];
        for (int x=0; x < map.length; x++) {
          String[] row=map[x].split(""String_Node_Str"");
          for (int y=0; y < map.length; y++) {
            letterMap[x][y]=Integer.parseInt(row[y]);
          }
        }
        if (JAntiCaptcha.isLoggerActive())         logger.fine(""String_Node_Str"" + (UTILITIES.getTimer() - start2));
      }
    }
  }
 catch (  Exception e) {
    if (JAntiCaptcha.isLoggerActive())     logger.severe(""String_Node_Str"");
  }
  if (JAntiCaptcha.isLoggerActive())   logger.fine(""String_Node_Str"" + (UTILITIES.getTimer() - start1));
}"
21385,"@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  try {
    URL url=new URL(parameter);
    if (parameter.matches(""String_Node_Str"")) {
      RequestInfo reqinfo=getRequest(new URL(""String_Node_Str""));
      if (reqinfo.getLocation() != null)       reqinfo=getRequest(new URL(""String_Node_Str""));
      int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(reqinfo.getHtmlCode());
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          break;
        }
      }
      if (name == null)       return null;
      reqinfo=getRequest(url,null,null,true);
      pattern=Pattern.compile(""String_Node_Str"" + name + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      String bet=getFirstMatch(reqinfo.getHtmlCode(),pattern,1);
      pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      matcher=pattern.matcher(bet);
      while (matcher.find()) {
        decryptedLinks.add(this.createDownloadlink(matcher.group(1)));
      }
      step.setParameter(decryptedLinks);
      return null;
    }
    String modifiedURL=url.toString();
    modifiedURL=modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
    modifiedURL=modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
    modifiedURL=modifiedURL.substring(modifiedURL.lastIndexOf(""String_Node_Str""));
    patternCaptcha=Pattern.compile(String.format(dynamicCaptcha,new Object[]{modifiedURL}));
    logger.fine(""String_Node_Str"" + patternCaptcha);
    RequestInfo reqinfo=getRequest(url,null,null,true);
    if (reqinfo.getLocation() != null)     reqinfo=getRequest(url,null,null,true);
    String furl=getSimpleMatch(reqinfo.getHtmlCode(),""String_Node_Str"" + modifiedURL + ""String_Node_Str"",0);
    if (furl != null) {
      url=new URL(furl + modifiedURL);
      logger.info(""String_Node_Str"" + furl + modifiedURL);
      reqinfo=getRequest(url,null,null,true);
      parameter=furl + modifiedURL;
    }
    Vector<Vector<String>> links;
    links=getAllSimpleMatches(reqinfo.getHtmlCode(),""String_Node_Str"");
    Vector<String> helpvector=new Vector<String>();
    String helpstring=""String_Node_Str"";
    if (parameter.indexOf(""String_Node_Str"") >= 0 || parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpstring=EinzelLinks(parameter);
      progress.increase(1);
      decryptedLinks.add(this.createDownloadlink(helpstring));
    }
 else     if (parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpvector=ContainerLinks(parameter);
      progress.increase(1);
      for (int j=0; j < helpvector.size(); j++) {
        decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
      }
    }
 else     if (parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpvector=ContainerLinks(parameter);
      progress.increase(1);
      for (int j=0; j < helpvector.size(); j++) {
        decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
      }
    }
 else {
      logger.info(""String_Node_Str"");
      progress.setRange(links.size());
      for (int i=0; i < links.size(); i++) {
        progress.increase(1);
        if (links.get(i).get(0).indexOf(""String_Node_Str"") >= 0) {
          helpstring=EinzelLinks(links.get(i).get(0));
          decryptedLinks.add(this.createDownloadlink(helpstring));
        }
 else         if (links.get(i).get(0).indexOf(""String_Node_Str"") >= 0) {
          helpvector=ContainerLinks(links.get(i).get(0));
          for (int j=0; j < helpvector.size(); j++) {
            decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
          }
        }
 else {
          decryptedLinks.add(this.createDownloadlink(links.get(i).get(0)));
          decryptedLinks.add(this.createDownloadlink(links.get(i).get(0)));
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
step.setParameter(decryptedLinks);
}
return null;
}","@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<DownloadLink> decryptedLinks=new Vector<DownloadLink>();
  try {
    URL url=new URL(parameter);
    if (parameter.matches(""String_Node_Str"")) {
      RequestInfo reqinfo=getRequest(new URL(""String_Node_Str""));
      if (reqinfo.getLocation() != null)       reqinfo=getRequest(new URL(""String_Node_Str""));
      int cat=Integer.parseInt(parameter.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str""));
      Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher matcher=pattern.matcher(reqinfo.getHtmlCode());
      String name=null;
      while (matcher.find()) {
        if (Integer.parseInt(matcher.group(1)) == cat) {
          name=matcher.group(2).toLowerCase();
          break;
        }
      }
      if (name == null)       return null;
      reqinfo=getRequest(url,null,null,true);
      name+=""String_Node_Str"";
      String bet=null;
      while (bet == null) {
        name=name.substring(0,name.length() - 1);
        if (name.length() == 0)         return null;
        pattern=Pattern.compile(""String_Node_Str"" + name + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        bet=getFirstMatch(reqinfo.getHtmlCode(),pattern,1);
      }
      pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      matcher=pattern.matcher(bet);
      while (matcher.find()) {
        decryptedLinks.add(this.createDownloadlink(matcher.group(1)));
      }
      step.setParameter(decryptedLinks);
      return null;
    }
    String modifiedURL=url.toString();
    modifiedURL=modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
    modifiedURL=modifiedURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
    modifiedURL=modifiedURL.substring(modifiedURL.lastIndexOf(""String_Node_Str""));
    patternCaptcha=Pattern.compile(String.format(dynamicCaptcha,new Object[]{modifiedURL}));
    logger.fine(""String_Node_Str"" + patternCaptcha);
    RequestInfo reqinfo=getRequest(url,null,null,true);
    if (reqinfo.getLocation() != null)     reqinfo=getRequest(url,null,null,true);
    String furl=getSimpleMatch(reqinfo.getHtmlCode(),""String_Node_Str"" + modifiedURL + ""String_Node_Str"",0);
    if (furl != null) {
      url=new URL(furl + modifiedURL);
      logger.info(""String_Node_Str"" + furl + modifiedURL);
      reqinfo=getRequest(url,null,null,true);
      parameter=furl + modifiedURL;
    }
    Vector<Vector<String>> links;
    links=getAllSimpleMatches(reqinfo.getHtmlCode(),""String_Node_Str"");
    Vector<String> helpvector=new Vector<String>();
    String helpstring=""String_Node_Str"";
    if (parameter.indexOf(""String_Node_Str"") >= 0 || parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpstring=EinzelLinks(parameter);
      progress.increase(1);
      decryptedLinks.add(this.createDownloadlink(helpstring));
    }
 else     if (parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpvector=ContainerLinks(parameter);
      progress.increase(1);
      for (int j=0; j < helpvector.size(); j++) {
        decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
      }
    }
 else     if (parameter.indexOf(""String_Node_Str"") >= 0) {
      logger.info(""String_Node_Str"");
      progress.setRange(1);
      helpvector=ContainerLinks(parameter);
      progress.increase(1);
      for (int j=0; j < helpvector.size(); j++) {
        decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
      }
    }
 else {
      logger.info(""String_Node_Str"");
      progress.setRange(links.size());
      for (int i=0; i < links.size(); i++) {
        progress.increase(1);
        if (links.get(i).get(0).indexOf(""String_Node_Str"") >= 0) {
          helpstring=EinzelLinks(links.get(i).get(0));
          decryptedLinks.add(this.createDownloadlink(helpstring));
        }
 else         if (links.get(i).get(0).indexOf(""String_Node_Str"") >= 0) {
          helpvector=ContainerLinks(links.get(i).get(0));
          for (int j=0; j < helpvector.size(); j++) {
            decryptedLinks.add(this.createDownloadlink(helpvector.get(j)));
          }
        }
 else {
          decryptedLinks.add(this.createDownloadlink(links.get(i).get(0)));
          decryptedLinks.add(this.createDownloadlink(links.get(i).get(0)));
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
step.setParameter(decryptedLinks);
}
return null;
}"
21386,"/** 
 * public static String getLocalFile(File file) Liest file über einen bufferdReader ein und gibt den Inhalt asl String zurück
 * @param file
 * @return File Content als String
 */
public static String getLocalFile(File file){
  if (!file.exists())   return ""String_Node_Str"";
  BufferedReader f;
  try {
    f=new BufferedReader(new FileReader(file));
    String line;
    String ret=""String_Node_Str"";
    while ((line=f.readLine()) != null) {
      ret+=line + ""String_Node_Str"";
    }
    f.close();
    return ret;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return ""String_Node_Str"";
}","/** 
 * public static String getLocalFile(File file) Liest file über einen bufferdReader ein und gibt den Inhalt asl String zurück
 * @param file
 * @return File Content als String
 */
public static String getLocalFile(File file){
  if (!file.exists())   return ""String_Node_Str"";
  BufferedReader f;
  try {
    f=new BufferedReader(new FileReader(file));
    System.gc();
    String line;
    StringBuffer ret=new StringBuffer();
    String sep=System.getProperty(""String_Node_Str"");
    while ((line=f.readLine()) != null) {
      ret.append(line + sep);
    }
    f.close();
    return ret.toString();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return ""String_Node_Str"";
}"
21387,"private JUnrar getUnrar(){
  JUnrar unrar;
  if (lastFinishedDownload != null) {
    String password=lastFinishedDownload.getSourcePluginPassword();
    if (password != null && password.matches(""String_Node_Str""))     password=null;
    unrar=new JUnrar(new File(lastFinishedDownload.getFileOutput()),password);
    if (password != null)     unrar.addToPasswordlist(password);
    unrar.useToextractlist=true;
  }
 else {
    unrar=new JUnrar();
    unrar.useToextractlist=false;
  }
  if (JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_ENABLE_EXTRACTFOLDER,false)) {
    String efolder=JDUtilities.getConfiguration().getStringProperty(Unrar.PROPERTY_EXTRACTFOLDER,null);
    if (efolder != null)     unrar.extractFolder=new File(efolder);
  }
 else   unrar.overwriteFiles=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
  unrar.autoDelete=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
  unrar.unrar=JDUtilities.getConfiguration().getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
  return unrar;
}","private JUnrar getUnrar(){
  JUnrar unrar;
  System.out.println(lastFinishedDownload);
  if (lastFinishedDownload != null) {
    String password=lastFinishedDownload.getSourcePluginPassword();
    if (password != null && password.matches(""String_Node_Str""))     password=null;
    unrar=new JUnrar(new File(lastFinishedDownload.getFileOutput()),password);
    if (password != null)     unrar.addToPasswordlist(password);
    unrar.useToextractlist=true;
  }
 else {
    unrar=new JUnrar();
    unrar.useToextractlist=false;
  }
  if (JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_ENABLE_EXTRACTFOLDER,false)) {
    String efolder=JDUtilities.getConfiguration().getStringProperty(Unrar.PROPERTY_EXTRACTFOLDER,null);
    if (efolder != null)     unrar.extractFolder=new File(efolder);
  }
  unrar.overwriteFiles=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
  unrar.autoDelete=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
  unrar.unrar=JDUtilities.getConfiguration().getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
  return unrar;
}"
21388,"/** 
 * Startet den Entpackungsprozess. Es werden alle Zielordner zurückgegeben
 */
public Vector<String> unrar(){
  unrar=getUnrarCommand();
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + unrar);
  if (useToextractlist) {
    if (extractFolder != null)     logger.info(""String_Node_Str"" + extractFolder);
 else     useToextractlist=false;
  }
  logger.info(""String_Node_Str"" + useToextractlist);
  logger.info(""String_Node_Str"" + overwriteFiles);
  logger.info(""String_Node_Str"" + autoDelete);
  if (unrar == null) {
    return null;
  }
  loadUnpackedList();
  if (useToextractlist) {
    loadToExtractList();
    files.putAll(toExtractlist);
  }
  progress.setStatusText(""String_Node_Str"");
  progress.increase(1);
  for (  Map.Entry<File,String> entry : files.entrySet()) {
    File file=entry.getKey();
    if (file.isFile()) {
      String name=file.getName();
      if (name.matches(""String_Node_Str"") && (autoDelete || !isFileInUnpackedList(entry.getKey()))) {
        if (isFollowing(name)) {
          if (useToextractlist) {
            String pw=entry.getValue();
            if (pw == null && standardPassword != null)             pw=standardPassword;
            addToToExtractList(entry.getKey(),pw);
          }
        }
 else {
          logger.finer(""String_Node_Str"" + entry.getKey());
          String pw=entry.getValue();
          if (pw == null && standardPassword != null)           pw=standardPassword;
          logger.info(""String_Node_Str"" + pw);
          if (extractFile(entry.getKey(),pw)) {
            ret.add(entry.getKey().getParentFile().getAbsolutePath());
          }
        }
      }
 else       if (!name.matches(""String_Node_Str"") && name.matches(""String_Node_Str"") && (autoDelete || !isFileInUnpackedList(entry.getKey()))) {
        if (isFollowing(name)) {
          if (useToextractlist) {
            String pw=entry.getValue();
            if (pw == null && standardPassword != null)             pw=standardPassword;
            addToToExtractList(entry.getKey(),standardPassword);
          }
        }
 else {
          logger.finer(""String_Node_Str"" + entry.getKey());
          String pw=entry.getValue();
          if (pw == null && standardPassword != null)           pw=standardPassword;
          logger.info(""String_Node_Str"" + pw);
          if (extractFile(entry.getKey(),pw)) {
            ret.add(entry.getKey().getParentFile().getAbsolutePath());
          }
        }
      }
 else {
      }
    }
 else     logger.fine(file.getName() + ""String_Node_Str"");
  }
  closeEvent();
  logger.info(""String_Node_Str"");
  progress.finalize();
  return ret;
}","/** 
 * Startet den Entpackungsprozess. Es werden alle Zielordner zurückgegeben
 */
public Vector<String> unrar(){
  unrar=getUnrarCommand();
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + unrar);
  logger.info(""String_Node_Str"" + extractFolder);
  logger.info(""String_Node_Str"" + useToextractlist);
  logger.info(""String_Node_Str"" + overwriteFiles);
  logger.info(""String_Node_Str"" + autoDelete);
  if (unrar == null) {
    return null;
  }
  loadUnpackedList();
  if (useToextractlist) {
    loadToExtractList();
    files.putAll(toExtractlist);
  }
  progress.setStatusText(""String_Node_Str"");
  progress.increase(1);
  for (  Map.Entry<File,String> entry : files.entrySet()) {
    File file=entry.getKey();
    if (file.isFile()) {
      String name=file.getName();
      if (name.matches(""String_Node_Str"") && (autoDelete || !isFileInUnpackedList(entry.getKey()))) {
        if (isFollowing(name)) {
          if (useToextractlist) {
            String pw=entry.getValue();
            if (pw == null && standardPassword != null)             pw=standardPassword;
            addToToExtractList(entry.getKey(),pw);
          }
        }
 else {
          logger.finer(""String_Node_Str"" + entry.getKey());
          String pw=entry.getValue();
          if (pw == null && standardPassword != null)           pw=standardPassword;
          logger.info(""String_Node_Str"" + pw);
          if (extractFile(entry.getKey(),pw)) {
            ret.add(entry.getKey().getParentFile().getAbsolutePath());
          }
        }
      }
 else       if (!name.matches(""String_Node_Str"") && name.matches(""String_Node_Str"") && (autoDelete || !isFileInUnpackedList(entry.getKey()))) {
        if (isFollowing(name)) {
          if (useToextractlist) {
            String pw=entry.getValue();
            if (pw == null && standardPassword != null)             pw=standardPassword;
            addToToExtractList(entry.getKey(),standardPassword);
          }
        }
 else {
          logger.finer(""String_Node_Str"" + entry.getKey());
          String pw=entry.getValue();
          if (pw == null && standardPassword != null)           pw=standardPassword;
          logger.info(""String_Node_Str"" + pw);
          if (extractFile(entry.getKey(),pw)) {
            ret.add(entry.getKey().getParentFile().getAbsolutePath());
          }
        }
      }
 else {
      }
    }
 else     logger.fine(file.getName() + ""String_Node_Str"");
  }
  closeEvent();
  logger.info(""String_Node_Str"");
  progress.finalize();
  return ret;
}"
21389,"private JUnrar getUnrar(){
  JUnrar unrar;
  if (lastFinishedDownload != null) {
    String password=lastFinishedDownload.getSourcePluginPassword();
    if (password != null && password.matches(""String_Node_Str""))     password=null;
    unrar=new JUnrar(new File(lastFinishedDownload.getFileOutput()),password);
    if (password != null)     unrar.addToPasswordlist(password);
    unrar.useToextractlist=true;
  }
 else {
    unrar=new JUnrar();
    unrar.useToextractlist=false;
  }
  if (JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_ENABLE_EXTRACTFOLDER,false)) {
    String efolder=JDUtilities.getConfiguration().getStringProperty(Unrar.PROPERTY_EXTRACTFOLDER,null);
    if (efolder != null)     unrar.extractFolder=new File(efolder);
  }
  unrar.overwriteFiles=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
  unrar.autoDelete=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
  unrar.unrar=JDUtilities.getConfiguration().getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
  return unrar;
}","private JUnrar getUnrar(){
  JUnrar unrar;
  if (lastFinishedDownload != null) {
    String password=lastFinishedDownload.getSourcePluginPassword();
    if (password != null && password.matches(""String_Node_Str""))     password=null;
    unrar=new JUnrar(new File(lastFinishedDownload.getFileOutput()),password);
    if (password != null)     unrar.addToPasswordlist(password);
  }
 else {
    unrar=new JUnrar();
  }
  if (JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_ENABLE_EXTRACTFOLDER,false)) {
    unrar.useToextractlist=true;
    String efolder=JDUtilities.getConfiguration().getStringProperty(Unrar.PROPERTY_EXTRACTFOLDER,null);
    if (efolder != null)     unrar.extractFolder=new File(efolder);
  }
 else   unrar.useToextractlist=false;
  unrar.overwriteFiles=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
  unrar.autoDelete=JDUtilities.getConfiguration().getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
  unrar.unrar=JDUtilities.getConfiguration().getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
  return unrar;
}"
21390,"/** 
 * Liefert alle selektierten Links zurück
 * @return Die selektierten Links
 */
public Vector<DownloadLink> getSelectedObjects(){
  int rows[]=table.getSelectedRows();
  Vector<DownloadLink> linksSelected=new Vector<DownloadLink>();
  for (int i=0; i < rows.length; i++) {
    linksSelected.add(allLinks.get(rows[i]));
  }
  return linksSelected;
}","/** 
 * Liefert alle selektierten Links zurück
 * @return Die selektierten Links
 */
public Vector<DownloadLink> getSelectedObjects(){
  int rows[]=table.getSelectedRows();
  Vector<DownloadLink> linksSelected=new Vector<DownloadLink>();
  int als=allLinks.size();
  for (int i=0; i < rows.length; i++) {
    if (rows[i] < als)     linksSelected.add(allLinks.get(rows[i]));
  }
  return linksSelected;
}"
21391,"private void saveToExtractList(){
  if (!useToextractlist) {
    Utilities.saveObject(this.toExtractlist,toExtract,false);
  }
}","private void saveToExtractList(){
  if (useToextractlist) {
    Utilities.saveObject(this.toExtractlist,toExtract,false);
  }
}"
21392,"private void removeFromToExtractList(File file){
  if (!useToextractlist) {
    if (toExtractlist == null)     loadToExtractList();
    if (toExtractlist.containsKey(file)) {
      toExtractlist.remove(file);
      saveToExtractList();
    }
  }
}","private void removeFromToExtractList(File file){
  if (useToextractlist) {
    if (toExtractlist == null)     loadToExtractList();
    if (toExtractlist.containsKey(file)) {
      toExtractlist.remove(file);
      saveToExtractList();
    }
  }
}"
21393,"@SuppressWarnings(""String_Node_Str"") private void loadToExtractList(){
  if (!useToextractlist) {
    if (toExtract.isFile()) {
      this.toExtractlist=(HashMap<File,String>)Utilities.loadObject(toExtract,false);
      freeToExtractList();
    }
 else {
      this.toExtractlist=new HashMap<File,String>();
      saveToExtractList();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void loadToExtractList(){
  if (useToextractlist) {
    if (toExtract.isFile()) {
      this.toExtractlist=(HashMap<File,String>)Utilities.loadObject(toExtract,false);
      freeToExtractList();
    }
 else {
      this.toExtractlist=new HashMap<File,String>();
      saveToExtractList();
    }
  }
}"
21394,"private void freeToExtractList(){
  if (!useToextractlist) {
    HashMap<File,String> toExtractlistTemp=new HashMap<File,String>();
    for (    Map.Entry<File,String> entry : toExtractlist.entrySet()) {
      File key=entry.getKey();
      if (key.isFile())       toExtractlistTemp.put(key,entry.getValue());
    }
    toExtractlist=toExtractlistTemp;
    saveToExtractList();
  }
}","private void freeToExtractList(){
  if (useToextractlist) {
    HashMap<File,String> toExtractlistTemp=new HashMap<File,String>();
    for (    Map.Entry<File,String> entry : toExtractlist.entrySet()) {
      File key=entry.getKey();
      if (key.isFile())       toExtractlistTemp.put(key,entry.getValue());
    }
    toExtractlist=toExtractlistTemp;
    saveToExtractList();
  }
}"
21395,"private void addToToExtractList(File file,String password){
  if (!useToextractlist) {
    if (toExtractlist == null)     loadToExtractList();
    if (!toExtractlist.containsKey(file)) {
      toExtractlist.put(file,password);
      saveToExtractList();
    }
  }
}","private void addToToExtractList(File file,String password){
  if (useToextractlist) {
    if (toExtractlist == null)     loadToExtractList();
    if (!toExtractlist.containsKey(file)) {
      toExtractlist.put(file,password);
      saveToExtractList();
    }
  }
}"
21396,"private Vector<String> ContainerLinks(String url){
  Vector<String> links=new Vector<String>();
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    RequestInfo reqinfo=getRequest(new URL(url));
    String cookie=reqinfo.getCookie();
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,false);
        }
        Vector<Vector<String>> gifs=getAllSimpleMatches(reqinfo.getHtmlCode(),patternCaptcha);
        String captchaAdress=""String_Node_Str"" + gifs.firstElement().get(1);
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,getRequestWithoutHtmlCode(new URL(captchaAdress),cookie,null,true).getConnection());
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
            cookie=reqinfo.getCookie();
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=Plugin.getCaptchaCode(captchaFile,this);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,true);
        }
        break;
      }
    }
    if (reqinfo.getLocation() != null) {
      links.add(reqinfo.getLocation());
    }
    Vector<Vector<String>> links1=getAllSimpleMatches(reqinfo.getHtmlCode(),""String_Node_Str"");
    for (int i=0; i < links1.size(); i++) {
      reqinfo=getRequest(new URL(links1.get(i).get(0)));
      reqinfo=getRequest(new URL(getBetween(reqinfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"")));
      links.add(reqinfo.getLocation());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}","private Vector<String> ContainerLinks(String url){
  Vector<String> links=new Vector<String>();
  boolean fileDownloaded=false;
  if (!url.startsWith(""String_Node_Str""))   url=""String_Node_Str"" + url;
  try {
    RequestInfo reqinfo=getRequest(new URL(url));
    String cookie=reqinfo.getCookie();
    File captchaFile=null;
    String capTxt=null;
    while (true) {
      Matcher matcher=patternCaptcha.matcher(reqinfo.getHtmlCode());
      if (matcher.find()) {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,false);
        }
        Vector<Vector<String>> gifs=getAllSimpleMatches(reqinfo.getHtmlCode(),patternCaptcha);
        String captchaAdress=""String_Node_Str"" + gifs.firstElement().get(1);
        captchaFile=getLocalCaptchaFile(this,""String_Node_Str"");
        fileDownloaded=JDUtilities.download(captchaFile,getRequestWithoutHtmlCode(new URL(captchaAdress),cookie,null,true).getConnection());
        if (!fileDownloaded || !captchaFile.exists() || captchaFile.length() == 0) {
          logger.severe(""String_Node_Str"");
          try {
            Thread.sleep(1000);
            reqinfo=getRequest(new URL(url));
            cookie=reqinfo.getCookie();
          }
 catch (          InterruptedException e) {
          }
          continue;
        }
        capTxt=Plugin.getCaptchaCode(captchaFile,this);
        reqinfo=postRequest(new URL(url),""String_Node_Str"" + matcher.group(1) + ""String_Node_Str""+ capTxt+ ""String_Node_Str"");
      }
 else {
        if (captchaFile != null && capTxt != null) {
          JDUtilities.appendInfoToFilename(captchaFile,capTxt,true);
        }
        break;
      }
    }
    if (reqinfo.getLocation() != null) {
      links.add(reqinfo.getLocation());
    }
    Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(reqinfo.getHtmlCode());
    while (matcher.find()) {
      reqinfo=getRequest(new URL(matcher.group(1)));
      reqinfo=getRequest(new URL(getBetween(reqinfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"")));
      String loc=reqinfo.getLocation();
      if (loc != null)       links.add(loc);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return links;
}"
21397,"/** 
 * Setzt alle Ordner in denen entpackt werden soll
 * @param folders
 */
@SuppressWarnings(""String_Node_Str"") public void setFolders(Vector<String> folders){
  this.srcFolders=folders;
  files=new HashMap<File,String>();
  HashMap<File,String> filelist=new HashMap<File,String>();
  if (progress != null)   progress.setStatusText(""String_Node_Str"");
  if (progress != null)   progress.increase(1);
  for (int i=0; i < srcFolders.size(); i++) {
    if (srcFolders.get(i) != null) {
      Vector<File> list=vFileList(new File(srcFolders.get(i)));
      for (int ii=0; ii < list.size(); ii++) {
        if (autoDelete && list.get(ii).getName().matches(""String_Node_Str""))         filelist.put(list.get(ii),null);
 else         if (list.get(ii).getName().matches(""String_Node_Str"")) {
          try {
            if (!unpackedlist.containsValue(Plugin.md5sum(list.get(ii)))) {
              filelist.put(list.get(ii),null);
            }
          }
 catch (          NoSuchAlgorithmException e) {
            e.printStackTrace();
          }
catch (          FileNotFoundException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  this.files=filelist;
}","/** 
 * Setzt alle Ordner in denen entpackt werden soll
 * @param folders
 */
@SuppressWarnings(""String_Node_Str"") public void setFolders(Vector<String> folders){
  this.srcFolders=folders;
  loadUnpackedList();
  files=new HashMap<File,String>();
  HashMap<File,String> filelist=new HashMap<File,String>();
  if (progress != null)   progress.setStatusText(""String_Node_Str"");
  if (progress != null)   progress.increase(1);
  for (int i=0; i < srcFolders.size(); i++) {
    if (srcFolders.get(i) != null) {
      Vector<File> list=vFileList(new File(srcFolders.get(i)));
      for (int ii=0; ii < list.size(); ii++) {
        if (autoDelete && list.get(ii).getName().matches(""String_Node_Str""))         filelist.put(list.get(ii),null);
 else         if (list.get(ii).getName().matches(""String_Node_Str"")) {
          if (!isFileInUnpackedList(list.get(ii))) {
            filelist.put(list.get(ii),null);
          }
        }
      }
    }
  }
  this.files=filelist;
}"
21398,"/** 
 * Startet den Entpackungsprozess. Es werden alle Zielordner zurückgegeben
 */
public Vector<String> unrar(){
  unrar=getUnrarCommand();
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + unrar);
  logger.info(""String_Node_Str"" + maxFilesize);
  logger.info(""String_Node_Str"" + standardPassword);
  logger.info(""String_Node_Str"" + overwriteFiles);
  logger.info(""String_Node_Str"" + autoDelete);
  if (unrar == null) {
    return null;
  }
  progress.setStatusText(""String_Node_Str"");
  progress.increase(1);
  for (  Map.Entry<File,String> entry : files.entrySet()) {
    File file=entry.getKey();
    if (file.isFile()) {
      String name=file.getName();
      if (name.matches(""String_Node_Str"")) {
        logger.finer(""String_Node_Str"" + entry.getKey());
        if (extractFile(entry.getKey(),entry.getValue())) {
          ret.add(entry.getKey().getParentFile().getAbsolutePath());
        }
      }
 else       if (!name.matches(""String_Node_Str"") && name.matches(""String_Node_Str"")) {
        logger.finer(""String_Node_Str"" + entry.getKey());
        if (extractFile(entry.getKey(),entry.getValue())) {
          ret.add(entry.getKey().getParentFile().getAbsolutePath());
        }
      }
 else {
      }
    }
 else     logger.fine(file.getName() + ""String_Node_Str"");
  }
  closeEvent();
  logger.info(""String_Node_Str"");
  progress.finalize();
  return ret;
}","/** 
 * Startet den Entpackungsprozess. Es werden alle Zielordner zurückgegeben
 */
public Vector<String> unrar(){
  unrar=getUnrarCommand();
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + unrar);
  logger.info(""String_Node_Str"" + maxFilesize);
  logger.info(""String_Node_Str"" + standardPassword);
  logger.info(""String_Node_Str"" + overwriteFiles);
  logger.info(""String_Node_Str"" + autoDelete);
  if (unrar == null) {
    return null;
  }
  loadUnpackedList();
  progress.setStatusText(""String_Node_Str"");
  progress.increase(1);
  for (  Map.Entry<File,String> entry : files.entrySet()) {
    File file=entry.getKey();
    if (file.isFile()) {
      String name=file.getName();
      if (name.matches(""String_Node_Str"")) {
        logger.finer(""String_Node_Str"" + entry.getKey());
        if ((autoDelete || !isFileInUnpackedList(entry.getKey())) && extractFile(entry.getKey(),entry.getValue())) {
          ret.add(entry.getKey().getParentFile().getAbsolutePath());
        }
      }
 else       if (!name.matches(""String_Node_Str"") && name.matches(""String_Node_Str"")) {
        logger.finer(""String_Node_Str"" + entry.getKey());
        System.out.println(!isFileInUnpackedList(entry.getKey()));
        if ((autoDelete || !isFileInUnpackedList(entry.getKey())) && extractFile(entry.getKey(),entry.getValue())) {
          ret.add(entry.getKey().getParentFile().getAbsolutePath());
        }
      }
 else {
      }
    }
 else     logger.fine(file.getName() + ""String_Node_Str"");
  }
  closeEvent();
  logger.info(""String_Node_Str"");
  progress.finalize();
  return ret;
}"
21399,"private String execprozess(File file,String password){
  try {
    Vector<String> params=new Vector<String>();
    if (password != ""String_Node_Str"") {
      params.add(""String_Node_Str"" + password);
    }
 else {
      params.add(""String_Node_Str"");
    }
    if (overwriteFiles) {
      params.add(""String_Node_Str"");
    }
 else {
      params.add(""String_Node_Str"");
    }
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    params.add(file.getName());
    Process p=createProcess(unrar,params.toArray(new String[]{}),file.getParentFile());
    String str=startInputListener(p,file.getParentFile());
    if (str.matches(allOk)) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(str);
      if (autoDelete) {
        while (matcher.find()) {
          File delfile=new File(file.getParentFile(),matcher.group(1));
          if (!delfile.isFile() || !delfile.delete())           logger.warning(""String_Node_Str"" + delfile.getName());
        }
      }
 else {
        while (matcher.find()) {
          File ufile=new File(file.getParentFile(),matcher.group(1));
          unpackedlist.put(ufile,Plugin.md5sum(ufile));
        }
        saveUnpackedList();
      }
      pattern=Pattern.compile(""String_Node_Str"");
      matcher=pattern.matcher(str);
      Vector<File> nfiles=new Vector<File>();
      while (matcher.find()) {
        nfiles.add(new File(file.getParent() + System.getProperty(""String_Node_Str"") + matcher.group(1)));
      }
      JUnrar un=new JUnrar(nfiles.toArray(new File[nfiles.size()]));
      un.maxFilesize=maxFilesize;
      un.standardPassword=standardPassword;
      un.autoDelete=autoDelete;
      un.unrar=unrar;
      un.overwriteFiles=overwriteFiles;
      ret.addAll(un.unrar());
    }
    return str;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","private String execprozess(File file,String password){
  try {
    Vector<String> params=new Vector<String>();
    if (password != ""String_Node_Str"") {
      params.add(""String_Node_Str"" + password);
    }
 else {
      params.add(""String_Node_Str"");
    }
    if (overwriteFiles) {
      params.add(""String_Node_Str"");
    }
 else {
      params.add(""String_Node_Str"");
    }
    params.add(""String_Node_Str"");
    params.add(""String_Node_Str"");
    params.add(file.getName());
    Process p=createProcess(unrar,params.toArray(new String[]{}),file.getParentFile());
    String str=startInputListener(p,file.getParentFile());
    if (str.matches(allOk)) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(str);
      if (autoDelete) {
        while (matcher.find()) {
          File delfile=new File(file.getParentFile(),matcher.group(1));
          if (!delfile.isFile() || !delfile.delete())           logger.warning(""String_Node_Str"" + delfile.getName());
        }
      }
 else {
        while (matcher.find()) {
          File ufile=new File(file.getParentFile(),matcher.group(1));
          unpackedlist.add(ufile);
        }
        saveUnpackedList();
      }
      pattern=Pattern.compile(""String_Node_Str"");
      matcher=pattern.matcher(str);
      Vector<File> nfiles=new Vector<File>();
      while (matcher.find()) {
        nfiles.add(new File(file.getParent() + System.getProperty(""String_Node_Str"") + matcher.group(1)));
      }
      JUnrar un=new JUnrar(nfiles.toArray(new File[nfiles.size()]));
      un.maxFilesize=maxFilesize;
      un.standardPassword=standardPassword;
      un.autoDelete=autoDelete;
      un.unrar=unrar;
      un.overwriteFiles=overwriteFiles;
      ret.addAll(un.unrar());
    }
    return str;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
21400,"@SuppressWarnings(""String_Node_Str"") private void loadUnpackedList(){
  if (!autoDelete) {
    if (unpacked.isFile()) {
      this.unpackedlist=(HashMap<File,String>)Utilities.loadObject(unpacked,false);
      freeUnpackedList();
    }
 else {
      this.unpackedlist=new HashMap<File,String>();
      saveUnpackedList();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void loadUnpackedList(){
  if (!autoDelete) {
    if (unpacked.isFile()) {
      this.unpackedlist=(Vector<File>)Utilities.loadObject(unpacked,false);
      freeUnpackedList();
    }
 else {
      this.unpackedlist=new Vector<File>();
      saveUnpackedList();
    }
  }
}"
21401,"private void freeUnpackedList(){
  if (!autoDelete) {
    HashMap<File,String> ret=new HashMap<File,String>();
    for (    Map.Entry<File,String> entry : unpackedlist.entrySet()) {
      File file=entry.getKey();
      String md5=entry.getValue();
      try {
        if (file.exists() && (md5 == Plugin.md5sum(file)))         ret.put(file,md5);
      }
 catch (      NoSuchAlgorithmException e) {
        e.printStackTrace();
      }
catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
    this.unpackedlist=ret;
    saveUnpackedList();
  }
}","private void freeUnpackedList(){
  if (!autoDelete) {
    for (int i=0; i < unpackedlist.size(); i++) {
      File file=unpackedlist.get(i);
      if (!file.exists())       unpackedlist.remove(i);
    }
    saveUnpackedList();
  }
}"
21402,"@Override public PluginStep doStep(PluginStep step,DownloadLink parameter){
  DownloadLink downloadLink=null;
  try {
    logger.info(""String_Node_Str"" + step);
    downloadLink=(DownloadLink)parameter;
switch (step.getStep()) {
case PluginStep.STEP_WAIT_TIME:
      requestInfo=getRequest(new URL(downloadLink.getUrlDownloadDecrypted()),null,null,true);
    String script=getBetween(requestInfo.getHtmlCode(),""String_Node_Str"",""String_Node_Str"");
  if (requestInfo.getHtmlCode().indexOf(""String_Node_Str"") >= 0) {
    step.setStatus(PluginStep.STATUS_ERROR);
    downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_ABUSED);
    return step;
  }
if (requestInfo.containsHTML(""String_Node_Str"")) {
  step.setStatus(PluginStep.STATUS_ERROR);
  downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
  return step;
}
Vector<Vector<String>> matches=getAllSimpleMatches(script,""String_Node_Str"");
String url=null;
for (int i=0; i < matches.size(); i++) {
if (url == null) url=""String_Node_Str"" + host;
url+=matches.elementAt(i).elementAt(0);
}
String newURL=url;
logger.info(url);
if (newURL != null) {
newURL=newURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
requestInfo=getRequest((new URL(newURL)),null,downloadLink.getName(),true);
actionString=""String_Node_Str"" + getFirstMatch(requestInfo.getHtmlCode(),frameForCaptcha,1);
actionString=actionString.replaceAll(""String_Node_Str"",""String_Node_Str"");
requestInfo=getRequest((new URL(actionString)),""String_Node_Str"",newURL,true);
captchaAddress=""String_Node_Str"" + getFirstMatch(requestInfo.getHtmlCode(),patternForCaptcha,1);
captchaAddress=captchaAddress.replaceAll(""String_Node_Str"",""String_Node_Str"");
postTarget=getFormInputHidden(requestInfo.getHtmlCode());
}
logger.info(captchaAddress + ""String_Node_Str"" + postTarget);
if (captchaAddress == null || postTarget == null) {
}
step.setStatus(PluginStep.STATUS_DONE);
return step;
case PluginStep.STEP_GET_CAPTCHA_FILE:
File file=this.getLocalCaptchaFile(this);
if (!JDUtilities.download(file,captchaAddress) || !file.exists()) {
logger.severe(""String_Node_Str"" + captchaAddress);
step.setParameter(null);
step.setStatus(PluginStep.STATUS_ERROR);
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
return step;
}
 else {
step.setParameter(file);
step.setStatus(PluginStep.STATUS_USER_INPUT);
}
break;
case PluginStep.STEP_DOWNLOAD:
try {
requestInfo=postRequest((new URL(actionString)),requestInfo.getCookie(),actionString,null,postTarget + ""String_Node_Str"" + (String)steps.get(1).getParameter(),true);
postTarget=getFirstMatch(requestInfo.getHtmlCode(),patternForDownloadlink,1);
postTarget=postTarget.replaceAll(""String_Node_Str"",""String_Node_Str"");
}
 catch (Exception e) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
step.setStatus(PluginStep.STATUS_ERROR);
e.printStackTrace();
}
try {
URLConnection urlConnection=new URL(postTarget).openConnection();
int length=urlConnection.getContentLength();
downloadLink.setDownloadMax(length);
downloadLink.setName(this.getFileNameFormHeader(urlConnection));
if (!hasEnoughHDSpace(downloadLink)) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_NO_FREE_SPACE);
step.setStatus(PluginStep.STATUS_ERROR);
return step;
}
if (download(downloadLink,urlConnection)) {
step.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
return null;
}
 else {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
step.setStatus(PluginStep.STATUS_ERROR);
}
}
 catch (IOException e) {
logger.severe(""String_Node_Str"" + e.toString());
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
step.setStatus(PluginStep.STATUS_ERROR);
return step;
}
break;
}
}
 catch (Exception e) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
step.setStatus(PluginStep.STATUS_ERROR);
e.printStackTrace();
return step;
}
return step;
}","@Override public PluginStep doStep(PluginStep step,DownloadLink parameter){
  DownloadLink downloadLink=null;
  try {
    logger.info(""String_Node_Str"" + step);
    downloadLink=(DownloadLink)parameter;
switch (step.getStep()) {
case PluginStep.STEP_WAIT_TIME:
      requestInfo=getRequest(new URL(downloadLink.getUrlDownloadDecrypted()),null,null,true);
    if (requestInfo.getHtmlCode().indexOf(""String_Node_Str"") >= 0) {
      step.setStatus(PluginStep.STATUS_ERROR);
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_FILE_ABUSED);
      return step;
    }
  if (requestInfo.containsHTML(""String_Node_Str"")) {
    step.setStatus(PluginStep.STATUS_ERROR);
    downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
    return step;
  }
String newURL=""String_Node_Str"" + requestInfo.getConnection().getURL().getHost() + getFirstMatch(requestInfo.getHtmlCode(),baseLink,1);
System.out.println(newURL);
logger.info(newURL);
if (newURL != null) {
newURL=newURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
requestInfo=getRequest((new URL(newURL)),null,downloadLink.getName(),true);
actionString=""String_Node_Str"" + getFirstMatch(requestInfo.getHtmlCode(),frameForCaptcha,1);
actionString=actionString.replaceAll(""String_Node_Str"",""String_Node_Str"");
System.out.println(actionString);
requestInfo=getRequest((new URL(actionString)),""String_Node_Str"",newURL,true);
captchaAddress=""String_Node_Str"" + getFirstMatch(requestInfo.getHtmlCode(),patternForCaptcha,1);
captchaAddress=captchaAddress.replaceAll(""String_Node_Str"",""String_Node_Str"");
System.out.println(captchaAddress);
postTarget=getFormInputHidden(requestInfo.getHtmlCode());
}
logger.info(captchaAddress + ""String_Node_Str"" + postTarget);
if (captchaAddress == null || postTarget == null) {
}
step.setStatus(PluginStep.STATUS_DONE);
return step;
case PluginStep.STEP_GET_CAPTCHA_FILE:
File file=this.getLocalCaptchaFile(this);
if (!JDUtilities.download(file,captchaAddress) || !file.exists()) {
logger.severe(""String_Node_Str"" + captchaAddress);
step.setParameter(null);
step.setStatus(PluginStep.STATUS_ERROR);
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
return step;
}
 else {
step.setParameter(file);
step.setStatus(PluginStep.STATUS_USER_INPUT);
}
break;
case PluginStep.STEP_DOWNLOAD:
try {
requestInfo=postRequest((new URL(actionString)),requestInfo.getCookie(),actionString,null,postTarget + ""String_Node_Str"" + (String)steps.get(1).getParameter(),true);
postTarget=getFirstMatch(requestInfo.getHtmlCode(),patternForDownloadlink,1);
postTarget=postTarget.replaceAll(""String_Node_Str"",""String_Node_Str"");
}
 catch (Exception e) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
step.setStatus(PluginStep.STATUS_ERROR);
e.printStackTrace();
}
try {
URLConnection urlConnection=new URL(postTarget).openConnection();
int length=urlConnection.getContentLength();
downloadLink.setDownloadMax(length);
downloadLink.setName(this.getFileNameFormHeader(urlConnection));
if (!hasEnoughHDSpace(downloadLink)) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_NO_FREE_SPACE);
step.setStatus(PluginStep.STATUS_ERROR);
return step;
}
if (download(downloadLink,urlConnection)) {
step.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
return null;
}
 else {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
step.setStatus(PluginStep.STATUS_ERROR);
}
}
 catch (IOException e) {
logger.severe(""String_Node_Str"" + e.toString());
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
step.setStatus(PluginStep.STATUS_ERROR);
return step;
}
break;
}
}
 catch (Exception e) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
step.setStatus(PluginStep.STATUS_ERROR);
e.printStackTrace();
return step;
}
return step;
}"
21403,"/** 
 * bricht den dpwnloadlink ab.
 * @param link
 */
public void abortDownloadLink(DownloadLink link){
  SingleDownloadController dlThread=getDownloadThread(link);
  if (dlThread != null)   dlThread.abortDownload();
}","/** 
 * bricht den dpwnloadlink ab.
 * @param link
 */
public void abortDownloadLink(DownloadLink link){
  SingleDownloadController dlThread=getDownloadThread(link);
  if (dlThread != null) {
    dlThread.abortDownload();
    removeDownloadLinkFromActiveList(link);
  }
  ;
}"
21404,"/** 
 * Bricht den Watchdog ab. Alle laufenden downloads werden beendet und die downloadliste zurückgesetzt. Diese Funktion blockiert bis alle Downloads erfolgreich abgeborhcen wurden.
 */
void abort(){
  logger.finer(""String_Node_Str"");
  for (int i=0; i < this.activeLinks.size(); i++) {
    activeLinks.get(i).abortDownload();
  }
  deligateFireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,null));
  boolean check=true;
  logger.finer(""String_Node_Str"");
  while (true) {
    check=true;
    for (int i=0; i < this.activeLinks.size(); i++) {
      if (activeLinks.get(i).isAlive()) {
        check=false;
        break;
      }
    }
    if (check)     break;
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
  logger.finer(""String_Node_Str"");
  this.aborted=true;
  this.clearDownloadListStatus();
}","/** 
 * Bricht den Watchdog ab. Alle laufenden downloads werden beendet und die downloadliste zurückgesetzt. Diese Funktion blockiert bis alle Downloads erfolgreich abgeborhcen wurden.
 */
void abort(){
  logger.finer(""String_Node_Str"");
  ProgressController progress=new ProgressController(activeLinks.size());
  progress.setStatusText(""String_Node_Str"");
  for (int i=0; i < this.activeLinks.size(); i++) {
    activeLinks.get(i).abortDownload();
  }
  deligateFireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,null));
  boolean check=true;
  logger.finer(""String_Node_Str"");
  while (true) {
    progress.increase(1);
    check=true;
    for (int i=0; i < this.activeLinks.size(); i++) {
      if (activeLinks.get(i).isAlive()) {
        check=false;
        break;
      }
    }
    if (check)     break;
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
    }
  }
  progress.finalize();
  logger.finer(""String_Node_Str"");
  this.aborted=true;
  this.clearDownloadListStatus();
}"
21405,"/** 
 * Hier werden die UIEvente ausgewertet
 * @param uiEvent UIEent
 */
public void uiEvent(UIEvent uiEvent){
  Vector<DownloadLink> newLinks;
switch (uiEvent.getActionID()) {
case UIEvent.UI_PAUSE_DOWNLOADS:
    logger.info(""String_Node_Str"");
  pauseDownloads((Boolean)uiEvent.getParameter());
break;
case UIEvent.UI_START_DOWNLOADS:
startDownloads();
break;
case UIEvent.UI_STOP_DOWNLOADS:
stopDownloads();
break;
case UIEvent.UI_LINKS_TO_PROCESS:
String data=(String)uiEvent.getParameter();
distributeData=new DistributeData(data);
distributeData.addControlListener(this);
distributeData.start();
break;
case UIEvent.UI_SAVE_CONFIG:
JDUtilities.saveObject(null,JDUtilities.getConfiguration(),JDUtilities.getJDHomeDirectory(),JDUtilities.CONFIG_PATH.split(""String_Node_Str"")[0],""String_Node_Str"" + JDUtilities.CONFIG_PATH.split(""String_Node_Str"")[1],Configuration.saveAsXML);
break;
case UIEvent.UI_LINKS_GRABBED:
Object links=uiEvent.getParameter();
if (links != null && links instanceof Vector && ((Vector)links).size() > 0) {
downloadLinks.addAll((Vector<DownloadLink>)links);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
uiInterface.setDownloadLinks(downloadLinks);
}
break;
case UIEvent.UI_SAVE_LINKS:
File file=(File)uiEvent.getParameter();
saveDLC(file);
break;
case UIEvent.UI_LOAD_LINKS:
file=(File)uiEvent.getParameter();
loadContainerFile(file);
break;
case UIEvent.UI_LOAD_CONTAINER:
File containerFile=(File)uiEvent.getParameter();
loadContainerFile(containerFile);
break;
case UIEvent.UI_EXIT:
exit();
break;
case UIEvent.UI_SET_CLIPBOARD:
this.clipboard.setEnabled((Boolean)uiEvent.getParameter());
break;
case UIEvent.UI_LINKS_CHANGED:
newLinks=uiInterface.getDownloadLinks();
abortDeletedLink(downloadLinks,newLinks);
downloadLinks=newLinks;
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
break;
case UIEvent.UI_INTERACT_RECONNECT:
if (getRunningDownloadNum() > 0) {
logger.info(""String_Node_Str"");
stopDownloads();
}
Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_RECONNECT,this);
if (Interaction.handleInteraction(Interaction.INTERACTION_NEED_RECONNECT,this)) {
uiInterface.showMessageDialog(""String_Node_Str"");
Iterator<DownloadLink> iterator=downloadLinks.iterator();
DownloadLink i;
while (iterator.hasNext()) {
i=iterator.next();
if (i.getRemainingWaittime() > 0) {
i.setEndOfWaittime(0);
i.setStatus(DownloadLink.STATUS_TODO);
}
}
}
 else {
if (Interaction.getInteractions(Interaction.INTERACTION_NEED_RECONNECT).length != 1) {
uiInterface.showMessageDialog(""String_Node_Str"");
}
 else {
uiInterface.showMessageDialog(""String_Node_Str"");
}
}
Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
uiInterface.setDownloadLinks(downloadLinks);
break;
case UIEvent.UI_INTERACT_UPDATE:
WebUpdate wu=new WebUpdate();
wu.addControlListener(this);
wu.interact(this);
break;
}
}","/** 
 * Hier werden die UIEvente ausgewertet
 * @param uiEvent UIEent
 */
public void uiEvent(UIEvent uiEvent){
  Vector<DownloadLink> newLinks;
switch (uiEvent.getActionID()) {
case UIEvent.UI_PAUSE_DOWNLOADS:
    logger.info(""String_Node_Str"");
  pauseDownloads((Boolean)uiEvent.getParameter());
break;
case UIEvent.UI_START_DOWNLOADS:
startDownloads();
break;
case UIEvent.UI_STOP_DOWNLOADS:
stopDownloads();
break;
case UIEvent.UI_LINKS_TO_PROCESS:
String data=(String)uiEvent.getParameter();
distributeData=new DistributeData(data);
distributeData.addControlListener(this);
distributeData.start();
break;
case UIEvent.UI_SAVE_CONFIG:
JDUtilities.saveObject(null,JDUtilities.getConfiguration(),JDUtilities.getJDHomeDirectory(),JDUtilities.CONFIG_PATH.split(""String_Node_Str"")[0],""String_Node_Str"" + JDUtilities.CONFIG_PATH.split(""String_Node_Str"")[1],Configuration.saveAsXML);
break;
case UIEvent.UI_LINKS_GRABBED:
Object links=uiEvent.getParameter();
if (links != null && links instanceof Vector && ((Vector)links).size() > 0) {
downloadLinks.addAll((Vector<DownloadLink>)links);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
uiInterface.setDownloadLinks(downloadLinks);
}
break;
case UIEvent.UI_SAVE_LINKS:
File file=(File)uiEvent.getParameter();
saveDLC(file);
break;
case UIEvent.UI_LOAD_LINKS:
file=(File)uiEvent.getParameter();
loadContainerFile(file);
break;
case UIEvent.UI_LOAD_CONTAINER:
File containerFile=(File)uiEvent.getParameter();
loadContainerFile(containerFile);
break;
case UIEvent.UI_EXIT:
exit();
break;
case UIEvent.UI_SET_CLIPBOARD:
this.clipboard.setEnabled((Boolean)uiEvent.getParameter());
break;
case UIEvent.UI_LINKS_CHANGED:
newLinks=uiInterface.getDownloadLinks();
abortDeletedLink(downloadLinks,newLinks);
downloadLinks.clear();
downloadLinks.addAll(newLinks);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
break;
case UIEvent.UI_INTERACT_RECONNECT:
if (getRunningDownloadNum() > 0) {
logger.info(""String_Node_Str"");
stopDownloads();
}
Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_RECONNECT,this);
if (Interaction.handleInteraction(Interaction.INTERACTION_NEED_RECONNECT,this)) {
uiInterface.showMessageDialog(""String_Node_Str"");
Iterator<DownloadLink> iterator=downloadLinks.iterator();
DownloadLink i;
while (iterator.hasNext()) {
i=iterator.next();
if (i.getRemainingWaittime() > 0) {
i.setEndOfWaittime(0);
i.setStatus(DownloadLink.STATUS_TODO);
}
}
}
 else {
if (Interaction.getInteractions(Interaction.INTERACTION_NEED_RECONNECT).length != 1) {
uiInterface.showMessageDialog(""String_Node_Str"");
}
 else {
uiInterface.showMessageDialog(""String_Node_Str"");
}
}
Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
uiInterface.setDownloadLinks(downloadLinks);
break;
case UIEvent.UI_INTERACT_UPDATE:
WebUpdate wu=new WebUpdate();
wu.addControlListener(this);
wu.interact(this);
break;
}
}"
21406,"/** 
 * bricht downloads ab wenn diese entfernt wurden
 * @param oldLinks
 * @param newLinks
 */
private void abortDeletedLink(Vector<DownloadLink> oldLinks,Vector<DownloadLink> newLinks){
  if (watchdog == null)   return;
  for (int i=0; i < oldLinks.size(); i++) {
    if (newLinks.indexOf(oldLinks.elementAt(i)) == -1) {
      oldLinks.elementAt(i).setAborted(true);
      watchdog.abortDownloadLink(oldLinks.elementAt(i));
    }
  }
}","/** 
 * bricht downloads ab wenn diese entfernt wurden
 * @param oldLinks
 * @param newLinks
 */
private void abortDeletedLink(Vector<DownloadLink> oldLinks,Vector<DownloadLink> newLinks){
  logger.info(""String_Node_Str"" + oldLinks.size() + ""String_Node_Str""+ newLinks.size());
  if (watchdog == null)   return;
  for (int i=0; i < oldLinks.size(); i++) {
    if (newLinks.indexOf(oldLinks.elementAt(i)) == -1) {
      logger.finer(""String_Node_Str"" + oldLinks.elementAt(i));
      watchdog.abortDownloadLink(oldLinks.elementAt(i));
    }
  }
}"
21407,"/** 
 * Hier werden ControlEvent ausgewertet
 * @param event
 */
public void controlEvent(ControlEvent event){
switch (event.getID()) {
case ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED:
    lastDownloadFinished=(DownloadLink)event.getParameter();
  saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
this.addToFinished(lastDownloadFinished);
if (this.getMissingPackageFiles(lastDownloadFinished) == 0) {
Interaction.handleInteraction(Interaction.INTERACTION_DOWNLOAD_PACKAGE_FINISHED,this);
}
if (lastDownloadFinished.getStatus() == DownloadLink.STATUS_DONE && Configuration.FINISHED_DOWNLOADS_REMOVE.equals(JDUtilities.getConfiguration().getProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION))) {
downloadLinks.remove(lastDownloadFinished);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
uiInterface.setDownloadLinks(downloadLinks);
}
break;
case ControlEvent.CONTROL_CAPTCHA_LOADED:
lastCaptchaLoaded=(File)event.getParameter();
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED:
Object links=event.getParameter();
if (links != null && links instanceof Vector && ((Vector)links).size() > 0) {
uiInterface.addLinksToGrabber((Vector<DownloadLink>)links);
}
break;
case ControlEvent.CONTROL_PLUGIN_INTERACTION_INACTIVE:
Interaction interaction=(Interaction)event.getParameter();
if (interaction instanceof HTTPReconnect && interaction.getCallCode() == Interaction.INTERACTION_CALL_SUCCESS) {
Iterator<DownloadLink> iterator=downloadLinks.iterator();
DownloadLink i;
while (iterator.hasNext()) {
i=iterator.next();
if (i.getRemainingWaittime() > 0) {
i.setEndOfWaittime(0);
i.setStatus(DownloadLink.STATUS_TODO);
}
}
}
 else if (interaction instanceof WebUpdate) {
}
break;
default :
break;
}
uiInterface.delegatedControlEvent(event);
}","/** 
 * Hier werden ControlEvent ausgewertet
 * @param event
 */
public void controlEvent(ControlEvent event){
switch (event.getID()) {
case ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED:
    lastDownloadFinished=(DownloadLink)event.getParameter();
  saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
this.addToFinished(lastDownloadFinished);
if (this.getMissingPackageFiles(lastDownloadFinished) == 0) {
Interaction.handleInteraction(Interaction.INTERACTION_DOWNLOAD_PACKAGE_FINISHED,this);
}
if (lastDownloadFinished.getStatus() == DownloadLink.STATUS_DONE && Configuration.FINISHED_DOWNLOADS_REMOVE.equals(JDUtilities.getConfiguration().getProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION))) {
logger.info(""String_Node_Str"");
downloadLinks.remove(lastDownloadFinished);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
uiInterface.setDownloadLinks(downloadLinks);
}
break;
case ControlEvent.CONTROL_CAPTCHA_LOADED:
lastCaptchaLoaded=(File)event.getParameter();
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED:
Object links=event.getParameter();
if (links != null && links instanceof Vector && ((Vector)links).size() > 0) {
uiInterface.addLinksToGrabber((Vector<DownloadLink>)links);
}
break;
case ControlEvent.CONTROL_PLUGIN_INTERACTION_INACTIVE:
Interaction interaction=(Interaction)event.getParameter();
if (interaction instanceof HTTPReconnect && interaction.getCallCode() == Interaction.INTERACTION_CALL_SUCCESS) {
Iterator<DownloadLink> iterator=downloadLinks.iterator();
DownloadLink i;
while (iterator.hasNext()) {
i=iterator.next();
if (i.getRemainingWaittime() > 0) {
i.setEndOfWaittime(0);
i.setStatus(DownloadLink.STATUS_TODO);
}
}
}
 else if (interaction instanceof WebUpdate) {
}
break;
default :
break;
}
uiInterface.delegatedControlEvent(event);
}"
21408,"/** 
 * Liefert alle DownloadLinks zurück
 * @return Alle DownloadLinks zurück
 */
protected Vector<DownloadLink> getDownloadLinks(){
  return downloadLinks;
}","/** 
 * Liefert alle DownloadLinks zurück
 * @return Alle DownloadLinks zurück
 */
public Vector<DownloadLink> getDownloadLinks(){
  return downloadLinks;
}"
21409,"public void run(){
  PluginForHost plugin;
  logger.info(""String_Node_Str"" + downloadLink.getName());
  currentPlugin=plugin=(PluginForHost)downloadLink.getPlugin();
  plugin.resetPlugin();
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(true);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  plugin.init();
  PluginStep step=plugin.doNextStep(downloadLink);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_ACTIVE,plugin));
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_STARTS,downloadLink));
  while (!aborted && step != null && step.getStatus() != PluginStep.STATUS_ERROR) {
    logger.info(""String_Node_Str"" + step);
    downloadLink.setStatusText(""String_Node_Str"");
    if (step.getStatus() != PluginStep.STATUS_SKIP) {
switch (step.getStep()) {
case PluginStep.STEP_PENDING:
        long wait=(Long)step.getParameter();
      logger.info(""String_Node_Str"" + wait);
    while (wait > 0 && !aborted) {
      downloadLink.setStatusText(""String_Node_Str"" + JDUtilities.formatSeconds((int)(wait / 1000)));
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      wait-=1000;
    }
  break;
case PluginStep.STEP_GET_CAPTCHA_FILE:
downloadLink.setStatusText(""String_Node_Str"");
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
File captcha=null;
if (step.getParameter() != null && step.getParameter() instanceof File) {
captcha=(File)step.getParameter();
}
if (captcha == null) {
logger.severe(""String_Node_Str"");
step.setParameter(""String_Node_Str"");
step.setStatus(PluginStep.STATUS_ERROR);
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
break;
}
 else {
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_CAPTCHA_LOADED,captcha));
downloadLink.setLatestCaptchaFile(captcha);
if (plugin.doBotCheck(captcha)) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_BOT_DETECTED);
step.setStatus(PluginStep.STATUS_ERROR);
step.setParameter(null);
break;
}
if (!Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_CAPTCHA),downloadLink,0)) {
String captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
logger.info(""String_Node_Str"" + captchaText);
downloadLink.setStatusText(""String_Node_Str"" + captchaText);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
 else {
Interaction[] interacts=Interaction.getInteractions(Interaction.INTERACTION_DOWNLOAD_CAPTCHA);
if (interacts.length > 0) {
String captchaText=(String)interacts[0].getProperty(""String_Node_Str"");
if (captchaText == null) {
captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
}
logger.info(""String_Node_Str"" + captchaText);
downloadLink.setStatusText(""String_Node_Str"" + captchaText);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
}
}
break;
}
if (aborted) {
break;
}
}
if (step != null && downloadLink != null && plugin != null && plugin.nextStep(step) != null) {
downloadLink.setStatusText(plugin.nextStep(step).toString());
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
}
if (step.getStatus() == PluginStep.STATUS_ERROR) {
break;
}
step=plugin.doNextStep(downloadLink);
}
if (aborted) {
downloadLink.setStatusText(""String_Node_Str"");
plugin.abort();
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
downloadLink.setInProgress(false);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
return;
}
if (step != null && step.getStatus() == PluginStep.STATUS_ERROR) {
switch (downloadLink.getStatus()) {
case DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT:
this.onErrorWaittime(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_STATIC_WAITTIME:
this.onErrorStaticWaittime(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE:
this.onErrorTemporarilyUnavailable(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_TO_MANY_USERS:
this.onErrorToManyUsers(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR:
this.onErrorCaptchaImage(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_FILE_ABUSED:
this.onErrorAbused(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_FILE_NOT_UPLOADED:
this.onErrorNotUploaded(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_UNKNOWN_RETRY:
this.onErrorRetry(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_FILE_NOT_FOUND:
this.onErrorFileNotFound(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_CAPTCHA_WRONG:
this.onErrorCaptcha(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_PREMIUM:
this.onErrorPremium(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_PREMIUM_LOGIN:
this.onErrorPremiumLogin(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_NO_FREE_SPACE:
this.onErrorNoFreeSpace(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_PLUGIN_SPECIFIC:
this.onErrorPluginSpecific(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_BOT_DETECTED:
this.onErrorBotdetection(downloadLink,plugin,step);
break;
default :
logger.info(""String_Node_Str"" + downloadLink.getStatus());
this.onErrorUnknown(downloadLink,plugin,step);
}
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED,downloadLink));
}
 else {
downloadLink.setStatusText(""String_Node_Str"");
downloadLink.setInProgress(false);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED,downloadLink));
Interaction.handleInteraction((Interaction.INTERACTION_SINGLE_DOWNLOAD_FINISHED),downloadLink);
}
}","public void run(){
  PluginForHost plugin;
  logger.info(""String_Node_Str"" + downloadLink.getName());
  currentPlugin=plugin=(PluginForHost)downloadLink.getPlugin();
  plugin.resetPlugin();
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(true);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  plugin.init();
  PluginStep step=plugin.doNextStep(downloadLink);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_ACTIVE,plugin));
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_STARTS,downloadLink));
  while (!aborted && step != null && step.getStatus() != PluginStep.STATUS_ERROR) {
    downloadLink.setStatusText(""String_Node_Str"");
    if (step.getStatus() != PluginStep.STATUS_SKIP) {
switch (step.getStep()) {
case PluginStep.STEP_PENDING:
        long wait=(Long)step.getParameter();
      logger.info(""String_Node_Str"" + wait);
    while (wait > 0 && !aborted) {
      downloadLink.setStatusText(""String_Node_Str"" + JDUtilities.formatSeconds((int)(wait / 1000)));
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      wait-=1000;
    }
  break;
case PluginStep.STEP_GET_CAPTCHA_FILE:
downloadLink.setStatusText(""String_Node_Str"");
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
File captcha=null;
if (step.getParameter() != null && step.getParameter() instanceof File) {
captcha=(File)step.getParameter();
}
if (captcha == null) {
logger.severe(""String_Node_Str"");
step.setParameter(""String_Node_Str"");
step.setStatus(PluginStep.STATUS_ERROR);
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
break;
}
 else {
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_CAPTCHA_LOADED,captcha));
downloadLink.setLatestCaptchaFile(captcha);
if (plugin.doBotCheck(captcha)) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_BOT_DETECTED);
step.setStatus(PluginStep.STATUS_ERROR);
step.setParameter(null);
break;
}
if (!Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_CAPTCHA),downloadLink,0)) {
String captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
logger.info(""String_Node_Str"" + captchaText);
downloadLink.setStatusText(""String_Node_Str"" + captchaText);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
 else {
Interaction[] interacts=Interaction.getInteractions(Interaction.INTERACTION_DOWNLOAD_CAPTCHA);
if (interacts.length > 0) {
String captchaText=(String)interacts[0].getProperty(""String_Node_Str"");
if (captchaText == null) {
captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
}
logger.info(""String_Node_Str"" + captchaText);
downloadLink.setStatusText(""String_Node_Str"" + captchaText);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
}
}
break;
}
if (aborted) {
break;
}
}
if (step != null && downloadLink != null && plugin != null && plugin.nextStep(step) != null) {
downloadLink.setStatusText(plugin.nextStep(step).toString());
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
}
if (step.getStatus() == PluginStep.STATUS_ERROR) {
break;
}
step=plugin.doNextStep(downloadLink);
}
if (aborted) {
downloadLink.setStatusText(""String_Node_Str"");
plugin.abort();
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
downloadLink.setInProgress(false);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
return;
}
if (step != null && step.getStatus() == PluginStep.STATUS_ERROR) {
switch (downloadLink.getStatus()) {
case DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT:
this.onErrorWaittime(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_STATIC_WAITTIME:
this.onErrorStaticWaittime(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE:
this.onErrorTemporarilyUnavailable(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_TO_MANY_USERS:
this.onErrorToManyUsers(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR:
this.onErrorCaptchaImage(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_FILE_ABUSED:
this.onErrorAbused(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_FILE_NOT_UPLOADED:
this.onErrorNotUploaded(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_UNKNOWN_RETRY:
this.onErrorRetry(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_FILE_NOT_FOUND:
this.onErrorFileNotFound(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_CAPTCHA_WRONG:
this.onErrorCaptcha(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_PREMIUM:
this.onErrorPremium(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_PREMIUM_LOGIN:
this.onErrorPremiumLogin(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_NO_FREE_SPACE:
this.onErrorNoFreeSpace(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_PLUGIN_SPECIFIC:
this.onErrorPluginSpecific(downloadLink,plugin,step);
break;
case DownloadLink.STATUS_ERROR_BOT_DETECTED:
this.onErrorBotdetection(downloadLink,plugin,step);
break;
default :
logger.info(""String_Node_Str"" + downloadLink.getStatus());
this.onErrorUnknown(downloadLink,plugin,step);
}
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED,downloadLink));
}
 else {
downloadLink.setStatusText(""String_Node_Str"");
downloadLink.setInProgress(false);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED,downloadLink));
Interaction.handleInteraction((Interaction.INTERACTION_SINGLE_DOWNLOAD_FINISHED),downloadLink);
}
}"
21410,"/** 
 * Delligiert die Pluginevents weiter an das host/decryptpanel. CHangedEvents werden abgefangen und im sekundeninterval weitergegeben.
 */
public void delegatedPluginEvent(PluginEvent event){
  if (event.getSource() instanceof PluginForHost && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.hostPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForDecrypt && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.decryptPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForSearch && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.decryptPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForHost) {
    tabDownloadTable.pluginEvent(event);
    return;
  }
  if (event.getSource() instanceof PluginForDecrypt || event.getSource() instanceof PluginForSearch) {
    splitpane.setDividerLocation(0.8);
    return;
  }
  if (event.getSource() instanceof PluginOptional || event.getSource() instanceof UserPlugin) {
    JDAction actionToDo=null;
switch (event.getEventID()) {
case PluginEvent.PLUGIN_CONTROL_DND:
      actionToDo=actionDnD;
    break;
case PluginEvent.PLUGIN_CONTROL_EXIT:
  actionToDo=actionExit;
break;
case PluginEvent.PLUGIN_CONTROL_RECONNECT:
actionToDo=actionReconnect;
break;
case PluginEvent.PLUGIN_CONTROL_SHOW_CONFIG:
actionToDo=actionConfig;
break;
case PluginEvent.PLUGIN_CONTROL_SHOW_UI:
frame.setVisible((Boolean)event.getParameter1());
break;
case PluginEvent.PLUGIN_CONTROL_START_STOP:
actionToDo=actionStartStopDownload;
break;
}
if (actionToDo != null) actionPerformed(new ActionEvent(this,actionToDo.getActionID(),""String_Node_Str""));
}
}","/** 
 * Delligiert die Pluginevents weiter an das host/decryptpanel. CHangedEvents werden abgefangen und im sekundeninterval weitergegeben.
 */
public void delegatedPluginEvent(PluginEvent event){
  if (event.getSource() instanceof PluginForHost && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.hostPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForDecrypt && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.decryptPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForSearch && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.decryptPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForHost) {
    tabDownloadTable.pluginEvent(event);
    return;
  }
  if (event.getSource() instanceof PluginForDecrypt || event.getSource() instanceof PluginForSearch) {
    splitpane.setDividerLocation(0.8);
    return;
  }
  if (event.getSource() instanceof PluginOptional) {
    JDAction actionToDo=null;
switch (event.getEventID()) {
case PluginEvent.PLUGIN_CONTROL_DND:
      actionToDo=actionDnD;
    break;
case PluginEvent.PLUGIN_CONTROL_EXIT:
  actionToDo=actionExit;
break;
case PluginEvent.PLUGIN_CONTROL_RECONNECT:
actionToDo=actionReconnect;
break;
case PluginEvent.PLUGIN_CONTROL_SHOW_CONFIG:
actionToDo=actionConfig;
break;
case PluginEvent.PLUGIN_CONTROL_SHOW_UI:
frame.setVisible((Boolean)event.getParameter1());
break;
case PluginEvent.PLUGIN_CONTROL_START_STOP:
actionToDo=actionStartStopDownload;
break;
}
if (actionToDo != null) actionPerformed(new ActionEvent(this,actionToDo.getActionID(),""String_Node_Str""));
}
}"
21411,"/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == reconnectBox) {
    HTTPReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    ExternReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,reconnectBox.getSelectedObjects() != null);
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_PAUSE_DOWNLOADS:
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
break;
case JDAction.APP_TESTER:
logger.finer(""String_Node_Str"");
Interaction.handleInteraction(Interaction.INTERACTION_TESTTRIGGER,false);
break;
case JDAction.APP_START_STOP_DOWNLOADS:
this.startStopDownloads();
break;
case JDAction.APP_SAVE_DLC:
JFileChooser fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_LOAD_CONTAINER:
fc=new JFileChooser();
fc.showOpenDialog(frame);
File file=fc.getSelectedFile();
if (file != null && file.exists()) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_CONTAINER,file));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
this.doReconnect();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
}
 else {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
break;
case JDAction.ITEMS_DND:
this.toggleDnD();
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_SEARCH:
SearchDialog s=new SearchDialog(this.getFrame());
data=s.getText();
if (!data.endsWith(""String_Node_Str"")) {
logger.info(data);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}","/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == reconnectBox) {
    HTTPReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    ExternReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,reconnectBox.getSelectedObjects() != null);
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_PAUSE_DOWNLOADS:
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
break;
case JDAction.APP_TESTER:
logger.finer(""String_Node_Str"");
Interaction.handleInteraction(Interaction.INTERACTION_TESTTRIGGER,false);
break;
case JDAction.APP_START_STOP_DOWNLOADS:
this.startStopDownloads();
break;
case JDAction.APP_SAVE_DLC:
JFileChooser fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_LOAD_CONTAINER:
fc=new JFileChooser();
fc.showOpenDialog(frame);
File file=fc.getSelectedFile();
if (file != null && file.exists()) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_CONTAINER,file));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
this.doReconnect();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,this.getDownloadLinks()));
}
}
 else {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,this.getDownloadLinks()));
}
break;
case JDAction.ITEMS_DND:
this.toggleDnD();
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_SEARCH:
SearchDialog s=new SearchDialog(this.getFrame());
data=s.getText();
if (!data.endsWith(""String_Node_Str"")) {
logger.info(data);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}"
21412,"public void actionPerformed(ActionEvent e){
  if (e.getSource() == openHome) {
    try {
      logger.info(""String_Node_Str"");
      JDUtilities.runCommand(""String_Node_Str"",new String[]{new File(downloadLinks.elementAt(0).getFileOutput()).getParent()},null,0);
    }
 catch (    Exception ec) {
    }
  }
  if (e.getSource() == delete) {
    removeSelectedLinks();
    parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,null));
  }
  if (e.getSource() == enable) {
    boolean status=downloadLinks.elementAt(0).isEnabled();
    for (int i=0; i < downloadLinks.size(); i++) {
      downloadLinks.elementAt(i).setEnabled(!status);
    }
    parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,null));
  }
  if (e.getSource() == info) {
    new DownloadInfo(parent.getFrame(),downloadLinks.elementAt(0));
  }
  if (e.getSource() == loadinfo) {
    Vector<DownloadLink> selectedDownloadLinks=getSelectedObjects();
    logger.info(""String_Node_Str"" + selectedDownloadLinks.size());
    logger.info(selectedDownloadLinks + ""String_Node_Str"");
    for (int i=0; i < selectedDownloadLinks.size(); i++) {
      DownloadLink link=selectedDownloadLinks.elementAt(i);
      link.isAvailable();
      fireTableChanged();
      try {
        Thread.sleep(20);
      }
 catch (      InterruptedException e2) {
      }
    }
    parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,null));
  }
  if (e.getSource() == top) {
    moveSelectedItems(JDAction.ITEMS_MOVE_TOP);
  }
  if (e.getSource() == bottom) {
    moveSelectedItems(JDAction.ITEMS_MOVE_BOTTOM);
  }
  if (e.getSource() == reset) {
    for (int i=0; i < downloadLinks.size(); i++) {
      if (!downloadLinks.elementAt(i).isInProgress()) {
        downloadLinks.elementAt(i).setStatus(DownloadLink.STATUS_TODO);
        downloadLinks.elementAt(i).setStatusText(""String_Node_Str"");
        downloadLinks.elementAt(i).reset();
      }
    }
    fireTableChanged();
    parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,null));
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == openHome) {
    try {
      logger.info(""String_Node_Str"");
      JDUtilities.runCommand(""String_Node_Str"",new String[]{new File(downloadLinks.elementAt(0).getFileOutput()).getParent()},null,0);
    }
 catch (    Exception ec) {
    }
  }
  if (e.getSource() == delete) {
    removeSelectedLinks();
    parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,parent.getDownloadLinks()));
  }
  if (e.getSource() == enable) {
    boolean status=downloadLinks.elementAt(0).isEnabled();
    for (int i=0; i < downloadLinks.size(); i++) {
      downloadLinks.elementAt(i).setEnabled(!status);
    }
    parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,parent.getDownloadLinks()));
  }
  if (e.getSource() == info) {
    new DownloadInfo(parent.getFrame(),downloadLinks.elementAt(0));
  }
  if (e.getSource() == loadinfo) {
    Vector<DownloadLink> selectedDownloadLinks=getSelectedObjects();
    logger.info(""String_Node_Str"" + selectedDownloadLinks.size());
    logger.info(selectedDownloadLinks + ""String_Node_Str"");
    for (int i=0; i < selectedDownloadLinks.size(); i++) {
      DownloadLink link=selectedDownloadLinks.elementAt(i);
      link.isAvailable();
      fireTableChanged();
      try {
        Thread.sleep(20);
      }
 catch (      InterruptedException e2) {
      }
    }
    parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,parent.getDownloadLinks()));
  }
  if (e.getSource() == top) {
    moveSelectedItems(JDAction.ITEMS_MOVE_TOP);
  }
  if (e.getSource() == bottom) {
    moveSelectedItems(JDAction.ITEMS_MOVE_BOTTOM);
  }
  if (e.getSource() == reset) {
    for (int i=0; i < downloadLinks.size(); i++) {
      if (!downloadLinks.elementAt(i).isInProgress()) {
        downloadLinks.elementAt(i).setStatus(DownloadLink.STATUS_TODO);
        downloadLinks.elementAt(i).setStatusText(""String_Node_Str"");
        downloadLinks.elementAt(i).reset();
      }
    }
    fireTableChanged();
    parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,parent.getDownloadLinks()));
  }
}"
21413,"/** 
 * Hiermit werden die selektierten Zeilen innerhalb der Tabelle verschoben
 * @param direction Zeigt wie/wohin die Einträge verschoben werden sollen
 */
public void moveSelectedItems(int direction){
  Vector<DownloadLink> selectedLinks=getSelectedObjects();
  int selectedRows[]=table.getSelectedRows();
  ;
  table.getSelectionModel().clearSelection();
  DownloadLink tempLink;
switch (direction) {
case JDAction.ITEMS_MOVE_TOP:
    allLinks.removeAll(selectedLinks);
  allLinks.addAll(0,selectedLinks);
break;
case JDAction.ITEMS_MOVE_BOTTOM:
allLinks.removeAll(selectedLinks);
allLinks.addAll(allLinks.size(),selectedLinks);
break;
case JDAction.ITEMS_MOVE_UP:
if (selectedRows[0] > 0) {
for (int i=0; i < selectedRows.length; i++) {
tempLink=allLinks.get(selectedRows[i] - 1);
allLinks.set(selectedRows[i] - 1,allLinks.get(selectedRows[i]));
allLinks.set(selectedRows[i],tempLink);
}
}
break;
case JDAction.ITEMS_MOVE_DOWN:
if (selectedRows[selectedRows.length - 1] + 1 < allLinks.size()) {
for (int i=selectedRows.length - 1; i >= 0; i--) {
tempLink=allLinks.get(selectedRows[i] + 1);
allLinks.set(selectedRows[i] + 1,allLinks.get(selectedRows[i]));
allLinks.set(selectedRows[i],tempLink);
}
}
break;
}
fireTableChanged();
parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,null));
int rows[]=getIndexes(selectedLinks);
for (int i=0; i < rows.length; i++) {
table.getSelectionModel().addSelectionInterval(rows[i],rows[i]);
}
}","/** 
 * Hiermit werden die selektierten Zeilen innerhalb der Tabelle verschoben
 * @param direction Zeigt wie/wohin die Einträge verschoben werden sollen
 */
public void moveSelectedItems(int direction){
  Vector<DownloadLink> selectedLinks=getSelectedObjects();
  int selectedRows[]=table.getSelectedRows();
  ;
  table.getSelectionModel().clearSelection();
  DownloadLink tempLink;
switch (direction) {
case JDAction.ITEMS_MOVE_TOP:
    allLinks.removeAll(selectedLinks);
  allLinks.addAll(0,selectedLinks);
break;
case JDAction.ITEMS_MOVE_BOTTOM:
allLinks.removeAll(selectedLinks);
allLinks.addAll(allLinks.size(),selectedLinks);
break;
case JDAction.ITEMS_MOVE_UP:
if (selectedRows[0] > 0) {
for (int i=0; i < selectedRows.length; i++) {
tempLink=allLinks.get(selectedRows[i] - 1);
allLinks.set(selectedRows[i] - 1,allLinks.get(selectedRows[i]));
allLinks.set(selectedRows[i],tempLink);
}
}
break;
case JDAction.ITEMS_MOVE_DOWN:
if (selectedRows[selectedRows.length - 1] + 1 < allLinks.size()) {
for (int i=selectedRows.length - 1; i >= 0; i--) {
tempLink=allLinks.get(selectedRows[i] + 1);
allLinks.set(selectedRows[i] + 1,allLinks.get(selectedRows[i]));
allLinks.set(selectedRows[i],tempLink);
}
}
break;
}
fireTableChanged();
parent.fireUIEvent(new UIEvent(parent,UIEvent.UI_LINKS_CHANGED,parent.getDownloadLinks()));
int rows[]=getIndexes(selectedLinks);
for (int i=0; i < rows.length; i++) {
table.getSelectionModel().addSelectionInterval(rows[i],rows[i]);
}
}"
21414,"/** 
 * Diese methode führt den Nächsten schritt aus. Der gerade ausgeführte Schritt wir zurückgegeben
 * @param parameter Ein Übergabeparameter
 * @return der nächste Schritt oder null, falls alle abgearbeitet wurden
 */
public PluginStep doNextStep(Object parameter){
  currentStep=nextStep(currentStep);
  if (currentStep == null) {
    logger.info(this + ""String_Node_Str"");
    return null;
  }
  PluginStep ret=doStep(currentStep,parameter);
  return ret;
}","/** 
 * Diese methode führt den Nächsten schritt aus. Der gerade ausgeführte Schritt wir zurückgegeben
 * @param parameter Ein Übergabeparameter
 * @return der nächste Schritt oder null, falls alle abgearbeitet wurden
 */
public PluginStep doNextStep(Object parameter){
  currentStep=nextStep(currentStep);
  if (currentStep == null) {
    logger.info(this + ""String_Node_Str"");
    return null;
  }
  logger.info(""String_Node_Str"" + currentStep);
  PluginStep ret=doStep(currentStep,parameter);
  return ret;
}"
21415,"@Override public Pattern getSupportedLinks(){
  String strSupported=this.getProperties().getStringProperty(""String_Node_Str"",""String_Node_Str"");
  String[] Supp=strSupported.split(System.getProperty(""String_Node_Str""));
  String[] Supported=new String[Supp.length + SUPPORTEDHOSTS.length];
  for (int i=0; i < Supp.length; i++) {
    Supported[i]=Supp[i];
  }
  for (int i=0; i < SUPPORTEDHOSTS.length; i++) {
    Supported[Supp.length + i]=SUPPORTEDHOSTS[i];
  }
  String patternStr=""String_Node_Str"";
  if (Supported.length > 0) {
    Supported[0]=Supported[0].replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    if (Supported[0].matches(""String_Node_Str""))     Supported[0]=Supported[0].replaceFirst(""String_Node_Str"",""String_Node_Str"");
    patternStr+=Supported[0];
    for (int i=1; i < Supported.length; i++) {
      Supported[i]=Supported[i].replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
      if (Supported[i].matches(""String_Node_Str""))       Supported[i]=Supported[i].replaceFirst(""String_Node_Str"",""String_Node_Str"");
      patternStr+=""String_Node_Str"" + Supported[i];
    }
  }
  patternStr+=""String_Node_Str"";
  return Pattern.compile(patternStr,Pattern.CASE_INSENSITIVE);
}","@Override public Pattern getSupportedLinks(){
  String strSupported=this.getProperties().getStringProperty(""String_Node_Str"",""String_Node_Str"");
  String[] Supp=strSupported.split(System.getProperty(""String_Node_Str""));
  String[] Supported=new String[Supp.length + SUPPORTEDHOSTS.length];
  for (int i=0; i < Supp.length; i++) {
    Supported[i]=Supp[i];
  }
  for (int i=0; i < SUPPORTEDHOSTS.length; i++) {
    Supported[Supp.length + i]=SUPPORTEDHOSTS[i];
  }
  String patternStr=""String_Node_Str"";
  boolean b=false;
  for (int i=1; i < Supported.length; i++) {
    Supported[i]=Supported[i].replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    if (Supported[i].matches(""String_Node_Str""))     Supported[i]=Supported[i].replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (b && !Supported[i].trim().isEmpty())     patternStr+=""String_Node_Str"" + Supported[i];
 else     if (!b && !Supported[i].trim().isEmpty()) {
      b=true;
      patternStr+=Supported[0];
    }
  }
  patternStr+=""String_Node_Str"";
  logger.info(patternStr);
  return Pattern.compile(patternStr,Pattern.CASE_INSENSITIVE);
}"
21416,"@Override public PluginStep doStep(PluginStep step,String parameter){
  if (step.getStep() == PluginStep.STEP_DECRYPT) {
    Vector<String> decryptedLinks=new Vector<String>();
    try {
      URL url=new URL(parameter);
      RequestInfo reqinfo=getRequest(url);
      int count=0;
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternRapidshare) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternNetload) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternUploaded) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternGulli) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternShareonline) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternLoad) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSimpleupload) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternCocoshare) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternFilehoster) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternMegaupload) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSpeedyshare) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternArchiv) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternBluehost) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternDatenklo) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSharebase) > 0) {
        count++;
      }
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_MAX,count));
      RequestInfo reqhelp;
      parameter=parameter.replaceAll(""String_Node_Str"",""String_Node_Str"");
      parameter=parameter.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternRapidshare) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternNetload) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternUploaded) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternGulli) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternShareonline) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternLoad) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSimpleupload) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternCocoshare) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternFilehoster) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternMegaupload) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSpeedyshare) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternArchiv) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternDatenklo) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternBluehost) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSharebase) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      System.out.println(decryptedLinks.toString());
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,null));
      step.setParameter(decryptedLinks);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}","@Override public PluginStep doStep(PluginStep step,String parameter){
  if (step.getStep() == PluginStep.STEP_DECRYPT) {
    Vector<String> decryptedLinks=new Vector<String>();
    try {
      URL url=new URL(parameter);
      RequestInfo reqinfo=getRequest(url);
      int count=0;
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternRapidshare) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternNetload) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternUploaded) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternGulli) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternShareonline) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternLoad) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSimpleupload) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternCocoshare) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternFilehoster) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternMegaupload) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSpeedyshare) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternArchiv) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternBluehost) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternDatenklo) > 0) {
        count++;
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSharebase) > 0) {
        count++;
      }
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_MAX,count));
      RequestInfo reqhelp;
      parameter=parameter.replaceAll(""String_Node_Str"",""String_Node_Str"");
      parameter=parameter.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternRapidshare) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternNetload) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternUploaded) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternGulli) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternShareonline) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternLoad) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSimpleupload) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternCocoshare) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternFilehoster) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternMegaupload) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSpeedyshare) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternArchiv) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternDatenklo) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternBluehost) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      if ((Boolean)this.getProperties().getProperty(""String_Node_Str"",true) && countOccurences(reqinfo.getHtmlCode(),patternSharebase) > 0) {
        reqhelp=getRequest(new URL(parameter + ""String_Node_Str""));
        decryptedLinks.add(getBetween(reqhelp.getHtmlCode(),""String_Node_Str"",""String_Node_Str""));
        firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
      }
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,null));
      step.setParameter(decryptedLinks);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}"
21417,"/** 
 * Hier werden ControlEvent ausgewertet
 * @param event
 */
public void controlEvent(ControlEvent event){
  Vector<DownloadLink> links;
switch (event.getID()) {
case ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED:
    if (removeDownloadLinkFromActiveList((DownloadLink)event.getParameter())) {
      logger.info(""String_Node_Str"" + this.activeLinks.size());
    }
  links=getDownloadLinks();
for (int i=0; i < links.size(); i++) {
  if (links.get(i).waitsForReconnect()) {
    Interaction.handleInteraction((Interaction.INTERACTION_NEED_RECONNECT),this);
    break;
  }
}
break;
case ControlEvent.CONTROL_CAPTCHA_LOADED:
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED:
break;
case ControlEvent.CONTROL_PLUGIN_INTERACTION_INACTIVE:
case ControlEvent.CONTROL_PLUGIN_INTERACTION_RETURNED:
default :
break;
}
}","/** 
 * Hier werden ControlEvent ausgewertet
 * @param event
 */
public void controlEvent(ControlEvent event){
  Vector<DownloadLink> links;
switch (event.getID()) {
case ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED:
    if (removeDownloadLinkFromActiveList((DownloadLink)event.getParameter())) {
      logger.info(""String_Node_Str"" + this.activeLinks.size());
    }
  links=getDownloadLinks();
for (int i=0; i < links.size(); i++) {
  if (links.get(i).waitsForReconnect()) {
    Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_RECONNECT,this);
    Interaction.handleInteraction((Interaction.INTERACTION_NEED_RECONNECT),this);
    Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
    break;
  }
}
break;
case ControlEvent.CONTROL_CAPTCHA_LOADED:
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED:
break;
case ControlEvent.CONTROL_PLUGIN_INTERACTION_INACTIVE:
case ControlEvent.CONTROL_PLUGIN_INTERACTION_RETURNED:
default :
break;
}
}"
21418,"/** 
 * Hier werden die UIEvente ausgewertet
 * @param uiEvent UIEent
 */
public void uiEvent(UIEvent uiEvent){
  Vector<DownloadLink> newLinks;
switch (uiEvent.getActionID()) {
case UIEvent.UI_PAUSE_DOWNLOADS:
    logger.info(""String_Node_Str"");
  pauseDownloads((Boolean)uiEvent.getParameter());
break;
case UIEvent.UI_START_DOWNLOADS:
startDownloads();
break;
case UIEvent.UI_STOP_DOWNLOADS:
stopDownloads();
break;
case UIEvent.UI_LINKS_TO_PROCESS:
String data=(String)uiEvent.getParameter();
distributeData=new DistributeData(data);
distributeData.addControlListener(this);
distributeData.start();
break;
case UIEvent.UI_SAVE_CONFIG:
JDUtilities.saveObject(null,JDUtilities.getConfiguration(),JDUtilities.getJDHomeDirectory(),JDUtilities.CONFIG_PATH.split(""String_Node_Str"")[0],""String_Node_Str"" + JDUtilities.CONFIG_PATH.split(""String_Node_Str"")[1],Configuration.saveAsXML);
break;
case UIEvent.UI_LINKS_GRABBED:
Object links=uiEvent.getParameter();
if (links != null && links instanceof Vector && ((Vector)links).size() > 0) {
downloadLinks.addAll((Vector<DownloadLink>)links);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
uiInterface.setDownloadLinks(downloadLinks);
}
break;
case UIEvent.UI_SAVE_LINKS:
File file=(File)uiEvent.getParameter();
saveDLC(file);
break;
case UIEvent.UI_LOAD_LINKS:
file=(File)uiEvent.getParameter();
loadContainerFile(file);
break;
case UIEvent.UI_LOAD_CONTAINER:
File containerFile=(File)uiEvent.getParameter();
loadContainerFile(containerFile);
break;
case UIEvent.UI_EXIT:
exit();
break;
case UIEvent.UI_SET_CLIPBOARD:
this.clipboard.setEnabled((Boolean)uiEvent.getParameter());
break;
case UIEvent.UI_LINKS_CHANGED:
newLinks=uiInterface.getDownloadLinks();
abortDeletedLink(downloadLinks,newLinks);
downloadLinks=newLinks;
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
break;
case UIEvent.UI_INTERACT_RECONNECT:
if (getRunningDownloadNum() > 0) {
logger.info(""String_Node_Str"");
stopDownloads();
}
if (Interaction.handleInteraction(Interaction.INTERACTION_NEED_RECONNECT,this)) {
uiInterface.showMessageDialog(""String_Node_Str"");
Iterator<DownloadLink> iterator=downloadLinks.iterator();
DownloadLink i;
while (iterator.hasNext()) {
i=iterator.next();
if (i.getRemainingWaittime() > 0) {
i.setEndOfWaittime(0);
i.setStatus(DownloadLink.STATUS_TODO);
}
}
if (Interaction.getInteractions(Interaction.INTERACTION_NEED_RECONNECT).length != 1) {
uiInterface.showMessageDialog(""String_Node_Str"" + Interaction.getInteractions(Interaction.INTERACTION_NEED_RECONNECT).length + ""String_Node_Str"");
}
}
 else {
if (Interaction.getInteractions(Interaction.INTERACTION_NEED_RECONNECT).length != 1) {
uiInterface.showMessageDialog(""String_Node_Str"");
}
 else {
uiInterface.showMessageDialog(""String_Node_Str"");
}
}
uiInterface.setDownloadLinks(downloadLinks);
break;
case UIEvent.UI_INTERACT_UPDATE:
WebUpdate wu=new WebUpdate();
wu.addControlListener(this);
wu.interact(this);
break;
}
}","/** 
 * Hier werden die UIEvente ausgewertet
 * @param uiEvent UIEent
 */
public void uiEvent(UIEvent uiEvent){
  Vector<DownloadLink> newLinks;
switch (uiEvent.getActionID()) {
case UIEvent.UI_PAUSE_DOWNLOADS:
    logger.info(""String_Node_Str"");
  pauseDownloads((Boolean)uiEvent.getParameter());
break;
case UIEvent.UI_START_DOWNLOADS:
startDownloads();
break;
case UIEvent.UI_STOP_DOWNLOADS:
stopDownloads();
break;
case UIEvent.UI_LINKS_TO_PROCESS:
String data=(String)uiEvent.getParameter();
distributeData=new DistributeData(data);
distributeData.addControlListener(this);
distributeData.start();
break;
case UIEvent.UI_SAVE_CONFIG:
JDUtilities.saveObject(null,JDUtilities.getConfiguration(),JDUtilities.getJDHomeDirectory(),JDUtilities.CONFIG_PATH.split(""String_Node_Str"")[0],""String_Node_Str"" + JDUtilities.CONFIG_PATH.split(""String_Node_Str"")[1],Configuration.saveAsXML);
break;
case UIEvent.UI_LINKS_GRABBED:
Object links=uiEvent.getParameter();
if (links != null && links instanceof Vector && ((Vector)links).size() > 0) {
downloadLinks.addAll((Vector<DownloadLink>)links);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
uiInterface.setDownloadLinks(downloadLinks);
}
break;
case UIEvent.UI_SAVE_LINKS:
File file=(File)uiEvent.getParameter();
saveDLC(file);
break;
case UIEvent.UI_LOAD_LINKS:
file=(File)uiEvent.getParameter();
loadContainerFile(file);
break;
case UIEvent.UI_LOAD_CONTAINER:
File containerFile=(File)uiEvent.getParameter();
loadContainerFile(containerFile);
break;
case UIEvent.UI_EXIT:
exit();
break;
case UIEvent.UI_SET_CLIPBOARD:
this.clipboard.setEnabled((Boolean)uiEvent.getParameter());
break;
case UIEvent.UI_LINKS_CHANGED:
newLinks=uiInterface.getDownloadLinks();
abortDeletedLink(downloadLinks,newLinks);
downloadLinks=newLinks;
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
break;
case UIEvent.UI_INTERACT_RECONNECT:
if (getRunningDownloadNum() > 0) {
logger.info(""String_Node_Str"");
stopDownloads();
}
Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_RECONNECT,this);
if (Interaction.handleInteraction(Interaction.INTERACTION_NEED_RECONNECT,this)) {
uiInterface.showMessageDialog(""String_Node_Str"");
Iterator<DownloadLink> iterator=downloadLinks.iterator();
DownloadLink i;
while (iterator.hasNext()) {
i=iterator.next();
if (i.getRemainingWaittime() > 0) {
i.setEndOfWaittime(0);
i.setStatus(DownloadLink.STATUS_TODO);
}
}
}
 else {
if (Interaction.getInteractions(Interaction.INTERACTION_NEED_RECONNECT).length != 1) {
uiInterface.showMessageDialog(""String_Node_Str"");
}
 else {
uiInterface.showMessageDialog(""String_Node_Str"");
}
}
Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
uiInterface.setDownloadLinks(downloadLinks);
break;
case UIEvent.UI_INTERACT_UPDATE:
WebUpdate wu=new WebUpdate();
wu.addControlListener(this);
wu.interact(this);
break;
}
}"
21419,"/** 
 * Diese Funktion wird aufgerufen wenn Ein Download mit einem Waittimefehler abgebrochen wird
 * @param downloadLink
 * @param plugin
 * @param step
 */
private void onErrorWaittime(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  logger.severe(""String_Node_Str"" + step);
  long milliSeconds=(Long)step.getParameter();
  downloadLink.setEndOfWaittime(System.currentTimeMillis() + milliSeconds);
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(false);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  boolean a=Interaction.handleInteraction((Interaction.INTERACTION_NEED_RECONNECT),this);
  boolean b=Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_WAITTIME),this);
  if (a || b) {
    downloadLink.setStatus(DownloadLink.STATUS_TODO);
    downloadLink.setEndOfWaittime(0);
  }
  downloadLink.setStatusText(""String_Node_Str"");
}","/** 
 * Diese Funktion wird aufgerufen wenn Ein Download mit einem Waittimefehler abgebrochen wird
 * @param downloadLink
 * @param plugin
 * @param step
 */
private void onErrorWaittime(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  logger.severe(""String_Node_Str"" + step);
  long milliSeconds=(Long)step.getParameter();
  downloadLink.setEndOfWaittime(System.currentTimeMillis() + milliSeconds);
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(false);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_RECONNECT,this);
  boolean a=Interaction.handleInteraction((Interaction.INTERACTION_NEED_RECONNECT),this);
  Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
  boolean b=Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_WAITTIME),this);
  if (a || b) {
    downloadLink.setStatus(DownloadLink.STATUS_TODO);
    downloadLink.setEndOfWaittime(0);
  }
  downloadLink.setStatusText(""String_Node_Str"");
}"
21420,"/** 
 * Diese Funktion wird aufgerufen sobald ein Download wegen einer Botdetection abgebrochen wird
 * @param downloadLink
 * @param plugin2
 * @param step
 */
private void onErrorBotdetection(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  logger.severe(""String_Node_Str"");
  downloadLink.setInProgress(false);
  downloadLink.setStatusText(""String_Node_Str"");
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  if (Interaction.handleInteraction((Interaction.INTERACTION_NEED_RECONNECT),this) || Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_WAITTIME),this)) {
    downloadLink.setStatus(DownloadLink.STATUS_TODO);
    downloadLink.setEndOfWaittime(0);
  }
  logger.severe(""String_Node_Str"");
}","/** 
 * Diese Funktion wird aufgerufen sobald ein Download wegen einer Botdetection abgebrochen wird
 * @param downloadLink
 * @param plugin2
 * @param step
 */
private void onErrorBotdetection(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  logger.severe(""String_Node_Str"");
  downloadLink.setInProgress(false);
  downloadLink.setStatusText(""String_Node_Str"");
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_RECONNECT,this);
  if (Interaction.handleInteraction((Interaction.INTERACTION_NEED_RECONNECT),this) || Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_WAITTIME),this)) {
    downloadLink.setStatus(DownloadLink.STATUS_TODO);
    downloadLink.setEndOfWaittime(0);
  }
  Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
  logger.severe(""String_Node_Str"");
}"
21421,"/** 
 * Wird aufgerufen wenn Das Plugin eine Immer gleiche Wartezeit meldet. z.B. bei unbekannter Wartezeit
 * @param downloadLink
 * @param plugin
 * @param step
 */
private void onErrorStaticWaittime(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  logger.severe(""String_Node_Str"" + step);
  long milliSeconds;
  if (step.getParameter() != null) {
    milliSeconds=(Long)step.getParameter();
  }
 else {
    milliSeconds=10000;
  }
  downloadLink.setEndOfWaittime(System.currentTimeMillis() + milliSeconds);
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(false);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  if (Interaction.handleInteraction((Interaction.INTERACTION_NEED_RECONNECT),this) || Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_WAITTIME),this)) {
    downloadLink.setStatus(DownloadLink.STATUS_TODO);
    downloadLink.setEndOfWaittime(0);
  }
  downloadLink.setStatusText(""String_Node_Str"");
}","/** 
 * Wird aufgerufen wenn Das Plugin eine Immer gleiche Wartezeit meldet. z.B. bei unbekannter Wartezeit
 * @param downloadLink
 * @param plugin
 * @param step
 */
private void onErrorStaticWaittime(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  logger.severe(""String_Node_Str"" + step);
  long milliSeconds;
  if (step.getParameter() != null) {
    milliSeconds=(Long)step.getParameter();
  }
 else {
    milliSeconds=10000;
  }
  downloadLink.setEndOfWaittime(System.currentTimeMillis() + milliSeconds);
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(false);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  Interaction.handleInteraction((Interaction.INTERACTION_BEFORE_RECONNECT),this);
  if (Interaction.handleInteraction((Interaction.INTERACTION_NEED_RECONNECT),this) || Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_WAITTIME),this)) {
    downloadLink.setStatus(DownloadLink.STATUS_TODO);
    downloadLink.setEndOfWaittime(0);
  }
  Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
  downloadLink.setStatusText(""String_Node_Str"");
}"
21422,"/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == reconnectBox) {
    HTTPReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    ExternReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,reconnectBox.getSelectedObjects() != null);
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_PAUSE_DOWNLOADS:
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
break;
case JDAction.APP_TESTER:
Interaction.handleInteraction(Interaction.INTERACTION_TESTTRIGGER,false);
break;
case JDAction.APP_START_STOP_DOWNLOADS:
this.startStopDownloads();
break;
case JDAction.APP_SAVE_DLC:
JFileChooser fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_LOAD_CONTAINER:
fc=new JFileChooser();
fc.showOpenDialog(frame);
File file=fc.getSelectedFile();
if (file != null && file.exists()) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_CONTAINER,file));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
this.doReconnect();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
}
 else {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
break;
case JDAction.ITEMS_DND:
this.toggleDnD();
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_SEARCH:
SearchDialog s=new SearchDialog(this.getFrame());
data=s.getText();
if (!data.endsWith(""String_Node_Str"")) {
logger.info(data);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}","/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == reconnectBox) {
    HTTPReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    ExternReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,reconnectBox.getSelectedObjects() != null);
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_PAUSE_DOWNLOADS:
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
break;
case JDAction.APP_TESTER:
logger.finer(""String_Node_Str"");
Interaction.handleInteraction(Interaction.INTERACTION_TESTTRIGGER,false);
break;
case JDAction.APP_START_STOP_DOWNLOADS:
this.startStopDownloads();
break;
case JDAction.APP_SAVE_DLC:
JFileChooser fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_LOAD_CONTAINER:
fc=new JFileChooser();
fc.showOpenDialog(frame);
File file=fc.getSelectedFile();
if (file != null && file.exists()) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_CONTAINER,file));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
this.doReconnect();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
}
 else {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
break;
case JDAction.ITEMS_DND:
this.toggleDnD();
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_SEARCH:
SearchDialog s=new SearchDialog(this.getFrame());
data=s.getText();
if (!data.endsWith(""String_Node_Str"")) {
logger.info(data);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}"
21423,"@Override public Pattern getSupportedLinks(){
  String strSupported=this.getProperties().getStringProperty(""String_Node_Str"",""String_Node_Str"");
  String[] Supp=strSupported.split(System.getProperty(""String_Node_Str""));
  String[] Supported=new String[Supp.length + SUPPORTEDHOSTS.length];
  for (int i=0; i < Supp.length; i++) {
    Supported[i]=Supp[i];
  }
  for (int i=0; i < SUPPORTEDHOSTS.length; i++) {
    Supported[Supp.length + i]=SUPPORTEDHOSTS[i];
  }
  String patternStr=""String_Node_Str"";
  boolean b=false;
  for (int i=0; i < Supported.length; i++) {
    Supported[i]=Supported[i].replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    if (Supported[i].matches(""String_Node_Str""))     Supported[i]=Supported[i].replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (b && !Supported[i].trim().isEmpty())     patternStr+=""String_Node_Str"" + Supported[i];
 else     if (!b && !Supported[i].trim().isEmpty()) {
      b=true;
      patternStr+=Supported[0];
    }
  }
  patternStr+=""String_Node_Str"";
  logger.info(patternStr);
  return Pattern.compile(patternStr,Pattern.CASE_INSENSITIVE);
}","@Override public Pattern getSupportedLinks(){
  String strSupported=this.getProperties().getStringProperty(""String_Node_Str"",""String_Node_Str"").trim();
  String[] Supported;
  if (!strSupported.isEmpty()) {
    String[] Supp=strSupported.split(System.getProperty(""String_Node_Str""));
    Supported=new String[Supp.length + SUPPORTEDHOSTS.length];
    for (int i=0; i < Supp.length; i++) {
      Supported[i]=Supp[i];
    }
    for (int i=0; i < SUPPORTEDHOSTS.length; i++) {
      Supported[Supp.length + i]=SUPPORTEDHOSTS[i];
    }
  }
 else   Supported=SUPPORTEDHOSTS;
  if (Supported == null || Supported.length < 1)   return null;
  String patternStr=""String_Node_Str"";
  boolean b=false;
  for (int i=0; i < Supported.length; i++) {
    Supported[i]=Supported[i].replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    if (Supported[i].matches(""String_Node_Str""))     Supported[i]=Supported[i].replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (b && !Supported[i].trim().isEmpty())     patternStr+=""String_Node_Str"" + Supported[i];
 else     if (!b && !Supported[i].trim().isEmpty()) {
      b=true;
      patternStr+=Supported[0];
    }
  }
  patternStr+=""String_Node_Str"";
  logger.info(patternStr);
  return Pattern.compile(patternStr,Pattern.CASE_INSENSITIVE);
}"
21424,"private void go(){
  loadImages();
  String log=""String_Node_Str"";
  File fileInput=null;
  try {
    fileInput=JDUtilities.getResourceFile(JDUtilities.CONFIG_PATH);
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
  }
  try {
    log+=""String_Node_Str"" + (""String_Node_Str"" + fileInput + ""String_Node_Str""+ JDUtilities.CONFIG_PATH+ ""String_Node_Str"");
    if (fileInput != null && fileInput.exists()) {
      Object obj=JDUtilities.loadObject(null,fileInput,Configuration.saveAsXML);
      if (obj instanceof Configuration) {
        Configuration configuration=(Configuration)obj;
        JDUtilities.setConfiguration(configuration);
        JDUtilities.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.FINER));
        JDUtilities.setLocale((Locale)configuration.getProperty(Configuration.PARAM_LOCALE,Locale.getDefault()));
      }
 else {
        log+=""String_Node_Str"" + (""String_Node_Str"" + obj);
        log+=""String_Node_Str"" + (""String_Node_Str"");
        JDUtilities.getConfiguration().setDefaultValues();
      }
    }
 else {
      log+=""String_Node_Str"" + (""String_Node_Str"");
      log+=""String_Node_Str"" + (""String_Node_Str"");
      JDUtilities.getConfiguration().setDefaultValues();
    }
  }
 catch (  Exception e) {
    log+=""String_Node_Str"" + (""String_Node_Str"");
    JDUtilities.getConfiguration().setDefaultValues();
  }
  CookieHandler.setDefault(null);
  logger.info(""String_Node_Str"");
  JDController controller=new JDController();
  UIInterface uiInterface=new SimpleGUI();
  controller.setUiInterface(uiInterface);
  logger.info(log);
  logger.info(""String_Node_Str"");
  JDUtilities.loadPlugins();
  logger.info(""String_Node_Str"");
  if (!controller.initDownloadLinks()) {
    File links=JDUtilities.getResourceFile(""String_Node_Str"");
    if (links != null && links.exists()) {
      File newFile=new File(links.getAbsolutePath() + ""String_Node_Str"");
      newFile.delete();
      links.renameTo(newFile);
      uiInterface.showMessageDialog(""String_Node_Str"" + newFile + ""String_Node_Str"");
    }
  }
  logger.info(""String_Node_Str"");
  Iterator<PluginForHost> iteratorHost=JDUtilities.getPluginsForHost().iterator();
  while (iteratorHost.hasNext()) {
    iteratorHost.next().addPluginListener(controller);
  }
  Iterator<PluginForDecrypt> iteratorDecrypt=JDUtilities.getPluginsForDecrypt().iterator();
  while (iteratorDecrypt.hasNext()) {
    iteratorDecrypt.next().addPluginListener(controller);
  }
  Iterator<PluginForSearch> iteratorSearch=JDUtilities.getPluginsForSearch().iterator();
  while (iteratorSearch.hasNext()) {
    iteratorSearch.next().addPluginListener(controller);
  }
  Iterator<PluginForContainer> iteratorContainer=JDUtilities.getPluginsForContainer().iterator();
  while (iteratorContainer.hasNext()) {
    iteratorContainer.next().addPluginListener(controller);
  }
  Iterator<String> iteratorOptional=JDUtilities.getPluginsOptional().keySet().iterator();
  while (iteratorOptional.hasNext()) {
    JDUtilities.getPluginsOptional().get(iteratorOptional.next()).addPluginListener(controller);
  }
  HashMap<String,PluginOptional> pluginsOptional=JDUtilities.getPluginsOptional();
  Iterator<String> iterator=pluginsOptional.keySet().iterator();
  String key;
  while (iterator.hasNext()) {
    key=iterator.next();
    PluginOptional plg=pluginsOptional.get(key);
    if (JDUtilities.getConfiguration().getBooleanProperty(""String_Node_Str"" + plg.getPluginName(),false)) {
      try {
        pluginsOptional.get(key).enable(true);
      }
 catch (      Exception e) {
        logger.severe(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  Interaction.handleInteraction(Interaction.INTERACTION_APPSTART,false);
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_START_DOWNLOADS_AFTER_START,false)) {
    uiInterface.fireUIEvent(new UIEvent(uiInterface,UIEvent.UI_START_DOWNLOADS));
  }
}","private void go(){
  loadImages();
  String log=""String_Node_Str"";
  File fileInput=null;
  try {
    fileInput=JDUtilities.getResourceFile(JDUtilities.CONFIG_PATH);
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
  }
  try {
    log+=""String_Node_Str"" + (""String_Node_Str"" + fileInput + ""String_Node_Str""+ JDUtilities.CONFIG_PATH+ ""String_Node_Str"");
    if (fileInput != null && fileInput.exists()) {
      Object obj=JDUtilities.loadObject(null,fileInput,Configuration.saveAsXML);
      if (obj instanceof Configuration) {
        Configuration configuration=(Configuration)obj;
        JDUtilities.setConfiguration(configuration);
        JDUtilities.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.FINER));
        JDUtilities.setLocale((Locale)configuration.getProperty(Configuration.PARAM_LOCALE,Locale.getDefault()));
      }
 else {
        log+=""String_Node_Str"" + (""String_Node_Str"" + obj);
        log+=""String_Node_Str"" + (""String_Node_Str"");
        JDUtilities.getConfiguration().setDefaultValues();
      }
    }
 else {
      log+=""String_Node_Str"" + (""String_Node_Str"");
      log+=""String_Node_Str"" + (""String_Node_Str"");
      JDUtilities.getConfiguration().setDefaultValues();
    }
  }
 catch (  Exception e) {
    log+=""String_Node_Str"" + (""String_Node_Str"");
    JDUtilities.getConfiguration().setDefaultValues();
  }
  CookieHandler.setDefault(null);
  logger.info(""String_Node_Str"");
  JDController controller=new JDController();
  UIInterface uiInterface=new SimpleGUI();
  controller.setUiInterface(uiInterface);
  logger.info(log);
  logger.info(""String_Node_Str"");
  JDUtilities.loadPlugins();
  logger.info(""String_Node_Str"");
  if (!controller.initDownloadLinks()) {
    File links=JDUtilities.getResourceFile(""String_Node_Str"");
    if (links != null && links.exists()) {
      File newFile=new File(links.getAbsolutePath() + ""String_Node_Str"");
      newFile.delete();
      links.renameTo(newFile);
      uiInterface.showMessageDialog(""String_Node_Str"" + newFile + ""String_Node_Str"");
    }
  }
  logger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  logger.info(""String_Node_Str"");
  Iterator<PluginForHost> iteratorHost=JDUtilities.getPluginsForHost().iterator();
  while (iteratorHost.hasNext()) {
    iteratorHost.next().addPluginListener(controller);
  }
  Iterator<PluginForDecrypt> iteratorDecrypt=JDUtilities.getPluginsForDecrypt().iterator();
  while (iteratorDecrypt.hasNext()) {
    iteratorDecrypt.next().addPluginListener(controller);
  }
  Iterator<PluginForSearch> iteratorSearch=JDUtilities.getPluginsForSearch().iterator();
  while (iteratorSearch.hasNext()) {
    iteratorSearch.next().addPluginListener(controller);
  }
  Iterator<PluginForContainer> iteratorContainer=JDUtilities.getPluginsForContainer().iterator();
  while (iteratorContainer.hasNext()) {
    iteratorContainer.next().addPluginListener(controller);
  }
  Iterator<String> iteratorOptional=JDUtilities.getPluginsOptional().keySet().iterator();
  while (iteratorOptional.hasNext()) {
    JDUtilities.getPluginsOptional().get(iteratorOptional.next()).addPluginListener(controller);
  }
  HashMap<String,PluginOptional> pluginsOptional=JDUtilities.getPluginsOptional();
  Iterator<String> iterator=pluginsOptional.keySet().iterator();
  String key;
  while (iterator.hasNext()) {
    key=iterator.next();
    PluginOptional plg=pluginsOptional.get(key);
    if (JDUtilities.getConfiguration().getBooleanProperty(""String_Node_Str"" + plg.getPluginName(),false)) {
      try {
        pluginsOptional.get(key).enable(true);
      }
 catch (      Exception e) {
        logger.severe(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  Interaction.handleInteraction(Interaction.INTERACTION_APPSTART,false);
  if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_START_DOWNLOADS_AFTER_START,false)) {
    uiInterface.fireUIEvent(new UIEvent(uiInterface,UIEvent.UI_START_DOWNLOADS));
  }
}"
21425,"private void go(){
  String methodsPath=UTILITIES.getFullPath(new String[]{JDUtilities.getJDHomeDirectory().getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  String hoster=""String_Node_Str"";
  JAntiCaptcha jac=new JAntiCaptcha(methodsPath,hoster);
  jac.setShowDebugGui(true);
  UTILITIES.getLogger().info(""String_Node_Str"" + JAntiCaptcha.hasMethod(methodsPath,hoster));
  LetterComperator.CREATEINTERSECTIONLETTER=true;
  jac.displayLibrary();
  jac.getJas().set(""String_Node_Str"",100);
  jac.showPreparedCaptcha(new File(JDUtilities.getJDHomeDirectory().getAbsolutePath() + ""String_Node_Str"" + ""String_Node_Str""+ hoster+ ""String_Node_Str""+ ""String_Node_Str""));
}","private void go(){
  String methodsPath=UTILITIES.getFullPath(new String[]{JDUtilities.getJDHomeDirectory().getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  String hoster=""String_Node_Str"";
  JAntiCaptcha jac=new JAntiCaptcha(methodsPath,hoster);
  jac.setShowDebugGui(true);
  UTILITIES.getLogger().info(""String_Node_Str"" + JAntiCaptcha.hasMethod(methodsPath,hoster));
  jac.displayLibrary();
  jac.getJas().set(""String_Node_Str"",50);
  jac.showPreparedCaptcha(new File(JDUtilities.getJDHomeDirectory().getAbsolutePath() + ""String_Node_Str"" + ""String_Node_Str""+ hoster+ ""String_Node_Str""+ ""String_Node_Str""));
}"
21426,"/** 
 * Debug Methode. Zeigt den Captcha in verschiedenen bearbeitungsstadien an
 * @param captchafile
 */
public void showPreparedCaptcha(File captchafile){
  if (!captchafile.exists()) {
    logger.severe(captchafile.getAbsolutePath() + ""String_Node_Str"");
    return;
  }
  Image captchaImage;
  captchaImage=UTILITIES.loadImage(captchafile);
  if (bw3 != null) {
    bw3.destroy();
  }
  bw3=BasicWindow.showImage(captchaImage,""String_Node_Str"");
  bw3.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(2,0,2,2));
  bw3.setLocationByScreenPercent(50,70);
  Captcha captcha=createCaptcha(captchaImage);
  bw3.add(new ImageComponent(captcha.getImage(1)),UTILITIES.getGBC(0,2,2,2));
  bw3.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(2,2,2,2));
  jas.executePrepareCommands(captcha);
  bw3.add(new ImageComponent(captcha.getImage(1)),UTILITIES.getGBC(0,4,2,2));
  bw3.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(2,4,2,2));
  Letter[] letters=captcha.getLetters(letterNum);
  if (letters == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
  bw3.add(new ImageComponent(captcha.getImageWithGaps(1)),UTILITIES.getGBC(0,6,2,2));
  bw3.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(2,6,2,2));
  bw3.refreshUI();
  if (bw2 != null) {
    bw2.destroy();
  }
  bw2=new BasicWindow();
  bw2.setTitle(""String_Node_Str"");
  bw2.setLayout(new GridBagLayout());
  bw2.setSize(300,300);
  logger.info(""String_Node_Str"");
  bw2.setAlwaysOnTop(true);
  bw2.setLocationByScreenPercent(50,5);
  bw2.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(0,0,2,2));
  Letter test=letters[2].getLinedLetter();
  BasicWindow.showImage(test.getImage(10));
  for (int i=0; i < letters.length; i++) {
    bw2.add(new ImageComponent(letters[i].getImage(jas.getInteger(""String_Node_Str""))),UTILITIES.getGBC(i * 2 + 2,0,2,2));
  }
  bw2.setVisible(true);
  bw2.pack();
  bw2.setSize(300,bw2.getSize().height);
  checkCaptcha(captcha);
  LetterComperator[] lcs=captcha.getLetterComperators();
  for (int i=0; i < lcs.length; i++) {
    if (lcs[i] == null)     continue;
    bw2.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(0,6,2,2));
    bw2.add(new ImageComponent(lcs[i].getB().getImage(jas.getInteger(""String_Node_Str""))),UTILITIES.getGBC(i * 2 + 2,6,2,2));
    bw2.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(0,8,2,2));
    bw2.add(new JLabel(lcs[i].getDecodedValue()),UTILITIES.getGBC(i * 2 + 2,8,2,2));
    bw2.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(0,10,2,2));
    bw2.add(new JLabel(lcs[i].getValityPercent() + ""String_Node_Str""),UTILITIES.getGBC(i * 2 + 2,10,2,2));
  }
  bw2.pack();
  bw2.repack();
}","/** 
 * Debug Methode. Zeigt den Captcha in verschiedenen bearbeitungsstadien an
 * @param captchafile
 */
public void showPreparedCaptcha(File captchafile){
  if (!captchafile.exists()) {
    logger.severe(captchafile.getAbsolutePath() + ""String_Node_Str"");
    return;
  }
  Image captchaImage;
  captchaImage=UTILITIES.loadImage(captchafile);
  if (bw3 != null) {
    bw3.destroy();
  }
  bw3=BasicWindow.showImage(captchaImage,""String_Node_Str"");
  bw3.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(2,0,2,2));
  bw3.setLocationByScreenPercent(50,70);
  Captcha captcha=createCaptcha(captchaImage);
  bw3.add(new ImageComponent(captcha.getImage(1)),UTILITIES.getGBC(0,2,2,2));
  bw3.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(2,2,2,2));
  jas.executePrepareCommands(captcha);
  bw3.add(new ImageComponent(captcha.getImage(1)),UTILITIES.getGBC(0,4,2,2));
  bw3.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(2,4,2,2));
  Letter[] letters=captcha.getLetters(letterNum);
  if (letters == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
  bw3.add(new ImageComponent(captcha.getImageWithGaps(1)),UTILITIES.getGBC(0,6,2,2));
  bw3.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(2,6,2,2));
  bw3.refreshUI();
  if (bw2 != null) {
    bw2.destroy();
  }
  bw2=new BasicWindow();
  bw2.setTitle(""String_Node_Str"");
  bw2.setLayout(new GridBagLayout());
  bw2.setSize(300,300);
  logger.info(""String_Node_Str"");
  bw2.setAlwaysOnTop(true);
  bw2.setLocationByScreenPercent(50,5);
  bw2.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(0,0,2,2));
  for (int i=0; i < letters.length; i++) {
    bw2.add(new ImageComponent(letters[i].getImage(jas.getInteger(""String_Node_Str""))),UTILITIES.getGBC(i * 2 + 2,0,2,2));
  }
  bw2.setVisible(true);
  bw2.pack();
  bw2.setSize(300,bw2.getSize().height);
  checkCaptcha(captcha);
  LetterComperator[] lcs=captcha.getLetterComperators();
  for (int i=0; i < lcs.length; i++) {
    if (lcs[i] == null)     continue;
    bw2.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(0,6,2,2));
    bw2.add(new ImageComponent(lcs[i].getB().getImage(jas.getInteger(""String_Node_Str""))),UTILITIES.getGBC(i * 2 + 2,6,2,2));
    bw2.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(0,8,2,2));
    bw2.add(new JLabel(lcs[i].getDecodedValue()),UTILITIES.getGBC(i * 2 + 2,8,2,2));
    bw2.add(new JLabel(""String_Node_Str""),UTILITIES.getGBC(0,10,2,2));
    bw2.add(new JLabel(lcs[i].getValityPercent() + ""String_Node_Str""),UTILITIES.getGBC(i * 2 + 2,10,2,2));
  }
  bw2.pack();
  bw2.repack();
}"
21427,"@Override public void initConfig(){
  ConfigEntry cfg;
  String[] keys=new String[Replacer.KEYS.length];
  for (int i=0; i < Replacer.KEYS.length; i++) {
    keys[i]=""String_Node_Str"" + Replacer.KEYS[i][0] + ""String_Node_Str""+ ""String_Node_Str""+ Replacer.KEYS[i][1]+ ""String_Node_Str"";
  }
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,this,""String_Node_Str"",keys,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,this,PROPERTY_DISABLED,""String_Node_Str"").setDefaultValue(false));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,this,PROPERTY_COMMAND,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,this,PROPERTY_PARAMETER,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,this,PROPERTY_EXECUTE_FOLDER,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PROPERTY_WAIT_FOR_RETURN,""String_Node_Str"",0,600).setDefaultValue(0));
}","@Override public void initConfig(){
  ConfigEntry cfg;
  String[] keys=new String[Replacer.KEYS.length];
  for (int i=0; i < Replacer.KEYS.length; i++) {
    keys[i]=""String_Node_Str"" + Replacer.KEYS[i][0] + ""String_Node_Str""+ ""String_Node_Str""+ Replacer.KEYS[i][1]+ ""String_Node_Str"";
  }
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_COMBOBOX,this,""String_Node_Str"",keys,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,this,PROPERTY_DISABLED,""String_Node_Str"").setDefaultValue(false));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,this,PROPERTY_COMMAND,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTAREA,this,PROPERTY_PARAMETER,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,this,PROPERTY_EXECUTE_FOLDER,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PROPERTY_WAIT_FOR_RETURN,""String_Node_Str"",0,600).setDefaultValue(0));
}"
21428,"@Override public boolean doInteraction(Object arg){
  if (getBooleanProperty(PROPERTY_DISABLED,false)) {
    logger.info(""String_Node_Str"");
    return false;
  }
  int waitForReturn=getIntegerProperty(PROPERTY_WAIT_FOR_RETURN,0);
  String executeIn=Replacer.insertVariables(getStringProperty(PROPERTY_EXECUTE_FOLDER));
  String command=Replacer.insertVariables(getStringProperty(PROPERTY_COMMAND));
  String parameter=Replacer.insertVariables(getStringProperty(PROPERTY_PARAMETER));
  logger.finer(""String_Node_Str"" + JDUtilities.runCommand(command,parameter,executeIn,waitForReturn));
  return true;
}","@Override public boolean doInteraction(Object arg){
  if (getBooleanProperty(PROPERTY_DISABLED,false)) {
    logger.info(""String_Node_Str"");
    return false;
  }
  int waitForReturn=getIntegerProperty(PROPERTY_WAIT_FOR_RETURN,0);
  String executeIn=Replacer.insertVariables(getStringProperty(PROPERTY_EXECUTE_FOLDER));
  String command=Replacer.insertVariables(getStringProperty(PROPERTY_COMMAND));
  String parameter=Replacer.insertVariables(getStringProperty(PROPERTY_PARAMETER));
  logger.finer(""String_Node_Str"" + JDUtilities.runCommand(command,JDUtilities.splitByNewline(parameter),executeIn,waitForReturn));
  return true;
}"
21429,"@Override public void initConfig(){
  ConfigEntry cfg;
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,this,PROPERTY_EXTERN_RECONNECT_DISABLED,""String_Node_Str"").setDefaultValue(false));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,this,PROPERTY_RECONNECT_COMMAND,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,this,PROPERTY_RECONNECT_PARAMETER,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,this,PROPERTY_RECONNECT_EXECUTE_FOLDER,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PARAM_IPCHECKWAITTIME,""String_Node_Str"",0,600).setDefaultValue(0));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PARAM_RETRIES,""String_Node_Str"",-1,20).setDefaultValue(0));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PARAM_WAITFORIPCHANGE,""String_Node_Str"",0,600).setDefaultValue(10));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PROPERTY_IP_WAIT_FOR_RETURN,""String_Node_Str"",0,600).setDefaultValue(0));
}","@Override public void initConfig(){
  ConfigEntry cfg;
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,this,PROPERTY_EXTERN_RECONNECT_DISABLED,""String_Node_Str"").setDefaultValue(false));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,this,PROPERTY_RECONNECT_COMMAND,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_TEXTAREA,this,PROPERTY_RECONNECT_PARAMETER,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,this,PROPERTY_RECONNECT_EXECUTE_FOLDER,""String_Node_Str""));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PARAM_IPCHECKWAITTIME,""String_Node_Str"",0,600).setDefaultValue(0));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PARAM_RETRIES,""String_Node_Str"",-1,20).setDefaultValue(0));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PARAM_WAITFORIPCHANGE,""String_Node_Str"",0,600).setDefaultValue(10));
  config.addEntry(cfg=new ConfigEntry(ConfigContainer.TYPE_SPINNER,this,PROPERTY_IP_WAIT_FOR_RETURN,""String_Node_Str"",0,600).setDefaultValue(0));
}"
21430,"@Override public boolean doInteraction(Object arg){
  if (!isEnabled() || getBooleanProperty(PROPERTY_EXTERN_RECONNECT_DISABLED,false)) {
    logger.info(""String_Node_Str"");
    return false;
  }
  retries++;
  int waitForReturn=getIntegerProperty(PROPERTY_IP_WAIT_FOR_RETURN,0);
  String executeIn=getStringProperty(PROPERTY_RECONNECT_EXECUTE_FOLDER);
  String command=getStringProperty(PROPERTY_RECONNECT_COMMAND);
  String parameter=getStringProperty(PROPERTY_RECONNECT_PARAMETER);
  int waittime=getIntegerProperty(PARAM_IPCHECKWAITTIME,0);
  int maxretries=getIntegerProperty(PARAM_RETRIES,0);
  int waitForIp=getIntegerProperty(PARAM_WAITFORIPCHANGE,10);
  logger.info(""String_Node_Str"" + NAME + ""String_Node_Str""+ retries);
  String preIp=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + preIp);
  logger.finer(""String_Node_Str"" + JDUtilities.runCommand(command,parameter,executeIn,waitForReturn));
  logger.finer(""String_Node_Str"" + waittime + ""String_Node_Str"");
  try {
    Thread.sleep(waittime * 1000);
  }
 catch (  InterruptedException e) {
  }
  String afterIP=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + afterIP);
  long endTime=System.currentTimeMillis() + waitForIp * 1000;
  logger.info(""String_Node_Str"" + waitForIp + ""String_Node_Str"");
  while (System.currentTimeMillis() <= endTime && (afterIP.equals(preIp) || afterIP.equals(""String_Node_Str""))) {
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException e) {
    }
    afterIP=JDUtilities.getIPAddress();
    logger.finer(""String_Node_Str"" + afterIP);
  }
  if (!afterIP.equals(preIp) && !afterIP.equals(""String_Node_Str"")) {
    return true;
  }
  logger.finer(""String_Node_Str"" + retries + ""String_Node_Str""+ maxretries);
  if (retries <= maxretries) {
    return doInteraction(arg);
  }
  return false;
}","@Override public boolean doInteraction(Object arg){
  if (!isEnabled() || getBooleanProperty(PROPERTY_EXTERN_RECONNECT_DISABLED,false)) {
    logger.info(""String_Node_Str"");
    return false;
  }
  retries++;
  int waitForReturn=getIntegerProperty(PROPERTY_IP_WAIT_FOR_RETURN,0);
  String executeIn=getStringProperty(PROPERTY_RECONNECT_EXECUTE_FOLDER);
  String command=getStringProperty(PROPERTY_RECONNECT_COMMAND);
  String parameter=getStringProperty(PROPERTY_RECONNECT_PARAMETER);
  int waittime=getIntegerProperty(PARAM_IPCHECKWAITTIME,0);
  int maxretries=getIntegerProperty(PARAM_RETRIES,0);
  int waitForIp=getIntegerProperty(PARAM_WAITFORIPCHANGE,10);
  logger.info(""String_Node_Str"" + NAME + ""String_Node_Str""+ retries);
  String preIp=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + preIp);
  logger.finer(""String_Node_Str"" + JDUtilities.runCommand(command,JDUtilities.splitByNewline(parameter),executeIn,waitForReturn));
  logger.finer(""String_Node_Str"" + waittime + ""String_Node_Str"");
  try {
    Thread.sleep(waittime * 1000);
  }
 catch (  InterruptedException e) {
  }
  String afterIP=JDUtilities.getIPAddress();
  logger.finer(""String_Node_Str"" + afterIP);
  long endTime=System.currentTimeMillis() + waitForIp * 1000;
  logger.info(""String_Node_Str"" + waitForIp + ""String_Node_Str"");
  while (System.currentTimeMillis() <= endTime && (afterIP.equals(preIp) || afterIP.equals(""String_Node_Str""))) {
    try {
      Thread.sleep(5 * 1000);
    }
 catch (    InterruptedException e) {
    }
    afterIP=JDUtilities.getIPAddress();
    logger.finer(""String_Node_Str"" + afterIP);
  }
  if (!afterIP.equals(preIp) && !afterIP.equals(""String_Node_Str"")) {
    return true;
  }
  logger.finer(""String_Node_Str"" + retries + ""String_Node_Str""+ maxretries);
  if (retries <= maxretries) {
    return doInteraction(arg);
  }
  return false;
}"
21431,"/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabDownloadTable=new TabDownloadLinks(this);
  tabPluginActivity=new TabPluginActivity();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(tabPluginActivity);
  splitpane.setTopComponent(tabDownloadTable);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  btnPause=new JToggleButton(actionPause);
  btnPause.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnPause.setFocusPainted(false);
  btnPause.setBorderPainted(false);
  btnPause.setText(null);
  btnPause.setEnabled(false);
  JButton btnAdd=new JButton(actionItemsAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionItemsDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  JButton btnConfig=new JButton(this.actionConfig);
  btnConfig.setFocusPainted(false);
  btnConfig.setBorderPainted(false);
  btnConfig.setText(null);
  JButton btnReconnect=new JButton(this.actionReconnect);
  btnReconnect.setFocusPainted(false);
  btnReconnect.setBorderPainted(false);
  btnReconnect.setText(null);
  JButton btnUpdate=new JButton(this.actionUpdate);
  btnUpdate.setFocusPainted(false);
  btnUpdate.setBorderPainted(false);
  btnUpdate.setText(null);
  JButton btnSave=new JButton(this.actionSaveDLC);
  btnSave.setFocusPainted(false);
  btnSave.setBorderPainted(false);
  btnSave.setText(null);
  JButton btnLoad=new JButton(this.actionLoadDLC);
  btnLoad.setFocusPainted(false);
  btnLoad.setBorderPainted(false);
  btnLoad.setText(null);
  JButton btnLog=new JButton(this.actionLog);
  btnLog.setFocusPainted(false);
  btnLog.setBorderPainted(false);
  btnLog.setText(null);
  JButton btnDnD=new JButton(this.actionDnD);
  btnDnD.setFocusPainted(false);
  btnDnD.setBorderPainted(false);
  btnDnD.setText(null);
  JButton btnSearch=new JButton(this.actionSearch);
  btnSearch.setFocusPainted(false);
  btnSearch.setBorderPainted(false);
  btnSearch.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnLoad);
  toolBar.add(btnSave);
  toolBar.addSeparator();
  toolBar.add(btnStartStop);
  toolBar.add(btnPause);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  toolBar.add(btnSearch);
  toolBar.addSeparator();
  toolBar.add(btnUpdate);
  toolBar.addSeparator();
  toolBar.add(btnConfig);
  toolBar.add(btnLog);
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(btnDnD);
  reconnectBox=new JCheckBox(""String_Node_Str"");
  boolean rc=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
  reconnectBox.setSelected(rc);
  HTTPReconnect.setEnabled(rc);
  ExternReconnect.setEnabled(rc);
  reconnectBox.addActionListener(this);
  toolBar.add(reconnectBox);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,splitpane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}","/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabDownloadTable=new TabDownloadLinks(this);
  tabPluginActivity=new TabProgress();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(tabPluginActivity);
  splitpane.setTopComponent(tabDownloadTable);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  btnPause=new JToggleButton(actionPause);
  btnPause.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnPause.setFocusPainted(false);
  btnPause.setBorderPainted(false);
  btnPause.setText(null);
  btnPause.setEnabled(false);
  JButton btnAdd=new JButton(actionItemsAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionItemsDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  JButton btnConfig=new JButton(this.actionConfig);
  btnConfig.setFocusPainted(false);
  btnConfig.setBorderPainted(false);
  btnConfig.setText(null);
  JButton btnReconnect=new JButton(this.actionReconnect);
  btnReconnect.setFocusPainted(false);
  btnReconnect.setBorderPainted(false);
  btnReconnect.setText(null);
  JButton btnUpdate=new JButton(this.actionUpdate);
  btnUpdate.setFocusPainted(false);
  btnUpdate.setBorderPainted(false);
  btnUpdate.setText(null);
  JButton btnSave=new JButton(this.actionSaveDLC);
  btnSave.setFocusPainted(false);
  btnSave.setBorderPainted(false);
  btnSave.setText(null);
  JButton btnLoad=new JButton(this.actionLoadDLC);
  btnLoad.setFocusPainted(false);
  btnLoad.setBorderPainted(false);
  btnLoad.setText(null);
  JButton btnLog=new JButton(this.actionLog);
  btnLog.setFocusPainted(false);
  btnLog.setBorderPainted(false);
  btnLog.setText(null);
  JButton btnDnD=new JButton(this.actionDnD);
  btnDnD.setFocusPainted(false);
  btnDnD.setBorderPainted(false);
  btnDnD.setText(null);
  JButton btnSearch=new JButton(this.actionSearch);
  btnSearch.setFocusPainted(false);
  btnSearch.setBorderPainted(false);
  btnSearch.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnLoad);
  toolBar.add(btnSave);
  toolBar.addSeparator();
  toolBar.add(btnStartStop);
  toolBar.add(btnPause);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  toolBar.add(btnSearch);
  toolBar.addSeparator();
  toolBar.add(btnUpdate);
  toolBar.addSeparator();
  toolBar.add(btnConfig);
  toolBar.add(btnLog);
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(btnDnD);
  reconnectBox=new JCheckBox(""String_Node_Str"");
  boolean rc=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
  reconnectBox.setSelected(rc);
  HTTPReconnect.setEnabled(rc);
  ExternReconnect.setEnabled(rc);
  reconnectBox.addActionListener(this);
  toolBar.add(reconnectBox);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,splitpane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}"
21432,"@Override public void run(){
}","@Override public void run(){
  JDController controller=JDUtilities.getController();
  DownloadLink dLink=controller.getLastFinishedDownloadLink();
  String password=null;
  if (dLink != null)   password=dLink.getFilePackage().getPassword();
  jdUnrar unrar=new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
  if (password != null && !password.isEmpty()) {
    if (!password.matches(""String_Node_Str""))     unrar.standardPassword=password;
    unrar.addToPasswordlist(password);
  }
  unrar.overwriteFiles=getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
  unrar.autoDelete=getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
  unrar.unrar=getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
  unrar.maxFilesize=getIntegerProperty(Unrar.PROPERTY_MAX_FILESIZE,2);
  unrar.unrar();
  unrar=new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
  unrar.overwriteFiles=getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
  unrar.autoDelete=getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
  unrar.unrar=getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
  unrar.maxFilesize=getIntegerProperty(Unrar.PROPERTY_MAX_FILESIZE,2);
  unrar.unrar();
}"
21433,"@Override public boolean doInteraction(Object arg){
  new Thread(new Runnable(){
    public void run(){
      JDController controller=JDUtilities.getController();
      DownloadLink dLink=controller.getLastFinishedDownloadLink();
      String password=null;
      if (dLink != null)       password=dLink.getFilePackage().getPassword();
      jdUnrar unrar=new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
      if (password != null && !password.isEmpty()) {
        if (!password.matches(""String_Node_Str""))         unrar.standardPassword=password;
        unrar.addToPasswordlist(password);
      }
      unrar.overwriteFiles=getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
      unrar.autoDelete=getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
      unrar.unrar=getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
      unrar.maxFilesize=getIntegerProperty(Unrar.PROPERTY_MAX_FILESIZE,2);
      unrar.unrar();
      unrar=new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
      unrar.overwriteFiles=getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
      unrar.autoDelete=getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
      unrar.unrar=getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
      unrar.maxFilesize=getIntegerProperty(Unrar.PROPERTY_MAX_FILESIZE,2);
      unrar.unrar();
    }
  }
).start();
  return true;
}","@Override public boolean doInteraction(Object arg){
  start();
  return true;
}"
21434,"/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == reconnectBox) {
    HTTPReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    ExternReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,reconnectBox.getSelectedObjects() != null);
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_PAUSE_DOWNLOADS:
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
break;
case JDAction.APP_START_STOP_DOWNLOADS:
this.startStopDownloads();
break;
case JDAction.APP_SAVE_DLC:
JFileChooser fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_LOAD_CONTAINER:
fc=new JFileChooser();
fc.showOpenDialog(frame);
File file=fc.getSelectedFile();
if (file != null && file.exists()) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_CONTAINER,file));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
this.doReconnect();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
}
 else {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
break;
case JDAction.ITEMS_DND:
this.toggleDnD();
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_SEARCH:
SearchDialog s=new SearchDialog(this.getFrame());
data=s.getText();
if (!data.endsWith(""String_Node_Str"")) {
logger.info(data);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}","/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == reconnectBox) {
    HTTPReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    ExternReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,reconnectBox.getSelectedObjects() != null);
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_PAUSE_DOWNLOADS:
fireUIEvent(new UIEvent(this,UIEvent.UI_PAUSE_DOWNLOADS,btnPause.isSelected()));
break;
case JDAction.APP_TESTER:
Interaction.handleInteraction(Interaction.INTERACTION_TESTTRIGGER,false);
break;
case JDAction.APP_START_STOP_DOWNLOADS:
this.startStopDownloads();
break;
case JDAction.APP_SAVE_DLC:
JFileChooser fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (JDUtilities.getFileExtension(ret) == null || !JDUtilities.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD_DLC:
fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_LOAD_CONTAINER:
fc=new JFileChooser();
fc.showOpenDialog(frame);
File file=fc.getSelectedFile();
if (file != null && file.exists()) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_CONTAINER,file));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
menViewLog.setSelected(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
this.doReconnect();
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (!JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_CONFIRM_DIALOGS,false)) {
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
}
 else {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
break;
case JDAction.ITEMS_DND:
this.toggleDnD();
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_SEARCH:
SearchDialog s=new SearchDialog(this.getFrame());
data=s.getText();
if (!data.endsWith(""String_Node_Str"")) {
logger.info(data);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}"
21435,"/** 
 * Das Menü wird hier initialisiert
 */
public void initMenuBar(){
  JMenu menFile=new JMenu(JDUtilities.getResourceString(""String_Node_Str""));
  menFile.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  JMenuItem menFileLoadContainer=createMenuItem(actionLoadContainer);
  JMenuItem menFileLoad=createMenuItem(actionLoadDLC);
  JMenuItem menFileSave=createMenuItem(actionSaveDLC);
  JMenuItem menFileExit=createMenuItem(actionExit);
  JMenu menEdit=new JMenu(JDUtilities.getResourceString(""String_Node_Str""));
  menFile.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  JMenuItem menEditItemTop=createMenuItem(actionItemsTop);
  JMenuItem menEditItemUp=createMenuItem(actionItemsUp);
  JMenuItem menEditItemDown=createMenuItem(actionItemsDown);
  JMenuItem menEditItemBottom=createMenuItem(actionItemsBottom);
  JMenuItem menEditItemsDelete=createMenuItem(actionItemsDelete);
  menEdit.add(menEditItemsDelete);
  menEdit.addSeparator();
  menEdit.add(menEditItemTop);
  menEdit.add(menEditItemUp);
  menEdit.add(menEditItemDown);
  menEdit.add(menEditItemBottom);
  JMenu menAction=new JMenu(JDUtilities.getResourceString(""String_Node_Str""));
  menAction.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  JMenuItem menDownload=createMenuItem(actionStartStopDownload);
  JMenuItem menAddLinks=createMenuItem(actionItemsAdd);
  menAction.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  JMenu menExtra=new JMenu(JDUtilities.getResourceString(""String_Node_Str""));
  menAction.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  menViewLog=new JCheckBoxMenuItem(actionLog);
  menViewLog.setIcon(null);
  if (actionLog.getAccelerator() != null)   menViewLog.setAccelerator(actionLog.getAccelerator());
  JMenuItem menConfig=createMenuItem(actionConfig);
  menFile.add(menFileLoadContainer);
  menFile.add(menFileLoad);
  menFile.add(menFileSave);
  menFile.addSeparator();
  menFile.add(menFileExit);
  menExtra.add(menViewLog);
  menExtra.add(menConfig);
  menAction.add(menDownload);
  menAction.add(menAddLinks);
  menuBar.add(menFile);
  menuBar.add(menEdit);
  menuBar.add(menAction);
  menuBar.add(menExtra);
  frame.setJMenuBar(menuBar);
}","/** 
 * Das Menü wird hier initialisiert
 */
public void initMenuBar(){
  JMenu menFile=new JMenu(JDUtilities.getResourceString(""String_Node_Str""));
  menFile.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  JMenuItem menFileLoadContainer=createMenuItem(actionLoadContainer);
  JMenuItem menFileLoad=createMenuItem(actionLoadDLC);
  JMenuItem menFileSave=createMenuItem(actionSaveDLC);
  JMenuItem menFileExit=createMenuItem(actionExit);
  JMenu menEdit=new JMenu(JDUtilities.getResourceString(""String_Node_Str""));
  menFile.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  JMenuItem menEditItemTop=createMenuItem(actionItemsTop);
  JMenuItem menEditItemUp=createMenuItem(actionItemsUp);
  JMenuItem menEditItemDown=createMenuItem(actionItemsDown);
  JMenuItem menEditItemBottom=createMenuItem(actionItemsBottom);
  JMenuItem menEditItemsDelete=createMenuItem(actionItemsDelete);
  menEdit.add(menEditItemsDelete);
  menEdit.addSeparator();
  menEdit.add(menEditItemTop);
  menEdit.add(menEditItemUp);
  menEdit.add(menEditItemDown);
  menEdit.add(menEditItemBottom);
  JMenu menAction=new JMenu(JDUtilities.getResourceString(""String_Node_Str""));
  menAction.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  JMenuItem menDownload=createMenuItem(actionStartStopDownload);
  JMenuItem menAddLinks=createMenuItem(actionItemsAdd);
  menAction.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  JMenu menExtra=new JMenu(JDUtilities.getResourceString(""String_Node_Str""));
  menAction.setMnemonic(JDUtilities.getResourceChar(""String_Node_Str""));
  menViewLog=new JCheckBoxMenuItem(actionLog);
  menViewLog.setIcon(null);
  if (actionLog.getAccelerator() != null)   menViewLog.setAccelerator(actionLog.getAccelerator());
  JMenuItem menConfig=createMenuItem(actionConfig);
  JMenuItem menTester=createMenuItem(actionTester);
  menFile.add(menFileLoadContainer);
  menFile.add(menFileLoad);
  menFile.add(menFileSave);
  menFile.addSeparator();
  menFile.add(menFileExit);
  menExtra.add(menViewLog);
  menExtra.add(menTester);
  menExtra.add(menConfig);
  menAction.add(menDownload);
  menAction.add(menAddLinks);
  menuBar.add(menFile);
  menuBar.add(menEdit);
  menuBar.add(menAction);
  menuBar.add(menExtra);
  frame.setJMenuBar(menuBar);
}"
21436,"/** 
 * Die Aktionen werden initialisiert
 */
public void initActions(){
  actionStartStopDownload=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_START_STOP_DOWNLOADS);
  actionPause=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_PAUSE_DOWNLOADS);
  actionItemsAdd=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_ADD);
  actionDnD=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_DND);
  actionLoadContainer=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_LOAD_CONTAINER);
  actionLoadDLC=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_LOAD_DLC);
  actionSaveDLC=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_SAVE_DLC);
  actionExit=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_EXIT);
  actionLog=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_LOG);
  actionConfig=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_CONFIGURATION);
  actionReconnect=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_RECONNECT);
  actionUpdate=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_UPDATE);
  actionSearch=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_SEARCH);
  actionItemsDelete=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_REMOVE);
  actionItemsTop=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_MOVE_TOP);
  actionItemsUp=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_MOVE_UP);
  actionItemsDown=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_MOVE_DOWN);
  actionItemsBottom=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_MOVE_BOTTOM);
}","/** 
 * Die Aktionen werden initialisiert
 */
public void initActions(){
  actionStartStopDownload=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_START_STOP_DOWNLOADS);
  actionPause=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_PAUSE_DOWNLOADS);
  actionItemsAdd=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_ADD);
  actionDnD=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_DND);
  actionLoadContainer=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_LOAD_CONTAINER);
  actionLoadDLC=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_LOAD_DLC);
  actionSaveDLC=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_SAVE_DLC);
  actionExit=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_EXIT);
  actionLog=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_LOG);
  actionTester=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_TESTER);
  actionConfig=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_CONFIGURATION);
  actionReconnect=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_RECONNECT);
  actionUpdate=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_UPDATE);
  actionSearch=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.APP_SEARCH);
  actionItemsDelete=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_REMOVE);
  actionItemsTop=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_MOVE_TOP);
  actionItemsUp=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_MOVE_UP);
  actionItemsDown=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_MOVE_DOWN);
  actionItemsBottom=new JDAction(this,""String_Node_Str"",""String_Node_Str"",JDAction.ITEMS_MOVE_BOTTOM);
}"
21437,"@Override public boolean getFileInformation(DownloadLink downloadLink){
  try {
    requestInfo=getRequest(new URL(downloadLink.getUrlDownloadDecrypted()),null,null,true);
    if (requestInfo.getHtmlCode().indexOf(""String_Node_Str"") >= 0) {
      return false;
    }
 else {
      String fileName=JDUtilities.htmlDecode(getSimpleMatch(requestInfo.getHtmlCode(),DOWNLOAD_INFO,0));
      String fileSize=getSimpleMatch(requestInfo.getHtmlCode(),DOWNLOAD_INFO,3);
      downloadLink.setName(fileName);
      if (fileSize != null) {
        try {
          int length=(int)(Double.parseDouble(fileSize.trim()) * 1024 * 1024);
          downloadLink.setDownloadMax(length);
        }
 catch (        Exception e) {
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    return false;
  }
catch (  IOException e) {
    return false;
  }
  return true;
}","@Override public boolean getFileInformation(DownloadLink downloadLink){
  try {
    requestInfo=getRequest(new URL(downloadLink.getUrlDownloadDecrypted()),null,null,true);
    if (requestInfo.getHtmlCode().indexOf(""String_Node_Str"") >= 0) {
      return false;
    }
 else {
      String fileName=JDUtilities.htmlDecode(getSimpleMatch(requestInfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str""),DOWNLOAD_INFO,0));
      String fileSize=getSimpleMatch(requestInfo.getHtmlCode(),DOWNLOAD_INFO,3);
      downloadLink.setName(fileName);
      if (fileSize != null) {
        try {
          int length=(int)(Double.parseDouble(fileSize.trim()) * 1024 * 1024);
          downloadLink.setDownloadMax(length);
        }
 catch (        Exception e) {
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    return false;
  }
catch (  IOException e) {
    return false;
  }
  return true;
}"
21438,"/** 
 * Versucht den Programmpfad von unrar bzw unrar.exe zu finden
 * @return
 */
public static String autoGetUnrarCommand(){
  String programm=null;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if ((OS.indexOf(""String_Node_Str"") > -1) || (OS.indexOf(""String_Node_Str"") > -1)) {
    try {
      File unrarexe=new File(JDUtilities.getJDHomeDirectory(),""String_Node_Str"");
      if (unrarexe.isFile())       programm=unrarexe.getAbsolutePath();
 else {
        File winrarexe=new File(new File(System.getenv(""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
        if (unrarexe.isFile()) {
          logger.info(""String_Node_Str"" + winrarexe.getAbsolutePath());
          logger.info(""String_Node_Str"" + unrarexe.getAbsolutePath());
          copy(winrarexe,unrarexe);
          programm=unrarexe.getAbsolutePath();
        }
      }
    }
 catch (    Throwable e) {
    }
  }
 else {
    try {
      String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
      String Programmname=""String_Node_Str"";
      for (int i=0; i < charset.length; i++) {
        File fi=new File(charset[i],Programmname);
        if (fi.isFile()) {
          programm=fi.getAbsolutePath();
          break;
        }
      }
    }
 catch (    Throwable e) {
    }
  }
  return programm;
}","/** 
 * Versucht den Programmpfad von unrar bzw unrar.exe zu finden
 * @return
 */
public static String autoGetUnrarCommand(){
  String programm=null;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if ((OS.indexOf(""String_Node_Str"") > -1) || (OS.indexOf(""String_Node_Str"") > -1)) {
    try {
      File unrarexe=new File(JDUtilities.getJDHomeDirectory(),""String_Node_Str"");
      if (unrarexe.isFile())       programm=unrarexe.getAbsolutePath();
 else {
        File winrarexe=new File(new File(System.getenv(""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
        if (winrarexe.isFile()) {
          logger.info(""String_Node_Str"" + winrarexe.getAbsolutePath());
          logger.info(""String_Node_Str"" + unrarexe.getAbsolutePath());
          copy(winrarexe,unrarexe);
          programm=unrarexe.getAbsolutePath();
        }
      }
    }
 catch (    Throwable e) {
    }
  }
 else {
    try {
      String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
      String Programmname=""String_Node_Str"";
      for (int i=0; i < charset.length; i++) {
        File fi=new File(charset[i],Programmname);
        if (fi.isFile()) {
          programm=fi.getAbsolutePath();
          break;
        }
      }
    }
 catch (    Throwable e) {
    }
  }
  return programm;
}"
21439,"@Override public boolean doInteraction(Object arg){
  new Thread(new Runnable(){
    public void run(){
      JDController controller=JDUtilities.getController();
      DownloadLink dLink=controller.getLastFinishedDownloadLink();
      String password=null;
      if (dLink != null)       password=dLink.getFilePackage().getPassword();
      jdUnrar unrar=new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
      if (!password.isEmpty()) {
        if (!password.matches(""String_Node_Str""))         unrar.standardPassword=password;
        unrar.addToPasswordlist(password);
      }
      unrar.overwriteFiles=getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
      unrar.autoDelete=getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
      unrar.unrar=getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
      unrar.maxFilesize=getIntegerProperty(Unrar.PROPERTY_MAX_FILESIZE,2);
      unrar.unrar();
      unrar.unrar();
    }
  }
).start();
  return true;
}","@Override public boolean doInteraction(Object arg){
  new Thread(new Runnable(){
    public void run(){
      JDController controller=JDUtilities.getController();
      DownloadLink dLink=controller.getLastFinishedDownloadLink();
      String password=null;
      if (dLink != null)       password=dLink.getFilePackage().getPassword();
      jdUnrar unrar=new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
      if (password != null && !password.isEmpty()) {
        if (!password.matches(""String_Node_Str""))         unrar.standardPassword=password;
        unrar.addToPasswordlist(password);
      }
      unrar.overwriteFiles=getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
      unrar.autoDelete=getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
      unrar.unrar=getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
      unrar.maxFilesize=getIntegerProperty(Unrar.PROPERTY_MAX_FILESIZE,2);
      unrar.unrar();
      unrar=new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY));
      unrar.overwriteFiles=getBooleanProperty(Unrar.PROPERTY_OVERWRITE_FILES,false);
      unrar.autoDelete=getBooleanProperty(Unrar.PROPERTY_AUTODELETE,false);
      unrar.unrar=getStringProperty(Unrar.PROPERTY_UNRARCOMMAND);
      unrar.maxFilesize=getIntegerProperty(Unrar.PROPERTY_MAX_FILESIZE,2);
      unrar.unrar();
    }
  }
).start();
  return true;
}"
21440,"/** 
 * Versucht den Programmpfad von unrar bzw unrar.exe zu finden
 * @return
 */
public static String autoGetUnrarCommand(){
  String programm=null;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if ((OS.indexOf(""String_Node_Str"") > -1) || (OS.indexOf(""String_Node_Str"") > -1)) {
    try {
      File unrarexe=new File(JDUtilities.getJDHomeDirectory(),""String_Node_Str"");
      if (unrarexe.isFile())       programm=unrarexe.getAbsolutePath();
 else {
        unrarexe=new File(JDUtilities.getJDHomeDirectory(),""String_Node_Str"");
        if (unrarexe.isFile())         programm=unrarexe.getAbsolutePath();
      }
    }
 catch (    Throwable e) {
    }
  }
 else {
    try {
      String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
      String Programmname=""String_Node_Str"";
      for (int i=0; i < charset.length; i++) {
        File fi=new File(charset[i],Programmname);
        if (fi.isFile()) {
          programm=fi.getAbsolutePath();
          break;
        }
      }
    }
 catch (    Throwable e) {
    }
  }
  return programm;
}","/** 
 * Versucht den Programmpfad von unrar bzw unrar.exe zu finden
 * @return
 */
public static String autoGetUnrarCommand(){
  String programm=null;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if ((OS.indexOf(""String_Node_Str"") > -1) || (OS.indexOf(""String_Node_Str"") > -1)) {
    try {
      File unrarexe=new File(JDUtilities.getJDHomeDirectory(),""String_Node_Str"");
      if (unrarexe.isFile())       programm=unrarexe.getAbsolutePath();
 else {
        File winrarexe=new File(new File(System.getenv(""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
        if (unrarexe.isFile()) {
          logger.info(""String_Node_Str"" + winrarexe.getAbsolutePath());
          logger.info(""String_Node_Str"" + unrarexe.getAbsolutePath());
          copy(winrarexe,unrarexe);
          programm=unrarexe.getAbsolutePath();
        }
      }
    }
 catch (    Throwable e) {
    }
  }
 else {
    try {
      String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
      String Programmname=""String_Node_Str"";
      for (int i=0; i < charset.length; i++) {
        File fi=new File(charset[i],Programmname);
        if (fi.isFile()) {
          programm=fi.getAbsolutePath();
          break;
        }
      }
    }
 catch (    Throwable e) {
    }
  }
  return programm;
}"
21441,"@Override public void initPanel(){
  GUIConfigEntry ce;
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_BROWSEFILE,unrar,Unrar.PROPERTY_UNRARCOMMAND,""String_Node_Str"").setDefaultValue(new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY)).getUnrarCommand()));
  addGUIConfigEntry(ce);
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,unrar,Unrar.PROPERTY_AUTODELETE,""String_Node_Str"").setDefaultValue(true));
  addGUIConfigEntry(ce);
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,unrar,Unrar.PROPERTY_OVERWRITE_FILES,""String_Node_Str"").setDefaultValue(false));
  addGUIConfigEntry(ce);
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_SPINNER,unrar,Unrar.PROPERTY_MAX_FILESIZE,""String_Node_Str"",0,500).setDefaultValue(2));
  addGUIConfigEntry(ce);
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_BUTTON,this,""String_Node_Str""));
  addGUIConfigEntry(ce);
  add(panel,BorderLayout.CENTER);
}","@Override public void initPanel(){
  GUIConfigEntry ce;
  String unrarcmd=JDUtilities.getConfiguration().getStringProperty(""String_Node_Str"");
  if (unrarcmd == null) {
    unrarcmd=new jdUnrar(JDUtilities.getConfiguration().getStringProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY)).getUnrarCommand();
    if (unrarcmd == null)     JDUtilities.getConfiguration().setProperty(""String_Node_Str"",""String_Node_Str"");
 else     JDUtilities.getConfiguration().setProperty(""String_Node_Str"",unrarcmd);
  }
 else   if (unrarcmd.matches(""String_Node_Str""))   unrarcmd=null;
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_BROWSEFILE,unrar,Unrar.PROPERTY_UNRARCOMMAND,""String_Node_Str"").setDefaultValue(unrarcmd));
  addGUIConfigEntry(ce);
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,unrar,Unrar.PROPERTY_AUTODELETE,""String_Node_Str"").setDefaultValue(true));
  addGUIConfigEntry(ce);
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,unrar,Unrar.PROPERTY_OVERWRITE_FILES,""String_Node_Str"").setDefaultValue(false));
  addGUIConfigEntry(ce);
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_SPINNER,unrar,Unrar.PROPERTY_MAX_FILESIZE,""String_Node_Str"",0,500).setDefaultValue(2));
  addGUIConfigEntry(ce);
  ce=new GUIConfigEntry(new ConfigEntry(ConfigContainer.TYPE_BUTTON,this,""String_Node_Str""));
  addGUIConfigEntry(ce);
  add(panel,BorderLayout.CENTER);
}"
21442,"/** 
 * Versucht den Programmpfad von unrar bzw unrar.exe zu finden
 * @return
 */
public static String autoGetUnrarCommand(){
  String programm=null;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if ((OS.indexOf(""String_Node_Str"") > -1) || (OS.indexOf(""String_Node_Str"") > -1)) {
    try {
      File unrarexe=new File(JDUtilities.getJDHomeDirectory(),""String_Node_Str"");
      if (unrarexe.isFile())       programm=unrarexe.getAbsolutePath();
 else {
        File winrarexe=new File(new File(System.getenv(""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
        if (winrarexe.isFile()) {
          logger.info(""String_Node_Str"" + winrarexe.getAbsolutePath());
          logger.info(""String_Node_Str"" + unrarexe.getAbsolutePath());
          copy(winrarexe,unrarexe);
          programm=unrarexe.getAbsolutePath();
        }
      }
    }
 catch (    Throwable e) {
    }
  }
 else {
    try {
      String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
      String Programmname=""String_Node_Str"";
      for (int i=0; i < charset.length; i++) {
        File fi=new File(charset[i],Programmname);
        if (fi.isFile()) {
          programm=fi.getAbsolutePath();
          break;
        }
      }
    }
 catch (    Throwable e) {
    }
  }
  return programm;
}","/** 
 * Versucht den Programmpfad von unrar bzw unrar.exe zu finden
 * @return
 */
public static String autoGetUnrarCommand(){
  String programm=null;
  String OS=System.getProperty(""String_Node_Str"").toLowerCase();
  if ((OS.indexOf(""String_Node_Str"") > -1) || (OS.indexOf(""String_Node_Str"") > -1)) {
    try {
      File unrarexe=new File(JDUtilities.getJDHomeDirectory(),""String_Node_Str"");
      if (unrarexe.isFile())       programm=unrarexe.getAbsolutePath();
 else {
        File winrarexe=new File(new File(System.getenv(""String_Node_Str""),""String_Node_Str""),""String_Node_Str"");
        if (winrarexe.isFile()) {
          logger.info(""String_Node_Str"" + winrarexe.getAbsolutePath());
          logger.info(""String_Node_Str"" + unrarexe.getAbsolutePath());
          JDUtilities.copyFile(winrarexe,unrarexe);
          programm=unrarexe.getAbsolutePath();
        }
      }
    }
 catch (    Throwable e) {
    }
  }
 else {
    try {
      String[] charset=System.getenv(""String_Node_Str"").split(""String_Node_Str"");
      String Programmname=""String_Node_Str"";
      for (int i=0; i < charset.length; i++) {
        File fi=new File(charset[i],Programmname);
        if (fi.isFile()) {
          programm=fi.getAbsolutePath();
          break;
        }
      }
    }
 catch (    Throwable e) {
    }
  }
  return programm;
}"
21443,"private static Vector<File> vFileList(File file){
  Vector<File> ret=new Vector<File>();
  File[] list=file.listFiles();
  for (int i=0; i < list.length; i++) {
    if (list[i].isDirectory())     ret.addAll(vFileList(list[i]));
 else     ret.add(list[i]);
  }
  return ret;
}","private static Vector<File> vFileList(File file){
  Vector<File> ret=new Vector<File>();
  if (file == null) {
    logger.severe(""String_Node_Str"");
    return ret;
  }
  if (!file.isDirectory()) {
    logger.severe(file.getAbsolutePath() + ""String_Node_Str"");
    return ret;
  }
  File[] list=file.listFiles();
  for (int i=0; i < list.length; i++) {
    if (list[i].isDirectory())     ret.addAll(vFileList(list[i]));
 else     ret.add(list[i]);
  }
  return ret;
}"
21444,"private void removeOfflineAndMirrorFiles(){
  new Thread(){
    public void run(){
      Vector<String> mirrorlist=new Vector<String>();
      for (int i=linkList.size() - 1; i >= 0 && isVisible() && linkList.size() > i; i--) {
        DownloadLink link=linkList.elementAt(i);
        if (!link.isAvailable()) {
          linkList.remove(i);
        }
 else         if (mirrorlist.contains(linkList.elementAt(i).getName().toLowerCase().replaceFirst(""String_Node_Str"",""String_Node_Str""))) {
          linkList.remove(i);
        }
 else         mirrorlist.add(linkList.elementAt(i).getName().toLowerCase().replaceFirst(""String_Node_Str"",""String_Node_Str""));
        fireTableChanged();
        try {
          Thread.sleep(20);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
.start();
}","private void removeOfflineAndMirrorFiles(){
  new Thread(){
    public void run(){
      Vector<String> mirrorlist=new Vector<String>();
      Vector<DownloadLink> mirrorlinks=new Vector<DownloadLink>();
      for (int i=0; i < linkList.size(); i++) {
        if (linkList.elementAt(i).isAvailabilityChecked()) {
          if (linkList.elementAt(i).isAvailable()) {
            if (mirrorlist.contains(linkList.elementAt(i).getName().toLowerCase().replaceFirst(""String_Node_Str"",""String_Node_Str"")))             mirrorlinks.add(linkList.elementAt(i));
 else {
              mirrorlist.add(linkList.elementAt(i).getName().toLowerCase().replaceFirst(""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
      }
      for (int i=linkList.size() - 1; i >= 0 && isVisible() && linkList.size() > i; i--) {
        DownloadLink link=linkList.elementAt(i);
        if (!link.isAvailable() || mirrorlinks.contains(link)) {
          linkList.remove(i);
          fireTableChanged();
        }
        try {
          Thread.sleep(20);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
.start();
}"
21445,"public oXygenWarez(){
  super();
  steps.add(new PluginStep(PluginStep.STEP_DECRYPT,null));
  currentStep=steps.firstElement();
}","public oXygenWarez(){
  super();
  steps.add(new PluginStep(PluginStep.STEP_DECRYPT,null));
  currentStep=steps.firstElement();
  this.setConfigElements();
}"
21446,"@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<String> decryptedLinks=new Vector<String>();
  RequestInfo reqinfo;
try {
  while (true) {
    reqinfo=getRequest(new URL(parameter));
    String captchaurl=""String_Node_Str"" + getFirstMatch(reqinfo.getHtmlCode(),CAPTCHAPATTERN,1);
    File file=this.getLocalCaptchaFile(this);
    if (!JDUtilities.download(file,captchaurl) || !file.exists()) {
      logger.severe(""String_Node_Str"" + captchaurl);
      step.setParameter(null);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    String baseurl=""String_Node_Str"" + getFirstMatch(reqinfo.getHtmlCode(),FORMLOCATION,1);
    String plainCaptcha=getCaptchaCode(file,this);
    String inpHidden=""String_Node_Str"" + plainCaptcha + ""String_Node_Str""+ getFormInputHidden(reqinfo.getHtmlCode());
    reqinfo=postRequest(new URL(baseurl),inpHidden);
    if (reqinfo.getHtmlCode().contains(ERROR_CAPTCHA)) {
      if (file != null && plainCaptcha != null) {
        JDUtilities.appendInfoToFilename(file,plainCaptcha,false);
      }
      logger.severe(""String_Node_Str"");
      continue;
    }
 else     if (reqinfo.getHtmlCode().contains(ERROR_CAPTCHA_TIME)) {
      logger.severe(""String_Node_Str"");
      continue;
    }
    if (file != null && plainCaptcha != null) {
      JDUtilities.appendInfoToFilename(file,plainCaptcha,true);
    }
    break;
  }
  Vector<Vector<String>> links=getAllSimpleMatches(reqinfo.getHtmlCode(),DL_LINK);
  firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_MAX,links.size()));
  for (int i=0; i < links.size(); i++) {
    String link=JDUtilities.urlEncode(links.get(i).get(0));
    link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
    decryptedLinks.add(link);
    firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
  }
  firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,null));
  step.setParameter(decryptedLinks);
}
 catch (IOException e) {
  e.printStackTrace();
}
return null;
}
return null;
}","@Override public PluginStep doStep(PluginStep step,String parameter){
switch (step.getStep()) {
case PluginStep.STEP_DECRYPT:
    Vector<String[]> decryptedLinks=new Vector<String[]>();
  RequestInfo reqinfo;
try {
  while (true) {
    Vector<Vector<String>> results=null;
    reqinfo=getRequest(new URL(parameter));
    String htmlCode=reqinfo.getHtmlCode().replaceAll(""String_Node_Str"",""String_Node_Str"");
    for (int i=0; i < favorites.length + 1; i++) {
      String favPattern;
      if (favorites.length == i) {
        favPattern=""String_Node_Str"";
      }
 else {
        String favorit=favorites[i].trim();
        if (favorit.length() == 0)         continue;
        favPattern=""String_Node_Str"" + favorit + ""String_Node_Str"";
        ;
      }
      results=getAllSimpleMatches(htmlCode,Pattern.compile(favPattern,Pattern.MULTILINE | Pattern.DOTALL));
      if (results != null && results.isEmpty() == false) {
        break;
      }
    }
    String formURL=""String_Node_Str"" + host + results.get(0).get(0);
    String postvar=results.get(0).get(2) + ""String_Node_Str"" + results.get(0).get(3)+ ""String_Node_Str""+ results.get(0).get(4)+ ""String_Node_Str""+ results.get(0).get(5)+ ""String_Node_Str""+ results.get(0).get(6)+ ""String_Node_Str""+ results.get(0).get(7)+ ""String_Node_Str""+ results.get(0).get(8)+ ""String_Node_Str""+ results.get(0).get(9);
    String captchaurl=""String_Node_Str"" + host + results.get(0).get(1);
    File file=this.getLocalCaptchaFile(this);
    if (!JDUtilities.download(file,captchaurl) || !file.exists()) {
      logger.severe(""String_Node_Str"" + captchaurl);
      step.setParameter(null);
      step.setStatus(PluginStep.STATUS_ERROR);
      return step;
    }
    String plainCaptcha=getCaptchaCode(file,this);
    String inpHidden=""String_Node_Str"" + plainCaptcha + ""String_Node_Str""+ postvar;
    pw=getFirstMatch(reqinfo.getHtmlCode(),PASSWORT,1);
    if (pw.matches(""String_Node_Str"") || pw.matches(""String_Node_Str"") || pw.matches(""String_Node_Str"")|| pw.matches(""String_Node_Str""))     pw=DEFAULT_PASSWORD;
 else     if (pw.matches(""String_Node_Str""))     pw=""String_Node_Str"";
    reqinfo=postRequest(new URL(formURL),inpHidden);
    if (reqinfo.getHtmlCode().contains(ERROR_CAPTCHA)) {
      if (file != null && plainCaptcha != null) {
        JDUtilities.appendInfoToFilename(file,plainCaptcha,false);
      }
      logger.severe(""String_Node_Str"");
      continue;
    }
 else     if (reqinfo.getHtmlCode().contains(ERROR_CAPTCHA_TIME)) {
      logger.severe(""String_Node_Str"");
      continue;
    }
    if (file != null && plainCaptcha != null) {
      JDUtilities.appendInfoToFilename(file,plainCaptcha,true);
    }
    break;
  }
  System.out.println(reqinfo.getHtmlCode());
  Vector<Vector<String>> links=getAllSimpleMatches(reqinfo.getHtmlCode(),DL_LINK);
  firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_MAX,links.size()));
  for (int i=0; i < links.size(); i++) {
    String link=JDUtilities.urlEncode(links.get(i).get(0));
    link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
    System.out.println(link);
    decryptedLinks.add(new String[]{link,pw,null});
    firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_INCREASE,null));
  }
  firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,null));
  step.setParameter(decryptedLinks);
}
 catch (IOException e) {
  e.printStackTrace();
}
}
return null;
}"
21447,"/** 
 * @param parent GUI
 * @param linkList neue links
 */
public LinkGrabber(SimpleGUI parent,final DownloadLink[] linkList){
  super();
  this.linkList=new Vector<DownloadLink>();
  this.parent=parent;
  setLayout(new BorderLayout());
  this.setTitle(""String_Node_Str"");
  initGrabber();
  pack();
  JFrame frame=parent.getFrame();
  this.setTitle(""String_Node_Str"");
  setLocation((int)(frame.getLocation().getX() + frame.getWidth() / 2 - this.getWidth() / 2),(int)(frame.getLocation().getY() + frame.getHeight() / 2 - this.getHeight() / 2));
  addLinks(linkList);
  pack();
}","/** 
 * @param parent GUI
 * @param linkList neue links
 */
public LinkGrabber(SimpleGUI parent,final DownloadLink[] linkList){
  super();
  this.linkList=new Vector<DownloadLink>();
  this.parent=parent;
  setLayout(new BorderLayout());
  this.setTitle(""String_Node_Str"");
  initGrabber();
  pack();
  JFrame frame=parent.getFrame();
  this.setTitle(""String_Node_Str"");
  this.setIconImage(JDUtilities.getImage(""String_Node_Str""));
  setLocation((int)(frame.getLocation().getX() + frame.getWidth() / 2 - this.getWidth() / 2),(int)(frame.getLocation().getY() + frame.getHeight() / 2 - this.getHeight() / 2));
  addLinks(linkList);
  pack();
}"
21448,"/** 
 * Untersucht zwei String, ob zwei String ähnlich anfangen. Der übereinstimmende Text wird dann zurückgegeben 
 * @param a Erster String, der vergleicht werden soll
 * @param b Zweiter String, der vergleicht werden soll
 * @return Übereinstimmender Text
 */
public static String getEqualString(String a,String b){
  String first, second;
  int index=0;
  if (a.length() <= b.length()) {
    first=a.toLowerCase();
    second=b.toLowerCase();
  }
 else {
    first=b;
    second=a;
  }
  for (int i=0; i < first.length(); i++) {
    if (first.charAt(i) == second.charAt(i))     index=i;
  }
  if (index > 0)   return first.substring(0,index);
 else   return ""String_Node_Str"";
}","/** 
 * Untersucht zwei String, ob zwei String ähnlich anfangen. Der übereinstimmende Text wird dann zurückgegeben 
 * @param a Erster String, der vergleicht werden soll
 * @param b Zweiter String, der vergleicht werden soll
 * @return Übereinstimmender Text
 */
public static String getEqualString(String a,String b){
  String first, second;
  int index=0;
  if (a.length() <= b.length()) {
    first=a.toLowerCase();
    second=b.toLowerCase();
  }
 else {
    first=b;
    second=a;
  }
  for (int i=0; i < first.length(); i++) {
    if (first.charAt(i) == second.charAt(i))     index=i;
 else     break;
  }
  if (index > 0)   return first.substring(0,index + 1);
 else   return ""String_Node_Str"";
}"
21449,"/** 
 * Hier werden ControlEvent ausgewertet
 * @param event
 */
public void controlEvent(ControlEvent event){
switch (event.getID()) {
case ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED:
    lastDownloadFinished=(DownloadLink)event.getParameter();
  saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
if (this.getMissingPackageFiles(lastDownloadFinished) == 0) {
  Interaction.handleInteraction(Interaction.INTERACTION_DOWNLOAD_PACKAGE_FINISHED,this);
}
if (Configuration.FINISHED_DOWNLOADS_REMOVE.equals(JDUtilities.getConfiguration().getProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION))) {
downloadLinks.remove(lastDownloadFinished);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
uiInterface.setDownloadLinks(downloadLinks);
}
break;
case ControlEvent.CONTROL_CAPTCHA_LOADED:
lastCaptchaLoaded=(File)event.getParameter();
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED:
Object links=event.getParameter();
if (links != null && links instanceof Vector && ((Vector)links).size() > 0) {
uiInterface.addLinksToGrabber((Vector<DownloadLink>)links);
}
break;
case ControlEvent.CONTROL_PLUGIN_INTERACTION_INACTIVE:
Interaction interaction=(Interaction)event.getParameter();
if (interaction instanceof HTTPReconnect && interaction.getCallCode() == Interaction.INTERACTION_CALL_SUCCESS) {
Iterator<DownloadLink> iterator=downloadLinks.iterator();
DownloadLink i;
while (iterator.hasNext()) {
i=iterator.next();
if (i.getRemainingWaittime() > 0) {
i.setEndOfWaittime(0);
i.setStatus(DownloadLink.STATUS_TODO);
}
}
Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
}
 else if (interaction instanceof WebUpdate) {
if (interaction.getCallCode() == Interaction.INTERACTION_CALL_ERROR) {
}
 else {
uiInterface.showMessageDialog(""String_Node_Str"" + ((WebUpdate)interaction).getUpdater().getUpdatedFiles());
}
}
break;
default :
break;
}
uiInterface.delegatedControlEvent(event);
}","/** 
 * Hier werden ControlEvent ausgewertet
 * @param event
 */
public void controlEvent(ControlEvent event){
switch (event.getID()) {
case ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED:
    lastDownloadFinished=(DownloadLink)event.getParameter();
  saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
if (this.getMissingPackageFiles(lastDownloadFinished) == 0) {
  Interaction.handleInteraction(Interaction.INTERACTION_DOWNLOAD_PACKAGE_FINISHED,this);
}
if (lastDownloadFinished.getStatus() == DownloadLink.STATUS_DONE && Configuration.FINISHED_DOWNLOADS_REMOVE.equals(JDUtilities.getConfiguration().getProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION))) {
downloadLinks.remove(lastDownloadFinished);
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
uiInterface.setDownloadLinks(downloadLinks);
}
break;
case ControlEvent.CONTROL_CAPTCHA_LOADED:
lastCaptchaLoaded=(File)event.getParameter();
break;
case ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED:
saveDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
break;
case ControlEvent.CONTROL_DISTRIBUTE_FINISHED:
Object links=event.getParameter();
if (links != null && links instanceof Vector && ((Vector)links).size() > 0) {
uiInterface.addLinksToGrabber((Vector<DownloadLink>)links);
}
break;
case ControlEvent.CONTROL_PLUGIN_INTERACTION_INACTIVE:
Interaction interaction=(Interaction)event.getParameter();
if (interaction instanceof HTTPReconnect && interaction.getCallCode() == Interaction.INTERACTION_CALL_SUCCESS) {
Iterator<DownloadLink> iterator=downloadLinks.iterator();
DownloadLink i;
while (iterator.hasNext()) {
i=iterator.next();
if (i.getRemainingWaittime() > 0) {
i.setEndOfWaittime(0);
i.setStatus(DownloadLink.STATUS_TODO);
}
}
Interaction.handleInteraction(Interaction.INTERACTION_AFTER_RECONNECT,this);
}
 else if (interaction instanceof WebUpdate) {
if (interaction.getCallCode() == Interaction.INTERACTION_CALL_ERROR) {
}
 else {
uiInterface.showMessageDialog(""String_Node_Str"" + ((WebUpdate)interaction).getUpdater().getUpdatedFiles());
}
}
break;
default :
break;
}
uiInterface.delegatedControlEvent(event);
}"
21450,"/** 
 * ruft die doInteraction Funktion auf. Und setzt das Ergebnis als callCode. Der Statuscode kann mit getCallCode abgerufen werden
 * @param arg
 * @return
 */
public boolean interact(Object arg){
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_INTERACTION_ACTIVE,this));
  this.setCallCode(Interaction.INTERACTION_CALL_RUNNING);
  boolean success=doInteraction(arg);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_INTERACTION_RETURNED,this));
  if (!this.isAlive()) {
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_INTERACTION_INACTIVE,this));
  }
  return success;
}","/** 
 * ruft die doInteraction Funktion auf. Und setzt das Ergebnis als callCode. Der Statuscode kann mit getCallCode abgerufen werden
 * @param arg
 * @return
 */
public boolean interact(Object arg){
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_INTERACTION_ACTIVE,this));
  resetInteraction();
  this.setCallCode(Interaction.INTERACTION_CALL_RUNNING);
  boolean success=doInteraction(arg);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_INTERACTION_RETURNED,this));
  if (!this.isAlive()) {
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_INTERACTION_INACTIVE,this));
  }
  return success;
}"
21451,"/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabDownloadTable=new TabDownloadLinks(this);
  tabPluginActivity=new TabPluginActivity();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(tabPluginActivity);
  splitpane.setTopComponent(tabDownloadTable);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  JButton btnAdd=new JButton(actionAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  JButton btnConfig=new JButton(this.actionConfig);
  btnConfig.setFocusPainted(false);
  btnConfig.setBorderPainted(false);
  btnConfig.setText(null);
  JButton btnReconnect=new JButton(this.actionReconnect);
  btnReconnect.setFocusPainted(false);
  btnReconnect.setBorderPainted(false);
  btnReconnect.setText(null);
  JButton btnUpdate=new JButton(this.actionUpdate);
  btnUpdate.setFocusPainted(false);
  btnUpdate.setBorderPainted(false);
  btnUpdate.setText(null);
  JButton btnSave=new JButton(this.actionSaveLinks);
  btnSave.setFocusPainted(false);
  btnSave.setBorderPainted(false);
  btnSave.setText(null);
  JButton btnLoad=new JButton(this.actionLoadLinks);
  btnLoad.setFocusPainted(false);
  btnLoad.setBorderPainted(false);
  btnLoad.setText(null);
  JButton btnLog=new JButton(this.actionLog);
  btnLog.setFocusPainted(false);
  btnLog.setBorderPainted(false);
  btnLog.setText(null);
  JButton btnDnD=new JButton(this.actionDnD);
  btnDnD.setFocusPainted(false);
  btnDnD.setBorderPainted(false);
  btnDnD.setText(null);
  JButton btnSearch=new JButton(this.actionSearch);
  btnSearch.setFocusPainted(false);
  btnSearch.setBorderPainted(false);
  btnSearch.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnLoad);
  toolBar.add(btnSave);
  toolBar.addSeparator();
  toolBar.add(btnStartStop);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  toolBar.add(btnSearch);
  toolBar.addSeparator();
  toolBar.add(btnUpdate);
  toolBar.addSeparator();
  toolBar.add(btnConfig);
  toolBar.add(btnLog);
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(btnDnD);
  reconnectBox=new JCheckBox(""String_Node_Str"");
  reconnectBox.setSelected(true);
  reconnectBox.addActionListener(this);
  toolBar.add(reconnectBox);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,splitpane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}","/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabDownloadTable=new TabDownloadLinks(this);
  tabPluginActivity=new TabPluginActivity();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(tabPluginActivity);
  splitpane.setTopComponent(tabDownloadTable);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  JButton btnAdd=new JButton(actionAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  JButton btnConfig=new JButton(this.actionConfig);
  btnConfig.setFocusPainted(false);
  btnConfig.setBorderPainted(false);
  btnConfig.setText(null);
  JButton btnReconnect=new JButton(this.actionReconnect);
  btnReconnect.setFocusPainted(false);
  btnReconnect.setBorderPainted(false);
  btnReconnect.setText(null);
  JButton btnUpdate=new JButton(this.actionUpdate);
  btnUpdate.setFocusPainted(false);
  btnUpdate.setBorderPainted(false);
  btnUpdate.setText(null);
  JButton btnSave=new JButton(this.actionSaveLinks);
  btnSave.setFocusPainted(false);
  btnSave.setBorderPainted(false);
  btnSave.setText(null);
  JButton btnLoad=new JButton(this.actionLoadLinks);
  btnLoad.setFocusPainted(false);
  btnLoad.setBorderPainted(false);
  btnLoad.setText(null);
  JButton btnLog=new JButton(this.actionLog);
  btnLog.setFocusPainted(false);
  btnLog.setBorderPainted(false);
  btnLog.setText(null);
  JButton btnDnD=new JButton(this.actionDnD);
  btnDnD.setFocusPainted(false);
  btnDnD.setBorderPainted(false);
  btnDnD.setText(null);
  JButton btnSearch=new JButton(this.actionSearch);
  btnSearch.setFocusPainted(false);
  btnSearch.setBorderPainted(false);
  btnSearch.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnLoad);
  toolBar.add(btnSave);
  toolBar.addSeparator();
  toolBar.add(btnStartStop);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  toolBar.add(btnSearch);
  toolBar.addSeparator();
  toolBar.add(btnUpdate);
  toolBar.addSeparator();
  toolBar.add(btnConfig);
  toolBar.add(btnLog);
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(btnDnD);
  reconnectBox=new JCheckBox(""String_Node_Str"");
  boolean rc=JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_DISABLE_RECONNECT,true);
  reconnectBox.setSelected(rc);
  HTTPReconnect.setEnabled(rc);
  ExternReconnect.setEnabled(rc);
  reconnectBox.addActionListener(this);
  toolBar.add(reconnectBox);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,splitpane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}"
21452,"/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == reconnectBox) {
    HTTPReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    ExternReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_START_STOP_DOWNLOADS:
if (btnStartStop.isSelected() && JDUtilities.getController().getDownloadStatus() == JDController.DOWNLOAD_NOT_RUNNING) {
  fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS));
}
 else if (!btnStartStop.isSelected() && JDUtilities.getController().getDownloadStatus() == JDController.DOWNLOAD_RUNNING) {
  final SimpleGUI _this=this;
  new Thread(){
    public void run(){
      fireUIEvent(new UIEvent(_this,UIEvent.UI_STOP_DOWNLOADS));
    }
  }
.start();
}
break;
case JDAction.APP_SAVE:
JFileChooser fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD:
fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_LOAD_CONTAINER:
fc=new JFileChooser();
fc.showOpenDialog(frame);
File file=fc.getSelectedFile();
if (file != null && file.exists()) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_CONTAINER,file));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
int confirm=JOptionPane.showConfirmDialog(frame,""String_Node_Str"");
if (confirm == JOptionPane.OK_OPTION) {
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_RECONNECT));
}
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
break;
case JDAction.ITEMS_DND:
if (dragNDrop.isVisible()) {
dragNDrop.setVisible(false);
fireUIEvent(new UIEvent(this,UIEvent.UI_SET_CLIPBOARD,false));
}
 else {
fireUIEvent(new UIEvent(this,UIEvent.UI_SET_CLIPBOARD,true));
dragNDrop.setVisible(true);
dragNDrop.setText(""String_Node_Str"");
}
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_SEARCH:
SearchDialog s=new SearchDialog(this.getFrame());
data=s.getText();
logger.info(data);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}","/** 
 * Hier werden die Aktionen ausgewertet und weitergeleitet
 * @param e Die erwünschte Aktion
 */
public void actionPerformed(ActionEvent e){
  if (e.getSource() == reconnectBox) {
    HTTPReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    ExternReconnect.setEnabled(reconnectBox.getSelectedObjects() != null);
    JDUtilities.getConfiguration().setProperty(Configuration.PARAM_DISABLE_RECONNECT,reconnectBox.getSelectedObjects() != null);
    fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
    return;
  }
switch (e.getID()) {
case JDAction.ITEMS_MOVE_UP:
case JDAction.ITEMS_MOVE_DOWN:
case JDAction.ITEMS_MOVE_TOP:
case JDAction.ITEMS_MOVE_BOTTOM:
    tabDownloadTable.moveSelectedItems(e.getID());
  break;
case JDAction.APP_START_STOP_DOWNLOADS:
if (btnStartStop.isSelected() && JDUtilities.getController().getDownloadStatus() == JDController.DOWNLOAD_NOT_RUNNING) {
  fireUIEvent(new UIEvent(this,UIEvent.UI_START_DOWNLOADS));
}
 else if (!btnStartStop.isSelected() && JDUtilities.getController().getDownloadStatus() == JDController.DOWNLOAD_RUNNING) {
  final SimpleGUI _this=this;
  new Thread(){
    public void run(){
      fireUIEvent(new UIEvent(_this,UIEvent.UI_STOP_DOWNLOADS));
    }
  }
.start();
}
break;
case JDAction.APP_SAVE:
JFileChooser fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showSaveDialog(frame);
File ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_LINKS,ret));
}
break;
case JDAction.APP_LOAD:
fc=new JFileChooser();
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
fc.showOpenDialog(frame);
ret=fc.getSelectedFile();
if (ret != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_LINKS,ret));
}
break;
case JDAction.APP_LOAD_CONTAINER:
fc=new JFileChooser();
fc.showOpenDialog(frame);
File file=fc.getSelectedFile();
if (file != null && file.exists()) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LOAD_CONTAINER,file));
}
break;
case JDAction.APP_EXIT:
frame.setVisible(false);
frame.dispose();
fireUIEvent(new UIEvent(this,UIEvent.UI_EXIT));
break;
case JDAction.APP_LOG:
logDialog.setVisible(!logDialog.isVisible());
break;
case JDAction.APP_RECONNECT:
int confirm=JOptionPane.showConfirmDialog(frame,""String_Node_Str"");
if (confirm == JOptionPane.OK_OPTION) {
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_RECONNECT));
}
break;
case JDAction.APP_UPDATE:
fireUIEvent(new UIEvent(this,UIEvent.UI_INTERACT_UPDATE));
break;
case JDAction.ITEMS_REMOVE:
if (this.showConfirmDialog(""String_Node_Str"")) {
tabDownloadTable.removeSelectedLinks();
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_CHANGED,null));
}
break;
case JDAction.ITEMS_DND:
if (dragNDrop.isVisible()) {
dragNDrop.setVisible(false);
fireUIEvent(new UIEvent(this,UIEvent.UI_SET_CLIPBOARD,false));
}
 else {
fireUIEvent(new UIEvent(this,UIEvent.UI_SET_CLIPBOARD,true));
dragNDrop.setVisible(true);
dragNDrop.setText(""String_Node_Str"");
}
break;
case JDAction.ITEMS_ADD:
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
String cb=""String_Node_Str"";
try {
cb=(String)clipboard.getData(DataFlavor.stringFlavor);
}
 catch (UnsupportedFlavorException e1) {
}
catch (IOException e1) {
}
String data=JOptionPane.showInputDialog(frame,""String_Node_Str"",cb);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_SEARCH:
SearchDialog s=new SearchDialog(this.getFrame());
data=s.getText();
logger.info(data);
if (data != null) {
fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_TO_PROCESS,data));
}
break;
case JDAction.APP_CONFIGURATION:
boolean configChanged=ConfigurationDialog.showConfig(frame,this);
if (configChanged) fireUIEvent(new UIEvent(this,UIEvent.UI_SAVE_CONFIG));
break;
}
}"
21453,"public Object getValueAt(int rowIndex,int columnIndex){
  if (rowIndex < allLinks.size()) {
    DownloadLink downloadLink=allLinks.get(rowIndex);
switch (columnIndex) {
case COL_INDEX:
      return rowIndex;
case COL_NAME:
    if (downloadLink.getFilePackage() == null) {
      return downloadLink.getName();
    }
  return downloadLink.getFilePackage().getDownloadDirectoryName() + ""String_Node_Str"" + downloadLink.getName();
case COL_STATUS:
return downloadLink.getStatusText();
case COL_HOST:
return downloadLink.getHost();
case COL_PROGRESS:
if (rowIndex >= progressBars.size()) {
JProgressBar p=new JProgressBar(0,1);
progressBars.add(rowIndex,p);
}
JProgressBar p=progressBars.elementAt(rowIndex);
if (downloadLink.isInProgress() && downloadLink.getRemainingWaittime() == 0 && (int)downloadLink.getDownloadCurrent() > 0 && (int)downloadLink.getDownloadCurrent() <= (int)downloadLink.getDownloadMax()) {
p.setMaximum((int)downloadLink.getDownloadMax());
p.setStringPainted(true);
p.setBackground(Color.WHITE);
p.setValue((int)downloadLink.getDownloadCurrent());
p.setString((int)(100 * p.getPercentComplete()) + ""String_Node_Str"" + (double)Math.round((p.getValue() / 10000)) / 100.0 + ""String_Node_Str"" + (double)Math.round(p.getMaximum() / 10000) / 100.0 + ""String_Node_Str"");
return p;
}
 else if (downloadLink.getRemainingWaittime() > 0 && downloadLink.getWaitTime() >= downloadLink.getRemainingWaittime()) {
p.setMaximum(downloadLink.getWaitTime());
p.setBackground(new Color(255,0,0,80));
p.setStringPainted(true);
p.setValue((int)downloadLink.getRemainingWaittime());
p.setString((int)(100 * p.getPercentComplete()) + ""String_Node_Str"" + p.getValue() / 1000 + ""String_Node_Str"" + p.getMaximum() / 1000 + ""String_Node_Str"");
return p;
}
 else return null;
}
}
return null;
}","public Object getValueAt(int rowIndex,int columnIndex){
  if (rowIndex < allLinks.size()) {
    DownloadLink downloadLink=allLinks.get(rowIndex);
switch (columnIndex) {
case COL_INDEX:
      return rowIndex;
case COL_NAME:
    if (downloadLink.getFilePackage() == null) {
      return downloadLink.getName();
    }
  return downloadLink.getFilePackage().getDownloadDirectoryName() + ""String_Node_Str"" + downloadLink.getName();
case COL_STATUS:
return downloadLink.getStatusText();
case COL_HOST:
return downloadLink.getHost();
case COL_PROGRESS:
if (rowIndex >= progressBars.size()) {
JProgressBar p=new JProgressBar(0,1);
progressBars.add(rowIndex,p);
}
JProgressBar p=progressBars.elementAt(rowIndex);
if (downloadLink.isInProgress() && downloadLink.getRemainingWaittime() == 0 && (int)downloadLink.getDownloadCurrent() > 0 && (int)downloadLink.getDownloadCurrent() <= (int)downloadLink.getDownloadMax()) {
p.setMaximum((int)downloadLink.getDownloadMax());
p.setStringPainted(true);
p.setBackground(Color.WHITE);
p.setValue((int)downloadLink.getDownloadCurrent());
p.setString((int)(100 * p.getPercentComplete()) + ""String_Node_Str"" + JDUtilities.formatBytesToMB(p.getValue())+ ""String_Node_Str""+ JDUtilities.formatBytesToMB(p.getMaximum())+ ""String_Node_Str"");
return p;
}
 else if (downloadLink.getRemainingWaittime() > 0 && downloadLink.getWaitTime() >= downloadLink.getRemainingWaittime()) {
p.setMaximum(downloadLink.getWaitTime());
p.setBackground(new Color(255,0,0,80));
p.setStringPainted(true);
p.setValue((int)downloadLink.getRemainingWaittime());
p.setString((int)(100 * p.getPercentComplete()) + ""String_Node_Str"" + p.getValue() / 1000 + ""String_Node_Str"" + p.getMaximum() / 1000 + ""String_Node_Str"");
return p;
}
 else return null;
}
}
return null;
}"
21454,"/** 
 * Entfernt die aktuell selektierten Links
 */
public void removeSelectedLinks(){
  Vector<DownloadLink> linksToDelete=getSelectedObjects();
  allLinks.removeAll(linksToDelete);
  table.getSelectionModel().clearSelection();
  fireTableChanged();
}","/** 
 * Entfernt die aktuell selektierten Links
 */
public void removeSelectedLinks(){
  if (parent.showConfirmDialog(""String_Node_Str"")) {
    Vector<DownloadLink> linksToDelete=getSelectedObjects();
    allLinks.removeAll(linksToDelete);
    table.getSelectionModel().clearSelection();
    fireTableChanged();
  }
}"
21455,"private void importFromRoutersDat(){
  File fileRoutersDat;
  Vector<RouterData> routerData;
  fileRoutersDat=JDUtilities.getResourceFile(""String_Node_Str"");
  if (fileRoutersDat != null) {
    RouterParser parser=new RouterParser();
    routerData=parser.parseXMLFile(fileRoutersDat);
    Object selected=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE,null,routerData.toArray(),null);
    if (selected != null) {
      this.routerData=(RouterData)selected;
      load();
    }
  }
}","private void importFromRoutersDat(){
  File fileRoutersDat;
  Vector<RouterData> routerData;
  fileRoutersDat=JDUtilities.getResourceFile(""String_Node_Str"");
  if (fileRoutersDat != null) {
    RouterParser parser=new RouterParser();
    routerData=parser.parseXMLFile(fileRoutersDat);
    Collections.sort(routerData,new Comparator<Object>(){
      public int compare(      Object a,      Object b){
        if (a instanceof RouterData && b instanceof RouterData) {
          if (((RouterData)a).getRouterName().compareToIgnoreCase(((RouterData)b).getRouterName()) > 0) {
            return 1;
          }
 else           if (((RouterData)a).getRouterName().compareToIgnoreCase(((RouterData)b).getRouterName()) < 0) {
            return -1;
          }
 else {
            return 0;
          }
        }
        return 0;
      }
    }
);
    Object selected=JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE,null,routerData.toArray(),null);
    if (selected != null) {
      this.routerData=(RouterData)selected;
      load();
    }
  }
}"
21456,"private String getDownloadInfo(DownloadLink downloadLink){
  String serverAbb=serverMap.get((String)this.getProperties().getProperty(""String_Node_Str""));
  String server2Abb=serverMap.get((String)this.getProperties().getProperty(""String_Node_Str""));
  if (serverAbb == null) {
    serverAbb=serverList1[(int)(Math.random() * (serverList1.length - 1))];
  }
  if (server2Abb == null) {
    server2Abb=serverList2[(int)(Math.random() * (serverList2.length - 1))];
  }
  String endServerAbb=""String_Node_Str"";
  Boolean telekom=!(this.getProperties().getProperty(""String_Node_Str"") == null || !(Boolean)this.getProperties().getProperty(""String_Node_Str""));
  String newURL=null;
  try {
    if (aborted) {
      logger.warning(""String_Node_Str"");
      downloadLink.setStatus(DownloadLink.STATUS_TODO);
      currentStep.setStatus(PluginStep.STATUS_TODO);
      return null;
    }
    requestInfo=getRequest(new URL(downloadLink.getUrlDownloadDecrypted()));
    if (requestInfo.getHtmlCode().indexOf(hardwareDefektString) > 0) {
      currentStep.setStatus(PluginStep.STATUS_ERROR);
      currentStep.setParameter(60 * 10);
      logger.severe(""String_Node_Str"");
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
      return null;
    }
    if (requestInfo.containsHTML(toManyUser)) {
      currentStep.setStatus(PluginStep.STATUS_ERROR);
      currentStep.setParameter(60 * 2);
      logger.severe(""String_Node_Str"");
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_TO_MANY_USERS);
      return null;
    }
    newURL=getFirstMatch(requestInfo.getHtmlCode(),patternForNewHost,1);
    if (newURL != null) {
      if (aborted) {
        logger.warning(""String_Node_Str"");
        downloadLink.setStatus(DownloadLink.STATUS_TODO);
        currentStep.setStatus(PluginStep.STATUS_TODO);
        return null;
      }
      requestInfo=postRequest(new URL(newURL),null,null,null,""String_Node_Str"",true);
      captchaAddress=getFirstMatch(requestInfo.getHtmlCode(),patternForCaptcha,1);
      postTarget=getFirstMatch(requestInfo.getHtmlCode(),patternForFormData,1);
      actionString=getFirstMatch(requestInfo.getHtmlCode(),patternForFormData,2);
      if (telekom && requestInfo.containsHTML(""String_Node_Str"")) {
        actionString=""String_Node_Str"";
      }
 else       if (requestInfo.containsHTML(serverAbb + ""String_Node_Str"")) {
        actionString=""String_Node_Str"" + getServerFromAbbreviation(serverAbb);
      }
 else       if (requestInfo.containsHTML(server2Abb + ""String_Node_Str"")) {
        actionString=""String_Node_Str"" + getServerFromAbbreviation(server2Abb);
      }
 else {
        logger.severe(""String_Node_Str"");
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
        currentStep.setStatus(PluginStep.STATUS_ERROR);
        return null;
      }
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return newURL;
}","private String getDownloadInfo(DownloadLink downloadLink){
  String serverAbb=serverMap.get((String)this.getProperties().getProperty(""String_Node_Str""));
  String server2Abb=serverMap.get((String)this.getProperties().getProperty(""String_Node_Str""));
  if (serverAbb == null) {
    serverAbb=serverList1[(int)(Math.random() * (serverList1.length - 1))];
  }
  if (server2Abb == null) {
    server2Abb=serverList2[(int)(Math.random() * (serverList2.length - 1))];
  }
  String endServerAbb=""String_Node_Str"";
  Boolean telekom=!(this.getProperties().getProperty(""String_Node_Str"") == null || !(Boolean)this.getProperties().getProperty(""String_Node_Str""));
  String newURL=null;
  try {
    if (aborted) {
      logger.warning(""String_Node_Str"");
      downloadLink.setStatus(DownloadLink.STATUS_TODO);
      currentStep.setStatus(PluginStep.STATUS_TODO);
      return null;
    }
    requestInfo=getRequest(new URL(downloadLink.getUrlDownloadDecrypted()));
    logger.info(requestInfo.getHtmlCode());
    if (requestInfo.getHtmlCode().indexOf(hardwareDefektString) > 0) {
      currentStep.setStatus(PluginStep.STATUS_ERROR);
      currentStep.setParameter(60 * 10);
      logger.severe(""String_Node_Str"");
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
      return null;
    }
    if (requestInfo.containsHTML(toManyUser)) {
      currentStep.setStatus(PluginStep.STATUS_ERROR);
      currentStep.setParameter(60 * 2);
      logger.severe(""String_Node_Str"");
      downloadLink.setStatus(DownloadLink.STATUS_ERROR_TO_MANY_USERS);
      return null;
    }
    newURL=getFirstMatch(requestInfo.getHtmlCode(),patternForNewHost,1);
    if (newURL != null) {
      if (aborted) {
        logger.warning(""String_Node_Str"");
        downloadLink.setStatus(DownloadLink.STATUS_TODO);
        currentStep.setStatus(PluginStep.STATUS_TODO);
        return null;
      }
      requestInfo=postRequest(new URL(newURL),null,null,null,""String_Node_Str"",true);
      captchaAddress=getFirstMatch(requestInfo.getHtmlCode(),patternForCaptcha,1);
      postTarget=getFirstMatch(requestInfo.getHtmlCode(),patternForFormData,1);
      actionString=getFirstMatch(requestInfo.getHtmlCode(),patternForFormData,2);
      if (telekom && requestInfo.containsHTML(""String_Node_Str"")) {
        actionString=""String_Node_Str"";
      }
 else       if (requestInfo.containsHTML(serverAbb + ""String_Node_Str"")) {
        actionString=""String_Node_Str"" + getServerFromAbbreviation(serverAbb);
      }
 else       if (requestInfo.containsHTML(server2Abb + ""String_Node_Str"")) {
        actionString=""String_Node_Str"" + getServerFromAbbreviation(server2Abb);
      }
 else {
        logger.severe(""String_Node_Str"");
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE);
        currentStep.setStatus(PluginStep.STATUS_ERROR);
        return null;
      }
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return newURL;
}"
21457,"private String getServerFromAbbreviation(String abb){
  Iterator<String> iter=serverMap.keySet().iterator();
  while (iter.hasNext()) {
    if (serverMap.get((String)iter.next()).equals(abb))     return (String)iter.next();
  }
  return null;
}","private String getServerFromAbbreviation(String abb){
  Iterator<String> iter=serverMap.keySet().iterator();
  Object next;
  while (iter.hasNext()) {
    next=iter.next();
    if (serverMap.get((String)next).equals(abb))     return (String)next;
  }
  return null;
}"
21458,"private void go(){
  Logger logger=Plugin.getLogger();
  loadImages();
  File fileInput=null;
  try {
    fileInput=JDUtilities.getResourceFile(JDUtilities.CONFIG_PATH);
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
  }
  try {
    logger.finer(""String_Node_Str"" + fileInput + ""String_Node_Str""+ JDUtilities.CONFIG_PATH+ ""String_Node_Str"");
    if (fileInput != null && fileInput.exists()) {
      Object obj=JDUtilities.loadObject(null,fileInput,Configuration.saveAsXML);
      if (obj instanceof Configuration) {
        Configuration configuration=(Configuration)obj;
        JDUtilities.setConfiguration(configuration);
        Plugin.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.FINER));
      }
 else {
        logger.severe(""String_Node_Str"" + obj);
      }
    }
 else {
      logger.warning(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"");
    JDUtilities.getConfiguration().setDefaultValues();
  }
  logger.info(""String_Node_Str"");
  JDUtilities.loadPlugins();
  logger.info(""String_Node_Str"");
  UIInterface uiInterface=new SimpleGUI();
  logger.info(""String_Node_Str"");
  JDController controller=new JDController();
  controller.setUiInterface(uiInterface);
  logger.info(""String_Node_Str"");
  if (!controller.initDownloadLinks()) {
    File links=JDUtilities.getResourceFile(""String_Node_Str"");
    if (links.exists()) {
      File newFile=new File(links.getAbsolutePath() + ""String_Node_Str"");
      newFile.delete();
      links.renameTo(newFile);
      uiInterface.showMessageDialog(""String_Node_Str"" + newFile + ""String_Node_Str"");
    }
  }
  logger.info(""String_Node_Str"");
  Iterator<PluginForHost> iteratorHost=JDUtilities.getPluginsForHost().iterator();
  while (iteratorHost.hasNext()) {
    iteratorHost.next().addPluginListener(controller);
  }
  Iterator<PluginForDecrypt> iteratorDecrypt=JDUtilities.getPluginsForDecrypt().iterator();
  while (iteratorDecrypt.hasNext()) {
    iteratorDecrypt.next().addPluginListener(controller);
  }
  Iterator<PluginForSearch> iteratorSearch=JDUtilities.getPluginsForSearch().iterator();
  while (iteratorSearch.hasNext()) {
    iteratorSearch.next().addPluginListener(controller);
  }
  Interaction.handleInteraction(Interaction.INTERACTION_APPSTART,false);
}","private void go(){
  Logger logger=Plugin.getLogger();
  loadImages();
  File fileInput=null;
  try {
    fileInput=JDUtilities.getResourceFile(JDUtilities.CONFIG_PATH);
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
  }
  try {
    logger.finer(""String_Node_Str"" + fileInput + ""String_Node_Str""+ JDUtilities.CONFIG_PATH+ ""String_Node_Str"");
    if (fileInput != null && fileInput.exists()) {
      Object obj=JDUtilities.loadObject(null,fileInput,Configuration.saveAsXML);
      if (obj instanceof Configuration) {
        Configuration configuration=(Configuration)obj;
        JDUtilities.setConfiguration(configuration);
        Plugin.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.FINER));
      }
 else {
        logger.severe(""String_Node_Str"" + obj);
        logger.severe(""String_Node_Str"");
        JDUtilities.getConfiguration().setDefaultValues();
      }
    }
 else {
      logger.warning(""String_Node_Str"");
      logger.severe(""String_Node_Str"");
      JDUtilities.getConfiguration().setDefaultValues();
    }
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"");
    JDUtilities.getConfiguration().setDefaultValues();
  }
  logger.info(""String_Node_Str"");
  JDUtilities.loadPlugins();
  logger.info(""String_Node_Str"");
  UIInterface uiInterface=new SimpleGUI();
  logger.info(""String_Node_Str"");
  JDController controller=new JDController();
  controller.setUiInterface(uiInterface);
  logger.info(""String_Node_Str"");
  if (!controller.initDownloadLinks()) {
    File links=JDUtilities.getResourceFile(""String_Node_Str"");
    if (links.exists()) {
      File newFile=new File(links.getAbsolutePath() + ""String_Node_Str"");
      newFile.delete();
      links.renameTo(newFile);
      uiInterface.showMessageDialog(""String_Node_Str"" + newFile + ""String_Node_Str"");
    }
  }
  logger.info(""String_Node_Str"");
  Iterator<PluginForHost> iteratorHost=JDUtilities.getPluginsForHost().iterator();
  while (iteratorHost.hasNext()) {
    iteratorHost.next().addPluginListener(controller);
  }
  Iterator<PluginForDecrypt> iteratorDecrypt=JDUtilities.getPluginsForDecrypt().iterator();
  while (iteratorDecrypt.hasNext()) {
    iteratorDecrypt.next().addPluginListener(controller);
  }
  Iterator<PluginForSearch> iteratorSearch=JDUtilities.getPluginsForSearch().iterator();
  while (iteratorSearch.hasNext()) {
    iteratorSearch.next().addPluginListener(controller);
  }
  Interaction.handleInteraction(Interaction.INTERACTION_APPSTART,false);
}"
21459,"/** 
 * Bricht den Watchdog ab. Alle laufenden downloads werden beendet und die downloadliste zurückgesetzt. Diese Funktion blockiert bis alle Downloads erfolgreich abgeborhcen wurden.
 */
void abort(){
  for (int i=0; i < this.activeLinks.size(); i++) {
    activeLinks.get(i).abortDownload();
  }
  boolean check=true;
  while (true) {
    check=true;
    for (int i=0; i < this.activeLinks.size(); i++) {
      if (activeLinks.get(i).isAlive()) {
        check=false;
        break;
      }
    }
    if (check)     break;
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
  this.aborted=true;
  this.clearDownloadListStatus();
}","/** 
 * Bricht den Watchdog ab. Alle laufenden downloads werden beendet und die downloadliste zurückgesetzt. Diese Funktion blockiert bis alle Downloads erfolgreich abgeborhcen wurden.
 */
void abort(){
  for (int i=0; i < this.activeLinks.size(); i++) {
    activeLinks.get(i).abortDownload();
  }
  deligateFireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,null));
  boolean check=true;
  while (true) {
    check=true;
    for (int i=0; i < this.activeLinks.size(); i++) {
      if (activeLinks.get(i).isAlive()) {
        check=false;
        break;
      }
    }
    if (check)     break;
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
  this.aborted=true;
  this.clearDownloadListStatus();
}"
21460,"public JDController(){
  downloadLinks=new Vector<DownloadLink>();
  speedMeter=new SpeedMeter(5000);
  clipboard=new ClipboardHandler(this);
  JDUtilities.setController(this);
}","public JDController(){
  downloadLinks=new Vector<DownloadLink>();
  speedMeter=new SpeedMeter(10000);
  clipboard=new ClipboardHandler(this);
  downloadStatus=DOWNLOAD_NOT_RUNNING;
  JDUtilities.setController(this);
}"
21461,"private void stopDownloads(){
  if (watchdog != null) {
    setDownloadStatus(DOWNLOAD_TERMINATION_IN_PROGRESS);
    watchdog.abort();
    setDownloadStatus(DOWNLOAD_NOT_RUNNING);
  }
}","/** 
 * Bricht den Download ab und blockiert bis er abgebrochen wurde.
 */
private void stopDownloads(){
  if (getDownloadStatus() == DOWNLOAD_RUNNING) {
    setDownloadStatus(DOWNLOAD_TERMINATION_IN_PROGRESS);
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_DOWNLOAD_TERMINATION_ACTIVE,this));
    watchdog.abort();
    setDownloadStatus(DOWNLOAD_NOT_RUNNING);
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_DOWNLOAD_TERMINATION_INACTIVE,this));
  }
}"
21462,"/** 
 * Lädt eine LinkListe
 * @param file Die Datei, aus der die Links gelesen werden
 * @return Ein neuer Vector mit den DownloadLinks
 */
public Vector<DownloadLink> loadDownloadLinks(File file){
  try {
    if (file.exists()) {
      Object obj=JDUtilities.loadObject(null,file,Configuration.saveAsXML);
      if (obj != null && obj instanceof Vector) {
        Vector<DownloadLink> links=(Vector<DownloadLink>)obj;
        Iterator<DownloadLink> iterator=links.iterator();
        DownloadLink localLink;
        PluginForHost pluginForHost=null;
        while (iterator.hasNext()) {
          localLink=iterator.next();
          if (localLink.getStatus() == DownloadLink.STATUS_DONE && Configuration.FINISHED_DOWNLOADS_REMOVE_AT_START.equals(JDUtilities.getConfiguration().getProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION))) {
            iterator.remove();
            continue;
          }
          try {
            pluginForHost=JDUtilities.getPluginForHost(localLink.getHost()).getClass().newInstance();
          }
 catch (          InstantiationException e) {
            e.printStackTrace();
          }
catch (          IllegalAccessException e) {
            e.printStackTrace();
          }
          if (pluginForHost != null) {
            localLink.setLoadedPlugin(pluginForHost);
            pluginForHost.addPluginListener(this);
          }
 else {
            logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
          }
        }
        return links;
      }
    }
    return null;
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"");
    return null;
  }
}","/** 
 * Lädt eine LinkListe
 * @param file Die Datei, aus der die Links gelesen werden
 * @return Ein neuer Vector mit den DownloadLinks
 */
private Vector<DownloadLink> loadDownloadLinks(File file){
  try {
    if (file.exists()) {
      Object obj=JDUtilities.loadObject(null,file,Configuration.saveAsXML);
      if (obj != null && obj instanceof Vector) {
        Vector<DownloadLink> links=(Vector<DownloadLink>)obj;
        Iterator<DownloadLink> iterator=links.iterator();
        DownloadLink localLink;
        PluginForHost pluginForHost=null;
        while (iterator.hasNext()) {
          localLink=iterator.next();
          if (localLink.getStatus() == DownloadLink.STATUS_DONE && Configuration.FINISHED_DOWNLOADS_REMOVE_AT_START.equals(JDUtilities.getConfiguration().getProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION))) {
            iterator.remove();
            continue;
          }
          try {
            pluginForHost=JDUtilities.getPluginForHost(localLink.getHost()).getClass().newInstance();
          }
 catch (          InstantiationException e) {
            e.printStackTrace();
          }
catch (          IllegalAccessException e) {
            e.printStackTrace();
          }
          if (pluginForHost != null) {
            localLink.setLoadedPlugin(pluginForHost);
            pluginForHost.addPluginListener(this);
          }
 else {
            logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
          }
        }
        return links;
      }
    }
    return null;
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"");
    return null;
  }
}"
21463,"public void setDownloadStatus(int downloadStatus){
  this.downloadStatus=downloadStatus;
}","/** 
 * Setzt den Downloadstatus. Status Ids aus JDController.** sollten verwendet werden
 * @param downloadStatus
 */
public void setDownloadStatus(int downloadStatus){
  this.downloadStatus=downloadStatus;
}"
21464,"/** 
 * Lädt zum Start das erste Mal alle Links aus einer Datei
 */
public boolean initDownloadLinks(){
  Vector<DownloadLink> list=loadDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
  if (list != null) {
    downloadLinks=loadDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
    if (uiInterface != null)     uiInterface.setDownloadLinks(downloadLinks);
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Lädt zum Start das erste Mal alle Links aus einer Datei
 * @return true/False je nach Erfolg
 */
public boolean initDownloadLinks(){
  Vector<DownloadLink> list=loadDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
  if (list != null) {
    downloadLinks=loadDownloadLinks(JDUtilities.getResourceFile(""String_Node_Str""));
    if (uiInterface != null)     uiInterface.setDownloadLinks(downloadLinks);
    return true;
  }
 else {
    return false;
  }
}"
21465,"public int getDownloadStatus(){
  if (watchdog == null || watchdog.isAborted()) {
    return DOWNLOAD_NOT_RUNNING;
  }
 else {
    return this.downloadStatus;
  }
}","/** 
 * Gibt den Status (ID) der downloads zurück
 * @return
 */
public int getDownloadStatus(){
  if (watchdog == null || watchdog.isAborted() && downloadStatus == DOWNLOAD_RUNNING) {
    setDownloadStatus(DOWNLOAD_NOT_RUNNING);
  }
  return this.downloadStatus;
}"
21466,"/** 
 * Bricht den Downloadvorgang ab.
 */
public void abortDownload(){
  aborted=true;
  if (currentPlugin != null)   currentPlugin.abort();
}","/** 
 * Bricht den Downloadvorgang ab.
 */
public void abortDownload(){
  downloadLink.setStatusText(""String_Node_Str"");
  aborted=true;
  if (currentPlugin != null)   currentPlugin.abort();
}"
21467,"private void initDialog(){
  try {
    addEntry(""String_Node_Str"",new File(downloadLink.getFileOutput()).getName() + ""String_Node_Str"" + new URL(downloadLink.getUrlDownloadDecrypted()).getHost());
    addEntry(null,null);
    if (downloadLink.getPassword() != null) {
      addEntry(""String_Node_Str"",downloadLink.getPassword());
    }
    if (downloadLink.getComment() != null) {
      addEntry(""String_Node_Str"",downloadLink.getComment());
    }
    if (downloadLink.getFilePackage() != null) {
      addEntry(""String_Node_Str"",downloadLink.getFilePackage().toString());
    }
    if (downloadLink.getDownloadMax() > 0) {
      addEntry(""String_Node_Str"",downloadLink.getDownloadMax() + ""String_Node_Str"");
    }
    if (downloadLink.isAborted()) {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
    if (downloadLink.isAvailabilityChecked()) {
      addEntry(""String_Node_Str"",downloadLink.isAvailable() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
 else {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
    if (downloadLink.getDownloadSpeed() > 0) {
      addEntry(""String_Node_Str"",downloadLink.getDownloadSpeed() / 1024 + ""String_Node_Str"");
    }
    if (downloadLink.getFileOutput() != null) {
      addEntry(""String_Node_Str"",downloadLink.getFileOutput());
    }
    if (downloadLink.getRemainingWaittime() > 0) {
      addEntry(""String_Node_Str"",downloadLink.getRemainingWaittime() + ""String_Node_Str"");
    }
    if (downloadLink.isInProgress()) {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
    if (!downloadLink.isEnabled()) {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
switch (downloadLink.getStatus()) {
case DownloadLink.STATUS_TODO:
      addEntry(""String_Node_Str"",""String_Node_Str"");
    break;
case DownloadLink.STATUS_DONE:
  addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
case DownloadLink.STATUS_ERROR_FILE_ABUSED:
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
case DownloadLink.STATUS_ERROR_FILE_NOT_FOUND:
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
case DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE:
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
case DownloadLink.STATUS_ERROR_UNKNOWN:
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
default :
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"" + downloadLink.getStatus());
break;
}
if (downloadLink.getPlugin().getCurrentStep() != null) {
addEntry(""String_Node_Str"",downloadLink.getPlugin().getInitID() + ""String_Node_Str"" + downloadLink.getPlugin().getCurrentStep().toString());
}
}
 catch (MalformedURLException e) {
e.printStackTrace();
}
}","private void initDialog(){
  try {
    addEntry(""String_Node_Str"",new File(downloadLink.getFileOutput()).getName() + ""String_Node_Str"" + new URL(downloadLink.getUrlDownloadDecrypted()).getHost());
    addEntry(null,null);
    if (downloadLink.getFilePackage() != null && downloadLink.getFilePackage().getPassword() != null) {
      addEntry(""String_Node_Str"",downloadLink.getFilePackage().getPassword());
    }
    if (downloadLink.getFilePackage() != null && downloadLink.getFilePackage().getComment() != null) {
      addEntry(""String_Node_Str"",downloadLink.getFilePackage().getComment());
    }
    if (downloadLink.getFilePackage() != null) {
      addEntry(""String_Node_Str"",downloadLink.getFilePackage().toString());
    }
    if (downloadLink.getDownloadMax() > 0) {
      addEntry(""String_Node_Str"",downloadLink.getDownloadMax() + ""String_Node_Str"");
    }
    if (downloadLink.isAborted()) {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
    if (downloadLink.isAvailabilityChecked()) {
      addEntry(""String_Node_Str"",downloadLink.isAvailable() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
 else {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
    if (downloadLink.getDownloadSpeed() > 0) {
      addEntry(""String_Node_Str"",downloadLink.getDownloadSpeed() / 1024 + ""String_Node_Str"");
    }
    if (downloadLink.getFileOutput() != null) {
      addEntry(""String_Node_Str"",downloadLink.getFileOutput());
    }
    if (downloadLink.getRemainingWaittime() > 0) {
      addEntry(""String_Node_Str"",downloadLink.getRemainingWaittime() + ""String_Node_Str"");
    }
    if (downloadLink.isInProgress()) {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
    if (!downloadLink.isEnabled()) {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      addEntry(""String_Node_Str"",""String_Node_Str"");
    }
switch (downloadLink.getStatus()) {
case DownloadLink.STATUS_TODO:
      addEntry(""String_Node_Str"",""String_Node_Str"");
    break;
case DownloadLink.STATUS_DONE:
  addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
case DownloadLink.STATUS_ERROR_FILE_ABUSED:
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
case DownloadLink.STATUS_ERROR_FILE_NOT_FOUND:
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
case DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE:
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
case DownloadLink.STATUS_ERROR_UNKNOWN:
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"");
break;
default :
addEntry(""String_Node_Str"",downloadLink.getStatusText() + ""String_Node_Str"" + downloadLink.getStatus());
break;
}
if (downloadLink.getPlugin().getCurrentStep() != null) {
addEntry(""String_Node_Str"",downloadLink.getPlugin().getInitID() + ""String_Node_Str"" + downloadLink.getPlugin().getCurrentStep().toString());
}
}
 catch (MalformedURLException e) {
e.printStackTrace();
}
}"
21468,"/** 
 * Sortiert die Linklist
 */
@SuppressWarnings(""String_Node_Str"") public void sortLinkList(){
  Collections.sort(linkList);
}","/** 
 * Sortiert die Linklist
 */
@SuppressWarnings(""String_Node_Str"") public void sortLinkList(){
  Collections.sort(linkList,new Comparator(){
    public int compare(    Object a,    Object b){
      if (a instanceof DownloadLink && b instanceof DownloadLink) {
        if (((DownloadLink)a).extractFileNameFromURL().compareToIgnoreCase(((DownloadLink)b).extractFileNameFromURL()) > 0) {
          return -1;
        }
 else         if (((DownloadLink)a).extractFileNameFromURL().compareToIgnoreCase(((DownloadLink)b).extractFileNameFromURL()) < 0) {
          return 1;
        }
 else {
          return 0;
        }
      }
      return 0;
    }
  }
);
}"
21469,"/** 
 * Zeichnet die Linklist neu
 */
public void fireTableChanged(){
  DefaultListModel tmp=new DefaultListModel();
  list.removeAll();
  for (int i=0; i < linkList.size(); i++) {
    if (!linkList.elementAt(i).isAvailabilityChecked()) {
      tmp.addElement((i + 1) + ""String_Node_Str"" + linkList.elementAt(i).getPlugin().getPluginName()+ ""String_Node_Str""+ linkList.elementAt(i).getFileNameFrom());
    }
 else {
      if (linkList.elementAt(i).isAvailable()) {
        tmp.addElement((i + 1) + ""String_Node_Str"" + linkList.elementAt(i).getPlugin().getPluginName()+ ""String_Node_Str""+ linkList.elementAt(i).getFileInfomationString());
      }
 else {
        tmp.addElement((i + 1) + ""String_Node_Str"" + linkList.elementAt(i).getPlugin().getPluginName()+ ""String_Node_Str""+ linkList.elementAt(i).getFileInfomationString());
      }
    }
  }
  list.setModel(tmp);
}","/** 
 * Zeichnet die Linklist neu
 */
public void fireTableChanged(){
  DefaultListModel tmp=new DefaultListModel();
  list.removeAll();
  for (int i=0; i < linkList.size(); i++) {
    if (!linkList.elementAt(i).isAvailabilityChecked()) {
      tmp.addElement((i + 1) + ""String_Node_Str"" + linkList.elementAt(i).getPlugin().getPluginName()+ ""String_Node_Str""+ linkList.elementAt(i).extractFileNameFromURL());
    }
 else {
      if (linkList.elementAt(i).isAvailable()) {
        tmp.addElement((i + 1) + ""String_Node_Str"" + linkList.elementAt(i).getPlugin().getPluginName()+ ""String_Node_Str""+ linkList.elementAt(i).getFileInfomationString());
      }
 else {
        tmp.addElement((i + 1) + ""String_Node_Str"" + linkList.elementAt(i).getPlugin().getPluginName()+ ""String_Node_Str""+ linkList.elementAt(i).getFileInfomationString());
      }
    }
  }
  list.setModel(tmp);
}"
21470,"/** 
 * Bricht den Watchdog ab. Alle alufenden downloads werden beendet und die downloadliste zurückgesetzt
 */
void abort(){
  this.aborted=true;
  for (int i=0; i < this.activeLinks.size(); i++) {
    activeLinks.get(i).abortDownload();
  }
  this.clearDownloadListStatus();
}","/** 
 * Bricht den Watchdog ab. Alle laufenden downloads werden beendet und die downloadliste zurückgesetzt. Diese Funktion blockiert bis alle Downloads erfolgreich abgeborhcen wurden.
 */
void abort(){
  for (int i=0; i < this.activeLinks.size(); i++) {
    activeLinks.get(i).abortDownload();
  }
  boolean check=true;
  while (true) {
    check=true;
    for (int i=0; i < this.activeLinks.size(); i++) {
      if (activeLinks.get(i).isAlive()) {
        check=false;
        break;
      }
    }
    if (check)     break;
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
  this.aborted=true;
  this.clearDownloadListStatus();
}"
21471,"public boolean isAborted(){
  return aborted;
}","public boolean isAborted(){
  return !isAlive();
}"
21472,"private void stopDownloads(){
  if (watchdog != null) {
    watchdog.abort();
  }
}","private void stopDownloads(){
  if (watchdog != null) {
    setDownloadStatus(DOWNLOAD_TERMINATION_IN_PROGRESS);
    watchdog.abort();
    setDownloadStatus(DOWNLOAD_NOT_RUNNING);
  }
}"
21473,"/** 
 * Startet den Downloadvorgang. Dies eFUnkton sendet das startdownload event und aktiviert die ersten downloads
 */
private void startDownloads(){
  if (!isDownloadRunning()) {
    logger.info(""String_Node_Str"");
    this.watchdog=new DownloadWatchDog(this);
    watchdog.start();
  }
 else {
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED,false));
  }
}","/** 
 * Startet den Downloadvorgang. Dies eFUnkton sendet das startdownload event und aktiviert die ersten downloads
 */
private synchronized void startDownloads(){
  if (getDownloadStatus() == DOWNLOAD_NOT_RUNNING) {
    setDownloadStatus(DOWNLOAD_RUNNING);
    logger.info(""String_Node_Str"");
    this.watchdog=new DownloadWatchDog(this);
    watchdog.start();
  }
}"
21474,"/** 
 * Bricht den Downloadvorgang ab
 */
public void abortDownload(){
  aborted=true;
  if (currentPlugin != null)   currentPlugin.abort();
}","/** 
 * Bricht den Downloadvorgang ab.
 */
public void abortDownload(){
  aborted=true;
  if (currentPlugin != null)   currentPlugin.abort();
}"
21475,"public void run(){
  PluginForHost plugin;
  logger.info(""String_Node_Str"" + downloadLink.getName());
  currentPlugin=plugin=(PluginForHost)downloadLink.getPlugin();
  plugin.resetPlugin();
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(true);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  plugin.init();
  PluginStep step=plugin.doNextStep(downloadLink);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_ACTIVE,plugin));
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_STARTS,downloadLink));
  while (!aborted && step != null && step.getStatus() != PluginStep.STATUS_ERROR) {
    logger.info(""String_Node_Str"" + step);
switch (step.getStep()) {
case PluginStep.STEP_PENDING:
      long wait=(Long)step.getParameter();
    logger.info(""String_Node_Str"" + wait);
  while (wait > 0 && !aborted) {
    downloadLink.setStatusText(""String_Node_Str"" + JDUtilities.formatSeconds((int)(wait / 1000)));
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
    wait-=1000;
  }
break;
case PluginStep.STEP_GET_CAPTCHA_FILE:
downloadLink.setStatusText(""String_Node_Str"");
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
File captcha=null;
if (step.getParameter() != null && step.getParameter() instanceof File) {
captcha=(File)step.getParameter();
}
if (captcha == null) {
logger.severe(""String_Node_Str"");
step.setParameter(""String_Node_Str"");
step.setStatus(PluginStep.STATUS_ERROR);
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
break;
}
 else {
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_CAPTCHA_LOADED,captcha));
downloadLink.setLatestCaptchaFile(captcha);
if (plugin.doBotCheck(captcha)) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_BOT_DETECTED);
step.setStatus(PluginStep.STATUS_ERROR);
step.setParameter(null);
break;
}
if (!Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_CAPTCHA),downloadLink,0)) {
String captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
logger.info(""String_Node_Str"" + captchaText);
downloadLink.setStatusText(""String_Node_Str"" + captchaText);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
 else {
Interaction[] interacts=Interaction.getInteractions(Interaction.INTERACTION_DOWNLOAD_CAPTCHA);
if (interacts.length > 0) {
String captchaText=(String)interacts[0].getProperty(""String_Node_Str"");
if (captchaText == null) {
captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
}
logger.info(""String_Node_Str"" + captchaText);
downloadLink.setStatusText(""String_Node_Str"" + captchaText);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
}
}
break;
}
if (aborted) {
break;
}
if (step != null && downloadLink != null && plugin != null && plugin.nextStep(step) != null) {
downloadLink.setStatusText(plugin.nextStep(step).toString());
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
}
if (step.getStatus() == PluginStep.STATUS_ERROR) {
break;
}
step=plugin.doNextStep(downloadLink);
}
if (aborted) {
downloadLink.setStatusText(""String_Node_Str"");
plugin.abort();
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
downloadLink.setInProgress(false);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
return;
}
if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorWaittime(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_STATIC_WAITTIME && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorStaticWaittime(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorTemporarilyUnavailable(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorCaptchaImage(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_FILE_ABUSED && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorAbused(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_FILE_NOT_FOUND && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorFileNotFound(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_CAPTCHA_WRONG && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorCaptcha(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_BOT_DETECTED && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorBotdetection(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_UNKNOWN_RETRY && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorRetry(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_PREMIUM && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorPremium(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_PREMIUM_LOGIN && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorPremiumLogin(downloadLink,plugin,step);
}
 else if (step != null && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorUnknown(downloadLink,plugin,step);
}
 else {
downloadLink.setStatusText(""String_Node_Str"");
downloadLink.setInProgress(false);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
Interaction.handleInteraction((Interaction.INTERACTION_SINGLE_DOWNLOAD_FINISHED),downloadLink);
}
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED,downloadLink));
}","public void run(){
  PluginForHost plugin;
  logger.info(""String_Node_Str"" + downloadLink.getName());
  currentPlugin=plugin=(PluginForHost)downloadLink.getPlugin();
  plugin.resetPlugin();
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(true);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
  plugin.init();
  PluginStep step=plugin.doNextStep(downloadLink);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_ACTIVE,plugin));
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_STARTS,downloadLink));
  while (!aborted && step != null && step.getStatus() != PluginStep.STATUS_ERROR) {
    logger.info(""String_Node_Str"" + step);
    downloadLink.setStatusText(""String_Node_Str"");
switch (step.getStep()) {
case PluginStep.STEP_PENDING:
      long wait=(Long)step.getParameter();
    logger.info(""String_Node_Str"" + wait);
  while (wait > 0 && !aborted) {
    downloadLink.setStatusText(""String_Node_Str"" + JDUtilities.formatSeconds((int)(wait / 1000)));
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
    wait-=1000;
  }
break;
case PluginStep.STEP_GET_CAPTCHA_FILE:
downloadLink.setStatusText(""String_Node_Str"");
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
File captcha=null;
if (step.getParameter() != null && step.getParameter() instanceof File) {
captcha=(File)step.getParameter();
}
if (captcha == null) {
logger.severe(""String_Node_Str"");
step.setParameter(""String_Node_Str"");
step.setStatus(PluginStep.STATUS_ERROR);
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
break;
}
 else {
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_CAPTCHA_LOADED,captcha));
downloadLink.setLatestCaptchaFile(captcha);
if (plugin.doBotCheck(captcha)) {
downloadLink.setStatus(DownloadLink.STATUS_ERROR_BOT_DETECTED);
step.setStatus(PluginStep.STATUS_ERROR);
step.setParameter(null);
break;
}
if (!Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_CAPTCHA),downloadLink,0)) {
String captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
logger.info(""String_Node_Str"" + captchaText);
downloadLink.setStatusText(""String_Node_Str"" + captchaText);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
 else {
Interaction[] interacts=Interaction.getInteractions(Interaction.INTERACTION_DOWNLOAD_CAPTCHA);
if (interacts.length > 0) {
String captchaText=(String)interacts[0].getProperty(""String_Node_Str"");
if (captchaText == null) {
captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
}
logger.info(""String_Node_Str"" + captchaText);
downloadLink.setStatusText(""String_Node_Str"" + captchaText);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
}
}
break;
}
if (aborted) {
break;
}
if (step != null && downloadLink != null && plugin != null && plugin.nextStep(step) != null) {
downloadLink.setStatusText(plugin.nextStep(step).toString());
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
}
if (step.getStatus() == PluginStep.STATUS_ERROR) {
break;
}
step=plugin.doNextStep(downloadLink);
}
if (aborted) {
downloadLink.setStatusText(""String_Node_Str"");
plugin.abort();
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
downloadLink.setInProgress(false);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
return;
}
if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorWaittime(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_STATIC_WAITTIME && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorStaticWaittime(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_TEMPORARILY_UNAVAILABLE && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorTemporarilyUnavailable(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorCaptchaImage(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_FILE_ABUSED && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorAbused(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_FILE_NOT_FOUND && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorFileNotFound(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_CAPTCHA_WRONG && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorCaptcha(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_BOT_DETECTED && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorBotdetection(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_UNKNOWN_RETRY && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorRetry(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_PREMIUM && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorPremium(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_PREMIUM_LOGIN && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorPremiumLogin(downloadLink,plugin,step);
}
 else if (step != null && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorUnknown(downloadLink,plugin,step);
}
 else {
downloadLink.setStatusText(""String_Node_Str"");
downloadLink.setInProgress(false);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED,downloadLink));
Interaction.handleInteraction((Interaction.INTERACTION_SINGLE_DOWNLOAD_FINISHED),downloadLink);
}
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE,plugin));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_FINISHED,downloadLink));
}"
21476,"public void actionPerformed(ActionEvent e){
  continueInstall=true;
  this.setVisible(false);
}","/** 
 * actionPerformed fÃ¼r die buttons
 * @param e ActionEvent
 */
public void actionPerformed(ActionEvent e){
  aborted=false;
  this.setVisible(false);
}"
21477,"public Installer(){
  super();
  setModal(false);
  setLayout(new GridBagLayout());
  this.setTitle(""String_Node_Str"");
  setLocation(20,20);
  this.setAlwaysOnTop(true);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent event){
      abortInstallation();
    }
  }
);
  pack();
}","/** 
 */
public Installer(){
  super();
  setModal(true);
  setLayout(new GridBagLayout());
  this.setTitle(""String_Node_Str"");
  this.setAlwaysOnTop(true);
  setLocation(20,20);
  lblMessage=new JLabel();
  browseFile=new BrowseFile(50);
  btnOK=new JButton(""String_Node_Str"");
  btnOK.addActionListener(this);
  addWindowListener(this);
  JDUtilities.addToGridBag(this,lblMessage,0,0,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(this,browseFile,0,1,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(this,btnOK,0,2,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
}"
21478,"public void windowClosing(WindowEvent event){
  abortInstallation();
}","public void windowClosing(WindowEvent e){
  abortInstallation();
}"
21479,"/** 
 * Bricht die Installation ab
 */
public void abortInstallation(){
  cancelInstall=true;
  this.setVisible(false);
  clearPanel();
}","/** 
 * Bricht die Installation ab
 */
public void abortInstallation(){
  aborted=true;
  this.setVisible(false);
}"
21480,"/** 
 * @param str
 * @param path
 * @return Fragt einen Ordner beim User ab.  mit str kann man gezielt nach einem ordner fragen
 */
public String getDirectory(String str,File path){
  clearPanel();
  logger.info(""String_Node_Str"");
  continueInstall=false;
  cancelInstall=false;
  JLabel label1=new JLabel(str);
  JDUtilities.addToGridBag(this,label1,0,0,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  panels.add(label1);
  BrowseFile browse1=new BrowseFile(50);
  panels.add(browse1);
  browse1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  browse1.setCurrentPath(path);
  JDUtilities.addToGridBag(this,browse1,0,1,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  JButton button1=new JButton(""String_Node_Str"");
  panels.add(button1);
  button1.addActionListener(this);
  JDUtilities.addToGridBag(this,button1,0,2,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  pack();
  setVisible(true);
  if (waitFor()) {
    return browse1.getText();
  }
  return null;
}","/** 
 * Fragt einen Ordner beim User ab.  mit str kann man gezielt nach einem ordner fragen
 * @param message Die Nachricht, die dem Benutzer gezeigt werden soll
 * @param path Standardpfad
 * @return Dateipfad 
 */
public String getDirectory(String message,File path){
  logger.info(""String_Node_Str"");
  lblMessage.setText(message);
  browseFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  browseFile.setCurrentPath(path);
  pack();
  setVisible(true);
  if (aborted)   return null;
 else   return browseFile.getText();
}"
21481,"/** 
 * Führt ein Webupdate nach der Installation aus und gibt im erfolgsfall true zurück, sonst false
 * @return true/Fasle
 */
public boolean doUpdate(){
  logger.info(""String_Node_Str"");
  clearPanel();
  continueInstall=false;
  cancelInstall=false;
  JLabel label=new JLabel(""String_Node_Str"");
  panels.add(label);
  JDUtilities.addToGridBag(this,label,0,0,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  final JLabel ticker=new JLabel(""String_Node_Str"");
  panels.add(ticker);
  JDUtilities.addToGridBag(this,ticker,0,2,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  pack();
  setVisible(true);
  Thread th=new Thread(){
    public void run(){
      while (true) {
        try {
          Thread.sleep(300);
        }
 catch (        InterruptedException e) {
        }
        if (ticker.getText().equals(""String_Node_Str"")) {
          ticker.setText(""String_Node_Str"");
        }
 else         if (ticker.getText().equals(""String_Node_Str"")) {
          ticker.setText(""String_Node_Str"");
        }
 else         if (ticker.getText().equals(""String_Node_Str"")) {
          ticker.setText(""String_Node_Str"");
        }
      }
    }
  }
;
  th.start();
  WebUpdater updater=new WebUpdater(null);
  updater.run();
  ticker.setText(""String_Node_Str"" + updater.getUpdatedFiles());
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
  }
  this.setVisible(false);
  return true;
}","/** 
 * FÃ¼hrt ein Webupdate nach der Installation aus und gibt im erfolgsfall true zurÃ¼ck, sonst false
 * @return true/Fasle
 */
public boolean doUpdate(){
  logger.info(""String_Node_Str"");
  JLabel label=new JLabel(""String_Node_Str"");
  JDUtilities.addToGridBag(this,label,0,0,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  final JLabel ticker=new JLabel(""String_Node_Str"");
  JDUtilities.addToGridBag(this,ticker,0,2,1,1,0,0,null,GridBagConstraints.CENTER,GridBagConstraints.CENTER);
  pack();
  setVisible(true);
  Thread th=new Thread(){
    public void run(){
      while (true) {
        try {
          Thread.sleep(300);
        }
 catch (        InterruptedException e) {
        }
        if (ticker.getText().equals(""String_Node_Str"")) {
          ticker.setText(""String_Node_Str"");
        }
 else         if (ticker.getText().equals(""String_Node_Str"")) {
          ticker.setText(""String_Node_Str"");
        }
 else         if (ticker.getText().equals(""String_Node_Str"")) {
          ticker.setText(""String_Node_Str"");
        }
      }
    }
  }
;
  th.start();
  WebUpdater updater=new WebUpdater(null);
  updater.run();
  ticker.setText(""String_Node_Str"" + updater.getUpdatedFiles());
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
  }
  this.setVisible(false);
  return true;
}"
21482,"private void go(){
  Logger logger=Plugin.getLogger();
  loadImages();
  File fileInput=null;
  try {
    fileInput=JDUtilities.getResourceFile(JDUtilities.CONFIG_PATH);
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
  }
  logger.finer(""String_Node_Str"" + fileInput + ""String_Node_Str""+ JDUtilities.CONFIG_PATH+ ""String_Node_Str"");
  if (fileInput != null && fileInput.exists()) {
    Object obj=JDUtilities.loadObject(null,fileInput,Configuration.saveAsXML);
    if (obj instanceof Configuration) {
      Configuration configuration=(Configuration)obj;
      JDUtilities.setConfiguration(configuration);
      Plugin.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.FINER));
    }
 else {
      logger.severe(""String_Node_Str"" + obj);
    }
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
  JDUtilities.loadPlugins();
  logger.info(""String_Node_Str"");
  UIInterface uiInterface=new SimpleGUI();
  logger.info(""String_Node_Str"");
  JDController controller=new JDController();
  controller.setUiInterface(uiInterface);
  logger.info(""String_Node_Str"");
  controller.initDownloadLinks();
  logger.info(""String_Node_Str"");
  Iterator<PluginForHost> iteratorHost=JDUtilities.getPluginsForHost().iterator();
  while (iteratorHost.hasNext()) {
    iteratorHost.next().addPluginListener(controller);
  }
  Iterator<PluginForDecrypt> iteratorDecrypt=JDUtilities.getPluginsForDecrypt().iterator();
  while (iteratorDecrypt.hasNext()) {
    iteratorDecrypt.next().addPluginListener(controller);
  }
  Iterator<PluginForSearch> iteratorSearch=JDUtilities.getPluginsForSearch().iterator();
  while (iteratorSearch.hasNext()) {
    iteratorSearch.next().addPluginListener(controller);
  }
  Interaction.handleInteraction(Interaction.INTERACTION_APPSTART,false);
}","private void go(){
  Logger logger=Plugin.getLogger();
  loadImages();
  File fileInput=null;
  try {
    fileInput=JDUtilities.getResourceFile(JDUtilities.CONFIG_PATH);
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
  }
  try {
    logger.finer(""String_Node_Str"" + fileInput + ""String_Node_Str""+ JDUtilities.CONFIG_PATH+ ""String_Node_Str"");
    if (fileInput != null && fileInput.exists()) {
      Object obj=JDUtilities.loadObject(null,fileInput,Configuration.saveAsXML);
      if (obj instanceof Configuration) {
        Configuration configuration=(Configuration)obj;
        JDUtilities.setConfiguration(configuration);
        Plugin.getLogger().setLevel((Level)configuration.getProperty(Configuration.PARAM_LOGGER_LEVEL,Level.FINER));
      }
 else {
        logger.severe(""String_Node_Str"" + obj);
      }
    }
 else {
      logger.warning(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"");
    JDUtilities.getConfiguration().setDefaultValues();
  }
  logger.info(""String_Node_Str"");
  JDUtilities.loadPlugins();
  logger.info(""String_Node_Str"");
  UIInterface uiInterface=new SimpleGUI();
  logger.info(""String_Node_Str"");
  JDController controller=new JDController();
  controller.setUiInterface(uiInterface);
  logger.info(""String_Node_Str"");
  if (!controller.initDownloadLinks()) {
    File links=JDUtilities.getResourceFile(""String_Node_Str"");
    if (links.exists()) {
      File newFile=new File(links.getAbsolutePath() + ""String_Node_Str"");
      newFile.delete();
      links.renameTo(newFile);
      uiInterface.showMessageDialog(""String_Node_Str"" + newFile + ""String_Node_Str"");
    }
  }
  logger.info(""String_Node_Str"");
  Iterator<PluginForHost> iteratorHost=JDUtilities.getPluginsForHost().iterator();
  while (iteratorHost.hasNext()) {
    iteratorHost.next().addPluginListener(controller);
  }
  Iterator<PluginForDecrypt> iteratorDecrypt=JDUtilities.getPluginsForDecrypt().iterator();
  while (iteratorDecrypt.hasNext()) {
    iteratorDecrypt.next().addPluginListener(controller);
  }
  Iterator<PluginForSearch> iteratorSearch=JDUtilities.getPluginsForSearch().iterator();
  while (iteratorSearch.hasNext()) {
    iteratorSearch.next().addPluginListener(controller);
  }
  Interaction.handleInteraction(Interaction.INTERACTION_APPSTART,false);
}"
21483,"/** 
 * Ermittelt über die Plugins alle Passenden Linksund gibt diese in einem Vector zurück
 * @return link-Vector
 */
public Vector<DownloadLink> findLinks(){
  Vector<DownloadLink> links=new Vector<DownloadLink>();
  Vector<String> cryptedLinks=new Vector<String>();
  Vector<String> decryptedLinks=new Vector<String>();
  PluginForDecrypt pDecrypt;
  PluginForHost pHost;
  PluginForSearch pSearch;
  for (int i=0; i < pluginsForSearch.size(); i++) {
    pSearch=pluginsForSearch.get(i);
    if (pSearch.canHandle(data)) {
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_SEARCH_ACTIVE,pSearch));
      decryptedLinks.addAll(pSearch.findLinks(data));
      data=pSearch.cutMatches(data);
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_SEARCH_INACTIVE,pSearch));
    }
  }
  data=Plugin.getHttpLinkList(data);
  logger.info(""String_Node_Str"" + data);
  for (int i=0; i < pluginsForDecrypt.size(); i++) {
    pDecrypt=pluginsForDecrypt.get(i);
    if (pDecrypt.isClipboardEnabled() && pDecrypt.canHandle(data)) {
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_DECRYPT_ACTIVE,pDecrypt));
      cryptedLinks.addAll(pDecrypt.getDycryptableLinks(data));
      data=pDecrypt.cutMatches(data);
      decryptedLinks.addAll(pDecrypt.decryptLinks(cryptedLinks));
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_DECRYPT_INACTIVE,pDecrypt));
    }
  }
  boolean moreToDo;
  do {
    moreToDo=false;
    for (int i=0; i < pluginsForDecrypt.size(); i++) {
      pDecrypt=pluginsForDecrypt.get(i);
      Iterator<String> iterator=decryptedLinks.iterator();
      while (iterator.hasNext()) {
        String data=iterator.next();
        if (pDecrypt.isClipboardEnabled() && pDecrypt.canHandle(data)) {
          moreToDo=true;
          fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_DECRYPT_ACTIVE,pDecrypt));
          iterator.remove();
          decryptedLinks.addAll(pDecrypt.decryptLink(data));
          iterator=decryptedLinks.iterator();
          fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_DECRYPT_INACTIVE,pDecrypt));
        }
      }
    }
  }
 while (moreToDo);
  for (int i=0; i < pluginsForHost.size(); i++) {
    pHost=pluginsForHost.get(i);
    if (pHost.isClipboardEnabled() && pHost.canHandle(data)) {
      links.addAll(pHost.getDownloadLinks(data));
      data=pHost.cutMatches(data);
    }
  }
  Iterator<String> iterator=decryptedLinks.iterator();
  while (iterator.hasNext()) {
    String decrypted=iterator.next();
    logger.info(""String_Node_Str"" + decrypted);
    for (int i=0; i < pluginsForHost.size(); i++) {
      pHost=pluginsForHost.get(i);
      if (pHost.isClipboardEnabled() && pHost.canHandle(decrypted)) {
        links.addAll(pHost.getDownloadLinks(decrypted));
        iterator.remove();
      }
    }
  }
  logger.info(""String_Node_Str"" + links);
  return links;
}","/** 
 * Ermittelt über die Plugins alle Passenden Linksund gibt diese in einem Vector zurück
 * @return link-Vector
 */
public Vector<DownloadLink> findLinks(){
  Vector<DownloadLink> links=new Vector<DownloadLink>();
  Vector<String> cryptedLinks=new Vector<String>();
  Vector<String> decryptedLinks=new Vector<String>();
  PluginForDecrypt pDecrypt;
  PluginForHost pHost;
  PluginForSearch pSearch;
  for (int i=0; i < pluginsForSearch.size(); i++) {
    pSearch=pluginsForSearch.get(i);
    if (pSearch.canHandle(data)) {
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_SEARCH_ACTIVE,pSearch));
      decryptedLinks.addAll(pSearch.findLinks(data));
      data=pSearch.cutMatches(data);
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_SEARCH_INACTIVE,pSearch));
    }
  }
  data=Plugin.getHttpLinkList(data);
  for (int i=0; i < pluginsForDecrypt.size(); i++) {
    pDecrypt=pluginsForDecrypt.get(i);
    if (pDecrypt.isClipboardEnabled() && pDecrypt.canHandle(data)) {
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_DECRYPT_ACTIVE,pDecrypt));
      cryptedLinks.addAll(pDecrypt.getDycryptableLinks(data));
      data=pDecrypt.cutMatches(data);
      decryptedLinks.addAll(pDecrypt.decryptLinks(cryptedLinks));
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_DECRYPT_INACTIVE,pDecrypt));
    }
  }
  boolean moreToDo;
  do {
    moreToDo=false;
    for (int i=0; i < pluginsForDecrypt.size(); i++) {
      pDecrypt=pluginsForDecrypt.get(i);
      Iterator<String> iterator=decryptedLinks.iterator();
      while (iterator.hasNext()) {
        String data=iterator.next();
        if (pDecrypt.isClipboardEnabled() && pDecrypt.canHandle(data)) {
          moreToDo=true;
          fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_DECRYPT_ACTIVE,pDecrypt));
          iterator.remove();
          decryptedLinks.addAll(pDecrypt.decryptLink(data));
          iterator=decryptedLinks.iterator();
          fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_DECRYPT_INACTIVE,pDecrypt));
        }
      }
    }
  }
 while (moreToDo);
  for (int i=0; i < pluginsForHost.size(); i++) {
    pHost=pluginsForHost.get(i);
    if (pHost.isClipboardEnabled() && pHost.canHandle(data)) {
      links.addAll(pHost.getDownloadLinks(data));
      data=pHost.cutMatches(data);
    }
  }
  Iterator<String> iterator=decryptedLinks.iterator();
  while (iterator.hasNext()) {
    String decrypted=iterator.next();
    for (int i=0; i < pluginsForHost.size(); i++) {
      pHost=pluginsForHost.get(i);
      if (pHost.isClipboardEnabled() && pHost.canHandle(decrypted)) {
        links.addAll(pHost.getDownloadLinks(decrypted));
        iterator.remove();
      }
    }
  }
  return links;
}"
21484,"/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabDownloadTable=new TabDownloadLinks(this);
  tabPluginActivity=new TabPluginActivity();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(new JScrollPane(tabPluginActivity));
  splitpane.setTopComponent(new JScrollPane(tabDownloadTable));
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  JButton btnAdd=new JButton(actionAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  JButton btnConfig=new JButton(this.actionConfig);
  btnConfig.setFocusPainted(false);
  btnConfig.setBorderPainted(false);
  btnConfig.setText(null);
  JButton btnReconnect=new JButton(this.actionReconnect);
  btnReconnect.setFocusPainted(false);
  btnReconnect.setBorderPainted(false);
  btnReconnect.setText(null);
  JButton btnUpdate=new JButton(this.actionUpdate);
  btnUpdate.setFocusPainted(false);
  btnUpdate.setBorderPainted(false);
  btnUpdate.setText(null);
  JButton btnSave=new JButton(this.actionSaveLinks);
  btnSave.setFocusPainted(false);
  btnSave.setBorderPainted(false);
  btnSave.setText(null);
  JButton btnLoad=new JButton(this.actionLoadLinks);
  btnLoad.setFocusPainted(false);
  btnLoad.setBorderPainted(false);
  btnLoad.setText(null);
  JButton btnLog=new JButton(this.actionLog);
  btnLog.setFocusPainted(false);
  btnLog.setBorderPainted(false);
  btnLog.setText(null);
  JButton btnDnD=new JButton(this.actionDnD);
  btnDnD.setFocusPainted(false);
  btnDnD.setBorderPainted(false);
  btnDnD.setText(null);
  JButton btnSearch=new JButton(this.actionSearch);
  btnSearch.setFocusPainted(false);
  btnSearch.setBorderPainted(false);
  btnSearch.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnLoad);
  toolBar.add(btnSave);
  toolBar.addSeparator();
  toolBar.add(btnStartStop);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  toolBar.add(btnSearch);
  toolBar.addSeparator();
  toolBar.add(btnUpdate);
  toolBar.addSeparator();
  toolBar.add(btnConfig);
  toolBar.add(btnLog);
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(btnDnD);
  reconnectBox=new JCheckBox(""String_Node_Str"");
  reconnectBox.setSelected(true);
  reconnectBox.addActionListener(this);
  toolBar.add(reconnectBox);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,splitpane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}","/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabDownloadTable=new TabDownloadLinks(this);
  tabPluginActivity=new TabPluginActivity();
  statusBar=new StatusBar();
  splitpane=new JSplitPane();
  splitpane.setBottomComponent(tabPluginActivity);
  splitpane.setTopComponent(tabDownloadTable);
  splitpane.setOrientation(JSplitPane.VERTICAL_SPLIT);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  JButton btnAdd=new JButton(actionAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  JButton btnConfig=new JButton(this.actionConfig);
  btnConfig.setFocusPainted(false);
  btnConfig.setBorderPainted(false);
  btnConfig.setText(null);
  JButton btnReconnect=new JButton(this.actionReconnect);
  btnReconnect.setFocusPainted(false);
  btnReconnect.setBorderPainted(false);
  btnReconnect.setText(null);
  JButton btnUpdate=new JButton(this.actionUpdate);
  btnUpdate.setFocusPainted(false);
  btnUpdate.setBorderPainted(false);
  btnUpdate.setText(null);
  JButton btnSave=new JButton(this.actionSaveLinks);
  btnSave.setFocusPainted(false);
  btnSave.setBorderPainted(false);
  btnSave.setText(null);
  JButton btnLoad=new JButton(this.actionLoadLinks);
  btnLoad.setFocusPainted(false);
  btnLoad.setBorderPainted(false);
  btnLoad.setText(null);
  JButton btnLog=new JButton(this.actionLog);
  btnLog.setFocusPainted(false);
  btnLog.setBorderPainted(false);
  btnLog.setText(null);
  JButton btnDnD=new JButton(this.actionDnD);
  btnDnD.setFocusPainted(false);
  btnDnD.setBorderPainted(false);
  btnDnD.setText(null);
  JButton btnSearch=new JButton(this.actionSearch);
  btnSearch.setFocusPainted(false);
  btnSearch.setBorderPainted(false);
  btnSearch.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnLoad);
  toolBar.add(btnSave);
  toolBar.addSeparator();
  toolBar.add(btnStartStop);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  toolBar.add(btnSearch);
  toolBar.addSeparator();
  toolBar.add(btnUpdate);
  toolBar.addSeparator();
  toolBar.add(btnConfig);
  toolBar.add(btnLog);
  toolBar.addSeparator();
  toolBar.add(btnReconnect);
  toolBar.add(btnDnD);
  reconnectBox=new JCheckBox(""String_Node_Str"");
  reconnectBox.setSelected(true);
  reconnectBox.addActionListener(this);
  toolBar.add(reconnectBox);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,splitpane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(frame,logger);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
}"
21485,"/** 
 * Lädt eine LinkListe
 * @param file Die Datei, aus der die Links gelesen werden
 * @return Ein neuer Vector mit den DownloadLinks
 */
public Vector<DownloadLink> loadDownloadLinks(File file){
  if (file.exists()) {
    Object obj=JDUtilities.loadObject(null,file,false);
    if (obj != null && obj instanceof Vector) {
      return (Vector<DownloadLink>)obj;
    }
  }
  return new Vector<DownloadLink>();
}","/** 
 * Lädt eine LinkListe
 * @param file Die Datei, aus der die Links gelesen werden
 * @return Ein neuer Vector mit den DownloadLinks
 */
public Vector<DownloadLink> loadDownloadLinks(File file){
  if (file.exists()) {
    Object obj=JDUtilities.loadObject(null,file,false);
    if (obj != null && obj instanceof Vector) {
      Vector<DownloadLink> links=(Vector<DownloadLink>)obj;
      Iterator<DownloadLink> iterator=links.iterator();
      DownloadLink localLink;
      PluginForHost pluginForHost;
      while (iterator.hasNext()) {
        localLink=iterator.next();
        pluginForHost=JDUtilities.getPluginForHost(localLink.getHost());
        if (pluginForHost != null) {
          localLink.setPlugin(pluginForHost);
        }
 else {
          logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
        }
      }
      return links;
    }
  }
  return new Vector<DownloadLink>();
}"
21486,"private double scanIntersection(int xx,int yy,int left,int top,int tmpIntersectionWidth,int tmpIntersectionHeight){
  double tmpError;
  pixelAll=0;
  tmpPixelBButNotA=0;
  tmpPixelAButNotB=0;
  tmpPixelBoth=0;
  tmpCoverageFaktorA=0;
  tmpCoverageFaktorB=0;
  bothElements.removeAllElements();
  elementGrid=new int[tmpIntersectionWidth][tmpIntersectionHeight];
  for (int x=0; x < tmpIntersectionWidth; x++) {
    for (int y=0; y < tmpIntersectionHeight; y++) {
      int pixelType=getPixelType(x,y,xx,yy,left,top);
      pixelAll++;
switch (pixelType) {
case 0:
        if (isCreateIntersectionLetter())         intersectionGrid[x][y]=BOTHCOLOR;
      getElement(x,y,xx,yy,left,top,pixelType,elementGrid,element=new Vector<Integer>());
    if (element.size() > minCleftSize)     bothElements.add(element);
  tmpPixelBoth++;
break;
case 1:
if (hasNeighbour(x,y,xx,yy,left,top,pixelType) > overlayNoiseSize) {
tmpPixelBButNotA++;
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=BNACOLOR;
}
 else {
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=BNAFILTEREDCOLOR;
}
break;
case 2:
if (hasNeighbour(x,y,xx,yy,left,top,pixelType) > overlayNoiseSize) {
tmpPixelAButNotB++;
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=ANBCOLOR;
}
 else {
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=ANBFILTEREDCOLOR;
}
break;
default :
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=0xffffff;
}
}
}
if (pixelAll > 0 && bothElements.size() > 0) {
tmpErrorA=(double)tmpPixelAButNotB / (double)(tmpPixelBoth + tmpPixelAButNotB);
tmpErrorB=(double)tmpPixelBButNotA / (double)(tmpPixelBButNotA + tmpPixelBoth);
tmpErrorTotal=tmpErrorA * errorAWeight + tmpErrorB * errorbWeight;
tmpCoverageFaktorA=1.0 - ((double)tmpPixelBoth / (double)a.getElementPixel());
tmpCoverageFaktorA=1.0 - ((double)tmpPixelBoth / (double)b.getElementPixel());
localHeightPercent=(double)tmpIntersectionHeight / a.getHeight();
localWidthPercent=(double)tmpIntersectionWidth / a.getWidth();
heightFaktor=Math.pow(1.0 - localHeightPercent,2);
widthFaktor=Math.pow(1.0 - localWidthPercent,2);
tmpError=tmpErrorTotal;
tmpError+=Math.min(1.0,tmpCoverageFaktorA * coverageFaktorAWeight);
tmpError+=Math.min(1.0,tmpCoverageFaktorA * coverageFaktorBWeight);
tmpError+=Math.min(1.0,heightFaktor * intersectionDimensionWeight);
tmpError+=Math.min(1.0,widthFaktor * intersectionDimensionWeight);
tmpError+=(bothElements.size() - 1) * cleftFaktor;
tmpError/=6.0;
tmpError=Math.min(1.0,tmpError);
if ((tmpPixelBoth * 8) < (tmpIntersectionHeight * tmpIntersectionWidth)) {
tmpError=tmpErrorA=tmpErrorB=tmpErrorTotal=1.0;
}
return 100.0 * tmpError;
}
 else {
return 100.0;
}
}","private double scanIntersection(int xx,int yy,int left,int top,int tmpIntersectionWidth,int tmpIntersectionHeight){
  double tmpError;
  pixelAll=0;
  tmpPixelBButNotA=0;
  tmpPixelAButNotB=0;
  tmpPixelBoth=0;
  tmpCoverageFaktorA=0;
  tmpCoverageFaktorB=0;
  bothElements.removeAllElements();
  elementGrid=new int[tmpIntersectionWidth][tmpIntersectionHeight];
  for (int x=0; x < tmpIntersectionWidth; x++) {
    for (int y=0; y < tmpIntersectionHeight; y++) {
      int pixelType=getPixelType(x,y,xx,yy,left,top);
      pixelAll++;
switch (pixelType) {
case 0:
        if (isCreateIntersectionLetter())         intersectionGrid[x][y]=BOTHCOLOR;
      getElement(x,y,xx,yy,left,top,pixelType,elementGrid,element=new Vector<Integer>());
    if (element.size() > minCleftSize)     bothElements.add(element);
  tmpPixelBoth++;
break;
case 1:
if (hasNeighbour(x,y,xx,yy,left,top,pixelType) > overlayNoiseSize) {
tmpPixelBButNotA++;
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=BNACOLOR;
}
 else {
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=BNAFILTEREDCOLOR;
}
break;
case 2:
if (hasNeighbour(x,y,xx,yy,left,top,pixelType) > overlayNoiseSize) {
tmpPixelAButNotB++;
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=ANBCOLOR;
}
 else {
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=ANBFILTEREDCOLOR;
}
break;
default :
if (isCreateIntersectionLetter()) intersectionGrid[x][y]=0xffffff;
}
}
}
if (pixelAll > 0 && bothElements.size() > 0) {
tmpErrorA=(double)tmpPixelAButNotB / (double)(tmpPixelBoth + tmpPixelAButNotB);
tmpErrorB=(double)tmpPixelBButNotA / (double)(tmpPixelBButNotA + tmpPixelBoth);
tmpErrorTotal=tmpErrorA * errorAWeight + tmpErrorB * errorbWeight;
tmpCoverageFaktorA=1.0 - ((double)tmpPixelBoth / (double)a.getElementPixel());
tmpCoverageFaktorB=1.0 - ((double)tmpPixelBoth / (double)b.getElementPixel());
localHeightPercent=(double)tmpIntersectionHeight / (double)b.getHeight();
localWidthPercent=(double)tmpIntersectionWidth / (double)b.getWidth();
tmpHeightFaktor=Math.pow(1.0 - localHeightPercent,2);
tmpWidthFaktor=Math.pow(1.0 - localWidthPercent,2);
tmpError=tmpErrorTotal;
tmpError+=Math.min(1.0,tmpCoverageFaktorA * coverageFaktorAWeight);
tmpError+=Math.min(1.0,tmpCoverageFaktorB * coverageFaktorBWeight);
tmpError+=Math.min(1.0,tmpHeightFaktor * intersectionDimensionWeight);
tmpError+=Math.min(1.0,tmpWidthFaktor * intersectionDimensionWeight);
tmpError+=(bothElements.size() - 1) * cleftFaktor;
tmpError/=6.0;
tmpError=Math.min(1.0,tmpError);
if ((tmpPixelBoth * 8) < (tmpIntersectionHeight * tmpIntersectionWidth)) {
tmpError=tmpErrorA=tmpErrorB=tmpErrorTotal=1.0;
}
return 100.0 * tmpError;
}
 else {
return 100.0;
}
}"
21487,"private double scanPreIntersection(int xx,int yy,int left,int top,int tmpIntersectionWidth,int tmpIntersectionHeight){
  double tmpError;
  int yStep=tmpIntersectionHeight / (preScanFaktor + 1);
  tmpPixelBoth=0;
  tmpPixelBButNotA=0;
  tmpPixelAButNotB=0;
  pixelAll=0;
  for (int y=yStep; y <= tmpIntersectionHeight - yStep; y+=yStep) {
    for (int x=0; x < tmpIntersectionWidth; x++) {
      pixelAll++;
      int pixelType=getPixelType(x,y,xx,yy,left,top);
switch (pixelType) {
case 0:
        tmpPixelBoth++;
      break;
case 1:
    tmpPixelBButNotA++;
  break;
case 2:
tmpPixelAButNotB++;
break;
}
}
}
if (pixelAll > 0) {
tmpErrorA=(double)tmpPixelAButNotB / (double)(tmpPixelBoth + tmpPixelAButNotB);
tmpErrorB=(double)tmpPixelBButNotA / (double)(tmpPixelBButNotA + tmpPixelBoth);
tmpErrorTotal=tmpErrorA * errorAWeight + tmpErrorB * errorbWeight;
localHeightPercent=(double)tmpIntersectionHeight / a.getHeight();
localWidthPercent=(double)tmpIntersectionWidth / a.getWidth();
heightFaktor=Math.min(1.0,Math.pow(1.0 - localHeightPercent,2) * intersectionDimensionWeight);
widthFaktor=Math.min(1.0,Math.pow(1.0 - localWidthPercent,2) * intersectionDimensionWeight);
tmpError=tmpErrorTotal;
tmpError+=heightFaktor;
tmpError+=widthFaktor;
tmpError/=4.0;
tmpError*=1.2;
tmpError=Math.min(1.0,tmpError);
return (int)(100 * tmpError);
}
 else {
return 100;
}
}","private double scanPreIntersection(int xx,int yy,int left,int top,int tmpIntersectionWidth,int tmpIntersectionHeight){
  double tmpError;
  int yStep=tmpIntersectionHeight / (preScanFaktor + 1);
  tmpPixelBoth=0;
  tmpPixelBButNotA=0;
  tmpPixelAButNotB=0;
  pixelAll=0;
  for (int y=yStep; y <= tmpIntersectionHeight - yStep; y+=yStep) {
    for (int x=0; x < tmpIntersectionWidth; x++) {
      pixelAll++;
      int pixelType=getPixelType(x,y,xx,yy,left,top);
switch (pixelType) {
case 0:
        tmpPixelBoth++;
      break;
case 1:
    tmpPixelBButNotA++;
  break;
case 2:
tmpPixelAButNotB++;
break;
}
}
}
if (pixelAll > 0) {
tmpErrorA=(double)tmpPixelAButNotB / (double)(tmpPixelBoth + tmpPixelAButNotB);
tmpErrorB=(double)tmpPixelBButNotA / (double)(tmpPixelBButNotA + tmpPixelBoth);
tmpErrorTotal=tmpErrorA * errorAWeight + tmpErrorB * errorbWeight;
localHeightPercent=(double)tmpIntersectionHeight / (double)b.getHeight();
localWidthPercent=(double)tmpIntersectionWidth / (double)b.getWidth();
tmpHeightFaktor=Math.pow(1.0 - localHeightPercent,2);
tmpWidthFaktor=Math.pow(1.0 - localWidthPercent,2);
tmpError=tmpErrorTotal;
tmpError+=Math.min(1.0,tmpHeightFaktor * intersectionDimensionWeight);
tmpError+=Math.min(1.0,tmpWidthFaktor * intersectionDimensionWeight);
tmpError/=4.0;
tmpError*=1.2;
tmpError=Math.min(1.0,tmpError);
return (int)(100 * tmpError);
}
 else {
return 100;
}
}"
21488,"public void actionPerformed(ActionEvent e){
  if (e.getSource() == this.btnOk) {
    if (linkList.size() == 0) {
      this.setVisible(false);
      return;
    }
    FilePackage fp=new FilePackage();
    fp.setComment(txfComment.getText().trim());
    fp.setPassword(txfPassword.getText().trim());
    fp.setDownloadDirectory(bfSubFolder.getText().trim());
    for (int i=0; i < linkList.size(); i++) {
      linkList.elementAt(i).setFilePackage(fp);
    }
    File file=new File(JDUtilities.getConfiguration().getDownloadDirectory());
    if (bfSubFolder.getText().trim().length() > 0) {
      file=new File(new File(bfSubFolder.getText().trim()),linkList.elementAt(0).getFileName() + ""String_Node_Str"");
    }
 else {
      file=new File(file,linkList.elementAt(0).getFileName() + ""String_Node_Str"");
    }
    logger.info(file.getAbsolutePath());
    JDUtilities.writeLocalFile(file,fp.getComment() + ""String_Node_Str"" + fp.getDownloadDirectory()+ ""String_Node_Str""+ fp.getPassword());
    parent.fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_GRABBED,linkList));
    this.setVisible(false);
    parent.setDropTargetText(""String_Node_Str"" + linkList.size());
  }
  if (e.getSource() == this.btnRemove) {
    removeSelectedLinks();
  }
  if (e.getSource() == this.btnCancel) {
    this.setVisible(false);
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == this.btnOk) {
    if (linkList.size() == 0) {
      this.setVisible(false);
      return;
    }
    Color c=new Color((int)(Math.random() * 0xffffff));
    c=c.brighter();
    FilePackage fp=new FilePackage();
    fp.setProperty(""String_Node_Str"",c);
    fp.setComment(txfComment.getText().trim());
    fp.setPassword(txfPassword.getText().trim());
    fp.setDownloadDirectory(bfSubFolder.getText().trim());
    for (int i=0; i < linkList.size(); i++) {
      linkList.elementAt(i).setFilePackage(fp);
    }
    File file=new File(JDUtilities.getConfiguration().getDownloadDirectory());
    if (bfSubFolder.getText().trim().length() > 0) {
      file=new File(new File(bfSubFolder.getText().trim()),linkList.elementAt(0).getFileName() + ""String_Node_Str"");
    }
 else {
      file=new File(file,linkList.elementAt(0).getFileName() + ""String_Node_Str"");
    }
    logger.info(file.getAbsolutePath());
    JDUtilities.writeLocalFile(file,fp.getComment() + ""String_Node_Str"" + fp.getDownloadDirectory()+ ""String_Node_Str""+ fp.getPassword());
    parent.fireUIEvent(new UIEvent(this,UIEvent.UI_LINKS_GRABBED,linkList));
    this.setVisible(false);
    parent.setDropTargetText(""String_Node_Str"" + linkList.size());
  }
  if (e.getSource() == this.btnRemove) {
    removeSelectedLinks();
  }
  if (e.getSource() == this.btnCancel) {
    this.setVisible(false);
  }
}"
21489,"/** 
 * Delligiert die Pluginevents weiter an das host/decryptpanel. CHangedEvents werden abgefangen und im sekundeninterval weitergegeben.
 */
public void deligatedPluginEvent(PluginEvent event){
  if (event.getSource() instanceof PluginForHost && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.hostPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForDecrypt && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.decryptPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForHost) {
    tabDownloadTable.pluginEvent(event);
    return;
  }
  if (event.getSource() instanceof PluginForDecrypt) {
    splitpane.setDividerLocation(0.8);
    tabPluginActivity.pluginEvent(event);
    return;
  }
}","/** 
 * Delligiert die Pluginevents weiter an das host/decryptpanel. CHangedEvents werden abgefangen und im sekundeninterval weitergegeben.
 */
public void deligatedPluginEvent(PluginEvent event){
  if (event.getSource() instanceof PluginForHost && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.hostPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForDecrypt && event.getEventID() == PluginEvent.PLUGIN_DATA_CHANGED) {
    this.decryptPluginDataChanged=event;
    return;
  }
  if (event.getSource() instanceof PluginForHost) {
    tabDownloadTable.pluginEvent(event);
    return;
  }
  if (event.getSource() instanceof PluginForDecrypt) {
    logger.info(""String_Node_Str"");
    tabPluginActivity.pluginEvent(event);
    splitpane.setDividerLocation(0.8);
    return;
  }
}"
21490,"public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (value instanceof JProgressBar)   return (JProgressBar)value;
  Component c=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  if (!isSelected) {
    DownloadLink dLink=allLinks.get(row);
    if (!dLink.isEnabled()) {
      c.setBackground(COLOR_DISABLED);
    }
 else     if (dLink.getRemainingWaittime() > 0) {
      c.setBackground(COLOR_WAIT);
    }
 else     if (dLink.getStatus() == DownloadLink.STATUS_DONE) {
      c.setBackground(COLOR_DONE);
    }
 else     if (dLink.getStatus() != DownloadLink.STATUS_TODO && dLink.getStatus() != DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT && dLink.getStatus() != DownloadLink.STATUS_DOWNLOAD_IN_PROGRESS) {
      c.setBackground(COLOR_ERROR);
    }
 else     c.setBackground(Color.WHITE);
  }
  return c;
}","public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (value instanceof JProgressBar)   return (JProgressBar)value;
  Component c=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  if (!isSelected) {
    DownloadLink dLink=allLinks.get(row);
    if (!dLink.isEnabled()) {
      c.setBackground(COLOR_DISABLED);
    }
 else     if (dLink.getRemainingWaittime() > 0) {
      c.setBackground(COLOR_WAIT);
    }
 else     if (dLink.getStatus() == DownloadLink.STATUS_DONE) {
      c.setBackground(COLOR_DONE);
    }
 else     if (dLink.getStatus() != DownloadLink.STATUS_TODO && dLink.getStatus() != DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT && dLink.getStatus() != DownloadLink.STATUS_DOWNLOAD_IN_PROGRESS) {
      c.setBackground(COLOR_ERROR);
    }
 else {
      c.setBackground(Color.WHITE);
    }
    if (column == 0) {
      c.setBackground((Color)dLink.getFilePackage().getProperty(""String_Node_Str""));
    }
  }
  return c;
}"
21491,"/** 
 * Führt einen befehl aus und wartet nicht! bis dieser abgearbeitet wurde
 * @param command
 * @throws IOException
 */
public static void runCommand(String command) throws IOException {
  if (command == null) {
    return;
  }
  Runtime rt=Runtime.getRuntime();
  rt.exec(command,null,new File(command.split(""String_Node_Str"")[0]).getParentFile());
}","/** 
 * Führt einen befehl aus und wartet nicht! bis dieser abgearbeitet wurde
 * @param command
 * @throws IOException
 */
public static void runCommand(String command) throws IOException {
  if (command == null) {
    return;
  }
  try {
    Runtime rt=Runtime.getRuntime();
    rt.exec(command,null,new File(command.split(""String_Node_Str"")[0]).getParentFile());
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"" + e.getMessage());
  }
}"
21492,"/** 
 * Führt einen Befehl aus, wartet bis dieser abgearbeitet wurde und gibt dessen rückgabe als String zurück
 * @param command
 * @return
 * @throws IOException
 */
public static String runCommandWaitAndReturn(String command) throws IOException {
  String ret=""String_Node_Str"";
  Runtime rt=Runtime.getRuntime();
  Process pr=rt.exec(command,null,new File(command.split(""String_Node_Str"")[0]).getParentFile());
  BufferedReader br=new BufferedReader(new InputStreamReader(pr.getInputStream()));
  String line;
  while ((line=br.readLine()) != null) {
    ret+=line;
  }
  return ret;
}","/** 
 * Führt einen Befehl aus, wartet bis dieser abgearbeitet wurde und gibt dessen rückgabe als String zurück
 * @param command
 * @return
 * @throws IOException
 */
public static String runCommandWaitAndReturn(String command) throws IOException {
  String ret=""String_Node_Str"";
  try {
    Runtime rt=Runtime.getRuntime();
    Process pr=rt.exec(command,null,new File(command.split(""String_Node_Str"")[0]).getParentFile());
    BufferedReader br=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=br.readLine()) != null) {
      ret+=line;
    }
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"" + e.getMessage());
    return null;
  }
  return ret;
}"
21493,"/** 
 * Führt einen Shell befehl aus und wartet bis dieser abgearbeitet ist
 * @param command
 * @throws IOException
 */
public static void runCommandAndWait(String command) throws IOException {
  Runtime rt=Runtime.getRuntime();
  Process pr=rt.exec(command,null,new File(command.split(""String_Node_Str"")[0]).getParentFile());
  BufferedReader br=new BufferedReader(new InputStreamReader(pr.getInputStream()));
  while ((br.readLine()) != null) {
  }
}","/** 
 * Führt einen Shell befehl aus und wartet bis dieser abgearbeitet ist
 * @param command
 * @throws IOException
 */
public static void runCommandAndWait(String command) throws IOException {
  try {
    Runtime rt=Runtime.getRuntime();
    Process pr=rt.exec(command,null,new File(command.split(""String_Node_Str"")[0]).getParentFile());
    BufferedReader br=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    while ((br.readLine()) != null) {
    }
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"" + e.getMessage());
  }
}"
21494,"private void onErrorAbused(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  downloadLink.setInProgress(false);
}","private void onErrorAbused(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(false);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
}"
21495,"private void onErrorCaptchaImage(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  downloadLink.setInProgress(false);
}","private void onErrorCaptchaImage(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(false);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
}"
21496,"private void onErrorFileNotFound(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  downloadLink.setInProgress(false);
}","private void onErrorFileNotFound(DownloadLink downloadLink,PluginForHost plugin,PluginStep step){
  downloadLink.setStatusText(""String_Node_Str"");
  downloadLink.setInProgress(false);
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
}"
21497,"public void run(){
  DownloadLink downloadLink;
  PluginForHost plugin;
  while ((downloadLink=controller.getNextDownloadLink()) != null) {
    logger.info(""String_Node_Str"" + downloadLink.getName());
    currentPlugin=plugin=(PluginForHost)downloadLink.getPlugin();
    plugin.resetPlugin();
    downloadLink.setStatusText(""String_Node_Str"");
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
    plugin.init();
    PluginStep step=plugin.doNextStep(downloadLink);
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_ACTIVE));
    while (!aborted && step != null && step.getStatus() != PluginStep.STATUS_ERROR) {
      logger.info(""String_Node_Str"" + step);
switch (step.getStep()) {
case PluginStep.STEP_GET_CAPTCHA_FILE:
        downloadLink.setStatusText(""String_Node_Str"");
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
    File captcha=null;
  if (step.getParameter() != null && step.getParameter() instanceof File) {
    captcha=(File)step.getParameter();
  }
if (captcha == null) {
  logger.severe(""String_Node_Str"");
  step.setParameter(""String_Node_Str"");
  step.setStatus(PluginStep.STATUS_ERROR);
  downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
  break;
}
 else {
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_CAPTCHA_LOADED,captcha));
  downloadLink.setLatestCaptchaFile(captcha);
  if (plugin.doBotCheck(captcha)) {
    downloadLink.setStatus(DownloadLink.STATUS_ERROR_BOT_DETECTED);
    step.setStatus(PluginStep.STATUS_ERROR);
    step.setParameter(null);
    break;
  }
  if (!Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_CAPTCHA),downloadLink,0)) {
    String captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
    logger.info(""String_Node_Str"" + captchaText);
    downloadLink.setStatusText(""String_Node_Str"" + captchaText);
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
    step.setParameter(captchaText);
    step.setStatus(PluginStep.STATUS_DONE);
  }
 else {
    Interaction[] interacts=Interaction.getInteractions(Interaction.INTERACTION_DOWNLOAD_CAPTCHA);
    if (interacts.length > 0) {
      String captchaText=(String)interacts[0].getProperty(""String_Node_Str"");
      if (captchaText == null) {
        captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
      }
      logger.info(""String_Node_Str"" + captchaText);
      downloadLink.setStatusText(""String_Node_Str"" + captchaText);
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
      step.setParameter(captchaText);
      step.setStatus(PluginStep.STATUS_DONE);
    }
  }
}
break;
}
if (step != null && downloadLink != null && plugin != null && plugin.nextStep(step) != null) {
downloadLink.setStatusText(plugin.nextStep(step).toString());
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
}
if (step.getStatus() == PluginStep.STATUS_ERROR) {
break;
}
step=plugin.doNextStep(downloadLink);
}
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE));
if (aborted) {
downloadLink.setStatusText(""String_Node_Str"");
plugin.abort();
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
clearDownloadListStatus();
return;
}
if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorWaittime(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_STATIC_WAITTIME && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorStaticWaittime(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorCaptchaImage(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_FILE_ABUSED && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorAbused(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_FILE_NOT_FOUND && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorFileNotFound(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_CAPTCHA_WRONG && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorCaptcha(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_BOT_DETECTED && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorBotdetection(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_UNKNOWN_RETRY && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorRetry(downloadLink,plugin,step);
}
 else if (step != null && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorUnknown(downloadLink,plugin,step);
}
 else {
downloadLink.setStatusText(""String_Node_Str"");
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED,downloadLink));
Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_FINISHED),this);
}
}
this.waitForDownloadLinks();
}","public void run(){
  DownloadLink downloadLink;
  PluginForHost plugin;
  while ((downloadLink=controller.getNextDownloadLink()) != null) {
    logger.info(""String_Node_Str"" + downloadLink.getName());
    currentPlugin=plugin=(PluginForHost)downloadLink.getPlugin();
    plugin.resetPlugin();
    downloadLink.setStatusText(""String_Node_Str"");
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
    plugin.init();
    PluginStep step=plugin.doNextStep(downloadLink);
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_ACTIVE));
    while (!aborted && step != null && step.getStatus() != PluginStep.STATUS_ERROR) {
      logger.info(""String_Node_Str"" + step);
switch (step.getStep()) {
case PluginStep.STEP_GET_CAPTCHA_FILE:
        downloadLink.setStatusText(""String_Node_Str"");
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
    File captcha=null;
  if (step.getParameter() != null && step.getParameter() instanceof File) {
    captcha=(File)step.getParameter();
  }
if (captcha == null) {
  logger.severe(""String_Node_Str"");
  step.setParameter(""String_Node_Str"");
  step.setStatus(PluginStep.STATUS_ERROR);
  downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR);
  break;
}
 else {
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_CAPTCHA_LOADED,captcha));
  downloadLink.setLatestCaptchaFile(captcha);
  if (plugin.doBotCheck(captcha)) {
    downloadLink.setStatus(DownloadLink.STATUS_ERROR_BOT_DETECTED);
    step.setStatus(PluginStep.STATUS_ERROR);
    step.setParameter(null);
    break;
  }
  if (!Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_CAPTCHA),downloadLink,0)) {
    String captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
    logger.info(""String_Node_Str"" + captchaText);
    downloadLink.setStatusText(""String_Node_Str"" + captchaText);
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
    step.setParameter(captchaText);
    step.setStatus(PluginStep.STATUS_DONE);
  }
 else {
    Interaction[] interacts=Interaction.getInteractions(Interaction.INTERACTION_DOWNLOAD_CAPTCHA);
    if (interacts.length > 0) {
      String captchaText=(String)interacts[0].getProperty(""String_Node_Str"");
      if (captchaText == null) {
        captchaText=JDUtilities.getCaptcha(controller,plugin,captcha);
      }
      logger.info(""String_Node_Str"" + captchaText);
      downloadLink.setStatusText(""String_Node_Str"" + captchaText);
      fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
      step.setParameter(captchaText);
      step.setStatus(PluginStep.STATUS_DONE);
    }
  }
}
break;
}
if (step != null && downloadLink != null && plugin != null && plugin.nextStep(step) != null) {
downloadLink.setStatusText(plugin.nextStep(step).toString());
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
}
if (step.getStatus() == PluginStep.STATUS_ERROR) {
break;
}
step=plugin.doNextStep(downloadLink);
}
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_PLUGIN_HOST_INACTIVE));
if (aborted) {
downloadLink.setStatusText(""String_Node_Str"");
plugin.abort();
logger.warning(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_TODO);
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
clearDownloadListStatus();
return;
}
if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorWaittime(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_STATIC_WAITTIME && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorStaticWaittime(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_CAPTCHA_IMAGEERROR && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorCaptchaImage(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_FILE_ABUSED && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorAbused(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_FILE_NOT_FOUND && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorFileNotFound(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_CAPTCHA_WRONG && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorCaptcha(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_BOT_DETECTED && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorBotdetection(downloadLink,plugin,step);
}
 else if (step != null && downloadLink.getStatus() == DownloadLink.STATUS_ERROR_UNKNOWN_RETRY && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorRetry(downloadLink,plugin,step);
}
 else if (step != null && step.getStatus() == PluginStep.STATUS_ERROR) {
this.onErrorUnknown(downloadLink,plugin,step);
}
 else {
downloadLink.setStatusText(""String_Node_Str"");
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOAD_FINISHED),this);
}
}
this.waitForDownloadLinks();
fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED));
Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOADS_FINISHED_ALL),this);
}"
21498,"/** 
 * Diese Methode prüft wiederholt die Downloadlinks solange welche dabei sind die Wartezeit haben. Läuft die Wartezeit ab, oder findet ein reconnect statt, wird wieder die Run methode aufgerifen
 */
private void waitForDownloadLinks(){
  Vector<DownloadLink> links;
  DownloadLink link;
  boolean hasWaittimeLinks=false;
  boolean returnToRun=false;
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
  links=controller.getDownloadLinks();
  for (int i=0; i < links.size(); i++) {
    link=links.elementAt(i);
    if (!link.isEnabled())     continue;
    if (link.getStatus() == DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT) {
      if (link.getRemainingWaittime() == 0) {
        link.setStatus(DownloadLink.STATUS_TODO);
        link.setEndOfWaittime(0);
        returnToRun=true;
      }
      hasWaittimeLinks=true;
    }
 else     if (link.getStatus() == DownloadLink.STATUS_TODO) {
      returnToRun=true;
    }
  }
  if (aborted) {
    clearDownloadListStatus();
    logger.warning(""String_Node_Str"");
    return;
  }
 else   if (returnToRun) {
    run();
    return;
  }
  if (!hasWaittimeLinks) {
    fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_ALL_DOWNLOADS_FINISHED));
    Interaction.handleInteraction((Interaction.INTERACTION_DOWNLOADS_FINISHED_ALL),this);
    logger.info(""String_Node_Str"");
  }
 else {
    waitForDownloadLinks();
  }
}","/** 
 * Diese Methode prüft wiederholt die Downloadlinks solange welche dabei sind die Wartezeit haben. Läuft die Wartezeit ab, oder findet ein reconnect statt, wird wieder die Run methode aufgerifen
 */
private void waitForDownloadLinks(){
  Vector<DownloadLink> links;
  DownloadLink link;
  boolean hasWaittimeLinks=false;
  boolean returnToRun=false;
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  fireControlEvent(new ControlEvent(this,ControlEvent.CONTROL_SINGLE_DOWNLOAD_CHANGED));
  links=controller.getDownloadLinks();
  for (int i=0; i < links.size(); i++) {
    link=links.elementAt(i);
    if (!link.isEnabled())     continue;
    if (link.getStatus() == DownloadLink.STATUS_ERROR_DOWNLOAD_LIMIT) {
      if (link.getRemainingWaittime() == 0) {
        link.setStatus(DownloadLink.STATUS_TODO);
        link.setEndOfWaittime(0);
        returnToRun=true;
      }
      hasWaittimeLinks=true;
    }
 else     if (link.getStatus() == DownloadLink.STATUS_TODO) {
      returnToRun=true;
    }
  }
  if (aborted) {
    clearDownloadListStatus();
    logger.warning(""String_Node_Str"");
    return;
  }
 else   if (returnToRun) {
    run();
    return;
  }
  if (!hasWaittimeLinks) {
    logger.info(""String_Node_Str"");
  }
 else {
    waitForDownloadLinks();
  }
}"
21499,"@Override public boolean doInteraction(Object arg){
  retries++;
  int maxRetries=0;
  if (JDUtilities.getConfiguration().getProperty(PROPERTY_IP_RETRIES) != null)   maxRetries=Integer.parseInt((String)JDUtilities.getConfiguration().getProperty(PROPERTY_IP_RETRIES));
  logger.info(""String_Node_Str"" + NAME + ""String_Node_Str""+ retries);
  String ipBefore;
  String ipAfter;
  ipBefore=getIPAddress();
  logger.fine(""String_Node_Str"" + ipBefore);
  try {
    logger.info(JDUtilities.runCommandWaitAndReturn((String)JDUtilities.getConfiguration().getProperty(PROPERTY_RECONNECT_COMMAND)));
  }
 catch (  IOException e1) {
    e1.printStackTrace();
    return false;
  }
  if (JDUtilities.getConfiguration().getProperty(PROPERTY_IP_WAITCHECK) != null) {
    try {
      Thread.sleep(Integer.parseInt((String)JDUtilities.getConfiguration().getProperty(PROPERTY_IP_WAITCHECK)) * 1000);
    }
 catch (    NumberFormatException e) {
    }
catch (    InterruptedException e) {
    }
  }
  ipAfter=getIPAddress();
  logger.fine(""String_Node_Str"" + ipAfter);
  if (ipBefore == null || ipAfter == null || ipBefore.equals(ipAfter)) {
    logger.severe(""String_Node_Str"");
    if (retries < maxRetries || maxRetries <= 0) {
      return interact(arg);
    }
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    retries=0;
    return false;
  }
  this.setCallCode(Interaction.INTERACTION_CALL_SUCCESS);
  retries=0;
  return true;
}","@Override public boolean doInteraction(Object arg){
  retries++;
  int maxRetries=0;
  if (JDUtilities.getConfiguration().getProperty(PROPERTY_IP_RETRIES) != null)   maxRetries=Integer.parseInt((String)JDUtilities.getConfiguration().getProperty(PROPERTY_IP_RETRIES));
  logger.info(""String_Node_Str"" + NAME + ""String_Node_Str""+ retries);
  String ipBefore;
  String ipAfter;
  ipBefore=getIPAddress();
  logger.fine(""String_Node_Str"" + ipBefore);
  try {
    logger.info(JDUtilities.runCommandWaitAndReturn((String)JDUtilities.getConfiguration().getProperty(PROPERTY_RECONNECT_COMMAND)));
  }
 catch (  IOException e1) {
    e1.printStackTrace();
    return false;
  }
  if (JDUtilities.getConfiguration().getProperty(PROPERTY_IP_WAITCHECK) != null) {
    try {
      Thread.sleep(Integer.parseInt((String)JDUtilities.getConfiguration().getProperty(PROPERTY_IP_WAITCHECK)) * 1000);
    }
 catch (    NumberFormatException e) {
    }
catch (    InterruptedException e) {
    }
  }
  ipAfter=getIPAddress();
  logger.fine(""String_Node_Str"" + ipAfter);
  if (ipBefore == null || ipAfter == null || ipBefore.equals(ipAfter)) {
    logger.severe(""String_Node_Str"");
    if (retries < ExternReconnect.MAX_RETRIES && (retries < maxRetries || maxRetries <= 0)) {
      return doInteraction(arg);
    }
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    retries=0;
    return false;
  }
  this.setCallCode(Interaction.INTERACTION_CALL_SUCCESS);
  retries=0;
  return true;
}"
21500,"@Override public boolean doInteraction(Object arg){
  Configuration configuration=JDUtilities.getConfiguration();
  retries++;
  logger.info(""String_Node_Str"" + retries);
  String ipBefore;
  String ipAfter;
  RouterData routerData=configuration.getRouterData();
  if (routerData == null) {
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
  String routerIP=routerData.getRouterIP();
  String routerUsername=configuration.getRouterUsername();
  String routerPassword=configuration.getRouterPassword();
  int routerPort=routerData.getRouterPort();
  String login=routerData.getLogin();
  String disconnect=routerData.getDisconnect();
  String connect=routerData.getConnect();
  int waitTime=configuration.getWaitForIPCheck();
  if (routerUsername != null && routerPassword != null)   Authenticator.setDefault(new InternalAuthenticator(routerUsername,routerPassword));
  String routerPage;
  if (routerPort <= 0)   routerPage=""String_Node_Str"" + routerIP + ""String_Node_Str"";
 else   routerPage=""String_Node_Str"" + routerIP + ""String_Node_Str""+ routerPort+ ""String_Node_Str"";
  RequestInfo requestInfo=null;
  ipBefore=getIPAddress(routerPage,routerData);
  logger.fine(""String_Node_Str"" + ipBefore);
  if (login != null && !login.equals(""String_Node_Str"")) {
    login.replaceAll(VAR_USERNAME,routerUsername);
    login.replaceAll(VAR_PASSWORD,routerPassword);
    requestInfo=doThis(""String_Node_Str"",isAbsolute(login) ? login : routerPage + login,requestInfo,routerData.getLoginRequestProperties(),routerData.getLoginPostParams(),routerData.getLoginType());
    if (requestInfo == null) {
      logger.severe(""String_Node_Str"");
      this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
      return false;
    }
 else     if (!requestInfo.isOK()) {
      logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
      this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
      return false;
    }
  }
  requestInfo=doThis(""String_Node_Str"",isAbsolute(disconnect) ? disconnect : routerPage + disconnect,requestInfo,routerData.getDisconnectRequestProperties(),routerData.getDisconnectPostParams(),routerData.getDisconnectType());
  if (requestInfo == null) {
    logger.severe(""String_Node_Str"");
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
 else   if (!requestInfo.isOK()) {
    logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
  try {
    Thread.sleep(500);
  }
 catch (  InterruptedException e) {
  }
  logger.fine(""String_Node_Str"");
  requestInfo=doThis(""String_Node_Str"",isAbsolute(connect) ? connect : routerPage + connect,null,routerData.getConnectRequestProperties(),routerData.getConnectPostParams(),routerData.getConnectType());
  if (requestInfo == null) {
    logger.severe(""String_Node_Str"");
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
 else   if (!requestInfo.isOK()) {
    logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
  if (waitTime > 0) {
    logger.fine(""String_Node_Str"" + waitTime + ""String_Node_Str"");
    try {
      Thread.sleep(waitTime * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
  ipAfter=getIPAddress(routerPage,routerData);
  logger.fine(""String_Node_Str"" + ipAfter);
  if (ipBefore == null || ipAfter == null || ipBefore.equals(ipAfter)) {
    logger.severe(""String_Node_Str"");
    if (retries < configuration.getReconnectRetries() || configuration.getReconnectRetries() <= 0) {
      return interact(arg);
    }
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    retries=0;
    return false;
  }
  this.setCallCode(Interaction.INTERACTION_CALL_SUCCESS);
  retries=0;
  return true;
}","@Override public boolean doInteraction(Object arg){
  Configuration configuration=JDUtilities.getConfiguration();
  retries++;
  logger.info(""String_Node_Str"" + retries);
  String ipBefore;
  String ipAfter;
  RouterData routerData=configuration.getRouterData();
  if (routerData == null) {
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
  String routerIP=routerData.getRouterIP();
  String routerUsername=configuration.getRouterUsername();
  String routerPassword=configuration.getRouterPassword();
  int routerPort=routerData.getRouterPort();
  String login=routerData.getLogin();
  String disconnect=routerData.getDisconnect();
  String connect=routerData.getConnect();
  int waitTime=configuration.getWaitForIPCheck();
  if (routerUsername != null && routerPassword != null)   Authenticator.setDefault(new InternalAuthenticator(routerUsername,routerPassword));
  String routerPage;
  if (routerPort <= 0)   routerPage=""String_Node_Str"" + routerIP + ""String_Node_Str"";
 else   routerPage=""String_Node_Str"" + routerIP + ""String_Node_Str""+ routerPort+ ""String_Node_Str"";
  RequestInfo requestInfo=null;
  ipBefore=getIPAddress(routerPage,routerData);
  logger.fine(""String_Node_Str"" + ipBefore);
  if (login != null && !login.equals(""String_Node_Str"")) {
    login.replaceAll(VAR_USERNAME,routerUsername);
    login.replaceAll(VAR_PASSWORD,routerPassword);
    requestInfo=doThis(""String_Node_Str"",isAbsolute(login) ? login : routerPage + login,requestInfo,routerData.getLoginRequestProperties(),routerData.getLoginPostParams(),routerData.getLoginType());
    if (requestInfo == null) {
      logger.severe(""String_Node_Str"");
      this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
      return false;
    }
 else     if (!requestInfo.isOK()) {
      logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
      this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
      return false;
    }
  }
  requestInfo=doThis(""String_Node_Str"",isAbsolute(disconnect) ? disconnect : routerPage + disconnect,requestInfo,routerData.getDisconnectRequestProperties(),routerData.getDisconnectPostParams(),routerData.getDisconnectType());
  if (requestInfo == null) {
    logger.severe(""String_Node_Str"");
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
 else   if (!requestInfo.isOK()) {
    logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
  try {
    Thread.sleep(500);
  }
 catch (  InterruptedException e) {
  }
  logger.fine(""String_Node_Str"");
  requestInfo=doThis(""String_Node_Str"",isAbsolute(connect) ? connect : routerPage + connect,null,routerData.getConnectRequestProperties(),routerData.getConnectPostParams(),routerData.getConnectType());
  if (requestInfo == null) {
    logger.severe(""String_Node_Str"");
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
 else   if (!requestInfo.isOK()) {
    logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    return false;
  }
  if (waitTime > 0) {
    logger.fine(""String_Node_Str"" + waitTime + ""String_Node_Str"");
    try {
      Thread.sleep(waitTime * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
  ipAfter=getIPAddress(routerPage,routerData);
  logger.fine(""String_Node_Str"" + ipAfter);
  if (ipBefore == null || ipAfter == null || ipBefore.equals(ipAfter)) {
    logger.severe(""String_Node_Str"");
    if (retries < HTTPReconnect.MAX_RETRIES && (retries < configuration.getReconnectRetries() || configuration.getReconnectRetries() <= 0)) {
      return doInteraction(arg);
    }
    this.setCallCode(Interaction.INTERACTION_CALL_ERROR);
    retries=0;
    return false;
  }
  this.setCallCode(Interaction.INTERACTION_CALL_SUCCESS);
  retries=0;
  return true;
}"
21501,"public String toString(){
  return name;
}","public String toString(){
  return name + ""String_Node_Str"" + description+ ""String_Node_Str"";
}"
21502,"public String toString(){
  return NAME;
}","public String toString(){
  return ""String_Node_Str"";
}"
21503,"public String toString(){
  return NAME;
}","public String toString(){
  return ""String_Node_Str"";
}"
21504,"public String toString(){
  return NAME;
}","public String toString(){
  return ""String_Node_Str"";
}"
21505,"@Override public boolean interact(){
  logger.info(""String_Node_Str"");
  String ipBefore;
  String ipAfter;
  RouterData routerData=configuration.getRouterData();
  String routerIP=configuration.getRouterIP();
  String routerUsername=configuration.getRouterUsername();
  String routerPassword=configuration.getRouterPassword();
  int routerPort=configuration.getRouterPort();
  String login=routerData.getLogin();
  String disconnect=routerData.getDisconnect();
  String connect=routerData.getConnect();
  if (routerUsername != null && routerPassword != null)   Authenticator.setDefault(new InternalAuthenticator(routerUsername,routerPassword));
  String routerPage;
  if (routerPort <= 0)   routerPage=""String_Node_Str"" + routerIP + ""String_Node_Str"";
 else   routerPage=""String_Node_Str"" + routerIP + ""String_Node_Str""+ routerPort+ ""String_Node_Str"";
  RequestInfo requestInfo=null;
  ipBefore=getIPAddress(routerPage,routerData);
  logger.fine(""String_Node_Str"" + ipBefore);
  if (login != null && !login.equals(""String_Node_Str"")) {
    login.replaceAll(VAR_USERNAME,routerUsername);
    login.replaceAll(VAR_PASSWORD,routerPassword);
    requestInfo=doThis(""String_Node_Str"",routerPage + login,requestInfo,routerData.getLoginRequestProperties(),routerData.getLoginPostParams(),routerData.getLoginType());
    if (requestInfo == null || !requestInfo.isOK()) {
      logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
      return false;
    }
  }
  requestInfo=doThis(""String_Node_Str"",routerPage + disconnect,requestInfo,routerData.getDisconnectRequestProperties(),routerData.getDisconnectPostParams(),routerData.getDisconnectType());
  if (requestInfo == null || !requestInfo.isOK()) {
    logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
    return false;
  }
  logger.fine(""String_Node_Str"");
  requestInfo=doThis(""String_Node_Str"",connect,null,null,null,RouterData.TYPE_WEB_GET);
  if (requestInfo == null || !requestInfo.isOK()) {
    logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
    return false;
  }
  ipAfter=getIPAddress(routerPage,routerData);
  logger.fine(""String_Node_Str"" + ipAfter);
  if (ipBefore == null || ipAfter == null || ipBefore.equals(ipAfter)) {
    logger.severe(""String_Node_Str"");
    return false;
  }
  return true;
}","@Override public boolean interact(){
  configuration=JDUtilities.getConfiguration();
  logger.info(""String_Node_Str"");
  String ipBefore;
  String ipAfter;
  RouterData routerData=configuration.getRouterData();
  String routerIP=configuration.getRouterIP();
  String routerUsername=configuration.getRouterUsername();
  String routerPassword=configuration.getRouterPassword();
  int routerPort=configuration.getRouterPort();
  String login=routerData.getLogin();
  String disconnect=routerData.getDisconnect();
  String connect=routerData.getConnect();
  if (routerUsername != null && routerPassword != null)   Authenticator.setDefault(new InternalAuthenticator(routerUsername,routerPassword));
  String routerPage;
  if (routerPort <= 0)   routerPage=""String_Node_Str"" + routerIP + ""String_Node_Str"";
 else   routerPage=""String_Node_Str"" + routerIP + ""String_Node_Str""+ routerPort+ ""String_Node_Str"";
  RequestInfo requestInfo=null;
  ipBefore=getIPAddress(routerPage,routerData);
  logger.fine(""String_Node_Str"" + ipBefore);
  if (login != null && !login.equals(""String_Node_Str"")) {
    login.replaceAll(VAR_USERNAME,routerUsername);
    login.replaceAll(VAR_PASSWORD,routerPassword);
    requestInfo=doThis(""String_Node_Str"",routerPage + login,requestInfo,routerData.getLoginRequestProperties(),routerData.getLoginPostParams(),routerData.getLoginType());
    if (requestInfo == null) {
      logger.severe(""String_Node_Str"");
      return false;
    }
 else     if (!requestInfo.isOK()) {
      logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
      return false;
    }
  }
  requestInfo=doThis(""String_Node_Str"",routerPage + disconnect,requestInfo,routerData.getDisconnectRequestProperties(),routerData.getDisconnectPostParams(),routerData.getDisconnectType());
  if (requestInfo == null) {
    logger.severe(""String_Node_Str"");
    return false;
  }
 else   if (!requestInfo.isOK()) {
    logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
    return false;
  }
  logger.fine(""String_Node_Str"");
  requestInfo=doThis(""String_Node_Str"",connect,null,null,null,RouterData.TYPE_WEB_GET);
  if (requestInfo == null) {
    logger.severe(""String_Node_Str"");
    return false;
  }
 else   if (!requestInfo.isOK()) {
    logger.severe(""String_Node_Str"" + requestInfo.getResponseCode());
    return false;
  }
  ipAfter=getIPAddress(routerPage,routerData);
  logger.fine(""String_Node_Str"" + ipAfter);
  if (ipBefore == null || ipAfter == null || ipBefore.equals(ipAfter)) {
    logger.severe(""String_Node_Str"");
    return false;
  }
  return true;
}"
21506,"public Interaction(){
  configuration=JDUtilities.getConfiguration();
}","public Interaction(){
}"
21507,"/** 
 * Speichert einen InputStream binär auf der Festplatte ab
 * @param downloadLink der DownloadLink
 * @param urlConnection Wenn bereits vom Plugin eine vorkonfigurierte URLConnectionvorhanden ist, wird diese hier übergeben und benutzt. Ansonsten erfolgt ein normaler GET Download von der URL, die im DownloadLink hinterlegt ist
 * @return wahr, wenn alle Daten ausgelesen und gespeichert wurden
 */
public boolean download(DownloadLink downloadLink,URLConnection urlConnection){
  File fileOutput=downloadLink.getFileOutput();
  int downloadedBytes=0;
  long start, end, time;
  try {
    ByteBuffer buffer=ByteBuffer.allocateDirect(READ_BUFFER);
    if (urlConnection == null)     urlConnection=downloadLink.getUrlDownload().openConnection();
    FileOutputStream fos=new FileOutputStream(fileOutput);
    ReadableByteChannel source=Channels.newChannel(urlConnection.getInputStream());
    WritableByteChannel dest=fos.getChannel();
    int contentLen=urlConnection.getContentLength();
    downloadLink.setInProgress(true);
    logger.info(""String_Node_Str"");
    start=System.currentTimeMillis();
    buffer.clear();
    int bytesLastSpeedCheck=0;
    long t1=System.currentTimeMillis();
    for (int i=0; !aborted; i++) {
      Thread.sleep(100);
      int bytes=source.read(buffer);
      if (bytes == -1)       break;
      buffer.flip();
      dest.write(buffer);
      buffer.compact();
      downloadedBytes+=bytes;
      bytesLastSpeedCheck+=bytes;
      if (i % 10 == 0) {
        long t2=System.currentTimeMillis();
        int speed=(int)(bytesLastSpeedCheck * 1000 / (t2 - t1));
        downloadLink.setDownloadSpeed(speed);
        bytesLastSpeedCheck=0;
        t1=t2;
      }
      downloadLink.setDownloadCurrent(downloadedBytes);
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_DATA_CHANGED,downloadLink));
    }
    if (contentLen != -1 && downloadedBytes != contentLen) {
      logger.info(""String_Node_Str"");
      return false;
    }
    end=System.currentTimeMillis();
    time=end - start;
    source.close();
    dest.close();
    fos.close();
    firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
    logger.info(""String_Node_Str"" + fileOutput.getAbsolutePath());
    logger.info(downloadedBytes + ""String_Node_Str"" + time+ ""String_Node_Str"");
    return true;
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  SecurityException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  InterruptedException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
  return false;
}","/** 
 * Speichert einen InputStream binär auf der Festplatte ab
 * @param downloadLink der DownloadLink
 * @param urlConnection Wenn bereits vom Plugin eine vorkonfigurierte URLConnectionvorhanden ist, wird diese hier übergeben und benutzt. Ansonsten erfolgt ein normaler GET Download von der URL, die im DownloadLink hinterlegt ist
 * @return wahr, wenn alle Daten ausgelesen und gespeichert wurden
 */
public boolean download(DownloadLink downloadLink,URLConnection urlConnection){
  File fileOutput=downloadLink.getFileOutput();
  int downloadedBytes=0;
  long start, end, time;
  try {
    ByteBuffer buffer=ByteBuffer.allocateDirect(READ_BUFFER);
    if (urlConnection == null)     urlConnection=downloadLink.getUrlDownload().openConnection();
    FileOutputStream fos=new FileOutputStream(fileOutput);
    ReadableByteChannel source=Channels.newChannel(urlConnection.getInputStream());
    WritableByteChannel dest=fos.getChannel();
    int contentLen=urlConnection.getContentLength();
    downloadLink.setInProgress(true);
    logger.info(""String_Node_Str"");
    start=System.currentTimeMillis();
    buffer.clear();
    int bytesLastSpeedCheck=0;
    long t1=System.currentTimeMillis();
    for (int i=0; !aborted; i++) {
      Thread.sleep(50);
      int bytes=source.read(buffer);
      if (bytes == -1)       break;
      buffer.flip();
      dest.write(buffer);
      buffer.compact();
      downloadedBytes+=bytes;
      bytesLastSpeedCheck+=bytes;
      if (i % 20 == 0) {
        long t2=System.currentTimeMillis();
        int speed=(int)(bytesLastSpeedCheck * 1000 / (t2 - t1));
        downloadLink.setDownloadSpeed(speed);
        logger.fine(Integer.toString(speed));
        bytesLastSpeedCheck=0;
        t1=t2;
      }
      downloadLink.setDownloadCurrent(downloadedBytes);
      firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_DATA_CHANGED,downloadLink));
    }
    if (contentLen != -1 && downloadedBytes != contentLen) {
      logger.info(""String_Node_Str"");
      return false;
    }
    end=System.currentTimeMillis();
    time=end - start;
    source.close();
    dest.close();
    fos.close();
    firePluginEvent(new PluginEvent(this,PluginEvent.PLUGIN_PROGRESS_FINISH,downloadLink));
    logger.info(""String_Node_Str"" + fileOutput.getAbsolutePath());
    logger.info(downloadedBytes + ""String_Node_Str"" + time+ ""String_Node_Str"");
    return true;
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  SecurityException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  InterruptedException e) {
    logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
  }
  return false;
}"
21508,"/** 
 * MTH File wird geladen und verarbeitet
 */
private void loadMTHFile() throws IOException {
  URL url=UTILITIES.getResourceURL(pathMethod + ""String_Node_Str"");
  if (url == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
 else {
    mth=UTILITIES.parseXmlFile(url.openStream(),false);
  }
  createLetterDBFormMTH();
}","/** 
 * MTH File wird geladen und verarbeitet
 */
private void loadMTHFile() throws IOException {
  URL url=UTILITIES.getResourceURL(UTILITIES.getFullPath(new String[]{pathMethod.toString(),""String_Node_Str""}));
  if (url == null) {
    logger.severe(""String_Node_Str"");
    return;
  }
 else {
    mth=UTILITIES.parseXmlFile(url.openStream(),false);
  }
  createLetterDBFormMTH();
}"
21509,"/** 
 * @param methodsPath
 * @param methodName
 * @param methodDir
 */
public JAntiCaptcha(String methodsPath,String methodName){
  if (methodsPath == null) {
    methodsPath=UTILITIES.getFullPath(new String[]{JDUtilities.getJDHomeDirectory().getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  }
  this.methodDir=methodName;
  try {
    this.pathMethod=new File(methodsPath + UTILITIES.FS + methodName).toURI().toURL();
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  try {
    if (isMethodPathValid(this.pathMethod)) {
      getJACInfo();
      jas=new JACScript(this,UTILITIES.getResourceURL(pathMethod + ""String_Node_Str""),methodDir);
      loadMTHFile();
      logger.fine(""String_Node_Str"" + letterDB.size());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * @param methodsPath
 * @param methodName
 * @param methodDir
 */
public JAntiCaptcha(String methodsPath,String methodName){
  if (methodsPath == null) {
    methodsPath=UTILITIES.getFullPath(new String[]{JDUtilities.getJDHomeDirectory().getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  }
  this.methodDir=methodName;
  try {
    this.pathMethod=new File(methodsPath + UTILITIES.FS + methodName).toURI().toURL();
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  try {
    if (isMethodPathValid(this.pathMethod)) {
      getJACInfo();
      jas=new JACScript(this,UTILITIES.getResourceURL(UTILITIES.getFullPath(new String[]{pathMethod.toString(),""String_Node_Str""})),methodDir);
      loadMTHFile();
      logger.fine(""String_Node_Str"" + letterDB.size());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
21510,"private void getJACInfo() throws IOException {
  URL url=UTILITIES.getResourceURL(pathMethod + ""String_Node_Str"");
  if (url == null) {
    logger.severe(""String_Node_Str"" + pathMethod + ""String_Node_Str"");
    return;
  }
  Document doc=UTILITIES.parseXmlFile(url.openStream(),false);
  NodeList nl=doc.getFirstChild().getChildNodes();
  for (int i=0; i < nl.getLength(); i++) {
    Node childNode=nl.item(i);
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.setMethodAuthor(UTILITIES.getAttribute(childNode,""String_Node_Str""));
      this.setMethodName(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.setLetterNum(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
      this.setImageType(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.setSourceImage(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.setResultFile(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
  }
}","private void getJACInfo(){
  URL url=UTILITIES.getResourceURL(UTILITIES.getFullPath(new String[]{pathMethod.toString(),""String_Node_Str""}));
  if (url == null) {
    logger.severe(""String_Node_Str"" + pathMethod + ""String_Node_Str"");
    return;
  }
  Document doc;
  try {
    doc=UTILITIES.parseXmlFile(url.openStream(),false);
  }
 catch (  IOException e) {
    logger.severe(""String_Node_Str"" + pathMethod + ""String_Node_Str"");
    return;
  }
  NodeList nl=doc.getFirstChild().getChildNodes();
  for (int i=0; i < nl.getLength(); i++) {
    Node childNode=nl.item(i);
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.setMethodAuthor(UTILITIES.getAttribute(childNode,""String_Node_Str""));
      this.setMethodName(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.setLetterNum(Integer.parseInt(UTILITIES.getAttribute(childNode,""String_Node_Str"")));
      this.setImageType(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.setSourceImage(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
    if (childNode.getNodeName().equals(""String_Node_Str"")) {
      this.setResultFile(UTILITIES.getAttribute(childNode,""String_Node_Str""));
    }
  }
}"
21511,"@Override public PluginStep getNextStep(Object parameter){
  DownloadLink downloadLink=(DownloadLink)parameter;
  PluginStep todo=null;
  if (currentStep == null) {
    try {
      requestInfo=getRequest(downloadLink.getUrlDownload());
      String newURL=getFirstMatch(requestInfo.getHtmlCode(),patternForNewHost,1);
      if (newURL != null) {
        newURL=""String_Node_Str"" + newURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
        requestInfo=getRequest((new URL(newURL)),requestInfo.getCookie(),downloadLink.getName(),true);
        actionString=""String_Node_Str"" + getFirstMatch(requestInfo.getHtmlCode(),frameForCaptcha,1);
        requestInfo=getRequest((new URL(actionString)),requestInfo.getCookie(),newURL,true);
        System.out.println(requestInfo.getHtmlCode());
        captchaAddress=""String_Node_Str"" + getFirstMatch(requestInfo.getHtmlCode(),patternForCaptcha,1);
        System.out.println(captchaAddress);
        postTarget=getFormInputHidden(requestInfo.getHtmlCode());
      }
      currentStep=steps.firstElement();
      if (captchaAddress == null || postTarget == null) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        currentStep.setStatus(PluginStep.STATUS_ERROR);
        logger.warning(""String_Node_Str"");
        return currentStep;
      }
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  int index=steps.indexOf(currentStep);
  todo=currentStep;
  if (index + 1 < steps.size())   currentStep=steps.get(index + 1);
  logger.finer(todo.toString());
switch (todo.getStep()) {
case PluginStep.STEP_WAIT_TIME:
    todo.setParameter(new Long(waitTime));
  break;
case PluginStep.STEP_CAPTCHA:
todo.setParameter(captchaAddress);
todo.setStatus(PluginStep.STATUS_USER_INPUT);
break;
case PluginStep.STEP_DOWNLOAD:
try {
requestInfo=postRequest((new URL(actionString)),requestInfo.getCookie(),actionString,postTarget + ""String_Node_Str"" + (String)steps.get(1).getParameter(),true);
postTarget=getFirstMatch(requestInfo.getHtmlCode(),patternForDownloadlink,1);
}
 catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
boolean success=prepareDownload(downloadLink);
if (success) {
todo.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
return null;
}
 else {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
todo.setStatus(PluginStep.STATUS_ERROR);
}
break;
}
return todo;
}","@Override public PluginStep getNextStep(Object parameter){
  DownloadLink downloadLink=(DownloadLink)parameter;
  PluginStep todo=null;
  if (currentStep == null) {
    try {
      requestInfo=getRequest(downloadLink.getUrlDownload());
      String newURL=getFirstMatch(requestInfo.getHtmlCode(),patternForNewHost,1);
      if (newURL != null) {
        newURL=""String_Node_Str"" + newURL.replaceAll(""String_Node_Str"",""String_Node_Str"");
        requestInfo=getRequest((new URL(newURL)),null,downloadLink.getName(),true);
        actionString=""String_Node_Str"" + getFirstMatch(requestInfo.getHtmlCode(),frameForCaptcha,1);
        actionString=actionString.replaceAll(""String_Node_Str"",""String_Node_Str"");
        requestInfo=getRequest((new URL(actionString)),""String_Node_Str"",newURL,true);
        captchaAddress=""String_Node_Str"" + getFirstMatch(requestInfo.getHtmlCode(),patternForCaptcha,1);
        captchaAddress=captchaAddress.replaceAll(""String_Node_Str"",""String_Node_Str"");
        postTarget=getFormInputHidden(requestInfo.getHtmlCode());
      }
      currentStep=steps.firstElement();
      if (captchaAddress == null || postTarget == null) {
        downloadLink.setStatus(DownloadLink.STATUS_ERROR_UNKNOWN);
        currentStep.setStatus(PluginStep.STATUS_ERROR);
        logger.warning(""String_Node_Str"");
        return currentStep;
      }
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  int index=steps.indexOf(currentStep);
  todo=currentStep;
  if (index + 1 < steps.size())   currentStep=steps.get(index + 1);
  logger.finer(todo.toString());
switch (todo.getStep()) {
case PluginStep.STEP_WAIT_TIME:
    todo.setParameter(new Long(waitTime));
  break;
case PluginStep.STEP_CAPTCHA:
todo.setParameter(captchaAddress);
todo.setStatus(PluginStep.STATUS_USER_INPUT);
break;
case PluginStep.STEP_DOWNLOAD:
try {
requestInfo=postRequest((new URL(actionString)),requestInfo.getCookie(),actionString,postTarget + ""String_Node_Str"" + (String)steps.get(1).getParameter(),true);
postTarget=getFirstMatch(requestInfo.getHtmlCode(),patternForDownloadlink,1);
postTarget=postTarget.replaceAll(""String_Node_Str"",""String_Node_Str"");
}
 catch (MalformedURLException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
boolean success=prepareDownload(downloadLink);
if (success) {
todo.setStatus(PluginStep.STATUS_DONE);
downloadLink.setStatus(DownloadLink.STATUS_DONE);
return null;
}
 else {
logger.severe(""String_Node_Str"");
downloadLink.setStatus(DownloadLink.STATUS_ERROR_CAPTCHA_WRONG);
todo.setStatus(PluginStep.STATUS_ERROR);
}
break;
}
return todo;
}"
21512,"public LogStreamHandler(OutputStream stream){
  super();
  setOutputStream(stream);
}","public LogStreamHandler(OutputStream stream){
  setOutputStream(stream);
}"
21513,"/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabbedPane=new JTabbedPane();
  tabDownloadTable=new TabDownloadLinks(this);
  tabPluginActivity=new TabPluginActivity();
  statusBar=new StatusBar();
  tabbedPane.addTab(JDUtilities.getResourceString(""String_Node_Str""),tabDownloadTable);
  tabbedPane.addTab(JDUtilities.getResourceString(""String_Node_Str""),tabPluginActivity);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  JButton btnAdd=new JButton(actionAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnStartStop);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,tabbedPane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
}","/** 
 * Hier wird die komplette Oberfläche der Applikation zusammengestrickt
 */
private void buildUI(){
  tabbedPane=new JTabbedPane();
  tabDownloadTable=new TabDownloadLinks(this);
  tabPluginActivity=new TabPluginActivity();
  statusBar=new StatusBar();
  tabbedPane.addTab(JDUtilities.getResourceString(""String_Node_Str""),tabDownloadTable);
  tabbedPane.addTab(JDUtilities.getResourceString(""String_Node_Str""),tabPluginActivity);
  btnStartStop=new JToggleButton(actionStartStopDownload);
  btnStartStop.setSelectedIcon(new ImageIcon(JDUtilities.getImage(""String_Node_Str"")));
  btnStartStop.setFocusPainted(false);
  btnStartStop.setBorderPainted(false);
  btnStartStop.setText(null);
  JButton btnAdd=new JButton(actionAdd);
  btnAdd.setFocusPainted(false);
  btnAdd.setBorderPainted(false);
  btnAdd.setText(null);
  JButton btnDelete=new JButton(actionDelete);
  btnDelete.setFocusPainted(false);
  btnDelete.setBorderPainted(false);
  btnDelete.setText(null);
  toolBar.setFloatable(false);
  toolBar.add(btnStartStop);
  toolBar.add(btnAdd);
  toolBar.add(btnDelete);
  frame.setLayout(new GridBagLayout());
  JDUtilities.addToGridBag(frame,toolBar,0,0,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.NORTH);
  JDUtilities.addToGridBag(frame,tabbedPane,0,1,1,1,1,1,null,GridBagConstraints.BOTH,GridBagConstraints.CENTER);
  JDUtilities.addToGridBag(frame,statusBar,0,2,1,1,0,0,null,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST);
  logDialog=new LogDialog(getFrame(),logger);
  logDialog.setVisible(true);
  logDialog.addWindowListener(new LogDialogWindowAdapter());
  logger.warning(""String_Node_Str"");
}"
21514,"@Override public DownloadLink getNextDownloadLink(){
  if (tabDownloadTable != null)   tabDownloadTable.getNextDownloadLink();
  return null;
}","@Override public DownloadLink getNextDownloadLink(){
  if (tabDownloadTable != null)   return tabDownloadTable.getNextDownloadLink();
  return null;
}"
21515,"public void run(){
  plugin=downloadLink.getPlugin();
  PluginStep step=plugin.getNextStep(downloadLink);
  statusBar.setPluginForHostActive(true);
  while (!aborted && step != null && step.getStatus() != PluginStep.STATUS_ERROR) {
switch (step.getStep()) {
case PluginStep.STEP_WAIT_TIME:
      try {
        long milliSeconds=(Long)step.getParameter();
        logger.info(""String_Node_Str"" + milliSeconds + ""String_Node_Str"");
        Thread.sleep(milliSeconds);
        step.setStatus(PluginStep.STATUS_DONE);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    break;
case PluginStep.STEP_CAPTCHA:
  String captchaText=getCaptcha((String)step.getParameter());
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
step=plugin.getNextStep(downloadLink);
}
statusBar.setPluginForHostActive(false);
if (aborted) {
logger.warning(""String_Node_Str"");
}
if (step != null && step.getStatus() == PluginStep.STATUS_ERROR) {
logger.severe(""String_Node_Str"");
}
btnStartStop.setSelected(false);
}","public void run(){
  downloadLink=tabDownloadTable.getNextDownloadLink();
  plugin=downloadLink.getPlugin();
  PluginStep step=plugin.getNextStep(downloadLink);
  statusBar.setPluginForHostActive(true);
  while (!aborted && step != null && step.getStatus() != PluginStep.STATUS_ERROR) {
switch (step.getStep()) {
case PluginStep.STEP_WAIT_TIME:
      try {
        long milliSeconds=(Long)step.getParameter();
        logger.info(""String_Node_Str"" + milliSeconds + ""String_Node_Str"");
        Thread.sleep(milliSeconds);
        step.setStatus(PluginStep.STATUS_DONE);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    break;
case PluginStep.STEP_CAPTCHA:
  String captchaText=getCaptcha((String)step.getParameter());
step.setParameter(captchaText);
step.setStatus(PluginStep.STATUS_DONE);
}
step=plugin.getNextStep(downloadLink);
}
statusBar.setPluginForHostActive(false);
if (aborted) {
logger.warning(""String_Node_Str"");
}
if (step != null && step.getStatus() == PluginStep.STATUS_ERROR) {
logger.severe(""String_Node_Str"");
}
btnStartStop.setSelected(false);
}"
21516,"private boolean prepareDownload(DownloadLink downloadLink){
  try {
    URLConnection urlConnection=new URL(postTarget).openConnection();
    urlConnection.setDoOutput(true);
    String postParams=createPostParameterFromHashMap(postParameter);
    OutputStreamWriter wr=new OutputStreamWriter(urlConnection.getOutputStream());
    wr.write(postParams);
    wr.flush();
    int length=urlConnection.getContentLength();
    File fileOutput=downloadLink.getFileOutput();
    downloadLink.setDownloadLength(length);
    return download(downloadLink,urlConnection);
  }
 catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
  return false;
}","private boolean prepareDownload(DownloadLink downloadLink){
  try {
    URLConnection urlConnection=new URL(postTarget).openConnection();
    urlConnection.setDoOutput(true);
    String postParams=createPostParameterFromHashMap(postParameter);
    OutputStreamWriter wr=new OutputStreamWriter(urlConnection.getOutputStream());
    wr.write(postParams);
    wr.flush();
    int length=urlConnection.getContentLength();
    File fileOutput=downloadLink.getFileOutput();
    downloadLink.setDownloadLength(length);
    logger.info(""String_Node_Str"");
    return download(downloadLink,urlConnection);
  }
 catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
  return false;
}"
21517,"@Override public PluginStep getNextStep(Object parameter){
  DownloadLink downloadLink=(DownloadLink)parameter;
  RequestInfo requestInfo;
  PluginStep todo=null;
  if (currentStep == null) {
    try {
      requestInfo=getRequest(downloadLink.getUrlDownload());
      String newURL=getFirstMatch(requestInfo.getHtmlCode(),patternForNewHost,1);
      requestInfo=postRequest(new URL(newURL),""String_Node_Str"");
      captchaAddress=getFirstMatch(requestInfo.getHtmlCode(),patternForCaptcha,1);
      postTarget=getFirstMatch(requestInfo.getHtmlCode(),patternForFormData,1);
      actionString=getFirstMatch(requestInfo.getHtmlCode(),patternForFormData,2);
      currentStep=steps.firstElement();
      if (captchaAddress == null || postTarget == null || actionString == null) {
        currentStep.setStatus(PluginStep.STATUS_ERROR);
        logger.warning(""String_Node_Str"");
        return currentStep;
      }
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  int index=steps.indexOf(currentStep);
  todo=currentStep;
  if (index + 1 < steps.size())   currentStep=steps.elementAt(index + 1);
  logger.info(todo.toString());
switch (todo.getStep()) {
case PluginStep.STEP_WAIT_TIME:
    todo.setParameter(new Long(waitTime));
  break;
case PluginStep.STEP_CAPTCHA:
todo.setParameter(captchaAddress);
todo.setStatus(PluginStep.STATUS_USER_INPUT);
break;
case PluginStep.STEP_DOWNLOAD:
postParameter.put(""String_Node_Str"",""String_Node_Str"");
postParameter.put(""String_Node_Str"",(String)steps.elementAt(1).getParameter());
postParameter.put(""String_Node_Str"",actionString);
boolean success=prepareDownload(downloadLink);
if (success) todo.setStatus(PluginStep.STATUS_DONE);
 else todo.setStatus(PluginStep.STATUS_ERROR);
break;
}
return todo;
}","@Override public PluginStep getNextStep(Object parameter){
  DownloadLink downloadLink=(DownloadLink)parameter;
  RequestInfo requestInfo;
  PluginStep todo=null;
  if (currentStep == null) {
    try {
      requestInfo=getRequest(downloadLink.getUrlDownload());
      String newURL=getFirstMatch(requestInfo.getHtmlCode(),patternForNewHost,1);
      if (newURL != null) {
        requestInfo=postRequest(new URL(newURL),""String_Node_Str"");
        captchaAddress=getFirstMatch(requestInfo.getHtmlCode(),patternForCaptcha,1);
        postTarget=getFirstMatch(requestInfo.getHtmlCode(),patternForFormData,1);
        actionString=getFirstMatch(requestInfo.getHtmlCode(),patternForFormData,2);
        currentStep=steps.firstElement();
      }
 else {
        logger.warning(""String_Node_Str"");
      }
      if (captchaAddress == null || postTarget == null || actionString == null) {
        currentStep.setStatus(PluginStep.STATUS_ERROR);
        logger.warning(""String_Node_Str"");
        return currentStep;
      }
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  int index=steps.indexOf(currentStep);
  todo=currentStep;
  if (index + 1 < steps.size())   currentStep=steps.elementAt(index + 1);
  logger.info(todo.toString());
switch (todo.getStep()) {
case PluginStep.STEP_WAIT_TIME:
    todo.setParameter(new Long(waitTime));
  break;
case PluginStep.STEP_CAPTCHA:
todo.setParameter(captchaAddress);
todo.setStatus(PluginStep.STATUS_USER_INPUT);
break;
case PluginStep.STEP_DOWNLOAD:
postParameter.put(""String_Node_Str"",""String_Node_Str"");
postParameter.put(""String_Node_Str"",(String)steps.elementAt(1).getParameter());
postParameter.put(""String_Node_Str"",actionString);
boolean success=prepareDownload(downloadLink);
if (success) todo.setStatus(PluginStep.STATUS_DONE);
 else todo.setStatus(PluginStep.STATUS_ERROR);
break;
}
return todo;
}"
21518,"@Test(timeout=5000) public void retryRecoverableErrors() throws Exception {
  logTestStart();
  String testURI=""String_Node_Str"";
  BodyQName ref=BodyQName.createWithPrefix(testURI,""String_Node_Str"",""String_Node_Str"");
  session.send(ComposableBody.builder().build());
  StubConnection conn=cm.awaitConnection();
  AbstractBody scr=this.getSessionCreationResponse(conn.getRequest().getBody()).setAttribute(Attributes.REQUESTS,""String_Node_Str"").build();
  conn.sendResponse(scr);
  session.drain();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn1=cm.awaitConnection();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn2=cm.awaitConnection();
  String expected2=conn2.getRequest().getBody().toXML();
  conn2.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  final ArrayList<String> orderedResends=new ArrayList<String>();
  session.addBOSHClientRequestListener(new BOSHClientRequestListener(){
    public void requestSent(    BOSHMessageEvent event){
synchronized (orderedResends) {
        String actual=event.getBody().toXML();
        orderedResends.add(actual);
        orderedResends.notify();
      }
    }
  }
);
  String expected1=conn1.getRequest().getBody().toXML();
  conn1.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(Attributes.TYPE,""String_Node_Str"").setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual1=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual2=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
synchronized (orderedResends) {
    while (orderedResends.size() < 2) {
      orderedResends.wait();
    }
  }
  assertEquals(expected1,orderedResends.get(0));
  assertEquals(expected2,orderedResends.get(1));
  if (!(expected1.equals(actual1) && expected2.equals(actual2)) && !(expected1.equals(actual2) && expected2.equals(actual1))) {
    fail(""String_Node_Str"" + expected1 + ""String_Node_Str""+ expected2+ ""String_Node_Str""+ actual1+ ""String_Node_Str""+ actual2+ ""String_Node_Str"");
  }
  session.drain();
}","public void retryRecoverableErrors(boolean http10) throws Exception {
  logTestStart();
  String testURI=""String_Node_Str"";
  BodyQName ref=BodyQName.createWithPrefix(testURI,""String_Node_Str"",""String_Node_Str"");
  session.send(ComposableBody.builder().build());
  StubConnection conn=cm.awaitConnection();
  AbstractBody scr=this.getSessionCreationResponse(conn.getRequest().getBody()).setAttribute(Attributes.REQUESTS,""String_Node_Str"").build();
  if (http10)   conn.forceHTTP1();
  conn.sendResponse(scr);
  session.drain();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn1=cm.awaitConnection();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn2=cm.awaitConnection();
  String expected2=conn2.getRequest().getBody().toXML();
  if (http10) {
    conn2.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  }
  final ArrayList<String> orderedResends=new ArrayList<String>();
  session.addBOSHClientRequestListener(new BOSHClientRequestListener(){
    public void requestSent(    BOSHMessageEvent event){
synchronized (orderedResends) {
        String actual=event.getBody().toXML();
        orderedResends.add(actual);
        orderedResends.notify();
      }
    }
  }
);
  String expected1=conn1.getRequest().getBody().toXML();
  conn1.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(Attributes.TYPE,""String_Node_Str"").setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual1=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual2=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
synchronized (orderedResends) {
    while (orderedResends.size() < 2) {
      orderedResends.wait();
    }
  }
  assertEquals(expected1,orderedResends.get(0));
  assertEquals(expected2,orderedResends.get(1));
  if (!(expected1.equals(actual1) && expected2.equals(actual2)) && !(expected1.equals(actual2) && expected2.equals(actual1))) {
    fail(""String_Node_Str"" + expected1 + ""String_Node_Str""+ expected2+ ""String_Node_Str""+ actual1+ ""String_Node_Str""+ actual2+ ""String_Node_Str"");
  }
  session.drain();
}"
21519,"private ResponseData readRequest() throws IOException {
  int lastSearchPos=0;
  String headers=null;
  while (true) {
    for (int i=lastSearchPos; i < inputBufferAvail - 3; ++i) {
      if (inputBuffer[i + 0] == '\r' && inputBuffer[i + 1] == '\n' && inputBuffer[i + 2] == '\r' && inputBuffer[i + 3] == '\n') {
        headers=makeString(inputBuffer,0,i);
        inputBufferPosition=i + 4;
        break;
      }
      if (inputBuffer[i + 0] == '\n' && inputBuffer[i + 1] == '\n') {
        headers=makeString(inputBuffer,0,i);
        inputBufferPosition=i + 2;
        break;
      }
    }
    if (inputBufferPosition != 0)     break;
    lastSearchPos=inputBufferAvail > 3 ? inputBufferAvail - 3 : 0;
    if (!readDataIntoBuffer())     throw new IOException(""String_Node_Str"" + inputBuffer.length + ""String_Node_Str"");
  }
  ResponseData response=new ResponseData();
  parseResponseHeaders(headers,response);
  int contentLength=-1;
  try {
    String value=response.getResponseHeader(""String_Node_Str"");
    if (value.length() > 0)     contentLength=Integer.parseInt(value);
  }
 catch (  NumberFormatException e) {
    throw new IOException(""String_Node_Str"");
  }
  if (contentLength != -1) {
    response.data=new byte[contentLength];
    readDataBlocking(response.data,contentLength,false);
  }
 else   if (response.getResponseHeader(""String_Node_Str"").equals(""String_Node_Str"")) {
    response.data=readChunkedBlocking();
  }
 else {
    response.majorVersion=1;
    response.minorVersion=0;
    response.data=readUntilEOF();
  }
  return response;
}","private ResponseData readRequest() throws IOException {
  int lastSearchPos=inputBufferPosition;
  String headers=null;
  while (true) {
    boolean found=false;
    for (int i=lastSearchPos; i < inputBufferAvail; ++i) {
      if (i + 3 < inputBufferAvail && inputBuffer[i + 0] == '\r' && inputBuffer[i + 1] == '\n' && inputBuffer[i + 2] == '\r' && inputBuffer[i + 3] == '\n') {
        headers=makeString(inputBuffer,inputBufferPosition,i - inputBufferPosition);
        inputBufferPosition=i + 4;
        found=true;
        break;
      }
      if (i + 1 < inputBufferAvail && inputBuffer[i + 0] == '\n' && inputBuffer[i + 1] == '\n') {
        headers=makeString(inputBuffer,inputBufferPosition,i - inputBufferPosition);
        inputBufferPosition=i + 2;
        found=true;
        break;
      }
    }
    if (found)     break;
    lastSearchPos=inputBufferAvail > 3 ? inputBufferAvail - 3 : 0;
    if (!readDataIntoBuffer())     throw new IOException(""String_Node_Str"" + inputBuffer.length + ""String_Node_Str"");
  }
  ResponseData response=new ResponseData();
  parseResponseHeaders(headers,response);
  int contentLength=-1;
  try {
    String value=response.getResponseHeader(""String_Node_Str"");
    if (value.length() > 0)     contentLength=Integer.parseInt(value);
  }
 catch (  NumberFormatException e) {
    throw new IOException(""String_Node_Str"");
  }
  if (contentLength != -1) {
    response.data=new byte[contentLength];
    readDataBlocking(response.data,contentLength,false);
  }
 else   if (response.getResponseHeader(""String_Node_Str"").equals(""String_Node_Str"")) {
    response.data=readChunkedBlocking();
  }
 else {
    response.majorVersion=1;
    response.minorVersion=0;
    response.data=readUntilEOF();
  }
  return response;
}"
21520,"@Test(timeout=5000) public void retryRecoverableErrors() throws Exception {
  logTestStart();
  String testURI=""String_Node_Str"";
  BodyQName ref=BodyQName.createWithPrefix(testURI,""String_Node_Str"",""String_Node_Str"");
  session.send(ComposableBody.builder().build());
  StubConnection conn=cm.awaitConnection();
  AbstractBody scr=ComposableBody.builder().setAttribute(Attributes.SID,""String_Node_Str"").setAttribute(Attributes.WAIT,""String_Node_Str"").setAttribute(Attributes.REQUESTS,""String_Node_Str"").build();
  conn.sendResponse(scr);
  session.drain();
  session.addBOSHClientRequestListener(new BOSHClientRequestListener(){
    public void requestSent(    BOSHMessageEvent event){
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException intx) {
      }
    }
  }
);
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn1=cm.awaitConnection();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn2=cm.awaitConnection();
  String expected2=conn2.getRequest().getBody().toXML();
  conn2.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  String expected1=conn1.getRequest().getBody().toXML();
  conn1.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(Attributes.TYPE,""String_Node_Str"").setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual1=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  assertEquals(expected1,actual1);
  conn=cm.awaitConnection();
  String actual2=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  assertEquals(expected2,actual2);
  session.drain();
}","@Test(timeout=5000) public void retryRecoverableErrors() throws Exception {
  logTestStart();
  String testURI=""String_Node_Str"";
  BodyQName ref=BodyQName.createWithPrefix(testURI,""String_Node_Str"",""String_Node_Str"");
  session.send(ComposableBody.builder().build());
  StubConnection conn=cm.awaitConnection();
  AbstractBody scr=this.getSessionCreationResponse(conn.getRequest().getBody()).setAttribute(Attributes.REQUESTS,""String_Node_Str"").build();
  conn.sendResponse(scr);
  session.drain();
  session.addBOSHClientRequestListener(new BOSHClientRequestListener(){
    public void requestSent(    BOSHMessageEvent event){
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException intx) {
      }
    }
  }
);
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn1=cm.awaitConnection();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn2=cm.awaitConnection();
  String expected2=conn2.getRequest().getBody().toXML();
  conn2.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  String expected1=conn1.getRequest().getBody().toXML();
  conn1.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(Attributes.TYPE,""String_Node_Str"").setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual1=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  assertEquals(expected1,actual1);
  conn=cm.awaitConnection();
  String actual2=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  assertEquals(expected2,actual2);
  session.drain();
}"
21521,"@Test(timeout=5000) public void retryRecoverableErrors() throws Exception {
  logTestStart();
  String testURI=""String_Node_Str"";
  BodyQName ref=BodyQName.createWithPrefix(testURI,""String_Node_Str"",""String_Node_Str"");
  session.send(ComposableBody.builder().build());
  StubConnection conn=cm.awaitConnection();
  AbstractBody scr=this.getSessionCreationResponse(conn.getRequest().getBody()).setAttribute(Attributes.REQUESTS,""String_Node_Str"").build();
  conn.sendResponse(scr);
  session.drain();
  session.addBOSHClientRequestListener(new BOSHClientRequestListener(){
    public void requestSent(    BOSHMessageEvent event){
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException intx) {
      }
    }
  }
);
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn1=cm.awaitConnection();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn2=cm.awaitConnection();
  String expected2=conn2.getRequest().getBody().toXML();
  conn2.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  String expected1=conn1.getRequest().getBody().toXML();
  conn1.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(Attributes.TYPE,""String_Node_Str"").setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual1=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  assertEquals(expected1,actual1);
  conn=cm.awaitConnection();
  String actual2=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  assertEquals(expected2,actual2);
  session.drain();
}","@Test(timeout=5000) public void retryRecoverableErrors() throws Exception {
  logTestStart();
  String testURI=""String_Node_Str"";
  BodyQName ref=BodyQName.createWithPrefix(testURI,""String_Node_Str"",""String_Node_Str"");
  session.send(ComposableBody.builder().build());
  StubConnection conn=cm.awaitConnection();
  AbstractBody scr=this.getSessionCreationResponse(conn.getRequest().getBody()).setAttribute(Attributes.REQUESTS,""String_Node_Str"").build();
  conn.sendResponse(scr);
  session.drain();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn1=cm.awaitConnection();
  session.send(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  StubConnection conn2=cm.awaitConnection();
  String expected2=conn2.getRequest().getBody().toXML();
  conn2.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  final ArrayList<String> orderedResends=new ArrayList<String>();
  session.addBOSHClientRequestListener(new BOSHClientRequestListener(){
    public void requestSent(    BOSHMessageEvent event){
synchronized (orderedResends) {
        String actual=event.getBody().toXML();
        orderedResends.add(actual);
        orderedResends.notify();
      }
    }
  }
);
  String expected1=conn1.getRequest().getBody().toXML();
  conn1.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(Attributes.TYPE,""String_Node_Str"").setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual1=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
  conn=cm.awaitConnection();
  String actual2=conn.getRequest().getBody().toXML();
  conn.sendResponse(ComposableBody.builder().setNamespaceDefinition(""String_Node_Str"",testURI).setAttribute(ref,""String_Node_Str"").build());
synchronized (orderedResends) {
    while (orderedResends.size() < 2) {
      orderedResends.wait();
    }
  }
  assertEquals(expected1,orderedResends.get(0));
  assertEquals(expected2,orderedResends.get(1));
  if (!(expected1.equals(actual1) && expected2.equals(actual2)) && !(expected1.equals(actual2) && expected2.equals(actual1))) {
    fail(""String_Node_Str"" + expected1 + ""String_Node_Str""+ expected2+ ""String_Node_Str""+ actual1+ ""String_Node_Str""+ actual2+ ""String_Node_Str"");
  }
  session.drain();
}"
21522,"public void requestSent(BOSHMessageEvent event){
  try {
    Thread.sleep(10);
  }
 catch (  InterruptedException intx) {
  }
}","public void requestSent(BOSHMessageEvent event){
synchronized (orderedResends) {
    String actual=event.getBody().toXML();
    orderedResends.add(actual);
    orderedResends.notify();
  }
}"
21523,"/** 
 * Main entry. See -help for options.
 * @param args
 * @throws Exception
 */
public static void main(String args[]) throws Exception {
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  Set resources=new HashSet();
  root=rootFile.toURL().toString();
  repository=new RepositoryImpl(rootFile.toURL());
  for (int i=0; i < args.length; i++)   try {
    if (args[i].startsWith(""String_Node_Str""))     name=args[++i];
 else     if (args[i].startsWith(""String_Node_Str"")) {
      repositoryFileName=args[++i];
      repository=new RepositoryImpl(new File(repositoryFileName).getAbsoluteFile().toURL());
    }
 else     if (args[i].startsWith(""String_Node_Str""))     quiet=true;
 else     if (args[i].startsWith(""String_Node_Str""))     urlTemplate=args[++i];
 else     if (args[i].startsWith(""String_Node_Str"")) {
      licenseURL=new URL(new File(""String_Node_Str"").toURL(),args[++i]);
    }
 else     if (args[i].startsWith(""String_Node_Str"")) {
      System.err.println(""String_Node_Str"");
    }
 else {
      recurse(resources,new File(args[i]));
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + args[i] + ""String_Node_Str""+ e.getMessage());
    e.printStackTrace();
  }
  List sorted=new ArrayList(resources);
  Collections.sort(sorted,new Comparator(){
    public int compare(    Object r1,    Object r2){
      String s1=getName((ResourceImpl)r1);
      String s2=getName((ResourceImpl)r2);
      return s1.compareTo(s2);
    }
  }
);
  Tag tag=doIndex(sorted);
  if (repositoryFileName != null) {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    PrintWriter pw=new PrintWriter(new OutputStreamWriter(out,""String_Node_Str""));
    pw.println(""String_Node_Str"");
    pw.println(""String_Node_Str"");
    tag.print(0,pw);
    pw.close();
    byte buffer[]=out.toByteArray();
    String name=""String_Node_Str"";
    FileOutputStream fout=new FileOutputStream(repositoryFileName);
    if (repositoryFileName.endsWith(""String_Node_Str"")) {
      ZipOutputStream zip=new ZipOutputStream(fout);
      CRC32 checksum=new CRC32();
      checksum.update(buffer);
      ZipEntry ze=new ZipEntry(name);
      ze.setSize(buffer.length);
      ze.setCrc(checksum.getValue());
      zip.putNextEntry(ze);
      zip.write(buffer,0,buffer.length);
      zip.closeEntry();
      zip.close();
    }
 else {
      fout.write(buffer);
    }
    fout.close();
  }
  if (!quiet) {
    PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.out));
    pw.println(""String_Node_Str"");
    pw.println(""String_Node_Str"");
    tag.print(0,pw);
    pw.close();
  }
}","/** 
 * Main entry. See -help for options.
 * @param args
 * @throws Exception
 */
public static void main(String args[]) throws Exception {
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  Set resources=new HashSet();
  root=rootFile.toURL().toString();
  repository=new RepositoryImpl(rootFile.toURL());
  for (int i=0; i < args.length; i++)   try {
    if (args[i].startsWith(""String_Node_Str""))     name=args[++i];
 else     if (args[i].startsWith(""String_Node_Str"")) {
      repositoryFileName=args[++i];
      repository=new RepositoryImpl(new File(repositoryFileName).getAbsoluteFile().toURL());
    }
 else     if (args[i].startsWith(""String_Node_Str""))     quiet=true;
 else     if (args[i].startsWith(""String_Node_Str""))     rootFile=new File(args[++i]);
 else     if (args[i].startsWith(""String_Node_Str""))     urlTemplate=args[++i];
 else     if (args[i].startsWith(""String_Node_Str"")) {
      licenseURL=new URL(new File(""String_Node_Str"").toURL(),args[++i]);
    }
 else     if (args[i].startsWith(""String_Node_Str"")) {
      System.err.println(""String_Node_Str"");
    }
 else {
      recurse(resources,new File(args[i]));
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + args[i] + ""String_Node_Str""+ e.getMessage());
    e.printStackTrace();
  }
  List sorted=new ArrayList(resources);
  Collections.sort(sorted,new Comparator(){
    public int compare(    Object r1,    Object r2){
      String s1=getName((ResourceImpl)r1);
      String s2=getName((ResourceImpl)r2);
      return s1.compareTo(s2);
    }
  }
);
  Tag tag=doIndex(sorted);
  if (repositoryFileName != null) {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    PrintWriter pw=new PrintWriter(new OutputStreamWriter(out,""String_Node_Str""));
    pw.println(""String_Node_Str"");
    pw.println(""String_Node_Str"");
    tag.print(0,pw);
    pw.close();
    byte buffer[]=out.toByteArray();
    String name=""String_Node_Str"";
    FileOutputStream fout=new FileOutputStream(repositoryFileName);
    if (repositoryFileName.endsWith(""String_Node_Str"")) {
      ZipOutputStream zip=new ZipOutputStream(fout);
      CRC32 checksum=new CRC32();
      checksum.update(buffer);
      ZipEntry ze=new ZipEntry(name);
      ze.setSize(buffer.length);
      ze.setCrc(checksum.getValue());
      zip.putNextEntry(ze);
      zip.write(buffer,0,buffer.length);
      zip.closeEntry();
      zip.close();
    }
 else {
      fout.write(buffer);
    }
    fout.close();
  }
  if (!quiet) {
    PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.out));
    pw.println(""String_Node_Str"");
    pw.println(""String_Node_Str"");
    tag.print(0,pw);
    pw.close();
  }
}"
21524,"void doFragment(ResourceImpl resource){
  ManifestEntry entry=manifest.getHost();
  if (entry == null) {
    return;
  }
 else {
    RequirementImpl r=new RequirementImpl(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(""String_Node_Str"");
    sb.append(entry.getName());
    sb.append(""String_Node_Str"");
    sb.append(entry.getVersion());
    sb.append(""String_Node_Str"");
    r.setFilter(sb.toString());
    r.setComment(""String_Node_Str"" + entry.getName());
    r.setExtend(true);
    r.setOptional(false);
    r.setMultiple(false);
    resource.addRequirement(r);
    CapabilityImpl capability=new CapabilityImpl(""String_Node_Str"");
    capability.addProperty(""String_Node_Str"",entry.getName());
    capability.addProperty(""String_Node_Str"",entry.getVersion());
    resource.addCapability(capability);
  }
}","void doFragment(ResourceImpl resource){
  ManifestEntry entry=manifest.getHost();
  if (entry == null) {
    return;
  }
 else {
    RequirementImpl r=new RequirementImpl(""String_Node_Str"");
    StringBuffer sb=new StringBuffer();
    sb.append(""String_Node_Str"");
    sb.append(entry.getName());
    sb.append(""String_Node_Str"");
    appendVersion(sb,entry.getVersion());
    sb.append(""String_Node_Str"");
    r.setFilter(sb.toString());
    r.setComment(""String_Node_Str"" + entry.getName());
    r.setExtend(true);
    r.setOptional(false);
    r.setMultiple(false);
    resource.addRequirement(r);
    CapabilityImpl capability=new CapabilityImpl(""String_Node_Str"");
    capability.addProperty(""String_Node_Str"",entry.getName());
    capability.addProperty(""String_Node_Str"",entry.getVersion());
    resource.addCapability(capability);
  }
}"
21525,"CapabilityImpl createCapability(String name,ManifestEntry pack){
  CapabilityImpl capability=new CapabilityImpl(name);
  capability.addProperty(name,pack.getName());
  capability.addProperty(""String_Node_Str"",pack.getVersion());
  Map attributes=pack.getAttributes();
  if (attributes != null)   for (Iterator at=attributes.keySet().iterator(); at.hasNext(); ) {
    String key=(String)at.next();
    if (key.equalsIgnoreCase(""String_Node_Str"") || key.equalsIgnoreCase(""String_Node_Str""))     continue;
 else {
      Object value=attributes.get(key);
      capability.addProperty(key,value);
    }
  }
  return capability;
}","CapabilityImpl createCapability(String name,ManifestEntry pack){
  CapabilityImpl capability=new CapabilityImpl(name);
  capability.addProperty(name,pack.getName());
  capability.addProperty(""String_Node_Str"",pack.getVersion());
  Map attributes=pack.getAttributes();
  if (attributes != null)   for (Iterator at=attributes.keySet().iterator(); at.hasNext(); ) {
    String key=(String)at.next();
    if (key.equalsIgnoreCase(""String_Node_Str"") || key.equalsIgnoreCase(""String_Node_Str""))     continue;
 else {
      Object value=attributes.get(key);
      capability.addProperty(key,value);
    }
  }
  Map directives=pack.getDirectives();
  if (directives != null)   for (Iterator at=directives.keySet().iterator(); at.hasNext(); ) {
    String key=(String)at.next();
    Object value=directives.get(key);
    capability.addProperty(key,value);
  }
  return capability;
}"
21526,"void createImportFilter(RequirementImpl req,String name,ManifestEntry pack){
  StringBuffer filter=new StringBuffer();
  filter.append(""String_Node_Str"");
  filter.append(name);
  filter.append(""String_Node_Str"");
  filter.append(pack.getName());
  filter.append(""String_Node_Str"");
  VersionRange version=pack.getVersion();
  if (version != null) {
    if (version.isRange()) {
      filter.append(""String_Node_Str"");
      filter.append(""String_Node_Str"");
      if (version.includeLow())       filter.append(""String_Node_Str"");
      filter.append(version.low);
      filter.append(""String_Node_Str"");
      filter.append(""String_Node_Str"");
      filter.append(""String_Node_Str"");
      if (version.includeHigh())       filter.append(""String_Node_Str"");
      filter.append(version.high);
      filter.append(""String_Node_Str"");
    }
 else {
      filter.append(""String_Node_Str"");
      filter.append(pack.getVersion());
      filter.append(""String_Node_Str"");
    }
  }
  Map attributes=pack.getAttributes();
  Set attrs=doImportPackageAttributes(req,filter,attributes);
  if (attrs.size() > 0) {
    String del=""String_Node_Str"";
    filter.append(""String_Node_Str"");
    for (Iterator i=attrs.iterator(); i.hasNext(); ) {
      filter.append(del);
      filter.append(i.next());
      del=""String_Node_Str"";
    }
    filter.append(""String_Node_Str"");
  }
  filter.append(""String_Node_Str"");
  req.setFilter(filter.toString());
}","void createImportFilter(RequirementImpl req,String name,ManifestEntry pack){
  StringBuffer filter=new StringBuffer();
  filter.append(""String_Node_Str"");
  filter.append(name);
  filter.append(""String_Node_Str"");
  filter.append(pack.getName());
  filter.append(""String_Node_Str"");
  appendVersion(filter,pack.getVersion());
  Map attributes=pack.getAttributes();
  Set attrs=doImportPackageAttributes(req,filter,attributes);
  if (attrs.size() > 0) {
    String del=""String_Node_Str"";
    filter.append(""String_Node_Str"");
    for (Iterator i=attrs.iterator(); i.hasNext(); ) {
      filter.append(del);
      filter.append(i.next());
      del=""String_Node_Str"";
    }
    filter.append(""String_Node_Str"");
  }
  filter.append(""String_Node_Str"");
  req.setFilter(filter.toString());
}"
21527,"public static Tag toXML(Capability capability){
  Tag tag=new Tag(""String_Node_Str"");
  tag.addAttribute(""String_Node_Str"",capability.getName());
  Map properties=capability.getProperties();
  for (Iterator k=properties.keySet().iterator(); k.hasNext(); ) {
    String key=(String)k.next();
    List values=(List)properties.get(key);
    for (Iterator v=values.iterator(); v.hasNext(); ) {
      Object value=v.next();
      Tag p=new Tag(""String_Node_Str"");
      tag.addContent(p);
      p.addAttribute(""String_Node_Str"",key);
      if (value != null)       p.addAttribute(""String_Node_Str"",value.toString());
 else       System.out.println(""String_Node_Str"" + key);
      String type=null;
      if (value instanceof Number)       type=""String_Node_Str"";
 else       if (value.getClass() == VersionRange.class)       type=""String_Node_Str"";
      if (type != null)       p.addAttribute(""String_Node_Str"",type);
    }
  }
  return tag;
}","public static Tag toXML(Capability capability){
  Tag tag=new Tag(""String_Node_Str"");
  tag.addAttribute(""String_Node_Str"",capability.getName());
  Map properties=capability.getProperties();
  for (Iterator k=properties.keySet().iterator(); k.hasNext(); ) {
    String key=(String)k.next();
    List values=(List)properties.get(key);
    for (Iterator v=values.iterator(); v.hasNext(); ) {
      Object value=v.next();
      Tag p=new Tag(""String_Node_Str"");
      tag.addContent(p);
      p.addAttribute(""String_Node_Str"",key);
      if (value != null) {
        p.addAttribute(""String_Node_Str"",valueString(value));
        String type=null;
        if (value instanceof Number)         type=""String_Node_Str"";
 else         if (value.getClass() == VersionRange.class)         type=""String_Node_Str"";
 else         if (value.getClass().isArray()) {
          type=""String_Node_Str"";
        }
        if (type != null)         p.addAttribute(""String_Node_Str"",type);
      }
 else       System.out.println(""String_Node_Str"" + key);
    }
  }
  return tag;
}"
21528,"public List getEntries(String line) throws IOException {
  List v=new Vector();
  Set aliases=new HashSet();
  StreamTokenizer st=getStreamTokenizer(line);
  do {
    Parameter parameter=getParameter(st);
    ManifestEntry p=new ManifestEntry(parameter.key);
    while (st.ttype == ';') {
      parameter=getParameter(st);
      if (parameter.value == null) {
        aliases.add(parameter.key);
      }
 else {
        if (parameter.type == Parameter.ATTRIBUTE)         p.addParameter(parameter);
 else         p.addParameter(parameter);
      }
    }
    v.add(p);
    for (Iterator a=aliases.iterator(); a.hasNext(); ) {
      v.add(p.getAlias((String)a.next()));
    }
  }
 while (st.ttype == ',');
  return v;
}","public List getEntries(String line) throws IOException {
  List v=new Vector();
  Set aliases=new HashSet();
  StreamTokenizer st=getStreamTokenizer(line);
  do {
    Parameter parameter=getParameter(st);
    ManifestEntry p=new ManifestEntry(parameter.key);
    while (st.ttype == ';') {
      parameter=getParameter(st);
      if (parameter.value == null) {
        aliases.add(parameter.key);
      }
 else {
        if (parameter.type == Parameter.ATTRIBUTE)         p.addParameter(parameter);
 else         if (parameter.type == Parameter.DIRECTIVE)         p.addParameter(parameter);
 else         p.addParameter(parameter);
      }
    }
    v.add(p);
    for (Iterator a=aliases.iterator(); a.hasNext(); ) {
      v.add(p.getAlias((String)a.next()));
    }
  }
 while (st.ttype == ',');
  return v;
}"
21529,"public VersionRange(String string){
  string=string.trim();
  Matcher m=RANGE.matcher(string);
  if (m.matches()) {
    start=m.group(1).charAt(0);
    low=new Version(m.group(2));
    high=new Version(m.group(6));
    end=m.group(10).charAt(0);
    if (low.compareTo(high) >= 0)     throw new IllegalArgumentException(""String_Node_Str"" + low + ""String_Node_Str""+ high);
  }
 else   high=low=new Version(string);
}","public VersionRange(String string){
  string=string.trim();
  Matcher m=RANGE.matcher(string);
  if (m.matches()) {
    start=m.group(1).charAt(0);
    low=new Version(m.group(2));
    high=new Version(m.group(6));
    end=m.group(10).charAt(0);
    if (low.compareTo(high) > 0)     throw new IllegalArgumentException(""String_Node_Str"" + low + ""String_Node_Str""+ high);
  }
 else   high=low=new Version(string);
}"
21530,"private void checkDatabase(){
  Cursor mCursor=mDatabaseHelper.getDecision(mApplicationName);
  if (mCursor.getCount() == 0) {
    Log.i(TAG,""String_Node_Str"");
    ruleNotification();
  }
 else {
    Log.i(TAG,""String_Node_Str"");
    mCursor.moveToFirst();
    boolean action=false;
    boolean endLoop=false;
    while (!endLoop) {
      if (mApplicationName.equals(mCursor.getString(1)) && mCursor.getString(2).equals(mOFMatch.getDataLayerType()) && mCursor.getString(3).equals(mOFMatch.getNetworkProtocol())&& mCursor.getString(4).equals(mOFMatch.getTransportDestination())&& mCursor.getString(5).equals(mOFMatch.getTransportSource())&& mCursor.getString(6).equals(mOFMatch.getInputPort())) {
        if (mCursor.getString(7).equals(""String_Node_Str"")) {
          action=true;
        }
      }
      if (mCursor.isAfterLast() == false) {
        mCursor.moveToNext();
      }
 else {
        endLoop=true;
      }
    }
    sendFirewallResponse(action,mInquiry);
  }
  mCursor.close();
}","private void checkDatabase(){
  Cursor mCursor=mDatabaseHelper.getDecision(mApplicationName);
  if (mCursor.getCount() == 0) {
    Log.i(TAG,""String_Node_Str"");
    ruleNotification();
  }
 else {
    Log.i(TAG,""String_Node_Str"");
    mCursor.moveToFirst();
    boolean action=false;
    boolean endLoop=false;
    while (!endLoop) {
      if (mApplicationName.equals(mCursor.getString(1)) && mCursor.getString(2).equals(mOFMatch.getDataLayerType()) && mCursor.getString(3).equals(mOFMatch.getNetworkProtocol())&& mCursor.getString(4).equals(mOFMatch.getTransportDestination())&& mCursor.getString(5).equals(mOFMatch.getTransportSource())&& mCursor.getString(6).equals(mOFMatch.getInputPort())) {
        if (mCursor.getString(7).equals(""String_Node_Str"")) {
          action=true;
        }
      }
      mCursor.moveToNext();
      if (mCursor.isAfterLast() == true) {
        endLoop=true;
      }
    }
    sendFirewallResponse(action,mInquiry);
  }
  mCursor.close();
}"
21531,"public void run(){
  this.con.user=con.jAuctionServer.authenticateUser(username,password);
  String auth_key=null;
  if (this.con.user != null) {
    this.con.user.con=this.con;
    auth_key=con.user.getAuthKey();
  }
  HashMap data=new HashMap();
  data.put(""String_Node_Str"",auth_key);
  data.put(""String_Node_Str"",con.user.getId());
  con.respond(responseName(),data);
}","public void run(){
  this.con.user=con.jAuctionServer.authenticateUser(username,password);
  String auth_key=null;
  HashMap data=new HashMap();
  if (this.con.user != null) {
    this.con.user.con=this.con;
    auth_key=con.user.getAuthKey();
    data.put(""String_Node_Str"",con.user.getId());
  }
  data.put(""String_Node_Str"",auth_key);
  con.respond(responseName(),data);
}"
21532,"protected void onmnStartClick(){
  if (!logcat.isActive()) {
    logcat.stop();
    mnStart.setText(""String_Node_Str"");
    return;
  }
  try {
    if (!logcat.start()) {
      MsgBox.show(shlYetAnotherLogcat,""String_Node_Str"",""String_Node_Str"",SWT.ICON_ERROR);
      return;
    }
  }
 catch (  Exception e) {
    MsgBox.show(shlYetAnotherLogcat,""String_Node_Str"",e.getMessage(),SWT.ICON_ERROR);
    return;
  }
  mnStart.setText(""String_Node_Str"");
}","protected void onmnStartClick(){
  if (logcat.isActive()) {
    logcat.stop();
    mnStart.setText(""String_Node_Str"");
    return;
  }
  try {
    if (!logcat.start()) {
      MsgBox.show(shlYetAnotherLogcat,""String_Node_Str"",""String_Node_Str"",SWT.ICON_ERROR);
      return;
    }
  }
 catch (  Exception e) {
    MsgBox.show(shlYetAnotherLogcat,""String_Node_Str"",e.getMessage(),SWT.ICON_ERROR);
    return;
  }
  mnStart.setText(""String_Node_Str"");
}"
21533,"protected void onmnNewFilterClick(){
  FilterList filterList;
  String name;
  boolean linkState;
  UserFilterObject userFilter;
  TabContent filterLoggerUi;
  AddNewFilterDialog dlg=new AddNewFilterDialog(shlYetAnotherLogcat,SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
  filterList=(FilterList)dlg.open();
  if (filterList == null)   return;
  name=dlg.getFilterName();
  linkState=dlg.getLinkState();
  userFilter=new UserFilterObject(filterList,name,linkState);
  userFilters.add(userFilter);
  filterLoggerUi=new TabContent(tbTabContainer,name,true);
  UserFilterObject.saveFilters(userFilters,""String_Node_Str"");
  try {
    logcat.addSlot(name,filterList).linkUi(filterLoggerUi);
  }
 catch (  Exception e) {
    Log.write(e.getMessage());
    e.printStackTrace(Log.getPrintStreamInstance());
  }
}","protected void onmnNewFilterClick(){
  FilterList filterList;
  String name;
  boolean linkState;
  UserFilterObject userFilter;
  TabContent filterLoggerUi;
  AddNewFilterDialog dlg=new AddNewFilterDialog(shlYetAnotherLogcat,SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
  filterList=(FilterList)dlg.open();
  if (filterList == null)   return;
  name=dlg.getFilterName();
  linkState=dlg.getLinkState();
  userFilter=new UserFilterObject(filterList,name,linkState);
  userFilters.add(userFilter);
  filterLoggerUi=new TabContent(tbTabContainer,name,true);
  UserFilterObject.saveFilters(userFilters,""String_Node_Str"");
  try {
    logcat.addSlot(name,filterList,filterLoggerUi);
  }
 catch (  Exception e) {
    Log.write(e.getMessage());
    e.printStackTrace(Log.getPrintStreamInstance());
  }
}"
21534,"protected void createContents(){
  shlYetAnotherLogcat=new Shell();
  shlYetAnotherLogcat.addShellListener(new ShellAdapter(){
    @Override public void shellClosed(    ShellEvent e){
      if (logcat.isActive()) {
        logcat.stop();
        try {
          logcat.dispose();
        }
 catch (        Exception e1) {
          Log.write(e1.getMessage());
        }
      }
      Log.finish();
    }
  }
);
  shlYetAnotherLogcat.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      if (tbTabContainer != null) {
        tbTabContainer.setSize(shlYetAnotherLogcat.getSize().x - 40,shlYetAnotherLogcat.getSize().y - 80);
      }
    }
  }
);
  shlYetAnotherLogcat.setSize(450,300);
  shlYetAnotherLogcat.setText(""String_Node_Str"");
  Menu menu=new Menu(shlYetAnotherLogcat,SWT.BAR);
  shlYetAnotherLogcat.setMenuBar(menu);
  MenuItem mnMainMenu=new MenuItem(menu,SWT.CASCADE);
  mnMainMenu.setText(""String_Node_Str"");
  Menu menu_1=new Menu(mnMainMenu);
  mnMainMenu.setMenu(menu_1);
  MenuItem mnAddFilter=new MenuItem(menu_1,SWT.NONE);
  mnAddFilter.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onmnNewFilterClick();
    }
  }
);
  mnAddFilter.setText(""String_Node_Str"");
  MenuItem mnFilters=new MenuItem(menu_1,SWT.NONE);
  mnFilters.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onmnFilterManagerClick();
    }
  }
);
  mnFilters.setText(""String_Node_Str"");
  MenuItem mnSystemMenu=new MenuItem(menu,SWT.CASCADE);
  mnSystemMenu.setText(""String_Node_Str"");
  Menu menu_2=new Menu(mnSystemMenu);
  mnSystemMenu.setMenu(menu_2);
  mnStart=new MenuItem(menu_2,SWT.NONE);
  mnStart.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onmnStartClick();
    }
  }
);
  mnStart.setText(""String_Node_Str"");
  MenuItem mnSetAdb=new MenuItem(menu_2,SWT.NONE);
  mnSetAdb.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onmnSetAdbClick();
    }
  }
);
  mnSetAdb.setText(""String_Node_Str"");
  MenuItem mnAboutMenu=new MenuItem(menu,SWT.NONE);
  mnAboutMenu.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MessageBox msg=new MessageBox(shlYetAnotherLogcat);
      msg.setText(""String_Node_Str"");
      msg.setMessage(""String_Node_Str"");
      msg.open();
    }
  }
);
  mnAboutMenu.setText(""String_Node_Str"");
  tbTabContainer=new TabFolder(shlYetAnotherLogcat,SWT.NONE);
  tbTabContainer.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      onTabContainerResized();
    }
  }
);
  tbTabContainer.setBounds(10,10,403,222);
  userFilters=new IterableArrayList<UserFilterObject>();
  setting=Setting.loadSetting();
  logcat=new LogcatManager();
  logcat.setAdb(setting.adbExecutableFile);
  userFilters=UserFilterObject.loadFilters(""String_Node_Str"");
  TabContent allLog=new TabContent(tbTabContainer,""String_Node_Str"");
  try {
    logcat.addSlot(""String_Node_Str"",null).linkUi(allLog);
  }
 catch (  Exception e) {
    Log.write(e.getMessage());
    e.printStackTrace(Log.getPrintStreamInstance());
  }
  if (userFilters == null) {
    userFilters=new IterableArrayList<UserFilterObject>();
  }
 else {
    TabContent filterTabPage;
    for (    UserFilterObject filter : userFilters) {
      filterTabPage=new TabContent(tbTabContainer,filter.getFilterName());
      try {
        logcat.addSlot(filter.getFilterName(),filter.getFilterList()).linkUi(filterTabPage);
      }
 catch (      Exception e1) {
        Log.write(e1.getMessage());
        e1.printStackTrace(Log.getPrintStreamInstance());
      }
    }
  }
}","protected void createContents(){
  shlYetAnotherLogcat=new Shell();
  shlYetAnotherLogcat.addShellListener(new ShellAdapter(){
    @Override public void shellClosed(    ShellEvent e){
      if (logcat.isActive()) {
        logcat.stop();
        try {
          logcat.dispose();
        }
 catch (        Exception e1) {
          Log.write(e1.getMessage());
        }
      }
      Log.finish();
    }
  }
);
  shlYetAnotherLogcat.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      if (tbTabContainer != null) {
        tbTabContainer.setSize(shlYetAnotherLogcat.getSize().x - 40,shlYetAnotherLogcat.getSize().y - 80);
      }
    }
  }
);
  shlYetAnotherLogcat.setSize(450,300);
  shlYetAnotherLogcat.setText(""String_Node_Str"");
  Menu menu=new Menu(shlYetAnotherLogcat,SWT.BAR);
  shlYetAnotherLogcat.setMenuBar(menu);
  MenuItem mnMainMenu=new MenuItem(menu,SWT.CASCADE);
  mnMainMenu.setText(""String_Node_Str"");
  Menu menu_1=new Menu(mnMainMenu);
  mnMainMenu.setMenu(menu_1);
  MenuItem mnAddFilter=new MenuItem(menu_1,SWT.NONE);
  mnAddFilter.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onmnNewFilterClick();
    }
  }
);
  mnAddFilter.setText(""String_Node_Str"");
  MenuItem mnFilters=new MenuItem(menu_1,SWT.NONE);
  mnFilters.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onmnFilterManagerClick();
    }
  }
);
  mnFilters.setText(""String_Node_Str"");
  MenuItem mnSystemMenu=new MenuItem(menu,SWT.CASCADE);
  mnSystemMenu.setText(""String_Node_Str"");
  Menu menu_2=new Menu(mnSystemMenu);
  mnSystemMenu.setMenu(menu_2);
  mnStart=new MenuItem(menu_2,SWT.NONE);
  mnStart.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onmnStartClick();
    }
  }
);
  mnStart.setText(""String_Node_Str"");
  MenuItem mnSetAdb=new MenuItem(menu_2,SWT.NONE);
  mnSetAdb.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onmnSetAdbClick();
    }
  }
);
  mnSetAdb.setText(""String_Node_Str"");
  MenuItem mnAboutMenu=new MenuItem(menu,SWT.NONE);
  mnAboutMenu.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MessageBox msg=new MessageBox(shlYetAnotherLogcat);
      msg.setText(""String_Node_Str"");
      msg.setMessage(""String_Node_Str"");
      msg.open();
    }
  }
);
  mnAboutMenu.setText(""String_Node_Str"");
  tbTabContainer=new TabFolder(shlYetAnotherLogcat,SWT.NONE);
  tbTabContainer.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      onTabContainerResized();
    }
  }
);
  tbTabContainer.setBounds(10,10,403,222);
  userFilters=new IterableArrayList<UserFilterObject>();
  setting=Setting.loadSetting();
  logcat=new LogcatManager();
  logcat.setAdb(setting.adbExecutableFile);
  userFilters=UserFilterObject.loadFilters(""String_Node_Str"");
  TabContent allLog=new TabContent(tbTabContainer,""String_Node_Str"");
  try {
    logcat.addSlot(""String_Node_Str"",null,allLog);
  }
 catch (  Exception e) {
    Log.write(e.getMessage());
    e.printStackTrace(Log.getPrintStreamInstance());
  }
  if (userFilters == null) {
    userFilters=new IterableArrayList<UserFilterObject>();
  }
 else {
    TabContent filterTabPage;
    for (    UserFilterObject filter : userFilters) {
      filterTabPage=new TabContent(tbTabContainer,filter.getFilterName());
      try {
        logcat.addSlot(filter.getFilterName(),filter.getFilterList(),filterTabPage);
      }
 catch (      Exception e1) {
        Log.write(e1.getMessage());
        e1.printStackTrace(Log.getPrintStreamInstance());
      }
    }
  }
}"
21535,"public FilteredLogSlot addSlot(String name,FilterList list){
  FilteredLogSlot slot=null;
  if (StringHelper.isNullOrEmpty(name))   return null;
  slot=new FilteredLogSlot(name,list);
  slots.add(slot);
  if (slots.getCount() == 1) {
    generalLoggerUi=slot.getLoggerUi();
  }
  return slot;
}","public FilteredLogSlot addSlot(String name,FilterList list,TabContent ui){
  FilteredLogSlot slot=null;
  if (StringHelper.isNullOrEmpty(name))   return null;
  slot=new FilteredLogSlot(name,list);
  try {
    slot.linkUi(ui);
  }
 catch (  Exception e) {
  }
  slots.add(slot);
  if (slots.getCount() == 1) {
    generalLoggerUi=slot.getLoggerUi();
  }
  return slot;
}"
21536,"public boolean tryAdd(LogEntry entry) throws Exception {
  checkDisposed();
  if (filters.match(entry)) {
    loggerUi.writeLog(entry);
    entries.addEntry(entry);
  }
  return true;
}","public boolean tryAdd(LogEntry entry) throws Exception {
  checkDisposed();
  if (filters == null)   return false;
  if (filters.match(entry)) {
    loggerUi.writeLog(entry);
    entries.addEntry(entry);
  }
  return true;
}"
21537,"public static LogEntry parse(String buffer){
  LogEntry log=null;
  char typeId;
  int pid;
  String tag, msg;
  Pattern regex=Pattern.compile(""String_Node_Str"");
  Matcher match=regex.matcher(buffer);
  if (match.find()) {
    if (match.groupCount() == 4) {
      typeId=match.group(1).charAt(0);
      tag=match.group(2).trim();
      try {
        pid=Integer.parseInt(match.group(3).trim());
      }
 catch (      Exception e) {
        return null;
      }
      msg=match.group(4);
      log=new LogEntry(typeId,tag,pid,msg);
    }
  }
  return log;
}","public static LogEntry parse(String buffer){
  LogEntry log=null;
  char typeId;
  int pid;
  String tag, msg;
  Pattern regex=Pattern.compile(""String_Node_Str"");
  Matcher match=regex.matcher(buffer);
  if (match.find()) {
    if (match.groupCount() == 4) {
      typeId=match.group(1).charAt(0);
      tag=match.group(2).trim();
      try {
        pid=Integer.parseInt(match.group(3).trim());
      }
 catch (      Exception e) {
        e.printStackTrace(Log.getPrintStreamInstance());
        return null;
      }
      msg=match.group(4);
      log=new LogEntry(typeId,tag,pid,msg);
    }
  }
  return log;
}"
21538,"private void writeLogToList(LogEntry entry){
  try {
    logList.addItem(getColorForEntry(entry),getLogItemsForLogObject(entry));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void writeLogToList(LogEntry entry){
  if (entry == null)   return;
  try {
    logList.addItem(getColorForEntry(entry),getLogItemsForLogObject(entry));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
21539,"public Object open(){
  createContents();
  shell.open();
  shell.layout();
  Display display=getParent().getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  logcatShell.stopShell();
  return result;
}","public Object open(){
  createContents();
  locateCenter();
  shell.open();
  shell.layout();
  Display display=getParent().getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  logcatShell.stopShell();
  return result;
}"
21540,"public Object open(){
  createContents();
  shlAddANew.open();
  shlAddANew.layout();
  Display display=getParent().getDisplay();
  while (!shlAddANew.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return filters.getCount() == 0 ? null : filters;
}","public Object open(){
  createContents();
  locateCenter();
  shlAddANew.open();
  shlAddANew.layout();
  Display display=getParent().getDisplay();
  while (!shlAddANew.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return filters.getCount() == 0 ? null : filters;
}"
21541,"public Object open(){
  createContents();
  shell.open();
  shell.layout();
  Display display=getParent().getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return result;
}","public Object open(){
  createContents();
  locateCenter();
  shell.open();
  shell.layout();
  Display display=getParent().getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  return result;
}"
21542,"/** 
 * @param < T >
 * @param json
 * @param typeRef
 */
@SuppressWarnings(""String_Node_Str"") public <T>T jsonToObject(final JSonNode json,final TypeRef<T> type){
  final Type clazz=((ParameterizedTypeImpl)type.getClass().getGenericSuperclass()).getActualTypeArguments()[0];
  return (T)this.jsonToObject(json,clazz);
}","/** 
 * @param < T >
 * @param json
 * @param typeRef
 */
@SuppressWarnings(""String_Node_Str"") public <T>T jsonToObject(final JSonNode json,final TypeRef<T> type){
  return (T)this.jsonToObject(json,type.getType());
}"
21543,"public String postPage(final URL url,final String data) throws IOException, InterruptedException {
synchronized (BasicHTTP.CALL_LOCK) {
    OutputStreamWriter writer=null;
    BufferedReader reader=null;
    OutputStream outputStream=null;
    InputStreamReader isr=null;
    try {
      this.connection=HTTPConnectionFactory.createHTTPConnection(url,this.proxy);
      this.connection.setConnectTimeout(this.connectTimeout);
      this.connection.setReadTimeout(this.readTimeout);
      this.connection.setRequestMethod(RequestMethod.POST);
      this.connection.setRequestProperty(""String_Node_Str"",TranslationFactory.getDesiredLanguage());
      this.connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Application.getApplication());
      this.connection.setRequestProperty(HTTPConstants.HEADER_REQUEST_CONTENT_LENGTH,data.getBytes().length + ""String_Node_Str"");
      for (      final Entry<String,String> next : this.requestHeader.entrySet()) {
        this.connection.setRequestProperty(next.getKey(),next.getValue());
      }
      this.connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      int lookupTry=0;
      while (true) {
        try {
          this.connection.connect();
          break;
        }
 catch (        final UnknownHostException e) {
          if (++lookupTry > 3) {
            throw e;
          }
          Thread.sleep(200);
        }
      }
      outputStream=this.connection.getOutputStream();
      writer=new OutputStreamWriter(outputStream);
      writer.write(data);
      writer.flush();
      reader=new BufferedReader(isr=new InputStreamReader(this.connection.getInputStream(),""String_Node_Str""));
      final StringBuilder sb=new StringBuilder();
      String str;
      while ((str=reader.readLine()) != null) {
        if (sb.length() > 0) {
          sb.append(""String_Node_Str"");
        }
        sb.append(str);
      }
      return sb.toString();
    }
  finally {
      try {
        reader.close();
      }
 catch (      final Throwable e) {
      }
      try {
        isr.close();
      }
 catch (      final Throwable e) {
      }
      try {
        writer.close();
      }
 catch (      final Throwable e) {
      }
      try {
        outputStream.close();
      }
 catch (      final Throwable e) {
      }
      try {
        this.connection.disconnect();
      }
 catch (      final Throwable e) {
      }
    }
  }
}","public String postPage(final URL url,final String data) throws IOException, InterruptedException {
synchronized (BasicHTTP.CALL_LOCK) {
    OutputStreamWriter writer=null;
    BufferedReader reader=null;
    OutputStream outputStream=null;
    InputStreamReader isr=null;
    try {
      this.connection=HTTPConnectionFactory.createHTTPConnection(url,this.proxy);
      this.connection.setConnectTimeout(this.connectTimeout);
      this.connection.setReadTimeout(this.readTimeout);
      this.connection.setRequestMethod(RequestMethod.POST);
      this.connection.setRequestProperty(""String_Node_Str"",TranslationFactory.getDesiredLanguage());
      this.connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Application.getApplication());
      this.connection.setRequestProperty(HTTPConstants.HEADER_REQUEST_CONTENT_LENGTH,data.getBytes().length + ""String_Node_Str"");
      for (      final Entry<String,String> next : this.requestHeader.entrySet()) {
        this.connection.setRequestProperty(next.getKey(),next.getValue());
      }
      this.connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      int lookupTry=0;
      while (true) {
        try {
          this.connection.connect();
          break;
        }
 catch (        final UnknownHostException e) {
          if (++lookupTry > 3) {
            throw e;
          }
          Thread.sleep(200);
        }
      }
      outputStream=this.connection.getOutputStream();
      writer=new OutputStreamWriter(outputStream);
      writer.write(data);
      writer.flush();
      this.connection.postDataSend();
      reader=new BufferedReader(isr=new InputStreamReader(this.connection.getInputStream(),""String_Node_Str""));
      final StringBuilder sb=new StringBuilder();
      String str;
      while ((str=reader.readLine()) != null) {
        if (sb.length() > 0) {
          sb.append(""String_Node_Str"");
        }
        sb.append(str);
      }
      return sb.toString();
    }
  finally {
      try {
        reader.close();
      }
 catch (      final Throwable e) {
      }
      try {
        isr.close();
      }
 catch (      final Throwable e) {
      }
      try {
        writer.close();
      }
 catch (      final Throwable e) {
      }
      try {
        outputStream.close();
      }
 catch (      final Throwable e) {
      }
      try {
        this.connection.disconnect();
      }
 catch (      final Throwable e) {
      }
    }
  }
}"
21544,"@Override public void actionPerformed(final ActionEvent e){
  more.setVisible(false);
  scrollPane.setVisible(true);
  logField.setText(Exceptions.getStackTrace(exception));
  pack();
}","@Override public void actionPerformed(final ActionEvent e){
  scrollPane.setVisible(true);
  logField.setText(Exceptions.getStackTrace(exception));
  more.setVisible(false);
  pack();
}"
21545,"@Override public JComponent layoutDialogContent(){
  final JPanel cp=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  textField=new JTextPane(){
    private static final long serialVersionUID=1L;
    @Override public boolean getScrollableTracksViewportWidth(){
      return !BinaryLogic.containsAll(ExceptionDialog.this.flagMask,Dialog.STYLE_LARGE);
    }
  }
;
  if (BinaryLogic.containsAll(flagMask,Dialog.STYLE_HTML)) {
    textField.setContentType(""String_Node_Str"");
    textField.addHyperlinkListener(new HyperlinkListener(){
      public void hyperlinkUpdate(      final HyperlinkEvent e){
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
          CrossSystem.openURL(e.getURL());
        }
      }
    }
);
  }
 else {
    textField.setContentType(""String_Node_Str"");
  }
  textField.setText(message);
  textField.setEditable(false);
  textField.setBackground(null);
  textField.setOpaque(false);
  textField.putClientProperty(""String_Node_Str"",Boolean.FALSE);
  textField.setCaretPosition(0);
  cp.add(new JLabel(ImageProvider.getImageIcon(Dialog.ICON_ERROR,32,32)),""String_Node_Str"");
  if (BinaryLogic.containsAll(flagMask,Dialog.STYLE_LARGE)) {
    cp.add(new JScrollPane(textField),""String_Node_Str"");
  }
 else {
    cp.add(textField,""String_Node_Str"");
  }
  final JButton more=new JButton(APPWORKUTILS.ExceptionDialog_layoutDialogContent_more_button.s());
  SwingUtils.boldJButton(more);
  SwingUtils.boldJButton(more);
  more.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  more.setFocusable(false);
  more.setContentAreaFilled(false);
  more.setBorder(BorderFactory.createMatteBorder(0,0,1,0,cp.getBackground().darker()));
  more.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      more.setVisible(false);
      scrollPane.setVisible(true);
      logField.setText(Exceptions.getStackTrace(exception));
      pack();
    }
  }
);
  more.setHorizontalAlignment(SwingConstants.RIGHT);
  logField=new JTextArea();
  logField.setLineWrap(false);
  logField.setEditable(true);
  logField.setAutoscrolls(true);
  scrollPane=new JScrollPane(logField);
  scrollPane.setVisible(false);
  logField.setEditable(true);
  logField.setAutoscrolls(true);
  logField.setForeground(Color.RED);
  cp.add(more,""String_Node_Str"");
  cp.add(scrollPane,""String_Node_Str"");
  return cp;
}","@Override public JComponent layoutDialogContent(){
  final JPanel cp=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  textField=new JTextPane(){
    private static final long serialVersionUID=1L;
    @Override public boolean getScrollableTracksViewportWidth(){
      return !BinaryLogic.containsAll(ExceptionDialog.this.flagMask,Dialog.STYLE_LARGE);
    }
  }
;
  if (BinaryLogic.containsAll(flagMask,Dialog.STYLE_HTML)) {
    textField.setContentType(""String_Node_Str"");
    textField.addHyperlinkListener(new HyperlinkListener(){
      public void hyperlinkUpdate(      final HyperlinkEvent e){
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
          CrossSystem.openURL(e.getURL());
        }
      }
    }
);
  }
 else {
    textField.setContentType(""String_Node_Str"");
  }
  textField.setText(message);
  textField.setEditable(false);
  textField.setBackground(null);
  textField.setOpaque(false);
  textField.putClientProperty(""String_Node_Str"",Boolean.FALSE);
  textField.setCaretPosition(0);
  cp.add(new JLabel(ImageProvider.getImageIcon(Dialog.ICON_ERROR,32,32)),""String_Node_Str"");
  if (BinaryLogic.containsAll(flagMask,Dialog.STYLE_LARGE)) {
    cp.add(new JScrollPane(textField),""String_Node_Str"");
  }
 else {
    cp.add(textField,""String_Node_Str"");
  }
  logField=new JTextArea();
  logField.setLineWrap(false);
  logField.setEditable(true);
  logField.setAutoscrolls(true);
  scrollPane=new JScrollPane(logField);
  scrollPane.setVisible(false);
  logField.setEditable(true);
  logField.setAutoscrolls(true);
  logField.setForeground(Color.RED);
  cp.add(scrollPane,""String_Node_Str"");
  return cp;
}"
21546,"/** 
 */
protected void dispose(){
}","/** 
 */
protected void dispose(){
  getDialog().realDispose();
}"
21547,"/** 
 * this function will init and show the dialog
 */
private void _init(){
  layoutDialog();
  setTitle(title);
  dont:   if (BinaryLogic.containsAll(this.flagMask,Dialog.STYLE_SHOW_DO_NOT_DISPLAY_AGAIN)) {
    try {
      final int i=BinaryLogic.containsAll(this.flagMask,Dialog.LOGIC_DONT_SHOW_AGAIN_DELETE_ON_EXIT) ? AbstractDialog.getSessionDontShowAgainValue(this.getDontShowAgainKey()) : JSonStorage.getStorage(""String_Node_Str"").get(this.getDontShowAgainKey(),-1);
      if (i >= 0) {
        int ret=i & (Dialog.RETURN_OK | Dialog.RETURN_CANCEL);
        ret|=Dialog.RETURN_DONT_SHOW_AGAIN | Dialog.RETURN_SKIPPED_BY_DONT_SHOW;
        if (BinaryLogic.containsAll(this.flagMask,Dialog.LOGIC_DONT_SHOW_AGAIN_IGNORES_CANCEL) && BinaryLogic.containsAll(ret,Dialog.RETURN_CANCEL)) {
          break dont;
        }
        if (BinaryLogic.containsAll(this.flagMask,Dialog.LOGIC_DONT_SHOW_AGAIN_IGNORES_OK) && BinaryLogic.containsAll(ret,Dialog.RETURN_OK)) {
          break dont;
        }
        this.returnBitMask=ret;
        return;
      }
    }
 catch (    final Exception e) {
      Log.exception(e);
    }
  }
  try {
    if (Dialog.getInstance().getParentOwner() != null && AbstractDialog.USE_LOCKPANEL) {
      LockPanel.create(Dialog.getInstance().getParentOwner()).lock(500);
    }
  }
 catch (  final Exception e) {
  }
  if (Dialog.getInstance().getParentOwner() == null || !Dialog.getInstance().getParentOwner().isShowing()) {
    getDialog().setAlwaysOnTop(true);
  }
  getDialog().setModal(true);
  getDialog().setLayout(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  getDialog().setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  getDialog().addWindowListener(this);
  this.defaultButtons=this.getDefaultButtonPanel();
  this.okButton=new JButton(this.okOption);
  JButton focus=this.okButton;
  this.cancelButton=new JButton(this.cancelOption);
  this.okButton.addActionListener(this);
  this.cancelButton.addActionListener(this);
  if (this.icon != null) {
    getDialog().add(new JLabel(this.icon),""String_Node_Str"");
  }
  this.panel=this.layoutDialogContent();
  getDialog().add(this.panel,""String_Node_Str"");
  getDialog().add(timerLbl,""String_Node_Str"");
  if (BinaryLogic.containsAll(this.flagMask,Dialog.STYLE_SHOW_DO_NOT_DISPLAY_AGAIN)) {
    this.dontshowagain=new JCheckBox(APPWORKUTILS.ABSTRACTDIALOG_STYLE_SHOW_DO_NOT_DISPLAY_AGAIN.s());
    this.dontshowagain.setHorizontalAlignment(SwingConstants.TRAILING);
    this.dontshowagain.setHorizontalTextPosition(SwingConstants.LEADING);
    getDialog().add(this.dontshowagain,""String_Node_Str"");
  }
 else {
    getDialog().add(Box.createHorizontalGlue(),""String_Node_Str"");
  }
  getDialog().add(this.defaultButtons,""String_Node_Str"");
  if ((this.flagMask & Dialog.BUTTONS_HIDE_OK) == 0) {
    getDialog().getRootPane().setDefaultButton(this.okButton);
    this.okButton.addHierarchyListener(new HierarchyListener(){
      public void hierarchyChanged(      final HierarchyEvent e){
        if ((e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) != 0) {
          final JButton defaultButton=(JButton)e.getComponent();
          final JRootPane root=SwingUtilities.getRootPane(defaultButton);
          if (root != null) {
            root.setDefaultButton(defaultButton);
          }
        }
      }
    }
);
    focus=this.okButton;
    this.defaultButtons.add(this.okButton,""String_Node_Str"");
  }
  if (!BinaryLogic.containsAll(this.flagMask,Dialog.BUTTONS_HIDE_CANCEL)) {
    this.defaultButtons.add(this.cancelButton,""String_Node_Str"");
    if (BinaryLogic.containsAll(this.flagMask,Dialog.BUTTONS_HIDE_OK)) {
      getDialog().getRootPane().setDefaultButton(this.cancelButton);
      this.cancelButton.requestFocusInWindow();
      focus=this.cancelButton;
    }
  }
  this.addButtons(this.defaultButtons);
  if (BinaryLogic.containsAll(this.flagMask,Dialog.LOGIC_COUNTDOWN)) {
    initTimer(Dialog.getInstance().getCountdownTime());
  }
 else {
    timerLbl.setVisible(false);
  }
  getDialog().invalidate();
  getDialog().pack();
  getDialog().setResizable(true);
  getDialog().setMinimumSize(new Dimension(300,80));
  getDialog().toFront();
  if (Dialog.getInstance().getParentOwner() == null || !Dialog.getInstance().getParentOwner().isDisplayable() || !Dialog.getInstance().getParentOwner().isVisible()) {
    final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    getDialog().setLocation(new Point((int)(screenSize.getWidth() - getDialog().getWidth()) / 2,(int)(screenSize.getHeight() - getDialog().getHeight()) / 2));
  }
 else   if (Dialog.getInstance().getParentOwner().getExtendedState() == Frame.ICONIFIED) {
    final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    getDialog().setLocation(new Point((int)(screenSize.getWidth() - getDialog().getWidth() - 20),(int)(screenSize.getHeight() - getDialog().getHeight() - 60)));
  }
 else {
    getDialog().setLocation(SwingUtils.getCenter(Dialog.getInstance().getParentOwner(),getDialog()));
  }
  final KeyStroke ks=KeyStroke.getKeyStroke(""String_Node_Str"");
  focus.getInputMap().put(ks,""String_Node_Str"");
  focus.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(ks,""String_Node_Str"");
  focus.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(ks,""String_Node_Str"");
  focus.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    private static final long serialVersionUID=-6666144330707394562L;
    public void actionPerformed(    final ActionEvent e){
      Log.L.fine(""String_Node_Str"");
      AbstractDialog.this.dispose();
    }
  }
);
  focus.requestFocus();
  this.packed();
  getDialog().setVisible(true);
  if (Dialog.getInstance().getParentOwner() != null) {
    Dialog.getInstance().getParentOwner().setAlwaysOnTop(true);
    Dialog.getInstance().getParentOwner().setAlwaysOnTop(false);
  }
}","/** 
 * this function will init and show the dialog
 */
private void _init(){
  layoutDialog();
  setTitle(title);
  dont:   if (BinaryLogic.containsAll(this.flagMask,Dialog.STYLE_SHOW_DO_NOT_DISPLAY_AGAIN)) {
    try {
      final int i=BinaryLogic.containsAll(this.flagMask,Dialog.LOGIC_DONT_SHOW_AGAIN_DELETE_ON_EXIT) ? AbstractDialog.getSessionDontShowAgainValue(this.getDontShowAgainKey()) : JSonStorage.getStorage(""String_Node_Str"").get(this.getDontShowAgainKey(),-1);
      if (i >= 0) {
        int ret=i & (Dialog.RETURN_OK | Dialog.RETURN_CANCEL);
        ret|=Dialog.RETURN_DONT_SHOW_AGAIN | Dialog.RETURN_SKIPPED_BY_DONT_SHOW;
        if (BinaryLogic.containsAll(this.flagMask,Dialog.LOGIC_DONT_SHOW_AGAIN_IGNORES_CANCEL) && BinaryLogic.containsAll(ret,Dialog.RETURN_CANCEL)) {
          break dont;
        }
        if (BinaryLogic.containsAll(this.flagMask,Dialog.LOGIC_DONT_SHOW_AGAIN_IGNORES_OK) && BinaryLogic.containsAll(ret,Dialog.RETURN_OK)) {
          break dont;
        }
        this.returnBitMask=ret;
        return;
      }
    }
 catch (    final Exception e) {
      Log.exception(e);
    }
  }
  try {
    if (Dialog.getInstance().getParentOwner() != null && AbstractDialog.USE_LOCKPANEL) {
      LockPanel.create(Dialog.getInstance().getParentOwner()).lock(500);
    }
  }
 catch (  final Exception e) {
  }
  if (Dialog.getInstance().getParentOwner() == null || !Dialog.getInstance().getParentOwner().isShowing()) {
    getDialog().setAlwaysOnTop(true);
  }
  getDialog().setModal(true);
  getDialog().setLayout(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  getDialog().setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  getDialog().addWindowListener(this);
  this.defaultButtons=this.getDefaultButtonPanel();
  this.okButton=new JButton(this.okOption);
  JButton focus=this.okButton;
  this.cancelButton=new JButton(this.cancelOption);
  this.okButton.addActionListener(this);
  this.cancelButton.addActionListener(this);
  if (this.icon != null) {
    getDialog().add(new JLabel(this.icon),""String_Node_Str"");
  }
  this.panel=this.layoutDialogContent();
  getDialog().add(this.panel,""String_Node_Str"");
  getDialog().add(timerLbl,""String_Node_Str"");
  if (BinaryLogic.containsAll(this.flagMask,Dialog.STYLE_SHOW_DO_NOT_DISPLAY_AGAIN)) {
    this.dontshowagain=new JCheckBox(APPWORKUTILS.ABSTRACTDIALOG_STYLE_SHOW_DO_NOT_DISPLAY_AGAIN.s());
    this.dontshowagain.setHorizontalAlignment(SwingConstants.TRAILING);
    this.dontshowagain.setHorizontalTextPosition(SwingConstants.LEADING);
    getDialog().add(this.dontshowagain,""String_Node_Str"");
  }
 else {
    getDialog().add(Box.createHorizontalGlue(),""String_Node_Str"");
  }
  getDialog().add(this.defaultButtons,""String_Node_Str"");
  if ((this.flagMask & Dialog.BUTTONS_HIDE_OK) == 0) {
    getDialog().getRootPane().setDefaultButton(this.okButton);
    this.okButton.addHierarchyListener(new HierarchyListener(){
      public void hierarchyChanged(      final HierarchyEvent e){
        if ((e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) != 0) {
          final JButton defaultButton=(JButton)e.getComponent();
          final JRootPane root=SwingUtilities.getRootPane(defaultButton);
          if (root != null) {
            root.setDefaultButton(defaultButton);
          }
        }
      }
    }
);
    focus=this.okButton;
    this.defaultButtons.add(this.okButton,""String_Node_Str"");
  }
  if (!BinaryLogic.containsAll(this.flagMask,Dialog.BUTTONS_HIDE_CANCEL)) {
    this.defaultButtons.add(this.cancelButton,""String_Node_Str"");
    if (BinaryLogic.containsAll(this.flagMask,Dialog.BUTTONS_HIDE_OK)) {
      getDialog().getRootPane().setDefaultButton(this.cancelButton);
      this.cancelButton.requestFocusInWindow();
      focus=this.cancelButton;
    }
  }
  this.addButtons(this.defaultButtons);
  if (BinaryLogic.containsAll(this.flagMask,Dialog.LOGIC_COUNTDOWN)) {
    initTimer(Dialog.getInstance().getCountdownTime());
  }
 else {
    timerLbl.setVisible(false);
  }
  getDialog().invalidate();
  getDialog().pack();
  getDialog().setResizable(true);
  getDialog().setMinimumSize(new Dimension(300,80));
  getDialog().toFront();
  if (Dialog.getInstance().getParentOwner() == null || !Dialog.getInstance().getParentOwner().isDisplayable() || !Dialog.getInstance().getParentOwner().isVisible()) {
    final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    getDialog().setLocation(new Point((int)(screenSize.getWidth() - getDialog().getWidth()) / 2,(int)(screenSize.getHeight() - getDialog().getHeight()) / 2));
  }
 else   if (Dialog.getInstance().getParentOwner().getExtendedState() == Frame.ICONIFIED) {
    final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    getDialog().setLocation(new Point((int)(screenSize.getWidth() - getDialog().getWidth() - 20),(int)(screenSize.getHeight() - getDialog().getHeight() - 60)));
  }
 else {
    getDialog().setLocation(SwingUtils.getCenter(Dialog.getInstance().getParentOwner(),getDialog()));
  }
  final KeyStroke ks=KeyStroke.getKeyStroke(""String_Node_Str"");
  focus.getInputMap().put(ks,""String_Node_Str"");
  focus.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(ks,""String_Node_Str"");
  focus.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(ks,""String_Node_Str"");
  focus.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    private static final long serialVersionUID=-6666144330707394562L;
    public void actionPerformed(    final ActionEvent e){
      Log.L.fine(""String_Node_Str"");
      AbstractDialog.this.dispose();
    }
  }
);
  focus.requestFocus();
  this.packed();
  setVisible(true);
  if (Dialog.getInstance().getParentOwner() != null) {
    Dialog.getInstance().getParentOwner().setAlwaysOnTop(true);
    Dialog.getInstance().getParentOwner().setAlwaysOnTop(false);
  }
}"
21548,"/** 
 * @param title2
 */
private void setTitle(final String title2){
  getDialog().setTitle(title2);
}","/** 
 * @param title2
 */
protected void setTitle(final String title2){
  getDialog().setTitle(title2);
}"
21549,"@Override protected void addButtons(final JPanel buttonBar){
  final JButton more=new JButton(APPWORKUTILS.ExceptionDialog_layoutDialogContent_more_button.s());
  more.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  more.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      scrollPane.setVisible(true);
      logField.setText(Exceptions.getStackTrace(exception));
      more.setVisible(false);
      pack();
    }
  }
);
  more.setHorizontalAlignment(SwingConstants.RIGHT);
  buttonBar.add(more,""String_Node_Str"");
}","@Override protected void addButtons(final JPanel buttonBar){
  final JButton more=new JButton(APPWORKUTILS.ExceptionDialog_layoutDialogContent_more_button.s());
  more.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  more.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      scrollPane.setVisible(true);
      logField.setText(Exceptions.getStackTrace(exception));
      logLabel.setVisible(true);
      more.setVisible(false);
      pack();
    }
  }
);
  more.setHorizontalAlignment(SwingConstants.RIGHT);
  buttonBar.add(more,""String_Node_Str"");
}"
21550,"@Override public void actionPerformed(final ActionEvent e){
  scrollPane.setVisible(true);
  logField.setText(Exceptions.getStackTrace(exception));
  more.setVisible(false);
  pack();
}","@Override public void actionPerformed(final ActionEvent e){
  scrollPane.setVisible(true);
  logField.setText(Exceptions.getStackTrace(exception));
  logLabel.setVisible(true);
  more.setVisible(false);
  pack();
}"
21551,"@Override public JComponent layoutDialogContent(){
  final JPanel cp=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  textField=new JTextPane(){
    private static final long serialVersionUID=1L;
    @Override public boolean getScrollableTracksViewportWidth(){
      return !BinaryLogic.containsAll(ExceptionDialog.this.flagMask,Dialog.STYLE_LARGE);
    }
  }
;
  if (BinaryLogic.containsAll(flagMask,Dialog.STYLE_HTML)) {
    textField.setContentType(""String_Node_Str"");
    textField.addHyperlinkListener(new HyperlinkListener(){
      public void hyperlinkUpdate(      final HyperlinkEvent e){
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
          CrossSystem.openURL(e.getURL());
        }
      }
    }
);
  }
 else {
    textField.setContentType(""String_Node_Str"");
  }
  textField.setText(message);
  textField.setEditable(false);
  textField.setBackground(null);
  textField.setOpaque(false);
  textField.putClientProperty(""String_Node_Str"",Boolean.FALSE);
  textField.setCaretPosition(0);
  cp.add(new JLabel(ImageProvider.getImageIcon(Dialog.ICON_ERROR,32,32)),""String_Node_Str"");
  if (BinaryLogic.containsAll(flagMask,Dialog.STYLE_LARGE)) {
    cp.add(new JScrollPane(textField),""String_Node_Str"");
  }
 else {
    cp.add(textField,""String_Node_Str"");
  }
  logField=new JTextArea();
  logField.setLineWrap(false);
  logField.setEditable(true);
  logField.setAutoscrolls(true);
  scrollPane=new JScrollPane(logField);
  scrollPane.setVisible(false);
  logField.setEditable(true);
  logField.setAutoscrolls(true);
  logField.setForeground(Color.RED);
  cp.add(scrollPane,""String_Node_Str"");
  return cp;
}","@Override public JComponent layoutDialogContent(){
  final JPanel cp=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  textField=new JTextPane(){
    private static final long serialVersionUID=1L;
    @Override public boolean getScrollableTracksViewportWidth(){
      return !BinaryLogic.containsAll(ExceptionDialog.this.flagMask,Dialog.STYLE_LARGE);
    }
  }
;
  if (BinaryLogic.containsAll(flagMask,Dialog.STYLE_HTML)) {
    textField.setContentType(""String_Node_Str"");
    textField.addHyperlinkListener(new HyperlinkListener(){
      public void hyperlinkUpdate(      final HyperlinkEvent e){
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
          CrossSystem.openURL(e.getURL());
        }
      }
    }
);
  }
 else {
    textField.setContentType(""String_Node_Str"");
  }
  textField.setText(message);
  textField.setEditable(false);
  textField.setBackground(null);
  textField.setOpaque(false);
  textField.putClientProperty(""String_Node_Str"",Boolean.FALSE);
  textField.setCaretPosition(0);
  cp.add(new JLabel(ImageProvider.getImageIcon(Dialog.ICON_ERROR,32,32)),""String_Node_Str"");
  if (BinaryLogic.containsAll(flagMask,Dialog.STYLE_LARGE)) {
    cp.add(new JScrollPane(textField),""String_Node_Str"");
  }
 else {
    cp.add(textField,""String_Node_Str"");
  }
  logField=new JTextArea();
  logField.setLineWrap(false);
  logField.setEditable(true);
  logField.setAutoscrolls(true);
  scrollPane=new JScrollPane(logField);
  scrollPane.setVisible(false);
  logField.setEditable(true);
  logField.setAutoscrolls(true);
  logField.setForeground(Color.RED);
  logLabel=new JLabel(APPWORKUTILS.ExceptionDialog_layoutDialogContent_logLabel.s());
  logLabel.setVisible(false);
  cp.add(logLabel,""String_Node_Str"");
  cp.add(scrollPane,""String_Node_Str"");
  return cp;
}"
21552,"@Override protected String[] createReturnValue(){
  return getLogins();
}","@Override protected LoginData createReturnValue(){
  if ((getReturnmask() & (Dialog.RETURN_OK | Dialog.RETURN_TIMEOUT)) == 0) {
    return null;
  }
  return new LoginData(accid.getText(),new String(pass.getPassword()),save.isSelected());
}"
21553,"public LoginDialog(int flag,String title,String message,String defaultMessage,ImageIcon icon,String okOption,String cancelOption){
  super(flag & 0xffffffff & (~Dialog.STYLE_SHOW_DO_NOT_DISPLAY_AGAIN),title,icon,okOption,cancelOption);
  remember=BinaryLogic.containsAll(flag,Dialog.STYLE_SHOW_DO_NOT_DISPLAY_AGAIN);
  register=BinaryLogic.containsAll(flag,REGISTER);
  this.defaultMessage=defaultMessage;
  this.message=message;
}","public LoginDialog(final int flag){
  super(flag & 0xffffffff & ~Dialog.STYLE_SHOW_DO_NOT_DISPLAY_AGAIN,APPWORKUTILS.AccountNew_AccountNew_title.s(),ImageProvider.getImageIcon(""String_Node_Str"",32,32),null,null);
}"
21554,"@Override protected void packed(){
  login.selectAll();
  requestFocus();
  login.requestFocusInWindow();
}","@Override protected void packed(){
  accid.selectAll();
  requestFocus();
  accid.requestFocusInWindow();
}"
21555,"@Override public JComponent layoutDialogContent(){
  JPanel cp=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str""));
  messageArea=new JTextPane();
  messageArea.setBorder(null);
  messageArea.setBackground(null);
  messageArea.setOpaque(false);
  messageArea.setText(this.message);
  messageArea.setEditable(false);
  messageArea.putClientProperty(""String_Node_Str"",Boolean.FALSE);
  cp.add(messageArea,""String_Node_Str"");
  cp.add(new JLabel(APPWORKUTILS.LOGINDIALOG_LABEL_USERNAME.s()),""String_Node_Str"");
  login=new JTextField();
  login.setBorder(BorderFactory.createEtchedBorder());
  login.setText(this.defaultMessage);
  login.addKeyListener(this);
  login.addMouseListener(this);
  cp.add(login,""String_Node_Str"");
  cp.add(new JLabel(APPWORKUTILS.LOGINDIALOG_LABEL_PASSWORD.s()),""String_Node_Str"");
  password=new JPasswordField();
  password.setBorder(BorderFactory.createEtchedBorder());
  password.addKeyListener(this);
  password.addMouseListener(this);
  cp.add(password,""String_Node_Str"");
  cp.add(rpasswordLabel=new JLabel(APPWORKUTILS.LOGINDIALOG_LABEL_PASSWORD_REPEAT.s()),""String_Node_Str"");
  rpassword=new JPasswordField();
  rpassword.setBorder(BorderFactory.createEtchedBorder());
  rpassword.addKeyListener(this);
  rpassword.addMouseListener(this);
  cp.add(rpassword,""String_Node_Str"");
  rpassword.setVisible(BinaryLogic.containsAll(this.flagMask,FORCE_REGISTER));
  rpasswordLabel.setVisible(BinaryLogic.containsAll(this.flagMask,FORCE_REGISTER));
  if (register) {
    registerBtn=new JLabel(APPWORKUTILS.LOGINDIALOG_BUTTON_REGISTER.s());
    registerBtn.setBorder(BorderFactory.createMatteBorder(0,0,1,0,cp.getBackground().darker().darker()));
    registerBtn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    registerBtn.addMouseListener(this);
    cp.add(registerBtn,""String_Node_Str"");
  }
 else {
    cp.add(Box.createHorizontalGlue(),""String_Node_Str"");
  }
  if (remember) {
    rem=new JCheckBox(APPWORKUTILS.LOGINDIALOG_CHECKBOX_REMEMBER.s());
    rem.setHorizontalTextPosition(SwingConstants.LEFT);
    rem.setHorizontalAlignment(SwingConstants.RIGHT);
    cp.add(rem,""String_Node_Str"");
  }
  return cp;
}","@Override public JComponent layoutDialogContent(){
  final JPanel contentpane=new JPanel();
  titleColor=getBackground().darker().darker();
  accid=new JTextField(10);
  accid.addCaretListener(this);
  pass=new JPasswordField(10);
  save=new JCheckBox();
  contentpane.setLayout(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  contentpane.add(new JLabel(APPWORKUTILS.AccountNew_AccountNew_message.s()),""String_Node_Str"");
  contentpane.add(addSettingName(APPWORKUTILS.AccountNew_layoutDialogContent_accountname.s()));
  contentpane.add(accid,""String_Node_Str"");
  contentpane.add(addSettingName(APPWORKUTILS.AccountNew_layoutDialogContent_password.s()));
  contentpane.add(pass,""String_Node_Str"");
  contentpane.add(addSettingName(APPWORKUTILS.AccountNew_layoutDialogContent_save.s()));
  contentpane.add(save,""String_Node_Str"");
  accid.setText(preUser);
  pass.setText(prePass);
  save.setSelected(preSave);
  return contentpane;
}"
21556,"/** 
 * This method adds an action to the queue. if the caller is a queueaction itself, the action will be executed directly. In this case, this method can throw Exceptions. If the caller is not the QUeuethread, this method is not able to throw exceptions, but the exceptions are passed to the exeptionhandler method of the queueaction
 * @param < T >
 * @param < E >
 * @param item
 * @throws T
 */
public <E,T extends Throwable>void add(final QueueAction<?,T> action) throws T {
  action.reset();
  action.setCallerThread(this,Thread.currentThread());
  if (this.isQueueThread(action)) {
    this.startItem(action,false);
  }
 else {
    this.internalAdd(action);
  }
}","/** 
 * This method adds an action to the queue. if the caller is a queueaction itself, the action will be executed directly. In this case, this method can throw Exceptions. If the caller is not the QUeuethread, this method is not able to throw exceptions, but the exceptions are passed to the exeptionhandler method of the queueaction
 * @param < T >
 * @param < E >
 * @param item
 * @throws T
 */
public <E,T extends Throwable>void add(final QueueAction<?,T> action) throws T {
  action.reset();
  action.setCallerThread(this,Thread.currentThread());
  if (isQueueThread(action)) {
    this.startItem(action,false);
  }
 else {
    internalAdd(action);
  }
}"
21557,"public long getQueueSize(QueuePriority prio){
  if (prio == null)   return -1;
synchronized (this.queueLock) {
    ArrayList<QueueAction<?,? extends Throwable>> ret=this.queue.get(prio);
    if (ret == null)     return -1;
    return ret.size();
  }
}","public long getQueueSize(final QueuePriority prio){
  if (prio == null) {
    return -1;
  }
synchronized (queueLock) {
    final ArrayList<QueueAction<?,? extends Throwable>> ret=queue.get(prio);
    if (ret == null) {
      return -1;
    }
    return ret.size();
  }
}"
21558,"@SuppressWarnings(""String_Node_Str"") protected <T extends Throwable>void startItem(final QueueAction<?,T> item,final boolean callExceptionhandler) throws T {
  try {
    if (this.thread != item.getCallerThread()) {
synchronized (this.queueThreadHistory) {
        this.queueThreadHistory.add(item);
      }
    }
    item.start(this);
  }
 catch (  final Throwable e) {
    if (!callExceptionhandler || !item.callExceptionHandler()) {
      if (e instanceof RuntimeException) {
        throw (RuntimeException)e;
      }
 else {
        throw (T)e;
      }
    }
  }
 finally {
    item.setFinished(true);
    if (this.thread != item.getCallerThread()) {
synchronized (this.queueThreadHistory) {
        if (this.queueThreadHistory.size() != 0) {
          this.queueThreadHistory.remove(this.queueThreadHistory.size() - 1);
        }
      }
    }
synchronized (item) {
      item.notify();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected <T extends Throwable>void startItem(final QueueAction<?,T> item,final boolean callExceptionhandler) throws T {
  try {
    if (thread != item.getCallerThread()) {
synchronized (queueThreadHistory) {
        queueThreadHistory.add(item);
      }
    }
    item.start(this);
  }
 catch (  final Throwable e) {
    if (!callExceptionhandler || !item.callExceptionHandler()) {
      if (e instanceof RuntimeException) {
        throw (RuntimeException)e;
      }
 else {
        throw (T)e;
      }
    }
  }
 finally {
    item.setFinished(true);
    if (thread != item.getCallerThread()) {
synchronized (queueThreadHistory) {
        if (queueThreadHistory.size() != 0) {
          queueThreadHistory.remove(queueThreadHistory.size() - 1);
        }
      }
    }
synchronized (item) {
      item.notify();
    }
  }
}"
21559,"/** 
 * Only use this method if you can asure that the caller is NEVER the queue itself. if you are not sure use #add
 * @param < E >
 * @param < T >
 * @param action
 * @throws T
 */
public <E,T extends Throwable>void addAsynch(final QueueAction<?,T> action){
  if (this.isQueueThread(action)) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    action.reset();
    action.setCallerThread(this,Thread.currentThread());
    this.internalAdd(action);
  }
}","/** 
 * Only use this method if you can asure that the caller is NEVER the queue itself. if you are not sure use #add
 * @param < E >
 * @param < T >
 * @param action
 * @throws T
 */
public <E,T extends Throwable>void addAsynch(final QueueAction<?,T> action){
  if (isQueueThread(action)) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    action.reset();
    action.setCallerThread(this,Thread.currentThread());
    internalAdd(action);
  }
}"
21560,"public boolean isEmpty(){
synchronized (this.queueLock) {
    for (    final QueuePriority prio : this.prios) {
      if (!this.queue.get(prio).isEmpty()) {
        return false;
      }
    }
    return true;
  }
}","public boolean isEmpty(){
synchronized (queueLock) {
    for (    final QueuePriority prio : prios) {
      if (!queue.get(prio).isEmpty()) {
        return false;
      }
    }
    return true;
  }
}"
21561,"@Override public void run(){
  if (this.thread != null) {
    return;
  }
  this.thread=this;
  QueueAction<?,? extends Throwable> item=null;
  while (true) {
    try {
      this.handlePreRun();
synchronized (this) {
        while (this.waitFlag) {
          try {
            this.wait();
          }
 catch (          final Exception e) {
            org.appwork.utils.logging.Log.exception(e);
          }
        }
      }
synchronized (this.queueLock) {
        item=null;
        for (        final QueuePriority prio : this.prios) {
          if (this.queue.get(prio).size() > 0) {
            item=this.queue.get(prio).remove(0);
            break;
          }
        }
        if (item == null) {
          this.waitFlag=true;
        }
      }
      if (item == null || this.waitFlag) {
        continue;
      }
      try {
        this.startItem(item,true);
      }
 catch (      final Throwable e) {
      }
    }
 catch (    final Throwable e) {
      Log.L.info(""String_Node_Str"");
      Log.exception(e);
    }
  }
}","@Override public void run(){
  if (thread != null) {
    return;
  }
  thread=this;
  QueueAction<?,? extends Throwable> item=null;
  while (true) {
    try {
      handlePreRun();
synchronized (this) {
        while (waitFlag) {
          try {
            this.wait();
          }
 catch (          final Exception e) {
            org.appwork.utils.logging.Log.exception(e);
          }
        }
      }
synchronized (queueLock) {
        item=null;
        for (        final QueuePriority prio : prios) {
          if (queue.get(prio).size() > 0) {
            item=queue.get(prio).remove(0);
            break;
          }
        }
        if (item == null) {
          waitFlag=true;
        }
      }
      if (item == null || waitFlag) {
        continue;
      }
      try {
        this.startItem(item,true);
      }
 catch (      final Throwable e) {
      }
    }
 catch (    final Throwable e) {
      Log.L.info(""String_Node_Str"");
      Log.exception(e);
    }
  }
}"
21562,"protected QueueAction<?,? extends Throwable> getLastHistoryItem(){
synchronized (this.queueThreadHistory) {
    if (this.queueThreadHistory.size() == 0) {
      return null;
    }
    return this.queueThreadHistory.get(this.queueThreadHistory.size() - 1);
  }
}","protected QueueAction<?,? extends Throwable> getLastHistoryItem(){
synchronized (queueThreadHistory) {
    if (queueThreadHistory.size() == 0) {
      return null;
    }
    return queueThreadHistory.get(queueThreadHistory.size() - 1);
  }
}"
21563,"/** 
 * this functions returns true if the current running Thread is our QueueThread OR the SourceQueueItem chain is rooted in current running QueueItem
 */
public boolean isQueueThread(final QueueAction<?,? extends Throwable> item){
  if (Thread.currentThread() == this.thread) {
    return true;
  }
  QueueAction<?,? extends Throwable> last=item;
  Thread t=null;
  while (last != null && (t=last.getCallerThread()) != null) {
    if (t != null && t instanceof Queue) {
      if (t == this.thread) {
        if (this.debugFlag) {
          org.appwork.utils.logging.Log.L.warning(""String_Node_Str"" + item);
        }
        return true;
      }
      last=((Queue)t).getLastHistoryItem();
    }
 else {
      break;
    }
  }
  return false;
}","/** 
 * this functions returns true if the current running Thread is our QueueThread OR the SourceQueueItem chain is rooted in current running QueueItem
 */
public boolean isQueueThread(final QueueAction<?,? extends Throwable> item){
  if (Thread.currentThread() == thread) {
    return true;
  }
  QueueAction<?,? extends Throwable> last=item;
  Thread t=null;
  final ArrayList<Object> his=new ArrayList<Object>();
  while (last != null && (t=last.getCallerThread()) != null) {
    if (t != null && t instanceof Queue) {
      if (t == thread) {
        if (debugFlag) {
          org.appwork.utils.logging.Log.L.warning(""String_Node_Str"" + item);
        }
        return true;
      }
      last=((Queue)t).getLastHistoryItem();
      if (his.contains(last)) {
        break;
      }
      his.add(last);
    }
 else {
      break;
    }
  }
  return false;
}"
21564,"/** 
 * changes this queue's debugFlag
 * @param b
 */
public void setDebug(final boolean b){
  this.debugFlag=b;
}","/** 
 * changes this queue's debugFlag
 * @param b
 */
public void setDebug(final boolean b){
  debugFlag=b;
}"
21565,"/** 
 * returns true if this queue shows debug info
 * @return
 */
public boolean isDebug(){
  return this.debugFlag;
}","/** 
 * returns true if this queue shows debug info
 * @return
 */
public boolean isDebug(){
  return debugFlag;
}"
21566,"public void enqueue(final QueueAction<?,?> action){
  action.reset();
  action.setCallerThread(this,Thread.currentThread());
  this.internalAdd(action);
}","public void enqueue(final QueueAction<?,?> action){
  action.reset();
  action.setCallerThread(this,Thread.currentThread());
  internalAdd(action);
}"
21567,"public boolean isWaiting(){
  return this.waitFlag;
}","public boolean isWaiting(){
  return waitFlag;
}"
21568,"public Queue(final String id){
  super(id);
  this.prios=QueuePriority.values();
  for (  final QueuePriority prio : this.prios) {
    this.queue.put(prio,new ArrayList<QueueAction<?,? extends Throwable>>());
  }
  this.setDaemon(true);
  this.start();
}","public Queue(final String id){
  super(id);
  prios=QueuePriority.values();
  for (  final QueuePriority prio : prios) {
    queue.put(prio,new ArrayList<QueueAction<?,? extends Throwable>>());
  }
  setDaemon(true);
  start();
}"
21569,"@SuppressWarnings(""String_Node_Str"") public <E,T extends Throwable>E addWait(final QueueAction<E,T> item) throws T {
  item.reset();
  item.setCallerThread(this,Thread.currentThread());
  if (this.isQueueThread(item)) {
    this.startItem(item,false);
  }
 else {
    this.internalAdd(item);
    try {
      while (!item.isFinished()) {
synchronized (item) {
          item.wait(1000);
        }
      }
    }
 catch (    final InterruptedException e) {
      item.handleException(e);
    }
    if (item.getExeption() != null) {
      if (!item.callExceptionHandler()) {
        if (item.getExeption() instanceof RuntimeException) {
          throw (RuntimeException)item.getExeption();
        }
 else {
          throw (T)item.getExeption();
        }
      }
    }
    if (item.gotKilled() && !item.gotStarted()) {
      item.handleException(new InterruptedException(""String_Node_Str""));
    }
  }
  return item.getResult();
}","@SuppressWarnings(""String_Node_Str"") public <E,T extends Throwable>E addWait(final QueueAction<E,T> item) throws T {
  item.reset();
  item.setCallerThread(this,Thread.currentThread());
  if (isQueueThread(item)) {
    this.startItem(item,false);
  }
 else {
    internalAdd(item);
    try {
      while (!item.isFinished()) {
synchronized (item) {
          item.wait(1000);
        }
      }
    }
 catch (    final InterruptedException e) {
      item.handleException(e);
    }
    if (item.getExeption() != null) {
      if (!item.callExceptionHandler()) {
        if (item.getExeption() instanceof RuntimeException) {
          throw (RuntimeException)item.getExeption();
        }
 else {
          throw (T)item.getExeption();
        }
      }
    }
    if (item.gotKilled() && !item.gotStarted()) {
      item.handleException(new InterruptedException(""String_Node_Str""));
    }
  }
  return item.getResult();
}"
21570,"public void internalAdd(final QueueAction<?,?> action){
synchronized (this.queueLock) {
    this.queue.get(action.getQueuePrio()).add(action);
  }
synchronized (this) {
    if (this.waitFlag) {
      this.waitFlag=false;
      this.notify();
    }
  }
}","public void internalAdd(final QueueAction<?,?> action){
synchronized (queueLock) {
    queue.get(action.getQueuePrio()).add(action);
  }
synchronized (this) {
    if (waitFlag) {
      waitFlag=false;
      notify();
    }
  }
}"
21571,"public void killQueue(){
synchronized (this.queueLock) {
    for (    final QueuePriority prio : this.prios) {
      for (      final QueueAction<?,? extends Throwable> item : this.queue.get(prio)) {
        item.kill();
synchronized (item) {
          item.notify();
        }
      }
      this.queue.get(prio).clear();
    }
  }
}","public void killQueue(){
synchronized (queueLock) {
    for (    final QueuePriority prio : prios) {
      for (      final QueueAction<?,? extends Throwable> item : queue.get(prio)) {
        item.kill();
synchronized (item) {
          item.notify();
        }
      }
      queue.get(prio).clear();
    }
  }
}"
21572,"/** 
 */
public void reset(){
  if (currentState == initState)   return;
  if (finalState != currentState)   throw new StateConflictException(""String_Node_Str"" + currentState);
  StateEvent event=new StateEvent(this,StateEvent.CHANGED,currentState,initState);
  this.currentState=this.initState;
  eventSender.fireEvent(event);
  path.clear();
  path.add(initState);
}","/** 
 */
public void reset(){
  StateEvent event;
synchronized (lock) {
    if (currentState == initState)     return;
    if (finalState != currentState)     throw new StateConflictException(""String_Node_Str"" + currentState);
    event=new StateEvent(this,StateEvent.CHANGED,currentState,initState);
    this.currentState=this.initState;
    path.clear();
    path.add(initState);
  }
  eventSender.fireEvent(event);
}"
21573,"/** 
 * @param newState
 */
private synchronized void forceState(State newState){
  if (currentState == newState)   return;
  StateEvent event=new StateEvent(this,StateEvent.CHANGED,currentState,newState);
  path.add(newState);
  Log.L.finest(owner + ""String_Node_Str"" + currentState+ ""String_Node_Str""+ newState);
  currentState=newState;
  eventSender.fireEvent(event);
}","/** 
 * @param newState
 */
public void forceState(State newState){
  StateEvent event;
synchronized (lock) {
    if (currentState == newState)     return;
    event=new StateEvent(this,StateEvent.CHANGED,currentState,newState);
    path.add(newState);
    Log.L.finest(owner + ""String_Node_Str"" + currentState+ ""String_Node_Str""+ newState);
    currentState=newState;
  }
  eventSender.fireEvent(event);
}"
21574,"/** 
 * @return
 */
public boolean isFinal(){
  return finalState != currentState;
}","/** 
 * @return
 */
public boolean isFinal(){
  return finalState == currentState;
}"
21575,"/** 
 * Restore the saved tree state
 */
public void restore(){
  restoreState(tree.getModel().getRoot(),new ArrayList<Object>());
  if (selectedPathes != null && selectedPathes.length > 0) {
    tree.getSelectionModel().setSelectionPaths(selectedPathes);
  }
}","/** 
 * Restore the saved tree state
 */
public void restore(){
  restoreState(tree.getModel().getRoot(),new ArrayList<Object>());
  if (selectedPathes != null && selectedPathes.length > 0) {
    tree.getSelectionModel().clearSelection();
    tree.getSelectionModel().setSelectionPaths(selectedPathes);
  }
}"
21576,"@Override public void write(byte b[],int off,int len) throws IOException {
  if (len < checkStep) {
    out.write(b,off,len);
    increase(len);
  }
 else {
    index1=off;
    index3=len;
    index2=Math.min(checkStep,index3 - checkStep);
    while (index2 != 0) {
      out.write(b,index1,index2);
      increase(index2);
      index1+=index2;
      index2=Math.min(checkStep,index3 - checkStep);
      index3-=index2;
    }
  }
}","@Override public void write(byte b[],int off,int len) throws IOException {
  if (len < checkStep) {
    out.write(b,off,len);
    increase(len);
  }
 else {
    offset=off;
    rest=len;
    while (rest != 0) {
      todo=rest;
      if (todo > checkStep)       todo=checkStep;
      out.write(b,offset,todo);
      increase(todo);
      rest-=todo;
      offset+=todo;
    }
  }
}"
21577,"public CollPaintException(){
}","public CollPaintException(){
  super();
}"
21578,"public void updateLine(int startX,int startY,int endX,int endY) throws CollPaintException ;","public void updateLine(float startX,float startY,float endX,float endY) throws CollPaintException ;"
21579,"public void updateLine(int startX,int startY,int endX,int endY,AsyncCallback<Void> callback);","public void updateLine(float startX,float startY,float endX,float endY,AsyncCallback<Void> callback);"
21580,"@Override public void updateLine(int startX,int startY,int endX,int endY) throws CollPaintException {
  HttpSession httpSession=getThreadLocalRequest().getSession();
  CometSession cometSession=CometServlet.getCometSession(httpSession);
  final LineUpdate lineUpdate=new LineUpdate();
  lineUpdate.state=State.STARTED;
  lineUpdate.startX=12;
  lineUpdate.startY=20;
  lineUpdate.endX=12;
  lineUpdate.endY=30;
  cometSession.enqueue(lineUpdate);
}","@Override public void updateLine(float startX,float startY,float endX,float endY) throws CollPaintException {
  HttpSession httpSession=getThreadLocalRequest().getSession();
  CometSession cometSession=CometServlet.getCometSession(httpSession);
  final LineUpdate lineUpdate=new LineUpdate();
  lineUpdate.setState(State.STARTED);
  lineUpdate.setStartX(startX);
  lineUpdate.setStartY(startY);
  lineUpdate.setEndX(endX);
  lineUpdate.setEndY(endY);
  cometSession.enqueue(lineUpdate);
}"
21581,"/** 
 * for updating the contents of the details viewer. public because this is used in certain view actions
 */
public void updateDetailsPanel(){
  detailsViewer.getDisplay().asyncExec(new Runnable(){
    public void run(){
      TreeItem[] items=testsViewer.getTree().getSelection();
      for (int i=0; i < items.length; i++) {
        ITest testitem=(ITest)items[i].getData();
        if (testitem.getTestElementType() != TestElementType.TESTMETHOD || ((TestMethod)testitem).getResult().trim().length() == 0) {
          continue;
        }
        TestMethod method=(TestMethod)testitem;
        TableItem nameRow=newTableItem();
        FailureTrace trace=new FailureTrace(method,method.getParent().getFilePath(),1);
        if (method.getTagcontext() != null && method.getTagcontext().length > 0) {
          System.out.println(method.getTagcontext());
          Map thisContext=method.getTagcontext()[0];
          trace.setFilePath((String)thisContext.get(""String_Node_Str""));
          trace.setFileLine((Integer)thisContext.get(""String_Node_Str""));
        }
        nameRow.setData(trace);
        nameRow.setText(method.getName());
        TableItem exceptionMessageRow=newTableItem();
        exceptionMessageRow.setData(trace);
        exceptionMessageRow.setText(method.getException());
        if (method.getStatus() == TestStatus.ERROR) {
          exceptionMessageRow.setImage(ResourceManager.getImage(ResourceManager.CIRCLE_ERROR));
        }
 else {
          exceptionMessageRow.setImage(ResourceManager.getImage(ResourceManager.CIRCLE_FAIL));
        }
        Map[] tc=method.getTagcontext();
        if (tc != null && tc.length > 0) {
          TableItem traceRow=null;
          for (int j=0; j < method.getTagcontext().length; j++) {
            String fileName=(String)tc[j].get(""String_Node_Str"");
            Integer fileLine=(Integer)tc[j].get(""String_Node_Str"");
            FailureTrace detailTrace=new FailureTrace(method,fileName,fileLine);
            traceRow=newTableItem();
            traceRow.setData(detailTrace);
            if (fileName.toLowerCase().endsWith(""String_Node_Str"")) {
              traceRow.setImage(ResourceManager.getImage(ResourceManager.CFCSTACKFRAME));
            }
 else {
              traceRow.setImage(ResourceManager.getImage(ResourceManager.CFMSTACKFRAME));
            }
            traceRow.setText(fileName + ""String_Node_Str"" + fileLine);
          }
          detailsViewer.showItem(traceRow);
        }
        if (items.length > 1) {
          newTableItem().setText(""String_Node_Str"");
        }
      }
    }
  }
);
}","/** 
 * for updating the contents of the details viewer. public because this is used in certain view actions
 */
public void updateDetailsPanel(){
  detailsViewer.getDisplay().asyncExec(new Runnable(){
    public void run(){
      TreeItem[] items=testsViewer.getTree().getSelection();
      for (int i=0; i < items.length; i++) {
        ITest testitem=(ITest)items[i].getData();
        if (testitem.getTestElementType() != TestElementType.TESTMETHOD || ((TestMethod)testitem).getResult().trim().length() == 0) {
          continue;
        }
        TestMethod method=(TestMethod)testitem;
        TableItem nameRow=newTableItem();
        FailureTrace trace=new FailureTrace(method,method.getParent().getFilePath(),1);
        if (method.getTagcontext().length > 0) {
          Map thisContext=method.getTagcontext()[0];
          trace.setFilePath((String)thisContext.get(""String_Node_Str""));
          trace.setFileLine((Integer)thisContext.get(""String_Node_Str""));
        }
        nameRow.setData(trace);
        nameRow.setText(method.getName());
        TableItem exceptionMessageRow=newTableItem();
        exceptionMessageRow.setData(trace);
        exceptionMessageRow.setText(method.getException());
        if (method.getStatus() == TestStatus.ERROR) {
          exceptionMessageRow.setImage(ResourceManager.getImage(ResourceManager.CIRCLE_ERROR));
        }
 else {
          exceptionMessageRow.setImage(ResourceManager.getImage(ResourceManager.CIRCLE_FAIL));
        }
        Map[] tc=method.getTagcontext();
        if (tc.length > 0) {
          TableItem traceRow=null;
          for (int j=0; j < method.getTagcontext().length; j++) {
            String fileName=(String)tc[j].get(""String_Node_Str"");
            Integer fileLine=(Integer)tc[j].get(""String_Node_Str"");
            FailureTrace detailTrace=new FailureTrace(method,fileName,fileLine);
            traceRow=newTableItem();
            traceRow.setData(detailTrace);
            if (fileName.toLowerCase().endsWith(""String_Node_Str"")) {
              traceRow.setImage(ResourceManager.getImage(ResourceManager.CFCSTACKFRAME));
            }
 else {
              traceRow.setImage(ResourceManager.getImage(ResourceManager.CFMSTACKFRAME));
            }
            traceRow.setText(fileName + ""String_Node_Str"" + fileLine);
          }
          detailsViewer.showItem(traceRow);
        }
        if (items.length > 1) {
          newTableItem().setText(""String_Node_Str"");
        }
      }
    }
  }
);
}"
21582,"private IResource determineResource(ITest testelement){
  IResource res=null;
  ITest item=testelement;
  String filepath=""String_Node_Str"";
  if (item.getTestElementType() == TestElementType.TESTCASE) {
    filepath=((TestCase)item).getFilePath();
  }
 else {
    filepath=((TestMethod)item).getParent().getFilePath();
  }
  IPath path=new Path(filepath);
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IFile ifile=root.getFileForLocation(path);
  if (ifile != null) {
    res=root.findMember(ifile.getFullPath());
    if (res == null) {
      MXUnitPluginLog.logWarning(""String_Node_Str"" + ifile.getFullPath());
    }
  }
 else {
    MXUnitPluginLog.logWarning(""String_Node_Str"" + filepath);
  }
  return res;
}","private IResource determineResource(ITest testelement){
  IResource res=null;
  ITest item=testelement;
  String filepath=""String_Node_Str"";
  if (item.getTestElementType() == TestElementType.TESTCASE) {
    filepath=((TestCase)item).getFilePath();
  }
 else {
    filepath=((TestMethod)item).getParent().getFilePath();
  }
  IPath path=new Path(filepath);
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IFile ifile=root.getFileForLocation(path);
  if (ifile != null) {
    res=root.findMember(ifile.getFullPath());
    if (res == null) {
      MXUnitPluginLog.logWarning(""String_Node_Str"" + ifile.getFullPath() + ""String_Node_Str""+ testelement);
    }
  }
 else {
    MXUnitPluginLog.logWarning(""String_Node_Str"" + filepath);
  }
  return res;
}"
21583,"/** 
 * a dandy of a function that parses stuff and otherwise creates the DOT-notation CFC paths
 * @param resource the resource whose cfc notation will be derived
 * @return the cfc notation
 */
private String deriveCFCPath(IResource resource){
  String path=""String_Node_Str"";
  String propValue=""String_Node_Str"";
  IResource currentParent=resource;
  IPath p=resource.getFullPath().removeFileExtension();
  for (int i=p.segmentCount() - 1; i > 0; i--) {
    currentParent=currentParent.getParent();
    if (currentParent.getType() == IResource.ROOT) {
      break;
    }
    propValue=props.getComponentPropertyValue(currentParent).trim();
    if (propValue.length() > 0) {
      if (Arrays.binarySearch(emptyPathIndicators,propValue) >= 0) {
        path=p.removeFirstSegments(i).toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        path=propValue + ""String_Node_Str"" + p.removeFirstSegments(i).toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      MXUnitPluginLog.logInfo(""String_Node_Str"" + currentParent + ""String_Node_Str""+ propValue+ ""String_Node_Str""+ path);
      break;
    }
  }
  if (path.length() == 0) {
    p.removeFirstSegments(webrootAsPath.segmentCount());
    path=p.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  return path;
}","/** 
 * a dandy of a function that parses stuff and otherwise creates the DOT-notation CFC paths
 * @param resource the resource whose cfc notation will be derived
 * @return the cfc notation
 */
private String deriveCFCPath(IResource resource){
  String path=""String_Node_Str"";
  String propValue=""String_Node_Str"";
  IResource currentParent=resource;
  IPath p=resource.getLocation().removeFileExtension();
  p=p.setDevice(null);
  webrootAsPath=webrootAsPath.setDevice(null);
  for (int i=p.segmentCount() - 1; i > 0; i--) {
    currentParent=currentParent.getParent();
    if (currentParent.getType() == IResource.ROOT) {
      break;
    }
    propValue=props.getComponentPropertyValue(currentParent).trim();
    if (propValue.length() > 0) {
      if (Arrays.binarySearch(emptyPathIndicators,propValue) >= 0) {
        path=p.removeFirstSegments(i).toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        path=propValue + ""String_Node_Str"" + p.removeFirstSegments(i).toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      MXUnitPluginLog.logInfo(""String_Node_Str"" + currentParent + ""String_Node_Str""+ propValue+ ""String_Node_Str""+ path);
      break;
    }
  }
  if (path.length() == 0) {
    MXUnitPluginLog.logInfo(""String_Node_Str"" + webrootAsPath + ""String_Node_Str""+ p);
    p=p.removeFirstSegments(webrootAsPath.segmentCount());
    path=p.toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return path;
}"
21584,"private String determineURL(IResource resource){
  String urlToUse=prefs.getString(MXUnitPreferenceConstants.P_FACADEURL);
  String projectFacadeURL=""String_Node_Str"";
  if (resource != null) {
    projectFacadeURL=props.getURLPropertyValue(resource.getProject());
  }
 else {
    MXUnitPluginLog.logInfo(""String_Node_Str"");
  }
  if (projectFacadeURL != null && projectFacadeURL.length() > 0) {
    urlToUse=projectFacadeURL;
  }
  urlToUse=urlToUse.trim().toLowerCase();
  if (!urlToUse.endsWith(""String_Node_Str"") && !urlToUse.endsWith(""String_Node_Str"")) {
    urlToUse+=""String_Node_Str"";
  }
  if (urlToUse.endsWith(""String_Node_Str"")) {
    urlToUse+=""String_Node_Str"";
  }
  MXUnitPluginLog.logInfo(""String_Node_Str"" + urlToUse);
  return urlToUse;
}","private String determineURL(IResource resource){
  String urlToUse=prefs.getString(MXUnitPreferenceConstants.P_FACADEURL);
  String projectFacadeURL=""String_Node_Str"";
  if (resource != null) {
    projectFacadeURL=props.getURLPropertyValue(resource.getProject());
  }
 else {
    MXUnitPluginLog.logInfo(""String_Node_Str"");
  }
  if (projectFacadeURL != null && projectFacadeURL.length() > 0) {
    urlToUse=projectFacadeURL;
  }
  urlToUse=urlToUse.trim();
  if (!urlToUse.toLowerCase().endsWith(""String_Node_Str"") && !urlToUse.toLowerCase().endsWith(""String_Node_Str"")) {
    urlToUse+=""String_Node_Str"";
  }
  if (urlToUse.toLowerCase().endsWith(""String_Node_Str"")) {
    urlToUse+=""String_Node_Str"";
  }
  MXUnitPluginLog.logInfo(""String_Node_Str"" + urlToUse);
  return urlToUse;
}"
21585,"/** 
 * convenience method for use in unit tests for testing unix-style paths
 * @param webroot the webroot. parent of the CFC in question
 * @param component full path to CFC under the webroot
 * @param pathSeparator String representing the file path separator (\, /)
 * @return String representing coldfusion cfc path for this component
 */
public static String deriveComponentPath(String webroot,String component,String pathSeparator){
  if (!webroot.endsWith(pathSeparator)) {
    webroot+=pathSeparator;
  }
  webroot=webroot.replace(pathSeparator,""String_Node_Str"");
  component=component.replace(pathSeparator,""String_Node_Str"");
  String path=component.substring(webroot.length());
  path=path.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  return path;
}","/** 
 * convenience method for use in unit tests for testing unix-style paths
 * @param webroot the webroot. parent of the CFC in question
 * @param component full path to CFC under the webroot
 * @param pathSeparator String representing the file path separator (\, /)
 * @return String representing coldfusion cfc path for this component
 */
public static String deriveComponentPath(String webroot,String component,String pathSeparator){
  webroot=webroot.trim();
  if (!webroot.endsWith(pathSeparator)) {
    webroot+=pathSeparator;
  }
  webroot=webroot.replace(pathSeparator,""String_Node_Str"");
  component=component.replace(pathSeparator,""String_Node_Str"");
  String path=component.substring(webroot.length());
  path=path.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  return path;
}"
21586,"@Override public Object handleElement(OTXMLElement element,String relativePath,XMLDataObject parent,String propertyName){
  if (isObjectReferenceHandler()) {
    String refid=element.getAttributeValue(""String_Node_Str"");
    return handleRefid(refid,parent,element,propertyName);
  }
  String idStr=element.getAttributeValue(""String_Node_Str"");
  if (idStr != null && idStr.length() <= 0) {
    idStr=null;
  }
  String localIdStr=element.getAttributeValue(""String_Node_Str"");
  if (localIdStr != null && localIdStr.length() <= 0) {
    localIdStr=null;
  }
  XMLDataObject obj=null;
  try {
    if (idStr == null && localIdStr == null && relativePath != null) {
      OTID pathId=OTIDFactory.createOTID(relativePath);
      obj=xmlDB.createDataObject(element,pathId);
    }
 else     if (idStr == null && localIdStr != null) {
      OTID id=xmlDB.getOTIDFromLocalID(localIdStr);
      obj=xmlDB.createDataObject(element,id);
    }
 else {
      obj=xmlDB.createDataObject(element,idStr);
      if (idStr != null && obj.getGlobalId() instanceof OTUUID) {
        obj.setPreserveUUID(true);
      }
    }
    obj.setContainer(parent);
    obj.setContainerResourceKey(propertyName);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    return null;
  }
  String objRelativePath=relativePath;
  OTID objId=obj.getGlobalId();
  if (idStr != null || localIdStr != null) {
    objRelativePath=objId.toExternalForm();
  }
  OTDataObjectType type=new OTDataObjectType(getClassName());
  obj.setType(type);
  List<?> attributes=element.getAttributes();
  for (Iterator<?> attIter=attributes.iterator(); attIter.hasNext(); ) {
    OTXMLAttribute attrib=(OTXMLAttribute)attIter.next();
    String attribName=attrib.getName();
    if (attribName.equals(""String_Node_Str"") || attribName.equals(""String_Node_Str"")) {
      continue;
    }
    if (isObjectReferenceHandler()) {
      logger.warning(""String_Node_Str"" + TypeService.attributePath(attrib));
      logger.warning(""String_Node_Str"");
      continue;
    }
    if (attribName.equals(""String_Node_Str"")) {
      obj.setSaveNulls(true);
      String nullResourcesStr=attrib.getValue();
      String[] nullResources=nullResourcesStr.split(""String_Node_Str"");
      for (int i=0; i < nullResources.length; i++) {
        obj.setResource(nullResources[i],null);
      }
      continue;
    }
    try {
      Object resValue=handleChildResource(element,attribName,attrib.getValue(),objRelativePath,obj,XmlType.ATTRIBUTE,null);
      obj.setResource(attribName,resValue);
      if (xmlDB.isTrackResourceInfo()) {
        XMLReferenceInfo info=obj.getReferenceInfo(attribName);
        if (info == null) {
          info=new XMLReferenceInfo();
          obj.setResourceInfo(attribName,info);
        }
        info.xmlType=XmlType.ATTRIBUTE;
      }
    }
 catch (    HandlerException e) {
      logger.warning(e.getMessage() + ""String_Node_Str"" + TypeService.attributePath(attrib));
    }
  }
  List<?> content=element.getContent();
  String previousComment=null;
  for (Iterator<?> childIter=content.iterator(); childIter.hasNext(); ) {
    OTXMLContent childContent=(OTXMLContent)childIter.next();
    if (childContent instanceof OTXMLComment) {
      previousComment=((OTXMLComment)childContent).getText();
    }
    if (!(childContent instanceof OTXMLElement)) {
      continue;
    }
    OTXMLElement child=(OTXMLElement)childContent;
    try {
      Object resValue=handleChildResource(element,child.getName(),child,objRelativePath,obj,XmlType.ELEMENT,previousComment);
      if (resValue == null) {
      }
      String childName=child.getName();
      obj.setResource(child.getName(),resValue);
      if (xmlDB.isTrackResourceInfo()) {
        XMLReferenceInfo info=obj.getReferenceInfo(childName);
        if (info == null) {
          info=new XMLReferenceInfo();
          obj.setResourceInfo(childName,info);
        }
        info.xmlType=XmlType.ELEMENT;
      }
    }
 catch (    HandlerException e) {
      logger.log(Level.WARNING,""String_Node_Str"" + TypeService.elementPath(child),e);
    }
    previousComment=null;
  }
  if (parent != null) {
    logger.finest(""String_Node_Str"" + obj.getGlobalId() + ""String_Node_Str""+ parent.getGlobalId());
    xmlDB.recordReference(parent,obj,relativePath);
  }
  return obj;
}","@Override public Object handleElement(OTXMLElement element,String relativePath,XMLDataObject parent,String propertyName){
  if (isObjectReferenceHandler()) {
    String refid=element.getAttributeValue(""String_Node_Str"");
    return handleRefid(refid,parent,element,propertyName);
  }
  String idStr=element.getAttributeValue(""String_Node_Str"");
  if (idStr != null && idStr.length() <= 0) {
    idStr=null;
  }
  String localIdStr=element.getAttributeValue(""String_Node_Str"");
  if (localIdStr != null && localIdStr.length() <= 0) {
    localIdStr=null;
  }
  XMLDataObject obj=null;
  try {
    if (idStr == null && localIdStr == null && relativePath != null) {
      OTID pathId=OTIDFactory.createOTID(relativePath);
      obj=xmlDB.createDataObject(element,pathId);
    }
 else     if (idStr == null && localIdStr != null) {
      OTID id=xmlDB.getOTIDFromLocalID(localIdStr);
      obj=xmlDB.createDataObject(element,id);
    }
 else {
      obj=xmlDB.createDataObject(element,idStr);
      if (idStr != null && obj.getGlobalId() instanceof OTUUID) {
        obj.setPreserveUUID(true);
      }
    }
    obj.setContainer(parent);
    obj.setContainerResourceKey(propertyName);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    return null;
  }
  String objRelativePath=relativePath;
  OTID objId=obj.getGlobalId();
  if (idStr != null || localIdStr != null) {
    objRelativePath=objId.toExternalForm();
  }
  OTDataObjectType type=new OTDataObjectType(getClassName());
  obj.setType(type);
  List<?> attributes=element.getAttributes();
  for (Iterator<?> attIter=attributes.iterator(); attIter.hasNext(); ) {
    OTXMLAttribute attrib=(OTXMLAttribute)attIter.next();
    String attribName=attrib.getName();
    if (attribName.equals(""String_Node_Str"") || attribName.equals(""String_Node_Str"")) {
      continue;
    }
    if (isObjectReferenceHandler()) {
      logger.warning(""String_Node_Str"" + TypeService.attributePath(attrib));
      logger.warning(""String_Node_Str"");
      continue;
    }
    if (attribName.equals(""String_Node_Str"")) {
      obj.setSaveNulls(true);
      String nullResourcesStr=attrib.getValue();
      String[] nullResources=nullResourcesStr.split(""String_Node_Str"");
      for (int i=0; i < nullResources.length; i++) {
        obj.setResource(nullResources[i],null);
      }
      continue;
    }
    try {
      Object resValue=handleChildResource(element,attribName,attrib.getValue(),objRelativePath,obj,XmlType.ATTRIBUTE,null);
      obj.setResource(attribName,resValue);
      if (xmlDB.isTrackResourceInfo()) {
        XMLReferenceInfo info=obj.getReferenceInfo(attribName);
        if (info == null) {
          info=new XMLReferenceInfo();
          obj.setResourceInfo(attribName,info);
        }
        info.xmlType=XmlType.ATTRIBUTE;
      }
    }
 catch (    HandlerException e) {
      logger.warning(e.getMessage() + ""String_Node_Str"" + TypeService.attributePath(attrib));
    }
  }
  List<?> content=element.getContent();
  String previousComment=null;
  for (Iterator<?> childIter=content.iterator(); childIter.hasNext(); ) {
    OTXMLContent childContent=(OTXMLContent)childIter.next();
    if (childContent instanceof OTXMLComment) {
      previousComment=((OTXMLComment)childContent).getText();
    }
    if (!(childContent instanceof OTXMLElement)) {
      continue;
    }
    OTXMLElement child=(OTXMLElement)childContent;
    try {
      Object resValue=handleChildResource(element,child.getName(),child,objRelativePath,obj,XmlType.ELEMENT,previousComment);
      if (resValue == null) {
      }
      String childName=child.getName();
      obj.setResource(child.getName(),resValue);
      if (xmlDB.isTrackResourceInfo()) {
        XMLReferenceInfo info=obj.getReferenceInfo(childName);
        if (info == null) {
          info=new XMLReferenceInfo();
          obj.setResourceInfo(childName,info);
        }
        info.xmlType=XmlType.ELEMENT;
      }
    }
 catch (    HandlerException e) {
      logger.log(Level.WARNING,""String_Node_Str"" + TypeService.elementPath(child),e);
    }
    previousComment=null;
  }
  if (parent != null) {
    logger.finest(""String_Node_Str"" + obj.getGlobalId() + ""String_Node_Str""+ parent.getGlobalId());
    xmlDB.recordReference(parent,obj,propertyName);
  }
  return obj;
}"
21587,"public void run(){
  if (outputFile == null) {
    return;
  }
  if (topLevelOTObjects[0] != null) {
    controllerService=topLevelOTObjects[0].getOTObjectService().createControllerService();
    OTControllerServiceFactory controllerServiceFactory=new OTControllerServiceFactory(){
      public OTControllerService createControllerService(      OTObjectService objectService){
        OTControllerService subControllerService=((OTControllerServiceImpl)controllerService).createSubControllerService(objectService);
        return subControllerService;
      }
      /** 
 * @deprecated the object service should be passed in otherwise applications whichuse multiple overlay databases will not function properly
 * @see org.concord.framework.otrunk.view.OTControllerServiceFactory#createControllerService()
 */
      public OTControllerService createControllerService(){
        OTObjectService objectService=((OTControllerServiceImpl)controllerService).getObjectService();
        return createControllerService(objectService);
      }
    }
;
    OTViewContext factoryContext=viewFactory.getViewContext();
    factoryContext.addViewService(OTControllerServiceFactory.class,controllerServiceFactory);
  }
  String allTexts=""String_Node_Str"";
  for (int i=0; i < topLevelOTObjects.length; i++) {
    if (topLevelOTObjects[i] == null) {
      continue;
    }
    String text=null;
    OTJComponentView objView=getOTJComponentView(topLevelOTObjects[i],null,topLevelViewEntries[i]);
    OTXHTMLView xhtmlView=null;
    String bodyText=""String_Node_Str"";
    if (objView instanceof OTXHTMLView) {
      xhtmlView=(OTXHTMLView)objView;
      bodyText=xhtmlView.getXHTMLText(topLevelOTObjects[i]);
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(bodyText);
      StringBuffer parsed=new StringBuffer();
      OTObjectService objectService=topLevelOTObjects[i].getOTObjectService();
      while (m.find()) {
        String id=m.group(1);
        OTID otid=objectService.getOTID(id);
        OTObject referencedObject=null;
        try {
          referencedObject=objectService.getOTObject(otid);
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
        Pattern userPat=Pattern.compile(""String_Node_Str"");
        Matcher userMatcher=userPat.matcher(m.group(2));
        if (userMatcher.find()) {
          String userId=userMatcher.group(1);
          referencedObject=getRuntimeObject(referencedObject,userId);
        }
        OTViewEntry viewEntry=null;
        Pattern viewPat=Pattern.compile(""String_Node_Str"");
        Matcher viewMatcher=viewPat.matcher(m.group(2));
        if (viewMatcher.find()) {
          String viewId=viewMatcher.group(1);
          if (viewId != null && viewId.length() > 0) {
            OTID viewOTid=objectService.getOTID(viewId);
            try {
              viewEntry=(OTViewEntry)objectService.getOTObject(viewOTid);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        String url=Matcher.quoteReplacement(embedOTObject(referencedObject,viewEntry));
        if (url != null) {
          try {
            m.appendReplacement(parsed,url);
          }
 catch (          IllegalArgumentException e) {
            System.err.println(""String_Node_Str"" + url);
            e.printStackTrace();
          }
catch (          IndexOutOfBoundsException e) {
            System.err.println(""String_Node_Str"" + url);
            e.printStackTrace();
          }
        }
      }
      m.appendTail(parsed);
      text=""String_Node_Str"" + parsed.toString() + ""String_Node_Str"";
    }
 else {
      text=embedOTObject(topLevelOTObjects[i],topLevelViewEntries[i]);
    }
    allTexts=allTexts + text;
  }
  try {
    FileWriter fos=new FileWriter(outputFile);
    fos.write(""String_Node_Str"" + allTexts + ""String_Node_Str"");
    fos.close();
  }
 catch (  FileNotFoundException exp) {
    exp.printStackTrace();
  }
catch (  IOException exp) {
    exp.printStackTrace();
  }
}","public void run(){
  boolean xhtmlOutput=OTConfig.getBooleanProp(XHTML_EXPORT_WRAP_PROP,true);
  if (outputFile == null) {
    return;
  }
  if (topLevelOTObjects[0] != null) {
    controllerService=topLevelOTObjects[0].getOTObjectService().createControllerService();
    OTControllerServiceFactory controllerServiceFactory=new OTControllerServiceFactory(){
      public OTControllerService createControllerService(      OTObjectService objectService){
        OTControllerService subControllerService=((OTControllerServiceImpl)controllerService).createSubControllerService(objectService);
        return subControllerService;
      }
      /** 
 * @deprecated the object service should be passed in otherwise applications whichuse multiple overlay databases will not function properly
 * @see org.concord.framework.otrunk.view.OTControllerServiceFactory#createControllerService()
 */
      public OTControllerService createControllerService(){
        OTObjectService objectService=((OTControllerServiceImpl)controllerService).getObjectService();
        return createControllerService(objectService);
      }
    }
;
    OTViewContext factoryContext=viewFactory.getViewContext();
    factoryContext.addViewService(OTControllerServiceFactory.class,controllerServiceFactory);
  }
  String allTexts=""String_Node_Str"";
  for (int i=0; i < topLevelOTObjects.length; i++) {
    if (topLevelOTObjects[i] == null) {
      continue;
    }
    String text=null;
    OTJComponentView objView=getOTJComponentView(topLevelOTObjects[i],null,topLevelViewEntries[i]);
    OTXHTMLView xhtmlView=null;
    String bodyText=""String_Node_Str"";
    if (objView instanceof OTXHTMLView) {
      xhtmlView=(OTXHTMLView)objView;
      bodyText=xhtmlView.getXHTMLText(topLevelOTObjects[i]);
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(bodyText);
      StringBuffer parsed=new StringBuffer();
      OTObjectService objectService=topLevelOTObjects[i].getOTObjectService();
      while (m.find()) {
        String id=m.group(1);
        OTID otid=objectService.getOTID(id);
        OTObject referencedObject=null;
        try {
          referencedObject=objectService.getOTObject(otid);
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
        Pattern userPat=Pattern.compile(""String_Node_Str"");
        Matcher userMatcher=userPat.matcher(m.group(2));
        if (userMatcher.find()) {
          String userId=userMatcher.group(1);
          referencedObject=getRuntimeObject(referencedObject,userId);
        }
        OTViewEntry viewEntry=null;
        Pattern viewPat=Pattern.compile(""String_Node_Str"");
        Matcher viewMatcher=viewPat.matcher(m.group(2));
        if (viewMatcher.find()) {
          String viewId=viewMatcher.group(1);
          if (viewId != null && viewId.length() > 0) {
            OTID viewOTid=objectService.getOTID(viewId);
            try {
              viewEntry=(OTViewEntry)objectService.getOTObject(viewOTid);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        String url=Matcher.quoteReplacement(embedOTObject(referencedObject,viewEntry));
        if (url != null) {
          try {
            m.appendReplacement(parsed,url);
          }
 catch (          IllegalArgumentException e) {
            System.err.println(""String_Node_Str"" + url);
            e.printStackTrace();
          }
catch (          IndexOutOfBoundsException e) {
            System.err.println(""String_Node_Str"" + url);
            e.printStackTrace();
          }
        }
      }
      m.appendTail(parsed);
      if (xhtmlOutput) {
        text=""String_Node_Str"" + parsed.toString() + ""String_Node_Str"";
      }
 else {
        text=parsed.toString();
      }
    }
 else {
      text=embedOTObject(topLevelOTObjects[i],topLevelViewEntries[i]);
    }
    allTexts=allTexts + text;
  }
  try {
    FileWriter fos=new FileWriter(outputFile);
    if (xhtmlOutput) {
      fos.write(""String_Node_Str"" + allTexts + ""String_Node_Str"");
    }
 else {
      fos.write(allTexts);
    }
    fos.close();
  }
 catch (  FileNotFoundException exp) {
    exp.printStackTrace();
  }
catch (  IOException exp) {
    exp.printStackTrace();
  }
}"
21588,"/** 
 * This method should be used to read properties because in some places properties cannot be read.  So this will catch the exception when that happens, and it will not try to read the properties again.
 * @param property
 * @param defaultValue
 * @return
 */
public static boolean getBooleanProp(String property,boolean defaultValue){
  if (OTConfig.cannotReadProperties) {
    return defaultValue;
  }
  try {
    return Boolean.getBoolean(property);
  }
 catch (  AccessControlException e) {
    OTConfig.handlePropertyReadException(e);
    return defaultValue;
  }
}","/** 
 * This method should be used to read properties because in some places properties cannot be read.  So this will catch the exception when that happens, and it will not try to read the properties again.
 * @param property
 * @param defaultValue
 * @return
 */
public static boolean getBooleanProp(String property,boolean defaultValue){
  if (OTConfig.cannotReadProperties) {
    return defaultValue;
  }
  try {
    String value=System.getProperty(property,null);
    if (value == null) {
      return defaultValue;
    }
 else {
      return Boolean.parseBoolean(value);
    }
  }
 catch (  AccessControlException e) {
    OTConfig.handlePropertyReadException(e);
    return defaultValue;
  }
}"
21589,"public void init(String[] args){
  viewerHelper=new OTViewerHelper();
  try {
    viewerHelper.init(args);
    initFields();
    OTMLToXHTMLConverter conv=new OTMLToXHTMLConverter(viewFactory,rootObject,rootViewEntry,OTConfig.getSystemPropertyViewMode());
    String outputFolderStr=System.getProperty(""String_Node_Str"");
    if (outputFolderStr == null) {
      outputFolderStr=System.getProperty(""String_Node_Str"");
    }
    File outputFolder=new File(outputFolderStr);
    outputFolder.mkdirs();
    File fileToSave=new File(outputFolder,""String_Node_Str"");
    conv.setXHTMLParams(fileToSave,800,600);
    (new Thread(conv)).start();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public void init(String[] args){
  viewerHelper=new OTViewerHelper();
  try {
    viewerHelper.init(args);
    initFields();
    OTMLToXHTMLConverter conv=new OTMLToXHTMLConverter(viewFactory,rootObject,rootViewEntry,OTConfig.getSystemPropertyViewMode());
    String outputFolderStr=System.getProperty(""String_Node_Str"");
    if (outputFolderStr == null) {
      outputFolderStr=System.getProperty(""String_Node_Str"");
    }
    File outputFolder=new File(outputFolderStr);
    outputFolder.mkdirs();
    String fileName=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    File fileToSave=new File(outputFolder,fileName);
    conv.setXHTMLParams(fileToSave,800,600);
    (new Thread(conv)).start();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}"
21590,"@Override public OutputStream getBody() throws IOException {
  return fos;
}","@Override public OutputStream getBody() throws IOException {
  ByteArrayOutputStream output=new ByteArrayOutputStream(){
    private ArrayList<Byte> firstEight=new ArrayList<Byte>(8);
    private ArrayList<Byte> secondEight=new ArrayList<Byte>(8);
    private ArrayList<Byte> overflow=new ArrayList<Byte>();
    private boolean doneWithFirstBytes=false;
    @Override public void write(    byte[] bytes){
      try {
        int size=bytes.length;
        if (!doneWithFirstBytes) {
          for (int i=0; i < size; i++) {
            if (firstEight.size() < 8) {
              firstEight.add(bytes[i]);
            }
 else             if (secondEight.size() < 8) {
              secondEight.add(bytes[i]);
            }
 else {
              overflow.add(bytes[i]);
            }
          }
          if (overflow.size() > 0) {
            doneWithFirstBytes=true;
            fos.write(getFirstBytes());
            fos.write(convertToByteArray(overflow));
          }
        }
 else {
          fos.write(bytes);
        }
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
    @Override public void write(    byte[] bytes,    int off,    int len){
      byte[] outbytes=new byte[len];
      System.arraycopy(bytes,off,outbytes,0,len);
      write(outbytes);
    }
    @Override public void write(    int bit){
      super.write(bit);
    }
    private byte[] getFirstBytes(){
      if (!firstEight.equals(secondEight)) {
        logger.info(""String_Node_Str"");
        firstEight.addAll(secondEight);
      }
 else {
        logger.info(""String_Node_Str"");
      }
      return convertToByteArray(firstEight);
    }
    private byte[] convertToByteArray(    ArrayList<Byte> list){
      byte[] outBytes=new byte[list.size()];
      for (int i=0; i < list.size(); i++) {
        outBytes[i]=list.get(i);
      }
      return outBytes;
    }
  }
;
  return output;
}"
21591,"protected boolean shouldWriteReference(OTDataObject dataObj,OTDataObject parent,String parentResourceName){
  OTID id=dataObj.getGlobalId();
  if (writtenIds.contains(id)) {
    return true;
  }
  if (!(dataObj instanceof XMLDataObject)) {
    return false;
  }
  XMLDataObject xmlDO=(XMLDataObject)dataObj;
  XMLDataObject container=xmlDO.getContainer();
  if (container == null || !processedIds.contains(container.getGlobalId())) {
    return false;
  }
  String containerResourceName=xmlDO.getContainerResourceKey();
  if (parent == container && parentResourceName.equals(containerResourceName)) {
    return false;
  }
  Object containedValue=container.getResourceWithSuffix(containerResourceName);
  if (containedValue.equals(id)) {
    return true;
  }
  return false;
}","protected boolean shouldWriteReference(OTDataObject dataObj,OTDataObject parent,String parentResourceName){
  OTID id=dataObj.getGlobalId();
  if (writtenIds.contains(id)) {
    return true;
  }
  if (!(dataObj instanceof XMLDataObject)) {
    return false;
  }
  XMLDataObject xmlDO=(XMLDataObject)dataObj;
  XMLDataObject container=xmlDO.getContainer();
  if (container == null || !processedIds.contains(container.getGlobalId())) {
    return false;
  }
  String containerResourceName=xmlDO.getContainerResourceKey();
  if (parent == container && parentResourceName.equals(containerResourceName)) {
    return false;
  }
  Object containedValue=container.getResourceWithSuffix(containerResourceName);
  if (id.equals(containedValue)) {
    return true;
  }
  return false;
}"
21592,"Object getResourceWithSuffix(String key){
  int suffixStartIndex=key.indexOf('[');
  if (suffixStartIndex == -1) {
    return getResource(key);
  }
  int suffixEndIndex=key.indexOf(']');
  if (suffixEndIndex == -1) {
    throw new IllegalStateException(""String_Node_Str"" + key);
  }
  String property=key.substring(0,suffixStartIndex);
  Object resource=getResource(property);
  if (resource instanceof XMLDataList) {
    XMLDataList list=(XMLDataList)resource;
    String indexStr=key.substring(suffixStartIndex + 1,suffixEndIndex);
    return list.get(Integer.parseInt(indexStr));
  }
 else   if (resource instanceof XMLDataMap) {
    XMLDataMap map=(XMLDataMap)resource;
    String mapKey=key.substring(suffixStartIndex + 2,suffixEndIndex - 1);
    return map.get(mapKey);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + key);
  }
}","Object getResourceWithSuffix(String key){
  int suffixStartIndex=key.indexOf('[');
  if (suffixStartIndex == -1) {
    return getResource(key);
  }
  int suffixEndIndex=key.indexOf(']');
  if (suffixEndIndex == -1) {
    throw new IllegalStateException(""String_Node_Str"" + key);
  }
  String property=key.substring(0,suffixStartIndex);
  Object resource=getResource(property);
  if (resource instanceof XMLDataList) {
    XMLDataList list=(XMLDataList)resource;
    String indexStr=key.substring(suffixStartIndex + 1,suffixEndIndex);
    int index=Integer.parseInt(indexStr);
    if (index < 0 || index >= list.size()) {
      return null;
    }
    return list.get(index);
  }
 else   if (resource instanceof XMLDataMap) {
    XMLDataMap map=(XMLDataMap)resource;
    String mapKey=key.substring(suffixStartIndex + 2,suffixEndIndex - 1);
    return map.get(mapKey);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + key);
  }
}"
21593,"public void loadURL(URL url) throws Exception {
  XMLDatabase systemDB=null;
  try {
    String systemOtmlUrlStr=OTConfig.getStringProp(OTConfig.SYSTEM_OTML_PROP);
    if (systemOtmlUrlStr != null) {
      URL systemOtmlUrl=new URL(systemOtmlUrlStr);
      systemDB=new XMLDatabase(systemOtmlUrl,true,System.out);
      systemDB.loadObjects();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    systemDB=null;
  }
  try {
    xmlDB=new XMLDatabase(url,true,System.out);
    if (userMode == OTConfig.NO_USER_MODE) {
      xmlDB.setTrackResourceInfo(true);
    }
    xmlDB.loadObjects();
  }
 catch (  org.jdom.input.JDOMParseException e) {
    String xmlWarningTitle=""String_Node_Str"";
    String xmlWarningMessage=""String_Node_Str"" + ""String_Node_Str"" + e.getMessage();
    JOptionPane.showMessageDialog(null,xmlWarningMessage,xmlWarningTitle,JOptionPane.ERROR_MESSAGE);
    throw e;
  }
  addService(UserMessageHandler.class,new SwingUserMessageHandler(this));
  otrunk=new OTrunkImpl(systemDB,xmlDB,services);
  OTViewFactory myViewFactory=otrunk.getService(OTViewFactory.class);
  if (myViewFactory != null) {
    otViewFactory=myViewFactory;
  }
  OTViewContext factoryContext=otViewFactory.getViewContext();
  factoryContext.addViewService(OTrunk.class,otrunk);
  factoryContext.addViewService(OTFrameManager.class,frameManager);
  factoryContext.addViewService(OTJComponentServiceFactory.class,new OTJComponentServiceFactoryImpl());
  factoryContext.addViewService(OTExternalAppService.class,new OTExternalAppServiceImpl());
  factoryContext.addViewService(OTUserListService.class,new OTUserListService(){
    public Vector<OTUser> getUserList(){
      return otrunk.getUsers();
    }
  }
);
  ((OTViewFactoryImpl)otViewFactory).contextSetupComplete();
  currentURL=url;
}","public void loadURL(URL url) throws Exception {
  if (""String_Node_Str"".equalsIgnoreCase(url.getProtocol())) {
    currentAuthoredFile=new File(url.getPath());
  }
  XMLDatabase systemDB=null;
  try {
    String systemOtmlUrlStr=OTConfig.getStringProp(OTConfig.SYSTEM_OTML_PROP);
    if (systemOtmlUrlStr != null) {
      URL systemOtmlUrl=new URL(systemOtmlUrlStr);
      systemDB=new XMLDatabase(systemOtmlUrl,true,System.out);
      systemDB.loadObjects();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    systemDB=null;
  }
  try {
    xmlDB=new XMLDatabase(url,true,System.out);
    if (userMode == OTConfig.NO_USER_MODE) {
      xmlDB.setTrackResourceInfo(true);
    }
    xmlDB.loadObjects();
  }
 catch (  org.jdom.input.JDOMParseException e) {
    String xmlWarningTitle=""String_Node_Str"";
    String xmlWarningMessage=""String_Node_Str"" + ""String_Node_Str"" + e.getMessage();
    JOptionPane.showMessageDialog(null,xmlWarningMessage,xmlWarningTitle,JOptionPane.ERROR_MESSAGE);
    throw e;
  }
  addService(UserMessageHandler.class,new SwingUserMessageHandler(this));
  otrunk=new OTrunkImpl(systemDB,xmlDB,services);
  OTViewFactory myViewFactory=otrunk.getService(OTViewFactory.class);
  if (myViewFactory != null) {
    otViewFactory=myViewFactory;
  }
  OTViewContext factoryContext=otViewFactory.getViewContext();
  factoryContext.addViewService(OTrunk.class,otrunk);
  factoryContext.addViewService(OTFrameManager.class,frameManager);
  factoryContext.addViewService(OTJComponentServiceFactory.class,new OTJComponentServiceFactoryImpl());
  factoryContext.addViewService(OTExternalAppService.class,new OTExternalAppServiceImpl());
  factoryContext.addViewService(OTUserListService.class,new OTUserListService(){
    public Vector<OTUser> getUserList(){
      return otrunk.getUsers();
    }
  }
);
  ((OTViewFactoryImpl)otViewFactory).contextSetupComplete();
  currentURL=url;
}"
21594,"public void initArgs(String[] args){
  URL authorOTMLURL=OTViewerHelper.getURLFromArgs(args);
  if (authorOTMLURL == null && System.getProperty(OTML_URL_PROP,null) != null) {
    try {
      authorOTMLURL=new URL(System.getProperty(OTML_URL_PROP,null));
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  if (authorOTMLURL == null) {
    authorOTMLURL=OTViewer.class.getResource(""String_Node_Str"");
  }
  if (""String_Node_Str"".equalsIgnoreCase(authorOTMLURL.getProtocol())) {
    currentAuthoredFile=new File(authorOTMLURL.getPath());
  }
  initWithWizard(authorOTMLURL);
}","public void initArgs(String[] args){
  URL authorOTMLURL=OTViewerHelper.getURLFromArgs(args);
  if (authorOTMLURL == null && System.getProperty(OTML_URL_PROP,null) != null) {
    try {
      authorOTMLURL=new URL(System.getProperty(OTML_URL_PROP,null));
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  if (authorOTMLURL == null) {
    authorOTMLURL=OTViewer.class.getResource(""String_Node_Str"");
  }
  initWithWizard(authorOTMLURL);
}"
21595,"public JComponent getComponent(OTObject otObject){
  wrapper=(OTOverlayWrapper)otObject;
  overlay=wrapper.getOverlay();
  groupListManager=wrapper.getOTObjectService().getOTrunkService(OTGroupListManager.class);
  overlayManager=wrapper.getOTObjectService().getOTrunkService(OTUserOverlayManager.class);
  wrappedObject=wrapper.getWrappedObject();
  if (overlay == null && groupListManager != null && overlayManager != null) {
    OTUserObject currentGroupMember=groupListManager.getCurrentGroupMember().getUserObject();
    overlay=overlayManager.getOverlay(currentGroupMember);
  }
  subview=createSubViewComponent(wrappedObject);
  mainPanel=new JPanel();
  mainPanel.setLayout(new GridBagLayout());
  noStretchConstraints=new GridBagConstraints();
  noStretchConstraints.anchor=GridBagConstraints.NORTHWEST;
  noStretchConstraints.weightx=0;
  noStretchConstraints.weighty=0;
  noStretchConstraints.fill=GridBagConstraints.NONE;
  noStretchConstraints.gridwidth=GridBagConstraints.REMAINDER;
  noStretchConstraints.ipady=5;
  stretchConstraints=new GridBagConstraints();
  stretchConstraints.anchor=GridBagConstraints.NORTHWEST;
  stretchConstraints.weightx=1;
  stretchConstraints.weighty=0;
  stretchConstraints.fill=GridBagConstraints.HORIZONTAL;
  stretchConstraints.gridwidth=GridBagConstraints.REMAINDER;
  stretchConstraints.ipady=5;
  mainPanel.add(subview,stretchConstraints);
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
  if (wrapper.getShowButton()) {
    submitButton=new JButton(wrapper.getButtonText());
    buttonPanel.add(submitButton);
    submitButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        saveData();
      }
    }
);
  }
  resultsObject=wrapper.getResultsObject();
  if (resultsObject != null) {
    JButton resultsButton=new JButton(""String_Node_Str"");
    buttonPanel.add(resultsButton);
    resultsButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        popUpResults();
      }
    }
);
  }
  submittedLabel=new JLabel(""String_Node_Str"");
  buttonPanel.add(submittedLabel);
  mainPanel.add(buttonPanel,stretchConstraints);
  return mainPanel;
}","public JComponent getComponent(OTObject otObject){
  wrapper=(OTOverlayWrapper)otObject;
  overlay=wrapper.getOverlay();
  groupListManager=wrapper.getOTObjectService().getOTrunkService(OTGroupListManager.class);
  overlayManager=wrapper.getOTObjectService().getOTrunkService(OTUserOverlayManager.class);
  wrappedObject=wrapper.getWrappedObject();
  if (overlay == null && groupListManager != null && overlayManager != null) {
    OTUserObject currentGroupMember=groupListManager.getCurrentGroupMember().getUserObject();
    overlay=overlayManager.getOverlay(currentGroupMember);
  }
  subview=createSubViewComponent(wrappedObject);
  mainPanel=new JPanel();
  mainPanel.setLayout(new GridBagLayout());
  noStretchConstraints=new GridBagConstraints();
  noStretchConstraints.anchor=GridBagConstraints.NORTHWEST;
  noStretchConstraints.weightx=0;
  noStretchConstraints.weighty=0;
  noStretchConstraints.fill=GridBagConstraints.NONE;
  noStretchConstraints.gridwidth=GridBagConstraints.REMAINDER;
  noStretchConstraints.ipady=5;
  stretchConstraints=new GridBagConstraints();
  stretchConstraints.anchor=GridBagConstraints.NORTHWEST;
  stretchConstraints.weightx=1;
  stretchConstraints.weighty=0;
  stretchConstraints.fill=GridBagConstraints.HORIZONTAL;
  stretchConstraints.gridwidth=GridBagConstraints.REMAINDER;
  stretchConstraints.ipady=5;
  mainPanel.add(subview,stretchConstraints);
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
  if (wrapper.getShowButton()) {
    submitButton=new JButton(wrapper.getButtonText());
    buttonPanel.add(submitButton);
    submitButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        saveData();
      }
    }
);
  }
  resultsObject=wrapper.getResultsObject();
  if (resultsObject != null) {
    JButton resultsButton=new JButton(""String_Node_Str"");
    buttonPanel.add(resultsButton);
    resultsButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        popUpResults();
      }
    }
);
  }
  submittedLabel=new JLabel(""String_Node_Str"");
  buttonPanel.add(submittedLabel);
  mainPanel.add(buttonPanel,stretchConstraints);
  invokeLater(10);
  return mainPanel;
}"
21596,"private void logPreserveUUIDError(String string){
  logger.warning(string);
  Throwable throwable=new IllegalArgumentException(string);
  StackTraceElement stackTraceElement=throwable.getStackTrace()[2];
  String callerStr=stackTraceElement.getClassName() + ""String_Node_Str"" + stackTraceElement.getMethodName();
  Object value=preserveUUIDCallers.get(callerStr);
  if (value != null) {
    return;
  }
  preserveUUIDCallers.put(callerStr,callerStr);
  logger.log(Level.FINE,""String_Node_Str"",string);
}","private void logPreserveUUIDError(String string){
  logger.warning(string);
  Throwable throwable=new IllegalArgumentException(string);
  StackTraceElement stackTraceElement=throwable.getStackTrace()[2];
  String callerStr=stackTraceElement.getClassName() + ""String_Node_Str"" + stackTraceElement.getMethodName();
  Object value=preserveUUIDCallers.get(callerStr);
  if (value != null) {
    return;
  }
  preserveUUIDCallers.put(callerStr,callerStr);
  logger.log(Level.FINE,""String_Node_Str"",throwable);
}"
21597,"public OTObject getRuntimeObject(OTObject object,String userStr){
  try {
    OTObjectService objectService=object.getOTObjectService();
    OTrunk otrunk=(OTrunk)objectService.getOTrunkService(OTrunk.class);
    OTID userId=objectService.getOTID(userStr);
    OTUser user=(OTUser)objectService.getOTObject(userId);
    return otrunk.getUserRuntimeObject(object,user);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public OTObject getRuntimeObject(OTObject object,String userStr){
  try {
    OTObjectService objectService=object.getOTObjectService();
    OTrunk otrunk=objectService.getOTrunkService(OTrunk.class);
    OTID userId=objectService.getOTID(userStr);
    OTUser user=(OTUser)objectService.getOTObject(userId);
    return otrunk.getUserRuntimeObject(object,user);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
21598,"public String embedOTObject(OTObject obj,OTViewEntry viewEntry){
  OTView view=viewFactory.getView(obj,OTPrintDimension.class);
  if (view == null) {
    view=(OTView)viewFactory.getView(obj,OTJComponentView.class);
  }
  if (view instanceof OTXHTMLView) {
    String objectText=((OTXHTMLView)view).getXHTMLText(obj);
    return objectText;
  }
  view=getOTJComponentView(obj,null,viewEntry);
  JComponent comp=((OTJComponentView)view).getComponent(obj);
  Dimension printDim=null;
  if (view instanceof OTPrintDimension) {
    OTPrintDimension dimView=(OTPrintDimension)view;
    printDim=dimView.getPrintDimension(obj,containerDisplayWidth,containerDisplayHeight);
  }
  if (printDim != null) {
    comp.setSize(printDim);
  }
 else {
    Dimension dim2=comp.getPreferredSize();
    if (dim2.width == 0)     dim2.width=1;
    if (dim2.height == 0)     dim2.height=1;
    comp.setSize(dim2);
  }
  String url=embedComponent(comp,1,1,obj);
  url=""String_Node_Str"" + url + ""String_Node_Str"";
  return url;
}","public String embedOTObject(OTObject obj,OTViewEntry viewEntry){
  OTView view=viewFactory.getView(obj,OTPrintDimension.class);
  if (view == null) {
    view=viewFactory.getView(obj,OTJComponentView.class);
  }
  if (view instanceof OTXHTMLView) {
    String objectText=((OTXHTMLView)view).getXHTMLText(obj);
    return objectText;
  }
  view=getOTJComponentView(obj,null,viewEntry);
  if (view instanceof OTXHTMLView) {
    String objectText=((OTXHTMLView)view).getXHTMLText(obj);
    return objectText;
  }
  JComponent comp=((OTJComponentView)view).getComponent(obj);
  Dimension printDim=null;
  if (view instanceof OTPrintDimension) {
    OTPrintDimension dimView=(OTPrintDimension)view;
    printDim=dimView.getPrintDimension(obj,containerDisplayWidth,containerDisplayHeight);
  }
  if (printDim != null) {
    comp.setSize(printDim);
  }
 else {
    Dimension dim2=comp.getPreferredSize();
    if (dim2.width == 0)     dim2.width=1;
    if (dim2.height == 0)     dim2.height=1;
    comp.setSize(dim2);
  }
  String url=embedComponent(comp,1,1,obj);
  url=""String_Node_Str"" + url + ""String_Node_Str"";
  return url;
}"
21599,"protected OTJComponentView getOTJComponentView(OTObject obj,String mode,OTViewEntry viewEntry){
  if (jComponentService == null) {
    OTViewContext viewContext=viewFactory.getViewContext();
    OTJComponentServiceFactory serviceFactory=(OTJComponentServiceFactory)viewContext.getViewService(OTJComponentServiceFactory.class);
    jComponentService=serviceFactory.createOTJComponentService(viewFactory,false);
  }
  if (viewEntry != null) {
    return jComponentService.getObjectView(obj,viewContainer,mode,viewEntry);
  }
 else {
    return jComponentService.getObjectView(obj,viewContainer,mode);
  }
}","protected OTJComponentView getOTJComponentView(OTObject obj,String mode,OTViewEntry viewEntry){
  if (jComponentService == null) {
    OTViewContext viewContext=viewFactory.getViewContext();
    OTJComponentServiceFactory serviceFactory=viewContext.getViewService(OTJComponentServiceFactory.class);
    jComponentService=serviceFactory.createOTJComponentService(viewFactory,false);
  }
  if (viewEntry != null) {
    return jComponentService.getObjectView(obj,viewContainer,mode,viewEntry);
  }
 else {
    return jComponentService.getObjectView(obj,viewContainer,mode);
  }
}"
21600,"/** 
 * Adds all the viewEntries from the bundle  Overrides the default view mode. Adds the bundle to the beginning of the list of bundles which is used to find view mode view entries.
 * @param viewBundle
 */
public void addViewBundle(OTViewBundle viewBundle){
  Vector viewEntries=viewBundle.getViewEntries().getVector();
  Iterator it=viewEntries.iterator();
  Vector tempViewMap=new Vector();
  while (it.hasNext()) {
    tempViewMap.add(createInternalViewEntry((OTViewEntry)it.next()));
  }
  viewMap.addAll(0,tempViewMap);
  if (viewBundle.getCurrentMode() != null) {
    setDefaultViewMode(viewBundle.getCurrentMode());
  }
  viewBundles.add(0,viewBundle);
}","/** 
 * Adds all the viewEntries from the bundle  Overrides the default view mode. Adds the bundle to the beginning of the list of bundles which is used to find view mode view entries.
 * @param viewBundle
 */
public void addViewBundle(OTViewBundle viewBundle){
  Vector viewEntries=viewBundle.getViewEntries().getVector();
  Iterator it=viewEntries.iterator();
  Vector tempViewMap=new Vector();
  while (it.hasNext()) {
    InternalViewEntry internalViewEntry=createInternalViewEntry((OTViewEntry)it.next());
    if (internalViewEntry == null) {
      continue;
    }
    tempViewMap.add(internalViewEntry);
  }
  viewMap.addAll(0,tempViewMap);
  if (viewBundle.getCurrentMode() != null) {
    setDefaultViewMode(viewBundle.getCurrentMode());
  }
  viewBundles.add(0,viewBundle);
}"
21601,"public String updateFormatedView(){
  if (pfObject == null)   return null;
  String markupLanguage=pfObject.getMarkupLanguage();
  if (markupLanguage == null) {
    markupLanguage=System.getProperty(""String_Node_Str"",null);
  }
  String bodyText=pfObject.getDocumentText();
  bodyText=substituteIncludables(bodyText);
  int origCaretPos=0;
  if (markupLanguage == null || markupLanguage.equals(OTDocument.MARKUP_PFHTML) || markupLanguage.equals(OTDocument.MARKUP_PLAIN)) {
    if (editorPane == null) {
      editorPane=new MyJEditorPane();
      OTHTMLFactory kitViewFactory=new OTHTMLFactory(this);
      editorKit=new OTDocumentEditorKit(kitViewFactory);
      editorPane.setEditorKit(editorKit);
      editorPane.setEditable(true);
      editorPane.addHyperlinkListener(this);
      editorPane.addKeyListener(this);
    }
    origCaretPos=editorPane.getCaretPosition();
    bodyText=htmlizeText(bodyText);
    if (documentConfig != null) {
      String css=documentConfig.getCssText();
      String XHTML_PREFIX=XHTML_PREFIX_START + css + XHTML_PREFIX_END;
      bodyText=XHTML_PREFIX + bodyText + XHTML_SUFFIX;
    }
    removeAllSubViews();
    editorPane.setText(bodyText);
    previewComponent=editorPane;
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  if (parsedTextArea == null) {
    parsedTextArea=new JTextArea();
  }
  parsedTextArea.setText(bodyText);
  editorPane.setCaretPosition(origCaretPos);
  return bodyText;
}","public String updateFormatedView(){
  if (pfObject == null)   return null;
  String markupLanguage=pfObject.getMarkupLanguage();
  if (markupLanguage == null) {
    markupLanguage=System.getProperty(""String_Node_Str"",null);
  }
  String bodyText=pfObject.getDocumentText();
  if (bodyText == null)   bodyText=""String_Node_Str"";
  bodyText=substituteIncludables(bodyText);
  int origCaretPos=0;
  if (markupLanguage == null || markupLanguage.equals(OTDocument.MARKUP_PFHTML) || markupLanguage.equals(OTDocument.MARKUP_PLAIN)) {
    if (editorPane == null) {
      editorPane=new MyJEditorPane();
      OTHTMLFactory kitViewFactory=new OTHTMLFactory(this);
      editorKit=new OTDocumentEditorKit(kitViewFactory);
      editorPane.setEditorKit(editorKit);
      editorPane.setEditable(true);
      editorPane.addHyperlinkListener(this);
      editorPane.addKeyListener(this);
    }
    origCaretPos=editorPane.getCaretPosition();
    bodyText=htmlizeText(bodyText);
    if (documentConfig != null) {
      String css=documentConfig.getCssText();
      String XHTML_PREFIX=XHTML_PREFIX_START + css + XHTML_PREFIX_END;
      bodyText=XHTML_PREFIX + bodyText + XHTML_SUFFIX;
    }
    removeAllSubViews();
    editorPane.setText(bodyText);
    previewComponent=editorPane;
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  if (parsedTextArea == null) {
    parsedTextArea=new JTextArea();
  }
  parsedTextArea.setText(bodyText);
  editorPane.setCaretPosition(origCaretPos);
  return bodyText;
}"
21602,"public URL getCodebase(OTObject otObject){
  OTID id=otObject.getGlobalId();
  try {
    OTDataObject dataObject=getOTDataObject(id);
    return dataObject.getCodebase();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public URL getCodebase(OTObject otObject){
  OTID id=otObject.getGlobalId();
  try {
    OTDataObject dataObject=OTInvocationHandler.getOTDataObject(otObject);
    return dataObject.getCodebase();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
21603,"/** 
 * @param dataParent
 * @param childID
 * @return
 * @throws Exception
 */
private OTDataObject getOTDataObject(OTID childID) throws Exception {
  if (childID == null) {
    throw new Exception(""String_Node_Str"");
  }
  OTDataObject childDataObject=mainDb.getOTDataObject(null,childID);
  return childDataObject;
}","/** 
 * @param dataParent
 * @param childID
 * @return
 * @throws Exception
 */
OTDataObject getOTDataObject(OTID childID) throws Exception {
  if (childID == null) {
    throw new Exception(""String_Node_Str"");
  }
  OTDataObject childDataObject=mainDb.getOTDataObject(null,childID);
  return childDataObject;
}"
21604,"public OTObject copyObject(OTObject original,OTObjectList orphanObjectList,int maxDepth) throws Exception {
  OTObjectServiceImpl originalObjectService=(OTObjectServiceImpl)original.getOTObjectService();
  OTDataObject originalDataObject=originalObjectService.getOTDataObject(original.getGlobalId());
  OTDataList orphanDataList=((OTObjectListImpl)orphanObjectList).getDataList();
  OTDataObject copyDataObject=DataObjectUtil.copy(originalDataObject,creationDb,orphanDataList,maxDepth,this,otrunk.getDataObjectFinder());
  return getOTObject(copyDataObject.getGlobalId());
}","public OTObject copyObject(OTObject original,OTObjectList orphanObjectList,int maxDepth) throws Exception {
  OTDataObject originalDataObject=OTInvocationHandler.getOTDataObject(original);
  OTDataList orphanDataList=((OTObjectListImpl)orphanObjectList).getDataList();
  OTDataObject copyDataObject=DataObjectUtil.copy(originalDataObject,creationDb,orphanDataList,maxDepth,this,otrunk.getDataObjectFinder());
  return getOTObject(copyDataObject.getGlobalId());
}"
21605,"public boolean hasUserModified(OTObject authoredObject,OTUser user) throws Exception {
  OTID authoredId=authoredObject.getGlobalId();
  OTID userId=user.getUserId();
  CompositeDatabase db=(CompositeDatabase)compositeDatabases.get(userId);
  if (db == null) {
    return false;
  }
  OTDataObject userDataObject=db.getOTDataObject(null,authoredId);
  if (userDataObject instanceof CompositeDataObject) {
    OTDataObject userModifications=((CompositeDataObject)userDataObject).getActiveDeltaObject();
    return userModifications != null;
  }
  return false;
}","public boolean hasUserModified(OTObject authoredObject,OTUser user) throws Exception {
  OTObject userObject=getUserRuntimeObject(authoredObject,user);
  return isModifiedInTopOverlay(userObject);
}"
21606,public Object getResource(String key);,"/** 
 * Return the value of the resource.  If the resource is not set it returns null.  Resources can also be set to null, so  the containsKey method should be used to test if this object actually has the key or not.
 * @param key
 * @return
 */
public Object getResource(String key);"
21607,"public Object getResource(String key){
  if (!composite) {
    return baseObject.getResource(key);
  }
  Object value=null;
  OTDataObject localActiveDelta=getActiveDeltaObject();
  if (localActiveDelta != null) {
    value=localActiveDelta.getResource(key);
    if (value != null) {
      return value;
    }
  }
  return getNonActiveDeltaResource(key);
}","public Object getResource(String key){
  if (!composite) {
    return baseObject.getResource(key);
  }
  Object value=null;
  OTDataObject localActiveDelta=getActiveDeltaObject();
  if (localActiveDelta != null) {
    value=localActiveDelta.getResource(key);
    if (value != null) {
      return value;
    }
 else     if (localActiveDelta.containsKey(key)) {
      return null;
    }
  }
  return getNonActiveDeltaResource(key);
}"
21608,"protected Object getNonActiveDeltaResource(String key){
  Object value=null;
  if (middleDeltas != null) {
    for (int i=0; i < middleDeltas.length; i++) {
      OTDataObject delta=middleDeltas[i];
      if (delta != null) {
        value=delta.getResource(key);
        if (value != null) {
          return value;
        }
      }
    }
  }
  return baseObject.getResource(key);
}","protected Object getNonActiveDeltaResource(String key){
  Object value=null;
  if (middleDeltas != null) {
    for (int i=0; i < middleDeltas.length; i++) {
      OTDataObject delta=middleDeltas[i];
      if (delta != null) {
        value=delta.getResource(key);
        if (value != null) {
          return value;
        }
 else         if (delta.containsKey(key)) {
          return null;
        }
      }
    }
  }
  return baseObject.getResource(key);
}"
21609,"public OTDataObject getActiveDeltaObject(OTDataObject baseObject){
  return activeOverlay.getDeltaObject(baseObject);
}","public OTDataObject getActiveDeltaObject(OTDataObject baseObject){
  OTDataObject deltaObject=activeOverlay.getDeltaObject(baseObject);
  if (deltaObject instanceof XMLDataObject) {
    ((XMLDataObject)deltaObject).setSaveNulls(true);
  }
  return deltaObject;
}"
21610,"public OTDataObject createActiveDeltaObject(OTDataObject baseObject){
  return activeOverlay.createDeltaObject(baseObject);
}","public OTDataObject createActiveDeltaObject(OTDataObject baseObject){
  OTDataObject deltaObject=activeOverlay.createDeltaObject(baseObject);
  if (deltaObject instanceof XMLDataObject) {
    ((XMLDataObject)deltaObject).setSaveNulls(true);
  }
  return deltaObject;
}"
21611,"protected Component createComponent(){
  AttributeSet attr=getElement().getAttributes();
  String refId=(String)attr.getAttribute(""String_Node_Str"");
  String editStr=(String)attr.getAttribute(""String_Node_Str"");
  String viewId=(String)attr.getAttribute(""String_Node_Str"");
  String userId=(String)attr.getAttribute(""String_Node_Str"");
  String modeStr=(String)attr.getAttribute(""String_Node_Str"");
  if (editStr != null && editStr.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
  }
  if (refId != null && refId.length() > 0) {
    OTObject childObject=docView.getReferencedObject(refId);
    if (userId != null) {
      childObject=docView.getRuntimeObject(childObject,userId);
    }
    if (childObject == null) {
      return new JLabel(""String_Node_Str"" + refId);
    }
    OTViewEntry viewEntry=null;
    if (viewId != null && viewId.length() > 0) {
      viewEntry=(OTViewEntry)docView.getReferencedObject(viewId);
    }
    if (modeStr != null) {
      if (modeStr.length() == 0) {
        modeStr=null;
      }
      viewContainerPanel.setViewMode(modeStr);
    }
    viewContainerPanel.setCurrentObject(childObject,viewEntry);
    return viewContainerPanel;
  }
  return null;
}","protected Component createComponent(){
  AttributeSet attr=getElement().getAttributes();
  String refId=(String)attr.getAttribute(""String_Node_Str"");
  String editStr=(String)attr.getAttribute(""String_Node_Str"");
  String viewId=(String)attr.getAttribute(""String_Node_Str"");
  String userId=(String)attr.getAttribute(""String_Node_Str"");
  String modeStr=(String)attr.getAttribute(""String_Node_Str"");
  if (editStr != null && editStr.equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
  }
  if (refId != null && refId.length() > 0) {
    OTObject childObject=docView.getReferencedObject(refId);
    if (userId != null) {
      childObject=docView.getRuntimeObject(childObject,userId);
    }
    if (childObject == null) {
      return new JLabel(""String_Node_Str"" + refId);
    }
    OTViewEntry viewEntry=null;
    if (viewId != null && viewId.length() > 0) {
      try {
        viewEntry=(OTViewEntry)docView.getReferencedObject(viewId);
      }
 catch (      ClassCastException e) {
        System.err.println(""String_Node_Str"" + viewId + ""String_Node_Str"");
        throw e;
      }
    }
    if (modeStr != null) {
      if (modeStr.length() == 0) {
        modeStr=null;
      }
      viewContainerPanel.setViewMode(modeStr);
    }
    viewContainerPanel.setCurrentObject(childObject,viewEntry);
    return viewContainerPanel;
  }
  return null;
}"
21612,"public Element exportObject(OTDataObject dataObj,OTDataObject parent,String parentResourceName) throws Exception {
  OTID id=dataObj.getGlobalId();
  if (shouldWriteReference(dataObj,parent,parentResourceName)) {
    return exportObjectReference(id);
  }
  writtenIds.add(id);
  String objectFullClassName=OTrunkImpl.getClassName(dataObj);
  String objectElementName=getObjectElementName(objectFullClassName);
  Element objectEl=new Element(objectElementName);
  XMLDataObject xmlDO=null;
  if (dataObj instanceof XMLDataObject) {
    xmlDO=(XMLDataObject)dataObj;
  }
  if (xmlDO != null && xmlDO.getLocalId() != null) {
    objectEl.setAttribute(""String_Node_Str"",xmlDO.getLocalId());
  }
 else {
    ArrayList incomingReferences=(ArrayList)incomingReferenceMap.get(id);
    if ((xmlDO != null && xmlDO.isPreserveUUID() && id instanceof OTUUID) || (incomingReferences != null && incomingReferences.size() > 1)) {
      objectEl.setAttribute(""String_Node_Str"",id.toExternalForm());
    }
  }
  String resourceKeys[]=dataObj.getResourceKeys();
  for (int i=0; i < resourceKeys.length; i++) {
    String resourceName=resourceKeys[i];
    if (resourceName.equals(""String_Node_Str"") || resourceName.equals(""String_Node_Str"")) {
      continue;
    }
    Object resource=dataObj.getResource(resourceName);
    if (resource instanceof OTID) {
      Element objectIDEl=exportID(dataObj,(OTID)resource,resourceName);
      writeResourceElement(dataObj,objectEl,resourceName,objectIDEl);
    }
 else     if (resource instanceof OTDataList) {
      OTDataList list=(OTDataList)resource;
      if (list.size() == 0) {
        continue;
      }
      ArrayList content=new ArrayList();
      for (int j=0; j < list.size(); j++) {
        Object listElement=list.get(j);
        if (list instanceof XMLDataList) {
          XMLReferenceInfo info=((XMLDataList)list).getReferenceInfo(j);
          if (info != null && info.comment != null) {
            content.add(new Comment(info.comment));
          }
        }
        Element collectionEl=exportCollectionItem(dataObj,listElement,resourceName);
        if (collectionEl != null) {
          content.add(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof OTDataMap) {
      OTDataMap map=(OTDataMap)resource;
      String[] mapKeys=map.getKeys();
      ArrayList content=new ArrayList();
      for (int j=0; j < mapKeys.length; j++) {
        Element entryEl=new Element(""String_Node_Str"");
        content.add(entryEl);
        String exportedKey=mapKeys[j];
        try {
          OTID otid=OTIDFactory.createOTID(mapKeys[j]);
          if (otid != null) {
            if (isLocalId(otid)) {
              exportedKey=convertId(otid);
            }
          }
        }
 catch (        Throwable t) {
        }
        entryEl.setAttribute(""String_Node_Str"",exportedKey);
        Object mapValue=map.get(mapKeys[j]);
        Element collectionEl=exportCollectionItem(dataObj,mapValue,resourceName);
        entryEl.addContent(collectionEl);
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof BlobResource) {
      BlobResource blob=(BlobResource)resource;
      URL blobUrl=blob.getBlobURL();
      String blobString=null;
      int defaultType=XMLReferenceInfo.ELEMENT;
      if (blobUrl != null) {
        if (contextURL != null) {
          blobString=URLUtil.getRelativeURL(contextURL,blobUrl);
        }
 else {
          blobString=blobUrl.toString();
        }
        defaultType=XMLReferenceInfo.ATTRIBUTE;
      }
 else {
        blobString=BlobTypeHandler.base64(blob.getBytes());
      }
      writeResource(dataObj,objectEl,resourceName,blobString,defaultType);
    }
 else     if (resource == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (resource instanceof Integer || resource instanceof Float || resource instanceof Byte|| resource instanceof Short|| resource instanceof Boolean) {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
 else     if (resource instanceof OTXMLString) {
      String xmlString=((OTXMLString)resource).getContent();
      xmlString=exportXMLString(refidPattern,xmlString);
      xmlString=exportXMLString(viewidPattern,xmlString);
      xmlString=exportXMLString(hrefPattern,xmlString);
      String originalString=xmlString.trim();
      SAXBuilder builder=new SAXBuilder();
      xmlString=""String_Node_Str"" + originalString + ""String_Node_Str"";
      StringReader reader=new StringReader(xmlString);
      try {
        Document xmlStringDoc=builder.build(reader,resourceName);
        Element rootXMLStringEl=xmlStringDoc.getRootElement();
        writeResourceElement(dataObj,objectEl,resourceName,rootXMLStringEl.cloneContent());
      }
 catch (      JDOMParseException e) {
        System.err.println(""String_Node_Str"" + e.getCause());
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(xmlString);
        System.err.println(""String_Node_Str"");
        String warning=""String_Node_Str"" + e.getCause();
        Object[] options={""String_Node_Str"",""String_Node_Str""};
        boolean saveAnyway=JOptionPane.showOptionDialog(null,warning,""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[1]) == 0;
        if (!saveAnyway) {
          throw new Exception(""String_Node_Str"");
        }
 else {
          writeResource(dataObj,objectEl,resourceName,XMLStringTypeHandler.INVALID_PREFIX + originalString,XMLReferenceInfo.ELEMENT);
        }
        e.printStackTrace();
      }
    }
 else     if (resource instanceof String) {
      writeResource(dataObj,objectEl,resourceName,(String)resource,XMLReferenceInfo.ATTRIBUTE);
    }
 else {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
  }
  return objectEl;
}","public Element exportObject(OTDataObject dataObj,OTDataObject parent,String parentResourceName) throws Exception {
  OTID id=dataObj.getGlobalId();
  if (shouldWriteReference(dataObj,parent,parentResourceName)) {
    return exportObjectReference(id);
  }
  writtenIds.add(id);
  String objectFullClassName=OTrunkImpl.getClassName(dataObj);
  String objectElementName=getObjectElementName(objectFullClassName);
  Element objectEl=new Element(objectElementName);
  XMLDataObject xmlDO=null;
  if (dataObj instanceof XMLDataObject) {
    xmlDO=(XMLDataObject)dataObj;
  }
  if (xmlDO != null && xmlDO.getLocalId() != null) {
    objectEl.setAttribute(""String_Node_Str"",xmlDO.getLocalId());
  }
 else {
    ArrayList incomingReferences=(ArrayList)incomingReferenceMap.get(id);
    if ((xmlDO != null && xmlDO.isPreserveUUID() && id instanceof OTUUID) || (incomingReferences != null && incomingReferences.size() > 1)) {
      objectEl.setAttribute(""String_Node_Str"",id.toExternalForm());
    }
  }
  String resourceKeys[]=dataObj.getResourceKeys();
  ArrayList nullResources=new ArrayList();
  for (int i=0; i < resourceKeys.length; i++) {
    String resourceName=resourceKeys[i];
    if (resourceName.equals(""String_Node_Str"") || resourceName.equals(""String_Node_Str"")) {
      continue;
    }
    Object resource=dataObj.getResource(resourceName);
    if (resource instanceof OTID) {
      Element objectIDEl=exportID(dataObj,(OTID)resource,resourceName);
      writeResourceElement(dataObj,objectEl,resourceName,objectIDEl);
    }
 else     if (resource instanceof OTDataList) {
      OTDataList list=(OTDataList)resource;
      if (list.size() == 0) {
        continue;
      }
      ArrayList content=new ArrayList();
      for (int j=0; j < list.size(); j++) {
        Object listElement=list.get(j);
        if (list instanceof XMLDataList) {
          XMLReferenceInfo info=((XMLDataList)list).getReferenceInfo(j);
          if (info != null && info.comment != null) {
            content.add(new Comment(info.comment));
          }
        }
        Element collectionEl=exportCollectionItem(dataObj,listElement,resourceName);
        if (collectionEl != null) {
          content.add(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof OTDataMap) {
      OTDataMap map=(OTDataMap)resource;
      String[] mapKeys=map.getKeys();
      ArrayList content=new ArrayList();
      for (int j=0; j < mapKeys.length; j++) {
        Element entryEl=new Element(""String_Node_Str"");
        content.add(entryEl);
        String exportedKey=mapKeys[j];
        try {
          OTID otid=OTIDFactory.createOTID(mapKeys[j]);
          if (otid != null) {
            if (isLocalId(otid)) {
              exportedKey=convertId(otid);
            }
          }
        }
 catch (        Throwable t) {
        }
        entryEl.setAttribute(""String_Node_Str"",exportedKey);
        Object mapValue=map.get(mapKeys[j]);
        Element collectionEl=exportCollectionItem(dataObj,mapValue,resourceName);
        entryEl.addContent(collectionEl);
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof BlobResource) {
      BlobResource blob=(BlobResource)resource;
      URL blobUrl=blob.getBlobURL();
      String blobString=null;
      int defaultType=XMLReferenceInfo.ELEMENT;
      if (blobUrl != null) {
        if (contextURL != null) {
          blobString=URLUtil.getRelativeURL(contextURL,blobUrl);
        }
 else {
          blobString=blobUrl.toString();
        }
        defaultType=XMLReferenceInfo.ATTRIBUTE;
      }
 else {
        blobString=BlobTypeHandler.base64(blob.getBytes());
      }
      writeResource(dataObj,objectEl,resourceName,blobString,defaultType);
    }
 else     if (resource == null) {
      if (xmlDO.getSaveNulls()) {
        nullResources.add(resourceName);
      }
 else {
        System.err.println(""String_Node_Str"");
      }
    }
 else     if (resource instanceof Integer || resource instanceof Float || resource instanceof Byte|| resource instanceof Short|| resource instanceof Boolean) {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
 else     if (resource instanceof OTXMLString) {
      String xmlString=((OTXMLString)resource).getContent();
      xmlString=exportXMLString(refidPattern,xmlString);
      xmlString=exportXMLString(viewidPattern,xmlString);
      xmlString=exportXMLString(hrefPattern,xmlString);
      String originalString=xmlString.trim();
      SAXBuilder builder=new SAXBuilder();
      xmlString=""String_Node_Str"" + originalString + ""String_Node_Str"";
      StringReader reader=new StringReader(xmlString);
      try {
        Document xmlStringDoc=builder.build(reader,resourceName);
        Element rootXMLStringEl=xmlStringDoc.getRootElement();
        writeResourceElement(dataObj,objectEl,resourceName,rootXMLStringEl.cloneContent());
      }
 catch (      JDOMParseException e) {
        System.err.println(""String_Node_Str"" + e.getCause());
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(xmlString);
        System.err.println(""String_Node_Str"");
        String warning=""String_Node_Str"" + e.getCause();
        Object[] options={""String_Node_Str"",""String_Node_Str""};
        boolean saveAnyway=JOptionPane.showOptionDialog(null,warning,""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[1]) == 0;
        if (!saveAnyway) {
          throw new Exception(""String_Node_Str"");
        }
 else {
          writeResource(dataObj,objectEl,resourceName,XMLStringTypeHandler.INVALID_PREFIX + originalString,XMLReferenceInfo.ELEMENT);
        }
        e.printStackTrace();
      }
    }
 else     if (resource instanceof String) {
      writeResource(dataObj,objectEl,resourceName,(String)resource,XMLReferenceInfo.ATTRIBUTE);
    }
 else {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
  }
  if (nullResources.size() > 0) {
    String unsetList=""String_Node_Str"";
    for (int i=0; i < nullResources.size(); i++) {
      unsetList+=nullResources.get(i) + ""String_Node_Str"";
    }
    unsetList=unsetList.trim();
    objectEl.setAttribute(""String_Node_Str"",unsetList);
  }
  return objectEl;
}"
21613,"public Object handleElement(OTXMLElement element,String relativePath,XMLDataObject parent){
  if (isObjectReferenceHandler()) {
    String refid=element.getAttributeValue(""String_Node_Str"");
    if (refid != null && refid.length() > 0) {
      return new XMLDataObjectRef(refid,element);
    }
  }
  String idStr=element.getAttributeValue(""String_Node_Str"");
  if (idStr != null && idStr.length() <= 0) {
    idStr=null;
  }
  String localIdStr=element.getAttributeValue(""String_Node_Str"");
  if (localIdStr != null && localIdStr.length() <= 0) {
    localIdStr=null;
  }
  XMLDataObject obj=null;
  try {
    if (idStr == null && localIdStr == null && relativePath != null) {
      OTID pathId=OTIDFactory.createOTID(relativePath);
      obj=xmlDB.createDataObject(element,pathId);
    }
 else     if (idStr == null && localIdStr != null) {
      OTID id=xmlDB.getOTIDFromLocalID(localIdStr);
      obj=xmlDB.createDataObject(element,id);
    }
 else {
      obj=xmlDB.createDataObject(element,idStr);
      if (idStr != null && obj.getGlobalId() instanceof OTUUID) {
        obj.setPreserveUUID(true);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  String objRelativePath=relativePath;
  OTID objId=obj.getGlobalId();
  if (idStr != null || localIdStr != null) {
    objRelativePath=objId.toExternalForm();
  }
  OTDataObjectType type=new OTDataObjectType(getClassName());
  obj.setType(type);
  List attributes=element.getAttributes();
  for (Iterator attIter=attributes.iterator(); attIter.hasNext(); ) {
    OTXMLAttribute attrib=(OTXMLAttribute)attIter.next();
    String attribName=attrib.getName();
    if (attribName.equals(""String_Node_Str"") || attribName.equals(""String_Node_Str"")) {
      continue;
    }
    if (isObjectReferenceHandler()) {
      System.err.println(""String_Node_Str"" + TypeService.attributePath(attrib));
      System.err.println(""String_Node_Str"");
      continue;
    }
    try {
      Object resValue=handleChildResource(element,attribName,attrib.getValue(),objRelativePath,obj,XMLReferenceInfo.ATTRIBUTE,null);
      obj.setResource(attribName,resValue);
      if (xmlDB.isTrackResourceInfo()) {
        XMLReferenceInfo info=obj.getReferenceInfo(attribName);
        if (info == null) {
          info=new XMLReferenceInfo();
          obj.setResourceInfo(attribName,info);
        }
        info.type=XMLReferenceInfo.ATTRIBUTE;
      }
    }
 catch (    HandleElementException e) {
      System.err.println(e.getMessage() + ""String_Node_Str"" + TypeService.attributePath(attrib));
    }
  }
  List content=element.getContent();
  String previousComment=null;
  for (Iterator childIter=content.iterator(); childIter.hasNext(); ) {
    OTXMLContent childContent=(OTXMLContent)childIter.next();
    if (childContent instanceof OTXMLComment) {
      previousComment=((OTXMLComment)childContent).getText();
    }
    if (!(childContent instanceof OTXMLElement)) {
      continue;
    }
    OTXMLElement child=(OTXMLElement)childContent;
    try {
      Object resValue=handleChildResource(element,child.getName(),child,objRelativePath,obj,XMLReferenceInfo.ELEMENT,previousComment);
      if (resValue == null) {
      }
      String childName=child.getName();
      obj.setResource(child.getName(),resValue);
      if (xmlDB.isTrackResourceInfo()) {
        XMLReferenceInfo info=obj.getReferenceInfo(childName);
        if (info == null) {
          info=new XMLReferenceInfo();
          obj.setResourceInfo(childName,info);
        }
        info.type=XMLReferenceInfo.ELEMENT;
      }
    }
 catch (    HandleElementException e) {
      System.err.println(""String_Node_Str"" + TypeService.elementPath(child));
      e.printStackTrace();
    }
    previousComment=null;
  }
  return obj;
}","public Object handleElement(OTXMLElement element,String relativePath,XMLDataObject parent){
  if (isObjectReferenceHandler()) {
    String refid=element.getAttributeValue(""String_Node_Str"");
    if (refid != null && refid.length() > 0) {
      return new XMLDataObjectRef(refid,element);
    }
  }
  String idStr=element.getAttributeValue(""String_Node_Str"");
  if (idStr != null && idStr.length() <= 0) {
    idStr=null;
  }
  String localIdStr=element.getAttributeValue(""String_Node_Str"");
  if (localIdStr != null && localIdStr.length() <= 0) {
    localIdStr=null;
  }
  XMLDataObject obj=null;
  try {
    if (idStr == null && localIdStr == null && relativePath != null) {
      OTID pathId=OTIDFactory.createOTID(relativePath);
      obj=xmlDB.createDataObject(element,pathId);
    }
 else     if (idStr == null && localIdStr != null) {
      OTID id=xmlDB.getOTIDFromLocalID(localIdStr);
      obj=xmlDB.createDataObject(element,id);
    }
 else {
      obj=xmlDB.createDataObject(element,idStr);
      if (idStr != null && obj.getGlobalId() instanceof OTUUID) {
        obj.setPreserveUUID(true);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  String objRelativePath=relativePath;
  OTID objId=obj.getGlobalId();
  if (idStr != null || localIdStr != null) {
    objRelativePath=objId.toExternalForm();
  }
  OTDataObjectType type=new OTDataObjectType(getClassName());
  obj.setType(type);
  List attributes=element.getAttributes();
  for (Iterator attIter=attributes.iterator(); attIter.hasNext(); ) {
    OTXMLAttribute attrib=(OTXMLAttribute)attIter.next();
    String attribName=attrib.getName();
    if (attribName.equals(""String_Node_Str"") || attribName.equals(""String_Node_Str"")) {
      continue;
    }
    if (isObjectReferenceHandler()) {
      System.err.println(""String_Node_Str"" + TypeService.attributePath(attrib));
      System.err.println(""String_Node_Str"");
      continue;
    }
    if (attribName.equals(""String_Node_Str"")) {
      obj.setSaveNulls(true);
      String nullResourcesStr=attrib.getValue();
      String[] nullResources=nullResourcesStr.split(""String_Node_Str"");
      for (int i=0; i < nullResources.length; i++) {
        obj.setResource(nullResources[i],null);
      }
      continue;
    }
    try {
      Object resValue=handleChildResource(element,attribName,attrib.getValue(),objRelativePath,obj,XMLReferenceInfo.ATTRIBUTE,null);
      obj.setResource(attribName,resValue);
      if (xmlDB.isTrackResourceInfo()) {
        XMLReferenceInfo info=obj.getReferenceInfo(attribName);
        if (info == null) {
          info=new XMLReferenceInfo();
          obj.setResourceInfo(attribName,info);
        }
        info.type=XMLReferenceInfo.ATTRIBUTE;
      }
    }
 catch (    HandleElementException e) {
      System.err.println(e.getMessage() + ""String_Node_Str"" + TypeService.attributePath(attrib));
    }
  }
  List content=element.getContent();
  String previousComment=null;
  for (Iterator childIter=content.iterator(); childIter.hasNext(); ) {
    OTXMLContent childContent=(OTXMLContent)childIter.next();
    if (childContent instanceof OTXMLComment) {
      previousComment=((OTXMLComment)childContent).getText();
    }
    if (!(childContent instanceof OTXMLElement)) {
      continue;
    }
    OTXMLElement child=(OTXMLElement)childContent;
    try {
      Object resValue=handleChildResource(element,child.getName(),child,objRelativePath,obj,XMLReferenceInfo.ELEMENT,previousComment);
      if (resValue == null) {
      }
      String childName=child.getName();
      obj.setResource(child.getName(),resValue);
      if (xmlDB.isTrackResourceInfo()) {
        XMLReferenceInfo info=obj.getReferenceInfo(childName);
        if (info == null) {
          info=new XMLReferenceInfo();
          obj.setResourceInfo(childName,info);
        }
        info.type=XMLReferenceInfo.ELEMENT;
      }
    }
 catch (    HandleElementException e) {
      System.err.println(""String_Node_Str"" + TypeService.elementPath(child));
      e.printStackTrace();
    }
    previousComment=null;
  }
  return obj;
}"
21614,"public JComponent getComponent(OTObject otObject,OTJComponentView view){
  JComponent component=view.getComponent(otObject);
  return component;
}","public JComponent getComponent(OTObject otObject,OTJComponentView view){
  JComponent component=view.getComponent(otObject);
  objToComponent.put(otObject,component);
  return component;
}"
21615,"protected OTObjectInternal createOTObjectInternal(Class objectClass) throws Exception {
  String className=objectClass.getName();
  OTDataObjectType type=new OTDataObjectType(objectClass.getName());
  OTDataObject dataObject=createDataObject(type);
  OTClass otClass=OTrunkImpl.getOTClass(className);
  if (otClass == null) {
    otClass=ReflectiveOTClassFactory.singleton.registerClass(objectClass);
    if (otClass == null) {
      throw new IllegalStateException(""String_Node_Str"" + className);
    }
    ReflectiveOTClassFactory.singleton.processAllNewlyRegisteredClasses();
  }
  OTObjectInternal otObjectImpl=new OTObjectInternal(dataObject,this,otClass);
  return otObjectImpl;
}","protected OTObjectInternal createOTObjectInternal(Class objectClass) throws Exception {
  String className=objectClass.getName();
  OTClass otClass=OTrunkImpl.getOTClass(className);
  if (otClass == null) {
    otClass=ReflectiveOTClassFactory.singleton.registerClass(objectClass);
    if (otClass == null) {
      throw new IllegalStateException(""String_Node_Str"" + className);
    }
    ReflectiveOTClassFactory.singleton.processAllNewlyRegisteredClasses();
  }
  OTDataObjectType type=new OTDataObjectType(objectClass.getName());
  OTDataObject dataObject=createDataObject(type);
  OTObjectInternal otObjectImpl=new OTObjectInternal(dataObject,this,otClass);
  return otObjectImpl;
}"
21616,"public OTObject copyObject(OTObject original,OTObjectList orphanObjectList,int maxDepth) throws Exception {
  OTObjectServiceImpl originalObjectService=(OTObjectServiceImpl)original.getOTObjectService();
  OTDataObject originalDataObject=originalObjectService.getOTDataObject(original.getGlobalId());
  OTDataList orphanDataList=((OTObjectListImpl)orphanObjectList).getDataList();
  OTDataObject copyDataObject=DataObjectUtil.copy(originalDataObject,creationDb,orphanDataList,maxDepth,this);
  return getOTObject(copyDataObject.getGlobalId());
}","public OTObject copyObject(OTObject original,OTObjectList orphanObjectList,int maxDepth) throws Exception {
  OTObjectServiceImpl originalObjectService=(OTObjectServiceImpl)original.getOTObjectService();
  OTDataObject originalDataObject=originalObjectService.getOTDataObject(original.getGlobalId());
  OTDataList orphanDataList=((OTObjectListImpl)orphanObjectList).getDataList();
  OTDataObject copyDataObject=DataObjectUtil.copy(originalDataObject,creationDb,orphanDataList,maxDepth,this,otrunk.getDataObjectFinder());
  return getOTObject(copyDataObject.getGlobalId());
}"
21617,"public OTDataObject findDataObject(OTID id) throws Exception {
  OTDatabase db=getOTDatabase(id);
  return db.getOTDataObject(null,id);
}","public OTDataObject findDataObject(OTID id) throws Exception {
  OTDatabase db=getOTDatabase(id);
  if (db == null) {
    return null;
  }
  return db.getOTDataObject(null,id);
}"
21618,"/** 
 * This is a temporary method.  It works for files that represent a single user.  This method finds that user and registers them.  It could be modified to register all the users referenced in the passed in database and in which case it should check if the user is already registered with another database.  
 * @param userDataDb
 * @throws Exception
 */
public OTUserObject registerUserDataDatabase(OTDatabase userDataDb,String name) throws Exception {
  addDatabase(userDataDb);
  OTReferenceMap refMap=getReferenceMapFromUserDb(userDataDb);
  OTUser user=refMap.getUser();
  OTUserObject aUser=(OTUserObject)user;
  if (name != null) {
    aUser.setName(name);
  }
  users.add(aUser);
  setupUserDatabase(user,refMap);
  return aUser;
}","/** 
 * This is a temporary method.  It works for files that represent a single user.  This method finds that user and registers them.  It could be modified to register all the users referenced in the passed in database and in which case it should check if the user is already registered with another database.  
 * @param userDataDb
 * @throws Exception
 */
public OTUserObject registerUserDataDatabase(OTDatabase userDataDb,String name) throws Exception {
  addDatabase(userDataDb);
  OTReferenceMap refMap=getReferenceMapFromUserDb(userDataDb);
  OTUser user=refMap.getUser();
  OTUserObject aUser=(OTUserObject)user;
  if (name != null) {
    aUser.setName(name);
  }
  return registerReferenceMap(refMap);
}"
21619,"protected OTObjectService setupUserDatabase(OTUser user,OTReferenceMap userStateMap){
  OTObjectServiceImpl userObjService;
  OTID userId=user.getUserId();
  OTDataObjectFinder objectFinder=new OTDataObjectFinder(){
    public OTDataObject findDataObject(    OTID id) throws Exception {
      OTDatabase db=getOTDatabase(id);
      return db.getOTDataObject(null,id);
    }
  }
;
  CompositeDatabase userDb=new CompositeDatabase(objectFinder,userStateMap);
  addDatabase(userDb);
  userObjService=createObjectService(userDb);
  compositeDatabases.put(userId,userDb);
  userObjectServices.put(userId,userObjService);
  try {
    ArrayList overlays=null;
    OTObjectList otOverlays=getSystemOverlays(user);
    if (otOverlays != null && otOverlays.size() > 0) {
      overlays=new ArrayList();
      for (int i=0; i < otOverlays.size(); i++) {
        OTOverlay otOverlay=(OTOverlay)otOverlays.get(i);
        Overlay overlay=new OverlayImpl(otOverlay);
        if (overlay != null)         overlays.add(overlay);
      }
    }
    userDb.setOverlays(overlays);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return userObjService;
}","protected OTObjectService setupUserDatabase(OTUser user,OTReferenceMap userStateMap){
  OTObjectServiceImpl userObjService;
  OTID userId=user.getUserId();
  CompositeDatabase userDb=new CompositeDatabase(dataObjectFinder,userStateMap);
  addDatabase(userDb);
  userObjService=createObjectService(userDb);
  compositeDatabases.put(userId,userDb);
  userObjectServices.put(userId,userObjService);
  try {
    ArrayList overlays=null;
    OTObjectList otOverlays=getSystemOverlays(user);
    if (otOverlays != null && otOverlays.size() > 0) {
      overlays=new ArrayList();
      for (int i=0; i < otOverlays.size(); i++) {
        OTOverlay otOverlay=(OTOverlay)otOverlays.get(i);
        Overlay overlay=new OverlayImpl(otOverlay);
        if (overlay != null)         overlays.add(overlay);
      }
    }
    userDb.setOverlays(overlays);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return userObjService;
}"
21620,"protected OTObjectServiceImpl initObjectService(OTDatabase db,String logLabel) throws Exception {
  addDatabase(db);
  OTObjectServiceImpl objectService=createObjectService(db);
  if (OTConfig.isTrace()) {
    objectService.addObjectServiceListener(new TraceListener(logLabel + ""String_Node_Str"" + db));
  }
  loadIncludes(objectService);
  return objectService;
}","public OTObjectServiceImpl initObjectService(OTDatabase db,String logLabel,boolean loadIncludes) throws Exception {
  addDatabase(db);
  OTObjectServiceImpl objectService=createObjectService(db);
  if (OTConfig.isTrace()) {
    objectService.addObjectServiceListener(new TraceListener(logLabel + ""String_Node_Str"" + db));
  }
  if (loadIncludes) {
    loadIncludes(objectService);
  }
  return objectService;
}"
21621,"protected void addDatabase(OTDatabase db){
  if (!databases.contains(db)) {
    databases.add(db);
    Vector packageClasses=db.getPackageClasses();
    if (packageClasses != null) {
      for (int i=0; i < packageClasses.size(); i++) {
        registerPackageClass((Class)packageClasses.get(i));
      }
    }
  }
}","public void addDatabase(OTDatabase db){
  if (!databases.contains(db)) {
    databases.add(db);
    Vector packageClasses=db.getPackageClasses();
    if (packageClasses != null) {
      for (int i=0; i < packageClasses.size(); i++) {
        registerPackageClass((Class)packageClasses.get(i));
      }
    }
  }
}"
21622,"private Object handleChild(Object child,int maxDepth) throws Exception {
  if (child instanceof OTID && (maxDepth == -1 || maxDepth > 0)) {
    CopyEntry itemCopyEntry=getCopyEntry((OTID)child);
    if (itemCopyEntry == null) {
      OTDataObject itemObj=sourceDb.getOTDataObject(root,(OTID)child);
      if (itemObj == null) {
        throw new IllegalStateException(""String_Node_Str"" + child);
      }
      OTDataObject itemCopy=destinationDb.createDataObject(itemObj.getType());
      int copyMaxDepth=-1;
      if (maxDepth != -1) {
        copyMaxDepth=maxDepth - 1;
      }
      itemCopyEntry=new CopyEntry(itemObj,copyMaxDepth,itemCopy);
      toBeCopied.add(itemCopyEntry);
    }
 else {
      return child;
    }
    child=itemCopyEntry.copy.getGlobalId();
  }
  return child;
}","private Object handleChild(Object child,int maxDepth) throws Exception {
  if (child instanceof OTID && (maxDepth == -1 || maxDepth > 0)) {
    CopyEntry itemCopyEntry=getCopyEntry((OTID)child);
    if (itemCopyEntry == null) {
      OTDataObject itemObj=sourceDb.getOTDataObject(root,(OTID)child);
      if (itemObj == null) {
        itemObj=dataObjectFinder.findDataObject((OTID)child);
        if (itemObj == null) {
          throw new IllegalStateException(""String_Node_Str"" + child);
        }
      }
      OTDataObject itemCopy=destinationDb.createDataObject(itemObj.getType());
      int copyMaxDepth=-1;
      if (maxDepth != -1) {
        copyMaxDepth=maxDepth - 1;
      }
      itemCopyEntry=new CopyEntry(itemObj,copyMaxDepth,itemCopy);
      toBeCopied.add(itemCopyEntry);
    }
 else {
    }
    child=itemCopyEntry.copy.getGlobalId();
  }
  return child;
}"
21623,"public Copier(OTDatabase sourceDb,OTDatabase destinationDb,OTDataList orphanDataList,OTExternalIDProvider idProvider){
  this.destinationDb=destinationDb;
  this.sourceDb=sourceDb;
  this.toBeCopied=new Vector();
  this.orphanList=orphanDataList;
  this.idProvider=idProvider;
}","public Copier(OTDatabase sourceDb,OTDatabase destinationDb,OTDataList orphanDataList,OTExternalIDProvider idProvider,OTDataObjectFinder dataObjectFinder){
  this.destinationDb=destinationDb;
  this.sourceDb=sourceDb;
  this.toBeCopied=new Vector();
  this.orphanList=orphanDataList;
  this.idProvider=idProvider;
  this.dataObjectFinder=dataObjectFinder;
}"
21624,"public static void copyInto(OTDataObject source,OTDataObject dest,OTDataList orphanDataList,int maxDepth,OTExternalIDProvider idProvider) throws Exception {
  Copier copier=new Copier(source.getDatabase(),dest.getDatabase(),orphanDataList,idProvider);
  copier.internalCopyInto(source,dest,maxDepth);
}","public static void copyInto(OTDataObject source,OTDataObject dest,OTDataList orphanDataList,int maxDepth,OTExternalIDProvider idProvider,OTDataObjectFinder dataObjectFinder) throws Exception {
  Copier copier=new Copier(source.getDatabase(),dest.getDatabase(),orphanDataList,idProvider,dataObjectFinder);
  copier.internalCopyInto(source,dest,maxDepth);
}"
21625,"public static void copyInto(OTDataObject source,OTDataObject dest,OTDataList orphanDataList,int maxDepth,OTExternalIDProvider idProvider) throws Exception {
  Copier.copyInto(source,dest,orphanDataList,maxDepth,idProvider);
}","public static void copyInto(OTDataObject source,OTDataObject dest,OTDataList orphanDataList,int maxDepth,OTExternalIDProvider idProvider,OTDataObjectFinder dataObjectFinder) throws Exception {
  Copier.copyInto(source,dest,orphanDataList,maxDepth,idProvider,dataObjectFinder);
}"
21626,"public static OTDataObject copy(OTDataObject original,OTDatabase otDb,OTDataList orphanDataList,int maxDepth,OTExternalIDProvider idProvider) throws Exception {
  OTDataObject copy=otDb.createDataObject(original.getType());
  copyInto(original,copy,orphanDataList,maxDepth,idProvider);
  return copy;
}","/** 
 * @param original
 * @param otDb
 * @param orphanDataList
 * @param maxDepth if this is -1 then it will copy all the objects
 * @param idProvider
 * @param dataObjectFinder 
 * @return
 * @throws Exception
 */
public static OTDataObject copy(OTDataObject original,OTDatabase otDb,OTDataList orphanDataList,int maxDepth,OTExternalIDProvider idProvider,OTDataObjectFinder dataObjectFinder) throws Exception {
  OTDataObject copy=otDb.createDataObject(original.getType());
  copyInto(original,copy,orphanDataList,maxDepth,idProvider,dataObjectFinder);
  return copy;
}"
21627,"private OTObject getObjectToInsertFromUser(){
  OTObject otObj=null;
  System.out.println(documentEditConfig);
  otObj=OTObjectListViewer.showDialog(previewComponent,""String_Node_Str"",getFrameManager(),getViewFactory(),documentEditConfig.getObjectsToInsert(),otObject.getOTObjectService(),true,true);
  return otObj;
}","private OTObject getObjectToInsertFromUser(){
  OTObject otObj=null;
  otObj=OTObjectListViewer.showDialog(previewComponent,""String_Node_Str"",getFrameManager(),getViewFactory(),documentEditConfig.getObjectsToInsert(),otObject.getOTObjectService(),true,true);
  return otObj;
}"
21628,"public String updateFormatedView(){
  if (pfObject == null)   return null;
  String markupLanguage=pfObject.getMarkupLanguage();
  if (markupLanguage == null) {
    markupLanguage=System.getProperty(""String_Node_Str"",null);
  }
  String bodyText=pfObject.getDocumentText();
  bodyText=substituteIncludables(bodyText);
  int origCaretPos=0;
  if (markupLanguage == null || markupLanguage.equals(OTDocument.MARKUP_PFHTML) || markupLanguage.equals(OTDocument.MARKUP_PLAIN)) {
    if (editorPane == null) {
      editorPane=new JEditorPane();
      OTHTMLFactory kitViewFactory=new OTHTMLFactory(this);
      editorKit=new OTDocumentEditorKit(kitViewFactory);
      editorPane.setEditorKit(editorKit);
      editorPane.setEditable(true);
      editorPane.addHyperlinkListener(this);
      editorPane.addKeyListener(this);
    }
    origCaretPos=editorPane.getCaretPosition();
    bodyText=htmlizeText(bodyText);
    if (documentConfig != null) {
      String css=getCssText();
      String XHTML_PREFIX=XHTML_PREFIX_START + css + XHTML_PREFIX_END;
      bodyText=XHTML_PREFIX + bodyText + XHTML_SUFFIX;
    }
    removeAllSubViews();
    editorPane.setText(bodyText);
    previewComponent=editorPane;
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  if (parsedTextArea == null) {
    parsedTextArea=new JTextArea();
  }
  parsedTextArea.setText(bodyText);
  editorPane.setCaretPosition(origCaretPos);
  return bodyText;
}","public String updateFormatedView(){
  if (pfObject == null)   return null;
  String markupLanguage=pfObject.getMarkupLanguage();
  if (markupLanguage == null) {
    markupLanguage=System.getProperty(""String_Node_Str"",null);
  }
  String bodyText=pfObject.getDocumentText();
  bodyText=substituteIncludables(bodyText);
  int origCaretPos=0;
  if (markupLanguage == null || markupLanguage.equals(OTDocument.MARKUP_PFHTML) || markupLanguage.equals(OTDocument.MARKUP_PLAIN)) {
    if (editorPane == null) {
      editorPane=new MyJEditorPane();
      OTHTMLFactory kitViewFactory=new OTHTMLFactory(this);
      editorKit=new OTDocumentEditorKit(kitViewFactory);
      editorPane.setEditorKit(editorKit);
      editorPane.setEditable(true);
      editorPane.addHyperlinkListener(this);
      editorPane.addKeyListener(this);
    }
    origCaretPos=editorPane.getCaretPosition();
    bodyText=htmlizeText(bodyText);
    if (documentConfig != null) {
      String css=getCssText();
      String XHTML_PREFIX=XHTML_PREFIX_START + css + XHTML_PREFIX_END;
      bodyText=XHTML_PREFIX + bodyText + XHTML_SUFFIX;
    }
    removeAllSubViews();
    editorPane.setText(bodyText);
    previewComponent=editorPane;
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  if (parsedTextArea == null) {
    parsedTextArea=new JTextArea();
  }
  parsedTextArea.setText(bodyText);
  editorPane.setCaretPosition(origCaretPos);
  return bodyText;
}"
21629,"public void scrollRectToVisible(Rectangle aRect){
  if (!isScrollingAllowed()) {
    return;
  }
  super.scrollRectToVisible(aRect);
}","public void scrollRectToVisible(Rectangle contentRect){
  if (!isScrollingAllowed()) {
    return;
  }
  super.scrollRectToVisible(contentRect);
}"
21630,"public Element exportObject(OTDataObject dataObj,OTDataObject parent,String parentResourceName) throws Exception {
  OTID id=dataObj.getGlobalId();
  if (writtenIds.contains(id)) {
    return exportObjectReference(id);
  }
  XMLDataObject xmlDO=null;
  if (dataObj instanceof XMLDataObject) {
    xmlDO=(XMLDataObject)dataObj;
    XMLDataObject container=xmlDO.getContainer();
    if (container != null && processedIds.contains(container.getGlobalId())) {
      if (parent != container || !parentResourceName.equals(xmlDO.getContainerResourceKey())) {
        return exportObjectReference(id);
      }
    }
  }
  writtenIds.add(id);
  String objectFullClassName=OTrunkImpl.getClassName(dataObj);
  String objectElementName=getObjectElementName(objectFullClassName);
  Element objectEl=new Element(objectElementName);
  if (xmlDO != null && xmlDO.getLocalId() != null) {
    objectEl.setAttribute(""String_Node_Str"",xmlDO.getLocalId());
  }
 else {
    ArrayList incomingReferences=(ArrayList)incomingReferenceMap.get(id);
    if (incomingReferences != null && incomingReferences.size() > 1) {
      objectEl.setAttribute(""String_Node_Str"",id.toExternalForm());
    }
  }
  String resourceKeys[]=dataObj.getResourceKeys();
  for (int i=0; i < resourceKeys.length; i++) {
    String resourceName=resourceKeys[i];
    if (resourceName.equals(""String_Node_Str"") || resourceName.equals(""String_Node_Str"")) {
      continue;
    }
    Object resource=dataObj.getResource(resourceName);
    if (resource instanceof OTID) {
      Element objectIDEl=exportID(dataObj,(OTID)resource,resourceName);
      writeResourceElement(dataObj,objectEl,resourceName,objectIDEl);
    }
 else     if (resource instanceof OTDataList) {
      OTDataList list=(OTDataList)resource;
      if (list.size() == 0) {
        continue;
      }
      ArrayList content=new ArrayList();
      for (int j=0; j < list.size(); j++) {
        Object listElement=list.get(j);
        if (list instanceof XMLDataList) {
          XMLReferenceInfo info=((XMLDataList)list).getReferenceInfo(j);
          if (info != null && info.comment != null) {
            content.add(new Comment(info.comment));
          }
        }
        Element collectionEl=exportCollectionItem(dataObj,listElement,resourceName);
        if (collectionEl != null) {
          content.add(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof OTDataMap) {
      OTDataMap map=(OTDataMap)resource;
      String[] mapKeys=map.getKeys();
      ArrayList content=new ArrayList();
      for (int j=0; j < mapKeys.length; j++) {
        Element entryEl=new Element(""String_Node_Str"");
        content.add(entryEl);
        entryEl.setAttribute(""String_Node_Str"",mapKeys[j]);
        Object mapValue=map.get(mapKeys[j]);
        Element collectionEl=exportCollectionItem(dataObj,mapValue,resourceName);
        entryEl.addContent(collectionEl);
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof BlobResource) {
      BlobResource blob=(BlobResource)resource;
      URL blobUrl=blob.getBlobURL();
      String blobString=null;
      int defaultType=XMLReferenceInfo.ELEMENT;
      if (blobUrl != null) {
        if (contextURL != null) {
          blobString=URLUtil.getRelativeURL(contextURL,blobUrl);
        }
 else {
          blobString=blobUrl.toString();
        }
        defaultType=XMLReferenceInfo.ATTRIBUTE;
      }
 else {
        blobString=BlobTypeHandler.base64(blob.getBytes());
      }
      writeResource(dataObj,objectEl,resourceName,blobString,defaultType);
    }
 else     if (resource == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (resource instanceof Integer || resource instanceof Float || resource instanceof Byte|| resource instanceof Short|| resource instanceof Boolean) {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
 else     if (resource instanceof OTXMLString) {
      String xmlString=((OTXMLString)resource).getContent();
      xmlString=exportXMLString(refidPattern,xmlString);
      xmlString=exportXMLString(hrefPattern,xmlString);
      String originalString=xmlString.trim();
      SAXBuilder builder=new SAXBuilder();
      xmlString=""String_Node_Str"" + originalString + ""String_Node_Str"";
      StringReader reader=new StringReader(xmlString);
      try {
        Document xmlStringDoc=builder.build(reader,resourceName);
        Element rootXMLStringEl=xmlStringDoc.getRootElement();
        writeResourceElement(dataObj,objectEl,resourceName,rootXMLStringEl.cloneContent());
      }
 catch (      JDOMParseException e) {
        System.err.println(""String_Node_Str"" + e.getCause());
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(xmlString);
        System.err.println(""String_Node_Str"");
        String warning=""String_Node_Str"" + e.getCause();
        Object[] options={""String_Node_Str"",""String_Node_Str""};
        boolean saveAnyway=JOptionPane.showOptionDialog(null,warning,""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[1]) == 0;
        if (!saveAnyway) {
          throw new Exception(""String_Node_Str"");
        }
 else {
          writeResource(dataObj,objectEl,resourceName,XMLStringTypeHandler.INVALID_PREFIX + originalString,XMLReferenceInfo.ELEMENT);
        }
        e.printStackTrace();
      }
    }
 else {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
  }
  return objectEl;
}","public Element exportObject(OTDataObject dataObj,OTDataObject parent,String parentResourceName) throws Exception {
  OTID id=dataObj.getGlobalId();
  if (shouldWriteReference(dataObj,parent,parentResourceName)) {
    return exportObjectReference(id);
  }
  writtenIds.add(id);
  String objectFullClassName=OTrunkImpl.getClassName(dataObj);
  String objectElementName=getObjectElementName(objectFullClassName);
  Element objectEl=new Element(objectElementName);
  XMLDataObject xmlDO=null;
  if (dataObj instanceof XMLDataObject) {
    xmlDO=(XMLDataObject)dataObj;
  }
  if (xmlDO != null && xmlDO.getLocalId() != null) {
    objectEl.setAttribute(""String_Node_Str"",xmlDO.getLocalId());
  }
 else {
    ArrayList incomingReferences=(ArrayList)incomingReferenceMap.get(id);
    if (incomingReferences != null && incomingReferences.size() > 1) {
      objectEl.setAttribute(""String_Node_Str"",id.toExternalForm());
    }
  }
  String resourceKeys[]=dataObj.getResourceKeys();
  for (int i=0; i < resourceKeys.length; i++) {
    String resourceName=resourceKeys[i];
    if (resourceName.equals(""String_Node_Str"") || resourceName.equals(""String_Node_Str"")) {
      continue;
    }
    Object resource=dataObj.getResource(resourceName);
    if (resource instanceof OTID) {
      Element objectIDEl=exportID(dataObj,(OTID)resource,resourceName);
      writeResourceElement(dataObj,objectEl,resourceName,objectIDEl);
    }
 else     if (resource instanceof OTDataList) {
      OTDataList list=(OTDataList)resource;
      if (list.size() == 0) {
        continue;
      }
      ArrayList content=new ArrayList();
      for (int j=0; j < list.size(); j++) {
        Object listElement=list.get(j);
        if (list instanceof XMLDataList) {
          XMLReferenceInfo info=((XMLDataList)list).getReferenceInfo(j);
          if (info != null && info.comment != null) {
            content.add(new Comment(info.comment));
          }
        }
        Element collectionEl=exportCollectionItem(dataObj,listElement,resourceName);
        if (collectionEl != null) {
          content.add(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof OTDataMap) {
      OTDataMap map=(OTDataMap)resource;
      String[] mapKeys=map.getKeys();
      ArrayList content=new ArrayList();
      for (int j=0; j < mapKeys.length; j++) {
        Element entryEl=new Element(""String_Node_Str"");
        content.add(entryEl);
        entryEl.setAttribute(""String_Node_Str"",mapKeys[j]);
        Object mapValue=map.get(mapKeys[j]);
        Element collectionEl=exportCollectionItem(dataObj,mapValue,resourceName);
        entryEl.addContent(collectionEl);
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof BlobResource) {
      BlobResource blob=(BlobResource)resource;
      URL blobUrl=blob.getBlobURL();
      String blobString=null;
      int defaultType=XMLReferenceInfo.ELEMENT;
      if (blobUrl != null) {
        if (contextURL != null) {
          blobString=URLUtil.getRelativeURL(contextURL,blobUrl);
        }
 else {
          blobString=blobUrl.toString();
        }
        defaultType=XMLReferenceInfo.ATTRIBUTE;
      }
 else {
        blobString=BlobTypeHandler.base64(blob.getBytes());
      }
      writeResource(dataObj,objectEl,resourceName,blobString,defaultType);
    }
 else     if (resource == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (resource instanceof Integer || resource instanceof Float || resource instanceof Byte|| resource instanceof Short|| resource instanceof Boolean) {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
 else     if (resource instanceof OTXMLString) {
      String xmlString=((OTXMLString)resource).getContent();
      xmlString=exportXMLString(refidPattern,xmlString);
      xmlString=exportXMLString(hrefPattern,xmlString);
      String originalString=xmlString.trim();
      SAXBuilder builder=new SAXBuilder();
      xmlString=""String_Node_Str"" + originalString + ""String_Node_Str"";
      StringReader reader=new StringReader(xmlString);
      try {
        Document xmlStringDoc=builder.build(reader,resourceName);
        Element rootXMLStringEl=xmlStringDoc.getRootElement();
        writeResourceElement(dataObj,objectEl,resourceName,rootXMLStringEl.cloneContent());
      }
 catch (      JDOMParseException e) {
        System.err.println(""String_Node_Str"" + e.getCause());
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(xmlString);
        System.err.println(""String_Node_Str"");
        String warning=""String_Node_Str"" + e.getCause();
        Object[] options={""String_Node_Str"",""String_Node_Str""};
        boolean saveAnyway=JOptionPane.showOptionDialog(null,warning,""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[1]) == 0;
        if (!saveAnyway) {
          throw new Exception(""String_Node_Str"");
        }
 else {
          writeResource(dataObj,objectEl,resourceName,XMLStringTypeHandler.INVALID_PREFIX + originalString,XMLReferenceInfo.ELEMENT);
        }
        e.printStackTrace();
      }
    }
 else {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
  }
  return objectEl;
}"
21631,"public static String getRelativeURL(URL context,URL url){
  String urlStr=url.toExternalForm();
  if (context.getProtocol() == null || !context.getProtocol().equals(url.getProtocol())) {
    return urlStr;
  }
  if (context.getAuthority() == null || !context.getAuthority().equals(url.getAuthority())) {
    return urlStr;
  }
  String contextPath=context.getPath();
  String urlPath=url.getPath();
  String strippedContextPath=contextPath;
  String strippedUrlPath=urlPath;
  if (contextPath.startsWith(""String_Node_Str"")) {
    strippedContextPath=contextPath.substring(1);
    if (urlPath.startsWith(""String_Node_Str"")) {
      strippedUrlPath=urlPath.substring(1);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + context + ""String_Node_Str""+ url);
    }
  }
  String codebasePath=strippedContextPath;
  if (!strippedContextPath.endsWith(""String_Node_Str"")) {
    int slashIndex=strippedContextPath.lastIndexOf('/');
    if (slashIndex < 0) {
      codebasePath=""String_Node_Str"";
    }
 else     if (slashIndex == 0) {
      throw new IllegalStateException(""String_Node_Str"" + context);
    }
 else {
      codebasePath=strippedContextPath.substring(0,slashIndex);
    }
  }
  String[] codebasePathSegments=codebasePath.split(""String_Node_Str"");
  String[] urlPathSegment=strippedUrlPath.split(""String_Node_Str"");
  int i=0;
  for (; i < codebasePathSegments.length; i++) {
    if (i >= urlPathSegment.length) {
      break;
    }
    if (!codebasePathSegments[i].equals(urlPathSegment[i])) {
      break;
    }
  }
  int matchingSegments=i;
  if (matchingSegments == 0) {
    String relativeUrl=url.getFile();
    if (url.getRef() != null) {
      relativeUrl+=""String_Node_Str"" + url.getRef();
    }
    if (codebasePathSegments.length == 0 && relativeUrl.startsWith(""String_Node_Str"")) {
      relativeUrl=relativeUrl.substring(1);
    }
    return relativeUrl;
  }
  int codebaseNonMatchingSegments=codebasePathSegments.length - (matchingSegments);
  String parentString=""String_Node_Str"";
  for (int j=0; j < codebaseNonMatchingSegments; j++) {
    parentString+=""String_Node_Str"";
  }
  String relativeUrl=parentString;
  int urlNonMatchingSegments=urlPathSegment.length - (matchingSegments);
  for (int j=0; j < urlNonMatchingSegments; j++) {
    relativeUrl+=urlPathSegment[matchingSegments + j] + ""String_Node_Str"";
  }
  if (urlPath.endsWith(""String_Node_Str"") && !relativeUrl.endsWith(""String_Node_Str"")) {
    relativeUrl+=""String_Node_Str"";
  }
 else   if (!urlPath.endsWith(""String_Node_Str"") && relativeUrl.endsWith(""String_Node_Str"")) {
    relativeUrl=relativeUrl.substring(0,relativeUrl.length() - 1);
  }
  if (url.getQuery() != null) {
    relativeUrl+=""String_Node_Str"" + url.getQuery();
  }
  if (url.getRef() != null) {
    relativeUrl+=""String_Node_Str"" + url.getRef();
  }
  return relativeUrl;
}","public static String getRelativeURL(URL context,URL url){
  String urlStr=url.toExternalForm();
  if (context.getProtocol() == null || !context.getProtocol().equals(url.getProtocol())) {
    return urlStr;
  }
  if (context.getAuthority() != null && !context.getAuthority().equals(""String_Node_Str"") && !context.getAuthority().equals(url.getAuthority())) {
    return urlStr;
  }
  String contextPath=context.getPath();
  String urlPath=url.getPath();
  String strippedContextPath=contextPath;
  String strippedUrlPath=urlPath;
  if (contextPath.startsWith(""String_Node_Str"")) {
    strippedContextPath=contextPath.substring(1);
    if (urlPath.startsWith(""String_Node_Str"")) {
      strippedUrlPath=urlPath.substring(1);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + context + ""String_Node_Str""+ url);
    }
  }
  String codebasePath=strippedContextPath;
  if (!strippedContextPath.endsWith(""String_Node_Str"")) {
    int slashIndex=strippedContextPath.lastIndexOf('/');
    if (slashIndex < 0) {
      codebasePath=""String_Node_Str"";
    }
 else     if (slashIndex == 0) {
      throw new IllegalStateException(""String_Node_Str"" + context);
    }
 else {
      codebasePath=strippedContextPath.substring(0,slashIndex);
    }
  }
  String[] codebasePathSegments=codebasePath.split(""String_Node_Str"");
  String[] urlPathSegment=strippedUrlPath.split(""String_Node_Str"");
  int i=0;
  for (; i < codebasePathSegments.length; i++) {
    if (i >= urlPathSegment.length) {
      break;
    }
    if (!codebasePathSegments[i].equals(urlPathSegment[i])) {
      break;
    }
  }
  int matchingSegments=i;
  if (matchingSegments == 0) {
    String relativeUrl=url.getFile();
    if (url.getRef() != null) {
      relativeUrl+=""String_Node_Str"" + url.getRef();
    }
    if (codebasePathSegments.length == 0 && relativeUrl.startsWith(""String_Node_Str"")) {
      relativeUrl=relativeUrl.substring(1);
    }
    return relativeUrl;
  }
  int codebaseNonMatchingSegments=codebasePathSegments.length - (matchingSegments);
  String parentString=""String_Node_Str"";
  for (int j=0; j < codebaseNonMatchingSegments; j++) {
    parentString+=""String_Node_Str"";
  }
  String relativeUrl=parentString;
  int urlNonMatchingSegments=urlPathSegment.length - (matchingSegments);
  for (int j=0; j < urlNonMatchingSegments; j++) {
    relativeUrl+=urlPathSegment[matchingSegments + j] + ""String_Node_Str"";
  }
  if (urlPath.endsWith(""String_Node_Str"") && !relativeUrl.endsWith(""String_Node_Str"")) {
    relativeUrl+=""String_Node_Str"";
  }
 else   if (!urlPath.endsWith(""String_Node_Str"") && relativeUrl.endsWith(""String_Node_Str"")) {
    relativeUrl=relativeUrl.substring(0,relativeUrl.length() - 1);
  }
  if (url.getQuery() != null) {
    relativeUrl+=""String_Node_Str"" + url.getQuery();
  }
  if (url.getRef() != null) {
    relativeUrl+=""String_Node_Str"" + url.getRef();
  }
  return relativeUrl;
}"
21632,"public void loadObjects() throws Exception {
  OTXMLElement rootElement=document.getRootElement();
  String dbBase=rootElement.getAttributeValue(""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"",null) != null) {
    dbBase=System.getProperty(""String_Node_Str"");
  }
  if (dbBase != null && dbBase.length() > 0) {
    if (!dbBase.endsWith(""String_Node_Str"")) {
      dbBase+=""String_Node_Str"";
    }
    dbBase+=""String_Node_Str"";
    try {
      contextURL=new URL(dbBase);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  TypeService typeService=new TypeService(contextURL);
  ObjectTypeHandler objectTypeHandler=new ObjectTypeHandler(typeService,this);
  typeService.registerUserType(""String_Node_Str"",objectTypeHandler);
  String dbId=rootElement.getAttributeValue(""String_Node_Str"");
  if (dbId != null && dbId.length() > 0) {
    databaseId=OTIDFactory.createOTID(dbId);
  }
  OTXMLElement importsElement=rootElement.getChild(""String_Node_Str"");
  List imports=importsElement.getChildren();
  for (Iterator iterator=imports.iterator(); iterator.hasNext(); ) {
    OTXMLElement currentImport=(OTXMLElement)iterator.next();
    String className=currentImport.getAttributeValue(""String_Node_Str"");
    importedOTObjectClasses.add(className);
    Class packageClass=findPackageClass(className);
    if (packageClass != null && !packageClasses.contains(packageClass)) {
      packageClasses.add(packageClass);
    }
  }
  ReflectionTypeDefinitions.registerTypes(importedOTObjectClasses,typeService,this);
  OTXMLElement objects=rootElement.getChild(""String_Node_Str"");
  List xmlObjects=objects.getChildren();
  if (xmlObjects.size() != 1) {
    throw new Exception(""String_Node_Str"");
  }
  OTXMLElement rootObjectNode=(OTXMLElement)xmlObjects.get(0);
  String relativePath=""String_Node_Str"";
  if (databaseId != null) {
    relativePath=databaseId.toExternalForm() + ""String_Node_Str"";
  }
  XMLDataObject rootDataObject=(XMLDataObject)typeService.handleLiteralElement(rootObjectNode,relativePath);
  statusStream.println(""String_Node_Str"");
  secondPass();
  setRoot(rootDataObject.getGlobalId());
}","public void loadObjects() throws Exception {
  OTXMLElement rootElement=document.getRootElement();
  String dbCodeBase=rootElement.getAttributeValue(""String_Node_Str"");
  String systemCodeBase=OTViewerHelper.getStringProp(OTViewerHelper.CODEBASE_PROP);
  if (systemCodeBase != null) {
    dbCodeBase=systemCodeBase;
  }
  if (dbCodeBase != null && dbCodeBase.length() > 0) {
    if (!dbCodeBase.endsWith(""String_Node_Str"")) {
      dbCodeBase+=""String_Node_Str"";
    }
    dbCodeBase+=""String_Node_Str"";
    try {
      contextURL=new URL(dbCodeBase);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  TypeService typeService=new TypeService(contextURL);
  ObjectTypeHandler objectTypeHandler=new ObjectTypeHandler(typeService,this);
  typeService.registerUserType(""String_Node_Str"",objectTypeHandler);
  String dbId=rootElement.getAttributeValue(""String_Node_Str"");
  if (dbId != null && dbId.length() > 0) {
    databaseId=OTIDFactory.createOTID(dbId);
  }
  OTXMLElement importsElement=rootElement.getChild(""String_Node_Str"");
  List imports=importsElement.getChildren();
  for (Iterator iterator=imports.iterator(); iterator.hasNext(); ) {
    OTXMLElement currentImport=(OTXMLElement)iterator.next();
    String className=currentImport.getAttributeValue(""String_Node_Str"");
    importedOTObjectClasses.add(className);
    Class packageClass=findPackageClass(className);
    if (packageClass != null && !packageClasses.contains(packageClass)) {
      packageClasses.add(packageClass);
    }
  }
  ReflectionTypeDefinitions.registerTypes(importedOTObjectClasses,typeService,this);
  OTXMLElement objects=rootElement.getChild(""String_Node_Str"");
  List xmlObjects=objects.getChildren();
  if (xmlObjects.size() != 1) {
    throw new Exception(""String_Node_Str"");
  }
  OTXMLElement rootObjectNode=(OTXMLElement)xmlObjects.get(0);
  String relativePath=""String_Node_Str"";
  if (databaseId != null) {
    relativePath=databaseId.toExternalForm() + ""String_Node_Str"";
  }
  XMLDataObject rootDataObject=(XMLDataObject)typeService.handleLiteralElement(rootObjectNode,relativePath);
  statusStream.println(""String_Node_Str"");
  secondPass();
  setRoot(rootDataObject.getGlobalId());
}"
21633,"protected String toStringInternal(){
  if (rootId == null) {
    return relativeId.toString();
  }
  return rootId.toExternalForm() + ""String_Node_Str"" + relativeId.toExternalForm();
}","protected String toStringInternal(){
  if (rootId == null) {
    return relativeId.toExternalForm();
  }
  return rootId.toExternalForm() + ""String_Node_Str"" + relativeId.toExternalForm();
}"
21634,"public static Element exportObject(OTDataObject dataObj,OTDataObject parent,String parentResourceName) throws Exception {
  OTID id=dataObj.getGlobalId();
  if (writtenIds.contains(id)) {
    return exportObjectReference(id);
  }
  XMLDataObject xmlDO=null;
  if (dataObj instanceof XMLDataObject) {
    xmlDO=(XMLDataObject)dataObj;
    XMLDataObject container=xmlDO.getContainer();
    if (container != null && processedIds.contains(container.getGlobalId())) {
      if (parent != container || !parentResourceName.equals(xmlDO.getContainerResourceKey())) {
        return exportObjectReference(id);
      }
    }
  }
  writtenIds.add(id);
  String objectFullClassName=OTrunkImpl.getClassName(dataObj);
  String objectElementName=getObjectElementName(objectFullClassName);
  Element objectEl=new Element(objectElementName);
  if (xmlDO != null && xmlDO.getLocalId() != null) {
    objectEl.setAttribute(""String_Node_Str"",xmlDO.getLocalId());
  }
 else {
    ArrayList incomingReferences=(ArrayList)incomingReferenceMap.get(id);
    if (incomingReferences != null && incomingReferences.size() > 1) {
      objectEl.setAttribute(""String_Node_Str"",id.toString());
    }
  }
  String resourceKeys[]=dataObj.getResourceKeys();
  for (int i=0; i < resourceKeys.length; i++) {
    String resourceName=resourceKeys[i];
    if (resourceName.equals(""String_Node_Str"") || resourceName.equals(""String_Node_Str"")) {
      continue;
    }
    Object resource=dataObj.getResource(resourceName);
    if (resource instanceof OTID) {
      Element objectIDEl=exportID(dataObj,(OTID)resource,resourceName);
      writeResourceElement(dataObj,objectEl,resourceName,objectIDEl);
    }
 else     if (resource instanceof OTDataList) {
      OTDataList list=(OTDataList)resource;
      if (list.size() == 0) {
        continue;
      }
      ArrayList content=new ArrayList();
      for (int j=0; j < list.size(); j++) {
        Object listElement=list.get(j);
        if (list instanceof XMLDataList) {
          XMLReferenceInfo info=((XMLDataList)list).getReferenceInfo(j);
          if (info != null && info.comment != null) {
            content.add(new Comment(info.comment));
          }
        }
        Element collectionEl=exportCollectionItem(dataObj,listElement,resourceName);
        if (collectionEl != null) {
          content.add(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof OTDataMap) {
      OTDataMap map=(OTDataMap)resource;
      String[] mapKeys=map.getKeys();
      ArrayList content=new ArrayList();
      for (int j=0; j < mapKeys.length; j++) {
        Element entryEl=new Element(""String_Node_Str"");
        content.add(entryEl);
        entryEl.setAttribute(""String_Node_Str"",mapKeys[j]);
        Object mapValue=map.get(mapKeys[j]);
        Element collectionEl=exportCollectionItem(dataObj,mapValue,resourceName);
        entryEl.addContent(collectionEl);
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof BlobResource) {
      BlobResource blob=(BlobResource)resource;
      URL blobUrl=blob.getBlobURL();
      String blobString=null;
      int defaultType=XMLReferenceInfo.ELEMENT;
      if (blobUrl != null) {
        blobString=blobUrl.toString();
        defaultType=XMLReferenceInfo.ATTRIBUTE;
      }
 else {
        blobString=BlobTypeHandler.base64(blob.getBytes());
      }
      writeResource(dataObj,objectEl,resourceName,blobString,defaultType);
    }
 else     if (resource == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (resource instanceof Integer || resource instanceof Float || resource instanceof Byte|| resource instanceof Short|| resource instanceof Boolean) {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
 else     if (resource instanceof OTXMLString) {
      String xmlString=((OTXMLString)resource).getContent();
      xmlString=exportXMLString(refidPattern,xmlString);
      xmlString=exportXMLString(hrefPattern,xmlString);
      String originalString=xmlString.trim();
      SAXBuilder builder=new SAXBuilder();
      xmlString=""String_Node_Str"" + originalString + ""String_Node_Str"";
      StringReader reader=new StringReader(xmlString);
      try {
        Document xmlStringDoc=builder.build(reader,resourceName);
        Element rootXMLStringEl=xmlStringDoc.getRootElement();
        writeResourceElement(dataObj,objectEl,resourceName,rootXMLStringEl.cloneContent());
      }
 catch (      JDOMParseException e) {
        System.err.println(""String_Node_Str"" + e.getCause());
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(xmlString);
        System.err.println(""String_Node_Str"");
        String warning=""String_Node_Str"" + e.getCause();
        Object[] options={""String_Node_Str"",""String_Node_Str""};
        boolean saveAnyway=JOptionPane.showOptionDialog(null,warning,""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[1]) == 0;
        if (!saveAnyway) {
          throw new Exception(""String_Node_Str"");
        }
 else {
          writeResource(dataObj,objectEl,resourceName,XMLStringTypeHandler.INVALID_PREFIX + originalString,XMLReferenceInfo.ELEMENT);
        }
        e.printStackTrace();
      }
    }
 else {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
  }
  return objectEl;
}","public static Element exportObject(OTDataObject dataObj,OTDataObject parent,String parentResourceName) throws Exception {
  OTID id=dataObj.getGlobalId();
  if (writtenIds.contains(id)) {
    return exportObjectReference(id);
  }
  XMLDataObject xmlDO=null;
  if (dataObj instanceof XMLDataObject) {
    xmlDO=(XMLDataObject)dataObj;
    XMLDataObject container=xmlDO.getContainer();
    if (container != null && processedIds.contains(container.getGlobalId())) {
      if (parent != container || !parentResourceName.equals(xmlDO.getContainerResourceKey())) {
        return exportObjectReference(id);
      }
    }
  }
  writtenIds.add(id);
  String objectFullClassName=OTrunkImpl.getClassName(dataObj);
  String objectElementName=getObjectElementName(objectFullClassName);
  Element objectEl=new Element(objectElementName);
  if (xmlDO != null && xmlDO.getLocalId() != null) {
    objectEl.setAttribute(""String_Node_Str"",xmlDO.getLocalId());
  }
 else {
    ArrayList incomingReferences=(ArrayList)incomingReferenceMap.get(id);
    if (incomingReferences != null && incomingReferences.size() > 1) {
      objectEl.setAttribute(""String_Node_Str"",id.toExternalForm());
    }
  }
  String resourceKeys[]=dataObj.getResourceKeys();
  for (int i=0; i < resourceKeys.length; i++) {
    String resourceName=resourceKeys[i];
    if (resourceName.equals(""String_Node_Str"") || resourceName.equals(""String_Node_Str"")) {
      continue;
    }
    Object resource=dataObj.getResource(resourceName);
    if (resource instanceof OTID) {
      Element objectIDEl=exportID(dataObj,(OTID)resource,resourceName);
      writeResourceElement(dataObj,objectEl,resourceName,objectIDEl);
    }
 else     if (resource instanceof OTDataList) {
      OTDataList list=(OTDataList)resource;
      if (list.size() == 0) {
        continue;
      }
      ArrayList content=new ArrayList();
      for (int j=0; j < list.size(); j++) {
        Object listElement=list.get(j);
        if (list instanceof XMLDataList) {
          XMLReferenceInfo info=((XMLDataList)list).getReferenceInfo(j);
          if (info != null && info.comment != null) {
            content.add(new Comment(info.comment));
          }
        }
        Element collectionEl=exportCollectionItem(dataObj,listElement,resourceName);
        if (collectionEl != null) {
          content.add(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof OTDataMap) {
      OTDataMap map=(OTDataMap)resource;
      String[] mapKeys=map.getKeys();
      ArrayList content=new ArrayList();
      for (int j=0; j < mapKeys.length; j++) {
        Element entryEl=new Element(""String_Node_Str"");
        content.add(entryEl);
        entryEl.setAttribute(""String_Node_Str"",mapKeys[j]);
        Object mapValue=map.get(mapKeys[j]);
        Element collectionEl=exportCollectionItem(dataObj,mapValue,resourceName);
        entryEl.addContent(collectionEl);
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof BlobResource) {
      BlobResource blob=(BlobResource)resource;
      URL blobUrl=blob.getBlobURL();
      String blobString=null;
      int defaultType=XMLReferenceInfo.ELEMENT;
      if (blobUrl != null) {
        blobString=blobUrl.toString();
        defaultType=XMLReferenceInfo.ATTRIBUTE;
      }
 else {
        blobString=BlobTypeHandler.base64(blob.getBytes());
      }
      writeResource(dataObj,objectEl,resourceName,blobString,defaultType);
    }
 else     if (resource == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (resource instanceof Integer || resource instanceof Float || resource instanceof Byte|| resource instanceof Short|| resource instanceof Boolean) {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
 else     if (resource instanceof OTXMLString) {
      String xmlString=((OTXMLString)resource).getContent();
      xmlString=exportXMLString(refidPattern,xmlString);
      xmlString=exportXMLString(hrefPattern,xmlString);
      String originalString=xmlString.trim();
      SAXBuilder builder=new SAXBuilder();
      xmlString=""String_Node_Str"" + originalString + ""String_Node_Str"";
      StringReader reader=new StringReader(xmlString);
      try {
        Document xmlStringDoc=builder.build(reader,resourceName);
        Element rootXMLStringEl=xmlStringDoc.getRootElement();
        writeResourceElement(dataObj,objectEl,resourceName,rootXMLStringEl.cloneContent());
      }
 catch (      JDOMParseException e) {
        System.err.println(""String_Node_Str"" + e.getCause());
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(xmlString);
        System.err.println(""String_Node_Str"");
        String warning=""String_Node_Str"" + e.getCause();
        Object[] options={""String_Node_Str"",""String_Node_Str""};
        boolean saveAnyway=JOptionPane.showOptionDialog(null,warning,""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[1]) == 0;
        if (!saveAnyway) {
          throw new Exception(""String_Node_Str"");
        }
 else {
          writeResource(dataObj,objectEl,resourceName,XMLStringTypeHandler.INVALID_PREFIX + originalString,XMLReferenceInfo.ELEMENT);
        }
        e.printStackTrace();
      }
    }
 else {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
  }
  return objectEl;
}"
21635,"/** 
 * Check if this id is actually a local id reference.  If it is then return the ${xxx} notation used in the otml files.
 * @param id
 * @return
 */
public static String convertId(OTID id){
  if (id instanceof OTRelativeID) {
    OTRelativeID relId=(OTRelativeID)id;
    OTID relRelId=relId.getRelativeId();
    if (relId.getRootId().equals(otDb.getDatabaseId()) && relRelId instanceof OTPathID && relRelId.toString().startsWith(""String_Node_Str"")) {
      return ""String_Node_Str"" + relRelId.toString().substring(1) + ""String_Node_Str"";
    }
  }
  return id.toString();
}","/** 
 * Check if this id is actually a local id reference.  If it is then return the ${xxx} notation used in the otml files.
 * @param id
 * @return
 */
public static String convertId(OTID id){
  if (id instanceof OTRelativeID) {
    OTRelativeID relId=(OTRelativeID)id;
    OTID relRelId=relId.getRelativeId();
    if (relId.getRootId().equals(otDb.getDatabaseId()) && relRelId instanceof OTPathID && relRelId.toExternalForm().startsWith(""String_Node_Str"")) {
      return ""String_Node_Str"" + relRelId.toExternalForm().substring(1) + ""String_Node_Str"";
    }
  }
  return id.toExternalForm();
}"
21636,"public static void export(Writer writer,OTDataObject rootObject,OTDatabase db) throws Exception {
  writtenIds=new ArrayList();
  processedClasses=new ArrayList();
  duplicateClasses=new ArrayList();
  containers=new HashMap();
  processedIds=new ArrayList();
  incomingReferenceMap=new HashMap();
  if (db instanceof XMLDatabase) {
    ArrayList importedClasses=((XMLDatabase)db).getImportedOTObjectClasses();
    processedClasses.addAll(importedClasses);
  }
  otDb=db;
  processObject(rootObject);
  Element rootObjectElement=exportObject(rootObject,null,null);
  Element otrunkEl=new Element(""String_Node_Str"");
  otrunkEl.setAttribute(""String_Node_Str"",otDb.getDatabaseId().toString());
  Element importsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(importsEl);
  for (int i=0; i < processedClasses.size(); i++) {
    Element importEl=new Element(""String_Node_Str"");
    importsEl.addContent(importEl);
    importEl.setAttribute(""String_Node_Str"",(String)processedClasses.get(i));
  }
  Element objectsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(objectsEl);
  objectsEl.addContent(rootObjectElement);
  Document doc=new Document(otrunkEl);
  Format format=Format.getPrettyFormat();
  XMLOutputter outputter=new XMLOutputter(format);
  outputter.output(doc,writer);
  writer.close();
}","public static void export(Writer writer,OTDataObject rootObject,OTDatabase db) throws Exception {
  writtenIds=new ArrayList();
  processedClasses=new ArrayList();
  duplicateClasses=new ArrayList();
  containers=new HashMap();
  processedIds=new ArrayList();
  incomingReferenceMap=new HashMap();
  if (db instanceof XMLDatabase) {
    ArrayList importedClasses=((XMLDatabase)db).getImportedOTObjectClasses();
    processedClasses.addAll(importedClasses);
  }
  otDb=db;
  processObject(rootObject);
  Element rootObjectElement=null;
  try {
    rootObjectElement=exportObject(rootObject,null,null);
  }
 catch (  Exception e) {
    return;
  }
  Element otrunkEl=new Element(""String_Node_Str"");
  otrunkEl.setAttribute(""String_Node_Str"",otDb.getDatabaseId().toString());
  Element importsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(importsEl);
  for (int i=0; i < processedClasses.size(); i++) {
    Element importEl=new Element(""String_Node_Str"");
    importsEl.addContent(importEl);
    importEl.setAttribute(""String_Node_Str"",(String)processedClasses.get(i));
  }
  Element objectsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(objectsEl);
  objectsEl.addContent(rootObjectElement);
  Document doc=new Document(otrunkEl);
  Format format=Format.getPrettyFormat();
  XMLOutputter outputter=new XMLOutputter(format);
  if (saveFile != null) {
    System.out.println(""String_Node_Str"");
    FileOutputStream outputStream=new FileOutputStream(saveFile);
    OutputStreamWriter outputStreamWriter=new OutputStreamWriter(outputStream,""String_Node_Str"");
    outputter.output(doc,outputStreamWriter);
    outputStreamWriter.close();
    writer.close();
  }
 else {
    System.out.println(""String_Node_Str"");
    outputter.output(doc,writer);
    writer.close();
  }
}"
21637,"public static void export(Writer writer,OTDataObject rootObject,OTDatabase db) throws Exception {
  writtenIds=new ArrayList();
  processedClasses=new ArrayList();
  duplicateClasses=new ArrayList();
  containers=new HashMap();
  processedIds=new ArrayList();
  incomingReferenceMap=new HashMap();
  if (db instanceof XMLDatabase) {
    ArrayList importedClasses=((XMLDatabase)db).getImportedOTObjectClasses();
    processedClasses.addAll(importedClasses);
  }
  otDb=db;
  processObject(rootObject);
  Element rootObjectElement=null;
  try {
    rootObjectElement=exportObject(rootObject,null,null);
  }
 catch (  Exception e) {
    throw e;
  }
  Element otrunkEl=new Element(""String_Node_Str"");
  otrunkEl.setAttribute(""String_Node_Str"",otDb.getDatabaseId().toString());
  Element importsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(importsEl);
  for (int i=0; i < processedClasses.size(); i++) {
    Element importEl=new Element(""String_Node_Str"");
    importsEl.addContent(importEl);
    importEl.setAttribute(""String_Node_Str"",(String)processedClasses.get(i));
  }
  Element objectsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(objectsEl);
  objectsEl.addContent(rootObjectElement);
  Document doc=new Document(otrunkEl);
  Format format=Format.getPrettyFormat();
  XMLOutputter outputter=new XMLOutputter(format);
  if (saveFile != null) {
    System.out.println(""String_Node_Str"");
    FileOutputStream outputStream=new FileOutputStream(saveFile);
    OutputStreamWriter outputStreamWriter=new OutputStreamWriter(outputStream,""String_Node_Str"");
    outputter.output(doc,outputStreamWriter);
    outputStreamWriter.close();
    writer.close();
  }
 else {
    System.out.println(""String_Node_Str"");
    outputter.output(doc,writer);
    writer.close();
  }
}","public static void export(Writer writer,OTDataObject rootObject,OTDatabase db) throws Exception {
  writtenIds=new ArrayList();
  processedClasses=new ArrayList();
  duplicateClasses=new ArrayList();
  containers=new HashMap();
  processedIds=new ArrayList();
  incomingReferenceMap=new HashMap();
  if (db instanceof XMLDatabase) {
    ArrayList importedClasses=((XMLDatabase)db).getImportedOTObjectClasses();
    processedClasses.addAll(importedClasses);
  }
  otDb=db;
  processObject(rootObject);
  Element rootObjectElement=null;
  try {
    rootObjectElement=exportObject(rootObject,null,null);
  }
 catch (  Exception e) {
    throw e;
  }
  Element otrunkEl=new Element(""String_Node_Str"");
  OTID dbID=otDb.getDatabaseId();
  if (dbID == null) {
    dbID=OTUUID.createOTUUID();
  }
  otrunkEl.setAttribute(""String_Node_Str"",otDb.getDatabaseId().toExternalForm());
  Element importsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(importsEl);
  for (int i=0; i < processedClasses.size(); i++) {
    Element importEl=new Element(""String_Node_Str"");
    importsEl.addContent(importEl);
    importEl.setAttribute(""String_Node_Str"",(String)processedClasses.get(i));
  }
  Element objectsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(objectsEl);
  objectsEl.addContent(rootObjectElement);
  Document doc=new Document(otrunkEl);
  Format format=Format.getPrettyFormat();
  XMLOutputter outputter=new XMLOutputter(format);
  if (saveFile != null) {
    System.out.println(""String_Node_Str"");
    FileOutputStream outputStream=new FileOutputStream(saveFile);
    OutputStreamWriter outputStreamWriter=new OutputStreamWriter(outputStream,""String_Node_Str"");
    outputter.output(doc,outputStreamWriter);
    outputStreamWriter.close();
    writer.close();
  }
 else {
    System.out.println(""String_Node_Str"");
    outputter.output(doc,writer);
    writer.close();
  }
}"
21638,"/** 
 * This element comes with extra information.  The name of  the element identifies it as a resource in the parentType The resource in the parent type has type information.  So if the element is ""&lt;myText>hi this is my text&lt;/myText>"" and myText is defined as a ""string"" in the parentType then this element will be turned into a string.
 * @param parentElement TODO
 * @param parentType
 * @param child
 * @return
 */
public Object handleChildResource(OTXMLElement parentElement,String childName,Object childObj,String relativeParentPath,XMLDataObject parent,int xmlType,String comment) throws HandleElementException {
  OTClassProperty otProperty=otClass.getProperty(childName);
  if (otProperty == null) {
    System.err.println(""String_Node_Str"" + childName + ""String_Node_Str""+ getObjectName());
    return null;
  }
  OTType otType=otProperty.getType();
  XMLReferenceInfo resInfo=null;
  if (xmlDB.isTrackResourceInfo()) {
    resInfo=parent.getReferenceInfo(childName);
    if (resInfo == null) {
      resInfo=new XMLReferenceInfo();
      parent.setResourceInfo(childName,resInfo);
    }
    resInfo.type=xmlType;
    resInfo.comment=comment;
  }
  if (otType instanceof OTClass && childObj instanceof String) {
    String refid=(String)childObj;
    if (refid != null && refid.length() > 0) {
      return new XMLDataObjectRef(refid,parentElement);
    }
  }
  if (otType instanceof OTClass) {
    if (!(childObj instanceof OTXMLElement)) {
      System.err.println(""String_Node_Str"");
      return null;
    }
    OTXMLElement child=(OTXMLElement)childObj;
    String childRefId=child.getAttributeValue(""String_Node_Str"");
    if (childRefId == null) {
      List children=child.getChildren();
      if (children.size() < 1) {
        return null;
      }
      childObj=children.get(0);
      if (children.size() > 1) {
        System.err.println(""String_Node_Str"" + TypeService.elementPath(child));
      }
      String childElementName=((OTXMLElement)childObj).getName();
      if (childElementName.equals(""String_Node_Str"")) {
        otType=OTrunkImpl.getOTClass(""String_Node_Str"");
      }
 else {
        otType=OTrunkImpl.getOTClass(childElementName);
        if (otType == null) {
          otType=typeService.getClassByShortcut(childElementName);
        }
        if (otType == null) {
          throw new IllegalStateException(""String_Node_Str"" + childElementName + ""String_Node_Str"");
        }
      }
    }
  }
  if (otType == null) {
    throw new IllegalStateException(""String_Node_Str"" + otProperty);
  }
  ResourceTypeHandler resHandler=typeService.getElementHandler(otType);
  if (resHandler == null) {
    System.err.println(""String_Node_Str"" + otType.getInstanceClass());
    return null;
  }
  if (childObj instanceof String) {
    if (resHandler instanceof PrimitiveResourceTypeHandler) {
      return ((PrimitiveResourceTypeHandler)resHandler).handleElement((String)childObj);
    }
 else {
      throw new HandleElementException(""String_Node_Str"");
    }
  }
 else {
    String childRelativePath=relativeParentPath + ""String_Node_Str"" + childName;
    return resHandler.handleElement((OTXMLElement)childObj,childRelativePath,parent);
  }
}","/** 
 * This element comes with extra information.  The name of  the element identifies it as a resource in the parentType The resource in the parent type has type information.  So if the element is ""&lt;myText>hi this is my text&lt;/myText>"" and myText is defined as a ""string"" in the parentType then this element will be turned into a string.
 * @param parentElement TODO
 * @param parentType
 * @param child
 * @return
 */
public Object handleChildResource(OTXMLElement parentElement,String childName,Object childObj,String relativeParentPath,XMLDataObject parent,int xmlType,String comment) throws HandleElementException {
  OTClassProperty otProperty=otClass.getProperty(childName);
  if (otProperty == null) {
    System.err.println(""String_Node_Str"" + childName + ""String_Node_Str""+ getObjectName());
    return null;
  }
  OTType otType=otProperty.getType();
  XMLReferenceInfo resInfo=null;
  if (xmlDB.isTrackResourceInfo()) {
    resInfo=parent.getReferenceInfo(childName);
    if (resInfo == null) {
      resInfo=new XMLReferenceInfo();
      parent.setResourceInfo(childName,resInfo);
    }
    resInfo.type=xmlType;
    resInfo.comment=comment;
  }
  if (otType instanceof OTClass && childObj instanceof String) {
    String refid=(String)childObj;
    if (refid != null && refid.length() > 0) {
      return new XMLDataObjectRef(refid,parentElement);
    }
  }
  if (otType instanceof OTClass) {
    if (!(childObj instanceof OTXMLElement)) {
      System.err.println(""String_Node_Str"");
      return null;
    }
    OTXMLElement child=(OTXMLElement)childObj;
    String childRefId=child.getAttributeValue(""String_Node_Str"");
    if (childRefId == null) {
      List children=child.getChildren();
      if (children.size() < 1) {
        return null;
      }
      childObj=children.get(0);
      if (children.size() > 1) {
        System.err.println(""String_Node_Str"" + TypeService.elementPath(child));
      }
      String childElementName=((OTXMLElement)childObj).getName();
      if (childElementName.equals(""String_Node_Str"")) {
        otType=OTrunkImpl.getOTClass(""String_Node_Str"");
      }
 else {
        otType=OTrunkImpl.getOTClass(childElementName);
        if (otType == null) {
          otType=typeService.getClassByShortcut(childElementName);
        }
        if (otType == null) {
          throw new IllegalStateException(""String_Node_Str"" + childElementName + ""String_Node_Str"");
        }
      }
    }
  }
  if (otType == null) {
    throw new IllegalStateException(""String_Node_Str"" + otProperty.getName() + ""String_Node_Str""+ otClass.getInstanceClass().getName());
  }
  ResourceTypeHandler resHandler=typeService.getElementHandler(otType);
  if (resHandler == null) {
    System.err.println(""String_Node_Str"" + otType.getInstanceClass());
    return null;
  }
  if (childObj instanceof String) {
    if (resHandler instanceof PrimitiveResourceTypeHandler) {
      return ((PrimitiveResourceTypeHandler)resHandler).handleElement((String)childObj);
    }
 else {
      throw new HandleElementException(""String_Node_Str"");
    }
  }
 else {
    String childRelativePath=relativeParentPath + ""String_Node_Str"" + childName;
    return resHandler.handleElement((OTXMLElement)childObj,childRelativePath,parent);
  }
}"
21639,"public static void registerTypes(List importedOTObjectClasses,TypeService typeService,XMLDatabase xmlDB,boolean addShortcuts) throws Exception {
  ClassLoader classloader=ReflectionTypeDefinitions.class.getClassLoader();
  Vector typeClasses=new Vector();
  for (int i=0; i < importedOTObjectClasses.size(); i++) {
    String className=(String)importedOTObjectClasses.get(i);
    try {
      Class typeClass=classloader.loadClass(className);
      typeClasses.add(typeClass);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"" + className);
      System.err.println(""String_Node_Str"");
    }
  }
  ReflectiveOTClassFactory.singleton.loadClasses(typeClasses);
  OTClass baseObjectClass=OTrunkImpl.getOTClass(""String_Node_Str"");
  typeService.registerUserType(baseObjectClass,typeService.getElementHandler(""String_Node_Str""));
  for (int i=0; i < typeClasses.size(); i++) {
    Class otObjectClass=(Class)typeClasses.get(i);
    String className=otObjectClass.getName();
    OTClassImpl otClass=(OTClassImpl)OTrunkImpl.getOTClass(className);
    Class resourceSchemaClass=otClass.getInstanceClass();
    Class constructorSchemaClass=otClass.getConstructorSchemaClass();
    if (constructorSchemaClass != null) {
      resourceSchemaClass=constructorSchemaClass;
    }
    if (resourceSchemaClass == null) {
      throw new RuntimeException(""String_Node_Str"" + className);
    }
    ObjectTypeHandler objectType=new ObjectTypeHandler(otClass,className,className,null,typeService,xmlDB);
    typeService.registerUserType(className,objectType);
    typeService.registerUserType(otClass,objectType);
    if (addShortcuts) {
      int lastDot=className.lastIndexOf(""String_Node_Str"");
      String localClassName=className.substring(lastDot + 1,className.length());
      typeService.registerUserType(localClassName,objectType);
      typeService.registerShortcutName(localClassName,otClass);
    }
  }
}","public static void registerTypes(List importedOTObjectClasses,TypeService typeService,XMLDatabase xmlDB,boolean addShortcuts) throws Exception {
  ClassLoader classloader=ReflectionTypeDefinitions.class.getClassLoader();
  Vector typeClasses=new Vector();
  for (int i=0; i < importedOTObjectClasses.size(); i++) {
    String className=(String)importedOTObjectClasses.get(i);
    try {
      Class typeClass=classloader.loadClass(className);
      typeClasses.add(typeClass);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"" + className);
      System.err.println(""String_Node_Str"");
    }
  }
  ReflectiveOTClassFactory.singleton.loadClasses(typeClasses);
  OTClass baseObjectClass=OTrunkImpl.getOTClass(""String_Node_Str"");
  typeService.registerUserType(baseObjectClass,typeService.getElementHandler(""String_Node_Str""));
  for (int i=0; i < typeClasses.size(); i++) {
    Class otObjectClass=(Class)typeClasses.get(i);
    String className=otObjectClass.getName();
    OTClassImpl otClass=(OTClassImpl)OTrunkImpl.getOTClass(className);
    if (otClass == null) {
      System.err.println(""String_Node_Str"" + className);
      continue;
    }
    Class resourceSchemaClass=otClass.getInstanceClass();
    Class constructorSchemaClass=otClass.getConstructorSchemaClass();
    if (constructorSchemaClass != null) {
      resourceSchemaClass=constructorSchemaClass;
    }
    if (resourceSchemaClass == null) {
      throw new RuntimeException(""String_Node_Str"" + className);
    }
    ObjectTypeHandler objectType=new ObjectTypeHandler(otClass,className,className,null,typeService,xmlDB);
    typeService.registerUserType(className,objectType);
    typeService.registerUserType(otClass,objectType);
    if (addShortcuts) {
      int lastDot=className.lastIndexOf(""String_Node_Str"");
      String localClassName=className.substring(lastDot + 1,className.length());
      typeService.registerUserType(localClassName,objectType);
      typeService.registerShortcutName(localClassName,otClass);
    }
  }
}"
21640,"public void put(String key,Object resource){
  OTDataMap userMap=getUserMap();
  userMap.put(key,resource);
}","public void put(String key,Object resource){
  OTDataMap userMap=getUserMap();
  resource=resolveIDResource(resource);
  userMap.put(key,resource);
}"
21641,"public static Element exportObject(OTDataObject dataObj,OTDataObject parent,String parentResourceName) throws Exception {
  OTID id=dataObj.getGlobalId();
  if (writtenIds.contains(id)) {
    return exportObjectReference(id);
  }
  XMLDataObject xmlDO=null;
  if (dataObj instanceof XMLDataObject) {
    xmlDO=(XMLDataObject)dataObj;
    XMLDataObject container=xmlDO.getContainer();
    if (container != null && processedIds.contains(container.getGlobalId())) {
      if (parent != container || !parentResourceName.equals(xmlDO.getContainerResourceKey())) {
        return exportObjectReference(id);
      }
    }
  }
  writtenIds.add(id);
  String objectFullClassName=OTrunkImpl.getClassName(dataObj);
  String objectElementName=getObjectElementName(objectFullClassName);
  Element objectEl=new Element(objectElementName);
  if (xmlDO != null && xmlDO.getLocalId() != null) {
    objectEl.setAttribute(""String_Node_Str"",xmlDO.getLocalId());
  }
 else {
    ArrayList incomingReferences=(ArrayList)incomingReferenceMap.get(id);
    if (incomingReferences != null && incomingReferences.size() > 1) {
      objectEl.setAttribute(""String_Node_Str"",id.toString());
    }
  }
  String resourceKeys[]=dataObj.getResourceKeys();
  for (int i=0; i < resourceKeys.length; i++) {
    String resourceName=resourceKeys[i];
    if (resourceName.equals(""String_Node_Str"") || resourceName.equals(""String_Node_Str"")) {
      continue;
    }
    Object resource=dataObj.getResource(resourceName);
    if (resource instanceof OTID) {
      Element objectIDEl=exportID(dataObj,(OTID)resource,resourceName);
      writeResourceElement(dataObj,objectEl,resourceName,objectIDEl);
    }
 else     if (resource instanceof OTDataList) {
      OTDataList list=(OTDataList)resource;
      if (list.size() == 0) {
        continue;
      }
      ArrayList content=new ArrayList();
      for (int j=0; j < list.size(); j++) {
        Object listElement=list.get(j);
        if (listElement == null) {
          System.err.println(""String_Node_Str"");
          continue;
        }
        if (list instanceof XMLDataList) {
          XMLReferenceInfo info=((XMLDataList)list).getReferenceInfo(j);
          if (info != null && info.comment != null) {
            content.add(new Comment(info.comment));
          }
        }
        Element collectionEl=exportCollectionItem(dataObj,listElement,resourceName);
        if (collectionEl != null) {
          content.add(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof OTDataMap) {
      OTDataMap map=(OTDataMap)resource;
      String[] mapKeys=map.getKeys();
      ArrayList content=new ArrayList();
      for (int j=0; j < mapKeys.length; j++) {
        Element entryEl=new Element(""String_Node_Str"");
        content.add(content);
        entryEl.setAttribute(""String_Node_Str"",mapKeys[j]);
        Object mapValue=map.get(mapKeys[j]);
        if (mapValue != null) {
          Element collectionEl=exportCollectionItem(dataObj,mapValue,resourceName);
          entryEl.addContent(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof BlobResource) {
      BlobResource blob=(BlobResource)resource;
      Object blobUrl=blob.getBlobURL();
      String blobString=null;
      int defaultType=XMLReferenceInfo.ELEMENT;
      if (blobUrl != null) {
        blobString=blobUrl.toString();
        defaultType=XMLReferenceInfo.ATTRIBUTE;
      }
 else {
        blobString=BlobTypeHandler.base64(blob.getBytes());
      }
      writeResource(dataObj,objectEl,resourceName,blobString,defaultType);
    }
 else     if (resource == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (resource instanceof Integer || resource instanceof Float || resource instanceof Byte|| resource instanceof Short|| resource instanceof Boolean) {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
 else     if (resource instanceof OTXMLString) {
      SAXBuilder builder=new SAXBuilder();
      String xmlString=""String_Node_Str"" + ((OTXMLString)resource).getContent().trim() + ""String_Node_Str"";
      StringReader reader=new StringReader(xmlString);
      try {
        Document xmlStringDoc=builder.build(reader,resourceName);
        Element rootXMLStringEl=xmlStringDoc.getRootElement();
        writeResourceElement(dataObj,objectEl,resourceName,rootXMLStringEl.cloneContent());
      }
 catch (      JDOMParseException e) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(xmlString);
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
  }
  return objectEl;
}","public static Element exportObject(OTDataObject dataObj,OTDataObject parent,String parentResourceName) throws Exception {
  OTID id=dataObj.getGlobalId();
  if (writtenIds.contains(id)) {
    return exportObjectReference(id);
  }
  XMLDataObject xmlDO=null;
  if (dataObj instanceof XMLDataObject) {
    xmlDO=(XMLDataObject)dataObj;
    XMLDataObject container=xmlDO.getContainer();
    if (container != null && processedIds.contains(container.getGlobalId())) {
      if (parent != container || !parentResourceName.equals(xmlDO.getContainerResourceKey())) {
        return exportObjectReference(id);
      }
    }
  }
  writtenIds.add(id);
  String objectFullClassName=OTrunkImpl.getClassName(dataObj);
  String objectElementName=getObjectElementName(objectFullClassName);
  Element objectEl=new Element(objectElementName);
  if (xmlDO != null && xmlDO.getLocalId() != null) {
    objectEl.setAttribute(""String_Node_Str"",xmlDO.getLocalId());
  }
 else {
    ArrayList incomingReferences=(ArrayList)incomingReferenceMap.get(id);
    if (incomingReferences != null && incomingReferences.size() > 1) {
      objectEl.setAttribute(""String_Node_Str"",id.toString());
    }
  }
  String resourceKeys[]=dataObj.getResourceKeys();
  for (int i=0; i < resourceKeys.length; i++) {
    String resourceName=resourceKeys[i];
    if (resourceName.equals(""String_Node_Str"") || resourceName.equals(""String_Node_Str"")) {
      continue;
    }
    Object resource=dataObj.getResource(resourceName);
    if (resource instanceof OTID) {
      Element objectIDEl=exportID(dataObj,(OTID)resource,resourceName);
      writeResourceElement(dataObj,objectEl,resourceName,objectIDEl);
    }
 else     if (resource instanceof OTDataList) {
      OTDataList list=(OTDataList)resource;
      if (list.size() == 0) {
        continue;
      }
      ArrayList content=new ArrayList();
      for (int j=0; j < list.size(); j++) {
        Object listElement=list.get(j);
        if (listElement == null) {
          System.err.println(""String_Node_Str"");
          continue;
        }
        if (list instanceof XMLDataList) {
          XMLReferenceInfo info=((XMLDataList)list).getReferenceInfo(j);
          if (info != null && info.comment != null) {
            content.add(new Comment(info.comment));
          }
        }
        Element collectionEl=exportCollectionItem(dataObj,listElement,resourceName);
        if (collectionEl != null) {
          content.add(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof OTDataMap) {
      OTDataMap map=(OTDataMap)resource;
      String[] mapKeys=map.getKeys();
      ArrayList content=new ArrayList();
      for (int j=0; j < mapKeys.length; j++) {
        Element entryEl=new Element(""String_Node_Str"");
        content.add(entryEl);
        entryEl.setAttribute(""String_Node_Str"",mapKeys[j]);
        Object mapValue=map.get(mapKeys[j]);
        if (mapValue != null) {
          Element collectionEl=exportCollectionItem(dataObj,mapValue,resourceName);
          entryEl.addContent(collectionEl);
        }
      }
      writeResourceElement(dataObj,objectEl,resourceName,content);
    }
 else     if (resource instanceof BlobResource) {
      BlobResource blob=(BlobResource)resource;
      Object blobUrl=blob.getBlobURL();
      String blobString=null;
      int defaultType=XMLReferenceInfo.ELEMENT;
      if (blobUrl != null) {
        blobString=blobUrl.toString();
        defaultType=XMLReferenceInfo.ATTRIBUTE;
      }
 else {
        blobString=BlobTypeHandler.base64(blob.getBytes());
      }
      writeResource(dataObj,objectEl,resourceName,blobString,defaultType);
    }
 else     if (resource == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (resource instanceof Integer || resource instanceof Float || resource instanceof Byte|| resource instanceof Short|| resource instanceof Boolean) {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
 else     if (resource instanceof OTXMLString) {
      SAXBuilder builder=new SAXBuilder();
      String xmlString=""String_Node_Str"" + ((OTXMLString)resource).getContent().trim() + ""String_Node_Str"";
      StringReader reader=new StringReader(xmlString);
      try {
        Document xmlStringDoc=builder.build(reader,resourceName);
        Element rootXMLStringEl=xmlStringDoc.getRootElement();
        writeResourceElement(dataObj,objectEl,resourceName,rootXMLStringEl.cloneContent());
      }
 catch (      JDOMParseException e) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(xmlString);
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else {
      String primitiveString=resource.toString();
      writeResource(dataObj,objectEl,resourceName,primitiveString,XMLReferenceInfo.ATTRIBUTE);
    }
  }
  return objectEl;
}"
21642,"public void createActions(){
  newUserDataAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      createNewUser();
    }
  }
;
  loadUserDataAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here. Just the parent class.
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      openUserData();
    }
  }
;
  exportToHtmlAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      File fileToSave=getReportFile();
      OTMLToXHTMLConverter otxc=new OTMLToXHTMLConverter(otViewFactory,bodyPanel.getViewContainer());
      otxc.setXHTMLParams(fileToSave,800,600);
      (new Thread(otxc)).start();
    }
  }
;
  exportToHtmlAction.setEnabled(true);
  saveUserDataAction=new AbstractAction(""String_Node_Str""){
    /** 
 * Nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      if (currentUserFile == null || !currentUserFile.exists()) {
        saveUserDataAsAction.actionPerformed(arg0);
        return;
      }
      if (currentUserFile.exists()) {
        try {
          Exporter.export(currentUserFile,userDataDB.getRoot(),userDataDB);
          userDataDB.setDirty(false);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  saveUserDataAsAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      MostRecentFileDialog mrfd=new MostRecentFileDialog(""String_Node_Str"");
      mrfd.setFilenameFilter(""String_Node_Str"");
      if (currentUserFile != null) {
        mrfd.setCurrentDirectory(currentUserFile.getParentFile());
        mrfd.setSelectedFile(currentUserFile);
      }
      int retval=mrfd.showSaveDialog(frame);
      File file=null;
      if (retval == MostRecentFileDialog.APPROVE_OPTION) {
        file=mrfd.getSelectedFile();
        String fileName=file.getPath();
        currentUserFile=file;
        if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
          currentUserFile=new File(currentUserFile.getAbsolutePath() + ""String_Node_Str"");
        }
        try {
          Exporter.export(currentUserFile,userDataDB.getRoot(),userDataDB);
          userDataDB.setDirty(false);
          setTitle(baseFrameTitle + ""String_Node_Str"" + currentUserFile.toString());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        frame.setTitle(fileName);
      }
    }
  }
;
  loadAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      MostRecentFileDialog mrfd=new MostRecentFileDialog(""String_Node_Str"");
      mrfd.setFilenameFilter(""String_Node_Str"");
      int retval=mrfd.showOpenDialog(frame);
      File file=null;
      if (retval == MostRecentFileDialog.APPROVE_OPTION) {
        file=mrfd.getSelectedFile();
      }
      if (file != null && file.exists()) {
        System.out.println(""String_Node_Str"" + file);
        loadFile(file);
        exportToHtmlAction.setEnabled(true);
      }
    }
  }
;
  saveAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      if (remoteURL != null) {
        try {
          if (Boolean.getBoolean(OTViewerHelper.REST_ENABLED_PROP)) {
            try {
              remoteSaveData(OTViewer.HTTP_PUT);
            }
 catch (            Exception e) {
              remoteSaveData(OTViewer.HTTP_POST);
            }
          }
 else {
            remoteSaveData(OTViewer.HTTP_POST);
          }
        }
 catch (        Exception e) {
          JOptionPane.showMessageDialog((Frame)SwingUtilities.getRoot(OTViewer.this),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          e.printStackTrace();
        }
      }
 else {
        if (currentAuthoredFile == null) {
          saveAsAction.actionPerformed(arg0);
          return;
        }
        if (checkForReplace(currentAuthoredFile)) {
          try {
            ExporterJDOM.export(currentAuthoredFile,xmlDB.getRoot(),xmlDB);
            xmlDB.setDirty(false);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
;
  saveAsAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      MostRecentFileDialog mrfd=new MostRecentFileDialog(""String_Node_Str"");
      mrfd.setFilenameFilter(""String_Node_Str"");
      if (currentAuthoredFile != null) {
        mrfd.setCurrentDirectory(currentAuthoredFile.getParentFile());
        mrfd.setSelectedFile(currentAuthoredFile);
      }
      int retval=mrfd.showSaveDialog(frame);
      File file=null;
      if (retval == MostRecentFileDialog.APPROVE_OPTION) {
        file=mrfd.getSelectedFile();
        String fileName=file.getPath();
        if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
          file=new File(file.getAbsolutePath() + ""String_Node_Str"");
        }
        if (checkForReplace(file)) {
          try {
            ExporterJDOM.export(file,xmlDB.getRoot(),xmlDB);
            currentAuthoredFile=file;
            xmlDB.setDirty(false);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        frame.setTitle(fileName);
        remoteURL=null;
        updateMenuBar();
      }
    }
  }
;
  saveRemoteAsAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      JPanel panel=new JPanel();
      panel.setBorder(new EmptyBorder(10,10,10,10));
      panel.setLayout(new BorderLayout());
      JLabel prompt=new JLabel(""String_Node_Str"");
      prompt.setBorder(new EmptyBorder(0,0,10,0));
      JTextField textField=new JTextField();
      if (remoteURL == null) {
        textField.setText(""String_Node_Str"");
      }
 else {
        textField.setText(remoteURL.toString());
      }
      JPanel checkboxPanel=new JPanel();
      JCheckBox restCheckbox=new JCheckBox(""String_Node_Str"");
      restCheckbox.setSelected(Boolean.getBoolean(OTViewerHelper.REST_ENABLED_PROP));
      checkboxPanel.setBorder(new EmptyBorder(5,5,0,0));
      checkboxPanel.add(restCheckbox);
      panel.add(prompt,BorderLayout.NORTH);
      panel.add(textField,BorderLayout.CENTER);
      panel.add(checkboxPanel,BorderLayout.SOUTH);
      int returnVal=CustomDialog.showOKCancelDialog((Frame)SwingUtilities.getRoot(OTViewer.this),panel,""String_Node_Str"",false,true);
      if (returnVal == 0) {
        try {
          remoteURL=new URL(textField.getText());
          System.setProperty(OTViewerHelper.REST_ENABLED_PROP,Boolean.toString(restCheckbox.isSelected()));
          remoteSaveData(OTViewer.HTTP_POST);
          updateMenuBar();
        }
 catch (        Exception e) {
          System.err.println(""String_Node_Str"");
          JOptionPane.showMessageDialog((Frame)SwingUtilities.getRoot(OTViewer.this),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          e.printStackTrace();
        }
      }
 else {
      }
    }
  }
;
  exportImageAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Component currentComp=bodyPanel.getCurrentComponent();
      Util.makeScreenShot(currentComp);
    }
  }
;
  exportHiResImageAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Component currentComp=bodyPanel.getCurrentComponent();
      Util.makeScreenShot(currentComp,2,2);
    }
  }
;
  debugAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Object source=e.getSource();
      if (((JCheckBoxMenuItem)source).isSelected()) {
        System.setProperty(OTViewerHelper.DEBUG_PROP,""String_Node_Str"");
      }
 else {
        System.setProperty(OTViewerHelper.DEBUG_PROP,""String_Node_Str"");
      }
      try {
        reloadWindow();
      }
 catch (      Exception exp) {
        exp.printStackTrace();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          updateMenuBar();
        }
      }
);
      exportToHtmlAction.setEnabled(true);
    }
  }
;
  showConsoleAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      if (consoleFrame != null) {
        consoleFrame.setVisible(true);
      }
    }
  }
;
  reloadWindowAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      try {
        reload();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
;
  exitAction=new ExitAction();
}","public void createActions(){
  newUserDataAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      createNewUser();
    }
  }
;
  loadUserDataAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here. Just the parent class.
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      openUserData();
    }
  }
;
  exportToHtmlAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      File fileToSave=getReportFile();
      OTMLToXHTMLConverter otxc=new OTMLToXHTMLConverter(otViewFactory,bodyPanel.getViewContainer());
      otxc.setXHTMLParams(fileToSave,800,600);
      (new Thread(otxc)).start();
    }
  }
;
  exportToHtmlAction.setEnabled(true);
  saveUserDataAction=new AbstractAction(""String_Node_Str""){
    /** 
 * Nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      if (currentUserFile == null || !currentUserFile.exists()) {
        saveUserDataAsAction.actionPerformed(arg0);
        return;
      }
      if (currentUserFile.exists()) {
        try {
          Exporter.export(currentUserFile,userDataDB.getRoot(),userDataDB);
          userDataDB.setDirty(false);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  saveUserDataAsAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      MostRecentFileDialog mrfd=new MostRecentFileDialog(""String_Node_Str"");
      mrfd.setFilenameFilter(""String_Node_Str"");
      if (currentUserFile != null) {
        mrfd.setCurrentDirectory(currentUserFile.getParentFile());
        mrfd.setSelectedFile(currentUserFile);
      }
      int retval=mrfd.showSaveDialog(frame);
      File file=null;
      if (retval == MostRecentFileDialog.APPROVE_OPTION) {
        file=mrfd.getSelectedFile();
        String fileName=file.getPath();
        currentUserFile=file;
        if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
          currentUserFile=new File(currentUserFile.getAbsolutePath() + ""String_Node_Str"");
        }
        try {
          Exporter.export(currentUserFile,userDataDB.getRoot(),userDataDB);
          userDataDB.setDirty(false);
          setTitle(baseFrameTitle + ""String_Node_Str"" + currentUserFile.toString());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        frame.setTitle(fileName);
      }
    }
  }
;
  loadAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      MostRecentFileDialog mrfd=new MostRecentFileDialog(""String_Node_Str"");
      mrfd.setFilenameFilter(""String_Node_Str"");
      int retval=mrfd.showOpenDialog(frame);
      File file=null;
      if (retval == MostRecentFileDialog.APPROVE_OPTION) {
        file=mrfd.getSelectedFile();
      }
      if (file != null && file.exists()) {
        System.out.println(""String_Node_Str"" + file);
        loadFile(file);
        exportToHtmlAction.setEnabled(true);
      }
    }
  }
;
  saveAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      if (remoteURL != null) {
        try {
          if (Boolean.getBoolean(OTViewerHelper.REST_ENABLED_PROP)) {
            try {
              remoteSaveData(OTViewer.HTTP_PUT);
            }
 catch (            Exception e) {
              remoteSaveData(OTViewer.HTTP_POST);
            }
          }
 else {
            remoteSaveData(OTViewer.HTTP_POST);
          }
        }
 catch (        Exception e) {
          JOptionPane.showMessageDialog((Frame)SwingUtilities.getRoot(OTViewer.this),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          e.printStackTrace();
        }
      }
 else {
        if (currentAuthoredFile == null) {
          saveAsAction.actionPerformed(arg0);
          return;
        }
        if (checkForReplace(currentAuthoredFile)) {
          try {
            ExporterJDOM.export(currentAuthoredFile,xmlDB.getRoot(),xmlDB);
            xmlDB.setDirty(false);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
;
  saveAsAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      MostRecentFileDialog mrfd=new MostRecentFileDialog(""String_Node_Str"");
      mrfd.setFilenameFilter(""String_Node_Str"");
      if (currentAuthoredFile != null) {
        mrfd.setCurrentDirectory(currentAuthoredFile.getParentFile());
        mrfd.setSelectedFile(currentAuthoredFile);
      }
      int retval=mrfd.showSaveDialog(frame);
      File file=null;
      if (retval == MostRecentFileDialog.APPROVE_OPTION) {
        file=mrfd.getSelectedFile();
        String fileName=file.getPath();
        if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
          file=new File(file.getAbsolutePath() + ""String_Node_Str"");
        }
        if (checkForReplace(file)) {
          try {
            ExporterJDOM.export(file,xmlDB.getRoot(),xmlDB);
            currentAuthoredFile=file;
            currentURL=file.toURL();
            xmlDB.setDirty(false);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        frame.setTitle(fileName);
        remoteURL=null;
        updateMenuBar();
      }
    }
  }
;
  saveRemoteAsAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      JPanel panel=new JPanel();
      panel.setBorder(new EmptyBorder(10,10,10,10));
      panel.setLayout(new BorderLayout());
      JLabel prompt=new JLabel(""String_Node_Str"");
      prompt.setBorder(new EmptyBorder(0,0,10,0));
      JTextField textField=new JTextField();
      if (remoteURL == null) {
        textField.setText(""String_Node_Str"");
      }
 else {
        textField.setText(remoteURL.toString());
      }
      JPanel checkboxPanel=new JPanel();
      JCheckBox restCheckbox=new JCheckBox(""String_Node_Str"");
      restCheckbox.setSelected(Boolean.getBoolean(OTViewerHelper.REST_ENABLED_PROP));
      checkboxPanel.setBorder(new EmptyBorder(5,5,0,0));
      checkboxPanel.add(restCheckbox);
      panel.add(prompt,BorderLayout.NORTH);
      panel.add(textField,BorderLayout.CENTER);
      panel.add(checkboxPanel,BorderLayout.SOUTH);
      int returnVal=CustomDialog.showOKCancelDialog((Frame)SwingUtilities.getRoot(OTViewer.this),panel,""String_Node_Str"",false,true);
      if (returnVal == 0) {
        try {
          remoteURL=new URL(textField.getText());
          System.setProperty(OTViewerHelper.REST_ENABLED_PROP,Boolean.toString(restCheckbox.isSelected()));
          remoteSaveData(OTViewer.HTTP_POST);
          updateMenuBar();
        }
 catch (        Exception e) {
          System.err.println(""String_Node_Str"");
          JOptionPane.showMessageDialog((Frame)SwingUtilities.getRoot(OTViewer.this),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          e.printStackTrace();
        }
      }
 else {
      }
    }
  }
;
  exportImageAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Component currentComp=bodyPanel.getCurrentComponent();
      Util.makeScreenShot(currentComp);
    }
  }
;
  exportHiResImageAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Component currentComp=bodyPanel.getCurrentComponent();
      Util.makeScreenShot(currentComp,2,2);
    }
  }
;
  debugAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Object source=e.getSource();
      if (((JCheckBoxMenuItem)source).isSelected()) {
        System.setProperty(OTViewerHelper.DEBUG_PROP,""String_Node_Str"");
      }
 else {
        System.setProperty(OTViewerHelper.DEBUG_PROP,""String_Node_Str"");
      }
      try {
        reloadWindow();
      }
 catch (      Exception exp) {
        exp.printStackTrace();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          updateMenuBar();
        }
      }
);
      exportToHtmlAction.setEnabled(true);
    }
  }
;
  showConsoleAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      if (consoleFrame != null) {
        consoleFrame.setVisible(true);
      }
    }
  }
;
  reloadWindowAction=new AbstractAction(""String_Node_Str""){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      try {
        reload();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
;
  exitAction=new ExitAction();
}"
21643,"public boolean isResourceSet(String resourceName){
  OTClassProperty property=otClass().getProperty(resourceName);
  return otIsSet(property);
}","public boolean isResourceSet(String resourceName){
  OTClassProperty property=otClass().getProperty(resourceName);
  if (property == null) {
    throw new IllegalStateException(""String_Node_Str"" + resourceName + ""String_Node_Str""+ otClass().getInstanceClass().getName());
  }
  return otIsSet(property);
}"
21644,"public static void export(Writer writer,OTDataObject rootObject,OTDatabase db) throws Exception {
  writtenIds=new ArrayList();
  processedClasses=new ArrayList();
  duplicateClasses=new ArrayList();
  containers=new HashMap();
  processedIds=new ArrayList();
  incomingReferenceMap=new HashMap();
  if (db instanceof XMLDatabase) {
    ArrayList importedClasses=((XMLDatabase)db).getImportedOTObjectClasses();
    processedClasses.addAll(importedClasses);
  }
  PrintWriter printStream=new PrintWriter(writer);
  otDb=db;
  processObject(rootObject);
  Element rootObjectElement=exportObject(rootObject,null,null);
  Element otrunkEl=new Element(""String_Node_Str"");
  otrunkEl.setAttribute(""String_Node_Str"",otDb.getDatabaseId().toString());
  Element importsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(importsEl);
  for (int i=0; i < processedClasses.size(); i++) {
    Element importEl=new Element(""String_Node_Str"");
    importsEl.addContent(importEl);
    importEl.setAttribute(""String_Node_Str"",(String)processedClasses.get(i));
  }
  Element objectsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(objectsEl);
  objectsEl.addContent(rootObjectElement);
  Document doc=new Document(otrunkEl);
  Format format=Format.getPrettyFormat();
  XMLOutputter outputter=new XMLOutputter(format);
  outputter.output(doc,printStream);
  printStream.close();
}","public static void export(Writer writer,OTDataObject rootObject,OTDatabase db) throws Exception {
  writtenIds=new ArrayList();
  processedClasses=new ArrayList();
  duplicateClasses=new ArrayList();
  containers=new HashMap();
  processedIds=new ArrayList();
  incomingReferenceMap=new HashMap();
  if (db instanceof XMLDatabase) {
    ArrayList importedClasses=((XMLDatabase)db).getImportedOTObjectClasses();
    processedClasses.addAll(importedClasses);
  }
  otDb=db;
  processObject(rootObject);
  Element rootObjectElement=exportObject(rootObject,null,null);
  Element otrunkEl=new Element(""String_Node_Str"");
  otrunkEl.setAttribute(""String_Node_Str"",otDb.getDatabaseId().toString());
  Element importsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(importsEl);
  for (int i=0; i < processedClasses.size(); i++) {
    Element importEl=new Element(""String_Node_Str"");
    importsEl.addContent(importEl);
    importEl.setAttribute(""String_Node_Str"",(String)processedClasses.get(i));
  }
  Element objectsEl=new Element(""String_Node_Str"");
  otrunkEl.addContent(objectsEl);
  objectsEl.addContent(rootObjectElement);
  Document doc=new Document(otrunkEl);
  Format format=Format.getPrettyFormat();
  XMLOutputter outputter=new XMLOutputter(format);
  outputter.output(doc,writer);
  writer.close();
}"
21645,"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  String methodName=method.getName();
  if (methodName.equals(""String_Node_Str"")) {
    return dataObject.getGlobalId();
  }
 else   if (methodName.equals(""String_Node_Str"")) {
    return copyInto(args[0]);
  }
  return null;
}","public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  String methodName=method.getName();
  if (methodName.equals(""String_Node_Str"")) {
    return dataObject.getGlobalId();
  }
  return null;
}"
21646,"public OTObject copyObject(OTObject original,int maxDepth) throws Exception {
  OTDataObject originalDataObject=getOTDataObject(original.getGlobalId());
  OTDataObject copyDataObject=DataObjectUtil.copy(originalDataObject,creationDb,maxDepth);
  return getOTObject(copyDataObject.getGlobalId());
}","public OTObject copyObject(OTObject original,OTObjectList orphanObjectList,int maxDepth) throws Exception {
  OTDataObject originalDataObject=getOTDataObject(original.getGlobalId());
  OTDataList orphanDataList=((OTObjectListImpl)orphanObjectList).getDataList();
  OTDataObject copyDataObject=DataObjectUtil.copy(originalDataObject,creationDb,orphanDataList,maxDepth);
  return getOTObject(copyDataObject.getGlobalId());
}"
21647,"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  String methodName=method.getName();
  if (methodName.equals(""String_Node_Str"")) {
    WeakReference listenerRef=new WeakReference(args[0]);
    changeListeners.add(listenerRef);
    if (traceListeners && !(args[0] instanceof TraceListener)) {
      System.out.println(""String_Node_Str"" + proxy + ""String_Node_Str""+ args[0]);
      if (changeListenerLabels == null) {
        changeListenerLabels=new HashMap();
        changeListenerLabels.put(listenerRef,""String_Node_Str"" + args[0]);
      }
    }
    hasListeners=true;
    return null;
  }
  if (methodName.equals(""String_Node_Str"")) {
    if (traceListeners) {
      System.out.println(""String_Node_Str"" + proxy + ""String_Node_Str""+ args[0]);
    }
    for (int i=0; i < changeListeners.size(); i++) {
      WeakReference ref=(WeakReference)changeListeners.get(i);
      if (args[0] == ref.get()) {
        changeListeners.remove(i);
        return null;
      }
    }
    if (changeListeners.size() == 0) {
      hasListeners=false;
    }
    return null;
  }
  if (methodName.equals(""String_Node_Str"")) {
    setDoNotifyListeners(((Boolean)args[0]).booleanValue());
    return null;
  }
  if (methodName.equals(""String_Node_Str"")) {
    notifyOTChange(null,null,null);
    return null;
  }
  if (methodName.equals(""String_Node_Str"")) {
    String resourceName=(String)args[0];
    Object resourceValue=dataObject.getResource(resourceName);
    return Boolean.valueOf(resourceValue != null);
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    String resourceName=getResourceName(2,methodName);
    Class returnType=method.getReturnType();
    Class proxyClass=proxy.getClass();
    return handleGet(resourceName,returnType,proxyClass);
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    String resourceName=getResourceName(3,methodName);
    Class returnType=method.getReturnType();
    Class proxyClass=proxy.getClass();
    return handleGet(resourceName,returnType,proxyClass);
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    (new Exception(""String_Node_Str"")).printStackTrace();
    return null;
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    (new Exception(""String_Node_Str"")).printStackTrace();
    return null;
  }
 else   if (methodName.equals(""String_Node_Str"")) {
    return OTrunkImpl.getClassName(dataObject) + ""String_Node_Str"" + dataObject.getGlobalId();
  }
 else   if (methodName.equals(""String_Node_Str"")) {
    String str=OTrunkImpl.getClassName(dataObject) + ""String_Node_Str"" + dataObject.getGlobalId();
    Integer integer=new Integer(str.hashCode());
    return integer;
  }
 else   if (methodName.equals(""String_Node_Str"")) {
    Object other=args[0];
    if (!(other instanceof OTObject)) {
      return Boolean.FALSE;
    }
    if (proxy == other) {
      return Boolean.TRUE;
    }
    if (((OTObject)other).getGlobalId().equals(dataObject.getGlobalId())) {
      System.err.println(""String_Node_Str"");
      return Boolean.TRUE;
    }
    return Boolean.FALSE;
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    String resourceName=getResourceName(3,methodName);
    Object resourceValue=args[0];
    setResource(resourceName,resourceValue);
  }
 else   if (methodName.equals(""String_Node_Str"")) {
    return copyInto(args[0]);
  }
 else {
    System.err.println(""String_Node_Str"" + methodName + ""String_Node_Str""+ proxy.getClass());
  }
  return null;
}","public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  String methodName=method.getName();
  if (methodName.equals(""String_Node_Str"")) {
    WeakReference listenerRef=new WeakReference(args[0]);
    changeListeners.add(listenerRef);
    if (traceListeners && !(args[0] instanceof TraceListener)) {
      System.out.println(""String_Node_Str"" + proxy + ""String_Node_Str""+ args[0]);
      if (changeListenerLabels == null) {
        changeListenerLabels=new HashMap();
        changeListenerLabels.put(listenerRef,""String_Node_Str"" + args[0]);
      }
    }
    hasListeners=true;
    return null;
  }
  if (methodName.equals(""String_Node_Str"")) {
    if (traceListeners) {
      System.out.println(""String_Node_Str"" + proxy + ""String_Node_Str""+ args[0]);
    }
    for (int i=0; i < changeListeners.size(); i++) {
      WeakReference ref=(WeakReference)changeListeners.get(i);
      if (args[0] == ref.get()) {
        changeListeners.remove(i);
        return null;
      }
    }
    if (changeListeners.size() == 0) {
      hasListeners=false;
    }
    return null;
  }
  if (methodName.equals(""String_Node_Str"")) {
    setDoNotifyListeners(((Boolean)args[0]).booleanValue());
    return null;
  }
  if (methodName.equals(""String_Node_Str"")) {
    notifyOTChange(null,null,null);
    return null;
  }
  if (methodName.equals(""String_Node_Str"")) {
    String resourceName=(String)args[0];
    Object resourceValue=dataObject.getResource(resourceName);
    return Boolean.valueOf(resourceValue != null);
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    String resourceName=getResourceName(2,methodName);
    Class returnType=method.getReturnType();
    Class proxyClass=proxy.getClass();
    return handleGet(resourceName,returnType,proxyClass);
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    String resourceName=getResourceName(3,methodName);
    Class returnType=method.getReturnType();
    Class proxyClass=proxy.getClass();
    return handleGet(resourceName,returnType,proxyClass);
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    (new Exception(""String_Node_Str"")).printStackTrace();
    return null;
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    (new Exception(""String_Node_Str"")).printStackTrace();
    return null;
  }
 else   if (methodName.equals(""String_Node_Str"")) {
    return OTrunkImpl.getClassName(dataObject) + ""String_Node_Str"" + dataObject.getGlobalId();
  }
 else   if (methodName.equals(""String_Node_Str"")) {
    String str=OTrunkImpl.getClassName(dataObject) + ""String_Node_Str"" + dataObject.getGlobalId();
    Integer integer=new Integer(str.hashCode());
    return integer;
  }
 else   if (methodName.equals(""String_Node_Str"")) {
    Object other=args[0];
    if (!(other instanceof OTObject)) {
      return Boolean.FALSE;
    }
    if (proxy == other) {
      return Boolean.TRUE;
    }
    if (((OTObject)other).getGlobalId().equals(dataObject.getGlobalId())) {
      System.err.println(""String_Node_Str"");
      return Boolean.TRUE;
    }
    return Boolean.FALSE;
  }
 else   if (methodName.startsWith(""String_Node_Str"")) {
    String resourceName=getResourceName(3,methodName);
    Object resourceValue=args[0];
    setResource(resourceName,resourceValue);
  }
 else {
    System.err.println(""String_Node_Str"" + methodName + ""String_Node_Str""+ proxy.getClass());
  }
  return null;
}"
21648,"public Object handleGet(String resourceName,Class returnType,Class proxyClass) throws Exception {
  if (resourceName.equals(""String_Node_Str"")) {
    return dataObject.getGlobalId();
  }
  if (resourceName.equals(""String_Node_Str"")) {
    return objectService;
  }
  Object resourceValue=dataObject.getResource(resourceName);
  if (resourceValue instanceof OTID) {
    OTObject object;
    try {
      if (resourceValue == null) {
        return null;
      }
      OTID objId=(OTID)resourceValue;
      object=(OTObject)objectService.getOTObject(objId);
      if (object != null) {
        if (!returnType.isAssignableFrom(object.getClass())) {
          System.err.println(""String_Node_Str"");
          System.err.println(""String_Node_Str"" + object);
          System.err.println(""String_Node_Str"" + dataObject.getResource(OTrunkImpl.RES_CLASS_NAME));
          System.err.println(""String_Node_Str"" + resourceName);
          System.err.println(""String_Node_Str"" + returnType);
          return null;
        }
      }
      return object;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (OTResourceMap.class.isAssignableFrom(returnType)) {
    try {
      OTDataMap map=(OTDataMap)dataObject.getResourceCollection(resourceName,OTDataMap.class);
      return new OTResourceMapImpl(resourceName,map,this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (OTObjectMap.class.isAssignableFrom(returnType)) {
    try {
      OTDataMap map=(OTDataMap)dataObject.getResourceCollection(resourceName,OTDataMap.class);
      return new OTObjectMapImpl(resourceName,map,this,objectService);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (OTResourceList.class.isAssignableFrom(returnType)) {
    try {
      OTDataList list=(OTDataList)dataObject.getResourceCollection(resourceName,OTDataList.class);
      return new OTResourceListImpl(resourceName,list,this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (OTObjectList.class.isAssignableFrom(returnType)) {
    try {
      OTDataList list=(OTDataList)dataObject.getResourceCollection(resourceName,OTDataList.class);
      return new OTObjectListImpl(resourceName,list,this,objectService);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (resourceValue instanceof BlobResource) {
    BlobResource blob=(BlobResource)resourceValue;
    if (returnType == byte[].class) {
      return blob.getBytes();
    }
 else     if (returnType == URL.class) {
      return blob.getBlobURL();
    }
  }
 else   if (resourceValue == null && returnType.isPrimitive()) {
    try {
      Field defaultField=proxyClass.getField(""String_Node_Str"" + resourceName);
      if (defaultField != null) {
        return defaultField.get(null);
      }
    }
 catch (    NoSuchFieldException e) {
      throw new RuntimeException(""String_Node_Str"" + resourceName + ""String_Node_Str""+ ""String_Node_Str""+ schemaInterface);
    }
  }
  if (resourceValue == null)   return null;
  if (!returnType.isInstance(resourceValue) && !returnType.isPrimitive()) {
    System.err.println(""String_Node_Str"" + resourceName);
    System.err.println(""String_Node_Str"" + OTrunkImpl.getClassName(dataObject));
    System.err.println(""String_Node_Str"" + resourceValue.getClass());
    System.err.println(""String_Node_Str"" + returnType);
    return null;
  }
  return resourceValue;
}","public Object handleGet(String resourceName,Class returnType,Class proxyClass) throws Exception {
  if (resourceName.equals(""String_Node_Str"")) {
    return dataObject.getGlobalId();
  }
  if (resourceName.equals(""String_Node_Str"")) {
    return objectService;
  }
  Object resourceValue=dataObject.getResource(resourceName);
  if (resourceValue instanceof OTID) {
    OTObject object;
    try {
      if (resourceValue == null) {
        return null;
      }
      OTID objId=(OTID)resourceValue;
      object=(OTObject)objectService.getOTObject(objId);
      if (object != null) {
        if (!returnType.isAssignableFrom(object.getClass())) {
          System.err.println(""String_Node_Str"");
          System.err.println(""String_Node_Str"" + object);
          System.err.println(""String_Node_Str"" + dataObject.getResource(OTrunkImpl.RES_CLASS_NAME));
          System.err.println(""String_Node_Str"" + resourceName);
          System.err.println(""String_Node_Str"" + returnType);
          return null;
        }
      }
      return object;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (OTResourceMap.class.isAssignableFrom(returnType)) {
    try {
      OTDataMap map=(OTDataMap)dataObject.getResourceCollection(resourceName,OTDataMap.class);
      return new OTResourceMapImpl(resourceName,map,this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (OTObjectMap.class.isAssignableFrom(returnType)) {
    try {
      OTDataMap map=(OTDataMap)dataObject.getResourceCollection(resourceName,OTDataMap.class);
      return new OTObjectMapImpl(resourceName,map,this,objectService);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (OTResourceList.class.isAssignableFrom(returnType)) {
    try {
      OTDataList list=(OTDataList)dataObject.getResourceCollection(resourceName,OTDataList.class);
      return new OTResourceListImpl(resourceName,list,this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (OTObjectList.class.isAssignableFrom(returnType)) {
    try {
      OTDataList list=(OTDataList)dataObject.getResourceCollection(resourceName,OTDataList.class);
      return new OTObjectListImpl(resourceName,list,this,objectService);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if (resourceValue instanceof BlobResource) {
    BlobResource blob=(BlobResource)resourceValue;
    if (returnType == byte[].class) {
      return blob.getBytes();
    }
 else     if (returnType == URL.class) {
      return blob.getBlobURL();
    }
  }
 else   if (resourceValue == null && (returnType == String.class || returnType.isPrimitive())) {
    try {
      Field defaultField=proxyClass.getField(""String_Node_Str"" + resourceName);
      if (defaultField != null) {
        return defaultField.get(null);
      }
    }
 catch (    NoSuchFieldException e) {
      if (returnType != String.class) {
        throw new RuntimeException(""String_Node_Str"" + resourceName + ""String_Node_Str""+ ""String_Node_Str""+ schemaInterface);
      }
    }
  }
  if (resourceValue == null)   return null;
  if (!returnType.isInstance(resourceValue) && !returnType.isPrimitive()) {
    System.err.println(""String_Node_Str"" + resourceName);
    System.err.println(""String_Node_Str"" + OTrunkImpl.getClassName(dataObject));
    System.err.println(""String_Node_Str"" + resourceValue.getClass());
    System.err.println(""String_Node_Str"" + returnType);
    return null;
  }
  return resourceValue;
}"
21649,"private Object handleChild(Object child,int maxDepth) throws Exception {
  if (child instanceof OTID && (maxDepth == -1 || maxDepth > 0)) {
    if (!contains((OTID)child)) {
      OTDataObject itemObj=otDb.getOTDataObject(root,(OTID)child);
      OTDataObject itemCopy=otDb.createDataObject();
      int copyMaxDepth=-1;
      if (maxDepth != -1) {
        copyMaxDepth=maxDepth - 1;
      }
      CopyEntry itemCopyEntry=new CopyEntry(itemObj,copyMaxDepth,itemCopy);
      toBeCopied.add(itemCopyEntry);
      child=itemCopy.getGlobalId();
    }
  }
  return child;
}","private Object handleChild(Object child,int maxDepth) throws Exception {
  if (child instanceof OTID && (maxDepth == -1 || maxDepth > 0)) {
    CopyEntry itemCopyEntry=getCopyEntry((OTID)child);
    if (itemCopyEntry == null) {
      OTDataObject itemObj=otDb.getOTDataObject(root,(OTID)child);
      OTDataObject itemCopy=otDb.createDataObject();
      int copyMaxDepth=-1;
      if (maxDepth != -1) {
        copyMaxDepth=maxDepth - 1;
      }
      itemCopyEntry=new CopyEntry(itemObj,copyMaxDepth,itemCopy);
      toBeCopied.add(itemCopyEntry);
    }
    child=itemCopyEntry.copy.getGlobalId();
  }
  return child;
}"
21650,"public Copier(OTDatabase otDb){
  this.otDb=otDb;
  this.toBeCopied=new Vector();
}","public Copier(OTDatabase otDb,OTDataList orphanDataList){
  this.otDb=otDb;
  this.toBeCopied=new Vector();
  this.orphanList=orphanDataList;
}"
21651,"public static void copyInto(OTDataObject source,OTDataObject dest,int maxDepth) throws Exception {
  Copier copier=new Copier(dest.getDatabase());
  copier.internalCopyInto(source,dest,maxDepth);
}","public static void copyInto(OTDataObject source,OTDataObject dest,OTDataList orphanDataList,int maxDepth) throws Exception {
  Copier copier=new Copier(dest.getDatabase(),orphanDataList);
  copier.internalCopyInto(source,dest,maxDepth);
}"
21652,"public void internalCopyInto(OTDataObject source,OTDataObject dest,int maxDepth) throws Exception {
  toBeCopied.add(new CopyEntry(source,maxDepth,dest));
  OTDatabase otDb=dest.getDatabase();
  int currentIndex=0;
  while (currentIndex < toBeCopied.size()) {
    CopyEntry entry=(CopyEntry)toBeCopied.get(currentIndex);
    OTDataObject original=entry.original;
    OTDataObject copy=entry.copy;
    if (copy == null) {
      copy=otDb.createDataObject();
    }
    String[] keys=original.getResourceKeys();
    for (int i=0; i < keys.length; i++) {
      Object resource=original.getResource(keys[i]);
      if (resource instanceof OTDataList) {
        OTDataList copyList=(OTDataList)copy.getResourceCollection(keys[i],OTDataList.class);
        OTDataList list=(OTDataList)resource;
        copyList.removeAll();
        for (int j=0; j < list.size(); j++) {
          Object listItem=list.get(j);
          listItem=handleChild(listItem,entry.maxDepth);
          copyList.add(listItem);
        }
      }
 else       if (resource instanceof OTDataMap) {
        OTDataMap copyMap=(OTDataMap)copy.getResourceCollection(keys[i],OTDataMap.class);
        OTDataMap map=(OTDataMap)resource;
        copyMap.removeAll();
        String[] mapKeys=map.getKeys();
        for (int j=0; j < mapKeys.length; j++) {
          Object item=map.get(mapKeys[j]);
          item=handleChild(item,entry.maxDepth);
          copyMap.put(mapKeys[j],item);
        }
      }
 else {
        resource=handleChild(resource,entry.maxDepth);
        copy.setResource(keys[i],resource);
      }
    }
    currentIndex++;
  }
}","public void internalCopyInto(OTDataObject source,OTDataObject dest,int maxDepth) throws Exception {
  toBeCopied.add(new CopyEntry(source,maxDepth,dest));
  OTDatabase otDb=dest.getDatabase();
  int currentIndex=0;
  while (currentIndex < toBeCopied.size()) {
    CopyEntry entry=(CopyEntry)toBeCopied.get(currentIndex);
    OTDataObject original=entry.original;
    OTDataObject copy=entry.copy;
    if (copy == null) {
      copy=otDb.createDataObject();
    }
    String[] keys=original.getResourceKeys();
    Vector secondPassKeys=new Vector();
    for (int i=0; i < keys.length; i++) {
      Object resource=original.getResource(keys[i]);
      if (resource instanceof OTDataList) {
        OTDataList copyList=(OTDataList)copy.getResourceCollection(keys[i],OTDataList.class);
        OTDataList list=(OTDataList)resource;
        copyList.removeAll();
        for (int j=0; j < list.size(); j++) {
          Object listItem=list.get(j);
          listItem=handleChild(listItem,entry.maxDepth);
          copyList.add(listItem);
        }
      }
 else       if (resource instanceof OTDataMap) {
        OTDataMap copyMap=(OTDataMap)copy.getResourceCollection(keys[i],OTDataMap.class);
        OTDataMap map=(OTDataMap)resource;
        copyMap.removeAll();
        String[] mapKeys=map.getKeys();
        for (int j=0; j < mapKeys.length; j++) {
          Object item=map.get(mapKeys[j]);
          item=handleChild(item,entry.maxDepth);
          copyMap.put(mapKeys[j],item);
        }
      }
 else       if (resource instanceof OTXMLString) {
        secondPassKeys.add(keys[i]);
      }
 else {
        resource=handleChild(resource,entry.maxDepth);
        copy.setResource(keys[i],resource);
      }
    }
    for (int i=0; i < secondPassKeys.size(); i++) {
      String key=(String)secondPassKeys.get(i);
      Object resource=original.getResource(key);
      System.out.println(""String_Node_Str"" + key);
      OTXMLString xmlString=(OTXMLString)resource;
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(xmlString.getContent());
      StringBuffer copiedStringBuf=new StringBuffer();
      while (matcher.find()) {
        String otidStr=matcher.group(1);
        OTID otid=OTIDFactory.createOTID(otidStr);
        CopyEntry copyEntry=getCopyEntry(otid);
        Object copiedId=null;
        if (copyEntry != null) {
          copiedId=copyEntry.copy.getGlobalId();
        }
 else {
          if (orphanList == null) {
            System.err.println(""String_Node_Str"" + ""String_Node_Str"");
            System.err.println(""String_Node_Str"" + otid);
            System.err.println(""String_Node_Str"" + original);
            System.err.println(""String_Node_Str"" + key);
            copiedId=otid;
          }
 else {
            copiedId=handleChild(otid,entry.maxDepth);
            orphanList.add(copiedId);
          }
        }
        matcher.appendReplacement(copiedStringBuf,""String_Node_Str"" + copiedId + ""String_Node_Str"");
      }
      matcher.appendTail(copiedStringBuf);
      OTXMLString copiedXmlString=new OTXMLString(copiedStringBuf.toString());
      copy.setResource(key,copiedXmlString);
    }
    currentIndex++;
  }
}"
21653,"public static void copyInto(OTDataObject source,OTDataObject dest,int maxDepth) throws Exception {
  Copier.copyInto(source,dest,maxDepth);
}","public static void copyInto(OTDataObject source,OTDataObject dest,OTDataList orphanDataList,int maxDepth) throws Exception {
  Copier.copyInto(source,dest,orphanDataList,maxDepth);
}"
21654,"public static OTDataObject copy(OTDataObject original,OTDatabase otDb,int maxDepth) throws Exception {
  OTDataObject copy=otDb.createDataObject();
  copyInto(original,copy,maxDepth);
  return copy;
}","public static OTDataObject copy(OTDataObject original,OTDatabase otDb,OTDataList orphanDataList,int maxDepth) throws Exception {
  OTDataObject copy=otDb.createDataObject();
  copyInto(original,copy,orphanDataList,maxDepth);
  return copy;
}"
21655,"/** 
 * This method is needed if you use an object map which uses object ids for its keys.  This is useful if you want to look up one object using another object.  You cannot simply do  OTObject valueObject = map.getObject(keyObject.getGlobalId().toString()); because when running in user mode the keyObject id will not be the same as what is in the map.  It is wrapped with a template/user object so  changes to it can be saved correctly.
 * @param map
 * @param keyObject
 * @return
 */
public static OTObject getObjectFromMapWithIdKeys(OTObjectMap map,OTObject keyObject){
  OTObjectService objectService=keyObject.getOTObjectService();
  Vector keys=map.getObjectKeys();
  for (int i=0; i < keys.size(); i++) {
    String currentKey=(String)keys.get(i);
    OTID currentKeyId=objectService.getOTID(currentKey);
    try {
      OTObject currentKeyObject=objectService.getOTObject(currentKeyId);
      if (currentKeyObject == keyObject) {
        return (OTViewEntry)map.getObject(currentKey);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}","/** 
 * This method is needed if you use an object map which uses object ids for its keys.  This is useful if you want to look up one object using another object.  You cannot simply do  OTObject valueObject = map.getObject(keyObject.getGlobalId().toString()); because when running in user mode the keyObject id will not be the same as what is in the map.  It is wrapped with a template/user object so  changes to it can be saved correctly.
 * @param map
 * @param keyObject
 * @return
 */
public static OTObject getObjectFromMapWithIdKeys(OTObjectMap map,OTObject keyObject){
  OTObjectService objectService=keyObject.getOTObjectService();
  Vector keys=map.getObjectKeys();
  for (int i=0; i < keys.size(); i++) {
    String currentKey=(String)keys.get(i);
    OTID currentKeyId=objectService.getOTID(currentKey);
    try {
      OTObject currentKeyObject=objectService.getOTObject(currentKeyId);
      if (currentKeyObject == keyObject) {
        return map.getObject(currentKey);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}"
21656,"public JComponent getComponent(OTObject otObject,boolean editable){
  OTResourceMap otMap=((OTMapTestObject)otObject).getResourceMap();
  if (otMap.size() == 0) {
    Set entries=map.entrySet();
    Iterator iter=entries.iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      map.put((String)entry.getKey(),entry.getValue());
    }
    return new JLabel(""String_Node_Str"");
  }
  if (otMap.size() != map.size()) {
    return new JLabel(""String_Node_Str"");
  }
  Set entries=map.entrySet();
  Iterator iter=entries.iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    Object value=otMap.get((String)entry.getKey());
    if (value instanceof byte[]) {
      if (!checkBytes(value,entry.getValue())) {
        return new JLabel(""String_Node_Str"");
      }
    }
 else     if (!value.equals(entry.getValue())) {
      return new JLabel(""String_Node_Str"");
    }
  }
  return new JLabel(""String_Node_Str"");
}","public JComponent getComponent(OTObject otObject,boolean editable){
  OTResourceMap otMap=((OTMapTestObject)otObject).getResourceMap();
  if (otMap.size() == 0) {
    Set entries=map.entrySet();
    Iterator iter=entries.iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      otMap.put((String)entry.getKey(),entry.getValue());
    }
    return new JLabel(""String_Node_Str"");
  }
  if (otMap.size() != map.size()) {
    return new JLabel(""String_Node_Str"");
  }
  Set entries=map.entrySet();
  Iterator iter=entries.iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    Object value=otMap.get((String)entry.getKey());
    if (value instanceof byte[]) {
      if (!checkBytes(value,entry.getValue())) {
        return new JLabel(""String_Node_Str"");
      }
    }
 else     if (!value.equals(entry.getValue())) {
      return new JLabel(""String_Node_Str"");
    }
  }
  return new JLabel(""String_Node_Str"");
}"
21657,"/** 
 * This method is used by object services that can't handle a requested object this happens in reports when a report object needs to access a user object. It might be possible to clean this up by explicitly giving the object service of the report access to the users objects. 
 * @param childID
 * @return
 * @throws Exception
 */
OTObject getOrphanOTObject(OTID childID) throws Exception {
  for (int i=0; i < objectServices.size(); i++) {
    OTObjectServiceImpl objService=(OTObjectServiceImpl)objectServices.get(i);
    if (objService.managesObject(childID)) {
      return objService.getOTObject(childID);
    }
  }
  System.err.println(""String_Node_Str"" + childID);
  return null;
}","/** 
 * This method is used by object services that can't handle a requested object this happens in reports when a report object needs to access a user object. It might be possible to clean this up by explicitly giving the object service of the report access to the users objects. 
 * @param childID
 * @return
 * @throws Exception
 */
OTObject getOrphanOTObject(OTID childID,OTObjectServiceImpl oldService) throws Exception {
  for (int i=0; i < objectServices.size(); i++) {
    OTObjectServiceImpl objService=(OTObjectServiceImpl)objectServices.get(i);
    if (objService.managesObject(childID) && objService != oldService) {
      return objService.getOTObject(childID);
    }
  }
  System.err.println(""String_Node_Str"" + childID);
  return null;
}"
21658,"public OTDocumentObjectView(Element elem,OTDocument doc,AbstractOTDocumentView docView){
  super(elem);
  compoundDoc=doc;
  viewContainerPanel=new OTViewContainerPanel(docView.getFrameManager());
  viewContainerPanel.setOTViewFactory(docView.getViewFactory());
  viewContainerPanel.setAutoRequestFocus(false);
  viewContainerPanel.setUseScrollPane(false);
  viewContainerPanel.setOpaque(false);
}","/** 
 * A new object view will be created each time the text of the  document is updated.  So this object needs to be careful about the listeners it adds to things.   One option would be to cache the panels used to display the objects in documentView, and that way new views don't need to be created each time the text is changed.
 * @param elem
 * @param doc
 * @param docView
 */
public OTDocumentObjectView(Element elem,OTDocument doc,AbstractOTDocumentView docView){
  super(elem);
  compoundDoc=doc;
  viewContainerPanel=docView.createtViewContainerPanel();
}"
21659,"public String updateFormatedView(){
  if (pfDocument == null)   return null;
  String markupLanguage=pfDocument.getMarkupLanguage();
  if (markupLanguage == null) {
    markupLanguage=System.getProperty(""String_Node_Str"",null);
  }
  String bodyText=pfDocument.getDocumentText();
  bodyText=substituteIncludables(bodyText);
  if (markupLanguage == null || markupLanguage.equals(OTDocument.MARKUP_PFHTML) || markupLanguage.equals(OTDocument.MARKUP_PLAIN)) {
    if (editorPane == null) {
      editorPane=new JEditorPane();
      OTHTMLFactory kitViewFactory=new OTHTMLFactory(pfDocument,this);
      OTDocumentEditorKit editorKit=new OTDocumentEditorKit(pfDocument,kitViewFactory);
      editorPane.setEditorKit(editorKit);
      editorPane.setEditable(false);
      editorPane.addHyperlinkListener(this);
    }
    bodyText=htmlizeText(bodyText);
    editorPane.setText(bodyText);
    previewComponent=editorPane;
    editorPane.setCaretPosition(0);
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  if (parsedTextArea == null) {
    parsedTextArea=new JTextArea();
  }
  parsedTextArea.setText(bodyText);
  return bodyText;
}","public String updateFormatedView(){
  if (pfDocument == null)   return null;
  String markupLanguage=pfDocument.getMarkupLanguage();
  if (markupLanguage == null) {
    markupLanguage=System.getProperty(""String_Node_Str"",null);
  }
  String bodyText=pfDocument.getDocumentText();
  bodyText=substituteIncludables(bodyText);
  if (markupLanguage == null || markupLanguage.equals(OTDocument.MARKUP_PFHTML) || markupLanguage.equals(OTDocument.MARKUP_PLAIN)) {
    if (editorPane == null) {
      editorPane=new JEditorPane();
      OTHTMLFactory kitViewFactory=new OTHTMLFactory(pfDocument,this);
      OTDocumentEditorKit editorKit=new OTDocumentEditorKit(pfDocument,kitViewFactory);
      editorPane.setEditorKit(editorKit);
      editorPane.setEditable(false);
      editorPane.addHyperlinkListener(this);
    }
    bodyText=htmlizeText(bodyText);
    removeAllSubViews();
    editorPane.setText(bodyText);
    previewComponent=editorPane;
    editorPane.setCaretPosition(0);
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  if (parsedTextArea == null) {
    parsedTextArea=new JTextArea();
  }
  parsedTextArea.setText(bodyText);
  return bodyText;
}"
21660,"public static String escapeElementText(String text){
  String newText=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  newText=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  newText=newText.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return newText;
}","public static String escapeElementText(String text){
  String newText=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  newText=newText.replaceAll(""String_Node_Str"",""String_Node_Str"");
  newText=newText.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return newText;
}"
21661,"public void createActions(){
  newUserDataAction=new AbstractAction(){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      createNewUser();
    }
  }
;
  newUserDataAction.putValue(Action.NAME,""String_Node_Str"");
  loadUserDataAction=new AbstractAction(){
    /** 
 * nothing to serialize here.  Just the parent class.
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      openUserData();
    }
  }
;
  loadUserDataAction.putValue(Action.NAME,""String_Node_Str"");
  exportToHtmlAction=new AbstractAction(){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      File fileToSave=getReportFile();
      OTMLToXHTMLConverter otxc=new OTMLToXHTMLConverter(otViewFactory,bodyPanel);
      otxc.setXHTMLParams(fileToSave,800,600);
      (new Thread(otxc)).start();
    }
  }
;
  exportToHtmlAction.putValue(Action.NAME,""String_Node_Str"");
  exportToHtmlAction.setEnabled(false);
  saveUserDataAction=new AbstractAction(){
    /** 
 * Nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      if (currentUserFile == null || !currentUserFile.exists()) {
        saveUserDataAsAction.actionPerformed(arg0);
        return;
      }
      if (currentUserFile.exists()) {
        try {
          Exporter.export(currentUserFile,userDataDB.getRoot(),userDataDB);
          userDataDB.setDirty(false);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  saveUserDataAction.putValue(Action.NAME,""String_Node_Str"");
  saveUserDataAsAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      CCFileDialog dialog=new CCFileDialog(frame,""String_Node_Str"",CCFileDialog.SAVE);
      CCFilenameFilter filenameFilter=new CCFilenameFilter(""String_Node_Str"");
      dialog.setFilenameFilter(filenameFilter);
      if (currentUserFile != null) {
        dialog.setDirectory(currentUserFile.getParentFile().getAbsolutePath());
        dialog.setFile(currentUserFile.getName());
      }
      dialog.show();
      String fileName=dialog.getFile();
      if (fileName == null) {
        return;
      }
      fileName=dialog.getDirectory() + fileName;
      currentUserFile=new File(fileName);
      if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
        currentUserFile=new File(currentUserFile.getAbsolutePath() + ""String_Node_Str"");
      }
      if (!currentUserFile.exists() || checkForReplace(currentUserFile)) {
        try {
          Exporter.export(currentUserFile,userDataDB.getRoot(),userDataDB);
          userDataDB.setDirty(false);
          setTitle(baseFrameTitle + ""String_Node_Str"" + currentUserFile.toString());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  saveUserDataAsAction.putValue(Action.NAME,""String_Node_Str"");
  loadAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      CCFileDialog dialog=new CCFileDialog(frame,""String_Node_Str"",CCFileDialog.LOAD);
      CCFilenameFilter filenameFilter=new CCFilenameFilter(""String_Node_Str"");
      dialog.setFilenameFilter(filenameFilter);
      if (currentAuthoredFile != null) {
        dialog.setDirectory(currentAuthoredFile.getParentFile().getAbsolutePath());
        dialog.setFile(currentAuthoredFile.getName());
      }
      dialog.show();
      String fileName=dialog.getFile();
      if (fileName == null) {
        return;
      }
      fileName=dialog.getDirectory() + fileName;
      System.out.println(""String_Node_Str"" + fileName);
      loadFile(new File(fileName));
      exportToHtmlAction.setEnabled(true);
    }
  }
;
  loadAction.putValue(Action.NAME,""String_Node_Str"");
  saveAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      if (currentAuthoredFile == null) {
        saveAsAction.actionPerformed(arg0);
        return;
      }
      if (!currentAuthoredFile.exists() || checkForReplace(currentAuthoredFile)) {
        try {
          Exporter.export(currentAuthoredFile,xmlDB.getRoot(),xmlDB);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  saveAction.putValue(Action.NAME,""String_Node_Str"");
  saveAsAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      CCFileDialog dialog=new CCFileDialog(frame,""String_Node_Str"",CCFileDialog.SAVE);
      CCFilenameFilter filenameFilter=new CCFilenameFilter(""String_Node_Str"");
      dialog.setFilenameFilter(filenameFilter);
      if (currentAuthoredFile != null) {
        dialog.setDirectory(currentAuthoredFile.getParentFile().getAbsolutePath());
        dialog.setFile(currentAuthoredFile.getName());
      }
      dialog.show();
      String fileName=dialog.getFile();
      if (fileName == null) {
        return;
      }
      fileName=dialog.getDirectory() + fileName;
      currentAuthoredFile=new File(fileName);
      if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
        currentAuthoredFile=new File(currentAuthoredFile.getAbsolutePath() + ""String_Node_Str"");
      }
      if (!currentAuthoredFile.exists() || checkForReplace(currentAuthoredFile)) {
        try {
          Exporter.export(currentAuthoredFile,xmlDB.getRoot(),xmlDB);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      frame.setTitle(fileName);
    }
  }
;
  saveAsAction.putValue(Action.NAME,""String_Node_Str"");
  exportImageAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Component currentComp=bodyPanel.getCurrentComponent();
      if (currentComp instanceof JScrollPane) {
        currentComp=((JScrollPane)currentComp).getViewport().getView();
      }
      Util.makeScreenShot(currentComp);
    }
  }
;
  exportImageAction.putValue(Action.NAME,""String_Node_Str"");
  exportHiResImageAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Component currentComp=bodyPanel.getCurrentComponent();
      if (currentComp instanceof JScrollPane) {
        currentComp=((JScrollPane)currentComp).getViewport().getView();
      }
      Util.makeScreenShot(currentComp,2,2);
    }
  }
;
  exportHiResImageAction.putValue(Action.NAME,""String_Node_Str"");
  debugAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Object source=e.getSource();
      if (((JCheckBoxMenuItem)source).isSelected()) {
        System.setProperty(DEBUG_PROP,""String_Node_Str"");
      }
 else {
        System.setProperty(DEBUG_PROP,""String_Node_Str"");
      }
      updateTreePane();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          updateMenuBar();
        }
      }
);
      exportToHtmlAction.setEnabled(true);
    }
  }
;
  debugAction.putValue(Action.NAME,""String_Node_Str"");
  showConsoleAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      if (consoleFrame != null) {
        consoleFrame.setVisible(true);
      }
    }
  }
;
  showConsoleAction.putValue(Action.NAME,""String_Node_Str"");
  exitAction=new ExitAction();
}","public void createActions(){
  newUserDataAction=new AbstractAction(){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      createNewUser();
    }
  }
;
  newUserDataAction.putValue(Action.NAME,""String_Node_Str"");
  loadUserDataAction=new AbstractAction(){
    /** 
 * nothing to serialize here.  Just the parent class.
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      openUserData();
    }
  }
;
  loadUserDataAction.putValue(Action.NAME,""String_Node_Str"");
  exportToHtmlAction=new AbstractAction(){
    /** 
 * nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      File fileToSave=getReportFile();
      OTMLToXHTMLConverter otxc=new OTMLToXHTMLConverter(otViewFactory,bodyPanel);
      otxc.setXHTMLParams(fileToSave,800,600);
      (new Thread(otxc)).start();
    }
  }
;
  exportToHtmlAction.putValue(Action.NAME,""String_Node_Str"");
  exportToHtmlAction.setEnabled(false);
  saveUserDataAction=new AbstractAction(){
    /** 
 * Nothing to serialize here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      if (currentUserFile == null || !currentUserFile.exists()) {
        saveUserDataAsAction.actionPerformed(arg0);
        return;
      }
      if (currentUserFile.exists()) {
        try {
          Exporter.export(currentUserFile,userDataDB.getRoot(),userDataDB);
          userDataDB.setDirty(false);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  saveUserDataAction.putValue(Action.NAME,""String_Node_Str"");
  saveUserDataAsAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      CCFileDialog dialog=new CCFileDialog(frame,""String_Node_Str"",CCFileDialog.SAVE);
      CCFilenameFilter filenameFilter=new CCFilenameFilter(""String_Node_Str"");
      dialog.setFilenameFilter(filenameFilter);
      if (currentUserFile != null) {
        dialog.setDirectory(currentUserFile.getParentFile().getAbsolutePath());
        dialog.setFile(currentUserFile.getName());
      }
      dialog.show();
      String fileName=dialog.getFile();
      if (fileName == null) {
        return;
      }
      fileName=dialog.getDirectory() + fileName;
      currentUserFile=new File(fileName);
      if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
        currentUserFile=new File(currentUserFile.getAbsolutePath() + ""String_Node_Str"");
      }
      if (!currentUserFile.exists() || checkForReplace(currentUserFile)) {
        try {
          Exporter.export(currentUserFile,userDataDB.getRoot(),userDataDB);
          userDataDB.setDirty(false);
          setTitle(baseFrameTitle + ""String_Node_Str"" + currentUserFile.toString());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  saveUserDataAsAction.putValue(Action.NAME,""String_Node_Str"");
  loadAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      MostRecentFileDialog mrfd=new MostRecentFileDialog(""String_Node_Str"");
      mrfd.setFilenameFilter(""String_Node_Str"");
      int retval=mrfd.showOpenDialog(frame);
      File file=null;
      if (retval == MostRecentFileDialog.APPROVE_OPTION) {
        file=mrfd.getSelectedFile();
      }
      if (file != null && file.exists()) {
        System.out.println(""String_Node_Str"" + file);
        loadFile(file);
        exportToHtmlAction.setEnabled(true);
      }
    }
  }
;
  loadAction.putValue(Action.NAME,""String_Node_Str"");
  reloadAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      try {
        reload();
      }
 catch (      Exception exp) {
        exp.printStackTrace();
      }
    }
  }
;
  reloadAction.putValue(Action.NAME,""String_Node_Str"");
  saveAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      if (currentAuthoredFile == null) {
        saveAsAction.actionPerformed(arg0);
        return;
      }
      if (!currentAuthoredFile.exists() || checkForReplace(currentAuthoredFile)) {
        try {
          Exporter.export(currentAuthoredFile,xmlDB.getRoot(),xmlDB);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  saveAction.putValue(Action.NAME,""String_Node_Str"");
  saveAsAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent arg0){
      Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
      CCFileDialog dialog=new CCFileDialog(frame,""String_Node_Str"",CCFileDialog.SAVE);
      CCFilenameFilter filenameFilter=new CCFilenameFilter(""String_Node_Str"");
      dialog.setFilenameFilter(filenameFilter);
      if (currentAuthoredFile != null) {
        dialog.setDirectory(currentAuthoredFile.getParentFile().getAbsolutePath());
        dialog.setFile(currentAuthoredFile.getName());
      }
      dialog.show();
      String fileName=dialog.getFile();
      if (fileName == null) {
        return;
      }
      fileName=dialog.getDirectory() + fileName;
      currentAuthoredFile=new File(fileName);
      if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
        currentAuthoredFile=new File(currentAuthoredFile.getAbsolutePath() + ""String_Node_Str"");
      }
      if (!currentAuthoredFile.exists() || checkForReplace(currentAuthoredFile)) {
        try {
          Exporter.export(currentAuthoredFile,xmlDB.getRoot(),xmlDB);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      frame.setTitle(fileName);
    }
  }
;
  saveAsAction.putValue(Action.NAME,""String_Node_Str"");
  exportImageAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Component currentComp=bodyPanel.getCurrentComponent();
      if (currentComp instanceof JScrollPane) {
        currentComp=((JScrollPane)currentComp).getViewport().getView();
      }
      Util.makeScreenShot(currentComp);
    }
  }
;
  exportImageAction.putValue(Action.NAME,""String_Node_Str"");
  exportHiResImageAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Component currentComp=bodyPanel.getCurrentComponent();
      if (currentComp instanceof JScrollPane) {
        currentComp=((JScrollPane)currentComp).getViewport().getView();
      }
      Util.makeScreenShot(currentComp,2,2);
    }
  }
;
  exportHiResImageAction.putValue(Action.NAME,""String_Node_Str"");
  debugAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      Object source=e.getSource();
      if (((JCheckBoxMenuItem)source).isSelected()) {
        System.setProperty(DEBUG_PROP,""String_Node_Str"");
      }
 else {
        System.setProperty(DEBUG_PROP,""String_Node_Str"");
      }
      try {
        reloadWindow();
      }
 catch (      Exception exp) {
        exp.printStackTrace();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          updateMenuBar();
        }
      }
);
      exportToHtmlAction.setEnabled(true);
    }
  }
;
  debugAction.putValue(Action.NAME,""String_Node_Str"");
  showConsoleAction=new AbstractAction(){
    /** 
 * nothing to serizile here
 */
    private static final long serialVersionUID=1L;
    public void actionPerformed(    ActionEvent e){
      if (consoleFrame != null) {
        consoleFrame.setVisible(true);
      }
    }
  }
;
  showConsoleAction.putValue(Action.NAME,""String_Node_Str"");
  exitAction=new ExitAction();
}"
21662,"/** 
 * @return Returns the menuBar.
 */
public JMenuBar updateMenuBar(){
  JMenu fileMenu=null;
  if (menuBar == null) {
    menuBar=new JMenuBar();
    fileMenu=new JMenu(""String_Node_Str"");
    menuBar.add(fileMenu);
  }
 else {
    fileMenu=menuBar.getMenu(0);
    fileMenu.removeAll();
  }
  if (userMode == SINGLE_USER_MODE) {
    fileMenu.setEnabled(!justStarted);
    fileMenu.add(newUserDataAction);
    fileMenu.add(loadUserDataAction);
    fileMenu.add(saveUserDataAction);
    fileMenu.add(saveUserDataAsAction);
  }
  if (Boolean.getBoolean(DEBUG_PROP)) {
    fileMenu.add(loadAction);
    fileMenu.add(saveAction);
    fileMenu.add(saveAsAction);
  }
  if (Boolean.getBoolean(""String_Node_Str"")) {
    fileMenu.add(exportImageAction);
    fileMenu.add(exportHiResImageAction);
  }
  fileMenu.add(exportToHtmlAction);
  fileMenu.add(showConsoleAction);
  JCheckBoxMenuItem debugItem=new JCheckBoxMenuItem(debugAction);
  debugItem.setSelected(Boolean.getBoolean(DEBUG_PROP));
  fileMenu.add(debugItem);
  fileMenu.add(exitAction);
  return menuBar;
}","/** 
 * @return Returns the menuBar.
 */
public JMenuBar updateMenuBar(){
  JMenu fileMenu=null;
  if (menuBar == null) {
    menuBar=new JMenuBar();
    fileMenu=new JMenu(""String_Node_Str"");
    menuBar.add(fileMenu);
  }
 else {
    fileMenu=menuBar.getMenu(0);
    fileMenu.removeAll();
  }
  if (userMode == SINGLE_USER_MODE) {
    fileMenu.setEnabled(!justStarted);
    fileMenu.add(newUserDataAction);
    fileMenu.add(loadUserDataAction);
    fileMenu.add(saveUserDataAction);
    fileMenu.add(saveUserDataAsAction);
  }
  if (Boolean.getBoolean(DEBUG_PROP)) {
    fileMenu.add(loadAction);
    fileMenu.add(reloadAction);
    fileMenu.add(saveAction);
    fileMenu.add(saveAsAction);
  }
  if (Boolean.getBoolean(""String_Node_Str"")) {
    fileMenu.add(exportImageAction);
    fileMenu.add(exportHiResImageAction);
  }
  fileMenu.add(exportToHtmlAction);
  fileMenu.add(showConsoleAction);
  JCheckBoxMenuItem debugItem=new JCheckBoxMenuItem(debugAction);
  debugItem.setSelected(Boolean.getBoolean(DEBUG_PROP));
  fileMenu.add(debugItem);
  fileMenu.add(exitAction);
  return menuBar;
}"
21663,"/** 
 * FIXME:  This method uses the state database to determine whether an object can be directly changed or it needs to be wrapped by  a template (user object) and just that object is changed.  This should not be dependent on the state database because in some cases there will not be a separate database just for the state  objects.  So in this case there should be another way to know if an object should be directly changed when it is access through this database.  The reference map should probably be used for  this.
 * @see org.concord.otrunk.datamodel.OTDatabase#getOTDataObject(org.concord.otrunk.datamodel.OTDataObject,org.concord.framework.otrunk.OTID)
 */
public OTDataObject getOTDataObject(OTDataObject dataParent,OTID childId) throws Exception {
  if (childId instanceof OTRelativeID) {
    OTID childRootId=((OTRelativeID)childId).getRootId();
    if (childRootId.equals(getDatabaseId()))     childId=((OTRelativeID)childId).getRelativeId();
  }
  OTUserDataObject userDataObject=(OTUserDataObject)userDataObjectMap.get(childId);
  if (userDataObject != null) {
    return userDataObject;
  }
  userDataObject=(OTUserDataObject)mappedIdCache.get(childId);
  if (userDataObject != null) {
    return userDataObject;
  }
  if (stateDb.contains(childId)) {
    userDataObject=new OTUserDataObject(null,this);
    OTDataObject childObject=stateDb.getOTDataObject(null,childId);
    userDataObject.setStateObject(childObject);
    return userDataObject;
  }
  OTDataObject templateObject=rootDb.getOTDataObject(null,childId);
  if (templateObject == null) {
    System.err.println(""String_Node_Str"" + childId);
    return null;
  }
  userDataObject=new OTUserDataObject(templateObject,this);
  mappedIdCache.put(childId,userDataObject);
  userDataObjectMap.put(userDataObject.getGlobalId(),userDataObject);
  return userDataObject;
}","/** 
 * FIXME:  This method uses the state database to determine whether an object can be directly changed or it needs to be wrapped by  a template (user object) and just that object is changed.  This should not be dependent on the state database because in some cases there will not be a separate database just for the state  objects.  So in this case there should be another way to know if an object should be directly changed when it is access through this database.  The reference map should probably be used for  this.
 * @see org.concord.otrunk.datamodel.OTDatabase#getOTDataObject(org.concord.otrunk.datamodel.OTDataObject,org.concord.framework.otrunk.OTID)
 */
public OTDataObject getOTDataObject(OTDataObject dataParent,OTID childId) throws Exception {
  if (childId instanceof OTRelativeID) {
    OTID childRootId=((OTRelativeID)childId).getRootId();
    if (childRootId.equals(getDatabaseId()))     childId=((OTRelativeID)childId).getRelativeId();
  }
  OTUserDataObject userDataObject=(OTUserDataObject)userDataObjectMap.get(childId);
  if (userDataObject != null) {
    return userDataObject;
  }
  userDataObject=(OTUserDataObject)mappedIdCache.get(childId);
  if (userDataObject != null) {
    return userDataObject;
  }
  if (stateDb.contains(childId)) {
    userDataObject=new OTUserDataObject(null,this);
    OTDataObject childObject=stateDb.getOTDataObject(null,childId);
    userDataObject.setStateObject(childObject);
    mappedIdCache.put(childId,userDataObject);
    return userDataObject;
  }
  OTDataObject templateObject=rootDb.getOTDataObject(null,childId);
  if (templateObject == null) {
    System.err.println(""String_Node_Str"" + childId);
    return null;
  }
  userDataObject=new OTUserDataObject(templateObject,this);
  mappedIdCache.put(childId,userDataObject);
  userDataObjectMap.put(userDataObject.getGlobalId(),userDataObject);
  return userDataObject;
}"
21664,"/** 
 * This is a temporary method.  It works for files that represent a single user.  This method finds that user and registers them.  It could be modified to register all the users referenced in the passed in database and in which case it should check if the user is already registered with another database.  
 * @param userDataDb
 * @throws Exception
 */
public void registerUserDataDatabase(OTDatabase userDataDb) throws Exception {
  OTStateRoot stateRoot=(OTStateRoot)getRootObject(userDataDb);
  OTObjectMap userMap=stateRoot.getUserMap();
  Vector keys=userMap.getObjectKeys();
  OTReferenceMap refMap=(OTReferenceMap)userMap.getObject((String)keys.get(0));
  OTUser currentUser=refMap.getUser();
  users.add(currentUser);
  OTTemplateDatabase db=new OTTemplateDatabase(rootDb,userDataDb,refMap);
  userTemplateDatabases.put(currentUser.getUserId(),db);
}","/** 
 * This is a temporary method.  It works for files that represent a single user.  This method finds that user and registers them.  It could be modified to register all the users referenced in the passed in database and in which case it should check if the user is already registered with another database.  
 * @param userDataDb
 * @throws Exception
 */
public void registerUserDataDatabase(OTDatabase userDataDb) throws Exception {
  if (!databases.contains(userDataDb)) {
    databases.add(userDataDb);
  }
  OTStateRoot stateRoot=(OTStateRoot)getRootObject(userDataDb);
  OTObjectMap userMap=stateRoot.getUserMap();
  Vector keys=userMap.getObjectKeys();
  OTReferenceMap refMap=(OTReferenceMap)userMap.getObject((String)keys.get(0));
  OTUser currentUser=refMap.getUser();
  users.add(currentUser);
  OTTemplateDatabase db=new OTTemplateDatabase(rootDb,userDataDb,refMap);
  databases.add(db);
  userTemplateDatabases.put(currentUser.getUserId(),db);
}"
21665,"public void run(){
  JComponent newComponent=null;
  if (currentObject != null) {
    currentView=otViewFactory.getObjectView(currentObject,OTViewContainerPanel.this);
    if (currentView == null) {
      newComponent=new JLabel(""String_Node_Str"" + currentObject);
    }
 else {
      newComponent=currentView.getComponent(true);
    }
  }
 else {
    newComponent=new JLabel(""String_Node_Str"");
  }
  removeAll();
  add(newComponent,BorderLayout.CENTER);
  revalidate();
  notifyListeners();
  newComponent.requestFocus();
}","public void run(){
  try {
    String seperator=System.getProperty(""String_Node_Str"");
    String id=otObject.getGlobalId().toString();
    id=id.replaceAll(""String_Node_Str"",""String_Node_Str"");
    id=id.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    if (!folder.isDirectory()) {
      text=null;
      return;
    }
    File newFile=new File(folder,id);
    BufferedImage bim=ComponentScreenshot.makeComponentImageAlpha(comp,scaleX,scaleY);
    ComponentScreenshot.saveImageAsFile(bim,newFile,""String_Node_Str"");
    text=folder + ""String_Node_Str"" + id;
    return;
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  text=null;
}"
21666,"public String saveImage(JComponent comp,float scaleX,float scaleY,File folder,OTObject otObject){
  try {
    String seperator=System.getProperty(""String_Node_Str"");
    String id=otObject.getGlobalId().toString();
    id=id.replaceAll(""String_Node_Str"",""String_Node_Str"");
    id=id.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    if (!folder.isDirectory())     return null;
    File newFile=new File(folder.getAbsoluteFile().toString() + seperator + id);
    BufferedImage bim=ComponentScreenshot.makeComponentImageAlpha(comp,scaleX,scaleY);
    ComponentScreenshot.saveImageAsFile(bim,newFile,""String_Node_Str"");
    String relativePath=folder + ""String_Node_Str"" + newFile.getName();
    return relativePath;
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  return null;
}","/** 
 * This code attempts to save an image of the component.   It does 3 things that are a bit odd but seem to make things work. 1. It calls addNotify on the component.  This tricks it into thinking it has a parent, so it can be laid out. 2. It calls validate on the component that makes it get laid out. 3. The image saving code is placed into a invoke and wait call. Both setSize and validate cause events to be queued so we use Invoke and wait so these events get processed before we save the image by calling paint on it.
 */
public String saveImage(JComponent comp,float scaleX,float scaleY,File folder,OTObject otObject){
  Dimension compSize=comp.getSize();
  if (compSize.height <= 0 || compSize.width <= 0) {
    throw new RuntimeException(""String_Node_Str"" + compSize.width + ""String_Node_Str""+ compSize.height+ ""String_Node_Str"");
  }
  comp.addNotify();
  comp.validate();
  ImageSaver saver=new ImageSaver(comp,folder,otObject,scaleX,scaleY);
  try {
    SwingUtilities.invokeAndWait(saver);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
  return saver.getText();
}"
21667,"public void setCurrentObject(OTObject pfObject,OTFrame otFrame){
  if (otFrame != null) {
    frameManager.setFrameObject(pfObject,otFrame);
    return;
  }
  if (currentView != null) {
    currentView.viewClosed();
  }
  currentObject=pfObject;
  JComponent newComponent=null;
  if (pfObject != null) {
    currentView=otViewFactory.getObjectView(pfObject,this);
    if (currentView == null) {
      newComponent=new JLabel(""String_Node_Str"" + pfObject);
    }
 else {
      newComponent=currentView.getComponent(true);
    }
  }
 else {
    newComponent=new JLabel(""String_Node_Str"");
  }
  removeAll();
  add(newComponent,BorderLayout.CENTER);
  revalidate();
  notifyListeners();
}","public void setCurrentObject(OTObject pfObject,OTFrame otFrame){
  if (otFrame != null) {
    frameManager.setFrameObject(pfObject,otFrame);
    return;
  }
  if (currentView != null) {
    currentView.viewClosed();
  }
  currentObject=pfObject;
  JComponent newComponent=null;
  if (pfObject != null) {
    currentView=otViewFactory.getObjectView(pfObject,this);
    if (currentView == null) {
      newComponent=new JLabel(""String_Node_Str"" + pfObject);
    }
 else {
      newComponent=currentView.getComponent(true);
    }
  }
 else {
    newComponent=new JLabel(""String_Node_Str"");
  }
  removeAll();
  add(newComponent,BorderLayout.CENTER);
  revalidate();
  notifyListeners();
  newComponent.requestFocus();
}"
21668,"public void init(String url){
  initMenuBar();
  setJMenuBar(menuBar);
  bodyPanel=new OTViewContainerPanel(this,null);
  bodyPanel.addViewContainerListener(this);
  if (showTree) {
    dataTreeModel=new SimpleTreeModel();
    folderTreeModel=new SimpleTreeModel();
    updateTreePane();
    getContentPane().add(splitPane);
  }
 else {
    getContentPane().add(bodyPanel);
  }
  setVisible(true);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
      if (screenSize.width < 1000 || screenSize.height < 700) {
        int state=getExtendedState();
        state|=Frame.MAXIMIZED_BOTH;
        setExtendedState(state);
      }
 else {
        setBounds(100,100,875,600);
      }
      bodyPanel.invalidate();
      bodyPanel.repaint();
    }
  }
);
  if (url != null) {
    try {
      loadURL(new URL(url));
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
}","public void init(String url){
  initMenuBar();
  setJMenuBar(menuBar);
  bodyPanel=new OTViewContainerPanel(this,null);
  bodyPanel.addViewContainerListener(this);
  if (showTree) {
    dataTreeModel=new SimpleTreeModel();
    folderTreeModel=new SimpleTreeModel();
    updateTreePane();
    getContentPane().add(splitPane);
  }
 else {
    getContentPane().add(bodyPanel);
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
      if (screenSize.width < 1000 || screenSize.height < 700) {
        setVisible(true);
        int state=getExtendedState();
        state|=Frame.MAXIMIZED_BOTH;
        setExtendedState(state);
      }
 else {
        setBounds(100,100,875,600);
        setVisible(true);
      }
    }
  }
);
  if (url != null) {
    try {
      loadURL(new URL(url));
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
}"
21669,"public void init(String url){
  initMenuBar();
  setJMenuBar(menuBar);
  bodyPanel=new OTViewContainerPanel(this,null);
  bodyPanel.addViewContainerListener(this);
  if (showTree) {
    dataTreeModel=new SimpleTreeModel();
    folderTreeModel=new SimpleTreeModel();
    updateTreePane();
    getContentPane().add(splitPane);
  }
 else {
    getContentPane().add(bodyPanel);
  }
  setVisible(true);
  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  if (screenSize.width < 1000 || screenSize.height < 700) {
    int state=getExtendedState();
    state|=Frame.MAXIMIZED_BOTH;
    setExtendedState(state);
  }
 else {
    setBounds(100,100,875,600);
  }
  if (url != null) {
    try {
      loadURL(new URL(url));
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
}","public void init(String url){
  initMenuBar();
  setJMenuBar(menuBar);
  bodyPanel=new OTViewContainerPanel(this,null);
  bodyPanel.addViewContainerListener(this);
  if (showTree) {
    dataTreeModel=new SimpleTreeModel();
    folderTreeModel=new SimpleTreeModel();
    updateTreePane();
    getContentPane().add(splitPane);
  }
 else {
    getContentPane().add(bodyPanel);
  }
  setVisible(true);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
      if (screenSize.width < 1000 || screenSize.height < 700) {
        int state=getExtendedState();
        state|=Frame.MAXIMIZED_BOTH;
        setExtendedState(state);
      }
 else {
        setBounds(100,100,875,600);
      }
      bodyPanel.invalidate();
      bodyPanel.repaint();
    }
  }
);
  if (url != null) {
    try {
      loadURL(new URL(url));
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
}"
21670,"public void init(String url){
  initMenuBar();
  setJMenuBar(menuBar);
  bodyPanel=new OTViewContainerPanel(this,null);
  if (showTree) {
    dataTreeModel=new SimpleTreeModel();
    folderTreeModel=new SimpleTreeModel();
    folderTreeArea=new JTree(folderTreeModel);
    folderTreeArea.setEditable(true);
    folderTreeArea.addTreeSelectionListener(this);
    JScrollPane folderTreeScrollPane=new JScrollPane(folderTreeArea);
    dataTreeArea=new JTree(dataTreeModel);
    dataTreeArea.setEditable(true);
    dataTreeArea.addTreeSelectionListener(this);
    JScrollPane dataTreeScrollPane=new JScrollPane(dataTreeArea);
    JTabbedPane tabbedPane=new JTabbedPane();
    tabbedPane.add(""String_Node_Str"",folderTreeScrollPane);
    tabbedPane.add(""String_Node_Str"",dataTreeScrollPane);
    splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,tabbedPane,bodyPanel);
    splitPane.setOneTouchExpandable(true);
    splitPane.setDividerLocation(200);
    Dimension minimumSize=new Dimension(100,50);
    folderTreeScrollPane.setMinimumSize(minimumSize);
    dataTreeScrollPane.setMinimumSize(minimumSize);
    tabbedPane.setMinimumSize(minimumSize);
    bodyPanel.setMinimumSize(minimumSize);
    getContentPane().add(splitPane);
  }
 else {
    getContentPane().add(bodyPanel);
  }
  setBounds(100,100,800,600);
  setVisible(true);
  if (url != null) {
    try {
      loadURL(new URL(url));
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
}","public void init(String url){
  initMenuBar();
  setJMenuBar(menuBar);
  bodyPanel=new OTViewContainerPanel(this,null);
  if (showTree) {
    dataTreeModel=new SimpleTreeModel();
    folderTreeModel=new SimpleTreeModel();
    folderTreeArea=new JTree(folderTreeModel);
    folderTreeArea.setEditable(true);
    folderTreeArea.addTreeSelectionListener(this);
    JScrollPane folderTreeScrollPane=new JScrollPane(folderTreeArea);
    dataTreeArea=new JTree(dataTreeModel);
    dataTreeArea.setEditable(true);
    dataTreeArea.addTreeSelectionListener(this);
    JScrollPane dataTreeScrollPane=new JScrollPane(dataTreeArea);
    JTabbedPane tabbedPane=new JTabbedPane();
    tabbedPane.add(""String_Node_Str"",folderTreeScrollPane);
    tabbedPane.add(""String_Node_Str"",dataTreeScrollPane);
    splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,tabbedPane,bodyPanel);
    splitPane.setOneTouchExpandable(true);
    splitPane.setDividerLocation(200);
    Dimension minimumSize=new Dimension(100,50);
    folderTreeScrollPane.setMinimumSize(minimumSize);
    dataTreeScrollPane.setMinimumSize(minimumSize);
    tabbedPane.setMinimumSize(minimumSize);
    bodyPanel.setMinimumSize(minimumSize);
    getContentPane().add(splitPane);
  }
 else {
    getContentPane().add(bodyPanel);
  }
  setBounds(100,100,875,600);
  setVisible(true);
  if (url != null) {
    try {
      loadURL(new URL(url));
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
}"
21671,"public OTViewer(boolean showTree){
  super(""String_Node_Str"");
  initialize();
  this.showTree=showTree;
}","public OTViewer(boolean showTree){
  super(""String_Node_Str"");
  this.showTree=showTree;
}"
21672,"/** 
 * @return Returns the menuBar.
 */
public JMenuBar initMenuBar(){
  if (menuBar == null) {
    menuBar=new JMenuBar();
    JMenu menu=new JMenu(""String_Node_Str"");
    AbstractAction loadAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
        FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.LOAD);
        if (currentFile != null) {
          dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
          dialog.setFile(currentFile.getName());
        }
        dialog.show();
        String fileName=dialog.getFile();
        if (fileName == null) {
          return;
        }
        fileName=dialog.getDirectory() + fileName;
        System.out.println(""String_Node_Str"" + fileName);
        loadFile(new File(fileName));
      }
    }
;
    loadAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(loadAction);
    AbstractAction saveAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        if (currentFile == null) {
          saveAsAction.actionPerformed(arg0);
          return;
        }
        if (!currentFile.exists() || checkForReplace(currentFile)) {
          try {
            Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
;
    saveAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(saveAction);
    saveAsAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
        FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.SAVE);
        if (currentFile != null) {
          dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
          dialog.setFile(currentFile.getName());
        }
        dialog.show();
        String fileName=dialog.getFile();
        if (fileName == null) {
          return;
        }
        fileName=dialog.getDirectory() + fileName;
        currentFile=new File(fileName);
        if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
          currentFile=new File(currentFile.getAbsolutePath() + ""String_Node_Str"");
        }
        if (!currentFile.exists() || checkForReplace(currentFile)) {
          try {
            Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        frame.setTitle(fileName);
      }
    }
;
    saveAsAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(saveAsAction);
    JMenuItem menuItem;
    exitAction=new ExitAction();
    menu.add(exitAction);
  }
  return menuBar;
}","/** 
 * @return Returns the menuBar.
 */
public JMenuBar initMenuBar(){
  if (menuBar == null) {
    menuBar=new JMenuBar();
    JMenu menu=new JMenu(""String_Node_Str"");
    AbstractAction loadAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
        FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.LOAD);
        if (currentFile != null) {
          dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
          dialog.setFile(currentFile.getName());
        }
        dialog.show();
        String fileName=dialog.getFile();
        if (fileName == null) {
          return;
        }
        fileName=dialog.getDirectory() + fileName;
        System.out.println(""String_Node_Str"" + fileName);
        loadFile(new File(fileName));
      }
    }
;
    loadAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(loadAction);
    AbstractAction saveAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        if (currentFile == null) {
          saveAsAction.actionPerformed(arg0);
          return;
        }
        if (!currentFile.exists() || checkForReplace(currentFile)) {
          try {
            Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
;
    saveAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(saveAction);
    saveAsAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
        FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.SAVE);
        if (currentFile != null) {
          dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
          dialog.setFile(currentFile.getName());
        }
        dialog.show();
        String fileName=dialog.getFile();
        if (fileName == null) {
          return;
        }
        fileName=dialog.getDirectory() + fileName;
        currentFile=new File(fileName);
        if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
          currentFile=new File(currentFile.getAbsolutePath() + ""String_Node_Str"");
        }
        if (!currentFile.exists() || checkForReplace(currentFile)) {
          try {
            Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        frame.setTitle(fileName);
      }
    }
;
    saveAsAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(saveAsAction);
    JMenuItem menuItem;
    exitAction=new ExitAction();
    menu.add(exitAction);
    menuBar.add(menu);
  }
  return menuBar;
}"
21673,"public static EthernetAddress getHWAddress(){
  if (noEthernetInterfaces) {
    return null;
  }
  if (hwAddress != null) {
    return hwAddress;
  }
  hwAddress=NativeInterfaces.getPrimaryInterface();
  if (hwAddress == null) {
    System.err.println(""String_Node_Str"");
    EthernetAddress[] addressArray=NativeInterfaces.getAllInterfaces();
    for (int i=0; i < addressArray.length; i++) {
      if (addressArray[i] != null) {
        hwAddress=addressArray[i];
      }
    }
    if (hwAddress == null) {
      System.err.println(""String_Node_Str"");
    }
  }
  if (hwAddress == null) {
    noEthernetInterfaces=true;
  }
  return hwAddress;
}","public static EthernetAddress getHWAddress(){
  if (noEthernetInterfaces) {
    return null;
  }
  if (hwAddress != null) {
    return hwAddress;
  }
  try {
    hwAddress=NativeInterfaces.getPrimaryInterface();
  }
 catch (  Throwable t) {
    System.err.println(""String_Node_Str"" + t.getMessage());
    noEthernetInterfaces=true;
    return null;
  }
  if (hwAddress == null) {
    System.err.println(""String_Node_Str"");
    EthernetAddress[] addressArray=NativeInterfaces.getAllInterfaces();
    for (int i=0; i < addressArray.length; i++) {
      if (addressArray[i] != null) {
        hwAddress=addressArray[i];
      }
    }
    if (hwAddress == null) {
      System.err.println(""String_Node_Str"");
    }
  }
  if (hwAddress == null) {
    noEthernetInterfaces=true;
  }
  return hwAddress;
}"
21674,"/** 
 * This element comes with extra information.  The name of  the element identifies it as a resource in the parentType The resource in the parent type has type information.  So if the element is ""&lt;myText>hi this is my text&lt;/myText>"" and myText is defined as a ""string"" in the parentType then this element will be turned into a string.
 * @param parentType
 * @param child
 * @return
 */
public Object handleChildResource(String childName,Object childObj) throws HandleElementException {
  Properties elementProps;
  ResourceDefinition resourceDef=getResourceDefinition(childName);
  if (resourceDef == null) {
    System.err.println(""String_Node_Str"" + childName + ""String_Node_Str""+ getObjectName());
    return null;
  }
  elementProps=getResourceProperties(resourceDef);
  String resPrimitiveType=resourceDef.getType();
  String resourceType=resPrimitiveType;
  if (resPrimitiveType.equals(""String_Node_Str"")) {
    if (!(childObj instanceof Element)) {
      System.err.println(""String_Node_Str"");
      return null;
    }
    Element child=(Element)childObj;
    String childRefId=child.getAttributeValue(""String_Node_Str"");
    if (childRefId == null) {
      List children=child.getChildren();
      if (children.size() != 1) {
        System.err.println(""String_Node_Str"" + TypeService.elementPath(child));
        return null;
      }
      childObj=children.get(0);
      resourceType=((Element)childObj).getName();
    }
  }
  ResourceTypeHandler resHandler=typeService.getElementHandler(resourceType);
  if (resHandler == null) {
    System.err.println(""String_Node_Str"" + resourceType);
    return null;
  }
  if (childObj instanceof String) {
    if (resHandler instanceof PrimitiveResourceTypeHandler) {
      return ((PrimitiveResourceTypeHandler)resHandler).handleElement((String)childObj,elementProps);
    }
 else {
      throw new HandleElementException(""String_Node_Str"");
    }
  }
 else {
    return resHandler.handleElement((Element)childObj,elementProps);
  }
}","/** 
 * This element comes with extra information.  The name of  the element identifies it as a resource in the parentType The resource in the parent type has type information.  So if the element is ""&lt;myText>hi this is my text&lt;/myText>"" and myText is defined as a ""string"" in the parentType then this element will be turned into a string.
 * @param parentType
 * @param child
 * @return
 */
public Object handleChildResource(String childName,Object childObj) throws HandleElementException {
  Properties elementProps;
  ResourceDefinition resourceDef=getResourceDefinition(childName);
  if (resourceDef == null) {
    System.err.println(""String_Node_Str"" + childName + ""String_Node_Str""+ getObjectName());
    return null;
  }
  elementProps=getResourceProperties(resourceDef);
  String resPrimitiveType=resourceDef.getType();
  String resourceType=resPrimitiveType;
  if (resPrimitiveType.equals(""String_Node_Str"")) {
    if (!(childObj instanceof Element)) {
      System.err.println(""String_Node_Str"");
      return null;
    }
    Element child=(Element)childObj;
    String childRefId=child.getAttributeValue(""String_Node_Str"");
    if (childRefId == null) {
      List children=child.getChildren();
      if (children.size() != 1) {
        return null;
      }
      childObj=children.get(0);
      resourceType=((Element)childObj).getName();
    }
  }
  ResourceTypeHandler resHandler=typeService.getElementHandler(resourceType);
  if (resHandler == null) {
    System.err.println(""String_Node_Str"" + resourceType);
    return null;
  }
  if (childObj instanceof String) {
    if (resHandler instanceof PrimitiveResourceTypeHandler) {
      return ((PrimitiveResourceTypeHandler)resHandler).handleElement((String)childObj,elementProps);
    }
 else {
      throw new HandleElementException(""String_Node_Str"");
    }
  }
 else {
    return resHandler.handleElement((Element)childObj,elementProps);
  }
}"
21675,"/** 
 * There is no information about the element.  So in this case the  element is treated literally.  The name of the element is used to figure out its type. 
 * @param child
 * @return
 */
public Object handleLiteralElement(Element child){
  String childName=child.getName();
  Properties elementProps;
  ResourceTypeHandler handler=getElementHandler(childName);
  if (handler == null) {
    throw new RuntimeException(""String_Node_Str"" + childName);
  }
  String childTypeName=handler.getPrimitiveName();
  if (childTypeName == null) {
    System.err.println(""String_Node_Str"" + childTypeName);
    return null;
  }
  return handler.handleElement(child,null);
}","/** 
 * There is no information about the element.  So in this case the  element is treated literally.  The name of the element is used to figure out its type. 
 * @param child
 * @return
 */
public Object handleLiteralElement(Element child){
  String childName=child.getName();
  Properties elementProps;
  ResourceTypeHandler handler=getElementHandler(childName);
  if (handler == null) {
    throw new RuntimeException(""String_Node_Str"" + elementPath(child));
  }
  String childTypeName=handler.getPrimitiveName();
  if (childTypeName == null) {
    System.err.println(""String_Node_Str"" + childTypeName);
    return null;
  }
  return handler.handleElement(child,null);
}"
21676,"public void init(String url){
  initMenuBar();
  setJMenuBar(menuBar);
  bodyPanel=new OTViewContainerPanel(this,null);
  if (showTree) {
    dataTreeModel=new SimpleTreeModel();
    folderTreeModel=new SimpleTreeModel();
    folderTreeArea=new JTree(folderTreeModel);
    folderTreeArea.setEditable(true);
    folderTreeArea.addTreeSelectionListener(this);
    JScrollPane folderTreeScrollPane=new JScrollPane(folderTreeArea);
    dataTreeArea=new JTree(dataTreeModel);
    dataTreeArea.setEditable(true);
    dataTreeArea.addTreeSelectionListener(this);
    JScrollPane dataTreeScrollPane=new JScrollPane(dataTreeArea);
    JTabbedPane tabbedPane=new JTabbedPane();
    tabbedPane.add(""String_Node_Str"",folderTreeScrollPane);
    tabbedPane.add(""String_Node_Str"",dataTreeScrollPane);
    splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,tabbedPane,bodyPanel);
    splitPane.setOneTouchExpandable(true);
    splitPane.setDividerLocation(200);
    Dimension minimumSize=new Dimension(100,50);
    folderTreeScrollPane.setMinimumSize(minimumSize);
    dataTreeScrollPane.setMinimumSize(minimumSize);
    tabbedPane.setMinimumSize(minimumSize);
    bodyPanel.setMinimumSize(minimumSize);
    getContentPane().add(splitPane);
  }
 else {
    getContentPane().add(bodyPanel);
  }
  setBounds(100,100,875,600);
  setVisible(true);
  if (url != null) {
    try {
      loadURL(new URL(url));
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
}","public void init(String url){
  initMenuBar();
  setJMenuBar(menuBar);
  bodyPanel=new OTViewContainerPanel(this,null);
  if (showTree) {
    dataTreeModel=new SimpleTreeModel();
    folderTreeModel=new SimpleTreeModel();
    updateTreePane();
    getContentPane().add(splitPane);
  }
 else {
    getContentPane().add(bodyPanel);
  }
  setBounds(100,100,875,600);
  setVisible(true);
  if (url != null) {
    try {
      loadURL(new URL(url));
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
}"
21677,"public void actionPerformed(ActionEvent arg0){
  Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
  FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.SAVE);
  if (currentFile != null) {
    dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
    dialog.setFile(currentFile.getName());
  }
  dialog.show();
  String fileName=dialog.getFile();
  if (fileName == null) {
    return;
  }
  fileName=dialog.getDirectory() + fileName;
  currentFile=new File(fileName);
  if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
    currentFile=new File(currentFile.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!currentFile.exists() || checkForReplace(currentFile)) {
    try {
      Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  frame.setTitle(fileName);
}","public void actionPerformed(ActionEvent e){
  Object source=e.getSource();
  if (((JCheckBoxMenuItem)source).isSelected()) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  updateTreePane();
}"
21678,"/** 
 * @return Returns the menuBar.
 */
public JMenuBar initMenuBar(){
  if (menuBar == null) {
    menuBar=new JMenuBar();
    JMenu menu=new JMenu(""String_Node_Str"");
    AbstractAction loadAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
        FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.LOAD);
        if (currentFile != null) {
          dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
          dialog.setFile(currentFile.getName());
        }
        dialog.show();
        String fileName=dialog.getFile();
        if (fileName == null) {
          return;
        }
        fileName=dialog.getDirectory() + fileName;
        System.out.println(""String_Node_Str"" + fileName);
        loadFile(new File(fileName));
      }
    }
;
    loadAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(loadAction);
    AbstractAction saveAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        if (currentFile == null) {
          saveAsAction.actionPerformed(arg0);
          return;
        }
        if (!currentFile.exists() || checkForReplace(currentFile)) {
          try {
            Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
;
    saveAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(saveAction);
    saveAsAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
        FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.SAVE);
        if (currentFile != null) {
          dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
          dialog.setFile(currentFile.getName());
        }
        dialog.show();
        String fileName=dialog.getFile();
        if (fileName == null) {
          return;
        }
        fileName=dialog.getDirectory() + fileName;
        currentFile=new File(fileName);
        if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
          currentFile=new File(currentFile.getAbsolutePath() + ""String_Node_Str"");
        }
        if (!currentFile.exists() || checkForReplace(currentFile)) {
          try {
            Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        frame.setTitle(fileName);
      }
    }
;
    saveAsAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(saveAsAction);
    JMenuItem menuItem;
    exitAction=new ExitAction();
    menu.add(exitAction);
    menuBar.add(menu);
  }
  return menuBar;
}","/** 
 * @return Returns the menuBar.
 */
public JMenuBar initMenuBar(){
  if (menuBar == null) {
    menuBar=new JMenuBar();
    JMenu menu=new JMenu(""String_Node_Str"");
    AbstractAction loadAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
        FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.LOAD);
        if (currentFile != null) {
          dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
          dialog.setFile(currentFile.getName());
        }
        dialog.show();
        String fileName=dialog.getFile();
        if (fileName == null) {
          return;
        }
        fileName=dialog.getDirectory() + fileName;
        System.out.println(""String_Node_Str"" + fileName);
        loadFile(new File(fileName));
      }
    }
;
    loadAction.putValue(Action.NAME,""String_Node_Str"");
    menu.add(loadAction);
    AbstractAction saveAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        if (currentFile == null) {
          saveAsAction.actionPerformed(arg0);
          return;
        }
        if (!currentFile.exists() || checkForReplace(currentFile)) {
          try {
            Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
;
    saveAction.putValue(Action.NAME,""String_Node_Str"");
    saveAction.setEnabled(false);
    menu.add(saveAction);
    saveAsAction=new AbstractAction(){
      public void actionPerformed(      ActionEvent arg0){
        Frame frame=(Frame)SwingUtilities.getRoot(OTViewer.this);
        FileDialog dialog=new FileDialog(frame,""String_Node_Str"",FileDialog.SAVE);
        if (currentFile != null) {
          dialog.setDirectory(currentFile.getParentFile().getAbsolutePath());
          dialog.setFile(currentFile.getName());
        }
        dialog.show();
        String fileName=dialog.getFile();
        if (fileName == null) {
          return;
        }
        fileName=dialog.getDirectory() + fileName;
        currentFile=new File(fileName);
        if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
          currentFile=new File(currentFile.getAbsolutePath() + ""String_Node_Str"");
        }
        if (!currentFile.exists() || checkForReplace(currentFile)) {
          try {
            Exporter.export(currentFile,xmlDB.getRoot(),xmlDB);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        frame.setTitle(fileName);
      }
    }
;
    saveAsAction.putValue(Action.NAME,""String_Node_Str"");
    saveAsAction.setEnabled(false);
    menu.add(saveAsAction);
    JCheckBoxMenuItem debugItem=new JCheckBoxMenuItem(""String_Node_Str"");
    debugItem.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Object source=e.getSource();
        if (((JCheckBoxMenuItem)source).isSelected()) {
          System.setProperty(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          System.setProperty(""String_Node_Str"",""String_Node_Str"");
        }
        updateTreePane();
      }
    }
);
    menu.add(debugItem);
    JMenuItem menuItem;
    exitAction=new ExitAction();
    menu.add(exitAction);
    menuBar.add(menu);
  }
  return menuBar;
}"
21679,"public OTXMLElement getParentElement(){
  Element parent=element.getParentElement();
  return new JDOMElement(parent);
}","public OTXMLElement getParentElement(){
  Element parent=element.getParentElement();
  if (parent == null)   return null;
  return new JDOMElement(parent);
}"
21680,"/** 
 * @param publishDate - string publish date formatted ""yyyy-MM-dd HH:mm:ss"" 
 */
public void setPublishDate(String publishDate){
  try {
    SimpleDateFormat simple=new SimpleDateFormat(""String_Node_Str"");
    this.publishDate=simple.parse(publishDate);
  }
 catch (  ParseException e) {
  }
}","/** 
 * @param publishDate - string publish date formatted ""yyyy-MM-dd HH:mm:ss"" 
 */
public void setPublishDate(String publishDate){
  try {
    this.publishDate=sf2.parse(publishDate);
  }
 catch (  ParseException e) {
  }
}"
21681,"/** 
 * If you have a valid accessToken, use this constructor
 * @param apiKey - your API-KEY
 * @param secretKey - your SECRET-KEY
 * @param accessToken - a valid accessToken
 * @param endpoint - the endpoint URL for the client to connect to
 * @param ssl - should use SSL?
 * @throws HttpException
 * @throws IOException
 * @throws JSONException
 * @throws SaploClientException 
 */
public SaploClient(String apiKey,String secretKey,String accessToken,String endpoint,boolean ssl) throws JSONException, SaploClientException {
  if (endpoint == null || !endpoint.startsWith(""String_Node_Str""))   throw new ClientError(""String_Node_Str"");
  if (ssl && !endpoint.startsWith(""String_Node_Str""))   throw new ClientError(""String_Node_Str"");
  if (!ssl && !endpoint.startsWith(""String_Node_Str""))   throw new ClientError(""String_Node_Str"");
  this.ssl=ssl;
  this.apiKey=apiKey;
  this.secretKey=secretKey;
  this.endpoint=endpoint;
  this.setupServerEnvironment();
  createSession(accessToken);
}","/** 
 * If you have a valid accessToken, use this constructor
 * @param apiKey - your API-KEY
 * @param secretKey - your SECRET-KEY
 * @param accessToken - a valid accessToken
 * @param endpoint - the endpoint URL for the client to connect to
 * @param ssl - should use SSL?
 * @throws HttpException
 * @throws IOException
 * @throws JSONException
 * @throws SaploClientException 
 */
public SaploClient(String apiKey,String secretKey,String accessToken,String endpoint,boolean ssl) throws JSONException, SaploClientException {
  if (endpoint == null || !endpoint.startsWith(""String_Node_Str""))   throw new ClientError(""String_Node_Str"");
  if (ssl && !endpoint.startsWith(""String_Node_Str""))   throw new ClientError(""String_Node_Str"");
  if (!ssl && !endpoint.startsWith(""String_Node_Str""))   throw new ClientError(""String_Node_Str"");
  this.ssl=ssl;
  this.apiKey=apiKey;
  this.secretKey=secretKey;
  this.endpoint=endpoint;
  this.setupServerEnvironment();
  createSession(accessToken);
  lock=new ReentrantLock();
  sleeping=lock.newCondition();
}"
21682,"protected boolean reCreateSession() throws SaploClientException {
synchronized (this) {
    long now=System.currentTimeMillis();
    if ((now - lastReconnectAttempt) < reconnectTimeout * maxReconnectCount || reconnectCount > maxReconnectCount)     return false;
    if ((now - lastSuccessfulReconnect) < 10000 && reconnectCount == 0)     return true;
    logger.info(""String_Node_Str"");
    while (reconnectCount <= maxReconnectCount) {
      try {
        long toSleep=(reconnectCount + 1) * reconnectTimeout;
        this.wait(toSleep);
        authenticateSession();
        reconnectCount=0;
        lastReconnectAttempt=System.currentTimeMillis();
        lastSuccessfulReconnect=System.currentTimeMillis();
        logger.info(""String_Node_Str"");
        return true;
      }
 catch (      SaploClientException e) {
        reconnectCount++;
      }
catch (      InterruptedException e) {
        e.printStackTrace();
        return false;
      }
    }
    lastReconnectAttempt=System.currentTimeMillis();
    logger.warn(""String_Node_Str"" + reconnectCount + ""String_Node_Str"");
    throw new SaploClientException(ResponseCodes.MSG_ERR_NOSESSION,ResponseCodes.CODE_ERR_NOSESSION);
  }
}","protected synchronized boolean reCreateSession() throws SaploClientException {
  lock.lock();
  try {
    long now=System.currentTimeMillis();
    if ((now - lastReconnectAttempt) < reconnectTimeout * maxReconnectCount || reconnectCount > maxReconnectCount)     return false;
    if ((now - lastSuccessfulReconnect) < 10000 && reconnectCount == 0)     return true;
    logger.info(""String_Node_Str"");
    while (reconnectCount <= maxReconnectCount) {
      try {
        long toSleep=(reconnectCount + 1) * reconnectTimeout;
        sleeping.await(toSleep,TimeUnit.MILLISECONDS);
        authenticateSession();
        reconnectCount=0;
        lastReconnectAttempt=0;
        lastSuccessfulReconnect=System.currentTimeMillis();
        logger.info(""String_Node_Str"");
        return true;
      }
 catch (      SaploClientException e) {
        reconnectCount++;
      }
catch (      InterruptedException e) {
        e.printStackTrace();
        return false;
      }
    }
    lastReconnectAttempt=System.currentTimeMillis();
    logger.warn(""String_Node_Str"" + reconnectCount + ""String_Node_Str"");
    throw new SaploClientException(ResponseCodes.MSG_ERR_NOSESSION,ResponseCodes.CODE_ERR_NOSESSION);
  }
  finally {
    lock.unlock();
  }
}"
21683,"/** 
 * A convenient way of deleting SaploText by textId
 * @param textId
 * @return success?
 * @throws JSONException
 * @throws SaploClientException
 */
public boolean delete(int textId) throws JSONException, SaploClientException {
  SaploText text=new SaploText();
  text.setId(textId);
  return delete(text);
}","/** 
 * A convenient way of deleting SaploText by textId
 * @param textId
 * @return success?
 * @throws JSONException
 * @throws SaploClientException
 */
public boolean delete(int collectionId,int textId) throws JSONException, SaploClientException {
  SaploCollection collection=new SaploCollection();
  collection.setId(collectionId);
  SaploText text=new SaploText();
  text.setId(textId);
  text.setCollection(collection);
  return delete(text);
}"
21684,"public JSONRPCResponseObject sendAndReceive(JSONRPCRequestObject message) throws JSONException, SaploClientException {
  HttpPost httpost=new HttpPost(uri + ""String_Node_Str"" + params);
  ByteArrayEntity ent=new ByteArrayEntity(message.toString().getBytes());
  ent.setContentEncoding(HTTP.UTF_8);
  ent.setContentType(""String_Node_Str"");
  httpost.setEntity(ent);
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    if (proxified)     httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);
    HttpResponse response=httpClient.execute(httpost);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK)     throw new SaploClientException(ResponseCodes.MSG_API_DOWN_EXCEPTION,ResponseCodes.CODE_API_DOWN_EXCEPTION,statusCode);
    String got=""String_Node_Str"";
    if (entity != null) {
      byte[] bytes=EntityUtils.toByteArray(entity);
      got=new String(bytes,Charset.forName(""String_Node_Str""));
    }
    JSONTokener tokener=new JSONTokener(got);
    Object rawResponseMessage=tokener.nextValue();
    JSONObject responseMessage=(JSONObject)rawResponseMessage;
    if (responseMessage == null)     throw new ClientError(""String_Node_Str"" + rawResponseMessage);
    return new JSONRPCResponseObject(responseMessage);
  }
 catch (  ClientProtocolException e) {
    throw new ClientError(e);
  }
catch (  NoHttpResponseException nr) {
    throw new SaploClientException(ResponseCodes.MSG_API_DOWN_EXCEPTION,ResponseCodes.CODE_API_DOWN_EXCEPTION,777);
  }
catch (  IOException e) {
    throw new ClientError(e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","public JSONRPCResponseObject sendAndReceive(JSONRPCRequestObject message) throws JSONException, SaploClientException {
  HttpPost httpost=new HttpPost(uri + ""String_Node_Str"" + params);
  ByteArrayEntity ent=new ByteArrayEntity(message.toString().getBytes(Charset.forName(""String_Node_Str"")));
  ent.setContentEncoding(HTTP.UTF_8);
  ent.setContentType(""String_Node_Str"");
  httpost.setEntity(ent);
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    if (proxified)     httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);
    HttpResponse response=httpClient.execute(httpost);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_OK)     throw new SaploClientException(ResponseCodes.MSG_API_DOWN_EXCEPTION,ResponseCodes.CODE_API_DOWN_EXCEPTION,statusCode);
    String got=""String_Node_Str"";
    if (entity != null) {
      byte[] bytes=EntityUtils.toByteArray(entity);
      got=new String(bytes,Charset.forName(""String_Node_Str""));
    }
    JSONTokener tokener=new JSONTokener(got);
    Object rawResponseMessage=tokener.nextValue();
    JSONObject responseMessage=(JSONObject)rawResponseMessage;
    if (responseMessage == null)     throw new ClientError(""String_Node_Str"" + rawResponseMessage);
    return new JSONRPCResponseObject(responseMessage);
  }
 catch (  ClientProtocolException e) {
    throw new ClientError(e);
  }
catch (  NoHttpResponseException nr) {
    throw new SaploClientException(ResponseCodes.MSG_API_DOWN_EXCEPTION,ResponseCodes.CODE_API_DOWN_EXCEPTION,777);
  }
catch (  IOException e) {
    throw new ClientError(e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}"
21685,"public HeaderChapter(){
  presentationHeader=new PresentationHeader();
}","public HeaderChapter(){
  if (presentationHeader == null) {
    presentationHeader=new PresentationHeader();
  }
}"
21686,"public static void trackModuleRelativePageView(String page){
  trackPageView(GWT.getModuleName() + ""String_Node_Str"" + page);
}","public static void trackModuleRelativePageView(String page){
  trackPageViewAsync(GWT.getModuleName() + ""String_Node_Str"" + page);
}"
21687,"public void updateSlides(String chapterName,Chapter chapter){
  index=0;
  this.chapterName=chapterName;
  this.chapter=chapter;
  slidesPanel.clear();
  for (  Presentable presentable : chapter) {
    slidesPanel.add(presentable.asWidget());
  }
}","public void updateSlides(String chapterName,Chapter chapter){
  index=0;
  this.chapterName=chapterName;
  this.chapter=chapter;
  slidesPanel.clear();
  for (  Presentable presentable : chapter) {
    Widget slideWidget=presentable.asWidget();
    slideWidget.setStyleName(""String_Node_Str"");
    slidesPanel.add(slideWidget);
  }
}"
21688,"@Override protected void buildSlides(){
  addSlide(GWT.create(Titre.class));
  addSlide(GWT.create(AQuoi.class));
  addSlide(GWT.create(Fonctionnement.class));
  addSlide(GWT.create(Compilation.class));
  addPresentable(new TropSimple());
  addSlide(FormationGwt.PLAN);
}","@Override protected void buildSlides(){
  addSlide(GWT.create(Titre.class));
  addSlide(GWT.create(AQuoi.class));
  addSlide(GWT.create(Fonctionnement.class));
  addSlide(GWT.create(Compilation.class));
  addPresentable(new TropSimple(GWT.<UiBinder<Widget,CodeSlide>>create(TropSimpleBinder.class)));
  addSlide(FormationGwt.PLAN);
}"
21689,"public TropSimple(){
  initWidget(uiBinder.createAndBindUi(this));
  sourceCode.setText(codeSample.getInnerText());
}","public TropSimple(UiBinder<Widget,CodeSlide> uiBinder){
  super(uiBinder);
}"
21690,"private String computeBaseFilename(@NotNull final String filename){
  final int dotPosition=filename.indexOf('.');
  final String baseFilename;
  if (dotPosition >= 0) {
    baseFilename=filename.substring(0,dotPosition);
  }
 else {
    baseFilename=filename;
  }
  return baseFilename;
}","@NotNull private String computeBaseFilename(@NotNull final String filename){
  final int dotPosition=filename.indexOf('.');
  final String baseFilename;
  if (dotPosition >= 0) {
    baseFilename=filename.substring(0,dotPosition);
  }
 else {
    baseFilename=filename;
  }
  return baseFilename;
}"
21691,"private File[] getFilesWithSameBaseFilename(final String baseFilename){
  lock.lock();
  try {
    return dataFileDirectory.listFiles(new FilenameFilter(){
      private final String baseFilenameUppercase=baseFilename.toUpperCase();
      @Override public boolean accept(      final File file,      final String filename){
        return file != null && filename != null && filename.toUpperCase().startsWith(baseFilenameUppercase);
      }
    }
);
  }
  finally {
    lock.unlock();
  }
}","private File[] getFilesWithSameBaseFilename(final String baseFilename){
  lock.lock();
  try {
    return dataFileDirectory.listFiles(new FilenameFilter(){
      private final String baseFilenameUppercase=baseFilename.toUpperCase();
      @Override public boolean accept(      final File file,      final String filename){
        return file != null && baseFilenameUppercase.equals(computeBaseFilename(filename).toUpperCase());
      }
    }
);
  }
  finally {
    lock.unlock();
  }
}"
21692,"/** 
 * Changes the file extension on the given <code>file</code> from the <code>existingFilenameExtension</code> to the <code>newFilenameExtension</code>.  Returns the new   {@link File} upon success, <code>null</code> on failure.
 */
@Nullable private File changeFileExtension(@NotNull final File file,@NotNull final String existingFilenameExtension,@NotNull final String newFilenameExtension){
  lock.lock();
  try {
    final int extensionPosition=file.getName().indexOf(existingFilenameExtension);
    if (extensionPosition >= 0) {
      final String filenameWithoutOldExtension=file.getName().substring(0,extensionPosition);
      final File newFilename=new File(file.getParentFile(),filenameWithoutOldExtension + newFilenameExtension);
      if (file.renameTo(newFilename)) {
        if (LOG.isTraceEnabled()) {
          LOG.trace(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ newFilename.getName()+ ""String_Node_Str"");
        }
        return newFilename;
      }
 else {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ newFilename.getName()+ ""String_Node_Str"");
        }
      }
    }
  }
  finally {
    lock.unlock();
  }
  return null;
}","/** 
 * Changes the file extension on the given <code>file</code> from the <code>existingFilenameExtension</code> to the <code>newFilenameExtension</code>.  Returns the new   {@link File} upon success, <code>null</code> on failure.
 */
@Nullable private File changeFileExtension(@NotNull final File file,@NotNull final String existingFilenameExtension,@NotNull final String newFilenameExtension){
  lock.lock();
  try {
    final int extensionPosition=file.getName().toLowerCase().indexOf(existingFilenameExtension.toLowerCase());
    if (extensionPosition >= 0) {
      final String filenameWithoutOldExtension=file.getName().substring(0,extensionPosition);
      final File newFilename=new File(file.getParentFile(),filenameWithoutOldExtension + newFilenameExtension);
      if (file.renameTo(newFilename)) {
        if (LOG.isTraceEnabled()) {
          LOG.trace(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ newFilename.getName()+ ""String_Node_Str"");
        }
        return newFilename;
      }
 else {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ newFilename.getName()+ ""String_Node_Str"");
        }
      }
    }
  }
  finally {
    lock.unlock();
  }
  return null;
}"
21693,"/** 
 * Tries to create a <code>LoggingDeviceProxy</code> for the the serial port specified by the given <code>serialPortName</code>. Returns <code>null</code> if the connection could not be established.
 * @param serialPortName - the name of the serial port device which should be used to establish the connection
 * @throws IllegalArgumentException if the <code>serialPortName</code> is <code>null</code>
 */
@Nullable static LoggingDeviceProxy create(@Nullable final String serialPortName){
  if (serialPortName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final SerialIOConfiguration config=new SerialIOConfiguration(serialPortName,BaudRate.BAUD_460800,CharacterSize.EIGHT,Parity.NONE,StopBits.ONE,FlowControl.HARDWARE);
  try {
    final SerialDeviceCommandExecutionQueue commandQueue=SerialDeviceCommandExecutionQueue.create(APPLICATION_NAME,config,-1,null);
    if (commandQueue == null) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error(""String_Node_Str"" + serialPortName + ""String_Node_Str"");
      }
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + serialPortName + ""String_Node_Str"");
      }
      final boolean wasHandshakeSuccessful=commandQueue.executeAndReturnStatus(new HandshakeCommandStrategy());
      if (wasHandshakeSuccessful) {
        LOG.info(""String_Node_Str"");
        return new LoggingDeviceProxy(commandQueue,serialPortName);
      }
 else {
        LOG.error(""String_Node_Str"");
      }
      commandQueue.shutdown();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return null;
}","/** 
 * Tries to create a <code>LoggingDeviceProxy</code> for the the serial port specified by the given <code>serialPortName</code>. Returns <code>null</code> if the connection could not be established.
 * @param serialPortName - the name of the serial port device which should be used to establish the connection
 * @throws IllegalArgumentException if the <code>serialPortName</code> is <code>null</code>
 */
@Nullable static LoggingDeviceProxy create(@Nullable final String serialPortName){
  if (serialPortName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final SerialIOConfiguration config=new SerialIOConfiguration(serialPortName,BaudRate.BAUD_460800,CharacterSize.EIGHT,Parity.NONE,StopBits.ONE,FlowControl.HARDWARE);
  try {
    final SerialDeviceCommandExecutionQueue commandQueue=SerialDeviceCommandExecutionQueue.create(APPLICATION_NAME,config,-1,null);
    if (commandQueue == null) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error(""String_Node_Str"" + serialPortName + ""String_Node_Str"");
      }
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + serialPortName + ""String_Node_Str"");
      }
      final boolean wasHandshakeSuccessful=commandQueue.executeAndReturnStatus(new HandshakeCommandStrategy());
      if (wasHandshakeSuccessful) {
        LOG.info(""String_Node_Str"");
        try {
          return new LoggingDeviceProxy(commandQueue,serialPortName);
        }
 catch (        InitializationException e) {
          LOG.error(""String_Node_Str"",e);
          CONSOLE_LOG.error(""String_Node_Str"");
        }
catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
 else {
        LOG.error(""String_Node_Str"");
      }
      commandQueue.shutdown();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  CONSOLE_LOG.error(""String_Node_Str"");
  return null;
}"
21694,@Nullable protected abstract ReturnType executionWorkhorse();,"@Nullable protected abstract ReturnType executionWorkhorse(final int attemptNumber,final int maxNumberOfAttempts);"
21695,"/** 
 * Executes an action and returns the result, retrying if necessary up to three times.  Returns <code>null</code> only if it fails to get a non-<code>null</code> result.
 */
@SuppressWarnings({""String_Node_Str""}) @Nullable protected final ReturnType execute(){
  int retryCount=0;
  do {
    try {
      final ReturnType val=executionWorkhorse();
      if (val != null) {
        return val;
      }
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
    retryCount++;
    if (retryCount < MAX_RETRIES) {
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
 while (retryCount < MAX_RETRIES);
  return null;
}","/** 
 * Executes an action and returns the result, retrying if necessary up to three times.  Returns <code>null</code> only if it fails to get a non-<code>null</code> result.
 */
@SuppressWarnings({""String_Node_Str""}) @Nullable protected final ReturnType execute(){
  int retryCount=0;
  do {
    try {
      final ReturnType val=executionWorkhorse(retryCount + 1,MAX_RETRIES);
      if (val != null) {
        return val;
      }
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
    retryCount++;
    if (retryCount < MAX_RETRIES) {
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
 while (retryCount < MAX_RETRIES);
  return null;
}"
21696,"private LoggingDeviceProxy(final SerialDeviceCommandExecutionQueue commandQueue,final String serialPortName){
  this.commandQueue=commandQueue;
  this.serialPortName=serialPortName;
  final CommandExecutionFailureHandler commandExecutionFailureHandler=new CommandExecutionFailureHandler(){
    public void handleExecutionFailure(){
      pinger.forceFailure();
    }
  }
;
  dataFileReturnValueCommandExecutor=new SerialDeviceReturnValueCommandExecutor<DataFile>(commandQueue,commandExecutionFailureHandler);
  booleanReturnValueCommandExecutor=new SerialDeviceReturnValueCommandExecutor<Boolean>(commandQueue,commandExecutionFailureHandler);
  stringReturnValueCommandExecutor=new SerialDeviceReturnValueCommandExecutor<String>(commandQueue,commandExecutionFailureHandler);
  final SerialDeviceNoReturnValueCommandExecutor noReturnValueCommandExecutor=new SerialDeviceNoReturnValueCommandExecutor(commandQueue,commandExecutionFailureHandler);
  boolean wasSetTimeSuccessful;
  int numAttemptsToSetTime=0;
  do {
    wasSetTimeSuccessful=noReturnValueCommandExecutor.execute(setCurrentTimeCommandStrategy);
    numAttemptsToSetTime++;
    if (!wasSetTimeSuccessful) {
      final String message=""String_Node_Str"" + numAttemptsToSetTime + ""String_Node_Str"";
      LOG.error(message);
      CONSOLE_LOG.error(message);
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
 while (!wasSetTimeSuccessful);
  loggingDeviceConfig=new RetryingActionExecutor<LoggingDeviceConfig>(){
    @Override @Nullable protected LoggingDeviceConfig executionWorkhorse(){
      final String msg=""String_Node_Str"";
      CONSOLE_LOG.info(msg);
      if (LOG.isInfoEnabled()) {
        LOG.info(""String_Node_Str"" + msg);
      }
      final String username=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('U')));
      final String deviceNickname=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('N')));
      if (isNonNullAndNonEmpty(username) && isNonNullAndNonEmpty(deviceNickname)) {
        return new LoggingDeviceConfigImpl(username,deviceNickname);
      }
      LOG.error(""String_Node_Str"" + username + ""String_Node_Str""+ deviceNickname+ ""String_Node_Str"");
      return null;
    }
  }
.execute();
  if (loggingDeviceConfig == null) {
    final String message=""String_Node_Str"";
    LOG.error(message);
    CONSOLE_LOG.error(message);
  }
 else {
    final String message=""String_Node_Str"";
    LOG.info(message);
    CONSOLE_LOG.info(message);
  }
  dataStoreServerConfig=new RetryingActionExecutor<DataStoreServerConfig>(){
    @Override @Nullable protected DataStoreServerConfig executionWorkhorse(){
      final String msg=""String_Node_Str"";
      CONSOLE_LOG.info(msg);
      if (LOG.isInfoEnabled()) {
        LOG.info(""String_Node_Str"" + msg);
      }
      final String serverName=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('V')));
      final String serverPort=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('O')));
      if (isNonNullAndNonEmpty(serverName) && isNonNullAndNonEmpty(serverPort)) {
        return new DataStoreServerConfigImpl(serverName,serverPort);
      }
      LOG.error(""String_Node_Str"" + serverName + ""String_Node_Str""+ serverPort+ ""String_Node_Str"");
      return null;
    }
  }
.execute();
  if (dataStoreServerConfig == null) {
    final String message=""String_Node_Str"";
    LOG.error(message);
    CONSOLE_LOG.error(message);
  }
 else {
    final String message=""String_Node_Str"";
    LOG.info(message);
    CONSOLE_LOG.info(message);
  }
  dataStoreConnectionConfig=new RetryingActionExecutor<DataStoreConnectionConfig>(){
    @Override protected DataStoreConnectionConfig executionWorkhorse(){
      final String msg=""String_Node_Str"";
      CONSOLE_LOG.info(msg);
      if (LOG.isInfoEnabled()) {
        LOG.info(""String_Node_Str"" + msg);
      }
      final String wirelessSsid=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('S')));
      final WirelessAuthorizationType wirelessAuthorizationType=WirelessAuthorizationType.findById(trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('A'))));
      final String wirelessAuthorizationKey=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('K')));
      if (isNonNullAndNonEmpty(wirelessSsid) && wirelessAuthorizationType != null && isNonNullAndNonEmpty(wirelessAuthorizationKey)) {
        return new DataStoreConnectionConfigImpl(wirelessSsid,wirelessAuthorizationType,wirelessAuthorizationKey);
      }
      LOG.error(""String_Node_Str"" + wirelessSsid + ""String_Node_Str""+ wirelessAuthorizationType+ ""String_Node_Str""+ wirelessAuthorizationKey+ ""String_Node_Str"");
      return null;
    }
  }
.execute();
  if (dataStoreConnectionConfig == null) {
    final String message=""String_Node_Str"";
    LOG.error(message);
    CONSOLE_LOG.error(message);
  }
 else {
    final String message=""String_Node_Str"";
    LOG.info(message);
    CONSOLE_LOG.info(message);
  }
  pingScheduledFuture=pingExecutorService.scheduleAtFixedRate(pinger,DELAY_IN_SECONDS_BETWEEN_PINGS,DELAY_IN_SECONDS_BETWEEN_PINGS,TimeUnit.SECONDS);
}","private LoggingDeviceProxy(final SerialDeviceCommandExecutionQueue commandQueue,final String serialPortName) throws InitializationException {
  this.commandQueue=commandQueue;
  this.serialPortName=serialPortName;
  final CommandExecutionFailureHandler commandExecutionFailureHandler=new CommandExecutionFailureHandler(){
    public void handleExecutionFailure(){
      pinger.forceFailure();
    }
  }
;
  dataFileReturnValueCommandExecutor=new SerialDeviceReturnValueCommandExecutor<DataFile>(commandQueue,commandExecutionFailureHandler);
  booleanReturnValueCommandExecutor=new SerialDeviceReturnValueCommandExecutor<Boolean>(commandQueue,commandExecutionFailureHandler);
  stringReturnValueCommandExecutor=new SerialDeviceReturnValueCommandExecutor<String>(commandQueue,commandExecutionFailureHandler);
  final SerialDeviceNoReturnValueCommandExecutor noReturnValueCommandExecutor=new SerialDeviceNoReturnValueCommandExecutor(commandQueue,commandExecutionFailureHandler);
  final Boolean timeSuccess=new RetryingActionExecutor<Boolean>(){
    @Override @Nullable protected Boolean executionWorkhorse(    final int attemptNumber,    final int maxNumberOfAttempts){
      final String msg=""String_Node_Str"" + attemptNumber + ""String_Node_Str""+ maxNumberOfAttempts+ ""String_Node_Str"";
      CONSOLE_LOG.info(msg);
      if (LOG.isInfoEnabled()) {
        LOG.info(""String_Node_Str"" + msg);
      }
      final boolean success=noReturnValueCommandExecutor.execute(setCurrentTimeCommandStrategy);
      if (success) {
        final String message=""String_Node_Str"";
        LOG.info(message);
        CONSOLE_LOG.info(message);
      }
 else {
        final String message=""String_Node_Str"";
        LOG.info(message);
        CONSOLE_LOG.info(message);
      }
      return success;
    }
  }
.execute();
  if (!Boolean.TRUE.equals(timeSuccess)) {
    throw new InitializationException(""String_Node_Str"");
  }
  loggingDeviceConfig=new RetryingActionExecutor<LoggingDeviceConfig>(){
    @Override @Nullable protected LoggingDeviceConfig executionWorkhorse(    final int attemptNumber,    final int maxNumberOfAttempts){
      final String msg=""String_Node_Str"" + attemptNumber + ""String_Node_Str""+ maxNumberOfAttempts+ ""String_Node_Str"";
      CONSOLE_LOG.info(msg);
      if (LOG.isInfoEnabled()) {
        LOG.info(""String_Node_Str"" + msg);
      }
      final String username=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('U')));
      final String deviceNickname=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('N')));
      if (isNonNullAndNonEmpty(username) && isNonNullAndNonEmpty(deviceNickname)) {
        return new LoggingDeviceConfigImpl(username,deviceNickname);
      }
      LOG.error(""String_Node_Str"" + username + ""String_Node_Str""+ deviceNickname+ ""String_Node_Str"");
      return null;
    }
  }
.execute();
  if (loggingDeviceConfig == null) {
    final String message=""String_Node_Str"";
    LOG.error(message);
    CONSOLE_LOG.error(message);
    throw new InitializationException(message);
  }
 else {
    final String message=""String_Node_Str"";
    LOG.info(message);
    CONSOLE_LOG.info(message);
  }
  dataStoreServerConfig=new RetryingActionExecutor<DataStoreServerConfig>(){
    @Override @Nullable protected DataStoreServerConfig executionWorkhorse(    final int attemptNumber,    final int maxNumberOfAttempts){
      final String msg=""String_Node_Str"" + attemptNumber + ""String_Node_Str""+ maxNumberOfAttempts+ ""String_Node_Str"";
      CONSOLE_LOG.info(msg);
      if (LOG.isInfoEnabled()) {
        LOG.info(""String_Node_Str"" + msg);
      }
      final String serverName=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('V')));
      final String serverPort=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('O')));
      if (isNonNullAndNonEmpty(serverName) && isNonNullAndNonEmpty(serverPort)) {
        return new DataStoreServerConfigImpl(serverName,serverPort);
      }
      LOG.error(""String_Node_Str"" + serverName + ""String_Node_Str""+ serverPort+ ""String_Node_Str"");
      return null;
    }
  }
.execute();
  if (dataStoreServerConfig == null) {
    final String message=""String_Node_Str"";
    LOG.error(message);
    CONSOLE_LOG.error(message);
    throw new InitializationException(message);
  }
 else {
    final String message=""String_Node_Str"";
    LOG.info(message);
    CONSOLE_LOG.info(message);
  }
  dataStoreConnectionConfig=new RetryingActionExecutor<DataStoreConnectionConfig>(){
    @Override protected DataStoreConnectionConfig executionWorkhorse(    final int attemptNumber,    final int maxNumberOfAttempts){
      final String msg=""String_Node_Str"" + attemptNumber + ""String_Node_Str""+ maxNumberOfAttempts+ ""String_Node_Str"";
      CONSOLE_LOG.info(msg);
      if (LOG.isInfoEnabled()) {
        LOG.info(""String_Node_Str"" + msg);
      }
      final String wirelessSsid=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('S')));
      final WirelessAuthorizationType wirelessAuthorizationType=WirelessAuthorizationType.findById(trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('A'))));
      final String wirelessAuthorizationKey=trim(stringReturnValueCommandExecutor.execute(new VariableLengthStringResponseCommandStrategy('K')));
      if (isNonNullAndNonEmpty(wirelessSsid) && wirelessAuthorizationType != null && isNonNullAndNonEmpty(wirelessAuthorizationKey)) {
        return new DataStoreConnectionConfigImpl(wirelessSsid,wirelessAuthorizationType,wirelessAuthorizationKey);
      }
      LOG.error(""String_Node_Str"" + wirelessSsid + ""String_Node_Str""+ wirelessAuthorizationType+ ""String_Node_Str""+ wirelessAuthorizationKey+ ""String_Node_Str"");
      return null;
    }
  }
.execute();
  if (dataStoreConnectionConfig == null) {
    final String message=""String_Node_Str"";
    LOG.error(message);
    CONSOLE_LOG.error(message);
  }
 else {
    final String message=""String_Node_Str"";
    LOG.info(message);
    CONSOLE_LOG.info(message);
  }
  pingScheduledFuture=pingExecutorService.scheduleAtFixedRate(pinger,DELAY_IN_SECONDS_BETWEEN_PINGS,DELAY_IN_SECONDS_BETWEEN_PINGS,TimeUnit.SECONDS);
}"
21697,"@Override public void run(){
  LOG.debug(""String_Node_Str"");
  int delayUntilNextDownload=5;
  TimeUnit timeUnit=TimeUnit.SECONDS;
  final SortedSet<String> availableFilenames=device.getAvailableFilenames();
  if (availableFilenames == null) {
    LOG.debug(""String_Node_Str"");
    delayUntilNextDownload=1;
    timeUnit=TimeUnit.MINUTES;
  }
 else   if (availableFilenames.isEmpty()) {
    LOG.debug(""String_Node_Str"");
    delayUntilNextDownload=1;
    timeUnit=TimeUnit.MINUTES;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + availableFilenames.size() + ""String_Node_Str"");
    }
    for (    final String filename : availableFilenames) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
      }
      final DataFileStatus fileStatus=dataFileManager.getDataFileStatusOfAnyMatchingFile(filename);
      if (fileStatus == null) {
        if (!downloadFileFromDevice(filename)) {
          delayUntilNextDownload=1;
          timeUnit=TimeUnit.MINUTES;
        }
      }
 else {
switch (fileStatus) {
case WRITING:
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
          }
        break;
case DOWNLOADED:
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
      }
    break;
case UPLOADING:
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
break;
case UPLOADED:
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
}
eraseFileFromDevice(filename);
break;
case CORRUPT_DATA:
if (LOG.isInfoEnabled()) {
LOG.info(""String_Node_Str"" + filename + ""String_Node_Str"");
}
eraseFileFromDevice(filename);
break;
case INCORRECT_CHECKSUM:
if (LOG.isInfoEnabled()) {
LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
}
break;
default :
LOG.error(""String_Node_Str"" + fileStatus + ""String_Node_Str"");
}
}
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + delayUntilNextDownload + ""String_Node_Str""+ timeUnit+ ""String_Node_Str"");
}
scheduleNextFileDownload(delayUntilNextDownload,timeUnit);
}","@Override public void run(){
  LOG.debug(""String_Node_Str"");
  int delayUntilNextDownload=5;
  TimeUnit timeUnit=TimeUnit.SECONDS;
  final SortedSet<String> availableFilenames=device.getAvailableFilenames();
  if (availableFilenames == null) {
    LOG.debug(""String_Node_Str"");
    delayUntilNextDownload=1;
    timeUnit=TimeUnit.MINUTES;
  }
 else   if (availableFilenames.isEmpty()) {
    LOG.debug(""String_Node_Str"");
    delayUntilNextDownload=1;
    timeUnit=TimeUnit.MINUTES;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + availableFilenames.size() + ""String_Node_Str"");
    }
    for (    final String filename : availableFilenames) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
      }
      final DataFileManager.ActionToPerformOnDeviceDataFile actionToPerformOnDeviceDataFile=dataFileManager.getActionToPerformOnDeviceDataFile(filename);
switch (actionToPerformOnDeviceDataFile) {
case NO_ACTION:
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
        }
      break;
case DELETE_FROM_DEVICE:
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + filename + ""String_Node_Str"");
    }
  deleteFileFromDevice(filename);
break;
case DOWNLOAD_FROM_DEVICE:
if (!downloadFileFromDevice(filename)) {
delayUntilNextDownload=1;
timeUnit=TimeUnit.MINUTES;
}
break;
default :
LOG.error(""String_Node_Str"" + actionToPerformOnDeviceDataFile + ""String_Node_Str"");
}
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + delayUntilNextDownload + ""String_Node_Str""+ timeUnit+ ""String_Node_Str"");
}
scheduleNextFileDownload(delayUntilNextDownload,timeUnit);
}"
21698,"private void listenToSocket() throws IOException {
  LocalSocket socket=null;
  try {
    socket=new LocalSocket();
    LocalSocketAddress address=new LocalSocketAddress(mSocket,LocalSocketAddress.Namespace.RESERVED);
    socket.connect(address);
    mCallbacks.onDaemonConnected();
    InputStream inputStream=socket.getInputStream();
    mOutputStream=socket.getOutputStream();
    byte[] buffer=new byte[BUFFER_SIZE];
    int start=0;
    while (true) {
      int count=inputStream.read(buffer,start,BUFFER_SIZE - start);
      if (count < 0)       break;
      count+=start;
      start=0;
      for (int i=0; i < count; i++) {
        if (buffer[i] == 0) {
          String event=new String(buffer,start,i - start);
          if (LOCAL_LOGD)           Slog.d(TAG,String.format(""String_Node_Str"",event));
          String[] tokens=event.split(""String_Node_Str"");
          try {
            int code=Integer.parseInt(tokens[0]);
            if (code >= ResponseCode.UnsolicitedInformational) {
              try {
                if (!mCallbacks.onEvent(code,event,tokens)) {
                  Slog.w(TAG,String.format(""String_Node_Str"",event));
                }
              }
 catch (              Exception ex) {
                Slog.e(TAG,String.format(""String_Node_Str"",event),ex);
              }
            }
 else {
              try {
                mResponseQueue.put(event);
              }
 catch (              InterruptedException ex) {
                Slog.e(TAG,""String_Node_Str"",ex);
              }
            }
          }
 catch (          NumberFormatException nfe) {
            Slog.w(TAG,String.format(""String_Node_Str"",event));
          }
          start=i + 1;
        }
      }
      if (start != count) {
        final int remaining=BUFFER_SIZE - start;
        System.arraycopy(buffer,start,buffer,0,remaining);
        start=remaining;
      }
 else {
        start=0;
      }
    }
  }
 catch (  IOException ex) {
    Slog.e(TAG,""String_Node_Str"",ex);
    throw ex;
  }
 finally {
synchronized (this) {
      if (mOutputStream != null) {
        try {
          mOutputStream.close();
        }
 catch (        IOException e) {
          Slog.w(TAG,""String_Node_Str"",e);
        }
        mOutputStream=null;
      }
    }
    try {
      if (socket != null) {
        socket.close();
      }
    }
 catch (    IOException ex) {
      Slog.w(TAG,""String_Node_Str"",ex);
    }
  }
}","private void listenToSocket() throws IOException {
  LocalSocket socket=null;
  try {
    socket=new LocalSocket();
    LocalSocketAddress address=new LocalSocketAddress(mSocket,LocalSocketAddress.Namespace.RESERVED);
    socket.connect(address);
    mOutputStream=socket.getOutputStream();
    mCallbacks.onDaemonConnected();
    InputStream inputStream=socket.getInputStream();
    byte[] buffer=new byte[BUFFER_SIZE];
    int start=0;
    while (true) {
      int count=inputStream.read(buffer,start,BUFFER_SIZE - start);
      if (count < 0)       break;
      count+=start;
      start=0;
      for (int i=0; i < count; i++) {
        if (buffer[i] == 0) {
          String event=new String(buffer,start,i - start);
          if (LOCAL_LOGD)           Slog.d(TAG,String.format(""String_Node_Str"",event));
          String[] tokens=event.split(""String_Node_Str"");
          try {
            int code=Integer.parseInt(tokens[0]);
            if (code >= ResponseCode.UnsolicitedInformational) {
              try {
                if (!mCallbacks.onEvent(code,event,tokens)) {
                  Slog.w(TAG,String.format(""String_Node_Str"",event));
                }
              }
 catch (              Exception ex) {
                Slog.e(TAG,String.format(""String_Node_Str"",event),ex);
              }
            }
 else {
              try {
                mResponseQueue.put(event);
              }
 catch (              InterruptedException ex) {
                Slog.e(TAG,""String_Node_Str"",ex);
              }
            }
          }
 catch (          NumberFormatException nfe) {
            Slog.w(TAG,String.format(""String_Node_Str"",event));
          }
          start=i + 1;
        }
      }
      if (start != count) {
        final int remaining=BUFFER_SIZE - start;
        System.arraycopy(buffer,start,buffer,0,remaining);
        start=remaining;
      }
 else {
        start=0;
      }
    }
  }
 catch (  IOException ex) {
    Slog.e(TAG,""String_Node_Str"",ex);
    throw ex;
  }
 finally {
synchronized (this) {
      if (mOutputStream != null) {
        try {
          mOutputStream.close();
        }
 catch (        IOException e) {
          Slog.w(TAG,""String_Node_Str"",e);
        }
        mOutputStream=null;
      }
    }
    try {
      if (socket != null) {
        socket.close();
      }
    }
 catch (    IOException ex) {
      Slog.w(TAG,""String_Node_Str"",ex);
    }
  }
}"
21699,"/** 
 * After a change in the connectivity state of any network, We're mainly concerned with making sure that the list of DNS servers is setupup according to which networks are connected, and ensuring that the right routing table entries exist.
 */
private void handleConnectivityChange(int netType){
  handleDnsConfigurationChange(netType);
  if (mNetTrackers[netType].getNetworkInfo().isConnected()) {
    if (mNetAttributes[netType].isDefault()) {
      mNetTrackers[netType].addDefaultRoute();
    }
 else {
      mNetTrackers[netType].addPrivateDnsRoutes();
    }
  }
 else {
    if (mNetAttributes[netType].isDefault()) {
      mNetTrackers[netType].removeDefaultRoute();
    }
 else {
      mNetTrackers[netType].removePrivateDnsRoutes();
    }
  }
}","/** 
 * After a change in the connectivity state of any network, We're mainly concerned with making sure that the list of DNS servers is setupup according to which networks are connected, and ensuring that the right routing table entries exist.
 */
private void handleConnectivityChange(int netType){
  handleDnsConfigurationChange(netType);
  if (mNetTrackers[netType].getNetworkInfo().isConnected()) {
    if (mNetAttributes[netType].isDefault()) {
      mNetTrackers[netType].addDefaultRoute();
    }
 else {
      if (mActiveDefaultNetwork != -1) {
        String defaultIface=mNetTrackers[mActiveDefaultNetwork].getInterfaceName();
        if (defaultIface != null && !defaultIface.equals(mNetTrackers[netType].getInterfaceName())) {
          mNetTrackers[netType].removeDefaultRoute();
        }
      }
      mNetTrackers[netType].addPrivateDnsRoutes();
    }
  }
 else {
    if (mNetAttributes[netType].isDefault()) {
      mNetTrackers[netType].removeDefaultRoute();
    }
 else {
      mNetTrackers[netType].removePrivateDnsRoutes();
    }
  }
}"
21700,"/** 
 * Return NetworkInfo for the active (i.e., connected) network interface. It is assumed that at most one network is active at a time. If more than one is active, it is indeterminate which will be returned.
 * @return the info for the active network, or {@code null} if none isactive
 */
public NetworkInfo getActiveNetworkInfo(){
  enforceAccessPermission();
  for (int type=0; type <= ConnectivityManager.MAX_NETWORK_TYPE; type++) {
    if (mNetAttributes[type] == null || !mNetAttributes[type].isDefault()) {
      continue;
    }
    NetworkStateTracker t=mNetTrackers[type];
    NetworkInfo info=t.getNetworkInfo();
    if (info.isConnected()) {
      if (DBG && type != mActiveDefaultNetwork)       Slog.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
      return info;
    }
  }
  return null;
}","/** 
 * Return NetworkInfo for the active (i.e., connected) network interface. It is assumed that at most one network is active at a time. If more than one is active, it is indeterminate which will be returned.
 * @return the info for the active network, or {@code null} if none isactive
 */
public NetworkInfo getActiveNetworkInfo(){
  enforceAccessPermission();
  if (mActiveDefaultNetwork != -1) {
    return mNetTrackers[mActiveDefaultNetwork].getNetworkInfo();
  }
  return null;
}"
21701,"/** 
 * After a change in the connectivity state of any network, We're mainly concerned with making sure that the list of DNS servers is setupup according to which networks are connected, and ensuring that the right routing table entries exist.
 */
private void handleConnectivityChange(int netType){
  handleDnsConfigurationChange(netType);
  if (mNetTrackers[netType].getNetworkInfo().isConnected()) {
    if (mNetAttributes[netType].isDefault()) {
      mNetTrackers[netType].addDefaultRoute();
    }
 else {
      mNetTrackers[netType].addPrivateDnsRoutes();
    }
  }
 else {
    if (mNetAttributes[netType].isDefault()) {
      mNetTrackers[netType].removeDefaultRoute();
    }
 else {
      mNetTrackers[netType].removePrivateDnsRoutes();
    }
  }
}","/** 
 * After a change in the connectivity state of any network, We're mainly concerned with making sure that the list of DNS servers is setupup according to which networks are connected, and ensuring that the right routing table entries exist.
 */
private void handleConnectivityChange(int netType){
  handleDnsConfigurationChange(netType);
  if (mNetTrackers[netType].getNetworkInfo().isConnected()) {
    if (mNetAttributes[netType].isDefault()) {
      mNetTrackers[netType].addDefaultRoute();
    }
 else {
      if (mActiveDefaultNetwork != -1) {
        String defaultIface=mNetTrackers[mActiveDefaultNetwork].getInterfaceName();
        if (defaultIface != null && !defaultIface.equals(mNetTrackers[netType].getInterfaceName())) {
          mNetTrackers[netType].removeDefaultRoute();
        }
      }
      mNetTrackers[netType].addPrivateDnsRoutes();
    }
  }
 else {
    if (mNetAttributes[netType].isDefault()) {
      mNetTrackers[netType].removeDefaultRoute();
    }
 else {
      mNetTrackers[netType].removePrivateDnsRoutes();
    }
  }
}"
21702,"/** 
 * Return NetworkInfo for the active (i.e., connected) network interface. It is assumed that at most one network is active at a time. If more than one is active, it is indeterminate which will be returned.
 * @return the info for the active network, or {@code null} if none isactive
 */
public NetworkInfo getActiveNetworkInfo(){
  enforceAccessPermission();
  for (int type=0; type <= ConnectivityManager.MAX_NETWORK_TYPE; type++) {
    if (mNetAttributes[type] == null || !mNetAttributes[type].isDefault()) {
      continue;
    }
    NetworkStateTracker t=mNetTrackers[type];
    NetworkInfo info=t.getNetworkInfo();
    if (info.isConnected()) {
      if (DBG && type != mActiveDefaultNetwork)       Slog.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
      return info;
    }
  }
  return null;
}","/** 
 * Return NetworkInfo for the active (i.e., connected) network interface. It is assumed that at most one network is active at a time. If more than one is active, it is indeterminate which will be returned.
 * @return the info for the active network, or {@code null} if none isactive
 */
public NetworkInfo getActiveNetworkInfo(){
  enforceAccessPermission();
  if (mActiveDefaultNetwork != -1) {
    return mNetTrackers[mActiveDefaultNetwork].getNetworkInfo();
  }
  return null;
}"
21703,"/** 
 * Helper function to convert a rotation vector to a rotation matrix. Given a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a 9  or 16 element rotation matrix in the array R.  R must have length 9 or 16. If R.length == 9, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8]   / </pre> If R.length == 16, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   0  \ |  R[ 4]   R[ 5]   R[ 6]   0  | |  R[ 8]   R[ 9]   R[10]   0  | \  0       0       0       1  / </pre>
 * @param rotationVector the rotation vector to convert
 * @param R an array of floats in which to store the rotation matrix
 */
public static void getRotationMatrixFromVector(float[] R,float[] rotationVector){
  float q0;
  float q1=rotationVector[0];
  float q2=rotationVector[1];
  float q3=rotationVector[2];
  if (rotationVector.length == 4) {
    q0=rotationVector[3];
  }
 else {
    q0=(float)Math.sqrt(1 - q1 * q1 - q2 * q2 - q3 * q3);
  }
  float sq_q1=2 * q1 * q1;
  float sq_q2=2 * q2 * q2;
  float sq_q3=2 * q3 * q3;
  float q1_q2=2 * q1 * q2;
  float q3_q0=2 * q3 * q0;
  float q1_q3=2 * q1 * q3;
  float q2_q0=2 * q2 * q0;
  float q2_q3=2 * q2 * q3;
  float q1_q0=2 * q1 * q0;
  if (R.length == 9) {
    R[0]=1 - sq_q2 - sq_q3;
    R[1]=q1_q2 - q3_q0;
    R[2]=q1_q3 + q2_q0;
    R[3]=q1_q2 + q3_q0;
    R[4]=1 - sq_q1 - sq_q3;
    R[5]=q2_q3 - q1_q0;
    R[6]=q1_q3 - q2_q0;
    R[7]=q2_q3 + q1_q0;
    R[8]=1 - sq_q1 - sq_q2;
  }
 else   if (R.length == 16) {
    R[0]=1 - sq_q2 - sq_q3;
    R[1]=q1_q2 - q3_q0;
    R[2]=q1_q3 + q2_q0;
    R[3]=0.0f;
    R[4]=q1_q2 + q3_q0;
    R[5]=1 - sq_q1 - sq_q3;
    R[6]=q2_q3 - q1_q0;
    R[7]=0.0f;
    R[8]=q1_q3 - q2_q0;
    R[9]=q2_q3 + q1_q0;
    R[10]=1 - sq_q1 - sq_q2;
    R[11]=0.0f;
    R[12]=R[13]=R[14]=0.0f;
    R[15]=1.0f;
  }
}","/** 
 * Helper function to convert a rotation vector to a rotation matrix. Given a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a 9  or 16 element rotation matrix in the array R.  R must have length 9 or 16. If R.length == 9, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8]   / </pre> If R.length == 16, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   0  \ |  R[ 4]   R[ 5]   R[ 6]   0  | |  R[ 8]   R[ 9]   R[10]   0  | \  0       0       0       1  / </pre>
 * @param rotationVector the rotation vector to convert
 * @param R an array of floats in which to store the rotation matrix
 */
public static void getRotationMatrixFromVector(float[] R,float[] rotationVector){
  float q0;
  float q1=rotationVector[0];
  float q2=rotationVector[1];
  float q3=rotationVector[2];
  if (rotationVector.length == 4) {
    q0=rotationVector[3];
  }
 else {
    q0=1 - q1 * q1 - q2 * q2 - q3 * q3;
    q0=(q0 > 0) ? (float)Math.sqrt(q0) : 0;
  }
  float sq_q1=2 * q1 * q1;
  float sq_q2=2 * q2 * q2;
  float sq_q3=2 * q3 * q3;
  float q1_q2=2 * q1 * q2;
  float q3_q0=2 * q3 * q0;
  float q1_q3=2 * q1 * q3;
  float q2_q0=2 * q2 * q0;
  float q2_q3=2 * q2 * q3;
  float q1_q0=2 * q1 * q0;
  if (R.length == 9) {
    R[0]=1 - sq_q2 - sq_q3;
    R[1]=q1_q2 - q3_q0;
    R[2]=q1_q3 + q2_q0;
    R[3]=q1_q2 + q3_q0;
    R[4]=1 - sq_q1 - sq_q3;
    R[5]=q2_q3 - q1_q0;
    R[6]=q1_q3 - q2_q0;
    R[7]=q2_q3 + q1_q0;
    R[8]=1 - sq_q1 - sq_q2;
  }
 else   if (R.length == 16) {
    R[0]=1 - sq_q2 - sq_q3;
    R[1]=q1_q2 - q3_q0;
    R[2]=q1_q3 + q2_q0;
    R[3]=0.0f;
    R[4]=q1_q2 + q3_q0;
    R[5]=1 - sq_q1 - sq_q3;
    R[6]=q2_q3 - q1_q0;
    R[7]=0.0f;
    R[8]=q1_q3 - q2_q0;
    R[9]=q2_q3 + q1_q0;
    R[10]=1 - sq_q1 - sq_q2;
    R[11]=0.0f;
    R[12]=R[13]=R[14]=0.0f;
    R[15]=1.0f;
  }
}"
21704,"/** 
 * Helper function to convert a rotation vector to a rotation matrix. Given a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a 9  or 16 element rotation matrix in the array R.  R must have length 9 or 16. If R.length == 9, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8]   / </pre> If R.length == 16, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   0  \ |  R[ 4]   R[ 5]   R[ 6]   0  | |  R[ 8]   R[ 9]   R[10]   0  | \  0       0       0       1  / </pre>
 * @param rotationVector the rotation vector to convert
 * @param R an array of floats in which to store the rotation matrix
 */
public static void getRotationMatrixFromVector(float[] R,float[] rotationVector){
  float q0;
  float q1=rotationVector[0];
  float q2=rotationVector[1];
  float q3=rotationVector[2];
  if (rotationVector.length == 4) {
    q0=rotationVector[3];
  }
 else {
    q0=(float)Math.sqrt(1 - q1 * q1 - q2 * q2 - q3 * q3);
  }
  float sq_q1=2 * q1 * q1;
  float sq_q2=2 * q2 * q2;
  float sq_q3=2 * q3 * q3;
  float q1_q2=2 * q1 * q2;
  float q3_q0=2 * q3 * q0;
  float q1_q3=2 * q1 * q3;
  float q2_q0=2 * q2 * q0;
  float q2_q3=2 * q2 * q3;
  float q1_q0=2 * q1 * q0;
  if (R.length == 9) {
    R[0]=1 - sq_q2 - sq_q3;
    R[1]=q1_q2 - q3_q0;
    R[2]=q1_q3 + q2_q0;
    R[3]=q1_q2 + q3_q0;
    R[4]=1 - sq_q1 - sq_q3;
    R[5]=q2_q3 - q1_q0;
    R[6]=q1_q3 - q2_q0;
    R[7]=q2_q3 + q1_q0;
    R[8]=1 - sq_q1 - sq_q2;
  }
 else   if (R.length == 16) {
    R[0]=1 - sq_q2 - sq_q3;
    R[1]=q1_q2 - q3_q0;
    R[2]=q1_q3 + q2_q0;
    R[3]=0.0f;
    R[4]=q1_q2 + q3_q0;
    R[5]=1 - sq_q1 - sq_q3;
    R[6]=q2_q3 - q1_q0;
    R[7]=0.0f;
    R[8]=q1_q3 - q2_q0;
    R[9]=q2_q3 + q1_q0;
    R[10]=1 - sq_q1 - sq_q2;
    R[11]=0.0f;
    R[12]=R[13]=R[14]=0.0f;
    R[15]=1.0f;
  }
}","/** 
 * Helper function to convert a rotation vector to a rotation matrix. Given a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a 9  or 16 element rotation matrix in the array R.  R must have length 9 or 16. If R.length == 9, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8]   / </pre> If R.length == 16, the following matrix is returned: <pre> /  R[ 0]   R[ 1]   R[ 2]   0  \ |  R[ 4]   R[ 5]   R[ 6]   0  | |  R[ 8]   R[ 9]   R[10]   0  | \  0       0       0       1  / </pre>
 * @param rotationVector the rotation vector to convert
 * @param R an array of floats in which to store the rotation matrix
 */
public static void getRotationMatrixFromVector(float[] R,float[] rotationVector){
  float q0;
  float q1=rotationVector[0];
  float q2=rotationVector[1];
  float q3=rotationVector[2];
  if (rotationVector.length == 4) {
    q0=rotationVector[3];
  }
 else {
    q0=1 - q1 * q1 - q2 * q2 - q3 * q3;
    q0=(q0 > 0) ? (float)Math.sqrt(q0) : 0;
  }
  float sq_q1=2 * q1 * q1;
  float sq_q2=2 * q2 * q2;
  float sq_q3=2 * q3 * q3;
  float q1_q2=2 * q1 * q2;
  float q3_q0=2 * q3 * q0;
  float q1_q3=2 * q1 * q3;
  float q2_q0=2 * q2 * q0;
  float q2_q3=2 * q2 * q3;
  float q1_q0=2 * q1 * q0;
  if (R.length == 9) {
    R[0]=1 - sq_q2 - sq_q3;
    R[1]=q1_q2 - q3_q0;
    R[2]=q1_q3 + q2_q0;
    R[3]=q1_q2 + q3_q0;
    R[4]=1 - sq_q1 - sq_q3;
    R[5]=q2_q3 - q1_q0;
    R[6]=q1_q3 - q2_q0;
    R[7]=q2_q3 + q1_q0;
    R[8]=1 - sq_q1 - sq_q2;
  }
 else   if (R.length == 16) {
    R[0]=1 - sq_q2 - sq_q3;
    R[1]=q1_q2 - q3_q0;
    R[2]=q1_q3 + q2_q0;
    R[3]=0.0f;
    R[4]=q1_q2 + q3_q0;
    R[5]=1 - sq_q1 - sq_q3;
    R[6]=q2_q3 - q1_q0;
    R[7]=0.0f;
    R[8]=q1_q3 - q2_q0;
    R[9]=q2_q3 + q1_q0;
    R[10]=1 - sq_q1 - sq_q2;
    R[11]=0.0f;
    R[12]=R[13]=R[14]=0.0f;
    R[15]=1.0f;
  }
}"
21705,"@Override public void onDetached(){
  removeCallbacks(mHider);
}","@Override public void onDetached(){
}"
21706,"/** 
 * Called when a status report is received.  This should correspond to a previously successful SEND.
 * @param ar AsyncResult passed into the message handler.  ar.result shouldbe a String representing the status report PDU, as ASCII hex.
 */
protected void handleStatusReport(AsyncResult ar){
  String pduString=(String)ar.result;
  SmsMessage sms=SmsMessage.newFromCDS(pduString);
  if (sms != null) {
    int messageRef=sms.messageRef;
    for (int i=0, count=deliveryPendingList.size(); i < count; i++) {
      SmsTracker tracker=deliveryPendingList.get(i);
      if (tracker.mMessageRef == messageRef) {
        deliveryPendingList.remove(i);
        PendingIntent intent=tracker.mDeliveryIntent;
        Intent fillIn=new Intent();
        fillIn.putExtra(""String_Node_Str"",IccUtils.hexStringToBytes(pduString));
        try {
          intent.send(mContext,Activity.RESULT_OK,fillIn);
        }
 catch (        CanceledException ex) {
        }
        break;
      }
    }
  }
  acknowledgeLastIncomingSms(true,Intents.RESULT_SMS_HANDLED,null);
}","/** 
 * Called when a status report is received.  This should correspond to a previously successful SEND.
 * @param ar AsyncResult passed into the message handler.  ar.result shouldbe a String representing the status report PDU, as ASCII hex.
 */
protected void handleStatusReport(AsyncResult ar){
  String pduString=(String)ar.result;
  SmsMessage sms=SmsMessage.newFromCDS(pduString);
  int tpStatus=sms.getStatus();
  if (sms != null) {
    int messageRef=sms.messageRef;
    for (int i=0, count=deliveryPendingList.size(); i < count; i++) {
      SmsTracker tracker=deliveryPendingList.get(i);
      if (tracker.mMessageRef == messageRef) {
        if (tpStatus >= Sms.STATUS_FAILED || tpStatus < Sms.STATUS_PENDING) {
          deliveryPendingList.remove(i);
        }
        PendingIntent intent=tracker.mDeliveryIntent;
        Intent fillIn=new Intent();
        fillIn.putExtra(""String_Node_Str"",IccUtils.hexStringToBytes(pduString));
        try {
          intent.send(mContext,Activity.RESULT_OK,fillIn);
        }
 catch (        CanceledException ex) {
        }
        break;
      }
    }
  }
  acknowledgeLastIncomingSms(true,Intents.RESULT_SMS_HANDLED,null);
}"
21707,"/** 
 * Called when SMS send completes. Broadcasts a sentIntent on success. On failure, either sets up retries or broadcasts a sentIntent with the failure in the result code.
 * @param ar AsyncResult passed into the message handler.  ar.result shouldan SmsResponse instance if send was successful.  ar.userObj should be an SmsTracker instance.
 */
protected void handleSendComplete(AsyncResult ar){
  SmsTracker tracker=(SmsTracker)ar.userObj;
  PendingIntent sentIntent=tracker.mSentIntent;
  if (ar.exception == null) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + sentIntent);
    }
    if (tracker.mDeliveryIntent != null) {
      int messageRef=((SmsResponse)ar.result).messageRef;
      tracker.mMessageRef=messageRef;
      deliveryPendingList.add(tracker);
    }
    if (sentIntent != null) {
      try {
        sentIntent.send(Activity.RESULT_OK);
      }
 catch (      CanceledException ex) {
      }
    }
  }
 else {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"");
    }
    int ss=mPhone.getServiceState().getState();
    if (ss != ServiceState.STATE_IN_SERVICE) {
      handleNotInService(ss,tracker);
    }
 else     if ((((CommandException)(ar.exception)).getCommandError() == CommandException.Error.SMS_FAIL_RETRY) && tracker.mRetryCount < MAX_SEND_RETRIES) {
      tracker.mRetryCount++;
      Message retryMsg=obtainMessage(EVENT_SEND_RETRY,tracker);
      sendMessageDelayed(retryMsg,SEND_RETRY_DELAY);
    }
 else     if (tracker.mSentIntent != null) {
      int error=RESULT_ERROR_GENERIC_FAILURE;
      if (((CommandException)(ar.exception)).getCommandError() == CommandException.Error.FDN_CHECK_FAILURE) {
        error=RESULT_ERROR_FDN_CHECK_FAILURE;
      }
      try {
        Intent fillIn=new Intent();
        if (ar.result != null) {
          fillIn.putExtra(""String_Node_Str"",((SmsResponse)ar.result).errorCode);
        }
        tracker.mSentIntent.send(mContext,error,fillIn);
      }
 catch (      CanceledException ex) {
      }
    }
  }
}","/** 
 * Called when SMS send completes. Broadcasts a sentIntent on success. On failure, either sets up retries or broadcasts a sentIntent with the failure in the result code.
 * @param ar AsyncResult passed into the message handler.  ar.result shouldan SmsResponse instance if send was successful.  ar.userObj should be an SmsTracker instance.
 */
protected void handleSendComplete(AsyncResult ar){
  SmsTracker tracker=(SmsTracker)ar.userObj;
  PendingIntent sentIntent=tracker.mSentIntent;
  if (ar.exception == null) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + sentIntent);
    }
    if (tracker.mDeliveryIntent != null) {
      int messageRef=((SmsResponse)ar.result).messageRef;
      tracker.mMessageRef=messageRef;
      deliveryPendingList.add(tracker);
    }
    if (sentIntent != null) {
      try {
        if (mRemainingMessages > -1) {
          mRemainingMessages--;
        }
        if (mRemainingMessages == 0) {
          Intent sendNext=new Intent();
          sendNext.putExtra(SEND_NEXT_MSG_EXTRA,true);
          sentIntent.send(mContext,Activity.RESULT_OK,sendNext);
        }
 else {
          sentIntent.send(Activity.RESULT_OK);
        }
      }
 catch (      CanceledException ex) {
      }
    }
  }
 else {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"");
    }
    int ss=mPhone.getServiceState().getState();
    if (ss != ServiceState.STATE_IN_SERVICE) {
      handleNotInService(ss,tracker);
    }
 else     if ((((CommandException)(ar.exception)).getCommandError() == CommandException.Error.SMS_FAIL_RETRY) && tracker.mRetryCount < MAX_SEND_RETRIES) {
      tracker.mRetryCount++;
      Message retryMsg=obtainMessage(EVENT_SEND_RETRY,tracker);
      sendMessageDelayed(retryMsg,SEND_RETRY_DELAY);
    }
 else     if (tracker.mSentIntent != null) {
      int error=RESULT_ERROR_GENERIC_FAILURE;
      if (((CommandException)(ar.exception)).getCommandError() == CommandException.Error.FDN_CHECK_FAILURE) {
        error=RESULT_ERROR_FDN_CHECK_FAILURE;
      }
      try {
        Intent fillIn=new Intent();
        if (ar.result != null) {
          fillIn.putExtra(""String_Node_Str"",((SmsResponse)ar.result).errorCode);
        }
        if (mRemainingMessages > -1) {
          mRemainingMessages--;
        }
        if (mRemainingMessages == 0) {
          fillIn.putExtra(SEND_NEXT_MSG_EXTRA,true);
        }
        tracker.mSentIntent.send(mContext,error,fillIn);
      }
 catch (      CanceledException ex) {
      }
    }
  }
}"
21708,"/** 
 * Send a multi-part text based SMS which already passed SMS control check. It is the working function for sendMultipartText().
 * @param destinationAddress the address to send the message to
 * @param scAddress is the service center address or null to usethe current default SMSC
 * @param parts an <code>ArrayList</code> of strings that, in order,comprise the original message
 * @param sentIntents if not null, an <code>ArrayList</code> of<code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors: <code>RESULT_ERROR_GENERIC_FAILURE</code> <code>RESULT_ERROR_RADIO_OFF</code> <code>RESULT_ERROR_NULL_PDU</code>.
 * @param deliveryIntents if not null, an <code>ArrayList</code> of<code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient.  The raw pdu of the status report is in the extended data (""pdu"").
 */
private void sendMultipartTextWithPermit(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){
  int ss=mPhone.getServiceState().getState();
  if (ss != ServiceState.STATE_IN_SERVICE) {
    for (int i=0, count=parts.size(); i < count; i++) {
      PendingIntent sentIntent=null;
      if (sentIntents != null && sentIntents.size() > i) {
        sentIntent=sentIntents.get(i);
      }
      SmsTracker tracker=SmsTrackerFactory(null,sentIntent,null);
      handleNotInService(ss,tracker);
    }
    return;
  }
  int refNumber=getNextConcatenatedRef() & 0x00FF;
  int msgCount=parts.size();
  int encoding=android.telephony.SmsMessage.ENCODING_UNKNOWN;
  for (int i=0; i < msgCount; i++) {
    TextEncodingDetails details=SmsMessage.calculateLength(parts.get(i),false);
    if (encoding != details.codeUnitSize && (encoding == android.telephony.SmsMessage.ENCODING_UNKNOWN || encoding == android.telephony.SmsMessage.ENCODING_7BIT)) {
      encoding=details.codeUnitSize;
    }
  }
  for (int i=0; i < msgCount; i++) {
    SmsHeader.ConcatRef concatRef=new SmsHeader.ConcatRef();
    concatRef.refNumber=refNumber;
    concatRef.seqNumber=i + 1;
    concatRef.msgCount=msgCount;
    concatRef.isEightBits=false;
    SmsHeader smsHeader=new SmsHeader();
    smsHeader.concatRef=concatRef;
    PendingIntent sentIntent=null;
    if (sentIntents != null && sentIntents.size() > i) {
      sentIntent=sentIntents.get(i);
    }
    PendingIntent deliveryIntent=null;
    if (deliveryIntents != null && deliveryIntents.size() > i) {
      deliveryIntent=deliveryIntents.get(i);
    }
    SmsMessage.SubmitPdu pdus=SmsMessage.getSubmitPdu(scAddress,destinationAddress,parts.get(i),deliveryIntent != null,SmsHeader.toByteArray(smsHeader),encoding);
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(""String_Node_Str"",pdus.encodedScAddress);
    map.put(""String_Node_Str"",pdus.encodedMessage);
    SmsTracker tracker=SmsTrackerFactory(map,sentIntent,deliveryIntent);
    sendSms(tracker);
  }
}","/** 
 * Send a multi-part text based SMS which already passed SMS control check. It is the working function for sendMultipartText().
 * @param destinationAddress the address to send the message to
 * @param scAddress is the service center address or null to usethe current default SMSC
 * @param parts an <code>ArrayList</code> of strings that, in order,comprise the original message
 * @param sentIntents if not null, an <code>ArrayList</code> of<code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors: <code>RESULT_ERROR_GENERIC_FAILURE</code> <code>RESULT_ERROR_RADIO_OFF</code> <code>RESULT_ERROR_NULL_PDU</code>.
 * @param deliveryIntents if not null, an <code>ArrayList</code> of<code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient.  The raw pdu of the status report is in the extended data (""pdu"").
 */
private void sendMultipartTextWithPermit(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){
  int ss=mPhone.getServiceState().getState();
  if (ss != ServiceState.STATE_IN_SERVICE) {
    for (int i=0, count=parts.size(); i < count; i++) {
      PendingIntent sentIntent=null;
      if (sentIntents != null && sentIntents.size() > i) {
        sentIntent=sentIntents.get(i);
      }
      SmsTracker tracker=SmsTrackerFactory(null,sentIntent,null);
      handleNotInService(ss,tracker);
    }
    return;
  }
  int refNumber=getNextConcatenatedRef() & 0x00FF;
  int msgCount=parts.size();
  int encoding=android.telephony.SmsMessage.ENCODING_UNKNOWN;
  mRemainingMessages=msgCount;
  for (int i=0; i < msgCount; i++) {
    TextEncodingDetails details=SmsMessage.calculateLength(parts.get(i),false);
    if (encoding != details.codeUnitSize && (encoding == android.telephony.SmsMessage.ENCODING_UNKNOWN || encoding == android.telephony.SmsMessage.ENCODING_7BIT)) {
      encoding=details.codeUnitSize;
    }
  }
  for (int i=0; i < msgCount; i++) {
    SmsHeader.ConcatRef concatRef=new SmsHeader.ConcatRef();
    concatRef.refNumber=refNumber;
    concatRef.seqNumber=i + 1;
    concatRef.msgCount=msgCount;
    concatRef.isEightBits=false;
    SmsHeader smsHeader=new SmsHeader();
    smsHeader.concatRef=concatRef;
    PendingIntent sentIntent=null;
    if (sentIntents != null && sentIntents.size() > i) {
      sentIntent=sentIntents.get(i);
    }
    PendingIntent deliveryIntent=null;
    if (deliveryIntents != null && deliveryIntents.size() > i) {
      deliveryIntent=deliveryIntents.get(i);
    }
    SmsMessage.SubmitPdu pdus=SmsMessage.getSubmitPdu(scAddress,destinationAddress,parts.get(i),deliveryIntent != null,SmsHeader.toByteArray(smsHeader),encoding);
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(""String_Node_Str"",pdus.encodedScAddress);
    map.put(""String_Node_Str"",pdus.encodedMessage);
    SmsTracker tracker=SmsTrackerFactory(map,sentIntent,deliveryIntent);
    sendSms(tracker);
  }
}"
21709,"/** 
 * {@inheritDoc} 
 */
protected void sendMultipartText(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){
  int refNumber=getNextConcatenatedRef() & 0x00FF;
  int msgCount=parts.size();
  int encoding=android.telephony.SmsMessage.ENCODING_UNKNOWN;
  for (int i=0; i < msgCount; i++) {
    TextEncodingDetails details=SmsMessage.calculateLength(parts.get(i),false);
    if (encoding != details.codeUnitSize && (encoding == android.telephony.SmsMessage.ENCODING_UNKNOWN || encoding == android.telephony.SmsMessage.ENCODING_7BIT)) {
      encoding=details.codeUnitSize;
    }
  }
  for (int i=0; i < msgCount; i++) {
    SmsHeader.ConcatRef concatRef=new SmsHeader.ConcatRef();
    concatRef.refNumber=refNumber;
    concatRef.seqNumber=i + 1;
    concatRef.msgCount=msgCount;
    concatRef.isEightBits=true;
    SmsHeader smsHeader=new SmsHeader();
    smsHeader.concatRef=concatRef;
    PendingIntent sentIntent=null;
    if (sentIntents != null && sentIntents.size() > i) {
      sentIntent=sentIntents.get(i);
    }
    PendingIntent deliveryIntent=null;
    if (deliveryIntents != null && deliveryIntents.size() > i) {
      deliveryIntent=deliveryIntents.get(i);
    }
    SmsMessage.SubmitPdu pdus=SmsMessage.getSubmitPdu(scAddress,destinationAddress,parts.get(i),deliveryIntent != null,SmsHeader.toByteArray(smsHeader),encoding);
    sendRawPdu(pdus.encodedScAddress,pdus.encodedMessage,sentIntent,deliveryIntent);
  }
}","/** 
 * {@inheritDoc} 
 */
protected void sendMultipartText(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){
  int refNumber=getNextConcatenatedRef() & 0x00FF;
  int msgCount=parts.size();
  int encoding=android.telephony.SmsMessage.ENCODING_UNKNOWN;
  mRemainingMessages=msgCount;
  for (int i=0; i < msgCount; i++) {
    TextEncodingDetails details=SmsMessage.calculateLength(parts.get(i),false);
    if (encoding != details.codeUnitSize && (encoding == android.telephony.SmsMessage.ENCODING_UNKNOWN || encoding == android.telephony.SmsMessage.ENCODING_7BIT)) {
      encoding=details.codeUnitSize;
    }
  }
  for (int i=0; i < msgCount; i++) {
    SmsHeader.ConcatRef concatRef=new SmsHeader.ConcatRef();
    concatRef.refNumber=refNumber;
    concatRef.seqNumber=i + 1;
    concatRef.msgCount=msgCount;
    concatRef.isEightBits=true;
    SmsHeader smsHeader=new SmsHeader();
    smsHeader.concatRef=concatRef;
    PendingIntent sentIntent=null;
    if (sentIntents != null && sentIntents.size() > i) {
      sentIntent=sentIntents.get(i);
    }
    PendingIntent deliveryIntent=null;
    if (deliveryIntents != null && deliveryIntents.size() > i) {
      deliveryIntent=deliveryIntents.get(i);
    }
    SmsMessage.SubmitPdu pdus=SmsMessage.getSubmitPdu(scAddress,destinationAddress,parts.get(i),deliveryIntent != null,SmsHeader.toByteArray(smsHeader),encoding);
    sendRawPdu(pdus.encodedScAddress,pdus.encodedMessage,sentIntent,deliveryIntent);
  }
}"
21710,"/** 
 * Called when SMS send completes. Broadcasts a sentIntent on success. On failure, either sets up retries or broadcasts a sentIntent with the failure in the result code.
 * @param ar AsyncResult passed into the message handler.  ar.result shouldan SmsResponse instance if send was successful.  ar.userObj should be an SmsTracker instance.
 */
protected void handleSendComplete(AsyncResult ar){
  SmsTracker tracker=(SmsTracker)ar.userObj;
  PendingIntent sentIntent=tracker.mSentIntent;
  if (ar.exception == null) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + sentIntent);
    }
    if (tracker.mDeliveryIntent != null) {
      int messageRef=((SmsResponse)ar.result).messageRef;
      tracker.mMessageRef=messageRef;
      deliveryPendingList.add(tracker);
    }
    if (sentIntent != null) {
      try {
        sentIntent.send(Activity.RESULT_OK);
      }
 catch (      CanceledException ex) {
      }
    }
  }
 else {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"");
    }
    int ss=mPhone.getServiceState().getState();
    if (ss != ServiceState.STATE_IN_SERVICE) {
      handleNotInService(ss,tracker);
    }
 else     if ((((CommandException)(ar.exception)).getCommandError() == CommandException.Error.SMS_FAIL_RETRY) && tracker.mRetryCount < MAX_SEND_RETRIES) {
      tracker.mRetryCount++;
      Message retryMsg=obtainMessage(EVENT_SEND_RETRY,tracker);
      sendMessageDelayed(retryMsg,SEND_RETRY_DELAY);
    }
 else     if (tracker.mSentIntent != null) {
      int error=RESULT_ERROR_GENERIC_FAILURE;
      if (((CommandException)(ar.exception)).getCommandError() == CommandException.Error.FDN_CHECK_FAILURE) {
        error=RESULT_ERROR_FDN_CHECK_FAILURE;
      }
      try {
        Intent fillIn=new Intent();
        if (ar.result != null) {
          fillIn.putExtra(""String_Node_Str"",((SmsResponse)ar.result).errorCode);
        }
        tracker.mSentIntent.send(mContext,error,fillIn);
      }
 catch (      CanceledException ex) {
      }
    }
  }
}","/** 
 * Called when SMS send completes. Broadcasts a sentIntent on success. On failure, either sets up retries or broadcasts a sentIntent with the failure in the result code.
 * @param ar AsyncResult passed into the message handler.  ar.result shouldan SmsResponse instance if send was successful.  ar.userObj should be an SmsTracker instance.
 */
protected void handleSendComplete(AsyncResult ar){
  SmsTracker tracker=(SmsTracker)ar.userObj;
  PendingIntent sentIntent=tracker.mSentIntent;
  if (ar.exception == null) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + sentIntent);
    }
    if (tracker.mDeliveryIntent != null) {
      int messageRef=((SmsResponse)ar.result).messageRef;
      tracker.mMessageRef=messageRef;
      deliveryPendingList.add(tracker);
    }
    if (sentIntent != null) {
      try {
        if (mRemainingMessages > -1) {
          mRemainingMessages--;
        }
        if (mRemainingMessages == 0) {
          Intent sendNext=new Intent();
          sendNext.putExtra(SEND_NEXT_MSG_EXTRA,true);
          sentIntent.send(mContext,Activity.RESULT_OK,sendNext);
        }
 else {
          sentIntent.send(Activity.RESULT_OK);
        }
      }
 catch (      CanceledException ex) {
      }
    }
  }
 else {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"");
    }
    int ss=mPhone.getServiceState().getState();
    if (ss != ServiceState.STATE_IN_SERVICE) {
      handleNotInService(ss,tracker);
    }
 else     if ((((CommandException)(ar.exception)).getCommandError() == CommandException.Error.SMS_FAIL_RETRY) && tracker.mRetryCount < MAX_SEND_RETRIES) {
      tracker.mRetryCount++;
      Message retryMsg=obtainMessage(EVENT_SEND_RETRY,tracker);
      sendMessageDelayed(retryMsg,SEND_RETRY_DELAY);
    }
 else     if (tracker.mSentIntent != null) {
      int error=RESULT_ERROR_GENERIC_FAILURE;
      if (((CommandException)(ar.exception)).getCommandError() == CommandException.Error.FDN_CHECK_FAILURE) {
        error=RESULT_ERROR_FDN_CHECK_FAILURE;
      }
      try {
        Intent fillIn=new Intent();
        if (ar.result != null) {
          fillIn.putExtra(""String_Node_Str"",((SmsResponse)ar.result).errorCode);
        }
        if (mRemainingMessages > -1) {
          mRemainingMessages--;
        }
        if (mRemainingMessages == 0) {
          fillIn.putExtra(SEND_NEXT_MSG_EXTRA,true);
        }
        tracker.mSentIntent.send(mContext,error,fillIn);
      }
 catch (      CanceledException ex) {
      }
    }
  }
}"
21711,"/** 
 * Send a multi-part text based SMS which already passed SMS control check. It is the working function for sendMultipartText().
 * @param destinationAddress the address to send the message to
 * @param scAddress is the service center address or null to usethe current default SMSC
 * @param parts an <code>ArrayList</code> of strings that, in order,comprise the original message
 * @param sentIntents if not null, an <code>ArrayList</code> of<code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors: <code>RESULT_ERROR_GENERIC_FAILURE</code> <code>RESULT_ERROR_RADIO_OFF</code> <code>RESULT_ERROR_NULL_PDU</code>.
 * @param deliveryIntents if not null, an <code>ArrayList</code> of<code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient.  The raw pdu of the status report is in the extended data (""pdu"").
 */
private void sendMultipartTextWithPermit(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){
  int ss=mPhone.getServiceState().getState();
  if (ss != ServiceState.STATE_IN_SERVICE) {
    for (int i=0, count=parts.size(); i < count; i++) {
      PendingIntent sentIntent=null;
      if (sentIntents != null && sentIntents.size() > i) {
        sentIntent=sentIntents.get(i);
      }
      SmsTracker tracker=SmsTrackerFactory(null,sentIntent,null);
      handleNotInService(ss,tracker);
    }
    return;
  }
  int refNumber=getNextConcatenatedRef() & 0x00FF;
  int msgCount=parts.size();
  int encoding=android.telephony.SmsMessage.ENCODING_UNKNOWN;
  for (int i=0; i < msgCount; i++) {
    TextEncodingDetails details=SmsMessage.calculateLength(parts.get(i),false);
    if (encoding != details.codeUnitSize && (encoding == android.telephony.SmsMessage.ENCODING_UNKNOWN || encoding == android.telephony.SmsMessage.ENCODING_7BIT)) {
      encoding=details.codeUnitSize;
    }
  }
  for (int i=0; i < msgCount; i++) {
    SmsHeader.ConcatRef concatRef=new SmsHeader.ConcatRef();
    concatRef.refNumber=refNumber;
    concatRef.seqNumber=i + 1;
    concatRef.msgCount=msgCount;
    concatRef.isEightBits=false;
    SmsHeader smsHeader=new SmsHeader();
    smsHeader.concatRef=concatRef;
    PendingIntent sentIntent=null;
    if (sentIntents != null && sentIntents.size() > i) {
      sentIntent=sentIntents.get(i);
    }
    PendingIntent deliveryIntent=null;
    if (deliveryIntents != null && deliveryIntents.size() > i) {
      deliveryIntent=deliveryIntents.get(i);
    }
    SmsMessage.SubmitPdu pdus=SmsMessage.getSubmitPdu(scAddress,destinationAddress,parts.get(i),deliveryIntent != null,SmsHeader.toByteArray(smsHeader),encoding);
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(""String_Node_Str"",pdus.encodedScAddress);
    map.put(""String_Node_Str"",pdus.encodedMessage);
    SmsTracker tracker=SmsTrackerFactory(map,sentIntent,deliveryIntent);
    sendSms(tracker);
  }
}","/** 
 * Send a multi-part text based SMS which already passed SMS control check. It is the working function for sendMultipartText().
 * @param destinationAddress the address to send the message to
 * @param scAddress is the service center address or null to usethe current default SMSC
 * @param parts an <code>ArrayList</code> of strings that, in order,comprise the original message
 * @param sentIntents if not null, an <code>ArrayList</code> of<code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been sent. The result code will be <code>Activity.RESULT_OK<code> for success, or one of these errors: <code>RESULT_ERROR_GENERIC_FAILURE</code> <code>RESULT_ERROR_RADIO_OFF</code> <code>RESULT_ERROR_NULL_PDU</code>.
 * @param deliveryIntents if not null, an <code>ArrayList</code> of<code>PendingIntent</code>s (one for each message part) that is broadcast when the corresponding message part has been delivered to the recipient.  The raw pdu of the status report is in the extended data (""pdu"").
 */
private void sendMultipartTextWithPermit(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){
  int ss=mPhone.getServiceState().getState();
  if (ss != ServiceState.STATE_IN_SERVICE) {
    for (int i=0, count=parts.size(); i < count; i++) {
      PendingIntent sentIntent=null;
      if (sentIntents != null && sentIntents.size() > i) {
        sentIntent=sentIntents.get(i);
      }
      SmsTracker tracker=SmsTrackerFactory(null,sentIntent,null);
      handleNotInService(ss,tracker);
    }
    return;
  }
  int refNumber=getNextConcatenatedRef() & 0x00FF;
  int msgCount=parts.size();
  int encoding=android.telephony.SmsMessage.ENCODING_UNKNOWN;
  mRemainingMessages=msgCount;
  for (int i=0; i < msgCount; i++) {
    TextEncodingDetails details=SmsMessage.calculateLength(parts.get(i),false);
    if (encoding != details.codeUnitSize && (encoding == android.telephony.SmsMessage.ENCODING_UNKNOWN || encoding == android.telephony.SmsMessage.ENCODING_7BIT)) {
      encoding=details.codeUnitSize;
    }
  }
  for (int i=0; i < msgCount; i++) {
    SmsHeader.ConcatRef concatRef=new SmsHeader.ConcatRef();
    concatRef.refNumber=refNumber;
    concatRef.seqNumber=i + 1;
    concatRef.msgCount=msgCount;
    concatRef.isEightBits=false;
    SmsHeader smsHeader=new SmsHeader();
    smsHeader.concatRef=concatRef;
    PendingIntent sentIntent=null;
    if (sentIntents != null && sentIntents.size() > i) {
      sentIntent=sentIntents.get(i);
    }
    PendingIntent deliveryIntent=null;
    if (deliveryIntents != null && deliveryIntents.size() > i) {
      deliveryIntent=deliveryIntents.get(i);
    }
    SmsMessage.SubmitPdu pdus=SmsMessage.getSubmitPdu(scAddress,destinationAddress,parts.get(i),deliveryIntent != null,SmsHeader.toByteArray(smsHeader),encoding);
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(""String_Node_Str"",pdus.encodedScAddress);
    map.put(""String_Node_Str"",pdus.encodedMessage);
    SmsTracker tracker=SmsTrackerFactory(map,sentIntent,deliveryIntent);
    sendSms(tracker);
  }
}"
21712,"/** 
 * {@inheritDoc} 
 */
protected void sendMultipartText(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){
  int refNumber=getNextConcatenatedRef() & 0x00FF;
  int msgCount=parts.size();
  int encoding=android.telephony.SmsMessage.ENCODING_UNKNOWN;
  for (int i=0; i < msgCount; i++) {
    TextEncodingDetails details=SmsMessage.calculateLength(parts.get(i),false);
    if (encoding != details.codeUnitSize && (encoding == android.telephony.SmsMessage.ENCODING_UNKNOWN || encoding == android.telephony.SmsMessage.ENCODING_7BIT)) {
      encoding=details.codeUnitSize;
    }
  }
  for (int i=0; i < msgCount; i++) {
    SmsHeader.ConcatRef concatRef=new SmsHeader.ConcatRef();
    concatRef.refNumber=refNumber;
    concatRef.seqNumber=i + 1;
    concatRef.msgCount=msgCount;
    concatRef.isEightBits=true;
    SmsHeader smsHeader=new SmsHeader();
    smsHeader.concatRef=concatRef;
    PendingIntent sentIntent=null;
    if (sentIntents != null && sentIntents.size() > i) {
      sentIntent=sentIntents.get(i);
    }
    PendingIntent deliveryIntent=null;
    if (deliveryIntents != null && deliveryIntents.size() > i) {
      deliveryIntent=deliveryIntents.get(i);
    }
    SmsMessage.SubmitPdu pdus=SmsMessage.getSubmitPdu(scAddress,destinationAddress,parts.get(i),deliveryIntent != null,SmsHeader.toByteArray(smsHeader),encoding);
    sendRawPdu(pdus.encodedScAddress,pdus.encodedMessage,sentIntent,deliveryIntent);
  }
}","/** 
 * {@inheritDoc} 
 */
protected void sendMultipartText(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){
  int refNumber=getNextConcatenatedRef() & 0x00FF;
  int msgCount=parts.size();
  int encoding=android.telephony.SmsMessage.ENCODING_UNKNOWN;
  mRemainingMessages=msgCount;
  for (int i=0; i < msgCount; i++) {
    TextEncodingDetails details=SmsMessage.calculateLength(parts.get(i),false);
    if (encoding != details.codeUnitSize && (encoding == android.telephony.SmsMessage.ENCODING_UNKNOWN || encoding == android.telephony.SmsMessage.ENCODING_7BIT)) {
      encoding=details.codeUnitSize;
    }
  }
  for (int i=0; i < msgCount; i++) {
    SmsHeader.ConcatRef concatRef=new SmsHeader.ConcatRef();
    concatRef.refNumber=refNumber;
    concatRef.seqNumber=i + 1;
    concatRef.msgCount=msgCount;
    concatRef.isEightBits=true;
    SmsHeader smsHeader=new SmsHeader();
    smsHeader.concatRef=concatRef;
    PendingIntent sentIntent=null;
    if (sentIntents != null && sentIntents.size() > i) {
      sentIntent=sentIntents.get(i);
    }
    PendingIntent deliveryIntent=null;
    if (deliveryIntents != null && deliveryIntents.size() > i) {
      deliveryIntent=deliveryIntents.get(i);
    }
    SmsMessage.SubmitPdu pdus=SmsMessage.getSubmitPdu(scAddress,destinationAddress,parts.get(i),deliveryIntent != null,SmsHeader.toByteArray(smsHeader),encoding);
    sendRawPdu(pdus.encodedScAddress,pdus.encodedMessage,sentIntent,deliveryIntent);
  }
}"
21713,"/** 
 * Called when a status report is received.  This should correspond to a previously successful SEND.
 * @param ar AsyncResult passed into the message handler.  ar.result shouldbe a String representing the status report PDU, as ASCII hex.
 */
protected void handleStatusReport(AsyncResult ar){
  String pduString=(String)ar.result;
  SmsMessage sms=SmsMessage.newFromCDS(pduString);
  if (sms != null) {
    int messageRef=sms.messageRef;
    for (int i=0, count=deliveryPendingList.size(); i < count; i++) {
      SmsTracker tracker=deliveryPendingList.get(i);
      if (tracker.mMessageRef == messageRef) {
        deliveryPendingList.remove(i);
        PendingIntent intent=tracker.mDeliveryIntent;
        Intent fillIn=new Intent();
        fillIn.putExtra(""String_Node_Str"",IccUtils.hexStringToBytes(pduString));
        try {
          intent.send(mContext,Activity.RESULT_OK,fillIn);
        }
 catch (        CanceledException ex) {
        }
        break;
      }
    }
  }
  acknowledgeLastIncomingSms(true,Intents.RESULT_SMS_HANDLED,null);
}","/** 
 * Called when a status report is received.  This should correspond to a previously successful SEND.
 * @param ar AsyncResult passed into the message handler.  ar.result shouldbe a String representing the status report PDU, as ASCII hex.
 */
protected void handleStatusReport(AsyncResult ar){
  String pduString=(String)ar.result;
  SmsMessage sms=SmsMessage.newFromCDS(pduString);
  int tpStatus=sms.getStatus();
  if (sms != null) {
    int messageRef=sms.messageRef;
    for (int i=0, count=deliveryPendingList.size(); i < count; i++) {
      SmsTracker tracker=deliveryPendingList.get(i);
      if (tracker.mMessageRef == messageRef) {
        if (tpStatus >= Sms.STATUS_FAILED || tpStatus < Sms.STATUS_PENDING) {
          deliveryPendingList.remove(i);
        }
        PendingIntent intent=tracker.mDeliveryIntent;
        Intent fillIn=new Intent();
        fillIn.putExtra(""String_Node_Str"",IccUtils.hexStringToBytes(pduString));
        try {
          intent.send(mContext,Activity.RESULT_OK,fillIn);
        }
 catch (        CanceledException ex) {
        }
        break;
      }
    }
  }
  acknowledgeLastIncomingSms(true,Intents.RESULT_SMS_HANDLED,null);
}"
21714,"public static ApplicationInfo generateApplicationInfo(Package p,int flags){
  if (p == null)   return null;
  if (!copyNeeded(flags,p,null)) {
    if (!sCompatibilityModeEnabled) {
      p.applicationInfo.disableCompatibilityMode();
    }
    return p.applicationInfo;
  }
  ApplicationInfo ai=new ApplicationInfo(p.applicationInfo);
  if ((flags & PackageManager.GET_META_DATA) != 0) {
    ai.metaData=p.mAppMetaData;
  }
  if ((flags & PackageManager.GET_SHARED_LIBRARY_FILES) != 0) {
    ai.sharedLibraryFiles=p.usesLibraryFiles;
  }
  if (!sCompatibilityModeEnabled) {
    ai.disableCompatibilityMode();
  }
  ai.enabled=p.mSetEnabled == PackageManager.COMPONENT_ENABLED_STATE_ENABLED;
  return ai;
}","public static ApplicationInfo generateApplicationInfo(Package p,int flags){
  if (p == null)   return null;
  if (!copyNeeded(flags,p,null)) {
    if (!sCompatibilityModeEnabled) {
      p.applicationInfo.disableCompatibilityMode();
    }
    return p.applicationInfo;
  }
  ApplicationInfo ai=new ApplicationInfo(p.applicationInfo);
  if ((flags & PackageManager.GET_META_DATA) != 0) {
    ai.metaData=p.mAppMetaData;
  }
  if ((flags & PackageManager.GET_SHARED_LIBRARY_FILES) != 0) {
    ai.sharedLibraryFiles=p.usesLibraryFiles;
  }
  if (!sCompatibilityModeEnabled) {
    ai.disableCompatibilityMode();
  }
  if (p.mSetEnabled == PackageManager.COMPONENT_ENABLED_STATE_ENABLED) {
    ai.enabled=true;
  }
 else   if (p.mSetEnabled == PackageManager.COMPONENT_ENABLED_STATE_DISABLED) {
    ai.enabled=false;
  }
  return ai;
}"
21715,"public void run(String[] args){
  boolean validCommand=false;
  if (args.length < 1) {
    showUsage();
    return;
  }
  mPm=IPackageManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
  if (mPm == null) {
    System.err.println(PM_NOT_RUNNING_ERR);
    return;
  }
  mArgs=args;
  String op=args[0];
  mNextArg=1;
  if (""String_Node_Str"".equals(op)) {
    runList();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runPath();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runInstall();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runUninstall();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_ENABLED);
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED);
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetInstallLocation();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runGetInstallLocation();
    return;
  }
  try {
    if (args.length == 1) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        runListPackages(false);
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        runListPackages(true);
      }
    }
 else     if (args.length == 2) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        displayPackageFilePath(args[1]);
      }
    }
  }
  finally {
    if (validCommand == false) {
      if (op != null) {
        System.err.println(""String_Node_Str"" + op + ""String_Node_Str"");
      }
      showUsage();
    }
  }
}","public void run(String[] args){
  boolean validCommand=false;
  if (args.length < 1) {
    showUsage();
    return;
  }
  mPm=IPackageManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
  if (mPm == null) {
    System.err.println(PM_NOT_RUNNING_ERR);
    return;
  }
  mArgs=args;
  String op=args[0];
  mNextArg=1;
  if (""String_Node_Str"".equals(op)) {
    runList();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runPath();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runInstall();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runUninstall();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runClear();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_ENABLED);
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED);
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetInstallLocation();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runGetInstallLocation();
    return;
  }
  try {
    if (args.length == 1) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        runListPackages(false);
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        runListPackages(true);
      }
    }
 else     if (args.length == 2) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        displayPackageFilePath(args[1]);
      }
    }
  }
  finally {
    if (validCommand == false) {
      if (op != null) {
        System.err.println(""String_Node_Str"" + op + ""String_Node_Str"");
      }
      showUsage();
    }
  }
}"
21716,"private static void showUsage(){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
}","private static void showUsage(){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
}"
21717,"PackageSetting(String name,String realName,File codePath,File resourcePath,String nativeLibraryPathString,int pVersionCode,int pkgFlags){
  super(name,realName,codePath,resourcePath,nativeLibraryPathString,pVersionCode,pkgFlags);
}","PackageSetting(PackageSetting orig){
  super(orig.name,orig.realName,orig.codePath,orig.resourcePath,orig.nativeLibraryPathString,orig.versionCode,orig.pkgFlags);
  copyFrom(orig);
}"
21718,"private void replaceSystemPackageLI(PackageParser.Package deletedPackage,PackageParser.Package pkg,int parseFlags,int scanMode,String installerPackageName,PackageInstalledInfo res){
  PackageParser.Package newPackage=null;
  boolean updatedSettings=false;
  parseFlags|=PackageManager.INSTALL_REPLACE_EXISTING | PackageParser.PARSE_IS_SYSTEM;
  String packageName=deletedPackage.packageName;
  res.returnCode=PackageManager.INSTALL_FAILED_REPLACE_COULDNT_DELETE;
  if (packageName == null) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      Slog.w(TAG,""String_Node_Str"" + packageName + ""String_Node_Str"");
      return;
    }
  }
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkg,true);
synchronized (mPackages) {
    mSettings.disableSystemPackageLP(packageName);
  }
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  newPackage=scanPackageLI(pkg,parseFlags,scanMode,0);
  if (newPackage == null) {
    Slog.w(TAG,""String_Node_Str"" + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    updatedSettings=true;
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removePackageLI(newPackage,true);
    }
    scanPackageLI(oldPkg,parseFlags,SCAN_MONITOR | SCAN_UPDATE_SIGNATURE,0);
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLP(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLP();
    }
  }
 else {
synchronized (mPackages) {
      PackageSetting ps=mSettings.getDisabledSystemPkg(packageName);
      if (ps != null && ps.codePathString != null && !ps.codePathString.equals(oldPkgSetting.codePathString)) {
        res.removedInfo.args=createInstallArgs(0,oldPkgSetting.codePathString,oldPkgSetting.resourcePathString,oldPkgSetting.nativeLibraryPathString);
      }
    }
  }
}","private void replaceSystemPackageLI(PackageParser.Package deletedPackage,PackageParser.Package pkg,int parseFlags,int scanMode,String installerPackageName,PackageInstalledInfo res){
  PackageParser.Package newPackage=null;
  boolean updatedSettings=false;
  parseFlags|=PackageManager.INSTALL_REPLACE_EXISTING | PackageParser.PARSE_IS_SYSTEM;
  String packageName=deletedPackage.packageName;
  res.returnCode=PackageManager.INSTALL_FAILED_REPLACE_COULDNT_DELETE;
  if (packageName == null) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      Slog.w(TAG,""String_Node_Str"" + packageName + ""String_Node_Str"");
      return;
    }
  }
  killApplication(packageName,oldPkg.applicationInfo.uid);
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkg,true);
synchronized (mPackages) {
    if (!mSettings.disableSystemPackageLP(packageName) && deletedPackage != null) {
      res.removedInfo.args=createInstallArgs(isExternal(pkg) ? PackageManager.INSTALL_EXTERNAL : PackageManager.INSTALL_INTERNAL,deletedPackage.applicationInfo.sourceDir,deletedPackage.applicationInfo.publicSourceDir,deletedPackage.applicationInfo.nativeLibraryDir);
    }
 else {
      res.removedInfo.args=null;
    }
  }
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  newPackage=scanPackageLI(pkg,parseFlags,scanMode,0);
  if (newPackage == null) {
    Slog.w(TAG,""String_Node_Str"" + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    updatedSettings=true;
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removePackageLI(newPackage,true);
    }
    scanPackageLI(oldPkg,parseFlags,SCAN_MONITOR | SCAN_UPDATE_SIGNATURE,0);
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLP(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLP();
    }
  }
}"
21719,"private boolean deleteSystemPackageLI(PackageParser.Package p,int flags,PackageRemovedInfo outInfo,boolean writeSettings){
  ApplicationInfo applicationInfo=p.applicationInfo;
  if (applicationInfo == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str"");
    return false;
  }
  PackageSetting ps=null;
synchronized (mPackages) {
    ps=mSettings.getDisabledSystemPkg(p.packageName);
  }
  if (ps == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName);
    return false;
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
  outInfo.isRemovedPackageSystemUpdate=true;
  final boolean deleteCodeAndResources;
  if (ps.versionCode < p.mVersionCode) {
    deleteCodeAndResources=true;
    flags&=~PackageManager.DONT_DELETE_DATA;
  }
 else {
    deleteCodeAndResources=false;
    flags|=PackageManager.DONT_DELETE_DATA;
  }
  boolean ret=deleteInstalledPackageLI(p,deleteCodeAndResources,flags,outInfo,writeSettings);
  if (!ret) {
    return false;
  }
synchronized (mPackages) {
    mSettings.enableSystemPackageLP(p.packageName);
    NativeLibraryHelper.removeNativeBinariesLI(p.applicationInfo.nativeLibraryDir);
  }
  PackageParser.Package newPkg=scanPackageLI(ps.codePath,PackageParser.PARSE_MUST_BE_APK | PackageParser.PARSE_IS_SYSTEM,SCAN_MONITOR | SCAN_NO_PATHS,0);
  if (newPkg == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str""+ mLastScanError);
    return false;
  }
synchronized (mPackages) {
    updatePermissionsLP(newPkg.packageName,newPkg,true,true,false);
    if (writeSettings) {
      mSettings.writeLP();
    }
  }
  return true;
}","private boolean deleteSystemPackageLI(PackageParser.Package p,int flags,PackageRemovedInfo outInfo,boolean writeSettings){
  ApplicationInfo applicationInfo=p.applicationInfo;
  if (applicationInfo == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str"");
    return false;
  }
  PackageSetting ps=null;
synchronized (mPackages) {
    ps=mSettings.getDisabledSystemPkg(p.packageName);
  }
  if (ps == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName);
    return false;
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
  outInfo.isRemovedPackageSystemUpdate=true;
  if (ps.versionCode < p.mVersionCode) {
    flags&=~PackageManager.DONT_DELETE_DATA;
  }
 else {
    flags|=PackageManager.DONT_DELETE_DATA;
  }
  boolean ret=deleteInstalledPackageLI(p,true,flags,outInfo,writeSettings);
  if (!ret) {
    return false;
  }
synchronized (mPackages) {
    mSettings.enableSystemPackageLP(p.packageName);
    NativeLibraryHelper.removeNativeBinariesLI(p.applicationInfo.nativeLibraryDir);
  }
  PackageParser.Package newPkg=scanPackageLI(ps.codePath,PackageParser.PARSE_MUST_BE_APK | PackageParser.PARSE_IS_SYSTEM,SCAN_MONITOR | SCAN_NO_PATHS,0);
  if (newPkg == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str""+ mLastScanError);
    return false;
  }
synchronized (mPackages) {
    updatePermissionsLP(newPkg.packageName,newPkg,true,true,false);
    if (writeSettings) {
      mSettings.writeLP();
    }
  }
  return true;
}"
21720,"int disableSystemPackageLP(String name){
  PackageSetting p=mPackages.get(name);
  if (p == null) {
    Log.w(TAG,""String_Node_Str"" + name + ""String_Node_Str"");
    return -1;
  }
  PackageSetting dp=mDisabledSysPackages.get(name);
  if (dp == null) {
    if ((p.pkg != null) && (p.pkg.applicationInfo != null)) {
      p.pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
    }
    mDisabledSysPackages.put(name,p);
  }
  return removePackageLP(name);
}","boolean disableSystemPackageLP(String name){
  PackageSetting p=mPackages.get(name);
  if (p == null) {
    Log.w(TAG,""String_Node_Str"" + name + ""String_Node_Str"");
    return false;
  }
  PackageSetting dp=mDisabledSysPackages.get(name);
  if (dp == null) {
    if ((p.pkg != null) && (p.pkg.applicationInfo != null)) {
      p.pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
    }
    mDisabledSysPackages.put(name,p);
    PackageSetting newp=new PackageSetting(p);
    replacePackageLP(name,newp);
    return true;
  }
  return false;
}"
21721,"void removePackageLI(PackageParser.Package pkg,boolean chatty){
  if (chatty && Config.LOGD)   Log.d(TAG,""String_Node_Str"" + pkg.applicationInfo.packageName);
synchronized (mPackages) {
    clearPackagePreferredActivitiesLP(pkg.packageName);
    mPackages.remove(pkg.applicationInfo.packageName);
    if (pkg.mPath != null) {
      mAppDirs.remove(pkg.mPath);
    }
    PackageSetting ps=(PackageSetting)pkg.mExtras;
    if (ps != null && ps.sharedUser != null) {
      if (false) {
        ps.sharedUser.packages.remove(ps);
        if (ps.sharedUser.packages.size() == 0) {
        }
      }
    }
    int N=pkg.providers.size();
    StringBuilder r=null;
    int i;
    for (i=0; i < N; i++) {
      PackageParser.Provider p=pkg.providers.get(i);
      mProvidersByComponent.remove(new ComponentName(p.info.packageName,p.info.name));
      if (p.info.authority == null) {
        continue;
      }
      String names[]=p.info.authority.split(""String_Node_Str"");
      for (int j=0; j < names.length; j++) {
        if (mProviders.get(names[j]) == p) {
          mProviders.remove(names[j]);
          if (chatty && Config.LOGD)           Log.d(TAG,""String_Node_Str"" + names[j] + ""String_Node_Str""+ p.info.name+ ""String_Node_Str""+ p.info.isSyncable);
        }
      }
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(p.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.services.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Service s=pkg.services.get(i);
      mServices.removeService(s);
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(s.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.receivers.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Activity a=pkg.receivers.get(i);
      mReceivers.removeActivity(a,""String_Node_Str"");
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.activities.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Activity a=pkg.activities.get(i);
      mActivities.removeActivity(a,""String_Node_Str"");
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.permissions.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Permission p=pkg.permissions.get(i);
      boolean tree=false;
      BasePermission bp=mSettings.mPermissions.get(p.info.name);
      if (bp == null) {
        tree=true;
        bp=mSettings.mPermissionTrees.get(p.info.name);
      }
      if (bp != null && bp.perm == p) {
        bp.perm=null;
        if (chatty) {
          if (r == null) {
            r=new StringBuilder(256);
          }
 else {
            r.append(' ');
          }
          r.append(p.info.name);
        }
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.instrumentation.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Instrumentation a=pkg.instrumentation.get(i);
      mInstrumentation.remove(a.getComponentName());
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
  }
}","void removePackageLI(PackageParser.Package pkg,boolean chatty){
  if (chatty && Config.LOGD)   Log.d(TAG,""String_Node_Str"" + pkg.applicationInfo.packageName);
synchronized (mPackages) {
    clearPackagePreferredActivitiesLP(pkg.packageName);
    mPackages.remove(pkg.applicationInfo.packageName);
    if (pkg.mPath != null) {
      mAppDirs.remove(pkg.mPath);
    }
    int N=pkg.providers.size();
    StringBuilder r=null;
    int i;
    for (i=0; i < N; i++) {
      PackageParser.Provider p=pkg.providers.get(i);
      mProvidersByComponent.remove(new ComponentName(p.info.packageName,p.info.name));
      if (p.info.authority == null) {
        continue;
      }
      String names[]=p.info.authority.split(""String_Node_Str"");
      for (int j=0; j < names.length; j++) {
        if (mProviders.get(names[j]) == p) {
          mProviders.remove(names[j]);
          if (chatty && Config.LOGD)           Log.d(TAG,""String_Node_Str"" + names[j] + ""String_Node_Str""+ p.info.name+ ""String_Node_Str""+ p.info.isSyncable);
        }
      }
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(p.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.services.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Service s=pkg.services.get(i);
      mServices.removeService(s);
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(s.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.receivers.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Activity a=pkg.receivers.get(i);
      mReceivers.removeActivity(a,""String_Node_Str"");
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.activities.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Activity a=pkg.activities.get(i);
      mActivities.removeActivity(a,""String_Node_Str"");
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.permissions.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Permission p=pkg.permissions.get(i);
      boolean tree=false;
      BasePermission bp=mSettings.mPermissions.get(p.info.name);
      if (bp == null) {
        tree=true;
        bp=mSettings.mPermissionTrees.get(p.info.name);
      }
      if (bp != null && bp.perm == p) {
        bp.perm=null;
        if (chatty) {
          if (r == null) {
            r=new StringBuilder(256);
          }
 else {
            r.append(' ');
          }
          r.append(p.info.name);
        }
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.instrumentation.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Instrumentation a=pkg.instrumentation.get(i);
      mInstrumentation.remove(a.getComponentName());
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
  }
}"
21722,"public void run(String[] args){
  boolean validCommand=false;
  if (args.length < 1) {
    showUsage();
    return;
  }
  mPm=IPackageManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
  if (mPm == null) {
    System.err.println(PM_NOT_RUNNING_ERR);
    return;
  }
  mArgs=args;
  String op=args[0];
  mNextArg=1;
  if (""String_Node_Str"".equals(op)) {
    runList();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runPath();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runInstall();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runUninstall();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_ENABLED);
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED);
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetInstallLocation();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runGetInstallLocation();
    return;
  }
  try {
    if (args.length == 1) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        runListPackages(false);
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        runListPackages(true);
      }
    }
 else     if (args.length == 2) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        displayPackageFilePath(args[1]);
      }
    }
  }
  finally {
    if (validCommand == false) {
      if (op != null) {
        System.err.println(""String_Node_Str"" + op + ""String_Node_Str"");
      }
      showUsage();
    }
  }
}","public void run(String[] args){
  boolean validCommand=false;
  if (args.length < 1) {
    showUsage();
    return;
  }
  mPm=IPackageManager.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
  if (mPm == null) {
    System.err.println(PM_NOT_RUNNING_ERR);
    return;
  }
  mArgs=args;
  String op=args[0];
  mNextArg=1;
  if (""String_Node_Str"".equals(op)) {
    runList();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runPath();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runInstall();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runUninstall();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runClear();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_ENABLED);
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED);
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runSetInstallLocation();
    return;
  }
  if (""String_Node_Str"".equals(op)) {
    runGetInstallLocation();
    return;
  }
  try {
    if (args.length == 1) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        runListPackages(false);
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        runListPackages(true);
      }
    }
 else     if (args.length == 2) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        validCommand=true;
        displayPackageFilePath(args[1]);
      }
    }
  }
  finally {
    if (validCommand == false) {
      if (op != null) {
        System.err.println(""String_Node_Str"" + op + ""String_Node_Str"");
      }
      showUsage();
    }
  }
}"
21723,"private static void showUsage(){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
}","private static void showUsage(){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
}"
21724,"PackageSetting(String name,String realName,File codePath,File resourcePath,String nativeLibraryPathString,int pVersionCode,int pkgFlags){
  super(name,realName,codePath,resourcePath,nativeLibraryPathString,pVersionCode,pkgFlags);
}","PackageSetting(PackageSetting orig){
  super(orig.name,orig.realName,orig.codePath,orig.resourcePath,orig.nativeLibraryPathString,orig.versionCode,orig.pkgFlags);
  copyFrom(orig);
}"
21725,"private void replaceSystemPackageLI(PackageParser.Package deletedPackage,PackageParser.Package pkg,int parseFlags,int scanMode,String installerPackageName,PackageInstalledInfo res){
  PackageParser.Package newPackage=null;
  boolean updatedSettings=false;
  parseFlags|=PackageManager.INSTALL_REPLACE_EXISTING | PackageParser.PARSE_IS_SYSTEM;
  String packageName=deletedPackage.packageName;
  res.returnCode=PackageManager.INSTALL_FAILED_REPLACE_COULDNT_DELETE;
  if (packageName == null) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      Slog.w(TAG,""String_Node_Str"" + packageName + ""String_Node_Str"");
      return;
    }
  }
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkg,true);
synchronized (mPackages) {
    mSettings.disableSystemPackageLP(packageName);
  }
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  newPackage=scanPackageLI(pkg,parseFlags,scanMode,0);
  if (newPackage == null) {
    Slog.w(TAG,""String_Node_Str"" + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    updatedSettings=true;
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removePackageLI(newPackage,true);
    }
    scanPackageLI(oldPkg,parseFlags,SCAN_MONITOR | SCAN_UPDATE_SIGNATURE,0);
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLP(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLP();
    }
  }
 else {
synchronized (mPackages) {
      PackageSetting ps=mSettings.getDisabledSystemPkg(packageName);
      if (ps != null && ps.codePathString != null && !ps.codePathString.equals(oldPkgSetting.codePathString)) {
        res.removedInfo.args=createInstallArgs(0,oldPkgSetting.codePathString,oldPkgSetting.resourcePathString,oldPkgSetting.nativeLibraryPathString);
      }
    }
  }
}","private void replaceSystemPackageLI(PackageParser.Package deletedPackage,PackageParser.Package pkg,int parseFlags,int scanMode,String installerPackageName,PackageInstalledInfo res){
  PackageParser.Package newPackage=null;
  boolean updatedSettings=false;
  parseFlags|=PackageManager.INSTALL_REPLACE_EXISTING | PackageParser.PARSE_IS_SYSTEM;
  String packageName=deletedPackage.packageName;
  res.returnCode=PackageManager.INSTALL_FAILED_REPLACE_COULDNT_DELETE;
  if (packageName == null) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      Slog.w(TAG,""String_Node_Str"" + packageName + ""String_Node_Str"");
      return;
    }
  }
  killApplication(packageName,oldPkg.applicationInfo.uid);
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkg,true);
synchronized (mPackages) {
    if (!mSettings.disableSystemPackageLP(packageName) && deletedPackage != null) {
      res.removedInfo.args=createInstallArgs(isExternal(pkg) ? PackageManager.INSTALL_EXTERNAL : PackageManager.INSTALL_INTERNAL,deletedPackage.applicationInfo.sourceDir,deletedPackage.applicationInfo.publicSourceDir,deletedPackage.applicationInfo.nativeLibraryDir);
    }
 else {
      res.removedInfo.args=null;
    }
  }
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  newPackage=scanPackageLI(pkg,parseFlags,scanMode,0);
  if (newPackage == null) {
    Slog.w(TAG,""String_Node_Str"" + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    updatedSettings=true;
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removePackageLI(newPackage,true);
    }
    scanPackageLI(oldPkg,parseFlags,SCAN_MONITOR | SCAN_UPDATE_SIGNATURE,0);
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLP(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLP();
    }
  }
}"
21726,"private boolean deleteSystemPackageLI(PackageParser.Package p,int flags,PackageRemovedInfo outInfo,boolean writeSettings){
  ApplicationInfo applicationInfo=p.applicationInfo;
  if (applicationInfo == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str"");
    return false;
  }
  PackageSetting ps=null;
synchronized (mPackages) {
    ps=mSettings.getDisabledSystemPkg(p.packageName);
  }
  if (ps == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName);
    return false;
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
  outInfo.isRemovedPackageSystemUpdate=true;
  final boolean deleteCodeAndResources;
  if (ps.versionCode < p.mVersionCode) {
    deleteCodeAndResources=true;
    flags&=~PackageManager.DONT_DELETE_DATA;
  }
 else {
    deleteCodeAndResources=false;
    flags|=PackageManager.DONT_DELETE_DATA;
  }
  boolean ret=deleteInstalledPackageLI(p,deleteCodeAndResources,flags,outInfo,writeSettings);
  if (!ret) {
    return false;
  }
synchronized (mPackages) {
    mSettings.enableSystemPackageLP(p.packageName);
    NativeLibraryHelper.removeNativeBinariesLI(p.applicationInfo.nativeLibraryDir);
  }
  PackageParser.Package newPkg=scanPackageLI(ps.codePath,PackageParser.PARSE_MUST_BE_APK | PackageParser.PARSE_IS_SYSTEM,SCAN_MONITOR | SCAN_NO_PATHS,0);
  if (newPkg == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str""+ mLastScanError);
    return false;
  }
synchronized (mPackages) {
    updatePermissionsLP(newPkg.packageName,newPkg,true,true,false);
    if (writeSettings) {
      mSettings.writeLP();
    }
  }
  return true;
}","private boolean deleteSystemPackageLI(PackageParser.Package p,int flags,PackageRemovedInfo outInfo,boolean writeSettings){
  ApplicationInfo applicationInfo=p.applicationInfo;
  if (applicationInfo == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str"");
    return false;
  }
  PackageSetting ps=null;
synchronized (mPackages) {
    ps=mSettings.getDisabledSystemPkg(p.packageName);
  }
  if (ps == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName);
    return false;
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
  outInfo.isRemovedPackageSystemUpdate=true;
  if (ps.versionCode < p.mVersionCode) {
    flags&=~PackageManager.DONT_DELETE_DATA;
  }
 else {
    flags|=PackageManager.DONT_DELETE_DATA;
  }
  boolean ret=deleteInstalledPackageLI(p,true,flags,outInfo,writeSettings);
  if (!ret) {
    return false;
  }
synchronized (mPackages) {
    mSettings.enableSystemPackageLP(p.packageName);
    NativeLibraryHelper.removeNativeBinariesLI(p.applicationInfo.nativeLibraryDir);
  }
  PackageParser.Package newPkg=scanPackageLI(ps.codePath,PackageParser.PARSE_MUST_BE_APK | PackageParser.PARSE_IS_SYSTEM,SCAN_MONITOR | SCAN_NO_PATHS,0);
  if (newPkg == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str""+ mLastScanError);
    return false;
  }
synchronized (mPackages) {
    updatePermissionsLP(newPkg.packageName,newPkg,true,true,false);
    if (writeSettings) {
      mSettings.writeLP();
    }
  }
  return true;
}"
21727,"int disableSystemPackageLP(String name){
  PackageSetting p=mPackages.get(name);
  if (p == null) {
    Log.w(TAG,""String_Node_Str"" + name + ""String_Node_Str"");
    return -1;
  }
  PackageSetting dp=mDisabledSysPackages.get(name);
  if (dp == null) {
    if ((p.pkg != null) && (p.pkg.applicationInfo != null)) {
      p.pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
    }
    mDisabledSysPackages.put(name,p);
  }
  return removePackageLP(name);
}","boolean disableSystemPackageLP(String name){
  PackageSetting p=mPackages.get(name);
  if (p == null) {
    Log.w(TAG,""String_Node_Str"" + name + ""String_Node_Str"");
    return false;
  }
  PackageSetting dp=mDisabledSysPackages.get(name);
  if (dp == null) {
    if ((p.pkg != null) && (p.pkg.applicationInfo != null)) {
      p.pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
    }
    mDisabledSysPackages.put(name,p);
    PackageSetting newp=new PackageSetting(p);
    replacePackageLP(name,newp);
    return true;
  }
  return false;
}"
21728,"void removePackageLI(PackageParser.Package pkg,boolean chatty){
  if (chatty && Config.LOGD)   Log.d(TAG,""String_Node_Str"" + pkg.applicationInfo.packageName);
synchronized (mPackages) {
    clearPackagePreferredActivitiesLP(pkg.packageName);
    mPackages.remove(pkg.applicationInfo.packageName);
    if (pkg.mPath != null) {
      mAppDirs.remove(pkg.mPath);
    }
    PackageSetting ps=(PackageSetting)pkg.mExtras;
    if (ps != null && ps.sharedUser != null) {
      if (false) {
        ps.sharedUser.packages.remove(ps);
        if (ps.sharedUser.packages.size() == 0) {
        }
      }
    }
    int N=pkg.providers.size();
    StringBuilder r=null;
    int i;
    for (i=0; i < N; i++) {
      PackageParser.Provider p=pkg.providers.get(i);
      mProvidersByComponent.remove(new ComponentName(p.info.packageName,p.info.name));
      if (p.info.authority == null) {
        continue;
      }
      String names[]=p.info.authority.split(""String_Node_Str"");
      for (int j=0; j < names.length; j++) {
        if (mProviders.get(names[j]) == p) {
          mProviders.remove(names[j]);
          if (chatty && Config.LOGD)           Log.d(TAG,""String_Node_Str"" + names[j] + ""String_Node_Str""+ p.info.name+ ""String_Node_Str""+ p.info.isSyncable);
        }
      }
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(p.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.services.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Service s=pkg.services.get(i);
      mServices.removeService(s);
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(s.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.receivers.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Activity a=pkg.receivers.get(i);
      mReceivers.removeActivity(a,""String_Node_Str"");
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.activities.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Activity a=pkg.activities.get(i);
      mActivities.removeActivity(a,""String_Node_Str"");
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.permissions.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Permission p=pkg.permissions.get(i);
      boolean tree=false;
      BasePermission bp=mSettings.mPermissions.get(p.info.name);
      if (bp == null) {
        tree=true;
        bp=mSettings.mPermissionTrees.get(p.info.name);
      }
      if (bp != null && bp.perm == p) {
        bp.perm=null;
        if (chatty) {
          if (r == null) {
            r=new StringBuilder(256);
          }
 else {
            r.append(' ');
          }
          r.append(p.info.name);
        }
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.instrumentation.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Instrumentation a=pkg.instrumentation.get(i);
      mInstrumentation.remove(a.getComponentName());
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
  }
}","void removePackageLI(PackageParser.Package pkg,boolean chatty){
  if (chatty && Config.LOGD)   Log.d(TAG,""String_Node_Str"" + pkg.applicationInfo.packageName);
synchronized (mPackages) {
    clearPackagePreferredActivitiesLP(pkg.packageName);
    mPackages.remove(pkg.applicationInfo.packageName);
    if (pkg.mPath != null) {
      mAppDirs.remove(pkg.mPath);
    }
    int N=pkg.providers.size();
    StringBuilder r=null;
    int i;
    for (i=0; i < N; i++) {
      PackageParser.Provider p=pkg.providers.get(i);
      mProvidersByComponent.remove(new ComponentName(p.info.packageName,p.info.name));
      if (p.info.authority == null) {
        continue;
      }
      String names[]=p.info.authority.split(""String_Node_Str"");
      for (int j=0; j < names.length; j++) {
        if (mProviders.get(names[j]) == p) {
          mProviders.remove(names[j]);
          if (chatty && Config.LOGD)           Log.d(TAG,""String_Node_Str"" + names[j] + ""String_Node_Str""+ p.info.name+ ""String_Node_Str""+ p.info.isSyncable);
        }
      }
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(p.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.services.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Service s=pkg.services.get(i);
      mServices.removeService(s);
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(s.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.receivers.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Activity a=pkg.receivers.get(i);
      mReceivers.removeActivity(a,""String_Node_Str"");
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.activities.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Activity a=pkg.activities.get(i);
      mActivities.removeActivity(a,""String_Node_Str"");
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.permissions.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Permission p=pkg.permissions.get(i);
      boolean tree=false;
      BasePermission bp=mSettings.mPermissions.get(p.info.name);
      if (bp == null) {
        tree=true;
        bp=mSettings.mPermissionTrees.get(p.info.name);
      }
      if (bp != null && bp.perm == p) {
        bp.perm=null;
        if (chatty) {
          if (r == null) {
            r=new StringBuilder(256);
          }
 else {
            r.append(' ');
          }
          r.append(p.info.name);
        }
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
    N=pkg.instrumentation.size();
    r=null;
    for (i=0; i < N; i++) {
      PackageParser.Instrumentation a=pkg.instrumentation.get(i);
      mInstrumentation.remove(a.getComponentName());
      if (chatty) {
        if (r == null) {
          r=new StringBuilder(256);
        }
 else {
          r.append(' ');
        }
        r.append(a.info.name);
      }
    }
    if (r != null) {
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + r);
    }
  }
}"
21729,"@Override public Parcelable onSaveInstanceState(){
  dismissPopup();
  Parcelable superState=super.onSaveInstanceState();
  SavedState ss=new SavedState(superState);
  boolean haveChildren=getChildCount() > 0 && mItemCount > 0;
  long selectedId=getSelectedItemId();
  ss.selectedId=selectedId;
  ss.height=getHeight();
  if (selectedId >= 0) {
    ss.viewTop=mSelectedTop;
    ss.position=getSelectedItemPosition();
    ss.firstId=INVALID_POSITION;
  }
 else {
    if (haveChildren) {
      View v=getChildAt(0);
      ss.viewTop=v.getTop();
      int firstPos=mFirstPosition;
      if (firstPos >= mItemCount) {
        firstPos=mItemCount - 1;
      }
      ss.position=firstPos;
      ss.firstId=mAdapter.getItemId(firstPos);
    }
 else {
      ss.viewTop=0;
      ss.firstId=INVALID_POSITION;
      ss.position=0;
    }
  }
  ss.filter=null;
  if (mFiltered) {
    final EditText textFilter=mTextFilter;
    if (textFilter != null) {
      Editable filterText=textFilter.getText();
      if (filterText != null) {
        ss.filter=filterText.toString();
      }
    }
  }
  return ss;
}","@Override public Parcelable onSaveInstanceState(){
  dismissPopup();
  Parcelable superState=super.onSaveInstanceState();
  SavedState ss=new SavedState(superState);
  boolean haveChildren=getChildCount() > 0 && mItemCount > 0;
  long selectedId=getSelectedItemId();
  ss.selectedId=selectedId;
  ss.height=getHeight();
  if (selectedId >= 0) {
    ss.viewTop=mSelectedTop;
    ss.position=getSelectedItemPosition();
    ss.firstId=INVALID_POSITION;
  }
 else {
    if (haveChildren && mFirstPosition > 0) {
      View v=getChildAt(0);
      ss.viewTop=v.getTop();
      int firstPos=mFirstPosition;
      if (firstPos >= mItemCount) {
        firstPos=mItemCount - 1;
      }
      ss.position=firstPos;
      ss.firstId=mAdapter.getItemId(firstPos);
    }
 else {
      ss.viewTop=0;
      ss.firstId=INVALID_POSITION;
      ss.position=0;
    }
  }
  ss.filter=null;
  if (mFiltered) {
    final EditText textFilter=mTextFilter;
    if (textFilter != null) {
      Editable filterText=textFilter.getText();
      if (filterText != null) {
        ss.filter=filterText.toString();
      }
    }
  }
  return ss;
}"
21730,"@Override public Parcelable onSaveInstanceState(){
  dismissPopup();
  Parcelable superState=super.onSaveInstanceState();
  SavedState ss=new SavedState(superState);
  boolean haveChildren=getChildCount() > 0 && mItemCount > 0;
  long selectedId=getSelectedItemId();
  ss.selectedId=selectedId;
  ss.height=getHeight();
  if (selectedId >= 0) {
    ss.viewTop=mSelectedTop;
    ss.position=getSelectedItemPosition();
    ss.firstId=INVALID_POSITION;
  }
 else {
    if (haveChildren) {
      View v=getChildAt(0);
      ss.viewTop=v.getTop();
      int firstPos=mFirstPosition;
      if (firstPos >= mItemCount) {
        firstPos=mItemCount - 1;
      }
      ss.position=firstPos;
      ss.firstId=mAdapter.getItemId(firstPos);
    }
 else {
      ss.viewTop=0;
      ss.firstId=INVALID_POSITION;
      ss.position=0;
    }
  }
  ss.filter=null;
  if (mFiltered) {
    final EditText textFilter=mTextFilter;
    if (textFilter != null) {
      Editable filterText=textFilter.getText();
      if (filterText != null) {
        ss.filter=filterText.toString();
      }
    }
  }
  return ss;
}","@Override public Parcelable onSaveInstanceState(){
  dismissPopup();
  Parcelable superState=super.onSaveInstanceState();
  SavedState ss=new SavedState(superState);
  boolean haveChildren=getChildCount() > 0 && mItemCount > 0;
  long selectedId=getSelectedItemId();
  ss.selectedId=selectedId;
  ss.height=getHeight();
  if (selectedId >= 0) {
    ss.viewTop=mSelectedTop;
    ss.position=getSelectedItemPosition();
    ss.firstId=INVALID_POSITION;
  }
 else {
    if (haveChildren && mFirstPosition > 0) {
      View v=getChildAt(0);
      ss.viewTop=v.getTop();
      int firstPos=mFirstPosition;
      if (firstPos >= mItemCount) {
        firstPos=mItemCount - 1;
      }
      ss.position=firstPos;
      ss.firstId=mAdapter.getItemId(firstPos);
    }
 else {
      ss.viewTop=0;
      ss.firstId=INVALID_POSITION;
      ss.position=0;
    }
  }
  ss.filter=null;
  if (mFiltered) {
    final EditText textFilter=mTextFilter;
    if (textFilter != null) {
      Editable filterText=textFilter.getText();
      if (filterText != null) {
        ss.filter=filterText.toString();
      }
    }
  }
  return ss;
}"
21731,"/** 
 * Called from the input dispatcher thread before a key is dispatched to a window. <p>Allows you to define behavior for keys that can not be overridden by applications or redirect key events to a different window.  This method is called from the input thread, with no locks held. <p>Note that if you change the window a key is dispatched to, the new target window will receive the key event without having input focus.
 * @param win The window that currently has focus.  This is where the keyevent will normally go.
 * @param action The key event action.
 * @param flags The key event flags.
 * @param keyCode The key code.
 * @param metaState bit mask of meta keys that are held.
 * @param repeatCount Number of times a key down has repeated.
 * @param policyFlags The policy flags associated with the key.
 * @return Returns true if the policy consumed the event and it shouldnot be further dispatched.
 */
public boolean interceptKeyBeforeDispatching(WindowState win,int action,int flags,int keyCode,int metaState,int repeatCount,int policyFlags);","/** 
 * Called from the input dispatcher thread before a key is dispatched to a window. <p>Allows you to define behavior for keys that can not be overridden by applications or redirect key events to a different window.  This method is called from the input thread, with no locks held. <p>Note that if you change the window a key is dispatched to, the new target window will receive the key event without having input focus.
 * @param win The window that currently has focus.  This is where the keyevent will normally go.
 * @param action The key event action.
 * @param flags The key event flags.
 * @param keyCode The key code.
 * @param scanCode The key's scan code.
 * @param metaState bit mask of meta keys that are held.
 * @param repeatCount Number of times a key down has repeated.
 * @param policyFlags The policy flags associated with the key.
 * @return Returns true if the policy consumed the event and it shouldnot be further dispatched.
 */
public boolean interceptKeyBeforeDispatching(WindowState win,int action,int flags,int keyCode,int scanCode,int metaState,int repeatCount,int policyFlags);"
21732,"/** 
 * Called from the input reader thread before a key is enqueued. <p>There are some actions that need to be handled here because they affect the power state of the device, for example, the power keys. Generally, it's best to keep as little as possible in the queue thread because it's the most fragile.
 * @param whenNanos The event time in uptime nanoseconds.
 * @param keyCode The key code.
 * @param down True if the key is down.
 * @param policyFlags The policy flags associated with the key.
 * @param isScreenOn True if the screen is already on
 * @return The bitwise or of the {@link #ACTION_PASS_TO_USER},  {@link #ACTION_POKE_USER_ACTIVITY} and {@link #ACTION_GO_TO_SLEEP} flags.
 */
public int interceptKeyBeforeQueueing(long whenNanos,int keyCode,boolean down,int policyFlags,boolean isScreenOn);","/** 
 * Called from the input reader thread before a key is enqueued. <p>There are some actions that need to be handled here because they affect the power state of the device, for example, the power keys. Generally, it's best to keep as little as possible in the queue thread because it's the most fragile.
 * @param whenNanos The event time in uptime nanoseconds.
 * @param action The key event action.
 * @param flags The key event flags.
 * @param keyCode The key code.
 * @param scanCode The key's scan code.
 * @param policyFlags The policy flags associated with the key.
 * @param isScreenOn True if the screen is already on
 * @return The bitwise or of the {@link #ACTION_PASS_TO_USER},  {@link #ACTION_POKE_USER_ACTIVITY} and {@link #ACTION_GO_TO_SLEEP} flags.
 */
public int interceptKeyBeforeQueueing(long whenNanos,int action,int flags,int keyCode,int scanCode,int policyFlags,boolean isScreenOn);"
21733,"/** 
 * Called from the input dispatcher thread before a key is dispatched to a window. <p>Allows you to define behavior for keys that can not be overridden by applications or redirect key events to a different window.  This method is called from the input thread, with no locks held. <p>Note that if you change the window a key is dispatched to, the new target window will receive the key event without having input focus.
 * @param win The window that currently has focus.  This is where the keyevent will normally go.
 * @param action The key event action.
 * @param flags The key event flags.
 * @param keyCode The key code.
 * @param metaState bit mask of meta keys that are held.
 * @param repeatCount Number of times a key down has repeated.
 * @param policyFlags The policy flags associated with the key.
 * @return Returns true if the policy consumed the event and it shouldnot be further dispatched.
 */
public boolean interceptKeyBeforeDispatching(WindowState win,int action,int flags,int keyCode,int metaState,int repeatCount,int policyFlags);","/** 
 * Called from the input dispatcher thread before a key is dispatched to a window. <p>Allows you to define behavior for keys that can not be overridden by applications or redirect key events to a different window.  This method is called from the input thread, with no locks held. <p>Note that if you change the window a key is dispatched to, the new target window will receive the key event without having input focus.
 * @param win The window that currently has focus.  This is where the keyevent will normally go.
 * @param action The key event action.
 * @param flags The key event flags.
 * @param keyCode The key code.
 * @param scanCode The key's scan code.
 * @param metaState bit mask of meta keys that are held.
 * @param repeatCount Number of times a key down has repeated.
 * @param policyFlags The policy flags associated with the key.
 * @return Returns true if the policy consumed the event and it shouldnot be further dispatched.
 */
public boolean interceptKeyBeforeDispatching(WindowState win,int action,int flags,int keyCode,int scanCode,int metaState,int repeatCount,int policyFlags);"
21734,"/** 
 * Called from the input reader thread before a key is enqueued. <p>There are some actions that need to be handled here because they affect the power state of the device, for example, the power keys. Generally, it's best to keep as little as possible in the queue thread because it's the most fragile.
 * @param whenNanos The event time in uptime nanoseconds.
 * @param keyCode The key code.
 * @param down True if the key is down.
 * @param policyFlags The policy flags associated with the key.
 * @param isScreenOn True if the screen is already on
 * @return The bitwise or of the {@link #ACTION_PASS_TO_USER},  {@link #ACTION_POKE_USER_ACTIVITY} and {@link #ACTION_GO_TO_SLEEP} flags.
 */
public int interceptKeyBeforeQueueing(long whenNanos,int keyCode,boolean down,int policyFlags,boolean isScreenOn);","/** 
 * Called from the input reader thread before a key is enqueued. <p>There are some actions that need to be handled here because they affect the power state of the device, for example, the power keys. Generally, it's best to keep as little as possible in the queue thread because it's the most fragile.
 * @param whenNanos The event time in uptime nanoseconds.
 * @param action The key event action.
 * @param flags The key event flags.
 * @param keyCode The key code.
 * @param scanCode The key's scan code.
 * @param policyFlags The policy flags associated with the key.
 * @param isScreenOn True if the screen is already on
 * @return The bitwise or of the {@link #ACTION_PASS_TO_USER},  {@link #ACTION_POKE_USER_ACTIVITY} and {@link #ACTION_GO_TO_SLEEP} flags.
 */
public int interceptKeyBeforeQueueing(long whenNanos,int action,int flags,int keyCode,int scanCode,int policyFlags,boolean isScreenOn);"
21735,"private void replaceSystemPackageLI(PackageParser.Package deletedPackage,PackageParser.Package pkg,int parseFlags,int scanMode,String installerPackageName,PackageInstalledInfo res){
  PackageParser.Package newPackage=null;
  boolean updatedSettings=false;
  parseFlags|=PackageManager.INSTALL_REPLACE_EXISTING | PackageParser.PARSE_IS_SYSTEM;
  String packageName=deletedPackage.packageName;
  res.returnCode=PackageManager.INSTALL_FAILED_REPLACE_COULDNT_DELETE;
  if (packageName == null) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      Slog.w(TAG,""String_Node_Str"" + packageName + ""String_Node_Str"");
      return;
    }
  }
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkg,true);
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  newPackage=scanPackageLI(pkg,parseFlags,scanMode,0);
  if (newPackage == null) {
    Slog.w(TAG,""String_Node_Str"" + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    updatedSettings=true;
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removePackageLI(newPackage,true);
    }
    scanPackageLI(oldPkg,parseFlags,SCAN_MONITOR | SCAN_UPDATE_SIGNATURE,0);
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLP(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLP();
    }
  }
 else {
synchronized (mPackages) {
      PackageSetting ps=mSettings.getDisabledSystemPkg(packageName);
      if (ps != null && ps.codePathString != null && !ps.codePathString.equals(oldPkgSetting.codePathString)) {
        res.removedInfo.args=createInstallArgs(0,oldPkgSetting.codePathString,oldPkgSetting.resourcePathString,oldPkgSetting.nativeLibraryPathString);
      }
    }
  }
}","private void replaceSystemPackageLI(PackageParser.Package deletedPackage,PackageParser.Package pkg,int parseFlags,int scanMode,String installerPackageName,PackageInstalledInfo res){
  PackageParser.Package newPackage=null;
  boolean updatedSettings=false;
  parseFlags|=PackageManager.INSTALL_REPLACE_EXISTING | PackageParser.PARSE_IS_SYSTEM;
  String packageName=deletedPackage.packageName;
  res.returnCode=PackageManager.INSTALL_FAILED_REPLACE_COULDNT_DELETE;
  if (packageName == null) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      Slog.w(TAG,""String_Node_Str"" + packageName + ""String_Node_Str"");
      return;
    }
  }
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkg,true);
synchronized (mPackages) {
    mSettings.disableSystemPackageLP(packageName);
  }
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  newPackage=scanPackageLI(pkg,parseFlags,scanMode,0);
  if (newPackage == null) {
    Slog.w(TAG,""String_Node_Str"" + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    updatedSettings=true;
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removePackageLI(newPackage,true);
    }
    scanPackageLI(oldPkg,parseFlags,SCAN_MONITOR | SCAN_UPDATE_SIGNATURE,0);
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLP(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLP();
    }
  }
 else {
synchronized (mPackages) {
      PackageSetting ps=mSettings.getDisabledSystemPkg(packageName);
      if (ps != null && ps.codePathString != null && !ps.codePathString.equals(oldPkgSetting.codePathString)) {
        res.removedInfo.args=createInstallArgs(0,oldPkgSetting.codePathString,oldPkgSetting.resourcePathString,oldPkgSetting.nativeLibraryPathString);
      }
    }
  }
}"
21736,"private void replaceSystemPackageLI(PackageParser.Package deletedPackage,PackageParser.Package pkg,int parseFlags,int scanMode,String installerPackageName,PackageInstalledInfo res){
  PackageParser.Package newPackage=null;
  boolean updatedSettings=false;
  parseFlags|=PackageManager.INSTALL_REPLACE_EXISTING | PackageParser.PARSE_IS_SYSTEM;
  String packageName=deletedPackage.packageName;
  res.returnCode=PackageManager.INSTALL_FAILED_REPLACE_COULDNT_DELETE;
  if (packageName == null) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      Slog.w(TAG,""String_Node_Str"" + packageName + ""String_Node_Str"");
      return;
    }
  }
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkg,true);
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  newPackage=scanPackageLI(pkg,parseFlags,scanMode,0);
  if (newPackage == null) {
    Slog.w(TAG,""String_Node_Str"" + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    updatedSettings=true;
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removePackageLI(newPackage,true);
    }
    scanPackageLI(oldPkg,parseFlags,SCAN_MONITOR | SCAN_UPDATE_SIGNATURE,0);
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLP(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLP();
    }
  }
 else {
synchronized (mPackages) {
      PackageSetting ps=mSettings.getDisabledSystemPkg(packageName);
      if (ps != null && ps.codePathString != null && !ps.codePathString.equals(oldPkgSetting.codePathString)) {
        res.removedInfo.args=createInstallArgs(0,oldPkgSetting.codePathString,oldPkgSetting.resourcePathString,oldPkgSetting.nativeLibraryPathString);
      }
    }
  }
}","private void replaceSystemPackageLI(PackageParser.Package deletedPackage,PackageParser.Package pkg,int parseFlags,int scanMode,String installerPackageName,PackageInstalledInfo res){
  PackageParser.Package newPackage=null;
  boolean updatedSettings=false;
  parseFlags|=PackageManager.INSTALL_REPLACE_EXISTING | PackageParser.PARSE_IS_SYSTEM;
  String packageName=deletedPackage.packageName;
  res.returnCode=PackageManager.INSTALL_FAILED_REPLACE_COULDNT_DELETE;
  if (packageName == null) {
    Slog.w(TAG,""String_Node_Str"");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      Slog.w(TAG,""String_Node_Str"" + packageName + ""String_Node_Str"");
      return;
    }
  }
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkg,true);
synchronized (mPackages) {
    mSettings.disableSystemPackageLP(packageName);
  }
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  newPackage=scanPackageLI(pkg,parseFlags,scanMode,0);
  if (newPackage == null) {
    Slog.w(TAG,""String_Node_Str"" + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    updatedSettings=true;
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removePackageLI(newPackage,true);
    }
    scanPackageLI(oldPkg,parseFlags,SCAN_MONITOR | SCAN_UPDATE_SIGNATURE,0);
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLP(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLP();
    }
  }
 else {
synchronized (mPackages) {
      PackageSetting ps=mSettings.getDisabledSystemPkg(packageName);
      if (ps != null && ps.codePathString != null && !ps.codePathString.equals(oldPkgSetting.codePathString)) {
        res.removedInfo.args=createInstallArgs(0,oldPkgSetting.codePathString,oldPkgSetting.resourcePathString,oldPkgSetting.nativeLibraryPathString);
      }
    }
  }
}"
21737,"static private int printField(char[] formatStr,int amt,char suffix,int pos,boolean always,int zeropad){
  if (always || amt > 0) {
    if ((always && zeropad >= 3) || amt > 99) {
      int dig=amt / 100;
      formatStr[pos]=(char)(dig + '0');
      pos++;
      always=true;
      amt-=(dig * 100);
    }
    if ((always && zeropad >= 2) || amt > 9) {
      int dig=amt / 10;
      formatStr[pos]=(char)(dig + '0');
      pos++;
      always=true;
      amt-=(dig * 10);
    }
    formatStr[pos]=(char)(amt + '0');
    pos++;
    formatStr[pos]=suffix;
    pos++;
  }
  return pos;
}","static private int printField(char[] formatStr,int amt,char suffix,int pos,boolean always,int zeropad){
  if (always || amt > 0) {
    final int startPos=pos;
    if ((always && zeropad >= 3) || amt > 99) {
      int dig=amt / 100;
      formatStr[pos]=(char)(dig + '0');
      pos++;
      amt-=(dig * 100);
    }
    if ((always && zeropad >= 2) || amt > 9 || startPos != pos) {
      int dig=amt / 10;
      formatStr[pos]=(char)(dig + '0');
      pos++;
      amt-=(dig * 10);
    }
    formatStr[pos]=(char)(amt + '0');
    pos++;
    formatStr[pos]=suffix;
    pos++;
  }
  return pos;
}"
21738,"static private int printField(char[] formatStr,int amt,char suffix,int pos,boolean always,int zeropad){
  if (always || amt > 0) {
    if ((always && zeropad >= 3) || amt > 99) {
      int dig=amt / 100;
      formatStr[pos]=(char)(dig + '0');
      pos++;
      always=true;
      amt-=(dig * 100);
    }
    if ((always && zeropad >= 2) || amt > 9) {
      int dig=amt / 10;
      formatStr[pos]=(char)(dig + '0');
      pos++;
      always=true;
      amt-=(dig * 10);
    }
    formatStr[pos]=(char)(amt + '0');
    pos++;
    formatStr[pos]=suffix;
    pos++;
  }
  return pos;
}","static private int printField(char[] formatStr,int amt,char suffix,int pos,boolean always,int zeropad){
  if (always || amt > 0) {
    final int startPos=pos;
    if ((always && zeropad >= 3) || amt > 99) {
      int dig=amt / 100;
      formatStr[pos]=(char)(dig + '0');
      pos++;
      amt-=(dig * 100);
    }
    if ((always && zeropad >= 2) || amt > 9 || startPos != pos) {
      int dig=amt / 10;
      formatStr[pos]=(char)(dig + '0');
      pos++;
      amt-=(dig * 10);
    }
    formatStr[pos]=(char)(amt + '0');
    pos++;
    formatStr[pos]=suffix;
    pos++;
  }
  return pos;
}"
21739,"/** 
 * Lists all the installed packages.
 */
private void runListPackages(boolean showApplicationPackage){
  try {
    String opt;
    while ((opt=nextOption()) != null) {
      if (opt.equals(""String_Node_Str"")) {
      }
 else       if (opt.equals(""String_Node_Str"")) {
        showApplicationPackage=true;
      }
 else       if (opt.equals(""String_Node_Str"")) {
        showApplicationPackage=true;
      }
 else {
        System.err.println(""String_Node_Str"" + opt);
        showUsage();
        return;
      }
    }
  }
 catch (  RuntimeException ex) {
    System.err.println(""String_Node_Str"" + ex.toString());
    showUsage();
    return;
  }
  try {
    List<PackageInfo> packages=mPm.getInstalledPackages(0);
    int count=packages.size();
    for (int p=0; p < count; p++) {
      PackageInfo info=packages.get(p);
      System.out.print(""String_Node_Str"");
      if (showApplicationPackage) {
        System.out.print(info.applicationInfo.sourceDir);
        System.out.print(""String_Node_Str"");
      }
      System.out.println(info.packageName);
    }
  }
 catch (  RemoteException e) {
    System.err.println(e.toString());
    System.err.println(PM_NOT_RUNNING_ERR);
  }
}","/** 
 * Lists all the installed packages.
 */
private void runListPackages(boolean showApplicationPackage){
  int getFlags=0;
  boolean listDisabled=false, listEnabled=false;
  try {
    String opt;
    while ((opt=nextOption()) != null) {
      if (opt.equals(""String_Node_Str"")) {
      }
 else       if (opt.equals(""String_Node_Str"")) {
        showApplicationPackage=true;
      }
 else       if (opt.equals(""String_Node_Str"")) {
        showApplicationPackage=true;
      }
 else       if (opt.equals(""String_Node_Str"")) {
        listDisabled=true;
      }
 else       if (opt.equals(""String_Node_Str"")) {
        listEnabled=true;
      }
 else       if (opt.equals(""String_Node_Str"")) {
        getFlags|=PackageManager.GET_UNINSTALLED_PACKAGES;
      }
 else {
        System.err.println(""String_Node_Str"" + opt);
        showUsage();
        return;
      }
    }
  }
 catch (  RuntimeException ex) {
    System.err.println(""String_Node_Str"" + ex.toString());
    showUsage();
    return;
  }
  String filter=nextArg();
  try {
    List<PackageInfo> packages=mPm.getInstalledPackages(getFlags);
    int count=packages.size();
    for (int p=0; p < count; p++) {
      PackageInfo info=packages.get(p);
      if (filter != null && !info.packageName.contains(filter)) {
        continue;
      }
      if ((!listDisabled || !info.applicationInfo.enabled) && (!listEnabled || info.applicationInfo.enabled)) {
        System.out.print(""String_Node_Str"");
        if (showApplicationPackage) {
          System.out.print(info.applicationInfo.sourceDir);
          System.out.print(""String_Node_Str"");
        }
        System.out.println(info.packageName);
      }
    }
  }
 catch (  RemoteException e) {
    System.err.println(e.toString());
    System.err.println(PM_NOT_RUNNING_ERR);
  }
}"
21740,"/** 
 * Execute the list sub-command. pm list [package | packages] pm list permission-groups pm list permissions pm list features pm list instrumentation
 */
private void runList(){
  String type=nextArg();
  if (type == null) {
    System.err.println(""String_Node_Str"");
    showUsage();
    return;
  }
  if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    runListPackages(false);
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListPermissionGroups();
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListPermissions();
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListFeatures();
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListInstrumentation();
  }
 else {
    System.err.println(""String_Node_Str"" + type + ""String_Node_Str"");
    showUsage();
  }
}","/** 
 * Execute the list sub-command. pm list [package | packages] pm list permission-groups pm list permissions pm list features pm list libraries pm list instrumentation
 */
private void runList(){
  String type=nextArg();
  if (type == null) {
    System.err.println(""String_Node_Str"");
    showUsage();
    return;
  }
  if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    runListPackages(false);
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListPermissionGroups();
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListPermissions();
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListFeatures();
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListLibraries();
  }
 else   if (""String_Node_Str"".equals(type)) {
    runListInstrumentation();
  }
 else {
    System.err.println(""String_Node_Str"" + type + ""String_Node_Str"");
    showUsage();
  }
}"
21741,"private static void showUsage(){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
}","private static void showUsage(){
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
}"
21742,"/** 
 * Generate and return the   {@link PackageInfo} for a parsed package.
 * @param p the parsed package.
 * @param flags indicating which optional information is included.
 */
public static PackageInfo generatePackageInfo(PackageParser.Package p,int gids[],int flags,long firstInstallTime,long lastUpdateTime){
  PackageInfo pi=new PackageInfo();
  pi.packageName=p.packageName;
  pi.versionCode=p.mVersionCode;
  pi.versionName=p.mVersionName;
  pi.sharedUserId=p.mSharedUserId;
  pi.sharedUserLabel=p.mSharedUserLabel;
  pi.applicationInfo=p.applicationInfo;
  pi.installLocation=p.installLocation;
  pi.firstInstallTime=firstInstallTime;
  pi.lastUpdateTime=lastUpdateTime;
  if ((flags & PackageManager.GET_GIDS) != 0) {
    pi.gids=gids;
  }
  if ((flags & PackageManager.GET_CONFIGURATIONS) != 0) {
    int N=p.configPreferences.size();
    if (N > 0) {
      pi.configPreferences=new ConfigurationInfo[N];
      p.configPreferences.toArray(pi.configPreferences);
    }
    N=p.reqFeatures != null ? p.reqFeatures.size() : 0;
    if (N > 0) {
      pi.reqFeatures=new FeatureInfo[N];
      p.reqFeatures.toArray(pi.reqFeatures);
    }
  }
  if ((flags & PackageManager.GET_ACTIVITIES) != 0) {
    int N=p.activities.size();
    if (N > 0) {
      if ((flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
        pi.activities=new ActivityInfo[N];
      }
 else {
        int num=0;
        for (int i=0; i < N; i++) {
          if (p.activities.get(i).info.enabled)           num++;
        }
        pi.activities=new ActivityInfo[num];
      }
      for (int i=0, j=0; i < N; i++) {
        final Activity activity=p.activities.get(i);
        if (activity.info.enabled || (flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
          pi.activities[j++]=generateActivityInfo(p.activities.get(i),flags);
        }
      }
    }
  }
  if ((flags & PackageManager.GET_RECEIVERS) != 0) {
    int N=p.receivers.size();
    if (N > 0) {
      if ((flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
        pi.receivers=new ActivityInfo[N];
      }
 else {
        int num=0;
        for (int i=0; i < N; i++) {
          if (p.receivers.get(i).info.enabled)           num++;
        }
        pi.receivers=new ActivityInfo[num];
      }
      for (int i=0, j=0; i < N; i++) {
        final Activity activity=p.receivers.get(i);
        if (activity.info.enabled || (flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
          pi.receivers[j++]=generateActivityInfo(p.receivers.get(i),flags);
        }
      }
    }
  }
  if ((flags & PackageManager.GET_SERVICES) != 0) {
    int N=p.services.size();
    if (N > 0) {
      if ((flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
        pi.services=new ServiceInfo[N];
      }
 else {
        int num=0;
        for (int i=0; i < N; i++) {
          if (p.services.get(i).info.enabled)           num++;
        }
        pi.services=new ServiceInfo[num];
      }
      for (int i=0, j=0; i < N; i++) {
        final Service service=p.services.get(i);
        if (service.info.enabled || (flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
          pi.services[j++]=generateServiceInfo(p.services.get(i),flags);
        }
      }
    }
  }
  if ((flags & PackageManager.GET_PROVIDERS) != 0) {
    int N=p.providers.size();
    if (N > 0) {
      if ((flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
        pi.providers=new ProviderInfo[N];
      }
 else {
        int num=0;
        for (int i=0; i < N; i++) {
          if (p.providers.get(i).info.enabled)           num++;
        }
        pi.providers=new ProviderInfo[num];
      }
      for (int i=0, j=0; i < N; i++) {
        final Provider provider=p.providers.get(i);
        if (provider.info.enabled || (flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
          pi.providers[j++]=generateProviderInfo(p.providers.get(i),flags);
        }
      }
    }
  }
  if ((flags & PackageManager.GET_INSTRUMENTATION) != 0) {
    int N=p.instrumentation.size();
    if (N > 0) {
      pi.instrumentation=new InstrumentationInfo[N];
      for (int i=0; i < N; i++) {
        pi.instrumentation[i]=generateInstrumentationInfo(p.instrumentation.get(i),flags);
      }
    }
  }
  if ((flags & PackageManager.GET_PERMISSIONS) != 0) {
    int N=p.permissions.size();
    if (N > 0) {
      pi.permissions=new PermissionInfo[N];
      for (int i=0; i < N; i++) {
        pi.permissions[i]=generatePermissionInfo(p.permissions.get(i),flags);
      }
    }
    N=p.requestedPermissions.size();
    if (N > 0) {
      pi.requestedPermissions=new String[N];
      for (int i=0; i < N; i++) {
        pi.requestedPermissions[i]=p.requestedPermissions.get(i);
      }
    }
  }
  if ((flags & PackageManager.GET_SIGNATURES) != 0) {
    int N=(p.mSignatures != null) ? p.mSignatures.length : 0;
    if (N > 0) {
      pi.signatures=new Signature[N];
      System.arraycopy(p.mSignatures,0,pi.signatures,0,N);
    }
  }
  return pi;
}","/** 
 * Generate and return the   {@link PackageInfo} for a parsed package.
 * @param p the parsed package.
 * @param flags indicating which optional information is included.
 */
public static PackageInfo generatePackageInfo(PackageParser.Package p,int gids[],int flags,long firstInstallTime,long lastUpdateTime){
  PackageInfo pi=new PackageInfo();
  pi.packageName=p.packageName;
  pi.versionCode=p.mVersionCode;
  pi.versionName=p.mVersionName;
  pi.sharedUserId=p.mSharedUserId;
  pi.sharedUserLabel=p.mSharedUserLabel;
  pi.applicationInfo=generateApplicationInfo(p,flags);
  pi.installLocation=p.installLocation;
  pi.firstInstallTime=firstInstallTime;
  pi.lastUpdateTime=lastUpdateTime;
  if ((flags & PackageManager.GET_GIDS) != 0) {
    pi.gids=gids;
  }
  if ((flags & PackageManager.GET_CONFIGURATIONS) != 0) {
    int N=p.configPreferences.size();
    if (N > 0) {
      pi.configPreferences=new ConfigurationInfo[N];
      p.configPreferences.toArray(pi.configPreferences);
    }
    N=p.reqFeatures != null ? p.reqFeatures.size() : 0;
    if (N > 0) {
      pi.reqFeatures=new FeatureInfo[N];
      p.reqFeatures.toArray(pi.reqFeatures);
    }
  }
  if ((flags & PackageManager.GET_ACTIVITIES) != 0) {
    int N=p.activities.size();
    if (N > 0) {
      if ((flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
        pi.activities=new ActivityInfo[N];
      }
 else {
        int num=0;
        for (int i=0; i < N; i++) {
          if (p.activities.get(i).info.enabled)           num++;
        }
        pi.activities=new ActivityInfo[num];
      }
      for (int i=0, j=0; i < N; i++) {
        final Activity activity=p.activities.get(i);
        if (activity.info.enabled || (flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
          pi.activities[j++]=generateActivityInfo(p.activities.get(i),flags);
        }
      }
    }
  }
  if ((flags & PackageManager.GET_RECEIVERS) != 0) {
    int N=p.receivers.size();
    if (N > 0) {
      if ((flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
        pi.receivers=new ActivityInfo[N];
      }
 else {
        int num=0;
        for (int i=0; i < N; i++) {
          if (p.receivers.get(i).info.enabled)           num++;
        }
        pi.receivers=new ActivityInfo[num];
      }
      for (int i=0, j=0; i < N; i++) {
        final Activity activity=p.receivers.get(i);
        if (activity.info.enabled || (flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
          pi.receivers[j++]=generateActivityInfo(p.receivers.get(i),flags);
        }
      }
    }
  }
  if ((flags & PackageManager.GET_SERVICES) != 0) {
    int N=p.services.size();
    if (N > 0) {
      if ((flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
        pi.services=new ServiceInfo[N];
      }
 else {
        int num=0;
        for (int i=0; i < N; i++) {
          if (p.services.get(i).info.enabled)           num++;
        }
        pi.services=new ServiceInfo[num];
      }
      for (int i=0, j=0; i < N; i++) {
        final Service service=p.services.get(i);
        if (service.info.enabled || (flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
          pi.services[j++]=generateServiceInfo(p.services.get(i),flags);
        }
      }
    }
  }
  if ((flags & PackageManager.GET_PROVIDERS) != 0) {
    int N=p.providers.size();
    if (N > 0) {
      if ((flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
        pi.providers=new ProviderInfo[N];
      }
 else {
        int num=0;
        for (int i=0; i < N; i++) {
          if (p.providers.get(i).info.enabled)           num++;
        }
        pi.providers=new ProviderInfo[num];
      }
      for (int i=0, j=0; i < N; i++) {
        final Provider provider=p.providers.get(i);
        if (provider.info.enabled || (flags & PackageManager.GET_DISABLED_COMPONENTS) != 0) {
          pi.providers[j++]=generateProviderInfo(p.providers.get(i),flags);
        }
      }
    }
  }
  if ((flags & PackageManager.GET_INSTRUMENTATION) != 0) {
    int N=p.instrumentation.size();
    if (N > 0) {
      pi.instrumentation=new InstrumentationInfo[N];
      for (int i=0; i < N; i++) {
        pi.instrumentation[i]=generateInstrumentationInfo(p.instrumentation.get(i),flags);
      }
    }
  }
  if ((flags & PackageManager.GET_PERMISSIONS) != 0) {
    int N=p.permissions.size();
    if (N > 0) {
      pi.permissions=new PermissionInfo[N];
      for (int i=0; i < N; i++) {
        pi.permissions[i]=generatePermissionInfo(p.permissions.get(i),flags);
      }
    }
    N=p.requestedPermissions.size();
    if (N > 0) {
      pi.requestedPermissions=new String[N];
      for (int i=0; i < N; i++) {
        pi.requestedPermissions[i]=p.requestedPermissions.get(i);
      }
    }
  }
  if ((flags & PackageManager.GET_SIGNATURES) != 0) {
    int N=(p.mSignatures != null) ? p.mSignatures.length : 0;
    if (N > 0) {
      pi.signatures=new Signature[N];
      System.arraycopy(p.mSignatures,0,pi.signatures,0,N);
    }
  }
  return pi;
}"
21743,"@SuppressWarnings(""String_Node_Str"") public void dumpCheckinLocked(PrintWriter pw,String[] args){
  boolean isUnpluggedOnly=false;
  for (  String arg : args) {
    if (""String_Node_Str"".equals(arg)) {
      if (LOCAL_LOGV)       Log.v(""String_Node_Str"",""String_Node_Str"");
      isUnpluggedOnly=true;
    }
  }
  if (isUnpluggedOnly) {
    dumpCheckinLocked(pw,STATS_SINCE_UNPLUGGED,-1);
  }
 else {
    dumpCheckinLocked(pw,STATS_SINCE_CHARGED,-1);
    dumpCheckinLocked(pw,STATS_SINCE_UNPLUGGED,-1);
  }
}","@SuppressWarnings(""String_Node_Str"") public void dumpCheckinLocked(PrintWriter pw,String[] args,List<ApplicationInfo> apps){
  boolean isUnpluggedOnly=false;
  for (  String arg : args) {
    if (""String_Node_Str"".equals(arg)) {
      if (LOCAL_LOGV)       Log.v(""String_Node_Str"",""String_Node_Str"");
      isUnpluggedOnly=true;
    }
  }
  if (apps != null) {
    SparseArray<ArrayList<String>> uids=new SparseArray<ArrayList<String>>();
    for (int i=0; i < apps.size(); i++) {
      ApplicationInfo ai=apps.get(i);
      ArrayList<String> pkgs=uids.get(ai.uid);
      if (pkgs == null) {
        pkgs=new ArrayList<String>();
        uids.put(ai.uid,pkgs);
      }
      pkgs.add(ai.packageName);
    }
    SparseArray<? extends Uid> uidStats=getUidStats();
    final int NU=uidStats.size();
    String[] lineArgs=new String[2];
    for (int i=0; i < NU; i++) {
      int uid=uidStats.keyAt(i);
      ArrayList<String> pkgs=uids.get(uid);
      if (pkgs != null) {
        for (int j=0; j < pkgs.size(); j++) {
          lineArgs[0]=Integer.toString(uid);
          lineArgs[1]=pkgs.get(j);
          dumpLine(pw,0,""String_Node_Str"",UID_DATA,(Object[])lineArgs);
        }
      }
    }
  }
  if (isUnpluggedOnly) {
    dumpCheckinLocked(pw,STATS_SINCE_UNPLUGGED,-1);
  }
 else {
    dumpCheckinLocked(pw,STATS_SINCE_CHARGED,-1);
    dumpCheckinLocked(pw,STATS_SINCE_UNPLUGGED,-1);
  }
}"
21744,"@Override public Parcelable onSaveInstanceState(){
  dismissPopup();
  Parcelable superState=super.onSaveInstanceState();
  SavedState ss=new SavedState(superState);
  boolean haveChildren=getChildCount() > 0;
  long selectedId=getSelectedItemId();
  ss.selectedId=selectedId;
  ss.height=getHeight();
  if (selectedId >= 0) {
    ss.viewTop=mSelectedTop;
    ss.position=getSelectedItemPosition();
    ss.firstId=INVALID_POSITION;
  }
 else {
    if (haveChildren) {
      View v=getChildAt(0);
      ss.viewTop=v.getTop();
      ss.position=mFirstPosition;
      ss.firstId=mAdapter.getItemId(mFirstPosition);
    }
 else {
      ss.viewTop=0;
      ss.firstId=INVALID_POSITION;
      ss.position=0;
    }
  }
  ss.filter=null;
  if (mFiltered) {
    final EditText textFilter=mTextFilter;
    if (textFilter != null) {
      Editable filterText=textFilter.getText();
      if (filterText != null) {
        ss.filter=filterText.toString();
      }
    }
  }
  return ss;
}","@Override public Parcelable onSaveInstanceState(){
  dismissPopup();
  Parcelable superState=super.onSaveInstanceState();
  SavedState ss=new SavedState(superState);
  boolean haveChildren=getChildCount() > 0 && mItemCount > 0;
  long selectedId=getSelectedItemId();
  ss.selectedId=selectedId;
  ss.height=getHeight();
  if (selectedId >= 0) {
    ss.viewTop=mSelectedTop;
    ss.position=getSelectedItemPosition();
    ss.firstId=INVALID_POSITION;
  }
 else {
    if (haveChildren) {
      View v=getChildAt(0);
      ss.viewTop=v.getTop();
      int firstPos=mFirstPosition;
      if (firstPos >= mItemCount) {
        firstPos=mItemCount - 1;
      }
      ss.position=firstPos;
      ss.firstId=mAdapter.getItemId(firstPos);
    }
 else {
      ss.viewTop=0;
      ss.firstId=INVALID_POSITION;
      ss.position=0;
    }
  }
  ss.filter=null;
  if (mFiltered) {
    final EditText textFilter=mTextFilter;
    if (textFilter != null) {
      Editable filterText=textFilter.getText();
      if (filterText != null) {
        ss.filter=filterText.toString();
      }
    }
  }
  return ss;
}"
21745,"private Intent newGrantCredentialsPermissionIntent(Account account,int uid,AccountAuthenticatorResponse response,String authTokenType,String authTokenLabel){
  RegisteredServicesCache.ServiceInfo<AuthenticatorDescription> serviceInfo=mAuthenticatorCache.getServiceInfo(AuthenticatorDescription.newKey(account.type));
  if (serviceInfo == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + account.type);
  }
  final Context authContext;
  try {
    authContext=mContext.createPackageContext(serviceInfo.type.packageName,0);
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + account.type);
  }
  Intent intent=new Intent(mContext,GrantCredentialsPermissionActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.addCategory(String.valueOf(getCredentialPermissionNotificationId(account,authTokenType,uid)));
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_ACCOUNT,account);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_AUTH_TOKEN_LABEL,authTokenLabel);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_AUTH_TOKEN_TYPE,authTokenType);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_RESPONSE,response);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_ACCOUNT_TYPE_LABEL,authContext.getString(serviceInfo.type.labelId));
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_PACKAGES,mContext.getPackageManager().getPackagesForUid(uid));
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_REQUESTING_UID,uid);
  return intent;
}","private Intent newGrantCredentialsPermissionIntent(Account account,int uid,AccountAuthenticatorResponse response,String authTokenType,String authTokenLabel){
  Intent intent=new Intent(mContext,GrantCredentialsPermissionActivity.class);
  intent.addCategory(String.valueOf(getCredentialPermissionNotificationId(account,authTokenType,uid)));
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_ACCOUNT,account);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_AUTH_TOKEN_TYPE,authTokenType);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_RESPONSE,response);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_REQUESTING_UID,uid);
  return intent;
}"
21746,"protected void onCreate(Bundle savedInstanceState){
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.grant_credentials_permission);
  mInflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Bundle extras=getIntent().getExtras();
  mAccount=extras.getParcelable(EXTRAS_ACCOUNT);
  mAuthTokenType=extras.getString(EXTRAS_AUTH_TOKEN_TYPE);
  if (mAccount == null || mAuthTokenType == null) {
    setResult(Activity.RESULT_CANCELED);
    finish();
    return;
  }
  mUid=extras.getInt(EXTRAS_REQUESTING_UID);
  final String accountTypeLabel=extras.getString(EXTRAS_ACCOUNT_TYPE_LABEL);
  final String[] packages=extras.getStringArray(EXTRAS_PACKAGES);
  final String authTokenLabel=extras.getString(EXTRAS_AUTH_TOKEN_LABEL);
  findViewById(R.id.allow_button).setOnClickListener(this);
  findViewById(R.id.deny_button).setOnClickListener(this);
  LinearLayout packagesListView=(LinearLayout)findViewById(R.id.packages_list);
  final PackageManager pm=getPackageManager();
  for (  String pkg : packages) {
    String packageLabel;
    try {
      packageLabel=pm.getApplicationLabel(pm.getApplicationInfo(pkg,0)).toString();
    }
 catch (    PackageManager.NameNotFoundException e) {
      packageLabel=pkg;
    }
    packagesListView.addView(newPackageView(packageLabel));
  }
  ((TextView)findViewById(R.id.account_name)).setText(mAccount.name);
  ((TextView)findViewById(R.id.account_type)).setText(accountTypeLabel);
  TextView authTokenTypeView=(TextView)findViewById(R.id.authtoken_type);
  if (TextUtils.isEmpty(authTokenLabel)) {
    authTokenTypeView.setVisibility(View.GONE);
  }
 else {
    authTokenTypeView.setText(authTokenLabel);
  }
}","protected void onCreate(Bundle savedInstanceState){
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.grant_credentials_permission);
  mInflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Bundle extras=getIntent().getExtras();
  mAccount=extras.getParcelable(EXTRAS_ACCOUNT);
  mAuthTokenType=extras.getString(EXTRAS_AUTH_TOKEN_TYPE);
  mUid=extras.getInt(EXTRAS_REQUESTING_UID);
  final PackageManager pm=getPackageManager();
  final String[] packages=pm.getPackagesForUid(mUid);
  if (mAccount == null || mAuthTokenType == null || packages == null) {
    setResult(Activity.RESULT_CANCELED);
    finish();
    return;
  }
  final String accountTypeLabel=accountManagerService.getAccountLabel(mAccount.type);
  final TextView authTokenTypeView=(TextView)findViewById(R.id.authtoken_type);
  authTokenTypeView.setVisibility(View.GONE);
  IAccountManagerResponse response=new IAccountManagerResponse.Stub(){
    public void onResult(    Bundle bundle){
      final String authTokenLabel=bundle.getString(AccountManager.KEY_AUTH_TOKEN_LABEL);
      if (!TextUtils.isEmpty(authTokenLabel)) {
        runOnUiThread(new Runnable(){
          public void run(){
            if (!isFinishing()) {
              authTokenTypeView.setText(authTokenLabel);
              authTokenTypeView.setVisibility(View.VISIBLE);
            }
          }
        }
);
      }
    }
    public void onError(    int code,    String message){
    }
  }
;
  accountManagerService.getAuthTokenLabel(response,mAccount,mAuthTokenType);
  findViewById(R.id.allow_button).setOnClickListener(this);
  findViewById(R.id.deny_button).setOnClickListener(this);
  LinearLayout packagesListView=(LinearLayout)findViewById(R.id.packages_list);
  for (  String pkg : packages) {
    String packageLabel;
    try {
      packageLabel=pm.getApplicationLabel(pm.getApplicationInfo(pkg,0)).toString();
    }
 catch (    PackageManager.NameNotFoundException e) {
      packageLabel=pkg;
    }
    packagesListView.addView(newPackageView(packageLabel));
  }
  ((TextView)findViewById(R.id.account_name)).setText(mAccount.name);
  ((TextView)findViewById(R.id.account_type)).setText(accountTypeLabel);
}"
21747,"public void onClick(View v){
  final AccountManagerService accountManagerService=AccountManagerService.getSingleton();
switch (v.getId()) {
case R.id.allow_button:
    accountManagerService.grantAppPermission(mAccount,mAuthTokenType,mUid);
  Intent result=new Intent();
result.putExtra(""String_Node_Str"",true);
setResult(RESULT_OK,result);
setAccountAuthenticatorResult(result.getExtras());
break;
case R.id.deny_button:
accountManagerService.revokeAppPermission(mAccount,mAuthTokenType,mUid);
setResult(RESULT_CANCELED);
break;
}
finish();
}","public void onClick(View v){
switch (v.getId()) {
case R.id.allow_button:
    accountManagerService.grantAppPermission(mAccount,mAuthTokenType,mUid);
  Intent result=new Intent();
result.putExtra(""String_Node_Str"",true);
setResult(RESULT_OK,result);
setAccountAuthenticatorResult(result.getExtras());
break;
case R.id.deny_button:
accountManagerService.revokeAppPermission(mAccount,mAuthTokenType,mUid);
setResult(RESULT_CANCELED);
break;
}
finish();
}"
21748,"@Override public Parcelable onSaveInstanceState(){
  dismissPopup();
  Parcelable superState=super.onSaveInstanceState();
  SavedState ss=new SavedState(superState);
  boolean haveChildren=getChildCount() > 0;
  long selectedId=getSelectedItemId();
  ss.selectedId=selectedId;
  ss.height=getHeight();
  if (selectedId >= 0) {
    ss.viewTop=mSelectedTop;
    ss.position=getSelectedItemPosition();
    ss.firstId=INVALID_POSITION;
  }
 else {
    if (haveChildren) {
      View v=getChildAt(0);
      ss.viewTop=v.getTop();
      ss.position=mFirstPosition;
      ss.firstId=mAdapter.getItemId(mFirstPosition);
    }
 else {
      ss.viewTop=0;
      ss.firstId=INVALID_POSITION;
      ss.position=0;
    }
  }
  ss.filter=null;
  if (mFiltered) {
    final EditText textFilter=mTextFilter;
    if (textFilter != null) {
      Editable filterText=textFilter.getText();
      if (filterText != null) {
        ss.filter=filterText.toString();
      }
    }
  }
  return ss;
}","@Override public Parcelable onSaveInstanceState(){
  dismissPopup();
  Parcelable superState=super.onSaveInstanceState();
  SavedState ss=new SavedState(superState);
  boolean haveChildren=getChildCount() > 0 && mItemCount > 0;
  long selectedId=getSelectedItemId();
  ss.selectedId=selectedId;
  ss.height=getHeight();
  if (selectedId >= 0) {
    ss.viewTop=mSelectedTop;
    ss.position=getSelectedItemPosition();
    ss.firstId=INVALID_POSITION;
  }
 else {
    if (haveChildren) {
      View v=getChildAt(0);
      ss.viewTop=v.getTop();
      int firstPos=mFirstPosition;
      if (firstPos >= mItemCount) {
        firstPos=mItemCount - 1;
      }
      ss.position=firstPos;
      ss.firstId=mAdapter.getItemId(firstPos);
    }
 else {
      ss.viewTop=0;
      ss.firstId=INVALID_POSITION;
      ss.position=0;
    }
  }
  ss.filter=null;
  if (mFiltered) {
    final EditText textFilter=mTextFilter;
    if (textFilter != null) {
      Editable filterText=textFilter.getText();
      if (filterText != null) {
        ss.filter=filterText.toString();
      }
    }
  }
  return ss;
}"
21749,"/** 
 * Gets the SIP URI string of this profile.
 * @return the SIP URI string of this profile
 */
public String getUriString(){
  return mAddress.getURI().toString();
}","/** 
 * Gets the SIP URI string of this profile.
 * @return the SIP URI string of this profile
 */
public String getUriString(){
  if (!TextUtils.isEmpty(mProxyAddress)) {
    return ""String_Node_Str"" + getUserName() + ""String_Node_Str""+ mDomain;
  }
  return getUri().toString();
}"
21750,"/** 
 * Sets the protocol used to connect to the SIP server. Currently, only ""UDP"" and ""TCP"" are supported.
 * @param protocol the protocol string
 * @return this builder object
 * @throws IllegalArgumentException if the protocol is not recognized
 */
public Builder setProtocol(String protocol) throws IllegalArgumentException {
  if (protocol == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  protocol=protocol.toUpperCase();
  if (!protocol.equals(""String_Node_Str"") && !protocol.equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"" + protocol);
  }
  mProfile.mProtocol=protocol;
  return this;
}","/** 
 * Sets the protocol used to connect to the SIP server. Currently, only ""UDP"" and ""TCP"" are supported.
 * @param protocol the protocol string
 * @return this builder object
 * @throws IllegalArgumentException if the protocol is not recognized
 */
public Builder setProtocol(String protocol) throws IllegalArgumentException {
  if (protocol == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  protocol=protocol.toUpperCase();
  if (!protocol.equals(UDP) && !protocol.equals(TCP)) {
    throw new IllegalArgumentException(""String_Node_Str"" + protocol);
  }
  mProfile.mProtocol=protocol;
  return this;
}"
21751,"/** 
 * Sets the port number of the server. By default, it is 5060.
 * @param port port number of the server
 * @return this builder object
 * @throws IllegalArgumentException if the port number is out of range
 */
public Builder setPort(int port) throws IllegalArgumentException {
  try {
    mUri.setPort(port);
    return this;
  }
 catch (  InvalidArgumentException e) {
    throw new IllegalArgumentException(e);
  }
}","/** 
 * Sets the port number of the server. By default, it is 5060.
 * @param port port number of the server
 * @return this builder object
 * @throws IllegalArgumentException if the port number is out of range
 */
public Builder setPort(int port) throws IllegalArgumentException {
  if ((port > 65535) || (port < 1000)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mProfile.mPort=port;
  return this;
}"
21752,"private SipProfile(Parcel in){
  mAddress=(Address)in.readSerializable();
  mProxyAddress=in.readString();
  mPassword=in.readString();
  mDomain=in.readString();
  mProtocol=in.readString();
  mProfileName=in.readString();
  mSendKeepAlive=(in.readInt() == 0) ? false : true;
  mAutoRegistration=(in.readInt() == 0) ? false : true;
  mCallingUid=in.readInt();
}","private SipProfile(Parcel in){
  mAddress=(Address)in.readSerializable();
  mProxyAddress=in.readString();
  mPassword=in.readString();
  mDomain=in.readString();
  mProtocol=in.readString();
  mProfileName=in.readString();
  mSendKeepAlive=(in.readInt() == 0) ? false : true;
  mAutoRegistration=(in.readInt() == 0) ? false : true;
  mCallingUid=in.readInt();
  mPort=in.readInt();
}"
21753,"/** 
 * Gets the port number of the SIP server.
 * @return the port number of the SIP server
 */
public int getPort(){
  int port=getUri().getPort();
  return (port == -1) ? DEFAULT_PORT : port;
}","/** 
 * Gets the port number of the SIP server.
 * @return the port number of the SIP server
 */
public int getPort(){
  return mPort;
}"
21754,"/** 
 * Builds and returns the SIP profile object.
 * @return the profile object created
 */
public SipProfile build(){
  mProfile.mPassword=mUri.getUserPassword();
  mUri.setUserPassword(null);
  try {
    mProfile.mAddress=mAddressFactory.createAddress(mDisplayName,mUri);
    if (!TextUtils.isEmpty(mProxyAddress)) {
      SipURI uri=(SipURI)mAddressFactory.createURI(fix(mProxyAddress));
      mProfile.mProxyAddress=uri.getHost();
    }
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
  return mProfile;
}","/** 
 * Builds and returns the SIP profile object.
 * @return the profile object created
 */
public SipProfile build(){
  mProfile.mPassword=mUri.getUserPassword();
  mUri.setUserPassword(null);
  try {
    if (!TextUtils.isEmpty(mProxyAddress)) {
      SipURI uri=(SipURI)mAddressFactory.createURI(fix(mProxyAddress));
      mProfile.mProxyAddress=uri.getHost();
    }
 else {
      if (!mProfile.mProtocol.equals(UDP)) {
        mUri.setTransportParam(mProfile.mProtocol);
      }
      if (mProfile.mPort != DEFAULT_PORT) {
        mUri.setPort(mProfile.mPort);
      }
    }
    mProfile.mAddress=mAddressFactory.createAddress(mDisplayName,mUri);
  }
 catch (  InvalidArgumentException e) {
    throw new RuntimeException(e);
  }
catch (  ParseException e) {
    throw new RuntimeException(e);
  }
  return mProfile;
}"
21755,"@Override public void writeToParcel(Parcel out,int flags){
  out.writeSerializable(mAddress);
  out.writeString(mProxyAddress);
  out.writeString(mPassword);
  out.writeString(mDomain);
  out.writeString(mProtocol);
  out.writeString(mProfileName);
  out.writeInt(mSendKeepAlive ? 1 : 0);
  out.writeInt(mAutoRegistration ? 1 : 0);
  out.writeInt(mCallingUid);
}","@Override public void writeToParcel(Parcel out,int flags){
  out.writeSerializable(mAddress);
  out.writeString(mProxyAddress);
  out.writeString(mPassword);
  out.writeString(mDomain);
  out.writeString(mProtocol);
  out.writeString(mProfileName);
  out.writeInt(mSendKeepAlive ? 1 : 0);
  out.writeInt(mAutoRegistration ? 1 : 0);
  out.writeInt(mCallingUid);
  out.writeInt(mPort);
}"
21756,"private Request createRequest(String requestType,SipProfile userProfile,String tag) throws ParseException, SipException {
  FromHeader fromHeader=createFromHeader(userProfile,tag);
  ToHeader toHeader=createToHeader(userProfile);
  SipURI requestURI=mAddressFactory.createSipURI(""String_Node_Str"" + userProfile.getSipDomain());
  List<ViaHeader> viaHeaders=createViaHeaders();
  CallIdHeader callIdHeader=createCallIdHeader();
  CSeqHeader cSeqHeader=createCSeqHeader(requestType);
  MaxForwardsHeader maxForwards=createMaxForwardsHeader();
  Request request=mMessageFactory.createRequest(requestURI,requestType,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);
  Header userAgentHeader=mHeaderFactory.createHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(userAgentHeader);
  return request;
}","private Request createRequest(String requestType,SipProfile userProfile,String tag) throws ParseException, SipException {
  FromHeader fromHeader=createFromHeader(userProfile,tag);
  ToHeader toHeader=createToHeader(userProfile);
  SipURI requestURI=mAddressFactory.createSipURI(userProfile.getUriString().replaceFirst(userProfile.getUserName() + ""String_Node_Str"",""String_Node_Str""));
  List<ViaHeader> viaHeaders=createViaHeaders();
  CallIdHeader callIdHeader=createCallIdHeader();
  CSeqHeader cSeqHeader=createCSeqHeader(requestType);
  MaxForwardsHeader maxForwards=createMaxForwardsHeader();
  Request request=mMessageFactory.createRequest(requestURI,requestType,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);
  Header userAgentHeader=mHeaderFactory.createHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(userAgentHeader);
  return request;
}"
21757,"private Intent newGrantCredentialsPermissionIntent(Account account,int uid,AccountAuthenticatorResponse response,String authTokenType,String authTokenLabel){
  RegisteredServicesCache.ServiceInfo<AuthenticatorDescription> serviceInfo=mAuthenticatorCache.getServiceInfo(AuthenticatorDescription.newKey(account.type));
  if (serviceInfo == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + account.type);
  }
  final Context authContext;
  try {
    authContext=mContext.createPackageContext(serviceInfo.type.packageName,0);
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + account.type);
  }
  Intent intent=new Intent(mContext,GrantCredentialsPermissionActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.addCategory(String.valueOf(getCredentialPermissionNotificationId(account,authTokenType,uid)));
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_ACCOUNT,account);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_AUTH_TOKEN_LABEL,authTokenLabel);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_AUTH_TOKEN_TYPE,authTokenType);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_RESPONSE,response);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_ACCOUNT_TYPE_LABEL,authContext.getString(serviceInfo.type.labelId));
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_PACKAGES,mContext.getPackageManager().getPackagesForUid(uid));
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_REQUESTING_UID,uid);
  return intent;
}","private Intent newGrantCredentialsPermissionIntent(Account account,int uid,AccountAuthenticatorResponse response,String authTokenType,String authTokenLabel){
  Intent intent=new Intent(mContext,GrantCredentialsPermissionActivity.class);
  intent.addCategory(String.valueOf(getCredentialPermissionNotificationId(account,authTokenType,uid)));
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_ACCOUNT,account);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_AUTH_TOKEN_TYPE,authTokenType);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_RESPONSE,response);
  intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_REQUESTING_UID,uid);
  return intent;
}"
21758,"protected void onCreate(Bundle savedInstanceState){
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.grant_credentials_permission);
  mInflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Bundle extras=getIntent().getExtras();
  mAccount=extras.getParcelable(EXTRAS_ACCOUNT);
  mAuthTokenType=extras.getString(EXTRAS_AUTH_TOKEN_TYPE);
  if (mAccount == null || mAuthTokenType == null) {
    setResult(Activity.RESULT_CANCELED);
    finish();
    return;
  }
  mUid=extras.getInt(EXTRAS_REQUESTING_UID);
  final String accountTypeLabel=extras.getString(EXTRAS_ACCOUNT_TYPE_LABEL);
  final String[] packages=extras.getStringArray(EXTRAS_PACKAGES);
  final String authTokenLabel=extras.getString(EXTRAS_AUTH_TOKEN_LABEL);
  findViewById(R.id.allow_button).setOnClickListener(this);
  findViewById(R.id.deny_button).setOnClickListener(this);
  LinearLayout packagesListView=(LinearLayout)findViewById(R.id.packages_list);
  final PackageManager pm=getPackageManager();
  for (  String pkg : packages) {
    String packageLabel;
    try {
      packageLabel=pm.getApplicationLabel(pm.getApplicationInfo(pkg,0)).toString();
    }
 catch (    PackageManager.NameNotFoundException e) {
      packageLabel=pkg;
    }
    packagesListView.addView(newPackageView(packageLabel));
  }
  ((TextView)findViewById(R.id.account_name)).setText(mAccount.name);
  ((TextView)findViewById(R.id.account_type)).setText(accountTypeLabel);
  TextView authTokenTypeView=(TextView)findViewById(R.id.authtoken_type);
  if (TextUtils.isEmpty(authTokenLabel)) {
    authTokenTypeView.setVisibility(View.GONE);
  }
 else {
    authTokenTypeView.setText(authTokenLabel);
  }
}","protected void onCreate(Bundle savedInstanceState){
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.grant_credentials_permission);
  mInflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Bundle extras=getIntent().getExtras();
  mAccount=extras.getParcelable(EXTRAS_ACCOUNT);
  mAuthTokenType=extras.getString(EXTRAS_AUTH_TOKEN_TYPE);
  mUid=extras.getInt(EXTRAS_REQUESTING_UID);
  final PackageManager pm=getPackageManager();
  final String[] packages=pm.getPackagesForUid(mUid);
  if (mAccount == null || mAuthTokenType == null || packages == null) {
    setResult(Activity.RESULT_CANCELED);
    finish();
    return;
  }
  final String accountTypeLabel=accountManagerService.getAccountLabel(mAccount.type);
  final TextView authTokenTypeView=(TextView)findViewById(R.id.authtoken_type);
  authTokenTypeView.setVisibility(View.GONE);
  IAccountManagerResponse response=new IAccountManagerResponse.Stub(){
    public void onResult(    Bundle bundle){
      final String authTokenLabel=bundle.getString(AccountManager.KEY_AUTH_TOKEN_LABEL);
      if (!TextUtils.isEmpty(authTokenLabel)) {
        runOnUiThread(new Runnable(){
          public void run(){
            if (!isFinishing()) {
              authTokenTypeView.setText(authTokenLabel);
              authTokenTypeView.setVisibility(View.VISIBLE);
            }
          }
        }
);
      }
    }
    public void onError(    int code,    String message){
    }
  }
;
  accountManagerService.getAuthTokenLabel(response,mAccount,mAuthTokenType);
  findViewById(R.id.allow_button).setOnClickListener(this);
  findViewById(R.id.deny_button).setOnClickListener(this);
  LinearLayout packagesListView=(LinearLayout)findViewById(R.id.packages_list);
  for (  String pkg : packages) {
    String packageLabel;
    try {
      packageLabel=pm.getApplicationLabel(pm.getApplicationInfo(pkg,0)).toString();
    }
 catch (    PackageManager.NameNotFoundException e) {
      packageLabel=pkg;
    }
    packagesListView.addView(newPackageView(packageLabel));
  }
  ((TextView)findViewById(R.id.account_name)).setText(mAccount.name);
  ((TextView)findViewById(R.id.account_type)).setText(accountTypeLabel);
}"
21759,"public void onClick(View v){
  final AccountManagerService accountManagerService=AccountManagerService.getSingleton();
switch (v.getId()) {
case R.id.allow_button:
    accountManagerService.grantAppPermission(mAccount,mAuthTokenType,mUid);
  Intent result=new Intent();
result.putExtra(""String_Node_Str"",true);
setResult(RESULT_OK,result);
setAccountAuthenticatorResult(result.getExtras());
break;
case R.id.deny_button:
accountManagerService.revokeAppPermission(mAccount,mAuthTokenType,mUid);
setResult(RESULT_CANCELED);
break;
}
finish();
}","public void onClick(View v){
switch (v.getId()) {
case R.id.allow_button:
    accountManagerService.grantAppPermission(mAccount,mAuthTokenType,mUid);
  Intent result=new Intent();
result.putExtra(""String_Node_Str"",true);
setResult(RESULT_OK,result);
setAccountAuthenticatorResult(result.getExtras());
break;
case R.id.deny_button:
accountManagerService.revokeAppPermission(mAccount,mAuthTokenType,mUid);
setResult(RESULT_CANCELED);
break;
}
finish();
}"
21760,"/** 
 * Gets the SIP URI string of this profile.
 * @return the SIP URI string of this profile
 */
public String getUriString(){
  return mAddress.getURI().toString();
}","/** 
 * Gets the SIP URI string of this profile.
 * @return the SIP URI string of this profile
 */
public String getUriString(){
  if (!TextUtils.isEmpty(mProxyAddress)) {
    return ""String_Node_Str"" + getUserName() + ""String_Node_Str""+ mDomain;
  }
  return getUri().toString();
}"
21761,"/** 
 * Sets the protocol used to connect to the SIP server. Currently, only ""UDP"" and ""TCP"" are supported.
 * @param protocol the protocol string
 * @return this builder object
 * @throws IllegalArgumentException if the protocol is not recognized
 */
public Builder setProtocol(String protocol) throws IllegalArgumentException {
  if (protocol == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  protocol=protocol.toUpperCase();
  if (!protocol.equals(""String_Node_Str"") && !protocol.equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"" + protocol);
  }
  mProfile.mProtocol=protocol;
  return this;
}","/** 
 * Sets the protocol used to connect to the SIP server. Currently, only ""UDP"" and ""TCP"" are supported.
 * @param protocol the protocol string
 * @return this builder object
 * @throws IllegalArgumentException if the protocol is not recognized
 */
public Builder setProtocol(String protocol) throws IllegalArgumentException {
  if (protocol == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  protocol=protocol.toUpperCase();
  if (!protocol.equals(UDP) && !protocol.equals(TCP)) {
    throw new IllegalArgumentException(""String_Node_Str"" + protocol);
  }
  mProfile.mProtocol=protocol;
  return this;
}"
21762,"/** 
 * Sets the port number of the server. By default, it is 5060.
 * @param port port number of the server
 * @return this builder object
 * @throws IllegalArgumentException if the port number is out of range
 */
public Builder setPort(int port) throws IllegalArgumentException {
  try {
    mUri.setPort(port);
    return this;
  }
 catch (  InvalidArgumentException e) {
    throw new IllegalArgumentException(e);
  }
}","/** 
 * Sets the port number of the server. By default, it is 5060.
 * @param port port number of the server
 * @return this builder object
 * @throws IllegalArgumentException if the port number is out of range
 */
public Builder setPort(int port) throws IllegalArgumentException {
  if ((port > 65535) || (port < 1000)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mProfile.mPort=port;
  return this;
}"
21763,"private SipProfile(Parcel in){
  mAddress=(Address)in.readSerializable();
  mProxyAddress=in.readString();
  mPassword=in.readString();
  mDomain=in.readString();
  mProtocol=in.readString();
  mProfileName=in.readString();
  mSendKeepAlive=(in.readInt() == 0) ? false : true;
  mAutoRegistration=(in.readInt() == 0) ? false : true;
  mCallingUid=in.readInt();
}","private SipProfile(Parcel in){
  mAddress=(Address)in.readSerializable();
  mProxyAddress=in.readString();
  mPassword=in.readString();
  mDomain=in.readString();
  mProtocol=in.readString();
  mProfileName=in.readString();
  mSendKeepAlive=(in.readInt() == 0) ? false : true;
  mAutoRegistration=(in.readInt() == 0) ? false : true;
  mCallingUid=in.readInt();
  mPort=in.readInt();
}"
21764,"/** 
 * Gets the port number of the SIP server.
 * @return the port number of the SIP server
 */
public int getPort(){
  int port=getUri().getPort();
  return (port == -1) ? DEFAULT_PORT : port;
}","/** 
 * Gets the port number of the SIP server.
 * @return the port number of the SIP server
 */
public int getPort(){
  return mPort;
}"
21765,"/** 
 * Builds and returns the SIP profile object.
 * @return the profile object created
 */
public SipProfile build(){
  mProfile.mPassword=mUri.getUserPassword();
  mUri.setUserPassword(null);
  try {
    mProfile.mAddress=mAddressFactory.createAddress(mDisplayName,mUri);
    if (!TextUtils.isEmpty(mProxyAddress)) {
      SipURI uri=(SipURI)mAddressFactory.createURI(fix(mProxyAddress));
      mProfile.mProxyAddress=uri.getHost();
    }
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
  return mProfile;
}","/** 
 * Builds and returns the SIP profile object.
 * @return the profile object created
 */
public SipProfile build(){
  mProfile.mPassword=mUri.getUserPassword();
  mUri.setUserPassword(null);
  try {
    if (!TextUtils.isEmpty(mProxyAddress)) {
      SipURI uri=(SipURI)mAddressFactory.createURI(fix(mProxyAddress));
      mProfile.mProxyAddress=uri.getHost();
    }
 else {
      if (!mProfile.mProtocol.equals(UDP)) {
        mUri.setTransportParam(mProfile.mProtocol);
      }
      if (mProfile.mPort != DEFAULT_PORT) {
        mUri.setPort(mProfile.mPort);
      }
    }
    mProfile.mAddress=mAddressFactory.createAddress(mDisplayName,mUri);
  }
 catch (  InvalidArgumentException e) {
    throw new RuntimeException(e);
  }
catch (  ParseException e) {
    throw new RuntimeException(e);
  }
  return mProfile;
}"
21766,"@Override public void writeToParcel(Parcel out,int flags){
  out.writeSerializable(mAddress);
  out.writeString(mProxyAddress);
  out.writeString(mPassword);
  out.writeString(mDomain);
  out.writeString(mProtocol);
  out.writeString(mProfileName);
  out.writeInt(mSendKeepAlive ? 1 : 0);
  out.writeInt(mAutoRegistration ? 1 : 0);
  out.writeInt(mCallingUid);
}","@Override public void writeToParcel(Parcel out,int flags){
  out.writeSerializable(mAddress);
  out.writeString(mProxyAddress);
  out.writeString(mPassword);
  out.writeString(mDomain);
  out.writeString(mProtocol);
  out.writeString(mProfileName);
  out.writeInt(mSendKeepAlive ? 1 : 0);
  out.writeInt(mAutoRegistration ? 1 : 0);
  out.writeInt(mCallingUid);
  out.writeInt(mPort);
}"
21767,"private Request createRequest(String requestType,SipProfile userProfile,String tag) throws ParseException, SipException {
  FromHeader fromHeader=createFromHeader(userProfile,tag);
  ToHeader toHeader=createToHeader(userProfile);
  SipURI requestURI=mAddressFactory.createSipURI(""String_Node_Str"" + userProfile.getSipDomain());
  List<ViaHeader> viaHeaders=createViaHeaders();
  CallIdHeader callIdHeader=createCallIdHeader();
  CSeqHeader cSeqHeader=createCSeqHeader(requestType);
  MaxForwardsHeader maxForwards=createMaxForwardsHeader();
  Request request=mMessageFactory.createRequest(requestURI,requestType,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);
  Header userAgentHeader=mHeaderFactory.createHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(userAgentHeader);
  return request;
}","private Request createRequest(String requestType,SipProfile userProfile,String tag) throws ParseException, SipException {
  FromHeader fromHeader=createFromHeader(userProfile,tag);
  ToHeader toHeader=createToHeader(userProfile);
  SipURI requestURI=mAddressFactory.createSipURI(userProfile.getUriString().replaceFirst(userProfile.getUserName() + ""String_Node_Str"",""String_Node_Str""));
  List<ViaHeader> viaHeaders=createViaHeaders();
  CallIdHeader callIdHeader=createCallIdHeader();
  CSeqHeader cSeqHeader=createCSeqHeader(requestType);
  MaxForwardsHeader maxForwards=createMaxForwardsHeader();
  Request request=mMessageFactory.createRequest(requestURI,requestType,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);
  Header userAgentHeader=mHeaderFactory.createHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(userAgentHeader);
  return request;
}"
21768,"/** 
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call   {@link #buildDrawingCache()} manually without calling{@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling   {@link #destroyDrawingCache()} afterwards.</p><p>Note about auto scaling in compatibility mode: When auto scaling is not enabled, this method will create a bitmap of the same size as this view. Because this bitmap will be drawn scaled by the parent ViewGroup, the result on screen might show scaling artifacts. To avoid such artifacts, you should call this method by setting the auto scaling to true. Doing so, however, will generate a bitmap of a different size than the view. This implies that your application must be able to handle this size.</p>
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 */
public void buildDrawingCache(boolean autoScale){
  if ((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || (autoScale ? (mDrawingCache == null || mDrawingCache.get() == null) : (mUnscaledDrawingCache == null || mUnscaledDrawingCache.get() == null))) {
    if (ViewDebug.TRACE_HIERARCHY) {
      ViewDebug.trace(this,ViewDebug.HierarchyTraceType.BUILD_CACHE);
    }
    if (Config.DEBUG && ViewDebug.profileDrawing) {
      EventLog.writeEvent(60002,hashCode());
    }
    int width=mRight - mLeft;
    int height=mBottom - mTop;
    final AttachInfo attachInfo=mAttachInfo;
    final boolean scalingRequired=attachInfo != null && attachInfo.mScalingRequired;
    if (autoScale && scalingRequired) {
      width=(int)((width * attachInfo.mApplicationScale) + 0.5f);
      height=(int)((height * attachInfo.mApplicationScale) + 0.5f);
    }
    final int drawingCacheBackgroundColor=mDrawingCacheBackgroundColor;
    final boolean opaque=drawingCacheBackgroundColor != 0 || isOpaque();
    final boolean translucentWindow=attachInfo != null && attachInfo.mTranslucentWindow;
    if (width <= 0 || height <= 0 || (width * height * (opaque && !translucentWindow ? 2 : 4) > ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize())) {
      destroyDrawingCache();
      return;
    }
    boolean clear=true;
    Bitmap bitmap=autoScale ? (mDrawingCache == null ? null : mDrawingCache.get()) : (mUnscaledDrawingCache == null ? null : mUnscaledDrawingCache.get());
    if (bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height) {
      Bitmap.Config quality;
      if (!opaque) {
switch (mViewFlags & DRAWING_CACHE_QUALITY_MASK) {
case DRAWING_CACHE_QUALITY_AUTO:
          quality=Bitmap.Config.ARGB_8888;
        break;
case DRAWING_CACHE_QUALITY_LOW:
      quality=Bitmap.Config.ARGB_4444;
    break;
case DRAWING_CACHE_QUALITY_HIGH:
  quality=Bitmap.Config.ARGB_8888;
break;
default :
quality=Bitmap.Config.ARGB_8888;
break;
}
}
 else {
quality=translucentWindow ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;
}
if (bitmap != null) bitmap.recycle();
try {
bitmap=Bitmap.createBitmap(width,height,quality);
bitmap.setDensity(getResources().getDisplayMetrics().densityDpi);
if (autoScale) {
mDrawingCache=new SoftReference<Bitmap>(bitmap);
}
 else {
mUnscaledDrawingCache=new SoftReference<Bitmap>(bitmap);
}
if (opaque && translucentWindow) bitmap.setHasAlpha(false);
}
 catch (OutOfMemoryError e) {
if (autoScale) {
mDrawingCache=null;
}
 else {
mUnscaledDrawingCache=null;
}
return;
}
clear=drawingCacheBackgroundColor != 0;
}
Canvas canvas;
if (attachInfo != null) {
canvas=attachInfo.mCanvas;
if (canvas == null) {
canvas=new Canvas();
}
canvas.setBitmap(bitmap);
attachInfo.mCanvas=null;
}
 else {
canvas=new Canvas(bitmap);
}
if (clear) {
bitmap.eraseColor(drawingCacheBackgroundColor);
}
computeScroll();
final int restoreCount=canvas.save();
if (autoScale && scalingRequired) {
final float scale=attachInfo.mApplicationScale;
canvas.scale(scale,scale);
}
canvas.translate(-mScrollX,-mScrollY);
mPrivateFlags|=DRAWN;
mPrivateFlags|=DRAWING_CACHE_VALID;
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
mPrivateFlags&=~DIRTY_MASK;
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
canvas.restoreToCount(restoreCount);
if (attachInfo != null) {
attachInfo.mCanvas=canvas;
}
}
}","/** 
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call   {@link #buildDrawingCache()} manually without calling{@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling   {@link #destroyDrawingCache()} afterwards.</p><p>Note about auto scaling in compatibility mode: When auto scaling is not enabled, this method will create a bitmap of the same size as this view. Because this bitmap will be drawn scaled by the parent ViewGroup, the result on screen might show scaling artifacts. To avoid such artifacts, you should call this method by setting the auto scaling to true. Doing so, however, will generate a bitmap of a different size than the view. This implies that your application must be able to handle this size.</p>
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 */
public void buildDrawingCache(boolean autoScale){
  if ((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || (autoScale ? (mDrawingCache == null || mDrawingCache.get() == null) : (mUnscaledDrawingCache == null || mUnscaledDrawingCache.get() == null))) {
    if (ViewDebug.TRACE_HIERARCHY) {
      ViewDebug.trace(this,ViewDebug.HierarchyTraceType.BUILD_CACHE);
    }
    if (Config.DEBUG && ViewDebug.profileDrawing) {
      EventLog.writeEvent(60002,hashCode());
    }
    int width=mRight - mLeft;
    int height=mBottom - mTop;
    final AttachInfo attachInfo=mAttachInfo;
    final boolean scalingRequired=attachInfo != null && attachInfo.mScalingRequired;
    if (autoScale && scalingRequired) {
      width=(int)((width * attachInfo.mApplicationScale) + 0.5f);
      height=(int)((height * attachInfo.mApplicationScale) + 0.5f);
    }
    final int drawingCacheBackgroundColor=mDrawingCacheBackgroundColor;
    final boolean opaque=drawingCacheBackgroundColor != 0 || isOpaque();
    final boolean use32BitCache=attachInfo != null && attachInfo.mUse32BitDrawingCache;
    if (width <= 0 || height <= 0 || (width * height * (opaque && !use32BitCache ? 2 : 4) > ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize())) {
      destroyDrawingCache();
      return;
    }
    boolean clear=true;
    Bitmap bitmap=autoScale ? (mDrawingCache == null ? null : mDrawingCache.get()) : (mUnscaledDrawingCache == null ? null : mUnscaledDrawingCache.get());
    if (bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height) {
      Bitmap.Config quality;
      if (!opaque) {
switch (mViewFlags & DRAWING_CACHE_QUALITY_MASK) {
case DRAWING_CACHE_QUALITY_AUTO:
          quality=Bitmap.Config.ARGB_8888;
        break;
case DRAWING_CACHE_QUALITY_LOW:
      quality=Bitmap.Config.ARGB_4444;
    break;
case DRAWING_CACHE_QUALITY_HIGH:
  quality=Bitmap.Config.ARGB_8888;
break;
default :
quality=Bitmap.Config.ARGB_8888;
break;
}
}
 else {
quality=use32BitCache ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;
}
if (bitmap != null) bitmap.recycle();
try {
bitmap=Bitmap.createBitmap(width,height,quality);
bitmap.setDensity(getResources().getDisplayMetrics().densityDpi);
if (autoScale) {
mDrawingCache=new SoftReference<Bitmap>(bitmap);
}
 else {
mUnscaledDrawingCache=new SoftReference<Bitmap>(bitmap);
}
if (opaque && use32BitCache) bitmap.setHasAlpha(false);
}
 catch (OutOfMemoryError e) {
if (autoScale) {
mDrawingCache=null;
}
 else {
mUnscaledDrawingCache=null;
}
return;
}
clear=drawingCacheBackgroundColor != 0;
}
Canvas canvas;
if (attachInfo != null) {
canvas=attachInfo.mCanvas;
if (canvas == null) {
canvas=new Canvas();
}
canvas.setBitmap(bitmap);
attachInfo.mCanvas=null;
}
 else {
canvas=new Canvas(bitmap);
}
if (clear) {
bitmap.eraseColor(drawingCacheBackgroundColor);
}
computeScroll();
final int restoreCount=canvas.save();
if (autoScale && scalingRequired) {
final float scale=attachInfo.mApplicationScale;
canvas.scale(scale,scale);
}
canvas.translate(-mScrollX,-mScrollY);
mPrivateFlags|=DRAWN;
mPrivateFlags|=DRAWING_CACHE_VALID;
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
mPrivateFlags&=~DIRTY_MASK;
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
canvas.restoreToCount(restoreCount);
if (attachInfo != null) {
attachInfo.mCanvas=canvas;
}
}
}"
21769,"private void performTraversals(){
  final View host=mView;
  if (DBG) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    host.debug();
  }
  if (host == null || !mAdded)   return;
  mTraversalScheduled=false;
  mWillDrawSoon=true;
  boolean windowResizesToFitContent=false;
  boolean fullRedrawNeeded=mFullRedrawNeeded;
  boolean newSurface=false;
  boolean surfaceChanged=false;
  WindowManager.LayoutParams lp=mWindowAttributes;
  int desiredWindowWidth;
  int desiredWindowHeight;
  int childWidthMeasureSpec;
  int childHeightMeasureSpec;
  final View.AttachInfo attachInfo=mAttachInfo;
  final int viewVisibility=getHostVisibility();
  boolean viewVisibilityChanged=mViewVisibility != viewVisibility || mNewSurfaceNeeded;
  float appScale=mAttachInfo.mApplicationScale;
  WindowManager.LayoutParams params=null;
  if (mWindowAttributesChanged) {
    mWindowAttributesChanged=false;
    surfaceChanged=true;
    params=lp;
  }
  Rect frame=mWinFrame;
  if (mFirst) {
    fullRedrawNeeded=true;
    mLayoutRequested=true;
    DisplayMetrics packageMetrics=mView.getContext().getResources().getDisplayMetrics();
    desiredWindowWidth=packageMetrics.widthPixels;
    desiredWindowHeight=packageMetrics.heightPixels;
    attachInfo.mSurface=mSurface;
    attachInfo.mTranslucentWindow=PixelFormat.formatHasAlpha(lp.format);
    attachInfo.mHasWindowFocus=false;
    attachInfo.mWindowVisibility=viewVisibility;
    attachInfo.mRecomputeGlobalAttributes=false;
    attachInfo.mKeepScreenOn=false;
    viewVisibilityChanged=false;
    mLastConfiguration.setTo(host.getResources().getConfiguration());
    host.dispatchAttachedToWindow(attachInfo,0);
  }
 else {
    desiredWindowWidth=frame.width();
    desiredWindowHeight=frame.height();
    if (desiredWindowWidth != mWidth || desiredWindowHeight != mHeight) {
      if (DEBUG_ORIENTATION)       Log.v(TAG,""String_Node_Str"" + host + ""String_Node_Str""+ frame);
      fullRedrawNeeded=true;
      mLayoutRequested=true;
      windowResizesToFitContent=true;
    }
  }
  if (viewVisibilityChanged) {
    attachInfo.mWindowVisibility=viewVisibility;
    host.dispatchWindowVisibilityChanged(viewVisibility);
    if (viewVisibility != View.VISIBLE || mNewSurfaceNeeded) {
      if (mUseGL) {
        destroyGL();
      }
    }
    if (viewVisibility == View.GONE) {
      mHasHadWindowFocus=false;
    }
  }
  boolean insetsChanged=false;
  if (mLayoutRequested) {
    getRunQueue().executeActions(attachInfo.mHandler);
    if (mFirst) {
      host.fitSystemWindows(mAttachInfo.mContentInsets);
      mAttachInfo.mInTouchMode=!mAddedTouchMode;
      ensureTouchModeLocally(mAddedTouchMode);
    }
 else {
      if (!mAttachInfo.mContentInsets.equals(mPendingContentInsets)) {
        mAttachInfo.mContentInsets.set(mPendingContentInsets);
        host.fitSystemWindows(mAttachInfo.mContentInsets);
        insetsChanged=true;
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + mAttachInfo.mContentInsets);
      }
      if (!mAttachInfo.mVisibleInsets.equals(mPendingVisibleInsets)) {
        mAttachInfo.mVisibleInsets.set(mPendingVisibleInsets);
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + mAttachInfo.mVisibleInsets);
      }
      if (lp.width == ViewGroup.LayoutParams.WRAP_CONTENT || lp.height == ViewGroup.LayoutParams.WRAP_CONTENT) {
        windowResizesToFitContent=true;
        DisplayMetrics packageMetrics=mView.getContext().getResources().getDisplayMetrics();
        desiredWindowWidth=packageMetrics.widthPixels;
        desiredWindowHeight=packageMetrics.heightPixels;
      }
    }
    childWidthMeasureSpec=getRootMeasureSpec(desiredWindowWidth,lp.width);
    childHeightMeasureSpec=getRootMeasureSpec(desiredWindowHeight,lp.height);
    if (DEBUG_ORIENTATION || DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + host + ""String_Node_Str""+ desiredWindowWidth+ ""String_Node_Str""+ desiredWindowHeight+ ""String_Node_Str"");
    host.measure(childWidthMeasureSpec,childHeightMeasureSpec);
    if (DBG) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      host.debug();
    }
  }
  if (attachInfo.mRecomputeGlobalAttributes) {
    attachInfo.mRecomputeGlobalAttributes=false;
    boolean oldVal=attachInfo.mKeepScreenOn;
    attachInfo.mKeepScreenOn=false;
    host.dispatchCollectViewAttributes(0);
    if (attachInfo.mKeepScreenOn != oldVal) {
      params=lp;
    }
  }
  if (mFirst || attachInfo.mViewVisibilityChanged) {
    attachInfo.mViewVisibilityChanged=false;
    int resizeMode=mSoftInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST;
    if (resizeMode == WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED) {
      final int N=attachInfo.mScrollContainers.size();
      for (int i=0; i < N; i++) {
        if (attachInfo.mScrollContainers.get(i).isShown()) {
          resizeMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
        }
      }
      if (resizeMode == 0) {
        resizeMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN;
      }
      if ((lp.softInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) != resizeMode) {
        lp.softInputMode=(lp.softInputMode & ~WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) | resizeMode;
        params=lp;
      }
    }
  }
  if (params != null && (host.mPrivateFlags & View.REQUEST_TRANSPARENT_REGIONS) != 0) {
    if (!PixelFormat.formatHasAlpha(params.format)) {
      params.format=PixelFormat.TRANSLUCENT;
    }
  }
  boolean windowShouldResize=mLayoutRequested && windowResizesToFitContent && ((mWidth != host.mMeasuredWidth || mHeight != host.mMeasuredHeight) || (lp.width == ViewGroup.LayoutParams.WRAP_CONTENT && frame.width() < desiredWindowWidth && frame.width() != mWidth) || (lp.height == ViewGroup.LayoutParams.WRAP_CONTENT && frame.height() < desiredWindowHeight && frame.height() != mHeight));
  final boolean computesInternalInsets=attachInfo.mTreeObserver.hasComputeInternalInsetsListeners();
  boolean insetsPending=false;
  int relayoutResult=0;
  if (mFirst || windowShouldResize || insetsChanged|| viewVisibilityChanged|| params != null) {
    if (viewVisibility == View.VISIBLE) {
      insetsPending=computesInternalInsets && (mFirst || viewVisibilityChanged);
      if (mWindowAttributes.memoryType == WindowManager.LayoutParams.MEMORY_TYPE_GPU) {
        if (params == null) {
          params=mWindowAttributes;
        }
        mGlWanted=true;
      }
    }
    if (mSurfaceHolder != null) {
      mSurfaceHolder.mSurfaceLock.lock();
      mDrawingAllowed=true;
    }
    boolean initialized=false;
    boolean contentInsetsChanged=false;
    boolean visibleInsetsChanged;
    boolean hadSurface=mSurface.isValid();
    try {
      int fl=0;
      if (params != null) {
        fl=params.flags;
        if (attachInfo.mKeepScreenOn) {
          params.flags|=WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;
        }
      }
      if (DEBUG_LAYOUT) {
        Log.i(TAG,""String_Node_Str"" + host.mMeasuredWidth + ""String_Node_Str""+ host.mMeasuredHeight+ ""String_Node_Str""+ params);
      }
      relayoutResult=relayoutWindow(params,viewVisibility,insetsPending);
      if (params != null) {
        params.flags=fl;
      }
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + frame.toShortString() + ""String_Node_Str""+ mPendingContentInsets.toShortString()+ ""String_Node_Str""+ mPendingVisibleInsets.toShortString()+ ""String_Node_Str""+ mSurface);
      if (mPendingConfiguration.seq != 0) {
        if (DEBUG_CONFIGURATION)         Log.v(TAG,""String_Node_Str"" + mPendingConfiguration);
        updateConfiguration(mPendingConfiguration,!mFirst);
        mPendingConfiguration.seq=0;
      }
      contentInsetsChanged=!mPendingContentInsets.equals(mAttachInfo.mContentInsets);
      visibleInsetsChanged=!mPendingVisibleInsets.equals(mAttachInfo.mVisibleInsets);
      if (contentInsetsChanged) {
        mAttachInfo.mContentInsets.set(mPendingContentInsets);
        host.fitSystemWindows(mAttachInfo.mContentInsets);
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + mAttachInfo.mContentInsets);
      }
      if (visibleInsetsChanged) {
        mAttachInfo.mVisibleInsets.set(mPendingVisibleInsets);
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + mAttachInfo.mVisibleInsets);
      }
      if (!hadSurface) {
        if (mSurface.isValid()) {
          newSurface=true;
          fullRedrawNeeded=true;
          mPreviousTransparentRegion.setEmpty();
          if (mGlWanted && !mUseGL) {
            initializeGL();
            initialized=mGlCanvas != null;
          }
        }
      }
 else       if (!mSurface.isValid()) {
        mLastScrolledFocus=null;
        mScrollY=mCurScrollY=0;
        if (mScroller != null) {
          mScroller.abortAnimation();
        }
      }
    }
 catch (    RemoteException e) {
    }
    if (DEBUG_ORIENTATION)     Log.v(TAG,""String_Node_Str"" + frame + ""String_Node_Str""+ mSurface);
    attachInfo.mWindowLeft=frame.left;
    attachInfo.mWindowTop=frame.top;
    mWidth=frame.width();
    mHeight=frame.height();
    if (mSurfaceHolder != null) {
      if (mSurface.isValid()) {
        mSurfaceHolder.mSurface=mSurface;
      }
      mSurfaceHolder.mSurfaceLock.unlock();
      if (mSurface.isValid()) {
        if (!hadSurface) {
          mSurfaceHolder.ungetCallbacks();
          mIsCreating=true;
          mSurfaceHolderCallback.surfaceCreated(mSurfaceHolder);
          SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
          if (callbacks != null) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceCreated(mSurfaceHolder);
            }
          }
          surfaceChanged=true;
        }
        if (surfaceChanged) {
          mSurfaceHolderCallback.surfaceChanged(mSurfaceHolder,lp.format,mWidth,mHeight);
          SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
          if (callbacks != null) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceChanged(mSurfaceHolder,lp.format,mWidth,mHeight);
            }
          }
        }
        mIsCreating=false;
      }
 else       if (hadSurface) {
        mSurfaceHolder.ungetCallbacks();
        SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
        mSurfaceHolderCallback.surfaceDestroyed(mSurfaceHolder);
        if (callbacks != null) {
          for (          SurfaceHolder.Callback c : callbacks) {
            c.surfaceDestroyed(mSurfaceHolder);
          }
        }
        mSurfaceHolder.mSurfaceLock.lock();
        mSurfaceHolder.mSurface=new Surface();
        mSurfaceHolder.mSurfaceLock.unlock();
      }
    }
    if (initialized) {
      mGlCanvas.setViewport((int)(mWidth * appScale + 0.5f),(int)(mHeight * appScale + 0.5f));
    }
    boolean focusChangedDueToTouchMode=ensureTouchModeLocally((relayoutResult & WindowManagerImpl.RELAYOUT_IN_TOUCH_MODE) != 0);
    if (focusChangedDueToTouchMode || mWidth != host.mMeasuredWidth || mHeight != host.mMeasuredHeight || contentInsetsChanged) {
      childWidthMeasureSpec=getRootMeasureSpec(mWidth,lp.width);
      childHeightMeasureSpec=getRootMeasureSpec(mHeight,lp.height);
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + mWidth + ""String_Node_Str""+ host.mMeasuredWidth+ ""String_Node_Str""+ mHeight+ ""String_Node_Str""+ host.mMeasuredHeight+ ""String_Node_Str""+ contentInsetsChanged);
      host.measure(childWidthMeasureSpec,childHeightMeasureSpec);
      int width=host.mMeasuredWidth;
      int height=host.mMeasuredHeight;
      boolean measureAgain=false;
      if (lp.horizontalWeight > 0.0f) {
        width+=(int)((mWidth - width) * lp.horizontalWeight);
        childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY);
        measureAgain=true;
      }
      if (lp.verticalWeight > 0.0f) {
        height+=(int)((mHeight - height) * lp.verticalWeight);
        childHeightMeasureSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
        measureAgain=true;
      }
      if (measureAgain) {
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height);
        host.measure(childWidthMeasureSpec,childHeightMeasureSpec);
      }
      mLayoutRequested=true;
    }
  }
  final boolean didLayout=mLayoutRequested;
  boolean triggerGlobalLayoutListener=didLayout || attachInfo.mRecomputeGlobalAttributes;
  if (didLayout) {
    mLayoutRequested=false;
    mScrollMayChange=true;
    if (DEBUG_ORIENTATION || DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + host + ""String_Node_Str""+ host.mMeasuredWidth+ ""String_Node_Str""+ host.mMeasuredHeight+ ""String_Node_Str"");
    long startTime=0L;
    if (Config.DEBUG && ViewDebug.profileLayout) {
      startTime=SystemClock.elapsedRealtime();
    }
    host.layout(0,0,host.mMeasuredWidth,host.mMeasuredHeight);
    if (Config.DEBUG && ViewDebug.consistencyCheckEnabled) {
      if (!host.dispatchConsistencyCheck(ViewDebug.CONSISTENCY_LAYOUT)) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ViewDebug.CONSISTENCY_LOG_TAG + ""String_Node_Str"");
      }
    }
    if (Config.DEBUG && ViewDebug.profileLayout) {
      EventLog.writeEvent(60001,SystemClock.elapsedRealtime() - startTime);
    }
    if ((host.mPrivateFlags & View.REQUEST_TRANSPARENT_REGIONS) != 0) {
      host.getLocationInWindow(mTmpLocation);
      mTransparentRegion.set(mTmpLocation[0],mTmpLocation[1],mTmpLocation[0] + host.mRight - host.mLeft,mTmpLocation[1] + host.mBottom - host.mTop);
      host.gatherTransparentRegion(mTransparentRegion);
      if (mTranslator != null) {
        mTranslator.translateRegionInWindowToScreen(mTransparentRegion);
      }
      if (!mTransparentRegion.equals(mPreviousTransparentRegion)) {
        mPreviousTransparentRegion.set(mTransparentRegion);
        try {
          sWindowSession.setTransparentRegion(mWindow,mTransparentRegion);
        }
 catch (        RemoteException e) {
        }
      }
    }
    if (DBG) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      host.debug();
    }
  }
  if (triggerGlobalLayoutListener) {
    attachInfo.mRecomputeGlobalAttributes=false;
    attachInfo.mTreeObserver.dispatchOnGlobalLayout();
  }
  if (computesInternalInsets) {
    ViewTreeObserver.InternalInsetsInfo insets=attachInfo.mGivenInternalInsets;
    final Rect givenContent=attachInfo.mGivenInternalInsets.contentInsets;
    final Rect givenVisible=attachInfo.mGivenInternalInsets.visibleInsets;
    givenContent.left=givenContent.top=givenContent.right=givenContent.bottom=givenVisible.left=givenVisible.top=givenVisible.right=givenVisible.bottom=0;
    attachInfo.mTreeObserver.dispatchOnComputeInternalInsets(insets);
    Rect contentInsets=insets.contentInsets;
    Rect visibleInsets=insets.visibleInsets;
    if (mTranslator != null) {
      contentInsets=mTranslator.getTranslatedContentInsets(contentInsets);
      visibleInsets=mTranslator.getTranslatedVisbileInsets(visibleInsets);
    }
    if (insetsPending || !mLastGivenInsets.equals(insets)) {
      mLastGivenInsets.set(insets);
      try {
        sWindowSession.setInsets(mWindow,insets.mTouchableInsets,contentInsets,visibleInsets);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (mFirst) {
    if (DEBUG_INPUT_RESIZE)     Log.v(TAG,""String_Node_Str"" + mView.hasFocus());
    if (mView != null) {
      if (!mView.hasFocus()) {
        mView.requestFocus(View.FOCUS_FORWARD);
        mFocusedView=mRealFocusedView=mView.findFocus();
        if (DEBUG_INPUT_RESIZE)         Log.v(TAG,""String_Node_Str"" + mFocusedView);
      }
 else {
        mRealFocusedView=mView.findFocus();
        if (DEBUG_INPUT_RESIZE)         Log.v(TAG,""String_Node_Str"" + mRealFocusedView);
      }
    }
  }
  mFirst=false;
  mWillDrawSoon=false;
  mNewSurfaceNeeded=false;
  mViewVisibility=viewVisibility;
  if (mAttachInfo.mHasWindowFocus) {
    final boolean imTarget=WindowManager.LayoutParams.mayUseInputMethod(mWindowAttributes.flags);
    if (imTarget != mLastWasImTarget) {
      mLastWasImTarget=imTarget;
      InputMethodManager imm=InputMethodManager.peekInstance();
      if (imm != null && imTarget) {
        imm.startGettingWindowFocus(mView);
        imm.onWindowFocus(mView,mView.findFocus(),mWindowAttributes.softInputMode,!mHasHadWindowFocus,mWindowAttributes.flags);
      }
    }
  }
  boolean cancelDraw=attachInfo.mTreeObserver.dispatchOnPreDraw();
  if (!cancelDraw && !newSurface) {
    mFullRedrawNeeded=false;
    draw(fullRedrawNeeded);
    if ((relayoutResult & WindowManagerImpl.RELAYOUT_FIRST_TIME) != 0 || mReportNextDraw) {
      if (LOCAL_LOGV) {
        Log.v(TAG,""String_Node_Str"" + mWindowAttributes.getTitle());
      }
      mReportNextDraw=false;
      if (mSurfaceHolder != null && mSurface.isValid()) {
        mSurfaceHolderCallback.surfaceRedrawNeeded(mSurfaceHolder);
        SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
        if (callbacks != null) {
          for (          SurfaceHolder.Callback c : callbacks) {
            if (c instanceof SurfaceHolder.Callback2) {
              ((SurfaceHolder.Callback2)c).surfaceRedrawNeeded(mSurfaceHolder);
            }
          }
        }
      }
      try {
        sWindowSession.finishDrawing(mWindow);
      }
 catch (      RemoteException e) {
      }
    }
  }
 else {
    if ((relayoutResult & WindowManagerImpl.RELAYOUT_FIRST_TIME) != 0) {
      mReportNextDraw=true;
    }
    if (fullRedrawNeeded) {
      mFullRedrawNeeded=true;
    }
    scheduleTraversals();
  }
}","private void performTraversals(){
  final View host=mView;
  if (DBG) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    host.debug();
  }
  if (host == null || !mAdded)   return;
  mTraversalScheduled=false;
  mWillDrawSoon=true;
  boolean windowResizesToFitContent=false;
  boolean fullRedrawNeeded=mFullRedrawNeeded;
  boolean newSurface=false;
  boolean surfaceChanged=false;
  WindowManager.LayoutParams lp=mWindowAttributes;
  int desiredWindowWidth;
  int desiredWindowHeight;
  int childWidthMeasureSpec;
  int childHeightMeasureSpec;
  final View.AttachInfo attachInfo=mAttachInfo;
  final int viewVisibility=getHostVisibility();
  boolean viewVisibilityChanged=mViewVisibility != viewVisibility || mNewSurfaceNeeded;
  float appScale=mAttachInfo.mApplicationScale;
  WindowManager.LayoutParams params=null;
  if (mWindowAttributesChanged) {
    mWindowAttributesChanged=false;
    surfaceChanged=true;
    params=lp;
  }
  Rect frame=mWinFrame;
  if (mFirst) {
    fullRedrawNeeded=true;
    mLayoutRequested=true;
    DisplayMetrics packageMetrics=mView.getContext().getResources().getDisplayMetrics();
    desiredWindowWidth=packageMetrics.widthPixels;
    desiredWindowHeight=packageMetrics.heightPixels;
    attachInfo.mSurface=mSurface;
    attachInfo.mUse32BitDrawingCache=PixelFormat.formatHasAlpha(lp.format) || lp.format == PixelFormat.RGBX_8888;
    attachInfo.mHasWindowFocus=false;
    attachInfo.mWindowVisibility=viewVisibility;
    attachInfo.mRecomputeGlobalAttributes=false;
    attachInfo.mKeepScreenOn=false;
    viewVisibilityChanged=false;
    mLastConfiguration.setTo(host.getResources().getConfiguration());
    host.dispatchAttachedToWindow(attachInfo,0);
  }
 else {
    desiredWindowWidth=frame.width();
    desiredWindowHeight=frame.height();
    if (desiredWindowWidth != mWidth || desiredWindowHeight != mHeight) {
      if (DEBUG_ORIENTATION)       Log.v(TAG,""String_Node_Str"" + host + ""String_Node_Str""+ frame);
      fullRedrawNeeded=true;
      mLayoutRequested=true;
      windowResizesToFitContent=true;
    }
  }
  if (viewVisibilityChanged) {
    attachInfo.mWindowVisibility=viewVisibility;
    host.dispatchWindowVisibilityChanged(viewVisibility);
    if (viewVisibility != View.VISIBLE || mNewSurfaceNeeded) {
      if (mUseGL) {
        destroyGL();
      }
    }
    if (viewVisibility == View.GONE) {
      mHasHadWindowFocus=false;
    }
  }
  boolean insetsChanged=false;
  if (mLayoutRequested) {
    getRunQueue().executeActions(attachInfo.mHandler);
    if (mFirst) {
      host.fitSystemWindows(mAttachInfo.mContentInsets);
      mAttachInfo.mInTouchMode=!mAddedTouchMode;
      ensureTouchModeLocally(mAddedTouchMode);
    }
 else {
      if (!mAttachInfo.mContentInsets.equals(mPendingContentInsets)) {
        mAttachInfo.mContentInsets.set(mPendingContentInsets);
        host.fitSystemWindows(mAttachInfo.mContentInsets);
        insetsChanged=true;
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + mAttachInfo.mContentInsets);
      }
      if (!mAttachInfo.mVisibleInsets.equals(mPendingVisibleInsets)) {
        mAttachInfo.mVisibleInsets.set(mPendingVisibleInsets);
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + mAttachInfo.mVisibleInsets);
      }
      if (lp.width == ViewGroup.LayoutParams.WRAP_CONTENT || lp.height == ViewGroup.LayoutParams.WRAP_CONTENT) {
        windowResizesToFitContent=true;
        DisplayMetrics packageMetrics=mView.getContext().getResources().getDisplayMetrics();
        desiredWindowWidth=packageMetrics.widthPixels;
        desiredWindowHeight=packageMetrics.heightPixels;
      }
    }
    childWidthMeasureSpec=getRootMeasureSpec(desiredWindowWidth,lp.width);
    childHeightMeasureSpec=getRootMeasureSpec(desiredWindowHeight,lp.height);
    if (DEBUG_ORIENTATION || DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + host + ""String_Node_Str""+ desiredWindowWidth+ ""String_Node_Str""+ desiredWindowHeight+ ""String_Node_Str"");
    host.measure(childWidthMeasureSpec,childHeightMeasureSpec);
    if (DBG) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      host.debug();
    }
  }
  if (attachInfo.mRecomputeGlobalAttributes) {
    attachInfo.mRecomputeGlobalAttributes=false;
    boolean oldVal=attachInfo.mKeepScreenOn;
    attachInfo.mKeepScreenOn=false;
    host.dispatchCollectViewAttributes(0);
    if (attachInfo.mKeepScreenOn != oldVal) {
      params=lp;
    }
  }
  if (mFirst || attachInfo.mViewVisibilityChanged) {
    attachInfo.mViewVisibilityChanged=false;
    int resizeMode=mSoftInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST;
    if (resizeMode == WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED) {
      final int N=attachInfo.mScrollContainers.size();
      for (int i=0; i < N; i++) {
        if (attachInfo.mScrollContainers.get(i).isShown()) {
          resizeMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
        }
      }
      if (resizeMode == 0) {
        resizeMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN;
      }
      if ((lp.softInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) != resizeMode) {
        lp.softInputMode=(lp.softInputMode & ~WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) | resizeMode;
        params=lp;
      }
    }
  }
  if (params != null && (host.mPrivateFlags & View.REQUEST_TRANSPARENT_REGIONS) != 0) {
    if (!PixelFormat.formatHasAlpha(params.format)) {
      params.format=PixelFormat.TRANSLUCENT;
    }
  }
  boolean windowShouldResize=mLayoutRequested && windowResizesToFitContent && ((mWidth != host.mMeasuredWidth || mHeight != host.mMeasuredHeight) || (lp.width == ViewGroup.LayoutParams.WRAP_CONTENT && frame.width() < desiredWindowWidth && frame.width() != mWidth) || (lp.height == ViewGroup.LayoutParams.WRAP_CONTENT && frame.height() < desiredWindowHeight && frame.height() != mHeight));
  final boolean computesInternalInsets=attachInfo.mTreeObserver.hasComputeInternalInsetsListeners();
  boolean insetsPending=false;
  int relayoutResult=0;
  if (mFirst || windowShouldResize || insetsChanged|| viewVisibilityChanged|| params != null) {
    if (viewVisibility == View.VISIBLE) {
      insetsPending=computesInternalInsets && (mFirst || viewVisibilityChanged);
      if (mWindowAttributes.memoryType == WindowManager.LayoutParams.MEMORY_TYPE_GPU) {
        if (params == null) {
          params=mWindowAttributes;
        }
        mGlWanted=true;
      }
    }
    if (mSurfaceHolder != null) {
      mSurfaceHolder.mSurfaceLock.lock();
      mDrawingAllowed=true;
    }
    boolean initialized=false;
    boolean contentInsetsChanged=false;
    boolean visibleInsetsChanged;
    boolean hadSurface=mSurface.isValid();
    try {
      int fl=0;
      if (params != null) {
        fl=params.flags;
        if (attachInfo.mKeepScreenOn) {
          params.flags|=WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;
        }
      }
      if (DEBUG_LAYOUT) {
        Log.i(TAG,""String_Node_Str"" + host.mMeasuredWidth + ""String_Node_Str""+ host.mMeasuredHeight+ ""String_Node_Str""+ params);
      }
      relayoutResult=relayoutWindow(params,viewVisibility,insetsPending);
      if (params != null) {
        params.flags=fl;
      }
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + frame.toShortString() + ""String_Node_Str""+ mPendingContentInsets.toShortString()+ ""String_Node_Str""+ mPendingVisibleInsets.toShortString()+ ""String_Node_Str""+ mSurface);
      if (mPendingConfiguration.seq != 0) {
        if (DEBUG_CONFIGURATION)         Log.v(TAG,""String_Node_Str"" + mPendingConfiguration);
        updateConfiguration(mPendingConfiguration,!mFirst);
        mPendingConfiguration.seq=0;
      }
      contentInsetsChanged=!mPendingContentInsets.equals(mAttachInfo.mContentInsets);
      visibleInsetsChanged=!mPendingVisibleInsets.equals(mAttachInfo.mVisibleInsets);
      if (contentInsetsChanged) {
        mAttachInfo.mContentInsets.set(mPendingContentInsets);
        host.fitSystemWindows(mAttachInfo.mContentInsets);
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + mAttachInfo.mContentInsets);
      }
      if (visibleInsetsChanged) {
        mAttachInfo.mVisibleInsets.set(mPendingVisibleInsets);
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + mAttachInfo.mVisibleInsets);
      }
      if (!hadSurface) {
        if (mSurface.isValid()) {
          newSurface=true;
          fullRedrawNeeded=true;
          mPreviousTransparentRegion.setEmpty();
          if (mGlWanted && !mUseGL) {
            initializeGL();
            initialized=mGlCanvas != null;
          }
        }
      }
 else       if (!mSurface.isValid()) {
        mLastScrolledFocus=null;
        mScrollY=mCurScrollY=0;
        if (mScroller != null) {
          mScroller.abortAnimation();
        }
      }
    }
 catch (    RemoteException e) {
    }
    if (DEBUG_ORIENTATION)     Log.v(TAG,""String_Node_Str"" + frame + ""String_Node_Str""+ mSurface);
    attachInfo.mWindowLeft=frame.left;
    attachInfo.mWindowTop=frame.top;
    mWidth=frame.width();
    mHeight=frame.height();
    if (mSurfaceHolder != null) {
      if (mSurface.isValid()) {
        mSurfaceHolder.mSurface=mSurface;
      }
      mSurfaceHolder.mSurfaceLock.unlock();
      if (mSurface.isValid()) {
        if (!hadSurface) {
          mSurfaceHolder.ungetCallbacks();
          mIsCreating=true;
          mSurfaceHolderCallback.surfaceCreated(mSurfaceHolder);
          SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
          if (callbacks != null) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceCreated(mSurfaceHolder);
            }
          }
          surfaceChanged=true;
        }
        if (surfaceChanged) {
          mSurfaceHolderCallback.surfaceChanged(mSurfaceHolder,lp.format,mWidth,mHeight);
          SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
          if (callbacks != null) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceChanged(mSurfaceHolder,lp.format,mWidth,mHeight);
            }
          }
        }
        mIsCreating=false;
      }
 else       if (hadSurface) {
        mSurfaceHolder.ungetCallbacks();
        SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
        mSurfaceHolderCallback.surfaceDestroyed(mSurfaceHolder);
        if (callbacks != null) {
          for (          SurfaceHolder.Callback c : callbacks) {
            c.surfaceDestroyed(mSurfaceHolder);
          }
        }
        mSurfaceHolder.mSurfaceLock.lock();
        mSurfaceHolder.mSurface=new Surface();
        mSurfaceHolder.mSurfaceLock.unlock();
      }
    }
    if (initialized) {
      mGlCanvas.setViewport((int)(mWidth * appScale + 0.5f),(int)(mHeight * appScale + 0.5f));
    }
    boolean focusChangedDueToTouchMode=ensureTouchModeLocally((relayoutResult & WindowManagerImpl.RELAYOUT_IN_TOUCH_MODE) != 0);
    if (focusChangedDueToTouchMode || mWidth != host.mMeasuredWidth || mHeight != host.mMeasuredHeight || contentInsetsChanged) {
      childWidthMeasureSpec=getRootMeasureSpec(mWidth,lp.width);
      childHeightMeasureSpec=getRootMeasureSpec(mHeight,lp.height);
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + mWidth + ""String_Node_Str""+ host.mMeasuredWidth+ ""String_Node_Str""+ mHeight+ ""String_Node_Str""+ host.mMeasuredHeight+ ""String_Node_Str""+ contentInsetsChanged);
      host.measure(childWidthMeasureSpec,childHeightMeasureSpec);
      int width=host.mMeasuredWidth;
      int height=host.mMeasuredHeight;
      boolean measureAgain=false;
      if (lp.horizontalWeight > 0.0f) {
        width+=(int)((mWidth - width) * lp.horizontalWeight);
        childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY);
        measureAgain=true;
      }
      if (lp.verticalWeight > 0.0f) {
        height+=(int)((mHeight - height) * lp.verticalWeight);
        childHeightMeasureSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
        measureAgain=true;
      }
      if (measureAgain) {
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height);
        host.measure(childWidthMeasureSpec,childHeightMeasureSpec);
      }
      mLayoutRequested=true;
    }
  }
  final boolean didLayout=mLayoutRequested;
  boolean triggerGlobalLayoutListener=didLayout || attachInfo.mRecomputeGlobalAttributes;
  if (didLayout) {
    mLayoutRequested=false;
    mScrollMayChange=true;
    if (DEBUG_ORIENTATION || DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + host + ""String_Node_Str""+ host.mMeasuredWidth+ ""String_Node_Str""+ host.mMeasuredHeight+ ""String_Node_Str"");
    long startTime=0L;
    if (Config.DEBUG && ViewDebug.profileLayout) {
      startTime=SystemClock.elapsedRealtime();
    }
    host.layout(0,0,host.mMeasuredWidth,host.mMeasuredHeight);
    if (Config.DEBUG && ViewDebug.consistencyCheckEnabled) {
      if (!host.dispatchConsistencyCheck(ViewDebug.CONSISTENCY_LAYOUT)) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ViewDebug.CONSISTENCY_LOG_TAG + ""String_Node_Str"");
      }
    }
    if (Config.DEBUG && ViewDebug.profileLayout) {
      EventLog.writeEvent(60001,SystemClock.elapsedRealtime() - startTime);
    }
    if ((host.mPrivateFlags & View.REQUEST_TRANSPARENT_REGIONS) != 0) {
      host.getLocationInWindow(mTmpLocation);
      mTransparentRegion.set(mTmpLocation[0],mTmpLocation[1],mTmpLocation[0] + host.mRight - host.mLeft,mTmpLocation[1] + host.mBottom - host.mTop);
      host.gatherTransparentRegion(mTransparentRegion);
      if (mTranslator != null) {
        mTranslator.translateRegionInWindowToScreen(mTransparentRegion);
      }
      if (!mTransparentRegion.equals(mPreviousTransparentRegion)) {
        mPreviousTransparentRegion.set(mTransparentRegion);
        try {
          sWindowSession.setTransparentRegion(mWindow,mTransparentRegion);
        }
 catch (        RemoteException e) {
        }
      }
    }
    if (DBG) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      host.debug();
    }
  }
  if (triggerGlobalLayoutListener) {
    attachInfo.mRecomputeGlobalAttributes=false;
    attachInfo.mTreeObserver.dispatchOnGlobalLayout();
  }
  if (computesInternalInsets) {
    ViewTreeObserver.InternalInsetsInfo insets=attachInfo.mGivenInternalInsets;
    final Rect givenContent=attachInfo.mGivenInternalInsets.contentInsets;
    final Rect givenVisible=attachInfo.mGivenInternalInsets.visibleInsets;
    givenContent.left=givenContent.top=givenContent.right=givenContent.bottom=givenVisible.left=givenVisible.top=givenVisible.right=givenVisible.bottom=0;
    attachInfo.mTreeObserver.dispatchOnComputeInternalInsets(insets);
    Rect contentInsets=insets.contentInsets;
    Rect visibleInsets=insets.visibleInsets;
    if (mTranslator != null) {
      contentInsets=mTranslator.getTranslatedContentInsets(contentInsets);
      visibleInsets=mTranslator.getTranslatedVisbileInsets(visibleInsets);
    }
    if (insetsPending || !mLastGivenInsets.equals(insets)) {
      mLastGivenInsets.set(insets);
      try {
        sWindowSession.setInsets(mWindow,insets.mTouchableInsets,contentInsets,visibleInsets);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (mFirst) {
    if (DEBUG_INPUT_RESIZE)     Log.v(TAG,""String_Node_Str"" + mView.hasFocus());
    if (mView != null) {
      if (!mView.hasFocus()) {
        mView.requestFocus(View.FOCUS_FORWARD);
        mFocusedView=mRealFocusedView=mView.findFocus();
        if (DEBUG_INPUT_RESIZE)         Log.v(TAG,""String_Node_Str"" + mFocusedView);
      }
 else {
        mRealFocusedView=mView.findFocus();
        if (DEBUG_INPUT_RESIZE)         Log.v(TAG,""String_Node_Str"" + mRealFocusedView);
      }
    }
  }
  mFirst=false;
  mWillDrawSoon=false;
  mNewSurfaceNeeded=false;
  mViewVisibility=viewVisibility;
  if (mAttachInfo.mHasWindowFocus) {
    final boolean imTarget=WindowManager.LayoutParams.mayUseInputMethod(mWindowAttributes.flags);
    if (imTarget != mLastWasImTarget) {
      mLastWasImTarget=imTarget;
      InputMethodManager imm=InputMethodManager.peekInstance();
      if (imm != null && imTarget) {
        imm.startGettingWindowFocus(mView);
        imm.onWindowFocus(mView,mView.findFocus(),mWindowAttributes.softInputMode,!mHasHadWindowFocus,mWindowAttributes.flags);
      }
    }
  }
  boolean cancelDraw=attachInfo.mTreeObserver.dispatchOnPreDraw();
  if (!cancelDraw && !newSurface) {
    mFullRedrawNeeded=false;
    draw(fullRedrawNeeded);
    if ((relayoutResult & WindowManagerImpl.RELAYOUT_FIRST_TIME) != 0 || mReportNextDraw) {
      if (LOCAL_LOGV) {
        Log.v(TAG,""String_Node_Str"" + mWindowAttributes.getTitle());
      }
      mReportNextDraw=false;
      if (mSurfaceHolder != null && mSurface.isValid()) {
        mSurfaceHolderCallback.surfaceRedrawNeeded(mSurfaceHolder);
        SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
        if (callbacks != null) {
          for (          SurfaceHolder.Callback c : callbacks) {
            if (c instanceof SurfaceHolder.Callback2) {
              ((SurfaceHolder.Callback2)c).surfaceRedrawNeeded(mSurfaceHolder);
            }
          }
        }
      }
      try {
        sWindowSession.finishDrawing(mWindow);
      }
 catch (      RemoteException e) {
      }
    }
  }
 else {
    if ((relayoutResult & WindowManagerImpl.RELAYOUT_FIRST_TIME) != 0) {
      mReportNextDraw=true;
    }
    if (fullRedrawNeeded) {
      mFullRedrawNeeded=true;
    }
    scheduleTraversals();
  }
}"
21770,"private void startTextSelectionMode(){
  if (!mIsInTextSelectionMode) {
    if (mSelectionModifierCursorController == null) {
      Log.w(LOG_TAG,""String_Node_Str"");
      return;
    }
    if (!requestFocus()) {
      return;
    }
    selectCurrentWord();
    mSelectionModifierCursorController.show();
    mIsInTextSelectionMode=true;
  }
}","private void startTextSelectionMode(){
  if (!mIsInTextSelectionMode) {
    if (!hasSelectionController()) {
      Log.w(LOG_TAG,""String_Node_Str"");
      return;
    }
    if (!requestFocus()) {
      return;
    }
    selectCurrentWord();
    mIsInTextSelectionMode=true;
  }
}"
21771,"public void beginBatchEdit(){
  final InputMethodState ims=mInputMethodState;
  if (ims != null) {
    int nesting=++ims.mBatchEditNesting;
    if (nesting == 1) {
      ims.mCursorChanged=false;
      ims.mChangedDelta=0;
      if (ims.mContentChanged) {
        ims.mChangedStart=0;
        ims.mChangedEnd=mText.length();
      }
 else {
        ims.mChangedStart=EXTRACT_UNKNOWN;
        ims.mChangedEnd=EXTRACT_UNKNOWN;
        ims.mContentChanged=false;
      }
      onBeginBatchEdit();
    }
  }
}","public void beginBatchEdit(){
  mInBatchEditControllers=true;
  final InputMethodState ims=mInputMethodState;
  if (ims != null) {
    int nesting=++ims.mBatchEditNesting;
    if (nesting == 1) {
      ims.mCursorChanged=false;
      ims.mChangedDelta=0;
      if (ims.mContentChanged) {
        ims.mChangedStart=0;
        ims.mChangedEnd=mText.length();
      }
 else {
        ims.mChangedStart=EXTRACT_UNKNOWN;
        ims.mChangedEnd=EXTRACT_UNKNOWN;
        ims.mContentChanged=false;
      }
      onBeginBatchEdit();
    }
  }
}"
21772,"/** 
 * Called when a context menu option for the text view is selected.  Currently this will be one of:   {@link android.R.id#selectAll},  {@link android.R.id#startSelectingText},  {@link android.R.id#cut},   {@link android.R.id#copy},  {@link android.R.id#paste},   {@link android.R.id#copyUrl}, or   {@link android.R.id#switchInputMethod}.
 */
public boolean onTextContextMenuItem(int id){
  int min=0;
  int max=mText.length();
  if (isFocused()) {
    final int selStart=getSelectionStart();
    final int selEnd=getSelectionEnd();
    min=Math.max(0,Math.min(selStart,selEnd));
    max=Math.max(0,Math.max(selStart,selEnd));
  }
  ClipboardManager clip=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
switch (id) {
case ID_SELECT_ALL:
    Selection.setSelection((Spannable)mText,0,mText.length());
  startTextSelectionMode();
return true;
case ID_START_SELECTING_TEXT:
startTextSelectionMode();
return true;
case ID_CUT:
clip.setText(mTransformed.subSequence(min,max));
((Editable)mText).delete(min,max);
stopTextSelectionMode();
return true;
case ID_COPY:
clip.setText(mTransformed.subSequence(min,max));
stopTextSelectionMode();
return true;
case ID_PASTE:
CharSequence paste=clip.getText();
if (paste != null && paste.length() > 0) {
long minMax=prepareSpacesAroundPaste(min,max,paste);
min=extractRangeStartFromLong(minMax);
max=extractRangeEndFromLong(minMax);
Selection.setSelection((Spannable)mText,max);
((Editable)mText).replace(min,max,paste);
stopTextSelectionMode();
}
return true;
case ID_COPY_URL:
URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
if (urls.length == 1) {
clip.setText(urls[0].getURL());
}
return true;
case ID_SWITCH_INPUT_METHOD:
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.showInputMethodPicker();
}
return true;
case ID_ADD_TO_DICTIONARY:
String word=getWordForDictionary();
if (word != null) {
Intent i=new Intent(""String_Node_Str"");
i.putExtra(""String_Node_Str"",word);
i.setFlags(i.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
getContext().startActivity(i);
}
return true;
}
return false;
}","/** 
 * Called when a context menu option for the text view is selected.  Currently this will be one of:   {@link android.R.id#selectAll},  {@link android.R.id#startSelectingText},  {@link android.R.id#cut},   {@link android.R.id#copy},  {@link android.R.id#paste},   {@link android.R.id#copyUrl}, or   {@link android.R.id#switchInputMethod}.
 */
public boolean onTextContextMenuItem(int id){
  int min=0;
  int max=mText.length();
  if (isFocused()) {
    final int selStart=getSelectionStart();
    final int selEnd=getSelectionEnd();
    min=Math.max(0,Math.min(selStart,selEnd));
    max=Math.max(0,Math.max(selStart,selEnd));
  }
  ClipboardManager clip=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
switch (id) {
case ID_SELECT_ALL:
    Selection.setSelection((Spannable)mText,0,mText.length());
  startTextSelectionMode();
getSelectionController().show();
return true;
case ID_START_SELECTING_TEXT:
startTextSelectionMode();
getSelectionController().show();
return true;
case ID_CUT:
clip.setText(mTransformed.subSequence(min,max));
((Editable)mText).delete(min,max);
stopTextSelectionMode();
return true;
case ID_COPY:
clip.setText(mTransformed.subSequence(min,max));
stopTextSelectionMode();
return true;
case ID_PASTE:
CharSequence paste=clip.getText();
if (paste != null && paste.length() > 0) {
long minMax=prepareSpacesAroundPaste(min,max,paste);
min=extractRangeStartFromLong(minMax);
max=extractRangeEndFromLong(minMax);
Selection.setSelection((Spannable)mText,max);
((Editable)mText).replace(min,max,paste);
stopTextSelectionMode();
}
return true;
case ID_COPY_URL:
URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
if (urls.length == 1) {
clip.setText(urls[0].getURL());
}
return true;
case ID_SWITCH_INPUT_METHOD:
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.showInputMethodPicker();
}
return true;
case ID_ADD_TO_DICTIONARY:
String word=getWordForDictionary();
if (word != null) {
Intent i=new Intent(""String_Node_Str"");
i.putExtra(""String_Node_Str"",word);
i.setFlags(i.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
getContext().startActivity(i);
}
return true;
}
return false;
}"
21773,"private void onTapUpEvent(int prevStart,int prevEnd){
  final int start=getSelectionStart();
  final int end=getSelectionEnd();
  if (start == end) {
    if (start >= prevStart && start < prevEnd) {
      Selection.setSelection((Spannable)mText,prevStart,prevEnd);
      if (mSelectionModifierCursorController != null && !mSelectionModifierCursorController.isShowing()) {
        mSelectionModifierCursorController.show();
      }
 else {
        showContextMenu();
      }
      return;
    }
 else {
      stopTextSelectionMode();
      if (mInsertionPointCursorController != null && mText.length() > 0) {
        mInsertionPointCursorController.show();
      }
    }
  }
 else   if (hasSelection() && mSelectionModifierCursorController != null) {
    mSelectionModifierCursorController.show();
  }
}","private void onTapUpEvent(int prevStart,int prevEnd){
  final int start=getSelectionStart();
  final int end=getSelectionEnd();
  if (start == end) {
    if (start >= prevStart && start < prevEnd) {
      Selection.setSelection((Spannable)mText,prevStart,prevEnd);
      if (hasSelectionController() && !getSelectionController().isShowing()) {
        getSelectionController().show();
      }
 else {
        showContextMenu();
      }
      return;
    }
 else {
      stopTextSelectionMode();
      if (hasInsertionController() && mText.length() > 0) {
        getInsertionController().show();
      }
    }
  }
 else   if (hasSelection() && hasSelectionController()) {
    getSelectionController().show();
  }
}"
21774,"public void show(){
  mIsShowing=true;
  updatePosition();
  mStartHandle.show();
  mEndHandle.show();
  hideInsertionPointCursorController();
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}","public void show(){
  if (isInBatchEditMode()) {
    return;
  }
  mIsShowing=true;
  updatePosition();
  mStartHandle.show();
  mEndHandle.show();
  hideInsertionPointCursorController();
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}"
21775,"public void endBatchEdit(){
  final InputMethodState ims=mInputMethodState;
  if (ims != null) {
    int nesting=--ims.mBatchEditNesting;
    if (nesting == 0) {
      finishBatchEdit(ims);
    }
  }
}","public void endBatchEdit(){
  mInBatchEditControllers=false;
  final InputMethodState ims=mInputMethodState;
  if (ims != null) {
    int nesting=--ims.mBatchEditNesting;
    if (nesting == 0) {
      finishBatchEdit(ims);
    }
  }
}"
21776,"private void prepareCursorControllers(){
  boolean windowSupportsHandles=false;
  ViewGroup.LayoutParams params=getRootView().getLayoutParams();
  if (params instanceof WindowManager.LayoutParams) {
    WindowManager.LayoutParams windowParams=(WindowManager.LayoutParams)params;
    windowSupportsHandles=windowParams.type < WindowManager.LayoutParams.FIRST_SUB_WINDOW || windowParams.type > WindowManager.LayoutParams.LAST_SUB_WINDOW;
  }
  if (windowSupportsHandles && mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (windowSupportsHandles && textCanBeSelected() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}","private void prepareCursorControllers(){
  boolean windowSupportsHandles=false;
  ViewGroup.LayoutParams params=getRootView().getLayoutParams();
  if (params instanceof WindowManager.LayoutParams) {
    WindowManager.LayoutParams windowParams=(WindowManager.LayoutParams)params;
    windowSupportsHandles=windowParams.type < WindowManager.LayoutParams.FIRST_SUB_WINDOW || windowParams.type > WindowManager.LayoutParams.LAST_SUB_WINDOW;
  }
  mInsertionControllerEnabled=windowSupportsHandles && mCursorVisible && mLayout != null;
  mSelectionControllerEnabled=windowSupportsHandles && textCanBeSelected() && mLayout != null;
  if (!mInsertionControllerEnabled) {
    mInsertionPointCursorController=null;
  }
  if (!mSelectionControllerEnabled) {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}"
21777,"/** 
 * {@inheritDoc}
 */
public boolean onPreDraw(){
  if (mPreDrawState != PREDRAW_PENDING) {
    return true;
  }
  if (mLayout == null) {
    assumeLayout();
  }
  boolean changed=false;
  SelectionModifierCursorController selectionController=null;
  if (mSelectionModifierCursorController != null) {
    selectionController=(SelectionModifierCursorController)mSelectionModifierCursorController;
  }
  if (mMovement != null) {
    int curs=getSelectionEnd();
    if (selectionController != null && selectionController.isSelectionStartDragged()) {
      curs=getSelectionStart();
    }
    if (curs < 0 && (mGravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.BOTTOM) {
      curs=mText.length();
    }
    if (curs >= 0) {
      changed=bringPointIntoView(curs);
    }
  }
 else {
    changed=bringTextIntoView();
  }
  if (selectionController != null && hasSelection()) {
    startTextSelectionMode();
  }
  mPreDrawState=PREDRAW_DONE;
  return !changed;
}","/** 
 * {@inheritDoc}
 */
public boolean onPreDraw(){
  if (mPreDrawState != PREDRAW_PENDING) {
    return true;
  }
  if (mLayout == null) {
    assumeLayout();
  }
  boolean changed=false;
  SelectionModifierCursorController selectionController=null;
  if (mSelectionModifierCursorController != null) {
    selectionController=(SelectionModifierCursorController)mSelectionModifierCursorController;
  }
  if (mMovement != null) {
    int curs=getSelectionEnd();
    if (selectionController != null && selectionController.isSelectionStartDragged()) {
      curs=getSelectionStart();
    }
    if (curs < 0 && (mGravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.BOTTOM) {
      curs=mText.length();
    }
    if (curs >= 0) {
      changed=bringPointIntoView(curs);
    }
  }
 else {
    changed=bringTextIntoView();
  }
  if (this instanceof ExtractEditText && selectionController != null && hasSelection()) {
    startTextSelectionMode();
  }
  mPreDrawState=PREDRAW_DONE;
  return !changed;
}"
21778,"public void updatePosition(){
  final int selectionStart=getSelectionStart();
  final int selectionEnd=getSelectionEnd();
  if ((selectionStart < 0) || (selectionEnd < 0)) {
    Log.w(LOG_TAG,""String_Node_Str"");
    hide();
    return;
  }
  mStartHandle.positionAtCursor(selectionStart,true);
  mEndHandle.positionAtCursor(selectionEnd,true);
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}","public void updatePosition(){
  if (!isShowing()) {
    return;
  }
  final int selectionStart=getSelectionStart();
  final int selectionEnd=getSelectionEnd();
  if ((selectionStart < 0) || (selectionEnd < 0)) {
    Log.w(LOG_TAG,""String_Node_Str"");
    hide();
    return;
  }
  mStartHandle.positionAtCursor(selectionStart,true);
  mEndHandle.positionAtCursor(selectionEnd,true);
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}"
21779,"private boolean isPositionVisible(){
  if (mIsDragging) {
    return true;
  }
  final int extendedPaddingTop=getExtendedPaddingTop();
  final int extendedPaddingBottom=getExtendedPaddingBottom();
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final TextView hostView=TextView.this;
  final int left=0;
  final int right=hostView.getWidth();
  final int top=0;
  final int bottom=hostView.getHeight();
  if (mTempRect == null) {
    mTempRect=new Rect();
  }
  final Rect clip=mTempRect;
  clip.left=left + compoundPaddingLeft;
  clip.top=top + extendedPaddingTop;
  clip.right=right - compoundPaddingRight;
  clip.bottom=bottom - extendedPaddingBottom;
  final ViewParent parent=hostView.getParent();
  if (parent == null || !parent.getChildVisibleRect(hostView,clip,null)) {
    return false;
  }
  final int[] coords=mTempCoords;
  hostView.getLocationInWindow(coords);
  final int posX=coords[0] + mPositionX + (int)mHotspotX;
  final int posY=coords[1] + mPositionY + (int)mHotspotY;
  return posX >= clip.left && posX <= clip.right && posY >= clip.top && posY <= clip.bottom;
}","private boolean isPositionVisible(){
  if (mIsDragging) {
    return true;
  }
  if (isInBatchEditMode()) {
    return false;
  }
  final int extendedPaddingTop=getExtendedPaddingTop();
  final int extendedPaddingBottom=getExtendedPaddingBottom();
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final TextView hostView=TextView.this;
  final int left=0;
  final int right=hostView.getWidth();
  final int top=0;
  final int bottom=hostView.getHeight();
  if (mTempRect == null) {
    mTempRect=new Rect();
  }
  final Rect clip=mTempRect;
  clip.left=left + compoundPaddingLeft;
  clip.top=top + extendedPaddingTop;
  clip.right=right - compoundPaddingRight;
  clip.bottom=bottom - extendedPaddingBottom;
  final ViewParent parent=hostView.getParent();
  if (parent == null || !parent.getChildVisibleRect(hostView,clip,null)) {
    return false;
  }
  final int[] coords=mTempCoords;
  hostView.getLocationInWindow(coords);
  final int posX=coords[0] + mPositionX + (int)mHotspotX;
  final int posY=coords[1] + mPositionY + (int)mHotspotY;
  return posX >= clip.left && posX <= clip.right && posY >= clip.top && posY <= clip.bottom;
}"
21780,"private void startTextSelectionMode(){
  if (!mIsInTextSelectionMode) {
    if (mSelectionModifierCursorController == null) {
      Log.w(LOG_TAG,""String_Node_Str"");
      return;
    }
    if (!requestFocus()) {
      return;
    }
    selectCurrentWord();
    mSelectionModifierCursorController.show();
    mIsInTextSelectionMode=true;
  }
}","private void startTextSelectionMode(){
  if (!mIsInTextSelectionMode) {
    if (!hasSelectionController()) {
      Log.w(LOG_TAG,""String_Node_Str"");
      return;
    }
    if (!requestFocus()) {
      return;
    }
    selectCurrentWord();
    mIsInTextSelectionMode=true;
  }
}"
21781,"public void beginBatchEdit(){
  final InputMethodState ims=mInputMethodState;
  if (ims != null) {
    int nesting=++ims.mBatchEditNesting;
    if (nesting == 1) {
      ims.mCursorChanged=false;
      ims.mChangedDelta=0;
      if (ims.mContentChanged) {
        ims.mChangedStart=0;
        ims.mChangedEnd=mText.length();
      }
 else {
        ims.mChangedStart=EXTRACT_UNKNOWN;
        ims.mChangedEnd=EXTRACT_UNKNOWN;
        ims.mContentChanged=false;
      }
      onBeginBatchEdit();
    }
  }
}","public void beginBatchEdit(){
  mInBatchEditControllers=true;
  final InputMethodState ims=mInputMethodState;
  if (ims != null) {
    int nesting=++ims.mBatchEditNesting;
    if (nesting == 1) {
      ims.mCursorChanged=false;
      ims.mChangedDelta=0;
      if (ims.mContentChanged) {
        ims.mChangedStart=0;
        ims.mChangedEnd=mText.length();
      }
 else {
        ims.mChangedStart=EXTRACT_UNKNOWN;
        ims.mChangedEnd=EXTRACT_UNKNOWN;
        ims.mContentChanged=false;
      }
      onBeginBatchEdit();
    }
  }
}"
21782,"/** 
 * Called when a context menu option for the text view is selected.  Currently this will be one of:   {@link android.R.id#selectAll},  {@link android.R.id#startSelectingText},  {@link android.R.id#cut},   {@link android.R.id#copy},  {@link android.R.id#paste},   {@link android.R.id#copyUrl}, or   {@link android.R.id#switchInputMethod}.
 */
public boolean onTextContextMenuItem(int id){
  int min=0;
  int max=mText.length();
  if (isFocused()) {
    final int selStart=getSelectionStart();
    final int selEnd=getSelectionEnd();
    min=Math.max(0,Math.min(selStart,selEnd));
    max=Math.max(0,Math.max(selStart,selEnd));
  }
  ClipboardManager clip=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
switch (id) {
case ID_SELECT_ALL:
    Selection.setSelection((Spannable)mText,0,mText.length());
  startTextSelectionMode();
return true;
case ID_START_SELECTING_TEXT:
startTextSelectionMode();
return true;
case ID_CUT:
clip.setText(mTransformed.subSequence(min,max));
((Editable)mText).delete(min,max);
stopTextSelectionMode();
return true;
case ID_COPY:
clip.setText(mTransformed.subSequence(min,max));
stopTextSelectionMode();
return true;
case ID_PASTE:
CharSequence paste=clip.getText();
if (paste != null && paste.length() > 0) {
long minMax=prepareSpacesAroundPaste(min,max,paste);
min=extractRangeStartFromLong(minMax);
max=extractRangeEndFromLong(minMax);
Selection.setSelection((Spannable)mText,max);
((Editable)mText).replace(min,max,paste);
stopTextSelectionMode();
}
return true;
case ID_COPY_URL:
URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
if (urls.length == 1) {
clip.setText(urls[0].getURL());
}
return true;
case ID_SWITCH_INPUT_METHOD:
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.showInputMethodPicker();
}
return true;
case ID_ADD_TO_DICTIONARY:
String word=getWordForDictionary();
if (word != null) {
Intent i=new Intent(""String_Node_Str"");
i.putExtra(""String_Node_Str"",word);
i.setFlags(i.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
getContext().startActivity(i);
}
return true;
}
return false;
}","/** 
 * Called when a context menu option for the text view is selected.  Currently this will be one of:   {@link android.R.id#selectAll},  {@link android.R.id#startSelectingText},  {@link android.R.id#cut},   {@link android.R.id#copy},  {@link android.R.id#paste},   {@link android.R.id#copyUrl}, or   {@link android.R.id#switchInputMethod}.
 */
public boolean onTextContextMenuItem(int id){
  int min=0;
  int max=mText.length();
  if (isFocused()) {
    final int selStart=getSelectionStart();
    final int selEnd=getSelectionEnd();
    min=Math.max(0,Math.min(selStart,selEnd));
    max=Math.max(0,Math.max(selStart,selEnd));
  }
  ClipboardManager clip=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
switch (id) {
case ID_SELECT_ALL:
    Selection.setSelection((Spannable)mText,0,mText.length());
  startTextSelectionMode();
getSelectionController().show();
return true;
case ID_START_SELECTING_TEXT:
startTextSelectionMode();
getSelectionController().show();
return true;
case ID_CUT:
clip.setText(mTransformed.subSequence(min,max));
((Editable)mText).delete(min,max);
stopTextSelectionMode();
return true;
case ID_COPY:
clip.setText(mTransformed.subSequence(min,max));
stopTextSelectionMode();
return true;
case ID_PASTE:
CharSequence paste=clip.getText();
if (paste != null && paste.length() > 0) {
long minMax=prepareSpacesAroundPaste(min,max,paste);
min=extractRangeStartFromLong(minMax);
max=extractRangeEndFromLong(minMax);
Selection.setSelection((Spannable)mText,max);
((Editable)mText).replace(min,max,paste);
stopTextSelectionMode();
}
return true;
case ID_COPY_URL:
URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
if (urls.length == 1) {
clip.setText(urls[0].getURL());
}
return true;
case ID_SWITCH_INPUT_METHOD:
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.showInputMethodPicker();
}
return true;
case ID_ADD_TO_DICTIONARY:
String word=getWordForDictionary();
if (word != null) {
Intent i=new Intent(""String_Node_Str"");
i.putExtra(""String_Node_Str"",word);
i.setFlags(i.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
getContext().startActivity(i);
}
return true;
}
return false;
}"
21783,"private void onTapUpEvent(int prevStart,int prevEnd){
  final int start=getSelectionStart();
  final int end=getSelectionEnd();
  if (start == end) {
    if (start >= prevStart && start < prevEnd) {
      Selection.setSelection((Spannable)mText,prevStart,prevEnd);
      if (mSelectionModifierCursorController != null && !mSelectionModifierCursorController.isShowing()) {
        mSelectionModifierCursorController.show();
      }
 else {
        showContextMenu();
      }
      return;
    }
 else {
      stopTextSelectionMode();
      if (mInsertionPointCursorController != null && mText.length() > 0) {
        mInsertionPointCursorController.show();
      }
    }
  }
 else   if (hasSelection() && mSelectionModifierCursorController != null) {
    mSelectionModifierCursorController.show();
  }
}","private void onTapUpEvent(int prevStart,int prevEnd){
  final int start=getSelectionStart();
  final int end=getSelectionEnd();
  if (start == end) {
    if (start >= prevStart && start < prevEnd) {
      Selection.setSelection((Spannable)mText,prevStart,prevEnd);
      if (hasSelectionController() && !getSelectionController().isShowing()) {
        getSelectionController().show();
      }
 else {
        showContextMenu();
      }
      return;
    }
 else {
      stopTextSelectionMode();
      if (hasInsertionController() && mText.length() > 0) {
        getInsertionController().show();
      }
    }
  }
 else   if (hasSelection() && hasSelectionController()) {
    getSelectionController().show();
  }
}"
21784,"public void show(){
  mIsShowing=true;
  updatePosition();
  mStartHandle.show();
  mEndHandle.show();
  hideInsertionPointCursorController();
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}","public void show(){
  if (isInBatchEditMode()) {
    return;
  }
  mIsShowing=true;
  updatePosition();
  mStartHandle.show();
  mEndHandle.show();
  hideInsertionPointCursorController();
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}"
21785,"public void endBatchEdit(){
  final InputMethodState ims=mInputMethodState;
  if (ims != null) {
    int nesting=--ims.mBatchEditNesting;
    if (nesting == 0) {
      finishBatchEdit(ims);
    }
  }
}","public void endBatchEdit(){
  mInBatchEditControllers=false;
  final InputMethodState ims=mInputMethodState;
  if (ims != null) {
    int nesting=--ims.mBatchEditNesting;
    if (nesting == 0) {
      finishBatchEdit(ims);
    }
  }
}"
21786,"private void prepareCursorControllers(){
  boolean windowSupportsHandles=false;
  ViewGroup.LayoutParams params=getRootView().getLayoutParams();
  if (params instanceof WindowManager.LayoutParams) {
    WindowManager.LayoutParams windowParams=(WindowManager.LayoutParams)params;
    windowSupportsHandles=windowParams.type < WindowManager.LayoutParams.FIRST_SUB_WINDOW || windowParams.type > WindowManager.LayoutParams.LAST_SUB_WINDOW;
  }
  if (windowSupportsHandles && mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (windowSupportsHandles && textCanBeSelected() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}","private void prepareCursorControllers(){
  boolean windowSupportsHandles=false;
  ViewGroup.LayoutParams params=getRootView().getLayoutParams();
  if (params instanceof WindowManager.LayoutParams) {
    WindowManager.LayoutParams windowParams=(WindowManager.LayoutParams)params;
    windowSupportsHandles=windowParams.type < WindowManager.LayoutParams.FIRST_SUB_WINDOW || windowParams.type > WindowManager.LayoutParams.LAST_SUB_WINDOW;
  }
  mInsertionControllerEnabled=windowSupportsHandles && mCursorVisible && mLayout != null;
  mSelectionControllerEnabled=windowSupportsHandles && textCanBeSelected() && mLayout != null;
  if (!mInsertionControllerEnabled) {
    mInsertionPointCursorController=null;
  }
  if (!mSelectionControllerEnabled) {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}"
21787,"/** 
 * {@inheritDoc}
 */
public boolean onPreDraw(){
  if (mPreDrawState != PREDRAW_PENDING) {
    return true;
  }
  if (mLayout == null) {
    assumeLayout();
  }
  boolean changed=false;
  SelectionModifierCursorController selectionController=null;
  if (mSelectionModifierCursorController != null) {
    selectionController=(SelectionModifierCursorController)mSelectionModifierCursorController;
  }
  if (mMovement != null) {
    int curs=getSelectionEnd();
    if (selectionController != null && selectionController.isSelectionStartDragged()) {
      curs=getSelectionStart();
    }
    if (curs < 0 && (mGravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.BOTTOM) {
      curs=mText.length();
    }
    if (curs >= 0) {
      changed=bringPointIntoView(curs);
    }
  }
 else {
    changed=bringTextIntoView();
  }
  if (selectionController != null && hasSelection()) {
    startTextSelectionMode();
  }
  mPreDrawState=PREDRAW_DONE;
  return !changed;
}","/** 
 * {@inheritDoc}
 */
public boolean onPreDraw(){
  if (mPreDrawState != PREDRAW_PENDING) {
    return true;
  }
  if (mLayout == null) {
    assumeLayout();
  }
  boolean changed=false;
  SelectionModifierCursorController selectionController=null;
  if (mSelectionModifierCursorController != null) {
    selectionController=(SelectionModifierCursorController)mSelectionModifierCursorController;
  }
  if (mMovement != null) {
    int curs=getSelectionEnd();
    if (selectionController != null && selectionController.isSelectionStartDragged()) {
      curs=getSelectionStart();
    }
    if (curs < 0 && (mGravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.BOTTOM) {
      curs=mText.length();
    }
    if (curs >= 0) {
      changed=bringPointIntoView(curs);
    }
  }
 else {
    changed=bringTextIntoView();
  }
  if (this instanceof ExtractEditText && selectionController != null && hasSelection()) {
    startTextSelectionMode();
  }
  mPreDrawState=PREDRAW_DONE;
  return !changed;
}"
21788,"public void updatePosition(){
  final int selectionStart=getSelectionStart();
  final int selectionEnd=getSelectionEnd();
  if ((selectionStart < 0) || (selectionEnd < 0)) {
    Log.w(LOG_TAG,""String_Node_Str"");
    hide();
    return;
  }
  mStartHandle.positionAtCursor(selectionStart,true);
  mEndHandle.positionAtCursor(selectionEnd,true);
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}","public void updatePosition(){
  if (!isShowing()) {
    return;
  }
  final int selectionStart=getSelectionStart();
  final int selectionEnd=getSelectionEnd();
  if ((selectionStart < 0) || (selectionEnd < 0)) {
    Log.w(LOG_TAG,""String_Node_Str"");
    hide();
    return;
  }
  mStartHandle.positionAtCursor(selectionStart,true);
  mEndHandle.positionAtCursor(selectionEnd,true);
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}"
21789,"private boolean isPositionVisible(){
  if (mIsDragging) {
    return true;
  }
  final int extendedPaddingTop=getExtendedPaddingTop();
  final int extendedPaddingBottom=getExtendedPaddingBottom();
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final TextView hostView=TextView.this;
  final int left=0;
  final int right=hostView.getWidth();
  final int top=0;
  final int bottom=hostView.getHeight();
  if (mTempRect == null) {
    mTempRect=new Rect();
  }
  final Rect clip=mTempRect;
  clip.left=left + compoundPaddingLeft;
  clip.top=top + extendedPaddingTop;
  clip.right=right - compoundPaddingRight;
  clip.bottom=bottom - extendedPaddingBottom;
  final ViewParent parent=hostView.getParent();
  if (parent == null || !parent.getChildVisibleRect(hostView,clip,null)) {
    return false;
  }
  final int[] coords=mTempCoords;
  hostView.getLocationInWindow(coords);
  final int posX=coords[0] + mPositionX + (int)mHotspotX;
  final int posY=coords[1] + mPositionY + (int)mHotspotY;
  return posX >= clip.left && posX <= clip.right && posY >= clip.top && posY <= clip.bottom;
}","private boolean isPositionVisible(){
  if (mIsDragging) {
    return true;
  }
  if (isInBatchEditMode()) {
    return false;
  }
  final int extendedPaddingTop=getExtendedPaddingTop();
  final int extendedPaddingBottom=getExtendedPaddingBottom();
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final TextView hostView=TextView.this;
  final int left=0;
  final int right=hostView.getWidth();
  final int top=0;
  final int bottom=hostView.getHeight();
  if (mTempRect == null) {
    mTempRect=new Rect();
  }
  final Rect clip=mTempRect;
  clip.left=left + compoundPaddingLeft;
  clip.top=top + extendedPaddingTop;
  clip.right=right - compoundPaddingRight;
  clip.bottom=bottom - extendedPaddingBottom;
  final ViewParent parent=hostView.getParent();
  if (parent == null || !parent.getChildVisibleRect(hostView,clip,null)) {
    return false;
  }
  final int[] coords=mTempCoords;
  hostView.getLocationInWindow(coords);
  final int posX=coords[0] + mPositionX + (int)mHotspotX;
  final int posY=coords[1] + mPositionY + (int)mHotspotY;
  return posX >= clip.left && posX <= clip.right && posY >= clip.top && posY <= clip.bottom;
}"
21790,"/** 
 * Helper function to compute the angle change between two rotation matrices. Given a current rotation matrix (R) and a previous rotation matrix (prevR) computes the rotation around the x,y, and z axes which transforms prevR to R. outputs a 3 element vector containing the x,y, and z angle change at indexes 0, 1, and 2 respectively. <p> Each input matrix is either as a 3x3 or 4x4 row-major matrix depending on the length of the passed array: <p>If the array length is 9, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8]   / </pre> <p>If the array length is 16, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   R[ 3]  \ |  R[ 4]   R[ 5]   R[ 6]   R[ 7]  | |  R[ 8]   R[ 9]   R[10]   R[11]  | \  R[12]   R[13]   R[14]   R[15]  / </pre>
 * @param R current rotation matrix
 * @param prevR previous rotation matrix
 * @param angleChange an array of floats in which the angle change is stored
 */
public static void getAngleChange(float[] angleChange,float[] R,float[] prevR){
  float rd1=0, rd4=0, rd6=0, rd7=0, rd8=0;
  float ri0=0, ri1=0, ri2=0, ri3=0, ri4=0, ri5=0, ri6=0, ri7=0, ri8=0;
  float pri0=0, pri1=0, pri2=0, pri3=0, pri4=0, pri5=0, pri6=0, pri7=0, pri8=0;
  int i, j, k;
  if (R.length == 9) {
    ri0=R[0];
    ri1=R[1];
    ri2=R[2];
    ri3=R[3];
    ri4=R[4];
    ri5=R[5];
    ri6=R[6];
    ri7=R[7];
    ri8=R[8];
  }
 else   if (R.length == 16) {
    ri0=R[0];
    ri1=R[1];
    ri2=R[2];
    ri3=R[4];
    ri4=R[5];
    ri5=R[6];
    ri6=R[8];
    ri7=R[9];
    ri8=R[10];
  }
  if (prevR.length == 9) {
    pri0=R[0];
    pri1=R[1];
    pri2=R[2];
    pri3=R[3];
    pri4=R[4];
    pri5=R[5];
    pri6=R[6];
    pri7=R[7];
    pri8=R[8];
  }
 else   if (prevR.length == 16) {
    pri0=R[0];
    pri1=R[1];
    pri2=R[2];
    pri3=R[4];
    pri4=R[5];
    pri5=R[6];
    pri6=R[8];
    pri7=R[9];
    pri8=R[10];
  }
  rd1=pri0 * ri1 + pri3 * ri4 + pri6 * ri7;
  rd4=pri1 * ri1 + pri4 * ri4 + pri7 * ri7;
  rd6=pri2 * ri0 + pri5 * ri3 + pri8 * ri6;
  rd7=pri2 * ri1 + pri5 * ri4 + pri8 * ri7;
  rd8=pri2 * ri2 + pri5 * ri5 + pri8 * ri8;
  angleChange[0]=(float)Math.atan2(rd1,rd4);
  angleChange[1]=(float)Math.asin(-rd7);
  angleChange[2]=(float)Math.atan2(-rd6,rd8);
}","/** 
 * Helper function to compute the angle change between two rotation matrices. Given a current rotation matrix (R) and a previous rotation matrix (prevR) computes the rotation around the x,y, and z axes which transforms prevR to R. outputs a 3 element vector containing the x,y, and z angle change at indexes 0, 1, and 2 respectively. <p> Each input matrix is either as a 3x3 or 4x4 row-major matrix depending on the length of the passed array: <p>If the array length is 9, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8]   / </pre> <p>If the array length is 16, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   R[ 3]  \ |  R[ 4]   R[ 5]   R[ 6]   R[ 7]  | |  R[ 8]   R[ 9]   R[10]   R[11]  | \  R[12]   R[13]   R[14]   R[15]  / </pre>
 * @param R current rotation matrix
 * @param prevR previous rotation matrix
 * @param angleChange an array of floats in which the angle change is stored
 */
public static void getAngleChange(float[] angleChange,float[] R,float[] prevR){
  float rd1=0, rd4=0, rd6=0, rd7=0, rd8=0;
  float ri0=0, ri1=0, ri2=0, ri3=0, ri4=0, ri5=0, ri6=0, ri7=0, ri8=0;
  float pri0=0, pri1=0, pri2=0, pri3=0, pri4=0, pri5=0, pri6=0, pri7=0, pri8=0;
  int i, j, k;
  if (R.length == 9) {
    ri0=R[0];
    ri1=R[1];
    ri2=R[2];
    ri3=R[3];
    ri4=R[4];
    ri5=R[5];
    ri6=R[6];
    ri7=R[7];
    ri8=R[8];
  }
 else   if (R.length == 16) {
    ri0=R[0];
    ri1=R[1];
    ri2=R[2];
    ri3=R[4];
    ri4=R[5];
    ri5=R[6];
    ri6=R[8];
    ri7=R[9];
    ri8=R[10];
  }
  if (prevR.length == 9) {
    pri0=prevR[0];
    pri1=prevR[1];
    pri2=prevR[2];
    pri3=prevR[3];
    pri4=prevR[4];
    pri5=prevR[5];
    pri6=prevR[6];
    pri7=prevR[7];
    pri8=prevR[8];
  }
 else   if (prevR.length == 16) {
    pri0=prevR[0];
    pri1=prevR[1];
    pri2=prevR[2];
    pri3=prevR[4];
    pri4=prevR[5];
    pri5=prevR[6];
    pri6=prevR[8];
    pri7=prevR[9];
    pri8=prevR[10];
  }
  rd1=pri0 * ri1 + pri3 * ri4 + pri6 * ri7;
  rd4=pri1 * ri1 + pri4 * ri4 + pri7 * ri7;
  rd6=pri2 * ri0 + pri5 * ri3 + pri8 * ri6;
  rd7=pri2 * ri1 + pri5 * ri4 + pri8 * ri7;
  rd8=pri2 * ri2 + pri5 * ri5 + pri8 * ri8;
  angleChange[0]=(float)Math.atan2(rd1,rd4);
  angleChange[1]=(float)Math.asin(-rd7);
  angleChange[2]=(float)Math.atan2(-rd6,rd8);
}"
21791,"/** 
 * Helper function to compute the angle change between two rotation matrices. Given a current rotation matrix (R) and a previous rotation matrix (prevR) computes the rotation around the x,y, and z axes which transforms prevR to R. outputs a 3 element vector containing the x,y, and z angle change at indexes 0, 1, and 2 respectively. <p> Each input matrix is either as a 3x3 or 4x4 row-major matrix depending on the length of the passed array: <p>If the array length is 9, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8]   / </pre> <p>If the array length is 16, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   R[ 3]  \ |  R[ 4]   R[ 5]   R[ 6]   R[ 7]  | |  R[ 8]   R[ 9]   R[10]   R[11]  | \  R[12]   R[13]   R[14]   R[15]  / </pre>
 * @param R current rotation matrix
 * @param prevR previous rotation matrix
 * @param angleChange an array of floats in which the angle change is stored
 */
public static void getAngleChange(float[] angleChange,float[] R,float[] prevR){
  float rd1=0, rd4=0, rd6=0, rd7=0, rd8=0;
  float ri0=0, ri1=0, ri2=0, ri3=0, ri4=0, ri5=0, ri6=0, ri7=0, ri8=0;
  float pri0=0, pri1=0, pri2=0, pri3=0, pri4=0, pri5=0, pri6=0, pri7=0, pri8=0;
  int i, j, k;
  if (R.length == 9) {
    ri0=R[0];
    ri1=R[1];
    ri2=R[2];
    ri3=R[3];
    ri4=R[4];
    ri5=R[5];
    ri6=R[6];
    ri7=R[7];
    ri8=R[8];
  }
 else   if (R.length == 16) {
    ri0=R[0];
    ri1=R[1];
    ri2=R[2];
    ri3=R[4];
    ri4=R[5];
    ri5=R[6];
    ri6=R[8];
    ri7=R[9];
    ri8=R[10];
  }
  if (prevR.length == 9) {
    pri0=R[0];
    pri1=R[1];
    pri2=R[2];
    pri3=R[3];
    pri4=R[4];
    pri5=R[5];
    pri6=R[6];
    pri7=R[7];
    pri8=R[8];
  }
 else   if (prevR.length == 16) {
    pri0=R[0];
    pri1=R[1];
    pri2=R[2];
    pri3=R[4];
    pri4=R[5];
    pri5=R[6];
    pri6=R[8];
    pri7=R[9];
    pri8=R[10];
  }
  rd1=pri0 * ri1 + pri3 * ri4 + pri6 * ri7;
  rd4=pri1 * ri1 + pri4 * ri4 + pri7 * ri7;
  rd6=pri2 * ri0 + pri5 * ri3 + pri8 * ri6;
  rd7=pri2 * ri1 + pri5 * ri4 + pri8 * ri7;
  rd8=pri2 * ri2 + pri5 * ri5 + pri8 * ri8;
  angleChange[0]=(float)Math.atan2(rd1,rd4);
  angleChange[1]=(float)Math.asin(-rd7);
  angleChange[2]=(float)Math.atan2(-rd6,rd8);
}","/** 
 * Helper function to compute the angle change between two rotation matrices. Given a current rotation matrix (R) and a previous rotation matrix (prevR) computes the rotation around the x,y, and z axes which transforms prevR to R. outputs a 3 element vector containing the x,y, and z angle change at indexes 0, 1, and 2 respectively. <p> Each input matrix is either as a 3x3 or 4x4 row-major matrix depending on the length of the passed array: <p>If the array length is 9, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   \ |  R[ 3]   R[ 4]   R[ 5]   | \  R[ 6]   R[ 7]   R[ 8]   / </pre> <p>If the array length is 16, then the array elements represent this matrix <pre> /  R[ 0]   R[ 1]   R[ 2]   R[ 3]  \ |  R[ 4]   R[ 5]   R[ 6]   R[ 7]  | |  R[ 8]   R[ 9]   R[10]   R[11]  | \  R[12]   R[13]   R[14]   R[15]  / </pre>
 * @param R current rotation matrix
 * @param prevR previous rotation matrix
 * @param angleChange an array of floats in which the angle change is stored
 */
public static void getAngleChange(float[] angleChange,float[] R,float[] prevR){
  float rd1=0, rd4=0, rd6=0, rd7=0, rd8=0;
  float ri0=0, ri1=0, ri2=0, ri3=0, ri4=0, ri5=0, ri6=0, ri7=0, ri8=0;
  float pri0=0, pri1=0, pri2=0, pri3=0, pri4=0, pri5=0, pri6=0, pri7=0, pri8=0;
  int i, j, k;
  if (R.length == 9) {
    ri0=R[0];
    ri1=R[1];
    ri2=R[2];
    ri3=R[3];
    ri4=R[4];
    ri5=R[5];
    ri6=R[6];
    ri7=R[7];
    ri8=R[8];
  }
 else   if (R.length == 16) {
    ri0=R[0];
    ri1=R[1];
    ri2=R[2];
    ri3=R[4];
    ri4=R[5];
    ri5=R[6];
    ri6=R[8];
    ri7=R[9];
    ri8=R[10];
  }
  if (prevR.length == 9) {
    pri0=prevR[0];
    pri1=prevR[1];
    pri2=prevR[2];
    pri3=prevR[3];
    pri4=prevR[4];
    pri5=prevR[5];
    pri6=prevR[6];
    pri7=prevR[7];
    pri8=prevR[8];
  }
 else   if (prevR.length == 16) {
    pri0=prevR[0];
    pri1=prevR[1];
    pri2=prevR[2];
    pri3=prevR[4];
    pri4=prevR[5];
    pri5=prevR[6];
    pri6=prevR[8];
    pri7=prevR[9];
    pri8=prevR[10];
  }
  rd1=pri0 * ri1 + pri3 * ri4 + pri6 * ri7;
  rd4=pri1 * ri1 + pri4 * ri4 + pri7 * ri7;
  rd6=pri2 * ri0 + pri5 * ri3 + pri8 * ri6;
  rd7=pri2 * ri1 + pri5 * ri4 + pri8 * ri7;
  rd8=pri2 * ri2 + pri5 * ri5 + pri8 * ri8;
  angleChange[0]=(float)Math.atan2(rd1,rd4);
  angleChange[1]=(float)Math.asin(-rd7);
  angleChange[2]=(float)Math.atan2(-rd6,rd8);
}"
21792,"/** 
 * Called when the application is stopping.  There are no more application objects running and the process will exit.  <em>Note: never depend on this method being called; in many cases an unneeded application process will simply be killed by the kernel without executing any application code.</em> If you override this method, be sure to call super.onTerminate().
 */
public void onTerminate(){
}","/** 
 * This method is for use in emulated process environments.  It will never be called on a production Android device, where processes are removed by simply killing them; no user code (including this callback) is executed when doing so.
 */
public void onTerminate(){
}"
21793,"/** 
 * Called when the application is stopping.  There are no more application objects running and the process will exit.  <em>Note: never depend on this method being called; in many cases an unneeded application process will simply be killed by the kernel without executing any application code.</em> If you override this method, be sure to call super.onTerminate().
 */
public void onTerminate(){
}","/** 
 * This method is for use in emulated process environments.  It will never be called on a production Android device, where processes are removed by simply killing them; no user code (including this callback) is executed when doing so.
 */
public void onTerminate(){
}"
21794,"public void setAudioMode(){
  Context context=getContext();
  if (context == null)   return;
  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  int mode=AudioManager.MODE_NORMAL;
switch (getState()) {
case RINGING:
    mode=AudioManager.MODE_RINGTONE;
  break;
case OFFHOOK:
Phone fgPhone=getFgPhone();
if (!(fgPhone instanceof SipPhone)) {
mode=AudioManager.MODE_IN_CALL;
}
break;
}
if (audioManager.getMode() != mode) audioManager.setMode(mode);
}","public void setAudioMode(){
  Context context=getContext();
  if (context == null)   return;
  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  int mode=AudioManager.MODE_NORMAL;
switch (getState()) {
case RINGING:
    mode=AudioManager.MODE_RINGTONE;
  break;
case OFFHOOK:
Phone fgPhone=getFgPhone();
if (hasActiveFgCall() && !(fgPhone instanceof SipPhone)) {
mode=AudioManager.MODE_IN_CALL;
}
break;
}
if (audioManager.getMode() != mode) audioManager.setMode(mode);
}"
21795,"/** 
 * Resolves the value of a resource, if the value references a theme or resource value. <p/> This method ensures that it returns a   {@link IResourceValue} object that does notreference another resource. If the resource cannot be resolved, it returns <code>null</code>. <p/> If a value that does not need to be resolved is given, the method will return a new instance of IResourceValue that contains the input value.
 * @param type the type of the resource
 * @param name the name of the attribute containing this value.
 * @param value the resource value, or reference to resolve
 * @return the resolved resource value or <code>null</code> if it failed to resolve it.
 */
private IResourceValue resolveValue(String type,String name,String value){
  if (value == null) {
    return null;
  }
  IResourceValue resValue=findResValue(value);
  if (resValue == null) {
    return new ResourceValue(type,name,value);
  }
  return resolveResValue(resValue);
}","/** 
 * Resolves the value of a resource, if the value references a theme or resource value. <p/> This method ensures that it returns a   {@link IResourceValue} object that does notreference another resource. If the resource cannot be resolved, it returns <code>null</code>. <p/> If a value that does not need to be resolved is given, the method will return a new instance of IResourceValue that contains the input value.
 * @param type the type of the resource
 * @param name the name of the attribute containing this value.
 * @param value the resource value, or reference to resolve
 * @return the resolved resource value or <code>null</code> if it failed to resolve it.
 */
private IResourceValue resolveValue(String type,String name,String value){
  if (value == null) {
    return null;
  }
  IResourceValue resValue=findResValue(value,false);
  if (resValue == null) {
    return new ResourceValue(type,name,value);
  }
  return resolveResValue(resValue);
}"
21796,"@Override public TypedArray obtainStyledAttributes(AttributeSet set,int[] attrs,int defStyleAttr,int defStyleRes){
  BridgeXmlBlockParser parser=null;
  if (set instanceof BridgeXmlBlockParser) {
    parser=(BridgeXmlBlockParser)set;
  }
 else   if (set != null) {
    mLogger.error(""String_Node_Str"");
    return null;
  }
  boolean[] frameworkAttributes=new boolean[1];
  TreeMap<Integer,String> styleNameMap=searchAttrs(attrs,frameworkAttributes);
  BridgeTypedArray ta=((BridgeResources)mResources).newTypeArray(attrs.length,parser != null ? parser.isPlatformFile() : true);
  IStyleResourceValue defStyleValues=null;
  String customStyle=null;
  if (parser != null) {
    customStyle=parser.getAttributeValue(null,""String_Node_Str"");
  }
  if (customStyle != null) {
    IResourceValue item=findResValue(customStyle);
    if (item instanceof IStyleResourceValue) {
      defStyleValues=(IStyleResourceValue)item;
    }
  }
  if (defStyleValues == null && defStyleAttr != 0) {
    String defStyleName=searchAttr(defStyleAttr);
    if (mThemeValues != null) {
      IResourceValue item=findItemInStyle(mThemeValues,defStyleName);
      if (item != null) {
        item=findResValue(item.getValue());
        if (item instanceof IStyleResourceValue) {
          defStyleValues=(IStyleResourceValue)item;
        }
      }
 else {
        System.out.println(""String_Node_Str"" + defStyleName);
      }
    }
  }
  if (defStyleRes != 0) {
    throw new UnsupportedOperationException();
  }
  String namespace=BridgeConstants.NS_RESOURCES;
  if (frameworkAttributes[0] == false) {
    namespace=mProjectCallback.getNamespace();
  }
  if (styleNameMap != null) {
    for (    Entry<Integer,String> styleAttribute : styleNameMap.entrySet()) {
      int index=styleAttribute.getKey().intValue();
      String name=styleAttribute.getValue();
      String value=null;
      if (parser != null) {
        value=parser.getAttributeValue(namespace,name);
      }
      if (value == null) {
        IResourceValue resValue=null;
        if (defStyleValues != null) {
          resValue=findItemInStyle(defStyleValues,name);
        }
        if (resValue == null && mThemeValues != null) {
          resValue=findItemInStyle(mThemeValues,name);
        }
        if (resValue != null) {
          resValue=resolveResValue(resValue);
        }
        ta.bridgeSetValue(index,name,resValue);
      }
 else {
        ta.bridgeSetValue(index,name,resolveValue(null,name,value));
      }
    }
  }
  ta.sealArray();
  return ta;
}","@Override public TypedArray obtainStyledAttributes(AttributeSet set,int[] attrs,int defStyleAttr,int defStyleRes){
  BridgeXmlBlockParser parser=null;
  if (set instanceof BridgeXmlBlockParser) {
    parser=(BridgeXmlBlockParser)set;
  }
 else   if (set != null) {
    mLogger.error(""String_Node_Str"");
    return null;
  }
  boolean[] frameworkAttributes=new boolean[1];
  TreeMap<Integer,String> styleNameMap=searchAttrs(attrs,frameworkAttributes);
  BridgeTypedArray ta=((BridgeResources)mResources).newTypeArray(attrs.length,parser != null ? parser.isPlatformFile() : true);
  IStyleResourceValue defStyleValues=null;
  String customStyle=null;
  if (parser != null) {
    customStyle=parser.getAttributeValue(null,""String_Node_Str"");
  }
  if (customStyle != null) {
    IResourceValue item=findResValue(customStyle,false);
    if (item instanceof IStyleResourceValue) {
      defStyleValues=(IStyleResourceValue)item;
    }
  }
  if (defStyleValues == null && defStyleAttr != 0) {
    String defStyleName=searchAttr(defStyleAttr);
    if (mThemeValues != null) {
      IResourceValue item=findItemInStyle(mThemeValues,defStyleName);
      if (item != null) {
        item=findResValue(item.getValue(),false);
        if (item instanceof IStyleResourceValue) {
          defStyleValues=(IStyleResourceValue)item;
        }
      }
 else {
        System.out.println(""String_Node_Str"" + defStyleName);
      }
    }
  }
  if (defStyleRes != 0) {
    throw new UnsupportedOperationException();
  }
  String namespace=BridgeConstants.NS_RESOURCES;
  if (frameworkAttributes[0] == false) {
    namespace=mProjectCallback.getNamespace();
  }
  if (styleNameMap != null) {
    for (    Entry<Integer,String> styleAttribute : styleNameMap.entrySet()) {
      int index=styleAttribute.getKey().intValue();
      String name=styleAttribute.getValue();
      String value=null;
      if (parser != null) {
        value=parser.getAttributeValue(namespace,name);
      }
      if (value == null) {
        IResourceValue resValue=null;
        if (defStyleValues != null) {
          resValue=findItemInStyle(defStyleValues,name);
        }
        if (resValue == null && mThemeValues != null) {
          resValue=findItemInStyle(mThemeValues,name);
        }
        if (resValue != null) {
          resValue=resolveResValue(resValue);
        }
        ta.bridgeSetValue(index,name,resValue);
      }
 else {
        ta.bridgeSetValue(index,name,resolveValue(null,name,value));
      }
    }
  }
  ta.sealArray();
  return ta;
}"
21797,"/** 
 * Returns the   {@link IResourceValue} referenced by the value of <var>value</var>.<p/> This method ensures that it returns a  {@link IResourceValue} object that does notreference another resource. If the resource cannot be resolved, it returns <code>null</code>. <p/> If a value that does not need to be resolved is given, the method will return the input value.
 * @param value the value containing the reference to resolve.
 * @return a {@link IResourceValue} object or <code>null</code>
 */
IResourceValue resolveResValue(IResourceValue value){
  if (value == null) {
    return null;
  }
  if (value instanceof IStyleResourceValue) {
    return value;
  }
  IResourceValue resolvedValue=findResValue(value.getValue());
  if (resolvedValue == null) {
    return value;
  }
  return resolveResValue(resolvedValue);
}","/** 
 * Returns the   {@link IResourceValue} referenced by the value of <var>value</var>.<p/> This method ensures that it returns a  {@link IResourceValue} object that does notreference another resource. If the resource cannot be resolved, it returns <code>null</code>. <p/> If a value that does not need to be resolved is given, the method will return the input value.
 * @param value the value containing the reference to resolve.
 * @return a {@link IResourceValue} object or <code>null</code>
 */
IResourceValue resolveResValue(IResourceValue value){
  if (value == null) {
    return null;
  }
  if (value instanceof IStyleResourceValue) {
    return value;
  }
  IResourceValue resolvedValue=findResValue(value.getValue(),value.isFramework());
  if (resolvedValue == null) {
    return value;
  }
  return resolveResValue(resolvedValue);
}"
21798,"private int resolveResourceValue(String value,int defaultValue){
  IResourceValue resource=mContext.resolveResValue(mContext.findResValue(value));
  if (resource != null) {
    Integer id=null;
    if (mPlatformFile || resource.isFramework()) {
      id=Bridge.getResourceValue(resource.getType(),resource.getName());
    }
 else {
      id=mContext.getProjectCallback().getResourceValue(resource.getType(),resource.getName());
    }
    if (id != null) {
      return id;
    }
  }
  return defaultValue;
}","private int resolveResourceValue(String value,int defaultValue){
  IResourceValue resource=mContext.resolveResValue(mContext.findResValue(value,mPlatformFile));
  if (resource != null) {
    Integer id=null;
    if (mPlatformFile || resource.isFramework()) {
      id=Bridge.getResourceValue(resource.getType(),resource.getName());
    }
 else {
      id=mContext.getProjectCallback().getResourceValue(resource.getType(),resource.getName());
    }
    if (id != null) {
      return id;
    }
  }
  return defaultValue;
}"
21799,"/** 
 * Returns a drawable from the given value.
 * @param value The value that contains a path to a 9 patch, a bitmap or a xml based drawable,or an hexadecimal color
 * @param context
 * @param isFramework indicates whether the resource is a framework resources.Framework resources are cached, and loaded only once.
 */
public static Drawable getDrawable(IResourceValue value,BridgeContext context,boolean isFramework){
  Drawable d=null;
  String stringValue=value.getValue();
  String lowerCaseValue=stringValue.toLowerCase();
  if (lowerCaseValue.endsWith(NinePatch.EXTENSION_9PATCH)) {
    File file=new File(stringValue);
    if (file.isFile()) {
      NinePatch ninePatch=Bridge.getCached9Patch(stringValue,isFramework ? null : context.getProjectKey());
      if (ninePatch == null) {
        try {
          ninePatch=NinePatch.load(file.toURL(),false);
          Bridge.setCached9Patch(stringValue,ninePatch,isFramework ? null : context.getProjectKey());
        }
 catch (        MalformedURLException e) {
        }
catch (        IOException e) {
        }
      }
      if (ninePatch != null) {
        return new NinePatchDrawable(ninePatch);
      }
    }
    return null;
  }
 else   if (lowerCaseValue.endsWith(""String_Node_Str"")) {
    File f=new File(stringValue);
    if (f.isFile()) {
      try {
        KXmlParser parser=new KXmlParser();
        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);
        parser.setInput(new FileReader(f));
        d=Drawable.createFromXml(context.getResources(),new BridgeXmlBlockParser(parser,context,false));
        return d;
      }
 catch (      XmlPullParserException e) {
        context.getLogger().error(e);
      }
catch (      FileNotFoundException e) {
      }
catch (      IOException e) {
        context.getLogger().error(e);
      }
    }
    return null;
  }
 else {
    File bmpFile=new File(stringValue);
    if (bmpFile.isFile()) {
      try {
        Bitmap bitmap=Bridge.getCachedBitmap(stringValue,isFramework ? null : context.getProjectKey());
        if (bitmap == null) {
          bitmap=new Bitmap(bmpFile);
          try {
            bitmap.setDensity(Density.MEDIUM.getValue());
          }
 catch (          NoClassDefFoundError error) {
          }
          Bridge.setCachedBitmap(stringValue,bitmap,isFramework ? null : context.getProjectKey());
        }
        try {
          if (value instanceof IDensityBasedResourceValue) {
            Density density=((IDensityBasedResourceValue)value).getDensity();
            if (density != Density.MEDIUM) {
              bitmap=Bitmap.createBitmap(bitmap);
              bitmap.setDensity(density.getValue());
            }
          }
        }
 catch (        NoClassDefFoundError error) {
        }
        return new BitmapDrawable(context.getResources(),bitmap);
      }
 catch (      IOException e) {
      }
    }
 else {
      try {
        int color=getColor(stringValue);
        return new ColorDrawable(color);
      }
 catch (      NumberFormatException e) {
      }
    }
  }
  return null;
}","/** 
 * Returns a drawable from the given value.
 * @param value The value that contains a path to a 9 patch, a bitmap or a xml based drawable,or an hexadecimal color
 * @param context
 * @param isFramework indicates whether the resource is a framework resources.Framework resources are cached, and loaded only once.
 */
public static Drawable getDrawable(IResourceValue value,BridgeContext context,boolean isFramework){
  Drawable d=null;
  String stringValue=value.getValue();
  String lowerCaseValue=stringValue.toLowerCase();
  if (lowerCaseValue.endsWith(NinePatch.EXTENSION_9PATCH)) {
    File file=new File(stringValue);
    if (file.isFile()) {
      NinePatch ninePatch=Bridge.getCached9Patch(stringValue,isFramework ? null : context.getProjectKey());
      if (ninePatch == null) {
        try {
          ninePatch=NinePatch.load(file.toURL(),false);
          Bridge.setCached9Patch(stringValue,ninePatch,isFramework ? null : context.getProjectKey());
        }
 catch (        MalformedURLException e) {
        }
catch (        IOException e) {
        }
      }
      if (ninePatch != null) {
        return new NinePatchDrawable(ninePatch);
      }
    }
    return null;
  }
 else   if (lowerCaseValue.endsWith(""String_Node_Str"")) {
    File f=new File(stringValue);
    if (f.isFile()) {
      try {
        KXmlParser parser=new KXmlParser();
        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);
        parser.setInput(new FileReader(f));
        d=Drawable.createFromXml(context.getResources(),new BridgeXmlBlockParser(parser,context,isFramework));
        return d;
      }
 catch (      XmlPullParserException e) {
        context.getLogger().error(e);
      }
catch (      FileNotFoundException e) {
      }
catch (      IOException e) {
        context.getLogger().error(e);
      }
    }
    return null;
  }
 else {
    File bmpFile=new File(stringValue);
    if (bmpFile.isFile()) {
      try {
        Bitmap bitmap=Bridge.getCachedBitmap(stringValue,isFramework ? null : context.getProjectKey());
        if (bitmap == null) {
          bitmap=new Bitmap(bmpFile);
          try {
            bitmap.setDensity(Density.MEDIUM.getValue());
          }
 catch (          NoClassDefFoundError error) {
          }
          Bridge.setCachedBitmap(stringValue,bitmap,isFramework ? null : context.getProjectKey());
        }
        try {
          if (value instanceof IDensityBasedResourceValue) {
            Density density=((IDensityBasedResourceValue)value).getDensity();
            if (density != Density.MEDIUM) {
              bitmap=Bitmap.createBitmap(bitmap);
              bitmap.setDensity(density.getValue());
            }
          }
        }
 catch (        NoClassDefFoundError error) {
        }
        return new BitmapDrawable(context.getResources(),bitmap);
      }
 catch (      IOException e) {
      }
    }
 else {
      try {
        int color=getColor(stringValue);
        return new ColorDrawable(color);
      }
 catch (      NumberFormatException e) {
      }
    }
  }
  return null;
}"
21800,"/** 
 * Resolves the value of a resource, if the value references a theme or resource value. <p/> This method ensures that it returns a   {@link IResourceValue} object that does notreference another resource. If the resource cannot be resolved, it returns <code>null</code>. <p/> If a value that does not need to be resolved is given, the method will return a new instance of IResourceValue that contains the input value.
 * @param type the type of the resource
 * @param name the name of the attribute containing this value.
 * @param value the resource value, or reference to resolve
 * @return the resolved resource value or <code>null</code> if it failed to resolve it.
 */
private IResourceValue resolveValue(String type,String name,String value){
  if (value == null) {
    return null;
  }
  IResourceValue resValue=findResValue(value);
  if (resValue == null) {
    return new ResourceValue(type,name,value);
  }
  return resolveResValue(resValue);
}","/** 
 * Resolves the value of a resource, if the value references a theme or resource value. <p/> This method ensures that it returns a   {@link IResourceValue} object that does notreference another resource. If the resource cannot be resolved, it returns <code>null</code>. <p/> If a value that does not need to be resolved is given, the method will return a new instance of IResourceValue that contains the input value.
 * @param type the type of the resource
 * @param name the name of the attribute containing this value.
 * @param value the resource value, or reference to resolve
 * @return the resolved resource value or <code>null</code> if it failed to resolve it.
 */
private IResourceValue resolveValue(String type,String name,String value){
  if (value == null) {
    return null;
  }
  IResourceValue resValue=findResValue(value,false);
  if (resValue == null) {
    return new ResourceValue(type,name,value);
  }
  return resolveResValue(resValue);
}"
21801,"@Override public TypedArray obtainStyledAttributes(AttributeSet set,int[] attrs,int defStyleAttr,int defStyleRes){
  BridgeXmlBlockParser parser=null;
  if (set instanceof BridgeXmlBlockParser) {
    parser=(BridgeXmlBlockParser)set;
  }
 else   if (set != null) {
    mLogger.error(""String_Node_Str"");
    return null;
  }
  boolean[] frameworkAttributes=new boolean[1];
  TreeMap<Integer,String> styleNameMap=searchAttrs(attrs,frameworkAttributes);
  BridgeTypedArray ta=((BridgeResources)mResources).newTypeArray(attrs.length,parser != null ? parser.isPlatformFile() : true);
  IStyleResourceValue defStyleValues=null;
  String customStyle=null;
  if (parser != null) {
    customStyle=parser.getAttributeValue(null,""String_Node_Str"");
  }
  if (customStyle != null) {
    IResourceValue item=findResValue(customStyle);
    if (item instanceof IStyleResourceValue) {
      defStyleValues=(IStyleResourceValue)item;
    }
  }
  if (defStyleValues == null && defStyleAttr != 0) {
    String defStyleName=searchAttr(defStyleAttr);
    if (mThemeValues != null) {
      IResourceValue item=findItemInStyle(mThemeValues,defStyleName);
      if (item != null) {
        item=findResValue(item.getValue());
        if (item instanceof IStyleResourceValue) {
          defStyleValues=(IStyleResourceValue)item;
        }
      }
 else {
        System.out.println(""String_Node_Str"" + defStyleName);
      }
    }
  }
  if (defStyleRes != 0) {
    throw new UnsupportedOperationException();
  }
  String namespace=BridgeConstants.NS_RESOURCES;
  if (frameworkAttributes[0] == false) {
    namespace=mProjectCallback.getNamespace();
  }
  if (styleNameMap != null) {
    for (    Entry<Integer,String> styleAttribute : styleNameMap.entrySet()) {
      int index=styleAttribute.getKey().intValue();
      String name=styleAttribute.getValue();
      String value=null;
      if (parser != null) {
        value=parser.getAttributeValue(namespace,name);
      }
      if (value == null) {
        IResourceValue resValue=null;
        if (defStyleValues != null) {
          resValue=findItemInStyle(defStyleValues,name);
        }
        if (resValue == null && mThemeValues != null) {
          resValue=findItemInStyle(mThemeValues,name);
        }
        if (resValue != null) {
          resValue=resolveResValue(resValue);
        }
        ta.bridgeSetValue(index,name,resValue);
      }
 else {
        ta.bridgeSetValue(index,name,resolveValue(null,name,value));
      }
    }
  }
  ta.sealArray();
  return ta;
}","@Override public TypedArray obtainStyledAttributes(AttributeSet set,int[] attrs,int defStyleAttr,int defStyleRes){
  BridgeXmlBlockParser parser=null;
  if (set instanceof BridgeXmlBlockParser) {
    parser=(BridgeXmlBlockParser)set;
  }
 else   if (set != null) {
    mLogger.error(""String_Node_Str"");
    return null;
  }
  boolean[] frameworkAttributes=new boolean[1];
  TreeMap<Integer,String> styleNameMap=searchAttrs(attrs,frameworkAttributes);
  BridgeTypedArray ta=((BridgeResources)mResources).newTypeArray(attrs.length,parser != null ? parser.isPlatformFile() : true);
  IStyleResourceValue defStyleValues=null;
  String customStyle=null;
  if (parser != null) {
    customStyle=parser.getAttributeValue(null,""String_Node_Str"");
  }
  if (customStyle != null) {
    IResourceValue item=findResValue(customStyle,false);
    if (item instanceof IStyleResourceValue) {
      defStyleValues=(IStyleResourceValue)item;
    }
  }
  if (defStyleValues == null && defStyleAttr != 0) {
    String defStyleName=searchAttr(defStyleAttr);
    if (mThemeValues != null) {
      IResourceValue item=findItemInStyle(mThemeValues,defStyleName);
      if (item != null) {
        item=findResValue(item.getValue(),false);
        if (item instanceof IStyleResourceValue) {
          defStyleValues=(IStyleResourceValue)item;
        }
      }
 else {
        System.out.println(""String_Node_Str"" + defStyleName);
      }
    }
  }
  if (defStyleRes != 0) {
    throw new UnsupportedOperationException();
  }
  String namespace=BridgeConstants.NS_RESOURCES;
  if (frameworkAttributes[0] == false) {
    namespace=mProjectCallback.getNamespace();
  }
  if (styleNameMap != null) {
    for (    Entry<Integer,String> styleAttribute : styleNameMap.entrySet()) {
      int index=styleAttribute.getKey().intValue();
      String name=styleAttribute.getValue();
      String value=null;
      if (parser != null) {
        value=parser.getAttributeValue(namespace,name);
      }
      if (value == null) {
        IResourceValue resValue=null;
        if (defStyleValues != null) {
          resValue=findItemInStyle(defStyleValues,name);
        }
        if (resValue == null && mThemeValues != null) {
          resValue=findItemInStyle(mThemeValues,name);
        }
        if (resValue != null) {
          resValue=resolveResValue(resValue);
        }
        ta.bridgeSetValue(index,name,resValue);
      }
 else {
        ta.bridgeSetValue(index,name,resolveValue(null,name,value));
      }
    }
  }
  ta.sealArray();
  return ta;
}"
21802,"/** 
 * Returns the   {@link IResourceValue} referenced by the value of <var>value</var>.<p/> This method ensures that it returns a  {@link IResourceValue} object that does notreference another resource. If the resource cannot be resolved, it returns <code>null</code>. <p/> If a value that does not need to be resolved is given, the method will return the input value.
 * @param value the value containing the reference to resolve.
 * @return a {@link IResourceValue} object or <code>null</code>
 */
IResourceValue resolveResValue(IResourceValue value){
  if (value == null) {
    return null;
  }
  if (value instanceof IStyleResourceValue) {
    return value;
  }
  IResourceValue resolvedValue=findResValue(value.getValue());
  if (resolvedValue == null) {
    return value;
  }
  return resolveResValue(resolvedValue);
}","/** 
 * Returns the   {@link IResourceValue} referenced by the value of <var>value</var>.<p/> This method ensures that it returns a  {@link IResourceValue} object that does notreference another resource. If the resource cannot be resolved, it returns <code>null</code>. <p/> If a value that does not need to be resolved is given, the method will return the input value.
 * @param value the value containing the reference to resolve.
 * @return a {@link IResourceValue} object or <code>null</code>
 */
IResourceValue resolveResValue(IResourceValue value){
  if (value == null) {
    return null;
  }
  if (value instanceof IStyleResourceValue) {
    return value;
  }
  IResourceValue resolvedValue=findResValue(value.getValue(),value.isFramework());
  if (resolvedValue == null) {
    return value;
  }
  return resolveResValue(resolvedValue);
}"
21803,"private int resolveResourceValue(String value,int defaultValue){
  IResourceValue resource=mContext.resolveResValue(mContext.findResValue(value));
  if (resource != null) {
    Integer id=null;
    if (mPlatformFile || resource.isFramework()) {
      id=Bridge.getResourceValue(resource.getType(),resource.getName());
    }
 else {
      id=mContext.getProjectCallback().getResourceValue(resource.getType(),resource.getName());
    }
    if (id != null) {
      return id;
    }
  }
  return defaultValue;
}","private int resolveResourceValue(String value,int defaultValue){
  IResourceValue resource=mContext.resolveResValue(mContext.findResValue(value,mPlatformFile));
  if (resource != null) {
    Integer id=null;
    if (mPlatformFile || resource.isFramework()) {
      id=Bridge.getResourceValue(resource.getType(),resource.getName());
    }
 else {
      id=mContext.getProjectCallback().getResourceValue(resource.getType(),resource.getName());
    }
    if (id != null) {
      return id;
    }
  }
  return defaultValue;
}"
21804,"/** 
 * Returns a drawable from the given value.
 * @param value The value that contains a path to a 9 patch, a bitmap or a xml based drawable,or an hexadecimal color
 * @param context
 * @param isFramework indicates whether the resource is a framework resources.Framework resources are cached, and loaded only once.
 */
public static Drawable getDrawable(IResourceValue value,BridgeContext context,boolean isFramework){
  Drawable d=null;
  String stringValue=value.getValue();
  String lowerCaseValue=stringValue.toLowerCase();
  if (lowerCaseValue.endsWith(NinePatch.EXTENSION_9PATCH)) {
    File file=new File(stringValue);
    if (file.isFile()) {
      NinePatch ninePatch=Bridge.getCached9Patch(stringValue,isFramework ? null : context.getProjectKey());
      if (ninePatch == null) {
        try {
          ninePatch=NinePatch.load(file.toURL(),false);
          Bridge.setCached9Patch(stringValue,ninePatch,isFramework ? null : context.getProjectKey());
        }
 catch (        MalformedURLException e) {
        }
catch (        IOException e) {
        }
      }
      if (ninePatch != null) {
        return new NinePatchDrawable(ninePatch);
      }
    }
    return null;
  }
 else   if (lowerCaseValue.endsWith(""String_Node_Str"")) {
    File f=new File(stringValue);
    if (f.isFile()) {
      try {
        KXmlParser parser=new KXmlParser();
        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);
        parser.setInput(new FileReader(f));
        d=Drawable.createFromXml(context.getResources(),new BridgeXmlBlockParser(parser,context,false));
        return d;
      }
 catch (      XmlPullParserException e) {
        context.getLogger().error(e);
      }
catch (      FileNotFoundException e) {
      }
catch (      IOException e) {
        context.getLogger().error(e);
      }
    }
    return null;
  }
 else {
    File bmpFile=new File(stringValue);
    if (bmpFile.isFile()) {
      try {
        Bitmap bitmap=Bridge.getCachedBitmap(stringValue,isFramework ? null : context.getProjectKey());
        if (bitmap == null) {
          bitmap=new Bitmap(bmpFile);
          try {
            bitmap.setDensity(Density.MEDIUM.getValue());
          }
 catch (          NoClassDefFoundError error) {
          }
          Bridge.setCachedBitmap(stringValue,bitmap,isFramework ? null : context.getProjectKey());
        }
        try {
          if (value instanceof IDensityBasedResourceValue) {
            Density density=((IDensityBasedResourceValue)value).getDensity();
            if (density != Density.MEDIUM) {
              bitmap=Bitmap.createBitmap(bitmap);
              bitmap.setDensity(density.getValue());
            }
          }
        }
 catch (        NoClassDefFoundError error) {
        }
        return new BitmapDrawable(context.getResources(),bitmap);
      }
 catch (      IOException e) {
      }
    }
 else {
      try {
        int color=getColor(stringValue);
        return new ColorDrawable(color);
      }
 catch (      NumberFormatException e) {
      }
    }
  }
  return null;
}","/** 
 * Returns a drawable from the given value.
 * @param value The value that contains a path to a 9 patch, a bitmap or a xml based drawable,or an hexadecimal color
 * @param context
 * @param isFramework indicates whether the resource is a framework resources.Framework resources are cached, and loaded only once.
 */
public static Drawable getDrawable(IResourceValue value,BridgeContext context,boolean isFramework){
  Drawable d=null;
  String stringValue=value.getValue();
  String lowerCaseValue=stringValue.toLowerCase();
  if (lowerCaseValue.endsWith(NinePatch.EXTENSION_9PATCH)) {
    File file=new File(stringValue);
    if (file.isFile()) {
      NinePatch ninePatch=Bridge.getCached9Patch(stringValue,isFramework ? null : context.getProjectKey());
      if (ninePatch == null) {
        try {
          ninePatch=NinePatch.load(file.toURL(),false);
          Bridge.setCached9Patch(stringValue,ninePatch,isFramework ? null : context.getProjectKey());
        }
 catch (        MalformedURLException e) {
        }
catch (        IOException e) {
        }
      }
      if (ninePatch != null) {
        return new NinePatchDrawable(ninePatch);
      }
    }
    return null;
  }
 else   if (lowerCaseValue.endsWith(""String_Node_Str"")) {
    File f=new File(stringValue);
    if (f.isFile()) {
      try {
        KXmlParser parser=new KXmlParser();
        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);
        parser.setInput(new FileReader(f));
        d=Drawable.createFromXml(context.getResources(),new BridgeXmlBlockParser(parser,context,isFramework));
        return d;
      }
 catch (      XmlPullParserException e) {
        context.getLogger().error(e);
      }
catch (      FileNotFoundException e) {
      }
catch (      IOException e) {
        context.getLogger().error(e);
      }
    }
    return null;
  }
 else {
    File bmpFile=new File(stringValue);
    if (bmpFile.isFile()) {
      try {
        Bitmap bitmap=Bridge.getCachedBitmap(stringValue,isFramework ? null : context.getProjectKey());
        if (bitmap == null) {
          bitmap=new Bitmap(bmpFile);
          try {
            bitmap.setDensity(Density.MEDIUM.getValue());
          }
 catch (          NoClassDefFoundError error) {
          }
          Bridge.setCachedBitmap(stringValue,bitmap,isFramework ? null : context.getProjectKey());
        }
        try {
          if (value instanceof IDensityBasedResourceValue) {
            Density density=((IDensityBasedResourceValue)value).getDensity();
            if (density != Density.MEDIUM) {
              bitmap=Bitmap.createBitmap(bitmap);
              bitmap.setDensity(density.getValue());
            }
          }
        }
 catch (        NoClassDefFoundError error) {
        }
        return new BitmapDrawable(context.getResources(),bitmap);
      }
 catch (      IOException e) {
      }
    }
 else {
      try {
        int color=getColor(stringValue);
        return new ColorDrawable(color);
      }
 catch (      NumberFormatException e) {
      }
    }
  }
  return null;
}"
21805,"/** 
 * Called as part of the activity lifecycle when an activity is going into the background, but has not (yet) been killed.  The counterpart to  {@link #onResume}. <p>When activity B is launched in front of activity A, this callback will be invoked on A.  B will not be created until A's   {@link #onPause} returns,so be sure to not do anything lengthy here. <p>This callback is mostly used for saving any persistent state the activity is editing, to present a ""edit in place"" model to the user and making sure nothing is lost if there are not enough resources to start the new activity without first killing this one.  This is also a good place to do things like stop animations and other things that consume a noticeable mount of CPU in order to make the switch to the next activity as fast as possible, or to close resources that are exclusive access such as the camera. <p>In situations where the system needs more memory it may kill paused processes to reclaim resources.  Because of this, you should be sure that all of your state is saved by the time you return from this function.  In general  {@link #onSaveInstanceState} is used to saveper-instance state in the activity and this method is used to store global persistent data (in content providers, files, etc.) <p>After receiving this call you will usually receive a following call to  {@link #onStop} (after the next activity has been resumed anddisplayed), however in some cases there will be a direct call back to {@link #onResume} without going through the stopped state.<p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
 * @see #onResume
 * @see #onSaveInstanceState
 * @see #onStop
 */
protected void onPause(){
  mCalled=true;
  QueuedWork.waitToFinish();
}","/** 
 * Called as part of the activity lifecycle when an activity is going into the background, but has not (yet) been killed.  The counterpart to  {@link #onResume}. <p>When activity B is launched in front of activity A, this callback will be invoked on A.  B will not be created until A's   {@link #onPause} returns,so be sure to not do anything lengthy here. <p>This callback is mostly used for saving any persistent state the activity is editing, to present a ""edit in place"" model to the user and making sure nothing is lost if there are not enough resources to start the new activity without first killing this one.  This is also a good place to do things like stop animations and other things that consume a noticeable mount of CPU in order to make the switch to the next activity as fast as possible, or to close resources that are exclusive access such as the camera. <p>In situations where the system needs more memory it may kill paused processes to reclaim resources.  Because of this, you should be sure that all of your state is saved by the time you return from this function.  In general  {@link #onSaveInstanceState} is used to saveper-instance state in the activity and this method is used to store global persistent data (in content providers, files, etc.) <p>After receiving this call you will usually receive a following call to  {@link #onStop} (after the next activity has been resumed anddisplayed), however in some cases there will be a direct call back to {@link #onResume} without going through the stopped state.<p><em>Derived classes must call through to the super class's implementation of this method.  If they do not, an exception will be thrown.</em></p>
 * @see #onResume
 * @see #onSaveInstanceState
 * @see #onStop
 */
protected void onPause(){
  mCalled=true;
}"
21806,"private final void handlePauseActivity(IBinder token,boolean finished,boolean userLeaving,int configChanges){
  ActivityClientRecord r=mActivities.get(token);
  if (r != null) {
    if (userLeaving) {
      performUserLeavingActivity(r);
    }
    r.activity.mConfigChangeFlags|=configChanges;
    Bundle state=performPauseActivity(token,finished,true);
    try {
      ActivityManagerNative.getDefault().activityPaused(token,state);
    }
 catch (    RemoteException ex) {
    }
  }
}","private final void handlePauseActivity(IBinder token,boolean finished,boolean userLeaving,int configChanges){
  ActivityClientRecord r=mActivities.get(token);
  if (r != null) {
    if (userLeaving) {
      performUserLeavingActivity(r);
    }
    r.activity.mConfigChangeFlags|=configChanges;
    Bundle state=performPauseActivity(token,finished,true);
    QueuedWork.waitToFinish();
    try {
      ActivityManagerNative.getDefault().activityPaused(token,state);
    }
 catch (    RemoteException ex) {
    }
  }
}"
21807,"public void setAudioMode(){
  Context context=getContext();
  if (context == null)   return;
  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  int mode=AudioManager.MODE_NORMAL;
switch (getState()) {
case RINGING:
    mode=AudioManager.MODE_RINGTONE;
  break;
case OFFHOOK:
Phone fgPhone=getFgPhone();
if (!(fgPhone instanceof SipPhone)) {
mode=AudioManager.MODE_IN_CALL;
}
break;
}
if (audioManager.getMode() != mode) audioManager.setMode(mode);
}","public void setAudioMode(){
  Context context=getContext();
  if (context == null)   return;
  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  int mode=AudioManager.MODE_NORMAL;
switch (getState()) {
case RINGING:
    mode=AudioManager.MODE_RINGTONE;
  break;
case OFFHOOK:
Phone fgPhone=getFgPhone();
if (hasActiveFgCall() && !(fgPhone instanceof SipPhone)) {
mode=AudioManager.MODE_IN_CALL;
}
break;
}
if (audioManager.getMode() != mode) audioManager.setMode(mode);
}"
21808,"void setOnBattery(boolean onBattery,int oldStatus,int level){
synchronized (this) {
    boolean doWrite=false;
    Message m=mHandler.obtainMessage(MSG_REPORT_POWER_CHANGE);
    m.arg1=onBattery ? 1 : 0;
    mHandler.sendMessage(m);
    mOnBattery=mOnBatteryInternal=onBattery;
    long uptime=SystemClock.uptimeMillis() * 1000;
    long mSecRealtime=SystemClock.elapsedRealtime();
    long realtime=mSecRealtime * 1000;
    if (onBattery) {
      if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 100 || (mDischargeCurrentLevel < 20 && level > 90)) {
        doWrite=true;
        resetAllStatsLocked();
        mDischargeStartLevel=level;
        mLowDischargeAmountSinceCharge=0;
        mHighDischargeAmountSinceCharge=0;
      }
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryUptimeStart=uptime;
      mTrackBatteryRealtimeStart=realtime;
      mUnpluggedBatteryUptime=getBatteryUptimeLocked(uptime);
      mUnpluggedBatteryRealtime=getBatteryRealtimeLocked(realtime);
      mDischargeCurrentLevel=mDischargeUnplugLevel=level;
      doUnplugLocked(mUnpluggedBatteryUptime,mUnpluggedBatteryRealtime);
    }
 else {
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryPastUptime+=uptime - mTrackBatteryUptimeStart;
      mTrackBatteryPastRealtime+=realtime - mTrackBatteryRealtimeStart;
      mDischargeCurrentLevel=level;
      if (level < mDischargeUnplugLevel) {
        mLowDischargeAmountSinceCharge+=mDischargeUnplugLevel - level - 1;
        mHighDischargeAmountSinceCharge+=mDischargeUnplugLevel - level;
      }
      doPlugLocked(getBatteryUptimeLocked(uptime),getBatteryRealtimeLocked(realtime));
    }
    if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
      if (mFile != null) {
        writeAsyncLocked();
      }
    }
  }
}","void setOnBattery(boolean onBattery,int oldStatus,int level){
synchronized (this) {
    boolean doWrite=false;
    Message m=mHandler.obtainMessage(MSG_REPORT_POWER_CHANGE);
    m.arg1=onBattery ? 1 : 0;
    mHandler.sendMessage(m);
    mOnBattery=mOnBatteryInternal=onBattery;
    long uptime=SystemClock.uptimeMillis() * 1000;
    long mSecRealtime=SystemClock.elapsedRealtime();
    long realtime=mSecRealtime * 1000;
    if (onBattery) {
      if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 95 || (mDischargeCurrentLevel < 30 && level >= 90)) {
        doWrite=true;
        resetAllStatsLocked();
        mDischargeStartLevel=level;
        mLowDischargeAmountSinceCharge=0;
        mHighDischargeAmountSinceCharge=0;
      }
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryUptimeStart=uptime;
      mTrackBatteryRealtimeStart=realtime;
      mUnpluggedBatteryUptime=getBatteryUptimeLocked(uptime);
      mUnpluggedBatteryRealtime=getBatteryRealtimeLocked(realtime);
      mDischargeCurrentLevel=mDischargeUnplugLevel=level;
      doUnplugLocked(mUnpluggedBatteryUptime,mUnpluggedBatteryRealtime);
    }
 else {
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryPastUptime+=uptime - mTrackBatteryUptimeStart;
      mTrackBatteryPastRealtime+=realtime - mTrackBatteryRealtimeStart;
      mDischargeCurrentLevel=level;
      if (level < mDischargeUnplugLevel) {
        mLowDischargeAmountSinceCharge+=mDischargeUnplugLevel - level - 1;
        mHighDischargeAmountSinceCharge+=mDischargeUnplugLevel - level;
      }
      doPlugLocked(getBatteryUptimeLocked(uptime),getBatteryRealtimeLocked(realtime));
    }
    if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
      if (mFile != null) {
        writeAsyncLocked();
      }
    }
  }
}"
21809,"/** 
 * {@inheritDoc}
 */
public void onClick(DialogInterface dialog,int which){
  if (which == POSITIVE_BUTTON) {
    IMountService mountService=IMountService.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    if (mountService != null) {
      try {
        mountService.formatVolume(Environment.getExternalStorageDirectory().toString());
      }
 catch (      RemoteException e) {
      }
    }
  }
  finish();
}","/** 
 * {@inheritDoc}
 */
public void onClick(DialogInterface dialog,int which){
  if (which == POSITIVE_BUTTON) {
    Intent intent=new Intent(ExternalStorageFormatter.FORMAT_ONLY);
    intent.setComponent(ExternalStorageFormatter.COMPONENT_NAME);
    startService(intent);
  }
  finish();
}"
21810,"/** 
 * {@inheritDoc}
 */
public void onClick(DialogInterface dialog,int which){
  if (which == POSITIVE_BUTTON) {
    IMountService mountService=IMountService.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    if (mountService != null) {
      try {
        mountService.formatVolume(Environment.getExternalStorageDirectory().toString());
      }
 catch (      RemoteException e) {
      }
    }
  }
  finish();
}","/** 
 * {@inheritDoc}
 */
public void onClick(DialogInterface dialog,int which){
  if (which == POSITIVE_BUTTON) {
    Intent intent=new Intent(ExternalStorageFormatter.FORMAT_ONLY);
    intent.setComponent(ExternalStorageFormatter.COMPONENT_NAME);
    startService(intent);
  }
  finish();
}"
21811,"void setOnBattery(boolean onBattery,int oldStatus,int level){
synchronized (this) {
    boolean doWrite=false;
    Message m=mHandler.obtainMessage(MSG_REPORT_POWER_CHANGE);
    m.arg1=onBattery ? 1 : 0;
    mHandler.sendMessage(m);
    mOnBattery=mOnBatteryInternal=onBattery;
    long uptime=SystemClock.uptimeMillis() * 1000;
    long mSecRealtime=SystemClock.elapsedRealtime();
    long realtime=mSecRealtime * 1000;
    if (onBattery) {
      if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 100 || (mDischargeCurrentLevel < 20 && level > 90)) {
        doWrite=true;
        resetAllStatsLocked();
        mDischargeStartLevel=level;
        mLowDischargeAmountSinceCharge=0;
        mHighDischargeAmountSinceCharge=0;
      }
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryUptimeStart=uptime;
      mTrackBatteryRealtimeStart=realtime;
      mUnpluggedBatteryUptime=getBatteryUptimeLocked(uptime);
      mUnpluggedBatteryRealtime=getBatteryRealtimeLocked(realtime);
      mDischargeCurrentLevel=mDischargeUnplugLevel=level;
      doUnplugLocked(mUnpluggedBatteryUptime,mUnpluggedBatteryRealtime);
    }
 else {
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryPastUptime+=uptime - mTrackBatteryUptimeStart;
      mTrackBatteryPastRealtime+=realtime - mTrackBatteryRealtimeStart;
      mDischargeCurrentLevel=level;
      if (level < mDischargeUnplugLevel) {
        mLowDischargeAmountSinceCharge+=mDischargeUnplugLevel - level - 1;
        mHighDischargeAmountSinceCharge+=mDischargeUnplugLevel - level;
      }
      doPlugLocked(getBatteryUptimeLocked(uptime),getBatteryRealtimeLocked(realtime));
    }
    if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
      if (mFile != null) {
        writeAsyncLocked();
      }
    }
  }
}","void setOnBattery(boolean onBattery,int oldStatus,int level){
synchronized (this) {
    boolean doWrite=false;
    Message m=mHandler.obtainMessage(MSG_REPORT_POWER_CHANGE);
    m.arg1=onBattery ? 1 : 0;
    mHandler.sendMessage(m);
    mOnBattery=mOnBatteryInternal=onBattery;
    long uptime=SystemClock.uptimeMillis() * 1000;
    long mSecRealtime=SystemClock.elapsedRealtime();
    long realtime=mSecRealtime * 1000;
    if (onBattery) {
      if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 95 || (mDischargeCurrentLevel < 30 && level >= 90)) {
        doWrite=true;
        resetAllStatsLocked();
        mDischargeStartLevel=level;
        mLowDischargeAmountSinceCharge=0;
        mHighDischargeAmountSinceCharge=0;
      }
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryUptimeStart=uptime;
      mTrackBatteryRealtimeStart=realtime;
      mUnpluggedBatteryUptime=getBatteryUptimeLocked(uptime);
      mUnpluggedBatteryRealtime=getBatteryRealtimeLocked(realtime);
      mDischargeCurrentLevel=mDischargeUnplugLevel=level;
      doUnplugLocked(mUnpluggedBatteryUptime,mUnpluggedBatteryRealtime);
    }
 else {
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryPastUptime+=uptime - mTrackBatteryUptimeStart;
      mTrackBatteryPastRealtime+=realtime - mTrackBatteryRealtimeStart;
      mDischargeCurrentLevel=level;
      if (level < mDischargeUnplugLevel) {
        mLowDischargeAmountSinceCharge+=mDischargeUnplugLevel - level - 1;
        mHighDischargeAmountSinceCharge+=mDischargeUnplugLevel - level;
      }
      doPlugLocked(getBatteryUptimeLocked(uptime),getBatteryRealtimeLocked(realtime));
    }
    if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
      if (mFile != null) {
        writeAsyncLocked();
      }
    }
  }
}"
21812,"@Override protected void onCreate(Bundle savedInstanceState){
  String libname=""String_Node_Str"";
  ActivityInfo ai;
  mIMM=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  mInputMethodCallback=new InputMethodCallback(this);
  getWindow().takeSurface(this);
  getWindow().takeInputQueue(this);
  getWindow().setFormat(PixelFormat.RGB_565);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
  mNativeContentView=new NativeContentView(this);
  mNativeContentView.mActivity=this;
  setContentView(mNativeContentView);
  mNativeContentView.requestFocus();
  mNativeContentView.getViewTreeObserver().addOnGlobalLayoutListener(this);
  try {
    ai=getPackageManager().getActivityInfo(getIntent().getComponent(),PackageManager.GET_META_DATA);
    if (ai.metaData != null) {
      String ln=ai.metaData.getString(META_DATA_LIB_NAME);
      if (ln != null)       libname=ln;
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  String path=null;
  if ((ai.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) == 0) {
    File libraryFile=new File(ai.applicationInfo.nativeLibraryDir,System.mapLibraryName(libname));
    if (libraryFile.exists()) {
      path=libraryFile.getPath();
    }
  }
  if (path == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + libname);
  }
  byte[] nativeSavedState=savedInstanceState != null ? savedInstanceState.getByteArray(KEY_NATIVE_SAVED_STATE) : null;
  mNativeHandle=loadNativeCode(path,Looper.myQueue(),getFilesDir().toString(),Environment.getExternalStorageAppFilesDirectory(ai.packageName).toString(),Build.VERSION.SDK_INT,getAssets(),nativeSavedState);
  if (mNativeHandle == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  super.onCreate(savedInstanceState);
}","@Override protected void onCreate(Bundle savedInstanceState){
  String libname=""String_Node_Str"";
  ActivityInfo ai;
  mIMM=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  mInputMethodCallback=new InputMethodCallback(this);
  getWindow().takeSurface(this);
  getWindow().takeInputQueue(this);
  getWindow().setFormat(PixelFormat.RGB_565);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
  mNativeContentView=new NativeContentView(this);
  mNativeContentView.mActivity=this;
  setContentView(mNativeContentView);
  mNativeContentView.requestFocus();
  mNativeContentView.getViewTreeObserver().addOnGlobalLayoutListener(this);
  try {
    ai=getPackageManager().getActivityInfo(getIntent().getComponent(),PackageManager.GET_META_DATA);
    if (ai.metaData != null) {
      String ln=ai.metaData.getString(META_DATA_LIB_NAME);
      if (ln != null)       libname=ln;
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  String path=null;
  File libraryFile=new File(ai.applicationInfo.nativeLibraryDir,System.mapLibraryName(libname));
  if (libraryFile.exists()) {
    path=libraryFile.getPath();
  }
  if (path == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + libname);
  }
  byte[] nativeSavedState=savedInstanceState != null ? savedInstanceState.getByteArray(KEY_NATIVE_SAVED_STATE) : null;
  mNativeHandle=loadNativeCode(path,Looper.myQueue(),getFilesDir().toString(),Environment.getExternalStorageAppFilesDirectory(ai.packageName).toString(),Build.VERSION.SDK_INT,getAssets(),nativeSavedState);
  if (mNativeHandle == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  super.onCreate(savedInstanceState);
}"
21813,"/** 
 * Sets the rotation angle in degrees relative to the orientation of the camera. This affects the pictures returned from JPEG   {@link PictureCallback}. The camera driver may set orientation in the EXIF header without rotating the picture. Or the driver may rotate the picture and the EXIF thumbnail. If the Jpeg picture is rotated, the orientation in the EXIF header will be missing or 1 (row #0 is top and column #0 is left side). If appplications want to rotate the picture to match the orientation of what users see, apps should use   {@link android.view.OrientationEventListener} and {@link CameraInfo}. The value from OrientationEventListener is relative to the natural orientation of the device. CameraInfo.mOrientation is the angle between camera orientation and natural device orientation. The sum of the two is the angle for rotation. For example, suppose the natural orientation of the device is portrait. The device is rotated 270 degrees clockwise, so the device orientation is 270. Suppose the camera sensor is mounted in landscape and the top side of the camera sensor is aligned with the right edge of the display in natural orientation. So the camera orientation is 90. The rotation should be set to 0 (270 + 90). The reference code is as follows. public void public void onOrientationChanged(int orientation) { if (orientation == ORIENTATION_UNKNOWN) return; android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); orientation = (orientation + 45) / 90 * 90; mParameters.setRotation((orientation + info.mOrientation) % 360); }
 * @param rotation The rotation angle in degrees relative to theorientation of the camera. Rotation can only be 0, 90, 180 or 270.
 * @throws IllegalArgumentException if rotation value is invalid.
 * @see android.view.OrientationEventListener
 * @see #getCameraInfo(int,CameraInfo)
 */
public void setRotation(int rotation){
  if (rotation == 0 || rotation == 90 || rotation == 180 || rotation == 270) {
    set(KEY_ROTATION,Integer.toString(rotation));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rotation);
  }
}","/** 
 * Sets the rotation angle in degrees relative to the orientation of the camera. This affects the pictures returned from JPEG   {@link PictureCallback}. The camera driver may set orientation in the EXIF header without rotating the picture. Or the driver may rotate the picture and the EXIF thumbnail. If the Jpeg picture is rotated, the orientation in the EXIF header will be missing or 1 (row #0 is top and column #0 is left side). If applications want to rotate the picture to match the orientation of what users see, apps should use   {@link android.view.OrientationEventListener} and {@link CameraInfo}. The value from OrientationEventListener is relative to the natural orientation of the device. CameraInfo.orientation is the angle between camera orientation and natural device orientation. The sum or of the two is the rotation angle for back-facing camera. The difference of the two is the rotation angle for front-facing camera. Note that the JPEG pictures of front-facing cameras are not mirrored as in preview display. For example, suppose the natural orientation of the device is portrait. The device is rotated 270 degrees clockwise, so the device orientation is 270. Suppose a back-facing camera sensor is mounted in landscape and the top side of the camera sensor is aligned with the right edge of the display in natural orientation. So the camera orientation is 90. The rotation should be set to 0 (270 + 90). The reference code is as follows. public void public void onOrientationChanged(int orientation) { if (orientation == ORIENTATION_UNKNOWN) return; android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); orientation = (orientation + 45) / 90 * 90; int rotation = 0; if (info.facing == CameraInfo.CAMERA_FACING_FRONT) { rotation = (info.orientation - orientation + 360) % 360; } else {  // back-facing camera rotation = (info.orientation + orientation) % 360; } mParameters.setRotation(rotation); }
 * @param rotation The rotation angle in degrees relative to theorientation of the camera. Rotation can only be 0, 90, 180 or 270.
 * @throws IllegalArgumentException if rotation value is invalid.
 * @see android.view.OrientationEventListener
 * @see #getCameraInfo(int,CameraInfo)
 */
public void setRotation(int rotation){
  if (rotation == 0 || rotation == 90 || rotation == 180 || rotation == 270) {
    set(KEY_ROTATION,Integer.toString(rotation));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rotation);
  }
}"
21814,"/** 
 * Set the display orientation. This affects the preview frames and the picture displayed after snapshot. This method is useful for portrait mode applications. This does not affect the order of byte array passed in  {@link PreviewCallback#onPreviewFrame}. This method is not allowed to be called during preview. If you want to make the camera image show in the same orientation as the display, you can use the following code.<p> <pre> public static void setCameraDisplayOrientation(Activity activity, int cameraId, android.hardware.Camera camera) { android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); int rotation = activity.getWindowManager().getDefaultDisplay() .getRotation(); int degrees = 0; switch (rotation) { case Surface.ROTATION_0: degrees = 0; break; case Surface.ROTATION_90: degrees = 90; break; case Surface.ROTATION_180: degrees = 180; break; case Surface.ROTATION_270: degrees = 270; break; } int result = (info.orientation - degrees + 360) % 360; camera.setDisplayOrientation(result); } </pre>
 * @param degrees the angle that the picture will be rotated clockwise.Valid values are 0, 90, 180, and 270. The starting position is 0 (landscape).
 */
public native final void setDisplayOrientation(int degrees);","/** 
 * Set the clockwise rotation of preview display in degrees. This affects the preview frames and the picture displayed after snapshot. This method is useful for portrait mode applications. Note that preview display of front-facing cameras is flipped horizontally, that is, the image is reflected along the central vertical axis of the camera sensor. So the users can see themselves as looking into a mirror. This does not affect the order of byte array passed in   {@link PreviewCallback#onPreviewFrame}, JPEG pictures, or recorded videos. This method is not allowed to be called during preview. If you want to make the camera image show in the same orientation as the display, you can use the following code.<p> <pre> public static void setCameraDisplayOrientation(Activity activity, int cameraId, android.hardware.Camera camera) { android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); int rotation = activity.getWindowManager().getDefaultDisplay() .getRotation(); int degrees = 0; switch (rotation) { case Surface.ROTATION_0: degrees = 0; break; case Surface.ROTATION_90: degrees = 90; break; case Surface.ROTATION_180: degrees = 180; break; case Surface.ROTATION_270: degrees = 270; break; } int result; if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) { result = (info.orientation + degrees) % 360; result = (360 - result) % 360;  // compensate the mirror } else {  // back-facing result = (info.orientation - degrees + 360) % 360; } camera.setDisplayOrientation(result); } </pre>
 * @param degrees the angle that the picture will be rotated clockwise.Valid values are 0, 90, 180, and 270. The starting position is 0 (landscape).
 * @see #setPreviewDisplay(SurfaceHolder)
 */
public native final void setDisplayOrientation(int degrees);"
21815,"/** 
 * Sets the rotation angle in degrees relative to the orientation of the camera. This affects the pictures returned from JPEG   {@link PictureCallback}. The camera driver may set orientation in the EXIF header without rotating the picture. Or the driver may rotate the picture and the EXIF thumbnail. If the Jpeg picture is rotated, the orientation in the EXIF header will be missing or 1 (row #0 is top and column #0 is left side). If appplications want to rotate the picture to match the orientation of what users see, apps should use   {@link android.view.OrientationEventListener} and {@link CameraInfo}. The value from OrientationEventListener is relative to the natural orientation of the device. CameraInfo.mOrientation is the angle between camera orientation and natural device orientation. The sum of the two is the angle for rotation. For example, suppose the natural orientation of the device is portrait. The device is rotated 270 degrees clockwise, so the device orientation is 270. Suppose the camera sensor is mounted in landscape and the top side of the camera sensor is aligned with the right edge of the display in natural orientation. So the camera orientation is 90. The rotation should be set to 0 (270 + 90). The reference code is as follows. public void public void onOrientationChanged(int orientation) { if (orientation == ORIENTATION_UNKNOWN) return; android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); orientation = (orientation + 45) / 90 * 90; mParameters.setRotation((orientation + info.mOrientation) % 360); }
 * @param rotation The rotation angle in degrees relative to theorientation of the camera. Rotation can only be 0, 90, 180 or 270.
 * @throws IllegalArgumentException if rotation value is invalid.
 * @see android.view.OrientationEventListener
 * @see #getCameraInfo(int,CameraInfo)
 */
public void setRotation(int rotation){
  if (rotation == 0 || rotation == 90 || rotation == 180 || rotation == 270) {
    set(KEY_ROTATION,Integer.toString(rotation));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rotation);
  }
}","/** 
 * Sets the rotation angle in degrees relative to the orientation of the camera. This affects the pictures returned from JPEG   {@link PictureCallback}. The camera driver may set orientation in the EXIF header without rotating the picture. Or the driver may rotate the picture and the EXIF thumbnail. If the Jpeg picture is rotated, the orientation in the EXIF header will be missing or 1 (row #0 is top and column #0 is left side). If applications want to rotate the picture to match the orientation of what users see, apps should use   {@link android.view.OrientationEventListener} and {@link CameraInfo}. The value from OrientationEventListener is relative to the natural orientation of the device. CameraInfo.orientation is the angle between camera orientation and natural device orientation. The sum or of the two is the rotation angle for back-facing camera. The difference of the two is the rotation angle for front-facing camera. Note that the JPEG pictures of front-facing cameras are not mirrored as in preview display. For example, suppose the natural orientation of the device is portrait. The device is rotated 270 degrees clockwise, so the device orientation is 270. Suppose a back-facing camera sensor is mounted in landscape and the top side of the camera sensor is aligned with the right edge of the display in natural orientation. So the camera orientation is 90. The rotation should be set to 0 (270 + 90). The reference code is as follows. public void public void onOrientationChanged(int orientation) { if (orientation == ORIENTATION_UNKNOWN) return; android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); orientation = (orientation + 45) / 90 * 90; int rotation = 0; if (info.facing == CameraInfo.CAMERA_FACING_FRONT) { rotation = (info.orientation - orientation + 360) % 360; } else {  // back-facing camera rotation = (info.orientation + orientation) % 360; } mParameters.setRotation(rotation); }
 * @param rotation The rotation angle in degrees relative to theorientation of the camera. Rotation can only be 0, 90, 180 or 270.
 * @throws IllegalArgumentException if rotation value is invalid.
 * @see android.view.OrientationEventListener
 * @see #getCameraInfo(int,CameraInfo)
 */
public void setRotation(int rotation){
  if (rotation == 0 || rotation == 90 || rotation == 180 || rotation == 270) {
    set(KEY_ROTATION,Integer.toString(rotation));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rotation);
  }
}"
21816,"/** 
 * Set the display orientation. This affects the preview frames and the picture displayed after snapshot. This method is useful for portrait mode applications. This does not affect the order of byte array passed in  {@link PreviewCallback#onPreviewFrame}. This method is not allowed to be called during preview. If you want to make the camera image show in the same orientation as the display, you can use the following code.<p> <pre> public static void setCameraDisplayOrientation(Activity activity, int cameraId, android.hardware.Camera camera) { android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); int rotation = activity.getWindowManager().getDefaultDisplay() .getRotation(); int degrees = 0; switch (rotation) { case Surface.ROTATION_0: degrees = 0; break; case Surface.ROTATION_90: degrees = 90; break; case Surface.ROTATION_180: degrees = 180; break; case Surface.ROTATION_270: degrees = 270; break; } int result = (info.orientation - degrees + 360) % 360; camera.setDisplayOrientation(result); } </pre>
 * @param degrees the angle that the picture will be rotated clockwise.Valid values are 0, 90, 180, and 270. The starting position is 0 (landscape).
 */
public native final void setDisplayOrientation(int degrees);","/** 
 * Set the clockwise rotation of preview display in degrees. This affects the preview frames and the picture displayed after snapshot. This method is useful for portrait mode applications. Note that preview display of front-facing cameras is flipped horizontally, that is, the image is reflected along the central vertical axis of the camera sensor. So the users can see themselves as looking into a mirror. This does not affect the order of byte array passed in   {@link PreviewCallback#onPreviewFrame}, JPEG pictures, or recorded videos. This method is not allowed to be called during preview. If you want to make the camera image show in the same orientation as the display, you can use the following code.<p> <pre> public static void setCameraDisplayOrientation(Activity activity, int cameraId, android.hardware.Camera camera) { android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); int rotation = activity.getWindowManager().getDefaultDisplay() .getRotation(); int degrees = 0; switch (rotation) { case Surface.ROTATION_0: degrees = 0; break; case Surface.ROTATION_90: degrees = 90; break; case Surface.ROTATION_180: degrees = 180; break; case Surface.ROTATION_270: degrees = 270; break; } int result; if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) { result = (info.orientation + degrees) % 360; result = (360 - result) % 360;  // compensate the mirror } else {  // back-facing result = (info.orientation - degrees + 360) % 360; } camera.setDisplayOrientation(result); } </pre>
 * @param degrees the angle that the picture will be rotated clockwise.Valid values are 0, 90, 180, and 270. The starting position is 0 (landscape).
 * @see #setPreviewDisplay(SurfaceHolder)
 */
public native final void setDisplayOrientation(int degrees);"
21817,"private void doDrag(int deltaX,int deltaY){
  if ((deltaX | deltaY) != 0) {
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int rangeX=computeMaxScrollX();
    final int rangeY=computeMaxScrollY();
    if (mEdgeGlowTop != null) {
      mOverscrollDeltaX=deltaX;
      mOverscrollDeltaY=deltaY;
    }
    overScrollBy(deltaX,deltaY,oldX,oldY,rangeX,rangeY,mOverscrollDistance,mOverscrollDistance,true);
  }
  if (!getSettings().getBuiltInZoomControls()) {
    boolean showPlusMinus=mMinZoomScale < mMaxZoomScale;
    if (mZoomControls != null && showPlusMinus) {
      if (mZoomControls.getVisibility() == View.VISIBLE) {
        mPrivateHandler.removeCallbacks(mZoomControlRunnable);
      }
 else {
        mZoomControls.show(showPlusMinus,false);
      }
      mPrivateHandler.postDelayed(mZoomControlRunnable,ZOOM_CONTROLS_TIMEOUT);
    }
  }
}","private void doDrag(int deltaX,int deltaY){
  if ((deltaX | deltaY) != 0) {
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int rangeX=computeMaxScrollX();
    final int rangeY=computeMaxScrollY();
    if (mEdgeGlowTop != null) {
      mOverscrollDeltaX=deltaX;
      mOverscrollDeltaY=deltaY;
    }
    overScrollBy(deltaX,deltaY,oldX,oldY,rangeX,rangeY,mOverscrollDistance,mOverscrollDistance,true);
    if (mEdgeGlowTop != null && (!mEdgeGlowTop.isFinished() || !mEdgeGlowBottom.isFinished() || !mEdgeGlowLeft.isFinished()|| !mEdgeGlowRight.isFinished())) {
      invalidate();
    }
  }
  if (!getSettings().getBuiltInZoomControls()) {
    boolean showPlusMinus=mMinZoomScale < mMaxZoomScale;
    if (mZoomControls != null && showPlusMinus) {
      if (mZoomControls.getVisibility() == View.VISIBLE) {
        mPrivateHandler.removeCallbacks(mZoomControlRunnable);
      }
 else {
        mZoomControls.show(showPlusMinus,false);
      }
      mPrivateHandler.postDelayed(mZoomControlRunnable,ZOOM_CONTROLS_TIMEOUT);
    }
  }
}"
21818,"private void doDrag(int deltaX,int deltaY){
  if ((deltaX | deltaY) != 0) {
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int rangeX=computeMaxScrollX();
    final int rangeY=computeMaxScrollY();
    if (mEdgeGlowTop != null) {
      mOverscrollDeltaX=deltaX;
      mOverscrollDeltaY=deltaY;
    }
    overScrollBy(deltaX,deltaY,oldX,oldY,rangeX,rangeY,mOverscrollDistance,mOverscrollDistance,true);
  }
  if (!getSettings().getBuiltInZoomControls()) {
    boolean showPlusMinus=mMinZoomScale < mMaxZoomScale;
    if (mZoomControls != null && showPlusMinus) {
      if (mZoomControls.getVisibility() == View.VISIBLE) {
        mPrivateHandler.removeCallbacks(mZoomControlRunnable);
      }
 else {
        mZoomControls.show(showPlusMinus,false);
      }
      mPrivateHandler.postDelayed(mZoomControlRunnable,ZOOM_CONTROLS_TIMEOUT);
    }
  }
}","private void doDrag(int deltaX,int deltaY){
  if ((deltaX | deltaY) != 0) {
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int rangeX=computeMaxScrollX();
    final int rangeY=computeMaxScrollY();
    if (mEdgeGlowTop != null) {
      mOverscrollDeltaX=deltaX;
      mOverscrollDeltaY=deltaY;
    }
    overScrollBy(deltaX,deltaY,oldX,oldY,rangeX,rangeY,mOverscrollDistance,mOverscrollDistance,true);
    if (mEdgeGlowTop != null && (!mEdgeGlowTop.isFinished() || !mEdgeGlowBottom.isFinished() || !mEdgeGlowLeft.isFinished()|| !mEdgeGlowRight.isFinished())) {
      invalidate();
    }
  }
  if (!getSettings().getBuiltInZoomControls()) {
    boolean showPlusMinus=mMinZoomScale < mMaxZoomScale;
    if (mZoomControls != null && showPlusMinus) {
      if (mZoomControls.getVisibility() == View.VISIBLE) {
        mPrivateHandler.removeCallbacks(mZoomControlRunnable);
      }
 else {
        mZoomControls.show(showPlusMinus,false);
      }
      mPrivateHandler.postDelayed(mZoomControlRunnable,ZOOM_CONTROLS_TIMEOUT);
    }
  }
}"
21819,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mNativeClass == 0 || (!isClickable() && !isLongClickable())) {
    return false;
  }
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,ev + ""String_Node_Str"" + ev.getEventTime()+ ""String_Node_Str""+ mTouchMode);
  }
  int action;
  float x, y;
  long eventTime=ev.getEventTime();
  if (mSupportMultiTouch && ev.getPointerCount() > 1) {
    if (mAllowPanAndScale || mMinZoomScale < mMaxZoomScale) {
      mScaleDetector.onTouchEvent(ev);
      if (mScaleDetector.isInProgress()) {
        mLastTouchTime=eventTime;
        if (!mAllowPanAndScale) {
          return true;
        }
      }
      x=mScaleDetector.getFocusX();
      y=mScaleDetector.getFocusY();
      action=ev.getAction() & MotionEvent.ACTION_MASK;
      if (action == MotionEvent.ACTION_POINTER_DOWN) {
        cancelTouch();
        action=MotionEvent.ACTION_DOWN;
      }
 else       if (action == MotionEvent.ACTION_POINTER_UP) {
        mLastTouchX=x;
        mLastTouchY=y;
      }
 else       if (action == MotionEvent.ACTION_MOVE) {
        if (x < 0 || y < 0) {
          return true;
        }
      }
    }
 else {
      return true;
    }
  }
 else {
    action=ev.getAction();
    x=ev.getX();
    y=ev.getY();
  }
  if (x > getViewWidth() - 1) {
    x=getViewWidth() - 1;
  }
  if (y > getViewHeightWithTitle() - 1) {
    y=getViewHeightWithTitle() - 1;
  }
  float fDeltaX=mLastTouchX - x;
  float fDeltaY=mLastTouchY - y;
  int deltaX=(int)fDeltaX;
  int deltaY=(int)fDeltaY;
  int contentX=viewToContentX((int)x + mScrollX);
  int contentY=viewToContentY((int)y + mScrollY);
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mPreventDefault=PREVENT_DEFAULT_NO;
      mConfirmMove=false;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
        mTouchMode=TOUCH_DRAG_START_MODE;
        mConfirmMove=true;
        mPrivateHandler.removeMessages(RESUME_WEBCORE_PRIORITY);
      }
 else       if (mPrivateHandler.hasMessages(RELEASE_SINGLE_TAP)) {
        mPrivateHandler.removeMessages(RELEASE_SINGLE_TAP);
        if (deltaX * deltaX + deltaY * deltaY < mDoubleTapSlopSquare) {
          mTouchMode=TOUCH_DOUBLE_TAP_MODE;
        }
 else {
          doShortPress();
          mTouchMode=TOUCH_INIT_MODE;
          mDeferTouchProcess=(!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        }
      }
 else {
        mPreviewZoomOnly=false;
        mTouchMode=TOUCH_INIT_MODE;
        mDeferTouchProcess=(!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        mWebViewCore.sendMessage(EventHub.UPDATE_FRAME_CACHE_IF_LOADING);
        if (mLogEvent && eventTime - mLastTouchUpTime < 1000) {
          EventLog.writeEvent(EventLogTags.BROWSER_DOUBLE_TAP_DURATION,(eventTime - mLastTouchUpTime),eventTime);
        }
        if (mSelectingText) {
          mDrawSelectionPointer=false;
          mSelectionStarted=nativeStartSelection(contentX,contentY);
          if (DebugFlags.WEB_VIEW) {
            Log.v(LOGTAG,""String_Node_Str"" + contentX + ""String_Node_Str""+ contentY);
          }
          invalidate();
        }
      }
      if (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_SHORTPRESS,TAP_TIMEOUT);
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_LONGPRESS,LONG_PRESS_TIMEOUT);
        if (inFullScreenMode() || mDeferTouchProcess) {
          mPreventDefault=PREVENT_DEFAULT_YES;
        }
 else         if (mForwardTouchEvents) {
          mPreventDefault=PREVENT_DEFAULT_MAYBE_YES;
        }
 else {
          mPreventDefault=PREVENT_DEFAULT_NO;
        }
        if (shouldForwardTouchEvent()) {
          TouchEventData ted=new TouchEventData();
          ted.mAction=action;
          ted.mX=contentX;
          ted.mY=contentY;
          ted.mMetaState=ev.getMetaState();
          ted.mReprocess=mDeferTouchProcess;
          if (mDeferTouchProcess) {
            mLastTouchX=x;
            mLastTouchY=y;
            ted.mViewX=x;
            ted.mViewY=y;
            mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
            break;
          }
          mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
          if (!inFullScreenMode()) {
            mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
          }
        }
      }
      startTouch(x,y,eventTime);
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    boolean firstMove=false;
    if (!mConfirmMove && (deltaX * deltaX + deltaY * deltaY) >= mTouchSlopSquare) {
      mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
      mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      mConfirmMove=true;
      firstMove=true;
      if (mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mTouchMode=TOUCH_INIT_MODE;
      }
    }
    if (shouldForwardTouchEvent() && mConfirmMove && (firstMove || eventTime - mLastSentTouchTime > mCurrentTouchInterval)) {
      mLastSentTouchTime=eventTime;
      TouchEventData ted=new TouchEventData();
      ted.mAction=action;
      ted.mX=contentX;
      ted.mY=contentY;
      ted.mMetaState=ev.getMetaState();
      ted.mReprocess=mDeferTouchProcess;
      if (mDeferTouchProcess) {
        ted.mViewX=x;
        ted.mViewY=y;
        mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
        break;
      }
      mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
      if (firstMove && !inFullScreenMode()) {
        mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
      }
    }
    if (mTouchMode == TOUCH_DONE_MODE || mPreventDefault == PREVENT_DEFAULT_YES) {
      break;
    }
    if (mVelocityTracker == null) {
      Log.e(LOGTAG,""String_Node_Str"" + ""String_Node_Str"" + mPreventDefault + ""String_Node_Str""+ mDeferTouchProcess+ ""String_Node_Str""+ mTouchMode);
    }
    mVelocityTracker.addMovement(ev);
    if (mSelectingText && mSelectionStarted) {
      if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG,""String_Node_Str"" + contentX + ""String_Node_Str""+ contentY);
      }
      nativeExtendSelection(contentX,contentY);
      invalidate();
      break;
    }
    if (mTouchMode != TOUCH_DRAG_MODE) {
      if (!mConfirmMove) {
        break;
      }
      if (mPreventDefault == PREVENT_DEFAULT_MAYBE_YES || mPreventDefault == PREVENT_DEFAULT_NO_FROM_TOUCH_DOWN) {
        mLastTouchTime=eventTime;
        break;
      }
      if (mScaleDetector != null && !mScaleDetector.isInProgress()) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (ax > MAX_SLOPE_FOR_DIAG * ay) {
          mSnapScrollMode=SNAP_X;
          mSnapPositive=deltaX > 0;
        }
 else         if (ay > MAX_SLOPE_FOR_DIAG * ax) {
          mSnapScrollMode=SNAP_Y;
          mSnapPositive=deltaY > 0;
        }
      }
      mTouchMode=TOUCH_DRAG_MODE;
      mLastTouchX=x;
      mLastTouchY=y;
      fDeltaX=0.0f;
      fDeltaY=0.0f;
      deltaX=0;
      deltaY=0;
      startDrag();
    }
    if (mDragTrackerHandler != null) {
      mDragTrackerHandler.dragTo(x,y);
    }
    boolean done=false;
    boolean keepScrollBarsVisible=false;
    if (Math.abs(fDeltaX) < 1.0f && Math.abs(fDeltaY) < 1.0f) {
      mLastTouchX=x;
      mLastTouchY=y;
      keepScrollBarsVisible=done=true;
    }
 else {
      if (mSnapScrollMode == SNAP_X || mSnapScrollMode == SNAP_Y) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (mSnapScrollMode == SNAP_X) {
          if (ay > MAX_SLOPE_FOR_DIAG * ax && ay > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ax > MAX_SLOPE_FOR_DIAG * ay && (mSnapPositive ? deltaX < -mMinLockSnapReverseDistance : deltaX > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
 else {
          if (ax > MAX_SLOPE_FOR_DIAG * ay && ax > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ay > MAX_SLOPE_FOR_DIAG * ax && (mSnapPositive ? deltaY < -mMinLockSnapReverseDistance : deltaY > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
      }
      if (mSnapScrollMode != SNAP_NONE) {
        if ((mSnapScrollMode & SNAP_X) == SNAP_X) {
          deltaY=0;
        }
 else {
          deltaX=0;
        }
      }
      if ((deltaX | deltaY) != 0) {
        if (deltaX != 0) {
          mLastTouchX=x;
        }
        if (deltaY != 0) {
          mLastTouchY=y;
        }
        mHeldMotionless=MOTIONLESS_FALSE;
      }
 else {
        mLastTouchX=x;
        mLastTouchY=y;
        keepScrollBarsVisible=true;
      }
      mLastTouchTime=eventTime;
      mUserScroll=true;
    }
    doDrag(deltaX,deltaY);
    if (keepScrollBarsVisible) {
      if (mHeldMotionless != MOTIONLESS_TRUE) {
        mHeldMotionless=MOTIONLESS_TRUE;
        invalidate();
      }
      awakenScrollBars(ViewConfiguration.getScrollDefaultDelay(),false);
      return !done;
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (shouldForwardTouchEvent()) {
    TouchEventData ted=new TouchEventData();
    ted.mAction=action;
    ted.mX=contentX;
    ted.mY=contentY;
    ted.mMetaState=ev.getMetaState();
    ted.mReprocess=mDeferTouchProcess;
    if (mDeferTouchProcess) {
      ted.mViewX=x;
      ted.mViewY=y;
    }
    mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
  }
  mLastTouchUpTime=eventTime;
switch (mTouchMode) {
case TOUCH_DOUBLE_TAP_MODE:
    mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
  mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (inFullScreenMode() || mDeferTouchProcess) {
  TouchEventData ted=new TouchEventData();
  ted.mAction=WebViewCore.ACTION_DOUBLETAP;
  ted.mX=contentX;
  ted.mY=contentY;
  ted.mMetaState=ev.getMetaState();
  ted.mReprocess=mDeferTouchProcess;
  if (mDeferTouchProcess) {
    ted.mViewX=x;
    ted.mViewY=y;
  }
  mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
}
 else if (mPreventDefault != PREVENT_DEFAULT_YES) {
  doDoubleTap();
  mTouchMode=TOUCH_DONE_MODE;
}
break;
case TOUCH_INIT_MODE:
case TOUCH_SHORTPRESS_START_MODE:
case TOUCH_SHORTPRESS_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (mConfirmMove) {
Log.w(LOGTAG,""String_Node_Str"" + ""String_Node_Str"");
if (mPreventDefault != PREVENT_DEFAULT_YES && (computeMaxScrollX() > 0 || computeMaxScrollY() > 0)) {
cancelWebCoreTouchEvent(contentX,contentY,true);
WebViewCore.reducePriority();
WebViewCore.pauseUpdatePicture(mWebViewCore);
}
 else {
invalidate();
break;
}
}
 else {
if (mSelectingText) {
if (nativeHitSelection(contentX,contentY)) {
copySelection();
}
selectionDone();
break;
}
if (mTouchMode == TOUCH_INIT_MODE) {
mPrivateHandler.sendEmptyMessageDelayed(RELEASE_SINGLE_TAP,ViewConfiguration.getDoubleTapTimeout());
}
 else {
doShortPress();
}
break;
}
case TOUCH_DRAG_MODE:
mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
if (eventTime - mLastTouchTime <= MIN_FLING_TIME) {
if (mVelocityTracker == null) {
Log.e(LOGTAG,""String_Node_Str"" + ""String_Node_Str"" + mPreventDefault + ""String_Node_Str""+ mDeferTouchProcess);
}
mVelocityTracker.addMovement(ev);
mHeldMotionless=MOTIONLESS_IGNORE;
doFling();
break;
}
 else {
if (mScroller.springBack(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY())) {
invalidate();
}
}
mHeldMotionless=MOTIONLESS_TRUE;
invalidate();
case TOUCH_DRAG_START_MODE:
mLastVelocity=0;
WebViewCore.resumePriority();
WebViewCore.resumeUpdatePicture(mWebViewCore);
break;
}
stopTouch();
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mTouchMode == TOUCH_DRAG_MODE) {
mScroller.springBack(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY());
invalidate();
}
cancelWebCoreTouchEvent(contentX,contentY,false);
cancelTouch();
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mNativeClass == 0 || (!isClickable() && !isLongClickable())) {
    return false;
  }
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,ev + ""String_Node_Str"" + ev.getEventTime()+ ""String_Node_Str""+ mTouchMode);
  }
  int action;
  float x, y;
  long eventTime=ev.getEventTime();
  if (mSupportMultiTouch && ev.getPointerCount() > 1) {
    if (mAllowPanAndScale || mMinZoomScale < mMaxZoomScale) {
      mScaleDetector.onTouchEvent(ev);
      if (mScaleDetector.isInProgress()) {
        mLastTouchTime=eventTime;
        if (!mAllowPanAndScale) {
          return true;
        }
        mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
        mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      }
      x=mScaleDetector.getFocusX();
      y=mScaleDetector.getFocusY();
      action=ev.getAction() & MotionEvent.ACTION_MASK;
      if (action == MotionEvent.ACTION_POINTER_DOWN) {
        cancelTouch();
        action=MotionEvent.ACTION_DOWN;
      }
 else       if (action == MotionEvent.ACTION_POINTER_UP) {
        mLastTouchX=x;
        mLastTouchY=y;
      }
 else       if (action == MotionEvent.ACTION_MOVE) {
        if (x < 0 || y < 0) {
          return true;
        }
      }
    }
 else {
      return true;
    }
  }
 else {
    action=ev.getAction();
    x=ev.getX();
    y=ev.getY();
  }
  if (x > getViewWidth() - 1) {
    x=getViewWidth() - 1;
  }
  if (y > getViewHeightWithTitle() - 1) {
    y=getViewHeightWithTitle() - 1;
  }
  float fDeltaX=mLastTouchX - x;
  float fDeltaY=mLastTouchY - y;
  int deltaX=(int)fDeltaX;
  int deltaY=(int)fDeltaY;
  int contentX=viewToContentX((int)x + mScrollX);
  int contentY=viewToContentY((int)y + mScrollY);
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mPreventDefault=PREVENT_DEFAULT_NO;
      mConfirmMove=false;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
        mTouchMode=TOUCH_DRAG_START_MODE;
        mConfirmMove=true;
        mPrivateHandler.removeMessages(RESUME_WEBCORE_PRIORITY);
      }
 else       if (mPrivateHandler.hasMessages(RELEASE_SINGLE_TAP)) {
        mPrivateHandler.removeMessages(RELEASE_SINGLE_TAP);
        if (deltaX * deltaX + deltaY * deltaY < mDoubleTapSlopSquare) {
          mTouchMode=TOUCH_DOUBLE_TAP_MODE;
        }
 else {
          doShortPress();
          mTouchMode=TOUCH_INIT_MODE;
          mDeferTouchProcess=(!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        }
      }
 else {
        mPreviewZoomOnly=false;
        mTouchMode=TOUCH_INIT_MODE;
        mDeferTouchProcess=(!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        mWebViewCore.sendMessage(EventHub.UPDATE_FRAME_CACHE_IF_LOADING);
        if (mLogEvent && eventTime - mLastTouchUpTime < 1000) {
          EventLog.writeEvent(EventLogTags.BROWSER_DOUBLE_TAP_DURATION,(eventTime - mLastTouchUpTime),eventTime);
        }
        if (mSelectingText) {
          mDrawSelectionPointer=false;
          mSelectionStarted=nativeStartSelection(contentX,contentY);
          if (DebugFlags.WEB_VIEW) {
            Log.v(LOGTAG,""String_Node_Str"" + contentX + ""String_Node_Str""+ contentY);
          }
          invalidate();
        }
      }
      if (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_SHORTPRESS,TAP_TIMEOUT);
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_LONGPRESS,LONG_PRESS_TIMEOUT);
        if (inFullScreenMode() || mDeferTouchProcess) {
          mPreventDefault=PREVENT_DEFAULT_YES;
        }
 else         if (mForwardTouchEvents) {
          mPreventDefault=PREVENT_DEFAULT_MAYBE_YES;
        }
 else {
          mPreventDefault=PREVENT_DEFAULT_NO;
        }
        if (shouldForwardTouchEvent()) {
          TouchEventData ted=new TouchEventData();
          ted.mAction=action;
          ted.mX=contentX;
          ted.mY=contentY;
          ted.mMetaState=ev.getMetaState();
          ted.mReprocess=mDeferTouchProcess;
          if (mDeferTouchProcess) {
            mLastTouchX=x;
            mLastTouchY=y;
            ted.mViewX=x;
            ted.mViewY=y;
            mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
            break;
          }
          mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
          if (!inFullScreenMode()) {
            mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
          }
        }
      }
      startTouch(x,y,eventTime);
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    boolean firstMove=false;
    if (!mConfirmMove && (deltaX * deltaX + deltaY * deltaY) >= mTouchSlopSquare) {
      mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
      mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      mConfirmMove=true;
      firstMove=true;
      if (mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mTouchMode=TOUCH_INIT_MODE;
      }
    }
    if (shouldForwardTouchEvent() && mConfirmMove && (firstMove || eventTime - mLastSentTouchTime > mCurrentTouchInterval)) {
      mLastSentTouchTime=eventTime;
      TouchEventData ted=new TouchEventData();
      ted.mAction=action;
      ted.mX=contentX;
      ted.mY=contentY;
      ted.mMetaState=ev.getMetaState();
      ted.mReprocess=mDeferTouchProcess;
      if (mDeferTouchProcess) {
        ted.mViewX=x;
        ted.mViewY=y;
        mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
        break;
      }
      mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
      if (firstMove && !inFullScreenMode()) {
        mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
      }
    }
    if (mTouchMode == TOUCH_DONE_MODE || mPreventDefault == PREVENT_DEFAULT_YES) {
      break;
    }
    if (mVelocityTracker == null) {
      Log.e(LOGTAG,""String_Node_Str"" + ""String_Node_Str"" + mPreventDefault + ""String_Node_Str""+ mDeferTouchProcess+ ""String_Node_Str""+ mTouchMode);
    }
    mVelocityTracker.addMovement(ev);
    if (mSelectingText && mSelectionStarted) {
      if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG,""String_Node_Str"" + contentX + ""String_Node_Str""+ contentY);
      }
      nativeExtendSelection(contentX,contentY);
      invalidate();
      break;
    }
    if (mTouchMode != TOUCH_DRAG_MODE) {
      if (!mConfirmMove) {
        break;
      }
      if (mPreventDefault == PREVENT_DEFAULT_MAYBE_YES || mPreventDefault == PREVENT_DEFAULT_NO_FROM_TOUCH_DOWN) {
        mLastTouchTime=eventTime;
        break;
      }
      if (mScaleDetector != null && !mScaleDetector.isInProgress()) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (ax > MAX_SLOPE_FOR_DIAG * ay) {
          mSnapScrollMode=SNAP_X;
          mSnapPositive=deltaX > 0;
        }
 else         if (ay > MAX_SLOPE_FOR_DIAG * ax) {
          mSnapScrollMode=SNAP_Y;
          mSnapPositive=deltaY > 0;
        }
      }
      mTouchMode=TOUCH_DRAG_MODE;
      mLastTouchX=x;
      mLastTouchY=y;
      fDeltaX=0.0f;
      fDeltaY=0.0f;
      deltaX=0;
      deltaY=0;
      startDrag();
    }
    if (mDragTrackerHandler != null) {
      mDragTrackerHandler.dragTo(x,y);
    }
    boolean done=false;
    boolean keepScrollBarsVisible=false;
    if (Math.abs(fDeltaX) < 1.0f && Math.abs(fDeltaY) < 1.0f) {
      mLastTouchX=x;
      mLastTouchY=y;
      keepScrollBarsVisible=done=true;
    }
 else {
      if (mSnapScrollMode == SNAP_X || mSnapScrollMode == SNAP_Y) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (mSnapScrollMode == SNAP_X) {
          if (ay > MAX_SLOPE_FOR_DIAG * ax && ay > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ax > MAX_SLOPE_FOR_DIAG * ay && (mSnapPositive ? deltaX < -mMinLockSnapReverseDistance : deltaX > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
 else {
          if (ax > MAX_SLOPE_FOR_DIAG * ay && ax > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ay > MAX_SLOPE_FOR_DIAG * ax && (mSnapPositive ? deltaY < -mMinLockSnapReverseDistance : deltaY > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
      }
      if (mSnapScrollMode != SNAP_NONE) {
        if ((mSnapScrollMode & SNAP_X) == SNAP_X) {
          deltaY=0;
        }
 else {
          deltaX=0;
        }
      }
      if ((deltaX | deltaY) != 0) {
        if (deltaX != 0) {
          mLastTouchX=x;
        }
        if (deltaY != 0) {
          mLastTouchY=y;
        }
        mHeldMotionless=MOTIONLESS_FALSE;
      }
 else {
        mLastTouchX=x;
        mLastTouchY=y;
        keepScrollBarsVisible=true;
      }
      mLastTouchTime=eventTime;
      mUserScroll=true;
    }
    doDrag(deltaX,deltaY);
    if (keepScrollBarsVisible) {
      if (mHeldMotionless != MOTIONLESS_TRUE) {
        mHeldMotionless=MOTIONLESS_TRUE;
        invalidate();
      }
      awakenScrollBars(ViewConfiguration.getScrollDefaultDelay(),false);
      return !done;
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (shouldForwardTouchEvent()) {
    TouchEventData ted=new TouchEventData();
    ted.mAction=action;
    ted.mX=contentX;
    ted.mY=contentY;
    ted.mMetaState=ev.getMetaState();
    ted.mReprocess=mDeferTouchProcess;
    if (mDeferTouchProcess) {
      ted.mViewX=x;
      ted.mViewY=y;
    }
    mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
  }
  mLastTouchUpTime=eventTime;
switch (mTouchMode) {
case TOUCH_DOUBLE_TAP_MODE:
    mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
  mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (inFullScreenMode() || mDeferTouchProcess) {
  TouchEventData ted=new TouchEventData();
  ted.mAction=WebViewCore.ACTION_DOUBLETAP;
  ted.mX=contentX;
  ted.mY=contentY;
  ted.mMetaState=ev.getMetaState();
  ted.mReprocess=mDeferTouchProcess;
  if (mDeferTouchProcess) {
    ted.mViewX=x;
    ted.mViewY=y;
  }
  mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
}
 else if (mPreventDefault != PREVENT_DEFAULT_YES) {
  doDoubleTap();
  mTouchMode=TOUCH_DONE_MODE;
}
break;
case TOUCH_INIT_MODE:
case TOUCH_SHORTPRESS_START_MODE:
case TOUCH_SHORTPRESS_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (mConfirmMove) {
Log.w(LOGTAG,""String_Node_Str"" + ""String_Node_Str"");
if (mPreventDefault != PREVENT_DEFAULT_YES && (computeMaxScrollX() > 0 || computeMaxScrollY() > 0)) {
cancelWebCoreTouchEvent(contentX,contentY,true);
WebViewCore.reducePriority();
WebViewCore.pauseUpdatePicture(mWebViewCore);
}
 else {
invalidate();
break;
}
}
 else {
if (mSelectingText) {
if (nativeHitSelection(contentX,contentY)) {
copySelection();
}
selectionDone();
break;
}
if (mTouchMode == TOUCH_INIT_MODE) {
mPrivateHandler.sendEmptyMessageDelayed(RELEASE_SINGLE_TAP,ViewConfiguration.getDoubleTapTimeout());
}
 else {
doShortPress();
}
break;
}
case TOUCH_DRAG_MODE:
mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
if (eventTime - mLastTouchTime <= MIN_FLING_TIME) {
if (mVelocityTracker == null) {
Log.e(LOGTAG,""String_Node_Str"" + ""String_Node_Str"" + mPreventDefault + ""String_Node_Str""+ mDeferTouchProcess);
}
mVelocityTracker.addMovement(ev);
mHeldMotionless=MOTIONLESS_IGNORE;
doFling();
break;
}
 else {
if (mScroller.springBack(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY())) {
invalidate();
}
}
mHeldMotionless=MOTIONLESS_TRUE;
invalidate();
case TOUCH_DRAG_START_MODE:
mLastVelocity=0;
WebViewCore.resumePriority();
WebViewCore.resumeUpdatePicture(mWebViewCore);
break;
}
stopTouch();
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mTouchMode == TOUCH_DRAG_MODE) {
mScroller.springBack(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY());
invalidate();
}
cancelWebCoreTouchEvent(contentX,contentY,false);
cancelTouch();
break;
}
}
return true;
}"
21820,"private void prepareCursorControllers(){
  if (mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (textCanBeSelected() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}","private void prepareCursorControllers(){
  boolean windowSupportsHandles=false;
  ViewGroup.LayoutParams params=getRootView().getLayoutParams();
  if (params instanceof WindowManager.LayoutParams) {
    WindowManager.LayoutParams windowParams=(WindowManager.LayoutParams)params;
    windowSupportsHandles=windowParams.type < WindowManager.LayoutParams.FIRST_SUB_WINDOW || windowParams.type > WindowManager.LayoutParams.LAST_SUB_WINDOW;
  }
  if (windowSupportsHandles && mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (windowSupportsHandles && textCanBeSelected() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}"
21821,"final int startActivityMayWait(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded,boolean debug,WaitResult outResult,Configuration config){
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    if (debug) {
      if (!aInfo.processName.equals(""String_Node_Str"")) {
        mService.setDebugApp(aInfo.processName,true,false);
      }
    }
  }
synchronized (mService) {
    int callingPid;
    int callingUid;
    if (caller == null) {
      callingPid=Binder.getCallingPid();
      callingUid=Binder.getCallingUid();
    }
 else {
      callingPid=callingUid=-1;
    }
    mConfigWillChange=config != null && mService.mConfiguration.diff(config) != 0;
    if (DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + mConfigWillChange);
    final long origId=Binder.clearCallingIdentity();
    if (mMainStack && aInfo != null && (aInfo.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
      if (aInfo.processName.equals(aInfo.applicationInfo.packageName)) {
        if (mService.mHeavyWeightProcess != null && (mService.mHeavyWeightProcess.info.uid != aInfo.applicationInfo.uid || !mService.mHeavyWeightProcess.processName.equals(aInfo.processName))) {
          int realCallingPid=callingPid;
          int realCallingUid=callingUid;
          if (caller != null) {
            ProcessRecord callerApp=mService.getRecordForAppLocked(caller);
            if (callerApp != null) {
              realCallingPid=callerApp.pid;
              realCallingUid=callerApp.info.uid;
            }
 else {
              Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ realCallingPid+ ""String_Node_Str""+ intent.toString());
              return START_PERMISSION_DENIED;
            }
          }
          IIntentSender target=mService.getIntentSenderLocked(IActivityManager.INTENT_SENDER_ACTIVITY,""String_Node_Str"",realCallingUid,null,null,0,intent,resolvedType,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
          Intent newIntent=new Intent();
          if (requestCode >= 0) {
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_HAS_RESULT,true);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_INTENT,new IntentSender(target));
          if (mService.mHeavyWeightProcess.activities.size() > 0) {
            ActivityRecord hist=mService.mHeavyWeightProcess.activities.get(0);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_APP,hist.packageName);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_TASK,hist.task.taskId);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_NEW_APP,aInfo.packageName);
          newIntent.setFlags(intent.getFlags());
          newIntent.setClassName(""String_Node_Str"",HeavyWeightSwitcherActivity.class.getName());
          intent=newIntent;
          resolvedType=null;
          caller=null;
          callingUid=Binder.getCallingUid();
          callingPid=Binder.getCallingPid();
          componentSpecified=true;
          try {
            ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,null,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS);
            aInfo=rInfo != null ? rInfo.activityInfo : null;
          }
 catch (          RemoteException e) {
            aInfo=null;
          }
        }
      }
    }
    int res=startActivityLocked(caller,intent,resolvedType,grantedUriPermissions,grantedMode,aInfo,resultTo,resultWho,requestCode,callingPid,callingUid,onlyIfNeeded,componentSpecified);
    if (mConfigWillChange && mMainStack) {
      mService.enforceCallingPermission(android.Manifest.permission.CHANGE_CONFIGURATION,""String_Node_Str"");
      mConfigWillChange=false;
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"");
      mService.updateConfigurationLocked(config,null);
    }
    Binder.restoreCallingIdentity(origId);
    if (outResult != null) {
      outResult.result=res;
      if (res == IActivityManager.START_SUCCESS) {
        mWaitingActivityLaunched.add(outResult);
        do {
          try {
            wait();
          }
 catch (          InterruptedException e) {
          }
        }
 while (!outResult.timeout && outResult.who == null);
      }
 else       if (res == IActivityManager.START_TASK_TO_FRONT) {
        ActivityRecord r=this.topRunningActivityLocked(null);
        if (r.nowVisible) {
          outResult.timeout=false;
          outResult.who=new ComponentName(r.info.packageName,r.info.name);
          outResult.totalTime=0;
          outResult.thisTime=0;
        }
 else {
          outResult.thisTime=SystemClock.uptimeMillis();
          mWaitingActivityVisible.add(outResult);
          do {
            try {
              wait();
            }
 catch (            InterruptedException e) {
            }
          }
 while (!outResult.timeout && outResult.who == null);
        }
      }
    }
    return res;
  }
}","final int startActivityMayWait(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded,boolean debug,WaitResult outResult,Configuration config){
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    if (debug) {
      if (!aInfo.processName.equals(""String_Node_Str"")) {
        mService.setDebugApp(aInfo.processName,true,false);
      }
    }
  }
synchronized (mService) {
    int callingPid;
    int callingUid;
    if (caller == null) {
      callingPid=Binder.getCallingPid();
      callingUid=Binder.getCallingUid();
    }
 else {
      callingPid=callingUid=-1;
    }
    mConfigWillChange=config != null && mService.mConfiguration.diff(config) != 0;
    if (DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + mConfigWillChange);
    final long origId=Binder.clearCallingIdentity();
    if (mMainStack && aInfo != null && (aInfo.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
      if (aInfo.processName.equals(aInfo.applicationInfo.packageName)) {
        if (mService.mHeavyWeightProcess != null && (mService.mHeavyWeightProcess.info.uid != aInfo.applicationInfo.uid || !mService.mHeavyWeightProcess.processName.equals(aInfo.processName))) {
          int realCallingPid=callingPid;
          int realCallingUid=callingUid;
          if (caller != null) {
            ProcessRecord callerApp=mService.getRecordForAppLocked(caller);
            if (callerApp != null) {
              realCallingPid=callerApp.pid;
              realCallingUid=callerApp.info.uid;
            }
 else {
              Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ realCallingPid+ ""String_Node_Str""+ intent.toString());
              return START_PERMISSION_DENIED;
            }
          }
          IIntentSender target=mService.getIntentSenderLocked(IActivityManager.INTENT_SENDER_ACTIVITY,""String_Node_Str"",realCallingUid,null,null,0,intent,resolvedType,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
          Intent newIntent=new Intent();
          if (requestCode >= 0) {
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_HAS_RESULT,true);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_INTENT,new IntentSender(target));
          if (mService.mHeavyWeightProcess.activities.size() > 0) {
            ActivityRecord hist=mService.mHeavyWeightProcess.activities.get(0);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_APP,hist.packageName);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_TASK,hist.task.taskId);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_NEW_APP,aInfo.packageName);
          newIntent.setFlags(intent.getFlags());
          newIntent.setClassName(""String_Node_Str"",HeavyWeightSwitcherActivity.class.getName());
          intent=newIntent;
          resolvedType=null;
          caller=null;
          callingUid=Binder.getCallingUid();
          callingPid=Binder.getCallingPid();
          componentSpecified=true;
          try {
            ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,null,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS);
            aInfo=rInfo != null ? rInfo.activityInfo : null;
          }
 catch (          RemoteException e) {
            aInfo=null;
          }
        }
      }
    }
    int res=startActivityLocked(caller,intent,resolvedType,grantedUriPermissions,grantedMode,aInfo,resultTo,resultWho,requestCode,callingPid,callingUid,onlyIfNeeded,componentSpecified);
    if (mConfigWillChange && mMainStack) {
      mService.enforceCallingPermission(android.Manifest.permission.CHANGE_CONFIGURATION,""String_Node_Str"");
      mConfigWillChange=false;
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"");
      mService.updateConfigurationLocked(config,null);
    }
    Binder.restoreCallingIdentity(origId);
    if (outResult != null) {
      outResult.result=res;
      if (res == IActivityManager.START_SUCCESS) {
        mWaitingActivityLaunched.add(outResult);
        do {
          try {
            mService.wait();
          }
 catch (          InterruptedException e) {
          }
        }
 while (!outResult.timeout && outResult.who == null);
      }
 else       if (res == IActivityManager.START_TASK_TO_FRONT) {
        ActivityRecord r=this.topRunningActivityLocked(null);
        if (r.nowVisible) {
          outResult.timeout=false;
          outResult.who=new ComponentName(r.info.packageName,r.info.name);
          outResult.totalTime=0;
          outResult.thisTime=0;
        }
 else {
          outResult.thisTime=SystemClock.uptimeMillis();
          mWaitingActivityVisible.add(outResult);
          do {
            try {
              mService.wait();
            }
 catch (            InterruptedException e) {
            }
          }
 while (!outResult.timeout && outResult.who == null);
        }
      }
    }
    return res;
  }
}"
21822,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mNativeClass == 0 || (!isClickable() && !isLongClickable())) {
    return false;
  }
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,ev + ""String_Node_Str"" + ev.getEventTime()+ ""String_Node_Str""+ mTouchMode);
  }
  int action;
  float x, y;
  long eventTime=ev.getEventTime();
  if (mSupportMultiTouch && ev.getPointerCount() > 1) {
    if (mAllowPanAndScale || mMinZoomScale < mMaxZoomScale) {
      mScaleDetector.onTouchEvent(ev);
      if (mScaleDetector.isInProgress()) {
        mLastTouchTime=eventTime;
        if (!mAllowPanAndScale) {
          return true;
        }
      }
      x=mScaleDetector.getFocusX();
      y=mScaleDetector.getFocusY();
      action=ev.getAction() & MotionEvent.ACTION_MASK;
      if (action == MotionEvent.ACTION_POINTER_DOWN) {
        cancelTouch();
        action=MotionEvent.ACTION_DOWN;
      }
 else       if (action == MotionEvent.ACTION_POINTER_UP) {
        mLastTouchX=x;
        mLastTouchY=y;
      }
 else       if (action == MotionEvent.ACTION_MOVE) {
        if (x < 0 || y < 0) {
          return true;
        }
      }
    }
 else {
      return true;
    }
  }
 else {
    action=ev.getAction();
    x=ev.getX();
    y=ev.getY();
  }
  if (x > getViewWidth() - 1) {
    x=getViewWidth() - 1;
  }
  if (y > getViewHeightWithTitle() - 1) {
    y=getViewHeightWithTitle() - 1;
  }
  float fDeltaX=mLastTouchX - x;
  float fDeltaY=mLastTouchY - y;
  int deltaX=(int)fDeltaX;
  int deltaY=(int)fDeltaY;
  int contentX=viewToContentX((int)x + mScrollX);
  int contentY=viewToContentY((int)y + mScrollY);
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mPreventDefault=PREVENT_DEFAULT_NO;
      mConfirmMove=false;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
        mTouchMode=TOUCH_DRAG_START_MODE;
        mConfirmMove=true;
        mPrivateHandler.removeMessages(RESUME_WEBCORE_PRIORITY);
      }
 else       if (mPrivateHandler.hasMessages(RELEASE_SINGLE_TAP)) {
        mPrivateHandler.removeMessages(RELEASE_SINGLE_TAP);
        if (deltaX * deltaX + deltaY * deltaY < mDoubleTapSlopSquare) {
          mTouchMode=TOUCH_DOUBLE_TAP_MODE;
        }
 else {
          doShortPress();
          mTouchMode=TOUCH_INIT_MODE;
          mDeferTouchProcess=(!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        }
      }
 else {
        mPreviewZoomOnly=false;
        mTouchMode=TOUCH_INIT_MODE;
        mDeferTouchProcess=(!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        mWebViewCore.sendMessage(EventHub.UPDATE_FRAME_CACHE_IF_LOADING);
        if (mLogEvent && eventTime - mLastTouchUpTime < 1000) {
          EventLog.writeEvent(EventLogTags.BROWSER_DOUBLE_TAP_DURATION,(eventTime - mLastTouchUpTime),eventTime);
        }
        if (mSelectingText) {
          mDrawSelectionPointer=false;
          mSelectionStarted=nativeStartSelection(contentX,contentY);
          if (DebugFlags.WEB_VIEW) {
            Log.v(LOGTAG,""String_Node_Str"" + contentX + ""String_Node_Str""+ contentY);
          }
          invalidate();
        }
      }
      if (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_SHORTPRESS,TAP_TIMEOUT);
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_LONGPRESS,LONG_PRESS_TIMEOUT);
        if (inFullScreenMode() || mDeferTouchProcess) {
          mPreventDefault=PREVENT_DEFAULT_YES;
        }
 else         if (mForwardTouchEvents) {
          mPreventDefault=PREVENT_DEFAULT_MAYBE_YES;
        }
 else {
          mPreventDefault=PREVENT_DEFAULT_NO;
        }
        if (shouldForwardTouchEvent()) {
          TouchEventData ted=new TouchEventData();
          ted.mAction=action;
          ted.mX=contentX;
          ted.mY=contentY;
          ted.mMetaState=ev.getMetaState();
          ted.mReprocess=mDeferTouchProcess;
          if (mDeferTouchProcess) {
            mLastTouchX=x;
            mLastTouchY=y;
            ted.mViewX=x;
            ted.mViewY=y;
            mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
            break;
          }
          mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
          if (!inFullScreenMode()) {
            mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
          }
        }
      }
      startTouch(x,y,eventTime);
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    boolean firstMove=false;
    if (!mConfirmMove && (deltaX * deltaX + deltaY * deltaY) >= mTouchSlopSquare) {
      mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
      mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      mConfirmMove=true;
      firstMove=true;
      if (mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mTouchMode=TOUCH_INIT_MODE;
      }
    }
    if (shouldForwardTouchEvent() && mConfirmMove && (firstMove || eventTime - mLastSentTouchTime > mCurrentTouchInterval)) {
      mLastSentTouchTime=eventTime;
      TouchEventData ted=new TouchEventData();
      ted.mAction=action;
      ted.mX=contentX;
      ted.mY=contentY;
      ted.mMetaState=ev.getMetaState();
      ted.mReprocess=mDeferTouchProcess;
      if (mDeferTouchProcess) {
        ted.mViewX=x;
        ted.mViewY=y;
        mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
        break;
      }
      mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
      if (firstMove && !inFullScreenMode()) {
        mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
      }
    }
    if (mTouchMode == TOUCH_DONE_MODE || mPreventDefault == PREVENT_DEFAULT_YES) {
      break;
    }
    if (mVelocityTracker == null) {
      Log.e(LOGTAG,""String_Node_Str"" + ""String_Node_Str"" + mPreventDefault + ""String_Node_Str""+ mDeferTouchProcess+ ""String_Node_Str""+ mTouchMode);
    }
    mVelocityTracker.addMovement(ev);
    if (mSelectingText && mSelectionStarted) {
      if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG,""String_Node_Str"" + contentX + ""String_Node_Str""+ contentY);
      }
      nativeExtendSelection(contentX,contentY);
      invalidate();
      break;
    }
    if (mTouchMode != TOUCH_DRAG_MODE) {
      if (!mConfirmMove) {
        break;
      }
      if (mPreventDefault == PREVENT_DEFAULT_MAYBE_YES || mPreventDefault == PREVENT_DEFAULT_NO_FROM_TOUCH_DOWN) {
        mLastTouchTime=eventTime;
        break;
      }
      if (mScaleDetector != null && !mScaleDetector.isInProgress()) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (ax > MAX_SLOPE_FOR_DIAG * ay) {
          mSnapScrollMode=SNAP_X;
          mSnapPositive=deltaX > 0;
        }
 else         if (ay > MAX_SLOPE_FOR_DIAG * ax) {
          mSnapScrollMode=SNAP_Y;
          mSnapPositive=deltaY > 0;
        }
      }
      mTouchMode=TOUCH_DRAG_MODE;
      mLastTouchX=x;
      mLastTouchY=y;
      fDeltaX=0.0f;
      fDeltaY=0.0f;
      deltaX=0;
      deltaY=0;
      startDrag();
    }
    if (mDragTrackerHandler != null) {
      mDragTrackerHandler.dragTo(x,y);
    }
    boolean done=false;
    boolean keepScrollBarsVisible=false;
    if (Math.abs(fDeltaX) < 1.0f && Math.abs(fDeltaY) < 1.0f) {
      mLastTouchX=x;
      mLastTouchY=y;
      keepScrollBarsVisible=done=true;
    }
 else {
      if (mSnapScrollMode == SNAP_X || mSnapScrollMode == SNAP_Y) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (mSnapScrollMode == SNAP_X) {
          if (ay > MAX_SLOPE_FOR_DIAG * ax && ay > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ax > MAX_SLOPE_FOR_DIAG * ay && (mSnapPositive ? deltaX < -mMinLockSnapReverseDistance : deltaX > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
 else {
          if (ax > MAX_SLOPE_FOR_DIAG * ay && ax > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ay > MAX_SLOPE_FOR_DIAG * ax && (mSnapPositive ? deltaY < -mMinLockSnapReverseDistance : deltaY > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
      }
      if (mSnapScrollMode != SNAP_NONE) {
        if ((mSnapScrollMode & SNAP_X) == SNAP_X) {
          deltaY=0;
        }
 else {
          deltaX=0;
        }
      }
      if ((deltaX | deltaY) != 0) {
        if (deltaX != 0) {
          mLastTouchX=x;
        }
        if (deltaY != 0) {
          mLastTouchY=y;
        }
        mHeldMotionless=MOTIONLESS_FALSE;
      }
 else {
        mLastTouchX=x;
        mLastTouchY=y;
        keepScrollBarsVisible=true;
      }
      mLastTouchTime=eventTime;
      mUserScroll=true;
    }
    doDrag(deltaX,deltaY);
    if (keepScrollBarsVisible) {
      if (mHeldMotionless != MOTIONLESS_TRUE) {
        mHeldMotionless=MOTIONLESS_TRUE;
        invalidate();
      }
      awakenScrollBars(ViewConfiguration.getScrollDefaultDelay(),false);
      return !done;
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (shouldForwardTouchEvent()) {
    TouchEventData ted=new TouchEventData();
    ted.mAction=action;
    ted.mX=contentX;
    ted.mY=contentY;
    ted.mMetaState=ev.getMetaState();
    ted.mReprocess=mDeferTouchProcess;
    if (mDeferTouchProcess) {
      ted.mViewX=x;
      ted.mViewY=y;
    }
    mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
  }
  mLastTouchUpTime=eventTime;
switch (mTouchMode) {
case TOUCH_DOUBLE_TAP_MODE:
    mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
  mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (inFullScreenMode() || mDeferTouchProcess) {
  TouchEventData ted=new TouchEventData();
  ted.mAction=WebViewCore.ACTION_DOUBLETAP;
  ted.mX=contentX;
  ted.mY=contentY;
  ted.mMetaState=ev.getMetaState();
  ted.mReprocess=mDeferTouchProcess;
  if (mDeferTouchProcess) {
    ted.mViewX=x;
    ted.mViewY=y;
  }
  mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
}
 else if (mPreventDefault != PREVENT_DEFAULT_YES) {
  doDoubleTap();
  mTouchMode=TOUCH_DONE_MODE;
}
break;
case TOUCH_INIT_MODE:
case TOUCH_SHORTPRESS_START_MODE:
case TOUCH_SHORTPRESS_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (mConfirmMove) {
Log.w(LOGTAG,""String_Node_Str"" + ""String_Node_Str"");
if (mPreventDefault != PREVENT_DEFAULT_YES && (computeMaxScrollX() > 0 || computeMaxScrollY() > 0)) {
cancelWebCoreTouchEvent(contentX,contentY,true);
WebViewCore.reducePriority();
WebViewCore.pauseUpdatePicture(mWebViewCore);
}
 else {
invalidate();
break;
}
}
 else {
if (mSelectingText) {
if (nativeHitSelection(contentX,contentY)) {
copySelection();
}
selectionDone();
break;
}
if (mTouchMode == TOUCH_INIT_MODE) {
mPrivateHandler.sendEmptyMessageDelayed(RELEASE_SINGLE_TAP,ViewConfiguration.getDoubleTapTimeout());
}
 else {
doShortPress();
}
break;
}
case TOUCH_DRAG_MODE:
mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
if (eventTime - mLastTouchTime <= MIN_FLING_TIME) {
if (mVelocityTracker == null) {
Log.e(LOGTAG,""String_Node_Str"" + ""String_Node_Str"" + mPreventDefault + ""String_Node_Str""+ mDeferTouchProcess);
}
mVelocityTracker.addMovement(ev);
mHeldMotionless=MOTIONLESS_IGNORE;
doFling();
break;
}
 else {
if (mScroller.springBack(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY())) {
invalidate();
}
}
mHeldMotionless=MOTIONLESS_TRUE;
invalidate();
case TOUCH_DRAG_START_MODE:
mLastVelocity=0;
WebViewCore.resumePriority();
WebViewCore.resumeUpdatePicture(mWebViewCore);
break;
}
stopTouch();
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mTouchMode == TOUCH_DRAG_MODE) {
mScroller.springBack(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY());
invalidate();
}
cancelWebCoreTouchEvent(contentX,contentY,false);
cancelTouch();
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mNativeClass == 0 || (!isClickable() && !isLongClickable())) {
    return false;
  }
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,ev + ""String_Node_Str"" + ev.getEventTime()+ ""String_Node_Str""+ mTouchMode);
  }
  int action;
  float x, y;
  long eventTime=ev.getEventTime();
  if (mSupportMultiTouch && ev.getPointerCount() > 1) {
    if (mAllowPanAndScale || mMinZoomScale < mMaxZoomScale) {
      mScaleDetector.onTouchEvent(ev);
      if (mScaleDetector.isInProgress()) {
        mLastTouchTime=eventTime;
        if (!mAllowPanAndScale) {
          return true;
        }
        mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
        mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      }
      x=mScaleDetector.getFocusX();
      y=mScaleDetector.getFocusY();
      action=ev.getAction() & MotionEvent.ACTION_MASK;
      if (action == MotionEvent.ACTION_POINTER_DOWN) {
        cancelTouch();
        action=MotionEvent.ACTION_DOWN;
      }
 else       if (action == MotionEvent.ACTION_POINTER_UP) {
        mLastTouchX=x;
        mLastTouchY=y;
      }
 else       if (action == MotionEvent.ACTION_MOVE) {
        if (x < 0 || y < 0) {
          return true;
        }
      }
    }
 else {
      return true;
    }
  }
 else {
    action=ev.getAction();
    x=ev.getX();
    y=ev.getY();
  }
  if (x > getViewWidth() - 1) {
    x=getViewWidth() - 1;
  }
  if (y > getViewHeightWithTitle() - 1) {
    y=getViewHeightWithTitle() - 1;
  }
  float fDeltaX=mLastTouchX - x;
  float fDeltaY=mLastTouchY - y;
  int deltaX=(int)fDeltaX;
  int deltaY=(int)fDeltaY;
  int contentX=viewToContentX((int)x + mScrollX);
  int contentY=viewToContentY((int)y + mScrollY);
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mPreventDefault=PREVENT_DEFAULT_NO;
      mConfirmMove=false;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
        mTouchMode=TOUCH_DRAG_START_MODE;
        mConfirmMove=true;
        mPrivateHandler.removeMessages(RESUME_WEBCORE_PRIORITY);
      }
 else       if (mPrivateHandler.hasMessages(RELEASE_SINGLE_TAP)) {
        mPrivateHandler.removeMessages(RELEASE_SINGLE_TAP);
        if (deltaX * deltaX + deltaY * deltaY < mDoubleTapSlopSquare) {
          mTouchMode=TOUCH_DOUBLE_TAP_MODE;
        }
 else {
          doShortPress();
          mTouchMode=TOUCH_INIT_MODE;
          mDeferTouchProcess=(!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        }
      }
 else {
        mPreviewZoomOnly=false;
        mTouchMode=TOUCH_INIT_MODE;
        mDeferTouchProcess=(!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        mWebViewCore.sendMessage(EventHub.UPDATE_FRAME_CACHE_IF_LOADING);
        if (mLogEvent && eventTime - mLastTouchUpTime < 1000) {
          EventLog.writeEvent(EventLogTags.BROWSER_DOUBLE_TAP_DURATION,(eventTime - mLastTouchUpTime),eventTime);
        }
        if (mSelectingText) {
          mDrawSelectionPointer=false;
          mSelectionStarted=nativeStartSelection(contentX,contentY);
          if (DebugFlags.WEB_VIEW) {
            Log.v(LOGTAG,""String_Node_Str"" + contentX + ""String_Node_Str""+ contentY);
          }
          invalidate();
        }
      }
      if (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_SHORTPRESS,TAP_TIMEOUT);
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_LONGPRESS,LONG_PRESS_TIMEOUT);
        if (inFullScreenMode() || mDeferTouchProcess) {
          mPreventDefault=PREVENT_DEFAULT_YES;
        }
 else         if (mForwardTouchEvents) {
          mPreventDefault=PREVENT_DEFAULT_MAYBE_YES;
        }
 else {
          mPreventDefault=PREVENT_DEFAULT_NO;
        }
        if (shouldForwardTouchEvent()) {
          TouchEventData ted=new TouchEventData();
          ted.mAction=action;
          ted.mX=contentX;
          ted.mY=contentY;
          ted.mMetaState=ev.getMetaState();
          ted.mReprocess=mDeferTouchProcess;
          if (mDeferTouchProcess) {
            mLastTouchX=x;
            mLastTouchY=y;
            ted.mViewX=x;
            ted.mViewY=y;
            mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
            break;
          }
          mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
          if (!inFullScreenMode()) {
            mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
          }
        }
      }
      startTouch(x,y,eventTime);
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    boolean firstMove=false;
    if (!mConfirmMove && (deltaX * deltaX + deltaY * deltaY) >= mTouchSlopSquare) {
      mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
      mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      mConfirmMove=true;
      firstMove=true;
      if (mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mTouchMode=TOUCH_INIT_MODE;
      }
    }
    if (shouldForwardTouchEvent() && mConfirmMove && (firstMove || eventTime - mLastSentTouchTime > mCurrentTouchInterval)) {
      mLastSentTouchTime=eventTime;
      TouchEventData ted=new TouchEventData();
      ted.mAction=action;
      ted.mX=contentX;
      ted.mY=contentY;
      ted.mMetaState=ev.getMetaState();
      ted.mReprocess=mDeferTouchProcess;
      if (mDeferTouchProcess) {
        ted.mViewX=x;
        ted.mViewY=y;
        mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
        break;
      }
      mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
      if (firstMove && !inFullScreenMode()) {
        mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
      }
    }
    if (mTouchMode == TOUCH_DONE_MODE || mPreventDefault == PREVENT_DEFAULT_YES) {
      break;
    }
    if (mVelocityTracker == null) {
      Log.e(LOGTAG,""String_Node_Str"" + ""String_Node_Str"" + mPreventDefault + ""String_Node_Str""+ mDeferTouchProcess+ ""String_Node_Str""+ mTouchMode);
    }
    mVelocityTracker.addMovement(ev);
    if (mSelectingText && mSelectionStarted) {
      if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG,""String_Node_Str"" + contentX + ""String_Node_Str""+ contentY);
      }
      nativeExtendSelection(contentX,contentY);
      invalidate();
      break;
    }
    if (mTouchMode != TOUCH_DRAG_MODE) {
      if (!mConfirmMove) {
        break;
      }
      if (mPreventDefault == PREVENT_DEFAULT_MAYBE_YES || mPreventDefault == PREVENT_DEFAULT_NO_FROM_TOUCH_DOWN) {
        mLastTouchTime=eventTime;
        break;
      }
      if (mScaleDetector != null && !mScaleDetector.isInProgress()) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (ax > MAX_SLOPE_FOR_DIAG * ay) {
          mSnapScrollMode=SNAP_X;
          mSnapPositive=deltaX > 0;
        }
 else         if (ay > MAX_SLOPE_FOR_DIAG * ax) {
          mSnapScrollMode=SNAP_Y;
          mSnapPositive=deltaY > 0;
        }
      }
      mTouchMode=TOUCH_DRAG_MODE;
      mLastTouchX=x;
      mLastTouchY=y;
      fDeltaX=0.0f;
      fDeltaY=0.0f;
      deltaX=0;
      deltaY=0;
      startDrag();
    }
    if (mDragTrackerHandler != null) {
      mDragTrackerHandler.dragTo(x,y);
    }
    boolean done=false;
    boolean keepScrollBarsVisible=false;
    if (Math.abs(fDeltaX) < 1.0f && Math.abs(fDeltaY) < 1.0f) {
      mLastTouchX=x;
      mLastTouchY=y;
      keepScrollBarsVisible=done=true;
    }
 else {
      if (mSnapScrollMode == SNAP_X || mSnapScrollMode == SNAP_Y) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (mSnapScrollMode == SNAP_X) {
          if (ay > MAX_SLOPE_FOR_DIAG * ax && ay > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ax > MAX_SLOPE_FOR_DIAG * ay && (mSnapPositive ? deltaX < -mMinLockSnapReverseDistance : deltaX > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
 else {
          if (ax > MAX_SLOPE_FOR_DIAG * ay && ax > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ay > MAX_SLOPE_FOR_DIAG * ax && (mSnapPositive ? deltaY < -mMinLockSnapReverseDistance : deltaY > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
      }
      if (mSnapScrollMode != SNAP_NONE) {
        if ((mSnapScrollMode & SNAP_X) == SNAP_X) {
          deltaY=0;
        }
 else {
          deltaX=0;
        }
      }
      if ((deltaX | deltaY) != 0) {
        if (deltaX != 0) {
          mLastTouchX=x;
        }
        if (deltaY != 0) {
          mLastTouchY=y;
        }
        mHeldMotionless=MOTIONLESS_FALSE;
      }
 else {
        mLastTouchX=x;
        mLastTouchY=y;
        keepScrollBarsVisible=true;
      }
      mLastTouchTime=eventTime;
      mUserScroll=true;
    }
    doDrag(deltaX,deltaY);
    if (keepScrollBarsVisible) {
      if (mHeldMotionless != MOTIONLESS_TRUE) {
        mHeldMotionless=MOTIONLESS_TRUE;
        invalidate();
      }
      awakenScrollBars(ViewConfiguration.getScrollDefaultDelay(),false);
      return !done;
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (shouldForwardTouchEvent()) {
    TouchEventData ted=new TouchEventData();
    ted.mAction=action;
    ted.mX=contentX;
    ted.mY=contentY;
    ted.mMetaState=ev.getMetaState();
    ted.mReprocess=mDeferTouchProcess;
    if (mDeferTouchProcess) {
      ted.mViewX=x;
      ted.mViewY=y;
    }
    mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
  }
  mLastTouchUpTime=eventTime;
switch (mTouchMode) {
case TOUCH_DOUBLE_TAP_MODE:
    mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
  mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (inFullScreenMode() || mDeferTouchProcess) {
  TouchEventData ted=new TouchEventData();
  ted.mAction=WebViewCore.ACTION_DOUBLETAP;
  ted.mX=contentX;
  ted.mY=contentY;
  ted.mMetaState=ev.getMetaState();
  ted.mReprocess=mDeferTouchProcess;
  if (mDeferTouchProcess) {
    ted.mViewX=x;
    ted.mViewY=y;
  }
  mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
}
 else if (mPreventDefault != PREVENT_DEFAULT_YES) {
  doDoubleTap();
  mTouchMode=TOUCH_DONE_MODE;
}
break;
case TOUCH_INIT_MODE:
case TOUCH_SHORTPRESS_START_MODE:
case TOUCH_SHORTPRESS_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (mConfirmMove) {
Log.w(LOGTAG,""String_Node_Str"" + ""String_Node_Str"");
if (mPreventDefault != PREVENT_DEFAULT_YES && (computeMaxScrollX() > 0 || computeMaxScrollY() > 0)) {
cancelWebCoreTouchEvent(contentX,contentY,true);
WebViewCore.reducePriority();
WebViewCore.pauseUpdatePicture(mWebViewCore);
}
 else {
invalidate();
break;
}
}
 else {
if (mSelectingText) {
if (nativeHitSelection(contentX,contentY)) {
copySelection();
}
selectionDone();
break;
}
if (mTouchMode == TOUCH_INIT_MODE) {
mPrivateHandler.sendEmptyMessageDelayed(RELEASE_SINGLE_TAP,ViewConfiguration.getDoubleTapTimeout());
}
 else {
doShortPress();
}
break;
}
case TOUCH_DRAG_MODE:
mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
if (eventTime - mLastTouchTime <= MIN_FLING_TIME) {
if (mVelocityTracker == null) {
Log.e(LOGTAG,""String_Node_Str"" + ""String_Node_Str"" + mPreventDefault + ""String_Node_Str""+ mDeferTouchProcess);
}
mVelocityTracker.addMovement(ev);
mHeldMotionless=MOTIONLESS_IGNORE;
doFling();
break;
}
 else {
if (mScroller.springBack(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY())) {
invalidate();
}
}
mHeldMotionless=MOTIONLESS_TRUE;
invalidate();
case TOUCH_DRAG_START_MODE:
mLastVelocity=0;
WebViewCore.resumePriority();
WebViewCore.resumeUpdatePicture(mWebViewCore);
break;
}
stopTouch();
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mTouchMode == TOUCH_DRAG_MODE) {
mScroller.springBack(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY());
invalidate();
}
cancelWebCoreTouchEvent(contentX,contentY,false);
cancelTouch();
break;
}
}
return true;
}"
21823,"private void prepareCursorControllers(){
  if (mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (textCanBeSelected() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}","private void prepareCursorControllers(){
  boolean windowSupportsHandles=false;
  ViewGroup.LayoutParams params=getRootView().getLayoutParams();
  if (params instanceof WindowManager.LayoutParams) {
    WindowManager.LayoutParams windowParams=(WindowManager.LayoutParams)params;
    windowSupportsHandles=windowParams.type < WindowManager.LayoutParams.FIRST_SUB_WINDOW || windowParams.type > WindowManager.LayoutParams.LAST_SUB_WINDOW;
  }
  if (windowSupportsHandles && mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (windowSupportsHandles && textCanBeSelected() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}"
21824,"final int startActivityMayWait(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded,boolean debug,WaitResult outResult,Configuration config){
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    if (debug) {
      if (!aInfo.processName.equals(""String_Node_Str"")) {
        mService.setDebugApp(aInfo.processName,true,false);
      }
    }
  }
synchronized (mService) {
    int callingPid;
    int callingUid;
    if (caller == null) {
      callingPid=Binder.getCallingPid();
      callingUid=Binder.getCallingUid();
    }
 else {
      callingPid=callingUid=-1;
    }
    mConfigWillChange=config != null && mService.mConfiguration.diff(config) != 0;
    if (DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + mConfigWillChange);
    final long origId=Binder.clearCallingIdentity();
    if (mMainStack && aInfo != null && (aInfo.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
      if (aInfo.processName.equals(aInfo.applicationInfo.packageName)) {
        if (mService.mHeavyWeightProcess != null && (mService.mHeavyWeightProcess.info.uid != aInfo.applicationInfo.uid || !mService.mHeavyWeightProcess.processName.equals(aInfo.processName))) {
          int realCallingPid=callingPid;
          int realCallingUid=callingUid;
          if (caller != null) {
            ProcessRecord callerApp=mService.getRecordForAppLocked(caller);
            if (callerApp != null) {
              realCallingPid=callerApp.pid;
              realCallingUid=callerApp.info.uid;
            }
 else {
              Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ realCallingPid+ ""String_Node_Str""+ intent.toString());
              return START_PERMISSION_DENIED;
            }
          }
          IIntentSender target=mService.getIntentSenderLocked(IActivityManager.INTENT_SENDER_ACTIVITY,""String_Node_Str"",realCallingUid,null,null,0,intent,resolvedType,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
          Intent newIntent=new Intent();
          if (requestCode >= 0) {
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_HAS_RESULT,true);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_INTENT,new IntentSender(target));
          if (mService.mHeavyWeightProcess.activities.size() > 0) {
            ActivityRecord hist=mService.mHeavyWeightProcess.activities.get(0);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_APP,hist.packageName);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_TASK,hist.task.taskId);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_NEW_APP,aInfo.packageName);
          newIntent.setFlags(intent.getFlags());
          newIntent.setClassName(""String_Node_Str"",HeavyWeightSwitcherActivity.class.getName());
          intent=newIntent;
          resolvedType=null;
          caller=null;
          callingUid=Binder.getCallingUid();
          callingPid=Binder.getCallingPid();
          componentSpecified=true;
          try {
            ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,null,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS);
            aInfo=rInfo != null ? rInfo.activityInfo : null;
          }
 catch (          RemoteException e) {
            aInfo=null;
          }
        }
      }
    }
    int res=startActivityLocked(caller,intent,resolvedType,grantedUriPermissions,grantedMode,aInfo,resultTo,resultWho,requestCode,callingPid,callingUid,onlyIfNeeded,componentSpecified);
    if (mConfigWillChange && mMainStack) {
      mService.enforceCallingPermission(android.Manifest.permission.CHANGE_CONFIGURATION,""String_Node_Str"");
      mConfigWillChange=false;
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"");
      mService.updateConfigurationLocked(config,null);
    }
    Binder.restoreCallingIdentity(origId);
    if (outResult != null) {
      outResult.result=res;
      if (res == IActivityManager.START_SUCCESS) {
        mWaitingActivityLaunched.add(outResult);
        do {
          try {
            wait();
          }
 catch (          InterruptedException e) {
          }
        }
 while (!outResult.timeout && outResult.who == null);
      }
 else       if (res == IActivityManager.START_TASK_TO_FRONT) {
        ActivityRecord r=this.topRunningActivityLocked(null);
        if (r.nowVisible) {
          outResult.timeout=false;
          outResult.who=new ComponentName(r.info.packageName,r.info.name);
          outResult.totalTime=0;
          outResult.thisTime=0;
        }
 else {
          outResult.thisTime=SystemClock.uptimeMillis();
          mWaitingActivityVisible.add(outResult);
          do {
            try {
              wait();
            }
 catch (            InterruptedException e) {
            }
          }
 while (!outResult.timeout && outResult.who == null);
        }
      }
    }
    return res;
  }
}","final int startActivityMayWait(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded,boolean debug,WaitResult outResult,Configuration config){
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    if (debug) {
      if (!aInfo.processName.equals(""String_Node_Str"")) {
        mService.setDebugApp(aInfo.processName,true,false);
      }
    }
  }
synchronized (mService) {
    int callingPid;
    int callingUid;
    if (caller == null) {
      callingPid=Binder.getCallingPid();
      callingUid=Binder.getCallingUid();
    }
 else {
      callingPid=callingUid=-1;
    }
    mConfigWillChange=config != null && mService.mConfiguration.diff(config) != 0;
    if (DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + mConfigWillChange);
    final long origId=Binder.clearCallingIdentity();
    if (mMainStack && aInfo != null && (aInfo.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
      if (aInfo.processName.equals(aInfo.applicationInfo.packageName)) {
        if (mService.mHeavyWeightProcess != null && (mService.mHeavyWeightProcess.info.uid != aInfo.applicationInfo.uid || !mService.mHeavyWeightProcess.processName.equals(aInfo.processName))) {
          int realCallingPid=callingPid;
          int realCallingUid=callingUid;
          if (caller != null) {
            ProcessRecord callerApp=mService.getRecordForAppLocked(caller);
            if (callerApp != null) {
              realCallingPid=callerApp.pid;
              realCallingUid=callerApp.info.uid;
            }
 else {
              Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ realCallingPid+ ""String_Node_Str""+ intent.toString());
              return START_PERMISSION_DENIED;
            }
          }
          IIntentSender target=mService.getIntentSenderLocked(IActivityManager.INTENT_SENDER_ACTIVITY,""String_Node_Str"",realCallingUid,null,null,0,intent,resolvedType,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
          Intent newIntent=new Intent();
          if (requestCode >= 0) {
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_HAS_RESULT,true);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_INTENT,new IntentSender(target));
          if (mService.mHeavyWeightProcess.activities.size() > 0) {
            ActivityRecord hist=mService.mHeavyWeightProcess.activities.get(0);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_APP,hist.packageName);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_TASK,hist.task.taskId);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_NEW_APP,aInfo.packageName);
          newIntent.setFlags(intent.getFlags());
          newIntent.setClassName(""String_Node_Str"",HeavyWeightSwitcherActivity.class.getName());
          intent=newIntent;
          resolvedType=null;
          caller=null;
          callingUid=Binder.getCallingUid();
          callingPid=Binder.getCallingPid();
          componentSpecified=true;
          try {
            ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,null,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS);
            aInfo=rInfo != null ? rInfo.activityInfo : null;
          }
 catch (          RemoteException e) {
            aInfo=null;
          }
        }
      }
    }
    int res=startActivityLocked(caller,intent,resolvedType,grantedUriPermissions,grantedMode,aInfo,resultTo,resultWho,requestCode,callingPid,callingUid,onlyIfNeeded,componentSpecified);
    if (mConfigWillChange && mMainStack) {
      mService.enforceCallingPermission(android.Manifest.permission.CHANGE_CONFIGURATION,""String_Node_Str"");
      mConfigWillChange=false;
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"");
      mService.updateConfigurationLocked(config,null);
    }
    Binder.restoreCallingIdentity(origId);
    if (outResult != null) {
      outResult.result=res;
      if (res == IActivityManager.START_SUCCESS) {
        mWaitingActivityLaunched.add(outResult);
        do {
          try {
            mService.wait();
          }
 catch (          InterruptedException e) {
          }
        }
 while (!outResult.timeout && outResult.who == null);
      }
 else       if (res == IActivityManager.START_TASK_TO_FRONT) {
        ActivityRecord r=this.topRunningActivityLocked(null);
        if (r.nowVisible) {
          outResult.timeout=false;
          outResult.who=new ComponentName(r.info.packageName,r.info.name);
          outResult.totalTime=0;
          outResult.thisTime=0;
        }
 else {
          outResult.thisTime=SystemClock.uptimeMillis();
          mWaitingActivityVisible.add(outResult);
          do {
            try {
              mService.wait();
            }
 catch (            InterruptedException e) {
            }
          }
 while (!outResult.timeout && outResult.who == null);
        }
      }
    }
    return res;
  }
}"
21825,"public void commitPendingDataToDisk(){
  Parcel next;
synchronized (this) {
    next=mPendingWrite;
    mPendingWrite=null;
    mWriteLock.lock();
  }
  try {
    FileOutputStream stream=new FileOutputStream(mFile.chooseForWrite());
    stream.write(next.marshall());
    stream.flush();
    stream.close();
    mFile.commit();
  }
 catch (  IOException e) {
    Slog.w(""String_Node_Str"",""String_Node_Str"",e);
    mFile.rollback();
  }
 finally {
    next.recycle();
    mWriteLock.unlock();
  }
}","public void commitPendingDataToDisk(){
  final Parcel next;
synchronized (this) {
    next=mPendingWrite;
    mPendingWrite=null;
    if (next == null) {
      return;
    }
    mWriteLock.lock();
  }
  try {
    FileOutputStream stream=new FileOutputStream(mFile.chooseForWrite());
    stream.write(next.marshall());
    stream.flush();
    stream.close();
    mFile.commit();
  }
 catch (  IOException e) {
    Slog.w(""String_Node_Str"",""String_Node_Str"",e);
    mFile.rollback();
  }
 finally {
    next.recycle();
    mWriteLock.unlock();
  }
}"
21826,"public void commitPendingDataToDisk(){
  Parcel next;
synchronized (this) {
    next=mPendingWrite;
    mPendingWrite=null;
    mWriteLock.lock();
  }
  try {
    FileOutputStream stream=new FileOutputStream(mFile.chooseForWrite());
    stream.write(next.marshall());
    stream.flush();
    stream.close();
    mFile.commit();
  }
 catch (  IOException e) {
    Slog.w(""String_Node_Str"",""String_Node_Str"",e);
    mFile.rollback();
  }
 finally {
    next.recycle();
    mWriteLock.unlock();
  }
}","public void commitPendingDataToDisk(){
  final Parcel next;
synchronized (this) {
    next=mPendingWrite;
    mPendingWrite=null;
    if (next == null) {
      return;
    }
    mWriteLock.lock();
  }
  try {
    FileOutputStream stream=new FileOutputStream(mFile.chooseForWrite());
    stream.write(next.marshall());
    stream.flush();
    stream.close();
    mFile.commit();
  }
 catch (  IOException e) {
    Slog.w(""String_Node_Str"",""String_Node_Str"",e);
    mFile.rollback();
  }
 finally {
    next.recycle();
    mWriteLock.unlock();
  }
}"
21827,"/** 
 * <p>Generate the layout parameters for the popup window.</p>
 * @param token the window token used to bind the popup's window
 * @return the layout parameters to pass to the window manager
 */
private WindowManager.LayoutParams createPopupLayout(IBinder token){
  WindowManager.LayoutParams p=new WindowManager.LayoutParams();
  p.gravity=Gravity.LEFT | Gravity.TOP;
  p.width=mLastWidth=mWidth;
  p.height=mLastHeight=mHeight;
  if (mBackground != null) {
    p.format=mBackground.getOpacity();
  }
 else {
    p.format=PixelFormat.TRANSLUCENT;
  }
  p.flags=computeFlags(p.flags);
  p.type=WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;
  p.token=token;
  p.softInputMode=mSoftInputMode;
  p.setTitle(""String_Node_Str"" + Integer.toHexString(hashCode()));
  return p;
}","/** 
 * <p>Generate the layout parameters for the popup window.</p>
 * @param token the window token used to bind the popup's window
 * @return the layout parameters to pass to the window manager
 */
private WindowManager.LayoutParams createPopupLayout(IBinder token){
  WindowManager.LayoutParams p=new WindowManager.LayoutParams();
  p.gravity=Gravity.LEFT | Gravity.TOP;
  p.width=mLastWidth=mWidth;
  p.height=mLastHeight=mHeight;
  if (mBackground != null) {
    p.format=mBackground.getOpacity();
  }
 else {
    p.format=PixelFormat.TRANSLUCENT;
  }
  p.flags=computeFlags(p.flags);
  p.type=mWindowLayoutType;
  p.token=token;
  p.softInputMode=mSoftInputMode;
  p.setTitle(""String_Node_Str"" + Integer.toHexString(hashCode()));
  return p;
}"
21828,"public HandleView(CursorController controller,int pos){
  super(TextView.this.mContext);
  mController=controller;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  setOrientation(pos);
}","public HandleView(CursorController controller,int pos){
  super(TextView.this.mContext);
  mController=controller;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  mContainer.setWindowLayoutType(WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL);
  setOrientation(pos);
}"
21829,"public HandleView(CursorController controller,Drawable handle){
  super(TextView.this.mContext);
  mController=controller;
  mDrawable=handle;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  final int handleWidth=mDrawable.getIntrinsicWidth();
  final int handleHeight=mDrawable.getIntrinsicHeight();
  mHotspotX=handleWidth * 0.5f;
  mHotspotY=-handleHeight * 0.2f;
}","public HandleView(CursorController controller,int pos){
  super(TextView.this.mContext);
  mController=controller;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  setOrientation(pos);
}"
21830,"private void moveTo(int x,int y){
  mPositionX=x - TextView.this.mScrollX;
  mPositionY=y - TextView.this.mScrollY;
  if (isPositionVisible()) {
    int[] coords=null;
    if (mContainer.isShowing()) {
      coords=mTempCoords;
      TextView.this.getLocationInWindow(coords);
      mContainer.update(coords[0] + mPositionX,coords[1] + mPositionY,mRight - mLeft,mBottom - mTop);
    }
 else {
      show();
    }
    if (mIsDragging) {
      if (coords == null) {
        coords=mTempCoords;
        TextView.this.getLocationInWindow(coords);
      }
      if (coords[0] != mLastParentX || coords[1] != mLastParentY) {
        mOffsetX+=coords[0] - mLastParentX;
        mOffsetY+=coords[1] - mLastParentY;
        mLastParentX=coords[0];
        mLastParentY=coords[1];
      }
    }
  }
 else {
    hide();
  }
}","private void moveTo(int x,int y){
  mPositionX=x - TextView.this.mScrollX;
  mPositionY=y - TextView.this.mScrollY;
  if (isPositionVisible()) {
    int[] coords=null;
    if (mContainer.isShowing()) {
      coords=mTempCoords;
      TextView.this.getLocationInWindow(coords);
      mContainer.update(coords[0] + mPositionX,coords[1] + mPositionY,mRight - mLeft,mBottom - mTop);
    }
 else {
      show();
    }
    if (mIsDragging) {
      if (coords == null) {
        coords=mTempCoords;
        TextView.this.getLocationInWindow(coords);
      }
      if (coords[0] != mLastParentX || coords[1] != mLastParentY) {
        mTouchToWindowOffsetX+=coords[0] - mLastParentX;
        mTouchToWindowOffsetY+=coords[1] - mLastParentY;
        mLastParentX=coords[0];
        mLastParentY=coords[1];
      }
    }
  }
 else {
    hide();
  }
}"
21831,"void positionAtCursor(final int offset,boolean bottom){
  final int width=mDrawable.getIntrinsicWidth();
  final int height=mDrawable.getIntrinsicHeight();
  final int line=mLayout.getLineForOffset(offset);
  final int lineTop=mLayout.getLineTop(line);
  final int lineBottom=mLayout.getLineBottom(line);
  final Rect bounds=sCursorControllerTempRect;
  bounds.left=(int)(mLayout.getPrimaryHorizontal(offset) - width / 2.0) + TextView.this.mScrollX;
  bounds.top=(bottom ? lineBottom : lineTop) + TextView.this.mScrollY;
  bounds.right=bounds.left + width;
  bounds.bottom=bounds.top + height;
  convertFromViewportToContentCoordinates(bounds);
  moveTo(bounds.left,bounds.top);
}","void positionAtCursor(final int offset,boolean bottom){
  final int width=mDrawable.getIntrinsicWidth();
  final int height=mDrawable.getIntrinsicHeight();
  final int line=mLayout.getLineForOffset(offset);
  final int lineTop=mLayout.getLineTop(line);
  final int lineBottom=mLayout.getLineBottom(line);
  final Rect bounds=sCursorControllerTempRect;
  bounds.left=(int)(mLayout.getPrimaryHorizontal(offset) - mHotspotX) + TextView.this.mScrollX;
  bounds.top=(bottom ? lineBottom : lineTop - mHeight) + TextView.this.mScrollY;
  bounds.right=bounds.left + width;
  bounds.bottom=bounds.top + height;
  convertFromViewportToContentCoordinates(bounds);
  moveTo(bounds.left,bounds.top);
}"
21832,"int getHysteresisOffset(int x,int y,int previousOffset){
  final Layout layout=getLayout();
  if (layout == null)   return -1;
  y-=getTotalPaddingTop();
  y=Math.max(0,y);
  y=Math.min(getHeight() - getTotalPaddingBottom() - 1,y);
  y+=getScrollY();
  int line=getLayout().getLineForVertical(y);
  final int previousLine=layout.getLineForOffset(previousOffset);
  final int previousLineTop=layout.getLineTop(previousLine);
  final int previousLineBottom=layout.getLineBottom(previousLine);
  final int hysteresisThreshold=(previousLineBottom - previousLineTop) / 6;
  if (((line == previousLine + 1) && ((y - previousLineBottom) < hysteresisThreshold)) || ((line == previousLine - 1) && ((previousLineTop - y) < hysteresisThreshold))) {
    line=previousLine;
  }
  return getOffsetForHorizontal(line,x);
}","int getHysteresisOffset(int x,int y,int previousOffset){
  final Layout layout=getLayout();
  if (layout == null)   return -1;
  y-=getTotalPaddingTop();
  y=Math.max(0,y);
  y=Math.min(getHeight() - getTotalPaddingBottom() - 1,y);
  y+=getScrollY();
  int line=getLayout().getLineForVertical(y);
  final int previousLine=layout.getLineForOffset(previousOffset);
  final int previousLineTop=layout.getLineTop(previousLine);
  final int previousLineBottom=layout.getLineBottom(previousLine);
  final int hysteresisThreshold=(previousLineBottom - previousLineTop) / 8;
  if (((line == previousLine + 1) && ((y - previousLineBottom) < hysteresisThreshold)) || ((line == previousLine - 1) && ((previousLineTop - y) < hysteresisThreshold))) {
    line=previousLine;
  }
  return getOffsetForHorizontal(line,x);
}"
21833,"InsertionPointCursorController(){
  Resources res=mContext.getResources();
  mHandle=new HandleView(this,res.getDrawable(mTextSelectHandleRes));
}","InsertionPointCursorController(){
  mHandle=new HandleView(this,HandleView.CENTER);
}"
21834,"public void updatePosition(){
  final int selectionStart=getSelectionStart();
  final int selectionEnd=getSelectionEnd();
  if ((selectionStart < 0) || (selectionEnd < 0)) {
    Log.w(LOG_TAG,""String_Node_Str"");
    hide();
    return;
  }
  boolean oneLineSelection=mLayout.getLineForOffset(selectionStart) == mLayout.getLineForOffset(selectionEnd);
  mStartHandle.positionAtCursor(selectionStart,oneLineSelection);
  mEndHandle.positionAtCursor(selectionEnd,true);
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}","public void updatePosition(){
  final int selectionStart=getSelectionStart();
  final int selectionEnd=getSelectionEnd();
  if ((selectionStart < 0) || (selectionEnd < 0)) {
    Log.w(LOG_TAG,""String_Node_Str"");
    hide();
    return;
  }
  mStartHandle.positionAtCursor(selectionStart,true);
  mEndHandle.positionAtCursor(selectionEnd,true);
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}"
21835,"SelectionModifierCursorController(){
  Resources res=mContext.getResources();
  mStartHandle=new HandleView(this,res.getDrawable(mTextSelectHandleLeftRes));
  mEndHandle=new HandleView(this,res.getDrawable(mTextSelectHandleRightRes));
}","SelectionModifierCursorController(){
  mStartHandle=new HandleView(this,HandleView.LEFT);
  mEndHandle=new HandleView(this,HandleView.RIGHT);
}"
21836,"private boolean isPositionVisible(){
  if (mIsDragging) {
    return true;
  }
  final int extendedPaddingTop=getExtendedPaddingTop();
  final int extendedPaddingBottom=getExtendedPaddingBottom();
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final TextView hostView=TextView.this;
  final int left=0;
  final int right=hostView.getWidth();
  final int top=0;
  final int bottom=hostView.getHeight();
  if (mTempRect == null) {
    mTempRect=new Rect();
  }
  final Rect clip=mTempRect;
  clip.left=left + compoundPaddingLeft;
  clip.top=top + extendedPaddingTop;
  clip.right=right - compoundPaddingRight;
  clip.bottom=bottom - extendedPaddingBottom;
  final ViewParent parent=hostView.getParent();
  if (parent == null || !parent.getChildVisibleRect(hostView,clip,null)) {
    return false;
  }
  final int[] coords=mTempCoords;
  hostView.getLocationInWindow(coords);
  final int posX=coords[0] + mPositionX + (int)mHotspotX;
  final int posY=coords[1] + mPositionY;
  return posX >= clip.left && posX <= clip.right && posY >= clip.top && posY + mHotspotY <= clip.bottom;
}","private boolean isPositionVisible(){
  if (mIsDragging) {
    return true;
  }
  final int extendedPaddingTop=getExtendedPaddingTop();
  final int extendedPaddingBottom=getExtendedPaddingBottom();
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final TextView hostView=TextView.this;
  final int left=0;
  final int right=hostView.getWidth();
  final int top=0;
  final int bottom=hostView.getHeight();
  if (mTempRect == null) {
    mTempRect=new Rect();
  }
  final Rect clip=mTempRect;
  clip.left=left + compoundPaddingLeft;
  clip.top=top + extendedPaddingTop;
  clip.right=right - compoundPaddingRight;
  clip.bottom=bottom - extendedPaddingBottom;
  final ViewParent parent=hostView.getParent();
  if (parent == null || !parent.getChildVisibleRect(hostView,clip,null)) {
    return false;
  }
  final int[] coords=mTempCoords;
  hostView.getLocationInWindow(coords);
  final int posX=coords[0] + mPositionX + (int)mHotspotX;
  final int posY=coords[1] + mPositionY + (int)mHotspotY;
  return posX >= clip.left && posX <= clip.right && posY >= clip.top && posY <= clip.bottom;
}"
21837,"/** 
 * <p>Generate the layout parameters for the popup window.</p>
 * @param token the window token used to bind the popup's window
 * @return the layout parameters to pass to the window manager
 */
private WindowManager.LayoutParams createPopupLayout(IBinder token){
  WindowManager.LayoutParams p=new WindowManager.LayoutParams();
  p.gravity=Gravity.LEFT | Gravity.TOP;
  p.width=mLastWidth=mWidth;
  p.height=mLastHeight=mHeight;
  if (mBackground != null) {
    p.format=mBackground.getOpacity();
  }
 else {
    p.format=PixelFormat.TRANSLUCENT;
  }
  p.flags=computeFlags(p.flags);
  p.type=WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;
  p.token=token;
  p.softInputMode=mSoftInputMode;
  p.setTitle(""String_Node_Str"" + Integer.toHexString(hashCode()));
  return p;
}","/** 
 * <p>Generate the layout parameters for the popup window.</p>
 * @param token the window token used to bind the popup's window
 * @return the layout parameters to pass to the window manager
 */
private WindowManager.LayoutParams createPopupLayout(IBinder token){
  WindowManager.LayoutParams p=new WindowManager.LayoutParams();
  p.gravity=Gravity.LEFT | Gravity.TOP;
  p.width=mLastWidth=mWidth;
  p.height=mLastHeight=mHeight;
  if (mBackground != null) {
    p.format=mBackground.getOpacity();
  }
 else {
    p.format=PixelFormat.TRANSLUCENT;
  }
  p.flags=computeFlags(p.flags);
  p.type=mWindowLayoutType;
  p.token=token;
  p.softInputMode=mSoftInputMode;
  p.setTitle(""String_Node_Str"" + Integer.toHexString(hashCode()));
  return p;
}"
21838,"public HandleView(CursorController controller,int pos){
  super(TextView.this.mContext);
  mController=controller;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  setOrientation(pos);
}","public HandleView(CursorController controller,int pos){
  super(TextView.this.mContext);
  mController=controller;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  mContainer.setWindowLayoutType(WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL);
  setOrientation(pos);
}"
21839,void onInputQueueCreated(InputQueue queue);,"/** 
 * Called when the given InputQueue is now associated with the thread making this call, so it can start receiving events from it.
 */
void onInputQueueCreated(InputQueue queue);"
21840,void onInputQueueDestroyed(InputQueue queue);,"/** 
 * Called when the given InputQueue is no longer associated with the thread and thus not dispatching events.
 */
void onInputQueueDestroyed(InputQueue queue);"
21841,"/** 
 * @deprecated This functionality will be removed in the future; please donot use. Control whether this activity is required to be persistent.  By default activities are not persistent; setting this to true will prevent the system from stopping this activity or its process when running low on resources. <p><em>You should avoid using this method</em>, it has severe negative consequences on how well the system can manage its resources.  A better approach is to implement an application service that you control with {@link Context#startService} and {@link Context#stopService}.
 * @param isPersistent Control whether the current activity must bepersistent, true if so, false for the normal behavior.
 */
@Deprecated public void setPersistent(boolean isPersistent){
  if (mParent == null) {
    try {
      ActivityManagerNative.getDefault().setPersistent(mToken,isPersistent);
    }
 catch (    RemoteException e) {
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * @deprecated As of {@link android.os.Build.VERSION_CODES#GINGERBREAD}this is a no-op.
 */
@Deprecated public void setPersistent(boolean isPersistent){
}"
21842,"public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
    int grantedMode=data.readInt();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    boolean onlyIfNeeded=data.readInt() != 0;
    boolean debug=data.readInt() != 0;
    WaitResult result=startActivityAndWait(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
    reply.writeNoException();
    result.writeToParcel(reply,0);
    return true;
  }
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
  int grantedMode=data.readInt();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  boolean onlyIfNeeded=data.readInt() != 0;
  boolean debug=data.readInt() != 0;
  Configuration config=Configuration.CREATOR.createFromParcel(data);
  int result=startActivityWithConfig(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug,config);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
  fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean result=startNextMatchingActivity(callingActivity,intent);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=finishActivity(token,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
if (token != null) {
activityIdle(token,config);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean res=killPids(pids,reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
killBackgroundProcesses(packageName);
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
forceStopPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? data.readFileDescriptor() : null;
boolean res=profileControl(process,start,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case REGISTER_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
registerActivityWatcher(watcher);
return true;
}
case UNREGISTER_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
unregisterActivityWatcher(watcher);
return true;
}
case START_ACTIVITY_IN_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
boolean onlyIfNeeded=data.readInt() != 0;
int result=startActivityInPackage(uid,intent,resolvedType,resultTo,resultWho,requestCode,onlyIfNeeded);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case KILL_APPLICATION_WITH_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int uid=data.readInt();
killApplicationWithUid(pkg,uid);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
String type=getProviderMimeType(uri);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode);
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
    int grantedMode=data.readInt();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    boolean onlyIfNeeded=data.readInt() != 0;
    boolean debug=data.readInt() != 0;
    WaitResult result=startActivityAndWait(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
    reply.writeNoException();
    result.writeToParcel(reply,0);
    return true;
  }
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
  int grantedMode=data.readInt();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  boolean onlyIfNeeded=data.readInt() != 0;
  boolean debug=data.readInt() != 0;
  Configuration config=Configuration.CREATOR.createFromParcel(data);
  int result=startActivityWithConfig(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug,config);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
  fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean result=startNextMatchingActivity(callingActivity,intent);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=finishActivity(token,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
if (token != null) {
activityIdle(token,config);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean res=killPids(pids,reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
killBackgroundProcesses(packageName);
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
forceStopPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? data.readFileDescriptor() : null;
boolean res=profileControl(process,start,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case REGISTER_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
registerActivityWatcher(watcher);
return true;
}
case UNREGISTER_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
unregisterActivityWatcher(watcher);
return true;
}
case START_ACTIVITY_IN_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
boolean onlyIfNeeded=data.readInt() != 0;
int result=startActivityInPackage(uid,intent,resolvedType,resultTo,resultWho,requestCode,onlyIfNeeded);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case KILL_APPLICATION_WITH_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int uid=data.readInt();
killApplicationWithUid(pkg,uid);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
String type=getProviderMimeType(uri);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode);
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}"
21843,"private final int computeOomAdjLocked(ProcessRecord app,int hiddenAdj,ProcessRecord TOP_APP,boolean recursed){
  if (mAdjSeq == app.adjSeq) {
    if (!recursed && app.hidden) {
      app.curAdj=hiddenAdj;
    }
    return app.curAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    app.curSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    return (app.curAdj=EMPTY_APP_ADJ);
  }
  if (app.maxAdj <= FOREGROUND_APP_ADJ) {
    app.adjType=""String_Node_Str"";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.keeping=true;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    return (app.curAdj=app.maxAdj);
  }
  app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN;
  app.adjSource=null;
  app.adjTarget=null;
  app.keeping=false;
  app.empty=false;
  app.hidden=false;
  int adj;
  int schedGroup;
  int N;
  if (app == TOP_APP) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.instrumentationClass != null) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.persistentActivities > 0) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.curReceiver != null || (mPendingBroadcast != null && mPendingBroadcast.curApp == app)) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.executingServices.size() > 0) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.foregroundServices) {
    adj=PERCEPTIBLE_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.forcingToForeground != null) {
    adj=PERCEPTIBLE_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    app.adjSource=app.forcingToForeground;
  }
 else   if (app == mHeavyWeightProcess) {
    adj=HEAVY_WEIGHT_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app == mHomeProcess) {
    adj=HOME_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
  }
 else   if ((N=app.activities.size()) != 0) {
    app.hidden=true;
    adj=hiddenAdj;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    N=app.activities.size();
    for (int j=0; j < N; j++) {
      if (app.activities.get(j).visible) {
        app.hidden=false;
        adj=VISIBLE_APP_ADJ;
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.adjType=""String_Node_Str"";
        break;
      }
    }
  }
 else {
    app.hidden=true;
    app.empty=true;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    adj=hiddenAdj;
    app.adjType=""String_Node_Str"";
  }
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Slog.v(TAG,""String_Node_Str"" + app);
      adj=BACKUP_APP_ADJ;
      app.adjType=""String_Node_Str"";
      app.hidden=false;
    }
  }
  if (app.services.size() != 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
    final long now=SystemClock.uptimeMillis();
    Iterator<ServiceRecord> jt=app.services.iterator();
    while (jt.hasNext() && adj > FOREGROUND_APP_ADJ) {
      ServiceRecord s=jt.next();
      if (s.startRequested) {
        if (now < (s.lastActivity + MAX_SERVICE_INACTIVITY)) {
          if (adj > SECONDARY_SERVER_ADJ) {
            adj=SECONDARY_SERVER_ADJ;
            app.adjType=""String_Node_Str"";
            app.hidden=false;
          }
        }
        if (adj > SECONDARY_SERVER_ADJ) {
          app.adjType=""String_Node_Str"";
        }
        app.keeping=true;
      }
      if (s.connections.size() > 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
        Iterator<ArrayList<ConnectionRecord>> kt=s.connections.values().iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ArrayList<ConnectionRecord> clist=kt.next();
          for (int i=0; i < clist.size() && adj > FOREGROUND_APP_ADJ; i++) {
            ConnectionRecord cr=clist.get(i);
            if (cr.binding.client == app) {
              continue;
            }
            if ((cr.flags & Context.BIND_AUTO_CREATE) != 0) {
              ProcessRecord client=cr.binding.client;
              int myHiddenAdj=hiddenAdj;
              if (myHiddenAdj > client.hiddenAdj) {
                if (client.hiddenAdj >= VISIBLE_APP_ADJ) {
                  myHiddenAdj=client.hiddenAdj;
                }
 else {
                  myHiddenAdj=VISIBLE_APP_ADJ;
                }
              }
              int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP,true);
              if (adj > clientAdj) {
                adj=clientAdj >= VISIBLE_APP_ADJ ? clientAdj : VISIBLE_APP_ADJ;
                if (!client.hidden) {
                  app.hidden=false;
                }
                if (client.keeping) {
                  app.keeping=true;
                }
                app.adjType=""String_Node_Str"";
                app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
                app.adjSource=cr.binding.client;
                app.adjTarget=s.name;
              }
              if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
                if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
                  schedGroup=Process.THREAD_GROUP_DEFAULT;
                }
              }
            }
            ActivityRecord a=cr.activity;
            if (a != null && adj > FOREGROUND_APP_ADJ && (a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
              adj=FOREGROUND_APP_ADJ;
              schedGroup=Process.THREAD_GROUP_DEFAULT;
              app.hidden=false;
              app.adjType=""String_Node_Str"";
              app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
              app.adjSource=a;
              app.adjTarget=s.name;
            }
          }
        }
      }
    }
    if (adj > hiddenAdj) {
      adj=hiddenAdj;
      app.hidden=false;
      app.adjType=""String_Node_Str"";
    }
  }
  if (app.pubProviders.size() != 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
    Iterator<ContentProviderRecord> jt=app.pubProviders.values().iterator();
    while (jt.hasNext() && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
      ContentProviderRecord cpr=jt.next();
      if (cpr.clients.size() != 0) {
        Iterator<ProcessRecord> kt=cpr.clients.iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ProcessRecord client=kt.next();
          if (client == app) {
            continue;
          }
          int myHiddenAdj=hiddenAdj;
          if (myHiddenAdj > client.hiddenAdj) {
            if (client.hiddenAdj > FOREGROUND_APP_ADJ) {
              myHiddenAdj=client.hiddenAdj;
            }
 else {
              myHiddenAdj=FOREGROUND_APP_ADJ;
            }
          }
          int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP,true);
          if (adj > clientAdj) {
            adj=clientAdj > FOREGROUND_APP_ADJ ? clientAdj : FOREGROUND_APP_ADJ;
            if (!client.hidden) {
              app.hidden=false;
            }
            if (client.keeping) {
              app.keeping=true;
            }
            app.adjType=""String_Node_Str"";
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE;
            app.adjSource=client;
            app.adjTarget=cpr.name;
          }
          if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
            schedGroup=Process.THREAD_GROUP_DEFAULT;
          }
        }
      }
      if (cpr.externals != 0) {
        if (adj > FOREGROUND_APP_ADJ) {
          adj=FOREGROUND_APP_ADJ;
          schedGroup=Process.THREAD_GROUP_DEFAULT;
          app.hidden=false;
          app.keeping=true;
          app.adjType=""String_Node_Str"";
          app.adjTarget=cpr.name;
        }
      }
    }
  }
  app.curRawAdj=adj;
  if (adj > app.maxAdj) {
    adj=app.maxAdj;
    if (app.maxAdj <= PERCEPTIBLE_APP_ADJ) {
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
  }
  if (adj < HIDDEN_APP_MIN_ADJ) {
    app.keeping=true;
  }
  app.curAdj=adj;
  app.curSchedGroup=schedGroup;
  return adj;
}","private final int computeOomAdjLocked(ProcessRecord app,int hiddenAdj,ProcessRecord TOP_APP,boolean recursed){
  if (mAdjSeq == app.adjSeq) {
    if (!recursed && app.hidden) {
      app.curAdj=hiddenAdj;
    }
    return app.curAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    app.curSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    return (app.curAdj=EMPTY_APP_ADJ);
  }
  if (app.maxAdj <= FOREGROUND_APP_ADJ) {
    app.adjType=""String_Node_Str"";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.keeping=true;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    return (app.curAdj=app.maxAdj);
  }
  app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN;
  app.adjSource=null;
  app.adjTarget=null;
  app.keeping=false;
  app.empty=false;
  app.hidden=false;
  int adj;
  int schedGroup;
  int N;
  if (app == TOP_APP) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.instrumentationClass != null) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.curReceiver != null || (mPendingBroadcast != null && mPendingBroadcast.curApp == app)) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.executingServices.size() > 0) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.foregroundServices) {
    adj=PERCEPTIBLE_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.forcingToForeground != null) {
    adj=PERCEPTIBLE_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    app.adjSource=app.forcingToForeground;
  }
 else   if (app == mHeavyWeightProcess) {
    adj=HEAVY_WEIGHT_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app == mHomeProcess) {
    adj=HOME_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
  }
 else   if ((N=app.activities.size()) != 0) {
    app.hidden=true;
    adj=hiddenAdj;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    N=app.activities.size();
    for (int j=0; j < N; j++) {
      if (app.activities.get(j).visible) {
        app.hidden=false;
        adj=VISIBLE_APP_ADJ;
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.adjType=""String_Node_Str"";
        break;
      }
    }
  }
 else {
    app.hidden=true;
    app.empty=true;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    adj=hiddenAdj;
    app.adjType=""String_Node_Str"";
  }
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Slog.v(TAG,""String_Node_Str"" + app);
      adj=BACKUP_APP_ADJ;
      app.adjType=""String_Node_Str"";
      app.hidden=false;
    }
  }
  if (app.services.size() != 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
    final long now=SystemClock.uptimeMillis();
    Iterator<ServiceRecord> jt=app.services.iterator();
    while (jt.hasNext() && adj > FOREGROUND_APP_ADJ) {
      ServiceRecord s=jt.next();
      if (s.startRequested) {
        if (now < (s.lastActivity + MAX_SERVICE_INACTIVITY)) {
          if (adj > SECONDARY_SERVER_ADJ) {
            adj=SECONDARY_SERVER_ADJ;
            app.adjType=""String_Node_Str"";
            app.hidden=false;
          }
        }
        if (adj > SECONDARY_SERVER_ADJ) {
          app.adjType=""String_Node_Str"";
        }
        app.keeping=true;
      }
      if (s.connections.size() > 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
        Iterator<ArrayList<ConnectionRecord>> kt=s.connections.values().iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ArrayList<ConnectionRecord> clist=kt.next();
          for (int i=0; i < clist.size() && adj > FOREGROUND_APP_ADJ; i++) {
            ConnectionRecord cr=clist.get(i);
            if (cr.binding.client == app) {
              continue;
            }
            if ((cr.flags & Context.BIND_AUTO_CREATE) != 0) {
              ProcessRecord client=cr.binding.client;
              int myHiddenAdj=hiddenAdj;
              if (myHiddenAdj > client.hiddenAdj) {
                if (client.hiddenAdj >= VISIBLE_APP_ADJ) {
                  myHiddenAdj=client.hiddenAdj;
                }
 else {
                  myHiddenAdj=VISIBLE_APP_ADJ;
                }
              }
              int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP,true);
              if (adj > clientAdj) {
                adj=clientAdj >= VISIBLE_APP_ADJ ? clientAdj : VISIBLE_APP_ADJ;
                if (!client.hidden) {
                  app.hidden=false;
                }
                if (client.keeping) {
                  app.keeping=true;
                }
                app.adjType=""String_Node_Str"";
                app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
                app.adjSource=cr.binding.client;
                app.adjTarget=s.name;
              }
              if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
                if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
                  schedGroup=Process.THREAD_GROUP_DEFAULT;
                }
              }
            }
            ActivityRecord a=cr.activity;
            if (a != null && adj > FOREGROUND_APP_ADJ && (a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
              adj=FOREGROUND_APP_ADJ;
              schedGroup=Process.THREAD_GROUP_DEFAULT;
              app.hidden=false;
              app.adjType=""String_Node_Str"";
              app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
              app.adjSource=a;
              app.adjTarget=s.name;
            }
          }
        }
      }
    }
    if (adj > hiddenAdj) {
      adj=hiddenAdj;
      app.hidden=false;
      app.adjType=""String_Node_Str"";
    }
  }
  if (app.pubProviders.size() != 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
    Iterator<ContentProviderRecord> jt=app.pubProviders.values().iterator();
    while (jt.hasNext() && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
      ContentProviderRecord cpr=jt.next();
      if (cpr.clients.size() != 0) {
        Iterator<ProcessRecord> kt=cpr.clients.iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ProcessRecord client=kt.next();
          if (client == app) {
            continue;
          }
          int myHiddenAdj=hiddenAdj;
          if (myHiddenAdj > client.hiddenAdj) {
            if (client.hiddenAdj > FOREGROUND_APP_ADJ) {
              myHiddenAdj=client.hiddenAdj;
            }
 else {
              myHiddenAdj=FOREGROUND_APP_ADJ;
            }
          }
          int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP,true);
          if (adj > clientAdj) {
            adj=clientAdj > FOREGROUND_APP_ADJ ? clientAdj : FOREGROUND_APP_ADJ;
            if (!client.hidden) {
              app.hidden=false;
            }
            if (client.keeping) {
              app.keeping=true;
            }
            app.adjType=""String_Node_Str"";
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE;
            app.adjSource=client;
            app.adjTarget=cpr.name;
          }
          if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
            schedGroup=Process.THREAD_GROUP_DEFAULT;
          }
        }
      }
      if (cpr.externals != 0) {
        if (adj > FOREGROUND_APP_ADJ) {
          adj=FOREGROUND_APP_ADJ;
          schedGroup=Process.THREAD_GROUP_DEFAULT;
          app.hidden=false;
          app.keeping=true;
          app.adjType=""String_Node_Str"";
          app.adjTarget=cpr.name;
        }
      }
    }
  }
  app.curRawAdj=adj;
  if (adj > app.maxAdj) {
    adj=app.maxAdj;
    if (app.maxAdj <= PERCEPTIBLE_APP_ADJ) {
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
  }
  if (adj < HIDDEN_APP_MIN_ADJ) {
    app.keeping=true;
  }
  app.curAdj=adj;
  app.curSchedGroup=schedGroup;
  return adj;
}"
21844,"final void trimApplications(){
synchronized (this) {
    int i;
    for (i=mRemovedProcesses.size() - 1; i >= 0; i--) {
      final ProcessRecord app=mRemovedProcesses.get(i);
      if (app.activities.size() == 0 && app.curReceiver == null && app.services.size() == 0) {
        Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
        if (app.pid > 0 && app.pid != MY_PID) {
          Process.killProcess(app.pid);
        }
 else {
          try {
            app.thread.scheduleExit();
          }
 catch (          Exception e) {
          }
        }
        cleanUpApplicationRecordLocked(app,false,-1);
        mRemovedProcesses.remove(i);
        if (app.persistent) {
          if (app.persistent) {
            addAppLocked(app.info);
          }
        }
      }
    }
    if (!updateOomAdjLocked()) {
      int numServiceProcs=0;
      for (i=mLruProcesses.size() - 1; i >= 0; i--) {
        final ProcessRecord app=mLruProcesses.get(i);
        if (app.persistent || app.services.size() != 0 || app.curReceiver != null || app.persistentActivities > 0) {
          if (localLOGV)           Slog.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.services);
          numServiceProcs++;
        }
      }
      int curMaxProcs=mProcessLimit;
      if (curMaxProcs <= 0)       curMaxProcs=MAX_PROCESSES;
      if (mAlwaysFinishActivities) {
        curMaxProcs=1;
      }
      curMaxProcs+=numServiceProcs;
      for (i=0; i < mLruProcesses.size() && mLruProcesses.size() > curMaxProcs; i++) {
        final ProcessRecord app=mLruProcesses.get(i);
        if (!app.persistent && app.activities.size() == 0 && app.curReceiver == null && app.services.size() == 0) {
          Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
          if (app.pid > 0 && app.pid != MY_PID) {
            Process.killProcess(app.pid);
          }
 else {
            try {
              app.thread.scheduleExit();
            }
 catch (            Exception e) {
            }
          }
          cleanUpApplicationRecordLocked(app,false,i);
          i--;
        }
      }
      if (Config.LOGV)       Slog.v(TAG,""String_Node_Str"" + mLruProcesses.size() + ""String_Node_Str""+ curMaxProcs+ ""String_Node_Str"");
      for (i=0; i < mLruProcesses.size() && mLruProcesses.size() > curMaxProcs; i++) {
        final ProcessRecord app=mLruProcesses.get(i);
        boolean canQuit=!app.persistent && app.curReceiver == null && app.services.size() == 0 && app.persistentActivities == 0;
        int NUMA=app.activities.size();
        int j;
        if (Config.LOGV)         Slog.v(TAG,""String_Node_Str"" + app.processName);
        for (j=0; j < NUMA && canQuit; j++) {
          ActivityRecord r=app.activities.get(j);
          if (Config.LOGV)           Slog.v(TAG,""String_Node_Str"" + r.intent.getComponent().flattenToShortString() + ""String_Node_Str""+ r.haveState+ ""String_Node_Str""+ r.visible);
          canQuit=(r.haveState || !r.stateNotNeeded) && !r.visible && r.stopped;
        }
        if (canQuit) {
          for (j=0; j < NUMA; j++) {
            ActivityRecord r=app.activities.get(j);
            if (!r.finishing) {
              r.stack.destroyActivityLocked(r,false);
            }
            r.resultTo=null;
          }
          Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
          if (app.pid > 0 && app.pid != MY_PID) {
            Process.killProcess(app.pid);
          }
 else {
            try {
              app.thread.scheduleExit();
            }
 catch (            Exception e) {
            }
          }
          cleanUpApplicationRecordLocked(app,false,i);
          i--;
        }
      }
    }
    int curMaxActivities=MAX_ACTIVITIES;
    if (mAlwaysFinishActivities) {
      curMaxActivities=1;
    }
    for (i=0; i < mMainStack.mLRUActivities.size() && mMainStack.mLRUActivities.size() > curMaxActivities; i++) {
      final ActivityRecord r=(ActivityRecord)mMainStack.mLRUActivities.get(i);
      if ((r.haveState || !r.stateNotNeeded) && !r.visible && r.stopped&& !r.persistent&& !r.finishing) {
        final int origSize=mMainStack.mLRUActivities.size();
        r.stack.destroyActivityLocked(r,true);
        if (origSize > mMainStack.mLRUActivities.size()) {
          i--;
        }
      }
    }
  }
}","final void trimApplications(){
synchronized (this) {
    int i;
    for (i=mRemovedProcesses.size() - 1; i >= 0; i--) {
      final ProcessRecord app=mRemovedProcesses.get(i);
      if (app.activities.size() == 0 && app.curReceiver == null && app.services.size() == 0) {
        Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
        if (app.pid > 0 && app.pid != MY_PID) {
          Process.killProcess(app.pid);
        }
 else {
          try {
            app.thread.scheduleExit();
          }
 catch (          Exception e) {
          }
        }
        cleanUpApplicationRecordLocked(app,false,-1);
        mRemovedProcesses.remove(i);
        if (app.persistent) {
          if (app.persistent) {
            addAppLocked(app.info);
          }
        }
      }
    }
    if (!updateOomAdjLocked()) {
      int numServiceProcs=0;
      for (i=mLruProcesses.size() - 1; i >= 0; i--) {
        final ProcessRecord app=mLruProcesses.get(i);
        if (app.persistent || app.services.size() != 0 || app.curReceiver != null) {
          if (localLOGV)           Slog.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.services);
          numServiceProcs++;
        }
      }
      int curMaxProcs=mProcessLimit;
      if (curMaxProcs <= 0)       curMaxProcs=MAX_PROCESSES;
      if (mAlwaysFinishActivities) {
        curMaxProcs=1;
      }
      curMaxProcs+=numServiceProcs;
      for (i=0; i < mLruProcesses.size() && mLruProcesses.size() > curMaxProcs; i++) {
        final ProcessRecord app=mLruProcesses.get(i);
        if (!app.persistent && app.activities.size() == 0 && app.curReceiver == null && app.services.size() == 0) {
          Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
          if (app.pid > 0 && app.pid != MY_PID) {
            Process.killProcess(app.pid);
          }
 else {
            try {
              app.thread.scheduleExit();
            }
 catch (            Exception e) {
            }
          }
          cleanUpApplicationRecordLocked(app,false,i);
          i--;
        }
      }
      if (Config.LOGV)       Slog.v(TAG,""String_Node_Str"" + mLruProcesses.size() + ""String_Node_Str""+ curMaxProcs+ ""String_Node_Str"");
      for (i=0; i < mLruProcesses.size() && mLruProcesses.size() > curMaxProcs; i++) {
        final ProcessRecord app=mLruProcesses.get(i);
        boolean canQuit=!app.persistent && app.curReceiver == null && app.services.size() == 0;
        int NUMA=app.activities.size();
        int j;
        if (Config.LOGV)         Slog.v(TAG,""String_Node_Str"" + app.processName);
        for (j=0; j < NUMA && canQuit; j++) {
          ActivityRecord r=app.activities.get(j);
          if (Config.LOGV)           Slog.v(TAG,""String_Node_Str"" + r.intent.getComponent().flattenToShortString() + ""String_Node_Str""+ r.haveState+ ""String_Node_Str""+ r.visible);
          canQuit=(r.haveState || !r.stateNotNeeded) && !r.visible && r.stopped;
        }
        if (canQuit) {
          for (j=0; j < NUMA; j++) {
            ActivityRecord r=app.activities.get(j);
            if (!r.finishing) {
              r.stack.destroyActivityLocked(r,false);
            }
            r.resultTo=null;
          }
          Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
          if (app.pid > 0 && app.pid != MY_PID) {
            Process.killProcess(app.pid);
          }
 else {
            try {
              app.thread.scheduleExit();
            }
 catch (            Exception e) {
            }
          }
          cleanUpApplicationRecordLocked(app,false,i);
          i--;
        }
      }
    }
    int curMaxActivities=MAX_ACTIVITIES;
    if (mAlwaysFinishActivities) {
      curMaxActivities=1;
    }
    for (i=0; i < mMainStack.mLRUActivities.size() && mMainStack.mLRUActivities.size() > curMaxActivities; i++) {
      final ActivityRecord r=(ActivityRecord)mMainStack.mLRUActivities.get(i);
      if ((r.haveState || !r.stateNotNeeded) && !r.visible && r.stopped&& !r.finishing) {
        final int origSize=mMainStack.mLRUActivities.size();
        r.stack.destroyActivityLocked(r,true);
        if (origSize > mMainStack.mLRUActivities.size()) {
          i--;
        }
      }
    }
  }
}"
21845,"ActivityRecord(ActivityManagerService _service,ActivityStack _stack,ProcessRecord _caller,int _launchedFromUid,Intent _intent,String _resolvedType,ActivityInfo aInfo,Configuration _configuration,ActivityRecord _resultTo,String _resultWho,int _reqCode,boolean _componentSpecified){
  service=_service;
  stack=_stack;
  info=aInfo;
  launchedFromUid=_launchedFromUid;
  intent=_intent;
  shortComponentName=_intent.getComponent().flattenToShortString();
  resolvedType=_resolvedType;
  componentSpecified=_componentSpecified;
  configuration=_configuration;
  resultTo=_resultTo;
  resultWho=_resultWho;
  requestCode=_reqCode;
  state=ActivityState.INITIALIZING;
  frontOfTask=false;
  launchFailed=false;
  haveState=false;
  stopped=false;
  delayedResume=false;
  finishing=false;
  configDestroy=false;
  keysPaused=false;
  inHistory=false;
  persistent=false;
  visible=true;
  waitingVisible=false;
  nowVisible=false;
  thumbnailNeeded=false;
  idle=false;
  hasBeenLaunched=false;
  if (aInfo != null) {
    if (aInfo.targetActivity == null || aInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE || aInfo.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {
      realActivity=_intent.getComponent();
    }
 else {
      realActivity=new ComponentName(aInfo.packageName,aInfo.targetActivity);
    }
    taskAffinity=aInfo.taskAffinity;
    stateNotNeeded=(aInfo.flags & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0;
    baseDir=aInfo.applicationInfo.sourceDir;
    resDir=aInfo.applicationInfo.publicSourceDir;
    dataDir=aInfo.applicationInfo.dataDir;
    nonLocalizedLabel=aInfo.nonLocalizedLabel;
    labelRes=aInfo.labelRes;
    if (nonLocalizedLabel == null && labelRes == 0) {
      ApplicationInfo app=aInfo.applicationInfo;
      nonLocalizedLabel=app.nonLocalizedLabel;
      labelRes=app.labelRes;
    }
    icon=aInfo.getIconResource();
    theme=aInfo.getThemeResource();
    if ((aInfo.flags & ActivityInfo.FLAG_MULTIPROCESS) != 0 && _caller != null && (aInfo.applicationInfo.uid == Process.SYSTEM_UID || aInfo.applicationInfo.uid == _caller.info.uid)) {
      processName=_caller.processName;
    }
 else {
      processName=aInfo.processName;
    }
    if (intent != null && (aInfo.flags & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
    packageName=aInfo.applicationInfo.packageName;
    launchMode=aInfo.launchMode;
    AttributeCache.Entry ent=AttributeCache.instance().get(packageName,theme != 0 ? theme : android.R.style.Theme,com.android.internal.R.styleable.Window);
    fullscreen=ent != null && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false) && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false);
    if (!_componentSpecified || _launchedFromUid == Process.myUid() || _launchedFromUid == 0) {
      if (Intent.ACTION_MAIN.equals(_intent.getAction()) && _intent.hasCategory(Intent.CATEGORY_HOME) && _intent.getCategories().size() == 1 && _intent.getData() == null && _intent.getType() == null && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 && !""String_Node_Str"".equals(realActivity.getClassName())) {
        isHomeActivity=true;
      }
 else {
        isHomeActivity=false;
      }
    }
 else {
      isHomeActivity=false;
    }
  }
 else {
    realActivity=null;
    taskAffinity=null;
    stateNotNeeded=false;
    baseDir=null;
    resDir=null;
    dataDir=null;
    processName=null;
    packageName=null;
    fullscreen=true;
    isHomeActivity=false;
  }
}","ActivityRecord(ActivityManagerService _service,ActivityStack _stack,ProcessRecord _caller,int _launchedFromUid,Intent _intent,String _resolvedType,ActivityInfo aInfo,Configuration _configuration,ActivityRecord _resultTo,String _resultWho,int _reqCode,boolean _componentSpecified){
  service=_service;
  stack=_stack;
  info=aInfo;
  launchedFromUid=_launchedFromUid;
  intent=_intent;
  shortComponentName=_intent.getComponent().flattenToShortString();
  resolvedType=_resolvedType;
  componentSpecified=_componentSpecified;
  configuration=_configuration;
  resultTo=_resultTo;
  resultWho=_resultWho;
  requestCode=_reqCode;
  state=ActivityState.INITIALIZING;
  frontOfTask=false;
  launchFailed=false;
  haveState=false;
  stopped=false;
  delayedResume=false;
  finishing=false;
  configDestroy=false;
  keysPaused=false;
  inHistory=false;
  visible=true;
  waitingVisible=false;
  nowVisible=false;
  thumbnailNeeded=false;
  idle=false;
  hasBeenLaunched=false;
  if (aInfo != null) {
    if (aInfo.targetActivity == null || aInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE || aInfo.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {
      realActivity=_intent.getComponent();
    }
 else {
      realActivity=new ComponentName(aInfo.packageName,aInfo.targetActivity);
    }
    taskAffinity=aInfo.taskAffinity;
    stateNotNeeded=(aInfo.flags & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0;
    baseDir=aInfo.applicationInfo.sourceDir;
    resDir=aInfo.applicationInfo.publicSourceDir;
    dataDir=aInfo.applicationInfo.dataDir;
    nonLocalizedLabel=aInfo.nonLocalizedLabel;
    labelRes=aInfo.labelRes;
    if (nonLocalizedLabel == null && labelRes == 0) {
      ApplicationInfo app=aInfo.applicationInfo;
      nonLocalizedLabel=app.nonLocalizedLabel;
      labelRes=app.labelRes;
    }
    icon=aInfo.getIconResource();
    theme=aInfo.getThemeResource();
    if ((aInfo.flags & ActivityInfo.FLAG_MULTIPROCESS) != 0 && _caller != null && (aInfo.applicationInfo.uid == Process.SYSTEM_UID || aInfo.applicationInfo.uid == _caller.info.uid)) {
      processName=_caller.processName;
    }
 else {
      processName=aInfo.processName;
    }
    if (intent != null && (aInfo.flags & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
    packageName=aInfo.applicationInfo.packageName;
    launchMode=aInfo.launchMode;
    AttributeCache.Entry ent=AttributeCache.instance().get(packageName,theme != 0 ? theme : android.R.style.Theme,com.android.internal.R.styleable.Window);
    fullscreen=ent != null && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false) && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false);
    if (!_componentSpecified || _launchedFromUid == Process.myUid() || _launchedFromUid == 0) {
      if (Intent.ACTION_MAIN.equals(_intent.getAction()) && _intent.hasCategory(Intent.CATEGORY_HOME) && _intent.getCategories().size() == 1 && _intent.getData() == null && _intent.getType() == null && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 && !""String_Node_Str"".equals(realActivity.getClassName())) {
        isHomeActivity=true;
      }
 else {
        isHomeActivity=false;
      }
    }
 else {
      isHomeActivity=false;
    }
  }
 else {
    realActivity=null;
    taskAffinity=null;
    stateNotNeeded=false;
    baseDir=null;
    resDir=null;
    dataDir=null;
    processName=null;
    packageName=null;
    fullscreen=true;
    isHomeActivity=false;
  }
}"
21846,"void dump(PrintWriter pw,String prefix){
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(packageName);
  pw.print(""String_Node_Str"");
  pw.println(processName);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchedFromUid);
  pw.print(""String_Node_Str"");
  pw.println(app);
  pw.print(prefix);
  pw.println(intent);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(frontOfTask);
  pw.print(""String_Node_Str"");
  pw.println(task);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(taskAffinity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(realActivity.flattenToShortString());
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(baseDir);
  if (!resDir.equals(baseDir))   pw.print(""String_Node_Str"");
  pw.print(resDir);
  pw.print(""String_Node_Str"");
  pw.println(dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(labelRes));
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(icon));
  pw.print(""String_Node_Str"");
  pw.println(Integer.toHexString(theme));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(stateNotNeeded);
  pw.print(""String_Node_Str"");
  pw.print(componentSpecified);
  pw.print(""String_Node_Str"");
  pw.println(isHomeActivity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(configuration);
  if (resultTo != null || resultWho != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultWho);
    pw.print(""String_Node_Str"");
    pw.println(requestCode);
  }
  if (results != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(results);
  }
  if (pendingResults != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pendingResults);
  }
  if (uriPermissions != null) {
    if (uriPermissions.readUriPermissions != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(uriPermissions.readUriPermissions);
    }
    if (uriPermissions.writeUriPermissions != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(uriPermissions.writeUriPermissions);
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchFailed);
  pw.print(""String_Node_Str"");
  pw.print(haveState);
  pw.print(""String_Node_Str"");
  pw.println(icicle);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(state);
  pw.print(""String_Node_Str"");
  pw.print(stopped);
  pw.print(""String_Node_Str"");
  pw.print(delayedResume);
  pw.print(""String_Node_Str"");
  pw.println(finishing);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(keysPaused);
  pw.print(""String_Node_Str"");
  pw.print(inHistory);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.println(launchMode);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(fullscreen);
  pw.print(""String_Node_Str"");
  pw.print(visible);
  pw.print(""String_Node_Str"");
  pw.print(frozenBeforeDestroy);
  pw.print(""String_Node_Str"");
  pw.print(thumbnailNeeded);
  pw.print(""String_Node_Str"");
  pw.println(idle);
  if (launchTime != 0 || startTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(launchTime,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(startTime,pw);
    pw.println(""String_Node_Str"");
  }
  if (waitingVisible || nowVisible) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(waitingVisible);
    pw.print(""String_Node_Str"");
    pw.println(nowVisible);
  }
  if (configDestroy || configChangeFlags != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(configDestroy);
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(configChangeFlags));
  }
  if (connections != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
}","void dump(PrintWriter pw,String prefix){
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(packageName);
  pw.print(""String_Node_Str"");
  pw.println(processName);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchedFromUid);
  pw.print(""String_Node_Str"");
  pw.println(app);
  pw.print(prefix);
  pw.println(intent);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(frontOfTask);
  pw.print(""String_Node_Str"");
  pw.println(task);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(taskAffinity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(realActivity.flattenToShortString());
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(baseDir);
  if (!resDir.equals(baseDir))   pw.print(""String_Node_Str"");
  pw.print(resDir);
  pw.print(""String_Node_Str"");
  pw.println(dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(labelRes));
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(icon));
  pw.print(""String_Node_Str"");
  pw.println(Integer.toHexString(theme));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(stateNotNeeded);
  pw.print(""String_Node_Str"");
  pw.print(componentSpecified);
  pw.print(""String_Node_Str"");
  pw.println(isHomeActivity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(configuration);
  if (resultTo != null || resultWho != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultWho);
    pw.print(""String_Node_Str"");
    pw.println(requestCode);
  }
  if (results != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(results);
  }
  if (pendingResults != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pendingResults);
  }
  if (uriPermissions != null) {
    if (uriPermissions.readUriPermissions != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(uriPermissions.readUriPermissions);
    }
    if (uriPermissions.writeUriPermissions != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(uriPermissions.writeUriPermissions);
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchFailed);
  pw.print(""String_Node_Str"");
  pw.print(haveState);
  pw.print(""String_Node_Str"");
  pw.println(icicle);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(state);
  pw.print(""String_Node_Str"");
  pw.print(stopped);
  pw.print(""String_Node_Str"");
  pw.print(delayedResume);
  pw.print(""String_Node_Str"");
  pw.println(finishing);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(keysPaused);
  pw.print(""String_Node_Str"");
  pw.print(inHistory);
  pw.print(""String_Node_Str"");
  pw.println(launchMode);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(fullscreen);
  pw.print(""String_Node_Str"");
  pw.print(visible);
  pw.print(""String_Node_Str"");
  pw.print(frozenBeforeDestroy);
  pw.print(""String_Node_Str"");
  pw.print(thumbnailNeeded);
  pw.print(""String_Node_Str"");
  pw.println(idle);
  if (launchTime != 0 || startTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(launchTime,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(startTime,pw);
    pw.println(""String_Node_Str"");
  }
  if (waitingVisible || nowVisible) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(waitingVisible);
    pw.print(""String_Node_Str"");
    pw.println(nowVisible);
  }
  if (configDestroy || configChangeFlags != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(configDestroy);
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(configChangeFlags));
  }
  if (connections != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
}"
21847,"/** 
 * Make sure the given activity matches the current configuration.  Returns false if the activity had to be destroyed.  Returns true if the configuration is the same, or the activity will remain running as-is for whatever reason.  Ensures the HistoryRecord is updated with the correct configuration and all other bookkeeping is handled.
 */
final boolean ensureActivityConfigurationLocked(ActivityRecord r,int globalChanges){
  if (mConfigWillChange) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG,""String_Node_Str"" + r);
  Configuration newConfig=mService.mConfiguration;
  if (r.configuration == newConfig) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    return true;
  }
  if (r.finishing) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  Configuration oldConfig=r.configuration;
  r.configuration=newConfig;
  if (r.app == null || r.app.thread == null) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  if (!r.persistent) {
    int changes=oldConfig.diff(newConfig);
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION) {
      Slog.v(TAG,""String_Node_Str"" + r.info.name + ""String_Node_Str""+ Integer.toHexString(changes)+ ""String_Node_Str""+ Integer.toHexString(r.info.configChanges)+ ""String_Node_Str""+ newConfig);
    }
    if ((changes & (~r.info.configChanges)) != 0) {
      r.configChangeFlags|=changes;
      r.startFreezingScreenLocked(r.app,globalChanges);
      if (r.app == null || r.app.thread == null) {
        if (DEBUG_SWITCH || DEBUG_CONFIGURATION)         Slog.v(TAG,""String_Node_Str"" + r);
        destroyActivityLocked(r,true);
      }
 else       if (r.state == ActivityState.PAUSING) {
        if (DEBUG_SWITCH || DEBUG_CONFIGURATION)         Slog.v(TAG,""String_Node_Str"" + r);
        r.configDestroy=true;
        return true;
      }
 else       if (r.state == ActivityState.RESUMED) {
        if (DEBUG_SWITCH || DEBUG_CONFIGURATION)         Slog.v(TAG,""String_Node_Str"" + r);
        relaunchActivityLocked(r,r.configChangeFlags,true);
        r.configChangeFlags=0;
      }
 else {
        if (DEBUG_SWITCH || DEBUG_CONFIGURATION)         Slog.v(TAG,""String_Node_Str"" + r);
        relaunchActivityLocked(r,r.configChangeFlags,false);
        r.configChangeFlags=0;
      }
      return false;
    }
  }
  if (r.app != null && r.app.thread != null) {
    try {
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      r.app.thread.scheduleActivityConfigurationChanged(r);
    }
 catch (    RemoteException e) {
    }
  }
  r.stopFreezingScreenLocked(false);
  return true;
}","/** 
 * Make sure the given activity matches the current configuration.  Returns false if the activity had to be destroyed.  Returns true if the configuration is the same, or the activity will remain running as-is for whatever reason.  Ensures the HistoryRecord is updated with the correct configuration and all other bookkeeping is handled.
 */
final boolean ensureActivityConfigurationLocked(ActivityRecord r,int globalChanges){
  if (mConfigWillChange) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG,""String_Node_Str"" + r);
  Configuration newConfig=mService.mConfiguration;
  if (r.configuration == newConfig) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    return true;
  }
  if (r.finishing) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  Configuration oldConfig=r.configuration;
  r.configuration=newConfig;
  if (r.app == null || r.app.thread == null) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  int changes=oldConfig.diff(newConfig);
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION) {
    Slog.v(TAG,""String_Node_Str"" + r.info.name + ""String_Node_Str""+ Integer.toHexString(changes)+ ""String_Node_Str""+ Integer.toHexString(r.info.configChanges)+ ""String_Node_Str""+ newConfig);
  }
  if ((changes & (~r.info.configChanges)) != 0) {
    r.configChangeFlags|=changes;
    r.startFreezingScreenLocked(r.app,globalChanges);
    if (r.app == null || r.app.thread == null) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      destroyActivityLocked(r,true);
    }
 else     if (r.state == ActivityState.PAUSING) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      r.configDestroy=true;
      return true;
    }
 else     if (r.state == ActivityState.RESUMED) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      relaunchActivityLocked(r,r.configChangeFlags,true);
      r.configChangeFlags=0;
    }
 else {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      relaunchActivityLocked(r,r.configChangeFlags,false);
      r.configChangeFlags=0;
    }
    return false;
  }
  if (r.app != null && r.app.thread != null) {
    try {
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      r.app.thread.scheduleActivityConfigurationChanged(r);
    }
 catch (    RemoteException e) {
    }
  }
  r.stopFreezingScreenLocked(false);
  return true;
}"
21848,"/** 
 * Destroy the current CLIENT SIDE instance of an activity.  This may be called both when actually finishing an activity, or when performing a configuration switch where we destroy the current client-side object but then create a new client-side object for this same HistoryRecord.
 */
final boolean destroyActivityLocked(ActivityRecord r,boolean removeFromApp){
  if (DEBUG_SWITCH)   Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ (r.app != null ? r.app.processName : ""String_Node_Str""));
  EventLog.writeEvent(EventLogTags.AM_DESTROY_ACTIVITY,System.identityHashCode(r),r.task.taskId,r.shortComponentName);
  boolean removedFromHistory=false;
  cleanUpActivityLocked(r,false);
  final boolean hadApp=r.app != null;
  if (hadApp) {
    if (removeFromApp) {
      int idx=r.app.activities.indexOf(r);
      if (idx >= 0) {
        r.app.activities.remove(idx);
      }
      if (mService.mHeavyWeightProcess == r.app && r.app.activities.size() <= 0) {
        mService.mHeavyWeightProcess=null;
        mService.mHandler.sendEmptyMessage(ActivityManagerService.CANCEL_HEAVY_NOTIFICATION_MSG);
      }
      if (r.persistent) {
        mService.decPersistentCountLocked(r.app);
      }
      if (r.app.activities.size() == 0) {
        mService.updateLruProcessLocked(r.app,true,false);
      }
    }
    boolean skipDestroy=false;
    try {
      if (DEBUG_SWITCH)       Slog.i(TAG,""String_Node_Str"" + r);
      r.app.thread.scheduleDestroyActivity(r,r.finishing,r.configChangeFlags);
    }
 catch (    Exception e) {
      if (r.finishing) {
        removeActivityFromHistoryLocked(r);
        removedFromHistory=true;
        skipDestroy=true;
      }
    }
    r.app=null;
    r.nowVisible=false;
    if (r.finishing && !skipDestroy) {
      r.state=ActivityState.DESTROYING;
      Message msg=mHandler.obtainMessage(DESTROY_TIMEOUT_MSG);
      msg.obj=r;
      mHandler.sendMessageDelayed(msg,DESTROY_TIMEOUT);
    }
 else {
      r.state=ActivityState.DESTROYED;
    }
  }
 else {
    if (r.finishing) {
      removeActivityFromHistoryLocked(r);
      removedFromHistory=true;
    }
 else {
      r.state=ActivityState.DESTROYED;
    }
  }
  r.configChangeFlags=0;
  if (!mLRUActivities.remove(r) && hadApp) {
    Slog.w(TAG,""String_Node_Str"" + r + ""String_Node_Str"");
  }
  return removedFromHistory;
}","/** 
 * Destroy the current CLIENT SIDE instance of an activity.  This may be called both when actually finishing an activity, or when performing a configuration switch where we destroy the current client-side object but then create a new client-side object for this same HistoryRecord.
 */
final boolean destroyActivityLocked(ActivityRecord r,boolean removeFromApp){
  if (DEBUG_SWITCH)   Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ (r.app != null ? r.app.processName : ""String_Node_Str""));
  EventLog.writeEvent(EventLogTags.AM_DESTROY_ACTIVITY,System.identityHashCode(r),r.task.taskId,r.shortComponentName);
  boolean removedFromHistory=false;
  cleanUpActivityLocked(r,false);
  final boolean hadApp=r.app != null;
  if (hadApp) {
    if (removeFromApp) {
      int idx=r.app.activities.indexOf(r);
      if (idx >= 0) {
        r.app.activities.remove(idx);
      }
      if (mService.mHeavyWeightProcess == r.app && r.app.activities.size() <= 0) {
        mService.mHeavyWeightProcess=null;
        mService.mHandler.sendEmptyMessage(ActivityManagerService.CANCEL_HEAVY_NOTIFICATION_MSG);
      }
      if (r.app.activities.size() == 0) {
        mService.updateLruProcessLocked(r.app,true,false);
      }
    }
    boolean skipDestroy=false;
    try {
      if (DEBUG_SWITCH)       Slog.i(TAG,""String_Node_Str"" + r);
      r.app.thread.scheduleDestroyActivity(r,r.finishing,r.configChangeFlags);
    }
 catch (    Exception e) {
      if (r.finishing) {
        removeActivityFromHistoryLocked(r);
        removedFromHistory=true;
        skipDestroy=true;
      }
    }
    r.app=null;
    r.nowVisible=false;
    if (r.finishing && !skipDestroy) {
      r.state=ActivityState.DESTROYING;
      Message msg=mHandler.obtainMessage(DESTROY_TIMEOUT_MSG);
      msg.obj=r;
      mHandler.sendMessageDelayed(msg,DESTROY_TIMEOUT);
    }
 else {
      r.state=ActivityState.DESTROYED;
    }
  }
 else {
    if (r.finishing) {
      removeActivityFromHistoryLocked(r);
      removedFromHistory=true;
    }
 else {
      r.state=ActivityState.DESTROYED;
    }
  }
  r.configChangeFlags=0;
  if (!mLRUActivities.remove(r) && hadApp) {
    Slog.w(TAG,""String_Node_Str"" + r + ""String_Node_Str"");
  }
  return removedFromHistory;
}"
21849,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(pkgList);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(thread);
  pw.print(""String_Node_Str"");
  pw.println(curReceiver);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.print(starting);
  pw.print(""String_Node_Str"");
  pw.println(lastPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  pw.print(lruWeight);
  pw.print(""String_Node_Str"");
  pw.print(keeping);
  pw.print(""String_Node_Str"");
  pw.print(hidden);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(hiddenAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.println(setSchedGroup);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(setIsForeground);
  pw.print(""String_Node_Str"");
  pw.print(foregroundServices);
  pw.print(""String_Node_Str"");
  pw.println(forcingToForeground);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.print(removed);
  pw.print(""String_Node_Str"");
  pw.println(persistentActivities);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.println(lruSeq);
  if (!keeping) {
    long wtime;
synchronized (batteryStats.getBatteryStats()) {
      wtime=batteryStats.getBatteryStats().getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    long timeUsed=wtime - lastWakeTime;
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(timeUsed,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killedBackground) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(killedBackground);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(activities);
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(services);
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(executingServices);
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pubProviders);
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(conProviders);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(receivers);
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(pkgList);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(thread);
  pw.print(""String_Node_Str"");
  pw.println(curReceiver);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.print(starting);
  pw.print(""String_Node_Str"");
  pw.println(lastPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  pw.print(lruWeight);
  pw.print(""String_Node_Str"");
  pw.print(keeping);
  pw.print(""String_Node_Str"");
  pw.print(hidden);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(hiddenAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.println(setSchedGroup);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(setIsForeground);
  pw.print(""String_Node_Str"");
  pw.print(foregroundServices);
  pw.print(""String_Node_Str"");
  pw.println(forcingToForeground);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.println(removed);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.println(lruSeq);
  if (!keeping) {
    long wtime;
synchronized (batteryStats.getBatteryStats()) {
      wtime=batteryStats.getBatteryStats().getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    long timeUsed=wtime - lastWakeTime;
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(timeUsed,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killedBackground) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(killedBackground);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(activities);
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(services);
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(executingServices);
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pubProviders);
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(conProviders);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(receivers);
  }
}"
21850,"ProcessRecord(BatteryStatsImpl.Uid.Proc _batteryStats,IApplicationThread _thread,ApplicationInfo _info,String _processName){
  batteryStats=_batteryStats;
  info=_info;
  processName=_processName;
  pkgList.add(_info.packageName);
  thread=_thread;
  maxAdj=ActivityManagerService.EMPTY_APP_ADJ;
  hiddenAdj=ActivityManagerService.HIDDEN_APP_MIN_ADJ;
  curRawAdj=setRawAdj=-100;
  curAdj=setAdj=-100;
  persistent=false;
  removed=false;
  persistentActivities=0;
}","ProcessRecord(BatteryStatsImpl.Uid.Proc _batteryStats,IApplicationThread _thread,ApplicationInfo _info,String _processName){
  batteryStats=_batteryStats;
  info=_info;
  processName=_processName;
  pkgList.add(_info.packageName);
  thread=_thread;
  maxAdj=ActivityManagerService.EMPTY_APP_ADJ;
  hiddenAdj=ActivityManagerService.HIDDEN_APP_MIN_ADJ;
  curRawAdj=setRawAdj=-100;
  curAdj=setAdj=-100;
  persistent=false;
  removed=false;
}"
21851,"public void dump(Printer pw,String prefix){
  super.dumpFront(pw,prefix);
  if (className != null) {
    pw.println(prefix + ""String_Node_Str"" + className);
  }
  if (permission != null) {
    pw.println(prefix + ""String_Node_Str"" + permission);
  }
  pw.println(prefix + ""String_Node_Str"" + processName);
  pw.println(prefix + ""String_Node_Str"" + taskAffinity);
  pw.println(prefix + ""String_Node_Str"" + uid+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ Integer.toHexString(theme));
  pw.println(prefix + ""String_Node_Str"" + sourceDir);
  if (!sourceDir.equals(publicSourceDir)) {
    pw.println(prefix + ""String_Node_Str"" + publicSourceDir);
  }
  if (resourceDirs != null) {
    pw.println(prefix + ""String_Node_Str"" + resourceDirs);
  }
  pw.println(prefix + ""String_Node_Str"" + dataDir);
  if (sharedLibraryFiles != null) {
    pw.println(prefix + ""String_Node_Str"" + sharedLibraryFiles);
  }
  pw.println(prefix + ""String_Node_Str"" + enabled+ ""String_Node_Str""+ targetSdkVersion);
  if (manageSpaceActivityName != null) {
    pw.println(prefix + ""String_Node_Str"" + manageSpaceActivityName);
  }
  if (descriptionRes != 0) {
    pw.println(prefix + ""String_Node_Str"" + Integer.toHexString(descriptionRes));
  }
  super.dumpBack(pw,prefix);
}","public void dump(Printer pw,String prefix){
  super.dumpFront(pw,prefix);
  if (className != null) {
    pw.println(prefix + ""String_Node_Str"" + className);
  }
  if (permission != null) {
    pw.println(prefix + ""String_Node_Str"" + permission);
  }
  pw.println(prefix + ""String_Node_Str"" + processName);
  pw.println(prefix + ""String_Node_Str"" + taskAffinity);
  pw.println(prefix + ""String_Node_Str"" + uid+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ Integer.toHexString(theme));
  pw.println(prefix + ""String_Node_Str"" + sourceDir);
  if (sourceDir == null) {
    if (publicSourceDir != null) {
      pw.println(prefix + ""String_Node_Str"" + publicSourceDir);
    }
  }
 else   if (!sourceDir.equals(publicSourceDir)) {
    pw.println(prefix + ""String_Node_Str"" + publicSourceDir);
  }
  if (resourceDirs != null) {
    pw.println(prefix + ""String_Node_Str"" + resourceDirs);
  }
  pw.println(prefix + ""String_Node_Str"" + dataDir);
  if (sharedLibraryFiles != null) {
    pw.println(prefix + ""String_Node_Str"" + sharedLibraryFiles);
  }
  pw.println(prefix + ""String_Node_Str"" + enabled+ ""String_Node_Str""+ targetSdkVersion);
  if (manageSpaceActivityName != null) {
    pw.println(prefix + ""String_Node_Str"" + manageSpaceActivityName);
  }
  if (descriptionRes != 0) {
    pw.println(prefix + ""String_Node_Str"" + Integer.toHexString(descriptionRes));
  }
  super.dumpBack(pw,prefix);
}"
21852,"public void dump(Printer pw,String prefix){
  super.dumpFront(pw,prefix);
  if (className != null) {
    pw.println(prefix + ""String_Node_Str"" + className);
  }
  if (permission != null) {
    pw.println(prefix + ""String_Node_Str"" + permission);
  }
  pw.println(prefix + ""String_Node_Str"" + processName);
  pw.println(prefix + ""String_Node_Str"" + taskAffinity);
  pw.println(prefix + ""String_Node_Str"" + uid+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ Integer.toHexString(theme));
  pw.println(prefix + ""String_Node_Str"" + sourceDir);
  if (!sourceDir.equals(publicSourceDir)) {
    pw.println(prefix + ""String_Node_Str"" + publicSourceDir);
  }
  if (resourceDirs != null) {
    pw.println(prefix + ""String_Node_Str"" + resourceDirs);
  }
  pw.println(prefix + ""String_Node_Str"" + dataDir);
  if (sharedLibraryFiles != null) {
    pw.println(prefix + ""String_Node_Str"" + sharedLibraryFiles);
  }
  pw.println(prefix + ""String_Node_Str"" + enabled+ ""String_Node_Str""+ targetSdkVersion);
  if (manageSpaceActivityName != null) {
    pw.println(prefix + ""String_Node_Str"" + manageSpaceActivityName);
  }
  if (descriptionRes != 0) {
    pw.println(prefix + ""String_Node_Str"" + Integer.toHexString(descriptionRes));
  }
  super.dumpBack(pw,prefix);
}","public void dump(Printer pw,String prefix){
  super.dumpFront(pw,prefix);
  if (className != null) {
    pw.println(prefix + ""String_Node_Str"" + className);
  }
  if (permission != null) {
    pw.println(prefix + ""String_Node_Str"" + permission);
  }
  pw.println(prefix + ""String_Node_Str"" + processName);
  pw.println(prefix + ""String_Node_Str"" + taskAffinity);
  pw.println(prefix + ""String_Node_Str"" + uid+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ Integer.toHexString(theme));
  pw.println(prefix + ""String_Node_Str"" + sourceDir);
  if (sourceDir == null) {
    if (publicSourceDir != null) {
      pw.println(prefix + ""String_Node_Str"" + publicSourceDir);
    }
  }
 else   if (!sourceDir.equals(publicSourceDir)) {
    pw.println(prefix + ""String_Node_Str"" + publicSourceDir);
  }
  if (resourceDirs != null) {
    pw.println(prefix + ""String_Node_Str"" + resourceDirs);
  }
  pw.println(prefix + ""String_Node_Str"" + dataDir);
  if (sharedLibraryFiles != null) {
    pw.println(prefix + ""String_Node_Str"" + sharedLibraryFiles);
  }
  pw.println(prefix + ""String_Node_Str"" + enabled+ ""String_Node_Str""+ targetSdkVersion);
  if (manageSpaceActivityName != null) {
    pw.println(prefix + ""String_Node_Str"" + manageSpaceActivityName);
  }
  if (descriptionRes != 0) {
    pw.println(prefix + ""String_Node_Str"" + Integer.toHexString(descriptionRes));
  }
  super.dumpBack(pw,prefix);
}"
21853,"/** 
 * @deprecated This functionality will be removed in the future; please donot use. Control whether this activity is required to be persistent.  By default activities are not persistent; setting this to true will prevent the system from stopping this activity or its process when running low on resources. <p><em>You should avoid using this method</em>, it has severe negative consequences on how well the system can manage its resources.  A better approach is to implement an application service that you control with {@link Context#startService} and {@link Context#stopService}.
 * @param isPersistent Control whether the current activity must bepersistent, true if so, false for the normal behavior.
 */
@Deprecated public void setPersistent(boolean isPersistent){
  if (mParent == null) {
    try {
      ActivityManagerNative.getDefault().setPersistent(mToken,isPersistent);
    }
 catch (    RemoteException e) {
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * @deprecated As of {@link android.os.Build.VERSION_CODES#GINGERBREAD}this is a no-op.
 */
@Deprecated public void setPersistent(boolean isPersistent){
}"
21854,"public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
    int grantedMode=data.readInt();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    boolean onlyIfNeeded=data.readInt() != 0;
    boolean debug=data.readInt() != 0;
    WaitResult result=startActivityAndWait(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
    reply.writeNoException();
    result.writeToParcel(reply,0);
    return true;
  }
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
  int grantedMode=data.readInt();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  boolean onlyIfNeeded=data.readInt() != 0;
  boolean debug=data.readInt() != 0;
  Configuration config=Configuration.CREATOR.createFromParcel(data);
  int result=startActivityWithConfig(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug,config);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
  fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean result=startNextMatchingActivity(callingActivity,intent);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=finishActivity(token,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
if (token != null) {
activityIdle(token,config);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean res=killPids(pids,reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
killBackgroundProcesses(packageName);
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
forceStopPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? data.readFileDescriptor() : null;
boolean res=profileControl(process,start,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case REGISTER_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
registerActivityWatcher(watcher);
return true;
}
case UNREGISTER_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
unregisterActivityWatcher(watcher);
return true;
}
case START_ACTIVITY_IN_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
boolean onlyIfNeeded=data.readInt() != 0;
int result=startActivityInPackage(uid,intent,resolvedType,resultTo,resultWho,requestCode,onlyIfNeeded);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case KILL_APPLICATION_WITH_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int uid=data.readInt();
killApplicationWithUid(pkg,uid);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
String type=getProviderMimeType(uri);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode);
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_ACTIVITY_AND_WAIT_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder b=data.readStrongBinder();
    IApplicationThread app=ApplicationThreadNative.asInterface(b);
    Intent intent=Intent.CREATOR.createFromParcel(data);
    String resolvedType=data.readString();
    Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
    int grantedMode=data.readInt();
    IBinder resultTo=data.readStrongBinder();
    String resultWho=data.readString();
    int requestCode=data.readInt();
    boolean onlyIfNeeded=data.readInt() != 0;
    boolean debug=data.readInt() != 0;
    WaitResult result=startActivityAndWait(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
    reply.writeNoException();
    result.writeToParcel(reply,0);
    return true;
  }
case START_ACTIVITY_WITH_CONFIG_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder b=data.readStrongBinder();
  IApplicationThread app=ApplicationThreadNative.asInterface(b);
  Intent intent=Intent.CREATOR.createFromParcel(data);
  String resolvedType=data.readString();
  Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
  int grantedMode=data.readInt();
  IBinder resultTo=data.readStrongBinder();
  String resultWho=data.readString();
  int requestCode=data.readInt();
  boolean onlyIfNeeded=data.readInt() != 0;
  boolean debug=data.readInt() != 0;
  Configuration config=Configuration.CREATOR.createFromParcel(data);
  int result=startActivityWithConfig(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug,config);
  reply.writeNoException();
  reply.writeInt(result);
  return true;
}
case START_ACTIVITY_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IntentSender intent=IntentSender.CREATOR.createFromParcel(data);
Intent fillInIntent=null;
if (data.readInt() != 0) {
  fillInIntent=Intent.CREATOR.createFromParcel(data);
}
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
int flagsMask=data.readInt();
int flagsValues=data.readInt();
int result=startActivityIntentSender(app,intent,fillInIntent,resolvedType,resultTo,resultWho,requestCode,flagsMask,flagsValues);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder callingActivity=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean result=startNextMatchingActivity(callingActivity,intent);
reply.writeNoException();
reply.writeInt(result ? 1 : 0);
return true;
}
case FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent resultData=null;
int resultCode=data.readInt();
if (data.readInt() != 0) {
resultData=Intent.CREATOR.createFromParcel(data);
}
boolean res=finishActivity(token,resultCode,resultData);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case WILL_ACTIVITY_BE_VISIBLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean res=willActivityBeVisible(token);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Configuration config=null;
if (data.readInt() != 0) {
config=Configuration.CREATOR.createFromParcel(data);
}
if (token != null) {
activityIdle(token,config);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ApplicationInfo> list=getRunningExternalApplications();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName comp=ComponentName.CREATOR.createFromParcel(data);
PendingIntent pi=getRunningServiceControlPanel(comp);
reply.writeNoException();
PendingIntent.writePendingIntentOrNullToParcel(pi,reply);
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int id=data.readInt();
Notification notification=null;
if (data.readInt() != 0) {
notification=Notification.CREATOR.createFromParcel(data);
}
boolean removeNotification=data.readInt() != 0;
setServiceForeground(className,token,id,notification,removeNotification);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int type=data.readInt();
int startId=data.readInt();
int res=data.readInt();
serviceDoneExecuting(token,type,startId,res);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_CONTROLLER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityController watcher=IActivityController.Stub.asInterface(data.readStrongBinder());
setActivityController(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
String reason=data.readString();
boolean res=killPids(pids,reason);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_CRASH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
handleApplicationCrash(app,ci);
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_WTF_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
String tag=data.readString();
ApplicationErrorReport.CrashInfo ci=new ApplicationErrorReport.CrashInfo(data);
boolean res=handleApplicationWtf(app,tag,ci);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int violationMask=data.readInt();
StrictMode.ViolationInfo info=new StrictMode.ViolationInfo(data);
handleApplicationStrictModeViolation(app,violationMask,info);
reply.writeNoException();
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case KILL_BACKGROUND_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
killBackgroundProcesses(packageName);
reply.writeNoException();
return true;
}
case FORCE_STOP_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
forceStopPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? data.readFileDescriptor() : null;
boolean res=profileControl(process,start,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
case REGISTER_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
registerActivityWatcher(watcher);
return true;
}
case UNREGISTER_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
unregisterActivityWatcher(watcher);
return true;
}
case START_ACTIVITY_IN_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder resultTo=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
boolean onlyIfNeeded=data.readInt() != 0;
int result=startActivityInPackage(uid,intent,resolvedType,resultTo,resultWho,requestCode,onlyIfNeeded);
reply.writeNoException();
reply.writeInt(result);
return true;
}
case KILL_APPLICATION_WITH_UID_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
int uid=data.readInt();
killApplicationWithUid(pkg,uid);
reply.writeNoException();
return true;
}
case CLOSE_SYSTEM_DIALOGS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String reason=data.readString();
closeSystemDialogs(reason);
reply.writeNoException();
return true;
}
case GET_PROCESS_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
Debug.MemoryInfo[] res=getProcessMemoryInfo(pids);
reply.writeNoException();
reply.writeTypedArray(res,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case KILL_APPLICATION_PROCESS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String processName=data.readString();
int uid=data.readInt();
killApplicationProcess(processName,uid);
reply.writeNoException();
return true;
}
case OVERRIDE_PENDING_TRANSITION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String packageName=data.readString();
int enterAnim=data.readInt();
int exitAnim=data.readInt();
overridePendingTransition(token,packageName,enterAnim,exitAnim);
reply.writeNoException();
return true;
}
case IS_USER_A_MONKEY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean areThey=isUserAMonkey();
reply.writeNoException();
reply.writeInt(areThey ? 1 : 0);
return true;
}
case FINISH_HEAVY_WEIGHT_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
finishHeavyWeightApp();
reply.writeNoException();
return true;
}
case CRASH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int uid=data.readInt();
int initialPid=data.readInt();
String packageName=data.readString();
String message=data.readString();
crashApplication(uid,initialPid,packageName,message);
reply.writeNoException();
return true;
}
case GET_PROVIDER_MIME_TYPE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
String type=getProviderMimeType(uri);
reply.writeNoException();
reply.writeString(type);
return true;
}
case NEW_URI_PERMISSION_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String name=data.readString();
IBinder perm=newUriPermissionOwner(name);
reply.writeNoException();
reply.writeStrongBinder(perm);
return true;
}
case GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
int fromUid=data.readInt();
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermissionFromOwner(owner,fromUid,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder owner=data.readStrongBinder();
Uri uri=null;
if (data.readInt() != 0) {
Uri.CREATOR.createFromParcel(data);
}
int mode=data.readInt();
revokeUriPermissionFromOwner(owner,uri,mode);
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}"
21855,"private final int computeOomAdjLocked(ProcessRecord app,int hiddenAdj,ProcessRecord TOP_APP,boolean recursed){
  if (mAdjSeq == app.adjSeq) {
    if (!recursed && app.hidden) {
      app.curAdj=hiddenAdj;
    }
    return app.curAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    app.curSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    return (app.curAdj=EMPTY_APP_ADJ);
  }
  if (app.maxAdj <= FOREGROUND_APP_ADJ) {
    app.adjType=""String_Node_Str"";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.keeping=true;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    return (app.curAdj=app.maxAdj);
  }
  app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN;
  app.adjSource=null;
  app.adjTarget=null;
  app.keeping=false;
  app.empty=false;
  app.hidden=false;
  int adj;
  int schedGroup;
  int N;
  if (app == TOP_APP) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.instrumentationClass != null) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.persistentActivities > 0) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.curReceiver != null || (mPendingBroadcast != null && mPendingBroadcast.curApp == app)) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.executingServices.size() > 0) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.foregroundServices) {
    adj=PERCEPTIBLE_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.forcingToForeground != null) {
    adj=PERCEPTIBLE_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    app.adjSource=app.forcingToForeground;
  }
 else   if (app == mHeavyWeightProcess) {
    adj=HEAVY_WEIGHT_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app == mHomeProcess) {
    adj=HOME_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
  }
 else   if ((N=app.activities.size()) != 0) {
    app.hidden=true;
    adj=hiddenAdj;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    N=app.activities.size();
    for (int j=0; j < N; j++) {
      if (app.activities.get(j).visible) {
        app.hidden=false;
        adj=VISIBLE_APP_ADJ;
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.adjType=""String_Node_Str"";
        break;
      }
    }
  }
 else {
    app.hidden=true;
    app.empty=true;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    adj=hiddenAdj;
    app.adjType=""String_Node_Str"";
  }
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Slog.v(TAG,""String_Node_Str"" + app);
      adj=BACKUP_APP_ADJ;
      app.adjType=""String_Node_Str"";
      app.hidden=false;
    }
  }
  if (app.services.size() != 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
    final long now=SystemClock.uptimeMillis();
    Iterator<ServiceRecord> jt=app.services.iterator();
    while (jt.hasNext() && adj > FOREGROUND_APP_ADJ) {
      ServiceRecord s=jt.next();
      if (s.startRequested) {
        if (now < (s.lastActivity + MAX_SERVICE_INACTIVITY)) {
          if (adj > SECONDARY_SERVER_ADJ) {
            adj=SECONDARY_SERVER_ADJ;
            app.adjType=""String_Node_Str"";
            app.hidden=false;
          }
        }
        if (adj > SECONDARY_SERVER_ADJ) {
          app.adjType=""String_Node_Str"";
        }
        app.keeping=true;
      }
      if (s.connections.size() > 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
        Iterator<ArrayList<ConnectionRecord>> kt=s.connections.values().iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ArrayList<ConnectionRecord> clist=kt.next();
          for (int i=0; i < clist.size() && adj > FOREGROUND_APP_ADJ; i++) {
            ConnectionRecord cr=clist.get(i);
            if (cr.binding.client == app) {
              continue;
            }
            if ((cr.flags & Context.BIND_AUTO_CREATE) != 0) {
              ProcessRecord client=cr.binding.client;
              int myHiddenAdj=hiddenAdj;
              if (myHiddenAdj > client.hiddenAdj) {
                if (client.hiddenAdj >= VISIBLE_APP_ADJ) {
                  myHiddenAdj=client.hiddenAdj;
                }
 else {
                  myHiddenAdj=VISIBLE_APP_ADJ;
                }
              }
              int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP,true);
              if (adj > clientAdj) {
                adj=clientAdj >= VISIBLE_APP_ADJ ? clientAdj : VISIBLE_APP_ADJ;
                if (!client.hidden) {
                  app.hidden=false;
                }
                if (client.keeping) {
                  app.keeping=true;
                }
                app.adjType=""String_Node_Str"";
                app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
                app.adjSource=cr.binding.client;
                app.adjTarget=s.name;
              }
              if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
                if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
                  schedGroup=Process.THREAD_GROUP_DEFAULT;
                }
              }
            }
            ActivityRecord a=cr.activity;
            if (a != null && adj > FOREGROUND_APP_ADJ && (a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
              adj=FOREGROUND_APP_ADJ;
              schedGroup=Process.THREAD_GROUP_DEFAULT;
              app.hidden=false;
              app.adjType=""String_Node_Str"";
              app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
              app.adjSource=a;
              app.adjTarget=s.name;
            }
          }
        }
      }
    }
    if (adj > hiddenAdj) {
      adj=hiddenAdj;
      app.hidden=false;
      app.adjType=""String_Node_Str"";
    }
  }
  if (app.pubProviders.size() != 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
    Iterator<ContentProviderRecord> jt=app.pubProviders.values().iterator();
    while (jt.hasNext() && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
      ContentProviderRecord cpr=jt.next();
      if (cpr.clients.size() != 0) {
        Iterator<ProcessRecord> kt=cpr.clients.iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ProcessRecord client=kt.next();
          if (client == app) {
            continue;
          }
          int myHiddenAdj=hiddenAdj;
          if (myHiddenAdj > client.hiddenAdj) {
            if (client.hiddenAdj > FOREGROUND_APP_ADJ) {
              myHiddenAdj=client.hiddenAdj;
            }
 else {
              myHiddenAdj=FOREGROUND_APP_ADJ;
            }
          }
          int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP,true);
          if (adj > clientAdj) {
            adj=clientAdj > FOREGROUND_APP_ADJ ? clientAdj : FOREGROUND_APP_ADJ;
            if (!client.hidden) {
              app.hidden=false;
            }
            if (client.keeping) {
              app.keeping=true;
            }
            app.adjType=""String_Node_Str"";
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE;
            app.adjSource=client;
            app.adjTarget=cpr.name;
          }
          if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
            schedGroup=Process.THREAD_GROUP_DEFAULT;
          }
        }
      }
      if (cpr.externals != 0) {
        if (adj > FOREGROUND_APP_ADJ) {
          adj=FOREGROUND_APP_ADJ;
          schedGroup=Process.THREAD_GROUP_DEFAULT;
          app.hidden=false;
          app.keeping=true;
          app.adjType=""String_Node_Str"";
          app.adjTarget=cpr.name;
        }
      }
    }
  }
  app.curRawAdj=adj;
  if (adj > app.maxAdj) {
    adj=app.maxAdj;
    if (app.maxAdj <= PERCEPTIBLE_APP_ADJ) {
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
  }
  if (adj < HIDDEN_APP_MIN_ADJ) {
    app.keeping=true;
  }
  app.curAdj=adj;
  app.curSchedGroup=schedGroup;
  return adj;
}","private final int computeOomAdjLocked(ProcessRecord app,int hiddenAdj,ProcessRecord TOP_APP,boolean recursed){
  if (mAdjSeq == app.adjSeq) {
    if (!recursed && app.hidden) {
      app.curAdj=hiddenAdj;
    }
    return app.curAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    app.curSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    return (app.curAdj=EMPTY_APP_ADJ);
  }
  if (app.maxAdj <= FOREGROUND_APP_ADJ) {
    app.adjType=""String_Node_Str"";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.keeping=true;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    return (app.curAdj=app.maxAdj);
  }
  app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN;
  app.adjSource=null;
  app.adjTarget=null;
  app.keeping=false;
  app.empty=false;
  app.hidden=false;
  int adj;
  int schedGroup;
  int N;
  if (app == TOP_APP) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.instrumentationClass != null) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.curReceiver != null || (mPendingBroadcast != null && mPendingBroadcast.curApp == app)) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.executingServices.size() > 0) {
    adj=FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.foregroundServices) {
    adj=PERCEPTIBLE_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app.forcingToForeground != null) {
    adj=PERCEPTIBLE_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    app.adjSource=app.forcingToForeground;
  }
 else   if (app == mHeavyWeightProcess) {
    adj=HEAVY_WEIGHT_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
  }
 else   if (app == mHomeProcess) {
    adj=HOME_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
  }
 else   if ((N=app.activities.size()) != 0) {
    app.hidden=true;
    adj=hiddenAdj;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    N=app.activities.size();
    for (int j=0; j < N; j++) {
      if (app.activities.get(j).visible) {
        app.hidden=false;
        adj=VISIBLE_APP_ADJ;
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.adjType=""String_Node_Str"";
        break;
      }
    }
  }
 else {
    app.hidden=true;
    app.empty=true;
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    adj=hiddenAdj;
    app.adjType=""String_Node_Str"";
  }
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Slog.v(TAG,""String_Node_Str"" + app);
      adj=BACKUP_APP_ADJ;
      app.adjType=""String_Node_Str"";
      app.hidden=false;
    }
  }
  if (app.services.size() != 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
    final long now=SystemClock.uptimeMillis();
    Iterator<ServiceRecord> jt=app.services.iterator();
    while (jt.hasNext() && adj > FOREGROUND_APP_ADJ) {
      ServiceRecord s=jt.next();
      if (s.startRequested) {
        if (now < (s.lastActivity + MAX_SERVICE_INACTIVITY)) {
          if (adj > SECONDARY_SERVER_ADJ) {
            adj=SECONDARY_SERVER_ADJ;
            app.adjType=""String_Node_Str"";
            app.hidden=false;
          }
        }
        if (adj > SECONDARY_SERVER_ADJ) {
          app.adjType=""String_Node_Str"";
        }
        app.keeping=true;
      }
      if (s.connections.size() > 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
        Iterator<ArrayList<ConnectionRecord>> kt=s.connections.values().iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ArrayList<ConnectionRecord> clist=kt.next();
          for (int i=0; i < clist.size() && adj > FOREGROUND_APP_ADJ; i++) {
            ConnectionRecord cr=clist.get(i);
            if (cr.binding.client == app) {
              continue;
            }
            if ((cr.flags & Context.BIND_AUTO_CREATE) != 0) {
              ProcessRecord client=cr.binding.client;
              int myHiddenAdj=hiddenAdj;
              if (myHiddenAdj > client.hiddenAdj) {
                if (client.hiddenAdj >= VISIBLE_APP_ADJ) {
                  myHiddenAdj=client.hiddenAdj;
                }
 else {
                  myHiddenAdj=VISIBLE_APP_ADJ;
                }
              }
              int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP,true);
              if (adj > clientAdj) {
                adj=clientAdj >= VISIBLE_APP_ADJ ? clientAdj : VISIBLE_APP_ADJ;
                if (!client.hidden) {
                  app.hidden=false;
                }
                if (client.keeping) {
                  app.keeping=true;
                }
                app.adjType=""String_Node_Str"";
                app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
                app.adjSource=cr.binding.client;
                app.adjTarget=s.name;
              }
              if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
                if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
                  schedGroup=Process.THREAD_GROUP_DEFAULT;
                }
              }
            }
            ActivityRecord a=cr.activity;
            if (a != null && adj > FOREGROUND_APP_ADJ && (a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
              adj=FOREGROUND_APP_ADJ;
              schedGroup=Process.THREAD_GROUP_DEFAULT;
              app.hidden=false;
              app.adjType=""String_Node_Str"";
              app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
              app.adjSource=a;
              app.adjTarget=s.name;
            }
          }
        }
      }
    }
    if (adj > hiddenAdj) {
      adj=hiddenAdj;
      app.hidden=false;
      app.adjType=""String_Node_Str"";
    }
  }
  if (app.pubProviders.size() != 0 && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
    Iterator<ContentProviderRecord> jt=app.pubProviders.values().iterator();
    while (jt.hasNext() && (adj > FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE)) {
      ContentProviderRecord cpr=jt.next();
      if (cpr.clients.size() != 0) {
        Iterator<ProcessRecord> kt=cpr.clients.iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ProcessRecord client=kt.next();
          if (client == app) {
            continue;
          }
          int myHiddenAdj=hiddenAdj;
          if (myHiddenAdj > client.hiddenAdj) {
            if (client.hiddenAdj > FOREGROUND_APP_ADJ) {
              myHiddenAdj=client.hiddenAdj;
            }
 else {
              myHiddenAdj=FOREGROUND_APP_ADJ;
            }
          }
          int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP,true);
          if (adj > clientAdj) {
            adj=clientAdj > FOREGROUND_APP_ADJ ? clientAdj : FOREGROUND_APP_ADJ;
            if (!client.hidden) {
              app.hidden=false;
            }
            if (client.keeping) {
              app.keeping=true;
            }
            app.adjType=""String_Node_Str"";
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE;
            app.adjSource=client;
            app.adjTarget=cpr.name;
          }
          if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
            schedGroup=Process.THREAD_GROUP_DEFAULT;
          }
        }
      }
      if (cpr.externals != 0) {
        if (adj > FOREGROUND_APP_ADJ) {
          adj=FOREGROUND_APP_ADJ;
          schedGroup=Process.THREAD_GROUP_DEFAULT;
          app.hidden=false;
          app.keeping=true;
          app.adjType=""String_Node_Str"";
          app.adjTarget=cpr.name;
        }
      }
    }
  }
  app.curRawAdj=adj;
  if (adj > app.maxAdj) {
    adj=app.maxAdj;
    if (app.maxAdj <= PERCEPTIBLE_APP_ADJ) {
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
  }
  if (adj < HIDDEN_APP_MIN_ADJ) {
    app.keeping=true;
  }
  app.curAdj=adj;
  app.curSchedGroup=schedGroup;
  return adj;
}"
21856,"final void trimApplications(){
synchronized (this) {
    int i;
    for (i=mRemovedProcesses.size() - 1; i >= 0; i--) {
      final ProcessRecord app=mRemovedProcesses.get(i);
      if (app.activities.size() == 0 && app.curReceiver == null && app.services.size() == 0) {
        Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
        if (app.pid > 0 && app.pid != MY_PID) {
          Process.killProcess(app.pid);
        }
 else {
          try {
            app.thread.scheduleExit();
          }
 catch (          Exception e) {
          }
        }
        cleanUpApplicationRecordLocked(app,false,-1);
        mRemovedProcesses.remove(i);
        if (app.persistent) {
          if (app.persistent) {
            addAppLocked(app.info);
          }
        }
      }
    }
    if (!updateOomAdjLocked()) {
      int numServiceProcs=0;
      for (i=mLruProcesses.size() - 1; i >= 0; i--) {
        final ProcessRecord app=mLruProcesses.get(i);
        if (app.persistent || app.services.size() != 0 || app.curReceiver != null || app.persistentActivities > 0) {
          if (localLOGV)           Slog.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.services);
          numServiceProcs++;
        }
      }
      int curMaxProcs=mProcessLimit;
      if (curMaxProcs <= 0)       curMaxProcs=MAX_PROCESSES;
      if (mAlwaysFinishActivities) {
        curMaxProcs=1;
      }
      curMaxProcs+=numServiceProcs;
      for (i=0; i < mLruProcesses.size() && mLruProcesses.size() > curMaxProcs; i++) {
        final ProcessRecord app=mLruProcesses.get(i);
        if (!app.persistent && app.activities.size() == 0 && app.curReceiver == null && app.services.size() == 0) {
          Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
          if (app.pid > 0 && app.pid != MY_PID) {
            Process.killProcess(app.pid);
          }
 else {
            try {
              app.thread.scheduleExit();
            }
 catch (            Exception e) {
            }
          }
          cleanUpApplicationRecordLocked(app,false,i);
          i--;
        }
      }
      if (Config.LOGV)       Slog.v(TAG,""String_Node_Str"" + mLruProcesses.size() + ""String_Node_Str""+ curMaxProcs+ ""String_Node_Str"");
      for (i=0; i < mLruProcesses.size() && mLruProcesses.size() > curMaxProcs; i++) {
        final ProcessRecord app=mLruProcesses.get(i);
        boolean canQuit=!app.persistent && app.curReceiver == null && app.services.size() == 0 && app.persistentActivities == 0;
        int NUMA=app.activities.size();
        int j;
        if (Config.LOGV)         Slog.v(TAG,""String_Node_Str"" + app.processName);
        for (j=0; j < NUMA && canQuit; j++) {
          ActivityRecord r=app.activities.get(j);
          if (Config.LOGV)           Slog.v(TAG,""String_Node_Str"" + r.intent.getComponent().flattenToShortString() + ""String_Node_Str""+ r.haveState+ ""String_Node_Str""+ r.visible);
          canQuit=(r.haveState || !r.stateNotNeeded) && !r.visible && r.stopped;
        }
        if (canQuit) {
          for (j=0; j < NUMA; j++) {
            ActivityRecord r=app.activities.get(j);
            if (!r.finishing) {
              r.stack.destroyActivityLocked(r,false);
            }
            r.resultTo=null;
          }
          Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
          if (app.pid > 0 && app.pid != MY_PID) {
            Process.killProcess(app.pid);
          }
 else {
            try {
              app.thread.scheduleExit();
            }
 catch (            Exception e) {
            }
          }
          cleanUpApplicationRecordLocked(app,false,i);
          i--;
        }
      }
    }
    int curMaxActivities=MAX_ACTIVITIES;
    if (mAlwaysFinishActivities) {
      curMaxActivities=1;
    }
    for (i=0; i < mMainStack.mLRUActivities.size() && mMainStack.mLRUActivities.size() > curMaxActivities; i++) {
      final ActivityRecord r=(ActivityRecord)mMainStack.mLRUActivities.get(i);
      if ((r.haveState || !r.stateNotNeeded) && !r.visible && r.stopped&& !r.persistent&& !r.finishing) {
        final int origSize=mMainStack.mLRUActivities.size();
        r.stack.destroyActivityLocked(r,true);
        if (origSize > mMainStack.mLRUActivities.size()) {
          i--;
        }
      }
    }
  }
}","final void trimApplications(){
synchronized (this) {
    int i;
    for (i=mRemovedProcesses.size() - 1; i >= 0; i--) {
      final ProcessRecord app=mRemovedProcesses.get(i);
      if (app.activities.size() == 0 && app.curReceiver == null && app.services.size() == 0) {
        Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
        if (app.pid > 0 && app.pid != MY_PID) {
          Process.killProcess(app.pid);
        }
 else {
          try {
            app.thread.scheduleExit();
          }
 catch (          Exception e) {
          }
        }
        cleanUpApplicationRecordLocked(app,false,-1);
        mRemovedProcesses.remove(i);
        if (app.persistent) {
          if (app.persistent) {
            addAppLocked(app.info);
          }
        }
      }
    }
    if (!updateOomAdjLocked()) {
      int numServiceProcs=0;
      for (i=mLruProcesses.size() - 1; i >= 0; i--) {
        final ProcessRecord app=mLruProcesses.get(i);
        if (app.persistent || app.services.size() != 0 || app.curReceiver != null) {
          if (localLOGV)           Slog.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.services);
          numServiceProcs++;
        }
      }
      int curMaxProcs=mProcessLimit;
      if (curMaxProcs <= 0)       curMaxProcs=MAX_PROCESSES;
      if (mAlwaysFinishActivities) {
        curMaxProcs=1;
      }
      curMaxProcs+=numServiceProcs;
      for (i=0; i < mLruProcesses.size() && mLruProcesses.size() > curMaxProcs; i++) {
        final ProcessRecord app=mLruProcesses.get(i);
        if (!app.persistent && app.activities.size() == 0 && app.curReceiver == null && app.services.size() == 0) {
          Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
          if (app.pid > 0 && app.pid != MY_PID) {
            Process.killProcess(app.pid);
          }
 else {
            try {
              app.thread.scheduleExit();
            }
 catch (            Exception e) {
            }
          }
          cleanUpApplicationRecordLocked(app,false,i);
          i--;
        }
      }
      if (Config.LOGV)       Slog.v(TAG,""String_Node_Str"" + mLruProcesses.size() + ""String_Node_Str""+ curMaxProcs+ ""String_Node_Str"");
      for (i=0; i < mLruProcesses.size() && mLruProcesses.size() > curMaxProcs; i++) {
        final ProcessRecord app=mLruProcesses.get(i);
        boolean canQuit=!app.persistent && app.curReceiver == null && app.services.size() == 0;
        int NUMA=app.activities.size();
        int j;
        if (Config.LOGV)         Slog.v(TAG,""String_Node_Str"" + app.processName);
        for (j=0; j < NUMA && canQuit; j++) {
          ActivityRecord r=app.activities.get(j);
          if (Config.LOGV)           Slog.v(TAG,""String_Node_Str"" + r.intent.getComponent().flattenToShortString() + ""String_Node_Str""+ r.haveState+ ""String_Node_Str""+ r.visible);
          canQuit=(r.haveState || !r.stateNotNeeded) && !r.visible && r.stopped;
        }
        if (canQuit) {
          for (j=0; j < NUMA; j++) {
            ActivityRecord r=app.activities.get(j);
            if (!r.finishing) {
              r.stack.destroyActivityLocked(r,false);
            }
            r.resultTo=null;
          }
          Slog.i(TAG,""String_Node_Str"" + app.processName + ""String_Node_Str""+ (app.thread != null ? app.thread.asBinder() : null)+ ""String_Node_Str"");
          if (app.pid > 0 && app.pid != MY_PID) {
            Process.killProcess(app.pid);
          }
 else {
            try {
              app.thread.scheduleExit();
            }
 catch (            Exception e) {
            }
          }
          cleanUpApplicationRecordLocked(app,false,i);
          i--;
        }
      }
    }
    int curMaxActivities=MAX_ACTIVITIES;
    if (mAlwaysFinishActivities) {
      curMaxActivities=1;
    }
    for (i=0; i < mMainStack.mLRUActivities.size() && mMainStack.mLRUActivities.size() > curMaxActivities; i++) {
      final ActivityRecord r=(ActivityRecord)mMainStack.mLRUActivities.get(i);
      if ((r.haveState || !r.stateNotNeeded) && !r.visible && r.stopped&& !r.finishing) {
        final int origSize=mMainStack.mLRUActivities.size();
        r.stack.destroyActivityLocked(r,true);
        if (origSize > mMainStack.mLRUActivities.size()) {
          i--;
        }
      }
    }
  }
}"
21857,"ActivityRecord(ActivityManagerService _service,ActivityStack _stack,ProcessRecord _caller,int _launchedFromUid,Intent _intent,String _resolvedType,ActivityInfo aInfo,Configuration _configuration,ActivityRecord _resultTo,String _resultWho,int _reqCode,boolean _componentSpecified){
  service=_service;
  stack=_stack;
  info=aInfo;
  launchedFromUid=_launchedFromUid;
  intent=_intent;
  shortComponentName=_intent.getComponent().flattenToShortString();
  resolvedType=_resolvedType;
  componentSpecified=_componentSpecified;
  configuration=_configuration;
  resultTo=_resultTo;
  resultWho=_resultWho;
  requestCode=_reqCode;
  state=ActivityState.INITIALIZING;
  frontOfTask=false;
  launchFailed=false;
  haveState=false;
  stopped=false;
  delayedResume=false;
  finishing=false;
  configDestroy=false;
  keysPaused=false;
  inHistory=false;
  persistent=false;
  visible=true;
  waitingVisible=false;
  nowVisible=false;
  thumbnailNeeded=false;
  idle=false;
  hasBeenLaunched=false;
  if (aInfo != null) {
    if (aInfo.targetActivity == null || aInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE || aInfo.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {
      realActivity=_intent.getComponent();
    }
 else {
      realActivity=new ComponentName(aInfo.packageName,aInfo.targetActivity);
    }
    taskAffinity=aInfo.taskAffinity;
    stateNotNeeded=(aInfo.flags & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0;
    baseDir=aInfo.applicationInfo.sourceDir;
    resDir=aInfo.applicationInfo.publicSourceDir;
    dataDir=aInfo.applicationInfo.dataDir;
    nonLocalizedLabel=aInfo.nonLocalizedLabel;
    labelRes=aInfo.labelRes;
    if (nonLocalizedLabel == null && labelRes == 0) {
      ApplicationInfo app=aInfo.applicationInfo;
      nonLocalizedLabel=app.nonLocalizedLabel;
      labelRes=app.labelRes;
    }
    icon=aInfo.getIconResource();
    theme=aInfo.getThemeResource();
    if ((aInfo.flags & ActivityInfo.FLAG_MULTIPROCESS) != 0 && _caller != null && (aInfo.applicationInfo.uid == Process.SYSTEM_UID || aInfo.applicationInfo.uid == _caller.info.uid)) {
      processName=_caller.processName;
    }
 else {
      processName=aInfo.processName;
    }
    if (intent != null && (aInfo.flags & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
    packageName=aInfo.applicationInfo.packageName;
    launchMode=aInfo.launchMode;
    AttributeCache.Entry ent=AttributeCache.instance().get(packageName,theme != 0 ? theme : android.R.style.Theme,com.android.internal.R.styleable.Window);
    fullscreen=ent != null && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false) && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false);
    if (!_componentSpecified || _launchedFromUid == Process.myUid() || _launchedFromUid == 0) {
      if (Intent.ACTION_MAIN.equals(_intent.getAction()) && _intent.hasCategory(Intent.CATEGORY_HOME) && _intent.getCategories().size() == 1 && _intent.getData() == null && _intent.getType() == null && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 && !""String_Node_Str"".equals(realActivity.getClassName())) {
        isHomeActivity=true;
      }
 else {
        isHomeActivity=false;
      }
    }
 else {
      isHomeActivity=false;
    }
  }
 else {
    realActivity=null;
    taskAffinity=null;
    stateNotNeeded=false;
    baseDir=null;
    resDir=null;
    dataDir=null;
    processName=null;
    packageName=null;
    fullscreen=true;
    isHomeActivity=false;
  }
}","ActivityRecord(ActivityManagerService _service,ActivityStack _stack,ProcessRecord _caller,int _launchedFromUid,Intent _intent,String _resolvedType,ActivityInfo aInfo,Configuration _configuration,ActivityRecord _resultTo,String _resultWho,int _reqCode,boolean _componentSpecified){
  service=_service;
  stack=_stack;
  info=aInfo;
  launchedFromUid=_launchedFromUid;
  intent=_intent;
  shortComponentName=_intent.getComponent().flattenToShortString();
  resolvedType=_resolvedType;
  componentSpecified=_componentSpecified;
  configuration=_configuration;
  resultTo=_resultTo;
  resultWho=_resultWho;
  requestCode=_reqCode;
  state=ActivityState.INITIALIZING;
  frontOfTask=false;
  launchFailed=false;
  haveState=false;
  stopped=false;
  delayedResume=false;
  finishing=false;
  configDestroy=false;
  keysPaused=false;
  inHistory=false;
  visible=true;
  waitingVisible=false;
  nowVisible=false;
  thumbnailNeeded=false;
  idle=false;
  hasBeenLaunched=false;
  if (aInfo != null) {
    if (aInfo.targetActivity == null || aInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE || aInfo.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {
      realActivity=_intent.getComponent();
    }
 else {
      realActivity=new ComponentName(aInfo.packageName,aInfo.targetActivity);
    }
    taskAffinity=aInfo.taskAffinity;
    stateNotNeeded=(aInfo.flags & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0;
    baseDir=aInfo.applicationInfo.sourceDir;
    resDir=aInfo.applicationInfo.publicSourceDir;
    dataDir=aInfo.applicationInfo.dataDir;
    nonLocalizedLabel=aInfo.nonLocalizedLabel;
    labelRes=aInfo.labelRes;
    if (nonLocalizedLabel == null && labelRes == 0) {
      ApplicationInfo app=aInfo.applicationInfo;
      nonLocalizedLabel=app.nonLocalizedLabel;
      labelRes=app.labelRes;
    }
    icon=aInfo.getIconResource();
    theme=aInfo.getThemeResource();
    if ((aInfo.flags & ActivityInfo.FLAG_MULTIPROCESS) != 0 && _caller != null && (aInfo.applicationInfo.uid == Process.SYSTEM_UID || aInfo.applicationInfo.uid == _caller.info.uid)) {
      processName=_caller.processName;
    }
 else {
      processName=aInfo.processName;
    }
    if (intent != null && (aInfo.flags & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
    packageName=aInfo.applicationInfo.packageName;
    launchMode=aInfo.launchMode;
    AttributeCache.Entry ent=AttributeCache.instance().get(packageName,theme != 0 ? theme : android.R.style.Theme,com.android.internal.R.styleable.Window);
    fullscreen=ent != null && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false) && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false);
    if (!_componentSpecified || _launchedFromUid == Process.myUid() || _launchedFromUid == 0) {
      if (Intent.ACTION_MAIN.equals(_intent.getAction()) && _intent.hasCategory(Intent.CATEGORY_HOME) && _intent.getCategories().size() == 1 && _intent.getData() == null && _intent.getType() == null && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 && !""String_Node_Str"".equals(realActivity.getClassName())) {
        isHomeActivity=true;
      }
 else {
        isHomeActivity=false;
      }
    }
 else {
      isHomeActivity=false;
    }
  }
 else {
    realActivity=null;
    taskAffinity=null;
    stateNotNeeded=false;
    baseDir=null;
    resDir=null;
    dataDir=null;
    processName=null;
    packageName=null;
    fullscreen=true;
    isHomeActivity=false;
  }
}"
21858,"void dump(PrintWriter pw,String prefix){
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(packageName);
  pw.print(""String_Node_Str"");
  pw.println(processName);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchedFromUid);
  pw.print(""String_Node_Str"");
  pw.println(app);
  pw.print(prefix);
  pw.println(intent);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(frontOfTask);
  pw.print(""String_Node_Str"");
  pw.println(task);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(taskAffinity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(realActivity.flattenToShortString());
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(baseDir);
  if (!resDir.equals(baseDir))   pw.print(""String_Node_Str"");
  pw.print(resDir);
  pw.print(""String_Node_Str"");
  pw.println(dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(labelRes));
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(icon));
  pw.print(""String_Node_Str"");
  pw.println(Integer.toHexString(theme));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(stateNotNeeded);
  pw.print(""String_Node_Str"");
  pw.print(componentSpecified);
  pw.print(""String_Node_Str"");
  pw.println(isHomeActivity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(configuration);
  if (resultTo != null || resultWho != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultWho);
    pw.print(""String_Node_Str"");
    pw.println(requestCode);
  }
  if (results != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(results);
  }
  if (pendingResults != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pendingResults);
  }
  if (uriPermissions != null) {
    if (uriPermissions.readUriPermissions != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(uriPermissions.readUriPermissions);
    }
    if (uriPermissions.writeUriPermissions != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(uriPermissions.writeUriPermissions);
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchFailed);
  pw.print(""String_Node_Str"");
  pw.print(haveState);
  pw.print(""String_Node_Str"");
  pw.println(icicle);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(state);
  pw.print(""String_Node_Str"");
  pw.print(stopped);
  pw.print(""String_Node_Str"");
  pw.print(delayedResume);
  pw.print(""String_Node_Str"");
  pw.println(finishing);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(keysPaused);
  pw.print(""String_Node_Str"");
  pw.print(inHistory);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.println(launchMode);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(fullscreen);
  pw.print(""String_Node_Str"");
  pw.print(visible);
  pw.print(""String_Node_Str"");
  pw.print(frozenBeforeDestroy);
  pw.print(""String_Node_Str"");
  pw.print(thumbnailNeeded);
  pw.print(""String_Node_Str"");
  pw.println(idle);
  if (launchTime != 0 || startTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(launchTime,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(startTime,pw);
    pw.println(""String_Node_Str"");
  }
  if (waitingVisible || nowVisible) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(waitingVisible);
    pw.print(""String_Node_Str"");
    pw.println(nowVisible);
  }
  if (configDestroy || configChangeFlags != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(configDestroy);
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(configChangeFlags));
  }
  if (connections != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
}","void dump(PrintWriter pw,String prefix){
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(packageName);
  pw.print(""String_Node_Str"");
  pw.println(processName);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchedFromUid);
  pw.print(""String_Node_Str"");
  pw.println(app);
  pw.print(prefix);
  pw.println(intent);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(frontOfTask);
  pw.print(""String_Node_Str"");
  pw.println(task);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(taskAffinity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(realActivity.flattenToShortString());
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(baseDir);
  if (!resDir.equals(baseDir))   pw.print(""String_Node_Str"");
  pw.print(resDir);
  pw.print(""String_Node_Str"");
  pw.println(dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(labelRes));
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(icon));
  pw.print(""String_Node_Str"");
  pw.println(Integer.toHexString(theme));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(stateNotNeeded);
  pw.print(""String_Node_Str"");
  pw.print(componentSpecified);
  pw.print(""String_Node_Str"");
  pw.println(isHomeActivity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(configuration);
  if (resultTo != null || resultWho != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultWho);
    pw.print(""String_Node_Str"");
    pw.println(requestCode);
  }
  if (results != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(results);
  }
  if (pendingResults != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pendingResults);
  }
  if (uriPermissions != null) {
    if (uriPermissions.readUriPermissions != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(uriPermissions.readUriPermissions);
    }
    if (uriPermissions.writeUriPermissions != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(uriPermissions.writeUriPermissions);
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchFailed);
  pw.print(""String_Node_Str"");
  pw.print(haveState);
  pw.print(""String_Node_Str"");
  pw.println(icicle);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(state);
  pw.print(""String_Node_Str"");
  pw.print(stopped);
  pw.print(""String_Node_Str"");
  pw.print(delayedResume);
  pw.print(""String_Node_Str"");
  pw.println(finishing);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(keysPaused);
  pw.print(""String_Node_Str"");
  pw.print(inHistory);
  pw.print(""String_Node_Str"");
  pw.println(launchMode);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(fullscreen);
  pw.print(""String_Node_Str"");
  pw.print(visible);
  pw.print(""String_Node_Str"");
  pw.print(frozenBeforeDestroy);
  pw.print(""String_Node_Str"");
  pw.print(thumbnailNeeded);
  pw.print(""String_Node_Str"");
  pw.println(idle);
  if (launchTime != 0 || startTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(launchTime,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(startTime,pw);
    pw.println(""String_Node_Str"");
  }
  if (waitingVisible || nowVisible) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(waitingVisible);
    pw.print(""String_Node_Str"");
    pw.println(nowVisible);
  }
  if (configDestroy || configChangeFlags != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(configDestroy);
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(configChangeFlags));
  }
  if (connections != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
}"
21859,"/** 
 * Make sure the given activity matches the current configuration.  Returns false if the activity had to be destroyed.  Returns true if the configuration is the same, or the activity will remain running as-is for whatever reason.  Ensures the HistoryRecord is updated with the correct configuration and all other bookkeeping is handled.
 */
final boolean ensureActivityConfigurationLocked(ActivityRecord r,int globalChanges){
  if (mConfigWillChange) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG,""String_Node_Str"" + r);
  Configuration newConfig=mService.mConfiguration;
  if (r.configuration == newConfig) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    return true;
  }
  if (r.finishing) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  Configuration oldConfig=r.configuration;
  r.configuration=newConfig;
  if (r.app == null || r.app.thread == null) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  if (!r.persistent) {
    int changes=oldConfig.diff(newConfig);
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION) {
      Slog.v(TAG,""String_Node_Str"" + r.info.name + ""String_Node_Str""+ Integer.toHexString(changes)+ ""String_Node_Str""+ Integer.toHexString(r.info.configChanges)+ ""String_Node_Str""+ newConfig);
    }
    if ((changes & (~r.info.configChanges)) != 0) {
      r.configChangeFlags|=changes;
      r.startFreezingScreenLocked(r.app,globalChanges);
      if (r.app == null || r.app.thread == null) {
        if (DEBUG_SWITCH || DEBUG_CONFIGURATION)         Slog.v(TAG,""String_Node_Str"" + r);
        destroyActivityLocked(r,true);
      }
 else       if (r.state == ActivityState.PAUSING) {
        if (DEBUG_SWITCH || DEBUG_CONFIGURATION)         Slog.v(TAG,""String_Node_Str"" + r);
        r.configDestroy=true;
        return true;
      }
 else       if (r.state == ActivityState.RESUMED) {
        if (DEBUG_SWITCH || DEBUG_CONFIGURATION)         Slog.v(TAG,""String_Node_Str"" + r);
        relaunchActivityLocked(r,r.configChangeFlags,true);
        r.configChangeFlags=0;
      }
 else {
        if (DEBUG_SWITCH || DEBUG_CONFIGURATION)         Slog.v(TAG,""String_Node_Str"" + r);
        relaunchActivityLocked(r,r.configChangeFlags,false);
        r.configChangeFlags=0;
      }
      return false;
    }
  }
  if (r.app != null && r.app.thread != null) {
    try {
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      r.app.thread.scheduleActivityConfigurationChanged(r);
    }
 catch (    RemoteException e) {
    }
  }
  r.stopFreezingScreenLocked(false);
  return true;
}","/** 
 * Make sure the given activity matches the current configuration.  Returns false if the activity had to be destroyed.  Returns true if the configuration is the same, or the activity will remain running as-is for whatever reason.  Ensures the HistoryRecord is updated with the correct configuration and all other bookkeeping is handled.
 */
final boolean ensureActivityConfigurationLocked(ActivityRecord r,int globalChanges){
  if (mConfigWillChange) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG,""String_Node_Str"" + r);
  Configuration newConfig=mService.mConfiguration;
  if (r.configuration == newConfig) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    return true;
  }
  if (r.finishing) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  Configuration oldConfig=r.configuration;
  r.configuration=newConfig;
  if (r.app == null || r.app.thread == null) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  int changes=oldConfig.diff(newConfig);
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION) {
    Slog.v(TAG,""String_Node_Str"" + r.info.name + ""String_Node_Str""+ Integer.toHexString(changes)+ ""String_Node_Str""+ Integer.toHexString(r.info.configChanges)+ ""String_Node_Str""+ newConfig);
  }
  if ((changes & (~r.info.configChanges)) != 0) {
    r.configChangeFlags|=changes;
    r.startFreezingScreenLocked(r.app,globalChanges);
    if (r.app == null || r.app.thread == null) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      destroyActivityLocked(r,true);
    }
 else     if (r.state == ActivityState.PAUSING) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      r.configDestroy=true;
      return true;
    }
 else     if (r.state == ActivityState.RESUMED) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      relaunchActivityLocked(r,r.configChangeFlags,true);
      r.configChangeFlags=0;
    }
 else {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      relaunchActivityLocked(r,r.configChangeFlags,false);
      r.configChangeFlags=0;
    }
    return false;
  }
  if (r.app != null && r.app.thread != null) {
    try {
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,""String_Node_Str"" + r);
      r.app.thread.scheduleActivityConfigurationChanged(r);
    }
 catch (    RemoteException e) {
    }
  }
  r.stopFreezingScreenLocked(false);
  return true;
}"
21860,"/** 
 * Destroy the current CLIENT SIDE instance of an activity.  This may be called both when actually finishing an activity, or when performing a configuration switch where we destroy the current client-side object but then create a new client-side object for this same HistoryRecord.
 */
final boolean destroyActivityLocked(ActivityRecord r,boolean removeFromApp){
  if (DEBUG_SWITCH)   Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ (r.app != null ? r.app.processName : ""String_Node_Str""));
  EventLog.writeEvent(EventLogTags.AM_DESTROY_ACTIVITY,System.identityHashCode(r),r.task.taskId,r.shortComponentName);
  boolean removedFromHistory=false;
  cleanUpActivityLocked(r,false);
  final boolean hadApp=r.app != null;
  if (hadApp) {
    if (removeFromApp) {
      int idx=r.app.activities.indexOf(r);
      if (idx >= 0) {
        r.app.activities.remove(idx);
      }
      if (mService.mHeavyWeightProcess == r.app && r.app.activities.size() <= 0) {
        mService.mHeavyWeightProcess=null;
        mService.mHandler.sendEmptyMessage(ActivityManagerService.CANCEL_HEAVY_NOTIFICATION_MSG);
      }
      if (r.persistent) {
        mService.decPersistentCountLocked(r.app);
      }
      if (r.app.activities.size() == 0) {
        mService.updateLruProcessLocked(r.app,true,false);
      }
    }
    boolean skipDestroy=false;
    try {
      if (DEBUG_SWITCH)       Slog.i(TAG,""String_Node_Str"" + r);
      r.app.thread.scheduleDestroyActivity(r,r.finishing,r.configChangeFlags);
    }
 catch (    Exception e) {
      if (r.finishing) {
        removeActivityFromHistoryLocked(r);
        removedFromHistory=true;
        skipDestroy=true;
      }
    }
    r.app=null;
    r.nowVisible=false;
    if (r.finishing && !skipDestroy) {
      r.state=ActivityState.DESTROYING;
      Message msg=mHandler.obtainMessage(DESTROY_TIMEOUT_MSG);
      msg.obj=r;
      mHandler.sendMessageDelayed(msg,DESTROY_TIMEOUT);
    }
 else {
      r.state=ActivityState.DESTROYED;
    }
  }
 else {
    if (r.finishing) {
      removeActivityFromHistoryLocked(r);
      removedFromHistory=true;
    }
 else {
      r.state=ActivityState.DESTROYED;
    }
  }
  r.configChangeFlags=0;
  if (!mLRUActivities.remove(r) && hadApp) {
    Slog.w(TAG,""String_Node_Str"" + r + ""String_Node_Str"");
  }
  return removedFromHistory;
}","/** 
 * Destroy the current CLIENT SIDE instance of an activity.  This may be called both when actually finishing an activity, or when performing a configuration switch where we destroy the current client-side object but then create a new client-side object for this same HistoryRecord.
 */
final boolean destroyActivityLocked(ActivityRecord r,boolean removeFromApp){
  if (DEBUG_SWITCH)   Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ (r.app != null ? r.app.processName : ""String_Node_Str""));
  EventLog.writeEvent(EventLogTags.AM_DESTROY_ACTIVITY,System.identityHashCode(r),r.task.taskId,r.shortComponentName);
  boolean removedFromHistory=false;
  cleanUpActivityLocked(r,false);
  final boolean hadApp=r.app != null;
  if (hadApp) {
    if (removeFromApp) {
      int idx=r.app.activities.indexOf(r);
      if (idx >= 0) {
        r.app.activities.remove(idx);
      }
      if (mService.mHeavyWeightProcess == r.app && r.app.activities.size() <= 0) {
        mService.mHeavyWeightProcess=null;
        mService.mHandler.sendEmptyMessage(ActivityManagerService.CANCEL_HEAVY_NOTIFICATION_MSG);
      }
      if (r.app.activities.size() == 0) {
        mService.updateLruProcessLocked(r.app,true,false);
      }
    }
    boolean skipDestroy=false;
    try {
      if (DEBUG_SWITCH)       Slog.i(TAG,""String_Node_Str"" + r);
      r.app.thread.scheduleDestroyActivity(r,r.finishing,r.configChangeFlags);
    }
 catch (    Exception e) {
      if (r.finishing) {
        removeActivityFromHistoryLocked(r);
        removedFromHistory=true;
        skipDestroy=true;
      }
    }
    r.app=null;
    r.nowVisible=false;
    if (r.finishing && !skipDestroy) {
      r.state=ActivityState.DESTROYING;
      Message msg=mHandler.obtainMessage(DESTROY_TIMEOUT_MSG);
      msg.obj=r;
      mHandler.sendMessageDelayed(msg,DESTROY_TIMEOUT);
    }
 else {
      r.state=ActivityState.DESTROYED;
    }
  }
 else {
    if (r.finishing) {
      removeActivityFromHistoryLocked(r);
      removedFromHistory=true;
    }
 else {
      r.state=ActivityState.DESTROYED;
    }
  }
  r.configChangeFlags=0;
  if (!mLRUActivities.remove(r) && hadApp) {
    Slog.w(TAG,""String_Node_Str"" + r + ""String_Node_Str"");
  }
  return removedFromHistory;
}"
21861,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(pkgList);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(thread);
  pw.print(""String_Node_Str"");
  pw.println(curReceiver);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.print(starting);
  pw.print(""String_Node_Str"");
  pw.println(lastPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  pw.print(lruWeight);
  pw.print(""String_Node_Str"");
  pw.print(keeping);
  pw.print(""String_Node_Str"");
  pw.print(hidden);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(hiddenAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.println(setSchedGroup);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(setIsForeground);
  pw.print(""String_Node_Str"");
  pw.print(foregroundServices);
  pw.print(""String_Node_Str"");
  pw.println(forcingToForeground);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.print(removed);
  pw.print(""String_Node_Str"");
  pw.println(persistentActivities);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.println(lruSeq);
  if (!keeping) {
    long wtime;
synchronized (batteryStats.getBatteryStats()) {
      wtime=batteryStats.getBatteryStats().getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    long timeUsed=wtime - lastWakeTime;
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(timeUsed,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killedBackground) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(killedBackground);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(activities);
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(services);
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(executingServices);
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pubProviders);
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(conProviders);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(receivers);
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(pkgList);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(thread);
  pw.print(""String_Node_Str"");
  pw.println(curReceiver);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.print(starting);
  pw.print(""String_Node_Str"");
  pw.println(lastPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  pw.print(lruWeight);
  pw.print(""String_Node_Str"");
  pw.print(keeping);
  pw.print(""String_Node_Str"");
  pw.print(hidden);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(hiddenAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.println(setSchedGroup);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(setIsForeground);
  pw.print(""String_Node_Str"");
  pw.print(foregroundServices);
  pw.print(""String_Node_Str"");
  pw.println(forcingToForeground);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.println(removed);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.println(lruSeq);
  if (!keeping) {
    long wtime;
synchronized (batteryStats.getBatteryStats()) {
      wtime=batteryStats.getBatteryStats().getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    long timeUsed=wtime - lastWakeTime;
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(timeUsed,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killedBackground) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(killedBackground);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(activities);
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(services);
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(executingServices);
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pubProviders);
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(conProviders);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(receivers);
  }
}"
21862,"ProcessRecord(BatteryStatsImpl.Uid.Proc _batteryStats,IApplicationThread _thread,ApplicationInfo _info,String _processName){
  batteryStats=_batteryStats;
  info=_info;
  processName=_processName;
  pkgList.add(_info.packageName);
  thread=_thread;
  maxAdj=ActivityManagerService.EMPTY_APP_ADJ;
  hiddenAdj=ActivityManagerService.HIDDEN_APP_MIN_ADJ;
  curRawAdj=setRawAdj=-100;
  curAdj=setAdj=-100;
  persistent=false;
  removed=false;
  persistentActivities=0;
}","ProcessRecord(BatteryStatsImpl.Uid.Proc _batteryStats,IApplicationThread _thread,ApplicationInfo _info,String _processName){
  batteryStats=_batteryStats;
  info=_info;
  processName=_processName;
  pkgList.add(_info.packageName);
  thread=_thread;
  maxAdj=ActivityManagerService.EMPTY_APP_ADJ;
  hiddenAdj=ActivityManagerService.HIDDEN_APP_MIN_ADJ;
  curRawAdj=setRawAdj=-100;
  curAdj=setAdj=-100;
  persistent=false;
  removed=false;
}"
21863,"public HandleView(CursorController controller,Drawable handle){
  super(TextView.this.mContext);
  mController=controller;
  mDrawable=handle;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  mHotspotX=mDrawable.getIntrinsicWidth() * 0.5f;
  mHotspotY=-mDrawable.getIntrinsicHeight() * 0.2f;
}","public HandleView(CursorController controller,Drawable handle){
  super(TextView.this.mContext);
  mController=controller;
  mDrawable=handle;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  final int handleWidth=mDrawable.getIntrinsicWidth();
  final int handleHeight=mDrawable.getIntrinsicHeight();
  mHotspotX=handleWidth * 0.5f;
  mHotspotY=-handleHeight * 0.2f;
}"
21864,"private void moveTo(int x,int y){
  mPositionX=x - TextView.this.mScrollX;
  mPositionY=y - TextView.this.mScrollY;
  if (isPositionInBounds()) {
    if (mContainer.isShowing()) {
      final int[] coords=mTempCoords;
      TextView.this.getLocationInWindow(coords);
      coords[0]+=mPositionX;
      coords[1]+=mPositionY;
      mContainer.update(coords[0],coords[1],mRight - mLeft,mBottom - mTop);
    }
 else {
      show();
    }
  }
 else {
    hide();
  }
}","private void moveTo(int x,int y){
  mPositionX=x - TextView.this.mScrollX;
  mPositionY=y - TextView.this.mScrollY;
  if (isPositionVisible()) {
    int[] coords=null;
    if (mContainer.isShowing()) {
      coords=mTempCoords;
      TextView.this.getLocationInWindow(coords);
      mContainer.update(coords[0] + mPositionX,coords[1] + mPositionY,mRight - mLeft,mBottom - mTop);
    }
 else {
      show();
    }
    if (mIsDragging) {
      if (coords == null) {
        coords=mTempCoords;
        TextView.this.getLocationInWindow(coords);
      }
      if (coords[0] != mLastParentX || coords[1] != mLastParentY) {
        mOffsetX+=coords[0] - mLastParentX;
        mOffsetY+=coords[1] - mLastParentY;
        mLastParentX=coords[0];
        mLastParentY=coords[1];
      }
    }
  }
 else {
    hide();
  }
}"
21865,"private int getScrollRange(){
  int scrollRange=0;
  if (getChildCount() > 0) {
    View child=getChildAt(0);
    scrollRange=Math.max(0,child.getWidth() - getWidth() - mPaddingLeft- mPaddingRight);
  }
  return scrollRange;
}","private int getScrollRange(){
  int scrollRange=0;
  if (getChildCount() > 0) {
    View child=getChildAt(0);
    scrollRange=Math.max(0,child.getWidth() - (getWidth() - mPaddingLeft - mPaddingRight));
  }
  return scrollRange;
}"
21866,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      if (!(mIsBeingDragged=inChild((int)x,(int)ev.getY()))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToX=oldX + deltaX;
      if (pulledToX < 0) {
        mEdgeGlowLeft.onPull((float)deltaX / getWidth());
      }
 else       if (pulledToX > range) {
        mEdgeGlowRight.onPull((float)deltaX / getWidth());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int right=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,right,0,0)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      mIsBeingDragged=true;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToX=oldX + deltaX;
      if (pulledToX < 0) {
        mEdgeGlowLeft.onPull((float)deltaX / getWidth());
      }
 else       if (pulledToX > range) {
        mEdgeGlowRight.onPull((float)deltaX / getWidth());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int right=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,right,0,0)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
21867,"private int getScrollRange(){
  int scrollRange=0;
  if (getChildCount() > 0) {
    View child=getChildAt(0);
    scrollRange=Math.max(0,child.getHeight() - getHeight() - mPaddingBottom- mPaddingTop);
  }
  return scrollRange;
}","private int getScrollRange(){
  int scrollRange=0;
  if (getChildCount() > 0) {
    View child=getChildAt(0);
    scrollRange=Math.max(0,child.getHeight() - (getHeight() - mPaddingBottom - mPaddingTop));
  }
  return scrollRange;
}"
21868,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float y=ev.getY();
      if (!(mIsBeingDragged=inChild((int)ev.getX(),(int)y))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(0,deltaY,0,mScrollY,0,range,0,mOverscrollDistance,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToY=oldY + deltaY;
      if (pulledToY < 0) {
        mEdgeGlowTop.onPull((float)deltaY / getHeight());
      }
 else       if (pulledToY > range) {
        mEdgeGlowBottom.onPull((float)deltaY / getHeight());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int bottom=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,0,0,bottom)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,0,0,getScrollRange())) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float y=ev.getY();
      mIsBeingDragged=true;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(0,deltaY,0,mScrollY,0,range,0,mOverscrollDistance,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToY=oldY + deltaY;
      if (pulledToY < 0) {
        mEdgeGlowTop.onPull((float)deltaY / getHeight());
      }
 else       if (pulledToY > range) {
        mEdgeGlowBottom.onPull((float)deltaY / getHeight());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int bottom=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,0,0,bottom)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,0,0,getScrollRange())) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
21869,"private int getScrollRange(){
  int scrollRange=0;
  if (getChildCount() > 0) {
    View child=getChildAt(0);
    scrollRange=Math.max(0,child.getWidth() - getWidth() - mPaddingLeft- mPaddingRight);
  }
  return scrollRange;
}","private int getScrollRange(){
  int scrollRange=0;
  if (getChildCount() > 0) {
    View child=getChildAt(0);
    scrollRange=Math.max(0,child.getWidth() - (getWidth() - mPaddingLeft - mPaddingRight));
  }
  return scrollRange;
}"
21870,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      if (!(mIsBeingDragged=inChild((int)x,(int)ev.getY()))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToX=oldX + deltaX;
      if (pulledToX < 0) {
        mEdgeGlowLeft.onPull((float)deltaX / getWidth());
      }
 else       if (pulledToX > range) {
        mEdgeGlowRight.onPull((float)deltaX / getWidth());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int right=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,right,0,0)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      mIsBeingDragged=true;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToX=oldX + deltaX;
      if (pulledToX < 0) {
        mEdgeGlowLeft.onPull((float)deltaX / getWidth());
      }
 else       if (pulledToX > range) {
        mEdgeGlowRight.onPull((float)deltaX / getWidth());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int right=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,right,0,0)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
21871,"private int getScrollRange(){
  int scrollRange=0;
  if (getChildCount() > 0) {
    View child=getChildAt(0);
    scrollRange=Math.max(0,child.getHeight() - getHeight() - mPaddingBottom- mPaddingTop);
  }
  return scrollRange;
}","private int getScrollRange(){
  int scrollRange=0;
  if (getChildCount() > 0) {
    View child=getChildAt(0);
    scrollRange=Math.max(0,child.getHeight() - (getHeight() - mPaddingBottom - mPaddingTop));
  }
  return scrollRange;
}"
21872,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float y=ev.getY();
      if (!(mIsBeingDragged=inChild((int)ev.getX(),(int)y))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(0,deltaY,0,mScrollY,0,range,0,mOverscrollDistance,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToY=oldY + deltaY;
      if (pulledToY < 0) {
        mEdgeGlowTop.onPull((float)deltaY / getHeight());
      }
 else       if (pulledToY > range) {
        mEdgeGlowBottom.onPull((float)deltaY / getHeight());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int bottom=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,0,0,bottom)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,0,0,getScrollRange())) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float y=ev.getY();
      mIsBeingDragged=true;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(0,deltaY,0,mScrollY,0,range,0,mOverscrollDistance,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToY=oldY + deltaY;
      if (pulledToY < 0) {
        mEdgeGlowTop.onPull((float)deltaY / getHeight());
      }
 else       if (pulledToY > range) {
        mEdgeGlowBottom.onPull((float)deltaY / getHeight());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int bottom=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,0,0,bottom)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,0,0,getScrollRange())) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
21873,"public HandleView(CursorController controller,Drawable handle){
  super(TextView.this.mContext);
  mController=controller;
  mDrawable=handle;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  mContainer.setLayoutInScreenEnabled(true);
}","public HandleView(CursorController controller,Drawable handle){
  super(TextView.this.mContext);
  mController=controller;
  mDrawable=handle;
  mContainer=new PopupWindow(TextView.this.mContext,null,com.android.internal.R.attr.textSelectHandleWindowStyle);
  mContainer.setSplitTouchEnabled(true);
  mContainer.setClippingEnabled(false);
  mHotspotX=mDrawable.getIntrinsicWidth() * 0.5f;
  mHotspotY=-mDrawable.getIntrinsicHeight() * 0.2f;
}"
21874,"private void moveTo(int x,int y){
  mPositionX=x - TextView.this.mScrollX;
  mPositionY=y - TextView.this.mScrollY;
  if (isPositionInBounds()) {
    if (mContainer.isShowing()) {
      final int[] coords=mTempCoords;
      TextView.this.getLocationOnScreen(coords);
      coords[0]+=mPositionX;
      coords[1]+=mPositionY;
      mContainer.update(coords[0],coords[1],mRight - mLeft,mBottom - mTop);
    }
 else {
      show();
    }
  }
 else {
    hide();
  }
}","private void moveTo(int x,int y){
  mPositionX=x - TextView.this.mScrollX;
  mPositionY=y - TextView.this.mScrollY;
  if (isPositionInBounds()) {
    if (mContainer.isShowing()) {
      final int[] coords=mTempCoords;
      TextView.this.getLocationInWindow(coords);
      coords[0]+=mPositionX;
      coords[1]+=mPositionY;
      mContainer.update(coords[0],coords[1],mRight - mLeft,mBottom - mTop);
    }
 else {
      show();
    }
  }
 else {
    hide();
  }
}"
21875,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  mTemporaryDetach=false;
  if (mShowErrorAfterAttach) {
    showError();
    mShowErrorAfterAttach=false;
  }
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  mTemporaryDetach=false;
  if (mShowErrorAfterAttach) {
    showError();
    mShowErrorAfterAttach=false;
  }
  final ViewTreeObserver observer=getViewTreeObserver();
  if (observer != null) {
    if (mInsertionPointCursorController != null) {
      observer.addOnTouchModeChangeListener(mInsertionPointCursorController);
    }
    if (mSelectionModifierCursorController != null) {
      observer.addOnTouchModeChangeListener(mSelectionModifierCursorController);
    }
  }
}"
21876,"@Override protected void onVisibilityChanged(View changedView,int visibility){
  super.onVisibilityChanged(changedView,visibility);
  if (visibility != VISIBLE) {
    hideControllers();
  }
}","@Override protected void onVisibilityChanged(View changedView,int visibility){
  super.onVisibilityChanged(changedView,visibility);
  if (visibility != VISIBLE) {
    hideInsertionPointCursorController();
    if (mSelectionModifierCursorController != null) {
      mSelectionModifierCursorController.hide();
    }
  }
}"
21877,"private void onTapUpEvent(int prevStart,int prevEnd){
  final int start=getSelectionStart();
  final int end=getSelectionEnd();
  if (start == end) {
    if (start >= prevStart && start < prevEnd) {
      Selection.setSelection((Spannable)mText,prevStart,prevEnd);
      showContextMenu();
      return;
    }
 else {
      stopTextSelectionMode();
      if (mInsertionPointCursorController != null) {
        mInsertionPointCursorController.show();
      }
    }
  }
}","private void onTapUpEvent(int prevStart,int prevEnd){
  final int start=getSelectionStart();
  final int end=getSelectionEnd();
  if (start == end) {
    if (start >= prevStart && start < prevEnd) {
      Selection.setSelection((Spannable)mText,prevStart,prevEnd);
      if (mSelectionModifierCursorController != null && !mSelectionModifierCursorController.isShowing()) {
        mSelectionModifierCursorController.show();
      }
 else {
        showContextMenu();
      }
      return;
    }
 else {
      stopTextSelectionMode();
      if (mInsertionPointCursorController != null) {
        mInsertionPointCursorController.show();
      }
    }
  }
 else   if (hasSelection() && mSelectionModifierCursorController != null) {
    mSelectionModifierCursorController.show();
  }
}"
21878,"public void show(){
  mIsShowing=true;
  updatePosition();
  mStartHandle.show();
  mEndHandle.show();
  hideInsertionPointCursorController();
}","public void show(){
  mIsShowing=true;
  updatePosition();
  mStartHandle.show();
  mEndHandle.show();
  hideInsertionPointCursorController();
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}"
21879,"private void hideDelayed(int msec){
  TextView.this.removeCallbacks(mHider);
  TextView.this.postDelayed(mHider,msec);
}","private void hideDelayed(int delay){
  removeCallbacks(mHider);
  postDelayed(mHider,delay);
}"
21880,"public void updatePosition(){
  final int selectionStart=getSelectionStart();
  final int selectionEnd=getSelectionEnd();
  if ((selectionStart < 0) || (selectionEnd < 0)) {
    Log.w(LOG_TAG,""String_Node_Str"");
    hide();
    return;
  }
  boolean oneLineSelection=mLayout.getLineForOffset(selectionStart) == mLayout.getLineForOffset(selectionEnd);
  mStartHandle.positionAtCursor(selectionStart,oneLineSelection);
  mEndHandle.positionAtCursor(selectionEnd,true);
}","public void updatePosition(){
  final int selectionStart=getSelectionStart();
  final int selectionEnd=getSelectionEnd();
  if ((selectionStart < 0) || (selectionEnd < 0)) {
    Log.w(LOG_TAG,""String_Node_Str"");
    hide();
    return;
  }
  boolean oneLineSelection=mLayout.getLineForOffset(selectionStart) == mLayout.getLineForOffset(selectionEnd);
  mStartHandle.positionAtCursor(selectionStart,oneLineSelection);
  mEndHandle.positionAtCursor(selectionEnd,true);
  hideDelayed(DELAY_BEFORE_FADE_OUT);
}"
21881,"public void hide(){
  mStartHandle.hide();
  mEndHandle.hide();
  mIsShowing=false;
}","public void hide(){
  mStartHandle.hide();
  mEndHandle.hide();
  mIsShowing=false;
  removeCallbacks(mHider);
}"
21882,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (hasWindowFocus) {
    if (mBlink != null) {
      mBlink.uncancel();
      if (isFocused()) {
        mShowCursor=SystemClock.uptimeMillis();
        makeBlink();
      }
    }
  }
 else {
    if (mBlink != null) {
      mBlink.cancel();
    }
    onEndBatchEdit();
    if (mInputContentType != null) {
      mInputContentType.enterDown=false;
    }
    hideControllers();
  }
  startStopMarquee(hasWindowFocus);
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (hasWindowFocus) {
    if (mBlink != null) {
      mBlink.uncancel();
      if (isFocused()) {
        mShowCursor=SystemClock.uptimeMillis();
        makeBlink();
      }
    }
  }
 else {
    if (mBlink != null) {
      mBlink.cancel();
    }
    onEndBatchEdit();
    if (mInputContentType != null) {
      mInputContentType.enterDown=false;
    }
    hideInsertionPointCursorController();
    if (mSelectionModifierCursorController != null) {
      mSelectionModifierCursorController.hide();
    }
  }
  startStopMarquee(hasWindowFocus);
}"
21883,"@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  if (mPreDrawState != PREDRAW_NOT_REGISTERED) {
    final ViewTreeObserver observer=getViewTreeObserver();
    if (observer != null) {
      observer.removeOnPreDrawListener(this);
      mPreDrawState=PREDRAW_NOT_REGISTERED;
    }
  }
  if (mError != null) {
    hideError();
  }
  hideControllers();
}","@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  final ViewTreeObserver observer=getViewTreeObserver();
  if (observer != null) {
    if (mPreDrawState != PREDRAW_NOT_REGISTERED) {
      observer.removeOnPreDrawListener(this);
      mPreDrawState=PREDRAW_NOT_REGISTERED;
    }
    if (mInsertionPointCursorController != null) {
      observer.removeOnTouchModeChangeListener(mInsertionPointCursorController);
    }
    if (mSelectionModifierCursorController != null) {
      observer.removeOnTouchModeChangeListener(mSelectionModifierCursorController);
    }
  }
  if (mError != null) {
    hideError();
  }
  hideControllers();
}"
21884,"@Override protected void onFocusChanged(boolean focused,int direction,Rect previouslyFocusedRect){
  if (mTemporaryDetach) {
    super.onFocusChanged(focused,direction,previouslyFocusedRect);
    return;
  }
  mShowCursor=SystemClock.uptimeMillis();
  ensureEndedBatchEdit();
  if (focused) {
    int selStart=getSelectionStart();
    int selEnd=getSelectionEnd();
    if (!mFrozenWithFocus || (selStart < 0 || selEnd < 0)) {
      if (mLastTouchOffset >= 0) {
        mLastTouchOffset=Math.min(mLastTouchOffset,mText.length());
        Selection.setSelection((Spannable)mText,mLastTouchOffset);
      }
      if (mMovement != null) {
        mMovement.onTakeFocus(this,(Spannable)mText,direction);
      }
      if (mSelectAllOnFocus) {
        Selection.setSelection((Spannable)mText,0,mText.length());
      }
      if (((this instanceof ExtractEditText) || mSelectionMoved) && selStart >= 0 && selEnd >= 0) {
        Selection.setSelection((Spannable)mText,selStart,selEnd);
      }
      mTouchFocusSelected=true;
    }
    mFrozenWithFocus=false;
    mSelectionMoved=false;
    if (mText instanceof Spannable) {
      Spannable sp=(Spannable)mText;
      MetaKeyKeyListener.resetMetaState(sp);
    }
    makeBlink();
    if (mError != null) {
      showError();
    }
  }
 else {
    if (mError != null) {
      hideError();
    }
    onEndBatchEdit();
    hideInsertionPointCursorController();
    if (this instanceof ExtractEditText) {
      mIsInTextSelectionMode=false;
    }
 else {
      terminateTextSelectionMode();
    }
  }
  startStopMarquee(focused);
  if (mTransformation != null) {
    mTransformation.onFocusChanged(this,mText,focused,direction,previouslyFocusedRect);
  }
  super.onFocusChanged(focused,direction,previouslyFocusedRect);
}","@Override protected void onFocusChanged(boolean focused,int direction,Rect previouslyFocusedRect){
  if (mTemporaryDetach) {
    super.onFocusChanged(focused,direction,previouslyFocusedRect);
    return;
  }
  mShowCursor=SystemClock.uptimeMillis();
  ensureEndedBatchEdit();
  if (focused) {
    int selStart=getSelectionStart();
    int selEnd=getSelectionEnd();
    if (!mFrozenWithFocus || (selStart < 0 || selEnd < 0)) {
      if (mLastTouchOffset >= 0) {
        mLastTouchOffset=Math.min(mLastTouchOffset,mText.length());
        Selection.setSelection((Spannable)mText,mLastTouchOffset);
      }
      if (mMovement != null) {
        mMovement.onTakeFocus(this,(Spannable)mText,direction);
      }
      if (mSelectAllOnFocus) {
        Selection.setSelection((Spannable)mText,0,mText.length());
      }
      if (((this instanceof ExtractEditText) || mSelectionMoved) && selStart >= 0 && selEnd >= 0) {
        Selection.setSelection((Spannable)mText,selStart,selEnd);
      }
      mTouchFocusSelected=true;
    }
    mFrozenWithFocus=false;
    mSelectionMoved=false;
    if (mText instanceof Spannable) {
      Spannable sp=(Spannable)mText;
      MetaKeyKeyListener.resetMetaState(sp);
    }
    makeBlink();
    if (mError != null) {
      showError();
    }
  }
 else {
    if (mError != null) {
      hideError();
    }
    onEndBatchEdit();
    hideInsertionPointCursorController();
    if (this instanceof ExtractEditText) {
      mIsInTextSelectionMode=false;
    }
 else {
      terminateTextSelectionMode();
    }
    mLastTouchOffset=-1;
  }
  startStopMarquee(focused);
  if (mTransformation != null) {
    mTransformation.onFocusChanged(this,mText,focused,direction,previouslyFocusedRect);
  }
  super.onFocusChanged(focused,direction,previouslyFocusedRect);
}"
21885,"@Override public boolean onKeyShortcut(int keyCode,KeyEvent event){
switch (keyCode) {
case KeyEvent.KEYCODE_A:
    if (canSelectAll()) {
      return onTextContextMenuItem(ID_SELECT_ALL);
    }
  break;
case KeyEvent.KEYCODE_X:
if (canCut()) {
  return onTextContextMenuItem(ID_CUT);
}
break;
case KeyEvent.KEYCODE_C:
if (canCopy()) {
return onTextContextMenuItem(ID_COPY);
}
break;
case KeyEvent.KEYCODE_V:
if (canPaste()) {
return onTextContextMenuItem(ID_PASTE);
}
break;
}
return super.onKeyShortcut(keyCode,event);
}","@Override public boolean onKeyShortcut(int keyCode,KeyEvent event){
switch (keyCode) {
case KeyEvent.KEYCODE_A:
    if (canSelectText()) {
      return onTextContextMenuItem(ID_SELECT_ALL);
    }
  break;
case KeyEvent.KEYCODE_X:
if (canCut()) {
  return onTextContextMenuItem(ID_CUT);
}
break;
case KeyEvent.KEYCODE_C:
if (canCopy()) {
return onTextContextMenuItem(ID_COPY);
}
break;
case KeyEvent.KEYCODE_V:
if (canPaste()) {
return onTextContextMenuItem(ID_PASTE);
}
break;
}
return super.onKeyShortcut(keyCode,event);
}"
21886,"private void prepareCursorControllers(){
  if (mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (canSelectText() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}","private void prepareCursorControllers(){
  if (mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (textCanBeSelected() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}"
21887,"private boolean canSelectText(){
  return (mText instanceof Spannable && mMovement != null && mMovement.canSelectArbitrarily());
}","private boolean canSelectText(){
  return textCanBeSelected() && mText.length() != 0;
}"
21888,"@Override protected void onCreateContextMenu(ContextMenu menu){
  super.onCreateContextMenu(menu);
  boolean added=false;
  if (mIsInTextSelectionMode) {
    MenuHandler handler=new MenuHandler();
    if (canCut()) {
      menu.add(0,ID_CUT,0,com.android.internal.R.string.cut).setOnMenuItemClickListener(handler).setAlphabeticShortcut('x');
      added=true;
    }
    if (canCopy()) {
      menu.add(0,ID_COPY,0,com.android.internal.R.string.copy).setOnMenuItemClickListener(handler).setAlphabeticShortcut('c');
      added=true;
    }
    if (canPaste()) {
      menu.add(0,ID_PASTE,0,com.android.internal.R.string.paste).setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
      added=true;
    }
  }
 else {
    MenuHandler handler=new MenuHandler();
    if (canSelectText()) {
      menu.add(0,ID_START_SELECTING_TEXT,0,com.android.internal.R.string.selectText).setOnMenuItemClickListener(handler);
      added=true;
    }
    if (canSelectAll()) {
      menu.add(0,ID_SELECT_ALL,0,com.android.internal.R.string.selectAll).setOnMenuItemClickListener(handler).setAlphabeticShortcut('a');
      added=true;
    }
    if (mText instanceof Spanned) {
      int selStart=getSelectionStart();
      int selEnd=getSelectionEnd();
      int min=Math.min(selStart,selEnd);
      int max=Math.max(selStart,selEnd);
      URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
      if (urls.length == 1) {
        menu.add(0,ID_COPY_URL,0,com.android.internal.R.string.copyUrl).setOnMenuItemClickListener(handler);
        added=true;
      }
    }
    if (canPaste() && textIsOnlySpaces()) {
      menu.add(0,ID_PASTE,0,com.android.internal.R.string.paste).setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
      added=true;
    }
    if (isInputMethodTarget()) {
      menu.add(1,ID_SWITCH_INPUT_METHOD,0,com.android.internal.R.string.inputMethod).setOnMenuItemClickListener(handler);
      added=true;
    }
    String word=getWordForDictionary();
    if (word != null) {
      menu.add(1,ID_ADD_TO_DICTIONARY,0,getContext().getString(com.android.internal.R.string.addToDictionary,word)).setOnMenuItemClickListener(handler);
      added=true;
    }
  }
  if (added) {
    menu.setHeaderTitle(com.android.internal.R.string.editTextMenuTitle);
  }
}","@Override protected void onCreateContextMenu(ContextMenu menu){
  super.onCreateContextMenu(menu);
  boolean added=false;
  if (mIsInTextSelectionMode) {
    MenuHandler handler=new MenuHandler();
    if (canCut()) {
      menu.add(0,ID_CUT,0,com.android.internal.R.string.cut).setOnMenuItemClickListener(handler).setAlphabeticShortcut('x');
      added=true;
    }
    if (canCopy()) {
      menu.add(0,ID_COPY,0,com.android.internal.R.string.copy).setOnMenuItemClickListener(handler).setAlphabeticShortcut('c');
      added=true;
    }
    if (canPaste()) {
      menu.add(0,ID_PASTE,0,com.android.internal.R.string.paste).setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
      added=true;
    }
  }
 else {
    MenuHandler handler=new MenuHandler();
    if (canSelectText()) {
      menu.add(0,ID_START_SELECTING_TEXT,0,com.android.internal.R.string.selectText).setOnMenuItemClickListener(handler);
      menu.add(0,ID_SELECT_ALL,0,com.android.internal.R.string.selectAll).setOnMenuItemClickListener(handler).setAlphabeticShortcut('a');
      added=true;
    }
    if (mText instanceof Spanned) {
      int selStart=getSelectionStart();
      int selEnd=getSelectionEnd();
      int min=Math.min(selStart,selEnd);
      int max=Math.max(selStart,selEnd);
      URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
      if (urls.length == 1) {
        menu.add(0,ID_COPY_URL,0,com.android.internal.R.string.copyUrl).setOnMenuItemClickListener(handler);
        added=true;
      }
    }
    if (canPaste()) {
      menu.add(0,ID_PASTE,0,com.android.internal.R.string.paste).setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
      added=true;
    }
    if (isInputMethodTarget()) {
      menu.add(1,ID_SWITCH_INPUT_METHOD,0,com.android.internal.R.string.inputMethod).setOnMenuItemClickListener(handler);
      added=true;
    }
    String word=getWordForDictionary();
    if (word != null) {
      menu.add(1,ID_ADD_TO_DICTIONARY,0,getContext().getString(com.android.internal.R.string.addToDictionary,word)).setOnMenuItemClickListener(handler);
      added=true;
    }
  }
  if (added) {
    menu.setHeaderTitle(com.android.internal.R.string.editTextMenuTitle);
  }
}"
21889,"public DatePicker(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.date_picker,this,true);
  mDayPicker=(NumberPicker)findViewById(R.id.day);
  mDayPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  mDayPicker.setSpeed(100);
  mDayPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mDay=newVal;
      notifyDateChanged();
    }
  }
);
  mMonthPicker=(NumberPicker)findViewById(R.id.month);
  mMonthPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  DateFormatSymbols dfs=new DateFormatSymbols();
  String[] months=dfs.getShortMonths();
  if (months[0].startsWith(""String_Node_Str"")) {
    for (int i=0; i < months.length; i++) {
      months[i]=String.valueOf(i + 1);
    }
  }
  mMonthPicker.setRange(1,12,months);
  mMonthPicker.setSpeed(200);
  mMonthPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mMonth=newVal - 1;
      adjustMaxDay();
      notifyDateChanged();
      updateDaySpinner();
    }
  }
);
  mYearPicker=(NumberPicker)findViewById(R.id.year);
  mYearPicker.setSpeed(100);
  mYearPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mYear=newVal;
      adjustMaxDay();
      notifyDateChanged();
      updateDaySpinner();
    }
  }
);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.DatePicker);
  int mStartYear=a.getInt(R.styleable.DatePicker_startYear,DEFAULT_START_YEAR);
  int mEndYear=a.getInt(R.styleable.DatePicker_endYear,DEFAULT_END_YEAR);
  mYearPicker.setRange(mStartYear,mEndYear);
  a.recycle();
  Calendar cal=Calendar.getInstance();
  init(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH),null);
  reorderPickers(months);
  if (!isEnabled()) {
    setEnabled(false);
  }
}","public DatePicker(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.date_picker,this,true);
  mDayPicker=(NumberPicker)findViewById(R.id.day);
  mDayPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  mDayPicker.setSpeed(100);
  mDayPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mDay=newVal;
      notifyDateChanged();
    }
  }
);
  mMonthPicker=(NumberPicker)findViewById(R.id.month);
  mMonthPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  DateFormatSymbols dfs=new DateFormatSymbols();
  String[] months=dfs.getShortMonths();
  if (months[0].startsWith(""String_Node_Str"")) {
    for (int i=0; i < months.length; i++) {
      months[i]=String.valueOf(i + 1);
    }
    mMonthPicker.setRange(1,12);
  }
 else {
    mMonthPicker.setRange(1,12,months);
  }
  mMonthPicker.setSpeed(200);
  mMonthPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mMonth=newVal - 1;
      adjustMaxDay();
      notifyDateChanged();
      updateDaySpinner();
    }
  }
);
  mYearPicker=(NumberPicker)findViewById(R.id.year);
  mYearPicker.setSpeed(100);
  mYearPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mYear=newVal;
      adjustMaxDay();
      notifyDateChanged();
      updateDaySpinner();
    }
  }
);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.DatePicker);
  int mStartYear=a.getInt(R.styleable.DatePicker_startYear,DEFAULT_START_YEAR);
  int mEndYear=a.getInt(R.styleable.DatePicker_endYear,DEFAULT_END_YEAR);
  mYearPicker.setRange(mStartYear,mEndYear);
  a.recycle();
  Calendar cal=Calendar.getInstance();
  init(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH),null);
  reorderPickers(months);
  if (!isEnabled()) {
    setEnabled(false);
  }
}"
21890,"/** 
 * Set the range of numbers allowed for the number picker. The current value will be automatically set to the start. Also provide a mapping for values used to display to the user.
 * @param start the start of the range (inclusive)
 * @param end the end of the range (inclusive)
 * @param displayedValues the values displayed to the user.
 */
public void setRange(int start,int end,String[] displayedValues){
  mDisplayedValues=displayedValues;
  mStart=start;
  mEnd=end;
  mCurrent=start;
  updateView();
}","/** 
 * Set the range of numbers allowed for the number picker. The current value will be automatically set to the start. Also provide a mapping for values used to display to the user.
 * @param start the start of the range (inclusive)
 * @param end the end of the range (inclusive)
 * @param displayedValues the values displayed to the user.
 */
public void setRange(int start,int end,String[] displayedValues){
  mDisplayedValues=displayedValues;
  mStart=start;
  mEnd=end;
  mCurrent=start;
  updateView();
  if (displayedValues != null) {
    mText.setRawInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
  }
}"
21891,"@Override protected void onFocusChanged(boolean focused,int direction,Rect previouslyFocusedRect){
  if (mTemporaryDetach) {
    super.onFocusChanged(focused,direction,previouslyFocusedRect);
    return;
  }
  mShowCursor=SystemClock.uptimeMillis();
  ensureEndedBatchEdit();
  if (focused) {
    int selStart=getSelectionStart();
    int selEnd=getSelectionEnd();
    if (!mFrozenWithFocus || (selStart < 0 || selEnd < 0)) {
      if (mLastTouchOffset >= 0) {
        mLastTouchOffset=Math.min(mLastTouchOffset,mText.length());
        Selection.setSelection((Spannable)mText,mLastTouchOffset);
      }
      if (mMovement != null) {
        mMovement.onTakeFocus(this,(Spannable)mText,direction);
      }
      if (mSelectAllOnFocus) {
        Selection.setSelection((Spannable)mText,0,mText.length());
      }
      if (((this instanceof ExtractEditText) || mSelectionMoved) && selStart >= 0 && selEnd >= 0) {
        Selection.setSelection((Spannable)mText,selStart,selEnd);
      }
      mTouchFocusSelected=true;
    }
    mFrozenWithFocus=false;
    mSelectionMoved=false;
    if (mText instanceof Spannable) {
      Spannable sp=(Spannable)mText;
      MetaKeyKeyListener.resetMetaState(sp);
    }
    makeBlink();
    if (mError != null) {
      showError();
    }
  }
 else {
    if (mError != null) {
      hideError();
    }
    onEndBatchEdit();
    hideInsertionPointCursorController();
    if (this instanceof ExtractEditText) {
      mIsInTextSelectionMode=false;
    }
 else {
      terminateTextSelectionMode();
    }
  }
  startStopMarquee(focused);
  if (mTransformation != null) {
    mTransformation.onFocusChanged(this,mText,focused,direction,previouslyFocusedRect);
  }
  super.onFocusChanged(focused,direction,previouslyFocusedRect);
}","@Override protected void onFocusChanged(boolean focused,int direction,Rect previouslyFocusedRect){
  if (mTemporaryDetach) {
    super.onFocusChanged(focused,direction,previouslyFocusedRect);
    return;
  }
  mShowCursor=SystemClock.uptimeMillis();
  ensureEndedBatchEdit();
  if (focused) {
    int selStart=getSelectionStart();
    int selEnd=getSelectionEnd();
    if (!mFrozenWithFocus || (selStart < 0 || selEnd < 0)) {
      if (mLastTouchOffset >= 0) {
        mLastTouchOffset=Math.min(mLastTouchOffset,mText.length());
        Selection.setSelection((Spannable)mText,mLastTouchOffset);
      }
      if (mMovement != null) {
        mMovement.onTakeFocus(this,(Spannable)mText,direction);
      }
      if (mSelectAllOnFocus) {
        Selection.setSelection((Spannable)mText,0,mText.length());
      }
      if (((this instanceof ExtractEditText) || mSelectionMoved) && selStart >= 0 && selEnd >= 0) {
        Selection.setSelection((Spannable)mText,selStart,selEnd);
      }
      mTouchFocusSelected=true;
    }
    mFrozenWithFocus=false;
    mSelectionMoved=false;
    if (mText instanceof Spannable) {
      Spannable sp=(Spannable)mText;
      MetaKeyKeyListener.resetMetaState(sp);
    }
    makeBlink();
    if (mError != null) {
      showError();
    }
  }
 else {
    if (mError != null) {
      hideError();
    }
    onEndBatchEdit();
    hideInsertionPointCursorController();
    if (this instanceof ExtractEditText) {
      mIsInTextSelectionMode=false;
    }
 else {
      terminateTextSelectionMode();
    }
    mLastTouchOffset=-1;
  }
  startStopMarquee(focused);
  if (mTransformation != null) {
    mTransformation.onFocusChanged(this,mText,focused,direction,previouslyFocusedRect);
  }
  super.onFocusChanged(focused,direction,previouslyFocusedRect);
}"
21892,"@Override public boolean onKeyShortcut(int keyCode,KeyEvent event){
switch (keyCode) {
case KeyEvent.KEYCODE_A:
    if (canSelectAll()) {
      return onTextContextMenuItem(ID_SELECT_ALL);
    }
  break;
case KeyEvent.KEYCODE_X:
if (canCut()) {
  return onTextContextMenuItem(ID_CUT);
}
break;
case KeyEvent.KEYCODE_C:
if (canCopy()) {
return onTextContextMenuItem(ID_COPY);
}
break;
case KeyEvent.KEYCODE_V:
if (canPaste()) {
return onTextContextMenuItem(ID_PASTE);
}
break;
}
return super.onKeyShortcut(keyCode,event);
}","@Override public boolean onKeyShortcut(int keyCode,KeyEvent event){
switch (keyCode) {
case KeyEvent.KEYCODE_A:
    if (canSelectText()) {
      return onTextContextMenuItem(ID_SELECT_ALL);
    }
  break;
case KeyEvent.KEYCODE_X:
if (canCut()) {
  return onTextContextMenuItem(ID_CUT);
}
break;
case KeyEvent.KEYCODE_C:
if (canCopy()) {
return onTextContextMenuItem(ID_COPY);
}
break;
case KeyEvent.KEYCODE_V:
if (canPaste()) {
return onTextContextMenuItem(ID_PASTE);
}
break;
}
return super.onKeyShortcut(keyCode,event);
}"
21893,"private void prepareCursorControllers(){
  if (mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (canSelectText() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}","private void prepareCursorControllers(){
  if (mCursorVisible && mLayout != null) {
    if (mInsertionPointCursorController == null) {
      mInsertionPointCursorController=new InsertionPointCursorController();
    }
  }
 else {
    mInsertionPointCursorController=null;
  }
  if (textCanBeSelected() && mLayout != null) {
    if (mSelectionModifierCursorController == null) {
      mSelectionModifierCursorController=new SelectionModifierCursorController();
    }
  }
 else {
    stopTextSelectionMode();
    mSelectionModifierCursorController=null;
  }
}"
21894,"private boolean canSelectText(){
  return (mText instanceof Spannable && mMovement != null && mMovement.canSelectArbitrarily());
}","private boolean canSelectText(){
  return textCanBeSelected() && mText.length() != 0;
}"
21895,"@Override protected void onCreateContextMenu(ContextMenu menu){
  super.onCreateContextMenu(menu);
  boolean added=false;
  if (mIsInTextSelectionMode) {
    MenuHandler handler=new MenuHandler();
    if (canCut()) {
      menu.add(0,ID_CUT,0,com.android.internal.R.string.cut).setOnMenuItemClickListener(handler).setAlphabeticShortcut('x');
      added=true;
    }
    if (canCopy()) {
      menu.add(0,ID_COPY,0,com.android.internal.R.string.copy).setOnMenuItemClickListener(handler).setAlphabeticShortcut('c');
      added=true;
    }
    if (canPaste()) {
      menu.add(0,ID_PASTE,0,com.android.internal.R.string.paste).setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
      added=true;
    }
  }
 else {
    MenuHandler handler=new MenuHandler();
    if (canSelectText()) {
      menu.add(0,ID_START_SELECTING_TEXT,0,com.android.internal.R.string.selectText).setOnMenuItemClickListener(handler);
      added=true;
    }
    if (canSelectAll()) {
      menu.add(0,ID_SELECT_ALL,0,com.android.internal.R.string.selectAll).setOnMenuItemClickListener(handler).setAlphabeticShortcut('a');
      added=true;
    }
    if (mText instanceof Spanned) {
      int selStart=getSelectionStart();
      int selEnd=getSelectionEnd();
      int min=Math.min(selStart,selEnd);
      int max=Math.max(selStart,selEnd);
      URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
      if (urls.length == 1) {
        menu.add(0,ID_COPY_URL,0,com.android.internal.R.string.copyUrl).setOnMenuItemClickListener(handler);
        added=true;
      }
    }
    if (canPaste() && textIsOnlySpaces()) {
      menu.add(0,ID_PASTE,0,com.android.internal.R.string.paste).setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
      added=true;
    }
    if (isInputMethodTarget()) {
      menu.add(1,ID_SWITCH_INPUT_METHOD,0,com.android.internal.R.string.inputMethod).setOnMenuItemClickListener(handler);
      added=true;
    }
    String word=getWordForDictionary();
    if (word != null) {
      menu.add(1,ID_ADD_TO_DICTIONARY,0,getContext().getString(com.android.internal.R.string.addToDictionary,word)).setOnMenuItemClickListener(handler);
      added=true;
    }
  }
  if (added) {
    menu.setHeaderTitle(com.android.internal.R.string.editTextMenuTitle);
  }
}","@Override protected void onCreateContextMenu(ContextMenu menu){
  super.onCreateContextMenu(menu);
  boolean added=false;
  if (mIsInTextSelectionMode) {
    MenuHandler handler=new MenuHandler();
    if (canCut()) {
      menu.add(0,ID_CUT,0,com.android.internal.R.string.cut).setOnMenuItemClickListener(handler).setAlphabeticShortcut('x');
      added=true;
    }
    if (canCopy()) {
      menu.add(0,ID_COPY,0,com.android.internal.R.string.copy).setOnMenuItemClickListener(handler).setAlphabeticShortcut('c');
      added=true;
    }
    if (canPaste()) {
      menu.add(0,ID_PASTE,0,com.android.internal.R.string.paste).setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
      added=true;
    }
  }
 else {
    MenuHandler handler=new MenuHandler();
    if (canSelectText()) {
      menu.add(0,ID_START_SELECTING_TEXT,0,com.android.internal.R.string.selectText).setOnMenuItemClickListener(handler);
      menu.add(0,ID_SELECT_ALL,0,com.android.internal.R.string.selectAll).setOnMenuItemClickListener(handler).setAlphabeticShortcut('a');
      added=true;
    }
    if (mText instanceof Spanned) {
      int selStart=getSelectionStart();
      int selEnd=getSelectionEnd();
      int min=Math.min(selStart,selEnd);
      int max=Math.max(selStart,selEnd);
      URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
      if (urls.length == 1) {
        menu.add(0,ID_COPY_URL,0,com.android.internal.R.string.copyUrl).setOnMenuItemClickListener(handler);
        added=true;
      }
    }
    if (canPaste()) {
      menu.add(0,ID_PASTE,0,com.android.internal.R.string.paste).setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
      added=true;
    }
    if (isInputMethodTarget()) {
      menu.add(1,ID_SWITCH_INPUT_METHOD,0,com.android.internal.R.string.inputMethod).setOnMenuItemClickListener(handler);
      added=true;
    }
    String word=getWordForDictionary();
    if (word != null) {
      menu.add(1,ID_ADD_TO_DICTIONARY,0,getContext().getString(com.android.internal.R.string.addToDictionary,word)).setOnMenuItemClickListener(handler);
      added=true;
    }
  }
  if (added) {
    menu.setHeaderTitle(com.android.internal.R.string.editTextMenuTitle);
  }
}"
21896,"private void printRestoreSets(RestoreSet[] sets){
  for (  RestoreSet s : sets) {
    System.out.println(""String_Node_Str"" + Long.toHexString(s.token) + ""String_Node_Str""+ s.name);
  }
}","private void printRestoreSets(RestoreSet[] sets){
  if (sets == null || sets.length == 0) {
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  RestoreSet s : sets) {
    System.out.println(""String_Node_Str"" + Long.toHexString(s.token) + ""String_Node_Str""+ s.name);
  }
}"
21897,"/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
    if (attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && win.fillsScreenLw(mW,mH,false,false)) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + win);
      mTopFullscreenOpaqueWindowState=win;
      if ((attrs.flags & FLAG_SHOW_WHEN_LOCKED) != 0) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"" + win);
        mHideLockScreen=true;
      }
      if ((attrs.flags & FLAG_DISMISS_KEYGUARD) != 0) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"" + win);
        mDismissKeyguard=true;
      }
      if ((attrs.flags & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
        mAllowLockscreenWhenOn=true;
      }
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
    if (attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + win);
      mTopFullscreenOpaqueWindowState=win;
      if ((attrs.flags & FLAG_SHOW_WHEN_LOCKED) != 0) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"" + win);
        mHideLockScreen=true;
      }
      if ((attrs.flags & FLAG_DISMISS_KEYGUARD) != 0) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"" + win);
        mDismissKeyguard=true;
      }
      if ((attrs.flags & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
        mAllowLockscreenWhenOn=true;
      }
    }
  }
}"
21898,"private void printRestoreSets(RestoreSet[] sets){
  for (  RestoreSet s : sets) {
    System.out.println(""String_Node_Str"" + Long.toHexString(s.token) + ""String_Node_Str""+ s.name);
  }
}","private void printRestoreSets(RestoreSet[] sets){
  if (sets == null || sets.length == 0) {
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  RestoreSet s : sets) {
    System.out.println(""String_Node_Str"" + Long.toHexString(s.token) + ""String_Node_Str""+ s.name);
  }
}"
21899,"/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
    if (attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && win.fillsScreenLw(mW,mH,false,false)) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + win);
      mTopFullscreenOpaqueWindowState=win;
      if ((attrs.flags & FLAG_SHOW_WHEN_LOCKED) != 0) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"" + win);
        mHideLockScreen=true;
      }
      if ((attrs.flags & FLAG_DISMISS_KEYGUARD) != 0) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"" + win);
        mDismissKeyguard=true;
      }
      if ((attrs.flags & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
        mAllowLockscreenWhenOn=true;
      }
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
    if (attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + win);
      mTopFullscreenOpaqueWindowState=win;
      if ((attrs.flags & FLAG_SHOW_WHEN_LOCKED) != 0) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"" + win);
        mHideLockScreen=true;
      }
      if ((attrs.flags & FLAG_DISMISS_KEYGUARD) != 0) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"" + win);
        mDismissKeyguard=true;
      }
      if ((attrs.flags & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
        mAllowLockscreenWhenOn=true;
      }
    }
  }
}"
21900,"@Override public void onChanged(SipAudioCall call){
synchronized (SipPhone.class) {
    Call.State newState=getCallStateFrom(call);
    if (mState == newState)     return;
    if (newState == Call.State.INCOMING) {
      setState(mOwner.getState());
    }
 else {
      if (mOwner == ringingCall) {
        if (ringingCall.getState() == Call.State.WAITING) {
          try {
            switchHoldingAndActive();
          }
 catch (          CallStateException e) {
            onCallEnded(DisconnectCause.LOCAL);
            return;
          }
        }
        foregroundCall.switchWith(ringingCall);
      }
      if (newState == Call.State.ACTIVE)       call.startAudio();
      setState(newState);
    }
    mOwner.onConnectionStateChanged(SipConnection.this);
    Log.v(LOG_TAG,""String_Node_Str"" + mPeer.getUriString() + ""String_Node_Str""+ mState+ ""String_Node_Str""+ getPhone());
  }
}","@Override public void onChanged(SipAudioCall call){
synchronized (SipPhone.class) {
    Call.State newState=getCallStateFrom(call);
    if (mState == newState)     return;
    if (newState == Call.State.INCOMING) {
      setState(mOwner.getState());
    }
 else {
      if (mOwner == ringingCall) {
        if (ringingCall.getState() == Call.State.WAITING) {
          try {
            switchHoldingAndActive();
          }
 catch (          CallStateException e) {
            onCallEnded(DisconnectCause.LOCAL);
            return;
          }
        }
        foregroundCall.switchWith(ringingCall);
      }
      setState(newState);
    }
    mOwner.onConnectionStateChanged(SipConnection.this);
    Log.v(LOG_TAG,""String_Node_Str"" + mPeer.getUriString() + ""String_Node_Str""+ mState+ ""String_Node_Str""+ getPhone());
  }
}"
21901,"/** 
 * Populates the database map of values with the appropriate RRULE, RDATE, EXRULE, and EXDATE values extracted from the parsed iCalendar component.
 * @param component The iCalendar component containing the desiredrecurrence specification.
 * @param values The db values that should be updated.
 * @return true if the component contained the necessary informationto specify a recurrence.  The required fields are DTSTART, one of DTEND/DURATION, and one of RRULE/RDATE.  Returns false if there was an error, including if the date is out of range.
 */
public static boolean populateContentValues(ICalendar.Component component,ContentValues values){
  ICalendar.Property dtstartProperty=component.getFirstProperty(""String_Node_Str"");
  String dtstart=dtstartProperty.getValue();
  ICalendar.Parameter tzidParam=dtstartProperty.getFirstParameter(""String_Node_Str"");
  String tzid=tzidParam == null ? null : tzidParam.value;
  Time start=new Time(tzidParam == null ? Time.TIMEZONE_UTC : tzid);
  boolean inUtc=start.parse(dtstart);
  boolean allDay=start.allDay;
  if (inUtc) {
    tzid=Time.TIMEZONE_UTC;
  }
  String duration=computeDuration(start,component);
  String rrule=flattenProperties(component,""String_Node_Str"");
  String rdate=extractDates(component.getFirstProperty(""String_Node_Str""));
  String exrule=flattenProperties(component,""String_Node_Str"");
  String exdate=extractDates(component.getFirstProperty(""String_Node_Str""));
  if ((TextUtils.isEmpty(dtstart)) || (TextUtils.isEmpty(duration)) || ((TextUtils.isEmpty(rrule)) && (TextUtils.isEmpty(rdate)))) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + component.toString());
    }
    return false;
  }
  if (allDay) {
    start.timezone=Time.TIMEZONE_UTC;
  }
  long millis=start.toMillis(false);
  values.put(Calendar.Events.DTSTART,millis);
  if (millis == -1) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + component.toString());
    }
    return false;
  }
  values.put(Calendar.Events.RRULE,rrule);
  values.put(Calendar.Events.RDATE,rdate);
  values.put(Calendar.Events.EXRULE,exrule);
  values.put(Calendar.Events.EXDATE,exdate);
  values.put(Calendar.Events.EVENT_TIMEZONE,tzid);
  values.put(Calendar.Events.DURATION,duration);
  values.put(Calendar.Events.ALL_DAY,allDay ? 1 : 0);
  return true;
}","/** 
 * Populates the database map of values with the appropriate RRULE, RDATE, EXRULE, and EXDATE values extracted from the parsed iCalendar component.
 * @param component The iCalendar component containing the desiredrecurrence specification.
 * @param values The db values that should be updated.
 * @return true if the component contained the necessary informationto specify a recurrence.  The required fields are DTSTART, one of DTEND/DURATION, and one of RRULE/RDATE.  Returns false if there was an error, including if the date is out of range.
 */
public static boolean populateContentValues(ICalendar.Component component,ContentValues values){
  ICalendar.Property dtstartProperty=component.getFirstProperty(""String_Node_Str"");
  String dtstart=dtstartProperty.getValue();
  ICalendar.Parameter tzidParam=dtstartProperty.getFirstParameter(""String_Node_Str"");
  String tzid=tzidParam == null ? null : tzidParam.value;
  Time start=new Time(tzidParam == null ? Time.TIMEZONE_UTC : tzid);
  boolean inUtc=start.parse(dtstart);
  boolean allDay=start.allDay;
  if (inUtc || allDay) {
    tzid=Time.TIMEZONE_UTC;
  }
  String duration=computeDuration(start,component);
  String rrule=flattenProperties(component,""String_Node_Str"");
  String rdate=extractDates(component.getFirstProperty(""String_Node_Str""));
  String exrule=flattenProperties(component,""String_Node_Str"");
  String exdate=extractDates(component.getFirstProperty(""String_Node_Str""));
  if ((TextUtils.isEmpty(dtstart)) || (TextUtils.isEmpty(duration)) || ((TextUtils.isEmpty(rrule)) && (TextUtils.isEmpty(rdate)))) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + component.toString());
    }
    return false;
  }
  if (allDay) {
    start.timezone=Time.TIMEZONE_UTC;
  }
  long millis=start.toMillis(false);
  values.put(Calendar.Events.DTSTART,millis);
  if (millis == -1) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + component.toString());
    }
    return false;
  }
  values.put(Calendar.Events.RRULE,rrule);
  values.put(Calendar.Events.RDATE,rdate);
  values.put(Calendar.Events.EXRULE,exrule);
  values.put(Calendar.Events.EXDATE,exdate);
  values.put(Calendar.Events.EVENT_TIMEZONE,tzid);
  values.put(Calendar.Events.DURATION,duration);
  values.put(Calendar.Events.ALL_DAY,allDay ? 1 : 0);
  return true;
}"
21902,"@SmallTest public void testRecurrenceSet2() throws Exception {
  String recurrence=""String_Node_Str"" + ""String_Node_Str"";
  verifyPopulateContentValues(recurrence,""String_Node_Str"",null,null,null,1250812800000L,null,""String_Node_Str"",1);
}","@SmallTest public void testRecurrenceSet2() throws Exception {
  String recurrence=""String_Node_Str"" + ""String_Node_Str"";
  verifyPopulateContentValues(recurrence,""String_Node_Str"",null,null,null,1250812800000L,""String_Node_Str"",""String_Node_Str"",1);
}"
21903,"@SmallTest public void testRecurrenceSet1() throws Exception {
  String recurrence=""String_Node_Str"" + ""String_Node_Str"";
  verifyPopulateContentValues(recurrence,""String_Node_Str"",null,null,null,1250812800000L,null,""String_Node_Str"",1);
}","@SmallTest public void testRecurrenceSet1() throws Exception {
  String recurrence=""String_Node_Str"" + ""String_Node_Str"";
  verifyPopulateContentValues(recurrence,""String_Node_Str"",null,null,null,1250812800000L,""String_Node_Str"",""String_Node_Str"",1);
}"
21904,"private final void processNextBroadcast(boolean fromMsg){
synchronized (this) {
    BroadcastRecord r;
    if (DEBUG_BROADCAST)     Slog.v(TAG,""String_Node_Str"" + mParallelBroadcasts.size() + ""String_Node_Str""+ mOrderedBroadcasts.size()+ ""String_Node_Str"");
    updateCpuStats();
    if (fromMsg) {
      mBroadcastsScheduled=false;
    }
    while (mParallelBroadcasts.size() > 0) {
      r=mParallelBroadcasts.remove(0);
      r.dispatchTime=SystemClock.uptimeMillis();
      final int N=r.receivers.size();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG,""String_Node_Str"" + r);
      for (int i=0; i < N; i++) {
        Object target=r.receivers.get(i);
        if (DEBUG_BROADCAST)         Slog.v(TAG,""String_Node_Str"" + target + ""String_Node_Str""+ r);
        deliverToRegisteredReceiver(r,(BroadcastFilter)target,false);
      }
      addBroadcastToHistoryLocked(r);
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG,""String_Node_Str"" + r);
    }
    if (mPendingBroadcast != null) {
      if (DEBUG_BROADCAST_LIGHT) {
        Slog.v(TAG,""String_Node_Str"" + mPendingBroadcast.curApp);
      }
      boolean isDead;
synchronized (mPidsSelfLocked) {
        isDead=(mPidsSelfLocked.get(mPendingBroadcast.curApp.pid) == null);
      }
      if (!isDead) {
        return;
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + mPendingBroadcast.curApp + ""String_Node_Str"");
        mPendingBroadcast.state=BroadcastRecord.IDLE;
        mPendingBroadcast.nextReceiver=mPendingBroadcastRecvIndex;
        mPendingBroadcast=null;
      }
    }
    boolean looped=false;
    do {
      if (mOrderedBroadcasts.size() == 0) {
        scheduleAppGcsLocked();
        if (looped) {
          updateOomAdjLocked();
        }
        return;
      }
      r=mOrderedBroadcasts.get(0);
      boolean forceReceive=false;
      int numReceivers=(r.receivers != null) ? r.receivers.size() : 0;
      if (mProcessesReady && r.dispatchTime > 0) {
        long now=SystemClock.uptimeMillis();
        if ((numReceivers > 0) && (now > r.dispatchTime + (2 * BROADCAST_TIMEOUT * numReceivers))) {
          Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + now + ""String_Node_Str""+ r.dispatchTime+ ""String_Node_Str""+ r.receiverTime+ ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ numReceivers+ ""String_Node_Str""+ r.nextReceiver+ ""String_Node_Str""+ r.state);
          broadcastTimeout();
          forceReceive=true;
          r.state=BroadcastRecord.IDLE;
        }
      }
      if (r.state != BroadcastRecord.IDLE) {
        if (DEBUG_BROADCAST)         Slog.d(TAG,""String_Node_Str"" + r.state + ""String_Node_Str"");
        return;
      }
      if (r.receivers == null || r.nextReceiver >= numReceivers || r.resultAbort || forceReceive) {
        if (r.resultTo != null) {
          try {
            if (DEBUG_BROADCAST) {
              int seq=r.intent.getIntExtra(""String_Node_Str"",-1);
              Slog.i(TAG,""String_Node_Str"" + r.intent.getAction() + ""String_Node_Str""+ seq+ ""String_Node_Str""+ r.callerApp);
            }
            performReceive(r.callerApp,r.resultTo,new Intent(r.intent),r.resultCode,r.resultData,r.resultExtras,false,false);
          }
 catch (          RemoteException e) {
            Slog.w(TAG,""String_Node_Str"" + r.intent,e);
          }
        }
        if (DEBUG_BROADCAST)         Slog.v(TAG,""String_Node_Str"");
        mHandler.removeMessages(BROADCAST_TIMEOUT_MSG);
        if (DEBUG_BROADCAST_LIGHT)         Slog.v(TAG,""String_Node_Str"" + r);
        addBroadcastToHistoryLocked(r);
        mOrderedBroadcasts.remove(0);
        r=null;
        looped=true;
        continue;
      }
    }
 while (r == null);
    int recIdx=r.nextReceiver++;
    r.receiverTime=SystemClock.uptimeMillis();
    if (recIdx == 0) {
      r.dispatchTime=r.receiverTime;
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG,""String_Node_Str"" + r);
      if (DEBUG_BROADCAST)       Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ (r.receiverTime + BROADCAST_TIMEOUT));
      Message msg=mHandler.obtainMessage(BROADCAST_TIMEOUT_MSG);
      mHandler.sendMessageAtTime(msg,r.receiverTime + BROADCAST_TIMEOUT);
    }
    Object nextReceiver=r.receivers.get(recIdx);
    if (nextReceiver instanceof BroadcastFilter) {
      BroadcastFilter filter=(BroadcastFilter)nextReceiver;
      if (DEBUG_BROADCAST)       Slog.v(TAG,""String_Node_Str"" + filter + ""String_Node_Str""+ r);
      deliverToRegisteredReceiver(r,filter,r.ordered);
      if (r.receiver == null || !r.ordered) {
        if (DEBUG_BROADCAST)         Slog.v(TAG,""String_Node_Str"" + r.ordered + ""String_Node_Str""+ r.receiver);
        r.state=BroadcastRecord.IDLE;
        scheduleBroadcastsLocked();
      }
      return;
    }
    ResolveInfo info=(ResolveInfo)nextReceiver;
    boolean skip=false;
    int perm=checkComponentPermission(info.activityInfo.permission,r.callingPid,r.callingUid,info.activityInfo.exported ? -1 : info.activityInfo.applicationInfo.uid);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.permission+ ""String_Node_Str""+ info.activityInfo.packageName+ ""String_Node_Str""+ info.activityInfo.name);
      skip=true;
    }
    if (r.callingUid != Process.SYSTEM_UID && r.requiredPermission != null) {
      try {
        perm=AppGlobals.getPackageManager().checkPermission(r.requiredPermission,info.activityInfo.applicationInfo.packageName);
      }
 catch (      RemoteException e) {
        perm=PackageManager.PERMISSION_DENIED;
      }
      if (perm != PackageManager.PERMISSION_GRANTED) {
        Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ info.activityInfo.applicationInfo.packageName+ ""String_Node_Str""+ r.requiredPermission+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
        skip=true;
      }
    }
    if (r.curApp != null && r.curApp.crashing) {
      if (DEBUG_BROADCAST)       Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ r.curApp+ ""String_Node_Str"");
      skip=true;
    }
    if (skip) {
      if (DEBUG_BROADCAST)       Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str"");
      r.receiver=null;
      r.curFilter=null;
      r.state=BroadcastRecord.IDLE;
      scheduleBroadcastsLocked();
      return;
    }
    r.state=BroadcastRecord.APP_RECEIVE;
    String targetProcess=info.activityInfo.processName;
    r.curComponent=new ComponentName(info.activityInfo.applicationInfo.packageName,info.activityInfo.name);
    r.curReceiver=info.activityInfo;
    ProcessRecord app=getProcessRecordLocked(targetProcess,info.activityInfo.applicationInfo.uid);
    if (app != null && app.thread != null) {
      try {
        processCurBroadcastLocked(r,app);
        return;
      }
 catch (      RemoteException e) {
        Slog.w(TAG,""String_Node_Str"" + r.curComponent,e);
      }
    }
    if (DEBUG_BROADCAST)     Slog.v(TAG,""String_Node_Str"" + targetProcess + ""String_Node_Str""+ r);
    if ((r.curApp=startProcessLocked(targetProcess,info.activityInfo.applicationInfo,true,r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,""String_Node_Str"",r.curComponent,(r.intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0)) == null) {
      Slog.w(TAG,""String_Node_Str"" + info.activityInfo.applicationInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ r.intent+ ""String_Node_Str"");
      logBroadcastReceiverDiscard(r);
      finishReceiverLocked(r.receiver,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,true);
      scheduleBroadcastsLocked();
      r.state=BroadcastRecord.IDLE;
      return;
    }
    mPendingBroadcast=r;
    mPendingBroadcastRecvIndex=recIdx;
  }
}","private final void processNextBroadcast(boolean fromMsg){
synchronized (this) {
    BroadcastRecord r;
    if (DEBUG_BROADCAST)     Slog.v(TAG,""String_Node_Str"" + mParallelBroadcasts.size() + ""String_Node_Str""+ mOrderedBroadcasts.size()+ ""String_Node_Str"");
    updateCpuStats();
    if (fromMsg) {
      mBroadcastsScheduled=false;
    }
    while (mParallelBroadcasts.size() > 0) {
      r=mParallelBroadcasts.remove(0);
      r.dispatchTime=SystemClock.uptimeMillis();
      final int N=r.receivers.size();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG,""String_Node_Str"" + r);
      for (int i=0; i < N; i++) {
        Object target=r.receivers.get(i);
        if (DEBUG_BROADCAST)         Slog.v(TAG,""String_Node_Str"" + target + ""String_Node_Str""+ r);
        deliverToRegisteredReceiverLocked(r,(BroadcastFilter)target,false);
      }
      addBroadcastToHistoryLocked(r);
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG,""String_Node_Str"" + r);
    }
    if (mPendingBroadcast != null) {
      if (DEBUG_BROADCAST_LIGHT) {
        Slog.v(TAG,""String_Node_Str"" + mPendingBroadcast.curApp);
      }
      boolean isDead;
synchronized (mPidsSelfLocked) {
        isDead=(mPidsSelfLocked.get(mPendingBroadcast.curApp.pid) == null);
      }
      if (!isDead) {
        return;
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + mPendingBroadcast.curApp + ""String_Node_Str"");
        mPendingBroadcast.state=BroadcastRecord.IDLE;
        mPendingBroadcast.nextReceiver=mPendingBroadcastRecvIndex;
        mPendingBroadcast=null;
      }
    }
    boolean looped=false;
    do {
      if (mOrderedBroadcasts.size() == 0) {
        scheduleAppGcsLocked();
        if (looped) {
          updateOomAdjLocked();
        }
        return;
      }
      r=mOrderedBroadcasts.get(0);
      boolean forceReceive=false;
      int numReceivers=(r.receivers != null) ? r.receivers.size() : 0;
      if (mProcessesReady && r.dispatchTime > 0) {
        long now=SystemClock.uptimeMillis();
        if ((numReceivers > 0) && (now > r.dispatchTime + (2 * BROADCAST_TIMEOUT * numReceivers))) {
          Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + now + ""String_Node_Str""+ r.dispatchTime+ ""String_Node_Str""+ r.receiverTime+ ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ numReceivers+ ""String_Node_Str""+ r.nextReceiver+ ""String_Node_Str""+ r.state);
          broadcastTimeoutLocked(false);
          forceReceive=true;
          r.state=BroadcastRecord.IDLE;
        }
      }
      if (r.state != BroadcastRecord.IDLE) {
        if (DEBUG_BROADCAST)         Slog.d(TAG,""String_Node_Str"" + r.state + ""String_Node_Str"");
        return;
      }
      if (r.receivers == null || r.nextReceiver >= numReceivers || r.resultAbort || forceReceive) {
        if (r.resultTo != null) {
          try {
            if (DEBUG_BROADCAST) {
              int seq=r.intent.getIntExtra(""String_Node_Str"",-1);
              Slog.i(TAG,""String_Node_Str"" + r.intent.getAction() + ""String_Node_Str""+ seq+ ""String_Node_Str""+ r.callerApp);
            }
            performReceiveLocked(r.callerApp,r.resultTo,new Intent(r.intent),r.resultCode,r.resultData,r.resultExtras,false,false);
          }
 catch (          RemoteException e) {
            Slog.w(TAG,""String_Node_Str"" + r.intent,e);
          }
        }
        if (DEBUG_BROADCAST)         Slog.v(TAG,""String_Node_Str"");
        cancelBroadcastTimeoutLocked();
        if (DEBUG_BROADCAST_LIGHT)         Slog.v(TAG,""String_Node_Str"" + r);
        addBroadcastToHistoryLocked(r);
        mOrderedBroadcasts.remove(0);
        r=null;
        looped=true;
        continue;
      }
    }
 while (r == null);
    int recIdx=r.nextReceiver++;
    r.receiverTime=SystemClock.uptimeMillis();
    if (recIdx == 0) {
      r.dispatchTime=r.receiverTime;
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG,""String_Node_Str"" + r);
    }
    if (!mPendingBroadcastTimeoutMessage) {
      long timeoutTime=r.receiverTime + BROADCAST_TIMEOUT;
      if (DEBUG_BROADCAST)       Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ timeoutTime);
      setBroadcastTimeoutLocked(timeoutTime);
    }
    Object nextReceiver=r.receivers.get(recIdx);
    if (nextReceiver instanceof BroadcastFilter) {
      BroadcastFilter filter=(BroadcastFilter)nextReceiver;
      if (DEBUG_BROADCAST)       Slog.v(TAG,""String_Node_Str"" + filter + ""String_Node_Str""+ r);
      deliverToRegisteredReceiverLocked(r,filter,r.ordered);
      if (r.receiver == null || !r.ordered) {
        if (DEBUG_BROADCAST)         Slog.v(TAG,""String_Node_Str"" + r.ordered + ""String_Node_Str""+ r.receiver);
        r.state=BroadcastRecord.IDLE;
        scheduleBroadcastsLocked();
      }
      return;
    }
    ResolveInfo info=(ResolveInfo)nextReceiver;
    boolean skip=false;
    int perm=checkComponentPermission(info.activityInfo.permission,r.callingPid,r.callingUid,info.activityInfo.exported ? -1 : info.activityInfo.applicationInfo.uid);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.permission+ ""String_Node_Str""+ info.activityInfo.packageName+ ""String_Node_Str""+ info.activityInfo.name);
      skip=true;
    }
    if (r.callingUid != Process.SYSTEM_UID && r.requiredPermission != null) {
      try {
        perm=AppGlobals.getPackageManager().checkPermission(r.requiredPermission,info.activityInfo.applicationInfo.packageName);
      }
 catch (      RemoteException e) {
        perm=PackageManager.PERMISSION_DENIED;
      }
      if (perm != PackageManager.PERMISSION_GRANTED) {
        Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ info.activityInfo.applicationInfo.packageName+ ""String_Node_Str""+ r.requiredPermission+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
        skip=true;
      }
    }
    if (r.curApp != null && r.curApp.crashing) {
      if (DEBUG_BROADCAST)       Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ r.curApp+ ""String_Node_Str"");
      skip=true;
    }
    if (skip) {
      if (DEBUG_BROADCAST)       Slog.v(TAG,""String_Node_Str"" + r + ""String_Node_Str"");
      r.receiver=null;
      r.curFilter=null;
      r.state=BroadcastRecord.IDLE;
      scheduleBroadcastsLocked();
      return;
    }
    r.state=BroadcastRecord.APP_RECEIVE;
    String targetProcess=info.activityInfo.processName;
    r.curComponent=new ComponentName(info.activityInfo.applicationInfo.packageName,info.activityInfo.name);
    r.curReceiver=info.activityInfo;
    ProcessRecord app=getProcessRecordLocked(targetProcess,info.activityInfo.applicationInfo.uid);
    if (app != null && app.thread != null) {
      try {
        processCurBroadcastLocked(r,app);
        return;
      }
 catch (      RemoteException e) {
        Slog.w(TAG,""String_Node_Str"" + r.curComponent,e);
      }
    }
    if (DEBUG_BROADCAST)     Slog.v(TAG,""String_Node_Str"" + targetProcess + ""String_Node_Str""+ r);
    if ((r.curApp=startProcessLocked(targetProcess,info.activityInfo.applicationInfo,true,r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,""String_Node_Str"",r.curComponent,(r.intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0)) == null) {
      Slog.w(TAG,""String_Node_Str"" + info.activityInfo.applicationInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ r.intent+ ""String_Node_Str"");
      logBroadcastReceiverDiscardLocked(r);
      finishReceiverLocked(r.receiver,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,true);
      scheduleBroadcastsLocked();
      r.state=BroadcastRecord.IDLE;
      return;
    }
    mPendingBroadcast=r;
    mPendingBroadcastRecvIndex=recIdx;
  }
}"
21905,"private final boolean attachApplicationLocked(IApplicationThread thread,int pid){
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else   if (mStartingProcesses.size() > 0) {
    app=mStartingProcesses.remove(0);
    app.setPid(pid);
  }
 else {
    app=null;
  }
  if (app == null) {
    Slog.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ thread+ ""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcess(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true);
  }
  if (localLOGV)   Slog.v(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ app);
  String processName=app.processName;
  try {
    thread.asBinder().linkToDeath(new AppDeathRecipient(app,pid,thread),0);
  }
 catch (  RemoteException e) {
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  EventLog.writeEvent(EventLogTags.AM_PROC_BOUND,app.pid,app.processName);
  app.thread=thread;
  app.curAdj=app.setAdj=-100;
  app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
  app.setSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
  app.forcingToForeground=null;
  app.foregroundServices=false;
  app.debugging=false;
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  boolean normalMode=mProcessesReady || isAllowedWhileBooting(app.info);
  List providers=normalMode ? generateApplicationProvidersLocked(app) : null;
  if (!normalMode) {
    Slog.i(TAG,""String_Node_Str"" + app);
  }
  if (localLOGV)   Slog.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ thread.asBinder()+ ""String_Node_Str""+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    boolean isRestrictedBackupMode=false;
    if (mBackupTarget != null && mBackupAppName.equals(processName)) {
      isRestrictedBackupMode=(mBackupTarget.backupMode == BackupRecord.RESTORE) || (mBackupTarget.backupMode == BackupRecord.BACKUP_FULL);
    }
    ensurePackageDexOpt(app.instrumentationInfo != null ? app.instrumentationInfo.packageName : app.info.packageName);
    if (app.instrumentationClass != null) {
      ensurePackageDexOpt(app.instrumentationClass.getPackageName());
    }
    if (DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + processName + ""String_Node_Str""+ mConfiguration);
    thread.bindApplication(processName,app.instrumentationInfo != null ? app.instrumentationInfo : app.info,providers,app.instrumentationClass,app.instrumentationProfileFile,app.instrumentationArguments,app.instrumentationWatcher,testMode,isRestrictedBackupMode || !normalMode,mConfiguration,getCommonServicesLocked());
    updateLruProcessLocked(app,false,true);
    app.lastRequestedGc=app.lastLowMemory=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  ActivityRecord hr=mMainStack.topRunningActivityLocked(null);
  if (hr != null && normalMode) {
    if (hr.app == null && app.info.uid == hr.info.applicationInfo.uid && processName.equals(hr.processName)) {
      try {
        if (mMainStack.realStartActivityLocked(hr,app,true,true)) {
          didSomething=true;
        }
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + hr.intent.getComponent().flattenToShortString(),e);
        badApp=true;
      }
    }
 else {
      mMainStack.ensureActivitiesVisibleLocked(hr,null,processName,0);
    }
  }
  if (!badApp && mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (app.info.uid != sr.appInfo.uid || !processName.equals(sr.processName)) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        realStartServiceLocked(sr,app);
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      badApp=true;
    }
  }
  BroadcastRecord br=mPendingBroadcast;
  if (!badApp && br != null && br.curApp == app) {
    try {
      mPendingBroadcast=null;
      processCurBroadcastLocked(br,app);
      didSomething=true;
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"" + br.curComponent.flattenToShortString(),e);
      badApp=true;
      logBroadcastReceiverDiscard(br);
      finishReceiverLocked(br.receiver,br.resultCode,br.resultData,br.resultExtras,br.resultAbort,true);
      scheduleBroadcastsLocked();
      br.state=BroadcastRecord.IDLE;
    }
  }
  if (!badApp && mBackupTarget != null && mBackupTarget.appInfo.uid == app.info.uid) {
    if (DEBUG_BACKUP)     Slog.v(TAG,""String_Node_Str"" + app);
    ensurePackageDexOpt(mBackupTarget.appInfo.packageName);
    try {
      thread.scheduleCreateBackupAgent(mBackupTarget.appInfo,mBackupTarget.backupMode);
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (badApp) {
    handleAppDiedLocked(app,false);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}","private final boolean attachApplicationLocked(IApplicationThread thread,int pid){
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else   if (mStartingProcesses.size() > 0) {
    app=mStartingProcesses.remove(0);
    app.setPid(pid);
  }
 else {
    app=null;
  }
  if (app == null) {
    Slog.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ thread+ ""String_Node_Str"");
    EventLog.writeEvent(EventLogTags.AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcess(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true);
  }
  if (localLOGV)   Slog.v(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ app);
  String processName=app.processName;
  try {
    thread.asBinder().linkToDeath(new AppDeathRecipient(app,pid,thread),0);
  }
 catch (  RemoteException e) {
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  EventLog.writeEvent(EventLogTags.AM_PROC_BOUND,app.pid,app.processName);
  app.thread=thread;
  app.curAdj=app.setAdj=-100;
  app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
  app.setSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
  app.forcingToForeground=null;
  app.foregroundServices=false;
  app.debugging=false;
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  boolean normalMode=mProcessesReady || isAllowedWhileBooting(app.info);
  List providers=normalMode ? generateApplicationProvidersLocked(app) : null;
  if (!normalMode) {
    Slog.i(TAG,""String_Node_Str"" + app);
  }
  if (localLOGV)   Slog.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ thread.asBinder()+ ""String_Node_Str""+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    boolean isRestrictedBackupMode=false;
    if (mBackupTarget != null && mBackupAppName.equals(processName)) {
      isRestrictedBackupMode=(mBackupTarget.backupMode == BackupRecord.RESTORE) || (mBackupTarget.backupMode == BackupRecord.BACKUP_FULL);
    }
    ensurePackageDexOpt(app.instrumentationInfo != null ? app.instrumentationInfo.packageName : app.info.packageName);
    if (app.instrumentationClass != null) {
      ensurePackageDexOpt(app.instrumentationClass.getPackageName());
    }
    if (DEBUG_CONFIGURATION)     Slog.v(TAG,""String_Node_Str"" + processName + ""String_Node_Str""+ mConfiguration);
    thread.bindApplication(processName,app.instrumentationInfo != null ? app.instrumentationInfo : app.info,providers,app.instrumentationClass,app.instrumentationProfileFile,app.instrumentationArguments,app.instrumentationWatcher,testMode,isRestrictedBackupMode || !normalMode,mConfiguration,getCommonServicesLocked());
    updateLruProcessLocked(app,false,true);
    app.lastRequestedGc=app.lastLowMemory=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Slog.w(TAG,""String_Node_Str"",e);
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,""String_Node_Str"" + app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  ActivityRecord hr=mMainStack.topRunningActivityLocked(null);
  if (hr != null && normalMode) {
    if (hr.app == null && app.info.uid == hr.info.applicationInfo.uid && processName.equals(hr.processName)) {
      try {
        if (mMainStack.realStartActivityLocked(hr,app,true,true)) {
          didSomething=true;
        }
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + hr.intent.getComponent().flattenToShortString(),e);
        badApp=true;
      }
    }
 else {
      mMainStack.ensureActivitiesVisibleLocked(hr,null,processName,0);
    }
  }
  if (!badApp && mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (app.info.uid != sr.appInfo.uid || !processName.equals(sr.processName)) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        realStartServiceLocked(sr,app);
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      badApp=true;
    }
  }
  BroadcastRecord br=mPendingBroadcast;
  if (!badApp && br != null && br.curApp == app) {
    try {
      mPendingBroadcast=null;
      processCurBroadcastLocked(br,app);
      didSomething=true;
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"" + br.curComponent.flattenToShortString(),e);
      badApp=true;
      logBroadcastReceiverDiscardLocked(br);
      finishReceiverLocked(br.receiver,br.resultCode,br.resultData,br.resultExtras,br.resultAbort,true);
      scheduleBroadcastsLocked();
      br.state=BroadcastRecord.IDLE;
    }
  }
  if (!badApp && mBackupTarget != null && mBackupTarget.appInfo.uid == app.info.uid) {
    if (DEBUG_BACKUP)     Slog.v(TAG,""String_Node_Str"" + app);
    ensurePackageDexOpt(mBackupTarget.appInfo.packageName);
    try {
      thread.scheduleCreateBackupAgent(mBackupTarget.appInfo,mBackupTarget.backupMode);
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (badApp) {
    handleAppDiedLocked(app,false);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}"
21906,"void skipCurrentReceiverLocked(ProcessRecord app){
  boolean reschedule=false;
  BroadcastRecord r=app.curReceiver;
  if (r != null) {
    logBroadcastReceiverDiscard(r);
    finishReceiverLocked(r.receiver,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,true);
    reschedule=true;
  }
  r=mPendingBroadcast;
  if (r != null && r.curApp == app) {
    if (DEBUG_BROADCAST)     Slog.v(TAG,""String_Node_Str"" + r);
    logBroadcastReceiverDiscard(r);
    finishReceiverLocked(r.receiver,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,true);
    reschedule=true;
  }
  if (reschedule) {
    scheduleBroadcastsLocked();
  }
}","void skipCurrentReceiverLocked(ProcessRecord app){
  boolean reschedule=false;
  BroadcastRecord r=app.curReceiver;
  if (r != null) {
    logBroadcastReceiverDiscardLocked(r);
    finishReceiverLocked(r.receiver,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,true);
    reschedule=true;
  }
  r=mPendingBroadcast;
  if (r != null && r.curApp == app) {
    if (DEBUG_BROADCAST)     Slog.v(TAG,""String_Node_Str"" + r);
    logBroadcastReceiverDiscardLocked(r);
    finishReceiverLocked(r.receiver,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,true);
    reschedule=true;
  }
  if (reschedule) {
    scheduleBroadcastsLocked();
  }
}"
21907,"static void performReceive(ProcessRecord app,IIntentReceiver receiver,Intent intent,int resultCode,String data,Bundle extras,boolean ordered,boolean sticky) throws RemoteException {
  if (app != null && app.thread != null) {
    app.thread.scheduleRegisteredReceiver(receiver,intent,resultCode,data,extras,ordered,sticky);
  }
 else {
    receiver.performReceive(intent,resultCode,data,extras,ordered,sticky);
  }
}","public void performReceive(Intent intent,int resultCode,String data,Bundle extras,boolean ordered,boolean sticky){
  mHandler.post(new Runnable(){
    public void run(){
synchronized (ActivityManagerService.this) {
        mDidUpdate=true;
      }
      systemReady(goingCallback);
    }
  }
);
}"
21908,"public void handleMessage(Message msg){
switch (msg.what) {
case SHOW_ERROR_MSG:
{
      HashMap data=(HashMap)msg.obj;
synchronized (ActivityManagerService.this) {
        ProcessRecord proc=(ProcessRecord)data.get(""String_Node_Str"");
        if (proc != null && proc.crashDialog != null) {
          Slog.e(TAG,""String_Node_Str"" + proc);
          return;
        }
        AppErrorResult res=(AppErrorResult)data.get(""String_Node_Str"");
        if (!mSleeping && !mShuttingDown) {
          Dialog d=new AppErrorDialog(mContext,res,proc);
          d.show();
          proc.crashDialog=d;
        }
 else {
          res.set(0);
        }
      }
      ensureBootCompleted();
    }
  break;
case SHOW_NOT_RESPONDING_MSG:
{
synchronized (ActivityManagerService.this) {
    HashMap data=(HashMap)msg.obj;
    ProcessRecord proc=(ProcessRecord)data.get(""String_Node_Str"");
    if (proc != null && proc.anrDialog != null) {
      Slog.e(TAG,""String_Node_Str"" + proc);
      return;
    }
    Intent intent=new Intent(""String_Node_Str"");
    if (!mProcessesReady) {
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
    }
    broadcastIntentLocked(null,null,intent,null,null,0,null,null,null,false,false,MY_PID,Process.SYSTEM_UID);
    Dialog d=new AppNotRespondingDialog(ActivityManagerService.this,mContext,proc,(ActivityRecord)data.get(""String_Node_Str""));
    d.show();
    proc.anrDialog=d;
  }
  ensureBootCompleted();
}
break;
case SHOW_STRICT_MODE_VIOLATION_MSG:
{
HashMap<String,Object> data=(HashMap<String,Object>)msg.obj;
synchronized (ActivityManagerService.this) {
ProcessRecord proc=(ProcessRecord)data.get(""String_Node_Str"");
if (proc == null) {
  Slog.e(TAG,""String_Node_Str"");
  break;
}
if (proc.crashDialog != null) {
  Slog.e(TAG,""String_Node_Str"" + proc);
  return;
}
AppErrorResult res=(AppErrorResult)data.get(""String_Node_Str"");
if (!mSleeping && !mShuttingDown) {
  Dialog d=new StrictModeViolationDialog(mContext,res,proc);
  d.show();
  proc.crashDialog=d;
}
 else {
  res.set(0);
}
}
ensureBootCompleted();
}
break;
case SHOW_FACTORY_ERROR_MSG:
{
Dialog d=new FactoryErrorDialog(mContext,msg.getData().getCharSequence(""String_Node_Str""));
d.show();
ensureBootCompleted();
}
break;
case UPDATE_CONFIGURATION_MSG:
{
final ContentResolver resolver=mContext.getContentResolver();
Settings.System.putConfiguration(resolver,(Configuration)msg.obj);
}
break;
case GC_BACKGROUND_PROCESSES_MSG:
{
synchronized (ActivityManagerService.this) {
performAppGcsIfAppropriateLocked();
}
}
break;
case WAIT_FOR_DEBUGGER_MSG:
{
synchronized (ActivityManagerService.this) {
ProcessRecord app=(ProcessRecord)msg.obj;
if (msg.arg1 != 0) {
if (!app.waitedForDebugger) {
Dialog d=new AppWaitingForDebuggerDialog(ActivityManagerService.this,mContext,app);
app.waitDialog=d;
app.waitedForDebugger=true;
d.show();
}
}
 else {
if (app.waitDialog != null) {
app.waitDialog.dismiss();
app.waitDialog=null;
}
}
}
}
break;
case BROADCAST_INTENT_MSG:
{
if (DEBUG_BROADCAST) Slog.v(TAG,""String_Node_Str"");
processNextBroadcast(true);
}
break;
case BROADCAST_TIMEOUT_MSG:
{
if (mDidDexOpt) {
mDidDexOpt=false;
Message nmsg=mHandler.obtainMessage(BROADCAST_TIMEOUT_MSG);
mHandler.sendMessageDelayed(nmsg,BROADCAST_TIMEOUT);
return;
}
if (mProcessesReady) {
broadcastTimeout();
}
}
break;
case SERVICE_TIMEOUT_MSG:
{
if (mDidDexOpt) {
mDidDexOpt=false;
Message nmsg=mHandler.obtainMessage(SERVICE_TIMEOUT_MSG);
nmsg.obj=msg.obj;
mHandler.sendMessageDelayed(nmsg,SERVICE_TIMEOUT);
return;
}
serviceTimeout((ProcessRecord)msg.obj);
}
break;
case UPDATE_TIME_ZONE:
{
synchronized (ActivityManagerService.this) {
for (int i=mLruProcesses.size() - 1; i >= 0; i--) {
ProcessRecord r=mLruProcesses.get(i);
if (r.thread != null) {
try {
r.thread.updateTimeZone();
}
 catch (RemoteException ex) {
Slog.w(TAG,""String_Node_Str"" + r.info.processName);
}
}
}
}
}
break;
case SHOW_UID_ERROR_MSG:
{
AlertDialog d=new BaseErrorDialog(mContext);
d.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ERROR);
d.setCancelable(false);
d.setTitle(""String_Node_Str"");
d.setMessage(""String_Node_Str"");
d.setButton(""String_Node_Str"",mHandler.obtainMessage(IM_FEELING_LUCKY_MSG));
mUidAlert=d;
d.show();
}
break;
case IM_FEELING_LUCKY_MSG:
{
if (mUidAlert != null) {
mUidAlert.dismiss();
mUidAlert=null;
}
}
break;
case PROC_START_TIMEOUT_MSG:
{
if (mDidDexOpt) {
mDidDexOpt=false;
Message nmsg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
nmsg.obj=msg.obj;
mHandler.sendMessageDelayed(nmsg,PROC_START_TIMEOUT);
return;
}
ProcessRecord app=(ProcessRecord)msg.obj;
synchronized (ActivityManagerService.this) {
processStartTimedOutLocked(app);
}
}
break;
case DO_PENDING_ACTIVITY_LAUNCHES_MSG:
{
synchronized (ActivityManagerService.this) {
doPendingActivityLaunchesLocked(true);
}
}
break;
case KILL_APPLICATION_MSG:
{
synchronized (ActivityManagerService.this) {
int uid=msg.arg1;
boolean restart=(msg.arg2 == 1);
String pkg=(String)msg.obj;
forceStopPackageLocked(pkg,uid,restart,false,true);
}
}
break;
case FINALIZE_PENDING_INTENT_MSG:
{
((PendingIntentRecord)msg.obj).completeFinalize();
}
break;
case POST_HEAVY_NOTIFICATION_MSG:
{
INotificationManager inm=NotificationManager.getService();
if (inm == null) {
return;
}
ActivityRecord root=(ActivityRecord)msg.obj;
ProcessRecord process=root.app;
if (process == null) {
return;
}
try {
Context context=mContext.createPackageContext(process.info.packageName,0);
String text=mContext.getString(R.string.heavy_weight_notification,context.getApplicationInfo().loadLabel(context.getPackageManager()));
Notification notification=new Notification();
notification.icon=com.android.internal.R.drawable.stat_sys_adb;
notification.when=0;
notification.flags=Notification.FLAG_ONGOING_EVENT;
notification.tickerText=text;
notification.defaults=0;
notification.sound=null;
notification.vibrate=null;
notification.setLatestEventInfo(context,text,mContext.getText(R.string.heavy_weight_notification_detail),PendingIntent.getActivity(mContext,0,root.intent,PendingIntent.FLAG_CANCEL_CURRENT));
try {
int[] outId=new int[1];
inm.enqueueNotification(""String_Node_Str"",R.string.heavy_weight_notification,notification,outId);
}
 catch (RuntimeException e) {
Slog.w(ActivityManagerService.TAG,""String_Node_Str"",e);
}
catch (RemoteException e) {
}
}
 catch (NameNotFoundException e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
break;
case CANCEL_HEAVY_NOTIFICATION_MSG:
{
INotificationManager inm=NotificationManager.getService();
if (inm == null) {
return;
}
try {
inm.cancelNotification(""String_Node_Str"",R.string.heavy_weight_notification);
}
 catch (RuntimeException e) {
Slog.w(ActivityManagerService.TAG,""String_Node_Str"",e);
}
catch (RemoteException e) {
}
}
break;
case CHECK_EXCESSIVE_WAKE_LOCKS_MSG:
{
synchronized (ActivityManagerService.this) {
checkExcessivePowerUsageLocked(true);
removeMessages(CHECK_EXCESSIVE_WAKE_LOCKS_MSG);
Message nmsg=obtainMessage(CHECK_EXCESSIVE_WAKE_LOCKS_MSG);
sendMessageDelayed(nmsg,POWER_CHECK_DELAY);
}
}
break;
}
}","public void handleMessage(Message msg){
switch (msg.what) {
case SHOW_ERROR_MSG:
{
      HashMap data=(HashMap)msg.obj;
synchronized (ActivityManagerService.this) {
        ProcessRecord proc=(ProcessRecord)data.get(""String_Node_Str"");
        if (proc != null && proc.crashDialog != null) {
          Slog.e(TAG,""String_Node_Str"" + proc);
          return;
        }
        AppErrorResult res=(AppErrorResult)data.get(""String_Node_Str"");
        if (!mSleeping && !mShuttingDown) {
          Dialog d=new AppErrorDialog(mContext,res,proc);
          d.show();
          proc.crashDialog=d;
        }
 else {
          res.set(0);
        }
      }
      ensureBootCompleted();
    }
  break;
case SHOW_NOT_RESPONDING_MSG:
{
synchronized (ActivityManagerService.this) {
    HashMap data=(HashMap)msg.obj;
    ProcessRecord proc=(ProcessRecord)data.get(""String_Node_Str"");
    if (proc != null && proc.anrDialog != null) {
      Slog.e(TAG,""String_Node_Str"" + proc);
      return;
    }
    Intent intent=new Intent(""String_Node_Str"");
    if (!mProcessesReady) {
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
    }
    broadcastIntentLocked(null,null,intent,null,null,0,null,null,null,false,false,MY_PID,Process.SYSTEM_UID);
    Dialog d=new AppNotRespondingDialog(ActivityManagerService.this,mContext,proc,(ActivityRecord)data.get(""String_Node_Str""));
    d.show();
    proc.anrDialog=d;
  }
  ensureBootCompleted();
}
break;
case SHOW_STRICT_MODE_VIOLATION_MSG:
{
HashMap<String,Object> data=(HashMap<String,Object>)msg.obj;
synchronized (ActivityManagerService.this) {
ProcessRecord proc=(ProcessRecord)data.get(""String_Node_Str"");
if (proc == null) {
  Slog.e(TAG,""String_Node_Str"");
  break;
}
if (proc.crashDialog != null) {
  Slog.e(TAG,""String_Node_Str"" + proc);
  return;
}
AppErrorResult res=(AppErrorResult)data.get(""String_Node_Str"");
if (!mSleeping && !mShuttingDown) {
  Dialog d=new StrictModeViolationDialog(mContext,res,proc);
  d.show();
  proc.crashDialog=d;
}
 else {
  res.set(0);
}
}
ensureBootCompleted();
}
break;
case SHOW_FACTORY_ERROR_MSG:
{
Dialog d=new FactoryErrorDialog(mContext,msg.getData().getCharSequence(""String_Node_Str""));
d.show();
ensureBootCompleted();
}
break;
case UPDATE_CONFIGURATION_MSG:
{
final ContentResolver resolver=mContext.getContentResolver();
Settings.System.putConfiguration(resolver,(Configuration)msg.obj);
}
break;
case GC_BACKGROUND_PROCESSES_MSG:
{
synchronized (ActivityManagerService.this) {
performAppGcsIfAppropriateLocked();
}
}
break;
case WAIT_FOR_DEBUGGER_MSG:
{
synchronized (ActivityManagerService.this) {
ProcessRecord app=(ProcessRecord)msg.obj;
if (msg.arg1 != 0) {
if (!app.waitedForDebugger) {
Dialog d=new AppWaitingForDebuggerDialog(ActivityManagerService.this,mContext,app);
app.waitDialog=d;
app.waitedForDebugger=true;
d.show();
}
}
 else {
if (app.waitDialog != null) {
app.waitDialog.dismiss();
app.waitDialog=null;
}
}
}
}
break;
case BROADCAST_INTENT_MSG:
{
if (DEBUG_BROADCAST) Slog.v(TAG,""String_Node_Str"");
processNextBroadcast(true);
}
break;
case BROADCAST_TIMEOUT_MSG:
{
synchronized (ActivityManagerService.this) {
broadcastTimeoutLocked(true);
}
}
break;
case SERVICE_TIMEOUT_MSG:
{
if (mDidDexOpt) {
mDidDexOpt=false;
Message nmsg=mHandler.obtainMessage(SERVICE_TIMEOUT_MSG);
nmsg.obj=msg.obj;
mHandler.sendMessageDelayed(nmsg,SERVICE_TIMEOUT);
return;
}
serviceTimeout((ProcessRecord)msg.obj);
}
break;
case UPDATE_TIME_ZONE:
{
synchronized (ActivityManagerService.this) {
for (int i=mLruProcesses.size() - 1; i >= 0; i--) {
ProcessRecord r=mLruProcesses.get(i);
if (r.thread != null) {
try {
r.thread.updateTimeZone();
}
 catch (RemoteException ex) {
Slog.w(TAG,""String_Node_Str"" + r.info.processName);
}
}
}
}
}
break;
case SHOW_UID_ERROR_MSG:
{
AlertDialog d=new BaseErrorDialog(mContext);
d.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ERROR);
d.setCancelable(false);
d.setTitle(""String_Node_Str"");
d.setMessage(""String_Node_Str"");
d.setButton(""String_Node_Str"",mHandler.obtainMessage(IM_FEELING_LUCKY_MSG));
mUidAlert=d;
d.show();
}
break;
case IM_FEELING_LUCKY_MSG:
{
if (mUidAlert != null) {
mUidAlert.dismiss();
mUidAlert=null;
}
}
break;
case PROC_START_TIMEOUT_MSG:
{
if (mDidDexOpt) {
mDidDexOpt=false;
Message nmsg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
nmsg.obj=msg.obj;
mHandler.sendMessageDelayed(nmsg,PROC_START_TIMEOUT);
return;
}
ProcessRecord app=(ProcessRecord)msg.obj;
synchronized (ActivityManagerService.this) {
processStartTimedOutLocked(app);
}
}
break;
case DO_PENDING_ACTIVITY_LAUNCHES_MSG:
{
synchronized (ActivityManagerService.this) {
doPendingActivityLaunchesLocked(true);
}
}
break;
case KILL_APPLICATION_MSG:
{
synchronized (ActivityManagerService.this) {
int uid=msg.arg1;
boolean restart=(msg.arg2 == 1);
String pkg=(String)msg.obj;
forceStopPackageLocked(pkg,uid,restart,false,true);
}
}
break;
case FINALIZE_PENDING_INTENT_MSG:
{
((PendingIntentRecord)msg.obj).completeFinalize();
}
break;
case POST_HEAVY_NOTIFICATION_MSG:
{
INotificationManager inm=NotificationManager.getService();
if (inm == null) {
return;
}
ActivityRecord root=(ActivityRecord)msg.obj;
ProcessRecord process=root.app;
if (process == null) {
return;
}
try {
Context context=mContext.createPackageContext(process.info.packageName,0);
String text=mContext.getString(R.string.heavy_weight_notification,context.getApplicationInfo().loadLabel(context.getPackageManager()));
Notification notification=new Notification();
notification.icon=com.android.internal.R.drawable.stat_sys_adb;
notification.when=0;
notification.flags=Notification.FLAG_ONGOING_EVENT;
notification.tickerText=text;
notification.defaults=0;
notification.sound=null;
notification.vibrate=null;
notification.setLatestEventInfo(context,text,mContext.getText(R.string.heavy_weight_notification_detail),PendingIntent.getActivity(mContext,0,root.intent,PendingIntent.FLAG_CANCEL_CURRENT));
try {
int[] outId=new int[1];
inm.enqueueNotification(""String_Node_Str"",R.string.heavy_weight_notification,notification,outId);
}
 catch (RuntimeException e) {
Slog.w(ActivityManagerService.TAG,""String_Node_Str"",e);
}
catch (RemoteException e) {
}
}
 catch (NameNotFoundException e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
break;
case CANCEL_HEAVY_NOTIFICATION_MSG:
{
INotificationManager inm=NotificationManager.getService();
if (inm == null) {
return;
}
try {
inm.cancelNotification(""String_Node_Str"",R.string.heavy_weight_notification);
}
 catch (RuntimeException e) {
Slog.w(ActivityManagerService.TAG,""String_Node_Str"",e);
}
catch (RemoteException e) {
}
}
break;
case CHECK_EXCESSIVE_WAKE_LOCKS_MSG:
{
synchronized (ActivityManagerService.this) {
checkExcessivePowerUsageLocked(true);
removeMessages(CHECK_EXCESSIVE_WAKE_LOCKS_MSG);
Message nmsg=obtainMessage(CHECK_EXCESSIVE_WAKE_LOCKS_MSG);
sendMessageDelayed(nmsg,POWER_CHECK_DELAY);
}
}
break;
}
}"
21909,"/** 
 * Populates the database map of values with the appropriate RRULE, RDATE, EXRULE, and EXDATE values extracted from the parsed iCalendar component.
 * @param component The iCalendar component containing the desiredrecurrence specification.
 * @param values The db values that should be updated.
 * @return true if the component contained the necessary informationto specify a recurrence.  The required fields are DTSTART, one of DTEND/DURATION, and one of RRULE/RDATE.  Returns false if there was an error, including if the date is out of range.
 */
public static boolean populateContentValues(ICalendar.Component component,ContentValues values){
  ICalendar.Property dtstartProperty=component.getFirstProperty(""String_Node_Str"");
  String dtstart=dtstartProperty.getValue();
  ICalendar.Parameter tzidParam=dtstartProperty.getFirstParameter(""String_Node_Str"");
  String tzid=tzidParam == null ? null : tzidParam.value;
  Time start=new Time(tzidParam == null ? Time.TIMEZONE_UTC : tzid);
  boolean inUtc=start.parse(dtstart);
  boolean allDay=start.allDay;
  if (inUtc) {
    tzid=Time.TIMEZONE_UTC;
  }
  String duration=computeDuration(start,component);
  String rrule=flattenProperties(component,""String_Node_Str"");
  String rdate=extractDates(component.getFirstProperty(""String_Node_Str""));
  String exrule=flattenProperties(component,""String_Node_Str"");
  String exdate=extractDates(component.getFirstProperty(""String_Node_Str""));
  if ((TextUtils.isEmpty(dtstart)) || (TextUtils.isEmpty(duration)) || ((TextUtils.isEmpty(rrule)) && (TextUtils.isEmpty(rdate)))) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + component.toString());
    }
    return false;
  }
  if (allDay) {
    start.timezone=Time.TIMEZONE_UTC;
  }
  long millis=start.toMillis(false);
  values.put(Calendar.Events.DTSTART,millis);
  if (millis == -1) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + component.toString());
    }
    return false;
  }
  values.put(Calendar.Events.RRULE,rrule);
  values.put(Calendar.Events.RDATE,rdate);
  values.put(Calendar.Events.EXRULE,exrule);
  values.put(Calendar.Events.EXDATE,exdate);
  values.put(Calendar.Events.EVENT_TIMEZONE,tzid);
  values.put(Calendar.Events.DURATION,duration);
  values.put(Calendar.Events.ALL_DAY,allDay ? 1 : 0);
  return true;
}","/** 
 * Populates the database map of values with the appropriate RRULE, RDATE, EXRULE, and EXDATE values extracted from the parsed iCalendar component.
 * @param component The iCalendar component containing the desiredrecurrence specification.
 * @param values The db values that should be updated.
 * @return true if the component contained the necessary informationto specify a recurrence.  The required fields are DTSTART, one of DTEND/DURATION, and one of RRULE/RDATE.  Returns false if there was an error, including if the date is out of range.
 */
public static boolean populateContentValues(ICalendar.Component component,ContentValues values){
  ICalendar.Property dtstartProperty=component.getFirstProperty(""String_Node_Str"");
  String dtstart=dtstartProperty.getValue();
  ICalendar.Parameter tzidParam=dtstartProperty.getFirstParameter(""String_Node_Str"");
  String tzid=tzidParam == null ? null : tzidParam.value;
  Time start=new Time(tzidParam == null ? Time.TIMEZONE_UTC : tzid);
  boolean inUtc=start.parse(dtstart);
  boolean allDay=start.allDay;
  if (inUtc || allDay) {
    tzid=Time.TIMEZONE_UTC;
  }
  String duration=computeDuration(start,component);
  String rrule=flattenProperties(component,""String_Node_Str"");
  String rdate=extractDates(component.getFirstProperty(""String_Node_Str""));
  String exrule=flattenProperties(component,""String_Node_Str"");
  String exdate=extractDates(component.getFirstProperty(""String_Node_Str""));
  if ((TextUtils.isEmpty(dtstart)) || (TextUtils.isEmpty(duration)) || ((TextUtils.isEmpty(rrule)) && (TextUtils.isEmpty(rdate)))) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + component.toString());
    }
    return false;
  }
  if (allDay) {
    start.timezone=Time.TIMEZONE_UTC;
  }
  long millis=start.toMillis(false);
  values.put(Calendar.Events.DTSTART,millis);
  if (millis == -1) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"" + component.toString());
    }
    return false;
  }
  values.put(Calendar.Events.RRULE,rrule);
  values.put(Calendar.Events.RDATE,rdate);
  values.put(Calendar.Events.EXRULE,exrule);
  values.put(Calendar.Events.EXDATE,exdate);
  values.put(Calendar.Events.EVENT_TIMEZONE,tzid);
  values.put(Calendar.Events.DURATION,duration);
  values.put(Calendar.Events.ALL_DAY,allDay ? 1 : 0);
  return true;
}"
21910,"@SmallTest public void testRecurrenceSet2() throws Exception {
  String recurrence=""String_Node_Str"" + ""String_Node_Str"";
  verifyPopulateContentValues(recurrence,""String_Node_Str"",null,null,null,1250812800000L,null,""String_Node_Str"",1);
}","@SmallTest public void testRecurrenceSet2() throws Exception {
  String recurrence=""String_Node_Str"" + ""String_Node_Str"";
  verifyPopulateContentValues(recurrence,""String_Node_Str"",null,null,null,1250812800000L,""String_Node_Str"",""String_Node_Str"",1);
}"
21911,"@SmallTest public void testRecurrenceSet1() throws Exception {
  String recurrence=""String_Node_Str"" + ""String_Node_Str"";
  verifyPopulateContentValues(recurrence,""String_Node_Str"",null,null,null,1250812800000L,null,""String_Node_Str"",1);
}","@SmallTest public void testRecurrenceSet1() throws Exception {
  String recurrence=""String_Node_Str"" + ""String_Node_Str"";
  verifyPopulateContentValues(recurrence,""String_Node_Str"",null,null,null,1250812800000L,""String_Node_Str"",""String_Node_Str"",1);
}"
21912,"private static void showUsage(){
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","private static void showUsage(){
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}"
21913,"private void run(String[] args) throws Exception {
  if (args.length < 1) {
    showUsage();
    return;
  }
  mAm=ActivityManagerNative.getDefault();
  if (mAm == null) {
    System.err.println(NO_SYSTEM_ERROR_CODE);
    throw new AndroidException(""String_Node_Str"");
  }
  mArgs=args;
  String op=args[0];
  mNextArg=1;
  if (op.equals(""String_Node_Str"")) {
    runStart();
  }
 else   if (op.equals(""String_Node_Str"")) {
    runStartService();
  }
 else   if (op.equals(""String_Node_Str"")) {
    runInstrument();
  }
 else   if (op.equals(""String_Node_Str"")) {
    sendBroadcast();
  }
 else   if (op.equals(""String_Node_Str"")) {
    runProfile();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + op);
  }
}","void run() throws RemoteException {
  try {
    printMessageForState();
    mAm.setActivityController(this);
    mState=STATE_NORMAL;
    InputStreamReader converter=new InputStreamReader(System.in);
    BufferedReader in=new BufferedReader(converter);
    String line;
    while ((line=in.readLine()) != null) {
      boolean addNewline=true;
      if (line.length() <= 0) {
        addNewline=false;
      }
 else       if (""String_Node_Str"".equals(line) || ""String_Node_Str"".equals(line)) {
        resumeController(RESULT_DEFAULT);
        break;
      }
 else       if (mState == STATE_CRASHED) {
        if (""String_Node_Str"".equals(line) || ""String_Node_Str"".equals(line)) {
          resumeController(RESULT_CRASH_DIALOG);
        }
 else         if (""String_Node_Str"".equals(line) || ""String_Node_Str"".equals(line)) {
          resumeController(RESULT_CRASH_KILL);
        }
 else {
          System.out.println(""String_Node_Str"" + line);
        }
      }
 else       if (mState == STATE_ANR) {
        if (""String_Node_Str"".equals(line) || ""String_Node_Str"".equals(line)) {
          resumeController(RESULT_ANR_DIALOG);
        }
 else         if (""String_Node_Str"".equals(line) || ""String_Node_Str"".equals(line)) {
          resumeController(RESULT_ANR_KILL);
        }
 else         if (""String_Node_Str"".equals(line) || ""String_Node_Str"".equals(line)) {
          resumeController(RESULT_ANR_WAIT);
        }
 else {
          System.out.println(""String_Node_Str"" + line);
        }
      }
 else       if (mState == STATE_EARLY_ANR) {
        if (""String_Node_Str"".equals(line) || ""String_Node_Str"".equals(line)) {
          resumeController(RESULT_EARLY_ANR_CONTINUE);
        }
 else         if (""String_Node_Str"".equals(line) || ""String_Node_Str"".equals(line)) {
          resumeController(RESULT_EARLY_ANR_KILL);
        }
 else {
          System.out.println(""String_Node_Str"" + line);
        }
      }
 else {
        System.out.println(""String_Node_Str"" + line);
      }
synchronized (this) {
        if (addNewline) {
          System.out.println(""String_Node_Str"");
        }
        printMessageForState();
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    mAm.setActivityController(null);
  }
}"
21914,"String codeToString(int code){
  if (localLOGV) {
switch (code) {
case LAUNCH_ACTIVITY:
      return ""String_Node_Str"";
case PAUSE_ACTIVITY:
    return ""String_Node_Str"";
case PAUSE_ACTIVITY_FINISHING:
  return ""String_Node_Str"";
case STOP_ACTIVITY_SHOW:
return ""String_Node_Str"";
case STOP_ACTIVITY_HIDE:
return ""String_Node_Str"";
case SHOW_WINDOW:
return ""String_Node_Str"";
case HIDE_WINDOW:
return ""String_Node_Str"";
case RESUME_ACTIVITY:
return ""String_Node_Str"";
case SEND_RESULT:
return ""String_Node_Str"";
case DESTROY_ACTIVITY:
return ""String_Node_Str"";
case BIND_APPLICATION:
return ""String_Node_Str"";
case EXIT_APPLICATION:
return ""String_Node_Str"";
case NEW_INTENT:
return ""String_Node_Str"";
case RECEIVER:
return ""String_Node_Str"";
case CREATE_SERVICE:
return ""String_Node_Str"";
case SERVICE_ARGS:
return ""String_Node_Str"";
case STOP_SERVICE:
return ""String_Node_Str"";
case REQUEST_THUMBNAIL:
return ""String_Node_Str"";
case CONFIGURATION_CHANGED:
return ""String_Node_Str"";
case CLEAN_UP_CONTEXT:
return ""String_Node_Str"";
case GC_WHEN_IDLE:
return ""String_Node_Str"";
case BIND_SERVICE:
return ""String_Node_Str"";
case UNBIND_SERVICE:
return ""String_Node_Str"";
case DUMP_SERVICE:
return ""String_Node_Str"";
case LOW_MEMORY:
return ""String_Node_Str"";
case ACTIVITY_CONFIGURATION_CHANGED:
return ""String_Node_Str"";
case RELAUNCH_ACTIVITY:
return ""String_Node_Str"";
case PROFILER_CONTROL:
return ""String_Node_Str"";
case CREATE_BACKUP_AGENT:
return ""String_Node_Str"";
case DESTROY_BACKUP_AGENT:
return ""String_Node_Str"";
case SUICIDE:
return ""String_Node_Str"";
case REMOVE_PROVIDER:
return ""String_Node_Str"";
case ENABLE_JIT:
return ""String_Node_Str"";
case DISPATCH_PACKAGE_BROADCAST:
return ""String_Node_Str"";
case SCHEDULE_CRASH:
return ""String_Node_Str"";
}
}
return ""String_Node_Str"";
}","String codeToString(int code){
  if (DEBUG_MESSAGES) {
switch (code) {
case LAUNCH_ACTIVITY:
      return ""String_Node_Str"";
case PAUSE_ACTIVITY:
    return ""String_Node_Str"";
case PAUSE_ACTIVITY_FINISHING:
  return ""String_Node_Str"";
case STOP_ACTIVITY_SHOW:
return ""String_Node_Str"";
case STOP_ACTIVITY_HIDE:
return ""String_Node_Str"";
case SHOW_WINDOW:
return ""String_Node_Str"";
case HIDE_WINDOW:
return ""String_Node_Str"";
case RESUME_ACTIVITY:
return ""String_Node_Str"";
case SEND_RESULT:
return ""String_Node_Str"";
case DESTROY_ACTIVITY:
return ""String_Node_Str"";
case BIND_APPLICATION:
return ""String_Node_Str"";
case EXIT_APPLICATION:
return ""String_Node_Str"";
case NEW_INTENT:
return ""String_Node_Str"";
case RECEIVER:
return ""String_Node_Str"";
case CREATE_SERVICE:
return ""String_Node_Str"";
case SERVICE_ARGS:
return ""String_Node_Str"";
case STOP_SERVICE:
return ""String_Node_Str"";
case REQUEST_THUMBNAIL:
return ""String_Node_Str"";
case CONFIGURATION_CHANGED:
return ""String_Node_Str"";
case CLEAN_UP_CONTEXT:
return ""String_Node_Str"";
case GC_WHEN_IDLE:
return ""String_Node_Str"";
case BIND_SERVICE:
return ""String_Node_Str"";
case UNBIND_SERVICE:
return ""String_Node_Str"";
case DUMP_SERVICE:
return ""String_Node_Str"";
case LOW_MEMORY:
return ""String_Node_Str"";
case ACTIVITY_CONFIGURATION_CHANGED:
return ""String_Node_Str"";
case RELAUNCH_ACTIVITY:
return ""String_Node_Str"";
case PROFILER_CONTROL:
return ""String_Node_Str"";
case CREATE_BACKUP_AGENT:
return ""String_Node_Str"";
case DESTROY_BACKUP_AGENT:
return ""String_Node_Str"";
case SUICIDE:
return ""String_Node_Str"";
case REMOVE_PROVIDER:
return ""String_Node_Str"";
case ENABLE_JIT:
return ""String_Node_Str"";
case DISPATCH_PACKAGE_BROADCAST:
return ""String_Node_Str"";
case SCHEDULE_CRASH:
return ""String_Node_Str"";
}
}
return ""String_Node_Str"";
}"
21915,"private final void queueOrSendMessage(int what,Object obj,int arg1,int arg2){
synchronized (this) {
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + what + ""String_Node_Str""+ mH.codeToString(what)+ ""String_Node_Str""+ arg1+ ""String_Node_Str""+ obj);
    Message msg=Message.obtain();
    msg.what=what;
    msg.obj=obj;
    msg.arg1=arg1;
    msg.arg2=arg2;
    mH.sendMessage(msg);
  }
}","private final void queueOrSendMessage(int what,Object obj,int arg1,int arg2){
synchronized (this) {
    if (DEBUG_MESSAGES)     Slog.v(TAG,""String_Node_Str"" + what + ""String_Node_Str""+ mH.codeToString(what)+ ""String_Node_Str""+ arg1+ ""String_Node_Str""+ obj);
    Message msg=Message.obtain();
    msg.what=what;
    msg.obj=obj;
    msg.arg1=arg1;
    msg.arg2=arg2;
    mH.sendMessage(msg);
  }
}"
21916,"public static final void main(String[] args){
  SamplingProfilerIntegration.start();
  Process.setArgV0(""String_Node_Str"");
  Looper.prepareMainLooper();
  if (sMainThreadHandler == null) {
    sMainThreadHandler=new Handler();
  }
  ActivityThread thread=new ActivityThread();
  thread.attach(false);
  Looper.loop();
  if (Process.supportsProcesses()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  thread.detach();
  String name=(thread.mInitialApplication != null) ? thread.mInitialApplication.getPackageName() : ""String_Node_Str"";
  Slog.i(TAG,""String_Node_Str"" + name + ""String_Node_Str"");
}","public static final void main(String[] args){
  SamplingProfilerIntegration.start();
  Process.setArgV0(""String_Node_Str"");
  Looper.prepareMainLooper();
  if (sMainThreadHandler == null) {
    sMainThreadHandler=new Handler();
  }
  ActivityThread thread=new ActivityThread();
  thread.attach(false);
  if (false) {
    Looper.myLooper().setMessageLogging(new LogPrinter(Log.DEBUG,""String_Node_Str""));
  }
  Looper.loop();
  if (Process.supportsProcesses()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  thread.detach();
  String name=(thread.mInitialApplication != null) ? thread.mInitialApplication.getPackageName() : ""String_Node_Str"";
  Slog.i(TAG,""String_Node_Str"" + name + ""String_Node_Str"");
}"
21917,"public void handleMessage(Message msg){
switch (msg.what) {
case LAUNCH_ACTIVITY:
{
      ActivityClientRecord r=(ActivityClientRecord)msg.obj;
      r.packageInfo=getPackageInfoNoCheck(r.activityInfo.applicationInfo);
      handleLaunchActivity(r,null);
    }
  break;
case RELAUNCH_ACTIVITY:
{
  ActivityClientRecord r=(ActivityClientRecord)msg.obj;
  handleRelaunchActivity(r,msg.arg1);
}
break;
case PAUSE_ACTIVITY:
handlePauseActivity((IBinder)msg.obj,false,msg.arg1 != 0,msg.arg2);
maybeSnapshot();
break;
case PAUSE_ACTIVITY_FINISHING:
handlePauseActivity((IBinder)msg.obj,true,msg.arg1 != 0,msg.arg2);
break;
case STOP_ACTIVITY_SHOW:
handleStopActivity((IBinder)msg.obj,true,msg.arg2);
break;
case STOP_ACTIVITY_HIDE:
handleStopActivity((IBinder)msg.obj,false,msg.arg2);
break;
case SHOW_WINDOW:
handleWindowVisibility((IBinder)msg.obj,true);
break;
case HIDE_WINDOW:
handleWindowVisibility((IBinder)msg.obj,false);
break;
case RESUME_ACTIVITY:
handleResumeActivity((IBinder)msg.obj,true,msg.arg1 != 0);
break;
case SEND_RESULT:
handleSendResult((ResultData)msg.obj);
break;
case DESTROY_ACTIVITY:
handleDestroyActivity((IBinder)msg.obj,msg.arg1 != 0,msg.arg2,false);
break;
case BIND_APPLICATION:
AppBindData data=(AppBindData)msg.obj;
handleBindApplication(data);
break;
case EXIT_APPLICATION:
if (mInitialApplication != null) {
mInitialApplication.onTerminate();
}
Looper.myLooper().quit();
break;
case NEW_INTENT:
handleNewIntent((NewIntentData)msg.obj);
break;
case RECEIVER:
handleReceiver((ReceiverData)msg.obj);
maybeSnapshot();
break;
case CREATE_SERVICE:
handleCreateService((CreateServiceData)msg.obj);
break;
case BIND_SERVICE:
handleBindService((BindServiceData)msg.obj);
break;
case UNBIND_SERVICE:
handleUnbindService((BindServiceData)msg.obj);
break;
case SERVICE_ARGS:
handleServiceArgs((ServiceArgsData)msg.obj);
break;
case STOP_SERVICE:
handleStopService((IBinder)msg.obj);
maybeSnapshot();
break;
case REQUEST_THUMBNAIL:
handleRequestThumbnail((IBinder)msg.obj);
break;
case CONFIGURATION_CHANGED:
handleConfigurationChanged((Configuration)msg.obj);
break;
case CLEAN_UP_CONTEXT:
ContextCleanupInfo cci=(ContextCleanupInfo)msg.obj;
cci.context.performFinalCleanup(cci.who,cci.what);
break;
case GC_WHEN_IDLE:
scheduleGcIdler();
break;
case DUMP_SERVICE:
handleDumpService((DumpServiceInfo)msg.obj);
break;
case LOW_MEMORY:
handleLowMemory();
break;
case ACTIVITY_CONFIGURATION_CHANGED:
handleActivityConfigurationChanged((IBinder)msg.obj);
break;
case PROFILER_CONTROL:
handleProfilerControl(msg.arg1 != 0,(ProfilerControlData)msg.obj);
break;
case CREATE_BACKUP_AGENT:
handleCreateBackupAgent((CreateBackupAgentData)msg.obj);
break;
case DESTROY_BACKUP_AGENT:
handleDestroyBackupAgent((CreateBackupAgentData)msg.obj);
break;
case SUICIDE:
Process.killProcess(Process.myPid());
break;
case REMOVE_PROVIDER:
completeRemoveProvider((IContentProvider)msg.obj);
break;
case ENABLE_JIT:
ensureJitEnabled();
break;
case DISPATCH_PACKAGE_BROADCAST:
handleDispatchPackageBroadcast(msg.arg1,(String[])msg.obj);
break;
case SCHEDULE_CRASH:
throw new RemoteServiceException((String)msg.obj);
}
}","public void handleMessage(Message msg){
  if (DEBUG_MESSAGES)   Slog.v(TAG,""String_Node_Str"" + msg.what);
switch (msg.what) {
case LAUNCH_ACTIVITY:
{
      ActivityClientRecord r=(ActivityClientRecord)msg.obj;
      r.packageInfo=getPackageInfoNoCheck(r.activityInfo.applicationInfo);
      handleLaunchActivity(r,null);
    }
  break;
case RELAUNCH_ACTIVITY:
{
  ActivityClientRecord r=(ActivityClientRecord)msg.obj;
  handleRelaunchActivity(r,msg.arg1);
}
break;
case PAUSE_ACTIVITY:
handlePauseActivity((IBinder)msg.obj,false,msg.arg1 != 0,msg.arg2);
maybeSnapshot();
break;
case PAUSE_ACTIVITY_FINISHING:
handlePauseActivity((IBinder)msg.obj,true,msg.arg1 != 0,msg.arg2);
break;
case STOP_ACTIVITY_SHOW:
handleStopActivity((IBinder)msg.obj,true,msg.arg2);
break;
case STOP_ACTIVITY_HIDE:
handleStopActivity((IBinder)msg.obj,false,msg.arg2);
break;
case SHOW_WINDOW:
handleWindowVisibility((IBinder)msg.obj,true);
break;
case HIDE_WINDOW:
handleWindowVisibility((IBinder)msg.obj,false);
break;
case RESUME_ACTIVITY:
handleResumeActivity((IBinder)msg.obj,true,msg.arg1 != 0);
break;
case SEND_RESULT:
handleSendResult((ResultData)msg.obj);
break;
case DESTROY_ACTIVITY:
handleDestroyActivity((IBinder)msg.obj,msg.arg1 != 0,msg.arg2,false);
break;
case BIND_APPLICATION:
AppBindData data=(AppBindData)msg.obj;
handleBindApplication(data);
break;
case EXIT_APPLICATION:
if (mInitialApplication != null) {
mInitialApplication.onTerminate();
}
Looper.myLooper().quit();
break;
case NEW_INTENT:
handleNewIntent((NewIntentData)msg.obj);
break;
case RECEIVER:
handleReceiver((ReceiverData)msg.obj);
maybeSnapshot();
break;
case CREATE_SERVICE:
handleCreateService((CreateServiceData)msg.obj);
break;
case BIND_SERVICE:
handleBindService((BindServiceData)msg.obj);
break;
case UNBIND_SERVICE:
handleUnbindService((BindServiceData)msg.obj);
break;
case SERVICE_ARGS:
handleServiceArgs((ServiceArgsData)msg.obj);
break;
case STOP_SERVICE:
handleStopService((IBinder)msg.obj);
maybeSnapshot();
break;
case REQUEST_THUMBNAIL:
handleRequestThumbnail((IBinder)msg.obj);
break;
case CONFIGURATION_CHANGED:
handleConfigurationChanged((Configuration)msg.obj);
break;
case CLEAN_UP_CONTEXT:
ContextCleanupInfo cci=(ContextCleanupInfo)msg.obj;
cci.context.performFinalCleanup(cci.who,cci.what);
break;
case GC_WHEN_IDLE:
scheduleGcIdler();
break;
case DUMP_SERVICE:
handleDumpService((DumpServiceInfo)msg.obj);
break;
case LOW_MEMORY:
handleLowMemory();
break;
case ACTIVITY_CONFIGURATION_CHANGED:
handleActivityConfigurationChanged((IBinder)msg.obj);
break;
case PROFILER_CONTROL:
handleProfilerControl(msg.arg1 != 0,(ProfilerControlData)msg.obj);
break;
case CREATE_BACKUP_AGENT:
handleCreateBackupAgent((CreateBackupAgentData)msg.obj);
break;
case DESTROY_BACKUP_AGENT:
handleDestroyBackupAgent((CreateBackupAgentData)msg.obj);
break;
case SUICIDE:
Process.killProcess(Process.myPid());
break;
case REMOVE_PROVIDER:
completeRemoveProvider((IContentProvider)msg.obj);
break;
case ENABLE_JIT:
ensureJitEnabled();
break;
case DISPATCH_PACKAGE_BROADCAST:
handleDispatchPackageBroadcast(msg.arg1,(String[])msg.obj);
break;
case SCHEDULE_CRASH:
throw new RemoteServiceException((String)msg.obj);
}
if (DEBUG_MESSAGES) Slog.v(TAG,""String_Node_Str"" + msg.what);
}"
21918,"/** 
 * Enable or disable the visualization engine.
 * @param enabled requested enable state
 * @return {@link #SUCCESS} in case of success,{@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.
 * @throws IllegalStateException
 */
public int setEnabled(boolean enabled) throws IllegalStateException {
synchronized (mStateLock) {
    if ((enabled && mState != STATE_INITIALIZED) || (!enabled && mState != STATE_ENABLED)) {
      throw (new IllegalStateException(""String_Node_Str"" + mState));
    }
    int status=native_setEnabled(enabled);
    if (status == SUCCESS) {
      mState=enabled ? STATE_ENABLED : STATE_INITIALIZED;
    }
    return status;
  }
}","/** 
 * Enable or disable the visualization engine.
 * @param enabled requested enable state
 * @return {@link #SUCCESS} in case of success,{@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.
 * @throws IllegalStateException
 */
public int setEnabled(boolean enabled) throws IllegalStateException {
synchronized (mStateLock) {
    if (mState == STATE_UNINITIALIZED) {
      throw (new IllegalStateException(""String_Node_Str"" + mState));
    }
    int status=SUCCESS;
    if ((enabled && (mState == STATE_INITIALIZED)) || (!enabled && (mState == STATE_ENABLED))) {
      status=native_setEnabled(enabled);
      if (status == SUCCESS) {
        mState=enabled ? STATE_ENABLED : STATE_INITIALIZED;
      }
    }
    return status;
  }
}"
21919,"/** 
 * It's difficult to discern from the spec when impl.create() should be called, but it seems like a reasonable rule is ""as soon as possible, but not in a context where IOException cannot be thrown""
 * @throws IOException from SocketImpl.create()
 */
private void implCreateIfNeeded() throws IOException {
  if (!implCreated) {
synchronized (this) {
      if (!implCreated) {
        implCreated=true;
        impl.create(true);
      }
    }
  }
}","/** 
 * It's difficult to discern from the spec when impl.create() should be called, but it seems like a reasonable rule is ""as soon as possible, but not in a context where IOException cannot be thrown""
 * @throws IOException from SocketImpl.create()
 */
private void implCreateIfNeeded() throws IOException {
  if (!implCreated) {
synchronized (this) {
      if (!implCreated) {
        try {
          impl.create(true);
        }
  finally {
          implCreated=true;
        }
      }
    }
  }
}"
21920,"/** 
 * It's difficult to discern from the spec when impl.create() should be called, but it seems like a reasonable rule is ""as soon as possible, but not in a context where IOException cannot be thrown""
 * @throws IOException from SocketImpl.create()
 */
private void implCreateIfNeeded() throws IOException {
  if (!implCreated) {
synchronized (this) {
      if (!implCreated) {
        implCreated=true;
        impl.create(true);
      }
    }
  }
}","/** 
 * It's difficult to discern from the spec when impl.create() should be called, but it seems like a reasonable rule is ""as soon as possible, but not in a context where IOException cannot be thrown""
 * @throws IOException from SocketImpl.create()
 */
private void implCreateIfNeeded() throws IOException {
  if (!implCreated) {
synchronized (this) {
      if (!implCreated) {
        try {
          impl.create(true);
        }
  finally {
          implCreated=true;
        }
      }
    }
  }
}"
21921,"private void updateConnectivity(Intent intent){
  NetworkInfo info=(NetworkInfo)(intent.getParcelableExtra(ConnectivityManager.EXTRA_NETWORK_INFO));
  int connectionStatus=intent.getIntExtra(ConnectivityManager.EXTRA_INET_CONDITION,0);
  Slog.d(TAG,""String_Node_Str"" + info + ""String_Node_Str""+ connectionStatus);
  if (info.isConnected() == false)   return;
switch (info.getType()) {
case ConnectivityManager.TYPE_MOBILE:
    if (info.isConnected()) {
      updateDataNetType(info.getSubtype(),connectionStatus);
      updateDataIcon();
      updateSignalStrength();
    }
  break;
case ConnectivityManager.TYPE_WIFI:
if (info.isConnected()) {
  mIsWifiConnected=true;
  mInetCondition=(connectionStatus > INET_CONDITION_THRESHOLD ? 1 : 0);
  int iconId;
  if (mLastWifiSignalLevel == -1) {
    iconId=sWifiSignalImages[mInetCondition][0];
  }
 else {
    iconId=sWifiSignalImages[mInetCondition][mLastWifiSignalLevel];
  }
  mService.setIcon(""String_Node_Str"",iconId,0);
  mService.setIconVisibility(""String_Node_Str"",true);
}
 else {
  mLastWifiSignalLevel=-1;
  mIsWifiConnected=false;
  mInetCondition=0;
  int iconId=sWifiSignalImages[0][0];
  mService.setIcon(""String_Node_Str"",iconId,0);
  mService.setIconVisibility(""String_Node_Str"",false);
}
updateSignalStrength();
break;
}
}","private void updateConnectivity(Intent intent){
  NetworkInfo info=(NetworkInfo)(intent.getParcelableExtra(ConnectivityManager.EXTRA_NETWORK_INFO));
  int connectionStatus=intent.getIntExtra(ConnectivityManager.EXTRA_INET_CONDITION,0);
  Slog.d(TAG,""String_Node_Str"" + info + ""String_Node_Str""+ connectionStatus);
  int inetCondition=(connectionStatus > INET_CONDITION_THRESHOLD ? 1 : 0);
switch (info.getType()) {
case ConnectivityManager.TYPE_MOBILE:
    mInetCondition=inetCondition;
  updateDataNetType(info.getSubtype());
updateDataIcon();
updateSignalStrength();
break;
case ConnectivityManager.TYPE_WIFI:
mInetCondition=inetCondition;
if (info.isConnected()) {
mIsWifiConnected=true;
int iconId;
if (mLastWifiSignalLevel == -1) {
iconId=sWifiSignalImages[mInetCondition][0];
}
 else {
iconId=sWifiSignalImages[mInetCondition][mLastWifiSignalLevel];
}
mService.setIcon(""String_Node_Str"",iconId,0);
mService.setIconVisibility(""String_Node_Str"",true);
}
 else {
mLastWifiSignalLevel=-1;
mIsWifiConnected=false;
int iconId=sWifiSignalImages[0][0];
mService.setIcon(""String_Node_Str"",iconId,0);
mService.setIconVisibility(""String_Node_Str"",false);
}
updateSignalStrength();
break;
}
}"
21922,"@Override public void onDataConnectionStateChanged(int state,int networkType){
  mDataState=state;
  updateDataNetType(networkType,0);
  updateDataIcon();
  updateSignalStrength();
}","@Override public void onDataConnectionStateChanged(int state,int networkType){
  mDataState=state;
  updateDataNetType(networkType);
  updateDataIcon();
}"
21923,"private final void updateDataNetType(int net,int inetCondition){
  mInetCondition=(inetCondition > INET_CONDITION_THRESHOLD ? 1 : 0);
switch (net) {
case TelephonyManager.NETWORK_TYPE_EDGE:
    mDataIconList=sDataNetType_e[mInetCondition];
  break;
case TelephonyManager.NETWORK_TYPE_UMTS:
mDataIconList=sDataNetType_3g[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
case TelephonyManager.NETWORK_TYPE_HSUPA:
case TelephonyManager.NETWORK_TYPE_HSPA:
if (mHspaDataDistinguishable) {
mDataIconList=sDataNetType_h[mInetCondition];
}
 else {
mDataIconList=sDataNetType_3g[mInetCondition];
}
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
mDataIconList=sDataNetType_1x[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_1xRTT:
mDataIconList=sDataNetType_1x[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_EVDO_0:
case TelephonyManager.NETWORK_TYPE_EVDO_A:
case TelephonyManager.NETWORK_TYPE_EVDO_B:
mDataIconList=sDataNetType_3g[mInetCondition];
break;
default :
mDataIconList=sDataNetType_g[mInetCondition];
break;
}
}","private final void updateDataNetType(int net){
switch (net) {
case TelephonyManager.NETWORK_TYPE_EDGE:
    mDataIconList=sDataNetType_e[mInetCondition];
  break;
case TelephonyManager.NETWORK_TYPE_UMTS:
mDataIconList=sDataNetType_3g[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
case TelephonyManager.NETWORK_TYPE_HSUPA:
case TelephonyManager.NETWORK_TYPE_HSPA:
if (mHspaDataDistinguishable) {
mDataIconList=sDataNetType_h[mInetCondition];
}
 else {
mDataIconList=sDataNetType_3g[mInetCondition];
}
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
mDataIconList=sDataNetType_1x[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_1xRTT:
mDataIconList=sDataNetType_1x[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_EVDO_0:
case TelephonyManager.NETWORK_TYPE_EVDO_A:
case TelephonyManager.NETWORK_TYPE_EVDO_B:
mDataIconList=sDataNetType_3g[mInetCondition];
break;
default :
mDataIconList=sDataNetType_g[mInetCondition];
break;
}
}"
21924,"/** 
 * Called when an attempt to fail over to another network has failed.
 * @param info the {@link NetworkInfo} for the failed network
 */
private void handleConnectionFailure(NetworkInfo info){
  mNetTrackers[info.getType()].setTeardownRequested(false);
  String reason=info.getReason();
  String extraInfo=info.getExtraInfo();
  if (DBG) {
    String reasonText;
    if (reason == null) {
      reasonText=""String_Node_Str"";
    }
 else {
      reasonText=""String_Node_Str"" + reason + ""String_Node_Str"";
    }
    Slog.v(TAG,""String_Node_Str"" + info.getTypeName() + ""String_Node_Str""+ reasonText);
  }
  Intent intent=new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
  intent.putExtra(ConnectivityManager.EXTRA_NETWORK_INFO,info);
  if (getActiveNetworkInfo() == null) {
    intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
  }
  if (reason != null) {
    intent.putExtra(ConnectivityManager.EXTRA_REASON,reason);
  }
  if (extraInfo != null) {
    intent.putExtra(ConnectivityManager.EXTRA_EXTRA_INFO,extraInfo);
  }
  if (info.isFailover()) {
    intent.putExtra(ConnectivityManager.EXTRA_IS_FAILOVER,true);
    info.setFailover(false);
  }
  NetworkStateTracker newNet=null;
  if (mNetAttributes[info.getType()].isDefault()) {
    newNet=tryFailover(info.getType());
    if (newNet != null) {
      NetworkInfo switchTo=newNet.getNetworkInfo();
      intent.putExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO,switchTo);
    }
 else {
      intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
    }
  }
  sendStickyBroadcast(intent);
  if (newNet != null && newNet.getNetworkInfo().isConnected()) {
    sendConnectedBroadcast(newNet.getNetworkInfo());
  }
}","/** 
 * Called when an attempt to fail over to another network has failed.
 * @param info the {@link NetworkInfo} for the failed network
 */
private void handleConnectionFailure(NetworkInfo info){
  mNetTrackers[info.getType()].setTeardownRequested(false);
  String reason=info.getReason();
  String extraInfo=info.getExtraInfo();
  if (DBG) {
    String reasonText;
    if (reason == null) {
      reasonText=""String_Node_Str"";
    }
 else {
      reasonText=""String_Node_Str"" + reason + ""String_Node_Str"";
    }
    Slog.v(TAG,""String_Node_Str"" + info.getTypeName() + ""String_Node_Str""+ reasonText);
  }
  Intent intent=new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
  intent.putExtra(ConnectivityManager.EXTRA_NETWORK_INFO,info);
  if (getActiveNetworkInfo() == null) {
    intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
  }
  if (reason != null) {
    intent.putExtra(ConnectivityManager.EXTRA_REASON,reason);
  }
  if (extraInfo != null) {
    intent.putExtra(ConnectivityManager.EXTRA_EXTRA_INFO,extraInfo);
  }
  if (info.isFailover()) {
    intent.putExtra(ConnectivityManager.EXTRA_IS_FAILOVER,true);
    info.setFailover(false);
  }
  NetworkStateTracker newNet=null;
  if (mNetAttributes[info.getType()].isDefault()) {
    newNet=tryFailover(info.getType());
    if (newNet != null) {
      NetworkInfo switchTo=newNet.getNetworkInfo();
      if (!switchTo.isConnected()) {
        mDefaultInetConditionPublished=0;
      }
      intent.putExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO,switchTo);
    }
 else {
      mDefaultInetConditionPublished=0;
      intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
    }
  }
  intent.putExtra(ConnectivityManager.EXTRA_INET_CONDITION,mDefaultInetConditionPublished);
  sendStickyBroadcast(intent);
  if (newNet != null && newNet.getNetworkInfo().isConnected()) {
    sendConnectedBroadcast(newNet.getNetworkInfo());
  }
}"
21925,"/** 
 * Handle a   {@code DISCONNECTED} event. If this pertains to the non-activenetwork, we ignore it. If it is for the active network, we send out a broadcast. But first, we check whether it might be possible to connect to a different network.
 * @param info the {@code NetworkInfo} for the network
 */
private void handleDisconnect(NetworkInfo info){
  int prevNetType=info.getType();
  mNetTrackers[prevNetType].setTeardownRequested(false);
  if (!mNetAttributes[prevNetType].isDefault()) {
    List pids=mNetRequestersPids[prevNetType];
    for (int i=0; i < pids.size(); i++) {
      Integer pid=(Integer)pids.get(i);
      reassessPidDns(pid.intValue(),false);
    }
  }
  Intent intent=new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
  intent.putExtra(ConnectivityManager.EXTRA_NETWORK_INFO,info);
  if (info.isFailover()) {
    intent.putExtra(ConnectivityManager.EXTRA_IS_FAILOVER,true);
    info.setFailover(false);
  }
  if (info.getReason() != null) {
    intent.putExtra(ConnectivityManager.EXTRA_REASON,info.getReason());
  }
  if (info.getExtraInfo() != null) {
    intent.putExtra(ConnectivityManager.EXTRA_EXTRA_INFO,info.getExtraInfo());
  }
  NetworkStateTracker newNet=null;
  if (mNetAttributes[prevNetType].isDefault()) {
    newNet=tryFailover(prevNetType);
    if (newNet != null) {
      NetworkInfo switchTo=newNet.getNetworkInfo();
      intent.putExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO,switchTo);
    }
 else {
      intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
    }
  }
  handleConnectivityChange(prevNetType);
  sendStickyBroadcast(intent);
  if (newNet != null && newNet.getNetworkInfo().isConnected()) {
    sendConnectedBroadcast(newNet.getNetworkInfo());
  }
}","/** 
 * Handle a   {@code DISCONNECTED} event. If this pertains to the non-activenetwork, we ignore it. If it is for the active network, we send out a broadcast. But first, we check whether it might be possible to connect to a different network.
 * @param info the {@code NetworkInfo} for the network
 */
private void handleDisconnect(NetworkInfo info){
  int prevNetType=info.getType();
  mNetTrackers[prevNetType].setTeardownRequested(false);
  if (!mNetAttributes[prevNetType].isDefault()) {
    List pids=mNetRequestersPids[prevNetType];
    for (int i=0; i < pids.size(); i++) {
      Integer pid=(Integer)pids.get(i);
      reassessPidDns(pid.intValue(),false);
    }
  }
  Intent intent=new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
  intent.putExtra(ConnectivityManager.EXTRA_NETWORK_INFO,info);
  if (info.isFailover()) {
    intent.putExtra(ConnectivityManager.EXTRA_IS_FAILOVER,true);
    info.setFailover(false);
  }
  if (info.getReason() != null) {
    intent.putExtra(ConnectivityManager.EXTRA_REASON,info.getReason());
  }
  if (info.getExtraInfo() != null) {
    intent.putExtra(ConnectivityManager.EXTRA_EXTRA_INFO,info.getExtraInfo());
  }
  NetworkStateTracker newNet=null;
  if (mNetAttributes[prevNetType].isDefault()) {
    newNet=tryFailover(prevNetType);
    if (newNet != null) {
      NetworkInfo switchTo=newNet.getNetworkInfo();
      if (!switchTo.isConnected()) {
        mDefaultInetConditionPublished=0;
      }
      intent.putExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO,switchTo);
    }
 else {
      mDefaultInetConditionPublished=0;
      intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
    }
  }
  intent.putExtra(ConnectivityManager.EXTRA_INET_CONDITION,mDefaultInetConditionPublished);
  handleConnectivityChange(prevNetType);
  sendStickyBroadcast(intent);
  if (newNet != null && newNet.getNetworkInfo().isConnected()) {
    sendConnectedBroadcast(newNet.getNetworkInfo());
  }
}"
21926,"/** 
 * Ensure that the top activity in the stack is resumed.
 * @param prev The previously resumed activity, for when in the processof pausing; can be null to call from elsewhere.
 * @return Returns true if something is being resumed, or false ifnothing happened.
 */
final boolean resumeTopActivityLocked(ActivityRecord prev){
  ActivityRecord next=topRunningActivityLocked(null);
  final boolean userLeaving=mUserLeaving;
  mUserLeaving=false;
  if (next == null) {
    if (mMainStack) {
      return mService.startHomeActivityLocked();
    }
  }
  next.delayedResume=false;
  if (mResumedActivity == next && next.state == ActivityState.RESUMED) {
    mService.mWindowManager.executeAppTransition();
    mNoAnimActivities.clear();
    return false;
  }
  if ((mService.mSleeping || mService.mShuttingDown) && mLastPausedActivity == next && next.state == ActivityState.PAUSED) {
    mService.mWindowManager.executeAppTransition();
    mNoAnimActivities.clear();
    return false;
  }
  mStoppingActivities.remove(next);
  mWaitingVisibleActivities.remove(next);
  if (DEBUG_SWITCH)   Slog.v(TAG,""String_Node_Str"" + next);
  if (mPausingActivity != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"" + mPausingActivity);
    return false;
  }
  if (mLastStartedActivity != null && !mLastStartedActivity.finishing) {
    long now=SystemClock.uptimeMillis();
    final boolean inTime=mLastStartedActivity.startTime != 0 && (mLastStartedActivity.startTime + START_WARN_TIME) >= now;
    final int lastUid=mLastStartedActivity.info.applicationInfo.uid;
    final int nextUid=next.info.applicationInfo.uid;
    if (inTime && lastUid != nextUid && lastUid != next.launchedFromUid && mService.checkPermission(android.Manifest.permission.STOP_APP_SWITCHES,-1,next.launchedFromUid) != PackageManager.PERMISSION_GRANTED) {
      mService.showLaunchWarningLocked(mLastStartedActivity,next);
    }
 else {
      next.startTime=now;
      mLastStartedActivity=next;
    }
  }
 else {
    next.startTime=SystemClock.uptimeMillis();
    mLastStartedActivity=next;
  }
  if (mResumedActivity != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"");
    startPausingLocked(userLeaving,false);
    return true;
  }
  if (prev != null && prev != next) {
    if (!prev.waitingVisible && next != null && !next.nowVisible) {
      prev.waitingVisible=true;
      mWaitingVisibleActivities.add(prev);
      if (DEBUG_SWITCH)       Slog.v(TAG,""String_Node_Str"" + prev);
    }
 else {
      if (prev.finishing) {
        mService.mWindowManager.setAppVisibility(prev,false);
        if (DEBUG_SWITCH)         Slog.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
 else {
        if (DEBUG_SWITCH)         Slog.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
    }
  }
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_TRANSITION)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mNoAnimActivities.contains(prev)) {
        mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
      }
 else {
        mService.mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE : WindowManagerPolicy.TRANSIT_TASK_CLOSE);
      }
      mService.mWindowManager.setAppWillBeHidden(prev);
      mService.mWindowManager.setAppVisibility(prev,false);
    }
 else {
      if (DEBUG_TRANSITION)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mNoAnimActivities.contains(next)) {
        mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
      }
 else {
        mService.mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN : WindowManagerPolicy.TRANSIT_TASK_OPEN);
      }
    }
    if (false) {
      mService.mWindowManager.setAppWillBeHidden(prev);
      mService.mWindowManager.setAppVisibility(prev,false);
    }
  }
 else   if (mHistory.size() > 1) {
    if (DEBUG_TRANSITION)     Slog.v(TAG,""String_Node_Str"");
    if (mNoAnimActivities.contains(next)) {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
    }
 else {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN);
    }
  }
  if (next.app != null && next.app.thread != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"" + next);
    mService.mWindowManager.setAppVisibility(next,true);
    ActivityRecord lastResumedActivity=mResumedActivity;
    ActivityState lastState=next.state;
    mService.updateCpuStats();
    next.state=ActivityState.RESUMED;
    mResumedActivity=next;
    next.task.touchActiveTime();
    mService.updateLruProcessLocked(next.app,true,true);
    updateLRUListLocked(next);
    boolean updated=false;
    if (mMainStack) {
synchronized (mService) {
        Configuration config=mService.mWindowManager.updateOrientationFromAppTokens(mService.mConfiguration,next.mayFreezeScreenLocked(next.app) ? next : null);
        if (config != null) {
          next.frozenBeforeDestroy=true;
        }
        updated=mService.updateConfigurationLocked(config,next);
      }
    }
    if (!updated) {
      ActivityRecord nextNext=topRunningActivityLocked(null);
      if (DEBUG_SWITCH)       Slog.i(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ nextNext);
      if (nextNext != next) {
        mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
      }
      if (mMainStack) {
        mService.setFocusedActivityLocked(next);
      }
      ensureActivitiesVisibleLocked(null,0);
      mService.mWindowManager.executeAppTransition();
      mNoAnimActivities.clear();
      return true;
    }
    try {
      ArrayList a=next.results;
      if (a != null) {
        final int N=a.size();
        if (!next.finishing && N > 0) {
          if (DEBUG_RESULTS)           Slog.v(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ a);
          next.app.thread.scheduleSendResult(next,a);
        }
      }
      if (next.newIntents != null) {
        next.app.thread.scheduleNewIntent(next.newIntents,next);
      }
      EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY,System.identityHashCode(next),next.task.taskId,next.shortComponentName);
      next.app.thread.scheduleResumeActivity(next,mService.isNextTransitionForward());
      pauseIfSleepingLocked();
    }
 catch (    Exception e) {
      next.state=lastState;
      mResumedActivity=lastResumedActivity;
      Slog.i(TAG,""String_Node_Str"" + next);
      if (!next.hasBeenLaunched) {
        next.hasBeenLaunched=true;
      }
 else {
        if (SHOW_APP_STARTING_PREVIEW && mMainStack) {
          mService.mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
        }
      }
      startSpecificActivityLocked(next,true,false);
      return true;
    }
    try {
      next.visible=true;
      completeResumeLocked(next);
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"" + next,e);
      requestFinishActivityLocked(next,Activity.RESULT_CANCELED,null,""String_Node_Str"");
      return true;
    }
    next.icicle=null;
    next.haveState=false;
    next.stopped=false;
  }
 else {
    if (!next.hasBeenLaunched) {
      next.hasBeenLaunched=true;
    }
 else {
      if (SHOW_APP_STARTING_PREVIEW) {
        mService.mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
      }
      if (DEBUG_SWITCH)       Slog.v(TAG,""String_Node_Str"" + next);
    }
    startSpecificActivityLocked(next,true,true);
  }
  return true;
}","/** 
 * Ensure that the top activity in the stack is resumed.
 * @param prev The previously resumed activity, for when in the processof pausing; can be null to call from elsewhere.
 * @return Returns true if something is being resumed, or false ifnothing happened.
 */
final boolean resumeTopActivityLocked(ActivityRecord prev){
  ActivityRecord next=topRunningActivityLocked(null);
  final boolean userLeaving=mUserLeaving;
  mUserLeaving=false;
  if (next == null) {
    if (mMainStack) {
      return mService.startHomeActivityLocked();
    }
  }
  next.delayedResume=false;
  if (mResumedActivity == next && next.state == ActivityState.RESUMED) {
    mService.mWindowManager.executeAppTransition();
    mNoAnimActivities.clear();
    return false;
  }
  if ((mService.mSleeping || mService.mShuttingDown) && mLastPausedActivity == next && next.state == ActivityState.PAUSED) {
    mService.mWindowManager.executeAppTransition();
    mNoAnimActivities.clear();
    return false;
  }
  mStoppingActivities.remove(next);
  mWaitingVisibleActivities.remove(next);
  if (DEBUG_SWITCH)   Slog.v(TAG,""String_Node_Str"" + next);
  if (mPausingActivity != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"" + mPausingActivity);
    return false;
  }
  if (false) {
    if (mLastStartedActivity != null && !mLastStartedActivity.finishing) {
      long now=SystemClock.uptimeMillis();
      final boolean inTime=mLastStartedActivity.startTime != 0 && (mLastStartedActivity.startTime + START_WARN_TIME) >= now;
      final int lastUid=mLastStartedActivity.info.applicationInfo.uid;
      final int nextUid=next.info.applicationInfo.uid;
      if (inTime && lastUid != nextUid && lastUid != next.launchedFromUid && mService.checkPermission(android.Manifest.permission.STOP_APP_SWITCHES,-1,next.launchedFromUid) != PackageManager.PERMISSION_GRANTED) {
        mService.showLaunchWarningLocked(mLastStartedActivity,next);
      }
 else {
        next.startTime=now;
        mLastStartedActivity=next;
      }
    }
 else {
      next.startTime=SystemClock.uptimeMillis();
      mLastStartedActivity=next;
    }
  }
  if (mResumedActivity != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"");
    startPausingLocked(userLeaving,false);
    return true;
  }
  if (prev != null && prev != next) {
    if (!prev.waitingVisible && next != null && !next.nowVisible) {
      prev.waitingVisible=true;
      mWaitingVisibleActivities.add(prev);
      if (DEBUG_SWITCH)       Slog.v(TAG,""String_Node_Str"" + prev);
    }
 else {
      if (prev.finishing) {
        mService.mWindowManager.setAppVisibility(prev,false);
        if (DEBUG_SWITCH)         Slog.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
 else {
        if (DEBUG_SWITCH)         Slog.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
    }
  }
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_TRANSITION)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mNoAnimActivities.contains(prev)) {
        mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
      }
 else {
        mService.mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE : WindowManagerPolicy.TRANSIT_TASK_CLOSE);
      }
      mService.mWindowManager.setAppWillBeHidden(prev);
      mService.mWindowManager.setAppVisibility(prev,false);
    }
 else {
      if (DEBUG_TRANSITION)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mNoAnimActivities.contains(next)) {
        mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
      }
 else {
        mService.mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN : WindowManagerPolicy.TRANSIT_TASK_OPEN);
      }
    }
    if (false) {
      mService.mWindowManager.setAppWillBeHidden(prev);
      mService.mWindowManager.setAppVisibility(prev,false);
    }
  }
 else   if (mHistory.size() > 1) {
    if (DEBUG_TRANSITION)     Slog.v(TAG,""String_Node_Str"");
    if (mNoAnimActivities.contains(next)) {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
    }
 else {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN);
    }
  }
  if (next.app != null && next.app.thread != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"" + next);
    mService.mWindowManager.setAppVisibility(next,true);
    ActivityRecord lastResumedActivity=mResumedActivity;
    ActivityState lastState=next.state;
    mService.updateCpuStats();
    next.state=ActivityState.RESUMED;
    mResumedActivity=next;
    next.task.touchActiveTime();
    mService.updateLruProcessLocked(next.app,true,true);
    updateLRUListLocked(next);
    boolean updated=false;
    if (mMainStack) {
synchronized (mService) {
        Configuration config=mService.mWindowManager.updateOrientationFromAppTokens(mService.mConfiguration,next.mayFreezeScreenLocked(next.app) ? next : null);
        if (config != null) {
          next.frozenBeforeDestroy=true;
        }
        updated=mService.updateConfigurationLocked(config,next);
      }
    }
    if (!updated) {
      ActivityRecord nextNext=topRunningActivityLocked(null);
      if (DEBUG_SWITCH)       Slog.i(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ nextNext);
      if (nextNext != next) {
        mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
      }
      if (mMainStack) {
        mService.setFocusedActivityLocked(next);
      }
      ensureActivitiesVisibleLocked(null,0);
      mService.mWindowManager.executeAppTransition();
      mNoAnimActivities.clear();
      return true;
    }
    try {
      ArrayList a=next.results;
      if (a != null) {
        final int N=a.size();
        if (!next.finishing && N > 0) {
          if (DEBUG_RESULTS)           Slog.v(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ a);
          next.app.thread.scheduleSendResult(next,a);
        }
      }
      if (next.newIntents != null) {
        next.app.thread.scheduleNewIntent(next.newIntents,next);
      }
      EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY,System.identityHashCode(next),next.task.taskId,next.shortComponentName);
      next.app.thread.scheduleResumeActivity(next,mService.isNextTransitionForward());
      pauseIfSleepingLocked();
    }
 catch (    Exception e) {
      next.state=lastState;
      mResumedActivity=lastResumedActivity;
      Slog.i(TAG,""String_Node_Str"" + next);
      if (!next.hasBeenLaunched) {
        next.hasBeenLaunched=true;
      }
 else {
        if (SHOW_APP_STARTING_PREVIEW && mMainStack) {
          mService.mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
        }
      }
      startSpecificActivityLocked(next,true,false);
      return true;
    }
    try {
      next.visible=true;
      completeResumeLocked(next);
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"" + next,e);
      requestFinishActivityLocked(next,Activity.RESULT_CANCELED,null,""String_Node_Str"");
      return true;
    }
    next.icicle=null;
    next.haveState=false;
    next.stopped=false;
  }
 else {
    if (!next.hasBeenLaunched) {
      next.hasBeenLaunched=true;
    }
 else {
      if (SHOW_APP_STARTING_PREVIEW) {
        mService.mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
      }
      if (DEBUG_SWITCH)       Slog.v(TAG,""String_Node_Str"" + next);
    }
    startSpecificActivityLocked(next,true,true);
  }
  return true;
}"
21927,"/** 
 * Enable or disable the visualization engine.
 * @param enabled requested enable state
 * @return {@link #SUCCESS} in case of success,{@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.
 * @throws IllegalStateException
 */
public int setEnabled(boolean enabled) throws IllegalStateException {
synchronized (mStateLock) {
    if ((enabled && mState != STATE_INITIALIZED) || (!enabled && mState != STATE_ENABLED)) {
      throw (new IllegalStateException(""String_Node_Str"" + mState));
    }
    int status=native_setEnabled(enabled);
    if (status == SUCCESS) {
      mState=enabled ? STATE_ENABLED : STATE_INITIALIZED;
    }
    return status;
  }
}","/** 
 * Enable or disable the visualization engine.
 * @param enabled requested enable state
 * @return {@link #SUCCESS} in case of success,{@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure.
 * @throws IllegalStateException
 */
public int setEnabled(boolean enabled) throws IllegalStateException {
synchronized (mStateLock) {
    if (mState == STATE_UNINITIALIZED) {
      throw (new IllegalStateException(""String_Node_Str"" + mState));
    }
    int status=SUCCESS;
    if ((enabled && (mState == STATE_INITIALIZED)) || (!enabled && (mState == STATE_ENABLED))) {
      status=native_setEnabled(enabled);
      if (status == SUCCESS) {
        mState=enabled ? STATE_ENABLED : STATE_INITIALIZED;
      }
    }
    return status;
  }
}"
21928,"private void updateConnectivity(Intent intent){
  NetworkInfo info=(NetworkInfo)(intent.getParcelableExtra(ConnectivityManager.EXTRA_NETWORK_INFO));
  int connectionStatus=intent.getIntExtra(ConnectivityManager.EXTRA_INET_CONDITION,0);
  Slog.d(TAG,""String_Node_Str"" + info + ""String_Node_Str""+ connectionStatus);
  if (info.isConnected() == false)   return;
switch (info.getType()) {
case ConnectivityManager.TYPE_MOBILE:
    if (info.isConnected()) {
      updateDataNetType(info.getSubtype(),connectionStatus);
      updateDataIcon();
      updateSignalStrength();
    }
  break;
case ConnectivityManager.TYPE_WIFI:
if (info.isConnected()) {
  mIsWifiConnected=true;
  mInetCondition=(connectionStatus > INET_CONDITION_THRESHOLD ? 1 : 0);
  int iconId;
  if (mLastWifiSignalLevel == -1) {
    iconId=sWifiSignalImages[mInetCondition][0];
  }
 else {
    iconId=sWifiSignalImages[mInetCondition][mLastWifiSignalLevel];
  }
  mService.setIcon(""String_Node_Str"",iconId,0);
  mService.setIconVisibility(""String_Node_Str"",true);
}
 else {
  mLastWifiSignalLevel=-1;
  mIsWifiConnected=false;
  mInetCondition=0;
  int iconId=sWifiSignalImages[0][0];
  mService.setIcon(""String_Node_Str"",iconId,0);
  mService.setIconVisibility(""String_Node_Str"",false);
}
updateSignalStrength();
break;
}
}","private void updateConnectivity(Intent intent){
  NetworkInfo info=(NetworkInfo)(intent.getParcelableExtra(ConnectivityManager.EXTRA_NETWORK_INFO));
  int connectionStatus=intent.getIntExtra(ConnectivityManager.EXTRA_INET_CONDITION,0);
  Slog.d(TAG,""String_Node_Str"" + info + ""String_Node_Str""+ connectionStatus);
  int inetCondition=(connectionStatus > INET_CONDITION_THRESHOLD ? 1 : 0);
switch (info.getType()) {
case ConnectivityManager.TYPE_MOBILE:
    mInetCondition=inetCondition;
  updateDataNetType(info.getSubtype());
updateDataIcon();
updateSignalStrength();
break;
case ConnectivityManager.TYPE_WIFI:
mInetCondition=inetCondition;
if (info.isConnected()) {
mIsWifiConnected=true;
int iconId;
if (mLastWifiSignalLevel == -1) {
iconId=sWifiSignalImages[mInetCondition][0];
}
 else {
iconId=sWifiSignalImages[mInetCondition][mLastWifiSignalLevel];
}
mService.setIcon(""String_Node_Str"",iconId,0);
mService.setIconVisibility(""String_Node_Str"",true);
}
 else {
mLastWifiSignalLevel=-1;
mIsWifiConnected=false;
int iconId=sWifiSignalImages[0][0];
mService.setIcon(""String_Node_Str"",iconId,0);
mService.setIconVisibility(""String_Node_Str"",false);
}
updateSignalStrength();
break;
}
}"
21929,"@Override public void onDataConnectionStateChanged(int state,int networkType){
  mDataState=state;
  updateDataNetType(networkType,0);
  updateDataIcon();
  updateSignalStrength();
}","@Override public void onDataConnectionStateChanged(int state,int networkType){
  mDataState=state;
  updateDataNetType(networkType);
  updateDataIcon();
}"
21930,"private final void updateDataNetType(int net,int inetCondition){
  mInetCondition=(inetCondition > INET_CONDITION_THRESHOLD ? 1 : 0);
switch (net) {
case TelephonyManager.NETWORK_TYPE_EDGE:
    mDataIconList=sDataNetType_e[mInetCondition];
  break;
case TelephonyManager.NETWORK_TYPE_UMTS:
mDataIconList=sDataNetType_3g[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
case TelephonyManager.NETWORK_TYPE_HSUPA:
case TelephonyManager.NETWORK_TYPE_HSPA:
if (mHspaDataDistinguishable) {
mDataIconList=sDataNetType_h[mInetCondition];
}
 else {
mDataIconList=sDataNetType_3g[mInetCondition];
}
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
mDataIconList=sDataNetType_1x[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_1xRTT:
mDataIconList=sDataNetType_1x[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_EVDO_0:
case TelephonyManager.NETWORK_TYPE_EVDO_A:
case TelephonyManager.NETWORK_TYPE_EVDO_B:
mDataIconList=sDataNetType_3g[mInetCondition];
break;
default :
mDataIconList=sDataNetType_g[mInetCondition];
break;
}
}","private final void updateDataNetType(int net){
switch (net) {
case TelephonyManager.NETWORK_TYPE_EDGE:
    mDataIconList=sDataNetType_e[mInetCondition];
  break;
case TelephonyManager.NETWORK_TYPE_UMTS:
mDataIconList=sDataNetType_3g[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
case TelephonyManager.NETWORK_TYPE_HSUPA:
case TelephonyManager.NETWORK_TYPE_HSPA:
if (mHspaDataDistinguishable) {
mDataIconList=sDataNetType_h[mInetCondition];
}
 else {
mDataIconList=sDataNetType_3g[mInetCondition];
}
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
mDataIconList=sDataNetType_1x[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_1xRTT:
mDataIconList=sDataNetType_1x[mInetCondition];
break;
case TelephonyManager.NETWORK_TYPE_EVDO_0:
case TelephonyManager.NETWORK_TYPE_EVDO_A:
case TelephonyManager.NETWORK_TYPE_EVDO_B:
mDataIconList=sDataNetType_3g[mInetCondition];
break;
default :
mDataIconList=sDataNetType_g[mInetCondition];
break;
}
}"
21931,"/** 
 * Called when an attempt to fail over to another network has failed.
 * @param info the {@link NetworkInfo} for the failed network
 */
private void handleConnectionFailure(NetworkInfo info){
  mNetTrackers[info.getType()].setTeardownRequested(false);
  String reason=info.getReason();
  String extraInfo=info.getExtraInfo();
  if (DBG) {
    String reasonText;
    if (reason == null) {
      reasonText=""String_Node_Str"";
    }
 else {
      reasonText=""String_Node_Str"" + reason + ""String_Node_Str"";
    }
    Slog.v(TAG,""String_Node_Str"" + info.getTypeName() + ""String_Node_Str""+ reasonText);
  }
  Intent intent=new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
  intent.putExtra(ConnectivityManager.EXTRA_NETWORK_INFO,info);
  if (getActiveNetworkInfo() == null) {
    intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
  }
  if (reason != null) {
    intent.putExtra(ConnectivityManager.EXTRA_REASON,reason);
  }
  if (extraInfo != null) {
    intent.putExtra(ConnectivityManager.EXTRA_EXTRA_INFO,extraInfo);
  }
  if (info.isFailover()) {
    intent.putExtra(ConnectivityManager.EXTRA_IS_FAILOVER,true);
    info.setFailover(false);
  }
  NetworkStateTracker newNet=null;
  if (mNetAttributes[info.getType()].isDefault()) {
    newNet=tryFailover(info.getType());
    if (newNet != null) {
      NetworkInfo switchTo=newNet.getNetworkInfo();
      intent.putExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO,switchTo);
    }
 else {
      intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
    }
  }
  sendStickyBroadcast(intent);
  if (newNet != null && newNet.getNetworkInfo().isConnected()) {
    sendConnectedBroadcast(newNet.getNetworkInfo());
  }
}","/** 
 * Called when an attempt to fail over to another network has failed.
 * @param info the {@link NetworkInfo} for the failed network
 */
private void handleConnectionFailure(NetworkInfo info){
  mNetTrackers[info.getType()].setTeardownRequested(false);
  String reason=info.getReason();
  String extraInfo=info.getExtraInfo();
  if (DBG) {
    String reasonText;
    if (reason == null) {
      reasonText=""String_Node_Str"";
    }
 else {
      reasonText=""String_Node_Str"" + reason + ""String_Node_Str"";
    }
    Slog.v(TAG,""String_Node_Str"" + info.getTypeName() + ""String_Node_Str""+ reasonText);
  }
  Intent intent=new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
  intent.putExtra(ConnectivityManager.EXTRA_NETWORK_INFO,info);
  if (getActiveNetworkInfo() == null) {
    intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
  }
  if (reason != null) {
    intent.putExtra(ConnectivityManager.EXTRA_REASON,reason);
  }
  if (extraInfo != null) {
    intent.putExtra(ConnectivityManager.EXTRA_EXTRA_INFO,extraInfo);
  }
  if (info.isFailover()) {
    intent.putExtra(ConnectivityManager.EXTRA_IS_FAILOVER,true);
    info.setFailover(false);
  }
  NetworkStateTracker newNet=null;
  if (mNetAttributes[info.getType()].isDefault()) {
    newNet=tryFailover(info.getType());
    if (newNet != null) {
      NetworkInfo switchTo=newNet.getNetworkInfo();
      if (!switchTo.isConnected()) {
        mDefaultInetConditionPublished=0;
      }
      intent.putExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO,switchTo);
    }
 else {
      mDefaultInetConditionPublished=0;
      intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
    }
  }
  intent.putExtra(ConnectivityManager.EXTRA_INET_CONDITION,mDefaultInetConditionPublished);
  sendStickyBroadcast(intent);
  if (newNet != null && newNet.getNetworkInfo().isConnected()) {
    sendConnectedBroadcast(newNet.getNetworkInfo());
  }
}"
21932,"/** 
 * Handle a   {@code DISCONNECTED} event. If this pertains to the non-activenetwork, we ignore it. If it is for the active network, we send out a broadcast. But first, we check whether it might be possible to connect to a different network.
 * @param info the {@code NetworkInfo} for the network
 */
private void handleDisconnect(NetworkInfo info){
  int prevNetType=info.getType();
  mNetTrackers[prevNetType].setTeardownRequested(false);
  if (!mNetAttributes[prevNetType].isDefault()) {
    List pids=mNetRequestersPids[prevNetType];
    for (int i=0; i < pids.size(); i++) {
      Integer pid=(Integer)pids.get(i);
      reassessPidDns(pid.intValue(),false);
    }
  }
  Intent intent=new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
  intent.putExtra(ConnectivityManager.EXTRA_NETWORK_INFO,info);
  if (info.isFailover()) {
    intent.putExtra(ConnectivityManager.EXTRA_IS_FAILOVER,true);
    info.setFailover(false);
  }
  if (info.getReason() != null) {
    intent.putExtra(ConnectivityManager.EXTRA_REASON,info.getReason());
  }
  if (info.getExtraInfo() != null) {
    intent.putExtra(ConnectivityManager.EXTRA_EXTRA_INFO,info.getExtraInfo());
  }
  NetworkStateTracker newNet=null;
  if (mNetAttributes[prevNetType].isDefault()) {
    newNet=tryFailover(prevNetType);
    if (newNet != null) {
      NetworkInfo switchTo=newNet.getNetworkInfo();
      intent.putExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO,switchTo);
    }
 else {
      intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
    }
  }
  handleConnectivityChange(prevNetType);
  sendStickyBroadcast(intent);
  if (newNet != null && newNet.getNetworkInfo().isConnected()) {
    sendConnectedBroadcast(newNet.getNetworkInfo());
  }
}","/** 
 * Handle a   {@code DISCONNECTED} event. If this pertains to the non-activenetwork, we ignore it. If it is for the active network, we send out a broadcast. But first, we check whether it might be possible to connect to a different network.
 * @param info the {@code NetworkInfo} for the network
 */
private void handleDisconnect(NetworkInfo info){
  int prevNetType=info.getType();
  mNetTrackers[prevNetType].setTeardownRequested(false);
  if (!mNetAttributes[prevNetType].isDefault()) {
    List pids=mNetRequestersPids[prevNetType];
    for (int i=0; i < pids.size(); i++) {
      Integer pid=(Integer)pids.get(i);
      reassessPidDns(pid.intValue(),false);
    }
  }
  Intent intent=new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
  intent.putExtra(ConnectivityManager.EXTRA_NETWORK_INFO,info);
  if (info.isFailover()) {
    intent.putExtra(ConnectivityManager.EXTRA_IS_FAILOVER,true);
    info.setFailover(false);
  }
  if (info.getReason() != null) {
    intent.putExtra(ConnectivityManager.EXTRA_REASON,info.getReason());
  }
  if (info.getExtraInfo() != null) {
    intent.putExtra(ConnectivityManager.EXTRA_EXTRA_INFO,info.getExtraInfo());
  }
  NetworkStateTracker newNet=null;
  if (mNetAttributes[prevNetType].isDefault()) {
    newNet=tryFailover(prevNetType);
    if (newNet != null) {
      NetworkInfo switchTo=newNet.getNetworkInfo();
      if (!switchTo.isConnected()) {
        mDefaultInetConditionPublished=0;
      }
      intent.putExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO,switchTo);
    }
 else {
      mDefaultInetConditionPublished=0;
      intent.putExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,true);
    }
  }
  intent.putExtra(ConnectivityManager.EXTRA_INET_CONDITION,mDefaultInetConditionPublished);
  handleConnectivityChange(prevNetType);
  sendStickyBroadcast(intent);
  if (newNet != null && newNet.getNetworkInfo().isConnected()) {
    sendConnectedBroadcast(newNet.getNetworkInfo());
  }
}"
21933,"/** 
 * Ensure that the top activity in the stack is resumed.
 * @param prev The previously resumed activity, for when in the processof pausing; can be null to call from elsewhere.
 * @return Returns true if something is being resumed, or false ifnothing happened.
 */
final boolean resumeTopActivityLocked(ActivityRecord prev){
  ActivityRecord next=topRunningActivityLocked(null);
  final boolean userLeaving=mUserLeaving;
  mUserLeaving=false;
  if (next == null) {
    if (mMainStack) {
      return mService.startHomeActivityLocked();
    }
  }
  next.delayedResume=false;
  if (mResumedActivity == next && next.state == ActivityState.RESUMED) {
    mService.mWindowManager.executeAppTransition();
    mNoAnimActivities.clear();
    return false;
  }
  if ((mService.mSleeping || mService.mShuttingDown) && mLastPausedActivity == next && next.state == ActivityState.PAUSED) {
    mService.mWindowManager.executeAppTransition();
    mNoAnimActivities.clear();
    return false;
  }
  mStoppingActivities.remove(next);
  mWaitingVisibleActivities.remove(next);
  if (DEBUG_SWITCH)   Slog.v(TAG,""String_Node_Str"" + next);
  if (mPausingActivity != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"" + mPausingActivity);
    return false;
  }
  if (mLastStartedActivity != null && !mLastStartedActivity.finishing) {
    long now=SystemClock.uptimeMillis();
    final boolean inTime=mLastStartedActivity.startTime != 0 && (mLastStartedActivity.startTime + START_WARN_TIME) >= now;
    final int lastUid=mLastStartedActivity.info.applicationInfo.uid;
    final int nextUid=next.info.applicationInfo.uid;
    if (inTime && lastUid != nextUid && lastUid != next.launchedFromUid && mService.checkPermission(android.Manifest.permission.STOP_APP_SWITCHES,-1,next.launchedFromUid) != PackageManager.PERMISSION_GRANTED) {
      mService.showLaunchWarningLocked(mLastStartedActivity,next);
    }
 else {
      next.startTime=now;
      mLastStartedActivity=next;
    }
  }
 else {
    next.startTime=SystemClock.uptimeMillis();
    mLastStartedActivity=next;
  }
  if (mResumedActivity != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"");
    startPausingLocked(userLeaving,false);
    return true;
  }
  if (prev != null && prev != next) {
    if (!prev.waitingVisible && next != null && !next.nowVisible) {
      prev.waitingVisible=true;
      mWaitingVisibleActivities.add(prev);
      if (DEBUG_SWITCH)       Slog.v(TAG,""String_Node_Str"" + prev);
    }
 else {
      if (prev.finishing) {
        mService.mWindowManager.setAppVisibility(prev,false);
        if (DEBUG_SWITCH)         Slog.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
 else {
        if (DEBUG_SWITCH)         Slog.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
    }
  }
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_TRANSITION)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mNoAnimActivities.contains(prev)) {
        mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
      }
 else {
        mService.mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE : WindowManagerPolicy.TRANSIT_TASK_CLOSE);
      }
      mService.mWindowManager.setAppWillBeHidden(prev);
      mService.mWindowManager.setAppVisibility(prev,false);
    }
 else {
      if (DEBUG_TRANSITION)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mNoAnimActivities.contains(next)) {
        mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
      }
 else {
        mService.mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN : WindowManagerPolicy.TRANSIT_TASK_OPEN);
      }
    }
    if (false) {
      mService.mWindowManager.setAppWillBeHidden(prev);
      mService.mWindowManager.setAppVisibility(prev,false);
    }
  }
 else   if (mHistory.size() > 1) {
    if (DEBUG_TRANSITION)     Slog.v(TAG,""String_Node_Str"");
    if (mNoAnimActivities.contains(next)) {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
    }
 else {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN);
    }
  }
  if (next.app != null && next.app.thread != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"" + next);
    mService.mWindowManager.setAppVisibility(next,true);
    ActivityRecord lastResumedActivity=mResumedActivity;
    ActivityState lastState=next.state;
    mService.updateCpuStats();
    next.state=ActivityState.RESUMED;
    mResumedActivity=next;
    next.task.touchActiveTime();
    mService.updateLruProcessLocked(next.app,true,true);
    updateLRUListLocked(next);
    boolean updated=false;
    if (mMainStack) {
synchronized (mService) {
        Configuration config=mService.mWindowManager.updateOrientationFromAppTokens(mService.mConfiguration,next.mayFreezeScreenLocked(next.app) ? next : null);
        if (config != null) {
          next.frozenBeforeDestroy=true;
        }
        updated=mService.updateConfigurationLocked(config,next);
      }
    }
    if (!updated) {
      ActivityRecord nextNext=topRunningActivityLocked(null);
      if (DEBUG_SWITCH)       Slog.i(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ nextNext);
      if (nextNext != next) {
        mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
      }
      if (mMainStack) {
        mService.setFocusedActivityLocked(next);
      }
      ensureActivitiesVisibleLocked(null,0);
      mService.mWindowManager.executeAppTransition();
      mNoAnimActivities.clear();
      return true;
    }
    try {
      ArrayList a=next.results;
      if (a != null) {
        final int N=a.size();
        if (!next.finishing && N > 0) {
          if (DEBUG_RESULTS)           Slog.v(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ a);
          next.app.thread.scheduleSendResult(next,a);
        }
      }
      if (next.newIntents != null) {
        next.app.thread.scheduleNewIntent(next.newIntents,next);
      }
      EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY,System.identityHashCode(next),next.task.taskId,next.shortComponentName);
      next.app.thread.scheduleResumeActivity(next,mService.isNextTransitionForward());
      pauseIfSleepingLocked();
    }
 catch (    Exception e) {
      next.state=lastState;
      mResumedActivity=lastResumedActivity;
      Slog.i(TAG,""String_Node_Str"" + next);
      if (!next.hasBeenLaunched) {
        next.hasBeenLaunched=true;
      }
 else {
        if (SHOW_APP_STARTING_PREVIEW && mMainStack) {
          mService.mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
        }
      }
      startSpecificActivityLocked(next,true,false);
      return true;
    }
    try {
      next.visible=true;
      completeResumeLocked(next);
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"" + next,e);
      requestFinishActivityLocked(next,Activity.RESULT_CANCELED,null,""String_Node_Str"");
      return true;
    }
    next.icicle=null;
    next.haveState=false;
    next.stopped=false;
  }
 else {
    if (!next.hasBeenLaunched) {
      next.hasBeenLaunched=true;
    }
 else {
      if (SHOW_APP_STARTING_PREVIEW) {
        mService.mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
      }
      if (DEBUG_SWITCH)       Slog.v(TAG,""String_Node_Str"" + next);
    }
    startSpecificActivityLocked(next,true,true);
  }
  return true;
}","/** 
 * Ensure that the top activity in the stack is resumed.
 * @param prev The previously resumed activity, for when in the processof pausing; can be null to call from elsewhere.
 * @return Returns true if something is being resumed, or false ifnothing happened.
 */
final boolean resumeTopActivityLocked(ActivityRecord prev){
  ActivityRecord next=topRunningActivityLocked(null);
  final boolean userLeaving=mUserLeaving;
  mUserLeaving=false;
  if (next == null) {
    if (mMainStack) {
      return mService.startHomeActivityLocked();
    }
  }
  next.delayedResume=false;
  if (mResumedActivity == next && next.state == ActivityState.RESUMED) {
    mService.mWindowManager.executeAppTransition();
    mNoAnimActivities.clear();
    return false;
  }
  if ((mService.mSleeping || mService.mShuttingDown) && mLastPausedActivity == next && next.state == ActivityState.PAUSED) {
    mService.mWindowManager.executeAppTransition();
    mNoAnimActivities.clear();
    return false;
  }
  mStoppingActivities.remove(next);
  mWaitingVisibleActivities.remove(next);
  if (DEBUG_SWITCH)   Slog.v(TAG,""String_Node_Str"" + next);
  if (mPausingActivity != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"" + mPausingActivity);
    return false;
  }
  if (false) {
    if (mLastStartedActivity != null && !mLastStartedActivity.finishing) {
      long now=SystemClock.uptimeMillis();
      final boolean inTime=mLastStartedActivity.startTime != 0 && (mLastStartedActivity.startTime + START_WARN_TIME) >= now;
      final int lastUid=mLastStartedActivity.info.applicationInfo.uid;
      final int nextUid=next.info.applicationInfo.uid;
      if (inTime && lastUid != nextUid && lastUid != next.launchedFromUid && mService.checkPermission(android.Manifest.permission.STOP_APP_SWITCHES,-1,next.launchedFromUid) != PackageManager.PERMISSION_GRANTED) {
        mService.showLaunchWarningLocked(mLastStartedActivity,next);
      }
 else {
        next.startTime=now;
        mLastStartedActivity=next;
      }
    }
 else {
      next.startTime=SystemClock.uptimeMillis();
      mLastStartedActivity=next;
    }
  }
  if (mResumedActivity != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"");
    startPausingLocked(userLeaving,false);
    return true;
  }
  if (prev != null && prev != next) {
    if (!prev.waitingVisible && next != null && !next.nowVisible) {
      prev.waitingVisible=true;
      mWaitingVisibleActivities.add(prev);
      if (DEBUG_SWITCH)       Slog.v(TAG,""String_Node_Str"" + prev);
    }
 else {
      if (prev.finishing) {
        mService.mWindowManager.setAppVisibility(prev,false);
        if (DEBUG_SWITCH)         Slog.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
 else {
        if (DEBUG_SWITCH)         Slog.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
    }
  }
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_TRANSITION)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mNoAnimActivities.contains(prev)) {
        mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
      }
 else {
        mService.mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE : WindowManagerPolicy.TRANSIT_TASK_CLOSE);
      }
      mService.mWindowManager.setAppWillBeHidden(prev);
      mService.mWindowManager.setAppVisibility(prev,false);
    }
 else {
      if (DEBUG_TRANSITION)       Slog.v(TAG,""String_Node_Str"" + prev);
      if (mNoAnimActivities.contains(next)) {
        mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
      }
 else {
        mService.mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN : WindowManagerPolicy.TRANSIT_TASK_OPEN);
      }
    }
    if (false) {
      mService.mWindowManager.setAppWillBeHidden(prev);
      mService.mWindowManager.setAppVisibility(prev,false);
    }
  }
 else   if (mHistory.size() > 1) {
    if (DEBUG_TRANSITION)     Slog.v(TAG,""String_Node_Str"");
    if (mNoAnimActivities.contains(next)) {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
    }
 else {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN);
    }
  }
  if (next.app != null && next.app.thread != null) {
    if (DEBUG_SWITCH)     Slog.v(TAG,""String_Node_Str"" + next);
    mService.mWindowManager.setAppVisibility(next,true);
    ActivityRecord lastResumedActivity=mResumedActivity;
    ActivityState lastState=next.state;
    mService.updateCpuStats();
    next.state=ActivityState.RESUMED;
    mResumedActivity=next;
    next.task.touchActiveTime();
    mService.updateLruProcessLocked(next.app,true,true);
    updateLRUListLocked(next);
    boolean updated=false;
    if (mMainStack) {
synchronized (mService) {
        Configuration config=mService.mWindowManager.updateOrientationFromAppTokens(mService.mConfiguration,next.mayFreezeScreenLocked(next.app) ? next : null);
        if (config != null) {
          next.frozenBeforeDestroy=true;
        }
        updated=mService.updateConfigurationLocked(config,next);
      }
    }
    if (!updated) {
      ActivityRecord nextNext=topRunningActivityLocked(null);
      if (DEBUG_SWITCH)       Slog.i(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ nextNext);
      if (nextNext != next) {
        mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
      }
      if (mMainStack) {
        mService.setFocusedActivityLocked(next);
      }
      ensureActivitiesVisibleLocked(null,0);
      mService.mWindowManager.executeAppTransition();
      mNoAnimActivities.clear();
      return true;
    }
    try {
      ArrayList a=next.results;
      if (a != null) {
        final int N=a.size();
        if (!next.finishing && N > 0) {
          if (DEBUG_RESULTS)           Slog.v(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ a);
          next.app.thread.scheduleSendResult(next,a);
        }
      }
      if (next.newIntents != null) {
        next.app.thread.scheduleNewIntent(next.newIntents,next);
      }
      EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY,System.identityHashCode(next),next.task.taskId,next.shortComponentName);
      next.app.thread.scheduleResumeActivity(next,mService.isNextTransitionForward());
      pauseIfSleepingLocked();
    }
 catch (    Exception e) {
      next.state=lastState;
      mResumedActivity=lastResumedActivity;
      Slog.i(TAG,""String_Node_Str"" + next);
      if (!next.hasBeenLaunched) {
        next.hasBeenLaunched=true;
      }
 else {
        if (SHOW_APP_STARTING_PREVIEW && mMainStack) {
          mService.mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
        }
      }
      startSpecificActivityLocked(next,true,false);
      return true;
    }
    try {
      next.visible=true;
      completeResumeLocked(next);
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"" + next,e);
      requestFinishActivityLocked(next,Activity.RESULT_CANCELED,null,""String_Node_Str"");
      return true;
    }
    next.icicle=null;
    next.haveState=false;
    next.stopped=false;
  }
 else {
    if (!next.hasBeenLaunched) {
      next.hasBeenLaunched=true;
    }
 else {
      if (SHOW_APP_STARTING_PREVIEW) {
        mService.mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
      }
      if (DEBUG_SWITCH)       Slog.v(TAG,""String_Node_Str"" + next);
    }
    startSpecificActivityLocked(next,true,true);
  }
  return true;
}"
21934,"/** 
 * @hide
 */
@Override public void onDrawOverlay(Canvas canvas){
  if ((mGroupFlags & FLAG_CHILD_HAS_OVERLAY) == FLAG_CHILD_HAS_OVERLAY) {
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      if (child.isOverlayEnabled()) {
        canvas.translate(child.mLeft + child.mScrollX,child.mTop + child.mScrollY);
        child.onDrawOverlay(canvas);
        canvas.translate(-(child.mLeft + child.mScrollX),-(child.mTop + child.mScrollY));
      }
    }
  }
}","/** 
 * @hide
 */
@Override public void onDrawOverlay(Canvas canvas){
  if ((mGroupFlags & FLAG_CHILD_HAS_OVERLAY) == FLAG_CHILD_HAS_OVERLAY) {
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      if (child.isOverlayEnabled()) {
        canvas.translate(child.mLeft - child.mScrollX,child.mTop - child.mScrollY);
        child.onDrawOverlay(canvas);
        canvas.translate(-(child.mLeft - child.mScrollX),-(child.mTop - child.mScrollY));
      }
    }
  }
}"
21935,"void positionAtCursor(final int offset,boolean bottom){
  final int drawableWidth=mDrawable.getIntrinsicWidth();
  final int drawableHeight=mDrawable.getIntrinsicHeight();
  final int line=mLayout.getLineForOffset(offset);
  final int lineTop=mLayout.getLineTop(line);
  final int lineBottom=mLayout.getLineBottom(line);
  mHotSpotVerticalPosition=lineTop;
  final Rect bounds=sCursorControllerTempRect;
  bounds.left=(int)(mLayout.getPrimaryHorizontal(offset) - drawableWidth / 2.0) + mScrollX;
  bounds.top=(bottom ? lineBottom : lineTop) + mScrollY;
  mTopExtension=bottom ? 0 : drawableHeight / 2;
  mBottomExtension=0;
  if (line == mLayout.getLineCount() - 1) {
    mTopExtension=(lineBottom - lineTop) - drawableHeight / 2;
  }
  bounds.right=bounds.left + drawableWidth;
  bounds.bottom=bounds.top + drawableHeight;
  convertFromViewportToContentCoordinates(bounds);
  mDrawable.setBounds(bounds);
  postInvalidate();
}","void positionAtCursor(final int offset,boolean bottom){
  final int drawableWidth=mDrawable.getIntrinsicWidth();
  final int drawableHeight=mDrawable.getIntrinsicHeight();
  final int line=mLayout.getLineForOffset(offset);
  final int lineTop=mLayout.getLineTop(line);
  final int lineBottom=mLayout.getLineBottom(line);
  mHotSpotVerticalPosition=lineTop;
  final Rect bounds=sCursorControllerTempRect;
  bounds.left=(int)(mLayout.getPrimaryHorizontal(offset) - drawableWidth / 2.0) + mScrollX;
  bounds.top=(bottom ? lineBottom : lineTop) + mScrollY;
  mTopExtension=bottom ? 0 : drawableHeight / 2;
  mBottomExtension=0;
  if (line == mLayout.getLineCount() - 1) {
    mTopExtension=(lineBottom - lineTop) - drawableHeight / 2;
  }
  bounds.right=bounds.left + drawableWidth;
  bounds.bottom=bounds.top + drawableHeight;
  convertFromViewportToContentCoordinates(bounds);
  invalidate();
  mDrawable.setBounds(bounds);
  invalidate();
}"
21936,"/** 
 * @hide
 */
@Override public void onDrawOverlay(Canvas canvas){
  if ((mGroupFlags & FLAG_CHILD_HAS_OVERLAY) == FLAG_CHILD_HAS_OVERLAY) {
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      if (child.isOverlayEnabled()) {
        canvas.translate(child.mLeft + child.mScrollX,child.mTop + child.mScrollY);
        child.onDrawOverlay(canvas);
        canvas.translate(-(child.mLeft + child.mScrollX),-(child.mTop + child.mScrollY));
      }
    }
  }
}","/** 
 * @hide
 */
@Override public void onDrawOverlay(Canvas canvas){
  if ((mGroupFlags & FLAG_CHILD_HAS_OVERLAY) == FLAG_CHILD_HAS_OVERLAY) {
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      if (child.isOverlayEnabled()) {
        canvas.translate(child.mLeft - child.mScrollX,child.mTop - child.mScrollY);
        child.onDrawOverlay(canvas);
        canvas.translate(-(child.mLeft - child.mScrollX),-(child.mTop - child.mScrollY));
      }
    }
  }
}"
21937,"void positionAtCursor(final int offset,boolean bottom){
  final int drawableWidth=mDrawable.getIntrinsicWidth();
  final int drawableHeight=mDrawable.getIntrinsicHeight();
  final int line=mLayout.getLineForOffset(offset);
  final int lineTop=mLayout.getLineTop(line);
  final int lineBottom=mLayout.getLineBottom(line);
  mHotSpotVerticalPosition=lineTop;
  final Rect bounds=sCursorControllerTempRect;
  bounds.left=(int)(mLayout.getPrimaryHorizontal(offset) - drawableWidth / 2.0) + mScrollX;
  bounds.top=(bottom ? lineBottom : lineTop) + mScrollY;
  mTopExtension=bottom ? 0 : drawableHeight / 2;
  mBottomExtension=0;
  if (line == mLayout.getLineCount() - 1) {
    mTopExtension=(lineBottom - lineTop) - drawableHeight / 2;
  }
  bounds.right=bounds.left + drawableWidth;
  bounds.bottom=bounds.top + drawableHeight;
  convertFromViewportToContentCoordinates(bounds);
  mDrawable.setBounds(bounds);
  postInvalidate();
}","void positionAtCursor(final int offset,boolean bottom){
  final int drawableWidth=mDrawable.getIntrinsicWidth();
  final int drawableHeight=mDrawable.getIntrinsicHeight();
  final int line=mLayout.getLineForOffset(offset);
  final int lineTop=mLayout.getLineTop(line);
  final int lineBottom=mLayout.getLineBottom(line);
  mHotSpotVerticalPosition=lineTop;
  final Rect bounds=sCursorControllerTempRect;
  bounds.left=(int)(mLayout.getPrimaryHorizontal(offset) - drawableWidth / 2.0) + mScrollX;
  bounds.top=(bottom ? lineBottom : lineTop) + mScrollY;
  mTopExtension=bottom ? 0 : drawableHeight / 2;
  mBottomExtension=0;
  if (line == mLayout.getLineCount() - 1) {
    mTopExtension=(lineBottom - lineTop) - drawableHeight / 2;
  }
  bounds.right=bounds.left + drawableWidth;
  bounds.bottom=bounds.top + drawableHeight;
  convertFromViewportToContentCoordinates(bounds);
  invalidate();
  mDrawable.setBounds(bounds);
  invalidate();
}"
21938,"@Override public void hangup() throws CallStateException {
synchronized (SipPhone.class) {
    Log.v(LOG_TAG,""String_Node_Str"" + mPeer.getUriString() + ""String_Node_Str""+ ""String_Node_Str""+ getPhone().getPhoneName());
    try {
      mSipAudioCall.endCall();
      setState(Call.State.DISCONNECTING);
      setDisconnectCause(DisconnectCause.LOCAL);
    }
 catch (    SipException e) {
      throw new CallStateException(""String_Node_Str"" + e);
    }
  }
}","@Override public void hangup() throws CallStateException {
synchronized (SipPhone.class) {
    Log.v(LOG_TAG,""String_Node_Str"" + mPeer.getUriString() + ""String_Node_Str""+ ""String_Node_Str""+ getPhone().getPhoneName());
    try {
      if (mSipAudioCall != null)       mSipAudioCall.endCall();
      setState(Call.State.DISCONNECTING);
      setDisconnectCause(DisconnectCause.LOCAL);
    }
 catch (    SipException e) {
      throw new CallStateException(""String_Node_Str"" + e);
    }
  }
}"
21939,"public boolean remove(WorkSource other){
  int N1=mNum;
  final int[] uids1=mUids;
  final int N2=other.mNum;
  final int[] uids2=other.mUids;
  boolean changed=false;
  int i1=0;
  for (int i2=0; i2 < N2 && i1 < N1; i2++) {
    if (uids2[i2] == uids1[i1]) {
      N1--;
      if (i1 < N1)       System.arraycopy(uids1,i1,uids1,i1 - 1,N1 - i1);
    }
    while (i1 < N1 && uids2[i2] > uids1[i1]) {
      i1++;
    }
  }
  mNum=N1;
  return changed;
}","public boolean remove(WorkSource other){
  int N1=mNum;
  final int[] uids1=mUids;
  final int N2=other.mNum;
  final int[] uids2=other.mUids;
  boolean changed=false;
  int i1=0;
  for (int i2=0; i2 < N2 && i1 < N1; i2++) {
    if (uids2[i2] == uids1[i1]) {
      N1--;
      if (i1 < N1)       System.arraycopy(uids1,i1 + 1,uids1,i1,N1 - i1);
    }
    while (i1 < N1 && uids2[i2] > uids1[i1]) {
      i1++;
    }
  }
  mNum=N1;
  return changed;
}"
21940,"void clearModes(int modeFlags){
  if ((modeFlags & Intent.FLAG_GRANT_READ_URI_PERMISSION) != 0) {
    globalModeFlags&=~Intent.FLAG_GRANT_READ_URI_PERMISSION;
    modeFlags&=~Intent.FLAG_GRANT_READ_URI_PERMISSION;
    if (readOwners.size() > 0) {
      for (      UriPermissionOwner r : readOwners) {
        r.removeReadPermission(this);
      }
      readOwners.clear();
    }
  }
  if ((modeFlags & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) != 0) {
    globalModeFlags&=~Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    modeFlags&=~Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    if (readOwners.size() > 0) {
      for (      UriPermissionOwner r : writeOwners) {
        r.removeWritePermission(this);
      }
      readOwners.clear();
    }
  }
}","void clearModes(int modeFlagsToClear){
  if ((modeFlagsToClear & Intent.FLAG_GRANT_READ_URI_PERMISSION) != 0) {
    globalModeFlags&=~Intent.FLAG_GRANT_READ_URI_PERMISSION;
    modeFlags&=~Intent.FLAG_GRANT_READ_URI_PERMISSION;
    if (readOwners.size() > 0) {
      for (      UriPermissionOwner r : readOwners) {
        r.removeReadPermission(this);
      }
      readOwners.clear();
    }
  }
  if ((modeFlagsToClear & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) != 0) {
    globalModeFlags&=~Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    modeFlags&=~Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    if (readOwners.size() > 0) {
      for (      UriPermissionOwner r : writeOwners) {
        r.removeWritePermission(this);
      }
      readOwners.clear();
    }
  }
}"
21941,"/** 
 * Writes a new home time zone to the db. Updates the home time zone in the db asynchronously and updates the local cache. Sending a time zone of  {@link CalendarCache#TIMEZONE_TYPE_AUTO} will cause it to be setto the device's time zone. null or empty tz will be ignored.
 * @param context The calling activity
 * @param timeZone The time zone to set Calendar to, or{@link CalendarCache#TIMEZONE_TYPE_AUTO}
 */
public void setTimeZone(Context context,String timeZone){
  if (TextUtils.isEmpty(timeZone)) {
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"");
    }
    return;
  }
  boolean updatePrefs=false;
synchronized (mTZCallbacks) {
    if (CalendarCache.TIMEZONE_TYPE_AUTO.equals(timeZone)) {
      if (mUseHomeTZ) {
        updatePrefs=true;
      }
      mUseHomeTZ=false;
    }
 else {
      if (!mUseHomeTZ || !TextUtils.equals(mHomeTZ,timeZone)) {
        updatePrefs=true;
      }
      mUseHomeTZ=true;
      mHomeTZ=timeZone;
    }
  }
  if (updatePrefs) {
    SharedPreferences prefs=getSharedPreferences(context,mPrefsName);
    setSharedPreference(prefs,KEY_HOME_TZ_ENABLED,mUseHomeTZ);
    setSharedPreference(prefs,KEY_HOME_TZ,mHomeTZ);
    ContentValues values=new ContentValues();
    if (mHandler == null) {
      mHandler=new AsyncTZHandler(context.getContentResolver());
    }
    mHandler.cancelOperation(mToken);
    if (++mToken == 0) {
      mToken=1;
    }
    String[] selArgs=new String[]{CalendarCache.TIMEZONE_KEY_TYPE};
    values.put(CalendarCache.VALUE,mUseHomeTZ ? CalendarCache.TIMEZONE_TYPE_HOME : CalendarCache.TIMEZONE_TYPE_AUTO);
    mHandler.startUpdate(mToken,null,CalendarCache.URI,values,CalendarCache.WHERE,selArgs);
    if (mUseHomeTZ) {
      selArgs[0]=CalendarCache.TIMEZONE_KEY_INSTANCES;
      values.clear();
      values.put(CalendarCache.VALUE,mHomeTZ);
      mHandler.startUpdate(mToken,null,CalendarCache.URI,values,CalendarCache.WHERE,selArgs);
    }
  }
}","/** 
 * Writes a new home time zone to the db. Updates the home time zone in the db asynchronously and updates the local cache. Sending a time zone of  {@link CalendarCache#TIMEZONE_TYPE_AUTO} will cause it to be setto the device's time zone. null or empty tz will be ignored.
 * @param context The calling activity
 * @param timeZone The time zone to set Calendar to, or{@link CalendarCache#TIMEZONE_TYPE_AUTO}
 */
public void setTimeZone(Context context,String timeZone){
  if (TextUtils.isEmpty(timeZone)) {
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"");
    }
    return;
  }
  boolean updatePrefs=false;
synchronized (mTZCallbacks) {
    if (CalendarCache.TIMEZONE_TYPE_AUTO.equals(timeZone)) {
      if (mUseHomeTZ) {
        updatePrefs=true;
      }
      mUseHomeTZ=false;
    }
 else {
      if (!mUseHomeTZ || !TextUtils.equals(mHomeTZ,timeZone)) {
        updatePrefs=true;
      }
      mUseHomeTZ=true;
      mHomeTZ=timeZone;
    }
  }
  if (updatePrefs) {
    SharedPreferences prefs=getSharedPreferences(context,mPrefsName);
    setSharedPreference(prefs,KEY_HOME_TZ_ENABLED,mUseHomeTZ);
    setSharedPreference(prefs,KEY_HOME_TZ,mHomeTZ);
    ContentValues values=new ContentValues();
    if (mHandler == null) {
      mHandler=new AsyncTZHandler(context.getContentResolver());
    }
    mHandler.cancelOperation(mToken);
    if (++mToken == 0) {
      mToken=1;
    }
    values.put(CalendarCache.VALUE,mUseHomeTZ ? CalendarCache.TIMEZONE_TYPE_HOME : CalendarCache.TIMEZONE_TYPE_AUTO);
    mHandler.startUpdate(mToken,null,CalendarCache.URI,values,CalendarCache.WHERE,TIMEZONE_TYPE_ARGS);
    if (mUseHomeTZ) {
      ContentValues values2=new ContentValues();
      values2.put(CalendarCache.VALUE,mHomeTZ);
      mHandler.startUpdate(mToken,null,CalendarCache.URI,values2,CalendarCache.WHERE,TIMEZONE_INSTANCES_ARGS);
    }
  }
}"
21942,"void noteStopWakeLocked(WakeLock wl,WorkSource ws){
  try {
    if (ws != null) {
      mBatteryStats.noteStopWakelockFromSource(ws,wl.pid,wl.tag,wl.monitorType);
    }
 else {
      mBatteryStats.noteStopWakelock(wl.uid,wl.pid,wl.tag,wl.monitorType);
    }
  }
 catch (  RemoteException e) {
  }
}","void noteStopWakeLocked(WakeLock wl,WorkSource ws){
  if (wl.monitorType >= 0) {
    long origId=Binder.clearCallingIdentity();
    try {
      if (ws != null) {
        mBatteryStats.noteStopWakelockFromSource(ws,wl.pid,wl.tag,wl.monitorType);
      }
 else {
        mBatteryStats.noteStopWakelock(wl.uid,wl.pid,wl.tag,wl.monitorType);
      }
    }
 catch (    RemoteException e) {
    }
 finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}"
21943,"public void updateWakeLockWorkSource(IBinder lock,WorkSource ws){
  int uid=Binder.getCallingUid();
  int pid=Binder.getCallingPid();
  if (ws != null && ws.size() == 0) {
    ws=null;
  }
  if (ws != null) {
    enforceWakeSourcePermission(uid,pid);
  }
  long ident=Binder.clearCallingIdentity();
  try {
synchronized (mLocks) {
      int index=mLocks.getIndex(lock);
      if (index < 0) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      WakeLock wl=mLocks.get(index);
      WorkSource oldsource=wl.ws;
      wl.ws=ws != null ? new WorkSource(ws) : null;
      noteStopWakeLocked(wl,oldsource);
      noteStartWakeLocked(wl,ws);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void updateWakeLockWorkSource(IBinder lock,WorkSource ws){
  int uid=Binder.getCallingUid();
  int pid=Binder.getCallingPid();
  if (ws != null && ws.size() == 0) {
    ws=null;
  }
  if (ws != null) {
    enforceWakeSourcePermission(uid,pid);
  }
synchronized (mLocks) {
    int index=mLocks.getIndex(lock);
    if (index < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    WakeLock wl=mLocks.get(index);
    WorkSource oldsource=wl.ws;
    wl.ws=ws != null ? new WorkSource(ws) : null;
    noteStopWakeLocked(wl,oldsource);
    noteStartWakeLocked(wl,ws);
  }
}"
21944,"void noteStartWakeLocked(WakeLock wl,WorkSource ws){
  try {
    if (ws != null) {
      mBatteryStats.noteStartWakelockFromSource(ws,wl.pid,wl.tag,wl.monitorType);
    }
 else {
      mBatteryStats.noteStartWakelock(wl.uid,wl.pid,wl.tag,wl.monitorType);
    }
  }
 catch (  RemoteException e) {
  }
}","void noteStartWakeLocked(WakeLock wl,WorkSource ws){
  if (wl.monitorType >= 0) {
    long origId=Binder.clearCallingIdentity();
    try {
      if (ws != null) {
        mBatteryStats.noteStartWakelockFromSource(ws,wl.pid,wl.tag,wl.monitorType);
      }
 else {
        mBatteryStats.noteStartWakelock(wl.uid,wl.pid,wl.tag,wl.monitorType);
      }
    }
 catch (    RemoteException e) {
    }
 finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}"
21945,"private void releaseWakeLockLocked(IBinder lock,int flags,boolean death){
  WakeLock wl=mLocks.removeLock(lock);
  if (wl == null) {
    return;
  }
  if (mSpew) {
    Slog.d(TAG,""String_Node_Str"" + Integer.toHexString(wl.flags) + ""String_Node_Str""+ wl.tag);
  }
  if (isScreenLock(wl.flags)) {
    mWakeLockState=mLocks.gatherState();
    if ((wl.flags & PowerManager.ON_AFTER_RELEASE) != 0) {
      userActivity(SystemClock.uptimeMillis(),false);
    }
    setPowerState(mWakeLockState | mUserState);
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PARTIAL_WAKE_LOCK) {
    mPartialCount--;
    if (mPartialCount == 0) {
      if (LOG_PARTIAL_WL)       EventLog.writeEvent(EventLogTags.POWER_PARTIAL_WAKE_STATE,0,wl.tag);
      Power.releaseWakeLock(PARTIAL_NAME);
    }
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) {
    mProximityWakeLockCount--;
    if (mProximityWakeLockCount == 0) {
      if (mProximitySensorActive && ((flags & PowerManager.WAIT_FOR_PROXIMITY_NEGATIVE) != 0)) {
        if (mDebugProximitySensor) {
          Slog.d(TAG,""String_Node_Str"");
        }
      }
 else {
        disableProximityLockLocked();
      }
    }
  }
  wl.binder.unlinkToDeath(wl,0);
  if (wl.monitorType >= 0) {
    long origId=Binder.clearCallingIdentity();
    try {
      noteStopWakeLocked(wl,wl.ws);
    }
  finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}","private void releaseWakeLockLocked(IBinder lock,int flags,boolean death){
  WakeLock wl=mLocks.removeLock(lock);
  if (wl == null) {
    return;
  }
  if (mSpew) {
    Slog.d(TAG,""String_Node_Str"" + Integer.toHexString(wl.flags) + ""String_Node_Str""+ wl.tag);
  }
  if (isScreenLock(wl.flags)) {
    mWakeLockState=mLocks.gatherState();
    if ((wl.flags & PowerManager.ON_AFTER_RELEASE) != 0) {
      userActivity(SystemClock.uptimeMillis(),false);
    }
    setPowerState(mWakeLockState | mUserState);
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PARTIAL_WAKE_LOCK) {
    mPartialCount--;
    if (mPartialCount == 0) {
      if (LOG_PARTIAL_WL)       EventLog.writeEvent(EventLogTags.POWER_PARTIAL_WAKE_STATE,0,wl.tag);
      Power.releaseWakeLock(PARTIAL_NAME);
    }
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) {
    mProximityWakeLockCount--;
    if (mProximityWakeLockCount == 0) {
      if (mProximitySensorActive && ((flags & PowerManager.WAIT_FOR_PROXIMITY_NEGATIVE) != 0)) {
        if (mDebugProximitySensor) {
          Slog.d(TAG,""String_Node_Str"");
        }
      }
 else {
        disableProximityLockLocked();
      }
    }
  }
  wl.binder.unlinkToDeath(wl,0);
  noteStopWakeLocked(wl,wl.ws);
}"
21946,"void noteStopWakeLocked(WakeLock wl,WorkSource ws){
  try {
    if (ws != null) {
      mBatteryStats.noteStopWakelockFromSource(ws,wl.pid,wl.tag,wl.monitorType);
    }
 else {
      mBatteryStats.noteStopWakelock(wl.uid,wl.pid,wl.tag,wl.monitorType);
    }
  }
 catch (  RemoteException e) {
  }
}","void noteStopWakeLocked(WakeLock wl,WorkSource ws){
  if (wl.monitorType >= 0) {
    long origId=Binder.clearCallingIdentity();
    try {
      if (ws != null) {
        mBatteryStats.noteStopWakelockFromSource(ws,wl.pid,wl.tag,wl.monitorType);
      }
 else {
        mBatteryStats.noteStopWakelock(wl.uid,wl.pid,wl.tag,wl.monitorType);
      }
    }
 catch (    RemoteException e) {
    }
 finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}"
21947,"public void updateWakeLockWorkSource(IBinder lock,WorkSource ws){
  int uid=Binder.getCallingUid();
  int pid=Binder.getCallingPid();
  if (ws != null && ws.size() == 0) {
    ws=null;
  }
  if (ws != null) {
    enforceWakeSourcePermission(uid,pid);
  }
  long ident=Binder.clearCallingIdentity();
  try {
synchronized (mLocks) {
      int index=mLocks.getIndex(lock);
      if (index < 0) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      WakeLock wl=mLocks.get(index);
      WorkSource oldsource=wl.ws;
      wl.ws=ws != null ? new WorkSource(ws) : null;
      noteStopWakeLocked(wl,oldsource);
      noteStartWakeLocked(wl,ws);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void updateWakeLockWorkSource(IBinder lock,WorkSource ws){
  int uid=Binder.getCallingUid();
  int pid=Binder.getCallingPid();
  if (ws != null && ws.size() == 0) {
    ws=null;
  }
  if (ws != null) {
    enforceWakeSourcePermission(uid,pid);
  }
synchronized (mLocks) {
    int index=mLocks.getIndex(lock);
    if (index < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    WakeLock wl=mLocks.get(index);
    WorkSource oldsource=wl.ws;
    wl.ws=ws != null ? new WorkSource(ws) : null;
    noteStopWakeLocked(wl,oldsource);
    noteStartWakeLocked(wl,ws);
  }
}"
21948,"void noteStartWakeLocked(WakeLock wl,WorkSource ws){
  try {
    if (ws != null) {
      mBatteryStats.noteStartWakelockFromSource(ws,wl.pid,wl.tag,wl.monitorType);
    }
 else {
      mBatteryStats.noteStartWakelock(wl.uid,wl.pid,wl.tag,wl.monitorType);
    }
  }
 catch (  RemoteException e) {
  }
}","void noteStartWakeLocked(WakeLock wl,WorkSource ws){
  if (wl.monitorType >= 0) {
    long origId=Binder.clearCallingIdentity();
    try {
      if (ws != null) {
        mBatteryStats.noteStartWakelockFromSource(ws,wl.pid,wl.tag,wl.monitorType);
      }
 else {
        mBatteryStats.noteStartWakelock(wl.uid,wl.pid,wl.tag,wl.monitorType);
      }
    }
 catch (    RemoteException e) {
    }
 finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}"
21949,"private void releaseWakeLockLocked(IBinder lock,int flags,boolean death){
  WakeLock wl=mLocks.removeLock(lock);
  if (wl == null) {
    return;
  }
  if (mSpew) {
    Slog.d(TAG,""String_Node_Str"" + Integer.toHexString(wl.flags) + ""String_Node_Str""+ wl.tag);
  }
  if (isScreenLock(wl.flags)) {
    mWakeLockState=mLocks.gatherState();
    if ((wl.flags & PowerManager.ON_AFTER_RELEASE) != 0) {
      userActivity(SystemClock.uptimeMillis(),false);
    }
    setPowerState(mWakeLockState | mUserState);
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PARTIAL_WAKE_LOCK) {
    mPartialCount--;
    if (mPartialCount == 0) {
      if (LOG_PARTIAL_WL)       EventLog.writeEvent(EventLogTags.POWER_PARTIAL_WAKE_STATE,0,wl.tag);
      Power.releaseWakeLock(PARTIAL_NAME);
    }
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) {
    mProximityWakeLockCount--;
    if (mProximityWakeLockCount == 0) {
      if (mProximitySensorActive && ((flags & PowerManager.WAIT_FOR_PROXIMITY_NEGATIVE) != 0)) {
        if (mDebugProximitySensor) {
          Slog.d(TAG,""String_Node_Str"");
        }
      }
 else {
        disableProximityLockLocked();
      }
    }
  }
  wl.binder.unlinkToDeath(wl,0);
  if (wl.monitorType >= 0) {
    long origId=Binder.clearCallingIdentity();
    try {
      noteStopWakeLocked(wl,wl.ws);
    }
  finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}","private void releaseWakeLockLocked(IBinder lock,int flags,boolean death){
  WakeLock wl=mLocks.removeLock(lock);
  if (wl == null) {
    return;
  }
  if (mSpew) {
    Slog.d(TAG,""String_Node_Str"" + Integer.toHexString(wl.flags) + ""String_Node_Str""+ wl.tag);
  }
  if (isScreenLock(wl.flags)) {
    mWakeLockState=mLocks.gatherState();
    if ((wl.flags & PowerManager.ON_AFTER_RELEASE) != 0) {
      userActivity(SystemClock.uptimeMillis(),false);
    }
    setPowerState(mWakeLockState | mUserState);
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PARTIAL_WAKE_LOCK) {
    mPartialCount--;
    if (mPartialCount == 0) {
      if (LOG_PARTIAL_WL)       EventLog.writeEvent(EventLogTags.POWER_PARTIAL_WAKE_STATE,0,wl.tag);
      Power.releaseWakeLock(PARTIAL_NAME);
    }
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) {
    mProximityWakeLockCount--;
    if (mProximityWakeLockCount == 0) {
      if (mProximitySensorActive && ((flags & PowerManager.WAIT_FOR_PROXIMITY_NEGATIVE) != 0)) {
        if (mDebugProximitySensor) {
          Slog.d(TAG,""String_Node_Str"");
        }
      }
 else {
        disableProximityLockLocked();
      }
    }
  }
  wl.binder.unlinkToDeath(wl,0);
  noteStopWakeLocked(wl,wl.ws);
}"
21950,"void clearModes(int modeFlags){
  if ((modeFlags & Intent.FLAG_GRANT_READ_URI_PERMISSION) != 0) {
    globalModeFlags&=~Intent.FLAG_GRANT_READ_URI_PERMISSION;
    modeFlags&=~Intent.FLAG_GRANT_READ_URI_PERMISSION;
    if (readOwners.size() > 0) {
      for (      UriPermissionOwner r : readOwners) {
        r.removeReadPermission(this);
      }
      readOwners.clear();
    }
  }
  if ((modeFlags & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) != 0) {
    globalModeFlags&=~Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    modeFlags&=~Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    if (readOwners.size() > 0) {
      for (      UriPermissionOwner r : writeOwners) {
        r.removeWritePermission(this);
      }
      readOwners.clear();
    }
  }
}","void clearModes(int modeFlagsToClear){
  if ((modeFlagsToClear & Intent.FLAG_GRANT_READ_URI_PERMISSION) != 0) {
    globalModeFlags&=~Intent.FLAG_GRANT_READ_URI_PERMISSION;
    modeFlags&=~Intent.FLAG_GRANT_READ_URI_PERMISSION;
    if (readOwners.size() > 0) {
      for (      UriPermissionOwner r : readOwners) {
        r.removeReadPermission(this);
      }
      readOwners.clear();
    }
  }
  if ((modeFlagsToClear & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) != 0) {
    globalModeFlags&=~Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    modeFlags&=~Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    if (readOwners.size() > 0) {
      for (      UriPermissionOwner r : writeOwners) {
        r.removeWritePermission(this);
      }
      readOwners.clear();
    }
  }
}"
21951,"public boolean remove(WorkSource other){
  int N1=mNum;
  final int[] uids1=mUids;
  final int N2=other.mNum;
  final int[] uids2=other.mUids;
  boolean changed=false;
  int i1=0;
  for (int i2=0; i2 < N2 && i1 < N1; i2++) {
    if (uids2[i2] == uids1[i1]) {
      N1--;
      if (i1 < N1)       System.arraycopy(uids1,i1,uids1,i1 - 1,N1 - i1);
    }
    while (i1 < N1 && uids2[i2] > uids1[i1]) {
      i1++;
    }
  }
  mNum=N1;
  return changed;
}","public boolean remove(WorkSource other){
  int N1=mNum;
  final int[] uids1=mUids;
  final int N2=other.mNum;
  final int[] uids2=other.mUids;
  boolean changed=false;
  int i1=0;
  for (int i2=0; i2 < N2 && i1 < N1; i2++) {
    if (uids2[i2] == uids1[i1]) {
      N1--;
      if (i1 < N1)       System.arraycopy(uids1,i1 + 1,uids1,i1,N1 - i1);
    }
    while (i1 < N1 && uids2[i2] > uids1[i1]) {
      i1++;
    }
  }
  mNum=N1;
  return changed;
}"
21952,"private boolean handleAuthentication(ResponseEvent event) throws SipException {
  Response response=event.getResponse();
  String nonce=getNonceFromResponse(response);
  if (((nonce != null) && nonce.equals(mLastNonce)) || (nonce == mLastNonce)) {
    return false;
  }
 else {
    mClientTransaction=mSipHelper.handleChallenge(event,getAccountManager());
    mDialog=mClientTransaction.getDialog();
    mLastNonce=nonce;
    return true;
  }
}","private boolean handleAuthentication(ResponseEvent event) throws SipException {
  Response response=event.getResponse();
  String nonce=getNonceFromResponse(response);
  if (((nonce != null) && nonce.equals(mLastNonce)) || (nonce == null)) {
    mLastNonce=nonce;
    return false;
  }
 else {
    mClientTransaction=mSipHelper.handleChallenge(event,getAccountManager());
    mDialog=mClientTransaction.getDialog();
    mLastNonce=nonce;
    return true;
  }
}"
21953,"private String getNonceFromResponse(Response response){
  WWWAuthenticate authHeader=(WWWAuthenticate)(response.getHeader(SIPHeaderNames.WWW_AUTHENTICATE));
  return (authHeader == null) ? null : authHeader.getNonce();
}","private String getNonceFromResponse(Response response){
  WWWAuthenticate wwwAuth=(WWWAuthenticate)response.getHeader(SIPHeaderNames.WWW_AUTHENTICATE);
  if (wwwAuth != null)   return wwwAuth.getNonce();
  ProxyAuthenticate proxyAuth=(ProxyAuthenticate)response.getHeader(SIPHeaderNames.PROXY_AUTHENTICATE);
  return (proxyAuth == null) ? null : proxyAuth.getNonce();
}"
21954,"private boolean handleAuthentication(ResponseEvent event) throws SipException {
  Response response=event.getResponse();
  String nonce=getNonceFromResponse(response);
  if (((nonce != null) && nonce.equals(mLastNonce)) || (nonce == mLastNonce)) {
    return false;
  }
 else {
    mClientTransaction=mSipHelper.handleChallenge(event,getAccountManager());
    mDialog=mClientTransaction.getDialog();
    mLastNonce=nonce;
    return true;
  }
}","private boolean handleAuthentication(ResponseEvent event) throws SipException {
  Response response=event.getResponse();
  String nonce=getNonceFromResponse(response);
  if (((nonce != null) && nonce.equals(mLastNonce)) || (nonce == null)) {
    mLastNonce=nonce;
    return false;
  }
 else {
    mClientTransaction=mSipHelper.handleChallenge(event,getAccountManager());
    mDialog=mClientTransaction.getDialog();
    mLastNonce=nonce;
    return true;
  }
}"
21955,"private String getNonceFromResponse(Response response){
  WWWAuthenticate authHeader=(WWWAuthenticate)(response.getHeader(SIPHeaderNames.WWW_AUTHENTICATE));
  return (authHeader == null) ? null : authHeader.getNonce();
}","private String getNonceFromResponse(Response response){
  WWWAuthenticate wwwAuth=(WWWAuthenticate)response.getHeader(SIPHeaderNames.WWW_AUTHENTICATE);
  if (wwwAuth != null)   return wwwAuth.getNonce();
  ProxyAuthenticate proxyAuth=(ProxyAuthenticate)response.getHeader(SIPHeaderNames.PROXY_AUTHENTICATE);
  return (proxyAuth == null) ? null : proxyAuth.getNonce();
}"
21956,"protected void onDataSetupComplete(AsyncResult ar){
  String reason=null;
  if (ar.userObj instanceof String) {
    reason=(String)ar.userObj;
  }
  if (ar.exception == null) {
    if (isApnTypeActive(Phone.APN_TYPE_DEFAULT)) {
      SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
      if (canSetPreferApn && preferredApn == null) {
        Log.d(LOG_TAG,""String_Node_Str"");
        preferredApn=mActiveApn;
        setPreferredApn(preferredApn.id);
      }
    }
 else {
      SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
    }
    notifyDefaultData(reason);
  }
 else {
    GsmDataConnection.FailCause cause;
    cause=(GsmDataConnection.FailCause)(ar.result);
    if (DBG)     log(""String_Node_Str"" + cause);
    if (cause.isEventLoggable()) {
      GsmCellLocation loc=((GsmCellLocation)phone.getCellLocation());
      EventLog.writeEvent(EventLogTags.PDP_SETUP_FAIL,cause.ordinal(),loc != null ? loc.getCid() : -1,TelephonyManager.getDefault().getNetworkType());
    }
    if (cause.isPermanentFail()) {
      notifyNoData(cause);
      if (!mRequestedApnType.equals(Phone.APN_TYPE_DEFAULT)) {
        phone.notifyDataConnection(Phone.REASON_APN_FAILED);
        onEnableApn(apnTypeToId(mRequestedApnType),DISABLED);
      }
      return;
    }
    waitingApns.remove(0);
    if (waitingApns.isEmpty()) {
      startDelayedRetry(cause,reason);
    }
 else {
      setState(State.SCANNING);
      sendMessageDelayed(obtainMessage(EVENT_TRY_SETUP_DATA,reason),APN_DELAY_MILLIS);
    }
  }
}","protected void onDataSetupComplete(AsyncResult ar){
  String reason=null;
  if (ar.userObj instanceof String) {
    reason=(String)ar.userObj;
  }
  if (ar.exception == null) {
    if (isApnTypeActive(Phone.APN_TYPE_DEFAULT)) {
      SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
      if (canSetPreferApn && preferredApn == null) {
        Log.d(LOG_TAG,""String_Node_Str"");
        preferredApn=mActiveApn;
        setPreferredApn(preferredApn.id);
      }
    }
 else {
      SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
    }
    notifyDefaultData(reason);
  }
 else {
    GsmDataConnection.FailCause cause;
    cause=(GsmDataConnection.FailCause)(ar.result);
    if (DBG)     log(""String_Node_Str"" + cause);
    if (cause.isEventLoggable()) {
      GsmCellLocation loc=((GsmCellLocation)phone.getCellLocation());
      EventLog.writeEvent(EventLogTags.PDP_SETUP_FAIL,cause.ordinal(),loc != null ? loc.getCid() : -1,TelephonyManager.getDefault().getNetworkType());
    }
    if (cause.isPermanentFail()) {
      notifyNoData(cause);
      phone.notifyDataConnection(Phone.REASON_APN_FAILED);
      onEnableApn(apnTypeToId(mRequestedApnType),DISABLED);
      return;
    }
    waitingApns.remove(0);
    if (waitingApns.isEmpty()) {
      startDelayedRetry(cause,reason);
    }
 else {
      setState(State.SCANNING);
      sendMessageDelayed(obtainMessage(EVENT_TRY_SETUP_DATA,reason),APN_DELAY_MILLIS);
    }
  }
}"
21957,"protected void onDataSetupComplete(AsyncResult ar){
  String reason=null;
  if (ar.userObj instanceof String) {
    reason=(String)ar.userObj;
  }
  if (ar.exception == null) {
    if (isApnTypeActive(Phone.APN_TYPE_DEFAULT)) {
      SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
      if (canSetPreferApn && preferredApn == null) {
        Log.d(LOG_TAG,""String_Node_Str"");
        preferredApn=mActiveApn;
        setPreferredApn(preferredApn.id);
      }
    }
 else {
      SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
    }
    notifyDefaultData(reason);
  }
 else {
    GsmDataConnection.FailCause cause;
    cause=(GsmDataConnection.FailCause)(ar.result);
    if (DBG)     log(""String_Node_Str"" + cause);
    if (cause.isEventLoggable()) {
      GsmCellLocation loc=((GsmCellLocation)phone.getCellLocation());
      EventLog.writeEvent(EventLogTags.PDP_SETUP_FAIL,cause.ordinal(),loc != null ? loc.getCid() : -1,TelephonyManager.getDefault().getNetworkType());
    }
    if (cause.isPermanentFail()) {
      notifyNoData(cause);
      if (!mRequestedApnType.equals(Phone.APN_TYPE_DEFAULT)) {
        phone.notifyDataConnection(Phone.REASON_APN_FAILED);
        onEnableApn(apnTypeToId(mRequestedApnType),DISABLED);
      }
      return;
    }
    waitingApns.remove(0);
    if (waitingApns.isEmpty()) {
      startDelayedRetry(cause,reason);
    }
 else {
      setState(State.SCANNING);
      sendMessageDelayed(obtainMessage(EVENT_TRY_SETUP_DATA,reason),APN_DELAY_MILLIS);
    }
  }
}","protected void onDataSetupComplete(AsyncResult ar){
  String reason=null;
  if (ar.userObj instanceof String) {
    reason=(String)ar.userObj;
  }
  if (ar.exception == null) {
    if (isApnTypeActive(Phone.APN_TYPE_DEFAULT)) {
      SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
      if (canSetPreferApn && preferredApn == null) {
        Log.d(LOG_TAG,""String_Node_Str"");
        preferredApn=mActiveApn;
        setPreferredApn(preferredApn.id);
      }
    }
 else {
      SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
    }
    notifyDefaultData(reason);
  }
 else {
    GsmDataConnection.FailCause cause;
    cause=(GsmDataConnection.FailCause)(ar.result);
    if (DBG)     log(""String_Node_Str"" + cause);
    if (cause.isEventLoggable()) {
      GsmCellLocation loc=((GsmCellLocation)phone.getCellLocation());
      EventLog.writeEvent(EventLogTags.PDP_SETUP_FAIL,cause.ordinal(),loc != null ? loc.getCid() : -1,TelephonyManager.getDefault().getNetworkType());
    }
    if (cause.isPermanentFail()) {
      notifyNoData(cause);
      phone.notifyDataConnection(Phone.REASON_APN_FAILED);
      onEnableApn(apnTypeToId(mRequestedApnType),DISABLED);
      return;
    }
    waitingApns.remove(0);
    if (waitingApns.isEmpty()) {
      startDelayedRetry(cause,reason);
    }
 else {
      setState(State.SCANNING);
      sendMessageDelayed(obtainMessage(EVENT_TRY_SETUP_DATA,reason),APN_DELAY_MILLIS);
    }
  }
}"
21958,"/** 
 * Dumps a human-readable summary of the battery statistics to the given PrintWriter.
 * @param pw a Printer to receive the dump output.
 */
@SuppressWarnings(""String_Node_Str"") public void dumpLocked(PrintWriter pw){
  HistoryItem rec=getHistory();
  if (rec != null) {
    pw.println(""String_Node_Str"");
    int oldState=0;
    int oldStatus=-1;
    int oldHealth=-1;
    int oldPlug=-1;
    int oldTemp=-1;
    int oldVolt=-1;
    while (rec != null) {
      pw.print(""String_Node_Str"");
      pw.print(rec.time);
      pw.print(""String_Node_Str"");
      if (rec.cmd == HistoryItem.CMD_START) {
        pw.println(""String_Node_Str"");
      }
 else {
        if (rec.batteryLevel < 10)         pw.print(""String_Node_Str"");
 else         if (rec.batteryLevel < 100)         pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
        pw.print(""String_Node_Str"");
        if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
        if (oldStatus != rec.batteryStatus) {
          oldStatus=rec.batteryStatus;
          pw.print(""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
            pw.print(""String_Node_Str"");
          break;
case BatteryManager.BATTERY_STATUS_CHARGING:
        pw.print(""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
    pw.print(""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,HISTORY_STATE_DESCRIPTIONS);
pw.println();
}
oldState=rec.states;
rec=rec.next;
}
}
pw.println(""String_Node_Str"");
pw.println(""String_Node_Str"" + getStartCount() + ""String_Node_Str""+ getIsOnBattery());
dumpLocked(pw,""String_Node_Str"",STATS_SINCE_CHARGED,-1);
pw.println(""String_Node_Str"");
pw.println(""String_Node_Str"");
dumpLocked(pw,""String_Node_Str"",STATS_SINCE_UNPLUGGED,-1);
}","/** 
 * Dumps a human-readable summary of the battery statistics to the given PrintWriter.
 * @param pw a Printer to receive the dump output.
 */
@SuppressWarnings(""String_Node_Str"") public void dumpLocked(PrintWriter pw){
  HistoryItem rec=getHistory();
  if (rec != null) {
    pw.println(""String_Node_Str"");
    long now=getHistoryBaseTime() + SystemClock.elapsedRealtime();
    int oldState=0;
    int oldStatus=-1;
    int oldHealth=-1;
    int oldPlug=-1;
    int oldTemp=-1;
    int oldVolt=-1;
    while (rec != null) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(rec.time - now,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
      pw.print(""String_Node_Str"");
      if (rec.cmd == HistoryItem.CMD_START) {
        pw.println(""String_Node_Str"");
      }
 else {
        if (rec.batteryLevel < 10)         pw.print(""String_Node_Str"");
 else         if (rec.batteryLevel < 100)         pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
        pw.print(""String_Node_Str"");
        if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
        if (oldStatus != rec.batteryStatus) {
          oldStatus=rec.batteryStatus;
          pw.print(""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
            pw.print(""String_Node_Str"");
          break;
case BatteryManager.BATTERY_STATUS_CHARGING:
        pw.print(""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
    pw.print(""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,HISTORY_STATE_DESCRIPTIONS);
pw.println();
}
oldState=rec.states;
rec=rec.next;
}
pw.println(""String_Node_Str"");
}
SparseArray<? extends Uid> uidStats=getUidStats();
final int NU=uidStats.size();
boolean didPid=false;
long nowRealtime=SystemClock.elapsedRealtime();
StringBuilder sb=new StringBuilder(64);
for (int i=0; i < NU; i++) {
Uid uid=uidStats.valueAt(i);
SparseArray<? extends Uid.Pid> pids=uid.getPidStats();
if (pids != null) {
for (int j=0; j < pids.size(); j++) {
Uid.Pid pid=pids.valueAt(j);
if (!didPid) {
pw.println(""String_Node_Str"");
didPid=true;
}
long time=pid.mWakeSum + (pid.mWakeStart != 0 ? (nowRealtime - pid.mWakeStart) : 0);
pw.print(""String_Node_Str"");
pw.print(pids.keyAt(j));
pw.print(""String_Node_Str"");
TimeUtils.formatDuration(time,pw);
pw.println(""String_Node_Str"");
}
}
}
if (didPid) {
pw.println(""String_Node_Str"");
}
pw.println(""String_Node_Str"");
pw.println(""String_Node_Str"" + getStartCount() + ""String_Node_Str""+ getIsOnBattery());
dumpLocked(pw,""String_Node_Str"",STATS_SINCE_CHARGED,-1);
pw.println(""String_Node_Str"");
pw.println(""String_Node_Str"");
dumpLocked(pw,""String_Node_Str"",STATS_SINCE_UNPLUGGED,-1);
}"
21959,"/** 
 * @hide Just for debugging; not internationalized. 
 */
public static void formatDuration(long time,long now,PrintWriter pw){
  if (time == 0) {
    pw.print(""String_Node_Str"");
    return;
  }
  formatDuration(time - now,pw);
}","/** 
 * @hide Just for debugging; not internationalized. 
 */
public static void formatDuration(long time,long now,PrintWriter pw){
  if (time == 0) {
    pw.print(""String_Node_Str"");
    return;
  }
  formatDuration(time - now,pw,0);
}"
21960,"/** 
 * Dumps a human-readable summary of the battery statistics to the given PrintWriter.
 * @param pw a Printer to receive the dump output.
 */
@SuppressWarnings(""String_Node_Str"") public void dumpLocked(PrintWriter pw){
  HistoryItem rec=getHistory();
  if (rec != null) {
    pw.println(""String_Node_Str"");
    int oldState=0;
    int oldStatus=-1;
    int oldHealth=-1;
    int oldPlug=-1;
    int oldTemp=-1;
    int oldVolt=-1;
    while (rec != null) {
      pw.print(""String_Node_Str"");
      pw.print(rec.time);
      pw.print(""String_Node_Str"");
      if (rec.cmd == HistoryItem.CMD_START) {
        pw.println(""String_Node_Str"");
      }
 else {
        if (rec.batteryLevel < 10)         pw.print(""String_Node_Str"");
 else         if (rec.batteryLevel < 100)         pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
        pw.print(""String_Node_Str"");
        if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
        if (oldStatus != rec.batteryStatus) {
          oldStatus=rec.batteryStatus;
          pw.print(""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
            pw.print(""String_Node_Str"");
          break;
case BatteryManager.BATTERY_STATUS_CHARGING:
        pw.print(""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
    pw.print(""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,HISTORY_STATE_DESCRIPTIONS);
pw.println();
}
oldState=rec.states;
rec=rec.next;
}
}
pw.println(""String_Node_Str"");
pw.println(""String_Node_Str"" + getStartCount() + ""String_Node_Str""+ getIsOnBattery());
dumpLocked(pw,""String_Node_Str"",STATS_SINCE_CHARGED,-1);
pw.println(""String_Node_Str"");
pw.println(""String_Node_Str"");
dumpLocked(pw,""String_Node_Str"",STATS_SINCE_UNPLUGGED,-1);
}","/** 
 * Dumps a human-readable summary of the battery statistics to the given PrintWriter.
 * @param pw a Printer to receive the dump output.
 */
@SuppressWarnings(""String_Node_Str"") public void dumpLocked(PrintWriter pw){
  HistoryItem rec=getHistory();
  if (rec != null) {
    pw.println(""String_Node_Str"");
    long now=getHistoryBaseTime() + SystemClock.elapsedRealtime();
    int oldState=0;
    int oldStatus=-1;
    int oldHealth=-1;
    int oldPlug=-1;
    int oldTemp=-1;
    int oldVolt=-1;
    while (rec != null) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(rec.time - now,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
      pw.print(""String_Node_Str"");
      if (rec.cmd == HistoryItem.CMD_START) {
        pw.println(""String_Node_Str"");
      }
 else {
        if (rec.batteryLevel < 10)         pw.print(""String_Node_Str"");
 else         if (rec.batteryLevel < 100)         pw.print(""String_Node_Str"");
        pw.print(rec.batteryLevel);
        pw.print(""String_Node_Str"");
        if (rec.states < 0x10)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x100000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x1000000)         pw.print(""String_Node_Str"");
 else         if (rec.states < 0x10000000)         pw.print(""String_Node_Str"");
        pw.print(Integer.toHexString(rec.states));
        if (oldStatus != rec.batteryStatus) {
          oldStatus=rec.batteryStatus;
          pw.print(""String_Node_Str"");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
            pw.print(""String_Node_Str"");
          break;
case BatteryManager.BATTERY_STATUS_CHARGING:
        pw.print(""String_Node_Str"");
      break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
    pw.print(""String_Node_Str"");
  break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(""String_Node_Str"");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(""String_Node_Str"");
switch (oldPlug) {
case 0:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(""String_Node_Str"");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(""String_Node_Str"");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(""String_Node_Str"");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(""String_Node_Str"");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,HISTORY_STATE_DESCRIPTIONS);
pw.println();
}
oldState=rec.states;
rec=rec.next;
}
pw.println(""String_Node_Str"");
}
SparseArray<? extends Uid> uidStats=getUidStats();
final int NU=uidStats.size();
boolean didPid=false;
long nowRealtime=SystemClock.elapsedRealtime();
StringBuilder sb=new StringBuilder(64);
for (int i=0; i < NU; i++) {
Uid uid=uidStats.valueAt(i);
SparseArray<? extends Uid.Pid> pids=uid.getPidStats();
if (pids != null) {
for (int j=0; j < pids.size(); j++) {
Uid.Pid pid=pids.valueAt(j);
if (!didPid) {
pw.println(""String_Node_Str"");
didPid=true;
}
long time=pid.mWakeSum + (pid.mWakeStart != 0 ? (nowRealtime - pid.mWakeStart) : 0);
pw.print(""String_Node_Str"");
pw.print(pids.keyAt(j));
pw.print(""String_Node_Str"");
TimeUtils.formatDuration(time,pw);
pw.println(""String_Node_Str"");
}
}
}
if (didPid) {
pw.println(""String_Node_Str"");
}
pw.println(""String_Node_Str"");
pw.println(""String_Node_Str"" + getStartCount() + ""String_Node_Str""+ getIsOnBattery());
dumpLocked(pw,""String_Node_Str"",STATS_SINCE_CHARGED,-1);
pw.println(""String_Node_Str"");
pw.println(""String_Node_Str"");
dumpLocked(pw,""String_Node_Str"",STATS_SINCE_UNPLUGGED,-1);
}"
21961,"/** 
 * @hide Just for debugging; not internationalized. 
 */
public static void formatDuration(long time,long now,PrintWriter pw){
  if (time == 0) {
    pw.print(""String_Node_Str"");
    return;
  }
  formatDuration(time - now,pw);
}","/** 
 * @hide Just for debugging; not internationalized. 
 */
public static void formatDuration(long time,long now,PrintWriter pw){
  if (time == 0) {
    pw.print(""String_Node_Str"");
    return;
  }
  formatDuration(time - now,pw,0);
}"
21962,"void edgeReached(int delta){
  mScroller.notifyVerticalEdgeReached(mScrollY,0,mOverflingDistance);
  mTouchMode=TOUCH_MODE_OVERFLING;
  if (mEdgeGlowTop != null) {
    final int vel=(int)mScroller.getCurrVelocity();
    if (delta > 0) {
      mEdgeGlowTop.onAbsorb(vel);
    }
 else {
      mEdgeGlowBottom.onAbsorb(vel);
    }
  }
  invalidate();
  post(this);
}","void edgeReached(int delta){
  mScroller.notifyVerticalEdgeReached(mScrollY,0,mOverflingDistance);
  final int overscrollMode=getOverscrollMode();
  if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && !contentFits())) {
    mTouchMode=TOUCH_MODE_OVERFLING;
    final int vel=(int)mScroller.getCurrVelocity();
    if (delta > 0) {
      mEdgeGlowTop.onAbsorb(vel);
    }
 else {
      mEdgeGlowBottom.onAbsorb(vel);
    }
  }
  invalidate();
  post(this);
}"
21963,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isEnabled()) {
    return isClickable() || isLongClickable();
  }
  if (mFastScroller != null) {
    boolean intercepted=mFastScroller.onTouchEvent(ev);
    if (intercepted) {
      return true;
    }
  }
  final int action=ev.getAction();
  View v;
  int deltaY;
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
switch (mTouchMode) {
case TOUCH_MODE_OVERFLING:
{
          mFlingRunnable.endFling();
          mTouchMode=TOUCH_MODE_OVERSCROLL;
          mMotionY=mLastY=(int)ev.getY();
          mMotionCorrection=0;
          mActivePointerId=ev.getPointerId(0);
          break;
        }
default :
{
        mActivePointerId=ev.getPointerId(0);
        final int x=(int)ev.getX();
        final int y=(int)ev.getY();
        int motionPosition=pointToPosition(x,y);
        if (!mDataChanged) {
          if ((mTouchMode != TOUCH_MODE_FLING) && (motionPosition >= 0) && (getAdapter().isEnabled(motionPosition))) {
            mTouchMode=TOUCH_MODE_DOWN;
            if (mPendingCheckForTap == null) {
              mPendingCheckForTap=new CheckForTap();
            }
            postDelayed(mPendingCheckForTap,ViewConfiguration.getTapTimeout());
          }
 else {
            if (ev.getEdgeFlags() != 0 && motionPosition < 0) {
              return false;
            }
            if (mTouchMode == TOUCH_MODE_FLING) {
              createScrollingCache();
              mTouchMode=TOUCH_MODE_SCROLL;
              mMotionCorrection=0;
              motionPosition=findMotionRow(y);
              reportScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);
            }
          }
        }
        if (motionPosition >= 0) {
          v=getChildAt(motionPosition - mFirstPosition);
          mMotionViewOriginalTop=v.getTop();
        }
        mMotionX=x;
        mMotionY=y;
        mMotionPosition=motionPosition;
        mLastY=Integer.MIN_VALUE;
        break;
      }
  }
  break;
}
case MotionEvent.ACTION_MOVE:
{
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final int y=(int)ev.getY(pointerIndex);
deltaY=y - mMotionY;
switch (mTouchMode) {
case TOUCH_MODE_DOWN:
case TOUCH_MODE_TAP:
case TOUCH_MODE_DONE_WAITING:
  startScrollIfNeeded(deltaY);
break;
case TOUCH_MODE_SCROLL:
if (PROFILE_SCROLLING) {
if (!mScrollProfilingStarted) {
  Debug.startMethodTracing(""String_Node_Str"");
  mScrollProfilingStarted=true;
}
}
if (y != mLastY) {
if ((mGroupFlags & FLAG_DISALLOW_INTERCEPT) == 0 && Math.abs(deltaY) > mTouchSlop) {
requestDisallowInterceptTouchEvent(true);
}
final int rawDeltaY=deltaY;
deltaY-=mMotionCorrection;
int incrementalDeltaY=mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY;
final int motionIndex;
if (mMotionPosition >= 0) {
motionIndex=mMotionPosition - mFirstPosition;
}
 else {
motionIndex=getChildCount() / 2;
}
int motionViewPrevTop=0;
View motionView=this.getChildAt(motionIndex);
if (motionView != null) {
motionViewPrevTop=motionView.getTop();
}
boolean atEdge=false;
if (incrementalDeltaY != 0) {
atEdge=trackMotionScroll(deltaY,incrementalDeltaY);
}
motionView=this.getChildAt(motionIndex);
if (motionView != null) {
final int motionViewRealTop=motionView.getTop();
if (atEdge) {
  int overscroll=-incrementalDeltaY - (motionViewRealTop - motionViewPrevTop);
  overscrollBy(0,overscroll,0,mScrollY,0,0,0,mOverscrollDistance,true);
  if (Math.abs(mOverscrollDistance) == Math.abs(mScrollY)) {
    mVelocityTracker.clear();
  }
  mTouchMode=TOUCH_MODE_OVERSCROLL;
  if (mEdgeGlowTop != null) {
    if (rawDeltaY > 0) {
      mEdgeGlowTop.onPull((float)overscroll / getHeight());
    }
 else     if (rawDeltaY < 0) {
      mEdgeGlowBottom.onPull((float)overscroll / getHeight());
    }
  }
}
mMotionY=y;
invalidate();
}
mLastY=y;
}
break;
case TOUCH_MODE_OVERSCROLL:
if (y != mLastY) {
final int rawDeltaY=deltaY;
deltaY-=mMotionCorrection;
int incrementalDeltaY=mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY;
final int oldScroll=mScrollY;
final int newScroll=oldScroll - incrementalDeltaY;
if ((oldScroll >= 0 && newScroll <= 0) || (oldScroll <= 0 && newScroll >= 0)) {
incrementalDeltaY=-newScroll;
mScrollY=0;
if (incrementalDeltaY != 0) {
trackMotionScroll(incrementalDeltaY,incrementalDeltaY);
}
View motionView=this.getChildAt(mMotionPosition - mFirstPosition);
if (motionView != null) {
mTouchMode=TOUCH_MODE_SCROLL;
final int motionPosition=findClosestMotionRow(y);
mMotionCorrection=0;
motionView=getChildAt(motionPosition - mFirstPosition);
mMotionViewOriginalTop=motionView.getTop();
mMotionY=y;
mMotionPosition=motionPosition;
}
}
 else {
overscrollBy(0,-incrementalDeltaY,0,mScrollY,0,0,0,mOverscrollDistance,true);
if (mEdgeGlowTop != null) {
if (rawDeltaY > 0) {
mEdgeGlowTop.onPull((float)-incrementalDeltaY / getHeight());
}
 else if (rawDeltaY < 0) {
mEdgeGlowBottom.onPull((float)-incrementalDeltaY / getHeight());
}
invalidate();
}
if (Math.abs(mOverscrollDistance) == Math.abs(mScrollY)) {
mVelocityTracker.clear();
}
}
mLastY=y;
}
break;
}
break;
}
case MotionEvent.ACTION_UP:
{
switch (mTouchMode) {
case TOUCH_MODE_DOWN:
case TOUCH_MODE_TAP:
case TOUCH_MODE_DONE_WAITING:
final int motionPosition=mMotionPosition;
final View child=getChildAt(motionPosition - mFirstPosition);
if (child != null && !child.hasFocusable()) {
if (mTouchMode != TOUCH_MODE_DOWN) {
child.setPressed(false);
}
if (mPerformClick == null) {
mPerformClick=new PerformClick();
}
final AbsListView.PerformClick performClick=mPerformClick;
performClick.mChild=child;
performClick.mClickMotionPosition=motionPosition;
performClick.rememberWindowAttachCount();
mResurrectToPosition=motionPosition;
if (mTouchMode == TOUCH_MODE_DOWN || mTouchMode == TOUCH_MODE_TAP) {
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mTouchMode == TOUCH_MODE_DOWN ? mPendingCheckForTap : mPendingCheckForLongPress);
}
mLayoutMode=LAYOUT_NORMAL;
if (!mDataChanged && mAdapter.isEnabled(motionPosition)) {
mTouchMode=TOUCH_MODE_TAP;
setSelectedPositionInt(mMotionPosition);
layoutChildren();
child.setPressed(true);
positionSelector(child);
setPressed(true);
if (mSelector != null) {
Drawable d=mSelector.getCurrent();
if (d != null && d instanceof TransitionDrawable) {
((TransitionDrawable)d).resetTransition();
}
}
postDelayed(new Runnable(){
public void run(){
child.setPressed(false);
setPressed(false);
if (!mDataChanged) {
post(performClick);
}
mTouchMode=TOUCH_MODE_REST;
}
}
,ViewConfiguration.getPressedStateDuration());
}
 else {
mTouchMode=TOUCH_MODE_REST;
}
return true;
}
 else if (!mDataChanged && mAdapter.isEnabled(motionPosition)) {
post(performClick);
}
}
mTouchMode=TOUCH_MODE_REST;
break;
case TOUCH_MODE_SCROLL:
final int childCount=getChildCount();
if (childCount > 0) {
final int firstChildTop=getChildAt(0).getTop();
final int lastChildBottom=getChildAt(childCount - 1).getBottom();
final int contentTop=mListPadding.top;
final int contentBottom=getHeight() - mListPadding.bottom;
if (mFirstPosition == 0 && firstChildTop >= contentTop && mFirstPosition + childCount < mItemCount && lastChildBottom <= getHeight() - contentBottom) {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
 else {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(initialVelocity) > mMinimumVelocity && !((mFirstPosition == 0 && firstChildTop == contentTop - mOverscrollDistance) || (mFirstPosition + childCount == mItemCount && lastChildBottom == contentBottom + mOverscrollDistance))) {
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
mFlingRunnable.start(-initialVelocity);
}
 else {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
}
}
 else {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
break;
case TOUCH_MODE_OVERSCROLL:
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
if (Math.abs(initialVelocity) > mMinimumVelocity) {
mFlingRunnable.startOverfling(-initialVelocity);
}
 else {
mFlingRunnable.startSpringback();
}
break;
}
setPressed(false);
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
invalidate();
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mPendingCheckForLongPress);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
mActivePointerId=INVALID_POINTER;
if (PROFILE_SCROLLING) {
if (mScrollProfilingStarted) {
Debug.stopMethodTracing();
mScrollProfilingStarted=false;
}
}
break;
}
case MotionEvent.ACTION_CANCEL:
{
switch (mTouchMode) {
case TOUCH_MODE_OVERSCROLL:
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
mFlingRunnable.startSpringback();
break;
case TOUCH_MODE_OVERFLING:
break;
default :
mTouchMode=TOUCH_MODE_REST;
setPressed(false);
View motionView=this.getChildAt(mMotionPosition - mFirstPosition);
if (motionView != null) {
motionView.setPressed(false);
}
clearScrollingCache();
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mPendingCheckForLongPress);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
mActivePointerId=INVALID_POINTER;
break;
}
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
final int x=mMotionX;
final int y=mMotionY;
final int motionPosition=pointToPosition(x,y);
if (motionPosition >= 0) {
v=getChildAt(motionPosition - mFirstPosition);
mMotionViewOriginalTop=v.getTop();
mMotionPosition=motionPosition;
}
mLastY=y;
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isEnabled()) {
    return isClickable() || isLongClickable();
  }
  if (mFastScroller != null) {
    boolean intercepted=mFastScroller.onTouchEvent(ev);
    if (intercepted) {
      return true;
    }
  }
  final int action=ev.getAction();
  View v;
  int deltaY;
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
switch (mTouchMode) {
case TOUCH_MODE_OVERFLING:
{
          mFlingRunnable.endFling();
          mTouchMode=TOUCH_MODE_OVERSCROLL;
          mMotionY=mLastY=(int)ev.getY();
          mMotionCorrection=0;
          mActivePointerId=ev.getPointerId(0);
          break;
        }
default :
{
        mActivePointerId=ev.getPointerId(0);
        final int x=(int)ev.getX();
        final int y=(int)ev.getY();
        int motionPosition=pointToPosition(x,y);
        if (!mDataChanged) {
          if ((mTouchMode != TOUCH_MODE_FLING) && (motionPosition >= 0) && (getAdapter().isEnabled(motionPosition))) {
            mTouchMode=TOUCH_MODE_DOWN;
            if (mPendingCheckForTap == null) {
              mPendingCheckForTap=new CheckForTap();
            }
            postDelayed(mPendingCheckForTap,ViewConfiguration.getTapTimeout());
          }
 else {
            if (ev.getEdgeFlags() != 0 && motionPosition < 0) {
              return false;
            }
            if (mTouchMode == TOUCH_MODE_FLING) {
              createScrollingCache();
              mTouchMode=TOUCH_MODE_SCROLL;
              mMotionCorrection=0;
              motionPosition=findMotionRow(y);
              reportScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);
            }
          }
        }
        if (motionPosition >= 0) {
          v=getChildAt(motionPosition - mFirstPosition);
          mMotionViewOriginalTop=v.getTop();
        }
        mMotionX=x;
        mMotionY=y;
        mMotionPosition=motionPosition;
        mLastY=Integer.MIN_VALUE;
        break;
      }
  }
  break;
}
case MotionEvent.ACTION_MOVE:
{
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final int y=(int)ev.getY(pointerIndex);
deltaY=y - mMotionY;
switch (mTouchMode) {
case TOUCH_MODE_DOWN:
case TOUCH_MODE_TAP:
case TOUCH_MODE_DONE_WAITING:
  startScrollIfNeeded(deltaY);
break;
case TOUCH_MODE_SCROLL:
if (PROFILE_SCROLLING) {
if (!mScrollProfilingStarted) {
  Debug.startMethodTracing(""String_Node_Str"");
  mScrollProfilingStarted=true;
}
}
if (y != mLastY) {
if ((mGroupFlags & FLAG_DISALLOW_INTERCEPT) == 0 && Math.abs(deltaY) > mTouchSlop) {
requestDisallowInterceptTouchEvent(true);
}
final int rawDeltaY=deltaY;
deltaY-=mMotionCorrection;
int incrementalDeltaY=mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY;
final int motionIndex;
if (mMotionPosition >= 0) {
motionIndex=mMotionPosition - mFirstPosition;
}
 else {
motionIndex=getChildCount() / 2;
}
int motionViewPrevTop=0;
View motionView=this.getChildAt(motionIndex);
if (motionView != null) {
motionViewPrevTop=motionView.getTop();
}
boolean atEdge=false;
if (incrementalDeltaY != 0) {
atEdge=trackMotionScroll(deltaY,incrementalDeltaY);
}
motionView=this.getChildAt(motionIndex);
if (motionView != null) {
final int motionViewRealTop=motionView.getTop();
if (atEdge) {
  int overscroll=-incrementalDeltaY - (motionViewRealTop - motionViewPrevTop);
  overscrollBy(0,overscroll,0,mScrollY,0,0,0,mOverscrollDistance,true);
  if (Math.abs(mOverscrollDistance) == Math.abs(mScrollY)) {
    mVelocityTracker.clear();
  }
  final int overscrollMode=getOverscrollMode();
  if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && !contentFits())) {
    mTouchMode=TOUCH_MODE_OVERSCROLL;
    if (rawDeltaY > 0) {
      mEdgeGlowTop.onPull((float)overscroll / getHeight());
    }
 else     if (rawDeltaY < 0) {
      mEdgeGlowBottom.onPull((float)overscroll / getHeight());
    }
  }
}
mMotionY=y;
invalidate();
}
mLastY=y;
}
break;
case TOUCH_MODE_OVERSCROLL:
if (y != mLastY) {
final int rawDeltaY=deltaY;
deltaY-=mMotionCorrection;
int incrementalDeltaY=mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY;
final int oldScroll=mScrollY;
final int newScroll=oldScroll - incrementalDeltaY;
if ((oldScroll >= 0 && newScroll <= 0) || (oldScroll <= 0 && newScroll >= 0)) {
incrementalDeltaY=-newScroll;
mScrollY=0;
if (incrementalDeltaY != 0) {
trackMotionScroll(incrementalDeltaY,incrementalDeltaY);
}
View motionView=this.getChildAt(mMotionPosition - mFirstPosition);
if (motionView != null) {
mTouchMode=TOUCH_MODE_SCROLL;
final int motionPosition=findClosestMotionRow(y);
mMotionCorrection=0;
motionView=getChildAt(motionPosition - mFirstPosition);
mMotionViewOriginalTop=motionView.getTop();
mMotionY=y;
mMotionPosition=motionPosition;
}
}
 else {
overscrollBy(0,-incrementalDeltaY,0,mScrollY,0,0,0,mOverscrollDistance,true);
final int overscrollMode=getOverscrollMode();
if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && !contentFits())) {
if (rawDeltaY > 0) {
mEdgeGlowTop.onPull((float)-incrementalDeltaY / getHeight());
}
 else if (rawDeltaY < 0) {
mEdgeGlowBottom.onPull((float)-incrementalDeltaY / getHeight());
}
invalidate();
}
if (Math.abs(mOverscrollDistance) == Math.abs(mScrollY)) {
mVelocityTracker.clear();
}
}
mLastY=y;
}
break;
}
break;
}
case MotionEvent.ACTION_UP:
{
switch (mTouchMode) {
case TOUCH_MODE_DOWN:
case TOUCH_MODE_TAP:
case TOUCH_MODE_DONE_WAITING:
final int motionPosition=mMotionPosition;
final View child=getChildAt(motionPosition - mFirstPosition);
if (child != null && !child.hasFocusable()) {
if (mTouchMode != TOUCH_MODE_DOWN) {
child.setPressed(false);
}
if (mPerformClick == null) {
mPerformClick=new PerformClick();
}
final AbsListView.PerformClick performClick=mPerformClick;
performClick.mChild=child;
performClick.mClickMotionPosition=motionPosition;
performClick.rememberWindowAttachCount();
mResurrectToPosition=motionPosition;
if (mTouchMode == TOUCH_MODE_DOWN || mTouchMode == TOUCH_MODE_TAP) {
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mTouchMode == TOUCH_MODE_DOWN ? mPendingCheckForTap : mPendingCheckForLongPress);
}
mLayoutMode=LAYOUT_NORMAL;
if (!mDataChanged && mAdapter.isEnabled(motionPosition)) {
mTouchMode=TOUCH_MODE_TAP;
setSelectedPositionInt(mMotionPosition);
layoutChildren();
child.setPressed(true);
positionSelector(child);
setPressed(true);
if (mSelector != null) {
Drawable d=mSelector.getCurrent();
if (d != null && d instanceof TransitionDrawable) {
((TransitionDrawable)d).resetTransition();
}
}
postDelayed(new Runnable(){
public void run(){
child.setPressed(false);
setPressed(false);
if (!mDataChanged) {
post(performClick);
}
mTouchMode=TOUCH_MODE_REST;
}
}
,ViewConfiguration.getPressedStateDuration());
}
 else {
mTouchMode=TOUCH_MODE_REST;
}
return true;
}
 else if (!mDataChanged && mAdapter.isEnabled(motionPosition)) {
post(performClick);
}
}
mTouchMode=TOUCH_MODE_REST;
break;
case TOUCH_MODE_SCROLL:
final int childCount=getChildCount();
if (childCount > 0) {
final int firstChildTop=getChildAt(0).getTop();
final int lastChildBottom=getChildAt(childCount - 1).getBottom();
final int contentTop=mListPadding.top;
final int contentBottom=getHeight() - mListPadding.bottom;
if (mFirstPosition == 0 && firstChildTop >= contentTop && mFirstPosition + childCount < mItemCount && lastChildBottom <= getHeight() - contentBottom) {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
 else {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(initialVelocity) > mMinimumVelocity && !((mFirstPosition == 0 && firstChildTop == contentTop - mOverscrollDistance) || (mFirstPosition + childCount == mItemCount && lastChildBottom == contentBottom + mOverscrollDistance))) {
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
mFlingRunnable.start(-initialVelocity);
}
 else {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
}
}
 else {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
break;
case TOUCH_MODE_OVERSCROLL:
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
if (Math.abs(initialVelocity) > mMinimumVelocity) {
mFlingRunnable.startOverfling(-initialVelocity);
}
 else {
mFlingRunnable.startSpringback();
}
break;
}
setPressed(false);
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
invalidate();
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mPendingCheckForLongPress);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
mActivePointerId=INVALID_POINTER;
if (PROFILE_SCROLLING) {
if (mScrollProfilingStarted) {
Debug.stopMethodTracing();
mScrollProfilingStarted=false;
}
}
break;
}
case MotionEvent.ACTION_CANCEL:
{
switch (mTouchMode) {
case TOUCH_MODE_OVERSCROLL:
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
mFlingRunnable.startSpringback();
break;
case TOUCH_MODE_OVERFLING:
break;
default :
mTouchMode=TOUCH_MODE_REST;
setPressed(false);
View motionView=this.getChildAt(mMotionPosition - mFirstPosition);
if (motionView != null) {
motionView.setPressed(false);
}
clearScrollingCache();
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mPendingCheckForLongPress);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
mActivePointerId=INVALID_POINTER;
break;
}
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
final int x=mMotionX;
final int y=mMotionY;
final int motionPosition=pointToPosition(x,y);
if (motionPosition >= 0) {
v=getChildAt(motionPosition - mFirstPosition);
mMotionViewOriginalTop=v.getTop();
mMotionPosition=motionPosition;
}
mLastY=y;
break;
}
}
return true;
}"
21964,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      if (!(mIsBeingDragged=inChild((int)x,(int)ev.getY()))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int pulledToX=oldX + deltaX;
    if (pulledToX < 0) {
      mEdgeGlowLeft.onPull((float)deltaX / getWidth());
    }
 else     if (pulledToX > range) {
      mEdgeGlowRight.onPull((float)deltaX / getWidth());
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int right=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,right,0,0)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      if (!(mIsBeingDragged=inChild((int)x,(int)ev.getY()))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToX=oldX + deltaX;
      if (pulledToX < 0) {
        mEdgeGlowLeft.onPull((float)deltaX / getWidth());
      }
 else       if (pulledToX > range) {
        mEdgeGlowRight.onPull((float)deltaX / getWidth());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int right=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,right,0,0)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
21965,"@Override public void computeScroll(){
  if (mScroller.computeScrollOffset()) {
    int oldX=mScrollX;
    int oldY=mScrollY;
    int x=mScroller.getCurrX();
    int y=mScroller.getCurrY();
    if (oldX != x || oldY != y) {
      overscrollBy(x - oldX,y - oldY,oldX,oldY,getScrollRange(),0,mOverflingDistance,0,false);
      onScrollChanged(mScrollX,mScrollY,oldX,oldY);
      final int range=getScrollRange();
      if (x < 0 && oldX >= 0) {
        mEdgeGlowLeft.onAbsorb((int)mScroller.getCurrVelocity());
      }
 else       if (x > range && oldX <= range) {
        mEdgeGlowRight.onAbsorb((int)mScroller.getCurrVelocity());
      }
    }
    awakenScrollBars();
    postInvalidate();
  }
}","@Override public void computeScroll(){
  if (mScroller.computeScrollOffset()) {
    int oldX=mScrollX;
    int oldY=mScrollY;
    int x=mScroller.getCurrX();
    int y=mScroller.getCurrY();
    if (oldX != x || oldY != y) {
      overscrollBy(x - oldX,y - oldY,oldX,oldY,getScrollRange(),0,mOverflingDistance,0,false);
      onScrollChanged(mScrollX,mScrollY,oldX,oldY);
      final int range=getScrollRange();
      final int overscrollMode=getOverscrollMode();
      if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
        if (x < 0 && oldX >= 0) {
          mEdgeGlowLeft.onAbsorb((int)mScroller.getCurrVelocity());
        }
 else         if (x > range && oldX <= range) {
          mEdgeGlowRight.onAbsorb((int)mScroller.getCurrVelocity());
        }
      }
    }
    awakenScrollBars();
    postInvalidate();
  }
}"
21966,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float y=ev.getY();
      if (!(mIsBeingDragged=inChild((int)ev.getX(),(int)y))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(0,deltaY,0,mScrollY,0,range,0,mOverscrollDistance,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int pulledToY=oldY + deltaY;
    if (pulledToY < 0) {
      mEdgeGlowTop.onPull((float)deltaY / getHeight());
    }
 else     if (pulledToY > range) {
      mEdgeGlowBottom.onPull((float)deltaY / getHeight());
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int bottom=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,0,0,bottom)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,0,0,getScrollRange())) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float y=ev.getY();
      if (!(mIsBeingDragged=inChild((int)ev.getX(),(int)y))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(0,deltaY,0,mScrollY,0,range,0,mOverscrollDistance,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToY=oldY + deltaY;
      if (pulledToY < 0) {
        mEdgeGlowTop.onPull((float)deltaY / getHeight());
      }
 else       if (pulledToY > range) {
        mEdgeGlowBottom.onPull((float)deltaY / getHeight());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int bottom=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,0,0,bottom)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,0,0,getScrollRange())) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
21967,"@Override public void computeScroll(){
  if (mScroller.computeScrollOffset()) {
    int oldX=mScrollX;
    int oldY=mScrollY;
    int x=mScroller.getCurrX();
    int y=mScroller.getCurrY();
    if (oldX != x || oldY != y) {
      overscrollBy(x - oldX,y - oldY,oldX,oldY,0,getScrollRange(),0,mOverflingDistance,false);
      onScrollChanged(mScrollX,mScrollY,oldX,oldY);
      final int range=getScrollRange();
      if (y < 0 && oldY >= 0) {
        mEdgeGlowTop.onAbsorb((int)mScroller.getCurrVelocity());
      }
 else       if (y > range && oldY <= range) {
        mEdgeGlowBottom.onAbsorb((int)mScroller.getCurrVelocity());
      }
    }
    awakenScrollBars();
    postInvalidate();
  }
}","@Override public void computeScroll(){
  if (mScroller.computeScrollOffset()) {
    int oldX=mScrollX;
    int oldY=mScrollY;
    int x=mScroller.getCurrX();
    int y=mScroller.getCurrY();
    if (oldX != x || oldY != y) {
      overscrollBy(x - oldX,y - oldY,oldX,oldY,0,getScrollRange(),0,mOverflingDistance,false);
      onScrollChanged(mScrollX,mScrollY,oldX,oldY);
      final int range=getScrollRange();
      final int overscrollMode=getOverscrollMode();
      if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
        if (y < 0 && oldY >= 0) {
          mEdgeGlowTop.onAbsorb((int)mScroller.getCurrVelocity());
        }
 else         if (y > range && oldY <= range) {
          mEdgeGlowBottom.onAbsorb((int)mScroller.getCurrVelocity());
        }
      }
    }
    awakenScrollBars();
    postInvalidate();
  }
}"
21968,"void edgeReached(int delta){
  mScroller.notifyVerticalEdgeReached(mScrollY,0,mOverflingDistance);
  mTouchMode=TOUCH_MODE_OVERFLING;
  if (mEdgeGlowTop != null) {
    final int vel=(int)mScroller.getCurrVelocity();
    if (delta > 0) {
      mEdgeGlowTop.onAbsorb(vel);
    }
 else {
      mEdgeGlowBottom.onAbsorb(vel);
    }
  }
  invalidate();
  post(this);
}","void edgeReached(int delta){
  mScroller.notifyVerticalEdgeReached(mScrollY,0,mOverflingDistance);
  final int overscrollMode=getOverscrollMode();
  if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && !contentFits())) {
    mTouchMode=TOUCH_MODE_OVERFLING;
    final int vel=(int)mScroller.getCurrVelocity();
    if (delta > 0) {
      mEdgeGlowTop.onAbsorb(vel);
    }
 else {
      mEdgeGlowBottom.onAbsorb(vel);
    }
  }
  invalidate();
  post(this);
}"
21969,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isEnabled()) {
    return isClickable() || isLongClickable();
  }
  if (mFastScroller != null) {
    boolean intercepted=mFastScroller.onTouchEvent(ev);
    if (intercepted) {
      return true;
    }
  }
  final int action=ev.getAction();
  View v;
  int deltaY;
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
switch (mTouchMode) {
case TOUCH_MODE_OVERFLING:
{
          mFlingRunnable.endFling();
          mTouchMode=TOUCH_MODE_OVERSCROLL;
          mMotionY=mLastY=(int)ev.getY();
          mMotionCorrection=0;
          mActivePointerId=ev.getPointerId(0);
          break;
        }
default :
{
        mActivePointerId=ev.getPointerId(0);
        final int x=(int)ev.getX();
        final int y=(int)ev.getY();
        int motionPosition=pointToPosition(x,y);
        if (!mDataChanged) {
          if ((mTouchMode != TOUCH_MODE_FLING) && (motionPosition >= 0) && (getAdapter().isEnabled(motionPosition))) {
            mTouchMode=TOUCH_MODE_DOWN;
            if (mPendingCheckForTap == null) {
              mPendingCheckForTap=new CheckForTap();
            }
            postDelayed(mPendingCheckForTap,ViewConfiguration.getTapTimeout());
          }
 else {
            if (ev.getEdgeFlags() != 0 && motionPosition < 0) {
              return false;
            }
            if (mTouchMode == TOUCH_MODE_FLING) {
              createScrollingCache();
              mTouchMode=TOUCH_MODE_SCROLL;
              mMotionCorrection=0;
              motionPosition=findMotionRow(y);
              reportScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);
            }
          }
        }
        if (motionPosition >= 0) {
          v=getChildAt(motionPosition - mFirstPosition);
          mMotionViewOriginalTop=v.getTop();
        }
        mMotionX=x;
        mMotionY=y;
        mMotionPosition=motionPosition;
        mLastY=Integer.MIN_VALUE;
        break;
      }
  }
  break;
}
case MotionEvent.ACTION_MOVE:
{
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final int y=(int)ev.getY(pointerIndex);
deltaY=y - mMotionY;
switch (mTouchMode) {
case TOUCH_MODE_DOWN:
case TOUCH_MODE_TAP:
case TOUCH_MODE_DONE_WAITING:
  startScrollIfNeeded(deltaY);
break;
case TOUCH_MODE_SCROLL:
if (PROFILE_SCROLLING) {
if (!mScrollProfilingStarted) {
  Debug.startMethodTracing(""String_Node_Str"");
  mScrollProfilingStarted=true;
}
}
if (y != mLastY) {
if ((mGroupFlags & FLAG_DISALLOW_INTERCEPT) == 0 && Math.abs(deltaY) > mTouchSlop) {
requestDisallowInterceptTouchEvent(true);
}
final int rawDeltaY=deltaY;
deltaY-=mMotionCorrection;
int incrementalDeltaY=mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY;
final int motionIndex;
if (mMotionPosition >= 0) {
motionIndex=mMotionPosition - mFirstPosition;
}
 else {
motionIndex=getChildCount() / 2;
}
int motionViewPrevTop=0;
View motionView=this.getChildAt(motionIndex);
if (motionView != null) {
motionViewPrevTop=motionView.getTop();
}
boolean atEdge=false;
if (incrementalDeltaY != 0) {
atEdge=trackMotionScroll(deltaY,incrementalDeltaY);
}
motionView=this.getChildAt(motionIndex);
if (motionView != null) {
final int motionViewRealTop=motionView.getTop();
if (atEdge) {
  int overscroll=-incrementalDeltaY - (motionViewRealTop - motionViewPrevTop);
  overscrollBy(0,overscroll,0,mScrollY,0,0,0,mOverscrollDistance,true);
  if (Math.abs(mOverscrollDistance) == Math.abs(mScrollY)) {
    mVelocityTracker.clear();
  }
  mTouchMode=TOUCH_MODE_OVERSCROLL;
  if (mEdgeGlowTop != null) {
    if (rawDeltaY > 0) {
      mEdgeGlowTop.onPull((float)overscroll / getHeight());
    }
 else     if (rawDeltaY < 0) {
      mEdgeGlowBottom.onPull((float)overscroll / getHeight());
    }
  }
}
mMotionY=y;
invalidate();
}
mLastY=y;
}
break;
case TOUCH_MODE_OVERSCROLL:
if (y != mLastY) {
final int rawDeltaY=deltaY;
deltaY-=mMotionCorrection;
int incrementalDeltaY=mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY;
final int oldScroll=mScrollY;
final int newScroll=oldScroll - incrementalDeltaY;
if ((oldScroll >= 0 && newScroll <= 0) || (oldScroll <= 0 && newScroll >= 0)) {
incrementalDeltaY=-newScroll;
mScrollY=0;
if (incrementalDeltaY != 0) {
trackMotionScroll(incrementalDeltaY,incrementalDeltaY);
}
View motionView=this.getChildAt(mMotionPosition - mFirstPosition);
if (motionView != null) {
mTouchMode=TOUCH_MODE_SCROLL;
final int motionPosition=findClosestMotionRow(y);
mMotionCorrection=0;
motionView=getChildAt(motionPosition - mFirstPosition);
mMotionViewOriginalTop=motionView.getTop();
mMotionY=y;
mMotionPosition=motionPosition;
}
}
 else {
overscrollBy(0,-incrementalDeltaY,0,mScrollY,0,0,0,mOverscrollDistance,true);
if (mEdgeGlowTop != null) {
if (rawDeltaY > 0) {
mEdgeGlowTop.onPull((float)-incrementalDeltaY / getHeight());
}
 else if (rawDeltaY < 0) {
mEdgeGlowBottom.onPull((float)-incrementalDeltaY / getHeight());
}
invalidate();
}
if (Math.abs(mOverscrollDistance) == Math.abs(mScrollY)) {
mVelocityTracker.clear();
}
}
mLastY=y;
}
break;
}
break;
}
case MotionEvent.ACTION_UP:
{
switch (mTouchMode) {
case TOUCH_MODE_DOWN:
case TOUCH_MODE_TAP:
case TOUCH_MODE_DONE_WAITING:
final int motionPosition=mMotionPosition;
final View child=getChildAt(motionPosition - mFirstPosition);
if (child != null && !child.hasFocusable()) {
if (mTouchMode != TOUCH_MODE_DOWN) {
child.setPressed(false);
}
if (mPerformClick == null) {
mPerformClick=new PerformClick();
}
final AbsListView.PerformClick performClick=mPerformClick;
performClick.mChild=child;
performClick.mClickMotionPosition=motionPosition;
performClick.rememberWindowAttachCount();
mResurrectToPosition=motionPosition;
if (mTouchMode == TOUCH_MODE_DOWN || mTouchMode == TOUCH_MODE_TAP) {
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mTouchMode == TOUCH_MODE_DOWN ? mPendingCheckForTap : mPendingCheckForLongPress);
}
mLayoutMode=LAYOUT_NORMAL;
if (!mDataChanged && mAdapter.isEnabled(motionPosition)) {
mTouchMode=TOUCH_MODE_TAP;
setSelectedPositionInt(mMotionPosition);
layoutChildren();
child.setPressed(true);
positionSelector(child);
setPressed(true);
if (mSelector != null) {
Drawable d=mSelector.getCurrent();
if (d != null && d instanceof TransitionDrawable) {
((TransitionDrawable)d).resetTransition();
}
}
postDelayed(new Runnable(){
public void run(){
child.setPressed(false);
setPressed(false);
if (!mDataChanged) {
post(performClick);
}
mTouchMode=TOUCH_MODE_REST;
}
}
,ViewConfiguration.getPressedStateDuration());
}
 else {
mTouchMode=TOUCH_MODE_REST;
}
return true;
}
 else if (!mDataChanged && mAdapter.isEnabled(motionPosition)) {
post(performClick);
}
}
mTouchMode=TOUCH_MODE_REST;
break;
case TOUCH_MODE_SCROLL:
final int childCount=getChildCount();
if (childCount > 0) {
final int firstChildTop=getChildAt(0).getTop();
final int lastChildBottom=getChildAt(childCount - 1).getBottom();
final int contentTop=mListPadding.top;
final int contentBottom=getHeight() - mListPadding.bottom;
if (mFirstPosition == 0 && firstChildTop >= contentTop && mFirstPosition + childCount < mItemCount && lastChildBottom <= getHeight() - contentBottom) {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
 else {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(initialVelocity) > mMinimumVelocity && !((mFirstPosition == 0 && firstChildTop == contentTop - mOverscrollDistance) || (mFirstPosition + childCount == mItemCount && lastChildBottom == contentBottom + mOverscrollDistance))) {
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
mFlingRunnable.start(-initialVelocity);
}
 else {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
}
}
 else {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
break;
case TOUCH_MODE_OVERSCROLL:
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
if (Math.abs(initialVelocity) > mMinimumVelocity) {
mFlingRunnable.startOverfling(-initialVelocity);
}
 else {
mFlingRunnable.startSpringback();
}
break;
}
setPressed(false);
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
invalidate();
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mPendingCheckForLongPress);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
mActivePointerId=INVALID_POINTER;
if (PROFILE_SCROLLING) {
if (mScrollProfilingStarted) {
Debug.stopMethodTracing();
mScrollProfilingStarted=false;
}
}
break;
}
case MotionEvent.ACTION_CANCEL:
{
switch (mTouchMode) {
case TOUCH_MODE_OVERSCROLL:
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
mFlingRunnable.startSpringback();
break;
case TOUCH_MODE_OVERFLING:
break;
default :
mTouchMode=TOUCH_MODE_REST;
setPressed(false);
View motionView=this.getChildAt(mMotionPosition - mFirstPosition);
if (motionView != null) {
motionView.setPressed(false);
}
clearScrollingCache();
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mPendingCheckForLongPress);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
mActivePointerId=INVALID_POINTER;
break;
}
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
final int x=mMotionX;
final int y=mMotionY;
final int motionPosition=pointToPosition(x,y);
if (motionPosition >= 0) {
v=getChildAt(motionPosition - mFirstPosition);
mMotionViewOriginalTop=v.getTop();
mMotionPosition=motionPosition;
}
mLastY=y;
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isEnabled()) {
    return isClickable() || isLongClickable();
  }
  if (mFastScroller != null) {
    boolean intercepted=mFastScroller.onTouchEvent(ev);
    if (intercepted) {
      return true;
    }
  }
  final int action=ev.getAction();
  View v;
  int deltaY;
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
switch (mTouchMode) {
case TOUCH_MODE_OVERFLING:
{
          mFlingRunnable.endFling();
          mTouchMode=TOUCH_MODE_OVERSCROLL;
          mMotionY=mLastY=(int)ev.getY();
          mMotionCorrection=0;
          mActivePointerId=ev.getPointerId(0);
          break;
        }
default :
{
        mActivePointerId=ev.getPointerId(0);
        final int x=(int)ev.getX();
        final int y=(int)ev.getY();
        int motionPosition=pointToPosition(x,y);
        if (!mDataChanged) {
          if ((mTouchMode != TOUCH_MODE_FLING) && (motionPosition >= 0) && (getAdapter().isEnabled(motionPosition))) {
            mTouchMode=TOUCH_MODE_DOWN;
            if (mPendingCheckForTap == null) {
              mPendingCheckForTap=new CheckForTap();
            }
            postDelayed(mPendingCheckForTap,ViewConfiguration.getTapTimeout());
          }
 else {
            if (ev.getEdgeFlags() != 0 && motionPosition < 0) {
              return false;
            }
            if (mTouchMode == TOUCH_MODE_FLING) {
              createScrollingCache();
              mTouchMode=TOUCH_MODE_SCROLL;
              mMotionCorrection=0;
              motionPosition=findMotionRow(y);
              reportScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);
            }
          }
        }
        if (motionPosition >= 0) {
          v=getChildAt(motionPosition - mFirstPosition);
          mMotionViewOriginalTop=v.getTop();
        }
        mMotionX=x;
        mMotionY=y;
        mMotionPosition=motionPosition;
        mLastY=Integer.MIN_VALUE;
        break;
      }
  }
  break;
}
case MotionEvent.ACTION_MOVE:
{
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final int y=(int)ev.getY(pointerIndex);
deltaY=y - mMotionY;
switch (mTouchMode) {
case TOUCH_MODE_DOWN:
case TOUCH_MODE_TAP:
case TOUCH_MODE_DONE_WAITING:
  startScrollIfNeeded(deltaY);
break;
case TOUCH_MODE_SCROLL:
if (PROFILE_SCROLLING) {
if (!mScrollProfilingStarted) {
  Debug.startMethodTracing(""String_Node_Str"");
  mScrollProfilingStarted=true;
}
}
if (y != mLastY) {
if ((mGroupFlags & FLAG_DISALLOW_INTERCEPT) == 0 && Math.abs(deltaY) > mTouchSlop) {
requestDisallowInterceptTouchEvent(true);
}
final int rawDeltaY=deltaY;
deltaY-=mMotionCorrection;
int incrementalDeltaY=mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY;
final int motionIndex;
if (mMotionPosition >= 0) {
motionIndex=mMotionPosition - mFirstPosition;
}
 else {
motionIndex=getChildCount() / 2;
}
int motionViewPrevTop=0;
View motionView=this.getChildAt(motionIndex);
if (motionView != null) {
motionViewPrevTop=motionView.getTop();
}
boolean atEdge=false;
if (incrementalDeltaY != 0) {
atEdge=trackMotionScroll(deltaY,incrementalDeltaY);
}
motionView=this.getChildAt(motionIndex);
if (motionView != null) {
final int motionViewRealTop=motionView.getTop();
if (atEdge) {
  int overscroll=-incrementalDeltaY - (motionViewRealTop - motionViewPrevTop);
  overscrollBy(0,overscroll,0,mScrollY,0,0,0,mOverscrollDistance,true);
  if (Math.abs(mOverscrollDistance) == Math.abs(mScrollY)) {
    mVelocityTracker.clear();
  }
  final int overscrollMode=getOverscrollMode();
  if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && !contentFits())) {
    mTouchMode=TOUCH_MODE_OVERSCROLL;
    if (rawDeltaY > 0) {
      mEdgeGlowTop.onPull((float)overscroll / getHeight());
    }
 else     if (rawDeltaY < 0) {
      mEdgeGlowBottom.onPull((float)overscroll / getHeight());
    }
  }
}
mMotionY=y;
invalidate();
}
mLastY=y;
}
break;
case TOUCH_MODE_OVERSCROLL:
if (y != mLastY) {
final int rawDeltaY=deltaY;
deltaY-=mMotionCorrection;
int incrementalDeltaY=mLastY != Integer.MIN_VALUE ? y - mLastY : deltaY;
final int oldScroll=mScrollY;
final int newScroll=oldScroll - incrementalDeltaY;
if ((oldScroll >= 0 && newScroll <= 0) || (oldScroll <= 0 && newScroll >= 0)) {
incrementalDeltaY=-newScroll;
mScrollY=0;
if (incrementalDeltaY != 0) {
trackMotionScroll(incrementalDeltaY,incrementalDeltaY);
}
View motionView=this.getChildAt(mMotionPosition - mFirstPosition);
if (motionView != null) {
mTouchMode=TOUCH_MODE_SCROLL;
final int motionPosition=findClosestMotionRow(y);
mMotionCorrection=0;
motionView=getChildAt(motionPosition - mFirstPosition);
mMotionViewOriginalTop=motionView.getTop();
mMotionY=y;
mMotionPosition=motionPosition;
}
}
 else {
overscrollBy(0,-incrementalDeltaY,0,mScrollY,0,0,0,mOverscrollDistance,true);
final int overscrollMode=getOverscrollMode();
if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && !contentFits())) {
if (rawDeltaY > 0) {
mEdgeGlowTop.onPull((float)-incrementalDeltaY / getHeight());
}
 else if (rawDeltaY < 0) {
mEdgeGlowBottom.onPull((float)-incrementalDeltaY / getHeight());
}
invalidate();
}
if (Math.abs(mOverscrollDistance) == Math.abs(mScrollY)) {
mVelocityTracker.clear();
}
}
mLastY=y;
}
break;
}
break;
}
case MotionEvent.ACTION_UP:
{
switch (mTouchMode) {
case TOUCH_MODE_DOWN:
case TOUCH_MODE_TAP:
case TOUCH_MODE_DONE_WAITING:
final int motionPosition=mMotionPosition;
final View child=getChildAt(motionPosition - mFirstPosition);
if (child != null && !child.hasFocusable()) {
if (mTouchMode != TOUCH_MODE_DOWN) {
child.setPressed(false);
}
if (mPerformClick == null) {
mPerformClick=new PerformClick();
}
final AbsListView.PerformClick performClick=mPerformClick;
performClick.mChild=child;
performClick.mClickMotionPosition=motionPosition;
performClick.rememberWindowAttachCount();
mResurrectToPosition=motionPosition;
if (mTouchMode == TOUCH_MODE_DOWN || mTouchMode == TOUCH_MODE_TAP) {
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mTouchMode == TOUCH_MODE_DOWN ? mPendingCheckForTap : mPendingCheckForLongPress);
}
mLayoutMode=LAYOUT_NORMAL;
if (!mDataChanged && mAdapter.isEnabled(motionPosition)) {
mTouchMode=TOUCH_MODE_TAP;
setSelectedPositionInt(mMotionPosition);
layoutChildren();
child.setPressed(true);
positionSelector(child);
setPressed(true);
if (mSelector != null) {
Drawable d=mSelector.getCurrent();
if (d != null && d instanceof TransitionDrawable) {
((TransitionDrawable)d).resetTransition();
}
}
postDelayed(new Runnable(){
public void run(){
child.setPressed(false);
setPressed(false);
if (!mDataChanged) {
post(performClick);
}
mTouchMode=TOUCH_MODE_REST;
}
}
,ViewConfiguration.getPressedStateDuration());
}
 else {
mTouchMode=TOUCH_MODE_REST;
}
return true;
}
 else if (!mDataChanged && mAdapter.isEnabled(motionPosition)) {
post(performClick);
}
}
mTouchMode=TOUCH_MODE_REST;
break;
case TOUCH_MODE_SCROLL:
final int childCount=getChildCount();
if (childCount > 0) {
final int firstChildTop=getChildAt(0).getTop();
final int lastChildBottom=getChildAt(childCount - 1).getBottom();
final int contentTop=mListPadding.top;
final int contentBottom=getHeight() - mListPadding.bottom;
if (mFirstPosition == 0 && firstChildTop >= contentTop && mFirstPosition + childCount < mItemCount && lastChildBottom <= getHeight() - contentBottom) {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
 else {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (Math.abs(initialVelocity) > mMinimumVelocity && !((mFirstPosition == 0 && firstChildTop == contentTop - mOverscrollDistance) || (mFirstPosition + childCount == mItemCount && lastChildBottom == contentBottom + mOverscrollDistance))) {
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
mFlingRunnable.start(-initialVelocity);
}
 else {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
}
}
 else {
mTouchMode=TOUCH_MODE_REST;
reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
}
break;
case TOUCH_MODE_OVERSCROLL:
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
if (Math.abs(initialVelocity) > mMinimumVelocity) {
mFlingRunnable.startOverfling(-initialVelocity);
}
 else {
mFlingRunnable.startSpringback();
}
break;
}
setPressed(false);
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
invalidate();
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mPendingCheckForLongPress);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
mActivePointerId=INVALID_POINTER;
if (PROFILE_SCROLLING) {
if (mScrollProfilingStarted) {
Debug.stopMethodTracing();
mScrollProfilingStarted=false;
}
}
break;
}
case MotionEvent.ACTION_CANCEL:
{
switch (mTouchMode) {
case TOUCH_MODE_OVERSCROLL:
if (mFlingRunnable == null) {
mFlingRunnable=new FlingRunnable();
}
mFlingRunnable.startSpringback();
break;
case TOUCH_MODE_OVERFLING:
break;
default :
mTouchMode=TOUCH_MODE_REST;
setPressed(false);
View motionView=this.getChildAt(mMotionPosition - mFirstPosition);
if (motionView != null) {
motionView.setPressed(false);
}
clearScrollingCache();
final Handler handler=getHandler();
if (handler != null) {
handler.removeCallbacks(mPendingCheckForLongPress);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
mActivePointerId=INVALID_POINTER;
break;
}
case MotionEvent.ACTION_POINTER_UP:
{
onSecondaryPointerUp(ev);
final int x=mMotionX;
final int y=mMotionY;
final int motionPosition=pointToPosition(x,y);
if (motionPosition >= 0) {
v=getChildAt(motionPosition - mFirstPosition);
mMotionViewOriginalTop=v.getTop();
mMotionPosition=motionPosition;
}
mLastY=y;
break;
}
}
return true;
}"
21970,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      if (!(mIsBeingDragged=inChild((int)x,(int)ev.getY()))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int pulledToX=oldX + deltaX;
    if (pulledToX < 0) {
      mEdgeGlowLeft.onPull((float)deltaX / getWidth());
    }
 else     if (pulledToX > range) {
      mEdgeGlowRight.onPull((float)deltaX / getWidth());
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int right=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,right,0,0)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      if (!(mIsBeingDragged=inChild((int)x,(int)ev.getY()))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToX=oldX + deltaX;
      if (pulledToX < 0) {
        mEdgeGlowLeft.onPull((float)deltaX / getWidth());
      }
 else       if (pulledToX > range) {
        mEdgeGlowRight.onPull((float)deltaX / getWidth());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int right=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,right,0,0)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
21971,"@Override public void computeScroll(){
  if (mScroller.computeScrollOffset()) {
    int oldX=mScrollX;
    int oldY=mScrollY;
    int x=mScroller.getCurrX();
    int y=mScroller.getCurrY();
    if (oldX != x || oldY != y) {
      overscrollBy(x - oldX,y - oldY,oldX,oldY,getScrollRange(),0,mOverflingDistance,0,false);
      onScrollChanged(mScrollX,mScrollY,oldX,oldY);
      final int range=getScrollRange();
      if (x < 0 && oldX >= 0) {
        mEdgeGlowLeft.onAbsorb((int)mScroller.getCurrVelocity());
      }
 else       if (x > range && oldX <= range) {
        mEdgeGlowRight.onAbsorb((int)mScroller.getCurrVelocity());
      }
    }
    awakenScrollBars();
    postInvalidate();
  }
}","@Override public void computeScroll(){
  if (mScroller.computeScrollOffset()) {
    int oldX=mScrollX;
    int oldY=mScrollY;
    int x=mScroller.getCurrX();
    int y=mScroller.getCurrY();
    if (oldX != x || oldY != y) {
      overscrollBy(x - oldX,y - oldY,oldX,oldY,getScrollRange(),0,mOverflingDistance,0,false);
      onScrollChanged(mScrollX,mScrollY,oldX,oldY);
      final int range=getScrollRange();
      final int overscrollMode=getOverscrollMode();
      if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
        if (x < 0 && oldX >= 0) {
          mEdgeGlowLeft.onAbsorb((int)mScroller.getCurrVelocity());
        }
 else         if (x > range && oldX <= range) {
          mEdgeGlowRight.onAbsorb((int)mScroller.getCurrVelocity());
        }
      }
    }
    awakenScrollBars();
    postInvalidate();
  }
}"
21972,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float y=ev.getY();
      if (!(mIsBeingDragged=inChild((int)ev.getX(),(int)y))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(0,deltaY,0,mScrollY,0,range,0,mOverscrollDistance,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int pulledToY=oldY + deltaY;
    if (pulledToY < 0) {
      mEdgeGlowTop.onPull((float)deltaY / getHeight());
    }
 else     if (pulledToY > range) {
      mEdgeGlowBottom.onPull((float)deltaY / getHeight());
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int bottom=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,0,0,bottom)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,0,0,getScrollRange())) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float y=ev.getY();
      if (!(mIsBeingDragged=inChild((int)ev.getX(),(int)y))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final int oldX=mScrollX;
    final int oldY=mScrollY;
    final int range=getScrollRange();
    if (overscrollBy(0,deltaY,0,mScrollY,0,range,0,mOverscrollDistance,true)) {
      mVelocityTracker.clear();
    }
    onScrollChanged(mScrollX,mScrollY,oldX,oldY);
    final int overscrollMode=getOverscrollMode();
    if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
      final int pulledToY=oldY + deltaY;
      if (pulledToY < 0) {
        mEdgeGlowTop.onPull((float)deltaY / getHeight());
      }
 else       if (pulledToY > range) {
        mEdgeGlowBottom.onPull((float)deltaY / getHeight());
      }
    }
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (getChildCount() > 0) {
  if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
    fling(-initialVelocity);
  }
 else {
    final int bottom=getScrollRange();
    if (mScroller.springback(mScrollX,mScrollY,0,0,0,bottom)) {
      invalidate();
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springback(mScrollX,mScrollY,0,0,0,getScrollRange())) {
invalidate();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mEdgeGlowTop != null) {
mEdgeGlowTop.onRelease();
mEdgeGlowBottom.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
21973,"@Override public void computeScroll(){
  if (mScroller.computeScrollOffset()) {
    int oldX=mScrollX;
    int oldY=mScrollY;
    int x=mScroller.getCurrX();
    int y=mScroller.getCurrY();
    if (oldX != x || oldY != y) {
      overscrollBy(x - oldX,y - oldY,oldX,oldY,0,getScrollRange(),0,mOverflingDistance,false);
      onScrollChanged(mScrollX,mScrollY,oldX,oldY);
      final int range=getScrollRange();
      if (y < 0 && oldY >= 0) {
        mEdgeGlowTop.onAbsorb((int)mScroller.getCurrVelocity());
      }
 else       if (y > range && oldY <= range) {
        mEdgeGlowBottom.onAbsorb((int)mScroller.getCurrVelocity());
      }
    }
    awakenScrollBars();
    postInvalidate();
  }
}","@Override public void computeScroll(){
  if (mScroller.computeScrollOffset()) {
    int oldX=mScrollX;
    int oldY=mScrollY;
    int x=mScroller.getCurrX();
    int y=mScroller.getCurrY();
    if (oldX != x || oldY != y) {
      overscrollBy(x - oldX,y - oldY,oldX,oldY,0,getScrollRange(),0,mOverflingDistance,false);
      onScrollChanged(mScrollX,mScrollY,oldX,oldY);
      final int range=getScrollRange();
      final int overscrollMode=getOverscrollMode();
      if (overscrollMode == OVERSCROLL_ALWAYS || (overscrollMode == OVERSCROLL_IF_CONTENT_SCROLLS && range > 0)) {
        if (y < 0 && oldY >= 0) {
          mEdgeGlowTop.onAbsorb((int)mScroller.getCurrVelocity());
        }
 else         if (y > range && oldY <= range) {
          mEdgeGlowBottom.onAbsorb((int)mScroller.getCurrVelocity());
        }
      }
    }
    awakenScrollBars();
    postInvalidate();
  }
}"
21974,"private boolean deleteSystemPackageLI(PackageParser.Package p,int flags,PackageRemovedInfo outInfo){
  ApplicationInfo applicationInfo=p.applicationInfo;
  if (applicationInfo == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str"");
    return false;
  }
  PackageSetting ps=null;
synchronized (mPackages) {
    ps=mSettings.getDisabledSystemPkg(p.packageName);
  }
  if (ps == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName);
    return false;
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
  outInfo.isRemovedPackageSystemUpdate=true;
  boolean deleteCodeAndResources=false;
  if (ps.versionCode < p.mVersionCode) {
    deleteCodeAndResources=true;
    if ((flags & PackageManager.DONT_DELETE_DATA) == 0) {
      flags&=~PackageManager.DONT_DELETE_DATA;
    }
  }
 else {
    if ((flags & PackageManager.DONT_DELETE_DATA) == 0) {
      flags|=PackageManager.DONT_DELETE_DATA;
    }
  }
  boolean ret=deleteInstalledPackageLI(p,deleteCodeAndResources,flags,outInfo);
  if (!ret) {
    return false;
  }
synchronized (mPackages) {
    mSettings.enableSystemPackageLP(p.packageName);
    removeNativeBinariesLI(p);
  }
  PackageParser.Package newPkg=scanPackageLI(ps.codePath,PackageParser.PARSE_MUST_BE_APK | PackageParser.PARSE_IS_SYSTEM,SCAN_MONITOR | SCAN_NO_PATHS);
  if (newPkg == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str""+ mLastScanError);
    return false;
  }
synchronized (mPackages) {
    updatePermissionsLP(newPkg.packageName,newPkg,true,true,false);
    mSettings.writeLP();
  }
  return true;
}","private boolean deleteSystemPackageLI(PackageParser.Package p,int flags,PackageRemovedInfo outInfo){
  ApplicationInfo applicationInfo=p.applicationInfo;
  if (applicationInfo == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str"");
    return false;
  }
  PackageSetting ps=null;
synchronized (mPackages) {
    ps=mSettings.getDisabledSystemPkg(p.packageName);
  }
  if (ps == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName);
    return false;
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
  outInfo.isRemovedPackageSystemUpdate=true;
  final boolean deleteCodeAndResources;
  if (ps.versionCode < p.mVersionCode) {
    deleteCodeAndResources=true;
    flags&=~PackageManager.DONT_DELETE_DATA;
  }
 else {
    deleteCodeAndResources=false;
    flags|=PackageManager.DONT_DELETE_DATA;
  }
  boolean ret=deleteInstalledPackageLI(p,deleteCodeAndResources,flags,outInfo);
  if (!ret) {
    return false;
  }
synchronized (mPackages) {
    mSettings.enableSystemPackageLP(p.packageName);
    removeNativeBinariesLI(p);
  }
  PackageParser.Package newPkg=scanPackageLI(ps.codePath,PackageParser.PARSE_MUST_BE_APK | PackageParser.PARSE_IS_SYSTEM,SCAN_MONITOR | SCAN_NO_PATHS);
  if (newPkg == null) {
    Slog.w(TAG,""String_Node_Str"" + p.packageName + ""String_Node_Str""+ mLastScanError);
    return false;
  }
synchronized (mPackages) {
    updatePermissionsLP(newPkg.packageName,newPkg,true,true,false);
    mSettings.writeLP();
  }
  return true;
}"
21975,"public void run(){
  if (mDataChanged) {
    post(this);
  }
 else {
    fireOnSelected();
  }
}","public void run(){
  if (mDataChanged) {
    if (getAdapter() != null) {
      post(this);
    }
  }
 else {
    fireOnSelected();
  }
}"
21976,"@Override public void onInvalidated(){
  mDataChanged=true;
  if (AdapterView.this.getAdapter().hasStableIds()) {
    mInstanceState=AdapterView.this.onSaveInstanceState();
  }
  mOldItemCount=mItemCount;
  mItemCount=0;
  mSelectedPosition=INVALID_POSITION;
  mSelectedRowId=INVALID_ROW_ID;
  mNextSelectedPosition=INVALID_POSITION;
  mNextSelectedRowId=INVALID_ROW_ID;
  mNeedSync=false;
  checkSelectionChanged();
  checkFocus();
  requestLayout();
}","@Override public void onInvalidated(){
  mDataChanged=true;
  if (AdapterView.this.getAdapter().hasStableIds()) {
    mInstanceState=AdapterView.this.onSaveInstanceState();
  }
  mOldItemCount=mItemCount;
  mItemCount=0;
  mSelectedPosition=INVALID_POSITION;
  mSelectedRowId=INVALID_ROW_ID;
  mNextSelectedPosition=INVALID_POSITION;
  mNextSelectedRowId=INVALID_ROW_ID;
  mNeedSync=false;
  checkFocus();
  requestLayout();
}"
21977,"void selectionChanged(){
  if (mOnItemSelectedListener != null) {
    if (mInLayout || mBlockLayoutRequests) {
      if (mSelectionNotifier == null) {
        mSelectionNotifier=new SelectionNotifier();
      }
      mSelectionNotifier.post(mSelectionNotifier);
    }
 else {
      fireOnSelected();
    }
  }
  if (mSelectedPosition != ListView.INVALID_POSITION && isShown() && !isInTouchMode()) {
    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);
  }
}","void selectionChanged(){
  if (mOnItemSelectedListener != null) {
    if (mInLayout || mBlockLayoutRequests) {
      if (mSelectionNotifier == null) {
        mSelectionNotifier=new SelectionNotifier();
      }
      post(mSelectionNotifier);
    }
 else {
      fireOnSelected();
    }
  }
  if (mSelectedPosition != ListView.INVALID_POSITION && isShown() && !isInTouchMode()) {
    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);
  }
}"
21978,"public void run(){
  if (mDataChanged) {
    post(this);
  }
 else {
    fireOnSelected();
  }
}","public void run(){
  if (mDataChanged) {
    if (getAdapter() != null) {
      post(this);
    }
  }
 else {
    fireOnSelected();
  }
}"
21979,"@Override public void onInvalidated(){
  mDataChanged=true;
  if (AdapterView.this.getAdapter().hasStableIds()) {
    mInstanceState=AdapterView.this.onSaveInstanceState();
  }
  mOldItemCount=mItemCount;
  mItemCount=0;
  mSelectedPosition=INVALID_POSITION;
  mSelectedRowId=INVALID_ROW_ID;
  mNextSelectedPosition=INVALID_POSITION;
  mNextSelectedRowId=INVALID_ROW_ID;
  mNeedSync=false;
  checkSelectionChanged();
  checkFocus();
  requestLayout();
}","@Override public void onInvalidated(){
  mDataChanged=true;
  if (AdapterView.this.getAdapter().hasStableIds()) {
    mInstanceState=AdapterView.this.onSaveInstanceState();
  }
  mOldItemCount=mItemCount;
  mItemCount=0;
  mSelectedPosition=INVALID_POSITION;
  mSelectedRowId=INVALID_ROW_ID;
  mNextSelectedPosition=INVALID_POSITION;
  mNextSelectedRowId=INVALID_ROW_ID;
  mNeedSync=false;
  checkFocus();
  requestLayout();
}"
21980,"void selectionChanged(){
  if (mOnItemSelectedListener != null) {
    if (mInLayout || mBlockLayoutRequests) {
      if (mSelectionNotifier == null) {
        mSelectionNotifier=new SelectionNotifier();
      }
      mSelectionNotifier.post(mSelectionNotifier);
    }
 else {
      fireOnSelected();
    }
  }
  if (mSelectedPosition != ListView.INVALID_POSITION && isShown() && !isInTouchMode()) {
    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);
  }
}","void selectionChanged(){
  if (mOnItemSelectedListener != null) {
    if (mInLayout || mBlockLayoutRequests) {
      if (mSelectionNotifier == null) {
        mSelectionNotifier=new SelectionNotifier();
      }
      post(mSelectionNotifier);
    }
 else {
      fireOnSelected();
    }
  }
  if (mSelectedPosition != ListView.INVALID_POSITION && isShown() && !isInTouchMode()) {
    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);
  }
}"
21981,"/** 
 * Sets the maximum and maximum preview fps. This controls the rate of preview frames received in   {@link #PreviewCallback}. The minimum and maximum preview fps must be one of the elements from   {@link #getSupportedPreviewFpsRange}.
 * @param min the minimum preview fps (scaled by 1000).
 * @param max the maximum preview fps (scaled by 1000).
 * @throws RuntimeException if fps range is invalid.
 * @see #setPreviewCallbackWithBuffer(Camera.PreviewCallback)
 * @see #getSupportedPreviewFpsRange()
 */
public void setPreviewFpsRange(int min,int max){
  set(KEY_PREVIEW_FPS_RANGE,""String_Node_Str"" + min + ""String_Node_Str""+ max);
}","/** 
 * Sets the maximum and maximum preview fps. This controls the rate of preview frames received in   {@link PreviewCallback}. The minimum and maximum preview fps must be one of the elements from   {@link #getSupportedPreviewFpsRange}.
 * @param min the minimum preview fps (scaled by 1000).
 * @param max the maximum preview fps (scaled by 1000).
 * @throws RuntimeException if fps range is invalid.
 * @see #setPreviewCallbackWithBuffer(Camera.PreviewCallback)
 * @see #getSupportedPreviewFpsRange()
 */
public void setPreviewFpsRange(int min,int max){
  set(KEY_PREVIEW_FPS_RANGE,""String_Node_Str"" + min + ""String_Node_Str""+ max);
}"
21982,"@Override public int update(Uri url,ContentValues initialValues,String where,String[] whereArgs){
  SqlArguments args=new SqlArguments(url,where,whereArgs);
  if (TABLE_FAVORITES.equals(args.table)) {
    return 0;
  }
  checkWritePermissions(args);
  sKnownMutationsInFlight.incrementAndGet();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  sKnownMutationsInFlight.decrementAndGet();
  int count=db.update(args.table,initialValues,args.where,args.args);
  if (count > 0) {
    SettingsCache.wipe(args.table);
    sendNotify(url);
  }
  startAsyncCachePopulation();
  if (LOCAL_LOGV)   Log.v(TAG,args.table + ""String_Node_Str"" + count+ ""String_Node_Str""+ initialValues);
  return count;
}","@Override public int update(Uri url,ContentValues initialValues,String where,String[] whereArgs){
  SqlArguments args=new SqlArguments(url,where,whereArgs);
  if (TABLE_FAVORITES.equals(args.table)) {
    return 0;
  }
  checkWritePermissions(args);
  sKnownMutationsInFlight.incrementAndGet();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  int count=db.update(args.table,initialValues,args.where,args.args);
  sKnownMutationsInFlight.decrementAndGet();
  if (count > 0) {
    SettingsCache.invalidate(args.table);
    sendNotify(url);
  }
  startAsyncCachePopulation();
  if (LOCAL_LOGV)   Log.v(TAG,args.table + ""String_Node_Str"" + count+ ""String_Node_Str""+ initialValues);
  return count;
}"
21983,"private void fullyPopulateCache(String table,SettingsCache cache){
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor c=db.query(table,new String[]{Settings.NameValueTable.NAME,Settings.NameValueTable.VALUE},null,null,null,null,null,""String_Node_Str"" + (MAX_CACHE_ENTRIES + 1));
  try {
synchronized (cache) {
      cache.clear();
      cache.setFullyMatchesDisk(true);
      int rows=0;
      while (c.moveToNext()) {
        rows++;
        String name=c.getString(0);
        String value=c.getString(1);
        cache.populate(name,value);
      }
      if (rows > MAX_CACHE_ENTRIES) {
        cache.setFullyMatchesDisk(false);
        Log.d(TAG,""String_Node_Str"" + table);
      }
      Log.d(TAG,""String_Node_Str"" + table + ""String_Node_Str""+ cache.fullyMatchesDisk());
    }
  }
  finally {
    c.close();
  }
}","private void fullyPopulateCache(String table,SettingsCache cache){
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor c=db.query(table,new String[]{Settings.NameValueTable.NAME,Settings.NameValueTable.VALUE},null,null,null,null,null,""String_Node_Str"" + (MAX_CACHE_ENTRIES + 1));
  try {
synchronized (cache) {
      cache.clear();
      cache.setFullyMatchesDisk(true);
      int rows=0;
      while (c.moveToNext()) {
        rows++;
        String name=c.getString(0);
        String value=c.getString(1);
        cache.populate(name,value);
      }
      if (rows > MAX_CACHE_ENTRIES) {
        cache.setFullyMatchesDisk(false);
        Log.d(TAG,""String_Node_Str"" + table);
      }
      Log.d(TAG,""String_Node_Str"" + table + ""String_Node_Str""+ rows+ ""String_Node_Str""+ cache.fullyMatchesDisk());
    }
  }
  finally {
    c.close();
  }
}"
21984,"@Override public int delete(Uri url,String where,String[] whereArgs){
  SqlArguments args=new SqlArguments(url,where,whereArgs);
  if (TABLE_FAVORITES.equals(args.table)) {
    return 0;
  }
 else   if (TABLE_OLD_FAVORITES.equals(args.table)) {
    args.table=TABLE_FAVORITES;
  }
  checkWritePermissions(args);
  sKnownMutationsInFlight.incrementAndGet();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  int count=db.delete(args.table,args.where,args.args);
  sKnownMutationsInFlight.decrementAndGet();
  if (count > 0) {
    SettingsCache.wipe(args.table);
    sendNotify(url);
  }
  startAsyncCachePopulation();
  if (LOCAL_LOGV)   Log.v(TAG,args.table + ""String_Node_Str"" + count+ ""String_Node_Str"");
  return count;
}","@Override public int delete(Uri url,String where,String[] whereArgs){
  SqlArguments args=new SqlArguments(url,where,whereArgs);
  if (TABLE_FAVORITES.equals(args.table)) {
    return 0;
  }
 else   if (TABLE_OLD_FAVORITES.equals(args.table)) {
    args.table=TABLE_FAVORITES;
  }
  checkWritePermissions(args);
  sKnownMutationsInFlight.incrementAndGet();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  int count=db.delete(args.table,args.where,args.args);
  sKnownMutationsInFlight.decrementAndGet();
  if (count > 0) {
    SettingsCache.invalidate(args.table);
    sendNotify(url);
  }
  startAsyncCachePopulation();
  if (LOCAL_LOGV)   Log.v(TAG,args.table + ""String_Node_Str"" + count+ ""String_Node_Str"");
  return count;
}"
21985,"@Override public int update(Uri url,ContentValues initialValues,String where,String[] whereArgs){
  SqlArguments args=new SqlArguments(url,where,whereArgs);
  if (TABLE_FAVORITES.equals(args.table)) {
    return 0;
  }
  checkWritePermissions(args);
  sKnownMutationsInFlight.incrementAndGet();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  sKnownMutationsInFlight.decrementAndGet();
  int count=db.update(args.table,initialValues,args.where,args.args);
  if (count > 0) {
    SettingsCache.wipe(args.table);
    sendNotify(url);
  }
  startAsyncCachePopulation();
  if (LOCAL_LOGV)   Log.v(TAG,args.table + ""String_Node_Str"" + count+ ""String_Node_Str""+ initialValues);
  return count;
}","@Override public int update(Uri url,ContentValues initialValues,String where,String[] whereArgs){
  SqlArguments args=new SqlArguments(url,where,whereArgs);
  if (TABLE_FAVORITES.equals(args.table)) {
    return 0;
  }
  checkWritePermissions(args);
  sKnownMutationsInFlight.incrementAndGet();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  int count=db.update(args.table,initialValues,args.where,args.args);
  sKnownMutationsInFlight.decrementAndGet();
  if (count > 0) {
    SettingsCache.invalidate(args.table);
    sendNotify(url);
  }
  startAsyncCachePopulation();
  if (LOCAL_LOGV)   Log.v(TAG,args.table + ""String_Node_Str"" + count+ ""String_Node_Str""+ initialValues);
  return count;
}"
21986,"private void fullyPopulateCache(String table,SettingsCache cache){
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor c=db.query(table,new String[]{Settings.NameValueTable.NAME,Settings.NameValueTable.VALUE},null,null,null,null,null,""String_Node_Str"" + (MAX_CACHE_ENTRIES + 1));
  try {
synchronized (cache) {
      cache.clear();
      cache.setFullyMatchesDisk(true);
      int rows=0;
      while (c.moveToNext()) {
        rows++;
        String name=c.getString(0);
        String value=c.getString(1);
        cache.populate(name,value);
      }
      if (rows > MAX_CACHE_ENTRIES) {
        cache.setFullyMatchesDisk(false);
        Log.d(TAG,""String_Node_Str"" + table);
      }
      Log.d(TAG,""String_Node_Str"" + table + ""String_Node_Str""+ cache.fullyMatchesDisk());
    }
  }
  finally {
    c.close();
  }
}","private void fullyPopulateCache(String table,SettingsCache cache){
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
  Cursor c=db.query(table,new String[]{Settings.NameValueTable.NAME,Settings.NameValueTable.VALUE},null,null,null,null,null,""String_Node_Str"" + (MAX_CACHE_ENTRIES + 1));
  try {
synchronized (cache) {
      cache.clear();
      cache.setFullyMatchesDisk(true);
      int rows=0;
      while (c.moveToNext()) {
        rows++;
        String name=c.getString(0);
        String value=c.getString(1);
        cache.populate(name,value);
      }
      if (rows > MAX_CACHE_ENTRIES) {
        cache.setFullyMatchesDisk(false);
        Log.d(TAG,""String_Node_Str"" + table);
      }
      Log.d(TAG,""String_Node_Str"" + table + ""String_Node_Str""+ rows+ ""String_Node_Str""+ cache.fullyMatchesDisk());
    }
  }
  finally {
    c.close();
  }
}"
21987,"@Override public int delete(Uri url,String where,String[] whereArgs){
  SqlArguments args=new SqlArguments(url,where,whereArgs);
  if (TABLE_FAVORITES.equals(args.table)) {
    return 0;
  }
 else   if (TABLE_OLD_FAVORITES.equals(args.table)) {
    args.table=TABLE_FAVORITES;
  }
  checkWritePermissions(args);
  sKnownMutationsInFlight.incrementAndGet();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  int count=db.delete(args.table,args.where,args.args);
  sKnownMutationsInFlight.decrementAndGet();
  if (count > 0) {
    SettingsCache.wipe(args.table);
    sendNotify(url);
  }
  startAsyncCachePopulation();
  if (LOCAL_LOGV)   Log.v(TAG,args.table + ""String_Node_Str"" + count+ ""String_Node_Str"");
  return count;
}","@Override public int delete(Uri url,String where,String[] whereArgs){
  SqlArguments args=new SqlArguments(url,where,whereArgs);
  if (TABLE_FAVORITES.equals(args.table)) {
    return 0;
  }
 else   if (TABLE_OLD_FAVORITES.equals(args.table)) {
    args.table=TABLE_FAVORITES;
  }
  checkWritePermissions(args);
  sKnownMutationsInFlight.incrementAndGet();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  int count=db.delete(args.table,args.where,args.args);
  sKnownMutationsInFlight.decrementAndGet();
  if (count > 0) {
    SettingsCache.invalidate(args.table);
    sendNotify(url);
  }
  startAsyncCachePopulation();
  if (LOCAL_LOGV)   Log.v(TAG,args.table + ""String_Node_Str"" + count+ ""String_Node_Str"");
  return count;
}"
21988,"/** 
 * Inflate a new view hierarchy from the specified XML node. Throws  {@link InflateException} if there is an error.<p> <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
 * @param parser XML dom node containing the description of the viewhierarchy.
 * @param root Optional view to be the parent of the generated hierarchy (if<em>attachToRoot</em> is true), or else simply an object that provides a set of LayoutParams values for root of the returned hierarchy (if <em>attachToRoot</em> is false.)
 * @param attachToRoot Whether the inflated hierarchy should be attached tothe root parameter? If false, root is only used to create the correct subclass of LayoutParams for the root view in the XML.
 * @return The root View of the inflated hierarchy. If root was supplied andattachToRoot is true, this is root; otherwise it is the root of the inflated XML file.
 */
public View inflate(XmlPullParser parser,ViewGroup root,boolean attachToRoot){
synchronized (mConstructorArgs) {
    final AttributeSet attrs=Xml.asAttributeSet(parser);
    mConstructorArgs[0]=mContext;
    View result=root;
    try {
      int type;
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      }
      if (type != XmlPullParser.START_TAG) {
        throw new InflateException(parser.getPositionDescription() + ""String_Node_Str"");
      }
      final String name=parser.getName();
      if (DEBUG) {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"" + name);
        System.out.println(""String_Node_Str"");
      }
      if (TAG_MERGE.equals(name)) {
        if (root == null || !attachToRoot) {
          throw new InflateException(""String_Node_Str"" + ""String_Node_Str"");
        }
        rInflate(parser,root,attrs);
      }
 else {
        View temp=createViewFromTag(name,attrs);
        ViewGroup.LayoutParams params=null;
        if (root != null) {
          if (DEBUG) {
            System.out.println(""String_Node_Str"" + root);
          }
          params=root.generateLayoutParams(attrs);
          if (!attachToRoot) {
            temp.setLayoutParams(params);
          }
        }
        if (DEBUG) {
          System.out.println(""String_Node_Str"");
        }
        rInflate(parser,temp,attrs);
        if (DEBUG) {
          System.out.println(""String_Node_Str"");
        }
        if (root != null && attachToRoot) {
          root.addView(temp,params);
        }
        if (root == null || !attachToRoot) {
          result=temp;
        }
      }
    }
 catch (    XmlPullParserException e) {
      InflateException ex=new InflateException(e.getMessage());
      ex.initCause(e);
      throw ex;
    }
catch (    IOException e) {
      InflateException ex=new InflateException(parser.getPositionDescription() + ""String_Node_Str"" + e.getMessage());
      ex.initCause(e);
      throw ex;
    }
    mConstructorArgs[0]=null;
    mConstructorArgs[1]=null;
    return result;
  }
}","/** 
 * Inflate a new view hierarchy from the specified XML node. Throws  {@link InflateException} if there is an error.<p> <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
 * @param parser XML dom node containing the description of the viewhierarchy.
 * @param root Optional view to be the parent of the generated hierarchy (if<em>attachToRoot</em> is true), or else simply an object that provides a set of LayoutParams values for root of the returned hierarchy (if <em>attachToRoot</em> is false.)
 * @param attachToRoot Whether the inflated hierarchy should be attached tothe root parameter? If false, root is only used to create the correct subclass of LayoutParams for the root view in the XML.
 * @return The root View of the inflated hierarchy. If root was supplied andattachToRoot is true, this is root; otherwise it is the root of the inflated XML file.
 */
public View inflate(XmlPullParser parser,ViewGroup root,boolean attachToRoot){
synchronized (mConstructorArgs) {
    final AttributeSet attrs=Xml.asAttributeSet(parser);
    Context lastContext=(Context)mConstructorArgs[0];
    mConstructorArgs[0]=mContext;
    View result=root;
    try {
      int type;
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      }
      if (type != XmlPullParser.START_TAG) {
        throw new InflateException(parser.getPositionDescription() + ""String_Node_Str"");
      }
      final String name=parser.getName();
      if (DEBUG) {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"" + name);
        System.out.println(""String_Node_Str"");
      }
      if (TAG_MERGE.equals(name)) {
        if (root == null || !attachToRoot) {
          throw new InflateException(""String_Node_Str"" + ""String_Node_Str"");
        }
        rInflate(parser,root,attrs);
      }
 else {
        View temp=createViewFromTag(name,attrs);
        ViewGroup.LayoutParams params=null;
        if (root != null) {
          if (DEBUG) {
            System.out.println(""String_Node_Str"" + root);
          }
          params=root.generateLayoutParams(attrs);
          if (!attachToRoot) {
            temp.setLayoutParams(params);
          }
        }
        if (DEBUG) {
          System.out.println(""String_Node_Str"");
        }
        rInflate(parser,temp,attrs);
        if (DEBUG) {
          System.out.println(""String_Node_Str"");
        }
        if (root != null && attachToRoot) {
          root.addView(temp,params);
        }
        if (root == null || !attachToRoot) {
          result=temp;
        }
      }
    }
 catch (    XmlPullParserException e) {
      InflateException ex=new InflateException(e.getMessage());
      ex.initCause(e);
      throw ex;
    }
catch (    IOException e) {
      InflateException ex=new InflateException(parser.getPositionDescription() + ""String_Node_Str"" + e.getMessage());
      ex.initCause(e);
      throw ex;
    }
 finally {
      mConstructorArgs[0]=lastContext;
      mConstructorArgs[1]=null;
    }
    return result;
  }
}"
21989,"/** 
 * Inflate a new view hierarchy from the specified XML node. Throws  {@link InflateException} if there is an error.<p> <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
 * @param parser XML dom node containing the description of the viewhierarchy.
 * @param root Optional view to be the parent of the generated hierarchy (if<em>attachToRoot</em> is true), or else simply an object that provides a set of LayoutParams values for root of the returned hierarchy (if <em>attachToRoot</em> is false.)
 * @param attachToRoot Whether the inflated hierarchy should be attached tothe root parameter? If false, root is only used to create the correct subclass of LayoutParams for the root view in the XML.
 * @return The root View of the inflated hierarchy. If root was supplied andattachToRoot is true, this is root; otherwise it is the root of the inflated XML file.
 */
public View inflate(XmlPullParser parser,ViewGroup root,boolean attachToRoot){
synchronized (mConstructorArgs) {
    final AttributeSet attrs=Xml.asAttributeSet(parser);
    mConstructorArgs[0]=mContext;
    View result=root;
    try {
      int type;
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      }
      if (type != XmlPullParser.START_TAG) {
        throw new InflateException(parser.getPositionDescription() + ""String_Node_Str"");
      }
      final String name=parser.getName();
      if (DEBUG) {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"" + name);
        System.out.println(""String_Node_Str"");
      }
      if (TAG_MERGE.equals(name)) {
        if (root == null || !attachToRoot) {
          throw new InflateException(""String_Node_Str"" + ""String_Node_Str"");
        }
        rInflate(parser,root,attrs);
      }
 else {
        View temp=createViewFromTag(name,attrs);
        ViewGroup.LayoutParams params=null;
        if (root != null) {
          if (DEBUG) {
            System.out.println(""String_Node_Str"" + root);
          }
          params=root.generateLayoutParams(attrs);
          if (!attachToRoot) {
            temp.setLayoutParams(params);
          }
        }
        if (DEBUG) {
          System.out.println(""String_Node_Str"");
        }
        rInflate(parser,temp,attrs);
        if (DEBUG) {
          System.out.println(""String_Node_Str"");
        }
        if (root != null && attachToRoot) {
          root.addView(temp,params);
        }
        if (root == null || !attachToRoot) {
          result=temp;
        }
      }
    }
 catch (    XmlPullParserException e) {
      InflateException ex=new InflateException(e.getMessage());
      ex.initCause(e);
      throw ex;
    }
catch (    IOException e) {
      InflateException ex=new InflateException(parser.getPositionDescription() + ""String_Node_Str"" + e.getMessage());
      ex.initCause(e);
      throw ex;
    }
    mConstructorArgs[0]=null;
    mConstructorArgs[1]=null;
    return result;
  }
}","/** 
 * Inflate a new view hierarchy from the specified XML node. Throws  {@link InflateException} if there is an error.<p> <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
 * @param parser XML dom node containing the description of the viewhierarchy.
 * @param root Optional view to be the parent of the generated hierarchy (if<em>attachToRoot</em> is true), or else simply an object that provides a set of LayoutParams values for root of the returned hierarchy (if <em>attachToRoot</em> is false.)
 * @param attachToRoot Whether the inflated hierarchy should be attached tothe root parameter? If false, root is only used to create the correct subclass of LayoutParams for the root view in the XML.
 * @return The root View of the inflated hierarchy. If root was supplied andattachToRoot is true, this is root; otherwise it is the root of the inflated XML file.
 */
public View inflate(XmlPullParser parser,ViewGroup root,boolean attachToRoot){
synchronized (mConstructorArgs) {
    final AttributeSet attrs=Xml.asAttributeSet(parser);
    Context lastContext=(Context)mConstructorArgs[0];
    mConstructorArgs[0]=mContext;
    View result=root;
    try {
      int type;
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      }
      if (type != XmlPullParser.START_TAG) {
        throw new InflateException(parser.getPositionDescription() + ""String_Node_Str"");
      }
      final String name=parser.getName();
      if (DEBUG) {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"" + name);
        System.out.println(""String_Node_Str"");
      }
      if (TAG_MERGE.equals(name)) {
        if (root == null || !attachToRoot) {
          throw new InflateException(""String_Node_Str"" + ""String_Node_Str"");
        }
        rInflate(parser,root,attrs);
      }
 else {
        View temp=createViewFromTag(name,attrs);
        ViewGroup.LayoutParams params=null;
        if (root != null) {
          if (DEBUG) {
            System.out.println(""String_Node_Str"" + root);
          }
          params=root.generateLayoutParams(attrs);
          if (!attachToRoot) {
            temp.setLayoutParams(params);
          }
        }
        if (DEBUG) {
          System.out.println(""String_Node_Str"");
        }
        rInflate(parser,temp,attrs);
        if (DEBUG) {
          System.out.println(""String_Node_Str"");
        }
        if (root != null && attachToRoot) {
          root.addView(temp,params);
        }
        if (root == null || !attachToRoot) {
          result=temp;
        }
      }
    }
 catch (    XmlPullParserException e) {
      InflateException ex=new InflateException(e.getMessage());
      ex.initCause(e);
      throw ex;
    }
catch (    IOException e) {
      InflateException ex=new InflateException(parser.getPositionDescription() + ""String_Node_Str"" + e.getMessage());
      ex.initCause(e);
      throw ex;
    }
 finally {
      mConstructorArgs[0]=lastContext;
      mConstructorArgs[1]=null;
    }
    return result;
  }
}"
21990,"void setOnBattery(boolean onBattery,int oldStatus,int level){
synchronized (this) {
    boolean doWrite=false;
    mOnBattery=mOnBatteryInternal=onBattery;
    long uptime=SystemClock.uptimeMillis() * 1000;
    long mSecRealtime=SystemClock.elapsedRealtime();
    long realtime=mSecRealtime * 1000;
    if (onBattery) {
      if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 100 || (mDischargeCurrentLevel < 20 && level > 90)) {
        doWrite=true;
        resetAllStatsLocked();
        mDischargeStartLevel=level;
        mLowDischargeAmountSinceCharge=0;
        mHighDischargeAmountSinceCharge=0;
      }
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryUptimeStart=uptime;
      mTrackBatteryRealtimeStart=realtime;
      mUnpluggedBatteryUptime=getBatteryUptimeLocked(uptime);
      mUnpluggedBatteryRealtime=getBatteryRealtimeLocked(realtime);
      mDischargeCurrentLevel=mDischargeUnplugLevel=level;
      doUnplugLocked(mUnpluggedBatteryUptime,mUnpluggedBatteryRealtime);
    }
 else {
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryPastUptime+=uptime - mTrackBatteryUptimeStart;
      mTrackBatteryPastRealtime+=realtime - mTrackBatteryRealtimeStart;
      mDischargeCurrentLevel=level;
      if (level < mDischargeUnplugLevel) {
        mLowDischargeAmountSinceCharge=mDischargeUnplugLevel - level - 1;
        mHighDischargeAmountSinceCharge=mDischargeUnplugLevel - level;
      }
      doPlugLocked(getBatteryUptimeLocked(uptime),getBatteryRealtimeLocked(realtime));
    }
    if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
      if (mFile != null) {
        writeLocked();
      }
    }
  }
}","void setOnBattery(boolean onBattery,int oldStatus,int level){
synchronized (this) {
    boolean doWrite=false;
    mOnBattery=mOnBatteryInternal=onBattery;
    long uptime=SystemClock.uptimeMillis() * 1000;
    long mSecRealtime=SystemClock.elapsedRealtime();
    long realtime=mSecRealtime * 1000;
    if (onBattery) {
      if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 100 || (mDischargeCurrentLevel < 20 && level > 90)) {
        doWrite=true;
        resetAllStatsLocked();
        mDischargeStartLevel=level;
        mLowDischargeAmountSinceCharge=0;
        mHighDischargeAmountSinceCharge=0;
      }
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryUptimeStart=uptime;
      mTrackBatteryRealtimeStart=realtime;
      mUnpluggedBatteryUptime=getBatteryUptimeLocked(uptime);
      mUnpluggedBatteryRealtime=getBatteryRealtimeLocked(realtime);
      mDischargeCurrentLevel=mDischargeUnplugLevel=level;
      doUnplugLocked(mUnpluggedBatteryUptime,mUnpluggedBatteryRealtime);
    }
 else {
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryPastUptime+=uptime - mTrackBatteryUptimeStart;
      mTrackBatteryPastRealtime+=realtime - mTrackBatteryRealtimeStart;
      mDischargeCurrentLevel=level;
      if (level < mDischargeUnplugLevel) {
        mLowDischargeAmountSinceCharge+=mDischargeUnplugLevel - level - 1;
        mHighDischargeAmountSinceCharge+=mDischargeUnplugLevel - level;
      }
      doPlugLocked(getBatteryUptimeLocked(uptime),getBatteryRealtimeLocked(realtime));
    }
    if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
      if (mFile != null) {
        writeLocked();
      }
    }
  }
}"
21991,"void setOnBattery(boolean onBattery,int oldStatus,int level){
synchronized (this) {
    boolean doWrite=false;
    mOnBattery=mOnBatteryInternal=onBattery;
    long uptime=SystemClock.uptimeMillis() * 1000;
    long mSecRealtime=SystemClock.elapsedRealtime();
    long realtime=mSecRealtime * 1000;
    if (onBattery) {
      if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 100 || (mDischargeCurrentLevel < 20 && level > 90)) {
        doWrite=true;
        resetAllStatsLocked();
        mDischargeStartLevel=level;
        mLowDischargeAmountSinceCharge=0;
        mHighDischargeAmountSinceCharge=0;
      }
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryUptimeStart=uptime;
      mTrackBatteryRealtimeStart=realtime;
      mUnpluggedBatteryUptime=getBatteryUptimeLocked(uptime);
      mUnpluggedBatteryRealtime=getBatteryRealtimeLocked(realtime);
      mDischargeCurrentLevel=mDischargeUnplugLevel=level;
      doUnplugLocked(mUnpluggedBatteryUptime,mUnpluggedBatteryRealtime);
    }
 else {
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryPastUptime+=uptime - mTrackBatteryUptimeStart;
      mTrackBatteryPastRealtime+=realtime - mTrackBatteryRealtimeStart;
      mDischargeCurrentLevel=level;
      if (level < mDischargeUnplugLevel) {
        mLowDischargeAmountSinceCharge=mDischargeUnplugLevel - level - 1;
        mHighDischargeAmountSinceCharge=mDischargeUnplugLevel - level;
      }
      doPlugLocked(getBatteryUptimeLocked(uptime),getBatteryRealtimeLocked(realtime));
    }
    if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
      if (mFile != null) {
        writeLocked();
      }
    }
  }
}","void setOnBattery(boolean onBattery,int oldStatus,int level){
synchronized (this) {
    boolean doWrite=false;
    mOnBattery=mOnBatteryInternal=onBattery;
    long uptime=SystemClock.uptimeMillis() * 1000;
    long mSecRealtime=SystemClock.elapsedRealtime();
    long realtime=mSecRealtime * 1000;
    if (onBattery) {
      if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 100 || (mDischargeCurrentLevel < 20 && level > 90)) {
        doWrite=true;
        resetAllStatsLocked();
        mDischargeStartLevel=level;
        mLowDischargeAmountSinceCharge=0;
        mHighDischargeAmountSinceCharge=0;
      }
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryUptimeStart=uptime;
      mTrackBatteryRealtimeStart=realtime;
      mUnpluggedBatteryUptime=getBatteryUptimeLocked(uptime);
      mUnpluggedBatteryRealtime=getBatteryRealtimeLocked(realtime);
      mDischargeCurrentLevel=mDischargeUnplugLevel=level;
      doUnplugLocked(mUnpluggedBatteryUptime,mUnpluggedBatteryRealtime);
    }
 else {
      updateKernelWakelocksLocked();
      mHistoryCur.batteryLevel=(byte)level;
      mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(mHistoryCur.states));
      addHistoryRecordLocked(mSecRealtime);
      mTrackBatteryPastUptime+=uptime - mTrackBatteryUptimeStart;
      mTrackBatteryPastRealtime+=realtime - mTrackBatteryRealtimeStart;
      mDischargeCurrentLevel=level;
      if (level < mDischargeUnplugLevel) {
        mLowDischargeAmountSinceCharge+=mDischargeUnplugLevel - level - 1;
        mHighDischargeAmountSinceCharge+=mDischargeUnplugLevel - level;
      }
      doPlugLocked(getBatteryUptimeLocked(uptime),getBatteryRealtimeLocked(realtime));
    }
    if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
      if (mFile != null) {
        writeLocked();
      }
    }
  }
}"
21992,"public void dump(Printer pw,String prefix){
  super.dumpFront(pw,prefix);
  if (className != null) {
    pw.println(prefix + ""String_Node_Str"" + className);
  }
  if (permission != null) {
    pw.println(prefix + ""String_Node_Str"" + permission);
  }
  pw.println(prefix + ""String_Node_Str"" + uid+ ""String_Node_Str""+ taskAffinity);
  if (theme != 0) {
    pw.println(prefix + ""String_Node_Str"" + Integer.toHexString(theme));
  }
  pw.println(prefix + ""String_Node_Str"" + Integer.toHexString(flags)+ ""String_Node_Str""+ processName);
  pw.println(prefix + ""String_Node_Str"" + sourceDir);
  pw.println(prefix + ""String_Node_Str"" + publicSourceDir);
  pw.println(prefix + ""String_Node_Str"" + resourceDirs);
  pw.println(prefix + ""String_Node_Str"" + dataDir);
  if (sharedLibraryFiles != null) {
    pw.println(prefix + ""String_Node_Str"" + sharedLibraryFiles);
  }
  pw.println(prefix + ""String_Node_Str"" + enabled+ ""String_Node_Str""+ targetSdkVersion);
  if (manageSpaceActivityName != null) {
    pw.println(prefix + ""String_Node_Str"" + manageSpaceActivityName);
  }
  if (descriptionRes != 0) {
    pw.println(prefix + ""String_Node_Str"" + Integer.toHexString(descriptionRes));
  }
  super.dumpBack(pw,prefix);
}","public void dump(Printer pw,String prefix){
  super.dumpFront(pw,prefix);
  if (className != null) {
    pw.println(prefix + ""String_Node_Str"" + className);
  }
  if (permission != null) {
    pw.println(prefix + ""String_Node_Str"" + permission);
  }
  pw.println(prefix + ""String_Node_Str"" + processName);
  pw.println(prefix + ""String_Node_Str"" + taskAffinity);
  pw.println(prefix + ""String_Node_Str"" + uid+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ Integer.toHexString(theme));
  pw.println(prefix + ""String_Node_Str"" + sourceDir);
  if (!sourceDir.equals(publicSourceDir)) {
    pw.println(prefix + ""String_Node_Str"" + publicSourceDir);
  }
  if (resourceDirs != null) {
    pw.println(prefix + ""String_Node_Str"" + resourceDirs);
  }
  pw.println(prefix + ""String_Node_Str"" + dataDir);
  if (sharedLibraryFiles != null) {
    pw.println(prefix + ""String_Node_Str"" + sharedLibraryFiles);
  }
  pw.println(prefix + ""String_Node_Str"" + enabled+ ""String_Node_Str""+ targetSdkVersion);
  if (manageSpaceActivityName != null) {
    pw.println(prefix + ""String_Node_Str"" + manageSpaceActivityName);
  }
  if (descriptionRes != 0) {
    pw.println(prefix + ""String_Node_Str"" + Integer.toHexString(descriptionRes));
  }
  super.dumpBack(pw,prefix);
}"
21993,"private final void realStartServiceLocked(ServiceRecord r,ProcessRecord app) throws RemoteException {
  if (app.thread == null) {
    throw new RemoteException();
  }
  r.app=app;
  r.restartTime=r.lastActivity=SystemClock.uptimeMillis();
  app.services.add(r);
  bumpServiceExecutingLocked(r);
  updateLruProcessLocked(app,true,true);
  boolean created=false;
  try {
    if (DEBUG_SERVICE)     Slog.v(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ r.intent);
    mStringBuilder.setLength(0);
    r.intent.getIntent().toShortString(mStringBuilder,false,true);
    EventLog.writeEvent(EventLogTags.AM_CREATE_SERVICE,System.identityHashCode(r),r.shortName,mStringBuilder.toString(),r.app.pid);
synchronized (r.stats.getBatteryStats()) {
      r.stats.startLaunchedLocked();
    }
    ensurePackageDexOpt(r.serviceInfo.packageName);
    app.thread.scheduleCreateService(r,r.serviceInfo);
    r.postNotification();
    created=true;
  }
  finally {
    if (!created) {
      app.services.remove(r);
      scheduleServiceRestartLocked(r,false);
    }
  }
  requestServiceBindingsLocked(r);
  if (r.startRequested && r.callStart && r.pendingStarts.size() == 0) {
    r.lastStartId++;
    if (r.lastStartId < 1) {
      r.lastStartId=1;
    }
    r.pendingStarts.add(new ServiceRecord.StartItem(r.lastStartId,null));
  }
  sendServiceArgsLocked(r,true);
}","private final void realStartServiceLocked(ServiceRecord r,ProcessRecord app) throws RemoteException {
  if (app.thread == null) {
    throw new RemoteException();
  }
  r.app=app;
  r.restartTime=r.lastActivity=SystemClock.uptimeMillis();
  app.services.add(r);
  bumpServiceExecutingLocked(r);
  updateLruProcessLocked(app,true,true);
  boolean created=false;
  try {
    if (DEBUG_SERVICE)     Slog.v(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ r.intent);
    mStringBuilder.setLength(0);
    r.intent.getIntent().toShortString(mStringBuilder,false,true);
    EventLog.writeEvent(EventLogTags.AM_CREATE_SERVICE,System.identityHashCode(r),r.shortName,mStringBuilder.toString(),r.app.pid);
synchronized (r.stats.getBatteryStats()) {
      r.stats.startLaunchedLocked();
    }
    ensurePackageDexOpt(r.serviceInfo.packageName);
    app.thread.scheduleCreateService(r,r.serviceInfo);
    r.postNotification();
    created=true;
  }
  finally {
    if (!created) {
      app.services.remove(r);
      scheduleServiceRestartLocked(r,false);
    }
  }
  requestServiceBindingsLocked(r);
  if (r.startRequested && r.callStart && r.pendingStarts.size() == 0) {
    r.lastStartId++;
    if (r.lastStartId < 1) {
      r.lastStartId=1;
    }
    r.pendingStarts.add(new ServiceRecord.StartItem(r,r.lastStartId,null,-1));
  }
  sendServiceArgsLocked(r,true);
}"
21994,"void grantUriPermissionFromIntentLocked(int callingUid,String targetPkg,Intent intent,ActivityRecord activity){
  if (DEBUG_URI_PERMISSION)   Slog.v(TAG,""String_Node_Str"" + (intent != null ? intent.getData() : null) + ""String_Node_Str""+ intent+ ""String_Node_Str""+ Integer.toHexString(intent != null ? intent.getFlags() : 0));
  if (intent == null) {
    return;
  }
  Uri data=intent.getData();
  if (data == null) {
    return;
  }
  grantUriPermissionLocked(callingUid,targetPkg,data,intent.getFlags(),activity);
}","void grantUriPermissionFromIntentLocked(int callingUid,String targetPkg,Intent intent,UriPermissionOwner owner){
  int targetUid=checkGrantUriPermissionFromIntentLocked(callingUid,targetPkg,intent);
  if (targetUid < 0) {
    return;
  }
  grantUriPermissionUncheckedFromIntentLocked(targetUid,targetPkg,intent,owner);
}"
21995,"public boolean stopServiceToken(ComponentName className,IBinder token,int startId){
synchronized (this) {
    if (DEBUG_SERVICE)     Slog.v(TAG,""String_Node_Str"" + className + ""String_Node_Str""+ token+ ""String_Node_Str""+ startId);
    ServiceRecord r=findServiceLocked(className,token);
    if (r != null) {
      if (startId >= 0) {
        ServiceRecord.StartItem si=r.findDeliveredStart(startId,false);
        if (si != null) {
          while (r.deliveredStarts.size() > 0) {
            if (r.deliveredStarts.remove(0) == si) {
              break;
            }
          }
        }
        if (r.lastStartId != startId) {
          return false;
        }
        if (r.deliveredStarts.size() > 0) {
          Slog.w(TAG,""String_Node_Str"" + startId + ""String_Node_Str""+ r.deliveredStarts.size()+ ""String_Node_Str"");
        }
      }
synchronized (r.stats.getBatteryStats()) {
        r.stats.stopRunningLocked();
        r.startRequested=false;
        r.callStart=false;
      }
      final long origId=Binder.clearCallingIdentity();
      bringDownServiceLocked(r,false);
      Binder.restoreCallingIdentity(origId);
      return true;
    }
  }
  return false;
}","public boolean stopServiceToken(ComponentName className,IBinder token,int startId){
synchronized (this) {
    if (DEBUG_SERVICE)     Slog.v(TAG,""String_Node_Str"" + className + ""String_Node_Str""+ token+ ""String_Node_Str""+ startId);
    ServiceRecord r=findServiceLocked(className,token);
    if (r != null) {
      if (startId >= 0) {
        ServiceRecord.StartItem si=r.findDeliveredStart(startId,false);
        if (si != null) {
          while (r.deliveredStarts.size() > 0) {
            ServiceRecord.StartItem cur=r.deliveredStarts.remove(0);
            cur.removeUriPermissionsLocked();
            if (cur == si) {
              break;
            }
          }
        }
        if (r.lastStartId != startId) {
          return false;
        }
        if (r.deliveredStarts.size() > 0) {
          Slog.w(TAG,""String_Node_Str"" + startId + ""String_Node_Str""+ r.deliveredStarts.size()+ ""String_Node_Str"");
        }
      }
synchronized (r.stats.getBatteryStats()) {
        r.stats.stopRunningLocked();
        r.startRequested=false;
        r.callStart=false;
      }
      final long origId=Binder.clearCallingIdentity();
      bringDownServiceLocked(r,false);
      Binder.restoreCallingIdentity(origId);
      return true;
    }
  }
  return false;
}"
21996,"void grantUriPermissionLocked(int callingUid,String targetPkg,Uri uri,int modeFlags,ActivityRecord activity){
  modeFlags&=(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
  if (modeFlags == 0) {
    return;
  }
  if (DEBUG_URI_PERMISSION)   Slog.v(TAG,""String_Node_Str"" + targetPkg + ""String_Node_Str""+ uri);
  final IPackageManager pm=AppGlobals.getPackageManager();
  if (!ContentResolver.SCHEME_CONTENT.equals(uri.getScheme())) {
    if (DEBUG_URI_PERMISSION)     Slog.v(TAG,""String_Node_Str"" + uri);
    return;
  }
  String name=uri.getAuthority();
  ProviderInfo pi=null;
  ContentProviderRecord cpr=mProvidersByName.get(name);
  if (cpr != null) {
    pi=cpr.info;
  }
 else {
    try {
      pi=pm.resolveContentProvider(name,PackageManager.GET_URI_PERMISSION_PATTERNS);
    }
 catch (    RemoteException ex) {
    }
  }
  if (pi == null) {
    Slog.w(TAG,""String_Node_Str"" + name);
    return;
  }
  int targetUid;
  try {
    targetUid=pm.getPackageUid(targetPkg);
    if (targetUid < 0) {
      if (DEBUG_URI_PERMISSION)       Slog.v(TAG,""String_Node_Str"" + targetPkg);
      return;
    }
  }
 catch (  RemoteException ex) {
    return;
  }
  if (checkHoldingPermissionsLocked(pm,pi,targetUid,modeFlags)) {
    if (DEBUG_URI_PERMISSION)     Slog.v(TAG,""String_Node_Str"" + targetPkg + ""String_Node_Str""+ uri);
    return;
  }
  if (!pi.grantUriPermissions) {
    throw new SecurityException(""String_Node_Str"" + pi.packageName + ""String_Node_Str""+ pi.name+ ""String_Node_Str""+ uri+ ""String_Node_Str"");
  }
  if (pi.uriPermissionPatterns != null) {
    final int N=pi.uriPermissionPatterns.length;
    boolean allowed=false;
    for (int i=0; i < N; i++) {
      if (pi.uriPermissionPatterns[i] != null && pi.uriPermissionPatterns[i].match(uri.getPath())) {
        allowed=true;
        break;
      }
    }
    if (!allowed) {
      throw new SecurityException(""String_Node_Str"" + pi.packageName + ""String_Node_Str""+ pi.name+ ""String_Node_Str""+ uri);
    }
  }
  if (!checkHoldingPermissionsLocked(pm,pi,callingUid,modeFlags)) {
    if (!checkUriPermissionLocked(uri,callingUid,modeFlags)) {
      throw new SecurityException(""String_Node_Str"" + callingUid + ""String_Node_Str""+ uri);
    }
  }
  if (DEBUG_URI_PERMISSION)   Slog.v(TAG,""String_Node_Str"" + targetPkg + ""String_Node_Str""+ uri);
  HashMap<Uri,UriPermission> targetUris=mGrantedUriPermissions.get(targetUid);
  if (targetUris == null) {
    targetUris=new HashMap<Uri,UriPermission>();
    mGrantedUriPermissions.put(targetUid,targetUris);
  }
  UriPermission perm=targetUris.get(uri);
  if (perm == null) {
    perm=new UriPermission(targetUid,uri);
    targetUris.put(uri,perm);
  }
  perm.modeFlags|=modeFlags;
  if (activity == null) {
    perm.globalModeFlags|=modeFlags;
  }
 else   if ((modeFlags & Intent.FLAG_GRANT_READ_URI_PERMISSION) != 0) {
    perm.readActivities.add(activity);
    if (activity.readUriPermissions == null) {
      activity.readUriPermissions=new HashSet<UriPermission>();
    }
    activity.readUriPermissions.add(perm);
  }
 else   if ((modeFlags & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) != 0) {
    perm.writeActivities.add(activity);
    if (activity.writeUriPermissions == null) {
      activity.writeUriPermissions=new HashSet<UriPermission>();
    }
    activity.writeUriPermissions.add(perm);
  }
}","void grantUriPermissionLocked(int callingUid,String targetPkg,Uri uri,int modeFlags,UriPermissionOwner owner){
  int targetUid=checkGrantUriPermissionLocked(callingUid,targetPkg,uri,modeFlags);
  if (targetUid < 0) {
    return;
  }
  grantUriPermissionUncheckedLocked(targetUid,targetPkg,uri,modeFlags,owner);
}"
21997,"private final boolean scheduleServiceRestartLocked(ServiceRecord r,boolean allowCancel){
  boolean canceled=false;
  final long now=SystemClock.uptimeMillis();
  long minDuration=SERVICE_RESTART_DURATION;
  long resetTime=SERVICE_RESET_RUN_DURATION;
  final int N=r.deliveredStarts.size();
  if (N > 0) {
    for (int i=N - 1; i >= 0; i--) {
      ServiceRecord.StartItem si=r.deliveredStarts.get(i);
      if (si.intent == null) {
      }
 else       if (!allowCancel || (si.deliveryCount < ServiceRecord.MAX_DELIVERY_COUNT && si.doneExecutingCount < ServiceRecord.MAX_DONE_EXECUTING_COUNT)) {
        r.pendingStarts.add(0,si);
        long dur=SystemClock.uptimeMillis() - si.deliveredTime;
        dur*=2;
        if (minDuration < dur)         minDuration=dur;
        if (resetTime < dur)         resetTime=dur;
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + si.intent + ""String_Node_Str""+ r.name);
        canceled=true;
      }
    }
    r.deliveredStarts.clear();
  }
  r.totalRestartCount++;
  if (r.restartDelay == 0) {
    r.restartCount++;
    r.restartDelay=minDuration;
  }
 else {
    if (now > (r.restartTime + resetTime)) {
      r.restartCount=1;
      r.restartDelay=minDuration;
    }
 else {
      r.restartDelay*=SERVICE_RESTART_DURATION_FACTOR;
      if (r.restartDelay < minDuration) {
        r.restartDelay=minDuration;
      }
    }
  }
  r.nextRestartTime=now + r.restartDelay;
  boolean repeat;
  do {
    repeat=false;
    for (int i=mRestartingServices.size() - 1; i >= 0; i--) {
      ServiceRecord r2=mRestartingServices.get(i);
      if (r2 != r && r.nextRestartTime >= (r2.nextRestartTime - SERVICE_MIN_RESTART_TIME_BETWEEN) && r.nextRestartTime < (r2.nextRestartTime + SERVICE_MIN_RESTART_TIME_BETWEEN)) {
        r.nextRestartTime=r2.nextRestartTime + SERVICE_MIN_RESTART_TIME_BETWEEN;
        r.restartDelay=r.nextRestartTime - now;
        repeat=true;
        break;
      }
    }
  }
 while (repeat);
  if (!mRestartingServices.contains(r)) {
    mRestartingServices.add(r);
  }
  r.cancelNotification();
  mHandler.removeCallbacks(r.restarter);
  mHandler.postAtTime(r.restarter,r.nextRestartTime);
  r.nextRestartTime=SystemClock.uptimeMillis() + r.restartDelay;
  Slog.w(TAG,""String_Node_Str"" + r.shortName + ""String_Node_Str""+ r.restartDelay+ ""String_Node_Str"");
  EventLog.writeEvent(EventLogTags.AM_SCHEDULE_SERVICE_RESTART,r.shortName,r.restartDelay);
  return canceled;
}","private final boolean scheduleServiceRestartLocked(ServiceRecord r,boolean allowCancel){
  boolean canceled=false;
  final long now=SystemClock.uptimeMillis();
  long minDuration=SERVICE_RESTART_DURATION;
  long resetTime=SERVICE_RESET_RUN_DURATION;
  final int N=r.deliveredStarts.size();
  if (N > 0) {
    for (int i=N - 1; i >= 0; i--) {
      ServiceRecord.StartItem si=r.deliveredStarts.get(i);
      si.removeUriPermissionsLocked();
      if (si.intent == null) {
      }
 else       if (!allowCancel || (si.deliveryCount < ServiceRecord.MAX_DELIVERY_COUNT && si.doneExecutingCount < ServiceRecord.MAX_DONE_EXECUTING_COUNT)) {
        r.pendingStarts.add(0,si);
        long dur=SystemClock.uptimeMillis() - si.deliveredTime;
        dur*=2;
        if (minDuration < dur)         minDuration=dur;
        if (resetTime < dur)         resetTime=dur;
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + si.intent + ""String_Node_Str""+ r.name);
        canceled=true;
      }
    }
    r.deliveredStarts.clear();
  }
  r.totalRestartCount++;
  if (r.restartDelay == 0) {
    r.restartCount++;
    r.restartDelay=minDuration;
  }
 else {
    if (now > (r.restartTime + resetTime)) {
      r.restartCount=1;
      r.restartDelay=minDuration;
    }
 else {
      r.restartDelay*=SERVICE_RESTART_DURATION_FACTOR;
      if (r.restartDelay < minDuration) {
        r.restartDelay=minDuration;
      }
    }
  }
  r.nextRestartTime=now + r.restartDelay;
  boolean repeat;
  do {
    repeat=false;
    for (int i=mRestartingServices.size() - 1; i >= 0; i--) {
      ServiceRecord r2=mRestartingServices.get(i);
      if (r2 != r && r.nextRestartTime >= (r2.nextRestartTime - SERVICE_MIN_RESTART_TIME_BETWEEN) && r.nextRestartTime < (r2.nextRestartTime + SERVICE_MIN_RESTART_TIME_BETWEEN)) {
        r.nextRestartTime=r2.nextRestartTime + SERVICE_MIN_RESTART_TIME_BETWEEN;
        r.restartDelay=r.nextRestartTime - now;
        repeat=true;
        break;
      }
    }
  }
 while (repeat);
  if (!mRestartingServices.contains(r)) {
    mRestartingServices.add(r);
  }
  r.cancelNotification();
  mHandler.removeCallbacks(r.restarter);
  mHandler.postAtTime(r.restarter,r.nextRestartTime);
  r.nextRestartTime=SystemClock.uptimeMillis() + r.restartDelay;
  Slog.w(TAG,""String_Node_Str"" + r.shortName + ""String_Node_Str""+ r.restartDelay+ ""String_Node_Str"");
  EventLog.writeEvent(EventLogTags.AM_SCHEDULE_SERVICE_RESTART,r.shortName,r.restartDelay);
  return canceled;
}"
21998,"private final void sendServiceArgsLocked(ServiceRecord r,boolean oomAdjusted){
  final int N=r.pendingStarts.size();
  if (N == 0) {
    return;
  }
  int i=0;
  while (i < N) {
    try {
      ServiceRecord.StartItem si=r.pendingStarts.get(i);
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ si.intent);
      if (si.intent == null && N > 1) {
        i++;
        continue;
      }
      bumpServiceExecutingLocked(r);
      if (!oomAdjusted) {
        oomAdjusted=true;
        updateOomAdjLocked(r.app);
      }
      int flags=0;
      if (si.deliveryCount > 0) {
        flags|=Service.START_FLAG_RETRY;
      }
      if (si.doneExecutingCount > 0) {
        flags|=Service.START_FLAG_REDELIVERY;
      }
      r.app.thread.scheduleServiceArgs(r,si.id,flags,si.intent);
      si.deliveredTime=SystemClock.uptimeMillis();
      r.deliveredStarts.add(si);
      si.deliveryCount++;
      i++;
    }
 catch (    RemoteException e) {
      break;
    }
catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"",e);
      break;
    }
  }
  if (i == N) {
    r.pendingStarts.clear();
  }
 else {
    while (i > 0) {
      i--;
      r.pendingStarts.remove(i);
    }
  }
}","private final void sendServiceArgsLocked(ServiceRecord r,boolean oomAdjusted){
  final int N=r.pendingStarts.size();
  if (N == 0) {
    return;
  }
  while (r.pendingStarts.size() > 0) {
    try {
      ServiceRecord.StartItem si=r.pendingStarts.remove(0);
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ si.intent);
      if (si.intent == null) {
        continue;
      }
      si.deliveredTime=SystemClock.uptimeMillis();
      r.deliveredStarts.add(si);
      si.deliveryCount++;
      if (si.targetPermissionUid >= 0) {
        grantUriPermissionUncheckedFromIntentLocked(si.targetPermissionUid,r.packageName,si.intent,si);
      }
      bumpServiceExecutingLocked(r);
      if (!oomAdjusted) {
        oomAdjusted=true;
        updateOomAdjLocked(r.app);
      }
      int flags=0;
      if (si.deliveryCount > 0) {
        flags|=Service.START_FLAG_RETRY;
      }
      if (si.doneExecutingCount > 0) {
        flags|=Service.START_FLAG_REDELIVERY;
      }
      r.app.thread.scheduleServiceArgs(r,si.id,flags,si.intent);
    }
 catch (    RemoteException e) {
      break;
    }
catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"",e);
      break;
    }
  }
}"
21999,"private final void bringDownServiceLocked(ServiceRecord r,boolean force){
  if (!force && r.startRequested) {
    return;
  }
  if (r.connections.size() > 0) {
    if (!force) {
      Iterator<ConnectionRecord> it=r.connections.values().iterator();
      while (it.hasNext()) {
        ConnectionRecord cr=it.next();
        if ((cr.flags & Context.BIND_AUTO_CREATE) != 0) {
          return;
        }
      }
    }
    Iterator<ConnectionRecord> it=r.connections.values().iterator();
    while (it.hasNext()) {
      ConnectionRecord c=it.next();
      try {
        c.conn.connected(r.name,null);
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ c.conn.asBinder()+ ""String_Node_Str""+ c.binding.client.processName+ ""String_Node_Str"",e);
      }
    }
  }
  if (r.bindings.size() > 0 && r.app != null && r.app.thread != null) {
    Iterator<IntentBindRecord> it=r.bindings.values().iterator();
    while (it.hasNext()) {
      IntentBindRecord ibr=it.next();
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + ibr + ""String_Node_Str""+ ibr.hasBound);
      if (r.app != null && r.app.thread != null && ibr.hasBound) {
        try {
          bumpServiceExecutingLocked(r);
          updateOomAdjLocked(r.app);
          ibr.hasBound=false;
          r.app.thread.scheduleUnbindService(r,ibr.intent.getIntent());
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + r.shortName,e);
          serviceDoneExecutingLocked(r,true);
        }
      }
    }
  }
  if (DEBUG_SERVICE)   Slog.v(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ r.intent);
  EventLog.writeEvent(EventLogTags.AM_DESTROY_SERVICE,System.identityHashCode(r),r.shortName,(r.app != null) ? r.app.pid : -1);
  mServices.remove(r.name);
  mServicesByIntent.remove(r.intent);
  if (localLOGV)   Slog.v(TAG,""String_Node_Str"" + r.shortName);
  r.totalRestartCount=0;
  unscheduleServiceRestartLocked(r);
  int N=mPendingServices.size();
  for (int i=0; i < N; i++) {
    if (mPendingServices.get(i) == r) {
      mPendingServices.remove(i);
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + r.shortName);
      i--;
      N--;
    }
  }
  r.cancelNotification();
  r.isForeground=false;
  r.foregroundId=0;
  r.foregroundNoti=null;
  r.deliveredStarts.clear();
  r.pendingStarts.clear();
  if (r.app != null) {
synchronized (r.stats.getBatteryStats()) {
      r.stats.stopLaunchedLocked();
    }
    r.app.services.remove(r);
    if (r.app.thread != null) {
      try {
        if (DEBUG_SERVICE)         Slog.v(TAG,""String_Node_Str"" + r.shortName);
        bumpServiceExecutingLocked(r);
        mStoppingServices.add(r);
        updateOomAdjLocked(r.app);
        r.app.thread.scheduleStopService(r);
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + r.shortName,e);
        serviceDoneExecutingLocked(r,true);
      }
      updateServiceForegroundLocked(r.app,false);
    }
 else {
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + r.shortName);
    }
  }
 else {
    if (DEBUG_SERVICE)     Slog.v(TAG,""String_Node_Str"" + r.shortName);
  }
}","private final void bringDownServiceLocked(ServiceRecord r,boolean force){
  if (!force && r.startRequested) {
    return;
  }
  if (r.connections.size() > 0) {
    if (!force) {
      Iterator<ConnectionRecord> it=r.connections.values().iterator();
      while (it.hasNext()) {
        ConnectionRecord cr=it.next();
        if ((cr.flags & Context.BIND_AUTO_CREATE) != 0) {
          return;
        }
      }
    }
    Iterator<ConnectionRecord> it=r.connections.values().iterator();
    while (it.hasNext()) {
      ConnectionRecord c=it.next();
      try {
        c.conn.connected(r.name,null);
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ c.conn.asBinder()+ ""String_Node_Str""+ c.binding.client.processName+ ""String_Node_Str"",e);
      }
    }
  }
  if (r.bindings.size() > 0 && r.app != null && r.app.thread != null) {
    Iterator<IntentBindRecord> it=r.bindings.values().iterator();
    while (it.hasNext()) {
      IntentBindRecord ibr=it.next();
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + ibr + ""String_Node_Str""+ ibr.hasBound);
      if (r.app != null && r.app.thread != null && ibr.hasBound) {
        try {
          bumpServiceExecutingLocked(r);
          updateOomAdjLocked(r.app);
          ibr.hasBound=false;
          r.app.thread.scheduleUnbindService(r,ibr.intent.getIntent());
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + r.shortName,e);
          serviceDoneExecutingLocked(r,true);
        }
      }
    }
  }
  if (DEBUG_SERVICE)   Slog.v(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ r.intent);
  EventLog.writeEvent(EventLogTags.AM_DESTROY_SERVICE,System.identityHashCode(r),r.shortName,(r.app != null) ? r.app.pid : -1);
  mServices.remove(r.name);
  mServicesByIntent.remove(r.intent);
  if (localLOGV)   Slog.v(TAG,""String_Node_Str"" + r.shortName);
  r.totalRestartCount=0;
  unscheduleServiceRestartLocked(r);
  int N=mPendingServices.size();
  for (int i=0; i < N; i++) {
    if (mPendingServices.get(i) == r) {
      mPendingServices.remove(i);
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + r.shortName);
      i--;
      N--;
    }
  }
  r.cancelNotification();
  r.isForeground=false;
  r.foregroundId=0;
  r.foregroundNoti=null;
  r.clearDeliveredStartsLocked();
  r.pendingStarts.clear();
  if (r.app != null) {
synchronized (r.stats.getBatteryStats()) {
      r.stats.stopLaunchedLocked();
    }
    r.app.services.remove(r);
    if (r.app.thread != null) {
      try {
        if (DEBUG_SERVICE)         Slog.v(TAG,""String_Node_Str"" + r.shortName);
        bumpServiceExecutingLocked(r);
        mStoppingServices.add(r);
        updateOomAdjLocked(r.app);
        r.app.thread.scheduleStopService(r);
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + r.shortName,e);
        serviceDoneExecutingLocked(r,true);
      }
      updateServiceForegroundLocked(r.app,false);
    }
 else {
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + r.shortName);
    }
  }
 else {
    if (DEBUG_SERVICE)     Slog.v(TAG,""String_Node_Str"" + r.shortName);
  }
}"
22000,"ComponentName startServiceLocked(IApplicationThread caller,Intent service,String resolvedType,int callingPid,int callingUid){
synchronized (this) {
    if (DEBUG_SERVICE)     Slog.v(TAG,""String_Node_Str"" + service + ""String_Node_Str""+ resolvedType+ ""String_Node_Str""+ service.getExtras());
    if (caller != null) {
      final ProcessRecord callerApp=getRecordForAppLocked(caller);
      if (callerApp == null) {
        throw new SecurityException(""String_Node_Str"" + caller + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ service);
      }
    }
    ServiceLookupResult res=retrieveServiceLocked(service,resolvedType,callingPid,callingUid);
    if (res == null) {
      return null;
    }
    if (res.record == null) {
      return new ComponentName(""String_Node_Str"",res.permission != null ? res.permission : ""String_Node_Str"");
    }
    ServiceRecord r=res.record;
    if (unscheduleServiceRestartLocked(r)) {
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + r.shortName);
    }
    r.startRequested=true;
    r.callStart=false;
    r.lastStartId++;
    if (r.lastStartId < 1) {
      r.lastStartId=1;
    }
    r.pendingStarts.add(new ServiceRecord.StartItem(r.lastStartId,service));
    r.lastActivity=SystemClock.uptimeMillis();
synchronized (r.stats.getBatteryStats()) {
      r.stats.startRunningLocked();
    }
    if (!bringUpServiceLocked(r,service.getFlags(),false)) {
      return new ComponentName(""String_Node_Str"",""String_Node_Str"");
    }
    return r.name;
  }
}","ComponentName startServiceLocked(IApplicationThread caller,Intent service,String resolvedType,int callingPid,int callingUid){
synchronized (this) {
    if (DEBUG_SERVICE)     Slog.v(TAG,""String_Node_Str"" + service + ""String_Node_Str""+ resolvedType+ ""String_Node_Str""+ service.getExtras());
    if (caller != null) {
      final ProcessRecord callerApp=getRecordForAppLocked(caller);
      if (callerApp == null) {
        throw new SecurityException(""String_Node_Str"" + caller + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ service);
      }
    }
    ServiceLookupResult res=retrieveServiceLocked(service,resolvedType,callingPid,callingUid);
    if (res == null) {
      return null;
    }
    if (res.record == null) {
      return new ComponentName(""String_Node_Str"",res.permission != null ? res.permission : ""String_Node_Str"");
    }
    ServiceRecord r=res.record;
    int targetPermissionUid=checkGrantUriPermissionFromIntentLocked(callingUid,r.packageName,service);
    if (unscheduleServiceRestartLocked(r)) {
      if (DEBUG_SERVICE)       Slog.v(TAG,""String_Node_Str"" + r.shortName);
    }
    r.startRequested=true;
    r.callStart=false;
    r.lastStartId++;
    if (r.lastStartId < 1) {
      r.lastStartId=1;
    }
    r.pendingStarts.add(new ServiceRecord.StartItem(r,r.lastStartId,service,targetPermissionUid));
    r.lastActivity=SystemClock.uptimeMillis();
synchronized (r.stats.getBatteryStats()) {
      r.stats.startRunningLocked();
    }
    if (!bringUpServiceLocked(r,service.getFlags(),false)) {
      return new ComponentName(""String_Node_Str"",""String_Node_Str"");
    }
    return r.name;
  }
}"
