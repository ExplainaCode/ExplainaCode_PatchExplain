record_number,buggy_code,fixed_code
34001,"private void help(CommandSender sender,String label){
  if (!(sender instanceof Player)) {
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpclearReset);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpclearReset);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpcompleteChallenge);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpdelete);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpinfo);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpinfo);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpinfoIsland);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelplock);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelppurge);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpreload);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpresetAllChallenges);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpresetChallenge);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpResetHome);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpsetBiome);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpadd);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpkick);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelptopBreeders);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelptopTen);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpunregister);
  }
 else {
    Player player=(Player)sender;
    player.sendMessage(plugin.myLocale(player.getUniqueId()).adminHelpHelp);
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpclearReset);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpclearReset);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpcompleteChallenge);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpdelete);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpdelete);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpinfoIsland);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpinfo);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpinfo);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelplock);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelppurge);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelppurgeUnowned);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelppurgeAllowDisallow);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpreload);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpregister);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpResetHome);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpresetChallenge);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpresetAllChallenges);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpResetSign);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpResetSign);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpReserve);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpsetBiome);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpSetHome);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpSetSpawn);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpSetRange);
    }
    if (Settings.teamChat && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpTeamChatSpy);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpkick);
      sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpadd);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelptopTen);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelptopBreeders);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelptp);
    }
    if (Settings.createNether && Settings.newNether && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp())) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelptpNether);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpunregister);
    }
  }
}","private void help(CommandSender sender,String label){
  if (!(sender instanceof Player)) {
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpclearReset);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpclearReset);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpcompleteChallenge);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpdelete);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpinfo);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpinfo);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpinfoIsland);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelplock);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelppurge);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpreload);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpresetAllChallenges);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpresetChallenge);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpResetHome);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpsetBiome);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpadd);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpkick);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelptopBreeders);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelptopTen);
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale().adminHelpunregister);
  }
 else {
    Player player=(Player)sender;
    player.sendMessage(plugin.myLocale(player.getUniqueId()).adminHelpHelp);
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpclearReset);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpclearReset);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpcompleteChallenge);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpdelete);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpdelete);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpinfoIsland);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpinfo);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpinfo);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelplock);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelppurge);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelppurgeUnowned);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelppurgeAllowDisallow);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpreload);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpregister);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpResetHome);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpresetChallenge);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpresetAllChallenges);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpResetSign);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpResetSign);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpReserve);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpsetBiome);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpSetHome);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpSetSpawn);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpSetRange);
    }
    if (Settings.teamChat && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpTeamChatSpy);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpkick);
      sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpadd);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelptopTen);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelptopBreeders);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelptp);
    }
    if (Settings.createNether && Settings.newNether && ASkyBlock.getNetherWorld() != null && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp())) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelptpNether);
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).adminHelpunregister);
    }
  }
}"
34002,"@Override public List<String> onTabComplete(final CommandSender sender,final Command command,final String label,final String[] args){
  final List<String> options=new ArrayList<String>();
  String lastArg=(args.length != 0 ? args[args.length - 1] : ""String_Node_Str"");
  if (!(sender instanceof Player)) {
switch (args.length) {
case 0:
case 1:
      options.addAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    break;
case 2:
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    options.addAll(Util.getOnlinePlayerList());
  }
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
  options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(plugin.getChallenges().getAllChallenges());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.add(""String_Node_Str"");
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.add(""String_Node_Str"");
options.add(""String_Node_Str"");
}
break;
case 3:
if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"") && args[1].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
final Biome[] biomes=Biome.values();
for (Biome b : biomes) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
options.add(b.name());
}
}
}
if (args[0].equalsIgnoreCase(""String_Node_Str"") && (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(Util.getOnlinePlayerList());
}
break;
case 4:
if (args[0].equalsIgnoreCase(""String_Node_Str"") && args[1].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
}
}
 else {
final Player player=(Player)sender;
switch (args.length) {
case 0:
case 1:
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
options.add(""String_Node_Str"");
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (Settings.createNether && Settings.newNether && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp())) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (Settings.teamChat && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
break;
case 2:
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.addAll(Util.getOnlinePlayerList());
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(plugin.getChallenges().getAllChallenges());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.add(""String_Node_Str"");
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.add(""String_Node_Str"");
options.add(""String_Node_Str"");
}
break;
case 3:
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"") && args[1].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
final Biome[] biomes=Biome.values();
for (Biome b : biomes) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
options.add(b.name());
}
}
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"") && (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(Util.getOnlinePlayerList());
}
break;
case 4:
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"") && args[1].equalsIgnoreCase(""String_Node_Str"")) {
final List<Player> players=PlayerCache.getOnlinePlayers();
for (Player p : players) {
options.add(p.getName());
}
}
}
}
return Util.tabLimit(options,lastArg);
}","@Override public List<String> onTabComplete(final CommandSender sender,final Command command,final String label,final String[] args){
  final List<String> options=new ArrayList<String>();
  String lastArg=(args.length != 0 ? args[args.length - 1] : ""String_Node_Str"");
  if (!(sender instanceof Player)) {
switch (args.length) {
case 0:
case 1:
      options.addAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    break;
case 2:
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    options.addAll(Util.getOnlinePlayerList());
  }
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
  options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(plugin.getChallenges().getAllChallenges());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.add(""String_Node_Str"");
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.add(""String_Node_Str"");
options.add(""String_Node_Str"");
}
break;
case 3:
if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"") && args[1].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
final Biome[] biomes=Biome.values();
for (Biome b : biomes) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
options.add(b.name());
}
}
}
if (args[0].equalsIgnoreCase(""String_Node_Str"") && (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(Util.getOnlinePlayerList());
}
break;
case 4:
if (args[0].equalsIgnoreCase(""String_Node_Str"") && args[1].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
}
}
 else {
final Player player=(Player)sender;
switch (args.length) {
case 0:
case 1:
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
options.add(""String_Node_Str"");
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (Settings.createNether && Settings.newNether && ASkyBlock.getNetherWorld() != null && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp())) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
if (Settings.teamChat && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.add(""String_Node_Str"");
}
break;
case 2:
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.addAll(Util.getOnlinePlayerList());
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(plugin.getChallenges().getAllChallenges());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.add(""String_Node_Str"");
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
options.add(""String_Node_Str"");
options.add(""String_Node_Str"");
}
break;
case 3:
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"") && args[1].equalsIgnoreCase(""String_Node_Str"")) {
options.addAll(Util.getOnlinePlayerList());
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"")) {
final Biome[] biomes=Biome.values();
for (Biome b : biomes) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
options.add(b.name());
}
}
}
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"") && (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str""))) {
options.addAll(Util.getOnlinePlayerList());
}
break;
case 4:
if ((VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || player.isOp()) && args[0].equalsIgnoreCase(""String_Node_Str"") && args[1].equalsIgnoreCase(""String_Node_Str"")) {
final List<Player> players=PlayerCache.getOnlinePlayers();
for (Player p : players) {
options.add(p.getName());
}
}
}
}
return Util.tabLimit(options,lastArg);
}"
34003,"public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] cmd){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    return true;
  }
  if (plugin.getGrid().getIsland(player.getUniqueId()) == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
    return true;
  }
switch (cmd.length) {
case 0:
    player.openInventory(challengePanel(player));
  return true;
case 1:
if (cmd[0].equalsIgnoreCase(""String_Node_Str"") || cmd[0].equalsIgnoreCase(""String_Node_Str"") || cmd[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengeshelp1);
  sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengeshelp2);
}
 else if (isLevelAvailable(player,getChallengeConfig().getString(""String_Node_Str"" + cmd[0].toLowerCase() + ""String_Node_Str""))) {
  final String challenge=cmd[0].toLowerCase();
  sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesname + ""String_Node_Str""+ ChatColor.WHITE+ challenge);
  sender.sendMessage(ChatColor.WHITE + plugin.myLocale(player.getUniqueId()).challengeslevel + ""String_Node_Str""+ ChatColor.GOLD+ getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str""));
  sender.sendMessage(ChatColor.GOLD + getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Settings.ISLANDCOMMAND));
  final String type=getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str"").toLowerCase();
  if (type.equals(""String_Node_Str"")) {
    if (getChallengeConfig().getBoolean(""String_Node_Str"" + cmd[0].toLowerCase() + ""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengesitemTakeWarning);
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorItemsNotThere);
  }
  if (plugin.getPlayers().checkChallenge(player.getUniqueId(),challenge) && (!type.equals(""String_Node_Str"") || !getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"",false))) {
    sender.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengesnotRepeatable);
    return true;
  }
  double moneyReward=0;
  int expReward=0;
  String rewardText=""String_Node_Str"";
  if (!plugin.getPlayers().checkChallenge(player.getUniqueId(),challenge)) {
    moneyReward=getChallengeConfig().getDouble(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",0D);
    rewardText=ChatColor.translateAlternateColorCodes('&',getChallengeConfig().getString(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",""String_Node_Str""));
    expReward=getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
    sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesfirstTimeRewards);
  }
 else {
    moneyReward=getChallengeConfig().getDouble(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",0D);
    rewardText=ChatColor.translateAlternateColorCodes('&',getChallengeConfig().getString(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",""String_Node_Str""));
    expReward=getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
    sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesrepeatRewards);
  }
  sender.sendMessage(ChatColor.WHITE + rewardText);
  if (expReward > 0) {
    sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesexpReward + ""String_Node_Str""+ ChatColor.WHITE+ expReward);
  }
  if (Settings.useEconomy && moneyReward > 0) {
    sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesmoneyReward + ""String_Node_Str""+ ChatColor.WHITE+ VaultHelper.econ.format(moneyReward));
  }
  sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengestoCompleteUse + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ challenge);
}
 else {
  sender.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengesinvalidChallengeName);
}
return true;
case 2:
if (cmd[0].equalsIgnoreCase(""String_Node_Str"") || cmd[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!player.getWorld().equals(ASkyBlock.getIslandWorld())) {
if (!Settings.createNether || !Settings.newNether || !player.getWorld().equals(ASkyBlock.getNetherWorld())) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
  return true;
}
}
if (checkIfCanCompleteChallenge(player,cmd[1].toLowerCase())) {
int oldLevel=getLevelDone(player);
giveReward(player,cmd[1].toLowerCase());
int newLevel=getLevelDone(player);
if (oldLevel < newLevel) {
  plugin.getChatListener().setPlayerChallengeLevel(player);
  String level=Settings.challengeLevels.get(newLevel);
  if (!level.isEmpty()) {
    String message=ChatColor.translateAlternateColorCodes('&',getChallengeConfig().getString(""String_Node_Str"" + level + ""String_Node_Str"",""String_Node_Str""));
    if (!message.isEmpty()) {
      player.sendMessage(ChatColor.GREEN + message);
    }
    String[] itemReward=getChallengeConfig().getString(""String_Node_Str"" + level + ""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    String rewardDesc=getChallengeConfig().getString(""String_Node_Str"" + level + ""String_Node_Str"",""String_Node_Str"");
    if (!rewardDesc.isEmpty()) {
      player.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesrewards + ""String_Node_Str""+ ChatColor.WHITE+ rewardDesc);
    }
    List<ItemStack> rewardedItems=giveItems(player,itemReward);
    double moneyReward=getChallengeConfig().getDouble(""String_Node_Str"" + level + ""String_Node_Str"",0D);
    int expReward=getChallengeConfig().getInt(""String_Node_Str"" + level + ""String_Node_Str"",0);
    if (expReward > 0) {
      player.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesexpReward + ""String_Node_Str""+ ChatColor.WHITE+ expReward);
      player.giveExp(expReward);
    }
    if (Settings.useEconomy && moneyReward > 0 && (VaultHelper.econ != null)) {
      EconomyResponse e=VaultHelper.econ.depositPlayer(player,Settings.worldName,moneyReward);
      if (e.transactionSuccess()) {
        player.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesmoneyReward + ""String_Node_Str""+ ChatColor.WHITE+ VaultHelper.econ.format(moneyReward));
      }
 else {
        plugin.getLogger().severe(""String_Node_Str"" + player.getUniqueId() + ""String_Node_Str""+ e.errorMessage);
        plugin.getLogger().severe(""String_Node_Str"" + moneyReward);
      }
    }
    String[] permList=getChallengeConfig().getString(""String_Node_Str"" + level + ""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    for (    final String s : permList) {
      if (!s.isEmpty()) {
        VaultHelper.addPerm(player,s);
        plugin.getLogger().info(""String_Node_Str"" + s + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
      }
    }
    List<String> commands=getChallengeConfig().getStringList(""String_Node_Str"" + level + ""String_Node_Str"");
    runCommands(player,commands);
    ChallengeLevelCompleteEvent event=new ChallengeLevelCompleteEvent(player,oldLevel,newLevel,rewardedItems);
    plugin.getServer().getPluginManager().callEvent(event);
  }
}
}
return true;
}
default :
return false;
}
}","public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] cmd){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    return true;
  }
  if (plugin.getGrid().getIsland(player.getUniqueId()) == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
    return true;
  }
switch (cmd.length) {
case 0:
    player.openInventory(challengePanel(player));
  return true;
case 1:
if (cmd[0].equalsIgnoreCase(""String_Node_Str"") || cmd[0].equalsIgnoreCase(""String_Node_Str"") || cmd[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengeshelp1);
  sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengeshelp2);
}
 else if (isLevelAvailable(player,getChallengeConfig().getString(""String_Node_Str"" + cmd[0].toLowerCase() + ""String_Node_Str""))) {
  final String challenge=cmd[0].toLowerCase();
  sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesname + ""String_Node_Str""+ ChatColor.WHITE+ challenge);
  sender.sendMessage(ChatColor.WHITE + plugin.myLocale(player.getUniqueId()).challengeslevel + ""String_Node_Str""+ ChatColor.GOLD+ getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str""));
  sender.sendMessage(ChatColor.GOLD + getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Settings.ISLANDCOMMAND));
  final String type=getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str"").toLowerCase();
  if (type.equals(""String_Node_Str"")) {
    if (getChallengeConfig().getBoolean(""String_Node_Str"" + cmd[0].toLowerCase() + ""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengesitemTakeWarning);
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorItemsNotThere);
  }
  if (plugin.getPlayers().checkChallenge(player.getUniqueId(),challenge) && (!type.equals(""String_Node_Str"") || !getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"",false))) {
    sender.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengesnotRepeatable);
    return true;
  }
  double moneyReward=0;
  int expReward=0;
  String rewardText=""String_Node_Str"";
  if (!plugin.getPlayers().checkChallenge(player.getUniqueId(),challenge)) {
    moneyReward=getChallengeConfig().getDouble(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",0D);
    rewardText=ChatColor.translateAlternateColorCodes('&',getChallengeConfig().getString(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",""String_Node_Str""));
    expReward=getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
    sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesfirstTimeRewards);
  }
 else {
    moneyReward=getChallengeConfig().getDouble(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",0D);
    rewardText=ChatColor.translateAlternateColorCodes('&',getChallengeConfig().getString(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",""String_Node_Str""));
    expReward=getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
    sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesrepeatRewards);
  }
  sender.sendMessage(ChatColor.WHITE + rewardText);
  if (expReward > 0) {
    sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesexpReward + ""String_Node_Str""+ ChatColor.WHITE+ expReward);
  }
  if (Settings.useEconomy && moneyReward > 0) {
    sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesmoneyReward + ""String_Node_Str""+ ChatColor.WHITE+ VaultHelper.econ.format(moneyReward));
  }
  sender.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengestoCompleteUse + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ challenge);
}
 else {
  sender.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengesinvalidChallengeName);
}
return true;
case 2:
if (cmd[0].equalsIgnoreCase(""String_Node_Str"") || cmd[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!player.getWorld().equals(ASkyBlock.getIslandWorld())) {
if (!Settings.createNether || !Settings.newNether || ASkyBlock.getNetherWorld() == null || !player.getWorld().equals(ASkyBlock.getNetherWorld())) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
  return true;
}
}
if (checkIfCanCompleteChallenge(player,cmd[1].toLowerCase())) {
int oldLevel=getLevelDone(player);
giveReward(player,cmd[1].toLowerCase());
int newLevel=getLevelDone(player);
if (oldLevel < newLevel) {
  plugin.getChatListener().setPlayerChallengeLevel(player);
  String level=Settings.challengeLevels.get(newLevel);
  if (!level.isEmpty()) {
    String message=ChatColor.translateAlternateColorCodes('&',getChallengeConfig().getString(""String_Node_Str"" + level + ""String_Node_Str"",""String_Node_Str""));
    if (!message.isEmpty()) {
      player.sendMessage(ChatColor.GREEN + message);
    }
    String[] itemReward=getChallengeConfig().getString(""String_Node_Str"" + level + ""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    String rewardDesc=getChallengeConfig().getString(""String_Node_Str"" + level + ""String_Node_Str"",""String_Node_Str"");
    if (!rewardDesc.isEmpty()) {
      player.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesrewards + ""String_Node_Str""+ ChatColor.WHITE+ rewardDesc);
    }
    List<ItemStack> rewardedItems=giveItems(player,itemReward);
    double moneyReward=getChallengeConfig().getDouble(""String_Node_Str"" + level + ""String_Node_Str"",0D);
    int expReward=getChallengeConfig().getInt(""String_Node_Str"" + level + ""String_Node_Str"",0);
    if (expReward > 0) {
      player.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesexpReward + ""String_Node_Str""+ ChatColor.WHITE+ expReward);
      player.giveExp(expReward);
    }
    if (Settings.useEconomy && moneyReward > 0 && (VaultHelper.econ != null)) {
      EconomyResponse e=VaultHelper.econ.depositPlayer(player,Settings.worldName,moneyReward);
      if (e.transactionSuccess()) {
        player.sendMessage(ChatColor.GOLD + plugin.myLocale(player.getUniqueId()).challengesmoneyReward + ""String_Node_Str""+ ChatColor.WHITE+ VaultHelper.econ.format(moneyReward));
      }
 else {
        plugin.getLogger().severe(""String_Node_Str"" + player.getUniqueId() + ""String_Node_Str""+ e.errorMessage);
        plugin.getLogger().severe(""String_Node_Str"" + moneyReward);
      }
    }
    String[] permList=getChallengeConfig().getString(""String_Node_Str"" + level + ""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    for (    final String s : permList) {
      if (!s.isEmpty()) {
        VaultHelper.addPerm(player,s);
        plugin.getLogger().info(""String_Node_Str"" + s + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
      }
    }
    List<String> commands=getChallengeConfig().getStringList(""String_Node_Str"" + level + ""String_Node_Str"");
    runCommands(player,commands);
    ChallengeLevelCompleteEvent event=new ChallengeLevelCompleteEvent(player,oldLevel,newLevel,rewardedItems);
    plugin.getServer().getPluginManager().callEvent(event);
  }
}
}
return true;
}
default :
return false;
}
}"
34004,"/** 
 * Makes an island using schematic. No permission checks are made. They have to be decided before this method is called.
 * @param player
 * @param schematic
 */
public void newIsland(final Player player,final Schematic schematic){
  final UUID playerUUID=player.getUniqueId();
  boolean firstTime=false;
  if (!plugin.getPlayers().hasIsland(playerUUID)) {
    firstTime=true;
  }
  Location next=getNextIsland(player.getUniqueId());
  plugin.getPlayers().setHasIsland(playerUUID,true);
  plugin.getPlayers().clearHomeLocations(playerUUID);
  plugin.getPlayers().setIslandLocation(playerUUID,next);
  if (schematic.isPlayerSpawn()) {
    plugin.getPlayers().setHomeLocation(playerUUID,schematic.getPlayerSpawn(next),1);
  }
  plugin.setNewIsland(true);
  if (schematic != null) {
    if (Settings.createNether && schematic.isInNether() && Settings.newNether) {
      if (!schematic.getPartnerName().isEmpty() && schematics.containsKey(schematic.getPartnerName())) {
        pastePartner(schematics.get(schematic.getPartnerName()),next,player);
      }
      next=next.toVector().toLocation(ASkyBlock.getNetherWorld());
      plugin.getPlayers().setIslandLocation(playerUUID,next);
      schematic.pasteSchematic(next,player,true);
    }
 else {
      schematic.pasteSchematic(next,player,true);
      if (Settings.createNether && Settings.newNether) {
        final Location netherLoc=next.toVector().toLocation(ASkyBlock.getNetherWorld());
        if (schematic.getPartnerName().isEmpty()) {
          pastePartner(schematic,netherLoc,player);
        }
 else {
          if (schematics.containsKey(schematic.getPartnerName())) {
            pastePartner(schematics.get(schematic.getPartnerName()),netherLoc,player);
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"" + schematic.getPartnerName() + ""String_Node_Str"");
          }
        }
      }
    }
    plugin.getPlayers().setStartIslandRating(playerUUID,schematic.getRating());
  }
  plugin.setNewIsland(false);
  Island myIsland=plugin.getGrid().addIsland(next.getBlockX(),next.getBlockZ(),playerUUID);
  plugin.getPlayers().save(playerUUID);
  plugin.resetPlayer(player);
  if (Settings.resetMoney) {
    resetMoney(player);
  }
  if (!firstTime) {
    setResetWaitTime(player);
  }
  int range=Settings.island_protectionRange;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      range=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
      if (range % 2 != 0) {
        range--;
        plugin.getLogger().warning(""String_Node_Str"" + range + ""String_Node_Str""+ player.getName());
      }
      if (range > Settings.islandDistance) {
        if (!plugin.getConfig().getBoolean(""String_Node_Str"",false)) {
          if (range > (Settings.islandDistance - 16)) {
            range=Settings.islandDistance - 16;
            plugin.getLogger().warning(""String_Node_Str"" + (Settings.islandDistance - 16) + ""String_Node_Str""+ range);
          }
        }
 else {
          range=Settings.islandDistance;
        }
      }
      if (range < 0) {
        range=0;
      }
    }
  }
  myIsland.setProtectionSize(range);
  if (!Bukkit.getServer().getVersion().contains(""String_Node_Str"")) {
    if (!plugin.myLocale(player.getUniqueId()).islandSubTitle.isEmpty()) {
      plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandSubTitle+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandSubTitleColor+ ""String_Node_Str"");
    }
    if (!plugin.myLocale(player.getUniqueId()).islandTitle.isEmpty()) {
      plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandTitle+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandTitleColor+ ""String_Node_Str"");
    }
    if (!plugin.myLocale(player.getUniqueId()).islandDonate.isEmpty() && !plugin.myLocale(player.getUniqueId()).islandURL.isEmpty()) {
      plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandDonate+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandDonateColor+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandURL+ ""String_Node_Str"");
    }
  }
  if (firstTime) {
    if (!player.hasPermission(Settings.PERMPREFIX + ""String_Node_Str"")) {
      runCommands(Settings.startCommands,player);
    }
  }
  plugin.getGrid().saveGrid();
  final IslandNewEvent event=new IslandNewEvent(player,schematic,myIsland);
  plugin.getServer().getPluginManager().callEvent(event);
}","/** 
 * Makes an island using schematic. No permission checks are made. They have to be decided before this method is called.
 * @param player
 * @param schematic
 */
public void newIsland(final Player player,final Schematic schematic){
  final UUID playerUUID=player.getUniqueId();
  boolean firstTime=false;
  if (!plugin.getPlayers().hasIsland(playerUUID)) {
    firstTime=true;
  }
  Location next=getNextIsland(player.getUniqueId());
  plugin.getPlayers().setHasIsland(playerUUID,true);
  plugin.getPlayers().clearHomeLocations(playerUUID);
  plugin.getPlayers().setIslandLocation(playerUUID,next);
  if (schematic.isPlayerSpawn()) {
    plugin.getPlayers().setHomeLocation(playerUUID,schematic.getPlayerSpawn(next),1);
  }
  plugin.setNewIsland(true);
  if (schematic != null) {
    if (Settings.createNether && schematic.isInNether() && Settings.newNether&& ASkyBlock.getNetherWorld() != null) {
      if (!schematic.getPartnerName().isEmpty() && schematics.containsKey(schematic.getPartnerName())) {
        pastePartner(schematics.get(schematic.getPartnerName()),next,player);
      }
      next=next.toVector().toLocation(ASkyBlock.getNetherWorld());
      plugin.getPlayers().setIslandLocation(playerUUID,next);
      schematic.pasteSchematic(next,player,true);
    }
 else {
      schematic.pasteSchematic(next,player,true);
      if (Settings.createNether && Settings.newNether && ASkyBlock.getNetherWorld() != null) {
        final Location netherLoc=next.toVector().toLocation(ASkyBlock.getNetherWorld());
        if (schematic.getPartnerName().isEmpty()) {
          pastePartner(schematic,netherLoc,player);
        }
 else {
          if (schematics.containsKey(schematic.getPartnerName())) {
            pastePartner(schematics.get(schematic.getPartnerName()),netherLoc,player);
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"" + schematic.getPartnerName() + ""String_Node_Str"");
          }
        }
      }
    }
    plugin.getPlayers().setStartIslandRating(playerUUID,schematic.getRating());
  }
  plugin.setNewIsland(false);
  Island myIsland=plugin.getGrid().addIsland(next.getBlockX(),next.getBlockZ(),playerUUID);
  plugin.getPlayers().save(playerUUID);
  plugin.resetPlayer(player);
  if (Settings.resetMoney) {
    resetMoney(player);
  }
  if (!firstTime) {
    setResetWaitTime(player);
  }
  int range=Settings.island_protectionRange;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      range=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
      if (range % 2 != 0) {
        range--;
        plugin.getLogger().warning(""String_Node_Str"" + range + ""String_Node_Str""+ player.getName());
      }
      if (range > Settings.islandDistance) {
        if (!plugin.getConfig().getBoolean(""String_Node_Str"",false)) {
          if (range > (Settings.islandDistance - 16)) {
            range=Settings.islandDistance - 16;
            plugin.getLogger().warning(""String_Node_Str"" + (Settings.islandDistance - 16) + ""String_Node_Str""+ range);
          }
        }
 else {
          range=Settings.islandDistance;
        }
      }
      if (range < 0) {
        range=0;
      }
    }
  }
  myIsland.setProtectionSize(range);
  if (!Bukkit.getServer().getVersion().contains(""String_Node_Str"")) {
    if (!plugin.myLocale(player.getUniqueId()).islandSubTitle.isEmpty()) {
      plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandSubTitle+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandSubTitleColor+ ""String_Node_Str"");
    }
    if (!plugin.myLocale(player.getUniqueId()).islandTitle.isEmpty()) {
      plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandTitle+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandTitleColor+ ""String_Node_Str"");
    }
    if (!plugin.myLocale(player.getUniqueId()).islandDonate.isEmpty() && !plugin.myLocale(player.getUniqueId()).islandURL.isEmpty()) {
      plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandDonate+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandDonateColor+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandURL+ ""String_Node_Str"");
    }
  }
  if (firstTime) {
    if (!player.hasPermission(Settings.PERMPREFIX + ""String_Node_Str"")) {
      runCommands(Settings.startCommands,player);
    }
  }
  plugin.getGrid().saveGrid();
  final IslandNewEvent event=new IslandNewEvent(player,schematic,myIsland);
  plugin.getServer().getPluginManager().callEvent(event);
}"
34005,"/** 
 * Determines if a location is in the island world or not or in the new nether if it is activated
 * @param loc
 * @return true if in the island world
 */
protected static boolean inWorld(Location loc){
  if (loc.getWorld().equals(ASkyBlock.getIslandWorld())) {
    return true;
  }
  if (Settings.createNether && Settings.newNether && loc.getWorld().equals(ASkyBlock.getNetherWorld())) {
    return true;
  }
  return false;
}","/** 
 * Determines if a location is in the island world or not or in the new nether if it is activated
 * @param loc
 * @return true if in the island world
 */
protected static boolean inWorld(Location loc){
  if (loc.getWorld().equals(ASkyBlock.getIslandWorld())) {
    return true;
  }
  if (Settings.createNether && Settings.newNether && ASkyBlock.getNetherWorld() != null && loc.getWorld().equals(ASkyBlock.getNetherWorld())) {
    return true;
  }
  return false;
}"
34006,"/** 
 * This handles non-player portal use Currently disables portal use by entities
 * @param event
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onEntityPortal(EntityPortalEvent event){
  if (!Settings.createNether) {
    return;
  }
  if (event.getEntity() == null) {
    return;
  }
  if (event.getFrom() != null && event.getFrom().getBlock().getType().equals(Material.ENDER_PORTAL)) {
    event.setCancelled(true);
    if (!event.getFrom().getWorld().getEnvironment().equals(Environment.THE_END)) {
      if (plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"") != null) {
        Location end_place=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation();
        boolean result=event.getEntity().teleport(end_place);
        return;
      }
    }
    return;
  }
  Location currentLocation=event.getFrom().clone();
  String currentWorld=currentLocation.getWorld().getName();
  if (!currentWorld.equalsIgnoreCase(Settings.worldName) && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    return;
  }
  if (!Settings.newNether) {
    event.setCancelled(true);
    return;
  }
  Location dest=event.getFrom().toVector().toLocation(ASkyBlock.getIslandWorld());
  if (event.getFrom().getWorld().getEnvironment().equals(Environment.NORMAL)) {
    dest=event.getFrom().toVector().toLocation(ASkyBlock.getNetherWorld());
  }
  if (event.getEntity() instanceof Vehicle) {
    Vehicle vehicle=(Vehicle)event.getEntity();
    vehicle.eject();
  }
  new SafeSpotTeleport(plugin,event.getEntity(),dest);
  event.setCancelled(true);
}","/** 
 * This handles non-player portal use Currently disables portal use by entities
 * @param event
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onEntityPortal(EntityPortalEvent event){
  if (!Settings.createNether || ASkyBlock.getNetherWorld() == null) {
    return;
  }
  if (event.getEntity() == null) {
    return;
  }
  if (event.getFrom() != null && event.getFrom().getBlock().getType().equals(Material.ENDER_PORTAL)) {
    event.setCancelled(true);
    if (!event.getFrom().getWorld().getEnvironment().equals(Environment.THE_END)) {
      if (plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"") != null) {
        Location end_place=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation();
        boolean result=event.getEntity().teleport(end_place);
        return;
      }
    }
    return;
  }
  Location currentLocation=event.getFrom().clone();
  String currentWorld=currentLocation.getWorld().getName();
  if (!currentWorld.equalsIgnoreCase(Settings.worldName) && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    return;
  }
  if (!Settings.newNether) {
    event.setCancelled(true);
    return;
  }
  Location dest=event.getFrom().toVector().toLocation(ASkyBlock.getIslandWorld());
  if (event.getFrom().getWorld().getEnvironment().equals(Environment.NORMAL)) {
    dest=event.getFrom().toVector().toLocation(ASkyBlock.getNetherWorld());
  }
  if (event.getEntity() instanceof Vehicle) {
    Vehicle vehicle=(Vehicle)event.getEntity();
    vehicle.eject();
  }
  new SafeSpotTeleport(plugin,event.getEntity(),dest);
  event.setCancelled(true);
}"
34007,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerPortal(PlayerPortalEvent event){
  UUID playerUUID=event.getPlayer().getUniqueId();
  if (!Settings.createNether) {
    return;
  }
  Location currentLocation=event.getFrom().clone();
  String currentWorld=currentLocation.getWorld().getName();
  if (!currentWorld.equalsIgnoreCase(Settings.worldName) && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"") && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    return;
  }
  Island island=plugin.getGrid().getIslandAt(currentLocation);
  if ((island == null && !Settings.allowPortalUse) || (island != null && !island.getIgsFlag(Flags.allowPortalUse))) {
    if (!event.getPlayer().isOp() && !VaultHelper.checkPerm(event.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (!plugin.getGrid().locationIsOnIsland(event.getPlayer(),event.getPlayer().getLocation()) && !plugin.getGrid().isAtSpawn(event.getPlayer().getLocation())) {
        event.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(event.getPlayer().getUniqueId()).islandProtected);
        event.setCancelled(true);
        return;
      }
    }
  }
switch (event.getCause()) {
case END_PORTAL:
    if (!event.getFrom().getWorld().getEnvironment().equals(Environment.THE_END)) {
      if (plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"") != null) {
        event.setCancelled(true);
        Location end_place=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation();
        if (GridManager.isSafeLocation(end_place)) {
          event.getPlayer().teleport(end_place);
          return;
        }
 else {
          event.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(event.getPlayer().getUniqueId()).warpserrorNotSafe);
          plugin.getGrid().homeTeleport(event.getPlayer());
          return;
        }
      }
    }
 else {
      event.setCancelled(true);
      plugin.getGrid().homeTeleport(event.getPlayer());
    }
  break;
case NETHER_PORTAL:
World homeWorld=ASkyBlock.getIslandWorld();
Location home=plugin.getPlayers().getHomeLocation(event.getPlayer().getUniqueId());
if (home != null) {
homeWorld=home.getWorld();
}
if (!Settings.newNether) {
if (event.getFrom().getWorld().getEnvironment().equals(Environment.NORMAL)) {
if (homeWorld.getEnvironment().equals(Environment.NORMAL)) {
event.setTo(ASkyBlock.getNetherWorld().getSpawnLocation());
event.useTravelAgent(true);
}
 else {
event.useTravelAgent(false);
Location dest=plugin.getGrid().getSafeHomeLocation(playerUUID,1);
if (dest != null) {
  event.setTo(dest);
}
 else {
  event.setCancelled(true);
  new SafeSpotTeleport(plugin,event.getPlayer(),plugin.getPlayers().getIslandLocation(playerUUID),1);
}
}
}
 else {
if (homeWorld.getEnvironment().equals(Environment.NORMAL)) {
event.useTravelAgent(false);
Location dest=plugin.getGrid().getSafeHomeLocation(playerUUID,1);
if (dest != null) {
  event.setTo(dest);
}
 else {
  event.setCancelled(true);
  new SafeSpotTeleport(plugin,event.getPlayer(),plugin.getPlayers().getIslandLocation(playerUUID),1);
}
}
 else {
event.setTo(ASkyBlock.getIslandWorld().getSpawnLocation());
event.useTravelAgent(true);
}
}
}
 else {
if (island == null) {
event.setCancelled(true);
return;
}
Location dest=event.getFrom().toVector().toLocation(ASkyBlock.getIslandWorld());
if (event.getFrom().getWorld().getEnvironment().equals(Environment.NORMAL)) {
dest=event.getFrom().toVector().toLocation(ASkyBlock.getNetherWorld());
if (island.getCenter().toVector().toLocation(ASkyBlock.getNetherWorld()).getBlock().getType() != Material.BEDROCK) {
if (plugin.getGrid().bigScan(dest,20) == null) {
  plugin.getLogger().warning(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str"");
  Schematic nether=IslandCmd.getSchematics().get(""String_Node_Str"");
  if (nether != null) {
    plugin.getIslandCmd().pasteSchematic(nether,island.getCenter().toVector().toLocation(ASkyBlock.getNetherWorld()),event.getPlayer());
  }
 else {
    plugin.getLogger().severe(""String_Node_Str"");
    event.setCancelled(true);
    event.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(event.getPlayer().getUniqueId()).warpserrorNotSafe);
    return;
  }
}
}
}
event.setCancelled(true);
new SafeSpotTeleport(plugin,event.getPlayer(),dest);
}
break;
default :
break;
}
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerPortal(PlayerPortalEvent event){
  UUID playerUUID=event.getPlayer().getUniqueId();
  if (!Settings.createNether || ASkyBlock.getNetherWorld() == null) {
    return;
  }
  Location currentLocation=event.getFrom().clone();
  String currentWorld=currentLocation.getWorld().getName();
  if (!currentWorld.equalsIgnoreCase(Settings.worldName) && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"") && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    return;
  }
  Island island=plugin.getGrid().getIslandAt(currentLocation);
  if ((island == null && !Settings.allowPortalUse) || (island != null && !island.getIgsFlag(Flags.allowPortalUse))) {
    if (!event.getPlayer().isOp() && !VaultHelper.checkPerm(event.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (!plugin.getGrid().locationIsOnIsland(event.getPlayer(),event.getPlayer().getLocation()) && !plugin.getGrid().isAtSpawn(event.getPlayer().getLocation())) {
        event.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(event.getPlayer().getUniqueId()).islandProtected);
        event.setCancelled(true);
        return;
      }
    }
  }
switch (event.getCause()) {
case END_PORTAL:
    if (!event.getFrom().getWorld().getEnvironment().equals(Environment.THE_END)) {
      if (plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"") != null) {
        event.setCancelled(true);
        Location end_place=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation();
        if (GridManager.isSafeLocation(end_place)) {
          event.getPlayer().teleport(end_place);
          return;
        }
 else {
          event.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(event.getPlayer().getUniqueId()).warpserrorNotSafe);
          plugin.getGrid().homeTeleport(event.getPlayer());
          return;
        }
      }
    }
 else {
      event.setCancelled(true);
      plugin.getGrid().homeTeleport(event.getPlayer());
    }
  break;
case NETHER_PORTAL:
World homeWorld=ASkyBlock.getIslandWorld();
Location home=plugin.getPlayers().getHomeLocation(event.getPlayer().getUniqueId());
if (home != null) {
homeWorld=home.getWorld();
}
if (!Settings.newNether) {
if (event.getFrom().getWorld().getEnvironment().equals(Environment.NORMAL)) {
if (homeWorld.getEnvironment().equals(Environment.NORMAL)) {
event.setTo(ASkyBlock.getNetherWorld().getSpawnLocation());
event.useTravelAgent(true);
}
 else {
event.useTravelAgent(false);
Location dest=plugin.getGrid().getSafeHomeLocation(playerUUID,1);
if (dest != null) {
  event.setTo(dest);
}
 else {
  event.setCancelled(true);
  new SafeSpotTeleport(plugin,event.getPlayer(),plugin.getPlayers().getIslandLocation(playerUUID),1);
}
}
}
 else {
if (homeWorld.getEnvironment().equals(Environment.NORMAL)) {
event.useTravelAgent(false);
Location dest=plugin.getGrid().getSafeHomeLocation(playerUUID,1);
if (dest != null) {
  event.setTo(dest);
}
 else {
  event.setCancelled(true);
  new SafeSpotTeleport(plugin,event.getPlayer(),plugin.getPlayers().getIslandLocation(playerUUID),1);
}
}
 else {
event.setTo(ASkyBlock.getIslandWorld().getSpawnLocation());
event.useTravelAgent(true);
}
}
}
 else {
if (island == null) {
event.setCancelled(true);
return;
}
Location dest=event.getFrom().toVector().toLocation(ASkyBlock.getIslandWorld());
if (event.getFrom().getWorld().getEnvironment().equals(Environment.NORMAL)) {
dest=event.getFrom().toVector().toLocation(ASkyBlock.getNetherWorld());
if (island.getCenter().toVector().toLocation(ASkyBlock.getNetherWorld()).getBlock().getType() != Material.BEDROCK) {
if (plugin.getGrid().bigScan(dest,20) == null) {
  plugin.getLogger().warning(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str"");
  Schematic nether=IslandCmd.getSchematics().get(""String_Node_Str"");
  if (nether != null) {
    plugin.getIslandCmd().pasteSchematic(nether,island.getCenter().toVector().toLocation(ASkyBlock.getNetherWorld()),event.getPlayer());
  }
 else {
    plugin.getLogger().severe(""String_Node_Str"");
    event.setCancelled(true);
    event.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(event.getPlayer().getUniqueId()).warpserrorNotSafe);
    return;
  }
}
}
}
event.setCancelled(true);
new SafeSpotTeleport(plugin,event.getPlayer(),dest);
}
break;
default :
break;
}
}"
34008,"/** 
 * Ensures that any block when loaded will match the biome of the center column of the island if it exists. Does not apply to spawn.
 * @param e
 */
@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=false) public void onChunkLoad(ChunkLoadEvent e){
  if (plugin.getGrid() == null) {
    return;
  }
  if (e.getWorld() != ASkyBlock.getIslandWorld()) {
    return;
  }
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      Island island=plugin.getGrid().getIslandAt(e.getChunk().getX() * 16 + x,e.getChunk().getZ() * 16 + z);
      if (island != null && !island.isSpawn()) {
        Biome biome=island.getBiome();
        Biome blockBiome=e.getChunk().getBlock(x,0,z).getBiome();
        if (!biome.equals(blockBiome)) {
          e.getChunk().getBlock(x,0,z).setBiome(biome);
switch (biome) {
case MESA:
case DESERT:
case JUNGLE:
case SAVANNA:
case SWAMPLAND:
            boolean topBlockFound=false;
          for (int y=e.getWorld().getMaxHeight(); y >= Settings.sea_level; y--) {
            Block b=e.getChunk().getBlock(x,y,z);
            if (!b.getType().equals(Material.AIR)) {
              topBlockFound=true;
            }
            if (topBlockFound) {
              if (b.getType() == Material.ICE || b.getType() == Material.SNOW || b.getType() == Material.SNOW_BLOCK) {
                b.setType(Material.AIR);
              }
 else {
                break;
              }
            }
          }
        break;
case HELL:
      topBlockFound=false;
    for (int y=e.getWorld().getMaxHeight(); y >= Settings.sea_level; y--) {
      Block b=e.getChunk().getBlock(x,y,z);
      if (!b.getType().equals(Material.AIR)) {
        topBlockFound=true;
      }
      if (topBlockFound) {
        if (b.getType() == Material.ICE || b.getType() == Material.SNOW || b.getType() == Material.SNOW_BLOCK || b.getType() == Material.WATER || b.getType() == Material.STATIONARY_WATER) {
          b.setType(Material.AIR);
        }
 else {
          break;
        }
      }
    }
  break;
default :
}
}
}
}
}
}","/** 
 * Ensures that any block when loaded will match the biome of the center column of the island if it exists. Does not apply to spawn.
 * @param e
 */
@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=false) public void onChunkLoad(ChunkLoadEvent e){
  if (plugin.getGrid() == null) {
    return;
  }
  if (ASkyBlock.getIslandWorld() == null || e.getWorld() != ASkyBlock.getIslandWorld()) {
    return;
  }
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      Island island=plugin.getGrid().getIslandAt(e.getChunk().getX() * 16 + x,e.getChunk().getZ() * 16 + z);
      if (island != null && !island.isSpawn()) {
        Biome biome=island.getBiome();
        Biome blockBiome=e.getChunk().getBlock(x,0,z).getBiome();
        if (!biome.equals(blockBiome)) {
          e.getChunk().getBlock(x,0,z).setBiome(biome);
switch (biome) {
case MESA:
case DESERT:
case JUNGLE:
case SAVANNA:
case SWAMPLAND:
            boolean topBlockFound=false;
          for (int y=e.getWorld().getMaxHeight(); y >= Settings.sea_level; y--) {
            Block b=e.getChunk().getBlock(x,y,z);
            if (!b.getType().equals(Material.AIR)) {
              topBlockFound=true;
            }
            if (topBlockFound) {
              if (b.getType() == Material.ICE || b.getType() == Material.SNOW || b.getType() == Material.SNOW_BLOCK) {
                b.setType(Material.AIR);
              }
 else {
                break;
              }
            }
          }
        break;
case HELL:
      topBlockFound=false;
    for (int y=e.getWorld().getMaxHeight(); y >= Settings.sea_level; y--) {
      Block b=e.getChunk().getBlock(x,y,z);
      if (!b.getType().equals(Material.AIR)) {
        topBlockFound=true;
      }
      if (topBlockFound) {
        if (b.getType() == Material.ICE || b.getType() == Material.SNOW || b.getType() == Material.SNOW_BLOCK || b.getType() == Material.WATER || b.getType() == Material.STATIONARY_WATER) {
          b.setType(Material.AIR);
        }
 else {
          break;
        }
      }
    }
  break;
default :
}
}
}
}
}
}"
34009,"/** 
 * This method pastes a schematic.
 * @param loc
 * @param player
 */
public void pasteSchematic(final Location loc,final Player player,boolean teleport){
  if (this.file == null) {
    if (Settings.GAMETYPE == GameType.ACIDISLAND) {
      generateIslandBlocks(loc,player);
    }
 else {
      loc.getBlock().setType(Material.BEDROCK);
      ASkyBlock.getPlugin().getLogger().severe(""String_Node_Str"");
    }
    return;
  }
  World world=loc.getWorld();
  Location blockLoc=new Location(world,loc.getX(),Settings.island_level,loc.getZ());
  blockLoc.subtract(bedrock);
  for (  IslandBlock b : islandBlocks) {
    b.paste(nms,blockLoc,this.usePhysics,biome);
  }
  if (pasteEntities) {
    for (    EntityObject ent : entitiesList) {
      if (ent.getTileX() != null && ent.getTileY() != null && ent.getTileZ() != null) {
        ent.setLocation(new BlockVector(ent.getTileX(),ent.getTileY(),ent.getTileZ()));
      }
      Location entitySpot=ent.getLocation().toLocation(blockLoc.getWorld()).add(blockLoc.toVector());
      entitySpot.setPitch(ent.getPitch());
      entitySpot.setYaw(ent.getYaw());
      if (ent.getType() == EntityType.PAINTING) {
        try {
          Painting painting=blockLoc.getWorld().spawn(entitySpot,Painting.class);
          if (painting != null) {
            if (paintingList.containsKey(ent.getMotive())) {
              painting.setArt(paintingList.get(ent.getMotive()),true);
            }
 else {
              painting.setArt(Art.ALBAN,true);
            }
            if (facingList.containsKey(ent.getFacing())) {
              painting.setFacingDirection(facingList.get(ent.getFacing()),true);
            }
 else {
              painting.setFacingDirection(BlockFace.NORTH,true);
            }
          }
        }
 catch (        IllegalArgumentException e) {
        }
      }
 else       if (ent.getType() == EntityType.ITEM_FRAME) {
        ItemFrame itemFrame=(ItemFrame)blockLoc.getWorld().spawnEntity(entitySpot,EntityType.ITEM_FRAME);
        if (itemFrame != null) {
          Material material=Material.matchMaterial(ent.getId().substring(10).toUpperCase());
          ;
          if (material == null && IslandBlock.WEtoM.containsKey(ent.getId().substring(10).toUpperCase())) {
            material=IslandBlock.WEtoM.get(ent.getId().substring(10).toUpperCase());
          }
          ItemStack item;
          if (material != null) {
            if (ent.getCount() != null) {
              if (ent.getDamage() != null) {
                item=new ItemStack(material,ent.getCount(),ent.getDamage());
              }
 else {
                item=new ItemStack(material,ent.getCount(),(short)0);
              }
            }
 else {
              if (ent.getDamage() != null) {
                item=new ItemStack(material,1,ent.getDamage());
              }
 else {
                item=new ItemStack(material,1,(short)0);
              }
            }
          }
 else {
            item=new ItemStack(Material.STONE,0,(short)4);
          }
          ItemMeta itemMeta=item.getItemMeta();
          item.setItemMeta(itemMeta);
          itemFrame.setItem(item);
          if (facingList.containsKey(ent.getFacing())) {
            itemFrame.setFacingDirection(facingList.get(ent.getFacing()),true);
          }
 else {
            itemFrame.setFacingDirection(BlockFace.NORTH,true);
          }
          if (rotationList.containsKey(ent.getItemRotation())) {
            itemFrame.setRotation(rotationList.get(ent.getItemRotation()));
          }
 else {
            itemFrame.setRotation(Rotation.NONE);
          }
        }
      }
 else {
        Entity spawned=blockLoc.getWorld().spawnEntity(entitySpot,ent.getType());
        if (spawned != null) {
          spawned.setVelocity(ent.getMotion());
          if (ent.getType() == EntityType.SHEEP) {
            Sheep sheep=(Sheep)spawned;
            if (ent.isSheared()) {
              sheep.setSheared(true);
            }
            DyeColor[] set=DyeColor.values();
            sheep.setColor(set[ent.getColor()]);
            sheep.setAge(ent.getAge());
          }
 else           if (ent.getType() == EntityType.HORSE) {
            Horse horse=(Horse)spawned;
            Horse.Color[] set=Horse.Color.values();
            horse.setColor(set[ent.getColor()]);
            horse.setAge(ent.getAge());
            horse.setCarryingChest(ent.isCarryingChest());
          }
 else           if (ent.getType() == EntityType.VILLAGER) {
            Villager villager=(Villager)spawned;
            villager.setAge(ent.getAge());
            Profession[] proffs=Profession.values();
            villager.setProfession(proffs[ent.getProfession()]);
          }
 else           if (!Bukkit.getServer().getVersion().contains(""String_Node_Str"") && ent.getType() == EntityType.RABBIT) {
            Rabbit rabbit=(Rabbit)spawned;
            Rabbit.Type[] set=Rabbit.Type.values();
            rabbit.setRabbitType(set[ent.getRabbitType()]);
            rabbit.setAge(ent.getAge());
          }
 else           if (ent.getType() == EntityType.OCELOT) {
            Ocelot cat=(Ocelot)spawned;
            if (ent.isOwned()) {
              cat.setTamed(true);
              cat.setOwner(player);
            }
            Ocelot.Type[] set=Ocelot.Type.values();
            cat.setCatType(set[ent.getCatType()]);
            cat.setAge(ent.getAge());
            cat.setSitting(ent.isSitting());
          }
 else           if (ent.getType() == EntityType.WOLF) {
            Wolf wolf=(Wolf)spawned;
            if (ent.isOwned()) {
              wolf.setTamed(true);
              wolf.setOwner(player);
            }
            wolf.setAge(ent.getAge());
            wolf.setSitting(ent.isSitting());
            DyeColor[] color=DyeColor.values();
            wolf.setCollarColor(color[ent.getCollarColor()]);
          }
        }
      }
    }
  }
  final Location grass;
  if (topGrass != null) {
    Location gr=topGrass.clone().toLocation(loc.getWorld()).subtract(bedrock);
    gr.add(loc.toVector());
    gr.add(new Vector(0.5D,1.1D,0.5D));
    grass=gr;
  }
 else {
    grass=null;
  }
  Block blockToChange=null;
  if (welcomeSign != null) {
    Vector ws=welcomeSign.clone().subtract(bedrock);
    ws.add(loc.toVector());
    blockToChange=ws.toLocation(world).getBlock();
    blockToChange.setType(Material.SIGN_POST);
    Sign sign=(Sign)blockToChange.getState();
    if (sign.getLine(0).isEmpty()) {
      sign.setLine(0,plugin.myLocale(player.getUniqueId()).signLine1.replace(""String_Node_Str"",player.getName()));
    }
    if (sign.getLine(1).isEmpty()) {
      sign.setLine(1,plugin.myLocale(player.getUniqueId()).signLine2.replace(""String_Node_Str"",player.getName()));
    }
    if (sign.getLine(2).isEmpty()) {
      sign.setLine(2,plugin.myLocale(player.getUniqueId()).signLine3.replace(""String_Node_Str"",player.getName()));
    }
    if (sign.getLine(3).isEmpty()) {
      sign.setLine(3,plugin.myLocale(player.getUniqueId()).signLine4.replace(""String_Node_Str"",player.getName()));
    }
    ((org.bukkit.material.Sign)sign.getData()).setFacingDirection(BlockFace.NORTH);
    sign.update();
  }
  if (chest != null) {
    Vector ch=chest.clone().subtract(bedrock);
    ch.add(loc.toVector());
    blockToChange=ch.toLocation(world).getBlock();
    if (useDefaultChest) {
      if (blockToChange.getType() == Material.CHEST) {
        final Chest islandChest=(Chest)blockToChange.getState();
        DoubleChest doubleChest=null;
        InventoryHolder iH=islandChest.getInventory().getHolder();
        if (iH instanceof DoubleChest) {
          doubleChest=(DoubleChest)iH;
        }
        if (doubleChest != null) {
          Inventory inventory=doubleChest.getInventory();
          inventory.clear();
          inventory.setContents(defaultChestItems);
        }
 else {
          Inventory inventory=islandChest.getInventory();
          inventory.clear();
          inventory.setContents(defaultChestItems);
        }
      }
    }
  }
  if (teleport) {
    plugin.getPlayers().setInTeleport(player.getUniqueId(),true);
    player.teleport(world.getSpawnLocation());
    plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
      @Override public void run(){
        plugin.getGrid().homeTeleport(player);
        plugin.getPlayers().setInTeleport(player.getUniqueId(),false);
      }
    }
,10L);
  }
  if (!islandCompanion.isEmpty() && grass != null) {
    Bukkit.getServer().getScheduler().runTaskLater(ASkyBlock.getPlugin(),new Runnable(){
      @Override public void run(){
        spawnCompanion(player,grass);
      }
    }
,40L);
  }
}","/** 
 * This method pastes a schematic.
 * @param loc
 * @param player
 */
public void pasteSchematic(final Location loc,final Player player,boolean teleport){
  if (this.file == null) {
    if (Settings.GAMETYPE == GameType.ACIDISLAND) {
      generateIslandBlocks(loc,player);
    }
 else {
      loc.getBlock().setType(Material.BEDROCK);
      ASkyBlock.getPlugin().getLogger().severe(""String_Node_Str"");
    }
    return;
  }
  World world=loc.getWorld();
  Location blockLoc=new Location(world,loc.getX(),Settings.island_level,loc.getZ());
  blockLoc.subtract(bedrock);
  for (  IslandBlock b : islandBlocks) {
    b.paste(nms,blockLoc,this.usePhysics,biome);
  }
  if (pasteEntities) {
    for (    EntityObject ent : entitiesList) {
      if (ent.getTileX() != null && ent.getTileY() != null && ent.getTileZ() != null) {
        ent.setLocation(new BlockVector(ent.getTileX(),ent.getTileY(),ent.getTileZ()));
      }
      Location entitySpot=ent.getLocation().toLocation(blockLoc.getWorld()).add(blockLoc.toVector());
      entitySpot.setPitch(ent.getPitch());
      entitySpot.setYaw(ent.getYaw());
      if (ent.getType() == EntityType.PAINTING) {
        try {
          Painting painting=blockLoc.getWorld().spawn(entitySpot,Painting.class);
          if (painting != null) {
            if (paintingList.containsKey(ent.getMotive())) {
              painting.setArt(paintingList.get(ent.getMotive()),true);
            }
 else {
              painting.setArt(Art.ALBAN,true);
            }
            if (facingList.containsKey(ent.getFacing())) {
              painting.setFacingDirection(facingList.get(ent.getFacing()),true);
            }
 else {
              painting.setFacingDirection(BlockFace.NORTH,true);
            }
          }
        }
 catch (        IllegalArgumentException e) {
        }
      }
 else       if (ent.getType() == EntityType.ITEM_FRAME) {
        ItemFrame itemFrame=(ItemFrame)blockLoc.getWorld().spawnEntity(entitySpot,EntityType.ITEM_FRAME);
        if (itemFrame != null) {
          Material material=Material.matchMaterial(ent.getId().substring(10).toUpperCase());
          ;
          if (material == null && IslandBlock.WEtoM.containsKey(ent.getId().substring(10).toUpperCase())) {
            material=IslandBlock.WEtoM.get(ent.getId().substring(10).toUpperCase());
          }
          ItemStack item;
          if (material != null) {
            if (ent.getCount() != null) {
              if (ent.getDamage() != null) {
                item=new ItemStack(material,ent.getCount(),ent.getDamage());
              }
 else {
                item=new ItemStack(material,ent.getCount(),(short)0);
              }
            }
 else {
              if (ent.getDamage() != null) {
                item=new ItemStack(material,1,ent.getDamage());
              }
 else {
                item=new ItemStack(material,1,(short)0);
              }
            }
          }
 else {
            item=new ItemStack(Material.STONE,0,(short)4);
          }
          ItemMeta itemMeta=item.getItemMeta();
          item.setItemMeta(itemMeta);
          itemFrame.setItem(item);
          if (facingList.containsKey(ent.getFacing())) {
            itemFrame.setFacingDirection(facingList.get(ent.getFacing()),true);
          }
 else {
            itemFrame.setFacingDirection(BlockFace.NORTH,true);
          }
          if (rotationList.containsKey(ent.getItemRotation())) {
            itemFrame.setRotation(rotationList.get(ent.getItemRotation()));
          }
 else {
            itemFrame.setRotation(Rotation.NONE);
          }
        }
      }
 else {
        Entity spawned=blockLoc.getWorld().spawnEntity(entitySpot,ent.getType());
        if (spawned != null) {
          spawned.setVelocity(ent.getMotion());
          if (ent.getType() == EntityType.SHEEP) {
            Sheep sheep=(Sheep)spawned;
            if (ent.isSheared()) {
              sheep.setSheared(true);
            }
            DyeColor[] set=DyeColor.values();
            sheep.setColor(set[ent.getColor()]);
            sheep.setAge(ent.getAge());
          }
 else           if (ent.getType() == EntityType.HORSE) {
            Horse horse=(Horse)spawned;
            Horse.Color[] set=Horse.Color.values();
            horse.setColor(set[ent.getColor()]);
            horse.setAge(ent.getAge());
            horse.setCarryingChest(ent.isCarryingChest());
          }
 else           if (ent.getType() == EntityType.VILLAGER) {
            Villager villager=(Villager)spawned;
            villager.setAge(ent.getAge());
            Profession[] proffs=Profession.values();
            villager.setProfession(proffs[ent.getProfession()]);
          }
 else           if (!Bukkit.getServer().getVersion().contains(""String_Node_Str"") && ent.getType() == EntityType.RABBIT) {
            Rabbit rabbit=(Rabbit)spawned;
            Rabbit.Type[] set=Rabbit.Type.values();
            rabbit.setRabbitType(set[ent.getRabbitType()]);
            rabbit.setAge(ent.getAge());
          }
 else           if (ent.getType() == EntityType.OCELOT) {
            Ocelot cat=(Ocelot)spawned;
            if (ent.isOwned()) {
              cat.setTamed(true);
              cat.setOwner(player);
            }
            Ocelot.Type[] set=Ocelot.Type.values();
            cat.setCatType(set[ent.getCatType()]);
            cat.setAge(ent.getAge());
            cat.setSitting(ent.isSitting());
          }
 else           if (ent.getType() == EntityType.WOLF) {
            Wolf wolf=(Wolf)spawned;
            if (ent.isOwned()) {
              wolf.setTamed(true);
              wolf.setOwner(player);
            }
            wolf.setAge(ent.getAge());
            wolf.setSitting(ent.isSitting());
            DyeColor[] color=DyeColor.values();
            wolf.setCollarColor(color[ent.getCollarColor()]);
          }
        }
      }
    }
  }
  final Location grass;
  if (topGrass != null) {
    Location gr=topGrass.clone().toLocation(loc.getWorld()).subtract(bedrock);
    gr.add(loc.toVector());
    gr.add(new Vector(0.5D,1.1D,0.5D));
    grass=gr;
  }
 else {
    grass=null;
  }
  Block blockToChange=null;
  if (welcomeSign != null) {
    Vector ws=welcomeSign.clone().subtract(bedrock);
    ws.add(loc.toVector());
    blockToChange=ws.toLocation(world).getBlock();
    BlockState signState=blockToChange.getState();
    if (signState instanceof Sign) {
      Sign sign=(Sign)signState;
      if (sign.getLine(0).isEmpty()) {
        sign.setLine(0,plugin.myLocale(player.getUniqueId()).signLine1.replace(""String_Node_Str"",player.getName()));
      }
      if (sign.getLine(1).isEmpty()) {
        sign.setLine(1,plugin.myLocale(player.getUniqueId()).signLine2.replace(""String_Node_Str"",player.getName()));
      }
      if (sign.getLine(2).isEmpty()) {
        sign.setLine(2,plugin.myLocale(player.getUniqueId()).signLine3.replace(""String_Node_Str"",player.getName()));
      }
      if (sign.getLine(3).isEmpty()) {
        sign.setLine(3,plugin.myLocale(player.getUniqueId()).signLine4.replace(""String_Node_Str"",player.getName()));
      }
      sign.update();
    }
  }
  if (chest != null) {
    Vector ch=chest.clone().subtract(bedrock);
    ch.add(loc.toVector());
    blockToChange=ch.toLocation(world).getBlock();
    if (useDefaultChest) {
      if (blockToChange.getType() == Material.CHEST) {
        final Chest islandChest=(Chest)blockToChange.getState();
        DoubleChest doubleChest=null;
        InventoryHolder iH=islandChest.getInventory().getHolder();
        if (iH instanceof DoubleChest) {
          doubleChest=(DoubleChest)iH;
        }
        if (doubleChest != null) {
          Inventory inventory=doubleChest.getInventory();
          inventory.clear();
          inventory.setContents(defaultChestItems);
        }
 else {
          Inventory inventory=islandChest.getInventory();
          inventory.clear();
          inventory.setContents(defaultChestItems);
        }
      }
    }
  }
  if (teleport) {
    plugin.getPlayers().setInTeleport(player.getUniqueId(),true);
    player.teleport(world.getSpawnLocation());
    plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
      @Override public void run(){
        plugin.getGrid().homeTeleport(player);
        plugin.getPlayers().setInTeleport(player.getUniqueId(),false);
      }
    }
,10L);
  }
  if (!islandCompanion.isEmpty() && grass != null) {
    Bukkit.getServer().getScheduler().runTaskLater(ASkyBlock.getPlugin(),new Runnable(){
      @Override public void run(){
        spawnCompanion(player,grass);
      }
    }
,40L);
  }
}"
34010,"/** 
 * Handles hitting minecarts or feeding animals
 * @param e
 */
@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerHitEntity(PlayerInteractEntityEvent e){
  Player p=e.getPlayer();
  if (DEBUG) {
    plugin.getLogger().info(""String_Node_Str"" + e.getEventName());
  }
  if (!inWorld(p)) {
    return;
  }
  if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
    return;
  }
  if (p.getItemInHand() != null && p.getItemInHand().getType().equals(Material.LEASH)) {
    return;
  }
  Island island=plugin.getGrid().getProtectedIslandAt(e.getPlayer().getLocation());
  if (!plugin.getGrid().playerIsOnIsland(e.getPlayer())) {
    if (p.getItemInHand() != null && e.getRightClicked() instanceof Animals) {
      Material type=p.getItemInHand().getType();
      if (type == Material.EGG || type == Material.WHEAT || type == Material.CARROT_ITEM || type == Material.SEEDS) {
        if (island == null && !Settings.allowBreeding) {
          e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
          e.setCancelled(true);
          return;
        }
        if (island != null) {
          if (island.isSpawn()) {
            if (!Settings.allowSpawnBreeding) {
              e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
              e.setCancelled(true);
              return;
            }
          }
 else {
            if ((!island.getIgsFlag(Flags.allowBreeding) && !island.getMembers().contains(p.getUniqueId()))) {
              e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
              e.setCancelled(true);
              return;
            }
          }
        }
      }
    }
switch (e.getRightClicked().getType()) {
case HORSE:
      if (island == null && !Settings.allowHorseRiding) {
        e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
        e.setCancelled(true);
      }
    if (island != null && island.isSpawn()) {
      if (!Settings.allowSpawnHorseRiding) {
        e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
        e.setCancelled(true);
      }
    }
 else     if (island != null && !island.getIgsFlag(Flags.allowHorseRiding)) {
      e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
      e.setCancelled(true);
    }
  break;
case ITEM_FRAME:
case MINECART_CHEST:
case MINECART_FURNACE:
case MINECART_HOPPER:
if (island == null && !Settings.allowChestAccess) {
  e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
  e.setCancelled(true);
}
if (island != null) {
if (island.isSpawn()) {
  if (!Settings.allowSpawnChestAccess) {
    e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
    e.setCancelled(true);
  }
}
 else if (!island.getIgsFlag(Flags.allowChestAccess)) {
  e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
  e.setCancelled(true);
}
}
break;
default :
break;
}
}
}","/** 
 * Handles hitting minecarts or feeding animals
 * @param e
 */
@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerHitEntity(PlayerInteractEntityEvent e){
  Player p=e.getPlayer();
  if (DEBUG) {
    plugin.getLogger().info(""String_Node_Str"" + e.getEventName());
  }
  if (!inWorld(p)) {
    return;
  }
  if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
    return;
  }
  if (p.getItemInHand() != null && p.getItemInHand().getType().equals(Material.LEASH)) {
    return;
  }
  Island island=plugin.getGrid().getProtectedIslandAt(e.getPlayer().getLocation());
  if (!plugin.getGrid().playerIsOnIsland(e.getPlayer())) {
    if (p.getItemInHand() != null && e.getRightClicked() instanceof Animals) {
      Material type=p.getItemInHand().getType();
      if (type == Material.EGG || type == Material.WHEAT || type == Material.CARROT_ITEM || type == Material.SEEDS) {
        if (island == null && !Settings.allowBreeding) {
          e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
          e.setCancelled(true);
          return;
        }
        if (island != null) {
          if (island.isSpawn()) {
            if (!Settings.allowSpawnBreeding) {
              e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
              e.setCancelled(true);
              return;
            }
          }
 else {
            if ((!island.getIgsFlag(Flags.allowBreeding) && !island.getMembers().contains(p.getUniqueId()))) {
              e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
              e.setCancelled(true);
              return;
            }
          }
        }
      }
    }
switch (e.getRightClicked().getType()) {
case HORSE:
      if (island == null && !Settings.allowHorseRiding) {
        e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
        e.setCancelled(true);
      }
    if (island != null && island.isSpawn()) {
      if (!Settings.allowSpawnHorseRiding) {
        e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
        e.setCancelled(true);
      }
    }
 else     if (island != null && !island.getIgsFlag(Flags.allowHorseRiding)) {
      e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
      e.setCancelled(true);
    }
  break;
case ITEM_FRAME:
if (island == null && !Settings.allowPlaceBlocks) {
  e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
  e.setCancelled(true);
}
if (island != null) {
if (island.isSpawn()) {
  if (!Settings.allowSpawnPlaceBlocks) {
    e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
    e.setCancelled(true);
  }
}
 else if (!island.getIgsFlag(Flags.allowPlaceBlocks)) {
  e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
  e.setCancelled(true);
}
}
break;
case MINECART_CHEST:
case MINECART_FURNACE:
case MINECART_HOPPER:
if (island == null && !Settings.allowChestAccess) {
e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
e.setCancelled(true);
}
if (island != null) {
if (island.isSpawn()) {
if (!Settings.allowSpawnChestAccess) {
e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
e.setCancelled(true);
}
}
 else if (!island.getIgsFlag(Flags.allowChestAccess)) {
e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
e.setCancelled(true);
}
}
break;
default :
break;
}
}
}"
34011,"/** 
 * Checks the highest level this player has achieved
 * @param player
 * @return level number
 */
private int getLevelDone(Player player){
  for (int result=0; result < Settings.challengeLevels.size(); result++) {
    if (checkLevelCompletion(player,Settings.challengeLevels.get(result)) > 0) {
      return result;
    }
  }
  return (Settings.challengeLevels.size() - 1);
}","/** 
 * Checks the highest level this player has achieved
 * @param player
 * @return level number
 */
private int getLevelDone(Player player){
  for (int result=0; result < Settings.challengeLevels.size(); result++) {
    if (checkLevelCompletion(player,Settings.challengeLevels.get(result)) > 0) {
      return result;
    }
  }
  return (Math.max(0,Settings.challengeLevels.size() - 1));
}"
34012,"/** 
 * Gets the name of the highest challenge level the player has completed
 * @param player
 * @return challenge level
 */
public String getChallengeLevel(Player player){
  if (Settings.challengeLevels.isEmpty()) {
    return ""String_Node_Str"";
  }
  return Settings.challengeLevels.get(getLevelDone(player) - 1);
}","/** 
 * Gets the name of the highest challenge level the player has completed
 * @param player
 * @return challenge level
 */
public String getChallengeLevel(Player player){
  if (Settings.challengeLevels.isEmpty()) {
    return ""String_Node_Str"";
  }
  return Settings.challengeLevels.get(getLevelDone(player));
}"
34013,"/** 
 * Sets this block's sign data
 * @param tileData
 */
public void setSign(Map<String,Tag> tileData){
  signText=new ArrayList<String>();
  List<String> text=new ArrayList<String>();
  for (int i=1; i < 5; i++) {
    String line=((StringTag)tileData.get(""String_Node_Str"" + String.valueOf(i))).getValue();
    if (line == null) {
      line=""String_Node_Str"";
    }
    text.add(line);
  }
  JSONParser parser=new JSONParser();
  ContainerFactory containerFactory=new ContainerFactory(){
    public List creatArrayContainer(){
      return new LinkedList();
    }
    public Map createObjectContainer(){
      return new LinkedHashMap();
    }
  }
;
  for (int line=0; line < 4; line++) {
    String lineText=""String_Node_Str"";
    if (!text.get(line).equals(""String_Node_Str"") && !text.get(line).isEmpty()) {
      if (text.get(line).startsWith(""String_Node_Str"")) {
        try {
          Map json=(Map)parser.parse(text.get(line),containerFactory);
          List list=(List)json.get(""String_Node_Str"");
          Iterator iter=list.iterator();
          while (iter.hasNext()) {
            Object next=iter.next();
            String format=JSONValue.toJSONString(next);
            if (format.startsWith(""String_Node_Str"")) {
              Map jsonFormat=(Map)parser.parse(format,containerFactory);
              Iterator formatIter=jsonFormat.entrySet().iterator();
              while (formatIter.hasNext()) {
                Map.Entry entry=(Map.Entry)formatIter.next();
                String key=entry.getKey().toString();
                String value=entry.getValue().toString();
                if (key.equalsIgnoreCase(""String_Node_Str"")) {
                  try {
                    lineText+=ChatColor.valueOf(value.toUpperCase());
                  }
 catch (                  Exception noColor) {
                    Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                  }
                }
 else                 if (key.equalsIgnoreCase(""String_Node_Str"")) {
                  lineText+=value;
                }
 else {
                  if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                    lineText+=ChatColor.MAGIC;
                  }
 else                   if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                    lineText+=ChatColor.UNDERLINE;
                  }
 else {
                    try {
                      lineText+=ChatColor.valueOf(key.toUpperCase());
                    }
 catch (                    Exception noFormat) {
                      Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else {
              if (format.length() > 1) {
                lineText+=ChatColor.RESET + format.substring(format.indexOf('""') + 1,format.lastIndexOf('""'));
              }
            }
          }
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
 else {
        if (text.get(line).length() > 1) {
          try {
            lineText=text.get(line).substring(text.get(line).indexOf('""') + 1,text.get(line).lastIndexOf('""'));
          }
 catch (          Exception e) {
            lineText=text.get(line);
          }
        }
 else {
          lineText=text.get(line);
        }
      }
    }
    signText.add(lineText);
  }
}","/** 
 * Sets this block's sign data
 * @param tileData
 */
public void setSign(Map<String,Tag> tileData){
  signText=new ArrayList<String>();
  List<String> text=new ArrayList<String>();
  for (int i=1; i < 5; i++) {
    String line=((StringTag)tileData.get(""String_Node_Str"" + String.valueOf(i))).getValue();
    if (line.equalsIgnoreCase(""String_Node_Str"")) {
      line=""String_Node_Str"";
    }
    text.add(line);
  }
  JSONParser parser=new JSONParser();
  ContainerFactory containerFactory=new ContainerFactory(){
    public List creatArrayContainer(){
      return new LinkedList();
    }
    public Map createObjectContainer(){
      return new LinkedHashMap();
    }
  }
;
  for (int line=0; line < 4; line++) {
    String lineText=""String_Node_Str"";
    if (!text.get(line).equals(""String_Node_Str"") && !text.get(line).isEmpty()) {
      if (text.get(line).startsWith(""String_Node_Str"")) {
        try {
          Map json=(Map)parser.parse(text.get(line),containerFactory);
          List list=(List)json.get(""String_Node_Str"");
          Iterator iter=list.iterator();
          while (iter.hasNext()) {
            Object next=iter.next();
            String format=JSONValue.toJSONString(next);
            if (format.startsWith(""String_Node_Str"")) {
              Map jsonFormat=(Map)parser.parse(format,containerFactory);
              Iterator formatIter=jsonFormat.entrySet().iterator();
              while (formatIter.hasNext()) {
                Map.Entry entry=(Map.Entry)formatIter.next();
                String key=entry.getKey().toString();
                String value=entry.getValue().toString();
                if (key.equalsIgnoreCase(""String_Node_Str"")) {
                  try {
                    lineText+=ChatColor.valueOf(value.toUpperCase());
                  }
 catch (                  Exception noColor) {
                    Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                  }
                }
 else                 if (key.equalsIgnoreCase(""String_Node_Str"")) {
                  lineText+=value;
                }
 else {
                  if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                    lineText+=ChatColor.MAGIC;
                  }
 else                   if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                    lineText+=ChatColor.UNDERLINE;
                  }
 else {
                    try {
                      lineText+=ChatColor.valueOf(key.toUpperCase());
                    }
 catch (                    Exception noFormat) {
                      Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else {
              if (format.length() > 1) {
                lineText+=ChatColor.RESET + format.substring(format.indexOf('""') + 1,format.lastIndexOf('""'));
              }
            }
          }
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
 else {
        if (text.get(line).length() > 1) {
          try {
            lineText=text.get(line).substring(text.get(line).indexOf('""') + 1,text.get(line).lastIndexOf('""'));
          }
 catch (          Exception e) {
            lineText=text.get(line);
          }
        }
 else {
          lineText=text.get(line);
        }
      }
    }
    signText.add(lineText);
  }
}"
34014,"/** 
 * Sets this block's sign data
 * @param tileData
 */
public void setSign(Map<String,Tag> tileData){
  signText=new ArrayList<String>();
  List<String> text=new ArrayList<String>();
  text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
  text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
  text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
  text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
  JSONParser parser=new JSONParser();
  ContainerFactory containerFactory=new ContainerFactory(){
    public List creatArrayContainer(){
      return new LinkedList();
    }
    public Map createObjectContainer(){
      return new LinkedHashMap();
    }
  }
;
  for (int line=0; line < 4; line++) {
    String lineText=""String_Node_Str"";
    if (!text.get(line).equals(""String_Node_Str"") && !text.get(line).isEmpty()) {
      if (text.get(line).startsWith(""String_Node_Str"")) {
        try {
          Map json=(Map)parser.parse(text.get(line),containerFactory);
          List list=(List)json.get(""String_Node_Str"");
          Iterator iter=list.iterator();
          while (iter.hasNext()) {
            Object next=iter.next();
            String format=JSONValue.toJSONString(next);
            if (format.startsWith(""String_Node_Str"")) {
              Map jsonFormat=(Map)parser.parse(format,containerFactory);
              Iterator formatIter=jsonFormat.entrySet().iterator();
              while (formatIter.hasNext()) {
                Map.Entry entry=(Map.Entry)formatIter.next();
                String key=entry.getKey().toString();
                String value=entry.getValue().toString();
                if (key.equalsIgnoreCase(""String_Node_Str"")) {
                  try {
                    lineText+=ChatColor.valueOf(value.toUpperCase());
                  }
 catch (                  Exception noColor) {
                    Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                  }
                }
 else                 if (key.equalsIgnoreCase(""String_Node_Str"")) {
                  lineText+=value;
                }
 else {
                  if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                    lineText+=ChatColor.MAGIC;
                  }
 else                   if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                    lineText+=ChatColor.UNDERLINE;
                  }
 else {
                    try {
                      lineText+=ChatColor.valueOf(key.toUpperCase());
                    }
 catch (                    Exception noFormat) {
                      Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else {
              if (format.length() > 1) {
                lineText+=ChatColor.RESET + format.substring(format.indexOf('""') + 1,format.lastIndexOf('""'));
              }
            }
          }
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
 else {
        if (text.get(line).length() > 1) {
          try {
            lineText=text.get(line).substring(text.get(line).indexOf('""') + 1,text.get(line).lastIndexOf('""'));
          }
 catch (          Exception e) {
            lineText=text.get(line);
          }
        }
 else {
          lineText=text.get(line);
        }
      }
    }
    signText.add(lineText);
  }
}","/** 
 * Sets this block's sign data
 * @param tileData
 */
public void setSign(Map<String,Tag> tileData){
  signText=new ArrayList<String>();
  List<String> text=new ArrayList<String>();
  for (int i=1; i < 5; i++) {
    String line=((StringTag)tileData.get(""String_Node_Str"" + String.valueOf(i))).getValue();
    if (line == null) {
      line=""String_Node_Str"";
    }
    text.add(line);
  }
  JSONParser parser=new JSONParser();
  ContainerFactory containerFactory=new ContainerFactory(){
    public List creatArrayContainer(){
      return new LinkedList();
    }
    public Map createObjectContainer(){
      return new LinkedHashMap();
    }
  }
;
  for (int line=0; line < 4; line++) {
    String lineText=""String_Node_Str"";
    if (!text.get(line).equals(""String_Node_Str"") && !text.get(line).isEmpty()) {
      if (text.get(line).startsWith(""String_Node_Str"")) {
        try {
          Map json=(Map)parser.parse(text.get(line),containerFactory);
          List list=(List)json.get(""String_Node_Str"");
          Iterator iter=list.iterator();
          while (iter.hasNext()) {
            Object next=iter.next();
            String format=JSONValue.toJSONString(next);
            if (format.startsWith(""String_Node_Str"")) {
              Map jsonFormat=(Map)parser.parse(format,containerFactory);
              Iterator formatIter=jsonFormat.entrySet().iterator();
              while (formatIter.hasNext()) {
                Map.Entry entry=(Map.Entry)formatIter.next();
                String key=entry.getKey().toString();
                String value=entry.getValue().toString();
                if (key.equalsIgnoreCase(""String_Node_Str"")) {
                  try {
                    lineText+=ChatColor.valueOf(value.toUpperCase());
                  }
 catch (                  Exception noColor) {
                    Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                  }
                }
 else                 if (key.equalsIgnoreCase(""String_Node_Str"")) {
                  lineText+=value;
                }
 else {
                  if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                    lineText+=ChatColor.MAGIC;
                  }
 else                   if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                    lineText+=ChatColor.UNDERLINE;
                  }
 else {
                    try {
                      lineText+=ChatColor.valueOf(key.toUpperCase());
                    }
 catch (                    Exception noFormat) {
                      Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else {
              if (format.length() > 1) {
                lineText+=ChatColor.RESET + format.substring(format.indexOf('""') + 1,format.lastIndexOf('""'));
              }
            }
          }
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
 else {
        if (text.get(line).length() > 1) {
          try {
            lineText=text.get(line).substring(text.get(line).indexOf('""') + 1,text.get(line).lastIndexOf('""'));
          }
 catch (          Exception e) {
            lineText=text.get(line);
          }
        }
 else {
          lineText=text.get(line);
        }
      }
    }
    signText.add(lineText);
  }
}"
34015,"/** 
 * Checks the highest level this player has achieved
 * @param player
 * @return level number
 */
private int getLevelDone(Player player){
  for (int result=1; result <= Settings.challengeLevels.size(); result++) {
    if (checkLevelCompletion(player,Settings.challengeLevels.get(result - 1)) > 0) {
      return result;
    }
  }
  return Settings.challengeLevels.size();
}","/** 
 * Checks the highest level this player has achieved
 * @param player
 * @return level number
 */
private int getLevelDone(Player player){
  for (int result=0; result < Settings.challengeLevels.size(); result++) {
    if (checkLevelCompletion(player,Settings.challengeLevels.get(result)) > 0) {
      return result;
    }
  }
  return (Settings.challengeLevels.size() - 1);
}"
34016,"/** 
 * If the player filled up the bucket themselves
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onBucketFill(PlayerBucketFillEvent e){
  if (e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (Settings.acidDamage > 0D) {
      ItemStack item=e.getItemStack();
      if (item.getType().equals(Material.WATER_BUCKET)) {
        ItemMeta meta=item.getItemMeta();
        meta.setDisplayName(plugin.myLocale(e.getPlayer().getUniqueId()).acidBucket);
        meta.setLore(lore);
        item.setItemMeta(meta);
      }
    }
  }
}","/** 
 * If the player filled up the bucket themselves
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onBucketFill(PlayerBucketFillEvent e){
  if (e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (Settings.acidDamage > 0D) {
      ItemStack item=e.getItemStack();
      if (item.getType().equals(Material.WATER_BUCKET) || item.getType().equals(Material.POTION)) {
        ItemMeta meta=item.getItemMeta();
        meta.setDisplayName(plugin.myLocale(e.getPlayer().getUniqueId()).acidBucket);
        lore=Arrays.asList(plugin.myLocale(e.getPlayer().getUniqueId()).acidLore.split(""String_Node_Str""));
        meta.setLore(lore);
        item.setItemMeta(meta);
      }
    }
  }
}"
34017,"/** 
 * This covers items in a chest, etc. inventory, then change the name then
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onInventoryOpen(InventoryOpenEvent e){
  if (e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    Inventory inventory=e.getInventory();
    if (Settings.acidDamage == 0D) {
      return;
    }
    if (inventory.getName() != null && inventory.getName().equalsIgnoreCase(plugin.myLocale(e.getPlayer().getUniqueId()).islandMiniShopTitle)) {
      return;
    }
    if (inventory.contains(Material.WATER_BUCKET)) {
      ItemStack[] inv=inventory.getContents();
      for (      ItemStack item : inv) {
        if (item != null) {
          if (item.getType() == Material.WATER_BUCKET) {
            ItemMeta meta=item.getItemMeta();
            meta.setDisplayName(plugin.myLocale(e.getPlayer().getUniqueId()).acidBucket);
            lore=Arrays.asList(plugin.myLocale(e.getPlayer().getUniqueId()).acidLore.split(""String_Node_Str""));
            meta.setLore(lore);
            item.setItemMeta(meta);
          }
        }
      }
    }
 else     if (inventory.contains(Material.POTION)) {
      ItemStack[] inv=inventory.getContents();
      for (      ItemStack item : inv) {
        if (item != null) {
          if (item.getType() == Material.POTION && item.getDurability() == 0) {
            ItemMeta meta=item.getItemMeta();
            meta.setDisplayName(plugin.myLocale(e.getPlayer().getUniqueId()).acidBottle);
            meta.setLore(lore);
            item.setItemMeta(meta);
          }
        }
      }
    }
  }
}","/** 
 * This covers items in a chest, etc. inventory, then change the name then
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onInventoryOpen(InventoryOpenEvent e){
  if (e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    Inventory inventory=e.getInventory();
    if (Settings.acidDamage == 0D) {
      return;
    }
    if (inventory.getName() != null && inventory.getName().equalsIgnoreCase(plugin.myLocale(e.getPlayer().getUniqueId()).islandMiniShopTitle)) {
      return;
    }
    if (inventory.contains(Material.WATER_BUCKET)) {
      ItemStack[] inv=inventory.getContents();
      for (      ItemStack item : inv) {
        if (item != null) {
          if (item.getType() == Material.WATER_BUCKET) {
            ItemMeta meta=item.getItemMeta();
            meta.setDisplayName(plugin.myLocale(e.getPlayer().getUniqueId()).acidBucket);
            lore=Arrays.asList(plugin.myLocale(e.getPlayer().getUniqueId()).acidLore.split(""String_Node_Str""));
            meta.setLore(lore);
            item.setItemMeta(meta);
          }
        }
      }
    }
 else     if (inventory.contains(Material.POTION)) {
      ItemStack[] inv=inventory.getContents();
      for (      ItemStack item : inv) {
        if (item != null) {
          if (item.getType() == Material.POTION && item.getDurability() == 0) {
            ItemMeta meta=item.getItemMeta();
            meta.setDisplayName(plugin.myLocale(e.getPlayer().getUniqueId()).acidBottle);
            lore=Arrays.asList(plugin.myLocale(e.getPlayer().getUniqueId()).acidLore.split(""String_Node_Str""));
            meta.setLore(lore);
            item.setItemMeta(meta);
          }
        }
      }
    }
  }
}"
34018,"@Override public void onEnable(){
  plugin=this;
  Class<?> clazz;
  try {
    clazz=Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    clazz=null;
  }
  if (clazz != null) {
    onePointEight=true;
  }
  saveDefaultConfig();
  if (getConfig().getInt(""String_Node_Str"",-1) < 1) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
    return;
  }
  if (!loadPluginConfig()) {
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
    return;
  }
  if (Settings.useEconomy && !VaultHelper.setupEconomy()) {
    getLogger().warning(""String_Node_Str"");
    Settings.useEconomy=false;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  challenges=new Challenges(this);
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  players=new PlayerCache(this);
  islandCmd=new IslandCmd(this);
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
 else {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
  messages=new Messages(this);
  messages.loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      getWarpSignsListener().loadWarpList();
      if (Settings.useWarpPanel) {
        warpPanel=new WarpPanel(plugin);
        getServer().getPluginManager().registerEvents(warpPanel,plugin);
      }
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      settingsPanel=new SettingsPanel(plugin);
      getServer().getPluginManager().registerEvents(settingsPanel,plugin);
      biomes=new BiomesPanel(plugin);
      getServer().getPluginManager().registerEvents(biomes,plugin);
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getServer().getPluginManager().registerEvents(new HeroChatListener(plugin),plugin);
      }
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + plugin.getName());
        if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
 else {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
        return;
      }
      getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          if (grid == null) {
            grid=new GridManager(plugin);
          }
          TopTen.topTenLoad();
          if (tinyDB == null) {
            tinyDB=new TinyDB(plugin);
          }
          for (          Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            tinyDB.savePlayerName(onlinePlayer.getName(),onlinePlayer.getUniqueId());
          }
          getServer().getScheduler().runTaskTimer(plugin,new Runnable(){
            @Override public void run(){
              getGrid().saveGrid();
            }
          }
,Settings.backupDuration,Settings.backupDuration);
          getLogger().info(""String_Node_Str"");
        }
      }
);
      if (Settings.updateCheck) {
        checkUpdates();
        new BukkitRunnable(){
          int count=0;
          @Override public void run(){
            if (count++ > 10) {
              plugin.getLogger().info(""String_Node_Str"");
              this.cancel();
            }
 else {
              if (updateCheck != null) {
                if (updateCheck.isSuccess()) {
                  checkUpdatesNotify(null);
                }
 else {
                  plugin.getLogger().info(""String_Node_Str"");
                }
                this.cancel();
              }
            }
          }
        }
.runTaskTimer(plugin,0L,20L);
      }
      if (Settings.mobAcidDamage > 0D || Settings.animalAcidDamage > 0D) {
        getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new Runnable(){
          @Override public void run(){
            List<Entity> entList=islandWorld.getEntities();
            for (            Entity current : entList) {
              if (plugin.isOnePointEight() && current instanceof Guardian) {
                continue;
              }
              if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  ((Monster)current).damage(Settings.mobAcidDamage);
                }
              }
 else               if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  if (!current.getType().equals(EntityType.CHICKEN)) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
 else                   if (Settings.damageChickens) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
                }
              }
            }
          }
        }
,0L,20L);
      }
    }
  }
);
}","@Override public void onEnable(){
  plugin=this;
  Class<?> clazz;
  try {
    clazz=Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    clazz=null;
  }
  if (clazz != null) {
    onePointEight=true;
  }
  saveDefaultConfig();
  if (getConfig().getInt(""String_Node_Str"",-1) < 1) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
    return;
  }
  if (!loadPluginConfig()) {
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
    return;
  }
  if (Settings.useEconomy && !VaultHelper.setupEconomy()) {
    getLogger().warning(""String_Node_Str"");
    Settings.useEconomy=false;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  challenges=new Challenges(this);
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  players=new PlayerCache(this);
  islandCmd=new IslandCmd(this);
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
 else {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
  messages=new Messages(this);
  messages.loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getServer().getPluginManager().registerEvents(new HeroChatListener(plugin),plugin);
      }
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + plugin.getName());
        if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
 else {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
        return;
      }
      getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          if (grid == null) {
            grid=new GridManager(plugin);
          }
          getWarpSignsListener().loadWarpList();
          if (Settings.useWarpPanel) {
            warpPanel=new WarpPanel(plugin);
            getServer().getPluginManager().registerEvents(warpPanel,plugin);
          }
          getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
          settingsPanel=new SettingsPanel(plugin);
          getServer().getPluginManager().registerEvents(settingsPanel,plugin);
          biomes=new BiomesPanel(plugin);
          getServer().getPluginManager().registerEvents(biomes,plugin);
          TopTen.topTenLoad();
          if (tinyDB == null) {
            tinyDB=new TinyDB(plugin);
          }
          for (          Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            tinyDB.savePlayerName(onlinePlayer.getName(),onlinePlayer.getUniqueId());
          }
          getServer().getScheduler().runTaskTimer(plugin,new Runnable(){
            @Override public void run(){
              getGrid().saveGrid();
            }
          }
,Settings.backupDuration,Settings.backupDuration);
          getLogger().info(""String_Node_Str"");
        }
      }
);
      if (Settings.updateCheck) {
        checkUpdates();
        new BukkitRunnable(){
          int count=0;
          @Override public void run(){
            if (count++ > 10) {
              plugin.getLogger().info(""String_Node_Str"");
              this.cancel();
            }
 else {
              if (updateCheck != null) {
                if (updateCheck.isSuccess()) {
                  checkUpdatesNotify(null);
                }
 else {
                  plugin.getLogger().info(""String_Node_Str"");
                }
                this.cancel();
              }
            }
          }
        }
.runTaskTimer(plugin,0L,20L);
      }
      if (Settings.mobAcidDamage > 0D || Settings.animalAcidDamage > 0D) {
        getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new Runnable(){
          @Override public void run(){
            List<Entity> entList=islandWorld.getEntities();
            for (            Entity current : entList) {
              if (plugin.isOnePointEight() && current instanceof Guardian) {
                continue;
              }
              if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  ((Monster)current).damage(Settings.mobAcidDamage);
                }
              }
 else               if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  if (!current.getType().equals(EntityType.CHICKEN)) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
 else                   if (Settings.damageChickens) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
                }
              }
            }
          }
        }
,0L,20L);
      }
    }
  }
);
}"
34019,"/** 
 * Checks if a location is within the home boundaries of a player. If coop is true, this check includes coop players.
 * @param player
 * @param coop
 * @param loc
 * @return true if the location is within home boundaries
 */
public boolean locationIsAtHome(final Player player,boolean coop,Location loc){
  Set<Location> islandTestLocations=new HashSet<Location>();
  if (plugin.getPlayers().hasIsland(player.getUniqueId())) {
    islandTestLocations.add(plugin.getPlayers().getIslandLocation(player.getUniqueId()));
    if (Settings.createNether && Settings.newNether) {
      islandTestLocations.add(netherIsland(plugin.getPlayers().getIslandLocation(player.getUniqueId())));
    }
  }
 else   if (plugin.getPlayers().inTeam(player.getUniqueId())) {
    islandTestLocations.add(plugin.getPlayers().getTeamIslandLocation(player.getUniqueId()));
    if (Settings.createNether && Settings.newNether) {
      islandTestLocations.add(netherIsland(plugin.getPlayers().getTeamIslandLocation(player.getUniqueId())));
    }
  }
  if (coop) {
    islandTestLocations.addAll(CoopPlay.getInstance().getCoopIslands(player));
  }
  if (islandTestLocations.isEmpty()) {
    return false;
  }
  for (  Location islandTestLocation : islandTestLocations) {
    if (islandTestLocation != null && islandTestLocation.getWorld() != null && islandTestLocation.getWorld().equals(loc.getWorld())) {
      int protectionRange=Settings.island_protectionRange;
      if (getIslandAt(islandTestLocation) != null) {
        Island island=getProtectedIslandAt(islandTestLocation);
        if (island != null) {
          protectionRange=island.getProtectionSize();
        }
      }
      if (loc.getX() > islandTestLocation.getX() - protectionRange / 2 && loc.getX() < islandTestLocation.getX() + protectionRange / 2 && loc.getZ() > islandTestLocation.getZ() - protectionRange / 2 && loc.getZ() < islandTestLocation.getZ() + protectionRange / 2) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Checks if a location is within the home boundaries of a player. If coop is true, this check includes coop players.
 * @param player
 * @param coop
 * @param loc
 * @return true if the location is within home boundaries
 */
public boolean locationIsAtHome(final Player player,boolean coop,Location loc){
  Set<Location> islandTestLocations=new HashSet<Location>();
  if (plugin.getPlayers().hasIsland(player.getUniqueId())) {
    islandTestLocations.add(plugin.getPlayers().getIslandLocation(player.getUniqueId()));
    if (Settings.createNether && Settings.newNether && ASkyBlock.getNetherWorld() != null) {
      islandTestLocations.add(netherIsland(plugin.getPlayers().getIslandLocation(player.getUniqueId())));
    }
  }
 else   if (plugin.getPlayers().inTeam(player.getUniqueId())) {
    islandTestLocations.add(plugin.getPlayers().getTeamIslandLocation(player.getUniqueId()));
    if (Settings.createNether && Settings.newNether && ASkyBlock.getNetherWorld() != null) {
      islandTestLocations.add(netherIsland(plugin.getPlayers().getTeamIslandLocation(player.getUniqueId())));
    }
  }
  if (coop) {
    islandTestLocations.addAll(CoopPlay.getInstance().getCoopIslands(player));
  }
  if (islandTestLocations.isEmpty()) {
    return false;
  }
  for (  Location islandTestLocation : islandTestLocations) {
    if (islandTestLocation != null && islandTestLocation.getWorld() != null && islandTestLocation.getWorld().equals(loc.getWorld())) {
      int protectionRange=Settings.island_protectionRange;
      if (getIslandAt(islandTestLocation) != null) {
        Island island=getProtectedIslandAt(islandTestLocation);
        if (island != null) {
          protectionRange=island.getProtectionSize();
        }
      }
      if (loc.getX() > islandTestLocation.getX() - protectionRange / 2 && loc.getX() < islandTestLocation.getX() + protectionRange / 2 && loc.getZ() > islandTestLocation.getZ() - protectionRange / 2 && loc.getZ() < islandTestLocation.getZ() + protectionRange / 2) {
        return true;
      }
    }
  }
  return false;
}"
34020,"/** 
 * Enables changing of obsidian back into lava
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteract(final PlayerInteractEvent e){
  if (plugin.getGrid().playerIsOnIsland(e.getPlayer())) {
    boolean otherOb=false;
    ItemStack inHand=e.getPlayer().getItemInHand();
    if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK) && inHand.getType().equals(Material.BUCKET) && e.getClickedBlock().getType().equals(Material.OBSIDIAN)) {
      Block b=e.getClickedBlock();
      for (int x=-2; x <= 2; x++) {
        for (int y=-2; y <= 2; y++) {
          for (int z=-2; z <= 2; z++) {
            final Block testBlock=b.getWorld().getBlockAt(b.getX() + x,b.getY() + y,b.getZ() + z);
            if ((x != 0 || y != 0 || z != 0) && testBlock.getType().equals(Material.OBSIDIAN)) {
              otherOb=true;
            }
          }
        }
      }
      if (!otherOb) {
        e.getPlayer().sendMessage(ChatColor.YELLOW + plugin.myLocale(e.getPlayer().getUniqueId()).changingObsidiantoLava);
        e.getPlayer().getInventory().setItemInHand(null);
        e.getPlayer().getInventory().addItem(new ItemStack(Material.LAVA_BUCKET,1));
        if (inHand.getAmount() > 1) {
          e.getPlayer().getInventory().addItem(new ItemStack(Material.BUCKET,inHand.getAmount() - 1));
        }
        e.getPlayer().updateInventory();
        e.getClickedBlock().setType(Material.AIR);
        e.setCancelled(true);
      }
    }
  }
}","/** 
 * Enables changing of obsidian back into lava
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteract(final PlayerInteractEvent e){
  if (!e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (plugin.getGrid().playerIsOnIsland(e.getPlayer())) {
    boolean otherOb=false;
    ItemStack inHand=e.getPlayer().getItemInHand();
    if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK) && inHand.getType().equals(Material.BUCKET) && e.getClickedBlock().getType().equals(Material.OBSIDIAN)) {
      Block b=e.getClickedBlock();
      for (int x=-2; x <= 2; x++) {
        for (int y=-2; y <= 2; y++) {
          for (int z=-2; z <= 2; z++) {
            final Block testBlock=b.getWorld().getBlockAt(b.getX() + x,b.getY() + y,b.getZ() + z);
            if ((x != 0 || y != 0 || z != 0) && testBlock.getType().equals(Material.OBSIDIAN)) {
              otherOb=true;
            }
          }
        }
      }
      if (!otherOb) {
        e.getPlayer().sendMessage(ChatColor.YELLOW + plugin.myLocale(e.getPlayer().getUniqueId()).changingObsidiantoLava);
        e.getPlayer().getInventory().setItemInHand(null);
        e.getPlayer().getInventory().addItem(new ItemStack(Material.LAVA_BUCKET,1));
        if (inHand.getAmount() > 1) {
          e.getPlayer().getInventory().addItem(new ItemStack(Material.BUCKET,inHand.getAmount() - 1));
        }
        e.getPlayer().updateInventory();
        e.getClickedBlock().setType(Material.AIR);
        e.setCancelled(true);
      }
    }
  }
}"
34021,"/** 
 * @return the grid
 */
public GridManager getGrid(){
  if (grid == null) {
    grid=new GridManager(this);
  }
  return grid;
}","/** 
 * @return the grid
 */
public GridManager getGrid(){
  return grid;
}"
34022,"@Override public void onEnable(){
  plugin=this;
  Class<?> clazz;
  try {
    clazz=Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    clazz=null;
  }
  if (clazz != null) {
    onePointEight=true;
  }
  saveDefaultConfig();
  if (getConfig().getInt(""String_Node_Str"",-1) < 1) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
    return;
  }
  if (!loadPluginConfig()) {
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
    return;
  }
  if (Settings.useEconomy && !VaultHelper.setupEconomy()) {
    getLogger().warning(""String_Node_Str"");
    Settings.useEconomy=false;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  islandCmd=new IslandCmd(this);
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
 else {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
  messages=new Messages(this);
  messages.loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      getWarpSignsListener().loadWarpList();
      if (Settings.useWarpPanel) {
        warpPanel=new WarpPanel(plugin);
        getServer().getPluginManager().registerEvents(warpPanel,plugin);
      }
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      settingsPanel=new SettingsPanel(plugin);
      getServer().getPluginManager().registerEvents(settingsPanel,plugin);
      biomes=new BiomesPanel(plugin);
      getServer().getPluginManager().registerEvents(biomes,plugin);
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getServer().getPluginManager().registerEvents(new HeroChatListener(plugin),plugin);
      }
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + plugin.getName());
        if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
 else {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
        return;
      }
      getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          if (grid == null) {
            grid=new GridManager(plugin);
          }
          TopTen.topTenLoad();
          if (tinyDB == null) {
            tinyDB=new TinyDB(plugin);
          }
          for (          Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            tinyDB.savePlayerName(onlinePlayer.getName(),onlinePlayer.getUniqueId());
          }
          getServer().getScheduler().runTaskTimer(plugin,new Runnable(){
            @Override public void run(){
              getGrid().saveGrid();
            }
          }
,Settings.backupDuration,Settings.backupDuration);
          getLogger().info(""String_Node_Str"");
        }
      }
);
      if (Settings.updateCheck) {
        checkUpdates();
        new BukkitRunnable(){
          int count=0;
          @Override public void run(){
            if (count++ > 10) {
              plugin.getLogger().info(""String_Node_Str"");
              this.cancel();
            }
 else {
              if (updateCheck != null) {
                if (updateCheck.isSuccess()) {
                  checkUpdatesNotify(null);
                }
 else {
                  plugin.getLogger().info(""String_Node_Str"");
                }
                this.cancel();
              }
            }
          }
        }
.runTaskTimer(plugin,0L,20L);
      }
      if (Settings.mobAcidDamage > 0D || Settings.animalAcidDamage > 0D) {
        getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new Runnable(){
          @Override public void run(){
            List<Entity> entList=islandWorld.getEntities();
            for (            Entity current : entList) {
              if (plugin.isOnePointEight() && current instanceof Guardian) {
                continue;
              }
              if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  ((Monster)current).damage(Settings.mobAcidDamage);
                }
              }
 else               if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  if (!current.getType().equals(EntityType.CHICKEN)) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
 else                   if (Settings.damageChickens) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
                }
              }
            }
          }
        }
,0L,20L);
      }
    }
  }
);
}","@Override public void onEnable(){
  plugin=this;
  Class<?> clazz;
  try {
    clazz=Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    clazz=null;
  }
  if (clazz != null) {
    onePointEight=true;
  }
  saveDefaultConfig();
  if (getConfig().getInt(""String_Node_Str"",-1) < 1) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
    return;
  }
  if (!loadPluginConfig()) {
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
    return;
  }
  if (Settings.useEconomy && !VaultHelper.setupEconomy()) {
    getLogger().warning(""String_Node_Str"");
    Settings.useEconomy=false;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  players=new PlayerCache(this);
  challenges=new Challenges(this);
  islandCmd=new IslandCmd(this);
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
 else {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
  messages=new Messages(this);
  messages.loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      getWarpSignsListener().loadWarpList();
      if (Settings.useWarpPanel) {
        warpPanel=new WarpPanel(plugin);
        getServer().getPluginManager().registerEvents(warpPanel,plugin);
      }
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      settingsPanel=new SettingsPanel(plugin);
      getServer().getPluginManager().registerEvents(settingsPanel,plugin);
      biomes=new BiomesPanel(plugin);
      getServer().getPluginManager().registerEvents(biomes,plugin);
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getServer().getPluginManager().registerEvents(new HeroChatListener(plugin),plugin);
      }
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + plugin.getName());
        if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
 else {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
        return;
      }
      getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          if (grid == null) {
            grid=new GridManager(plugin);
          }
          TopTen.topTenLoad();
          if (tinyDB == null) {
            tinyDB=new TinyDB(plugin);
          }
          for (          Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            tinyDB.savePlayerName(onlinePlayer.getName(),onlinePlayer.getUniqueId());
          }
          getServer().getScheduler().runTaskTimer(plugin,new Runnable(){
            @Override public void run(){
              getGrid().saveGrid();
            }
          }
,Settings.backupDuration,Settings.backupDuration);
          getLogger().info(""String_Node_Str"");
        }
      }
);
      if (Settings.updateCheck) {
        checkUpdates();
        new BukkitRunnable(){
          int count=0;
          @Override public void run(){
            if (count++ > 10) {
              plugin.getLogger().info(""String_Node_Str"");
              this.cancel();
            }
 else {
              if (updateCheck != null) {
                if (updateCheck.isSuccess()) {
                  checkUpdatesNotify(null);
                }
 else {
                  plugin.getLogger().info(""String_Node_Str"");
                }
                this.cancel();
              }
            }
          }
        }
.runTaskTimer(plugin,0L,20L);
      }
      if (Settings.mobAcidDamage > 0D || Settings.animalAcidDamage > 0D) {
        getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new Runnable(){
          @Override public void run(){
            List<Entity> entList=islandWorld.getEntities();
            for (            Entity current : entList) {
              if (plugin.isOnePointEight() && current instanceof Guardian) {
                continue;
              }
              if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  ((Monster)current).damage(Settings.mobAcidDamage);
                }
              }
 else               if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  if (!current.getType().equals(EntityType.CHICKEN)) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
 else                   if (Settings.damageChickens) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
                }
              }
            }
          }
        }
,0L,20L);
      }
    }
  }
);
}"
34023,"/** 
 * @return the challenges
 */
public Challenges getChallenges(){
  if (challenges == null) {
    challenges=new Challenges(this);
  }
  return challenges;
}","/** 
 * @return the challenges
 */
public Challenges getChallenges(){
  return challenges;
}"
34024,"/** 
 * @return the players
 */
public PlayerCache getPlayers(){
  if (players == null) {
    players=new PlayerCache(this);
  }
  return players;
}","/** 
 * @return the players
 */
public PlayerCache getPlayers(){
  return players;
}"
34025,"/** 
 * Ensures that any block when loaded will match the biome of the center column of the island if it exists. Does not apply to spawn.
 * @param e
 */
@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=false) public void onChunkLoad(ChunkLoadEvent e){
  if (e.getWorld() != ASkyBlock.getIslandWorld()) {
    return;
  }
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      Island island=plugin.getGrid().getIslandAt(e.getChunk().getX() * 16 + x,e.getChunk().getZ() * 16 + z);
      if (island != null && !island.isSpawn()) {
        Biome biome=island.getBiome();
        Biome blockBiome=e.getChunk().getBlock(x,0,z).getBiome();
        if (!biome.equals(blockBiome)) {
          e.getChunk().getBlock(x,0,z).setBiome(biome);
switch (biome) {
case MESA:
case MESA_BRYCE:
case DESERT:
case JUNGLE:
case SAVANNA:
case SAVANNA_MOUNTAINS:
case SAVANNA_PLATEAU:
case SAVANNA_PLATEAU_MOUNTAINS:
case SWAMPLAND:
            boolean topBlockFound=false;
          for (int y=e.getWorld().getMaxHeight(); y >= Settings.sea_level; y--) {
            Block b=e.getChunk().getBlock(x,y,z);
            if (!b.getType().equals(Material.AIR)) {
              topBlockFound=true;
            }
            if (topBlockFound) {
              if (b.getType() == Material.ICE || b.getType() == Material.SNOW || b.getType() == Material.SNOW_BLOCK) {
                b.setType(Material.AIR);
              }
 else {
                break;
              }
            }
          }
        break;
case HELL:
      topBlockFound=false;
    for (int y=e.getWorld().getMaxHeight(); y >= Settings.sea_level; y--) {
      Block b=e.getChunk().getBlock(x,y,z);
      if (!b.getType().equals(Material.AIR)) {
        topBlockFound=true;
      }
      if (topBlockFound) {
        if (b.getType() == Material.ICE || b.getType() == Material.SNOW || b.getType() == Material.SNOW_BLOCK || b.getType() == Material.WATER || b.getType() == Material.STATIONARY_WATER) {
          b.setType(Material.AIR);
        }
 else {
          break;
        }
      }
    }
  break;
default :
}
}
}
}
}
}","/** 
 * Ensures that any block when loaded will match the biome of the center column of the island if it exists. Does not apply to spawn.
 * @param e
 */
@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=false) public void onChunkLoad(ChunkLoadEvent e){
  if (plugin.getGrid() == null) {
    return;
  }
  if (e.getWorld() != ASkyBlock.getIslandWorld()) {
    return;
  }
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      Island island=plugin.getGrid().getIslandAt(e.getChunk().getX() * 16 + x,e.getChunk().getZ() * 16 + z);
      if (island != null && !island.isSpawn()) {
        Biome biome=island.getBiome();
        Biome blockBiome=e.getChunk().getBlock(x,0,z).getBiome();
        if (!biome.equals(blockBiome)) {
          e.getChunk().getBlock(x,0,z).setBiome(biome);
switch (biome) {
case MESA:
case MESA_BRYCE:
case DESERT:
case JUNGLE:
case SAVANNA:
case SAVANNA_MOUNTAINS:
case SAVANNA_PLATEAU:
case SAVANNA_PLATEAU_MOUNTAINS:
case SWAMPLAND:
            boolean topBlockFound=false;
          for (int y=e.getWorld().getMaxHeight(); y >= Settings.sea_level; y--) {
            Block b=e.getChunk().getBlock(x,y,z);
            if (!b.getType().equals(Material.AIR)) {
              topBlockFound=true;
            }
            if (topBlockFound) {
              if (b.getType() == Material.ICE || b.getType() == Material.SNOW || b.getType() == Material.SNOW_BLOCK) {
                b.setType(Material.AIR);
              }
 else {
                break;
              }
            }
          }
        break;
case HELL:
      topBlockFound=false;
    for (int y=e.getWorld().getMaxHeight(); y >= Settings.sea_level; y--) {
      Block b=e.getChunk().getBlock(x,y,z);
      if (!b.getType().equals(Material.AIR)) {
        topBlockFound=true;
      }
      if (topBlockFound) {
        if (b.getType() == Material.ICE || b.getType() == Material.SNOW || b.getType() == Material.SNOW_BLOCK || b.getType() == Material.WATER || b.getType() == Material.STATIONARY_WATER) {
          b.setType(Material.AIR);
        }
 else {
          break;
        }
      }
    }
  break;
default :
}
}
}
}
}
}"
34026,"@Override public void onEnable(){
  plugin=this;
  Class<?> clazz;
  try {
    clazz=Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    clazz=null;
  }
  if (clazz != null) {
    onePointEight=true;
  }
  saveDefaultConfig();
  if (getConfig().getInt(""String_Node_Str"",-1) < 1) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
    return;
  }
  if (!loadPluginConfig()) {
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
    return;
  }
  if (Settings.useEconomy && !VaultHelper.setupEconomy()) {
    getLogger().warning(""String_Node_Str"");
    Settings.useEconomy=false;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  challenges=new Challenges(this);
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  players=new PlayerCache(this);
  islandCmd=new IslandCmd(this);
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
 else {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
  messages=new Messages(this);
  messages.loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getServer().getPluginManager().registerEvents(new HeroChatListener(plugin),plugin);
      }
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + plugin.getName());
        if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
 else {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
        return;
      }
      getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          if (grid == null) {
            grid=new GridManager(plugin);
          }
          getWarpSignsListener().loadWarpList();
          if (Settings.useWarpPanel) {
            warpPanel=new WarpPanel(plugin);
            getServer().getPluginManager().registerEvents(warpPanel,plugin);
          }
          getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
          settingsPanel=new SettingsPanel(plugin);
          getServer().getPluginManager().registerEvents(settingsPanel,plugin);
          biomes=new BiomesPanel(plugin);
          getServer().getPluginManager().registerEvents(biomes,plugin);
          TopTen.topTenLoad();
          if (tinyDB == null) {
            tinyDB=new TinyDB(plugin);
          }
          for (          Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            tinyDB.savePlayerName(onlinePlayer.getName(),onlinePlayer.getUniqueId());
          }
          getServer().getScheduler().runTaskTimer(plugin,new Runnable(){
            @Override public void run(){
              getGrid().saveGrid();
            }
          }
,Settings.backupDuration,Settings.backupDuration);
          getLogger().info(""String_Node_Str"");
        }
      }
);
      if (Settings.updateCheck) {
        checkUpdates();
        new BukkitRunnable(){
          int count=0;
          @Override public void run(){
            if (count++ > 10) {
              plugin.getLogger().info(""String_Node_Str"");
              this.cancel();
            }
 else {
              if (updateCheck != null) {
                if (updateCheck.isSuccess()) {
                  checkUpdatesNotify(null);
                }
 else {
                  plugin.getLogger().info(""String_Node_Str"");
                }
                this.cancel();
              }
            }
          }
        }
.runTaskTimer(plugin,0L,20L);
      }
      if (Settings.mobAcidDamage > 0D || Settings.animalAcidDamage > 0D) {
        getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new Runnable(){
          @Override public void run(){
            List<Entity> entList=islandWorld.getEntities();
            for (            Entity current : entList) {
              if (plugin.isOnePointEight() && current instanceof Guardian) {
                continue;
              }
              if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  ((Monster)current).damage(Settings.mobAcidDamage);
                }
              }
 else               if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  if (!current.getType().equals(EntityType.CHICKEN)) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
 else                   if (Settings.damageChickens) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
                }
              }
            }
          }
        }
,0L,20L);
      }
    }
  }
);
}","@Override public void onEnable(){
  plugin=this;
  Class<?> clazz;
  try {
    clazz=Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    clazz=null;
  }
  if (clazz != null) {
    onePointEight=true;
  }
  saveDefaultConfig();
  if (getConfig().getInt(""String_Node_Str"",-1) < 1) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
    return;
  }
  if (!loadPluginConfig()) {
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.WORLD_NAME));
    }
    return;
  }
  if (Settings.useEconomy && !VaultHelper.setupEconomy()) {
    getLogger().warning(""String_Node_Str"");
    Settings.useEconomy=false;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  challenges=new Challenges(this);
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  players=new PlayerCache(this);
  islandCmd=new IslandCmd(this);
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
 else {
    AdminCmd adminCmd=new AdminCmd(this);
    getCommand(""String_Node_Str"").setExecutor(islandCmd);
    getCommand(""String_Node_Str"").setTabCompleter(islandCmd);
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setTabCompleter(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(adminCmd);
    getCommand(""String_Node_Str"").setTabCompleter(adminCmd);
  }
  messages=new Messages(this);
  messages.loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + plugin.getName());
        if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
 else {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
        HandlerList.unregisterAll(plugin);
        return;
      }
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getServer().getPluginManager().registerEvents(new HeroChatListener(plugin),plugin);
      }
      getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          if (grid == null) {
            grid=new GridManager(plugin);
          }
          getWarpSignsListener().loadWarpList();
          if (Settings.useWarpPanel) {
            warpPanel=new WarpPanel(plugin);
            getServer().getPluginManager().registerEvents(warpPanel,plugin);
          }
          getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
          settingsPanel=new SettingsPanel(plugin);
          getServer().getPluginManager().registerEvents(settingsPanel,plugin);
          biomes=new BiomesPanel(plugin);
          getServer().getPluginManager().registerEvents(biomes,plugin);
          TopTen.topTenLoad();
          if (tinyDB == null) {
            tinyDB=new TinyDB(plugin);
          }
          for (          Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            tinyDB.savePlayerName(onlinePlayer.getName(),onlinePlayer.getUniqueId());
          }
          getServer().getScheduler().runTaskTimer(plugin,new Runnable(){
            @Override public void run(){
              getGrid().saveGrid();
            }
          }
,Settings.backupDuration,Settings.backupDuration);
          getLogger().info(""String_Node_Str"");
        }
      }
);
      if (Settings.updateCheck) {
        checkUpdates();
        new BukkitRunnable(){
          int count=0;
          @Override public void run(){
            if (count++ > 10) {
              plugin.getLogger().info(""String_Node_Str"");
              this.cancel();
            }
 else {
              if (updateCheck != null) {
                if (updateCheck.isSuccess()) {
                  checkUpdatesNotify(null);
                }
 else {
                  plugin.getLogger().info(""String_Node_Str"");
                }
                this.cancel();
              }
            }
          }
        }
.runTaskTimer(plugin,0L,20L);
      }
      if (Settings.mobAcidDamage > 0D || Settings.animalAcidDamage > 0D) {
        getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new Runnable(){
          @Override public void run(){
            List<Entity> entList=islandWorld.getEntities();
            for (            Entity current : entList) {
              if (plugin.isOnePointEight() && current instanceof Guardian) {
                continue;
              }
              if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  ((Monster)current).damage(Settings.mobAcidDamage);
                }
              }
 else               if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  if (!current.getType().equals(EntityType.CHICKEN)) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
 else                   if (Settings.damageChickens) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
                }
              }
            }
          }
        }
,0L,20L);
      }
    }
  }
);
}"
34027,"private void addToGrids(Island newIsland){
  if (newIsland.getOwner() != null) {
    ownershipMap.put(newIsland.getOwner(),newIsland);
  }
  if (islandGrid.containsKey(newIsland.getMinX())) {
    TreeMap<Integer,Island> zEntry=islandGrid.get(newIsland.getMinX());
    if (zEntry.containsKey(newIsland.getMinZ())) {
      Island conflict=islandGrid.get(newIsland.getMinX()).get(newIsland.getMinZ());
      plugin.getLogger().warning(""String_Node_Str"");
      plugin.getLogger().warning(""String_Node_Str"" + newIsland.getCenter().getBlockX() + ""String_Node_Str""+ newIsland.getCenter().getBlockZ()+ ""String_Node_Str""+ conflict.getCenter().getBlockX()+ ""String_Node_Str""+ conflict.getCenter().getBlockZ()+ ""String_Node_Str"");
      if (conflict.getOwner() != null) {
        plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(conflict.getOwner()));
        plugin.getLogger().warning(conflict.getOwner().toString() + ""String_Node_Str"");
      }
 else {
        plugin.getLogger().warning(""String_Node_Str"");
      }
      if (newIsland.getOwner() != null) {
        plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(newIsland.getOwner()));
        plugin.getLogger().warning(newIsland.getOwner().toString() + ""String_Node_Str"");
      }
 else {
        plugin.getLogger().warning(""String_Node_Str"");
      }
      plugin.getLogger().warning(""String_Node_Str"");
      return;
    }
 else {
      zEntry.put(newIsland.getMinZ(),newIsland);
      islandGrid.put(newIsland.getMinX(),zEntry);
    }
  }
 else {
    TreeMap<Integer,Island> zEntry=new TreeMap<Integer,Island>();
    zEntry.put(newIsland.getMinZ(),newIsland);
    islandGrid.put(newIsland.getMinX(),zEntry);
  }
}","/** 
 * Adds an island to the grid register
 * @param newIsland
 */
private void addToGrids(Island newIsland){
  if (newIsland.getOwner() != null) {
    ownershipMap.put(newIsland.getOwner(),newIsland);
  }
  if (islandGrid.containsKey(newIsland.getMinX())) {
    TreeMap<Integer,Island> zEntry=islandGrid.get(newIsland.getMinX());
    if (zEntry.containsKey(newIsland.getMinZ())) {
      Island conflict=islandGrid.get(newIsland.getMinX()).get(newIsland.getMinZ());
      plugin.getLogger().warning(""String_Node_Str"");
      plugin.getLogger().warning(""String_Node_Str"" + newIsland.getCenter().getBlockX() + ""String_Node_Str""+ newIsland.getCenter().getBlockZ()+ ""String_Node_Str""+ conflict.getCenter().getBlockX()+ ""String_Node_Str""+ conflict.getCenter().getBlockZ()+ ""String_Node_Str"");
      if (conflict.getOwner() != null) {
        plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(conflict.getOwner()));
        plugin.getLogger().warning(conflict.getOwner().toString() + ""String_Node_Str"");
      }
 else {
        plugin.getLogger().warning(""String_Node_Str"");
      }
      if (newIsland.getOwner() != null) {
        plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(newIsland.getOwner()));
        plugin.getLogger().warning(newIsland.getOwner().toString() + ""String_Node_Str"");
      }
 else {
        plugin.getLogger().warning(""String_Node_Str"");
      }
      plugin.getLogger().warning(""String_Node_Str"");
      return;
    }
 else {
      zEntry.put(newIsland.getMinZ(),newIsland);
      islandGrid.put(newIsland.getMinX(),zEntry);
    }
  }
 else {
    TreeMap<Integer,Island> zEntry=new TreeMap<Integer,Island>();
    zEntry.put(newIsland.getMinZ(),newIsland);
    islandGrid.put(newIsland.getMinX(),zEntry);
  }
}"
34028,"/** 
 * @param event
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerJoin(final PlayerJoinEvent event){
  final Player player=event.getPlayer();
  final UUID playerUUID=player.getUniqueId();
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    String language=getLanguage(player);
    if (plugin.getResource(""String_Node_Str"" + language + ""String_Node_Str"") != null) {
      if (plugin.getPlayers().getLocale(playerUUID).isEmpty()) {
        plugin.getPlayers().setLocale(playerUUID,language);
      }
    }
  }
 else {
    plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
  }
  if (player.isOp() && plugin.getUpdateCheck() != null) {
    plugin.checkUpdatesNotify(player);
  }
  if (players == null) {
    plugin.getLogger().severe(""String_Node_Str"");
  }
  final List<String> messages=plugin.getMessages().getMessages(playerUUID);
  if (messages != null) {
    plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
      @Override public void run(){
        player.sendMessage(ChatColor.AQUA + plugin.myLocale(playerUUID).newsHeadline);
        int i=1;
        for (        String message : messages) {
          player.sendMessage(i++ + ""String_Node_Str"" + message);
        }
        plugin.getMessages().clearMessages(playerUUID);
      }
    }
,40L);
  }
  if (!players.hasIsland(playerUUID) && !players.inTeam(playerUUID)) {
    return;
  }
  UUID leader=null;
  Location loc=null;
  if (players.inTeam(playerUUID) && players.getTeamIslandLocation(playerUUID) == null) {
    leader=players.getTeamLeader(playerUUID);
    players.setTeamIslandLocation(playerUUID,players.getIslandLocation(leader));
  }
  if (players.hasIsland(playerUUID)) {
    loc=players.getIslandLocation(playerUUID);
    leader=playerUUID;
  }
 else   if (players.inTeam(playerUUID)) {
    loc=players.getTeamIslandLocation(playerUUID);
    leader=players.getTeamLeader(playerUUID);
    if (leader == null) {
      plugin.getLogger().severe(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
  }
  if (loc != null && leader != null) {
    Island island=plugin.getGrid().getIslandAt(loc);
    if (island == null) {
      Island islandByOwner=plugin.getGrid().getIsland(leader);
      if (islandByOwner == null) {
        plugin.getGrid().addIsland(loc.getBlockX(),loc.getBlockZ(),leader);
      }
 else {
        plugin.getLogger().warning(player.getName() + ""String_Node_Str"");
        plugin.getGrid().deleteIsland(islandByOwner.getCenter());
        plugin.getGrid().addIsland(loc.getBlockX(),loc.getBlockZ(),leader);
      }
    }
 else {
      Island islandByOwner=plugin.getGrid().getIsland(leader);
      if (islandByOwner == null) {
        plugin.getLogger().warning(player.getName() + ""String_Node_Str"");
        plugin.getGrid().setIslandOwner(island,leader);
      }
 else {
        if (!islandByOwner.equals(island)) {
          plugin.getLogger().warning(player.getName() + ""String_Node_Str"");
          plugin.getGrid().deleteIsland(islandByOwner.getCenter());
          plugin.getGrid().setIslandOwner(island,leader);
        }
 else {
        }
      }
    }
  }
  if (Settings.loginLevel) {
    if (Settings.fastLevelCalc) {
      new LevelCalcByChunk(plugin,playerUUID,player,true);
    }
 else {
      if (!plugin.isCalculatingLevel()) {
        plugin.setCalculatingLevel(true);
        LevelCalc levelCalc=new LevelCalc(plugin,playerUUID,player,true);
        levelCalc.runTaskTimer(plugin,0L,10L);
      }
    }
  }
  if (!player.getName().isEmpty()) {
    players.setPlayerName(playerUUID,player.getName());
    plugin.getTinyDB().savePlayerName(player.getName(),playerUUID);
  }
 else {
    plugin.getLogger().warning(""String_Node_Str"" + playerUUID.toString());
  }
  players.save(playerUUID);
  if (Settings.logInRemoveMobs) {
    plugin.getGrid().removeMobs(player.getLocation());
  }
  if (Settings.setTeamName) {
    Scoreboards.getInstance().setLevel(playerUUID);
  }
  Island currentIsland=plugin.getGrid().getIslandAt(player.getLocation());
  if (currentIsland != null && (currentIsland.isLocked() || plugin.getPlayers().isBanned(currentIsland.getOwner(),player.getUniqueId()))) {
    if (!currentIsland.getMembers().contains(playerUUID) && !player.isOp() && !VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).lockIslandLocked);
      plugin.getGrid().homeTeleport(player);
    }
  }
  plugin.getChatListener().setPlayerLevel(playerUUID,plugin.getPlayers().getIslandLevel(player.getUniqueId()));
  if (player.hasPermission(Settings.PERMPREFIX + ""String_Node_Str"")) {
    TopTen.topTenRemoveEntry(playerUUID);
  }
}","/** 
 * @param event
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerJoin(final PlayerJoinEvent event){
  final Player player=event.getPlayer();
  final UUID playerUUID=player.getUniqueId();
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    String language=getLanguage(player);
    if (plugin.getResource(""String_Node_Str"" + language + ""String_Node_Str"") != null) {
      if (plugin.getPlayers().getLocale(playerUUID).isEmpty()) {
        plugin.getPlayers().setLocale(playerUUID,language);
      }
    }
  }
 else {
    plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
  }
  if (player.isOp() && plugin.getUpdateCheck() != null) {
    plugin.checkUpdatesNotify(player);
  }
  if (players == null) {
    plugin.getLogger().severe(""String_Node_Str"");
  }
  final List<String> messages=plugin.getMessages().getMessages(playerUUID);
  if (messages != null) {
    plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
      @Override public void run(){
        player.sendMessage(ChatColor.AQUA + plugin.myLocale(playerUUID).newsHeadline);
        int i=1;
        for (        String message : messages) {
          player.sendMessage(i++ + ""String_Node_Str"" + message);
        }
        plugin.getMessages().clearMessages(playerUUID);
      }
    }
,40L);
  }
  if (!players.hasIsland(playerUUID) && !players.inTeam(playerUUID)) {
    return;
  }
  UUID leader=null;
  Location loc=null;
  if (players.inTeam(playerUUID) && players.getTeamIslandLocation(playerUUID) == null) {
    leader=players.getTeamLeader(playerUUID);
    players.setTeamIslandLocation(playerUUID,players.getIslandLocation(leader));
  }
  if (players.hasIsland(playerUUID)) {
    loc=players.getIslandLocation(playerUUID);
    leader=playerUUID;
  }
 else   if (players.inTeam(playerUUID)) {
    loc=players.getTeamIslandLocation(playerUUID);
    leader=players.getTeamLeader(playerUUID);
    if (leader == null) {
      plugin.getLogger().severe(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
  }
  if (loc != null && leader != null) {
    Island island=plugin.getGrid().getIslandAt(loc);
    if (island == null) {
      Island islandByOwner=plugin.getGrid().getIsland(leader);
      if (islandByOwner == null) {
        plugin.getGrid().addIsland(loc.getBlockX(),loc.getBlockZ(),leader);
      }
 else {
        plugin.getLogger().warning(player.getName() + ""String_Node_Str"");
        plugin.getGrid().deleteIslandOwner(playerUUID);
        plugin.getGrid().addIsland(loc.getBlockX(),loc.getBlockZ(),leader);
      }
    }
 else {
      Island islandByOwner=plugin.getGrid().getIsland(leader);
      if (islandByOwner == null) {
        plugin.getLogger().warning(player.getName() + ""String_Node_Str"");
        plugin.getGrid().setIslandOwner(island,leader);
      }
 else {
        if (!islandByOwner.equals(island)) {
          plugin.getLogger().warning(player.getName() + ""String_Node_Str"");
          plugin.getGrid().deleteIsland(islandByOwner.getCenter());
          plugin.getGrid().setIslandOwner(island,leader);
        }
 else {
        }
      }
    }
  }
  if (Settings.loginLevel) {
    if (Settings.fastLevelCalc) {
      new LevelCalcByChunk(plugin,playerUUID,player,true);
    }
 else {
      if (!plugin.isCalculatingLevel()) {
        plugin.setCalculatingLevel(true);
        LevelCalc levelCalc=new LevelCalc(plugin,playerUUID,player,true);
        levelCalc.runTaskTimer(plugin,0L,10L);
      }
    }
  }
  if (!player.getName().isEmpty()) {
    players.setPlayerName(playerUUID,player.getName());
    plugin.getTinyDB().savePlayerName(player.getName(),playerUUID);
  }
 else {
    plugin.getLogger().warning(""String_Node_Str"" + playerUUID.toString());
  }
  players.save(playerUUID);
  if (Settings.logInRemoveMobs) {
    plugin.getGrid().removeMobs(player.getLocation());
  }
  if (Settings.setTeamName) {
    Scoreboards.getInstance().setLevel(playerUUID);
  }
  Island currentIsland=plugin.getGrid().getIslandAt(player.getLocation());
  if (currentIsland != null && (currentIsland.isLocked() || plugin.getPlayers().isBanned(currentIsland.getOwner(),player.getUniqueId()))) {
    if (!currentIsland.getMembers().contains(playerUUID) && !player.isOp() && !VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).lockIslandLocked);
      plugin.getGrid().homeTeleport(player);
    }
  }
  plugin.getChatListener().setPlayerLevel(playerUUID,plugin.getPlayers().getIslandLevel(player.getUniqueId()));
  if (player.hasPermission(Settings.PERMPREFIX + ""String_Node_Str"")) {
    TopTen.topTenRemoveEntry(playerUUID);
  }
}"
34029,"/** 
 * Resets a player's inventory, armor slots, equipment, enderchest and potion effects
 * @param player
 */
public void resetPlayer(Player player){
  if (Settings.clearInventory && (player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || player.getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str""))) {
    player.getInventory().clear();
    player.getInventory().setArmorContents(null);
    player.getInventory().setHelmet(null);
    player.getInventory().setChestplate(null);
    player.getInventory().setLeggings(null);
    player.getInventory().setBoots(null);
    player.getEquipment().clear();
  }
  player.setGameMode(GameMode.SURVIVAL);
  if (Settings.resetChallenges) {
    players.resetAllChallenges(player.getUniqueId());
  }
  players.setIslandLevel(player.getUniqueId(),0);
  players.clearStartIslandRating(player.getUniqueId());
  players.save(player.getUniqueId());
  TopTen.topTenAddEntry(player.getUniqueId(),0);
  player.updateInventory();
  if (Settings.resetEnderChest) {
    final ItemStack[] items=new ItemStack[player.getEnderChest().getContents().length];
    player.getEnderChest().setContents(items);
  }
  for (  PotionEffect effect : player.getActivePotionEffects())   player.removePotionEffect(effect.getType());
}","/** 
 * Resets a player's inventory, armor slots, equipment, enderchest and potion effects
 * @param player
 */
public void resetPlayer(Player player){
  if (Settings.clearInventory && (player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || player.getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str""))) {
    player.getInventory().clear();
    player.getInventory().setArmorContents(null);
    player.getInventory().setHelmet(null);
    player.getInventory().setChestplate(null);
    player.getInventory().setLeggings(null);
    player.getInventory().setBoots(null);
    player.getEquipment().clear();
  }
  if (!player.isOp()) {
    player.setGameMode(GameMode.SURVIVAL);
  }
  if (Settings.resetChallenges) {
    players.resetAllChallenges(player.getUniqueId());
  }
  players.setIslandLevel(player.getUniqueId(),0);
  players.clearStartIslandRating(player.getUniqueId());
  players.save(player.getUniqueId());
  TopTen.topTenAddEntry(player.getUniqueId(),0);
  player.updateInventory();
  if (Settings.resetEnderChest) {
    final ItemStack[] items=new ItemStack[player.getEnderChest().getContents().length];
    player.getEnderChest().setContents(items);
  }
  for (  PotionEffect effect : player.getActivePotionEffects())   player.removePotionEffect(effect.getType());
}"
34030,"@EventHandler(priority=EventPriority.LOW) public void onBucketEmpty(final PlayerBucketEmptyEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (inWorld(e.getPlayer())) {
    if (VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
    Player p=e.getPlayer();
    if (e.getBlockClicked() != null) {
      Island island=plugin.getGrid().getProtectedIslandAt(e.getBlockClicked().getLocation());
      if (island != null) {
        if (island.getIgsFlag(Flags.allowBreakBlocks) || island.getMembers().contains(p.getUniqueId())) {
          if (e.getBlockClicked() != null && e.getBlockClicked().getBiome().equals(Biome.HELL) && e.getPlayer().getItemInHand().getType().equals(Material.WATER_BUCKET)) {
            e.setCancelled(true);
            e.getPlayer().getItemInHand().setType(Material.BUCKET);
            e.getPlayer().playSound(e.getPlayer().getLocation(),Sound.FIZZ,1F,2F);
            e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).biomeSet.replace(""String_Node_Str"",""String_Node_Str""));
          }
          return;
        }
      }
 else {
        if (Settings.allowBucketUse) {
          return;
        }
      }
      p.sendMessage(ChatColor.RED + plugin.myLocale(p.getUniqueId()).islandProtected);
      e.setCancelled(true);
    }
  }
}","/** 
 * Prevents emptying of buckets outside of island space
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onBucketEmpty(final PlayerBucketEmptyEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (inWorld(e.getPlayer())) {
    if (VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
    Player p=e.getPlayer();
    if (e.getBlockClicked() != null) {
      Block dumpBlock=e.getBlockClicked().getRelative(e.getBlockFace());
      Island island=plugin.getGrid().getProtectedIslandAt(dumpBlock.getLocation());
      if (island != null) {
        if (island.getIgsFlag(Flags.allowBreakBlocks) || island.getMembers().contains(p.getUniqueId())) {
          if (e.getBlockClicked().getBiome().equals(Biome.HELL) && e.getPlayer().getItemInHand().getType().equals(Material.WATER_BUCKET)) {
            e.setCancelled(true);
            e.getPlayer().getItemInHand().setType(Material.BUCKET);
            e.getPlayer().playSound(e.getPlayer().getLocation(),Sound.FIZZ,1F,2F);
            e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).biomeSet.replace(""String_Node_Str"",""String_Node_Str""));
          }
          return;
        }
      }
 else {
        if (Settings.allowBucketUse) {
          return;
        }
      }
      p.sendMessage(ChatColor.RED + plugin.myLocale(p.getUniqueId()).islandProtected);
      e.setCancelled(true);
    }
  }
}"
34031,"/** 
 * Provides a list of all the players who are allowed on this island including coop members
 * @return a list of UUIDs that have legitimate access to the island
 */
public List<UUID> getMembers(){
  List<UUID> result=new ArrayList<UUID>();
  result.addAll(CoopPlay.getInstance().getCoopPlayers(center));
  if (owner == null) {
    return result;
  }
  result.add(owner);
  result.addAll(plugin.getPlayers().getMembers(owner));
  return result;
}","/** 
 * Provides a list of all the players who are allowed on this island including coop members
 * @return a list of UUIDs that have legitimate access to the island
 */
public List<UUID> getMembers(){
  List<UUID> result=new ArrayList<UUID>();
  result.addAll(CoopPlay.getInstance().getCoopPlayers(center.toVector().toLocation(ASkyBlock.getIslandWorld())));
  result.addAll(CoopPlay.getInstance().getCoopPlayers(center.toVector().toLocation(ASkyBlock.getNetherWorld())));
  if (owner == null) {
    return result;
  }
  result.add(owner);
  result.addAll(plugin.getPlayers().getMembers(owner));
  return result;
}"
34032,"/** 
 * Calculates the level of an island
 * @param plugin
 * @param targetPlayer
 * @param asker
 */
public LevelCalcByChunk(final ASkyBlock plugin,final UUID targetPlayer,final Player asker,final boolean silent){
  Island island=plugin.getGrid().getIsland(targetPlayer);
  if (island != null) {
    World world=island.getCenter().getWorld();
    Set<ChunkSnapshot> chunkSnapshot=new HashSet<ChunkSnapshot>();
    for (int x=new BigDecimal((double)island.getMinProtectedX() / 16).setScale(0,BigDecimal.ROUND_DOWN).intValue(); x <= new BigDecimal((double)(island.getMinProtectedX() + island.getProtectionSize() - 1) / 16).setScale(0,BigDecimal.ROUND_UP).intValue(); x++) {
      for (int z=new BigDecimal((double)island.getMinProtectedZ() / 16).setScale(0,BigDecimal.ROUND_DOWN).intValue(); z <= new BigDecimal((double)(island.getMinProtectedZ() + island.getProtectionSize() - 1) / 16).setScale(0,BigDecimal.ROUND_UP).intValue(); z++) {
        chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
      }
    }
    final Set<ChunkSnapshot> finalChunk=chunkSnapshot;
    final int worldHeight=world.getMaxHeight();
    plugin.getServer().getScheduler().runTaskAsynchronously(plugin,new Runnable(){
      @SuppressWarnings(""String_Node_Str"") @Override public void run(){
        HashMap<MaterialData,Integer> limitCount=new HashMap<MaterialData,Integer>();
        for (        MaterialData m : Settings.blockLimits.keySet()) {
          limitCount.put(m,Settings.blockLimits.get(m));
        }
        int blockCount=0;
        int underWaterBlockCount=0;
        for (        ChunkSnapshot chunk : finalChunk) {
          for (int x=0; x < 16; x++) {
            for (int y=0; y < worldHeight; y++) {
              for (int z=0; z < 16; z++) {
                int type=chunk.getBlockTypeId(x,y,z);
                int data=chunk.getBlockData(x,y,z);
                MaterialData md=new MaterialData(type,(byte)data);
                MaterialData generic=new MaterialData(type);
                if (type != 0) {
                  if (limitCount.containsKey(md) && Settings.blockValues.containsKey(md)) {
                    int count=limitCount.get(md);
                    if (count > 0) {
                      limitCount.put(md,--count);
                      if (y < Settings.sea_level) {
                        underWaterBlockCount+=Settings.blockValues.get(md);
                      }
 else {
                        blockCount+=Settings.blockValues.get(md);
                      }
                    }
                  }
 else                   if (limitCount.containsKey(generic) && Settings.blockValues.containsKey(generic)) {
                    int count=limitCount.get(generic);
                    if (count > 0) {
                      limitCount.put(md,--count);
                      if (y < Settings.sea_level) {
                        underWaterBlockCount+=Settings.blockValues.get(generic);
                      }
 else {
                        blockCount+=Settings.blockValues.get(generic);
                      }
                    }
                  }
 else                   if (Settings.blockValues.containsKey(md)) {
                    if (y < Settings.sea_level) {
                      underWaterBlockCount+=Settings.blockValues.get(md);
                    }
 else {
                      blockCount+=Settings.blockValues.get(md);
                    }
                  }
 else                   if (Settings.blockValues.containsKey(generic)) {
                    if (y < Settings.sea_level) {
                      underWaterBlockCount+=Settings.blockValues.get(generic);
                    }
 else {
                      blockCount+=Settings.blockValues.get(generic);
                    }
                  }
                }
              }
            }
          }
        }
        blockCount+=(int)((double)underWaterBlockCount * Math.max(Settings.underWaterMultiplier,1D));
        final int score=blockCount / Settings.levelCost;
        plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
          @Override public void run(){
            int oldLevel=plugin.getPlayers().getIslandLevel(targetPlayer);
            plugin.getPlayers().setIslandLevel(targetPlayer,score);
            plugin.getPlayers().save(targetPlayer);
            if (plugin.getPlayers().inTeam(targetPlayer)) {
              for (              UUID member : plugin.getPlayers().getMembers(targetPlayer)) {
                plugin.getPlayers().setIslandLevel(member,score);
                plugin.getPlayers().save(member);
              }
            }
            if (!silent) {
              if (plugin.getPlayers().getIslandLevel(targetPlayer) > oldLevel) {
                plugin.getMessages().tellOfflineTeam(targetPlayer,ChatColor.GREEN + plugin.myLocale(targetPlayer).islandislandLevelis + ""String_Node_Str""+ ChatColor.WHITE+ plugin.getPlayers().getIslandLevel(targetPlayer));
              }
              if (asker.isOnline()) {
                asker.sendMessage(ChatColor.GREEN + plugin.myLocale(asker.getUniqueId()).islandislandLevelis + ""String_Node_Str""+ ChatColor.WHITE+ plugin.getPlayers().getIslandLevel(targetPlayer));
              }
            }
            if (!(asker.getUniqueId().equals(targetPlayer) && asker.hasPermission(Settings.PERMPREFIX + ""String_Node_Str""))) {
              if (plugin.getPlayers().inTeam(targetPlayer)) {
                UUID leader=plugin.getPlayers().getTeamLeader(targetPlayer);
                if (leader != null) {
                  TopTen.topTenAddEntry(leader,score);
                }
              }
 else {
                TopTen.topTenAddEntry(targetPlayer,score);
              }
            }
            final IslandLevelEvent event=new IslandLevelEvent(plugin,targetPlayer,score);
            plugin.getServer().getPluginManager().callEvent(event);
          }
        }
);
      }
    }
);
  }
}","/** 
 * Calculates the level of an island
 * @param plugin
 * @param targetPlayer
 * @param asker
 */
public LevelCalcByChunk(final ASkyBlock plugin,final UUID targetPlayer,final Player asker,final boolean silent){
  Island island=plugin.getGrid().getIsland(targetPlayer);
  if (island != null) {
    World world=plugin.getPlayers().getHomeLocation(targetPlayer).getWorld();
    Set<ChunkSnapshot> chunkSnapshot=new HashSet<ChunkSnapshot>();
    for (int x=new BigDecimal((double)island.getMinProtectedX() / 16).setScale(0,BigDecimal.ROUND_DOWN).intValue(); x <= new BigDecimal((double)(island.getMinProtectedX() + island.getProtectionSize() - 1) / 16).setScale(0,BigDecimal.ROUND_UP).intValue(); x++) {
      for (int z=new BigDecimal((double)island.getMinProtectedZ() / 16).setScale(0,BigDecimal.ROUND_DOWN).intValue(); z <= new BigDecimal((double)(island.getMinProtectedZ() + island.getProtectionSize() - 1) / 16).setScale(0,BigDecimal.ROUND_UP).intValue(); z++) {
        chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
      }
    }
    final Set<ChunkSnapshot> finalChunk=chunkSnapshot;
    final int worldHeight=world.getMaxHeight();
    plugin.getServer().getScheduler().runTaskAsynchronously(plugin,new Runnable(){
      @SuppressWarnings(""String_Node_Str"") @Override public void run(){
        HashMap<MaterialData,Integer> limitCount=new HashMap<MaterialData,Integer>();
        for (        MaterialData m : Settings.blockLimits.keySet()) {
          limitCount.put(m,Settings.blockLimits.get(m));
        }
        int blockCount=0;
        int underWaterBlockCount=0;
        for (        ChunkSnapshot chunk : finalChunk) {
          for (int x=0; x < 16; x++) {
            for (int y=0; y < worldHeight; y++) {
              for (int z=0; z < 16; z++) {
                int type=chunk.getBlockTypeId(x,y,z);
                int data=chunk.getBlockData(x,y,z);
                MaterialData md=new MaterialData(type,(byte)data);
                MaterialData generic=new MaterialData(type);
                if (type != 0) {
                  if (limitCount.containsKey(md) && Settings.blockValues.containsKey(md)) {
                    int count=limitCount.get(md);
                    if (count > 0) {
                      limitCount.put(md,--count);
                      if (y < Settings.sea_level) {
                        underWaterBlockCount+=Settings.blockValues.get(md);
                      }
 else {
                        blockCount+=Settings.blockValues.get(md);
                      }
                    }
                  }
 else                   if (limitCount.containsKey(generic) && Settings.blockValues.containsKey(generic)) {
                    int count=limitCount.get(generic);
                    if (count > 0) {
                      limitCount.put(md,--count);
                      if (y < Settings.sea_level) {
                        underWaterBlockCount+=Settings.blockValues.get(generic);
                      }
 else {
                        blockCount+=Settings.blockValues.get(generic);
                      }
                    }
                  }
 else                   if (Settings.blockValues.containsKey(md)) {
                    if (y < Settings.sea_level) {
                      underWaterBlockCount+=Settings.blockValues.get(md);
                    }
 else {
                      blockCount+=Settings.blockValues.get(md);
                    }
                  }
 else                   if (Settings.blockValues.containsKey(generic)) {
                    if (y < Settings.sea_level) {
                      underWaterBlockCount+=Settings.blockValues.get(generic);
                    }
 else {
                      blockCount+=Settings.blockValues.get(generic);
                    }
                  }
                }
              }
            }
          }
        }
        blockCount+=(int)((double)underWaterBlockCount * Math.max(Settings.underWaterMultiplier,1D));
        final int score=blockCount / Settings.levelCost;
        plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
          @Override public void run(){
            int oldLevel=plugin.getPlayers().getIslandLevel(targetPlayer);
            plugin.getPlayers().setIslandLevel(targetPlayer,score);
            plugin.getPlayers().save(targetPlayer);
            if (plugin.getPlayers().inTeam(targetPlayer)) {
              for (              UUID member : plugin.getPlayers().getMembers(targetPlayer)) {
                plugin.getPlayers().setIslandLevel(member,score);
                plugin.getPlayers().save(member);
              }
            }
            if (!silent) {
              if (plugin.getPlayers().getIslandLevel(targetPlayer) > oldLevel) {
                plugin.getMessages().tellOfflineTeam(targetPlayer,ChatColor.GREEN + plugin.myLocale(targetPlayer).islandislandLevelis + ""String_Node_Str""+ ChatColor.WHITE+ plugin.getPlayers().getIslandLevel(targetPlayer));
              }
              if (asker.isOnline()) {
                asker.sendMessage(ChatColor.GREEN + plugin.myLocale(asker.getUniqueId()).islandislandLevelis + ""String_Node_Str""+ ChatColor.WHITE+ plugin.getPlayers().getIslandLevel(targetPlayer));
              }
            }
            if (!(asker.getUniqueId().equals(targetPlayer) && asker.hasPermission(Settings.PERMPREFIX + ""String_Node_Str""))) {
              if (plugin.getPlayers().inTeam(targetPlayer)) {
                UUID leader=plugin.getPlayers().getTeamLeader(targetPlayer);
                if (leader != null) {
                  TopTen.topTenAddEntry(leader,score);
                }
              }
 else {
                TopTen.topTenAddEntry(targetPlayer,score);
              }
            }
            final IslandLevelEvent event=new IslandLevelEvent(plugin,targetPlayer,score);
            plugin.getServer().getPluginManager().callEvent(event);
          }
        }
);
      }
    }
);
  }
}"
34033,"/** 
 * Load the player's inventory
 * @param player
 */
public void loadPlayerInventory(Player player){
  if (inventories.containsKey(player.getUniqueId())) {
    InventoryStore inv=inventories.get(player.getUniqueId());
    player.getInventory().setContents(inv.getInventory());
    player.getInventory().setArmorContents(inv.getArmor());
    inventories.remove(inv);
    return;
  }
}","/** 
 * Load the player's inventory
 * @param player
 */
public void loadPlayerInventory(Player player){
  if (inventories.containsKey(player.getUniqueId())) {
    InventoryStore inv=inventories.get(player.getUniqueId());
    player.getInventory().setContents(inv.getInventory());
    player.getInventory().setArmorContents(inv.getArmor());
    inventories.remove(player.getUniqueId());
    return;
  }
}"
34034,"/** 
 * Creates an inventory item for the challenge
 * @param challengeName
 * @param player
 * @return Control Panel item
 */
@SuppressWarnings(""String_Node_Str"") private CPItem createItem(String challengeName,Player player){
  CPItem item=null;
  ItemStack icon=null;
  String iconName=getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",""String_Node_Str"");
  if (!iconName.isEmpty()) {
    try {
      String[] split=iconName.split(""String_Node_Str"");
      if (split.length == 1) {
        if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
        if (StringUtils.isNumeric(iconName)) {
          icon=new ItemStack(Integer.parseInt(iconName));
        }
 else {
          icon=new ItemStack(Material.valueOf(iconName));
        }
      }
 else       if (split.length == 2) {
        if (StringUtils.isNumeric(split[0])) {
          icon=new ItemStack(Integer.parseInt(split[0]));
        }
 else {
          icon=new ItemStack(Material.valueOf(split[0]));
        }
        icon.setDurability(Integer.valueOf(split[1]).shortValue());
      }
    }
 catch (    Exception e) {
      plugin.getLogger().warning(""String_Node_Str"" + challengeName + ""String_Node_Str""+ iconName);
      plugin.getLogger().warning(""String_Node_Str"");
    }
  }
  if (icon == null || icon.equals(Material.AIR)) {
    icon=new ItemStack(Material.PAPER);
  }
  String description=ChatColor.GREEN + getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",challengeName.substring(0,1).toUpperCase() + challengeName.substring(1));
  boolean complete=false;
  if (Settings.addCompletedGlow && plugin.getPlayers().checkChallenge(player.getUniqueId(),challengeName)) {
    ItemMeta im=icon.getItemMeta();
    im.addEnchant(Enchantment.ARROW_DAMAGE,0,true);
    icon.setItemMeta(im);
    icon.removeEnchantment(Enchantment.ARROW_DAMAGE);
    complete=true;
  }
  boolean repeatable=false;
  if (getChallengeConfig().getBoolean(""String_Node_Str"" + challengeName + ""String_Node_Str"",false)) {
    repeatable=true;
  }
  if (!complete || ((complete && repeatable) || !Settings.removeCompleteOntimeChallenges)) {
    item=new CPItem(icon,description,Settings.CHALLENGECOMMAND + ""String_Node_Str"" + challengeName,null);
    List<String> lore=challengeDescription(challengeName,player);
    item.setLore(lore);
  }
  return item;
}","/** 
 * Creates an inventory item for the challenge
 * @param challengeName
 * @param player
 * @return Control Panel item
 */
@SuppressWarnings(""String_Node_Str"") private CPItem createItem(String challengeName,Player player){
  CPItem item=null;
  ItemStack icon=null;
  String iconName=getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",""String_Node_Str"");
  if (!iconName.isEmpty()) {
    try {
      String[] split=iconName.split(""String_Node_Str"");
      if (split.length == 1) {
        if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
 else         if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
          iconName=""String_Node_Str"";
        }
        if (StringUtils.isNumeric(iconName)) {
          icon=new ItemStack(Integer.parseInt(iconName));
        }
 else {
          icon=new ItemStack(Material.valueOf(iconName));
        }
      }
 else       if (split.length == 2) {
        if (StringUtils.isNumeric(split[0])) {
          icon=new ItemStack(Integer.parseInt(split[0]));
        }
 else {
          icon=new ItemStack(Material.valueOf(split[0]));
        }
        icon.setDurability(Integer.valueOf(split[1]).shortValue());
      }
    }
 catch (    Exception e) {
      plugin.getLogger().warning(""String_Node_Str"" + challengeName + ""String_Node_Str""+ iconName);
      plugin.getLogger().warning(""String_Node_Str"");
    }
  }
  if (icon == null || icon.getType() == Material.AIR) {
    icon=new ItemStack(Material.PAPER);
  }
  String description=ChatColor.GREEN + getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",challengeName.substring(0,1).toUpperCase() + challengeName.substring(1));
  boolean complete=false;
  if (Settings.addCompletedGlow && plugin.getPlayers().checkChallenge(player.getUniqueId(),challengeName)) {
    ItemMeta im=icon.getItemMeta();
    im.addEnchant(Enchantment.ARROW_DAMAGE,0,true);
    icon.setItemMeta(im);
    icon.removeEnchantment(Enchantment.ARROW_DAMAGE);
    complete=true;
  }
  boolean repeatable=false;
  if (getChallengeConfig().getBoolean(""String_Node_Str"" + challengeName + ""String_Node_Str"",false)) {
    repeatable=true;
  }
  if (!complete || ((complete && repeatable) || !Settings.removeCompleteOntimeChallenges)) {
    item=new CPItem(icon,description,Settings.CHALLENGECOMMAND + ""String_Node_Str"" + challengeName,null);
    List<String> lore=challengeDescription(challengeName,player);
    item.setLore(lore);
  }
  return item;
}"
34035,"/** 
 * This method protects players from PVP if it is not allowed and from arrows fired by other players
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onEntityDamage(final EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(""String_Node_Str"" + e.getDamager().toString());
    plugin.getLogger().info(""String_Node_Str"" + e.getEntityType());
  }
  if (!inWorld(e.getEntity())) {
    return;
  }
  Island island=plugin.getGrid().getProtectedIslandAt(e.getEntity().getLocation());
  if (e.getDamager() instanceof EnderPearl && e.getEntity() != null && e.getEntity() instanceof Player) {
    Player p=(Player)e.getEntity();
    if (island == null) {
      if (Settings.allowEnderPearls) {
        return;
      }
    }
 else {
      if (island.isSpawn()) {
        if (Settings.allowEnderPearls) {
          return;
        }
      }
 else {
        if (island.getIgsFlag(Flags.allowEnderPearls) || island.getMembers().contains(p.getUniqueId())) {
          return;
        }
      }
    }
    p.sendMessage(ChatColor.RED + plugin.myLocale(p.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  boolean inNether=false;
  if (e.getEntity().getWorld().equals(ASkyBlock.getNetherWorld())) {
    inNether=true;
  }
  if (!Settings.allowTNTDamage && e.getDamager().getType().equals(EntityType.PRIMED_TNT)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperDamage && e.getDamager().getType().equals(EntityType.CREEPER) && !(e.getEntity() instanceof Player)) {
    e.setCancelled(true);
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
  }
  Player attacker=null;
  if (e.getDamager() instanceof Player) {
    attacker=(Player)e.getDamager();
  }
 else   if (e.getDamager() instanceof Projectile) {
    Projectile p=(Projectile)e.getDamager();
    if (p.getShooter() instanceof Player) {
      attacker=(Player)p.getShooter();
    }
  }
  if (attacker == null) {
    return;
  }
  if (e.getEntity() instanceof Player && attacker.equals((Player)e.getEntity())) {
    if (debug)     plugin.getLogger().info(""String_Node_Str"");
    return;
  }
  if (e.getEntity() instanceof ItemFrame || e.getEntityType().toString().endsWith(""String_Node_Str"")) {
    if (island == null) {
      if (!Settings.allowBreakBlocks) {
        attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
        e.setCancelled(true);
      }
      return;
    }
    if (Settings.allowSpawnBreakBlocks && island.isSpawn()) {
      return;
    }
    if (island.getIgsFlag(Flags.allowBreakBlocks) || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (e.getEntity() instanceof Monster || e.getEntity() instanceof Slime || e.getEntity() instanceof Squid) {
    if (island == null) {
      return;
    }
    if (Settings.allowHurtMonsters || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (e.getEntity() instanceof Animals || e.getEntity() instanceof IronGolem || e.getEntity() instanceof Snowman|| e.getEntity() instanceof Villager) {
    if (island == null) {
      return;
    }
    if (island.isSpawn() && Settings.allowSpawnAnimalKilling) {
      return;
    }
    if (island.getIgsFlag(Flags.allowHurtMobs) || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  boolean pvp=false;
  if (island == null) {
    if ((inNether && Settings.allowNetherPvP) || (!inNether && Settings.allowPvP)) {
      if (debug)       plugin.getLogger().info(""String_Node_Str"");
      pvp=true;
    }
  }
 else {
    if (island.isSpawn() && Settings.allowSpawnPVP) {
      pvp=true;
    }
 else     if ((inNether && island.getIgsFlag(Flags.allowNetherPvP) || (!inNether && island.getIgsFlag(Flags.allowPvP)))) {
      if (debug)       plugin.getLogger().info(""String_Node_Str"");
      pvp=true;
    }
  }
  if (e.getEntity() instanceof Player) {
    if (pvp) {
      return;
    }
 else {
      attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).targetInNoPVPArea);
      e.setCancelled(true);
      return;
    }
  }
}","/** 
 * This method protects players from PVP if it is not allowed and from arrows fired by other players
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onEntityDamage(final EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(""String_Node_Str"" + e.getDamager().toString());
    plugin.getLogger().info(""String_Node_Str"" + e.getEntityType());
  }
  if (!inWorld(e.getEntity())) {
    return;
  }
  Island island=plugin.getGrid().getProtectedIslandAt(e.getEntity().getLocation());
  if (e.getDamager() instanceof EnderPearl && e.getEntity() != null && e.getEntity() instanceof Player) {
    Player p=(Player)e.getEntity();
    if (island == null) {
      if (Settings.allowEnderPearls) {
        return;
      }
    }
 else {
      if (island.isSpawn()) {
        if (Settings.allowEnderPearls) {
          return;
        }
      }
 else {
        if (island.getIgsFlag(Flags.allowEnderPearls) || island.getMembers().contains(p.getUniqueId())) {
          return;
        }
      }
    }
    p.sendMessage(ChatColor.RED + plugin.myLocale(p.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  boolean inNether=false;
  if (e.getEntity().getWorld().equals(ASkyBlock.getNetherWorld())) {
    inNether=true;
  }
  if (!Settings.allowTNTDamage && e.getDamager().getType().equals(EntityType.PRIMED_TNT)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperDamage && e.getDamager().getType().equals(EntityType.CREEPER) && !(e.getEntity() instanceof Player)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperGriefing && e.getDamager().getType().equals(EntityType.CREEPER)) {
    Creeper creeper=(Creeper)e.getDamager();
    if (creeper.getTarget() instanceof Player) {
      Player target=(Player)creeper.getTarget();
      if (!plugin.getGrid().locationIsOnIsland(target,e.getEntity().getLocation())) {
        e.setCancelled(true);
        return;
      }
    }
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
  }
  Player attacker=null;
  if (e.getDamager() instanceof Player) {
    attacker=(Player)e.getDamager();
  }
 else   if (e.getDamager() instanceof Projectile) {
    Projectile p=(Projectile)e.getDamager();
    if (p.getShooter() instanceof Player) {
      attacker=(Player)p.getShooter();
    }
  }
  if (attacker == null) {
    return;
  }
  if (e.getEntity() instanceof Player && attacker.equals((Player)e.getEntity())) {
    if (debug)     plugin.getLogger().info(""String_Node_Str"");
    return;
  }
  if (e.getEntity() instanceof ItemFrame || e.getEntityType().toString().endsWith(""String_Node_Str"")) {
    if (island == null) {
      if (!Settings.allowBreakBlocks) {
        attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
        e.setCancelled(true);
      }
      return;
    }
    if (Settings.allowSpawnBreakBlocks && island.isSpawn()) {
      return;
    }
    if (island.getIgsFlag(Flags.allowBreakBlocks) || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (e.getEntity() instanceof Monster || e.getEntity() instanceof Slime || e.getEntity() instanceof Squid) {
    if (island == null) {
      return;
    }
    if (Settings.allowHurtMonsters || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (e.getEntity() instanceof Animals || e.getEntity() instanceof IronGolem || e.getEntity() instanceof Snowman|| e.getEntity() instanceof Villager) {
    if (island == null) {
      return;
    }
    if (island.isSpawn() && Settings.allowSpawnAnimalKilling) {
      return;
    }
    if (island.getIgsFlag(Flags.allowHurtMobs) || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  boolean pvp=false;
  if (island == null) {
    if ((inNether && Settings.allowNetherPvP) || (!inNether && Settings.allowPvP)) {
      if (debug)       plugin.getLogger().info(""String_Node_Str"");
      pvp=true;
    }
  }
 else {
    if (island.isSpawn() && Settings.allowSpawnPVP) {
      pvp=true;
    }
 else     if ((inNether && island.getIgsFlag(Flags.allowNetherPvP) || (!inNether && island.getIgsFlag(Flags.allowPvP)))) {
      if (debug)       plugin.getLogger().info(""String_Node_Str"");
      pvp=true;
    }
  }
  if (e.getEntity() instanceof Player) {
    if (pvp) {
      return;
    }
 else {
      attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).targetInNoPVPArea);
      e.setCancelled(true);
      return;
    }
  }
}"
34036,"/** 
 * Prevents the breakage of hanging items
 * @param e
 */
@EventHandler(priority=EventPriority.LOW) public void onBreakHanging(final HangingBreakByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(e.getRemover().toString());
  }
  if (inWorld(e.getEntity())) {
    if ((e.getRemover() instanceof Creeper) && !Settings.allowCreeperDamage) {
      e.setCancelled(true);
      return;
    }
    if (e.getRemover() instanceof Player) {
      Player p=(Player)e.getRemover();
      if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
        return;
      }
      Island island=plugin.getGrid().getProtectedIslandAt(e.getEntity().getLocation());
      if (island == null && Settings.allowBreakBlocks) {
        return;
      }
      if (island != null) {
        if (Settings.allowSpawnBreakBlocks && island.isSpawn()) {
          return;
        }
        if (island.getIgsFlag(Flags.allowBreakBlocks) || island.getMembers().contains(p.getUniqueId())) {
          return;
        }
      }
      p.sendMessage(ChatColor.RED + plugin.myLocale(p.getUniqueId()).islandProtected);
      e.setCancelled(true);
    }
  }
}","/** 
 * Prevents the breakage of hanging items
 * @param e
 */
@EventHandler(priority=EventPriority.LOW) public void onBreakHanging(final HangingBreakByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(e.getRemover().toString());
  }
  if (inWorld(e.getEntity())) {
    if ((e.getRemover() instanceof Creeper) && !Settings.allowCreeperDamage) {
      e.setCancelled(true);
      return;
    }
    if ((e.getRemover() instanceof Creeper) && !Settings.allowCreeperGriefing) {
      Creeper creeper=(Creeper)e.getRemover();
      if (creeper.getTarget() instanceof Player) {
        Player target=(Player)creeper.getTarget();
        if (!plugin.getGrid().locationIsOnIsland(target,e.getEntity().getLocation())) {
          e.setCancelled(true);
          return;
        }
      }
    }
    if (e.getRemover() instanceof Player) {
      Player p=(Player)e.getRemover();
      if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
        return;
      }
      Island island=plugin.getGrid().getProtectedIslandAt(e.getEntity().getLocation());
      if (island == null && Settings.allowBreakBlocks) {
        return;
      }
      if (island != null) {
        if (Settings.allowSpawnBreakBlocks && island.isSpawn()) {
          return;
        }
        if (island.getIgsFlag(Flags.allowBreakBlocks) || island.getMembers().contains(p.getUniqueId())) {
          return;
        }
      }
      p.sendMessage(ChatColor.RED + plugin.myLocale(p.getUniqueId()).islandProtected);
      e.setCancelled(true);
    }
  }
}"
34037,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent e){
  final Player player=e.getPlayer();
  if (player.isDead()) {
    return;
  }
  if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (player.isOp()) {
    if (!Settings.damageOps) {
      return;
    }
  }
 else   if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE)) {
    return;
  }
  final Location playerLoc=player.getLocation();
  final Block block=playerLoc.getBlock();
  if (Settings.rainDamage > 0D && isRaining) {
    Biome biome=playerLoc.getBlock().getBiome();
    if (biome != Biome.DESERT && biome != Biome.DESERT_HILLS && biome != Biome.DESERT_MOUNTAINS && biome != Biome.SAVANNA && biome != Biome.SAVANNA_MOUNTAINS && biome != Biome.SAVANNA_PLATEAU && biome != Biome.SAVANNA_PLATEAU_MOUNTAINS && biome != Biome.MESA && biome != Biome.MESA_BRYCE && biome != Biome.MESA_PLATEAU && biome != Biome.MESA_PLATEAU_FOREST && biome != Biome.MESA_PLATEAU_FOREST_MOUNTAINS && biome != Biome.MESA_PLATEAU_MOUNTAINS && biome != Biome.HELL) {
      boolean hitByRain=true;
      for (int y=playerLoc.getBlockY() + 2; y < playerLoc.getWorld().getMaxHeight(); y++) {
        if (!playerLoc.getWorld().getBlockAt(playerLoc.getBlockX(),y,playerLoc.getBlockZ()).getType().equals(Material.AIR)) {
          hitByRain=false;
          break;
        }
      }
      if (!hitByRain) {
        wetPlayers.remove(player);
      }
 else {
        boolean acidPotion=false;
        Collection<PotionEffect> activePotions=player.getActivePotionEffects();
        for (        PotionEffect s : activePotions) {
          if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
            acidPotion=true;
          }
        }
        if (acidPotion) {
          wetPlayers.remove(player);
        }
 else {
          if (!wetPlayers.contains(player)) {
            wetPlayers.add(player);
            new BukkitRunnable(){
              @Override public void run(){
                if (!isRaining || player.isDead()) {
                  wetPlayers.remove(player);
                  this.cancel();
                }
 else                 if (player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
                  Collection<PotionEffect> activePotions=player.getActivePotionEffects();
                  for (                  PotionEffect s : activePotions) {
                    if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
                      wetPlayers.remove(player);
                      this.cancel();
                      return;
                    }
                  }
                  for (int y=player.getLocation().getBlockY() + 2; y < player.getLocation().getWorld().getMaxHeight(); y++) {
                    if (!player.getLocation().getWorld().getBlockAt(player.getLocation().getBlockX(),y,player.getLocation().getBlockZ()).getType().equals(Material.AIR)) {
                      wetPlayers.remove(player);
                      this.cancel();
                      return;
                    }
                  }
                  if (Settings.rainDamage > 0D) {
                    double health=player.getHealth() - (Settings.rainDamage - Settings.rainDamage * getDamageReduced(player));
                    if (health < 0D) {
                      health=0D;
                    }
 else                     if (health > 20D) {
                      health=20D;
                    }
                    player.setHealth(health);
                    player.getWorld().playSound(playerLoc,Sound.FIZZ,3F,3F);
                  }
                }
 else {
                  wetPlayers.remove(player);
                  this.cancel();
                }
              }
            }
.runTaskTimer(plugin,0L,20L);
          }
        }
      }
    }
  }
  if (!block.isLiquid()) {
    return;
  }
  if (playerLoc.getBlockY() < 1) {
    final Vector v=new Vector(player.getVelocity().getX(),1D,player.getVelocity().getZ());
    player.setVelocity(v);
  }
  if (burningPlayers.contains(player)) {
    return;
  }
  if (Settings.allowSpawnNoAcidWater) {
    if (playerLoc.getBlockY() > Settings.sea_level) {
      if (plugin.getGrid().isAtSpawn(playerLoc)) {
        return;
      }
    }
  }
  if (block.getType().equals(Material.STATIONARY_WATER) || block.getType().equals(Material.WATER)) {
    Entity playersVehicle=player.getVehicle();
    if (playersVehicle != null) {
      if (playersVehicle.getType().equals(EntityType.BOAT)) {
        return;
      }
    }
    Collection<PotionEffect> activePotions=player.getActivePotionEffects();
    for (    PotionEffect s : activePotions) {
      if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
        return;
      }
    }
    burningPlayers.add(player);
    new BukkitRunnable(){
      @Override public void run(){
        if (player.isDead()) {
          burningPlayers.remove(player);
          this.cancel();
        }
 else         if (player.getLocation().getBlock().isLiquid() && player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
          if (!Settings.acidDamageType.isEmpty()) {
            for (            PotionEffectType t : Settings.acidDamageType) {
              if (t.equals(PotionEffectType.BLINDNESS) || t.equals(PotionEffectType.CONFUSION) || t.equals(PotionEffectType.HUNGER)|| t.equals(PotionEffectType.SLOW)|| t.equals(PotionEffectType.SLOW_DIGGING)|| t.equals(PotionEffectType.WEAKNESS)) {
                player.addPotionEffect(new PotionEffect(t,600,1));
              }
 else {
                player.addPotionEffect(new PotionEffect(t,200,1));
              }
            }
          }
          if (Settings.acidDamage > 0D) {
            double health=player.getHealth() - (Settings.acidDamage - Settings.acidDamage * getDamageReduced(player));
            if (health < 0D) {
              health=0D;
            }
 else             if (health > 20D) {
              health=20D;
            }
            player.setHealth(health);
            player.getWorld().playSound(playerLoc,Sound.FIZZ,2F,2F);
          }
        }
 else {
          burningPlayers.remove(player);
          this.cancel();
        }
      }
    }
.runTaskTimer(plugin,0L,20L);
  }
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent e){
  final Player player=e.getPlayer();
  if (player.isDead()) {
    return;
  }
  if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (player.isOp()) {
    if (!Settings.damageOps) {
      return;
    }
  }
 else   if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE)) {
    return;
  }
  final Location playerLoc=player.getLocation();
  final Block block=playerLoc.getBlock();
  final Block head=block.getRelative(BlockFace.UP);
  if (Settings.rainDamage > 0D && isRaining) {
    Biome biome=playerLoc.getBlock().getBiome();
    if (biome != Biome.DESERT && biome != Biome.DESERT_HILLS && biome != Biome.DESERT_MOUNTAINS && biome != Biome.SAVANNA && biome != Biome.SAVANNA_MOUNTAINS && biome != Biome.SAVANNA_PLATEAU && biome != Biome.SAVANNA_PLATEAU_MOUNTAINS && biome != Biome.MESA && biome != Biome.MESA_BRYCE && biome != Biome.MESA_PLATEAU && biome != Biome.MESA_PLATEAU_FOREST && biome != Biome.MESA_PLATEAU_FOREST_MOUNTAINS && biome != Biome.MESA_PLATEAU_MOUNTAINS && biome != Biome.HELL) {
      boolean hitByRain=true;
      for (int y=playerLoc.getBlockY() + 2; y < playerLoc.getWorld().getMaxHeight(); y++) {
        if (!playerLoc.getWorld().getBlockAt(playerLoc.getBlockX(),y,playerLoc.getBlockZ()).getType().equals(Material.AIR)) {
          hitByRain=false;
          break;
        }
      }
      if (!hitByRain) {
        wetPlayers.remove(player);
      }
 else {
        boolean acidPotion=false;
        Collection<PotionEffect> activePotions=player.getActivePotionEffects();
        for (        PotionEffect s : activePotions) {
          if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
            acidPotion=true;
          }
        }
        if (acidPotion) {
          wetPlayers.remove(player);
        }
 else {
          if (!wetPlayers.contains(player)) {
            wetPlayers.add(player);
            new BukkitRunnable(){
              @Override public void run(){
                if (!isRaining || player.isDead()) {
                  wetPlayers.remove(player);
                  this.cancel();
                }
 else                 if (player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
                  Collection<PotionEffect> activePotions=player.getActivePotionEffects();
                  for (                  PotionEffect s : activePotions) {
                    if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
                      wetPlayers.remove(player);
                      this.cancel();
                      return;
                    }
                  }
                  for (int y=player.getLocation().getBlockY() + 2; y < player.getLocation().getWorld().getMaxHeight(); y++) {
                    if (!player.getLocation().getWorld().getBlockAt(player.getLocation().getBlockX(),y,player.getLocation().getBlockZ()).getType().equals(Material.AIR)) {
                      wetPlayers.remove(player);
                      this.cancel();
                      return;
                    }
                  }
                  if (Settings.rainDamage > 0D) {
                    double health=player.getHealth() - (Settings.rainDamage - Settings.rainDamage * getDamageReduced(player));
                    if (health < 0D) {
                      health=0D;
                    }
 else                     if (health > 20D) {
                      health=20D;
                    }
                    player.setHealth(health);
                    player.getWorld().playSound(playerLoc,Sound.FIZZ,3F,3F);
                  }
                }
 else {
                  wetPlayers.remove(player);
                  this.cancel();
                }
              }
            }
.runTaskTimer(plugin,0L,20L);
          }
        }
      }
    }
  }
  if (!block.isLiquid() && !head.isLiquid()) {
    return;
  }
  if (playerLoc.getBlockY() < 1) {
    final Vector v=new Vector(player.getVelocity().getX(),1D,player.getVelocity().getZ());
    player.setVelocity(v);
  }
  if (burningPlayers.contains(player)) {
    return;
  }
  if (Settings.allowSpawnNoAcidWater) {
    if (playerLoc.getBlockY() > Settings.sea_level) {
      if (plugin.getGrid().isAtSpawn(playerLoc)) {
        return;
      }
    }
  }
  if (block.getType().equals(Material.STATIONARY_WATER) || block.getType().equals(Material.WATER) || head.getType().equals(Material.STATIONARY_WATER)|| head.getType().equals(Material.WATER)) {
    Entity playersVehicle=player.getVehicle();
    if (playersVehicle != null) {
      if (playersVehicle.getType().equals(EntityType.BOAT)) {
        return;
      }
    }
    Collection<PotionEffect> activePotions=player.getActivePotionEffects();
    for (    PotionEffect s : activePotions) {
      if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
        return;
      }
    }
    burningPlayers.add(player);
    new BukkitRunnable(){
      @Override public void run(){
        if (player.isDead()) {
          burningPlayers.remove(player);
          this.cancel();
        }
 else         if ((player.getLocation().getBlock().isLiquid() || player.getLocation().getBlock().getRelative(BlockFace.UP).isLiquid()) && player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
          if (!Settings.acidDamageType.isEmpty()) {
            for (            PotionEffectType t : Settings.acidDamageType) {
              if (t.equals(PotionEffectType.BLINDNESS) || t.equals(PotionEffectType.CONFUSION) || t.equals(PotionEffectType.HUNGER)|| t.equals(PotionEffectType.SLOW)|| t.equals(PotionEffectType.SLOW_DIGGING)|| t.equals(PotionEffectType.WEAKNESS)) {
                player.addPotionEffect(new PotionEffect(t,600,1));
              }
 else {
                player.addPotionEffect(new PotionEffect(t,200,1));
              }
            }
          }
          if (Settings.acidDamage > 0D) {
            double health=player.getHealth() - (Settings.acidDamage - Settings.acidDamage * getDamageReduced(player));
            if (health < 0D) {
              health=0D;
            }
 else             if (health > 20D) {
              health=20D;
            }
            player.setHealth(health);
            player.getWorld().playSound(playerLoc,Sound.FIZZ,2F,2F);
          }
        }
 else {
          burningPlayers.remove(player);
          this.cancel();
        }
      }
    }
.runTaskTimer(plugin,0L,20L);
  }
}"
34038,"@Override public void run(){
  if (player.isDead()) {
    burningPlayers.remove(player);
    this.cancel();
  }
 else   if (player.getLocation().getBlock().isLiquid() && player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (!Settings.acidDamageType.isEmpty()) {
      for (      PotionEffectType t : Settings.acidDamageType) {
        if (t.equals(PotionEffectType.BLINDNESS) || t.equals(PotionEffectType.CONFUSION) || t.equals(PotionEffectType.HUNGER)|| t.equals(PotionEffectType.SLOW)|| t.equals(PotionEffectType.SLOW_DIGGING)|| t.equals(PotionEffectType.WEAKNESS)) {
          player.addPotionEffect(new PotionEffect(t,600,1));
        }
 else {
          player.addPotionEffect(new PotionEffect(t,200,1));
        }
      }
    }
    if (Settings.acidDamage > 0D) {
      double health=player.getHealth() - (Settings.acidDamage - Settings.acidDamage * getDamageReduced(player));
      if (health < 0D) {
        health=0D;
      }
 else       if (health > 20D) {
        health=20D;
      }
      player.setHealth(health);
      player.getWorld().playSound(playerLoc,Sound.FIZZ,2F,2F);
    }
  }
 else {
    burningPlayers.remove(player);
    this.cancel();
  }
}","@Override public void run(){
  if (player.isDead()) {
    burningPlayers.remove(player);
    this.cancel();
  }
 else   if ((player.getLocation().getBlock().isLiquid() || player.getLocation().getBlock().getRelative(BlockFace.UP).isLiquid()) && player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (!Settings.acidDamageType.isEmpty()) {
      for (      PotionEffectType t : Settings.acidDamageType) {
        if (t.equals(PotionEffectType.BLINDNESS) || t.equals(PotionEffectType.CONFUSION) || t.equals(PotionEffectType.HUNGER)|| t.equals(PotionEffectType.SLOW)|| t.equals(PotionEffectType.SLOW_DIGGING)|| t.equals(PotionEffectType.WEAKNESS)) {
          player.addPotionEffect(new PotionEffect(t,600,1));
        }
 else {
          player.addPotionEffect(new PotionEffect(t,200,1));
        }
      }
    }
    if (Settings.acidDamage > 0D) {
      double health=player.getHealth() - (Settings.acidDamage - Settings.acidDamage * getDamageReduced(player));
      if (health < 0D) {
        health=0D;
      }
 else       if (health > 20D) {
        health=20D;
      }
      player.setHealth(health);
      player.getWorld().playSound(playerLoc,Sound.FIZZ,2F,2F);
    }
  }
 else {
    burningPlayers.remove(player);
    this.cancel();
  }
}"
34039,"/** 
 * This method protects players from PVP if it is not allowed and from arrows fired by other players
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onEntityDamage(final EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(""String_Node_Str"" + e.getDamager().toString());
    plugin.getLogger().info(""String_Node_Str"" + e.getEntityType());
  }
  Island island=plugin.getGrid().getProtectedIslandAt(e.getEntity().getLocation());
  if (e.getDamager() instanceof EnderPearl && e.getEntity() != null && e.getEntity() instanceof Player) {
    Player p=(Player)e.getEntity();
    if (island == null) {
      if (Settings.allowEnderPearls) {
        return;
      }
    }
 else {
      if (island.isSpawn()) {
        if (Settings.allowEnderPearls) {
          return;
        }
      }
 else {
        if (island.getIgsFlag(Flags.allowEnderPearls)) {
          return;
        }
      }
    }
    p.sendMessage(ChatColor.RED + plugin.myLocale(p.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (!inWorld(e.getEntity())) {
    return;
  }
  boolean inNether=false;
  if (e.getEntity().getWorld().equals(ASkyBlock.getNetherWorld())) {
    inNether=true;
  }
  if (!Settings.allowTNTDamage && e.getDamager().getType().equals(EntityType.PRIMED_TNT)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperDamage && e.getDamager().getType().equals(EntityType.CREEPER) && !(e.getEntity() instanceof Player)) {
    e.setCancelled(true);
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
  }
  Player attacker=null;
  if (e.getDamager() instanceof Player) {
    attacker=(Player)e.getDamager();
  }
 else   if (e.getDamager() instanceof Projectile) {
    Projectile p=(Projectile)e.getDamager();
    if (p.getShooter() instanceof Player) {
      attacker=(Player)p.getShooter();
    }
  }
  if (attacker == null) {
    return;
  }
  if (e.getEntity() instanceof Player && attacker.equals((Player)e.getEntity())) {
    if (debug)     plugin.getLogger().info(""String_Node_Str"");
    return;
  }
  if (e.getEntity() instanceof ItemFrame || e.getEntityType().toString().endsWith(""String_Node_Str"")) {
    if (island == null) {
      if (!Settings.allowBreakBlocks) {
        attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
        e.setCancelled(true);
      }
      return;
    }
    if (Settings.allowSpawnBreakBlocks && island.isSpawn()) {
      return;
    }
    if (island.getIgsFlag(Flags.allowBreakBlocks) || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (e.getEntity() instanceof Monster || e.getEntity() instanceof Slime || e.getEntity() instanceof Squid) {
    if (island == null) {
      return;
    }
    if (Settings.allowHurtMonsters || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (e.getEntity() instanceof Animals || e.getEntity() instanceof IronGolem || e.getEntity() instanceof Snowman|| e.getEntity() instanceof Villager) {
    if (island == null) {
      return;
    }
    if (island.isSpawn() && Settings.allowSpawnAnimalKilling) {
      return;
    }
    if (island.getIgsFlag(Flags.allowHurtMobs) || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  boolean pvp=false;
  if (island == null) {
    if ((inNether && Settings.allowNetherPvP) || (!inNether && Settings.allowPvP)) {
      if (debug)       plugin.getLogger().info(""String_Node_Str"");
      pvp=true;
    }
  }
 else {
    if (island.isSpawn() && Settings.allowSpawnPVP) {
      pvp=true;
    }
 else     if ((inNether && island.getIgsFlag(Flags.allowNetherPvP) || (!inNether && island.getIgsFlag(Flags.allowPvP)))) {
      if (debug)       plugin.getLogger().info(""String_Node_Str"");
      pvp=true;
    }
  }
  if (e.getEntity() instanceof Player) {
    if (pvp) {
      return;
    }
 else {
      attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).targetInNoPVPArea);
      e.setCancelled(true);
      return;
    }
  }
}","/** 
 * This method protects players from PVP if it is not allowed and from arrows fired by other players
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onEntityDamage(final EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(""String_Node_Str"" + e.getDamager().toString());
    plugin.getLogger().info(""String_Node_Str"" + e.getEntityType());
  }
  Island island=plugin.getGrid().getProtectedIslandAt(e.getEntity().getLocation());
  if (e.getDamager() instanceof EnderPearl && e.getEntity() != null && e.getEntity() instanceof Player) {
    Player p=(Player)e.getEntity();
    if (island == null) {
      if (Settings.allowEnderPearls) {
        return;
      }
    }
 else {
      if (island.isSpawn()) {
        if (Settings.allowEnderPearls) {
          return;
        }
      }
 else {
        if (island.getIgsFlag(Flags.allowEnderPearls) || island.getMembers().contains(p.getUniqueId())) {
          return;
        }
      }
    }
    p.sendMessage(ChatColor.RED + plugin.myLocale(p.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (!inWorld(e.getEntity())) {
    return;
  }
  boolean inNether=false;
  if (e.getEntity().getWorld().equals(ASkyBlock.getNetherWorld())) {
    inNether=true;
  }
  if (!Settings.allowTNTDamage && e.getDamager().getType().equals(EntityType.PRIMED_TNT)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperDamage && e.getDamager().getType().equals(EntityType.CREEPER) && !(e.getEntity() instanceof Player)) {
    e.setCancelled(true);
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
  }
  Player attacker=null;
  if (e.getDamager() instanceof Player) {
    attacker=(Player)e.getDamager();
  }
 else   if (e.getDamager() instanceof Projectile) {
    Projectile p=(Projectile)e.getDamager();
    if (p.getShooter() instanceof Player) {
      attacker=(Player)p.getShooter();
    }
  }
  if (attacker == null) {
    return;
  }
  if (e.getEntity() instanceof Player && attacker.equals((Player)e.getEntity())) {
    if (debug)     plugin.getLogger().info(""String_Node_Str"");
    return;
  }
  if (e.getEntity() instanceof ItemFrame || e.getEntityType().toString().endsWith(""String_Node_Str"")) {
    if (island == null) {
      if (!Settings.allowBreakBlocks) {
        attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
        e.setCancelled(true);
      }
      return;
    }
    if (Settings.allowSpawnBreakBlocks && island.isSpawn()) {
      return;
    }
    if (island.getIgsFlag(Flags.allowBreakBlocks) || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (e.getEntity() instanceof Monster || e.getEntity() instanceof Slime || e.getEntity() instanceof Squid) {
    if (island == null) {
      return;
    }
    if (Settings.allowHurtMonsters || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  if (e.getEntity() instanceof Animals || e.getEntity() instanceof IronGolem || e.getEntity() instanceof Snowman|| e.getEntity() instanceof Villager) {
    if (island == null) {
      return;
    }
    if (island.isSpawn() && Settings.allowSpawnAnimalKilling) {
      return;
    }
    if (island.getIgsFlag(Flags.allowHurtMobs) || island.getMembers().contains(attacker.getUniqueId())) {
      return;
    }
    attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  boolean pvp=false;
  if (island == null) {
    if ((inNether && Settings.allowNetherPvP) || (!inNether && Settings.allowPvP)) {
      if (debug)       plugin.getLogger().info(""String_Node_Str"");
      pvp=true;
    }
  }
 else {
    if (island.isSpawn() && Settings.allowSpawnPVP) {
      pvp=true;
    }
 else     if ((inNether && island.getIgsFlag(Flags.allowNetherPvP) || (!inNether && island.getIgsFlag(Flags.allowPvP)))) {
      if (debug)       plugin.getLogger().info(""String_Node_Str"");
      pvp=true;
    }
  }
  if (e.getEntity() instanceof Player) {
    if (pvp) {
      return;
    }
 else {
      attacker.sendMessage(ChatColor.RED + plugin.myLocale(attacker.getUniqueId()).targetInNoPVPArea);
      e.setCancelled(true);
      return;
    }
  }
}"
34040,"/** 
 * Prevents teleporting when falling based on setting and teleporting to locked islands
 * @param e
 */
@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=false) public void onPlayerTeleport(final PlayerTeleportEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (e.getTo() == null || e.getFrom() == null) {
    return;
  }
  if (!IslandGuard.inWorld(e.getTo()) && !IslandGuard.inWorld(e.getFrom())) {
    return;
  }
  if (plugin.getGrid() == null) {
    return;
  }
  if (!Settings.allowTeleportWhenFalling && e.getPlayer().getGameMode().equals(GameMode.SURVIVAL) && !e.getPlayer().isOp()) {
    if (isFalling(e.getPlayer().getUniqueId())) {
      e.getPlayer().sendMessage(plugin.myLocale(e.getPlayer().getUniqueId()).islandcannotTeleport);
      e.setCancelled(true);
      if (e.getPlayer().getLocation().getBlockY() < 0) {
        e.getPlayer().setHealth(0D);
        unsetFalling(e.getPlayer().getUniqueId());
      }
      return;
    }
  }
  Island islandTo=plugin.getGrid().getProtectedIslandAt(e.getTo());
  if (e.getCause() != null && e.getCause().equals(TeleportCause.ENDER_PEARL)) {
    if (islandTo == null) {
      if (Settings.allowEnderPearls) {
        return;
      }
    }
 else {
      if (islandTo.isSpawn()) {
        if (Settings.allowEnderPearls) {
          return;
        }
      }
 else {
        if (islandTo.getIgsFlag(Flags.allowEnderPearls)) {
          return;
        }
      }
    }
    e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  Island islandFrom=plugin.getGrid().getProtectedIslandAt(e.getFrom());
  if (islandTo != null && islandTo.getOwner() != null) {
    if (islandTo != islandFrom) {
      if (islandTo.isLocked() || plugin.getPlayers().isBanned(islandTo.getOwner(),e.getPlayer().getUniqueId())) {
        e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).lockIslandLocked);
        if (!plugin.getGrid().locationIsOnIsland(e.getPlayer(),e.getTo()) && !e.getPlayer().isOp() && !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")&& !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
          e.setCancelled(true);
          return;
        }
      }
      e.getPlayer().sendMessage(plugin.myLocale(e.getPlayer().getUniqueId()).lockNowEntering.replace(""String_Node_Str"",plugin.getPlayers().getName(islandTo.getOwner())));
    }
  }
}","/** 
 * Prevents teleporting when falling based on setting and teleporting to locked islands
 * @param e
 */
@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=false) public void onPlayerTeleport(final PlayerTeleportEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (e.getTo() == null || e.getFrom() == null) {
    return;
  }
  if (!IslandGuard.inWorld(e.getTo()) && !IslandGuard.inWorld(e.getFrom())) {
    return;
  }
  if (plugin.getGrid() == null) {
    return;
  }
  if (!Settings.allowTeleportWhenFalling && e.getPlayer().getGameMode().equals(GameMode.SURVIVAL) && !e.getPlayer().isOp()) {
    if (isFalling(e.getPlayer().getUniqueId())) {
      e.getPlayer().sendMessage(plugin.myLocale(e.getPlayer().getUniqueId()).islandcannotTeleport);
      e.setCancelled(true);
      if (e.getPlayer().getLocation().getBlockY() < 0) {
        e.getPlayer().setHealth(0D);
        unsetFalling(e.getPlayer().getUniqueId());
      }
      return;
    }
  }
  Island islandTo=plugin.getGrid().getProtectedIslandAt(e.getTo());
  if (e.getCause() != null && e.getCause().equals(TeleportCause.ENDER_PEARL)) {
    if (islandTo == null) {
      if (Settings.allowEnderPearls) {
        return;
      }
    }
 else {
      if (islandTo.isSpawn()) {
        if (Settings.allowEnderPearls) {
          return;
        }
      }
 else {
        if (islandTo.getIgsFlag(Flags.allowEnderPearls) || islandTo.getMembers().contains(e.getPlayer().getUniqueId())) {
          return;
        }
      }
    }
    e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).islandProtected);
    e.setCancelled(true);
    return;
  }
  Island islandFrom=plugin.getGrid().getProtectedIslandAt(e.getFrom());
  if (islandTo != null && islandTo.getOwner() != null) {
    if (islandTo != islandFrom) {
      if (islandTo.isLocked() || plugin.getPlayers().isBanned(islandTo.getOwner(),e.getPlayer().getUniqueId())) {
        e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).lockIslandLocked);
        if (!plugin.getGrid().locationIsOnIsland(e.getPlayer(),e.getTo()) && !e.getPlayer().isOp() && !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")&& !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
          e.setCancelled(true);
          return;
        }
      }
      e.getPlayer().sendMessage(plugin.myLocale(e.getPlayer().getUniqueId()).lockNowEntering.replace(""String_Node_Str"",plugin.getPlayers().getName(islandTo.getOwner())));
    }
  }
}"
34041,"/** 
 * Action is determined by where the player is
 * @param event
 */
@EventHandler(priority=EventPriority.LOWEST) public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  if (!player.getLocation().getWorld().equals(ASkyBlock.getIslandWorld()) && !player.getLocation().getWorld().equals(ASkyBlock.getNetherWorld())) {
    return;
  }
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (!inventory.getName().equals(plugin.myLocale(player.getUniqueId()).igsTitle)) {
    return;
  }
  event.setCancelled(true);
  if (slot < 0) {
    player.closeInventory();
    return;
  }
  if (clazz == null && slot > lookup.size()) {
    return;
  }
  if (slot > (lookup.size() + 1)) {
    return;
  }
  Flags flag=null;
  if (lookup.containsKey(event.getCurrentItem().getType())) {
    flag=lookup.get(event.getCurrentItem().getType());
  }
 else   if (clazz != null && event.getCurrentItem().getType() == Material.ARMOR_STAND) {
    flag=Flags.allowArmorStandUse;
  }
  Island island=plugin.getGrid().getIslandAt(player.getLocation());
  if (island != null && (island.getOwner().equals(player.getUniqueId()) || player.isOp())) {
    if (player.hasPermission(Settings.PERMPREFIX + ""String_Node_Str"" + flag.toString())) {
      if (flag.equals(Flags.allowPvP) || flag.equals(Flags.allowNetherPvP)) {
        player.closeInventory();
        if (!island.getIgsFlag(flag)) {
          if (pvpCoolDown.containsKey(player.getUniqueId())) {
            long setTime=pvpCoolDown.get(player.getUniqueId());
            long secondsLeft=Settings.pvpRestartCooldown - (System.currentTimeMillis() - setTime) / 1000;
            if (secondsLeft > 0) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"" + secondsLeft+ ""String_Node_Str"");
              return;
            }
            pvpCoolDown.remove(player.getUniqueId());
          }
          for (          Player p : plugin.getServer().getOnlinePlayers()) {
            if (island.onIsland(p.getLocation())) {
              if (flag.equals(Flags.allowNetherPvP)) {
                p.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ plugin.myLocale(p.getUniqueId()).igsNetherPVP+ ""String_Node_Str""+ plugin.myLocale(p.getUniqueId()).igsAllowed);
              }
 else {
                p.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ plugin.myLocale(p.getUniqueId()).igsPVP+ ""String_Node_Str""+ plugin.myLocale(p.getUniqueId()).igsAllowed);
              }
              p.getWorld().playSound(p.getLocation(),Sound.ARROW_HIT,1F,1F);
            }
          }
          island.toggleIgs(flag);
          plugin.getWarpPanel().updatePanel();
          return;
        }
 else {
          pvpCoolDown.put(player.getUniqueId(),System.currentTimeMillis());
          island.toggleIgs(flag);
          plugin.getWarpPanel().updatePanel();
          for (          Player p : plugin.getServer().getOnlinePlayers()) {
            if (island.onIsland(p.getLocation())) {
              if (flag.equals(Flags.allowNetherPvP)) {
                p.sendMessage(ChatColor.GREEN + plugin.myLocale(p.getUniqueId()).igsNetherPVP + ""String_Node_Str""+ plugin.myLocale(p.getUniqueId()).igsDisallowed);
              }
 else {
                p.sendMessage(ChatColor.GREEN + plugin.myLocale(p.getUniqueId()).igsPVP + ""String_Node_Str""+ plugin.myLocale(p.getUniqueId()).igsDisallowed);
              }
              p.getWorld().playSound(p.getLocation(),Sound.FIREWORK_TWINKLE,1F,1F);
            }
          }
        }
      }
 else {
        island.toggleIgs(flag);
      }
    }
    player.openInventory(islandGuardPanel(player));
  }
}","/** 
 * Action is determined by where the player is
 * @param event
 */
@EventHandler(priority=EventPriority.LOWEST) public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  if (!player.getLocation().getWorld().equals(ASkyBlock.getIslandWorld()) && !player.getLocation().getWorld().equals(ASkyBlock.getNetherWorld())) {
    return;
  }
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (!inventory.getName().equals(plugin.myLocale(player.getUniqueId()).igsTitle)) {
    return;
  }
  event.setCancelled(true);
  if (slot < 0) {
    player.closeInventory();
    return;
  }
  if (clazz == null && slot > lookup.size()) {
    return;
  }
  if (slot > (lookup.size() + 1)) {
    return;
  }
  Flags flag=null;
  if (lookup.containsKey(event.getCurrentItem().getType())) {
    flag=lookup.get(event.getCurrentItem().getType());
  }
 else   if (clazz != null && event.getCurrentItem().getType() == Material.ARMOR_STAND) {
    flag=Flags.allowArmorStandUse;
  }
  if (flag == null) {
    return;
  }
  Island island=plugin.getGrid().getIslandAt(player.getLocation());
  if (island != null && (island.getOwner().equals(player.getUniqueId()) || player.isOp())) {
    if (player.hasPermission(Settings.PERMPREFIX + ""String_Node_Str"" + flag.toString())) {
      if (flag.equals(Flags.allowPvP) || flag.equals(Flags.allowNetherPvP)) {
        player.closeInventory();
        if (!island.getIgsFlag(flag)) {
          if (pvpCoolDown.containsKey(player.getUniqueId())) {
            long setTime=pvpCoolDown.get(player.getUniqueId());
            long secondsLeft=Settings.pvpRestartCooldown - (System.currentTimeMillis() - setTime) / 1000;
            if (secondsLeft > 0) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"" + secondsLeft+ ""String_Node_Str"");
              return;
            }
            pvpCoolDown.remove(player.getUniqueId());
          }
          for (          Player p : plugin.getServer().getOnlinePlayers()) {
            if (island.onIsland(p.getLocation())) {
              if (flag.equals(Flags.allowNetherPvP)) {
                p.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ plugin.myLocale(p.getUniqueId()).igsNetherPVP+ ""String_Node_Str""+ plugin.myLocale(p.getUniqueId()).igsAllowed);
              }
 else {
                p.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ plugin.myLocale(p.getUniqueId()).igsPVP+ ""String_Node_Str""+ plugin.myLocale(p.getUniqueId()).igsAllowed);
              }
              p.getWorld().playSound(p.getLocation(),Sound.ARROW_HIT,1F,1F);
            }
          }
          island.toggleIgs(flag);
          plugin.getWarpPanel().updatePanel();
          return;
        }
 else {
          pvpCoolDown.put(player.getUniqueId(),System.currentTimeMillis());
          island.toggleIgs(flag);
          plugin.getWarpPanel().updatePanel();
          for (          Player p : plugin.getServer().getOnlinePlayers()) {
            if (island.onIsland(p.getLocation())) {
              if (flag.equals(Flags.allowNetherPvP)) {
                p.sendMessage(ChatColor.GREEN + plugin.myLocale(p.getUniqueId()).igsNetherPVP + ""String_Node_Str""+ plugin.myLocale(p.getUniqueId()).igsDisallowed);
              }
 else {
                p.sendMessage(ChatColor.GREEN + plugin.myLocale(p.getUniqueId()).igsPVP + ""String_Node_Str""+ plugin.myLocale(p.getUniqueId()).igsDisallowed);
              }
              p.getWorld().playSound(p.getLocation(),Sound.FIREWORK_TWINKLE,1F,1F);
            }
          }
        }
      }
 else {
        island.toggleIgs(flag);
      }
    }
    player.openInventory(islandGuardPanel(player));
  }
}"
34042,"@EventHandler(priority=EventPriority.LOWEST) public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  ItemStack clicked=event.getCurrentItem();
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (inventory.getName().equalsIgnoreCase(plugin.myLocale().igsTitle)) {
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    event.setCancelled(true);
    return;
  }
  if (inventory.getName().equals(plugin.myLocale(player.getUniqueId()).challengesguiTitle)) {
    event.setCancelled(true);
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    List<CPItem> challenges=plugin.getChallenges().getCP(player);
    if (challenges == null) {
      plugin.getLogger().warning(""String_Node_Str"");
      player.closeInventory();
      player.performCommand(Settings.CHALLENGECOMMAND);
      return;
    }
    if (slot >= 0 && slot < challenges.size()) {
      CPItem item=challenges.get(slot);
      if (clicked.equals(item.getItem())) {
        if (item.getNextSection() != null) {
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player,item.getNextSection()));
        }
 else         if (item.getCommand() != null) {
          player.performCommand(item.getCommand());
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player));
        }
      }
    }
  }
  if (miniShop != null && inventory.getName().equals(miniShop.getName())) {
    String message=""String_Node_Str"";
    event.setCancelled(true);
    if (!Settings.useEconomy || slot == -999) {
      player.closeInventory();
      return;
    }
    if (store.containsKey(slot)) {
      MiniShopItem item=store.get(slot);
      if (clicked.equals(item.getItem())) {
        if (event.getClick().equals(ClickType.LEFT)) {
          if (item.getPrice() > 0D) {
            if (!VaultHelper.econ.has(player,Settings.worldName,item.getPrice())) {
              message=(plugin.myLocale().minishopYouCannotAfford).replace(""String_Node_Str"",item.getDescription());
            }
 else {
              EconomyResponse r=VaultHelper.econ.withdrawPlayer(player,Settings.worldName,item.getPrice());
              if (r.transactionSuccess()) {
                message=plugin.myLocale().minishopYouBought.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
                message=message.replace(""String_Node_Str"",item.getDescription());
                message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getPrice()));
                player.getInventory().addItem(item.getItemClean());
              }
 else {
                message=(plugin.myLocale().minishopBuyProblem).replace(""String_Node_Str"",item.getDescription());
              }
            }
          }
        }
 else         if (event.getClick().equals(ClickType.RIGHT) && allowSelling && item.getSellPrice() > 0D) {
          if (player.getInventory().containsAtLeast(item.getItemClean(),item.getQuantity())) {
            player.getInventory().removeItem(item.getItemClean());
            VaultHelper.econ.depositPlayer(player,Settings.worldName,item.getSellPrice());
            message=plugin.myLocale().minishopYouSold.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
            message=message.replace(""String_Node_Str"",item.getDescription());
            message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getSellPrice()));
          }
 else {
            message=(plugin.myLocale().minishopSellProblem).replace(""String_Node_Str"",item.getDescription());
            ;
          }
        }
        if (!message.isEmpty()) {
          player.sendMessage(message);
        }
      }
    }
  }
  for (  String panelName : controlPanel.keySet()) {
    if (inventory.getName().equals(panelName)) {
      if (slot == -999) {
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
      HashMap<Integer,CPItem> thisPanel=panels.get(panelName);
      if (slot >= 0 && slot < thisPanel.size()) {
        String command=thisPanel.get(slot).getCommand();
        String nextSection=ChatColor.translateAlternateColorCodes('&',thisPanel.get(slot).getNextSection());
        if (!command.isEmpty()) {
          player.closeInventory();
          event.setCancelled(true);
          player.performCommand(command);
          return;
        }
        if (!nextSection.isEmpty()) {
          player.closeInventory();
          Inventory next=controlPanel.get(nextSection);
          if (next == null) {
          }
          player.openInventory(next);
          event.setCancelled(true);
          return;
        }
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
    }
  }
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=false) public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  ItemStack clicked=event.getCurrentItem();
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (inventory.getName().equalsIgnoreCase(plugin.myLocale().igsTitle)) {
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    event.setCancelled(true);
    return;
  }
  if (inventory.getName().equals(plugin.myLocale(player.getUniqueId()).challengesguiTitle)) {
    event.setCancelled(true);
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    List<CPItem> challenges=plugin.getChallenges().getCP(player);
    if (challenges == null) {
      plugin.getLogger().warning(""String_Node_Str"");
      player.closeInventory();
      player.performCommand(Settings.CHALLENGECOMMAND);
      return;
    }
    if (slot >= 0 && slot < challenges.size()) {
      CPItem item=challenges.get(slot);
      if (clicked.equals(item.getItem())) {
        if (item.getNextSection() != null) {
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player,item.getNextSection()));
        }
 else         if (item.getCommand() != null) {
          player.performCommand(item.getCommand());
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player));
        }
      }
    }
  }
  if (miniShop != null && inventory.getName().equals(miniShop.getName())) {
    String message=""String_Node_Str"";
    event.setCancelled(true);
    if (!Settings.useEconomy || slot == -999) {
      player.closeInventory();
      return;
    }
    if (store.containsKey(slot)) {
      MiniShopItem item=store.get(slot);
      if (clicked.equals(item.getItem())) {
        if (event.getClick().equals(ClickType.LEFT)) {
          if (item.getPrice() > 0D) {
            if (!VaultHelper.econ.has(player,Settings.worldName,item.getPrice())) {
              message=(plugin.myLocale().minishopYouCannotAfford).replace(""String_Node_Str"",item.getDescription());
            }
 else {
              EconomyResponse r=VaultHelper.econ.withdrawPlayer(player,Settings.worldName,item.getPrice());
              if (r.transactionSuccess()) {
                message=plugin.myLocale().minishopYouBought.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
                message=message.replace(""String_Node_Str"",item.getDescription());
                message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getPrice()));
                player.getInventory().addItem(item.getItemClean());
              }
 else {
                message=(plugin.myLocale().minishopBuyProblem).replace(""String_Node_Str"",item.getDescription());
              }
            }
          }
        }
 else         if (event.getClick().equals(ClickType.RIGHT) && allowSelling && item.getSellPrice() > 0D) {
          if (player.getInventory().containsAtLeast(item.getItemClean(),item.getQuantity())) {
            player.getInventory().removeItem(item.getItemClean());
            VaultHelper.econ.depositPlayer(player,Settings.worldName,item.getSellPrice());
            message=plugin.myLocale().minishopYouSold.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
            message=message.replace(""String_Node_Str"",item.getDescription());
            message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getSellPrice()));
          }
 else {
            message=(plugin.myLocale().minishopSellProblem).replace(""String_Node_Str"",item.getDescription());
            ;
          }
        }
        if (!message.isEmpty()) {
          player.sendMessage(message);
        }
      }
    }
  }
  for (  String panelName : controlPanel.keySet()) {
    if (inventory.getName().equals(panelName)) {
      if (slot == -999) {
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
      HashMap<Integer,CPItem> thisPanel=panels.get(panelName);
      if (slot >= 0 && slot < thisPanel.size()) {
        String command=thisPanel.get(slot).getCommand();
        String nextSection=ChatColor.translateAlternateColorCodes('&',thisPanel.get(slot).getNextSection());
        if (!command.isEmpty()) {
          player.closeInventory();
          event.setCancelled(true);
          player.performCommand(command);
          return;
        }
        if (!nextSection.isEmpty()) {
          player.closeInventory();
          Inventory next=controlPanel.get(nextSection);
          if (next == null) {
          }
          player.openInventory(next);
          event.setCancelled(true);
          return;
        }
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
    }
  }
}"
34043,"/** 
 * Creates the top ten list from scratch. Does not get the level of each island. Just takes the level from the player's file. Runs asynchronously from the main thread.
 * @param sender
 */
public static void topTenCreate(final CommandSender sender){
  plugin.getServer().getScheduler().runTaskAsynchronously(plugin,new Runnable(){
    @Override public void run(){
      YamlConfiguration player=new YamlConfiguration();
      int index=0;
      for (      final File f : plugin.getPlayersFolder().listFiles()) {
        String fileName=f.getName();
        if (fileName.endsWith(""String_Node_Str"")) {
          try {
            String playerUUIDString=fileName.substring(0,fileName.length() - 4);
            final UUID playerUUID=UUID.fromString(playerUUIDString);
            if (playerUUID == null) {
              plugin.getLogger().warning(""String_Node_Str"");
              plugin.getLogger().info(""String_Node_Str"" + playerUUIDString);
            }
            player.load(f);
            index++;
            if (index % 1000 == 0) {
              plugin.getLogger().info(""String_Node_Str"" + index + ""String_Node_Str"");
            }
            int islandLevel=player.getInt(""String_Node_Str"",0);
            String teamLeaderUUID=player.getString(""String_Node_Str"",""String_Node_Str"");
            if (islandLevel > 0) {
              if (!player.getBoolean(""String_Node_Str"")) {
                topTenAddEntry(playerUUID,islandLevel);
              }
 else               if (!teamLeaderUUID.isEmpty()) {
                topTenAddEntry(playerUUID,islandLevel);
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
      plugin.getLogger().info(""String_Node_Str"" + index + ""String_Node_Str"");
      topTenSave();
      plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          if (sender != null) {
            sender.sendMessage(ChatColor.YELLOW + plugin.myLocale().adminTopTenfinished);
          }
 else {
            plugin.getLogger().warning(""String_Node_Str"");
          }
        }
      }
);
    }
  }
);
}","/** 
 * Creates the top ten list from scratch. Does not get the level of each island. Just takes the level from the player's file. Runs asynchronously from the main thread.
 * @param sender
 */
public static void topTenCreate(final CommandSender sender){
  plugin.getServer().getScheduler().runTaskAsynchronously(plugin,new Runnable(){
    @Override public void run(){
      YamlConfiguration player=new YamlConfiguration();
      int index=0;
      for (      final File f : plugin.getPlayersFolder().listFiles()) {
        String fileName=f.getName();
        if (fileName.endsWith(""String_Node_Str"")) {
          try {
            String playerUUIDString=fileName.substring(0,fileName.length() - 4);
            final UUID playerUUID=UUID.fromString(playerUUIDString);
            if (playerUUID == null) {
              plugin.getLogger().warning(""String_Node_Str"");
              plugin.getLogger().info(""String_Node_Str"" + playerUUIDString);
            }
            player.load(f);
            index++;
            if (index % 1000 == 0) {
              plugin.getLogger().info(""String_Node_Str"" + index + ""String_Node_Str"");
            }
            int islandLevel=player.getInt(""String_Node_Str"",0);
            String teamLeaderUUID=player.getString(""String_Node_Str"",""String_Node_Str"");
            if (islandLevel > 0) {
              if (!player.getBoolean(""String_Node_Str"")) {
                topTenAddEntry(playerUUID,islandLevel);
              }
 else               if (!teamLeaderUUID.isEmpty() && teamLeaderUUID.equals(playerUUIDString)) {
                topTenAddEntry(playerUUID,islandLevel);
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
      plugin.getLogger().info(""String_Node_Str"" + index + ""String_Node_Str"");
      topTenSave();
      plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          if (sender != null) {
            sender.sendMessage(ChatColor.YELLOW + plugin.myLocale().adminTopTenfinished);
          }
 else {
            plugin.getLogger().warning(""String_Node_Str"");
          }
        }
      }
);
    }
  }
);
}"
34044,"/** 
 * Checks if a player has enough for a challenge. Supports two types of checks, inventory and island. Removes items if required.
 * @param player
 * @param challenge
 * @param type
 * @return true if the player has everything required
 */
@SuppressWarnings(""String_Node_Str"") public boolean hasRequired(final Player player,final String challenge,final String type){
  double moneyReq=0D;
  if (Settings.useEconomy) {
    moneyReq=getChallengeConfig().getDouble(""String_Node_Str"" + challenge + ""String_Node_Str"",0D);
    if (moneyReq > 0D) {
      if (!VaultHelper.econ.has(player,moneyReq)) {
        player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotEnoughItems);
        player.sendMessage(ChatColor.RED + getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""));
        return false;
      }
    }
  }
  final String[] reqList=getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").split(""String_Node_Str"");
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    List<ItemStack> toBeRemoved=new ArrayList<ItemStack>();
    Material reqItem;
    int reqAmount=0;
    for (    final String s : reqList) {
      final String[] part=s.split(""String_Node_Str"");
      if (part.length == 2) {
        try {
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
          if (StringUtils.isNumeric(part[0])) {
            reqItem=Material.getMaterial(Integer.parseInt(part[0]));
          }
 else {
            reqItem=Material.getMaterial(part[0].toUpperCase());
          }
          reqAmount=Integer.parseInt(part[1]);
          ItemStack item=new ItemStack(reqItem);
          if (!player.getInventory().contains(reqItem)) {
            return false;
          }
 else {
            int amount=0;
            for (            Entry<Integer,? extends ItemStack> en : player.getInventory().all(reqItem).entrySet()) {
              ItemStack i=en.getValue();
              if (i.getDurability() == 0 || (reqItem == Material.MAP && i.getType() == Material.MAP)) {
                i.setItemMeta(null);
                player.getInventory().setItem(en.getKey(),i);
                if ((amount + i.getAmount()) < reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                }
 else                 if ((amount + i.getAmount()) == reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                  break;
                }
 else {
                  item.setAmount(reqAmount - amount);
                  item.setDurability(i.getDurability());
                  toBeRemoved.add(item);
                  amount+=i.getAmount();
                  break;
                }
              }
            }
            if (amount < reqAmount) {
              return false;
            }
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
          String materialList=""String_Node_Str"";
          boolean hint=false;
          for (          Material m : Material.values()) {
            materialList+=m.toString() + ""String_Node_Str"";
            if (m.toString().contains(s.substring(0,3).toUpperCase())) {
              plugin.getLogger().severe(""String_Node_Str"" + m.toString() + ""String_Node_Str"");
              hint=true;
            }
          }
          if (!hint) {
            plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
            plugin.getLogger().severe(materialList.substring(0,materialList.length() - 1));
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"");
          }
          return false;
        }
      }
 else       if (part.length == 3) {
        try {
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
          if (StringUtils.isNumeric(part[0])) {
            reqItem=Material.getMaterial(Integer.parseInt(part[0]));
          }
 else {
            reqItem=Material.getMaterial(part[0].toUpperCase());
          }
          reqAmount=Integer.parseInt(part[2]);
          int reqDurability=Integer.parseInt(part[1]);
          int count=reqAmount;
          ItemStack item=new ItemStack(reqItem);
          if (reqItem.equals(Material.POTION)) {
            ItemStack[] playerInv=player.getInventory().getContents();
            for (            ItemStack i : playerInv) {
              if (i != null && i.getType().equals(Material.POTION)) {
                if (i.getDurability() == reqDurability) {
                  item=i.clone();
                  if (item.getAmount() > reqAmount) {
                    item.setAmount(reqAmount);
                  }
                  count=count - item.getAmount();
                  toBeRemoved.add(item);
                }
              }
              if (count == 0) {
                break;
              }
            }
            if (count > 0) {
              return false;
            }
          }
 else {
            item.setDurability((short)reqDurability);
            int amount=0;
            for (            Entry<Integer,? extends ItemStack> en : player.getInventory().all(reqItem).entrySet()) {
              ItemStack i=en.getValue();
              if (i.getDurability() == reqDurability) {
                i.setItemMeta(null);
                player.getInventory().setItem(en.getKey(),i);
                if ((amount + i.getAmount()) < reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                }
 else                 if ((amount + i.getAmount()) == reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                  break;
                }
 else {
                  item.setAmount(reqAmount - amount);
                  item.setDurability(i.getDurability());
                  toBeRemoved.add(item);
                  amount+=i.getAmount();
                  break;
                }
              }
            }
            if (amount < reqAmount) {
              return false;
            }
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            plugin.getLogger().severe(""String_Node_Str"");
            for (            PotionType p : PotionType.values()) {
              plugin.getLogger().info(p.toString() + ""String_Node_Str"" + p.getDamageValue());
            }
          }
 else {
            String materialList=""String_Node_Str"";
            boolean hint=false;
            for (            Material m : Material.values()) {
              materialList+=m.toString() + ""String_Node_Str"";
              if (m.toString().contains(s.substring(0,3))) {
                plugin.getLogger().severe(""String_Node_Str"" + m.toString() + ""String_Node_Str"");
                hint=true;
              }
            }
            if (!hint) {
              plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
              plugin.getLogger().severe(materialList.substring(0,materialList.length() - 1));
            }
 else {
              plugin.getLogger().severe(""String_Node_Str"");
            }
            return false;
          }
          return false;
        }
      }
 else       if (part.length == 6) {
        try {
          if (StringUtils.isNumeric(part[0])) {
            reqItem=Material.getMaterial(Integer.parseInt(part[0]));
          }
 else {
            reqItem=Material.getMaterial(part[0].toUpperCase());
          }
          reqAmount=Integer.parseInt(part[5]);
          ItemStack item=new ItemStack(reqItem);
          int count=reqAmount;
          if (reqItem == Material.POTION) {
            ItemStack[] playerInv=player.getInventory().getContents();
            for (            ItemStack i : playerInv) {
              if (i != null && i.getType().equals(Material.POTION)) {
                Potion p=fromDamage(i.getDurability());
                PotionType typeCheck=PotionType.valueOf(part[1].toUpperCase());
                if (p.getType().equals(typeCheck)) {
                  if (part[2].isEmpty() || p.getLevel() == Integer.valueOf(part[2])) {
                    if (part[4].isEmpty() || (p.isSplash() && part[4].equalsIgnoreCase(""String_Node_Str"")) || (!p.isSplash() && part[4].equalsIgnoreCase(""String_Node_Str""))) {
                      if (part[3].isEmpty() || (p.hasExtendedDuration() && part[3].equalsIgnoreCase(""String_Node_Str"")) || (!p.hasExtendedDuration() && part[3].equalsIgnoreCase(""String_Node_Str""))) {
                        item=i.clone();
                        if (item.getAmount() > reqAmount) {
                          item.setAmount(reqAmount);
                        }
                        count=count - item.getAmount();
                        toBeRemoved.add(item);
                      }
                    }
                  }
                }
              }
              if (count <= 0) {
                break;
              }
            }
            if (count > 0) {
              return false;
            }
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            String potionNames=""String_Node_Str"";
            for (            PotionType p : PotionType.values()) {
              potionNames+=p.toString() + ""String_Node_Str"";
            }
            plugin.getLogger().severe(potionNames.substring(0,potionNames.length() - 2));
          }
          return false;
        }
      }
    }
    if (getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"")) {
      for (      ItemStack i : toBeRemoved) {
        HashMap<Integer,ItemStack> leftOver=player.getInventory().removeItem(i);
        if (!leftOver.isEmpty()) {
          plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
          for (          ItemStack left : leftOver.values()) {
            plugin.getLogger().info(left.toString());
          }
          return false;
        }
      }
      if (moneyReq > 0D) {
        EconomyResponse er=VaultHelper.econ.withdrawPlayer(player,moneyReq);
        if (!er.transactionSuccess()) {
          plugin.getLogger().warning(""String_Node_Str"" + VaultHelper.econ.format(moneyReq) + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ challenge);
          plugin.getLogger().warning(""String_Node_Str"" + VaultHelper.econ.format(VaultHelper.econ.getBalance(player)));
        }
      }
    }
    return true;
  }
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    final HashMap<Material,Integer> neededItem=new HashMap<Material,Integer>();
    final HashMap<EntityType,Integer> neededEntities=new HashMap<EntityType,Integer>();
    for (int i=0; i < reqList.length; i++) {
      final String[] sPart=reqList[i].split(""String_Node_Str"");
      try {
        final int qty=Integer.parseInt(sPart[1]);
        boolean isEntity=false;
        for (        EntityType entityType : EntityType.values()) {
          if (entityType.toString().equalsIgnoreCase(sPart[0])) {
            isEntity=true;
            break;
          }
        }
        if (isEntity) {
          EntityType entityType=EntityType.valueOf(sPart[0].toUpperCase());
          if (entityType != null) {
            neededEntities.put(entityType,qty);
          }
        }
 else {
          Material item;
          if (StringUtils.isNumeric(sPart[0])) {
            item=Material.getMaterial(Integer.parseInt(sPart[0]));
          }
 else {
            item=Material.getMaterial(sPart[0].toUpperCase());
          }
          if (item != null) {
            neededItem.put(item,qty);
          }
 else {
            plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str"");
            return false;
          }
        }
      }
 catch (      Exception intEx) {
        plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str"");
        return false;
      }
    }
    final Location l=player.getLocation();
    final int px=l.getBlockX();
    final int py=l.getBlockY();
    final int pz=l.getBlockZ();
    for (int x=-10; x <= 10; x++) {
      for (int y=-10; y <= 10; y++) {
        for (int z=-10; z <= 10; z++) {
          final Material b=new Location(l.getWorld(),px + x,py + y,pz + z).getBlock().getType();
          if (neededItem.containsKey(b)) {
            if (neededItem.get(b) == 1) {
              neededItem.remove(b);
            }
 else {
              neededItem.put(b,neededItem.get(b) - 1);
            }
          }
        }
      }
    }
    if (!neededItem.isEmpty()) {
      for (      Material missing : neededItem.keySet()) {
        player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorYouAreMissing + ""String_Node_Str""+ neededItem.get(missing)+ ""String_Node_Str""+ Util.prettifyText(missing.toString()));
      }
      return false;
    }
 else {
      for (      Entity entity : player.getNearbyEntities(10,10,10)) {
        if (neededEntities.containsKey(entity.getType())) {
          if (neededEntities.get(entity.getType()) == 1) {
            neededEntities.remove(entity.getType());
          }
 else {
            neededEntities.put(entity.getType(),neededEntities.get(entity.getType()) - 1);
          }
        }
 else {
        }
      }
      if (neededEntities.isEmpty()) {
        return true;
      }
 else {
        for (        EntityType missing : neededEntities.keySet()) {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorYouAreMissing + ""String_Node_Str""+ neededEntities.get(missing)+ ""String_Node_Str""+ Util.prettifyText(missing.toString()));
        }
        return false;
      }
    }
  }
  return true;
}","/** 
 * Checks if a player has enough for a challenge. Supports two types of checks, inventory and island. Removes items if required.
 * @param player
 * @param challenge
 * @param type
 * @return true if the player has everything required
 */
@SuppressWarnings(""String_Node_Str"") public boolean hasRequired(final Player player,final String challenge,final String type){
  double moneyReq=0D;
  if (Settings.useEconomy) {
    moneyReq=getChallengeConfig().getDouble(""String_Node_Str"" + challenge + ""String_Node_Str"",0D);
    if (moneyReq > 0D) {
      if (!VaultHelper.econ.has(player,Settings.worldName,moneyReq)) {
        player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotEnoughItems);
        player.sendMessage(ChatColor.RED + getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""));
        return false;
      }
    }
  }
  final String[] reqList=getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").split(""String_Node_Str"");
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    List<ItemStack> toBeRemoved=new ArrayList<ItemStack>();
    Material reqItem;
    int reqAmount=0;
    for (    final String s : reqList) {
      final String[] part=s.split(""String_Node_Str"");
      if (part.length == 2) {
        try {
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
          if (StringUtils.isNumeric(part[0])) {
            reqItem=Material.getMaterial(Integer.parseInt(part[0]));
          }
 else {
            reqItem=Material.getMaterial(part[0].toUpperCase());
          }
          reqAmount=Integer.parseInt(part[1]);
          ItemStack item=new ItemStack(reqItem);
          if (!player.getInventory().contains(reqItem)) {
            return false;
          }
 else {
            int amount=0;
            for (            Entry<Integer,? extends ItemStack> en : player.getInventory().all(reqItem).entrySet()) {
              ItemStack i=en.getValue();
              if (i.getDurability() == 0 || (reqItem == Material.MAP && i.getType() == Material.MAP)) {
                i.setItemMeta(null);
                player.getInventory().setItem(en.getKey(),i);
                if ((amount + i.getAmount()) < reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                }
 else                 if ((amount + i.getAmount()) == reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                  break;
                }
 else {
                  item.setAmount(reqAmount - amount);
                  item.setDurability(i.getDurability());
                  toBeRemoved.add(item);
                  amount+=i.getAmount();
                  break;
                }
              }
            }
            if (amount < reqAmount) {
              return false;
            }
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
          String materialList=""String_Node_Str"";
          boolean hint=false;
          for (          Material m : Material.values()) {
            materialList+=m.toString() + ""String_Node_Str"";
            if (m.toString().contains(s.substring(0,3).toUpperCase())) {
              plugin.getLogger().severe(""String_Node_Str"" + m.toString() + ""String_Node_Str"");
              hint=true;
            }
          }
          if (!hint) {
            plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
            plugin.getLogger().severe(materialList.substring(0,materialList.length() - 1));
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"");
          }
          return false;
        }
      }
 else       if (part.length == 3) {
        try {
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
          if (StringUtils.isNumeric(part[0])) {
            reqItem=Material.getMaterial(Integer.parseInt(part[0]));
          }
 else {
            reqItem=Material.getMaterial(part[0].toUpperCase());
          }
          reqAmount=Integer.parseInt(part[2]);
          int reqDurability=Integer.parseInt(part[1]);
          int count=reqAmount;
          ItemStack item=new ItemStack(reqItem);
          if (reqItem.equals(Material.POTION)) {
            ItemStack[] playerInv=player.getInventory().getContents();
            for (            ItemStack i : playerInv) {
              if (i != null && i.getType().equals(Material.POTION)) {
                if (i.getDurability() == reqDurability) {
                  item=i.clone();
                  if (item.getAmount() > reqAmount) {
                    item.setAmount(reqAmount);
                  }
                  count=count - item.getAmount();
                  toBeRemoved.add(item);
                }
              }
              if (count == 0) {
                break;
              }
            }
            if (count > 0) {
              return false;
            }
          }
 else {
            item.setDurability((short)reqDurability);
            int amount=0;
            for (            Entry<Integer,? extends ItemStack> en : player.getInventory().all(reqItem).entrySet()) {
              ItemStack i=en.getValue();
              if (i.getDurability() == reqDurability) {
                i.setItemMeta(null);
                player.getInventory().setItem(en.getKey(),i);
                if ((amount + i.getAmount()) < reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                }
 else                 if ((amount + i.getAmount()) == reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                  break;
                }
 else {
                  item.setAmount(reqAmount - amount);
                  item.setDurability(i.getDurability());
                  toBeRemoved.add(item);
                  amount+=i.getAmount();
                  break;
                }
              }
            }
            if (amount < reqAmount) {
              return false;
            }
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            plugin.getLogger().severe(""String_Node_Str"");
            for (            PotionType p : PotionType.values()) {
              plugin.getLogger().info(p.toString() + ""String_Node_Str"" + p.getDamageValue());
            }
          }
 else {
            String materialList=""String_Node_Str"";
            boolean hint=false;
            for (            Material m : Material.values()) {
              materialList+=m.toString() + ""String_Node_Str"";
              if (m.toString().contains(s.substring(0,3))) {
                plugin.getLogger().severe(""String_Node_Str"" + m.toString() + ""String_Node_Str"");
                hint=true;
              }
            }
            if (!hint) {
              plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
              plugin.getLogger().severe(materialList.substring(0,materialList.length() - 1));
            }
 else {
              plugin.getLogger().severe(""String_Node_Str"");
            }
            return false;
          }
          return false;
        }
      }
 else       if (part.length == 6) {
        try {
          if (StringUtils.isNumeric(part[0])) {
            reqItem=Material.getMaterial(Integer.parseInt(part[0]));
          }
 else {
            reqItem=Material.getMaterial(part[0].toUpperCase());
          }
          reqAmount=Integer.parseInt(part[5]);
          ItemStack item=new ItemStack(reqItem);
          int count=reqAmount;
          if (reqItem == Material.POTION) {
            ItemStack[] playerInv=player.getInventory().getContents();
            for (            ItemStack i : playerInv) {
              if (i != null && i.getType().equals(Material.POTION)) {
                Potion p=fromDamage(i.getDurability());
                PotionType typeCheck=PotionType.valueOf(part[1].toUpperCase());
                if (p.getType().equals(typeCheck)) {
                  if (part[2].isEmpty() || p.getLevel() == Integer.valueOf(part[2])) {
                    if (part[4].isEmpty() || (p.isSplash() && part[4].equalsIgnoreCase(""String_Node_Str"")) || (!p.isSplash() && part[4].equalsIgnoreCase(""String_Node_Str""))) {
                      if (part[3].isEmpty() || (p.hasExtendedDuration() && part[3].equalsIgnoreCase(""String_Node_Str"")) || (!p.hasExtendedDuration() && part[3].equalsIgnoreCase(""String_Node_Str""))) {
                        item=i.clone();
                        if (item.getAmount() > reqAmount) {
                          item.setAmount(reqAmount);
                        }
                        count=count - item.getAmount();
                        toBeRemoved.add(item);
                      }
                    }
                  }
                }
              }
              if (count <= 0) {
                break;
              }
            }
            if (count > 0) {
              return false;
            }
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            plugin.getLogger().severe(""String_Node_Str"");
            String potionNames=""String_Node_Str"";
            for (            PotionType p : PotionType.values()) {
              potionNames+=p.toString() + ""String_Node_Str"";
            }
            plugin.getLogger().severe(potionNames.substring(0,potionNames.length() - 2));
          }
          return false;
        }
      }
    }
    if (getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"")) {
      for (      ItemStack i : toBeRemoved) {
        HashMap<Integer,ItemStack> leftOver=player.getInventory().removeItem(i);
        if (!leftOver.isEmpty()) {
          plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
          for (          ItemStack left : leftOver.values()) {
            plugin.getLogger().info(left.toString());
          }
          return false;
        }
      }
      if (moneyReq > 0D) {
        EconomyResponse er=VaultHelper.econ.withdrawPlayer(player,moneyReq);
        if (!er.transactionSuccess()) {
          plugin.getLogger().warning(""String_Node_Str"" + VaultHelper.econ.format(moneyReq) + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ challenge);
          plugin.getLogger().warning(""String_Node_Str"" + VaultHelper.econ.format(VaultHelper.econ.getBalance(player)));
        }
      }
    }
    return true;
  }
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    final HashMap<Material,Integer> neededItem=new HashMap<Material,Integer>();
    final HashMap<EntityType,Integer> neededEntities=new HashMap<EntityType,Integer>();
    for (int i=0; i < reqList.length; i++) {
      final String[] sPart=reqList[i].split(""String_Node_Str"");
      try {
        final int qty=Integer.parseInt(sPart[1]);
        boolean isEntity=false;
        for (        EntityType entityType : EntityType.values()) {
          if (entityType.toString().equalsIgnoreCase(sPart[0])) {
            isEntity=true;
            break;
          }
        }
        if (isEntity) {
          EntityType entityType=EntityType.valueOf(sPart[0].toUpperCase());
          if (entityType != null) {
            neededEntities.put(entityType,qty);
          }
        }
 else {
          Material item;
          if (StringUtils.isNumeric(sPart[0])) {
            item=Material.getMaterial(Integer.parseInt(sPart[0]));
          }
 else {
            item=Material.getMaterial(sPart[0].toUpperCase());
          }
          if (item != null) {
            neededItem.put(item,qty);
          }
 else {
            plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str"");
            return false;
          }
        }
      }
 catch (      Exception intEx) {
        plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str"");
        return false;
      }
    }
    final Location l=player.getLocation();
    final int px=l.getBlockX();
    final int py=l.getBlockY();
    final int pz=l.getBlockZ();
    for (int x=-10; x <= 10; x++) {
      for (int y=-10; y <= 10; y++) {
        for (int z=-10; z <= 10; z++) {
          final Material b=new Location(l.getWorld(),px + x,py + y,pz + z).getBlock().getType();
          if (neededItem.containsKey(b)) {
            if (neededItem.get(b) == 1) {
              neededItem.remove(b);
            }
 else {
              neededItem.put(b,neededItem.get(b) - 1);
            }
          }
        }
      }
    }
    if (!neededItem.isEmpty()) {
      for (      Material missing : neededItem.keySet()) {
        player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorYouAreMissing + ""String_Node_Str""+ neededItem.get(missing)+ ""String_Node_Str""+ Util.prettifyText(missing.toString()));
      }
      return false;
    }
 else {
      for (      Entity entity : player.getNearbyEntities(10,10,10)) {
        if (neededEntities.containsKey(entity.getType())) {
          if (neededEntities.get(entity.getType()) == 1) {
            neededEntities.remove(entity.getType());
          }
 else {
            neededEntities.put(entity.getType(),neededEntities.get(entity.getType()) - 1);
          }
        }
 else {
        }
      }
      if (neededEntities.isEmpty()) {
        return true;
      }
 else {
        for (        EntityType missing : neededEntities.keySet()) {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorYouAreMissing + ""String_Node_Str""+ neededEntities.get(missing)+ ""String_Node_Str""+ Util.prettifyText(missing.toString()));
        }
        return false;
      }
    }
  }
  return true;
}"
34045,"@EventHandler public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  UUID playerUUID=player.getUniqueId();
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (!inventory.getName().equals(plugin.myLocale().biomePanelTitle)) {
    return;
  }
  if (slot == -999) {
    player.closeInventory();
    event.setCancelled(true);
    return;
  }
  List<BiomeItem> thisPanel=biomeItems.get(player.getUniqueId());
  if (thisPanel == null) {
    player.closeInventory();
    event.setCancelled(true);
    return;
  }
  if (slot >= 0 && slot < thisPanel.size()) {
    event.setCancelled(true);
    Biome biome=thisPanel.get(slot).getBiome();
    if (biome != null) {
      event.setCancelled(true);
      if (Settings.useEconomy) {
        double cost=thisPanel.get(slot).getPrice();
        if (cost > 0D) {
          if (!VaultHelper.econ.has(player,cost)) {
            player.sendMessage(ChatColor.RED + plugin.myLocale().minishopYouCannotAfford.replace(""String_Node_Str"",VaultHelper.econ.format(cost)));
            return;
          }
 else {
            VaultHelper.econ.withdrawPlayer(player,Settings.worldName,cost);
            player.sendMessage(ChatColor.GREEN + plugin.myLocale().biomeYouBought.replace(""String_Node_Str"",VaultHelper.econ.format(cost)));
          }
        }
      }
    }
    player.closeInventory();
    if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
      setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
    }
 else {
      setIslandBiome(plugin.getPlayers().getIslandLocation(player.getUniqueId()),biome);
    }
    player.sendMessage(ChatColor.GREEN + plugin.myLocale().biomeSet.replace(""String_Node_Str"",thisPanel.get(slot).getName()));
  }
  return;
}","@EventHandler public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  UUID playerUUID=player.getUniqueId();
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (!inventory.getName().equals(plugin.myLocale().biomePanelTitle)) {
    return;
  }
  if (slot == -999) {
    player.closeInventory();
    event.setCancelled(true);
    return;
  }
  List<BiomeItem> thisPanel=biomeItems.get(player.getUniqueId());
  if (thisPanel == null) {
    player.closeInventory();
    event.setCancelled(true);
    return;
  }
  if (slot >= 0 && slot < thisPanel.size()) {
    event.setCancelled(true);
    Biome biome=thisPanel.get(slot).getBiome();
    if (biome != null) {
      event.setCancelled(true);
      if (Settings.useEconomy) {
        double cost=thisPanel.get(slot).getPrice();
        if (cost > 0D) {
          if (!VaultHelper.econ.has(player,Settings.worldName,cost)) {
            player.sendMessage(ChatColor.RED + plugin.myLocale().minishopYouCannotAfford.replace(""String_Node_Str"",VaultHelper.econ.format(cost)));
            return;
          }
 else {
            VaultHelper.econ.withdrawPlayer(player,Settings.worldName,cost);
            player.sendMessage(ChatColor.GREEN + plugin.myLocale().biomeYouBought.replace(""String_Node_Str"",VaultHelper.econ.format(cost)));
          }
        }
      }
    }
    player.closeInventory();
    if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
      setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
    }
 else {
      setIslandBiome(plugin.getPlayers().getIslandLocation(player.getUniqueId()),biome);
    }
    player.sendMessage(ChatColor.GREEN + plugin.myLocale().biomeSet.replace(""String_Node_Str"",thisPanel.get(slot).getName()));
  }
  return;
}"
34046,"@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      chooseIsland(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !PlayerEvents.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (!Settings.teamChat) {
        return false;
      }
      if (plugin.getPlayers().inTeam(playerUUID)) {
        boolean online=false;
        for (        UUID teamMember : plugin.getPlayers().getMembers(playerUUID)) {
          if (!teamMember.equals(playerUUID) && plugin.getServer().getPlayer(teamMember) != null) {
            online=true;
          }
        }
        if (!online) {
          player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).teamChatNoTeamAround);
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOff);
          plugin.getChatListener().unSetPlayer(playerUUID);
          return true;
        }
        if (plugin.getChatListener().isTeamChat(playerUUID)) {
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOff);
          plugin.getChatListener().unSetPlayer(playerUUID);
        }
 else {
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOn);
          plugin.getChatListener().setPlayer(playerUUID);
        }
      }
 else {
        player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).teamChatNoTeam);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
    }
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(plugin.myLocale(playerUUID).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(playerUUID).islandhelpBan);
  }
 else {
    player.sendMessage(plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(plugin.myLocale(playerUUID).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(playerUUID).islandhelpUnban);
  }
 else {
    player.sendMessage(plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!pendingNewIslandSelection.contains(playerUUID)) {
    return false;
  }
  pendingNewIslandSelection.remove(playerUUID);
  Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
  newIsland(player);
  if (resettingIsland.contains(playerUUID)) {
    resettingIsland.remove(playerUUID);
    resetPlayer(player,oldIsland);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(SettingsPanel.islandGuardPanel());
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    return true;
  }
  Island island=plugin.getGrid().getIsland(playerUUID);
  if (island == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
    return true;
  }
 else {
    if (!island.isLocked()) {
      for (      Player target : plugin.getServer().getOnlinePlayers()) {
        if (!player.equals(target) && !target.isOp() && !VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")&& (target.getWorld().equals(ASkyBlock.getIslandWorld()) || target.getWorld().equals(ASkyBlock.getNetherWorld()))&& plugin.getGrid().isOnIsland(player,target)&& !CoopPlay.getInstance().getCoopPlayers(island.getCenter()).contains(target.getUniqueId())) {
          if (plugin.getPlayers().inTeam(target.getUniqueId()) || plugin.getPlayers().hasIsland(target.getUniqueId())) {
            plugin.getGrid().homeTeleport(target);
          }
 else {
            if (!target.performCommand(Settings.SPAWNCOMMAND)) {
              target.teleport(player.getWorld().getSpawnLocation());
            }
          }
          target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
          plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
        }
      }
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
      plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
      plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
      island.setLocked(true);
    }
 else {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
      plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
      plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
      island.setLocked(false);
    }
    return true;
  }
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
    return true;
  }
  plugin.getGrid().homeTeleport(player);
  if (Settings.islandRemoveMobs) {
    plugin.getGrid().removeMobs(player.getLocation());
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
  return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.miniShop);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
  return true;
}
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
return true;
}
 else {
if (Settings.useWarpPanel) {
  player.openInventory(plugin.getWarpPanel().getWarpPanel(0));
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
}
return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
confirm.put(playerUUID,true);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    confirm.put(playerUUID,false);
  }
}
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player,false);
Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
if (schems.isEmpty()) {
newIsland(player);
resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
newIsland(player,schems.get(0));
resetPlayer(player,oldIsland);
}
 else {
if (Settings.useSchematicPanel) {
  pendingNewIslandSelection.add(playerUUID);
  resettingIsland.add(playerUUID);
  player.openInventory(plugin.getSchematicsPanel().getPanel(player));
}
 else {
  schems=getSchematics(player,true);
  if (schems.isEmpty()) {
    newIsland(player);
  }
 else   if (Settings.chooseIslandRandomly) {
    newIsland(player,schems.get(random.nextInt(schems.size())));
  }
 else {
    newIsland(player,schems.get(0));
  }
  resetPlayer(player,oldIsland);
}
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
if (maxHomes < 1) {
maxHomes=1;
}
}
if (maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (maxHomes > 1) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).teamChatHelp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBan);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpUnban);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
if (plugin.getPlayers().getIslandLocation(playerUUID).getWorld().getEnvironment().equals(Environment.NETHER)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
return true;
}
Inventory inv=plugin.getBiomes().getBiomePanel(player);
if (inv != null) {
player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
Location l=ASkyBlock.getIslandWorld().getSpawnLocation();
l.add(new Vector(0.5,0,0.5));
Island spawn=plugin.getGrid().getSpawn();
if (spawn != null && spawn.getSpawnPoint() != null) {
l=spawn.getSpawnPoint();
}
player.teleport(l);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
 else {
if (Settings.fastLevelCalc) {
  calculateIslandLevel(player,playerUUID);
  return true;
}
 else {
  if (plugin.getGrid().playerIsOnIsland(player)) {
    calculateIslandLevel(player,playerUUID);
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  }
  return true;
}
}
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    if (Settings.maxTeamSizeVIP > maxSize) {
      maxSize=Settings.maxTeamSizeVIP;
    }
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    if (Settings.maxTeamSizeVIP2 > maxSize) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
if (plugin.getPlayers().hasIsland(playerUUID)) {
  plugin.getLogger().info(player.getName() + ""String_Node_Str"");
  plugin.deletePlayerIsland(playerUUID,true);
  plugin.getLogger().info(""String_Node_Str"");
}
addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
  addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
}
setResetWaitTime(player);
plugin.getGrid().homeTeleport(player);
plugin.resetPlayer(player);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
  Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
    return true;
  }
  CoopPlay.getInstance().clearMyInvitedCoops(player);
  CoopPlay.getInstance().clearMyCoops(player);
  plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
  removePlayerFromTeam(playerUUID,teamLeader);
  plugin.getWarpSignsListener().removeWarp(playerUUID);
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
  if (plugin.getServer().getPlayer(teamLeader) != null) {
    plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
  }
 else {
    plugin.getMessages().setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  if (teamMembers.size() < 2) {
    removePlayerFromTeam(teamLeader,teamLeader);
  }
  plugin.resetPlayer(player);
  if (!player.performCommand(Settings.SPAWNCOMMAND)) {
    player.teleport(player.getWorld().getSpawnLocation());
  }
  return true;
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
  return true;
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
int maxSize=Settings.maxTeamSize;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxSize < Settings.maxTeamSize) {
    maxSize=Settings.maxTeamSize;
  }
}
if (teamMembers.size() < maxSize) {
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
}
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useWarpPanel) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
return true;
}
 else {
int panelNum=0;
try {
  panelNum=Integer.valueOf(split[1]) - 1;
}
 catch (Exception e) {
  panelNum=0;
}
player.openInventory(plugin.getWarpPanel().getWarpPanel(panelNum));
return true;
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
}
}
 else {
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
resettingIsland.remove(playerUUID);
resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
plugin.getGrid().homeTeleport(player,1);
}
 else {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxHomes < 1) {
    maxHomes=1;
  }
}
if (number > maxHomes) {
  if (maxHomes > 1) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
  }
 else {
    plugin.getGrid().homeTeleport(player,1);
  }
}
 else {
  plugin.getGrid().homeTeleport(player,number);
}
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
}
if (maxHomes > 1) {
int number=0;
try {
number=Integer.valueOf(split[1]);
if (number < 1 || number > maxHomes) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
 else {
  plugin.getGrid().homeSet(player,number);
}
}
 catch (Exception e) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
  foundWarp=warp;
  break;
}
}
if (foundWarp == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
return true;
}
 else {
final Location warpSpot=plugin.getWarpSignsListener().getWarp(foundWarp);
if (warpSpot == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
  plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
  return true;
}
Island island=plugin.getGrid().getIslandAt(warpSpot);
if (island != null && island.isLocked() && !player.isOp() && !VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && !VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).lockIslandLocked);
  if (!plugin.getGrid().locationIsAtHome(player,true,warpSpot)) {
    return true;
  }
}
Block b=warpSpot.getBlock();
if (b.getType().equals(Material.SIGN_POST)) {
  Sign sign=(Sign)b.getState();
  org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
  BlockFace directionFacing=s.getFacing();
  Location inFront=b.getRelative(directionFacing).getLocation();
  if ((GridManager.isSafeLocation(inFront))) {
    float yaw=Util.blockFaceToFloat(directionFacing);
    final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    Player warpOwner=plugin.getServer().getPlayer(foundWarp);
    if (warpOwner != null && !warpOwner.equals(player)) {
      warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
    }
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  plugin.getWarpSignsListener().removeWarp(warpSpot);
  return true;
}
if (!(GridManager.isSafeLocation(warpSpot))) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
  plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
  return true;
}
 else {
  final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
  player.teleport(actualWarp);
  player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
  return true;
}
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (teamMembers.size() < maxSize) {
    if (inviteList.containsValue(playerUUID)) {
      inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
    }
    inviteList.put(invitedPlayerUUID,player.getUniqueId());
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
    if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (inviteList.containsValue(playerUUID)) {
  inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
}
inviteList.put(invitedPlayerUUID,player.getUniqueId());
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().inTeam(targetPlayerUUID)) {
if (plugin.getPlayers().getTeamLeader(playerUUID).equals(plugin.getPlayers().getTeamLeader(targetPlayerUUID))) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotTeamMember);
return true;
}
}
if (plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).banAlreadyBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
OfflinePlayer offlineTarget=plugin.getServer().getOfflinePlayer(targetPlayerUUID);
if (offlineTarget.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banFail.replace(""String_Node_Str"",offlineTarget.getName()));
return true;
}
if (target != null) {
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayerUUID).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.RED + plugin.myLocale(targetPlayerUUID).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
}
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + offlineTarget.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getPlayers().ban(playerUUID,targetPlayerUUID);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (!plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.GREEN + plugin.myLocale(targetPlayerUUID).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
OfflinePlayer offlineTarget=plugin.getServer().getOfflinePlayer(targetPlayerUUID);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + offlineTarget.getName()+ ""String_Node_Str"");
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getPlayers().unBan(playerUUID,targetPlayerUUID);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
if (target.getWorld().equals(ASkyBlock.getIslandWorld())) {
  for (  ItemStack i : target.getInventory().getContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  for (  ItemStack i : target.getEquipment().getArmorContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  target.getInventory().clear();
  target.getInventory().setArmorContents(null);
  target.getInventory().setHelmet(null);
  target.getInventory().setChestplate(null);
  target.getInventory().setLeggings(null);
  target.getInventory().setBoots(null);
  target.getEquipment().clear();
  if (Settings.resetChallenges) {
    plugin.getPlayers().resetAllChallenges(target.getUniqueId());
  }
  plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
  plugin.getPlayers().save(target.getUniqueId());
  TopTen.topTenAddEntry(playerUUID,0);
  target.updateInventory();
}
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
}
}
 else {
plugin.getMessages().setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.getWarpSignsListener().removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (teamMembers.contains(targetPlayer)) {
  if (plugin.getServer().getPlayer(targetPlayer) != null) {
    plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
  }
 else {
    plugin.getMessages().setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
  }
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
  removePlayerFromTeam(targetPlayer,teamLeader);
  removePlayerFromTeam(teamLeader,teamLeader);
  plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(targetPlayer,targetPlayer);
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}","@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      chooseIsland(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !PlayerEvents.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (!Settings.teamChat) {
        return false;
      }
      if (plugin.getPlayers().inTeam(playerUUID)) {
        boolean online=false;
        for (        UUID teamMember : plugin.getPlayers().getMembers(playerUUID)) {
          if (!teamMember.equals(playerUUID) && plugin.getServer().getPlayer(teamMember) != null) {
            online=true;
          }
        }
        if (!online) {
          player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).teamChatNoTeamAround);
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOff);
          plugin.getChatListener().unSetPlayer(playerUUID);
          return true;
        }
        if (plugin.getChatListener().isTeamChat(playerUUID)) {
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOff);
          plugin.getChatListener().unSetPlayer(playerUUID);
        }
 else {
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOn);
          plugin.getChatListener().setPlayer(playerUUID);
        }
      }
 else {
        player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).teamChatNoTeam);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
    }
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(plugin.myLocale(playerUUID).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(playerUUID).islandhelpBan);
  }
 else {
    player.sendMessage(plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(plugin.myLocale(playerUUID).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(playerUUID).islandhelpUnban);
  }
 else {
    player.sendMessage(plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!pendingNewIslandSelection.contains(playerUUID)) {
    return false;
  }
  pendingNewIslandSelection.remove(playerUUID);
  Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
  newIsland(player);
  if (resettingIsland.contains(playerUUID)) {
    resettingIsland.remove(playerUUID);
    resetPlayer(player,oldIsland);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(SettingsPanel.islandGuardPanel());
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    return true;
  }
  Island island=plugin.getGrid().getIsland(playerUUID);
  if (island == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
    return true;
  }
 else {
    if (!island.isLocked()) {
      for (      Player target : plugin.getServer().getOnlinePlayers()) {
        if (!player.equals(target) && !target.isOp() && !VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")&& (target.getWorld().equals(ASkyBlock.getIslandWorld()) || target.getWorld().equals(ASkyBlock.getNetherWorld()))&& plugin.getGrid().isOnIsland(player,target)&& !CoopPlay.getInstance().getCoopPlayers(island.getCenter()).contains(target.getUniqueId())) {
          if (plugin.getPlayers().inTeam(target.getUniqueId()) || plugin.getPlayers().hasIsland(target.getUniqueId())) {
            plugin.getGrid().homeTeleport(target);
          }
 else {
            if (!target.performCommand(Settings.SPAWNCOMMAND)) {
              target.teleport(player.getWorld().getSpawnLocation());
            }
          }
          target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
          plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
        }
      }
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
      plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
      plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
      island.setLocked(true);
    }
 else {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
      plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
      plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
      island.setLocked(false);
    }
    return true;
  }
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
    return true;
  }
  plugin.getGrid().homeTeleport(player);
  if (Settings.islandRemoveMobs) {
    plugin.getGrid().removeMobs(player.getLocation());
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
  return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.miniShop);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
  return true;
}
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
return true;
}
 else {
if (Settings.useWarpPanel) {
  player.openInventory(plugin.getWarpPanel().getWarpPanel(0));
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
}
return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
confirm.put(playerUUID,true);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    confirm.put(playerUUID,false);
  }
}
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player,false);
Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
if (schems.isEmpty()) {
newIsland(player);
resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
newIsland(player,schems.get(0));
resetPlayer(player,oldIsland);
}
 else {
if (Settings.useSchematicPanel) {
  pendingNewIslandSelection.add(playerUUID);
  resettingIsland.add(playerUUID);
  player.openInventory(plugin.getSchematicsPanel().getPanel(player));
}
 else {
  schems=getSchematics(player,true);
  if (schems.isEmpty()) {
    newIsland(player);
  }
 else   if (Settings.chooseIslandRandomly) {
    newIsland(player,schems.get(random.nextInt(schems.size())));
  }
 else {
    newIsland(player,schems.get(0));
  }
  resetPlayer(player,oldIsland);
}
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
if (maxHomes < 1) {
maxHomes=1;
}
}
if (maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (maxHomes > 1) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).teamChatHelp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBan);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpUnban);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
if (plugin.getPlayers().getIslandLocation(playerUUID).getWorld().getEnvironment().equals(Environment.NETHER)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
return true;
}
Inventory inv=plugin.getBiomes().getBiomePanel(player);
if (inv != null) {
player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
Location l=ASkyBlock.getIslandWorld().getSpawnLocation();
l.add(new Vector(0.5,0,0.5));
Island spawn=plugin.getGrid().getSpawn();
if (spawn != null && spawn.getSpawnPoint() != null) {
l=spawn.getSpawnPoint();
}
player.teleport(l);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
 else {
if (Settings.fastLevelCalc) {
  calculateIslandLevel(player,playerUUID);
  return true;
}
 else {
  if (plugin.getGrid().playerIsOnIsland(player)) {
    calculateIslandLevel(player,playerUUID);
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  }
  return true;
}
}
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).invitehelp);
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    if (Settings.maxTeamSizeVIP > maxSize) {
      maxSize=Settings.maxTeamSizeVIP;
    }
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    if (Settings.maxTeamSizeVIP2 > maxSize) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
if (plugin.getPlayers().hasIsland(playerUUID)) {
  plugin.getLogger().info(player.getName() + ""String_Node_Str"");
  plugin.deletePlayerIsland(playerUUID,true);
  plugin.getLogger().info(""String_Node_Str"");
}
addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
  addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
}
setResetWaitTime(player);
plugin.getGrid().homeTeleport(player);
plugin.resetPlayer(player);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
  Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
    return true;
  }
  CoopPlay.getInstance().clearMyInvitedCoops(player);
  CoopPlay.getInstance().clearMyCoops(player);
  plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
  removePlayerFromTeam(playerUUID,teamLeader);
  plugin.getWarpSignsListener().removeWarp(playerUUID);
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
  if (plugin.getServer().getPlayer(teamLeader) != null) {
    plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
  }
 else {
    plugin.getMessages().setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  if (teamMembers.size() < 2) {
    removePlayerFromTeam(teamLeader,teamLeader);
  }
  plugin.resetPlayer(player);
  if (!player.performCommand(Settings.SPAWNCOMMAND)) {
    player.teleport(player.getWorld().getSpawnLocation());
  }
  return true;
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
  return true;
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
int maxSize=Settings.maxTeamSize;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxSize < Settings.maxTeamSize) {
    maxSize=Settings.maxTeamSize;
  }
}
if (teamMembers.size() < maxSize) {
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
}
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useWarpPanel) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
return true;
}
 else {
int panelNum=0;
try {
  panelNum=Integer.valueOf(split[1]) - 1;
}
 catch (Exception e) {
  panelNum=0;
}
player.openInventory(plugin.getWarpPanel().getWarpPanel(panelNum));
return true;
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
}
}
 else {
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
resettingIsland.remove(playerUUID);
resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
plugin.getGrid().homeTeleport(player,1);
}
 else {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxHomes < 1) {
    maxHomes=1;
  }
}
if (number > maxHomes) {
  if (maxHomes > 1) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
  }
 else {
    plugin.getGrid().homeTeleport(player,1);
  }
}
 else {
  plugin.getGrid().homeTeleport(player,number);
}
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
}
if (maxHomes > 1) {
int number=0;
try {
number=Integer.valueOf(split[1]);
if (number < 1 || number > maxHomes) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
 else {
  plugin.getGrid().homeSet(player,number);
}
}
 catch (Exception e) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
  foundWarp=warp;
  break;
}
}
if (foundWarp == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
return true;
}
 else {
final Location warpSpot=plugin.getWarpSignsListener().getWarp(foundWarp);
if (warpSpot == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
  plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
  return true;
}
Island island=plugin.getGrid().getIslandAt(warpSpot);
if (island != null && island.isLocked() && !player.isOp() && !VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && !VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).lockIslandLocked);
  if (!plugin.getGrid().locationIsAtHome(player,true,warpSpot)) {
    return true;
  }
}
Block b=warpSpot.getBlock();
if (b.getType().equals(Material.SIGN_POST)) {
  Sign sign=(Sign)b.getState();
  org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
  BlockFace directionFacing=s.getFacing();
  Location inFront=b.getRelative(directionFacing).getLocation();
  if ((GridManager.isSafeLocation(inFront))) {
    float yaw=Util.blockFaceToFloat(directionFacing);
    final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    Player warpOwner=plugin.getServer().getPlayer(foundWarp);
    if (warpOwner != null && !warpOwner.equals(player)) {
      warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
    }
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  plugin.getWarpSignsListener().removeWarp(warpSpot);
  return true;
}
if (!(GridManager.isSafeLocation(warpSpot))) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
  plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
  return true;
}
 else {
  final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
  player.teleport(actualWarp);
  player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
  return true;
}
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (teamMembers.size() < maxSize) {
    if (inviteList.containsValue(playerUUID)) {
      inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
    }
    inviteList.put(invitedPlayerUUID,player.getUniqueId());
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
    if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (inviteList.containsValue(playerUUID)) {
  inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
}
inviteList.put(invitedPlayerUUID,player.getUniqueId());
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().inTeam(targetPlayerUUID)) {
if (plugin.getPlayers().getTeamLeader(playerUUID).equals(plugin.getPlayers().getTeamLeader(targetPlayerUUID))) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotTeamMember);
return true;
}
}
if (plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).banAlreadyBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
OfflinePlayer offlineTarget=plugin.getServer().getOfflinePlayer(targetPlayerUUID);
if (offlineTarget.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banFail.replace(""String_Node_Str"",offlineTarget.getName()));
return true;
}
if (target != null) {
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayerUUID).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.RED + plugin.myLocale(targetPlayerUUID).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
}
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + offlineTarget.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getPlayers().ban(playerUUID,targetPlayerUUID);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (!plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.GREEN + plugin.myLocale(targetPlayerUUID).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
OfflinePlayer offlineTarget=plugin.getServer().getOfflinePlayer(targetPlayerUUID);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + offlineTarget.getName()+ ""String_Node_Str"");
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getPlayers().unBan(playerUUID,targetPlayerUUID);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
if (target.getWorld().equals(ASkyBlock.getIslandWorld())) {
  for (  ItemStack i : target.getInventory().getContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  for (  ItemStack i : target.getEquipment().getArmorContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  target.getInventory().clear();
  target.getInventory().setArmorContents(null);
  target.getInventory().setHelmet(null);
  target.getInventory().setChestplate(null);
  target.getInventory().setLeggings(null);
  target.getInventory().setBoots(null);
  target.getEquipment().clear();
  if (Settings.resetChallenges) {
    plugin.getPlayers().resetAllChallenges(target.getUniqueId());
  }
  plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
  plugin.getPlayers().save(target.getUniqueId());
  TopTen.topTenAddEntry(playerUUID,0);
  target.updateInventory();
}
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
}
}
 else {
plugin.getMessages().setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.getWarpSignsListener().removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (teamMembers.contains(targetPlayer)) {
  if (plugin.getServer().getPlayer(targetPlayer) != null) {
    plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
  }
 else {
    plugin.getMessages().setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
  }
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
  removePlayerFromTeam(targetPlayer,teamLeader);
  removePlayerFromTeam(teamLeader,teamLeader);
  plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(targetPlayer,targetPlayer);
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}"
34047,"/** 
 * Prevents teleporting when falling based on setting and teleporting to locked islands
 * @param e
 */
@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=false) public void onPlayerTeleport(final PlayerTeleportEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (e.getTo() == null || !IslandGuard.inWorld(e.getFrom())) {
    return;
  }
  if (plugin.getGrid() == null) {
    return;
  }
  if (!Settings.allowTeleportWhenFalling && e.getPlayer().getGameMode().equals(GameMode.SURVIVAL) && !e.getPlayer().isOp()) {
    if (isFalling(e.getPlayer().getUniqueId())) {
      e.getPlayer().sendMessage(plugin.myLocale(e.getPlayer().getUniqueId()).islandcannotTeleport);
      e.setCancelled(true);
      if (e.getPlayer().getLocation().getBlockY() < 0) {
        e.getPlayer().setHealth(0D);
        unsetFalling(e.getPlayer().getUniqueId());
      }
      return;
    }
  }
  Island islandTo=plugin.getGrid().getProtectedIslandAt(e.getTo());
  Island islandFrom=plugin.getGrid().getProtectedIslandAt(e.getFrom());
  if (islandTo != null && islandTo.getOwner() != null) {
    if (islandTo != islandFrom) {
      if (islandTo.isLocked() || plugin.getPlayers().isBanned(islandTo.getOwner(),e.getPlayer().getUniqueId())) {
        e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).lockIslandLocked);
        if (!plugin.getGrid().locationIsOnIsland(e.getPlayer(),e.getTo()) && !e.getPlayer().isOp() && !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
          e.setCancelled(true);
          return;
        }
      }
      e.getPlayer().sendMessage(plugin.myLocale(e.getPlayer().getUniqueId()).lockNowEntering.replace(""String_Node_Str"",plugin.getPlayers().getName(islandTo.getOwner())));
    }
  }
}","/** 
 * Prevents teleporting when falling based on setting and teleporting to locked islands
 * @param e
 */
@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=false) public void onPlayerTeleport(final PlayerTeleportEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (e.getTo() == null || !IslandGuard.inWorld(e.getFrom())) {
    return;
  }
  if (plugin.getGrid() == null) {
    return;
  }
  if (!Settings.allowTeleportWhenFalling && e.getPlayer().getGameMode().equals(GameMode.SURVIVAL) && !e.getPlayer().isOp()) {
    if (isFalling(e.getPlayer().getUniqueId())) {
      e.getPlayer().sendMessage(plugin.myLocale(e.getPlayer().getUniqueId()).islandcannotTeleport);
      e.setCancelled(true);
      if (e.getPlayer().getLocation().getBlockY() < 0) {
        e.getPlayer().setHealth(0D);
        unsetFalling(e.getPlayer().getUniqueId());
      }
      return;
    }
  }
  Island islandTo=plugin.getGrid().getProtectedIslandAt(e.getTo());
  Island islandFrom=plugin.getGrid().getProtectedIslandAt(e.getFrom());
  if (islandTo != null && islandTo.getOwner() != null) {
    if (islandTo != islandFrom) {
      if (islandTo.isLocked() || plugin.getPlayers().isBanned(islandTo.getOwner(),e.getPlayer().getUniqueId())) {
        e.getPlayer().sendMessage(ChatColor.RED + plugin.myLocale(e.getPlayer().getUniqueId()).lockIslandLocked);
        if (!plugin.getGrid().locationIsOnIsland(e.getPlayer(),e.getTo()) && !e.getPlayer().isOp() && !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")&& !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
          e.setCancelled(true);
          return;
        }
      }
      e.getPlayer().sendMessage(plugin.myLocale(e.getPlayer().getUniqueId()).lockNowEntering.replace(""String_Node_Str"",plugin.getPlayers().getName(islandTo.getOwner())));
    }
  }
}"
34048,"@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      chooseIsland(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !PlayerEvents.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (!Settings.teamChat) {
        return false;
      }
      if (plugin.getPlayers().inTeam(playerUUID)) {
        boolean online=false;
        for (        UUID teamMember : plugin.getPlayers().getMembers(playerUUID)) {
          if (!teamMember.equals(playerUUID) && plugin.getServer().getPlayer(teamMember) != null) {
            online=true;
          }
        }
        if (!online) {
          player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).teamChatNoTeamAround);
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOff);
          plugin.getChatListener().unSetPlayer(playerUUID);
          return true;
        }
        if (plugin.getChatListener().isTeamChat(playerUUID)) {
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOff);
          plugin.getChatListener().unSetPlayer(playerUUID);
        }
 else {
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOn);
          plugin.getChatListener().setPlayer(playerUUID);
        }
      }
 else {
        player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).teamChatNoTeam);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
    }
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(plugin.myLocale(playerUUID).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(playerUUID).islandhelpBan);
  }
 else {
    player.sendMessage(plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(plugin.myLocale(playerUUID).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(playerUUID).islandhelpUnban);
  }
 else {
    player.sendMessage(plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!pendingNewIslandSelection.contains(playerUUID)) {
    return false;
  }
  pendingNewIslandSelection.remove(playerUUID);
  Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
  newIsland(player);
  if (resettingIsland.contains(playerUUID)) {
    resettingIsland.remove(playerUUID);
    resetPlayer(player,oldIsland);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(SettingsPanel.islandGuardPanel());
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    return true;
  }
  Island island=plugin.getGrid().getIsland(playerUUID);
  if (island == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
    return true;
  }
 else {
    if (!island.isLocked()) {
      for (      Player target : plugin.getServer().getOnlinePlayers()) {
        if (!player.equals(target) && !target.isOp() && !VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")&& (target.getWorld().equals(ASkyBlock.getIslandWorld()) || target.getWorld().equals(ASkyBlock.getNetherWorld()))&& plugin.getGrid().isOnIsland(player,target)&& !CoopPlay.getInstance().getCoopPlayers(island.getCenter()).contains(target.getUniqueId())) {
          if (plugin.getPlayers().inTeam(target.getUniqueId()) || plugin.getPlayers().hasIsland(target.getUniqueId())) {
            plugin.getGrid().homeTeleport(target);
          }
 else {
            if (!target.performCommand(Settings.SPAWNCOMMAND)) {
              target.teleport(player.getWorld().getSpawnLocation());
            }
          }
          target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
          plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
        }
      }
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
      plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
      plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
      island.setLocked(true);
    }
 else {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
      plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
      plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
      island.setLocked(false);
    }
    return true;
  }
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
    return true;
  }
  plugin.getGrid().homeTeleport(player);
  if (Settings.islandRemoveMobs) {
    plugin.getGrid().removeMobs(player.getLocation());
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
  return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.miniShop);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
  return true;
}
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
return true;
}
 else {
if (Settings.useWarpPanel) {
  player.openInventory(plugin.getWarpPanel().getWarpPanel(0));
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
}
return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
confirm.put(playerUUID,true);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    confirm.put(playerUUID,false);
  }
}
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player,false);
Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
if (schems.isEmpty()) {
newIsland(player);
resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
newIsland(player,schems.get(0));
resetPlayer(player,oldIsland);
}
 else {
if (Settings.useSchematicPanel) {
  pendingNewIslandSelection.add(playerUUID);
  resettingIsland.add(playerUUID);
  player.openInventory(plugin.getSchematicsPanel().getPanel(player));
}
 else {
  schems=getSchematics(player,true);
  if (schems.isEmpty()) {
    newIsland(player);
  }
 else   if (Settings.chooseIslandRandomly) {
    newIsland(player,schems.get(random.nextInt(schems.size())));
  }
 else {
    newIsland(player,schems.get(0));
  }
  resetPlayer(player,oldIsland);
}
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
if (maxHomes < 1) {
maxHomes=1;
}
}
if (maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (maxHomes > 1) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).teamChatHelp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBan);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpUnban);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
if (plugin.getPlayers().getIslandLocation(playerUUID).getWorld().getEnvironment().equals(Environment.NETHER)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
return true;
}
Inventory inv=plugin.getBiomes().getBiomePanel(player);
if (inv != null) {
player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
Location l=ASkyBlock.getIslandWorld().getSpawnLocation();
l.add(new Vector(0.5,0,0.5));
Island spawn=plugin.getGrid().getSpawn();
if (spawn != null && spawn.getSpawnPoint() != null) {
l=spawn.getSpawnPoint();
}
player.teleport(l);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
 else {
if (Settings.fastLevelCalc) {
  calculateIslandLevel(player,playerUUID);
  return true;
}
 else {
  if (plugin.getGrid().playerIsOnIsland(player)) {
    calculateIslandLevel(player,playerUUID);
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  }
  return true;
}
}
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    if (Settings.maxTeamSizeVIP > maxSize) {
      maxSize=Settings.maxTeamSizeVIP;
    }
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    if (Settings.maxTeamSizeVIP2 > maxSize) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
if (plugin.getPlayers().hasIsland(playerUUID)) {
  plugin.getLogger().info(player.getName() + ""String_Node_Str"");
  plugin.deletePlayerIsland(playerUUID,true);
  plugin.getLogger().info(""String_Node_Str"");
}
addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
  addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
}
setResetWaitTime(player);
plugin.getGrid().homeTeleport(player);
plugin.resetPlayer(player);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
  Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
    return true;
  }
  CoopPlay.getInstance().clearMyInvitedCoops(player);
  CoopPlay.getInstance().clearMyCoops(player);
  plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
  removePlayerFromTeam(playerUUID,teamLeader);
  plugin.getWarpSignsListener().removeWarp(playerUUID);
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
  if (plugin.getServer().getPlayer(teamLeader) != null) {
    plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
  }
 else {
    plugin.getMessages().setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  if (teamMembers.size() < 2) {
    removePlayerFromTeam(teamLeader,teamLeader);
  }
  plugin.resetPlayer(player);
  if (!player.performCommand(Settings.SPAWNCOMMAND)) {
    player.teleport(player.getWorld().getSpawnLocation());
  }
  return true;
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
  return true;
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
int maxSize=Settings.maxTeamSize;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxSize < Settings.maxTeamSize) {
    maxSize=Settings.maxTeamSize;
  }
}
if (teamMembers.size() < maxSize) {
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
}
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useWarpPanel) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
return true;
}
 else {
int panelNum=0;
try {
  panelNum=Integer.valueOf(split[1]) - 1;
}
 catch (Exception e) {
  panelNum=0;
}
player.openInventory(plugin.getWarpPanel().getWarpPanel(panelNum));
return true;
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
}
}
 else {
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
resettingIsland.remove(playerUUID);
resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
plugin.getGrid().homeTeleport(player,1);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
  maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
if (maxHomes < 1) {
  maxHomes=1;
}
}
if (number > maxHomes) {
if (maxHomes > 1) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
 else {
  plugin.getGrid().homeTeleport(player,1);
}
}
 else {
plugin.getGrid().homeTeleport(player,number);
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
}
if (maxHomes > 1) {
int number=0;
try {
number=Integer.valueOf(split[1]);
if (number < 0 || number > maxHomes) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
 else {
  plugin.getGrid().homeSet(player,number);
}
}
 catch (Exception e) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
  foundWarp=warp;
  break;
}
}
if (foundWarp == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
return true;
}
 else {
final Location warpSpot=plugin.getWarpSignsListener().getWarp(foundWarp);
if (warpSpot == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
  plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
  return true;
}
Island island=plugin.getGrid().getIslandAt(warpSpot);
if (island != null && island.isLocked()) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).lockIslandLocked);
  return true;
}
Block b=warpSpot.getBlock();
if (b.getType().equals(Material.SIGN_POST)) {
  Sign sign=(Sign)b.getState();
  org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
  BlockFace directionFacing=s.getFacing();
  Location inFront=b.getRelative(directionFacing).getLocation();
  if ((GridManager.isSafeLocation(inFront))) {
    float yaw=Util.blockFaceToFloat(directionFacing);
    final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    Player warpOwner=plugin.getServer().getPlayer(foundWarp);
    if (warpOwner != null) {
      warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
    }
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  plugin.getWarpSignsListener().removeWarp(warpSpot);
  return true;
}
if (!(GridManager.isSafeLocation(warpSpot))) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
  plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
  return true;
}
 else {
  final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
  player.teleport(actualWarp);
  player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
  return true;
}
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (teamMembers.size() < maxSize) {
    if (inviteList.containsValue(playerUUID)) {
      inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
    }
    inviteList.put(invitedPlayerUUID,player.getUniqueId());
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
    if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (inviteList.containsValue(playerUUID)) {
  inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
}
inviteList.put(invitedPlayerUUID,player.getUniqueId());
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().inTeam(targetPlayerUUID)) {
if (plugin.getPlayers().getTeamLeader(playerUUID).equals(plugin.getPlayers().getTeamLeader(targetPlayerUUID))) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotTeamMember);
return true;
}
}
if (plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).banAlreadyBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
OfflinePlayer offlineTarget=plugin.getServer().getOfflinePlayer(targetPlayerUUID);
if (offlineTarget.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banFail.replace(""String_Node_Str"",offlineTarget.getName()));
return true;
}
if (target != null) {
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayerUUID).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.RED + plugin.myLocale(targetPlayerUUID).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
}
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + offlineTarget.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getPlayers().ban(playerUUID,targetPlayerUUID);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (!plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.GREEN + plugin.myLocale(targetPlayerUUID).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
OfflinePlayer offlineTarget=plugin.getServer().getOfflinePlayer(targetPlayerUUID);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + offlineTarget.getName()+ ""String_Node_Str"");
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getPlayers().unBan(playerUUID,targetPlayerUUID);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
if (target.getWorld().equals(ASkyBlock.getIslandWorld())) {
  for (  ItemStack i : target.getInventory().getContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  for (  ItemStack i : target.getEquipment().getArmorContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  target.getInventory().clear();
  target.getInventory().setArmorContents(null);
  target.getInventory().setHelmet(null);
  target.getInventory().setChestplate(null);
  target.getInventory().setLeggings(null);
  target.getInventory().setBoots(null);
  target.getEquipment().clear();
  if (Settings.resetChallenges) {
    plugin.getPlayers().resetAllChallenges(target.getUniqueId());
  }
  plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
  plugin.getPlayers().save(target.getUniqueId());
  TopTen.topTenAddEntry(playerUUID,0);
  target.updateInventory();
}
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
}
}
 else {
plugin.getMessages().setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.getWarpSignsListener().removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (teamMembers.contains(targetPlayer)) {
  if (plugin.getServer().getPlayer(targetPlayer) != null) {
    plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
  }
 else {
    plugin.getMessages().setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
  }
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
  removePlayerFromTeam(targetPlayer,teamLeader);
  removePlayerFromTeam(teamLeader,teamLeader);
  plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(targetPlayer,targetPlayer);
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}","@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      chooseIsland(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !PlayerEvents.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (!Settings.teamChat) {
        return false;
      }
      if (plugin.getPlayers().inTeam(playerUUID)) {
        boolean online=false;
        for (        UUID teamMember : plugin.getPlayers().getMembers(playerUUID)) {
          if (!teamMember.equals(playerUUID) && plugin.getServer().getPlayer(teamMember) != null) {
            online=true;
          }
        }
        if (!online) {
          player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).teamChatNoTeamAround);
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOff);
          plugin.getChatListener().unSetPlayer(playerUUID);
          return true;
        }
        if (plugin.getChatListener().isTeamChat(playerUUID)) {
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOff);
          plugin.getChatListener().unSetPlayer(playerUUID);
        }
 else {
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).teamChatStatusOn);
          plugin.getChatListener().setPlayer(playerUUID);
        }
      }
 else {
        player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).teamChatNoTeam);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
    }
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(plugin.myLocale(playerUUID).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(playerUUID).islandhelpBan);
  }
 else {
    player.sendMessage(plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(plugin.myLocale(playerUUID).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(playerUUID).islandhelpUnban);
  }
 else {
    player.sendMessage(plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!pendingNewIslandSelection.contains(playerUUID)) {
    return false;
  }
  pendingNewIslandSelection.remove(playerUUID);
  Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
  newIsland(player);
  if (resettingIsland.contains(playerUUID)) {
    resettingIsland.remove(playerUUID);
    resetPlayer(player,oldIsland);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(SettingsPanel.islandGuardPanel());
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    return true;
  }
  Island island=plugin.getGrid().getIsland(playerUUID);
  if (island == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
    return true;
  }
 else {
    if (!island.isLocked()) {
      for (      Player target : plugin.getServer().getOnlinePlayers()) {
        if (!player.equals(target) && !target.isOp() && !VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")&& (target.getWorld().equals(ASkyBlock.getIslandWorld()) || target.getWorld().equals(ASkyBlock.getNetherWorld()))&& plugin.getGrid().isOnIsland(player,target)&& !CoopPlay.getInstance().getCoopPlayers(island.getCenter()).contains(target.getUniqueId())) {
          if (plugin.getPlayers().inTeam(target.getUniqueId()) || plugin.getPlayers().hasIsland(target.getUniqueId())) {
            plugin.getGrid().homeTeleport(target);
          }
 else {
            if (!target.performCommand(Settings.SPAWNCOMMAND)) {
              target.teleport(player.getWorld().getSpawnLocation());
            }
          }
          target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
          plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
          player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
        }
      }
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
      plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
      plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
      island.setLocked(true);
    }
 else {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
      plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
      plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
      island.setLocked(false);
    }
    return true;
  }
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
    return true;
  }
  plugin.getGrid().homeTeleport(player);
  if (Settings.islandRemoveMobs) {
    plugin.getGrid().removeMobs(player.getLocation());
  }
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
  return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.miniShop);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
  return true;
}
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
return true;
}
 else {
if (Settings.useWarpPanel) {
  player.openInventory(plugin.getWarpPanel().getWarpPanel(0));
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
}
return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
confirm.put(playerUUID,true);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    confirm.put(playerUUID,false);
  }
}
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player,false);
Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
if (schems.isEmpty()) {
newIsland(player);
resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
newIsland(player,schems.get(0));
resetPlayer(player,oldIsland);
}
 else {
if (Settings.useSchematicPanel) {
  pendingNewIslandSelection.add(playerUUID);
  resettingIsland.add(playerUUID);
  player.openInventory(plugin.getSchematicsPanel().getPanel(player));
}
 else {
  schems=getSchematics(player,true);
  if (schems.isEmpty()) {
    newIsland(player);
  }
 else   if (Settings.chooseIslandRandomly) {
    newIsland(player,schems.get(random.nextInt(schems.size())));
  }
 else {
    newIsland(player,schems.get(0));
  }
  resetPlayer(player,oldIsland);
}
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
if (maxHomes < 1) {
maxHomes=1;
}
}
if (maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (maxHomes > 1) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).teamChatHelp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBan);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpUnban);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
if (plugin.getPlayers().getIslandLocation(playerUUID).getWorld().getEnvironment().equals(Environment.NETHER)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
return true;
}
Inventory inv=plugin.getBiomes().getBiomePanel(player);
if (inv != null) {
player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
Location l=ASkyBlock.getIslandWorld().getSpawnLocation();
l.add(new Vector(0.5,0,0.5));
Island spawn=plugin.getGrid().getSpawn();
if (spawn != null && spawn.getSpawnPoint() != null) {
l=spawn.getSpawnPoint();
}
player.teleport(l);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
 else {
if (Settings.fastLevelCalc) {
  calculateIslandLevel(player,playerUUID);
  return true;
}
 else {
  if (plugin.getGrid().playerIsOnIsland(player)) {
    calculateIslandLevel(player,playerUUID);
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  }
  return true;
}
}
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    if (Settings.maxTeamSizeVIP > maxSize) {
      maxSize=Settings.maxTeamSizeVIP;
    }
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    if (Settings.maxTeamSizeVIP2 > maxSize) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
if (plugin.getPlayers().hasIsland(playerUUID)) {
  plugin.getLogger().info(player.getName() + ""String_Node_Str"");
  plugin.deletePlayerIsland(playerUUID,true);
  plugin.getLogger().info(""String_Node_Str"");
}
addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
  addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
}
setResetWaitTime(player);
plugin.getGrid().homeTeleport(player);
plugin.resetPlayer(player);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
  Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
    return true;
  }
  CoopPlay.getInstance().clearMyInvitedCoops(player);
  CoopPlay.getInstance().clearMyCoops(player);
  plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
  removePlayerFromTeam(playerUUID,teamLeader);
  plugin.getWarpSignsListener().removeWarp(playerUUID);
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
  if (plugin.getServer().getPlayer(teamLeader) != null) {
    plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
  }
 else {
    plugin.getMessages().setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  if (teamMembers.size() < 2) {
    removePlayerFromTeam(teamLeader,teamLeader);
  }
  plugin.resetPlayer(player);
  if (!player.performCommand(Settings.SPAWNCOMMAND)) {
    player.teleport(player.getWorld().getSpawnLocation());
  }
  return true;
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
  return true;
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
int maxSize=Settings.maxTeamSize;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxSize < Settings.maxTeamSize) {
    maxSize=Settings.maxTeamSize;
  }
}
if (teamMembers.size() < maxSize) {
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
}
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useWarpPanel) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
return true;
}
 else {
int panelNum=0;
try {
  panelNum=Integer.valueOf(split[1]) - 1;
}
 catch (Exception e) {
  panelNum=0;
}
player.openInventory(plugin.getWarpPanel().getWarpPanel(panelNum));
return true;
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
}
}
 else {
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Island oldIsland=plugin.getGrid().getIsland(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
resettingIsland.remove(playerUUID);
resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
plugin.getGrid().homeTeleport(player,1);
}
 else {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxHomes < 1) {
    maxHomes=1;
  }
}
if (number > maxHomes) {
  if (maxHomes > 1) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
  }
 else {
    plugin.getGrid().homeTeleport(player,1);
  }
}
 else {
  plugin.getGrid().homeTeleport(player,number);
}
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
}
if (maxHomes > 1) {
int number=0;
try {
number=Integer.valueOf(split[1]);
if (number < 1 || number > maxHomes) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
 else {
  plugin.getGrid().homeSet(player,number);
}
}
 catch (Exception e) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.getWarpSignsListener().listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
  foundWarp=warp;
  break;
}
}
if (foundWarp == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
return true;
}
 else {
final Location warpSpot=plugin.getWarpSignsListener().getWarp(foundWarp);
if (warpSpot == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
  plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
  return true;
}
Island island=plugin.getGrid().getIslandAt(warpSpot);
if (island != null && island.isLocked()) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).lockIslandLocked);
  return true;
}
Block b=warpSpot.getBlock();
if (b.getType().equals(Material.SIGN_POST)) {
  Sign sign=(Sign)b.getState();
  org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
  BlockFace directionFacing=s.getFacing();
  Location inFront=b.getRelative(directionFacing).getLocation();
  if ((GridManager.isSafeLocation(inFront))) {
    float yaw=Util.blockFaceToFloat(directionFacing);
    final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    Player warpOwner=plugin.getServer().getPlayer(foundWarp);
    if (warpOwner != null) {
      warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
    }
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  plugin.getWarpSignsListener().removeWarp(warpSpot);
  return true;
}
if (!(GridManager.isSafeLocation(warpSpot))) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
  plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
  return true;
}
 else {
  final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
  player.teleport(actualWarp);
  player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
  return true;
}
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (teamMembers.size() < maxSize) {
    if (inviteList.containsValue(playerUUID)) {
      inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
    }
    inviteList.put(invitedPlayerUUID,player.getUniqueId());
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
    if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (inviteList.containsValue(playerUUID)) {
  inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
}
inviteList.put(invitedPlayerUUID,player.getUniqueId());
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().inTeam(targetPlayerUUID)) {
if (plugin.getPlayers().getTeamLeader(playerUUID).equals(plugin.getPlayers().getTeamLeader(targetPlayerUUID))) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotTeamMember);
return true;
}
}
if (plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).banAlreadyBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
OfflinePlayer offlineTarget=plugin.getServer().getOfflinePlayer(targetPlayerUUID);
if (offlineTarget.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banFail.replace(""String_Node_Str"",offlineTarget.getName()));
return true;
}
if (target != null) {
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayerUUID).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.RED + plugin.myLocale(targetPlayerUUID).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
}
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + offlineTarget.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getPlayers().ban(playerUUID,targetPlayerUUID);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (!plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.GREEN + plugin.myLocale(targetPlayerUUID).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
OfflinePlayer offlineTarget=plugin.getServer().getOfflinePlayer(targetPlayerUUID);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + offlineTarget.getName()+ ""String_Node_Str"");
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",offlineTarget.getName()));
plugin.getPlayers().unBan(playerUUID,targetPlayerUUID);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
if (target.getWorld().equals(ASkyBlock.getIslandWorld())) {
  for (  ItemStack i : target.getInventory().getContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  for (  ItemStack i : target.getEquipment().getArmorContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  target.getInventory().clear();
  target.getInventory().setArmorContents(null);
  target.getInventory().setHelmet(null);
  target.getInventory().setChestplate(null);
  target.getInventory().setLeggings(null);
  target.getInventory().setBoots(null);
  target.getEquipment().clear();
  if (Settings.resetChallenges) {
    plugin.getPlayers().resetAllChallenges(target.getUniqueId());
  }
  plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
  plugin.getPlayers().save(target.getUniqueId());
  TopTen.topTenAddEntry(playerUUID,0);
  target.updateInventory();
}
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
}
}
 else {
plugin.getMessages().setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.getWarpSignsListener().removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (teamMembers.contains(targetPlayer)) {
  if (plugin.getServer().getPlayer(targetPlayer) != null) {
    plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
  }
 else {
    plugin.getMessages().setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
  }
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
  removePlayerFromTeam(targetPlayer,teamLeader);
  removePlayerFromTeam(teamLeader,teamLeader);
  plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(targetPlayer,targetPlayer);
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}"
34049,"/** 
 * Makes an island using schematic. No permission checks are made. They have to be decided before this method is called.
 * @param player
 * @param schematic
 */
public void newIsland(final Player player,final Schematic schematic){
  final UUID playerUUID=player.getUniqueId();
  boolean firstTime=false;
  if (!plugin.getPlayers().hasIsland(playerUUID)) {
    firstTime=true;
  }
  Location next=getNextIsland();
  plugin.setNewIsland(true);
  if (schematic != null) {
    if (schematic.isInNether() && Settings.newNether) {
      if (!schematic.getPartnerName().isEmpty() && schematics.containsKey(schematic.getPartnerName())) {
        pastePartner(schematics.get(schematic.getPartnerName()),next,player);
      }
      next=next.toVector().toLocation(ASkyBlock.getNetherWorld());
      schematic.pasteSchematic(next,player);
    }
 else {
      schematic.pasteSchematic(next,player);
      if (Settings.newNether) {
        final Location netherLoc=next.toVector().toLocation(ASkyBlock.getNetherWorld());
        if (schematic.getPartnerName().isEmpty()) {
          pastePartner(schematic,netherLoc,player);
        }
 else {
          if (schematics.containsKey(schematic.getPartnerName())) {
            pastePartner(schematics.get(schematic.getPartnerName()),netherLoc,player);
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"" + schematic.getPartnerName() + ""String_Node_Str"");
          }
        }
      }
    }
    plugin.getPlayers().setStartIslandRating(playerUUID,schematic.getRating());
  }
  plugin.setNewIsland(false);
  plugin.getPlayers().setHasIsland(playerUUID,true);
  plugin.getPlayers().clearHomeLocations(playerUUID);
  plugin.getPlayers().setIslandLocation(playerUUID,next);
  Island myIsland=plugin.getGrid().addIsland(next.getBlockX(),next.getBlockZ(),playerUUID);
  plugin.getPlayers().save(playerUUID);
  if (schematic.isPlayerSpawn()) {
    plugin.getPlayers().setHomeLocation(playerUUID,schematic.getPlayerSpawn(next),1);
    player.teleport(schematic.getPlayerSpawn(next));
  }
 else {
    plugin.getGrid().homeTeleport(player);
  }
  plugin.resetPlayer(player);
  if (Settings.resetMoney) {
    resetMoney(player);
  }
  setResetWaitTime(player);
  int range=Settings.island_protectionRange;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      range=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
      if (range % 2 != 0) {
        range--;
        plugin.getLogger().warning(""String_Node_Str"" + range + ""String_Node_Str""+ player.getName());
      }
      if (range > Settings.islandDistance) {
        if (!plugin.getConfig().getBoolean(""String_Node_Str"",false)) {
          if (range > (Settings.islandDistance - 16)) {
            range=Settings.islandDistance - 16;
            plugin.getLogger().warning(""String_Node_Str"" + (Settings.islandDistance - 16) + ""String_Node_Str""+ range);
          }
        }
 else {
          range=Settings.islandDistance;
        }
      }
      if (range < 50) {
        range=50;
      }
    }
  }
  myIsland.setProtectionSize(range);
  if (!plugin.myLocale(player.getUniqueId()).islandSubTitle.isEmpty()) {
    plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandSubTitle+ ""String_Node_Str"");
  }
  if (!plugin.myLocale(player.getUniqueId()).islandTitle.isEmpty()) {
    plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandTitle+ ""String_Node_Str"");
  }
  if (!plugin.myLocale(player.getUniqueId()).islandDonate.isEmpty() && !plugin.myLocale(player.getUniqueId()).islandURL.isEmpty()) {
    plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandDonate+ ""String_Node_Str""+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandURL+ ""String_Node_Str"");
  }
  if (firstTime) {
    runCommands(Settings.startCommands,player.getUniqueId());
  }
  final IslandNewEvent event=new IslandNewEvent(player,schematic,myIsland);
  plugin.getServer().getPluginManager().callEvent(event);
}","/** 
 * Makes an island using schematic. No permission checks are made. They have to be decided before this method is called.
 * @param player
 * @param schematic
 */
public void newIsland(final Player player,final Schematic schematic){
  final UUID playerUUID=player.getUniqueId();
  boolean firstTime=false;
  if (!plugin.getPlayers().hasIsland(playerUUID)) {
    firstTime=true;
  }
  Location next=getNextIsland();
  plugin.setNewIsland(true);
  if (schematic != null) {
    if (Settings.createNether && schematic.isInNether() && Settings.newNether) {
      if (!schematic.getPartnerName().isEmpty() && schematics.containsKey(schematic.getPartnerName())) {
        pastePartner(schematics.get(schematic.getPartnerName()),next,player);
      }
      next=next.toVector().toLocation(ASkyBlock.getNetherWorld());
      schematic.pasteSchematic(next,player);
    }
 else {
      schematic.pasteSchematic(next,player);
      if (Settings.createNether && Settings.newNether) {
        final Location netherLoc=next.toVector().toLocation(ASkyBlock.getNetherWorld());
        if (schematic.getPartnerName().isEmpty()) {
          pastePartner(schematic,netherLoc,player);
        }
 else {
          if (schematics.containsKey(schematic.getPartnerName())) {
            pastePartner(schematics.get(schematic.getPartnerName()),netherLoc,player);
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"" + schematic.getPartnerName() + ""String_Node_Str"");
          }
        }
      }
    }
    plugin.getPlayers().setStartIslandRating(playerUUID,schematic.getRating());
  }
  plugin.setNewIsland(false);
  plugin.getPlayers().setHasIsland(playerUUID,true);
  plugin.getPlayers().clearHomeLocations(playerUUID);
  plugin.getPlayers().setIslandLocation(playerUUID,next);
  Island myIsland=plugin.getGrid().addIsland(next.getBlockX(),next.getBlockZ(),playerUUID);
  plugin.getPlayers().save(playerUUID);
  if (schematic.isPlayerSpawn()) {
    plugin.getPlayers().setHomeLocation(playerUUID,schematic.getPlayerSpawn(next),1);
    player.teleport(schematic.getPlayerSpawn(next));
  }
 else {
    plugin.getGrid().homeTeleport(player);
  }
  plugin.resetPlayer(player);
  if (Settings.resetMoney) {
    resetMoney(player);
  }
  setResetWaitTime(player);
  int range=Settings.island_protectionRange;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      range=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
      if (range % 2 != 0) {
        range--;
        plugin.getLogger().warning(""String_Node_Str"" + range + ""String_Node_Str""+ player.getName());
      }
      if (range > Settings.islandDistance) {
        if (!plugin.getConfig().getBoolean(""String_Node_Str"",false)) {
          if (range > (Settings.islandDistance - 16)) {
            range=Settings.islandDistance - 16;
            plugin.getLogger().warning(""String_Node_Str"" + (Settings.islandDistance - 16) + ""String_Node_Str""+ range);
          }
        }
 else {
          range=Settings.islandDistance;
        }
      }
      if (range < 50) {
        range=50;
      }
    }
  }
  myIsland.setProtectionSize(range);
  if (!plugin.myLocale(player.getUniqueId()).islandSubTitle.isEmpty()) {
    plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandSubTitle+ ""String_Node_Str"");
  }
  if (!plugin.myLocale(player.getUniqueId()).islandTitle.isEmpty()) {
    plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandTitle+ ""String_Node_Str"");
  }
  if (!plugin.myLocale(player.getUniqueId()).islandDonate.isEmpty() && !plugin.myLocale(player.getUniqueId()).islandURL.isEmpty()) {
    plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandDonate+ ""String_Node_Str""+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).islandURL+ ""String_Node_Str"");
  }
  if (firstTime) {
    runCommands(Settings.startCommands,player.getUniqueId());
  }
  final IslandNewEvent event=new IslandNewEvent(player,schematic,myIsland);
  plugin.getServer().getPluginManager().callEvent(event);
}"
34050,"/** 
 * Enables changing of obsidian back into lava
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteract(final PlayerInteractEvent e){
  if (plugin.getGrid().playerIsOnIsland(e.getPlayer())) {
    boolean otherOb=false;
    if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK) && e.getPlayer().getItemInHand().getType().equals(Material.BUCKET) && e.getClickedBlock().getType().equals(Material.OBSIDIAN)) {
      Block b=e.getClickedBlock();
      for (int x=-2; x <= 2; x++) {
        for (int y=-2; y <= 2; y++) {
          for (int z=-2; z <= 2; z++) {
            final Block testBlock=b.getWorld().getBlockAt(b.getX() + x,b.getY() + y,b.getZ() + z);
            if ((x != 0 || y != 0 || z != 0) && testBlock.getType().equals(Material.OBSIDIAN)) {
              otherOb=true;
            }
          }
        }
      }
      if (!otherOb) {
        e.getPlayer().sendMessage(ChatColor.YELLOW + plugin.myLocale(e.getPlayer().getUniqueId()).changingObsidiantoLava);
        e.getPlayer().getInventory().setItemInHand(null);
        e.getPlayer().getInventory().addItem(new ItemStack(Material.LAVA_BUCKET,1));
        e.getPlayer().updateInventory();
        e.getClickedBlock().setType(Material.AIR);
        e.setCancelled(true);
      }
    }
  }
}","/** 
 * Enables changing of obsidian back into lava
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteract(final PlayerInteractEvent e){
  if (plugin.getGrid().playerIsOnIsland(e.getPlayer())) {
    boolean otherOb=false;
    ItemStack inHand=e.getPlayer().getItemInHand();
    if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK) && inHand.getType().equals(Material.BUCKET) && e.getClickedBlock().getType().equals(Material.OBSIDIAN)) {
      Block b=e.getClickedBlock();
      for (int x=-2; x <= 2; x++) {
        for (int y=-2; y <= 2; y++) {
          for (int z=-2; z <= 2; z++) {
            final Block testBlock=b.getWorld().getBlockAt(b.getX() + x,b.getY() + y,b.getZ() + z);
            if ((x != 0 || y != 0 || z != 0) && testBlock.getType().equals(Material.OBSIDIAN)) {
              otherOb=true;
            }
          }
        }
      }
      if (!otherOb) {
        e.getPlayer().sendMessage(ChatColor.YELLOW + plugin.myLocale(e.getPlayer().getUniqueId()).changingObsidiantoLava);
        e.getPlayer().getInventory().setItemInHand(null);
        e.getPlayer().getInventory().addItem(new ItemStack(Material.LAVA_BUCKET,1));
        if (inHand.getAmount() > 1) {
          e.getPlayer().getInventory().addItem(new ItemStack(Material.BUCKET,inHand.getAmount() - 1));
        }
        e.getPlayer().updateInventory();
        e.getClickedBlock().setType(Material.AIR);
        e.setCancelled(true);
      }
    }
  }
}"
34051,"@EventHandler public void WitherExplosion(EntityExplodeEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (!IslandGuard.inWorld(e.getEntity()) || e.getEntity() == null) {
    return;
  }
  if (e.getEntityType() == EntityType.WITHER || e.getEntityType() == EntityType.WITHER_SKULL) {
    if (witherSpawnInfo.containsKey(e.getEntity().getUniqueId())) {
      if (!witherSpawnInfo.get(e.getEntity().getUniqueId()).inIslandSpace(e.getLocation())) {
        e.blockList().clear();
        e.setCancelled(true);
      }
    }
  }
}","@EventHandler public void WitherExplosion(EntityExplodeEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (e.getEntity() == null || !IslandGuard.inWorld(e.getEntity())) {
    return;
  }
  if (e.getEntityType() == EntityType.WITHER || e.getEntityType() == EntityType.WITHER_SKULL) {
    if (witherSpawnInfo.containsKey(e.getEntity().getUniqueId())) {
      if (!witherSpawnInfo.get(e.getEntity().getUniqueId()).inIslandSpace(e.getLocation())) {
        e.blockList().clear();
        e.setCancelled(true);
      }
    }
  }
}"
34052,"/** 
 * Checks if this location is safe for a player to teleport to. Used by warps and boat exits Unsafe is any liquid or air and also if there's no space
 * @param l - Location to be checked
 * @return true if safe, otherwise false
 */
public static boolean isSafeLocation(final Location l){
  if (l == null) {
    return false;
  }
  final Block ground=l.getBlock().getRelative(BlockFace.DOWN);
  final Block space1=l.getBlock();
  final Block space2=l.getBlock().getRelative(BlockFace.UP);
  if (space1.getType() == Material.PORTAL || ground.getType() == Material.PORTAL || space2.getType() == Material.PORTAL || space1.getType() == Material.ENDER_PORTAL || ground.getType() == Material.ENDER_PORTAL || space2.getType() == Material.ENDER_PORTAL) {
    return false;
  }
  if (ground.getType() == Material.AIR) {
    return false;
  }
  if (ground.isLiquid() || space1.isLiquid() || space2.isLiquid()) {
    if (Settings.acidDamage > 0D) {
      return false;
    }
 else     if (ground.getType().equals(Material.STATIONARY_LAVA) || ground.getType().equals(Material.LAVA) || space1.getType().equals(Material.STATIONARY_LAVA)|| space1.getType().equals(Material.LAVA)|| space2.getType().equals(Material.STATIONARY_LAVA)|| space2.getType().equals(Material.LAVA)) {
      return false;
    }
  }
  MaterialData md=ground.getState().getData();
  if (md instanceof SimpleAttachableMaterialData) {
    Bukkit.getLogger().info(""String_Node_Str"");
    if (md instanceof TrapDoor) {
      TrapDoor trapDoor=(TrapDoor)md;
      if (trapDoor.isOpen()) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  if (ground.getType().equals(Material.CACTUS) || ground.getType().equals(Material.BOAT) || ground.getType().equals(Material.FENCE)|| ground.getType().equals(Material.NETHER_FENCE)|| ground.getType().equals(Material.SIGN_POST)|| ground.getType().equals(Material.WALL_SIGN)) {
    return false;
  }
  if (space1.getType().isSolid()) {
    if (!(space1.getType().equals(Material.SIGN_POST)) && !(space1.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  if (space2.getType().isSolid()) {
    if (!(space2.getType().equals(Material.SIGN_POST)) && !(space2.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks if this location is safe for a player to teleport to. Used by warps and boat exits Unsafe is any liquid or air and also if there's no space
 * @param l - Location to be checked
 * @return true if safe, otherwise false
 */
public static boolean isSafeLocation(final Location l){
  if (l == null) {
    return false;
  }
  final Block ground=l.getBlock().getRelative(BlockFace.DOWN);
  final Block space1=l.getBlock();
  final Block space2=l.getBlock().getRelative(BlockFace.UP);
  if (space1.getType() == Material.PORTAL || ground.getType() == Material.PORTAL || space2.getType() == Material.PORTAL || space1.getType() == Material.ENDER_PORTAL || ground.getType() == Material.ENDER_PORTAL || space2.getType() == Material.ENDER_PORTAL) {
    return false;
  }
  if (ground.getType() == Material.AIR) {
    return false;
  }
  if (ground.isLiquid() || space1.isLiquid() || space2.isLiquid()) {
    if (Settings.acidDamage > 0D) {
      return false;
    }
 else     if (ground.getType().equals(Material.STATIONARY_LAVA) || ground.getType().equals(Material.LAVA) || space1.getType().equals(Material.STATIONARY_LAVA)|| space1.getType().equals(Material.LAVA)|| space2.getType().equals(Material.STATIONARY_LAVA)|| space2.getType().equals(Material.LAVA)) {
      return false;
    }
  }
  MaterialData md=ground.getState().getData();
  if (md instanceof SimpleAttachableMaterialData) {
    if (md instanceof TrapDoor) {
      TrapDoor trapDoor=(TrapDoor)md;
      if (trapDoor.isOpen()) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  if (ground.getType().equals(Material.CACTUS) || ground.getType().equals(Material.BOAT) || ground.getType().equals(Material.FENCE)|| ground.getType().equals(Material.NETHER_FENCE)|| ground.getType().equals(Material.SIGN_POST)|| ground.getType().equals(Material.WALL_SIGN)) {
    return false;
  }
  if (space1.getType().isSolid() && !space1.getType().equals(Material.SIGN_POST) && !space1.getType().equals(Material.WALL_SIGN)) {
    return false;
  }
  if (space2.getType().isSolid() && !space2.getType().equals(Material.SIGN_POST) && !space2.getType().equals(Material.WALL_SIGN)) {
    return false;
  }
  return true;
}"
34053,"/** 
 * Determines a safe teleport spot on player's island or the team island they belong to.
 * @param p UUID of player
 * @param number - starting home location e.g., 1
 * @return Location of a safe teleport spot or null if one cannot be fond
 */
public Location getSafeHomeLocation(final UUID p,int number){
  Location l=plugin.getPlayers().getHomeLocation(p,number);
  if (l == null) {
    number=1;
    l=plugin.getPlayers().getHomeLocation(p,number);
  }
  if (l != null) {
    if (isSafeLocation(l)) {
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
    Location lPlusOne=l.clone();
    lPlusOne.add(new Vector(0,1,0));
    if (lPlusOne != null) {
      if (isSafeLocation(lPlusOne)) {
        plugin.getPlayers().setHomeLocation(p,lPlusOne,number);
        return lPlusOne.clone().add(new Vector(0.5D,0,0.5D));
      }
    }
  }
  if (plugin.getPlayers().inTeam(p)) {
    l=plugin.getPlayers().getTeamIslandLocation(p);
    if (isSafeLocation(l)) {
      plugin.getPlayers().setHomeLocation(p,l,number);
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
 else {
      Location tlh=plugin.getPlayers().getHomeLocation(plugin.getPlayers().getTeamLeader(p));
      if (tlh != null) {
        if (isSafeLocation(tlh)) {
          plugin.getPlayers().setHomeLocation(p,tlh,number);
          return tlh.clone().add(new Vector(0.5D,0,0.5D));
        }
      }
    }
  }
 else {
    l=plugin.getPlayers().getIslandLocation(p);
    if (isSafeLocation(l)) {
      plugin.getPlayers().setHomeLocation(p,l,number);
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
  }
  if (l == null) {
    plugin.getLogger().warning(plugin.getPlayers().getName(p) + ""String_Node_Str"");
    return null;
  }
  Location dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 2.5D,0F,30F);
  if (isSafeLocation(dl)) {
    plugin.getPlayers().setHomeLocation(p,dl,number);
    return dl;
  }
  dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 0.5D,0F,30F);
  if (isSafeLocation(dl)) {
    plugin.getPlayers().setHomeLocation(p,dl,number);
    return dl;
  }
  for (int y=l.getBlockY(); y < 255; y++) {
    final Location n=new Location(l.getWorld(),l.getX() + 0.5D,y,l.getZ() + 0.5D);
    if (isSafeLocation(n)) {
      plugin.getPlayers().setHomeLocation(p,n,number);
      return n;
    }
  }
  if (l != null) {
    plugin.getPlayers().setHomeLocation(p,l,number);
  }
  return l;
}","/** 
 * Determines a safe teleport spot on player's island or the team island they belong to.
 * @param p UUID of player
 * @param number - starting home location e.g., 1
 * @return Location of a safe teleport spot or null if one cannot be fond
 */
public Location getSafeHomeLocation(final UUID p,int number){
  Location l=plugin.getPlayers().getHomeLocation(p,number);
  if (l == null) {
    number=1;
    l=plugin.getPlayers().getHomeLocation(p,number);
  }
  if (l != null) {
    if (isSafeLocation(l)) {
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
    Location lPlusOne=l.clone();
    lPlusOne.add(new Vector(0,1,0));
    if (lPlusOne != null) {
      if (isSafeLocation(lPlusOne)) {
        plugin.getPlayers().setHomeLocation(p,lPlusOne,number);
        return lPlusOne.clone().add(new Vector(0.5D,0,0.5D));
      }
    }
  }
  plugin.getLogger().info(""String_Node_Str"");
  if (plugin.getPlayers().inTeam(p)) {
    l=plugin.getPlayers().getTeamIslandLocation(p);
    if (isSafeLocation(l)) {
      plugin.getPlayers().setHomeLocation(p,l,number);
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
 else {
      Location tlh=plugin.getPlayers().getHomeLocation(plugin.getPlayers().getTeamLeader(p));
      if (tlh != null) {
        if (isSafeLocation(tlh)) {
          plugin.getPlayers().setHomeLocation(p,tlh,number);
          return tlh.clone().add(new Vector(0.5D,0,0.5D));
        }
      }
    }
  }
 else {
    l=plugin.getPlayers().getIslandLocation(p);
    if (isSafeLocation(l)) {
      plugin.getPlayers().setHomeLocation(p,l,number);
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
  }
  if (l == null) {
    plugin.getLogger().warning(plugin.getPlayers().getName(p) + ""String_Node_Str"");
    return null;
  }
  plugin.getLogger().info(""String_Node_Str"");
  Location dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 2.5D,0F,30F);
  if (isSafeLocation(dl)) {
    plugin.getPlayers().setHomeLocation(p,dl,number);
    return dl;
  }
  plugin.getLogger().info(""String_Node_Str"");
  dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 0.5D,0F,30F);
  if (isSafeLocation(dl)) {
    plugin.getPlayers().setHomeLocation(p,dl,number);
    return dl;
  }
  plugin.getLogger().info(""String_Node_Str"");
  for (int y=l.getBlockY(); y < 255; y++) {
    final Location n=new Location(l.getWorld(),l.getX() + 0.5D,y,l.getZ() + 0.5D);
    if (isSafeLocation(n)) {
      plugin.getPlayers().setHomeLocation(p,n,number);
      return n;
    }
  }
  return null;
}"
34054,"/** 
 * Teleport to a safe spot on an island
 * @param plugin
 * @param player
 * @param islandLoc
 */
public SafeSpotTeleport(final ASkyBlock plugin,final Player player,final Location islandLoc){
  Island island=plugin.getGrid().getIslandAt(islandLoc);
  if (island != null) {
    World world=islandLoc.getWorld();
    List<ChunkSnapshot> chunkSnapshot=new ArrayList<ChunkSnapshot>();
    chunkSnapshot.add(island.getCenter().toVector().toLocation(world).getChunk().getChunkSnapshot());
    for (int x=islandLoc.getChunk().getX() - 1; x <= islandLoc.getChunk().getX() + 1; x++) {
      for (int z=islandLoc.getChunk().getZ() - 1; z <= islandLoc.getChunk().getZ() + 1; z++) {
        if (x != islandLoc.getChunk().getX() || z != islandLoc.getChunk().getZ()) {
          chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
        }
      }
    }
    for (int x=island.getMinProtectedX() / 16; x <= (island.getMinProtectedX() + island.getProtectionSize() - 1) / 16; x++) {
      for (int z=island.getMinProtectedZ() / 16; z <= (island.getMinProtectedZ() + island.getProtectionSize() - 1) / 16; z++) {
        chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
      }
    }
    final List<ChunkSnapshot> finalChunk=chunkSnapshot;
    int maxHeight=world.getMaxHeight();
    if (world.getEnvironment().equals(Environment.NETHER)) {
      maxHeight-=20;
    }
    final int worldHeight=maxHeight;
    plugin.getServer().getScheduler().runTaskAsynchronously(plugin,new Runnable(){
      @Override public void run(){
        int x=0;
        int y=0;
        int z=0;
        ChunkSnapshot currentChunk=null;
        boolean safeSpotFound=false;
        search:         for (        ChunkSnapshot chunk : finalChunk) {
          currentChunk=chunk;
          for (x=0; x < 16; x++) {
            for (z=0; z < 16; z++) {
              for (y=0; y <= Math.min(chunk.getHighestBlockYAt(x,z),worldHeight); y++) {
                if (checkBlock(chunk,x,y,z)) {
                  safeSpotFound=true;
                  break search;
                }
              }
            }
          }
        }
        if (currentChunk != null && safeSpotFound) {
          final Vector spot=new Vector((16 * currentChunk.getX()) + x + 0.5D,y,(16 * currentChunk.getZ()) + z + 0.5D);
          plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
            @Override public void run(){
              Location destination=spot.toLocation(islandLoc.getWorld());
              player.teleport(destination);
              if (setHome) {
                plugin.getPlayers().setHomeLocation(player.getUniqueId(),destination,homeNumber);
              }
            }
          }
);
        }
 else {
          plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
            @Override public void run(){
              player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
              if (!failureMessage.isEmpty()) {
                player.sendMessage(failureMessage);
              }
            }
          }
);
        }
      }
      @SuppressWarnings(""String_Node_Str"") private boolean checkBlock(      ChunkSnapshot chunk,      int x,      int y,      int z){
        int type=chunk.getBlockTypeId(x,y,z);
        if (type != 0) {
          int space1=chunk.getBlockTypeId(x,y + 1,z);
          int space2=chunk.getBlockTypeId(x,y + 2,z);
          if (space1 == 0 && space2 == 0) {
            Material mat=Material.getMaterial(type);
            if (!mat.toString().contains(""String_Node_Str"") && !mat.toString().contains(""String_Node_Str"") && !mat.toString().contains(""String_Node_Str"")&& !mat.toString().contains(""String_Node_Str"")) {
switch (mat) {
case ANVIL:
case BARRIER:
case BOAT:
case CACTUS:
case DOUBLE_PLANT:
case ENDER_PORTAL:
case FIRE:
case FLOWER_POT:
case LADDER:
case LAVA:
case LEVER:
case LONG_GRASS:
case PISTON_EXTENSION:
case PISTON_MOVING_PIECE:
case PORTAL:
case SIGN_POST:
case SKULL:
case STANDING_BANNER:
case STATIONARY_LAVA:
case STATIONARY_WATER:
case STONE_BUTTON:
case TORCH:
case TRIPWIRE:
case WATER:
case WEB:
case WOOD_BUTTON:
                break;
default :
              return true;
          }
        }
      }
    }
    return false;
  }
}
);
}
}","/** 
 * Teleport to a safe spot on an island
 * @param plugin
 * @param player
 * @param islandLoc
 */
public SafeSpotTeleport(final ASkyBlock plugin,final Player player,final Location islandLoc){
  Island island=plugin.getGrid().getIslandAt(islandLoc);
  if (island != null) {
    World world=islandLoc.getWorld();
    List<ChunkSnapshot> chunkSnapshot=new ArrayList<ChunkSnapshot>();
    chunkSnapshot.add(island.getCenter().toVector().toLocation(world).getChunk().getChunkSnapshot());
    for (int x=islandLoc.getChunk().getX() - 1; x <= islandLoc.getChunk().getX() + 1; x++) {
      for (int z=islandLoc.getChunk().getZ() - 1; z <= islandLoc.getChunk().getZ() + 1; z++) {
        if (x != islandLoc.getChunk().getX() || z != islandLoc.getChunk().getZ()) {
          chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
        }
      }
    }
    for (int x=island.getMinProtectedX() / 16; x <= (island.getMinProtectedX() + island.getProtectionSize() - 1) / 16; x++) {
      for (int z=island.getMinProtectedZ() / 16; z <= (island.getMinProtectedZ() + island.getProtectionSize() - 1) / 16; z++) {
        chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
      }
    }
    final List<ChunkSnapshot> finalChunk=chunkSnapshot;
    int maxHeight=world.getMaxHeight();
    if (world.getEnvironment().equals(Environment.NETHER)) {
      maxHeight-=20;
    }
    final int worldHeight=maxHeight;
    plugin.getServer().getScheduler().runTaskAsynchronously(plugin,new Runnable(){
      @Override public void run(){
        int x=0;
        int y=0;
        int z=0;
        ChunkSnapshot currentChunk=null;
        boolean safeSpotFound=false;
        search:         for (        ChunkSnapshot chunk : finalChunk) {
          currentChunk=chunk;
          for (x=0; x < 16; x++) {
            for (z=0; z < 16; z++) {
              for (y=0; y <= Math.min(chunk.getHighestBlockYAt(x,z),worldHeight); y++) {
                if (checkBlock(chunk,x,y,z)) {
                  safeSpotFound=true;
                  break search;
                }
              }
            }
          }
        }
        if (currentChunk != null && safeSpotFound) {
          final Vector spot=new Vector((16 * currentChunk.getX()) + x + 0.5D,y,(16 * currentChunk.getZ()) + z + 0.5D);
          plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
            @Override public void run(){
              Location destination=spot.toLocation(islandLoc.getWorld());
              plugin.getLogger().info(""String_Node_Str"" + destination);
              player.teleport(destination);
              if (setHome) {
                plugin.getPlayers().setHomeLocation(player.getUniqueId(),destination,homeNumber);
              }
            }
          }
);
        }
 else {
          plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
            @Override public void run(){
              player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
              if (!failureMessage.isEmpty()) {
                player.sendMessage(failureMessage);
              }
            }
          }
);
        }
      }
      @SuppressWarnings(""String_Node_Str"") private boolean checkBlock(      ChunkSnapshot chunk,      int x,      int y,      int z){
        int type=chunk.getBlockTypeId(x,y,z);
        if (type != 0) {
          int space1=chunk.getBlockTypeId(x,y + 1,z);
          int space2=chunk.getBlockTypeId(x,y + 2,z);
          if (space1 == 0 && space2 == 0) {
            Material mat=Material.getMaterial(type);
            if (!mat.toString().contains(""String_Node_Str"") && !mat.toString().contains(""String_Node_Str"") && !mat.toString().contains(""String_Node_Str"")&& !mat.toString().contains(""String_Node_Str"")) {
switch (mat) {
case ANVIL:
case BARRIER:
case BOAT:
case CACTUS:
case DOUBLE_PLANT:
case ENDER_PORTAL:
case FIRE:
case FLOWER_POT:
case LADDER:
case LAVA:
case LEVER:
case LONG_GRASS:
case PISTON_EXTENSION:
case PISTON_MOVING_PIECE:
case PORTAL:
case SIGN_POST:
case SKULL:
case STANDING_BANNER:
case STATIONARY_LAVA:
case STATIONARY_WATER:
case STONE_BUTTON:
case TORCH:
case TRIPWIRE:
case WATER:
case WEB:
case WOOD_BUTTON:
                break;
default :
              return true;
          }
        }
      }
    }
    return false;
  }
}
);
}
}"
34055,"/** 
 * Checks if this location is safe for a player to teleport to. Used by warps and boat exits Unsafe is any liquid or air and also if there's no space
 * @param l - Location to be checked
 * @return true if safe, otherwise false
 */
public static boolean isSafeLocation(final Location l){
  if (l == null) {
    return false;
  }
  final Block ground=l.getBlock().getRelative(BlockFace.DOWN);
  final Block space1=l.getBlock();
  final Block space2=l.getBlock().getRelative(BlockFace.UP);
  if (space1.getType() == Material.PORTAL || ground.getType() == Material.PORTAL || space2.getType() == Material.PORTAL || space1.getType() == Material.ENDER_PORTAL || ground.getType() == Material.ENDER_PORTAL || space2.getType() == Material.ENDER_PORTAL) {
    return false;
  }
  if (ground.getType() == Material.AIR) {
    return false;
  }
  if (ground.isLiquid() || space1.isLiquid() || space2.isLiquid()) {
    if (Settings.acidDamage > 0D) {
      return false;
    }
 else     if (ground.getType().equals(Material.STATIONARY_LAVA) || ground.getType().equals(Material.LAVA) || space1.getType().equals(Material.STATIONARY_LAVA)|| space1.getType().equals(Material.LAVA)|| space2.getType().equals(Material.STATIONARY_LAVA)|| space2.getType().equals(Material.LAVA)) {
      return false;
    }
  }
  MaterialData md=ground.getState().getData();
  if (md instanceof SimpleAttachableMaterialData) {
    Bukkit.getLogger().info(""String_Node_Str"");
    if (md instanceof TrapDoor) {
      TrapDoor trapDoor=(TrapDoor)md;
      if (trapDoor.isOpen()) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  if (ground.getType().equals(Material.CACTUS) || ground.getType().equals(Material.BOAT) || ground.getType().equals(Material.FENCE)|| ground.getType().equals(Material.NETHER_FENCE)|| ground.getType().equals(Material.SIGN_POST)|| ground.getType().equals(Material.WALL_SIGN)) {
    return false;
  }
  if (space1.getType().isSolid()) {
    if (!(space1.getType().equals(Material.SIGN_POST)) && !(space1.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  if (space2.getType().isSolid()) {
    if (!(space2.getType().equals(Material.SIGN_POST)) && !(space2.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks if this location is safe for a player to teleport to. Used by warps and boat exits Unsafe is any liquid or air and also if there's no space
 * @param l - Location to be checked
 * @return true if safe, otherwise false
 */
public static boolean isSafeLocation(final Location l){
  if (l == null) {
    return false;
  }
  final Block ground=l.getBlock().getRelative(BlockFace.DOWN);
  final Block space1=l.getBlock();
  final Block space2=l.getBlock().getRelative(BlockFace.UP);
  if (space1.getType() == Material.PORTAL || ground.getType() == Material.PORTAL || space2.getType() == Material.PORTAL || space1.getType() == Material.ENDER_PORTAL || ground.getType() == Material.ENDER_PORTAL || space2.getType() == Material.ENDER_PORTAL) {
    return false;
  }
  if (ground.getType() == Material.AIR) {
    return false;
  }
  if (ground.isLiquid() || space1.isLiquid() || space2.isLiquid()) {
    if (Settings.acidDamage > 0D) {
      return false;
    }
 else     if (ground.getType().equals(Material.STATIONARY_LAVA) || ground.getType().equals(Material.LAVA) || space1.getType().equals(Material.STATIONARY_LAVA)|| space1.getType().equals(Material.LAVA)|| space2.getType().equals(Material.STATIONARY_LAVA)|| space2.getType().equals(Material.LAVA)) {
      return false;
    }
  }
  MaterialData md=ground.getState().getData();
  if (md instanceof SimpleAttachableMaterialData) {
    if (md instanceof TrapDoor) {
      TrapDoor trapDoor=(TrapDoor)md;
      if (trapDoor.isOpen()) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  if (ground.getType().equals(Material.CACTUS) || ground.getType().equals(Material.BOAT) || ground.getType().equals(Material.FENCE)|| ground.getType().equals(Material.NETHER_FENCE)|| ground.getType().equals(Material.SIGN_POST)|| ground.getType().equals(Material.WALL_SIGN)) {
    return false;
  }
  if (space1.getType().isSolid() && !space1.getType().equals(Material.SIGN_POST) && !space1.getType().equals(Material.WALL_SIGN)) {
    return false;
  }
  if (space2.getType().isSolid() && !space2.getType().equals(Material.SIGN_POST) && !space2.getType().equals(Material.WALL_SIGN)) {
    return false;
  }
  return true;
}"
34056,"/** 
 * Determines a safe teleport spot on player's island or the team island they belong to.
 * @param p UUID of player
 * @param number - starting home location e.g., 1
 * @return Location of a safe teleport spot or null if one cannot be fond
 */
public Location getSafeHomeLocation(final UUID p,int number){
  Location l=plugin.getPlayers().getHomeLocation(p,number);
  if (l == null) {
    number=1;
    l=plugin.getPlayers().getHomeLocation(p,number);
  }
  if (l != null) {
    if (isSafeLocation(l)) {
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
    Location lPlusOne=l.clone();
    lPlusOne.add(new Vector(0,1,0));
    if (lPlusOne != null) {
      if (isSafeLocation(lPlusOne)) {
        plugin.getPlayers().setHomeLocation(p,lPlusOne,number);
        return lPlusOne.clone().add(new Vector(0.5D,0,0.5D));
      }
    }
  }
  if (plugin.getPlayers().inTeam(p)) {
    l=plugin.getPlayers().getTeamIslandLocation(p);
    if (isSafeLocation(l)) {
      plugin.getPlayers().setHomeLocation(p,l,number);
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
 else {
      Location tlh=plugin.getPlayers().getHomeLocation(plugin.getPlayers().getTeamLeader(p));
      if (tlh != null) {
        if (isSafeLocation(tlh)) {
          plugin.getPlayers().setHomeLocation(p,tlh,number);
          return tlh.clone().add(new Vector(0.5D,0,0.5D));
        }
      }
    }
  }
 else {
    l=plugin.getPlayers().getIslandLocation(p);
    if (isSafeLocation(l)) {
      plugin.getPlayers().setHomeLocation(p,l,number);
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
  }
  if (l == null) {
    plugin.getLogger().warning(plugin.getPlayers().getName(p) + ""String_Node_Str"");
    return null;
  }
  Location dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 2.5D,0F,30F);
  if (isSafeLocation(dl)) {
    plugin.getPlayers().setHomeLocation(p,dl,number);
    return dl;
  }
  dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 0.5D,0F,30F);
  if (isSafeLocation(dl)) {
    plugin.getPlayers().setHomeLocation(p,dl,number);
    return dl;
  }
  for (int y=l.getBlockY(); y < 255; y++) {
    final Location n=new Location(l.getWorld(),l.getX() + 0.5D,y,l.getZ() + 0.5D);
    if (isSafeLocation(n)) {
      plugin.getPlayers().setHomeLocation(p,n,number);
      return n;
    }
  }
  if (l != null) {
    plugin.getPlayers().setHomeLocation(p,l,number);
  }
  return l;
}","/** 
 * Determines a safe teleport spot on player's island or the team island they belong to.
 * @param p UUID of player
 * @param number - starting home location e.g., 1
 * @return Location of a safe teleport spot or null if one cannot be fond
 */
public Location getSafeHomeLocation(final UUID p,int number){
  Location l=plugin.getPlayers().getHomeLocation(p,number);
  if (l == null) {
    number=1;
    l=plugin.getPlayers().getHomeLocation(p,number);
  }
  if (l != null) {
    if (isSafeLocation(l)) {
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
    Location lPlusOne=l.clone();
    lPlusOne.add(new Vector(0,1,0));
    if (lPlusOne != null) {
      if (isSafeLocation(lPlusOne)) {
        plugin.getPlayers().setHomeLocation(p,lPlusOne,number);
        return lPlusOne.clone().add(new Vector(0.5D,0,0.5D));
      }
    }
  }
  plugin.getLogger().info(""String_Node_Str"");
  if (plugin.getPlayers().inTeam(p)) {
    l=plugin.getPlayers().getTeamIslandLocation(p);
    if (isSafeLocation(l)) {
      plugin.getPlayers().setHomeLocation(p,l,number);
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
 else {
      Location tlh=plugin.getPlayers().getHomeLocation(plugin.getPlayers().getTeamLeader(p));
      if (tlh != null) {
        if (isSafeLocation(tlh)) {
          plugin.getPlayers().setHomeLocation(p,tlh,number);
          return tlh.clone().add(new Vector(0.5D,0,0.5D));
        }
      }
    }
  }
 else {
    l=plugin.getPlayers().getIslandLocation(p);
    if (isSafeLocation(l)) {
      plugin.getPlayers().setHomeLocation(p,l,number);
      return l.clone().add(new Vector(0.5D,0,0.5D));
    }
  }
  if (l == null) {
    plugin.getLogger().warning(plugin.getPlayers().getName(p) + ""String_Node_Str"");
    return null;
  }
  plugin.getLogger().info(""String_Node_Str"");
  Location dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 2.5D,0F,30F);
  if (isSafeLocation(dl)) {
    plugin.getPlayers().setHomeLocation(p,dl,number);
    return dl;
  }
  plugin.getLogger().info(""String_Node_Str"");
  dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 0.5D,0F,30F);
  if (isSafeLocation(dl)) {
    plugin.getPlayers().setHomeLocation(p,dl,number);
    return dl;
  }
  plugin.getLogger().info(""String_Node_Str"");
  for (int y=l.getBlockY(); y < 255; y++) {
    final Location n=new Location(l.getWorld(),l.getX() + 0.5D,y,l.getZ() + 0.5D);
    if (isSafeLocation(n)) {
      plugin.getPlayers().setHomeLocation(p,n,number);
      return n;
    }
  }
  return null;
}"
34057,"/** 
 * Teleport to a safe spot on an island
 * @param plugin
 * @param player
 * @param islandLoc
 */
public SafeSpotTeleport(final ASkyBlock plugin,final Player player,final Location islandLoc){
  Island island=plugin.getGrid().getIslandAt(islandLoc);
  if (island != null) {
    World world=islandLoc.getWorld();
    List<ChunkSnapshot> chunkSnapshot=new ArrayList<ChunkSnapshot>();
    chunkSnapshot.add(island.getCenter().toVector().toLocation(world).getChunk().getChunkSnapshot());
    for (int x=islandLoc.getChunk().getX() - 1; x <= islandLoc.getChunk().getX() + 1; x++) {
      for (int z=islandLoc.getChunk().getZ() - 1; z <= islandLoc.getChunk().getZ() + 1; z++) {
        if (x != islandLoc.getChunk().getX() || z != islandLoc.getChunk().getZ()) {
          chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
        }
      }
    }
    for (int x=island.getMinProtectedX() / 16; x <= (island.getMinProtectedX() + island.getProtectionSize() - 1) / 16; x++) {
      for (int z=island.getMinProtectedZ() / 16; z <= (island.getMinProtectedZ() + island.getProtectionSize() - 1) / 16; z++) {
        chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
      }
    }
    final List<ChunkSnapshot> finalChunk=chunkSnapshot;
    int maxHeight=world.getMaxHeight();
    if (world.getEnvironment().equals(Environment.NETHER)) {
      maxHeight-=20;
    }
    final int worldHeight=maxHeight;
    plugin.getServer().getScheduler().runTaskAsynchronously(plugin,new Runnable(){
      @Override public void run(){
        int x=0;
        int y=0;
        int z=0;
        ChunkSnapshot currentChunk=null;
        boolean safeSpotFound=false;
        search:         for (        ChunkSnapshot chunk : finalChunk) {
          currentChunk=chunk;
          for (x=0; x < 16; x++) {
            for (z=0; z < 16; z++) {
              for (y=0; y <= Math.min(chunk.getHighestBlockYAt(x,z),worldHeight); y++) {
                if (checkBlock(chunk,x,y,z)) {
                  safeSpotFound=true;
                  break search;
                }
              }
            }
          }
        }
        if (currentChunk != null && safeSpotFound) {
          final Vector spot=new Vector((16 * currentChunk.getX()) + x + 0.5D,y,(16 * currentChunk.getZ()) + z + 0.5D);
          plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
            @Override public void run(){
              Location destination=spot.toLocation(islandLoc.getWorld());
              player.teleport(destination);
              if (setHome) {
                plugin.getPlayers().setHomeLocation(player.getUniqueId(),destination,homeNumber);
              }
            }
          }
);
        }
 else {
          plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
            @Override public void run(){
              player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
              if (!failureMessage.isEmpty()) {
                player.sendMessage(failureMessage);
              }
            }
          }
);
        }
      }
      @SuppressWarnings(""String_Node_Str"") private boolean checkBlock(      ChunkSnapshot chunk,      int x,      int y,      int z){
        int type=chunk.getBlockTypeId(x,y,z);
        if (type != 0) {
          int space1=chunk.getBlockTypeId(x,y + 1,z);
          int space2=chunk.getBlockTypeId(x,y + 2,z);
          if (space1 == 0 && space2 == 0) {
            Material mat=Material.getMaterial(type);
            if (!mat.toString().contains(""String_Node_Str"") && !mat.toString().contains(""String_Node_Str"") && !mat.toString().contains(""String_Node_Str"")&& !mat.toString().contains(""String_Node_Str"")) {
switch (mat) {
case ANVIL:
case BARRIER:
case BOAT:
case CACTUS:
case DOUBLE_PLANT:
case ENDER_PORTAL:
case FIRE:
case FLOWER_POT:
case LADDER:
case LAVA:
case LEVER:
case LONG_GRASS:
case PISTON_EXTENSION:
case PISTON_MOVING_PIECE:
case PORTAL:
case SIGN_POST:
case SKULL:
case STANDING_BANNER:
case STATIONARY_LAVA:
case STATIONARY_WATER:
case STONE_BUTTON:
case TORCH:
case TRIPWIRE:
case WATER:
case WEB:
case WOOD_BUTTON:
                break;
default :
              return true;
          }
        }
      }
    }
    return false;
  }
}
);
}
}","/** 
 * Teleport to a safe spot on an island
 * @param plugin
 * @param player
 * @param islandLoc
 */
public SafeSpotTeleport(final ASkyBlock plugin,final Player player,final Location islandLoc){
  Island island=plugin.getGrid().getIslandAt(islandLoc);
  if (island != null) {
    World world=islandLoc.getWorld();
    List<ChunkSnapshot> chunkSnapshot=new ArrayList<ChunkSnapshot>();
    chunkSnapshot.add(island.getCenter().toVector().toLocation(world).getChunk().getChunkSnapshot());
    for (int x=islandLoc.getChunk().getX() - 1; x <= islandLoc.getChunk().getX() + 1; x++) {
      for (int z=islandLoc.getChunk().getZ() - 1; z <= islandLoc.getChunk().getZ() + 1; z++) {
        if (x != islandLoc.getChunk().getX() || z != islandLoc.getChunk().getZ()) {
          chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
        }
      }
    }
    for (int x=island.getMinProtectedX() / 16; x <= (island.getMinProtectedX() + island.getProtectionSize() - 1) / 16; x++) {
      for (int z=island.getMinProtectedZ() / 16; z <= (island.getMinProtectedZ() + island.getProtectionSize() - 1) / 16; z++) {
        chunkSnapshot.add(world.getChunkAt(x,z).getChunkSnapshot());
      }
    }
    final List<ChunkSnapshot> finalChunk=chunkSnapshot;
    int maxHeight=world.getMaxHeight();
    if (world.getEnvironment().equals(Environment.NETHER)) {
      maxHeight-=20;
    }
    final int worldHeight=maxHeight;
    plugin.getServer().getScheduler().runTaskAsynchronously(plugin,new Runnable(){
      @Override public void run(){
        int x=0;
        int y=0;
        int z=0;
        ChunkSnapshot currentChunk=null;
        boolean safeSpotFound=false;
        search:         for (        ChunkSnapshot chunk : finalChunk) {
          currentChunk=chunk;
          for (x=0; x < 16; x++) {
            for (z=0; z < 16; z++) {
              for (y=0; y <= Math.min(chunk.getHighestBlockYAt(x,z),worldHeight); y++) {
                if (checkBlock(chunk,x,y,z)) {
                  safeSpotFound=true;
                  break search;
                }
              }
            }
          }
        }
        if (currentChunk != null && safeSpotFound) {
          final Vector spot=new Vector((16 * currentChunk.getX()) + x + 0.5D,y,(16 * currentChunk.getZ()) + z + 0.5D);
          plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
            @Override public void run(){
              Location destination=spot.toLocation(islandLoc.getWorld());
              plugin.getLogger().info(""String_Node_Str"" + destination);
              player.teleport(destination);
              if (setHome) {
                plugin.getPlayers().setHomeLocation(player.getUniqueId(),destination,homeNumber);
              }
            }
          }
);
        }
 else {
          plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
            @Override public void run(){
              player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
              if (!failureMessage.isEmpty()) {
                player.sendMessage(failureMessage);
              }
            }
          }
);
        }
      }
      @SuppressWarnings(""String_Node_Str"") private boolean checkBlock(      ChunkSnapshot chunk,      int x,      int y,      int z){
        int type=chunk.getBlockTypeId(x,y,z);
        if (type != 0) {
          int space1=chunk.getBlockTypeId(x,y + 1,z);
          int space2=chunk.getBlockTypeId(x,y + 2,z);
          if (space1 == 0 && space2 == 0) {
            Material mat=Material.getMaterial(type);
            if (!mat.toString().contains(""String_Node_Str"") && !mat.toString().contains(""String_Node_Str"") && !mat.toString().contains(""String_Node_Str"")&& !mat.toString().contains(""String_Node_Str"")) {
switch (mat) {
case ANVIL:
case BARRIER:
case BOAT:
case CACTUS:
case DOUBLE_PLANT:
case ENDER_PORTAL:
case FIRE:
case FLOWER_POT:
case LADDER:
case LAVA:
case LEVER:
case LONG_GRASS:
case PISTON_EXTENSION:
case PISTON_MOVING_PIECE:
case PORTAL:
case SIGN_POST:
case SKULL:
case STANDING_BANNER:
case STATIONARY_LAVA:
case STATIONARY_WATER:
case STONE_BUTTON:
case TORCH:
case TRIPWIRE:
case WATER:
case WEB:
case WOOD_BUTTON:
                break;
default :
              return true;
          }
        }
      }
    }
    return false;
  }
}
);
}
}"
34058,"private void resetPlayer(Player player,Location oldIsland){
  CoopPlay.getInstance().clearMyInvitedCoops(player);
  CoopPlay.getInstance().clearMyCoops(player);
  WarpSigns.removeWarp(player.getUniqueId());
  if (oldIsland != null) {
    CoopPlay.getInstance().clearAllIslandCoops(oldIsland);
    if (oldIsland.getWorld().equals(ASkyBlock.getIslandWorld())) {
      plugin.getGrid().removeMobsFromIsland(oldIsland);
      new DeleteIslandChunk(plugin,oldIsland);
      if (Settings.createNether && Settings.newNether) {
        Location otherIsland=oldIsland.toVector().toLocation(ASkyBlock.getNetherWorld());
        plugin.getGrid().removeMobsFromIsland(otherIsland);
        new DeleteIslandChunk(plugin,otherIsland);
      }
    }
 else     if (Settings.createNether && Settings.newNether && oldIsland.getWorld().equals(ASkyBlock.getNetherWorld())) {
      plugin.getGrid().removeMobsFromIsland(oldIsland);
      new DeleteIslandChunk(plugin,oldIsland);
      Location otherIsland=oldIsland.toVector().toLocation(ASkyBlock.getIslandWorld());
      plugin.getGrid().removeMobsFromIsland(otherIsland);
      new DeleteIslandChunk(plugin,otherIsland);
    }
 else {
      plugin.getLogger().severe(""String_Node_Str"" + oldIsland.toString() + ""String_Node_Str"");
    }
  }
  runCommands(Settings.resetCommands,player.getUniqueId());
}","private void resetPlayer(Player player,Location oldIsland){
  plugin.getPlayers().setResetsLeft(player.getUniqueId(),plugin.getPlayers().getResetsLeft(player.getUniqueId()) - 1);
  CoopPlay.getInstance().clearMyInvitedCoops(player);
  CoopPlay.getInstance().clearMyCoops(player);
  WarpSigns.removeWarp(player.getUniqueId());
  if (oldIsland != null) {
    CoopPlay.getInstance().clearAllIslandCoops(oldIsland);
    if (oldIsland.getWorld().equals(ASkyBlock.getIslandWorld())) {
      plugin.getGrid().removeMobsFromIsland(oldIsland);
      new DeleteIslandChunk(plugin,oldIsland);
      if (Settings.createNether && Settings.newNether) {
        Location otherIsland=oldIsland.toVector().toLocation(ASkyBlock.getNetherWorld());
        plugin.getGrid().removeMobsFromIsland(otherIsland);
        new DeleteIslandChunk(plugin,otherIsland);
      }
    }
 else     if (Settings.createNether && Settings.newNether && oldIsland.getWorld().equals(ASkyBlock.getNetherWorld())) {
      plugin.getGrid().removeMobsFromIsland(oldIsland);
      new DeleteIslandChunk(plugin,oldIsland);
      Location otherIsland=oldIsland.toVector().toLocation(ASkyBlock.getIslandWorld());
      plugin.getGrid().removeMobsFromIsland(otherIsland);
      new DeleteIslandChunk(plugin,otherIsland);
    }
 else {
      plugin.getLogger().severe(""String_Node_Str"" + oldIsland.toString() + ""String_Node_Str"");
    }
  }
  runCommands(Settings.resetCommands,player.getUniqueId());
}"
34059,"@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      chooseIsland(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !PlayerEvents.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!pendingNewIslandSelection.contains(playerUUID)) {
      return false;
    }
    pendingNewIslandSelection.remove(playerUUID);
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    newIsland(player);
    if (resettingIsland.contains(playerUUID)) {
      resettingIsland.remove(playerUUID);
      resetPlayer(player,oldIsland);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(SettingsPanel.islandGuardPanel());
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        for (        Player target : plugin.getServer().getOnlinePlayers()) {
          if (!player.equals(target) && !target.isOp() && !VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")&& (target.getWorld().equals(ASkyBlock.getIslandWorld()) || target.getWorld().equals(ASkyBlock.getNetherWorld()))&& plugin.getGrid().isOnIsland(player,target)&& !CoopPlay.getInstance().getCoopPlayers(island.getCenter()).contains(target.getUniqueId())) {
            if (plugin.getPlayers().inTeam(target.getUniqueId()) || plugin.getPlayers().hasIsland(target.getUniqueId())) {
              plugin.getGrid().homeTeleport(target);
            }
 else {
              if (!target.performCommand(Settings.SPAWNCOMMAND)) {
                target.teleport(player.getWorld().getSpawnLocation());
              }
            }
            target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
            plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
            player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
          }
        }
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
        plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
        plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
      return true;
    }
    plugin.getGrid().homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.getGrid().removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(ControlPanel.miniShop);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player,false);
if (schems.isEmpty()) {
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player);
  resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player,schems.get(0));
  resetPlayer(player,oldIsland);
}
 else {
  if (Settings.useSchematicPanel) {
    pendingNewIslandSelection.add(playerUUID);
    resettingIsland.add(playerUUID);
    player.openInventory(SchematicsPanel.getSchematicPanel(player));
  }
 else {
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    schems=getSchematics(player,true);
    if (schems.isEmpty()) {
      newIsland(player);
    }
 else {
      newIsland(player,schems.get(0));
    }
    resetPlayer(player,oldIsland);
  }
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
  maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
if (maxHomes < 1) {
  maxHomes=1;
}
}
if (maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (maxHomes > 1) {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBan);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpUnban);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  return true;
}
Inventory inv=BiomesPanel.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.getGrid().playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    for (    PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
      if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
        maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
      }
      if (maxSize < Settings.maxTeamSize) {
        maxSize=Settings.maxTeamSize;
      }
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (Settings.maxTeamSizeVIP > maxSize) {
        maxSize=Settings.maxTeamSizeVIP;
      }
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (Settings.maxTeamSizeVIP2 > maxSize) {
        maxSize=Settings.maxTeamSizeVIP2;
      }
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.getGrid().homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    WarpSigns.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      plugin.getMessages().setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
  resettingIsland.remove(playerUUID);
  resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
  plugin.getGrid().homeTeleport(player,1);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxHomes < 1) {
    maxHomes=1;
  }
}
if (number > maxHomes) {
  if (maxHomes > 1) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
  }
 else {
    plugin.getGrid().homeTeleport(player,1);
  }
}
 else {
  plugin.getGrid().homeTeleport(player,number);
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
  maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
}
if (maxHomes > 1) {
int number=0;
try {
  number=Integer.valueOf(split[1]);
  if (number < 0 || number > maxHomes) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
  }
 else {
    plugin.getGrid().homeSet(player,number);
  }
}
 catch (Exception e) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=WarpSigns.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Island island=plugin.getGrid().getIslandAt(warpSpot);
  if (island != null && island.isLocked()) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).lockIslandLocked);
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((GridManager.isSafeLocation(inFront))) {
      float yaw=Util.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      Player warpOwner=plugin.getServer().getPlayer(foundWarp);
      if (warpOwner != null) {
        warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
      }
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
    WarpSigns.removeWarp(warpSpot);
    return true;
  }
  if (!(GridManager.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    for (    PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
      if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
        maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
      }
      if (maxSize < Settings.maxTeamSize) {
        maxSize=Settings.maxTeamSize;
      }
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
      if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
        Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().inTeam(targetPlayerUUID)) {
if (plugin.getPlayers().getTeamLeader(playerUUID).equals(plugin.getPlayers().getTeamLeader(targetPlayerUUID))) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotTeamMember);
return true;
}
}
if (plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).banAlreadyBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getPlayers().ban(playerUUID,target.getUniqueId());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (!plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.GREEN + plugin.myLocale(targetPlayerUUID).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getPlayers().unBan(playerUUID,target.getUniqueId());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().equals(ASkyBlock.getIslandWorld())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    target.getInventory().clear();
    target.getInventory().setArmorContents(null);
    target.getInventory().setHelmet(null);
    target.getInventory().setChestplate(null);
    target.getInventory().setLeggings(null);
    target.getInventory().setBoots(null);
    target.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(target.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
    plugin.getPlayers().save(target.getUniqueId());
    TopTen.topTenAddEntry(playerUUID,0);
    target.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  plugin.getMessages().setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
WarpSigns.removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
    }
 else {
      plugin.getMessages().setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}","@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      chooseIsland(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !PlayerEvents.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!pendingNewIslandSelection.contains(playerUUID)) {
      return false;
    }
    pendingNewIslandSelection.remove(playerUUID);
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    newIsland(player);
    if (resettingIsland.contains(playerUUID)) {
      resettingIsland.remove(playerUUID);
      resetPlayer(player,oldIsland);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(SettingsPanel.islandGuardPanel());
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        for (        Player target : plugin.getServer().getOnlinePlayers()) {
          if (!player.equals(target) && !target.isOp() && !VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")&& (target.getWorld().equals(ASkyBlock.getIslandWorld()) || target.getWorld().equals(ASkyBlock.getNetherWorld()))&& plugin.getGrid().isOnIsland(player,target)&& !CoopPlay.getInstance().getCoopPlayers(island.getCenter()).contains(target.getUniqueId())) {
            if (plugin.getPlayers().inTeam(target.getUniqueId()) || plugin.getPlayers().hasIsland(target.getUniqueId())) {
              plugin.getGrid().homeTeleport(target);
            }
 else {
              if (!target.performCommand(Settings.SPAWNCOMMAND)) {
                target.teleport(player.getWorld().getSpawnLocation());
              }
            }
            target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
            plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
            player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
          }
        }
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
        plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
        plugin.getMessages().tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.getMessages().tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
      return true;
    }
    plugin.getGrid().homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.getGrid().removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(ControlPanel.miniShop);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player,false);
if (schems.isEmpty()) {
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player);
  resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player,schems.get(0));
  resetPlayer(player,oldIsland);
}
 else {
  if (Settings.useSchematicPanel) {
    pendingNewIslandSelection.add(playerUUID);
    resettingIsland.add(playerUUID);
    player.openInventory(SchematicsPanel.getSchematicPanel(player));
  }
 else {
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    schems=getSchematics(player,true);
    if (schems.isEmpty()) {
      newIsland(player);
    }
 else {
      newIsland(player,schems.get(0));
    }
    resetPlayer(player,oldIsland);
  }
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
  maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
if (maxHomes < 1) {
  maxHomes=1;
}
}
if (maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (maxHomes > 1) {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBan);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpUnban);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  return true;
}
Inventory inv=BiomesPanel.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.getGrid().playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    for (    PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
      if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
        maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
      }
      if (maxSize < Settings.maxTeamSize) {
        maxSize=Settings.maxTeamSize;
      }
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (Settings.maxTeamSizeVIP > maxSize) {
        maxSize=Settings.maxTeamSizeVIP;
      }
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (Settings.maxTeamSizeVIP2 > maxSize) {
        maxSize=Settings.maxTeamSizeVIP2;
      }
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.getGrid().homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    WarpSigns.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      plugin.getMessages().setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  for (  PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
    if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
    }
    if (maxSize < Settings.maxTeamSize) {
      maxSize=Settings.maxTeamSize;
    }
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
  resettingIsland.remove(playerUUID);
  resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
  plugin.getGrid().homeTeleport(player,1);
}
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
  if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
  }
  if (maxHomes < 1) {
    maxHomes=1;
  }
}
if (number > maxHomes) {
  if (maxHomes > 1) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
  }
 else {
    plugin.getGrid().homeTeleport(player,1);
  }
}
 else {
  plugin.getGrid().homeTeleport(player,number);
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int maxHomes=Settings.maxHomes;
for (PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
  maxHomes=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
}
}
if (maxHomes > 1) {
int number=0;
try {
  number=Integer.valueOf(split[1]);
  if (number < 0 || number > maxHomes) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
  }
 else {
    plugin.getGrid().homeSet(player,number);
  }
}
 catch (Exception e) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=WarpSigns.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Island island=plugin.getGrid().getIslandAt(warpSpot);
  if (island != null && island.isLocked()) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).lockIslandLocked);
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((GridManager.isSafeLocation(inFront))) {
      float yaw=Util.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      Player warpOwner=plugin.getServer().getPlayer(foundWarp);
      if (warpOwner != null) {
        warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
      }
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
    WarpSigns.removeWarp(warpSpot);
    return true;
  }
  if (!(GridManager.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    for (    PermissionAttachmentInfo perms : player.getEffectivePermissions()) {
      if (perms.getPermission().startsWith(Settings.PERMPREFIX + ""String_Node_Str"")) {
        maxSize=Integer.valueOf(perms.getPermission().split(Settings.PERMPREFIX + ""String_Node_Str"")[1]);
      }
      if (maxSize < Settings.maxTeamSize) {
        maxSize=Settings.maxTeamSize;
      }
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
      if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
        Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().inTeam(targetPlayerUUID)) {
if (plugin.getPlayers().getTeamLeader(playerUUID).equals(plugin.getPlayers().getTeamLeader(targetPlayerUUID))) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotTeamMember);
return true;
}
}
if (plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).banAlreadyBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).banBanned.replace(""String_Node_Str"",player.getDisplayName()));
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getPlayers().ban(playerUUID,target.getUniqueId());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotYourself);
return true;
}
if (!plugin.getPlayers().isBanned(playerUUID,targetPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).banNotBanned.replace(""String_Node_Str"",split[1]));
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
 else {
plugin.getMessages().setMessage(targetPlayerUUID,ChatColor.GREEN + plugin.myLocale(targetPlayerUUID).banLifted.replace(""String_Node_Str"",player.getDisplayName()));
}
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getMessages().tellTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getMessages().tellOfflineTeam(playerUUID,ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).banLiftedSuccess.replace(""String_Node_Str"",target.getDisplayName()));
plugin.getPlayers().unBan(playerUUID,target.getUniqueId());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().equals(ASkyBlock.getIslandWorld())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    target.getInventory().clear();
    target.getInventory().setArmorContents(null);
    target.getInventory().setHelmet(null);
    target.getInventory().setChestplate(null);
    target.getInventory().setLeggings(null);
    target.getInventory().setBoots(null);
    target.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(target.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
    plugin.getPlayers().save(target.getUniqueId());
    TopTen.topTenAddEntry(playerUUID,0);
    target.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  plugin.getMessages().setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
WarpSigns.removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
    }
 else {
      plugin.getMessages().setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}"
34060,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onSignBreak(BlockBreakEvent e){
  Block b=e.getBlock();
  Player player=e.getPlayer();
  if (b.getWorld().equals(ASkyBlock.getIslandWorld())) {
    if (b.getType().equals(Material.SIGN_POST)) {
      Sign s=(Sign)b.getState();
      if (s != null) {
        if (s.getLine(0).equalsIgnoreCase(ChatColor.GREEN + plugin.myLocale().warpswelcomeLine)) {
          if (checkWarp(s.getLocation())) {
            final Location playerSignLoc=getWarp(player.getUniqueId());
            if (playerSignLoc != null) {
              if (playerSignLoc.equals(s.getLocation())) {
                player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).warpssignRemoved);
                removeWarp(player.getUniqueId());
              }
 else {
                player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNoRemove);
                e.setCancelled(true);
              }
            }
 else {
              player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNoRemove);
              e.setCancelled(true);
            }
          }
        }
      }
    }
  }
}","/** 
 * Checks to see if a sign has been broken
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onSignBreak(BlockBreakEvent e){
  Block b=e.getBlock();
  Player player=e.getPlayer();
  if (b.getWorld().equals(ASkyBlock.getIslandWorld())) {
    if (b.getType().equals(Material.SIGN_POST)) {
      Sign s=(Sign)b.getState();
      if (s != null) {
        if (s.getLine(0).equalsIgnoreCase(ChatColor.GREEN + plugin.myLocale().warpswelcomeLine)) {
          if (checkWarp(s.getLocation())) {
            final Location playerSignLoc=getWarp(player.getUniqueId());
            if (playerSignLoc != null) {
              if (playerSignLoc.equals(s.getLocation())) {
                player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).warpssignRemoved);
                removeWarp(player.getUniqueId());
              }
 else {
                player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNoRemove);
                e.setCancelled(true);
              }
            }
 else {
              player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNoRemove);
              e.setCancelled(true);
            }
          }
        }
      }
    }
  }
}"
34061,"/** 
 * Provides the location of the warp for player
 * @param player - the warp requested
 * @return Location of warp
 */
public static Location getWarp(UUID player){
  if (warpList.containsKey(player)) {
    return Util.getLocationString((String)warpList.get(player));
  }
 else {
    return null;
  }
}","/** 
 * Provides the location of the warp for player or null if one is not found
 * @param player - the warp requested
 * @return Location of warp
 */
public static Location getWarp(UUID player){
  if (warpList.containsKey(player)) {
    return Util.getLocationString((String)warpList.get(player));
  }
 else {
    return null;
  }
}"
34062,"@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      chooseIsland(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !IslandGuard.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!pendingNewIslandSelection.contains(playerUUID)) {
      return false;
    }
    pendingNewIslandSelection.remove(playerUUID);
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    newIsland(player);
    if (resettingIsland.contains(playerUUID)) {
      resettingIsland.remove(playerUUID);
      resetPlayer(player,oldIsland);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(SettingsPanel.islandGuardPanel());
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        for (        Player target : plugin.getServer().getOnlinePlayers()) {
          if (!player.equals(target) && !target.isOp() && !VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")&& (target.getWorld().equals(ASkyBlock.getIslandWorld()) || target.getWorld().equals(ASkyBlock.getNetherWorld()))&& plugin.getGrid().isOnIsland(player,target)&& !CoopPlay.getInstance().getCoopPlayers(island.getCenter()).contains(target.getUniqueId())) {
            if (plugin.getPlayers().inTeam(target.getUniqueId()) || plugin.getPlayers().hasIsland(target.getUniqueId())) {
              plugin.getGrid().homeTeleport(target);
            }
 else {
              if (!target.performCommand(Settings.SPAWNCOMMAND)) {
                target.teleport(player.getWorld().getSpawnLocation());
              }
            }
            target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
            plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
            player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
          }
        }
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
        Messages.tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        Messages.tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
        Messages.tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        Messages.tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
      return true;
    }
    plugin.getGrid().homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.getGrid().removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(ControlPanel.miniShop);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player,false);
if (schems.isEmpty()) {
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player);
  resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player,schems.get(0));
  resetPlayer(player,oldIsland);
}
 else {
  if (Settings.useSchematicPanel) {
    pendingNewIslandSelection.add(playerUUID);
    player.openInventory(SchematicsPanel.getSchematicPanel(player));
  }
 else {
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    schems=getSchematics(player,true);
    if (schems.isEmpty()) {
      newIsland(player);
    }
 else {
      newIsland(player,schems.get(0));
    }
    resetPlayer(player,oldIsland);
  }
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
if (Settings.maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ Settings.maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (Settings.maxHomes > 1) {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ Settings.maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  return true;
}
Inventory inv=BiomesPanel.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.getGrid().playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.getGrid().homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    WarpSigns.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      Messages.setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
  resettingIsland.remove(playerUUID);
  resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
  plugin.getGrid().homeTeleport(player,1);
}
if (number > Settings.maxHomes) {
  if (Settings.maxHomes > 1) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
  }
 else {
    plugin.getGrid().homeTeleport(player,1);
  }
}
 else {
  plugin.getGrid().homeTeleport(player,number);
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (Settings.maxHomes > 1) {
int number=0;
try {
  number=Integer.valueOf(split[1]);
  if (number < 0 || number > Settings.maxHomes) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
  }
 else {
    plugin.getGrid().homeSet(player,number);
  }
}
 catch (Exception e) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=WarpSigns.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((GridManager.isSafeLocation(inFront))) {
      float yaw=Util.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      Player warpOwner=plugin.getServer().getPlayer(foundWarp);
      if (warpOwner != null) {
        warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
      }
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
    WarpSigns.removeWarp(warpSpot);
    return true;
  }
  if (!(GridManager.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
      if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
        Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    target.getInventory().clear();
    target.getInventory().setArmorContents(null);
    target.getInventory().setHelmet(null);
    target.getInventory().setChestplate(null);
    target.getInventory().setLeggings(null);
    target.getInventory().setBoots(null);
    target.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(target.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
    plugin.getPlayers().save(target.getUniqueId());
    TopTen.topTenAddEntry(playerUUID,0);
    target.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  Messages.setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
WarpSigns.removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
    }
 else {
      Messages.setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}","@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      chooseIsland(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !IslandGuard.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!pendingNewIslandSelection.contains(playerUUID)) {
      return false;
    }
    pendingNewIslandSelection.remove(playerUUID);
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    newIsland(player);
    if (resettingIsland.contains(playerUUID)) {
      resettingIsland.remove(playerUUID);
      resetPlayer(player,oldIsland);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(SettingsPanel.islandGuardPanel());
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        for (        Player target : plugin.getServer().getOnlinePlayers()) {
          if (!player.equals(target) && !target.isOp() && !VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")&& (target.getWorld().equals(ASkyBlock.getIslandWorld()) || target.getWorld().equals(ASkyBlock.getNetherWorld()))&& plugin.getGrid().isOnIsland(player,target)&& !CoopPlay.getInstance().getCoopPlayers(island.getCenter()).contains(target.getUniqueId())) {
            if (plugin.getPlayers().inTeam(target.getUniqueId()) || plugin.getPlayers().hasIsland(target.getUniqueId())) {
              plugin.getGrid().homeTeleport(target);
            }
 else {
              if (!target.performCommand(Settings.SPAWNCOMMAND)) {
                target.teleport(player.getWorld().getSpawnLocation());
              }
            }
            target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
            plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
            player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
          }
        }
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
        Messages.tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        Messages.tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
        Messages.tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        Messages.tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
      return true;
    }
    plugin.getGrid().homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.getGrid().removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(ControlPanel.miniShop);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player,false);
if (schems.isEmpty()) {
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player);
  resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player,schems.get(0));
  resetPlayer(player,oldIsland);
}
 else {
  if (Settings.useSchematicPanel) {
    pendingNewIslandSelection.add(playerUUID);
    player.openInventory(SchematicsPanel.getSchematicPanel(player));
  }
 else {
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    schems=getSchematics(player,true);
    if (schems.isEmpty()) {
      newIsland(player);
    }
 else {
      newIsland(player,schems.get(0));
    }
    resetPlayer(player,oldIsland);
  }
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
if (Settings.maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ Settings.maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (Settings.maxHomes > 1) {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ Settings.maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  return true;
}
Inventory inv=BiomesPanel.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.getGrid().playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.getGrid().homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    WarpSigns.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      Messages.setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
  resettingIsland.remove(playerUUID);
  resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
  plugin.getGrid().homeTeleport(player,1);
}
if (number > Settings.maxHomes) {
  if (Settings.maxHomes > 1) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
  }
 else {
    plugin.getGrid().homeTeleport(player,1);
  }
}
 else {
  plugin.getGrid().homeTeleport(player,number);
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (Settings.maxHomes > 1) {
int number=0;
try {
  number=Integer.valueOf(split[1]);
  if (number < 0 || number > Settings.maxHomes) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
  }
 else {
    plugin.getGrid().homeSet(player,number);
  }
}
 catch (Exception e) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=WarpSigns.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Island island=plugin.getGrid().getIslandAt(warpSpot);
  if (island != null && island.isLocked()) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).lockIslandLocked);
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((GridManager.isSafeLocation(inFront))) {
      float yaw=Util.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      Player warpOwner=plugin.getServer().getPlayer(foundWarp);
      if (warpOwner != null) {
        warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
      }
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
    WarpSigns.removeWarp(warpSpot);
    return true;
  }
  if (!(GridManager.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
      if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
        Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    target.getInventory().clear();
    target.getInventory().setArmorContents(null);
    target.getInventory().setHelmet(null);
    target.getInventory().setChestplate(null);
    target.getInventory().setLeggings(null);
    target.getInventory().setBoots(null);
    target.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(target.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
    plugin.getPlayers().save(target.getUniqueId());
    TopTen.topTenAddEntry(playerUUID,0);
    target.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  Messages.setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
WarpSigns.removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
    }
 else {
      Messages.setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}"
34063,"/** 
 * This method pastes a schematic and returns a location where a cow (or other entity) could be placed. Actually, the location should be that of a grass block.
 * @param world
 * @param loc
 * @param player
 * @return Location of highest grass block
 */
@SuppressWarnings(""String_Node_Str"") public void pasteSchematic(final Location loc,final Player player){
  if (this.file == null) {
    if (Settings.GAMETYPE == GameType.ACIDISLAND) {
      generateIslandBlocks(loc,player);
    }
 else {
      loc.getBlock().setType(Material.BEDROCK);
      ASkyBlock.getPlugin().getLogger().severe(""String_Node_Str"");
    }
    return;
  }
  World world=loc.getWorld();
  Map<BlockVector,Map<String,Tag>> tileEntitiesMap=this.getTileEntitiesMap();
  Location bedrock=null;
  Location chest=null;
  Location welcomeSign=null;
  Set<Vector> grassBlocks=new HashSet<Vector>();
  for (int x=0; x < width; ++x) {
    for (int y=0; y < height; ++y) {
      for (int z=0; z < length; ++z) {
        int index=y * width * length + z * width + x;
        if (blocks[index] == 7) {
          if (bedrock == null || bedrock.getY() < y) {
            bedrock=new Location(world,x,y,z);
          }
        }
 else         if (blocks[index] == 54) {
          if (chest == null || chest.getY() < y) {
            chest=new Location(world,x,y,z);
          }
        }
 else         if (blocks[index] == 63) {
          if (welcomeSign == null || welcomeSign.getY() < y) {
            welcomeSign=new Location(world,x,y,z);
          }
        }
 else         if (blocks[index] == 2) {
          grassBlocks.add(new Vector(x,y,z));
        }
      }
    }
  }
  if (bedrock == null) {
    Bukkit.getLogger().severe(""String_Node_Str"");
    return;
  }
  if (chest == null) {
    Bukkit.getLogger().severe(""String_Node_Str"");
    return;
  }
  if (grassBlocks.isEmpty()) {
    Bukkit.getLogger().severe(""String_Node_Str"");
    return;
  }
  Location blockLoc=new Location(world,loc.getX(),loc.getY(),loc.getZ());
  blockLoc.subtract(bedrock);
  for (int x=0; x < width; ++x) {
    for (int y=0; y < height; ++y) {
      for (int z=0; z < length; ++z) {
        int index=y * width * length + z * width + x;
        Block block=new Location(world,x,y,z).add(blockLoc).getBlock();
        try {
          if (blocks[index] != Material.TORCH.getId()) {
            block.setTypeIdAndData(blocks[index],data[index],this.usePhysics);
          }
        }
 catch (        Exception e) {
          if (blocks[index] == 179) {
            block.setTypeIdAndData(12,(byte)1,this.usePhysics);
          }
 else {
            Bukkit.getLogger().info(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ blocks[index]+ ""String_Node_Str""+ data[index]);
          }
        }
      }
    }
  }
  for (int x=0; x < width; ++x) {
    for (int y=0; y < height; ++y) {
      for (int z=0; z < length; ++z) {
        int index=y * width * length + z * width + x;
        Block block=new Location(world,x,y,z).add(blockLoc).getBlock();
        try {
          block.setTypeIdAndData(blocks[index],data[index],this.usePhysics);
        }
 catch (        Exception e) {
          if (blocks[index] == 179) {
            block.setTypeIdAndData(12,(byte)1,this.usePhysics);
          }
 else {
            Bukkit.getLogger().info(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ blocks[index]+ ""String_Node_Str""+ data[index]);
          }
        }
        if (tileEntitiesMap.containsKey(new BlockVector(x,y,z))) {
          String ver=Bukkit.getServer().getBukkitVersion();
          int major=Integer.valueOf(ver.substring(0,1));
          int minor=Integer.valueOf(ver.substring(ver.indexOf(""String_Node_Str"") + 1,ver.indexOf(""String_Node_Str"") + 2));
          if (major >= 1 && minor >= 8) {
            if (block.getType() == Material.STANDING_BANNER || block.getType() == Material.WALL_BANNER) {
              BannerBlock.set(block,tileEntitiesMap.get(new BlockVector(x,y,z)));
            }
          }
          if ((block.getType() == Material.SIGN_POST) || (block.getType() == Material.WALL_SIGN)) {
            Sign sign=(Sign)block.getState();
            Map<String,Tag> tileData=tileEntitiesMap.get(new BlockVector(x,y,z));
            List<String> text=new ArrayList<String>();
            text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
            text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
            text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
            text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
            JSONParser parser=new JSONParser();
            ContainerFactory containerFactory=new ContainerFactory(){
              public List creatArrayContainer(){
                return new LinkedList();
              }
              public Map createObjectContainer(){
                return new LinkedHashMap();
              }
            }
;
            for (int line=0; line < 4; line++) {
              if (!text.get(line).equals(""String_Node_Str"") && !text.get(line).isEmpty()) {
                String lineText=""String_Node_Str"";
                try {
                  Map json=(Map)parser.parse(text.get(line),containerFactory);
                  List list=(List)json.get(""String_Node_Str"");
                  Iterator iter=list.iterator();
                  while (iter.hasNext()) {
                    Object next=iter.next();
                    String format=JSONValue.toJSONString(next);
                    if (format.startsWith(""String_Node_Str"")) {
                      Map jsonFormat=(Map)parser.parse(format,containerFactory);
                      Iterator formatIter=jsonFormat.entrySet().iterator();
                      while (formatIter.hasNext()) {
                        Map.Entry entry=(Map.Entry)formatIter.next();
                        String key=entry.getKey().toString();
                        String value=entry.getValue().toString();
                        if (key.equalsIgnoreCase(""String_Node_Str"")) {
                          try {
                            lineText+=ChatColor.valueOf(value.toUpperCase());
                          }
 catch (                          Exception noColor) {
                            Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                          }
                        }
 else                         if (key.equalsIgnoreCase(""String_Node_Str"")) {
                          lineText+=value;
                        }
 else {
                          if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                            lineText+=ChatColor.MAGIC;
                          }
 else                           if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                            lineText+=ChatColor.UNDERLINE;
                          }
 else {
                            try {
                              lineText+=ChatColor.valueOf(key.toUpperCase());
                            }
 catch (                            Exception noFormat) {
                              Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                            }
                          }
                        }
                      }
                    }
 else {
                      if (format.length() > 1) {
                        lineText+=ChatColor.RESET + format.substring(format.indexOf('""') + 1,format.lastIndexOf('""'));
                      }
                    }
                  }
                }
 catch (                ParseException e) {
                  e.printStackTrace();
                }
                sign.setLine(line,lineText);
              }
            }
            sign.update();
          }
          if (block.getType().equals(Material.CHEST)) {
            Chest chestBlock=(Chest)block.getState();
            Map<String,Tag> tileData=tileEntitiesMap.get(new BlockVector(x,y,z));
            try {
              ListTag chestItems=(ListTag)tileData.get(""String_Node_Str"");
              if (chestItems != null) {
                for (                Tag item : chestItems.getValue()) {
                  if (item instanceof CompoundTag) {
                    try {
                      short itemType=(Short)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      short itemDamage=(Short)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      byte itemAmount=(Byte)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      byte itemSlot=(Byte)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      ItemStack chestItem=new ItemStack(itemType,itemAmount,itemDamage);
                      chestBlock.getInventory().setItem(itemSlot,chestItem);
                    }
 catch (                    ClassCastException ex) {
                      String itemType=(String)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      try {
                        if (itemType.startsWith(""String_Node_Str"")) {
                          String material=itemType.substring(10).toUpperCase();
                          if (material.equalsIgnoreCase(""String_Node_Str"")) {
                            material=""String_Node_Str"";
                          }
                          if (material.equalsIgnoreCase(""String_Node_Str"")) {
                            material=""String_Node_Str"";
                          }
                          if (material.equalsIgnoreCase(""String_Node_Str"")) {
                            material=""String_Node_Str"";
                          }
                          Material itemMaterial=Material.valueOf(material);
                          short itemDamage=(Short)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                          byte itemAmount=(Byte)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                          byte itemSlot=(Byte)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                          ItemStack chestItem=new ItemStack(itemMaterial,itemAmount,itemDamage);
                          chestBlock.getInventory().setItem(itemSlot,chestItem);
                        }
                      }
 catch (                      Exception exx) {
                        Bukkit.getLogger().severe(""String_Node_Str"" + itemType.substring(10).toUpperCase() + ""String_Node_Str"");
                      }
                    }
                  }
                }
              }
            }
 catch (            Exception e) {
              Bukkit.getLogger().severe(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  List<Vector> sorted=new ArrayList<Vector>();
  for (  Vector v : grassBlocks) {
    v.subtract(bedrock.toVector());
    v.add(loc.toVector());
    v.add(new Vector(0.5D,1.1D,0.5D));
    boolean inserted=false;
    for (int i=0; i < sorted.size(); i++) {
      if (v.getBlockY() > sorted.get(i).getBlockY()) {
        sorted.add(i,v);
        inserted=true;
        break;
      }
    }
    if (!inserted) {
      sorted.add(v);
    }
  }
  final Location grass=sorted.get(0).toLocation(world);
  Block blockToChange=null;
  if (welcomeSign != null) {
    welcomeSign.subtract(bedrock);
    welcomeSign.add(loc);
    blockToChange=welcomeSign.getBlock();
    blockToChange.setType(Material.SIGN_POST);
    Sign sign=(Sign)blockToChange.getState();
    sign.setLine(0,ASkyBlock.getPlugin().myLocale(player.getUniqueId()).signLine1.replace(""String_Node_Str"",player.getName()));
    sign.setLine(1,ASkyBlock.getPlugin().myLocale(player.getUniqueId()).signLine2.replace(""String_Node_Str"",player.getName()));
    sign.setLine(2,ASkyBlock.getPlugin().myLocale(player.getUniqueId()).signLine3.replace(""String_Node_Str"",player.getName()));
    sign.setLine(3,ASkyBlock.getPlugin().myLocale(player.getUniqueId()).signLine4.replace(""String_Node_Str"",player.getName()));
    ((org.bukkit.material.Sign)sign.getData()).setFacingDirection(BlockFace.NORTH);
    sign.update();
  }
  chest.subtract(bedrock);
  chest.add(loc);
  blockToChange=chest.getBlock();
  if (useDefaultChest && Settings.chestItems[0] != null) {
    if (blockToChange.getType() == Material.CHEST) {
      final Chest islandChest=(Chest)blockToChange.getState();
      final Inventory inventory=islandChest.getInventory();
      inventory.clear();
      inventory.setContents(Settings.chestItems);
    }
  }
  if (Settings.islandCompanion != null) {
    Bukkit.getServer().getScheduler().runTaskLater(ASkyBlock.getPlugin(),new Runnable(){
      @Override public void run(){
        spawnCompanion(player,grass);
      }
    }
,40L);
  }
}","/** 
 * This method pastes a schematic and returns a location where a cow (or other entity) could be placed. Actually, the location should be that of a grass block.
 * @param world
 * @param loc
 * @param player
 * @return Location of highest grass block
 */
@SuppressWarnings(""String_Node_Str"") public void pasteSchematic(final Location loc,final Player player){
  if (this.file == null) {
    if (Settings.GAMETYPE == GameType.ACIDISLAND) {
      generateIslandBlocks(loc,player);
    }
 else {
      loc.getBlock().setType(Material.BEDROCK);
      ASkyBlock.getPlugin().getLogger().severe(""String_Node_Str"");
    }
    return;
  }
  World world=loc.getWorld();
  Map<BlockVector,Map<String,Tag>> tileEntitiesMap=this.getTileEntitiesMap();
  Location bedrock=null;
  Location chest=null;
  Location welcomeSign=null;
  Set<Vector> grassBlocks=new HashSet<Vector>();
  for (int x=0; x < width; ++x) {
    for (int y=0; y < height; ++y) {
      for (int z=0; z < length; ++z) {
        int index=y * width * length + z * width + x;
        if (blocks[index] == 7) {
          if (bedrock == null || bedrock.getY() < y) {
            bedrock=new Location(world,x,y,z);
          }
        }
 else         if (blocks[index] == 54) {
          if (chest == null || chest.getY() < y) {
            chest=new Location(world,x,y,z);
          }
        }
 else         if (blocks[index] == 63) {
          if (welcomeSign == null || welcomeSign.getY() < y) {
            welcomeSign=new Location(world,x,y,z);
          }
        }
 else         if (blocks[index] == 2) {
          grassBlocks.add(new Vector(x,y,z));
        }
      }
    }
  }
  if (bedrock == null) {
    Bukkit.getLogger().severe(""String_Node_Str"");
    return;
  }
  if (chest == null) {
    Bukkit.getLogger().severe(""String_Node_Str"");
    return;
  }
  if (grassBlocks.isEmpty()) {
    Bukkit.getLogger().severe(""String_Node_Str"");
    return;
  }
  Location blockLoc=new Location(world,loc.getX(),loc.getY(),loc.getZ());
  blockLoc.subtract(bedrock);
  for (int x=0; x < width; ++x) {
    for (int y=0; y < height; ++y) {
      for (int z=0; z < length; ++z) {
        int index=y * width * length + z * width + x;
        Block block=new Location(world,x,y,z).add(blockLoc).getBlock();
        try {
          if (blocks[index] != Material.TORCH.getId()) {
            block.setTypeIdAndData(blocks[index],data[index],this.usePhysics);
          }
        }
 catch (        Exception e) {
          if (blocks[index] == 179) {
            block.setTypeIdAndData(12,(byte)1,this.usePhysics);
          }
 else {
            Bukkit.getLogger().info(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ blocks[index]+ ""String_Node_Str""+ data[index]);
          }
        }
      }
    }
  }
  for (int x=0; x < width; ++x) {
    for (int y=0; y < height; ++y) {
      for (int z=0; z < length; ++z) {
        int index=y * width * length + z * width + x;
        Block block=new Location(world,x,y,z).add(blockLoc).getBlock();
        try {
          block.setTypeIdAndData(blocks[index],data[index],this.usePhysics);
        }
 catch (        Exception e) {
          if (blocks[index] == 179) {
            block.setTypeIdAndData(12,(byte)1,this.usePhysics);
          }
 else {
            Bukkit.getLogger().info(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ blocks[index]+ ""String_Node_Str""+ data[index]);
          }
        }
        if (tileEntitiesMap.containsKey(new BlockVector(x,y,z))) {
          String ver=Bukkit.getServer().getBukkitVersion();
          int major=Integer.valueOf(ver.substring(0,1));
          int minor=Integer.valueOf(ver.substring(ver.indexOf(""String_Node_Str"") + 1,ver.indexOf(""String_Node_Str"") + 2));
          if (major >= 1 && minor >= 8) {
            if (block.getType() == Material.STANDING_BANNER || block.getType() == Material.WALL_BANNER) {
              BannerBlock.set(block,tileEntitiesMap.get(new BlockVector(x,y,z)));
            }
          }
          if ((block.getType() == Material.SIGN_POST) || (block.getType() == Material.WALL_SIGN)) {
            Sign sign=(Sign)block.getState();
            Map<String,Tag> tileData=tileEntitiesMap.get(new BlockVector(x,y,z));
            List<String> text=new ArrayList<String>();
            text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
            text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
            text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
            text.add(((StringTag)tileData.get(""String_Node_Str"")).getValue());
            JSONParser parser=new JSONParser();
            ContainerFactory containerFactory=new ContainerFactory(){
              public List creatArrayContainer(){
                return new LinkedList();
              }
              public Map createObjectContainer(){
                return new LinkedHashMap();
              }
            }
;
            for (int line=0; line < 4; line++) {
              if (!text.get(line).equals(""String_Node_Str"") && !text.get(line).isEmpty()) {
                String lineText=""String_Node_Str"";
                if (text.get(line).startsWith(""String_Node_Str"")) {
                  try {
                    Map json=(Map)parser.parse(text.get(line),containerFactory);
                    List list=(List)json.get(""String_Node_Str"");
                    Iterator iter=list.iterator();
                    while (iter.hasNext()) {
                      Object next=iter.next();
                      String format=JSONValue.toJSONString(next);
                      if (format.startsWith(""String_Node_Str"")) {
                        Map jsonFormat=(Map)parser.parse(format,containerFactory);
                        Iterator formatIter=jsonFormat.entrySet().iterator();
                        while (formatIter.hasNext()) {
                          Map.Entry entry=(Map.Entry)formatIter.next();
                          String key=entry.getKey().toString();
                          String value=entry.getValue().toString();
                          if (key.equalsIgnoreCase(""String_Node_Str"")) {
                            try {
                              lineText+=ChatColor.valueOf(value.toUpperCase());
                            }
 catch (                            Exception noColor) {
                              Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                            }
                          }
 else                           if (key.equalsIgnoreCase(""String_Node_Str"")) {
                            lineText+=value;
                          }
 else {
                            if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                              lineText+=ChatColor.MAGIC;
                            }
 else                             if (key.equalsIgnoreCase(""String_Node_Str"") && value.equalsIgnoreCase(""String_Node_Str"")) {
                              lineText+=ChatColor.UNDERLINE;
                            }
 else {
                              try {
                                lineText+=ChatColor.valueOf(key.toUpperCase());
                              }
 catch (                              Exception noFormat) {
                                Bukkit.getLogger().warning(""String_Node_Str"" + value + ""String_Node_Str"");
                              }
                            }
                          }
                        }
                      }
 else {
                        if (format.length() > 1) {
                          lineText+=ChatColor.RESET + format.substring(format.indexOf('""') + 1,format.lastIndexOf('""'));
                        }
                      }
                    }
                  }
 catch (                  ParseException e) {
                    e.printStackTrace();
                  }
                }
 else {
                  if (text.get(line).length() > 1) {
                    lineText=text.get(line).substring(text.get(line).indexOf('""') + 1,text.get(line).lastIndexOf('""'));
                  }
 else {
                    lineText=text.get(line);
                  }
                }
                sign.setLine(line,lineText);
              }
            }
            sign.update();
          }
          if (block.getType().equals(Material.CHEST)) {
            Chest chestBlock=(Chest)block.getState();
            Map<String,Tag> tileData=tileEntitiesMap.get(new BlockVector(x,y,z));
            try {
              ListTag chestItems=(ListTag)tileData.get(""String_Node_Str"");
              if (chestItems != null) {
                for (                Tag item : chestItems.getValue()) {
                  if (item instanceof CompoundTag) {
                    try {
                      short itemType=(Short)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      short itemDamage=(Short)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      byte itemAmount=(Byte)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      byte itemSlot=(Byte)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      ItemStack chestItem=new ItemStack(itemType,itemAmount,itemDamage);
                      chestBlock.getInventory().setItem(itemSlot,chestItem);
                    }
 catch (                    ClassCastException ex) {
                      String itemType=(String)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                      try {
                        if (itemType.startsWith(""String_Node_Str"")) {
                          String material=itemType.substring(10).toUpperCase();
                          if (material.equalsIgnoreCase(""String_Node_Str"")) {
                            material=""String_Node_Str"";
                          }
                          if (material.equalsIgnoreCase(""String_Node_Str"")) {
                            material=""String_Node_Str"";
                          }
                          if (material.equalsIgnoreCase(""String_Node_Str"")) {
                            material=""String_Node_Str"";
                          }
                          Material itemMaterial=Material.valueOf(material);
                          short itemDamage=(Short)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                          byte itemAmount=(Byte)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                          byte itemSlot=(Byte)((CompoundTag)item).getValue().get(""String_Node_Str"").getValue();
                          ItemStack chestItem=new ItemStack(itemMaterial,itemAmount,itemDamage);
                          chestBlock.getInventory().setItem(itemSlot,chestItem);
                        }
                      }
 catch (                      Exception exx) {
                        Bukkit.getLogger().severe(""String_Node_Str"" + itemType.substring(10).toUpperCase() + ""String_Node_Str"");
                      }
                    }
                  }
                }
              }
            }
 catch (            Exception e) {
              Bukkit.getLogger().severe(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  List<Vector> sorted=new ArrayList<Vector>();
  for (  Vector v : grassBlocks) {
    v.subtract(bedrock.toVector());
    v.add(loc.toVector());
    v.add(new Vector(0.5D,1.1D,0.5D));
    boolean inserted=false;
    for (int i=0; i < sorted.size(); i++) {
      if (v.getBlockY() > sorted.get(i).getBlockY()) {
        sorted.add(i,v);
        inserted=true;
        break;
      }
    }
    if (!inserted) {
      sorted.add(v);
    }
  }
  final Location grass=sorted.get(0).toLocation(world);
  Block blockToChange=null;
  if (welcomeSign != null) {
    welcomeSign.subtract(bedrock);
    welcomeSign.add(loc);
    blockToChange=welcomeSign.getBlock();
    blockToChange.setType(Material.SIGN_POST);
    Sign sign=(Sign)blockToChange.getState();
    sign.setLine(0,ASkyBlock.getPlugin().myLocale(player.getUniqueId()).signLine1.replace(""String_Node_Str"",player.getName()));
    sign.setLine(1,ASkyBlock.getPlugin().myLocale(player.getUniqueId()).signLine2.replace(""String_Node_Str"",player.getName()));
    sign.setLine(2,ASkyBlock.getPlugin().myLocale(player.getUniqueId()).signLine3.replace(""String_Node_Str"",player.getName()));
    sign.setLine(3,ASkyBlock.getPlugin().myLocale(player.getUniqueId()).signLine4.replace(""String_Node_Str"",player.getName()));
    ((org.bukkit.material.Sign)sign.getData()).setFacingDirection(BlockFace.NORTH);
    sign.update();
  }
  chest.subtract(bedrock);
  chest.add(loc);
  blockToChange=chest.getBlock();
  if (useDefaultChest && Settings.chestItems[0] != null) {
    if (blockToChange.getType() == Material.CHEST) {
      final Chest islandChest=(Chest)blockToChange.getState();
      final Inventory inventory=islandChest.getInventory();
      inventory.clear();
      inventory.setContents(Settings.chestItems);
    }
  }
  if (Settings.islandCompanion != null) {
    Bukkit.getServer().getScheduler().runTaskLater(ASkyBlock.getPlugin(),new Runnable(){
      @Override public void run(){
        spawnCompanion(player,grass);
      }
    }
,40L);
  }
}"
34064,"@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      List<Schematic> schems=getSchematics(player);
      plugin.getLogger().info(""String_Node_Str"" + schems.size());
      if (schems.isEmpty()) {
        newIsland(player);
      }
 else       if (schems.size() == 1) {
        newIsland(player,schems.get(0));
      }
 else {
        if (Settings.useSchematicPanel) {
          pendingNewIslandSelection.add(playerUUID);
          player.openInventory(SchematicsPanel.getSchematicPanel(player));
        }
 else {
          newIsland(player,schems.get(schems.size() - 1));
        }
      }
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !IslandGuard.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!pendingNewIslandSelection.contains(playerUUID)) {
      return false;
    }
    pendingNewIslandSelection.remove(playerUUID);
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    newIsland(player);
    if (resettingIsland.contains(playerUUID)) {
      resettingIsland.remove(playerUUID);
      resetPlayer(player,oldIsland);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(SettingsPanel.islandGuardPanel());
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
        Messages.tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        Messages.tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
        Messages.tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        Messages.tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
      return true;
    }
    plugin.getGrid().homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.getGrid().removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(ControlPanel.miniShop);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player);
if (schems.isEmpty()) {
  plugin.getLogger().info(""String_Node_Str"");
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player);
  resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
  plugin.getLogger().info(""String_Node_Str"");
  newIsland(player,schems.get(0));
}
 else {
  if (Settings.useSchematicPanel) {
    pendingNewIslandSelection.add(playerUUID);
    resettingIsland.add(player.getUniqueId());
    player.openInventory(SchematicsPanel.getSchematicPanel(player));
  }
 else {
    Schematic schematic=null;
    for (    String perm : schematics.keySet()) {
      if (!perm.equalsIgnoreCase(""String_Node_Str"") && VaultHelper.checkPerm(player,schematics.get(perm).getPerm())) {
        schematic=schematics.get(perm);
      }
    }
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    newIsland(player,schematic);
    resetPlayer(player,oldIsland);
  }
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
if (Settings.maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ Settings.maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (Settings.maxHomes > 1) {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ Settings.maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  return true;
}
Inventory inv=BiomesPanel.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.getGrid().playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.getGrid().homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    WarpSigns.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      Messages.setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
  resettingIsland.remove(playerUUID);
  resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
plugin.getGrid().homeTeleport(player,1);
}
if (number > Settings.maxHomes) {
if (Settings.maxHomes > 1) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
}
 else {
  plugin.getGrid().homeTeleport(player,1);
}
}
 else {
plugin.getGrid().homeTeleport(player,number);
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (Settings.maxHomes > 1) {
int number=0;
try {
number=Integer.valueOf(split[1]);
if (number < 0 || number > Settings.maxHomes) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
}
 else {
  plugin.getGrid().homeSet(player,number);
}
}
 catch (Exception e) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
  foundWarp=warp;
  break;
}
}
if (foundWarp == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
return true;
}
 else {
final Location warpSpot=WarpSigns.getWarp(foundWarp);
if (warpSpot == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
  plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
  return true;
}
Block b=warpSpot.getBlock();
if (b.getType().equals(Material.SIGN_POST)) {
  Sign sign=(Sign)b.getState();
  org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
  BlockFace directionFacing=s.getFacing();
  Location inFront=b.getRelative(directionFacing).getLocation();
  if ((GridManager.isSafeLocation(inFront))) {
    float yaw=Util.blockFaceToFloat(directionFacing);
    final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    Player warpOwner=plugin.getServer().getPlayer(foundWarp);
    if (warpOwner != null) {
      warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
    }
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  WarpSigns.removeWarp(warpSpot);
  return true;
}
if (!(GridManager.isSafeLocation(warpSpot))) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
  plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
  return true;
}
 else {
  final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
  player.teleport(actualWarp);
  player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
  return true;
}
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    if (inviteList.containsValue(playerUUID)) {
      inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
    }
    inviteList.put(invitedPlayerUUID,player.getUniqueId());
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
    if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (inviteList.containsValue(playerUUID)) {
  inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
}
inviteList.put(invitedPlayerUUID,player.getUniqueId());
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  for (  ItemStack i : target.getInventory().getContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  for (  ItemStack i : target.getEquipment().getArmorContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  target.getInventory().clear();
  target.getInventory().setArmorContents(null);
  target.getInventory().setHelmet(null);
  target.getInventory().setChestplate(null);
  target.getInventory().setLeggings(null);
  target.getInventory().setBoots(null);
  target.getEquipment().clear();
  if (Settings.resetChallenges) {
    plugin.getPlayers().resetAllChallenges(target.getUniqueId());
  }
  plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
  plugin.getPlayers().save(target.getUniqueId());
  TopTen.topTenAddEntry(playerUUID,0);
  target.updateInventory();
}
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
}
}
 else {
Messages.setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
WarpSigns.removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (teamMembers.contains(targetPlayer)) {
  if (plugin.getServer().getPlayer(targetPlayer) != null) {
    plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
  }
 else {
    Messages.setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
  }
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
  removePlayerFromTeam(targetPlayer,teamLeader);
  removePlayerFromTeam(teamLeader,teamLeader);
  plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(targetPlayer,targetPlayer);
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}","@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).islandnew);
      List<Schematic> schems=getSchematics(player);
      if (schems.isEmpty()) {
        newIsland(player);
      }
 else       if (schems.size() == 1) {
        newIsland(player,schems.get(0));
      }
 else {
        if (Settings.useSchematicPanel) {
          pendingNewIslandSelection.add(playerUUID);
          player.openInventory(SchematicsPanel.getSchematicPanel(player));
        }
 else {
          newIsland(player,schems.get(schems.size() - 1));
        }
      }
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !IslandGuard.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.getGrid().homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.getGrid().removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!pendingNewIslandSelection.contains(playerUUID)) {
      return false;
    }
    pendingNewIslandSelection.remove(playerUUID);
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    newIsland(player);
    if (resettingIsland.contains(playerUUID)) {
      resettingIsland.remove(playerUUID);
      resetPlayer(player,oldIsland);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(SettingsPanel.islandGuardPanel());
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockLocking);
        Messages.tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        Messages.tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + plugin.myLocale(playerUUID).lockUnlocking);
        Messages.tellOfflineTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        Messages.tellTeam(playerUUID,plugin.myLocale(playerUUID).lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + plugin.myLocale(playerUUID).errorNoIsland);
      return true;
    }
    plugin.getGrid().homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.getGrid().removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(ControlPanel.miniShop);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorWrongWorld);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.getGrid().playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
List<Schematic> schems=getSchematics(player);
if (schems.isEmpty()) {
  plugin.getLogger().info(""String_Node_Str"");
  Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
  newIsland(player);
  resetPlayer(player,oldIsland);
}
 else if (schems.size() == 1) {
  plugin.getLogger().info(""String_Node_Str"");
  newIsland(player,schems.get(0));
}
 else {
  if (Settings.useSchematicPanel) {
    pendingNewIslandSelection.add(playerUUID);
    resettingIsland.add(player.getUniqueId());
    player.openInventory(SchematicsPanel.getSchematicPanel(player));
  }
 else {
    Schematic schematic=null;
    for (    String perm : schematics.keySet()) {
      if (!perm.equalsIgnoreCase(""String_Node_Str"") && VaultHelper.checkPerm(player,schematics.get(perm).getPerm())) {
        schematic=schematics.get(perm);
      }
    }
    Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
    newIsland(player,schematic);
    resetPlayer(player,oldIsland);
  }
}
return true;
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.getGrid().homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpIsland);
}
if (Settings.maxHomes > 1 && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ Settings.maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
 else {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeleport);
}
if (plugin.getGrid() != null && plugin.getGrid().getSpawn() != null) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpControlPanel);
}
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (Settings.maxHomes > 1) {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ Settings.maxHomes+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
 else {
  player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpSetHome);
}
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevel);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarps);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpTeam);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpLock);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.myLocale(player.getUniqueId()).islandHelpSettings);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + plugin.myLocale(player.getUniqueId()).islandHelpChallenges);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + label+ ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  return true;
}
if (!plugin.getGrid().playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
  return true;
}
Inventory inv=BiomesPanel.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
TopTen.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.getGrid().playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(plugin.myLocale(player.getUniqueId()).helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ plugin.myLocale(player.getUniqueId()).helpColor+ plugin.myLocale(player.getUniqueId()).islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.getGrid().homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    WarpSigns.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      Messages.setMessage(teamLeader,ChatColor.RED + plugin.myLocale(teamLeader).leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ plugin.myLocale(player.getUniqueId()).invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!pendingNewIslandSelection.contains(playerUUID)) {
return false;
}
pendingNewIslandSelection.remove(playerUUID);
if (!schematics.containsKey(split[1])) {
return false;
}
 else {
Schematic schematic=schematics.get(split[1]);
if (schematic.getPerm().isEmpty() || VaultHelper.checkPerm(player,schematic.getPerm())) {
Location oldIsland=plugin.getPlayers().getIslandLocation(player.getUniqueId());
newIsland(player,schematic);
if (resettingIsland.contains(playerUUID)) {
  resettingIsland.remove(playerUUID);
  resetPlayer(player,oldIsland);
}
return true;
}
 else {
return false;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else if (split[1].equalsIgnoreCase(""String_Node_Str"") || split[1].equalsIgnoreCase(""String_Node_Str"")) {
plugin.getPlayers().setLocale(playerUUID,""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"" + label + ""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return true;
}
player.sendMessage(""String_Node_Str"");
return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIsland);
return true;
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
int number=1;
try {
number=Integer.valueOf(split[1]);
if (number < 1) {
plugin.getGrid().homeTeleport(player,1);
}
if (number > Settings.maxHomes) {
if (Settings.maxHomes > 1) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
}
 else {
  plugin.getGrid().homeTeleport(player,1);
}
}
 else {
plugin.getGrid().homeTeleport(player,number);
}
}
 catch (Exception e) {
plugin.getGrid().homeTeleport(player,1);
}
if (Settings.islandRemoveMobs) {
plugin.getGrid().removeMobs(player.getLocation());
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (Settings.maxHomes > 1) {
int number=0;
try {
number=Integer.valueOf(split[1]);
if (number < 0 || number > Settings.maxHomes) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
}
 else {
  plugin.getGrid().homeSet(player,number);
}
}
 catch (Exception e) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).setHomeerrorNumHomes.replace(""String_Node_Str"",String.valueOf(Settings.maxHomes)));
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=WarpSigns.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + plugin.myLocale().warpswarpTip);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
  foundWarp=warp;
  break;
}
}
if (foundWarp == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
return true;
}
 else {
final Location warpSpot=WarpSigns.getWarp(foundWarp);
if (warpSpot == null) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotReadyYet);
  plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
  return true;
}
Block b=warpSpot.getBlock();
if (b.getType().equals(Material.SIGN_POST)) {
  Sign sign=(Sign)b.getState();
  org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
  BlockFace directionFacing=s.getFacing();
  Location inFront=b.getRelative(directionFacing).getLocation();
  if ((GridManager.isSafeLocation(inFront))) {
    float yaw=Util.blockFaceToFloat(directionFacing);
    final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    Player warpOwner=plugin.getServer().getPlayer(foundWarp);
    if (warpOwner != null) {
      warpOwner.sendMessage(plugin.myLocale(foundWarp).warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
    }
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorDoesNotExist);
  WarpSigns.removeWarp(warpSpot);
  return true;
}
if (!(GridManager.isSafeLocation(warpSpot))) {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).warpserrorNotSafe);
  plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
  return true;
}
 else {
  final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
  player.teleport(actualWarp);
  player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
  return true;
}
}
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().hasIsland(targetPlayerUUID) || plugin.getPlayers().inTeam(targetPlayerUUID)) {
calculateIslandLevel(player,targetPlayerUUID);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    if (inviteList.containsValue(playerUUID)) {
      inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
      player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
    }
    inviteList.put(invitedPlayerUUID,player.getUniqueId());
    player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
    if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYourIslandIsFull);
  }
}
 else {
  player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (inviteList.containsValue(playerUUID)) {
  inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
  player.sendMessage(ChatColor.YELLOW + plugin.myLocale(player.getUniqueId()).inviteremovingInvite);
}
inviteList.put(invitedPlayerUUID,player.getUniqueId());
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(plugin.myLocale(invitedPlayerUUID).invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ plugin.myLocale(invitedPlayerUUID).invitetoAcceptOrReject);
if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + plugin.myLocale(invitedPlayerUUID).invitewarningYouWillLoseIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoIslandOther);
return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + plugin.myLocale(newPlayer.getUniqueId()).coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.getGrid().isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.getGrid().homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + plugin.myLocale(target.getUniqueId()).expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).leaveerrorLeadersCannotLeave);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
target.sendMessage(ChatColor.RED + plugin.myLocale(targetPlayer).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  for (  ItemStack i : target.getInventory().getContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  for (  ItemStack i : target.getEquipment().getArmorContents()) {
    if (i != null) {
      try {
        player.getWorld().dropItemNaturally(player.getLocation(),i);
      }
 catch (      Exception e) {
      }
    }
  }
  target.getInventory().clear();
  target.getInventory().setArmorContents(null);
  target.getInventory().setHelmet(null);
  target.getInventory().setChestplate(null);
  target.getInventory().setLeggings(null);
  target.getInventory().setBoots(null);
  target.getEquipment().clear();
  if (Settings.resetChallenges) {
    plugin.getPlayers().resetAllChallenges(target.getUniqueId());
  }
  plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
  plugin.getPlayers().save(target.getUniqueId());
  TopTen.topTenAddEntry(playerUUID,0);
  target.updateInventory();
}
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
}
}
 else {
Messages.setMessage(targetPlayer,ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
WarpSigns.removeWarp(targetPlayer);
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
if (teamMembers.contains(targetPlayer)) {
  if (plugin.getServer().getPlayer(targetPlayer) != null) {
    plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + plugin.myLocale(targetPlayer).makeLeaderyouAreNowTheOwner);
  }
 else {
    Messages.setMessage(targetPlayer,plugin.myLocale(player.getUniqueId()).makeLeaderyouAreNowTheOwner);
  }
  player.sendMessage(ChatColor.GREEN + plugin.myLocale(player.getUniqueId()).makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
  removePlayerFromTeam(targetPlayer,teamLeader);
  removePlayerFromTeam(teamLeader,teamLeader);
  plugin.getGrid().transferIsland(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(player.getUniqueId(),targetPlayer);
  addPlayertoTeam(targetPlayer,targetPlayer);
  return true;
}
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}"
34065,"/** 
 * Dynamically creates an inventory of challenges for the player showing the level
 * @param player
 * @param level
 * @return inventory
 */
public Inventory challengePanel(Player player,String level){
  List<CPItem> cp=new ArrayList<CPItem>();
  if (level.isEmpty() && !challengeList.containsKey(""String_Node_Str"")) {
    if (!Settings.challengeLevels.isEmpty()) {
      level=Settings.challengeLevels.get(0);
    }
 else {
      plugin.getLogger().severe(""String_Node_Str"");
      Inventory error=Bukkit.createInventory(null,9,plugin.myLocale(player.getUniqueId()).challengesguiTitle);
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
      return error;
    }
  }
  for (  String challengeName : challengeList.get(level)) {
    CPItem item=createItem(challengeName,player);
    if (item != null) {
      cp.add(item);
    }
  }
  int levelDone=0;
  for (int i=0; i < Settings.challengeLevels.size(); i++) {
    if (i == 0) {
      levelDone=0;
    }
 else {
      levelDone=checkLevelCompletion(player,Settings.challengeLevels.get(i - 1));
    }
    if (!level.equalsIgnoreCase(Settings.challengeLevels.get(i))) {
      List<String> lore=new ArrayList<String>();
      if (levelDone <= 0) {
        CPItem item=new CPItem(Material.BOOK_AND_QUILL,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
        lore=Util.chop(ChatColor.WHITE,plugin.myLocale(player.getUniqueId()).challengesNavigation.replace(""String_Node_Str"",Settings.challengeLevels.get(i)),25);
        item.setNextSection(Settings.challengeLevels.get(i));
        item.setLore(lore);
        cp.add(item);
      }
 else {
        CPItem item=new CPItem(Material.BOOK,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
        lore=Util.chop(ChatColor.WHITE,plugin.myLocale(player.getUniqueId()).challengestoComplete.replace(""String_Node_Str"",String.valueOf(levelDone)).replace(""String_Node_Str"",Settings.challengeLevels.get(i - 1)),25);
        item.setLore(lore);
        cp.add(item);
      }
    }
  }
  if (!level.equals(""String_Node_Str"")) {
    for (    String freeChallenges : challengeList.get(""String_Node_Str"")) {
      CPItem item=createItem(freeChallenges,player);
      if (item != null) {
        cp.add(item);
      }
    }
  }
  if (cp.size() > 0) {
    int size=cp.size() + 8;
    size-=(size % 9);
    Inventory newPanel=Bukkit.createInventory(null,size,plugin.myLocale(player.getUniqueId()).challengesguiTitle);
    playerChallengeGUI.put(player.getUniqueId(),cp);
    for (    CPItem i : cp) {
      newPanel.addItem(i.getItem());
    }
    return newPanel;
  }
  return null;
}","/** 
 * Dynamically creates an inventory of challenges for the player showing the level
 * @param player
 * @param level
 * @return inventory
 */
public Inventory challengePanel(Player player,String level){
  List<CPItem> cp=new ArrayList<CPItem>();
  if (level.isEmpty() && !challengeList.containsKey(""String_Node_Str"")) {
    if (!Settings.challengeLevels.isEmpty()) {
      level=Settings.challengeLevels.get(0);
    }
 else {
      plugin.getLogger().severe(""String_Node_Str"");
      Inventory error=Bukkit.createInventory(null,9,plugin.myLocale(player.getUniqueId()).challengesguiTitle);
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).errorCommandNotReady);
      return error;
    }
  }
  for (  String challengeName : challengeList.get(level)) {
    CPItem item=createItem(challengeName,player);
    if (item != null) {
      cp.add(item);
    }
  }
  int levelDone=0;
  for (; levelDone < Settings.challengeLevels.size(); levelDone++) {
    if (checkLevelCompletion(player,Settings.challengeLevels.get(levelDone)) > 0) {
      break;
    }
  }
  for (int i=0; i < Settings.challengeLevels.size(); i++) {
    if (!level.equalsIgnoreCase(Settings.challengeLevels.get(i))) {
      List<String> lore=new ArrayList<String>();
      if (i <= levelDone) {
        CPItem item=new CPItem(Material.BOOK_AND_QUILL,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
        lore=Util.chop(ChatColor.WHITE,plugin.myLocale(player.getUniqueId()).challengesNavigation.replace(""String_Node_Str"",Settings.challengeLevels.get(i)),25);
        item.setNextSection(Settings.challengeLevels.get(i));
        item.setLore(lore);
        cp.add(item);
      }
 else {
        CPItem item=new CPItem(Material.BOOK,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
        int toDo=checkLevelCompletion(player,Settings.challengeLevels.get(i - 1));
        lore=Util.chop(ChatColor.WHITE,plugin.myLocale(player.getUniqueId()).challengestoComplete.replace(""String_Node_Str"",String.valueOf(toDo)).replace(""String_Node_Str"",Settings.challengeLevels.get(i - 1)),25);
        item.setLore(lore);
        cp.add(item);
      }
    }
  }
  if (!level.equals(""String_Node_Str"") && challengeList.containsKey(""String_Node_Str"")) {
    for (    String freeChallenges : challengeList.get(""String_Node_Str"")) {
      CPItem item=createItem(freeChallenges,player);
      if (item != null) {
        cp.add(item);
      }
    }
  }
  if (cp.size() > 0) {
    int size=cp.size() + 8;
    size-=(size % 9);
    Inventory newPanel=Bukkit.createInventory(null,size,plugin.myLocale(player.getUniqueId()).challengesguiTitle);
    playerChallengeGUI.put(player.getUniqueId(),cp);
    for (    CPItem i : cp) {
      newPanel.addItem(i.getItem());
    }
    return newPanel;
  }
  return null;
}"
34066,"/** 
 * Loads the various settings from the config.yml file into the plugin
 */
public void loadPluginConfig(){
  try {
    getConfig();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  Challenges.getChallengeConfig();
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  Settings.debug=getConfig().getInt(""String_Node_Str"",0);
  if (getConfig().contains(""String_Node_Str"")) {
    for (    String key : getConfig().getConfigurationSection(""String_Node_Str"").getKeys(true)) {
      String filename=getConfig().getString(""String_Node_Str"" + key);
      File schematicFile=new File(plugin.getDataFolder(),filename);
      if (schematicFile.exists()) {
        Settings.schematics.put(key,filename);
        getLogger().info(""String_Node_Str"" + filename + ""String_Node_Str""+ key);
      }
    }
  }
  Settings.useSchematicPanel=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.setTeamName=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.immediateTeleport=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.makeIslandIfNone=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.usePhysics=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.loginLevel=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.useEconomy=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.updateCheck=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.resetCommands=getConfig().getStringList(""String_Node_Str"");
  Settings.leaveCommands=getConfig().getStringList(""String_Node_Str"");
  Settings.useControlPanel=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowTeleportWhenFalling=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.fallingCommandBlockList=getConfig().getStringList(""String_Node_Str"");
  Settings.maxTeamSize=getConfig().getInt(""String_Node_Str"",4);
  Settings.maxTeamSizeVIP=getConfig().getInt(""String_Node_Str"",8);
  Settings.maxTeamSizeVIP2=getConfig().getInt(""String_Node_Str"",12);
  Settings.maxHomes=getConfig().getInt(""String_Node_Str"",1);
  if (Settings.maxHomes < 1) {
    Settings.maxHomes=1;
  }
  Settings.worldName=getConfig().getString(""String_Node_Str"");
  Settings.createNether=getConfig().getBoolean(""String_Node_Str"",true);
  if (!Settings.createNether) {
    getLogger().info(""String_Node_Str"");
  }
  String companion=getConfig().getString(""String_Node_Str"",""String_Node_Str"").toUpperCase();
  if (companion == ""String_Node_Str"") {
    Settings.islandCompanion=null;
  }
 else {
    try {
      Settings.islandCompanion=EntityType.valueOf(companion);
switch (Settings.islandCompanion) {
case BAT:
case CHICKEN:
case COW:
case HORSE:
case IRON_GOLEM:
case MUSHROOM_COW:
case OCELOT:
case PIG:
case RABBIT:
case SHEEP:
case SNOWMAN:
case VILLAGER:
case WOLF:
        break;
default :
      getLogger().warning(""String_Node_Str"");
    Settings.islandCompanion=EntityType.COW;
  break;
}
}
 catch (Exception e) {
getLogger().warning(""String_Node_Str"");
Settings.islandCompanion=EntityType.COW;
}
}
List<String> companionNames=getConfig().getStringList(""String_Node_Str"");
Settings.companionNames=new ArrayList<String>();
for (String name : companionNames) {
Settings.companionNames.add(ChatColor.translateAlternateColorCodes('&',name));
}
Settings.islandDistance=getConfig().getInt(""String_Node_Str"",200);
if (Settings.islandDistance < 50) {
Settings.islandDistance=50;
getLogger().info(""String_Node_Str"");
}
Settings.islandXOffset=getConfig().getInt(""String_Node_Str"",0);
if (Settings.islandXOffset < 0) {
Settings.islandXOffset=0;
getLogger().info(""String_Node_Str"");
}
 else if (Settings.islandXOffset > Settings.islandDistance) {
Settings.islandXOffset=Settings.islandDistance;
getLogger().info(""String_Node_Str"" + Settings.islandDistance);
}
Settings.islandZOffset=getConfig().getInt(""String_Node_Str"",0);
if (Settings.islandZOffset < 0) {
Settings.islandZOffset=0;
getLogger().info(""String_Node_Str"");
}
 else if (Settings.islandZOffset > Settings.islandDistance) {
Settings.islandZOffset=Settings.islandDistance;
getLogger().info(""String_Node_Str"" + Settings.islandDistance);
}
long x=getConfig().getLong(""String_Node_Str"",0);
long z=getConfig().getLong(""String_Node_Str"",0);
Settings.islandStartX=Math.round((double)x / Settings.islandDistance) * Settings.islandDistance + Settings.islandXOffset;
Settings.islandStartZ=Math.round((double)z / Settings.islandDistance) * Settings.islandDistance + Settings.islandZOffset;
if (Settings.GAMETYPE.equals(Settings.GameType.ACIDISLAND)) {
Settings.acidDamage=getConfig().getDouble(""String_Node_Str"",5D);
if (Settings.acidDamage > 100D) {
Settings.acidDamage=100D;
}
 else if (Settings.acidDamage < 0D) {
Settings.acidDamage=0D;
}
Settings.mobAcidDamage=getConfig().getDouble(""String_Node_Str"",10D);
if (Settings.mobAcidDamage > 100D) {
Settings.mobAcidDamage=100D;
}
 else if (Settings.mobAcidDamage < 0D) {
Settings.mobAcidDamage=0D;
}
Settings.rainDamage=getConfig().getDouble(""String_Node_Str"",0.5D);
if (Settings.rainDamage > 100D) {
Settings.rainDamage=100D;
}
 else if (Settings.rainDamage < 0D) {
Settings.rainDamage=0D;
}
Settings.sea_level=getConfig().getInt(""String_Node_Str"",50);
if (Settings.sea_level < 0) {
Settings.sea_level=0;
}
Settings.island_level=getConfig().getInt(""String_Node_Str"",50) - 5;
if (Settings.island_level < 0) {
Settings.island_level=0;
}
}
 else {
Settings.acidDamage=getConfig().getDouble(""String_Node_Str"",0D);
if (Settings.acidDamage > 100D) {
Settings.acidDamage=100D;
}
 else if (Settings.acidDamage < 0D) {
Settings.acidDamage=0D;
}
Settings.mobAcidDamage=getConfig().getDouble(""String_Node_Str"",0D);
if (Settings.mobAcidDamage > 100D) {
Settings.mobAcidDamage=100D;
}
 else if (Settings.mobAcidDamage < 0D) {
Settings.mobAcidDamage=0D;
}
Settings.rainDamage=getConfig().getDouble(""String_Node_Str"",0D);
if (Settings.rainDamage > 100D) {
Settings.rainDamage=100D;
}
 else if (Settings.rainDamage < 0D) {
Settings.rainDamage=0D;
}
Settings.sea_level=getConfig().getInt(""String_Node_Str"",0);
if (Settings.sea_level < 0) {
Settings.sea_level=0;
}
Settings.island_level=getConfig().getInt(""String_Node_Str"",120) - 5;
if (Settings.island_level < 0) {
Settings.island_level=0;
}
}
Settings.animalAcidDamage=getConfig().getDouble(""String_Node_Str"",0D);
if (Settings.animalAcidDamage > 100D) {
Settings.animalAcidDamage=100D;
}
 else if (Settings.animalAcidDamage < 0D) {
Settings.animalAcidDamage=0D;
}
Settings.damageChickens=getConfig().getBoolean(""String_Node_Str"",false);
List<String> acidDamageType=getConfig().getStringList(""String_Node_Str"");
Settings.acidDamageType.clear();
if (acidDamageType != null) {
for (String effect : acidDamageType) {
PotionEffectType newPotionType=PotionEffectType.getByName(effect);
if (newPotionType != null) {
if (newPotionType.equals(PotionEffectType.BLINDNESS) || newPotionType.equals(PotionEffectType.CONFUSION) || newPotionType.equals(PotionEffectType.HUNGER)|| newPotionType.equals(PotionEffectType.POISON)|| newPotionType.equals(PotionEffectType.SLOW)|| newPotionType.equals(PotionEffectType.SLOW_DIGGING)|| newPotionType.equals(PotionEffectType.WEAKNESS)) {
  Settings.acidDamageType.add(newPotionType);
}
}
 else {
getLogger().warning(""String_Node_Str"" + effect + ""String_Node_Str"");
getLogger().warning(""String_Node_Str"");
getLogger().warning(""String_Node_Str"");
}
}
}
Settings.animalSpawnLimit=getConfig().getInt(""String_Node_Str"",15);
if (Settings.animalSpawnLimit > 100) {
Settings.animalSpawnLimit=100;
}
 else if (Settings.animalSpawnLimit < -1) {
Settings.animalSpawnLimit=-1;
}
Settings.monsterSpawnLimit=getConfig().getInt(""String_Node_Str"",70);
if (Settings.monsterSpawnLimit > 100) {
Settings.monsterSpawnLimit=100;
}
 else if (Settings.monsterSpawnLimit < -1) {
Settings.monsterSpawnLimit=-1;
}
Settings.waterAnimalSpawnLimit=getConfig().getInt(""String_Node_Str"",15);
if (Settings.waterAnimalSpawnLimit > 100) {
Settings.waterAnimalSpawnLimit=100;
}
 else if (Settings.waterAnimalSpawnLimit < -1) {
Settings.waterAnimalSpawnLimit=-1;
}
Settings.abandonedIslandLevel=getConfig().getInt(""String_Node_Str"",10);
if (Settings.abandonedIslandLevel < 0) {
Settings.abandonedIslandLevel=0;
}
Settings.island_protectionRange=getConfig().getInt(""String_Node_Str"",100);
if (!getConfig().getBoolean(""String_Node_Str"",false)) {
if (Settings.island_protectionRange > (Settings.islandDistance - 16)) {
Settings.island_protectionRange=Settings.islandDistance - 16;
getLogger().warning(""String_Node_Str"" + (Settings.islandDistance - 16) + ""String_Node_Str""+ Settings.island_protectionRange);
}
}
if (Settings.island_protectionRange < 50) {
Settings.island_protectionRange=50;
}
Settings.resetChallenges=getConfig().getBoolean(""String_Node_Str"",true);
Settings.resetMoney=getConfig().getBoolean(""String_Node_Str"",true);
Settings.clearInventory=getConfig().getBoolean(""String_Node_Str"",true);
Settings.resetEnderChest=getConfig().getBoolean(""String_Node_Str"",false);
Settings.startingMoney=getConfig().getDouble(""String_Node_Str"",0D);
Settings.newNether=getConfig().getBoolean(""String_Node_Str"",false);
Settings.netherSpawnRadius=getConfig().getInt(""String_Node_Str"",25);
if (Settings.netherSpawnRadius < 0) {
Settings.netherSpawnRadius=0;
}
 else if (Settings.netherSpawnRadius > 100) {
Settings.netherSpawnRadius=100;
}
Settings.resetWait=getConfig().getInt(""String_Node_Str"",300);
if (Settings.resetWait < 0) {
Settings.resetWait=0;
}
Settings.resetLimit=getConfig().getInt(""String_Node_Str"",0);
if (Settings.resetWait < 0) {
Settings.resetWait=-1;
}
Settings.inviteWait=getConfig().getInt(""String_Node_Str"",60);
if (Settings.inviteWait < 0) {
Settings.inviteWait=0;
}
Settings.levelWait=getConfig().getInt(""String_Node_Str"",60);
if (Settings.levelWait < 0) {
Settings.levelWait=0;
}
Settings.resetConfirmWait=getConfig().getInt(""String_Node_Str"",10);
if (Settings.resetConfirmWait < 0) {
Settings.resetConfirmWait=0;
}
Settings.damageOps=getConfig().getBoolean(""String_Node_Str"",false);
Settings.logInRemoveMobs=getConfig().getBoolean(""String_Node_Str"",true);
Settings.islandRemoveMobs=getConfig().getBoolean(""String_Node_Str"",false);
final String[] chestItemString=getConfig().getString(""String_Node_Str"").split(""String_Node_Str"");
final ItemStack[] tempChest=new ItemStack[chestItemString.length];
for (int i=0; i < tempChest.length; i++) {
try {
String[] amountdata=chestItemString[i].split(""String_Node_Str"");
if (amountdata[0].equals(""String_Node_Str"")) {
if (amountdata.length == 2) {
  final String chestPotionEffect=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  if (!chestPotionEffect.isEmpty()) {
    Potion chestPotion=new Potion(PotionType.valueOf(chestPotionEffect));
    tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[1]));
  }
}
 else if (amountdata.length == 3) {
  Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1]));
  tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[2]));
}
 else if (amountdata.length == 4) {
  if (amountdata[2].equals(""String_Node_Str"")) {
    Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).extend();
    tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
  }
 else   if (amountdata[2].equals(""String_Node_Str"")) {
    Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).splash();
    tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
  }
 else   if (amountdata[2].equals(""String_Node_Str"")) {
    Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).extend().splash();
    tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
  }
}
}
 else {
if (amountdata.length == 2) {
  tempChest[i]=new ItemStack(Material.getMaterial(amountdata[0]),Integer.parseInt(amountdata[1]));
}
 else if (amountdata.length == 3) {
  tempChest[i]=new ItemStack(Material.getMaterial(amountdata[0]),Integer.parseInt(amountdata[2]),Short.parseShort(amountdata[1]));
}
}
}
 catch (java.lang.IllegalArgumentException ex) {
getLogger().severe(""String_Node_Str"" + chestItemString[i]);
getLogger().severe(""String_Node_Str"" + ex.getMessage());
getLogger().info(""String_Node_Str"");
for (PotionType c : PotionType.values()) getLogger().info(c.name());
}
catch (Exception e) {
getLogger().severe(""String_Node_Str"" + chestItemString[i]);
getLogger().info(""String_Node_Str"");
for (Material c : Material.values()) getLogger().info(c.name());
}
}
Settings.chestItems=tempChest;
Settings.allowPvP=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowNetherPvP=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBreakBlocks=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowPlaceBlocks=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBedUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBucketUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowShearing=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowEnderPearls=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowDoorUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowLeverButtonUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowCropTrample=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowChestAccess=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowFurnaceUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowRedStone=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowMusic=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowCrafting=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBrewing=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowGateUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowHurtMobs=getConfig().getBoolean(""String_Node_Str"",true);
Settings.endermanDeathDrop=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowEndermanGriefing=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowCreeperDamage=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowTNTDamage=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowMonsterEggs=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBreeding=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowFire=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowChestDamage=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowLeashUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowHurtMonsters=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowEnchanting=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowAnvilUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowVisitorKeepInvOnDeath=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowVisitorItemDrop=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowVisitorItemPickup=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowArmorStandUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBeaconAccess=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowPortalUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnDoorUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnLeverButtonUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnChestAccess=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnFurnaceUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnRedStone=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnMusic=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnCrafting=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnBrewing=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnGateUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnMobSpawn=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnAnimalSpawn=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnAnimalKilling=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnMobKilling=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnMonsterEggs=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnEggs=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnBreakBlocks=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnPlaceBlocks=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnNoAcidWater=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnEnchanting=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnAnvilUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnBeaconAccess=getConfig().getBoolean(""String_Node_Str"",false);
final Set<String> challengeList=Challenges.getChallengeConfig().getConfigurationSection(""String_Node_Str"").getKeys(false);
Settings.challengeList=challengeList;
Settings.challengeLevels=Arrays.asList(Challenges.getChallengeConfig().getString(""String_Node_Str"").split(""String_Node_Str""));
Settings.waiverAmount=Challenges.getChallengeConfig().getInt(""String_Node_Str"",1);
if (Settings.waiverAmount < 0) {
Settings.waiverAmount=0;
}
Settings.broadcastMessages=getConfig().getBoolean(""String_Node_Str"",true);
YamlConfiguration blockValuesConfig=Util.loadYamlFile(""String_Node_Str"");
Settings.blockLimits=new HashMap<Material,Integer>();
if (blockValuesConfig.isSet(""String_Node_Str"")) {
for (String material : blockValuesConfig.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
try {
Material mat=Material.valueOf(material);
Settings.blockLimits.put(mat,blockValuesConfig.getInt(""String_Node_Str"" + material,0));
if (debug) {
  getLogger().info(""String_Node_Str"" + mat.toString() + ""String_Node_Str""+ Settings.blockLimits.get(mat));
}
}
 catch (Exception e) {
getLogger().warning(""String_Node_Str"" + material + ""String_Node_Str"");
}
}
}
Settings.blockValues=new HashMap<Material,Integer>();
if (blockValuesConfig.isSet(""String_Node_Str"")) {
for (String material : blockValuesConfig.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
try {
Material mat=Material.valueOf(material);
Settings.blockValues.put(mat,blockValuesConfig.getInt(""String_Node_Str"" + material,0));
if (debug) {
  getLogger().info(mat.toString() + ""String_Node_Str"" + Settings.blockValues.get(mat));
}
}
 catch (Exception e) {
getLogger().warning(""String_Node_Str"" + material + ""String_Node_Str"");
}
}
}
 else {
getLogger().severe(""String_Node_Str"");
}
Settings.biomeCost=getConfig().getDouble(""String_Node_Str"",100D);
if (Settings.biomeCost < 0D) {
Settings.biomeCost=0D;
getLogger().warning(""String_Node_Str"");
}
String defaultBiome=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
try {
Settings.defaultBiome=Biome.valueOf(defaultBiome);
}
 catch (Exception e) {
getLogger().severe(""String_Node_Str"" + defaultBiome + ""String_Node_Str"");
Settings.defaultBiome=Biome.PLAINS;
}
Settings.breedingLimit=getConfig().getInt(""String_Node_Str"",0);
Settings.removeCompleteOntimeChallenges=getConfig().getBoolean(""String_Node_Str"",false);
Settings.addCompletedGlow=getConfig().getBoolean(""String_Node_Str"",true);
}","/** 
 * Loads the various settings from the config.yml file into the plugin
 */
public void loadPluginConfig(){
  try {
    getConfig();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  Challenges.getChallengeConfig();
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  availableLocales.put(""String_Node_Str"",new Locale(this,""String_Node_Str""));
  Settings.debug=getConfig().getInt(""String_Node_Str"",0);
  if (getConfig().contains(""String_Node_Str"")) {
    for (    String key : getConfig().getConfigurationSection(""String_Node_Str"").getKeys(true)) {
      String filename=getConfig().getString(""String_Node_Str"" + key);
      File schematicFile=new File(plugin.getDataFolder(),filename);
      if (schematicFile.exists()) {
        Settings.schematics.put(key,filename);
        getLogger().info(""String_Node_Str"" + filename + ""String_Node_Str""+ key);
      }
    }
  }
  Settings.useSchematicPanel=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.setTeamName=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.immediateTeleport=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.makeIslandIfNone=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.usePhysics=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.loginLevel=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.useEconomy=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.updateCheck=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.resetCommands=getConfig().getStringList(""String_Node_Str"");
  Settings.leaveCommands=getConfig().getStringList(""String_Node_Str"");
  Settings.useControlPanel=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowTeleportWhenFalling=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.fallingCommandBlockList=getConfig().getStringList(""String_Node_Str"");
  Settings.maxTeamSize=getConfig().getInt(""String_Node_Str"",4);
  Settings.maxTeamSizeVIP=getConfig().getInt(""String_Node_Str"",8);
  Settings.maxTeamSizeVIP2=getConfig().getInt(""String_Node_Str"",12);
  Settings.maxHomes=getConfig().getInt(""String_Node_Str"",1);
  if (Settings.maxHomes < 1) {
    Settings.maxHomes=1;
  }
  Settings.worldName=getConfig().getString(""String_Node_Str"");
  Settings.createNether=getConfig().getBoolean(""String_Node_Str"",true);
  if (!Settings.createNether) {
    getLogger().info(""String_Node_Str"");
  }
  String companion=getConfig().getString(""String_Node_Str"",""String_Node_Str"").toUpperCase();
  if (companion.equalsIgnoreCase(""String_Node_Str"")) {
    Settings.islandCompanion=null;
  }
 else {
    try {
      Settings.islandCompanion=EntityType.valueOf(companion);
switch (Settings.islandCompanion) {
case BAT:
case CHICKEN:
case COW:
case HORSE:
case IRON_GOLEM:
case MUSHROOM_COW:
case OCELOT:
case PIG:
case RABBIT:
case SHEEP:
case SNOWMAN:
case VILLAGER:
case WOLF:
        break;
default :
      getLogger().warning(""String_Node_Str"");
    Settings.islandCompanion=EntityType.COW;
  break;
}
}
 catch (Exception e) {
getLogger().warning(""String_Node_Str"");
Settings.islandCompanion=EntityType.COW;
}
}
List<String> companionNames=getConfig().getStringList(""String_Node_Str"");
Settings.companionNames=new ArrayList<String>();
for (String name : companionNames) {
Settings.companionNames.add(ChatColor.translateAlternateColorCodes('&',name));
}
Settings.islandDistance=getConfig().getInt(""String_Node_Str"",200);
if (Settings.islandDistance < 50) {
Settings.islandDistance=50;
getLogger().info(""String_Node_Str"");
}
Settings.islandXOffset=getConfig().getInt(""String_Node_Str"",0);
if (Settings.islandXOffset < 0) {
Settings.islandXOffset=0;
getLogger().info(""String_Node_Str"");
}
 else if (Settings.islandXOffset > Settings.islandDistance) {
Settings.islandXOffset=Settings.islandDistance;
getLogger().info(""String_Node_Str"" + Settings.islandDistance);
}
Settings.islandZOffset=getConfig().getInt(""String_Node_Str"",0);
if (Settings.islandZOffset < 0) {
Settings.islandZOffset=0;
getLogger().info(""String_Node_Str"");
}
 else if (Settings.islandZOffset > Settings.islandDistance) {
Settings.islandZOffset=Settings.islandDistance;
getLogger().info(""String_Node_Str"" + Settings.islandDistance);
}
long x=getConfig().getLong(""String_Node_Str"",0);
long z=getConfig().getLong(""String_Node_Str"",0);
Settings.islandStartX=Math.round((double)x / Settings.islandDistance) * Settings.islandDistance + Settings.islandXOffset;
Settings.islandStartZ=Math.round((double)z / Settings.islandDistance) * Settings.islandDistance + Settings.islandZOffset;
if (Settings.GAMETYPE.equals(Settings.GameType.ACIDISLAND)) {
Settings.acidDamage=getConfig().getDouble(""String_Node_Str"",5D);
if (Settings.acidDamage > 100D) {
Settings.acidDamage=100D;
}
 else if (Settings.acidDamage < 0D) {
Settings.acidDamage=0D;
}
Settings.mobAcidDamage=getConfig().getDouble(""String_Node_Str"",10D);
if (Settings.mobAcidDamage > 100D) {
Settings.mobAcidDamage=100D;
}
 else if (Settings.mobAcidDamage < 0D) {
Settings.mobAcidDamage=0D;
}
Settings.rainDamage=getConfig().getDouble(""String_Node_Str"",0.5D);
if (Settings.rainDamage > 100D) {
Settings.rainDamage=100D;
}
 else if (Settings.rainDamage < 0D) {
Settings.rainDamage=0D;
}
Settings.sea_level=getConfig().getInt(""String_Node_Str"",50);
if (Settings.sea_level < 0) {
Settings.sea_level=0;
}
Settings.island_level=getConfig().getInt(""String_Node_Str"",50) - 5;
if (Settings.island_level < 0) {
Settings.island_level=0;
}
}
 else {
Settings.acidDamage=getConfig().getDouble(""String_Node_Str"",0D);
if (Settings.acidDamage > 100D) {
Settings.acidDamage=100D;
}
 else if (Settings.acidDamage < 0D) {
Settings.acidDamage=0D;
}
Settings.mobAcidDamage=getConfig().getDouble(""String_Node_Str"",0D);
if (Settings.mobAcidDamage > 100D) {
Settings.mobAcidDamage=100D;
}
 else if (Settings.mobAcidDamage < 0D) {
Settings.mobAcidDamage=0D;
}
Settings.rainDamage=getConfig().getDouble(""String_Node_Str"",0D);
if (Settings.rainDamage > 100D) {
Settings.rainDamage=100D;
}
 else if (Settings.rainDamage < 0D) {
Settings.rainDamage=0D;
}
Settings.sea_level=getConfig().getInt(""String_Node_Str"",0);
if (Settings.sea_level < 0) {
Settings.sea_level=0;
}
Settings.island_level=getConfig().getInt(""String_Node_Str"",120) - 5;
if (Settings.island_level < 0) {
Settings.island_level=0;
}
}
Settings.animalAcidDamage=getConfig().getDouble(""String_Node_Str"",0D);
if (Settings.animalAcidDamage > 100D) {
Settings.animalAcidDamage=100D;
}
 else if (Settings.animalAcidDamage < 0D) {
Settings.animalAcidDamage=0D;
}
Settings.damageChickens=getConfig().getBoolean(""String_Node_Str"",false);
List<String> acidDamageType=getConfig().getStringList(""String_Node_Str"");
Settings.acidDamageType.clear();
if (acidDamageType != null) {
for (String effect : acidDamageType) {
PotionEffectType newPotionType=PotionEffectType.getByName(effect);
if (newPotionType != null) {
if (newPotionType.equals(PotionEffectType.BLINDNESS) || newPotionType.equals(PotionEffectType.CONFUSION) || newPotionType.equals(PotionEffectType.HUNGER)|| newPotionType.equals(PotionEffectType.POISON)|| newPotionType.equals(PotionEffectType.SLOW)|| newPotionType.equals(PotionEffectType.SLOW_DIGGING)|| newPotionType.equals(PotionEffectType.WEAKNESS)) {
  Settings.acidDamageType.add(newPotionType);
}
}
 else {
getLogger().warning(""String_Node_Str"" + effect + ""String_Node_Str"");
getLogger().warning(""String_Node_Str"");
getLogger().warning(""String_Node_Str"");
}
}
}
Settings.animalSpawnLimit=getConfig().getInt(""String_Node_Str"",15);
if (Settings.animalSpawnLimit > 100) {
Settings.animalSpawnLimit=100;
}
 else if (Settings.animalSpawnLimit < -1) {
Settings.animalSpawnLimit=-1;
}
Settings.monsterSpawnLimit=getConfig().getInt(""String_Node_Str"",70);
if (Settings.monsterSpawnLimit > 100) {
Settings.monsterSpawnLimit=100;
}
 else if (Settings.monsterSpawnLimit < -1) {
Settings.monsterSpawnLimit=-1;
}
Settings.waterAnimalSpawnLimit=getConfig().getInt(""String_Node_Str"",15);
if (Settings.waterAnimalSpawnLimit > 100) {
Settings.waterAnimalSpawnLimit=100;
}
 else if (Settings.waterAnimalSpawnLimit < -1) {
Settings.waterAnimalSpawnLimit=-1;
}
Settings.abandonedIslandLevel=getConfig().getInt(""String_Node_Str"",10);
if (Settings.abandonedIslandLevel < 0) {
Settings.abandonedIslandLevel=0;
}
Settings.island_protectionRange=getConfig().getInt(""String_Node_Str"",100);
if (!getConfig().getBoolean(""String_Node_Str"",false)) {
if (Settings.island_protectionRange > (Settings.islandDistance - 16)) {
Settings.island_protectionRange=Settings.islandDistance - 16;
getLogger().warning(""String_Node_Str"" + (Settings.islandDistance - 16) + ""String_Node_Str""+ Settings.island_protectionRange);
}
}
if (Settings.island_protectionRange < 50) {
Settings.island_protectionRange=50;
}
Settings.resetChallenges=getConfig().getBoolean(""String_Node_Str"",true);
Settings.resetMoney=getConfig().getBoolean(""String_Node_Str"",true);
Settings.clearInventory=getConfig().getBoolean(""String_Node_Str"",true);
Settings.resetEnderChest=getConfig().getBoolean(""String_Node_Str"",false);
Settings.startingMoney=getConfig().getDouble(""String_Node_Str"",0D);
Settings.newNether=getConfig().getBoolean(""String_Node_Str"",false);
Settings.netherSpawnRadius=getConfig().getInt(""String_Node_Str"",25);
if (Settings.netherSpawnRadius < 0) {
Settings.netherSpawnRadius=0;
}
 else if (Settings.netherSpawnRadius > 100) {
Settings.netherSpawnRadius=100;
}
Settings.resetWait=getConfig().getInt(""String_Node_Str"",300);
if (Settings.resetWait < 0) {
Settings.resetWait=0;
}
Settings.resetLimit=getConfig().getInt(""String_Node_Str"",0);
if (Settings.resetWait < 0) {
Settings.resetWait=-1;
}
Settings.inviteWait=getConfig().getInt(""String_Node_Str"",60);
if (Settings.inviteWait < 0) {
Settings.inviteWait=0;
}
Settings.levelWait=getConfig().getInt(""String_Node_Str"",60);
if (Settings.levelWait < 0) {
Settings.levelWait=0;
}
Settings.resetConfirmWait=getConfig().getInt(""String_Node_Str"",10);
if (Settings.resetConfirmWait < 0) {
Settings.resetConfirmWait=0;
}
Settings.damageOps=getConfig().getBoolean(""String_Node_Str"",false);
Settings.logInRemoveMobs=getConfig().getBoolean(""String_Node_Str"",true);
Settings.islandRemoveMobs=getConfig().getBoolean(""String_Node_Str"",false);
final String[] chestItemString=getConfig().getString(""String_Node_Str"").split(""String_Node_Str"");
final ItemStack[] tempChest=new ItemStack[chestItemString.length];
for (int i=0; i < tempChest.length; i++) {
try {
String[] amountdata=chestItemString[i].split(""String_Node_Str"");
if (amountdata[0].equals(""String_Node_Str"")) {
if (amountdata.length == 2) {
  final String chestPotionEffect=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  if (!chestPotionEffect.isEmpty()) {
    Potion chestPotion=new Potion(PotionType.valueOf(chestPotionEffect));
    tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[1]));
  }
}
 else if (amountdata.length == 3) {
  Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1]));
  tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[2]));
}
 else if (amountdata.length == 4) {
  if (amountdata[2].equals(""String_Node_Str"")) {
    Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).extend();
    tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
  }
 else   if (amountdata[2].equals(""String_Node_Str"")) {
    Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).splash();
    tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
  }
 else   if (amountdata[2].equals(""String_Node_Str"")) {
    Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).extend().splash();
    tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
  }
}
}
 else {
if (amountdata.length == 2) {
  tempChest[i]=new ItemStack(Material.getMaterial(amountdata[0]),Integer.parseInt(amountdata[1]));
}
 else if (amountdata.length == 3) {
  tempChest[i]=new ItemStack(Material.getMaterial(amountdata[0]),Integer.parseInt(amountdata[2]),Short.parseShort(amountdata[1]));
}
}
}
 catch (java.lang.IllegalArgumentException ex) {
getLogger().severe(""String_Node_Str"" + chestItemString[i]);
getLogger().severe(""String_Node_Str"" + ex.getMessage());
getLogger().info(""String_Node_Str"");
for (PotionType c : PotionType.values()) getLogger().info(c.name());
}
catch (Exception e) {
getLogger().severe(""String_Node_Str"" + chestItemString[i]);
getLogger().info(""String_Node_Str"");
for (Material c : Material.values()) getLogger().info(c.name());
}
}
Settings.chestItems=tempChest;
Settings.allowPvP=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowNetherPvP=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBreakBlocks=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowPlaceBlocks=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBedUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBucketUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowShearing=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowEnderPearls=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowDoorUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowLeverButtonUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowCropTrample=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowChestAccess=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowFurnaceUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowRedStone=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowMusic=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowCrafting=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBrewing=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowGateUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowHurtMobs=getConfig().getBoolean(""String_Node_Str"",true);
Settings.endermanDeathDrop=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowEndermanGriefing=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowCreeperDamage=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowTNTDamage=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowMonsterEggs=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBreeding=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowFire=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowChestDamage=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowLeashUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowHurtMonsters=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowEnchanting=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowAnvilUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowVisitorKeepInvOnDeath=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowVisitorItemDrop=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowVisitorItemPickup=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowArmorStandUse=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowBeaconAccess=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowPortalUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnDoorUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnLeverButtonUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnChestAccess=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnFurnaceUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnRedStone=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnMusic=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnCrafting=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnBrewing=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnGateUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnMobSpawn=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnAnimalSpawn=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnAnimalKilling=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnMobKilling=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnMonsterEggs=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnEggs=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnBreakBlocks=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnPlaceBlocks=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnNoAcidWater=getConfig().getBoolean(""String_Node_Str"",false);
Settings.allowSpawnEnchanting=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnAnvilUse=getConfig().getBoolean(""String_Node_Str"",true);
Settings.allowSpawnBeaconAccess=getConfig().getBoolean(""String_Node_Str"",false);
final Set<String> challengeList=Challenges.getChallengeConfig().getConfigurationSection(""String_Node_Str"").getKeys(false);
Settings.challengeList=challengeList;
Settings.challengeLevels=Arrays.asList(Challenges.getChallengeConfig().getString(""String_Node_Str"").split(""String_Node_Str""));
Settings.waiverAmount=Challenges.getChallengeConfig().getInt(""String_Node_Str"",1);
if (Settings.waiverAmount < 0) {
Settings.waiverAmount=0;
}
Settings.broadcastMessages=getConfig().getBoolean(""String_Node_Str"",true);
YamlConfiguration blockValuesConfig=Util.loadYamlFile(""String_Node_Str"");
Settings.blockLimits=new HashMap<Material,Integer>();
if (blockValuesConfig.isSet(""String_Node_Str"")) {
for (String material : blockValuesConfig.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
try {
Material mat=Material.valueOf(material);
Settings.blockLimits.put(mat,blockValuesConfig.getInt(""String_Node_Str"" + material,0));
if (debug) {
  getLogger().info(""String_Node_Str"" + mat.toString() + ""String_Node_Str""+ Settings.blockLimits.get(mat));
}
}
 catch (Exception e) {
getLogger().warning(""String_Node_Str"" + material + ""String_Node_Str"");
}
}
}
Settings.blockValues=new HashMap<Material,Integer>();
if (blockValuesConfig.isSet(""String_Node_Str"")) {
for (String material : blockValuesConfig.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
try {
Material mat=Material.valueOf(material);
Settings.blockValues.put(mat,blockValuesConfig.getInt(""String_Node_Str"" + material,0));
if (debug) {
  getLogger().info(mat.toString() + ""String_Node_Str"" + Settings.blockValues.get(mat));
}
}
 catch (Exception e) {
getLogger().warning(""String_Node_Str"" + material + ""String_Node_Str"");
}
}
}
 else {
getLogger().severe(""String_Node_Str"");
}
Settings.biomeCost=getConfig().getDouble(""String_Node_Str"",100D);
if (Settings.biomeCost < 0D) {
Settings.biomeCost=0D;
getLogger().warning(""String_Node_Str"");
}
String defaultBiome=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
try {
Settings.defaultBiome=Biome.valueOf(defaultBiome);
}
 catch (Exception e) {
getLogger().severe(""String_Node_Str"" + defaultBiome + ""String_Node_Str"");
Settings.defaultBiome=Biome.PLAINS;
}
Settings.breedingLimit=getConfig().getInt(""String_Node_Str"",0);
Settings.removeCompleteOntimeChallenges=getConfig().getBoolean(""String_Node_Str"",false);
Settings.addCompletedGlow=getConfig().getBoolean(""String_Node_Str"",true);
}"
34067,"/** 
 * This method protects players from PVP if it is not allowed and from arrows fired by other players
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onEntityDamage(final EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(e.getDamager().toString());
  }
  if (e.getDamager() instanceof EnderPearl) {
    return;
  }
  if (!inWorld(e.getEntity())) {
    return;
  }
  if (!Settings.allowTNTDamage && e.getDamager().getType().equals(EntityType.PRIMED_TNT)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperDamage && e.getDamager().getType().equals(EntityType.CREEPER) && !(e.getEntity() instanceof Player)) {
    e.setCancelled(true);
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
  }
  if (e.getEntity() instanceof ItemFrame) {
    if (!Settings.allowSpawnBreakBlocks && plugin.getGrid().isAtSpawn(e.getEntity().getLocation())) {
      Player player=(Player)e.getDamager();
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
      e.setCancelled(true);
      return;
    }
    if (Settings.allowBreakBlocks || (Settings.allowSpawnBreakBlocks && plugin.getGrid().isAtSpawn(e.getEntity().getLocation()))) {
      return;
    }
    if (e.getDamager() instanceof Player) {
      if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
        Player player=(Player)e.getDamager();
        player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
        e.setCancelled(true);
        return;
      }
    }
 else     if (e.getDamager() instanceof Projectile) {
      Projectile p=(Projectile)e.getDamager();
      if (p.getShooter() instanceof Player) {
        if (!plugin.getGrid().locationIsOnIsland((Player)p.getShooter(),e.getEntity().getLocation())) {
          Player player=(Player)p.getShooter();
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
          e.setCancelled(true);
          return;
        }
      }
    }
 else     if ((e.getDamager() instanceof TNTPrimed) && !Settings.allowTNTDamage) {
      e.setCancelled(true);
      return;
    }
  }
  if (!(e.getDamager() instanceof Player) && !(e.getDamager() instanceof Projectile)) {
    return;
  }
  if (e.getDamager() instanceof Player) {
    if (!(e.getEntity() instanceof Player)) {
      Location targetLoc=e.getEntity().getLocation();
      if (e.getEntity() instanceof Monster || e.getEntity() instanceof Slime || e.getEntity() instanceof Squid) {
        if (plugin.getGrid().isAtSpawn(targetLoc)) {
          if (!Settings.allowSpawnMobKilling) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
          return;
        }
        if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
          if (!Settings.allowHurtMonsters) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
        }
        return;
      }
      if (e.getEntity() instanceof Animals) {
        if (plugin.getGrid().isAtSpawn(e.getEntity().getLocation())) {
          if (!Settings.allowSpawnAnimalKilling) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
          return;
        }
        if (!Settings.allowHurtMobs) {
          if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
        }
        return;
      }
switch (e.getEntityType()) {
case IRON_GOLEM:
case SNOWMAN:
case VILLAGER:
        if (!Settings.allowHurtMobs) {
          if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
        }
      break;
default :
    break;
}
return;
}
 else {
if (Settings.allowPvP) {
  return;
}
}
}
if (e.getDamager() instanceof Projectile) {
Projectile projectile=(Projectile)e.getDamager();
if (projectile.getShooter() instanceof Player) {
Player shooter=(Player)projectile.getShooter();
if (e.getEntity() instanceof Player) {
  if (shooter.equals((Player)e.getEntity())) {
    return;
  }
  if (!Settings.allowPvP) {
    shooter.sendMessage(ChatColor.RED + plugin.myLocale(shooter.getUniqueId()).targetInNoPVPArea);
    e.setCancelled(true);
    return;
  }
}
 else {
  if (!(e.getEntity() instanceof Monster) && !(e.getEntity() instanceof Slime) && !(e.getEntity() instanceof Squid)) {
    if (!Settings.allowHurtMobs) {
      if (!plugin.getGrid().locationIsOnIsland((Player)projectile.getShooter(),e.getEntity().getLocation())) {
        shooter.sendMessage(ChatColor.RED + plugin.myLocale(shooter.getUniqueId()).islandProtected);
        e.setCancelled(true);
        return;
      }
    }
    return;
  }
 else {
    if (!Settings.allowHurtMonsters) {
      if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
        Player player=(Player)e.getDamager();
        player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
        e.setCancelled(true);
        return;
      }
    }
  }
}
}
}
 else if (e.getDamager() instanceof Player) {
if (!Settings.allowPvP) {
Player player=(Player)e.getDamager();
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).targetInNoPVPArea);
e.setCancelled(true);
return;
}
}
return;
}","/** 
 * This method protects players from PVP if it is not allowed and from arrows fired by other players
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onEntityDamage(final EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(e.getDamager().toString());
  }
  if (e.getDamager() instanceof EnderPearl) {
    return;
  }
  if (!inWorld(e.getEntity())) {
    return;
  }
  if (!Settings.allowTNTDamage && e.getDamager().getType().equals(EntityType.PRIMED_TNT)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperDamage && e.getDamager().getType().equals(EntityType.CREEPER) && !(e.getEntity() instanceof Player)) {
    e.setCancelled(true);
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
  }
  if (e.getEntity() instanceof ItemFrame) {
    if (!Settings.allowSpawnBreakBlocks && plugin.getGrid().isAtSpawn(e.getEntity().getLocation())) {
      Player player=(Player)e.getDamager();
      player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
      e.setCancelled(true);
      return;
    }
    if (Settings.allowBreakBlocks || (Settings.allowSpawnBreakBlocks && plugin.getGrid().isAtSpawn(e.getEntity().getLocation()))) {
      return;
    }
    if (e.getDamager() instanceof Player) {
      if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
        Player player=(Player)e.getDamager();
        player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
        e.setCancelled(true);
        return;
      }
    }
 else     if (e.getDamager() instanceof Projectile) {
      Projectile p=(Projectile)e.getDamager();
      if (p.getShooter() instanceof Player) {
        if (!plugin.getGrid().locationIsOnIsland((Player)p.getShooter(),e.getEntity().getLocation())) {
          Player player=(Player)p.getShooter();
          player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
          e.setCancelled(true);
          return;
        }
      }
    }
 else     if ((e.getDamager() instanceof TNTPrimed) && !Settings.allowTNTDamage) {
      e.setCancelled(true);
      return;
    }
  }
  if (!(e.getDamager() instanceof Player) && !(e.getDamager() instanceof Projectile)) {
    return;
  }
  if (e.getDamager() instanceof Player) {
    if (!(e.getEntity() instanceof Player)) {
      Location targetLoc=e.getEntity().getLocation();
      if (e.getEntity() instanceof Monster || e.getEntity() instanceof Slime || e.getEntity() instanceof Squid) {
        if (plugin.getGrid().isAtSpawn(targetLoc)) {
          if (!Settings.allowSpawnMobKilling) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
          return;
        }
        if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
          if (!Settings.allowHurtMonsters) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
        }
        return;
      }
      if (e.getEntity() instanceof Animals) {
        if (plugin.getGrid().isAtSpawn(e.getEntity().getLocation())) {
          if (!Settings.allowSpawnAnimalKilling) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
          return;
        }
        if (!Settings.allowHurtMobs) {
          if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
        }
        return;
      }
switch (e.getEntityType()) {
case IRON_GOLEM:
case SNOWMAN:
case VILLAGER:
        if (!Settings.allowHurtMobs) {
          if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
            Player player=(Player)e.getDamager();
            player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).islandProtected);
            e.setCancelled(true);
            return;
          }
        }
      break;
default :
    break;
}
return;
}
 else {
if (Settings.allowPvP) {
  return;
}
}
}
if (e.getDamager() instanceof Projectile) {
Projectile projectile=(Projectile)e.getDamager();
if (projectile.getShooter() instanceof Player) {
Player shooter=(Player)projectile.getShooter();
if (e.getEntity() instanceof Player) {
  if (shooter.equals((Player)e.getEntity())) {
    return;
  }
  if (!Settings.allowPvP) {
    shooter.sendMessage(ChatColor.RED + plugin.myLocale(shooter.getUniqueId()).targetInNoPVPArea);
    e.setCancelled(true);
    return;
  }
}
 else {
  if (!(e.getEntity() instanceof Monster) && !(e.getEntity() instanceof Slime) && !(e.getEntity() instanceof Squid)) {
    if (!Settings.allowHurtMobs) {
      if (!plugin.getGrid().locationIsOnIsland((Player)projectile.getShooter(),e.getEntity().getLocation())) {
        shooter.sendMessage(ChatColor.RED + plugin.myLocale(shooter.getUniqueId()).islandProtected);
        e.setCancelled(true);
        return;
      }
    }
    return;
  }
 else {
    if (!Settings.allowHurtMonsters) {
      if (!plugin.getGrid().locationIsOnIsland(shooter,e.getEntity().getLocation())) {
        shooter.sendMessage(ChatColor.RED + plugin.myLocale(shooter.getUniqueId()).islandProtected);
        e.setCancelled(true);
        return;
      }
    }
  }
}
}
}
 else if (e.getDamager() instanceof Player) {
if (!Settings.allowPvP) {
Player player=(Player)e.getDamager();
player.sendMessage(ChatColor.RED + plugin.myLocale(player.getUniqueId()).targetInNoPVPArea);
e.setCancelled(true);
return;
}
}
return;
}"
34068,"/** 
 * This method protects players from PVP if it is not allowed and from arrows fired by other players
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onEntityDamage(final EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(e.getDamager().toString());
  }
  if (!inWorld(e.getEntity())) {
    return;
  }
  if (!Settings.allowTNTDamage && e.getDamager().getType().equals(EntityType.PRIMED_TNT)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperDamage && e.getDamager().getType().equals(EntityType.CREEPER) && !(e.getEntity() instanceof Player)) {
    e.setCancelled(true);
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
  }
  if (e.getEntity() instanceof ItemFrame) {
    if (!Settings.allowSpawnBreakBlocks && plugin.getGrid().isAtSpawn(e.getEntity().getLocation())) {
      ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
      e.setCancelled(true);
      return;
    }
    if (Settings.allowBreakBlocks) {
      return;
    }
    if (e.getDamager() instanceof Player) {
      if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
        ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
        e.setCancelled(true);
        return;
      }
    }
 else     if (e.getDamager() instanceof Projectile) {
      Projectile p=(Projectile)e.getDamager();
      if (p.getShooter() instanceof Player) {
        if (!plugin.getGrid().locationIsOnIsland((Player)p.getShooter(),e.getEntity().getLocation())) {
          ((Player)p.getShooter()).sendMessage(ChatColor.RED + Locale.islandProtected);
          e.setCancelled(true);
          return;
        }
      }
    }
 else     if ((e.getDamager() instanceof TNTPrimed) && !Settings.allowTNTDamage) {
      e.setCancelled(true);
      return;
    }
  }
  if (!(e.getDamager() instanceof Player) && !(e.getDamager() instanceof Projectile)) {
    return;
  }
  if (e.getDamager() instanceof Player) {
    if (!(e.getEntity() instanceof Player)) {
      Location targetLoc=e.getEntity().getLocation();
      if (e.getEntity() instanceof Monster || e.getEntity() instanceof Slime || e.getEntity() instanceof Squid) {
        if (plugin.getGrid().isAtSpawn(targetLoc)) {
          if (!Settings.allowSpawnMobKilling) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
          return;
        }
        if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
          if (!Settings.allowHurtMonsters) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
        }
        return;
      }
      if (e.getEntity() instanceof Animals) {
        if (plugin.getGrid().isAtSpawn(e.getEntity().getLocation())) {
          if (!Settings.allowSpawnAnimalKilling) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
          return;
        }
        if (!Settings.allowHurtMobs) {
          if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
        }
        return;
      }
switch (e.getEntityType()) {
case IRON_GOLEM:
case SNOWMAN:
case VILLAGER:
        if (!Settings.allowHurtMobs) {
          if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
        }
      break;
default :
    break;
}
return;
}
 else {
if (Settings.allowPvP) {
  return;
}
}
}
if (e.getDamager() instanceof Projectile) {
Projectile projectile=(Projectile)e.getDamager();
if (projectile.getShooter() instanceof Player) {
Player shooter=(Player)projectile.getShooter();
if (e.getEntity() instanceof Player) {
  if (!Settings.allowPvP) {
    ((Player)projectile.getShooter()).sendMessage(Locale.targetInNoPVPArea);
    e.setCancelled(true);
    return;
  }
}
 else {
  if (!(e.getEntity() instanceof Monster) && !(e.getEntity() instanceof Slime) && !(e.getEntity() instanceof Squid)) {
    if (!Settings.allowHurtMobs) {
      if (!plugin.getGrid().locationIsOnIsland((Player)projectile.getShooter(),e.getEntity().getLocation())) {
        shooter.sendMessage(ChatColor.RED + Locale.islandProtected);
        e.setCancelled(true);
        return;
      }
    }
    return;
  }
 else {
    if (!Settings.allowHurtMonsters) {
      if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
        ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
        e.setCancelled(true);
        return;
      }
    }
  }
}
}
}
 else if (e.getDamager() instanceof Player) {
if (!Settings.allowPvP) {
((Player)e.getDamager()).sendMessage(Locale.targetInNoPVPArea);
e.setCancelled(true);
return;
}
}
return;
}","/** 
 * This method protects players from PVP if it is not allowed and from arrows fired by other players
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onEntityDamage(final EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
    plugin.getLogger().info(e.getDamager().toString());
  }
  if (!inWorld(e.getEntity())) {
    return;
  }
  if (!Settings.allowTNTDamage && e.getDamager().getType().equals(EntityType.PRIMED_TNT)) {
    e.setCancelled(true);
    return;
  }
  if (!Settings.allowCreeperDamage && e.getDamager().getType().equals(EntityType.CREEPER) && !(e.getEntity() instanceof Player)) {
    e.setCancelled(true);
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
  }
  if (e.getEntity() instanceof ItemFrame) {
    if (!Settings.allowSpawnBreakBlocks && plugin.getGrid().isAtSpawn(e.getEntity().getLocation())) {
      ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
      e.setCancelled(true);
      return;
    }
    if (Settings.allowBreakBlocks || (Settings.allowSpawnBreakBlocks && plugin.getGrid().isAtSpawn(e.getEntity().getLocation()))) {
      return;
    }
    if (e.getDamager() instanceof Player) {
      if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
        ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
        e.setCancelled(true);
        return;
      }
    }
 else     if (e.getDamager() instanceof Projectile) {
      Projectile p=(Projectile)e.getDamager();
      if (p.getShooter() instanceof Player) {
        if (!plugin.getGrid().locationIsOnIsland((Player)p.getShooter(),e.getEntity().getLocation())) {
          ((Player)p.getShooter()).sendMessage(ChatColor.RED + Locale.islandProtected);
          e.setCancelled(true);
          return;
        }
      }
    }
 else     if ((e.getDamager() instanceof TNTPrimed) && !Settings.allowTNTDamage) {
      e.setCancelled(true);
      return;
    }
  }
  if (!(e.getDamager() instanceof Player) && !(e.getDamager() instanceof Projectile)) {
    return;
  }
  if (e.getDamager() instanceof Player) {
    if (!(e.getEntity() instanceof Player)) {
      Location targetLoc=e.getEntity().getLocation();
      if (e.getEntity() instanceof Monster || e.getEntity() instanceof Slime || e.getEntity() instanceof Squid) {
        if (plugin.getGrid().isAtSpawn(targetLoc)) {
          if (!Settings.allowSpawnMobKilling) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
          return;
        }
        if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
          if (!Settings.allowHurtMonsters) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
        }
        return;
      }
      if (e.getEntity() instanceof Animals) {
        if (plugin.getGrid().isAtSpawn(e.getEntity().getLocation())) {
          if (!Settings.allowSpawnAnimalKilling) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
          return;
        }
        if (!Settings.allowHurtMobs) {
          if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
        }
        return;
      }
switch (e.getEntityType()) {
case IRON_GOLEM:
case SNOWMAN:
case VILLAGER:
        if (!Settings.allowHurtMobs) {
          if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
            ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
            e.setCancelled(true);
            return;
          }
        }
      break;
default :
    break;
}
return;
}
 else {
if (Settings.allowPvP) {
  return;
}
}
}
if (e.getDamager() instanceof Projectile) {
Projectile projectile=(Projectile)e.getDamager();
if (projectile.getShooter() instanceof Player) {
Player shooter=(Player)projectile.getShooter();
if (e.getEntity() instanceof Player) {
  if (!Settings.allowPvP) {
    ((Player)projectile.getShooter()).sendMessage(Locale.targetInNoPVPArea);
    e.setCancelled(true);
    return;
  }
}
 else {
  if (!(e.getEntity() instanceof Monster) && !(e.getEntity() instanceof Slime) && !(e.getEntity() instanceof Squid)) {
    if (!Settings.allowHurtMobs) {
      if (!plugin.getGrid().locationIsOnIsland((Player)projectile.getShooter(),e.getEntity().getLocation())) {
        shooter.sendMessage(ChatColor.RED + Locale.islandProtected);
        e.setCancelled(true);
        return;
      }
    }
    return;
  }
 else {
    if (!Settings.allowHurtMonsters) {
      if (!plugin.getGrid().locationIsOnIsland((Player)e.getDamager(),e.getEntity().getLocation())) {
        ((Player)e.getDamager()).sendMessage(ChatColor.RED + Locale.islandProtected);
        e.setCancelled(true);
        return;
      }
    }
  }
}
}
}
 else if (e.getDamager() instanceof Player) {
if (!Settings.allowPvP) {
((Player)e.getDamager()).sendMessage(Locale.targetInNoPVPArea);
e.setCancelled(true);
return;
}
}
return;
}"
34069,"/** 
 * Checks if this location is safe for a player to teleport to. Used by warps and boat exits Unsafe is any liquid or air and also if there's no space
 * @param l - Location to be checked
 * @return true if safe, otherwise false
 */
public static boolean isSafeLocation(final Location l){
  if (l == null) {
    return false;
  }
  final Block ground=l.getBlock().getRelative(BlockFace.DOWN);
  final Block space1=l.getBlock();
  final Block space2=l.getBlock().getRelative(BlockFace.UP);
  if (ground.getType() == Material.AIR) {
    return false;
  }
  if (ground.isLiquid() || space1.isLiquid() || space2.isLiquid()) {
    if (Settings.acidDamage > 0D) {
      return false;
    }
 else     if (ground.getType().equals(Material.STATIONARY_LAVA) || ground.getType().equals(Material.LAVA) || space1.getType().equals(Material.STATIONARY_LAVA)|| space1.getType().equals(Material.LAVA)|| space2.getType().equals(Material.STATIONARY_LAVA)|| space2.getType().equals(Material.LAVA)) {
      return false;
    }
  }
  if (ground.getType().equals(Material.CACTUS)) {
    return false;
  }
  if (ground.getType().equals(Material.BOAT)) {
    return false;
  }
  if (space1.getType().isSolid()) {
    if (!(space1.getType().equals(Material.SIGN_POST)) && !(space1.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  if (space2.getType().isSolid()) {
    if (!(space2.getType().equals(Material.SIGN_POST)) && !(space2.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks if this location is safe for a player to teleport to. Used by warps and boat exits Unsafe is any liquid or air and also if there's no space
 * @param l - Location to be checked
 * @return true if safe, otherwise false
 */
public static boolean isSafeLocation(final Location l){
  if (l == null) {
    return false;
  }
  final Block ground=l.getBlock().getRelative(BlockFace.DOWN);
  final Block space1=l.getBlock();
  final Block space2=l.getBlock().getRelative(BlockFace.UP);
  if (space1.getType() == Material.PORTAL || ground.getType() == Material.PORTAL || space2.getType() == Material.PORTAL || space1.getType() == Material.ENDER_PORTAL || ground.getType() == Material.ENDER_PORTAL || space2.getType() == Material.ENDER_PORTAL) {
    return false;
  }
  if (ground.getType() == Material.AIR) {
    return false;
  }
  if (ground.isLiquid() || space1.isLiquid() || space2.isLiquid()) {
    if (Settings.acidDamage > 0D) {
      return false;
    }
 else     if (ground.getType().equals(Material.STATIONARY_LAVA) || ground.getType().equals(Material.LAVA) || space1.getType().equals(Material.STATIONARY_LAVA)|| space1.getType().equals(Material.LAVA)|| space2.getType().equals(Material.STATIONARY_LAVA)|| space2.getType().equals(Material.LAVA)) {
      return false;
    }
  }
  if (ground.getType().equals(Material.CACTUS)) {
    return false;
  }
  if (ground.getType().equals(Material.BOAT)) {
    return false;
  }
  if (space1.getType().isSolid()) {
    if (!(space1.getType().equals(Material.SIGN_POST)) && !(space1.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  if (space2.getType().isSolid()) {
    if (!(space2.getType().equals(Material.SIGN_POST)) && !(space2.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  return true;
}"
34070,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=false) public void onPlayerPortal(PlayerPortalEvent event){
  if (!Settings.createNether) {
    return;
  }
  if (event.isCancelled()) {
    return;
  }
  Location currentLocation=event.getFrom().clone();
  String currentWorld=currentLocation.getWorld().getName();
  if (!currentWorld.equalsIgnoreCase(Settings.worldName) && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"") && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    return;
  }
  if (!Settings.allowPortalUse && currentWorld.equalsIgnoreCase(Settings.worldName)) {
    if (!event.getPlayer().isOp() && !VaultHelper.checkPerm(event.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (!plugin.getGrid().locationIsOnIsland(event.getPlayer(),event.getPlayer().getLocation()) && !plugin.getGrid().isAtSpawn(event.getPlayer().getLocation())) {
        event.getPlayer().sendMessage(ChatColor.RED + Locale.islandProtected);
        event.setCancelled(true);
        return;
      }
    }
  }
  Location destination=plugin.getGrid().getSafeHomeLocation(event.getPlayer().getUniqueId());
  if (destination == null) {
    event.getPlayer().sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + Settings.ISLANDCOMMAND+ ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (currentWorld.equalsIgnoreCase(Settings.worldName)) {
    if (plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"") != null) {
      if (event.getCause().equals(TeleportCause.END_PORTAL)) {
        event.setCancelled(true);
        Location end_place=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation();
        if (GridManager.isSafeLocation(end_place)) {
          event.getPlayer().teleport(end_place);
          return;
        }
 else {
          event.getPlayer().sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
          plugin.getGrid().homeTeleport(event.getPlayer());
          return;
        }
      }
    }
    UUID playerUUID=event.getPlayer().getUniqueId();
    World world=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"");
    if (Settings.newNether) {
      Location netherHome=null;
      if (plugin.getPlayers().inTeam(playerUUID)) {
        netherHome=plugin.getPlayers().getTeamIslandLocation(playerUUID).toVector().toLocation(world);
      }
 else {
        netherHome=plugin.getPlayers().getIslandLocation(playerUUID).toVector().toLocation(world);
      }
      if (netherHome == null) {
        event.setCancelled(true);
        return;
      }
      event.setTo(netherHome);
    }
 else {
      event.setTo(plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation());
    }
    event.useTravelAgent(true);
  }
 else {
    event.setTo(destination);
    event.useTravelAgent(false);
  }
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=false) public void onPlayerPortal(PlayerPortalEvent event){
  if (!Settings.createNether) {
    return;
  }
  if (event.isCancelled()) {
    return;
  }
  Location currentLocation=event.getFrom().clone();
  String currentWorld=currentLocation.getWorld().getName();
  if (!currentWorld.equalsIgnoreCase(Settings.worldName) && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"") && !currentWorld.equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    return;
  }
  if (!Settings.allowPortalUse && currentWorld.equalsIgnoreCase(Settings.worldName)) {
    if (!event.getPlayer().isOp() && !VaultHelper.checkPerm(event.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
      if (!plugin.getGrid().locationIsOnIsland(event.getPlayer(),event.getPlayer().getLocation()) && !plugin.getGrid().isAtSpawn(event.getPlayer().getLocation())) {
        event.getPlayer().sendMessage(ChatColor.RED + Locale.islandProtected);
        event.setCancelled(true);
        return;
      }
    }
  }
  Location destination=plugin.getGrid().getSafeHomeLocation(event.getPlayer().getUniqueId());
  if (destination == null) {
    event.getPlayer().sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + Settings.ISLANDCOMMAND+ ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (currentWorld.equalsIgnoreCase(Settings.worldName)) {
    if (plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"") != null) {
      if (event.getCause().equals(TeleportCause.END_PORTAL)) {
        event.setCancelled(true);
        Location end_place=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation();
        if (GridManager.isSafeLocation(end_place)) {
          event.getPlayer().teleport(end_place);
          return;
        }
 else {
          event.getPlayer().sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
          plugin.getGrid().homeTeleport(event.getPlayer());
          return;
        }
      }
    }
    UUID playerUUID=event.getPlayer().getUniqueId();
    World world=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"");
    if (Settings.newNether) {
      Location netherHome=null;
      if (plugin.getPlayers().inTeam(playerUUID)) {
        netherHome=plugin.getPlayers().getTeamIslandLocation(playerUUID).toVector().toLocation(world);
      }
 else {
        netherHome=plugin.getPlayers().getIslandLocation(playerUUID).toVector().toLocation(world);
      }
      if (netherHome == null) {
        event.setCancelled(true);
        return;
      }
      event.setTo(netherHome);
    }
 else {
      event.setTo(plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation());
    }
    event.useTravelAgent(true);
  }
 else {
    if (plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"") != null) {
      if (event.getCause().equals(TeleportCause.END_PORTAL)) {
        event.setCancelled(true);
        Location end_place=plugin.getServer().getWorld(Settings.worldName + ""String_Node_Str"").getSpawnLocation();
        if (GridManager.isSafeLocation(end_place)) {
          event.getPlayer().teleport(end_place);
          return;
        }
 else {
          event.getPlayer().sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
          plugin.getGrid().homeTeleport(event.getPlayer());
          return;
        }
      }
    }
    event.setTo(destination);
    event.useTravelAgent(false);
  }
}"
34071,"@EventHandler public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  ItemStack clicked=event.getCurrentItem();
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (inventory.getName().equalsIgnoreCase(""String_Node_Str"")) {
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    event.setCancelled(true);
    return;
  }
  if (inventory.getName().equals(Locale.challengesguiTitle)) {
    event.setCancelled(true);
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    List<CPItem> challenges=plugin.getChallenges().getCP(player);
    if (challenges == null) {
      plugin.getLogger().warning(""String_Node_Str"");
      player.closeInventory();
      player.performCommand(Settings.CHALLENGECOMMAND);
      return;
    }
    if (slot >= 0 && slot < challenges.size()) {
      CPItem item=challenges.get(slot);
      if (clicked.equals(item.getItem())) {
        if (item.getNextSection() != null) {
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player,item.getNextSection()));
        }
 else         if (item.getCommand() != null) {
          player.performCommand(item.getCommand());
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player));
        }
      }
    }
  }
  if (miniShop != null && inventory.getName().equals(miniShop.getName())) {
    String message=""String_Node_Str"";
    event.setCancelled(true);
    if (!Settings.useEconomy || slot == -999) {
      player.closeInventory();
      return;
    }
    if (store.containsKey(slot)) {
      MiniShopItem item=store.get(slot);
      if (clicked.equals(item.getItem())) {
        if (event.getClick().equals(ClickType.LEFT)) {
          if (item.getPrice() > 0D) {
            if (!VaultHelper.econ.has(player,Settings.worldName,item.getPrice())) {
              message=(Locale.minishopYouCannotAfford).replace(""String_Node_Str"",item.getDescription());
            }
 else {
              EconomyResponse r=VaultHelper.econ.withdrawPlayer(player,Settings.worldName,item.getPrice());
              if (r.transactionSuccess()) {
                message=Locale.minishopYouBought.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
                message=message.replace(""String_Node_Str"",item.getDescription());
                message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getPrice()));
                player.getInventory().addItem(item.getItemClean());
              }
 else {
                message=(Locale.minishopBuyProblem).replace(""String_Node_Str"",item.getDescription());
              }
            }
          }
        }
 else         if (event.getClick().equals(ClickType.RIGHT) && allowSelling && item.getSellPrice() > 0D) {
          if (player.getInventory().containsAtLeast(item.getItemClean(),item.getQuantity())) {
            player.getInventory().removeItem(item.getItemClean());
            VaultHelper.econ.depositPlayer(player,Settings.worldName,item.getSellPrice());
            message=Locale.minishopYouSold.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
            message=message.replace(""String_Node_Str"",item.getDescription());
            message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getSellPrice()));
          }
 else {
            message=(Locale.minishopSellProblem).replace(""String_Node_Str"",item.getDescription());
            ;
          }
        }
        if (!message.isEmpty()) {
          player.sendMessage(message);
        }
      }
    }
  }
  for (  String panelName : controlPanel.keySet()) {
    if (inventory.getName().equals(panelName)) {
      if (slot == -999) {
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
      HashMap<Integer,CPItem> thisPanel=panels.get(panelName);
      if (slot >= 0 && slot < thisPanel.size()) {
        String command=thisPanel.get(slot).getCommand();
        String nextSection=ChatColor.translateAlternateColorCodes('&',thisPanel.get(slot).getNextSection());
        if (!command.isEmpty()) {
          player.closeInventory();
          event.setCancelled(true);
          player.performCommand(command);
          return;
        }
        if (!nextSection.isEmpty()) {
          player.closeInventory();
          Inventory next=controlPanel.get(nextSection);
          if (next == null) {
          }
          player.openInventory(next);
          event.setCancelled(true);
          return;
        }
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
    }
  }
}","@EventHandler public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  ItemStack clicked=event.getCurrentItem();
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (inventory.getName().equalsIgnoreCase(Locale.igsTitle)) {
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    event.setCancelled(true);
    return;
  }
  if (inventory.getName().equals(Locale.challengesguiTitle)) {
    event.setCancelled(true);
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    List<CPItem> challenges=plugin.getChallenges().getCP(player);
    if (challenges == null) {
      plugin.getLogger().warning(""String_Node_Str"");
      player.closeInventory();
      player.performCommand(Settings.CHALLENGECOMMAND);
      return;
    }
    if (slot >= 0 && slot < challenges.size()) {
      CPItem item=challenges.get(slot);
      if (clicked.equals(item.getItem())) {
        if (item.getNextSection() != null) {
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player,item.getNextSection()));
        }
 else         if (item.getCommand() != null) {
          player.performCommand(item.getCommand());
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player));
        }
      }
    }
  }
  if (miniShop != null && inventory.getName().equals(miniShop.getName())) {
    String message=""String_Node_Str"";
    event.setCancelled(true);
    if (!Settings.useEconomy || slot == -999) {
      player.closeInventory();
      return;
    }
    if (store.containsKey(slot)) {
      MiniShopItem item=store.get(slot);
      if (clicked.equals(item.getItem())) {
        if (event.getClick().equals(ClickType.LEFT)) {
          if (item.getPrice() > 0D) {
            if (!VaultHelper.econ.has(player,Settings.worldName,item.getPrice())) {
              message=(Locale.minishopYouCannotAfford).replace(""String_Node_Str"",item.getDescription());
            }
 else {
              EconomyResponse r=VaultHelper.econ.withdrawPlayer(player,Settings.worldName,item.getPrice());
              if (r.transactionSuccess()) {
                message=Locale.minishopYouBought.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
                message=message.replace(""String_Node_Str"",item.getDescription());
                message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getPrice()));
                player.getInventory().addItem(item.getItemClean());
              }
 else {
                message=(Locale.minishopBuyProblem).replace(""String_Node_Str"",item.getDescription());
              }
            }
          }
        }
 else         if (event.getClick().equals(ClickType.RIGHT) && allowSelling && item.getSellPrice() > 0D) {
          if (player.getInventory().containsAtLeast(item.getItemClean(),item.getQuantity())) {
            player.getInventory().removeItem(item.getItemClean());
            VaultHelper.econ.depositPlayer(player,Settings.worldName,item.getSellPrice());
            message=Locale.minishopYouSold.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
            message=message.replace(""String_Node_Str"",item.getDescription());
            message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getSellPrice()));
          }
 else {
            message=(Locale.minishopSellProblem).replace(""String_Node_Str"",item.getDescription());
            ;
          }
        }
        if (!message.isEmpty()) {
          player.sendMessage(message);
        }
      }
    }
  }
  for (  String panelName : controlPanel.keySet()) {
    if (inventory.getName().equals(panelName)) {
      if (slot == -999) {
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
      HashMap<Integer,CPItem> thisPanel=panels.get(panelName);
      if (slot >= 0 && slot < thisPanel.size()) {
        String command=thisPanel.get(slot).getCommand();
        String nextSection=ChatColor.translateAlternateColorCodes('&',thisPanel.get(slot).getNextSection());
        if (!command.isEmpty()) {
          player.closeInventory();
          event.setCancelled(true);
          player.performCommand(command);
          return;
        }
        if (!nextSection.isEmpty()) {
          player.closeInventory();
          Inventory next=controlPanel.get(nextSection);
          if (next == null) {
          }
          player.openInventory(next);
          event.setCancelled(true);
          return;
        }
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
    }
  }
}"
34072,"@Override public void run(){
  List<Entity> entList=islandWorld.getEntities();
  for (  Entity current : entList) {
    if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
      if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
        ((Monster)current).damage(Settings.mobAcidDamage);
      }
    }
 else     if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
      if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
        if (!current.getType().equals(EntityType.CHICKEN)) {
          ((Animals)current).damage(Settings.animalAcidDamage);
        }
 else         if (Settings.damageChickens) {
          ((Animals)current).damage(Settings.animalAcidDamage);
        }
      }
    }
  }
}","@Override public void run(){
  if (Settings.GAMETYPE.equals(GameType.ASKYBLOCK)) {
    updateCheck=new Update(85189);
  }
 else {
    updateCheck=new Update(80095);
  }
  if (!updateCheck.isSuccess()) {
    updateCheck=null;
  }
}"
34073,"@Override public void onEnable(){
  plugin=this;
  saveDefaultConfig();
  Challenges.saveDefaultChallengeConfig();
  saveDefaultLocale();
  if (getConfig().getInt(""String_Node_Str"",-1) < 1) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
    return;
  }
  loadPluginConfig();
  if (Settings.updateCheck) {
    getServer().getScheduler().runTaskAsynchronously(this,new Runnable(){
      @Override public void run(){
        if (Settings.GAMETYPE.equals(GameType.ASKYBLOCK)) {
          updateCheck=new Update(85189);
        }
 else {
          updateCheck=new Update(80095);
        }
        if (!updateCheck.isSuccess()) {
          updateCheck=null;
        }
      }
    }
);
  }
  if (Settings.useEconomy && !VaultHelper.setupEconomy()) {
    getLogger().warning(""String_Node_Str"");
    Settings.useEconomy=false;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    getCommand(""String_Node_Str"").setExecutor(new IslandCmd(this));
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(new AdminCmd(this));
  }
 else {
    getCommand(""String_Node_Str"").setExecutor(new IslandCmd(this));
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(new AdminCmd(this));
  }
  Messages.loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      WarpSigns.loadWarpList();
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + plugin.getName());
        if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
 else {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
        return;
      }
      getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          grid=new GridManager(plugin);
          TopTen.topTenLoad();
          getLogger().info(""String_Node_Str"");
        }
      }
);
      final String pluginVersion=getDescription().getVersion();
      getServer().getScheduler().runTaskLater(plugin,new Runnable(){
        @Override public void run(){
          if (getUpdateCheck() != null) {
            String[] split=getUpdateCheck().getVersionName().split(""String_Node_Str"");
            if (split.length > 1 && !pluginVersion.equals(split[1])) {
              getLogger().warning(getUpdateCheck().getVersionName() + ""String_Node_Str"" + pluginVersion);
              if (Settings.GAMETYPE.equals(GameType.ASKYBLOCK)) {
                getLogger().warning(""String_Node_Str"");
              }
 else {
                getLogger().warning(""String_Node_Str"");
              }
            }
          }
        }
      }
,80L);
      if (Settings.mobAcidDamage > 0D || Settings.animalAcidDamage > 0D) {
        getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new Runnable(){
          @Override public void run(){
            List<Entity> entList=islandWorld.getEntities();
            for (            Entity current : entList) {
              if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  ((Monster)current).damage(Settings.mobAcidDamage);
                }
              }
 else               if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  if (!current.getType().equals(EntityType.CHICKEN)) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
 else                   if (Settings.damageChickens) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
                }
              }
            }
          }
        }
,0L,20L);
      }
    }
  }
);
}","@Override public void onEnable(){
  plugin=this;
  saveDefaultConfig();
  Challenges.saveDefaultChallengeConfig();
  saveDefaultLocale();
  if (getConfig().getInt(""String_Node_Str"",-1) < 1) {
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    getLogger().severe(""String_Node_Str"");
    if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
 else {
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
      getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.DISTANCE));
    }
    return;
  }
  loadPluginConfig();
  if (Settings.updateCheck) {
    checkUpdates();
  }
  if (Settings.useEconomy && !VaultHelper.setupEconomy()) {
    getLogger().warning(""String_Node_Str"");
    Settings.useEconomy=false;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    getCommand(""String_Node_Str"").setExecutor(new IslandCmd(this));
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(new AdminCmd(this));
  }
 else {
    getCommand(""String_Node_Str"").setExecutor(new IslandCmd(this));
    getCommand(""String_Node_Str"").setExecutor(getChallenges());
    getCommand(""String_Node_Str"").setExecutor(new AdminCmd(this));
  }
  Messages.loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      WarpSigns.loadWarpList();
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
        getLogger().severe(""String_Node_Str"" + plugin.getName());
        if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
 else {
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
          getCommand(""String_Node_Str"").setExecutor(new NotSetup(Reason.GENERATOR));
        }
        return;
      }
      getServer().getScheduler().runTask(plugin,new Runnable(){
        @Override public void run(){
          grid=new GridManager(plugin);
          TopTen.topTenLoad();
          getLogger().info(""String_Node_Str"");
        }
      }
);
      final String pluginVersion=getDescription().getVersion();
      getServer().getScheduler().runTaskLater(plugin,new Runnable(){
        @Override public void run(){
          if (getUpdateCheck() != null) {
            String[] split=getUpdateCheck().getVersionName().split(""String_Node_Str"");
            if (split.length > 1 && !pluginVersion.equals(split[1])) {
              getLogger().warning(getUpdateCheck().getVersionName() + ""String_Node_Str"" + pluginVersion);
              if (Settings.GAMETYPE.equals(GameType.ASKYBLOCK)) {
                getLogger().warning(""String_Node_Str"");
              }
 else {
                getLogger().warning(""String_Node_Str"");
              }
            }
          }
        }
      }
,80L);
      if (Settings.mobAcidDamage > 0D || Settings.animalAcidDamage > 0D) {
        getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new Runnable(){
          @Override public void run(){
            List<Entity> entList=islandWorld.getEntities();
            for (            Entity current : entList) {
              if ((current instanceof Monster) && Settings.mobAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  ((Monster)current).damage(Settings.mobAcidDamage);
                }
              }
 else               if ((current instanceof Animals) && Settings.animalAcidDamage > 0D) {
                if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
                  if (!current.getType().equals(EntityType.CHICKEN)) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
 else                   if (Settings.damageChickens) {
                    ((Animals)current).damage(Settings.animalAcidDamage);
                  }
                }
              }
            }
          }
        }
,0L,20L);
      }
    }
  }
);
}"
34074,"public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  Player player;
  if (sender instanceof Player) {
    player=(Player)sender;
    if (split.length > 0) {
      if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!checkAdminPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
 else {
        if (!checkModPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
    }
  }
switch (split.length) {
case 0:
    help(sender,label);
  return true;
case 1:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(""String_Node_Str"");
  TreeMap<Integer,List<UUID>> topEntityIslands=new TreeMap<Integer,List<UUID>>();
  sender.sendMessage(""String_Node_Str"" + plugin.getGrid().getOwnershipMap().size() + ""String_Node_Str"");
  for (  Island island : plugin.getGrid().getOwnershipMap().values()) {
    if (!island.isSpawn()) {
      Location islandLoc=new Location(island.getCenter().getWorld(),island.getCenter().getBlockX(),128,island.getCenter().getBlockZ());
      Entity snowball=islandLoc.getWorld().spawnEntity(islandLoc,EntityType.SNOWBALL);
      if (snowball == null) {
        sender.sendMessage(""String_Node_Str"" + island.getCenter().toString());
      }
 else {
        island.clearStats();
        List<Entity> islandEntities=snowball.getNearbyEntities(Settings.islandDistance / 2,128,Settings.islandDistance / 2);
        snowball.remove();
        if (islandEntities.size() > 2) {
          int numOfEntities=0;
          for (          Entity entity : islandEntities) {
            if (entity instanceof LivingEntity && !(entity instanceof Player)) {
              numOfEntities++;
              island.addEntity(entity.getType());
            }
          }
          List<UUID> players=new ArrayList<UUID>();
          if (topEntityIslands.containsKey(numOfEntities)) {
            players=topEntityIslands.get(numOfEntities);
          }
          players.add(island.getOwner());
          topEntityIslands.put(numOfEntities,players);
        }
      }
    }
  }
  int rank=1;
  for (  int numOfEntities : topEntityIslands.descendingKeySet()) {
    if (numOfEntities > 0) {
      List<UUID> owners=topEntityIslands.get(numOfEntities);
      for (      UUID owner : owners) {
        sender.sendMessage(""String_Node_Str"" + rank + ""String_Node_Str""+ plugin.getPlayers().getName(owner)+ ""String_Node_Str""+ numOfEntities);
        String content=""String_Node_Str"";
        for (        Entry<EntityType,Integer> entry : plugin.getGrid().getIsland(owner).getEntities().entrySet()) {
          int num=entry.getValue();
          String color=ChatColor.GREEN.toString();
          if (num > 10 && num <= 20) {
            color=ChatColor.YELLOW.toString();
          }
 else           if (num > 20 && num <= 40) {
            color=ChatColor.GOLD.toString();
          }
 else           if (num > 40) {
            color=ChatColor.RED.toString();
          }
          content+=Util.prettifyText(entry.getKey().toString()) + ""String_Node_Str"" + color+ entry.getValue()+ ChatColor.WHITE+ ""String_Node_Str"";
        }
        int lastComma=content.lastIndexOf(""String_Node_Str"");
        if (lastComma > 0) {
          content=content.substring(0,lastComma);
        }
        sender.sendMessage(""String_Node_Str"" + content);
      }
      rank++;
      if (rank > 10) {
        break;
      }
    }
  }
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player p=(Player)sender;
if (!p.getLocation().getWorld().getName().equals(Settings.worldName)) {
p.sendMessage(ChatColor.RED + Locale.errorWrongWorld);
return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
Island oldSpawn=plugin.getGrid().getSpawn();
Island newSpawn=plugin.getGrid().getIslandAt(closestIsland);
if (newSpawn != null && newSpawn.isSpawn()) {
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
return true;
}
if (newSpawn != null && newSpawn.getOwner() != null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(newSpawn.getOwner()));
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (oldSpawn != null) {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + oldSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ oldSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
plugin.getGrid().deleteSpawn();
}
if (newSpawn == null) {
newSpawn=plugin.getGrid().addIsland(closestIsland.getBlockX(),closestIsland.getBlockZ());
}
plugin.getGrid().setSpawn(newSpawn);
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + p.getLocation().getBlockX()+ ""String_Node_Str""+ p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinX()+ ""String_Node_Str""+ newSpawn.getMinZ()+ ""String_Node_Str""+ (newSpawn.getMinX() + newSpawn.getIslandDistance() - 1)+ ""String_Node_Str""+ (newSpawn.getMinZ() + newSpawn.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinProtectedX()+ ""String_Node_Str""+ newSpawn.getMinProtectedZ()+ ""String_Node_Str""+ (newSpawn.getMinProtectedX() + newSpawn.getProtectionSize() - 1)+ ""String_Node_Str""+ (newSpawn.getMinProtectedZ() + newSpawn.getProtectionSize() - 1));
if (newSpawn.isLocked()) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
if (closestIsland == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(closestIsland);
if (island != null && island.isSpawn()) {
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
if (target == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
showInfo(target,sender);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player p=(Player)sender;
BlockIterator iter=new BlockIterator(p,10);
Block lastBlock=iter.next();
while (iter.hasNext()) {
lastBlock=iter.next();
if (lastBlock.getType() == Material.AIR) continue;
break;
}
if (!lastBlock.getType().equals(Material.SIGN_POST)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Sign sign=(Sign)lastBlock.getState();
try {
if (!sign.getLine(0).equalsIgnoreCase(ChatColor.GREEN + Locale.warpswelcomeLine) && !sign.getLine(0).equalsIgnoreCase(ChatColor.RED + Locale.warpswelcomeLine)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
Location closestBedRock=getClosestIsland(((Player)sender).getLocation());
if (closestBedRock == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
if (target == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (WarpSigns.addWarp(target,lastBlock.getLocation())) {
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
return true;
}
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + WarpSigns.getWarpOwner(lastBlock.getLocation()));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
plugin.reloadConfig();
plugin.loadPluginConfig();
Challenges.reloadChallengeConfig();
plugin.getChallenges();
if (Settings.useEconomy && VaultHelper.setupEconomy()) {
ControlPanel.loadShop();
}
 else {
Settings.useEconomy=false;
}
ControlPanel.loadControlPanel();
sender.sendMessage(ChatColor.YELLOW + Locale.reloadconfigReloaded);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTengenerating);
TopTen.topTenCreate();
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTenfinished);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgeusage.replace(""String_Node_Str"",label));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!confirmReq) {
sender.sendMessage(ChatColor.RED + Locale.confirmerrorTimeLimitExpired);
return true;
}
 else {
confirmOK=true;
confirmReq=false;
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!split[1].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID owner=island.getOwner();
String name=""String_Node_Str"";
if (owner != null) {
name=plugin.getPlayers().getName(owner);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + name);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ name+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",name));
new DeleteIslandChunk(plugin,island.getCenter());
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=10;
int maxRange=Settings.islandDistance;
if (island.isSpawn()) {
try {
newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newRange);
if (newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ maxRange);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
}
 else {
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(island.getOwner(),sender);
}
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
purgeFlag=true;
final int time=Integer.parseInt(split[1]) * 24;
sender.sendMessage(ChatColor.YELLOW + Locale.purgecalculating.replace(""String_Node_Str"",split[1]));
plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
public void run(){
final File directoryPlayers=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
long offlineTime=0L;
for (final File playerFile : directoryPlayers.listFiles()) {
if (playerFile.getName().endsWith(""String_Node_Str"")) {
final UUID playerUUID=UUID.fromString(playerFile.getName().substring(0,playerFile.getName().length() - 4));
if (Bukkit.getPlayer(playerUUID) == null) {
  final OfflinePlayer oplayer=Bukkit.getOfflinePlayer(playerUUID);
  offlineTime=oplayer.getLastPlayed();
  offlineTime=(System.currentTimeMillis() - offlineTime) / 3600000L;
  if (offlineTime > time) {
    YamlConfiguration oldPlayer=new YamlConfiguration();
    try {
      oldPlayer.load(playerFile);
      if (oldPlayer.getBoolean(""String_Node_Str"",false)) {
        if (!oldPlayer.getBoolean(""String_Node_Str"",false)) {
          if (oldPlayer.getInt(""String_Node_Str"",0) < Settings.abandonedIslandLevel) {
            removeList.add(playerUUID);
          }
 else {
          }
        }
 else {
        }
      }
 else {
      }
    }
 catch (    Exception e) {
      plugin.getLogger().severe(""String_Node_Str"" + playerFile.getName() + ""String_Node_Str"");
    }
  }
}
}
}
if (removeList.isEmpty()) {
sender.sendMessage(ChatColor.YELLOW + Locale.purgenoneFound);
purgeFlag=false;
return;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgethisWillRemove.replace(""String_Node_Str"",String.valueOf(removeList.size())));
sender.sendMessage(ChatColor.RED + Locale.purgewarning);
sender.sendMessage(ChatColor.RED + Locale.purgetypeConfirm.replace(""String_Node_Str"",label));
confirmReq=true;
confirmOK=false;
confirmTimer=0;
new BukkitRunnable(){
@Override public void run(){
if (confirmTimer++ > 10) {
  confirmReq=false;
  confirmOK=false;
  purgeFlag=false;
  removeList.clear();
  sender.sendMessage(ChatColor.YELLOW + Locale.purgepurgeCancelled);
  this.cancel();
}
 else if (confirmOK) {
  final int total=removeList.size();
  new BukkitRunnable(){
    @Override public void run(){
      if (removeList.isEmpty() && purgeFlag) {
        purgeFlag=false;
        sender.sendMessage(ChatColor.YELLOW + Locale.purgefinished);
        this.cancel();
      }
      if (removeList.size() > 0 && purgeFlag) {
        plugin.deletePlayerIsland(removeList.get(0),true);
        sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + removeList.size()+ ""String_Node_Str""+ total+ ""String_Node_Str""+ Locale.purgeremovingName.replace(""String_Node_Str"",plugin.getPlayers().getName(removeList.get(0))));
        removeList.remove(0);
      }
      sender.sendMessage(""String_Node_Str"");
    }
  }
.runTaskTimer(plugin,0L,20L);
  confirmReq=false;
  confirmOK=false;
  this.cancel();
}
}
}
.runTaskTimer(plugin,0L,40L);
}
}
);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
plugin.getPlayers().setResetsLeft(playerUUID,Settings.resetLimit);
sender.sendMessage(ChatColor.YELLOW + Locale.clearedResetLimit + ""String_Node_Str""+ Settings.resetLimit+ ""String_Node_Str"");
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return true;
}
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
Location safeSpot=plugin.getGrid().getSafeHomeLocation(playerUUID);
if (safeSpot != null) {
((Player)sender).teleport(safeSpot);
}
 else {
sender.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
Location warpSpot=plugin.getPlayers().getIslandLocation(playerUUID);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpSpot.getBlockX()+ ""String_Node_Str""+ warpSpot.getBlockY()+ ""String_Node_Str""+ warpSpot.getBlockZ());
}
return true;
}
sender.sendMessage(Locale.errorNoIslandOther);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",split[1]));
Player target=plugin.getServer().getPlayer(playerUUID);
if (target != null) {
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
plugin.resetPlayer(target);
}
plugin.deletePlayerIsland(playerUUID,true);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (sender instanceof Player) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (adminSetPlayerIsland(sender,((Player)sender).getLocation(),playerUUID)) {
sender.sendMessage(ChatColor.GREEN + Locale.registersettingIsland.replace(""String_Node_Str"",split[1]));
}
 else {
sender.sendMessage(ChatColor.RED + Locale.registererrorBedrockNotFound);
}
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location island=plugin.getPlayers().getIslandLocation(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getIslandLocation(playerUUID).getBlockX()+ ""String_Node_Str""+ plugin.getPlayers().getIslandLocation(playerUUID).getBlockZ());
plugin.deletePlayerIsland(playerUUID,false);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfo(playerUUID,sender);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
plugin.getPlayers().resetAllChallenges(playerUUID);
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengessuccess.replace(""String_Node_Str"",split[1]));
return true;
}
 else {
return false;
}
case 3:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Island island=plugin.getGrid().getIsland(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=0;
int maxRange=Settings.islandDistance;
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[2]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(playerUUID,sender);
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Biome biome=null;
String biomeName=split[2].toUpperCase();
try {
biome=Biome.valueOf(biomeName);
biomeName=biome.name();
if (!plugin.getConfig().contains(""String_Node_Str"" + biomeName)) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
biomeName=plugin.getConfig().getString(""String_Node_Str"" + biomeName + ""String_Node_Str"",Util.prettifyText(biomeName));
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
plugin.getBiomes().setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
}
 else {
plugin.getBiomes().setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),biome);
}
sender.sendMessage(ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
if (targetPlayer != null) {
targetPlayer.sendMessage(""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
 else {
Messages.setMessage(playerUUID,""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorNoTeam);
return true;
}
UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
if (!teamLeader.equals(playerUUID)) {
plugin.getPlayers().setLeaveTeam(playerUUID);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().removeMember(teamLeader,playerUUID);
if (plugin.getPlayers().getMembers(teamLeader).size() < 2) {
plugin.getPlayers().setLeaveTeam(teamLeader);
}
WarpSigns.removeWarp(playerUUID);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[2]));
return true;
}
 else {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + label+ ""String_Node_Str""+ split[2]+ ""String_Node_Str"");
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.completeChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().get(playerUUID).completeChallenge(split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.completeChallengechallangeCompleted.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.resetChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().resetChallenge(playerUUID,split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengechallengeReset.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfoChallenges(playerUUID,sender);
return true;
}
}
return false;
case 4:
if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
final Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
final UUID teamLeader=plugin.getPlayers().getUUID(split[3]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID) || !plugin.getPlayers().isAKnownPlayer(teamLeader)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (playerUUID.equals(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (!plugin.getPlayers().hasIsland(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
return true;
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
plugin.getPlayers().setJoinTeam(teamLeader,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
targetPlayer.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
}
if (plugin.getPlayers().hasIsland(playerUUID)) {
Location islandLoc=plugin.getPlayers().getIslandLocation(playerUUID);
if (islandLoc != null) {
sender.sendMessage(ChatColor.RED + plugin.getPlayers().getName(playerUUID) + ""String_Node_Str""+ islandLoc.getBlockX()+ ""String_Node_Str""+ islandLoc.getBlockZ()+ ""String_Node_Str"");
}
}
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().setHasIsland(playerUUID,false);
plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
plugin.getGrid().homeTeleport(targetPlayer);
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
default :
return false;
}
}","public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  Player player;
  if (sender instanceof Player) {
    player=(Player)sender;
    if (split.length > 0) {
      if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!checkAdminPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
 else {
        if (!checkModPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
    }
  }
switch (split.length) {
case 0:
    help(sender,label);
  return true;
case 1:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(""String_Node_Str"");
  TreeMap<Integer,List<UUID>> topEntityIslands=new TreeMap<Integer,List<UUID>>();
  sender.sendMessage(""String_Node_Str"" + plugin.getGrid().getOwnershipMap().size() + ""String_Node_Str"");
  for (  Island island : plugin.getGrid().getOwnershipMap().values()) {
    if (!island.isSpawn()) {
      Location islandLoc=new Location(island.getCenter().getWorld(),island.getCenter().getBlockX(),128,island.getCenter().getBlockZ());
      Entity snowball=islandLoc.getWorld().spawnEntity(islandLoc,EntityType.SNOWBALL);
      if (snowball == null) {
        sender.sendMessage(""String_Node_Str"" + island.getCenter().toString());
      }
 else {
        island.clearStats();
        List<Entity> islandEntities=snowball.getNearbyEntities(Settings.islandDistance / 2,128,Settings.islandDistance / 2);
        snowball.remove();
        if (islandEntities.size() > 2) {
          int numOfEntities=0;
          for (          Entity entity : islandEntities) {
            if (entity instanceof LivingEntity && !(entity instanceof Player)) {
              numOfEntities++;
              island.addEntity(entity.getType());
            }
          }
          List<UUID> players=new ArrayList<UUID>();
          if (topEntityIslands.containsKey(numOfEntities)) {
            players=topEntityIslands.get(numOfEntities);
          }
          players.add(island.getOwner());
          topEntityIslands.put(numOfEntities,players);
        }
      }
    }
  }
  int rank=1;
  for (  int numOfEntities : topEntityIslands.descendingKeySet()) {
    if (numOfEntities > 0) {
      List<UUID> owners=topEntityIslands.get(numOfEntities);
      for (      UUID owner : owners) {
        sender.sendMessage(""String_Node_Str"" + rank + ""String_Node_Str""+ plugin.getPlayers().getName(owner)+ ""String_Node_Str""+ numOfEntities);
        String content=""String_Node_Str"";
        for (        Entry<EntityType,Integer> entry : plugin.getGrid().getIsland(owner).getEntities().entrySet()) {
          int num=entry.getValue();
          String color=ChatColor.GREEN.toString();
          if (num > 10 && num <= 20) {
            color=ChatColor.YELLOW.toString();
          }
 else           if (num > 20 && num <= 40) {
            color=ChatColor.GOLD.toString();
          }
 else           if (num > 40) {
            color=ChatColor.RED.toString();
          }
          content+=Util.prettifyText(entry.getKey().toString()) + ""String_Node_Str"" + color+ entry.getValue()+ ChatColor.WHITE+ ""String_Node_Str"";
        }
        int lastComma=content.lastIndexOf(""String_Node_Str"");
        if (lastComma > 0) {
          content=content.substring(0,lastComma);
        }
        sender.sendMessage(""String_Node_Str"" + content);
      }
      rank++;
      if (rank > 10) {
        break;
      }
    }
  }
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player p=(Player)sender;
if (!p.getLocation().getWorld().getName().equals(Settings.worldName)) {
p.sendMessage(ChatColor.RED + Locale.errorWrongWorld);
return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
Island oldSpawn=plugin.getGrid().getSpawn();
Island newSpawn=plugin.getGrid().getIslandAt(closestIsland);
if (newSpawn != null && newSpawn.isSpawn()) {
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
return true;
}
if (newSpawn != null && newSpawn.getOwner() != null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(newSpawn.getOwner()));
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (oldSpawn != null) {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + oldSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ oldSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
plugin.getGrid().deleteSpawn();
}
if (newSpawn == null) {
newSpawn=plugin.getGrid().addIsland(closestIsland.getBlockX(),closestIsland.getBlockZ());
}
plugin.getGrid().setSpawn(newSpawn);
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + p.getLocation().getBlockX()+ ""String_Node_Str""+ p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinX()+ ""String_Node_Str""+ newSpawn.getMinZ()+ ""String_Node_Str""+ (newSpawn.getMinX() + newSpawn.getIslandDistance() - 1)+ ""String_Node_Str""+ (newSpawn.getMinZ() + newSpawn.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinProtectedX()+ ""String_Node_Str""+ newSpawn.getMinProtectedZ()+ ""String_Node_Str""+ (newSpawn.getMinProtectedX() + newSpawn.getProtectionSize() - 1)+ ""String_Node_Str""+ (newSpawn.getMinProtectedZ() + newSpawn.getProtectionSize() - 1));
if (newSpawn.isLocked()) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
if (closestIsland == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(closestIsland);
if (island != null && island.isSpawn()) {
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
if (target == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
showInfo(target,sender);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player p=(Player)sender;
BlockIterator iter=new BlockIterator(p,10);
Block lastBlock=iter.next();
while (iter.hasNext()) {
lastBlock=iter.next();
if (lastBlock.getType() == Material.AIR) continue;
break;
}
if (!lastBlock.getType().equals(Material.SIGN_POST)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Sign sign=(Sign)lastBlock.getState();
try {
if (!sign.getLine(0).equalsIgnoreCase(ChatColor.GREEN + Locale.warpswelcomeLine) && !sign.getLine(0).equalsIgnoreCase(ChatColor.RED + Locale.warpswelcomeLine)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
Location closestBedRock=getClosestIsland(((Player)sender).getLocation());
if (closestBedRock == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
if (target == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (WarpSigns.addWarp(target,lastBlock.getLocation())) {
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
return true;
}
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + WarpSigns.getWarpOwner(lastBlock.getLocation()));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
plugin.reloadConfig();
plugin.loadPluginConfig();
Challenges.reloadChallengeConfig();
plugin.getChallenges();
if (Settings.useEconomy && VaultHelper.setupEconomy()) {
ControlPanel.loadShop();
}
 else {
Settings.useEconomy=false;
}
ControlPanel.loadControlPanel();
if (Settings.updateCheck) {
plugin.checkUpdates();
}
 else {
plugin.setUpdateCheck(null);
}
sender.sendMessage(ChatColor.YELLOW + Locale.reloadconfigReloaded);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTengenerating);
TopTen.topTenCreate();
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTenfinished);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgeusage.replace(""String_Node_Str"",label));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!confirmReq) {
sender.sendMessage(ChatColor.RED + Locale.confirmerrorTimeLimitExpired);
return true;
}
 else {
confirmOK=true;
confirmReq=false;
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!split[1].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID owner=island.getOwner();
String name=""String_Node_Str"";
if (owner != null) {
name=plugin.getPlayers().getName(owner);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + name);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ name+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",name));
new DeleteIslandChunk(plugin,island.getCenter());
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=10;
int maxRange=Settings.islandDistance;
if (island.isSpawn()) {
try {
newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newRange);
if (newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ maxRange);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
}
 else {
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(island.getOwner(),sender);
}
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
purgeFlag=true;
final int time=Integer.parseInt(split[1]) * 24;
sender.sendMessage(ChatColor.YELLOW + Locale.purgecalculating.replace(""String_Node_Str"",split[1]));
plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
public void run(){
final File directoryPlayers=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
long offlineTime=0L;
for (final File playerFile : directoryPlayers.listFiles()) {
if (playerFile.getName().endsWith(""String_Node_Str"")) {
final UUID playerUUID=UUID.fromString(playerFile.getName().substring(0,playerFile.getName().length() - 4));
if (Bukkit.getPlayer(playerUUID) == null) {
  final OfflinePlayer oplayer=Bukkit.getOfflinePlayer(playerUUID);
  offlineTime=oplayer.getLastPlayed();
  offlineTime=(System.currentTimeMillis() - offlineTime) / 3600000L;
  if (offlineTime > time) {
    YamlConfiguration oldPlayer=new YamlConfiguration();
    try {
      oldPlayer.load(playerFile);
      if (oldPlayer.getBoolean(""String_Node_Str"",false)) {
        if (!oldPlayer.getBoolean(""String_Node_Str"",false)) {
          if (oldPlayer.getInt(""String_Node_Str"",0) < Settings.abandonedIslandLevel) {
            removeList.add(playerUUID);
          }
 else {
          }
        }
 else {
        }
      }
 else {
      }
    }
 catch (    Exception e) {
      plugin.getLogger().severe(""String_Node_Str"" + playerFile.getName() + ""String_Node_Str"");
    }
  }
}
}
}
if (removeList.isEmpty()) {
sender.sendMessage(ChatColor.YELLOW + Locale.purgenoneFound);
purgeFlag=false;
return;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgethisWillRemove.replace(""String_Node_Str"",String.valueOf(removeList.size())));
sender.sendMessage(ChatColor.RED + Locale.purgewarning);
sender.sendMessage(ChatColor.RED + Locale.purgetypeConfirm.replace(""String_Node_Str"",label));
confirmReq=true;
confirmOK=false;
confirmTimer=0;
new BukkitRunnable(){
@Override public void run(){
if (confirmTimer++ > 10) {
  confirmReq=false;
  confirmOK=false;
  purgeFlag=false;
  removeList.clear();
  sender.sendMessage(ChatColor.YELLOW + Locale.purgepurgeCancelled);
  this.cancel();
}
 else if (confirmOK) {
  final int total=removeList.size();
  new BukkitRunnable(){
    @Override public void run(){
      if (removeList.isEmpty() && purgeFlag) {
        purgeFlag=false;
        sender.sendMessage(ChatColor.YELLOW + Locale.purgefinished);
        this.cancel();
      }
      if (removeList.size() > 0 && purgeFlag) {
        plugin.deletePlayerIsland(removeList.get(0),true);
        sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + removeList.size()+ ""String_Node_Str""+ total+ ""String_Node_Str""+ Locale.purgeremovingName.replace(""String_Node_Str"",plugin.getPlayers().getName(removeList.get(0))));
        removeList.remove(0);
      }
      sender.sendMessage(""String_Node_Str"");
    }
  }
.runTaskTimer(plugin,0L,20L);
  confirmReq=false;
  confirmOK=false;
  this.cancel();
}
}
}
.runTaskTimer(plugin,0L,40L);
}
}
);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
plugin.getPlayers().setResetsLeft(playerUUID,Settings.resetLimit);
sender.sendMessage(ChatColor.YELLOW + Locale.clearedResetLimit + ""String_Node_Str""+ Settings.resetLimit+ ""String_Node_Str"");
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return true;
}
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
Location safeSpot=plugin.getGrid().getSafeHomeLocation(playerUUID);
if (safeSpot != null) {
((Player)sender).teleport(safeSpot);
}
 else {
sender.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
Location warpSpot=plugin.getPlayers().getIslandLocation(playerUUID);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpSpot.getBlockX()+ ""String_Node_Str""+ warpSpot.getBlockY()+ ""String_Node_Str""+ warpSpot.getBlockZ());
}
return true;
}
sender.sendMessage(Locale.errorNoIslandOther);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",split[1]));
Player target=plugin.getServer().getPlayer(playerUUID);
if (target != null) {
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
plugin.resetPlayer(target);
}
plugin.deletePlayerIsland(playerUUID,true);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (sender instanceof Player) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (adminSetPlayerIsland(sender,((Player)sender).getLocation(),playerUUID)) {
sender.sendMessage(ChatColor.GREEN + Locale.registersettingIsland.replace(""String_Node_Str"",split[1]));
}
 else {
sender.sendMessage(ChatColor.RED + Locale.registererrorBedrockNotFound);
}
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location island=plugin.getPlayers().getIslandLocation(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getIslandLocation(playerUUID).getBlockX()+ ""String_Node_Str""+ plugin.getPlayers().getIslandLocation(playerUUID).getBlockZ());
plugin.deletePlayerIsland(playerUUID,false);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfo(playerUUID,sender);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
plugin.getPlayers().resetAllChallenges(playerUUID);
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengessuccess.replace(""String_Node_Str"",split[1]));
return true;
}
 else {
return false;
}
case 3:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Island island=plugin.getGrid().getIsland(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=0;
int maxRange=Settings.islandDistance;
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[2]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(playerUUID,sender);
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Biome biome=null;
String biomeName=split[2].toUpperCase();
try {
biome=Biome.valueOf(biomeName);
biomeName=biome.name();
if (!plugin.getConfig().contains(""String_Node_Str"" + biomeName)) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
biomeName=plugin.getConfig().getString(""String_Node_Str"" + biomeName + ""String_Node_Str"",Util.prettifyText(biomeName));
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
plugin.getBiomes().setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
}
 else {
plugin.getBiomes().setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),biome);
}
sender.sendMessage(ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
if (targetPlayer != null) {
targetPlayer.sendMessage(""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
 else {
Messages.setMessage(playerUUID,""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorNoTeam);
return true;
}
UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
if (!teamLeader.equals(playerUUID)) {
plugin.getPlayers().setLeaveTeam(playerUUID);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().removeMember(teamLeader,playerUUID);
if (plugin.getPlayers().getMembers(teamLeader).size() < 2) {
plugin.getPlayers().setLeaveTeam(teamLeader);
}
WarpSigns.removeWarp(playerUUID);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[2]));
return true;
}
 else {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + label+ ""String_Node_Str""+ split[2]+ ""String_Node_Str"");
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.completeChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().get(playerUUID).completeChallenge(split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.completeChallengechallangeCompleted.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.resetChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().resetChallenge(playerUUID,split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengechallengeReset.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfoChallenges(playerUUID,sender);
return true;
}
}
return false;
case 4:
if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
final Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
final UUID teamLeader=plugin.getPlayers().getUUID(split[3]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID) || !plugin.getPlayers().isAKnownPlayer(teamLeader)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (playerUUID.equals(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (!plugin.getPlayers().hasIsland(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
return true;
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
plugin.getPlayers().setJoinTeam(teamLeader,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
targetPlayer.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
}
if (plugin.getPlayers().hasIsland(playerUUID)) {
Location islandLoc=plugin.getPlayers().getIslandLocation(playerUUID);
if (islandLoc != null) {
sender.sendMessage(ChatColor.RED + plugin.getPlayers().getName(playerUUID) + ""String_Node_Str""+ islandLoc.getBlockX()+ ""String_Node_Str""+ islandLoc.getBlockZ()+ ""String_Node_Str"");
}
}
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().setHasIsland(playerUUID,false);
plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
plugin.getGrid().homeTeleport(targetPlayer);
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
default :
return false;
}
}"
34075,"/** 
 * This prevents breeding of animals off-island Adds a limit to how many animals can be bred by a player
 * @param e
 */
@EventHandler(priority=EventPriority.LOWEST) public void onPlayerHitEntity(PlayerInteractEntityEvent e){
  Player p=e.getPlayer();
  if (debug) {
    plugin.getLogger().info(""String_Node_Str"" + e.getEventName());
  }
  if (!p.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
    return;
  }
  if (plugin.getGrid().playerIsOnIsland(e.getPlayer())) {
    plugin.getLogger().info(""String_Node_Str"");
  }
 else {
switch (e.getRightClicked().getType()) {
case ITEM_FRAME:
case MINECART_CHEST:
case MINECART_FURNACE:
case MINECART_HOPPER:
case MINECART_TNT:
      if (!Settings.allowChestAccess) {
        e.getPlayer().sendMessage(ChatColor.RED + Locale.islandProtected);
        e.setCancelled(true);
      }
default :
    break;
}
}
}","/** 
 * This prevents breeding of animals off-island Adds a limit to how many animals can be bred by a player
 * @param e
 */
@EventHandler(priority=EventPriority.LOWEST) public void onPlayerHitEntity(PlayerInteractEntityEvent e){
  Player p=e.getPlayer();
  if (debug) {
    plugin.getLogger().info(""String_Node_Str"" + e.getEventName());
  }
  if (!p.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (p.isOp() || VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
    return;
  }
  if (!plugin.getGrid().playerIsOnIsland(e.getPlayer())) {
switch (e.getRightClicked().getType()) {
case ITEM_FRAME:
case MINECART_CHEST:
case MINECART_FURNACE:
case MINECART_HOPPER:
case MINECART_TNT:
      if (!Settings.allowChestAccess) {
        e.getPlayer().sendMessage(ChatColor.RED + Locale.islandProtected);
        e.setCancelled(true);
      }
default :
    break;
}
}
}"
34076,"/** 
 * @param event
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerJoin(final PlayerJoinEvent event){
  final String pluginVersion=plugin.getDescription().getVersion();
  if (plugin.getUpdateCheck() != null) {
    String[] split=plugin.getUpdateCheck().getVersionName().split(""String_Node_Str"");
    if (split.length > 1 && !pluginVersion.equals(split[1])) {
      event.getPlayer().sendMessage(ChatColor.RED + plugin.getUpdateCheck().getVersionName() + ""String_Node_Str""+ pluginVersion);
      if (Settings.GAMETYPE.equals(GameType.ASKYBLOCK)) {
        event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  final UUID playerUUID=event.getPlayer().getUniqueId();
  if (players == null) {
    plugin.getLogger().severe(""String_Node_Str"");
  }
  final List<String> messages=Messages.getMessages(playerUUID);
  if (messages != null) {
    plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
      @Override public void run(){
        event.getPlayer().sendMessage(ChatColor.AQUA + Locale.newsHeadline);
        int i=1;
        for (        String message : messages) {
          event.getPlayer().sendMessage(i++ + ""String_Node_Str"" + message);
        }
        Messages.clearMessages(playerUUID);
      }
    }
,40L);
  }
  if (!players.hasIsland(playerUUID) && !players.inTeam(playerUUID)) {
    return;
  }
  UUID leader=null;
  Location loc=null;
  if (players.inTeam(playerUUID) && players.getTeamIslandLocation(playerUUID) == null) {
    leader=players.getTeamLeader(playerUUID);
    players.setTeamIslandLocation(playerUUID,players.getIslandLocation(leader));
  }
  if (players.hasIsland(playerUUID)) {
    loc=players.getIslandLocation(playerUUID);
    leader=playerUUID;
  }
 else   if (players.inTeam(playerUUID)) {
    loc=players.getTeamIslandLocation(playerUUID);
    leader=players.getTeamLeader(playerUUID);
  }
  if (loc != null) {
    Island island=plugin.getGrid().getIsland(leader);
    if (island == null) {
      island=plugin.getGrid().getIslandAt(loc);
      if (island == null) {
        plugin.getGrid().addIsland(loc.getBlockX(),loc.getBlockZ(),leader);
      }
    }
 else {
      plugin.getGrid().setIslandOwner(island,leader);
    }
    if (Settings.loginLevel) {
      if (!plugin.isCalculatingLevel()) {
        plugin.setCalculatingLevel(true);
        LevelCalc levelCalc=new LevelCalc(plugin,playerUUID,event.getPlayer(),true);
        levelCalc.runTaskTimer(plugin,0L,10L);
      }
    }
  }
  players.setPlayerName(playerUUID,event.getPlayer().getName());
  players.save(playerUUID);
  if (Settings.logInRemoveMobs) {
    plugin.getGrid().removeMobs(event.getPlayer().getLocation());
  }
}","/** 
 * @param event
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerJoin(final PlayerJoinEvent event){
  final String pluginVersion=plugin.getDescription().getVersion();
  if (event.getPlayer().isOp() && plugin.getUpdateCheck() != null) {
    String[] split=plugin.getUpdateCheck().getVersionName().split(""String_Node_Str"");
    if (split.length > 1 && !pluginVersion.equals(split[1])) {
      event.getPlayer().sendMessage(ChatColor.RED + plugin.getUpdateCheck().getVersionName() + ""String_Node_Str""+ pluginVersion);
      if (Settings.GAMETYPE.equals(GameType.ASKYBLOCK)) {
        event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  final UUID playerUUID=event.getPlayer().getUniqueId();
  if (players == null) {
    plugin.getLogger().severe(""String_Node_Str"");
  }
  final List<String> messages=Messages.getMessages(playerUUID);
  if (messages != null) {
    plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
      @Override public void run(){
        event.getPlayer().sendMessage(ChatColor.AQUA + Locale.newsHeadline);
        int i=1;
        for (        String message : messages) {
          event.getPlayer().sendMessage(i++ + ""String_Node_Str"" + message);
        }
        Messages.clearMessages(playerUUID);
      }
    }
,40L);
  }
  if (!players.hasIsland(playerUUID) && !players.inTeam(playerUUID)) {
    return;
  }
  UUID leader=null;
  Location loc=null;
  if (players.inTeam(playerUUID) && players.getTeamIslandLocation(playerUUID) == null) {
    leader=players.getTeamLeader(playerUUID);
    players.setTeamIslandLocation(playerUUID,players.getIslandLocation(leader));
  }
  if (players.hasIsland(playerUUID)) {
    loc=players.getIslandLocation(playerUUID);
    leader=playerUUID;
  }
 else   if (players.inTeam(playerUUID)) {
    loc=players.getTeamIslandLocation(playerUUID);
    leader=players.getTeamLeader(playerUUID);
  }
  if (loc != null) {
    Island island=plugin.getGrid().getIsland(leader);
    if (island == null) {
      island=plugin.getGrid().getIslandAt(loc);
      if (island == null) {
        plugin.getGrid().addIsland(loc.getBlockX(),loc.getBlockZ(),leader);
      }
    }
 else {
      plugin.getGrid().setIslandOwner(island,leader);
    }
    if (Settings.loginLevel) {
      if (!plugin.isCalculatingLevel()) {
        plugin.setCalculatingLevel(true);
        LevelCalc levelCalc=new LevelCalc(plugin,playerUUID,event.getPlayer(),true);
        levelCalc.runTaskTimer(plugin,0L,10L);
      }
    }
  }
  players.setPlayerName(playerUUID,event.getPlayer().getName());
  players.save(playerUUID);
  if (Settings.logInRemoveMobs) {
    plugin.getGrid().removeMobs(event.getPlayer().getLocation());
  }
}"
34077,"public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  Player player;
  if (sender instanceof Player) {
    player=(Player)sender;
    if (split.length > 0) {
      if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!checkAdminPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
 else {
        if (!checkModPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
    }
  }
switch (split.length) {
case 0:
    help(sender,label);
  return true;
case 1:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(""String_Node_Str"");
  TreeMap<Integer,List<UUID>> topEntityIslands=new TreeMap<Integer,List<UUID>>();
  sender.sendMessage(""String_Node_Str"" + plugin.getGrid().getOwnershipMap().size() + ""String_Node_Str"");
  for (  Island island : plugin.getGrid().getOwnershipMap().values()) {
    if (!island.isSpawn()) {
      Location islandLoc=new Location(island.getCenter().getWorld(),island.getCenter().getBlockX(),128,island.getCenter().getBlockZ());
      Entity snowball=islandLoc.getWorld().spawnEntity(islandLoc,EntityType.SNOWBALL);
      if (snowball == null) {
        sender.sendMessage(""String_Node_Str"" + island.getCenter().toString());
      }
 else {
        island.clearStats();
        List<Entity> islandEntities=snowball.getNearbyEntities(Settings.islandDistance / 2,128,Settings.islandDistance / 2);
        snowball.remove();
        if (islandEntities.size() > 2) {
          int numOfEntities=0;
          for (          Entity entity : islandEntities) {
            if (entity instanceof LivingEntity && !(entity instanceof Player)) {
              numOfEntities++;
              island.addEntity(entity.getType());
            }
          }
          List<UUID> players=new ArrayList<UUID>();
          if (topEntityIslands.containsKey(numOfEntities)) {
            players=topEntityIslands.get(numOfEntities);
          }
          players.add(island.getOwner());
          topEntityIslands.put(numOfEntities,players);
        }
      }
    }
  }
  int rank=1;
  for (  int numOfEntities : topEntityIslands.descendingKeySet()) {
    if (numOfEntities > 0) {
      List<UUID> owners=topEntityIslands.get(numOfEntities);
      for (      UUID owner : owners) {
        sender.sendMessage(""String_Node_Str"" + rank + ""String_Node_Str""+ plugin.getPlayers().getName(owner)+ ""String_Node_Str""+ numOfEntities);
        String content=""String_Node_Str"";
        for (        Entry<EntityType,Integer> entry : plugin.getGrid().getIsland(owner).getEntities().entrySet()) {
          int num=entry.getValue();
          String color=ChatColor.GREEN.toString();
          if (num > 10 && num <= 20) {
            color=ChatColor.YELLOW.toString();
          }
 else           if (num > 20 && num <= 40) {
            color=ChatColor.GOLD.toString();
          }
 else           if (num > 40) {
            color=ChatColor.RED.toString();
          }
          content+=Util.prettifyText(entry.getKey().toString()) + ""String_Node_Str"" + color+ entry.getValue()+ ChatColor.WHITE+ ""String_Node_Str"";
        }
        int lastComma=content.lastIndexOf(""String_Node_Str"");
        if (lastComma > 0) {
          content=content.substring(0,lastComma);
        }
        sender.sendMessage(""String_Node_Str"" + content);
      }
      rank++;
      if (rank > 10) {
        break;
      }
    }
  }
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player p=(Player)sender;
if (!p.getLocation().getWorld().getName().equals(Settings.worldName)) {
p.sendMessage(ChatColor.RED + Locale.errorWrongWorld);
return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
Island oldSpawn=plugin.getGrid().getSpawn();
Island newSpawn=plugin.getGrid().getIslandAt(closestIsland);
if (newSpawn != null && newSpawn.isSpawn()) {
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
return true;
}
if (newSpawn != null) {
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
if (target != null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(target));
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return false;
}
}
if (oldSpawn != null) {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + oldSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ oldSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
plugin.getGrid().deleteSpawn();
}
newSpawn=plugin.getGrid().addIsland(closestIsland.getBlockX(),closestIsland.getBlockZ());
plugin.getGrid().setSpawn(newSpawn);
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + p.getLocation().getBlockX()+ ""String_Node_Str""+ p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinX()+ ""String_Node_Str""+ newSpawn.getMinZ()+ ""String_Node_Str""+ (newSpawn.getMinX() + newSpawn.getIslandDistance() - 1)+ ""String_Node_Str""+ (newSpawn.getMinZ() + newSpawn.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinProtectedX()+ ""String_Node_Str""+ newSpawn.getMinProtectedZ()+ ""String_Node_Str""+ (newSpawn.getMinProtectedX() + newSpawn.getProtectionSize() - 1)+ ""String_Node_Str""+ (newSpawn.getMinProtectedZ() + newSpawn.getProtectionSize() - 1));
if (newSpawn.isLocked()) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
if (closestIsland == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(closestIsland);
if (island != null && island.isSpawn()) {
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
if (target == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
showInfo(target,sender);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player p=(Player)sender;
BlockIterator iter=new BlockIterator(p,10);
Block lastBlock=iter.next();
while (iter.hasNext()) {
lastBlock=iter.next();
if (lastBlock.getType() == Material.AIR) continue;
break;
}
if (!lastBlock.getType().equals(Material.SIGN_POST)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Sign sign=(Sign)lastBlock.getState();
try {
if (!sign.getLine(0).equalsIgnoreCase(ChatColor.GREEN + Locale.warpswelcomeLine) && !sign.getLine(0).equalsIgnoreCase(ChatColor.RED + Locale.warpswelcomeLine)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
Location closestBedRock=getClosestIsland(((Player)sender).getLocation());
if (closestBedRock == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
if (target == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (WarpSigns.addWarp(target,lastBlock.getLocation())) {
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
return true;
}
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + WarpSigns.getWarpOwner(lastBlock.getLocation()));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
plugin.reloadConfig();
plugin.loadPluginConfig();
Challenges.reloadChallengeConfig();
plugin.getChallenges();
if (Settings.useEconomy && VaultHelper.setupEconomy()) {
ControlPanel.loadShop();
}
 else {
Settings.useEconomy=false;
}
ControlPanel.loadControlPanel();
sender.sendMessage(ChatColor.YELLOW + Locale.reloadconfigReloaded);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTengenerating);
TopTen.topTenCreate();
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTenfinished);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgeusage.replace(""String_Node_Str"",label));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!confirmReq) {
sender.sendMessage(ChatColor.RED + Locale.confirmerrorTimeLimitExpired);
return true;
}
 else {
confirmOK=true;
confirmReq=false;
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!split[1].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID owner=island.getOwner();
String name=""String_Node_Str"";
if (owner != null) {
name=plugin.getPlayers().getName(owner);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + name);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ name+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",name));
new DeleteIslandChunk(plugin,island.getCenter());
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=10;
int maxRange=Settings.islandDistance;
if (island.isSpawn()) {
try {
newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newRange);
if (newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ maxRange);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
}
 else {
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(island.getOwner(),sender);
}
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
purgeFlag=true;
final int time=Integer.parseInt(split[1]) * 24;
sender.sendMessage(ChatColor.YELLOW + Locale.purgecalculating.replace(""String_Node_Str"",split[1]));
plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
public void run(){
final File directoryPlayers=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
long offlineTime=0L;
for (final File playerFile : directoryPlayers.listFiles()) {
if (playerFile.getName().endsWith(""String_Node_Str"")) {
final UUID playerUUID=UUID.fromString(playerFile.getName().substring(0,playerFile.getName().length() - 4));
if (Bukkit.getPlayer(playerUUID) == null) {
  final OfflinePlayer oplayer=Bukkit.getOfflinePlayer(playerUUID);
  offlineTime=oplayer.getLastPlayed();
  offlineTime=(System.currentTimeMillis() - offlineTime) / 3600000L;
  if (offlineTime > time) {
    YamlConfiguration oldPlayer=new YamlConfiguration();
    try {
      oldPlayer.load(playerFile);
      if (oldPlayer.getBoolean(""String_Node_Str"",false)) {
        if (!oldPlayer.getBoolean(""String_Node_Str"",false)) {
          if (oldPlayer.getInt(""String_Node_Str"",0) < Settings.abandonedIslandLevel) {
            removeList.add(playerUUID);
          }
 else {
          }
        }
 else {
        }
      }
 else {
      }
    }
 catch (    Exception e) {
      plugin.getLogger().severe(""String_Node_Str"" + playerFile.getName() + ""String_Node_Str"");
    }
  }
}
}
}
if (removeList.isEmpty()) {
sender.sendMessage(ChatColor.YELLOW + Locale.purgenoneFound);
purgeFlag=false;
return;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgethisWillRemove.replace(""String_Node_Str"",String.valueOf(removeList.size())));
sender.sendMessage(ChatColor.RED + Locale.purgewarning);
sender.sendMessage(ChatColor.RED + Locale.purgetypeConfirm.replace(""String_Node_Str"",label));
confirmReq=true;
confirmOK=false;
confirmTimer=0;
new BukkitRunnable(){
@Override public void run(){
if (confirmTimer++ > 10) {
  confirmReq=false;
  confirmOK=false;
  purgeFlag=false;
  removeList.clear();
  sender.sendMessage(ChatColor.YELLOW + Locale.purgepurgeCancelled);
  this.cancel();
}
 else if (confirmOK) {
  final int total=removeList.size();
  new BukkitRunnable(){
    @Override public void run(){
      if (removeList.isEmpty() && purgeFlag) {
        purgeFlag=false;
        sender.sendMessage(ChatColor.YELLOW + Locale.purgefinished);
        this.cancel();
      }
      if (removeList.size() > 0 && purgeFlag) {
        plugin.deletePlayerIsland(removeList.get(0),true);
        sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + removeList.size()+ ""String_Node_Str""+ total+ ""String_Node_Str""+ Locale.purgeremovingName.replace(""String_Node_Str"",plugin.getPlayers().getName(removeList.get(0))));
        removeList.remove(0);
      }
      sender.sendMessage(""String_Node_Str"");
    }
  }
.runTaskTimer(plugin,0L,20L);
  confirmReq=false;
  confirmOK=false;
  this.cancel();
}
}
}
.runTaskTimer(plugin,0L,40L);
}
}
);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
plugin.getPlayers().setResetsLeft(playerUUID,Settings.resetLimit);
sender.sendMessage(ChatColor.YELLOW + Locale.clearedResetLimit + ""String_Node_Str""+ Settings.resetLimit+ ""String_Node_Str"");
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return true;
}
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
Location safeSpot=plugin.getGrid().getSafeHomeLocation(playerUUID);
if (safeSpot != null) {
((Player)sender).teleport(safeSpot);
}
 else {
sender.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
Location warpSpot=plugin.getPlayers().getIslandLocation(playerUUID);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpSpot.getBlockX()+ ""String_Node_Str""+ warpSpot.getBlockY()+ ""String_Node_Str""+ warpSpot.getBlockZ());
}
return true;
}
sender.sendMessage(Locale.errorNoIslandOther);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",split[1]));
Player target=plugin.getServer().getPlayer(playerUUID);
if (target != null) {
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
plugin.resetPlayer(target);
}
plugin.deletePlayerIsland(playerUUID,true);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (sender instanceof Player) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (adminSetPlayerIsland(sender,((Player)sender).getLocation(),playerUUID)) {
sender.sendMessage(ChatColor.GREEN + Locale.registersettingIsland.replace(""String_Node_Str"",split[1]));
}
 else {
sender.sendMessage(ChatColor.RED + Locale.registererrorBedrockNotFound);
}
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location island=plugin.getPlayers().getIslandLocation(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getIslandLocation(playerUUID).getBlockX()+ ""String_Node_Str""+ plugin.getPlayers().getIslandLocation(playerUUID).getBlockZ());
plugin.deletePlayerIsland(playerUUID,false);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfo(playerUUID,sender);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
plugin.getPlayers().resetAllChallenges(playerUUID);
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengessuccess.replace(""String_Node_Str"",split[1]));
return true;
}
 else {
return false;
}
case 3:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Island island=plugin.getGrid().getIsland(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=0;
int maxRange=Settings.islandDistance;
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[2]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(playerUUID,sender);
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Biome biome=null;
String biomeName=split[2].toUpperCase();
try {
biome=Biome.valueOf(biomeName);
biomeName=biome.name();
if (!plugin.getConfig().contains(""String_Node_Str"" + biomeName)) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
biomeName=plugin.getConfig().getString(""String_Node_Str"" + biomeName + ""String_Node_Str"",Util.prettifyText(biomeName));
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
plugin.getBiomes().setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
}
 else {
plugin.getBiomes().setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),biome);
}
sender.sendMessage(ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
if (targetPlayer != null) {
targetPlayer.sendMessage(""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
 else {
Messages.setMessage(playerUUID,""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorNoTeam);
return true;
}
UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
if (!teamLeader.equals(playerUUID)) {
plugin.getPlayers().setLeaveTeam(playerUUID);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().removeMember(teamLeader,playerUUID);
if (plugin.getPlayers().getMembers(teamLeader).size() < 2) {
plugin.getPlayers().setLeaveTeam(teamLeader);
}
WarpSigns.removeWarp(playerUUID);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[2]));
return true;
}
 else {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + label+ ""String_Node_Str""+ split[2]+ ""String_Node_Str"");
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.completeChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().get(playerUUID).completeChallenge(split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.completeChallengechallangeCompleted.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.resetChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().resetChallenge(playerUUID,split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengechallengeReset.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfoChallenges(playerUUID,sender);
return true;
}
}
return false;
case 4:
if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
final Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
final UUID teamLeader=plugin.getPlayers().getUUID(split[3]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID) || !plugin.getPlayers().isAKnownPlayer(teamLeader)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (playerUUID.equals(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (!plugin.getPlayers().hasIsland(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
return true;
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
plugin.getPlayers().setJoinTeam(teamLeader,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
targetPlayer.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
}
if (plugin.getPlayers().hasIsland(playerUUID)) {
Location islandLoc=plugin.getPlayers().getIslandLocation(playerUUID);
if (islandLoc != null) {
sender.sendMessage(ChatColor.RED + plugin.getPlayers().getName(playerUUID) + ""String_Node_Str""+ islandLoc.getBlockX()+ ""String_Node_Str""+ islandLoc.getBlockZ()+ ""String_Node_Str"");
}
}
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().setHasIsland(playerUUID,false);
plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
plugin.getGrid().homeTeleport(targetPlayer);
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
default :
return false;
}
}","public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  Player player;
  if (sender instanceof Player) {
    player=(Player)sender;
    if (split.length > 0) {
      if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!checkAdminPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
 else {
        if (!checkModPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
    }
  }
switch (split.length) {
case 0:
    help(sender,label);
  return true;
case 1:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(""String_Node_Str"");
  TreeMap<Integer,List<UUID>> topEntityIslands=new TreeMap<Integer,List<UUID>>();
  sender.sendMessage(""String_Node_Str"" + plugin.getGrid().getOwnershipMap().size() + ""String_Node_Str"");
  for (  Island island : plugin.getGrid().getOwnershipMap().values()) {
    if (!island.isSpawn()) {
      Location islandLoc=new Location(island.getCenter().getWorld(),island.getCenter().getBlockX(),128,island.getCenter().getBlockZ());
      Entity snowball=islandLoc.getWorld().spawnEntity(islandLoc,EntityType.SNOWBALL);
      if (snowball == null) {
        sender.sendMessage(""String_Node_Str"" + island.getCenter().toString());
      }
 else {
        island.clearStats();
        List<Entity> islandEntities=snowball.getNearbyEntities(Settings.islandDistance / 2,128,Settings.islandDistance / 2);
        snowball.remove();
        if (islandEntities.size() > 2) {
          int numOfEntities=0;
          for (          Entity entity : islandEntities) {
            if (entity instanceof LivingEntity && !(entity instanceof Player)) {
              numOfEntities++;
              island.addEntity(entity.getType());
            }
          }
          List<UUID> players=new ArrayList<UUID>();
          if (topEntityIslands.containsKey(numOfEntities)) {
            players=topEntityIslands.get(numOfEntities);
          }
          players.add(island.getOwner());
          topEntityIslands.put(numOfEntities,players);
        }
      }
    }
  }
  int rank=1;
  for (  int numOfEntities : topEntityIslands.descendingKeySet()) {
    if (numOfEntities > 0) {
      List<UUID> owners=topEntityIslands.get(numOfEntities);
      for (      UUID owner : owners) {
        sender.sendMessage(""String_Node_Str"" + rank + ""String_Node_Str""+ plugin.getPlayers().getName(owner)+ ""String_Node_Str""+ numOfEntities);
        String content=""String_Node_Str"";
        for (        Entry<EntityType,Integer> entry : plugin.getGrid().getIsland(owner).getEntities().entrySet()) {
          int num=entry.getValue();
          String color=ChatColor.GREEN.toString();
          if (num > 10 && num <= 20) {
            color=ChatColor.YELLOW.toString();
          }
 else           if (num > 20 && num <= 40) {
            color=ChatColor.GOLD.toString();
          }
 else           if (num > 40) {
            color=ChatColor.RED.toString();
          }
          content+=Util.prettifyText(entry.getKey().toString()) + ""String_Node_Str"" + color+ entry.getValue()+ ChatColor.WHITE+ ""String_Node_Str"";
        }
        int lastComma=content.lastIndexOf(""String_Node_Str"");
        if (lastComma > 0) {
          content=content.substring(0,lastComma);
        }
        sender.sendMessage(""String_Node_Str"" + content);
      }
      rank++;
      if (rank > 10) {
        break;
      }
    }
  }
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player p=(Player)sender;
if (!p.getLocation().getWorld().getName().equals(Settings.worldName)) {
p.sendMessage(ChatColor.RED + Locale.errorWrongWorld);
return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
Island oldSpawn=plugin.getGrid().getSpawn();
Island newSpawn=plugin.getGrid().getIslandAt(closestIsland);
if (newSpawn != null && newSpawn.isSpawn()) {
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
return true;
}
if (newSpawn != null && newSpawn.getOwner() != null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(newSpawn.getOwner()));
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (oldSpawn != null) {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + oldSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ oldSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
plugin.getGrid().deleteSpawn();
}
if (newSpawn == null) {
newSpawn=plugin.getGrid().addIsland(closestIsland.getBlockX(),closestIsland.getBlockZ());
}
plugin.getGrid().setSpawn(newSpawn);
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + p.getLocation().getBlockX()+ ""String_Node_Str""+ p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinX()+ ""String_Node_Str""+ newSpawn.getMinZ()+ ""String_Node_Str""+ (newSpawn.getMinX() + newSpawn.getIslandDistance() - 1)+ ""String_Node_Str""+ (newSpawn.getMinZ() + newSpawn.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinProtectedX()+ ""String_Node_Str""+ newSpawn.getMinProtectedZ()+ ""String_Node_Str""+ (newSpawn.getMinProtectedX() + newSpawn.getProtectionSize() - 1)+ ""String_Node_Str""+ (newSpawn.getMinProtectedZ() + newSpawn.getProtectionSize() - 1));
if (newSpawn.isLocked()) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
if (closestIsland == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(closestIsland);
if (island != null && island.isSpawn()) {
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
if (target == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
showInfo(target,sender);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player p=(Player)sender;
BlockIterator iter=new BlockIterator(p,10);
Block lastBlock=iter.next();
while (iter.hasNext()) {
lastBlock=iter.next();
if (lastBlock.getType() == Material.AIR) continue;
break;
}
if (!lastBlock.getType().equals(Material.SIGN_POST)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Sign sign=(Sign)lastBlock.getState();
try {
if (!sign.getLine(0).equalsIgnoreCase(ChatColor.GREEN + Locale.warpswelcomeLine) && !sign.getLine(0).equalsIgnoreCase(ChatColor.RED + Locale.warpswelcomeLine)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
Location closestBedRock=getClosestIsland(((Player)sender).getLocation());
if (closestBedRock == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
if (target == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (WarpSigns.addWarp(target,lastBlock.getLocation())) {
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
return true;
}
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + WarpSigns.getWarpOwner(lastBlock.getLocation()));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
plugin.reloadConfig();
plugin.loadPluginConfig();
Challenges.reloadChallengeConfig();
plugin.getChallenges();
if (Settings.useEconomy && VaultHelper.setupEconomy()) {
ControlPanel.loadShop();
}
 else {
Settings.useEconomy=false;
}
ControlPanel.loadControlPanel();
sender.sendMessage(ChatColor.YELLOW + Locale.reloadconfigReloaded);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTengenerating);
TopTen.topTenCreate();
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTenfinished);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgeusage.replace(""String_Node_Str"",label));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!confirmReq) {
sender.sendMessage(ChatColor.RED + Locale.confirmerrorTimeLimitExpired);
return true;
}
 else {
confirmOK=true;
confirmReq=false;
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!split[1].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID owner=island.getOwner();
String name=""String_Node_Str"";
if (owner != null) {
name=plugin.getPlayers().getName(owner);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + name);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ name+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",name));
new DeleteIslandChunk(plugin,island.getCenter());
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=10;
int maxRange=Settings.islandDistance;
if (island.isSpawn()) {
try {
newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newRange);
if (newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ maxRange);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
}
 else {
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(island.getOwner(),sender);
}
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
purgeFlag=true;
final int time=Integer.parseInt(split[1]) * 24;
sender.sendMessage(ChatColor.YELLOW + Locale.purgecalculating.replace(""String_Node_Str"",split[1]));
plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
public void run(){
final File directoryPlayers=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
long offlineTime=0L;
for (final File playerFile : directoryPlayers.listFiles()) {
if (playerFile.getName().endsWith(""String_Node_Str"")) {
final UUID playerUUID=UUID.fromString(playerFile.getName().substring(0,playerFile.getName().length() - 4));
if (Bukkit.getPlayer(playerUUID) == null) {
  final OfflinePlayer oplayer=Bukkit.getOfflinePlayer(playerUUID);
  offlineTime=oplayer.getLastPlayed();
  offlineTime=(System.currentTimeMillis() - offlineTime) / 3600000L;
  if (offlineTime > time) {
    YamlConfiguration oldPlayer=new YamlConfiguration();
    try {
      oldPlayer.load(playerFile);
      if (oldPlayer.getBoolean(""String_Node_Str"",false)) {
        if (!oldPlayer.getBoolean(""String_Node_Str"",false)) {
          if (oldPlayer.getInt(""String_Node_Str"",0) < Settings.abandonedIslandLevel) {
            removeList.add(playerUUID);
          }
 else {
          }
        }
 else {
        }
      }
 else {
      }
    }
 catch (    Exception e) {
      plugin.getLogger().severe(""String_Node_Str"" + playerFile.getName() + ""String_Node_Str"");
    }
  }
}
}
}
if (removeList.isEmpty()) {
sender.sendMessage(ChatColor.YELLOW + Locale.purgenoneFound);
purgeFlag=false;
return;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgethisWillRemove.replace(""String_Node_Str"",String.valueOf(removeList.size())));
sender.sendMessage(ChatColor.RED + Locale.purgewarning);
sender.sendMessage(ChatColor.RED + Locale.purgetypeConfirm.replace(""String_Node_Str"",label));
confirmReq=true;
confirmOK=false;
confirmTimer=0;
new BukkitRunnable(){
@Override public void run(){
if (confirmTimer++ > 10) {
  confirmReq=false;
  confirmOK=false;
  purgeFlag=false;
  removeList.clear();
  sender.sendMessage(ChatColor.YELLOW + Locale.purgepurgeCancelled);
  this.cancel();
}
 else if (confirmOK) {
  final int total=removeList.size();
  new BukkitRunnable(){
    @Override public void run(){
      if (removeList.isEmpty() && purgeFlag) {
        purgeFlag=false;
        sender.sendMessage(ChatColor.YELLOW + Locale.purgefinished);
        this.cancel();
      }
      if (removeList.size() > 0 && purgeFlag) {
        plugin.deletePlayerIsland(removeList.get(0),true);
        sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + removeList.size()+ ""String_Node_Str""+ total+ ""String_Node_Str""+ Locale.purgeremovingName.replace(""String_Node_Str"",plugin.getPlayers().getName(removeList.get(0))));
        removeList.remove(0);
      }
      sender.sendMessage(""String_Node_Str"");
    }
  }
.runTaskTimer(plugin,0L,20L);
  confirmReq=false;
  confirmOK=false;
  this.cancel();
}
}
}
.runTaskTimer(plugin,0L,40L);
}
}
);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
plugin.getPlayers().setResetsLeft(playerUUID,Settings.resetLimit);
sender.sendMessage(ChatColor.YELLOW + Locale.clearedResetLimit + ""String_Node_Str""+ Settings.resetLimit+ ""String_Node_Str"");
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return true;
}
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
Location safeSpot=plugin.getGrid().getSafeHomeLocation(playerUUID);
if (safeSpot != null) {
((Player)sender).teleport(safeSpot);
}
 else {
sender.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
Location warpSpot=plugin.getPlayers().getIslandLocation(playerUUID);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpSpot.getBlockX()+ ""String_Node_Str""+ warpSpot.getBlockY()+ ""String_Node_Str""+ warpSpot.getBlockZ());
}
return true;
}
sender.sendMessage(Locale.errorNoIslandOther);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",split[1]));
Player target=plugin.getServer().getPlayer(playerUUID);
if (target != null) {
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
plugin.resetPlayer(target);
}
plugin.deletePlayerIsland(playerUUID,true);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (sender instanceof Player) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (adminSetPlayerIsland(sender,((Player)sender).getLocation(),playerUUID)) {
sender.sendMessage(ChatColor.GREEN + Locale.registersettingIsland.replace(""String_Node_Str"",split[1]));
}
 else {
sender.sendMessage(ChatColor.RED + Locale.registererrorBedrockNotFound);
}
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location island=plugin.getPlayers().getIslandLocation(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getIslandLocation(playerUUID).getBlockX()+ ""String_Node_Str""+ plugin.getPlayers().getIslandLocation(playerUUID).getBlockZ());
plugin.deletePlayerIsland(playerUUID,false);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfo(playerUUID,sender);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
plugin.getPlayers().resetAllChallenges(playerUUID);
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengessuccess.replace(""String_Node_Str"",split[1]));
return true;
}
 else {
return false;
}
case 3:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Island island=plugin.getGrid().getIsland(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=0;
int maxRange=Settings.islandDistance;
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[2]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(playerUUID,sender);
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Biome biome=null;
String biomeName=split[2].toUpperCase();
try {
biome=Biome.valueOf(biomeName);
biomeName=biome.name();
if (!plugin.getConfig().contains(""String_Node_Str"" + biomeName)) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
biomeName=plugin.getConfig().getString(""String_Node_Str"" + biomeName + ""String_Node_Str"",Util.prettifyText(biomeName));
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
plugin.getBiomes().setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
}
 else {
plugin.getBiomes().setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),biome);
}
sender.sendMessage(ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
if (targetPlayer != null) {
targetPlayer.sendMessage(""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
 else {
Messages.setMessage(playerUUID,""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorNoTeam);
return true;
}
UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
if (!teamLeader.equals(playerUUID)) {
plugin.getPlayers().setLeaveTeam(playerUUID);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().removeMember(teamLeader,playerUUID);
if (plugin.getPlayers().getMembers(teamLeader).size() < 2) {
plugin.getPlayers().setLeaveTeam(teamLeader);
}
WarpSigns.removeWarp(playerUUID);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[2]));
return true;
}
 else {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + label+ ""String_Node_Str""+ split[2]+ ""String_Node_Str"");
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.completeChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().get(playerUUID).completeChallenge(split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.completeChallengechallangeCompleted.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.resetChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().resetChallenge(playerUUID,split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengechallengeReset.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfoChallenges(playerUUID,sender);
return true;
}
}
return false;
case 4:
if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
final Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
final UUID teamLeader=plugin.getPlayers().getUUID(split[3]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID) || !plugin.getPlayers().isAKnownPlayer(teamLeader)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (playerUUID.equals(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (!plugin.getPlayers().hasIsland(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
return true;
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
plugin.getPlayers().setJoinTeam(teamLeader,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
targetPlayer.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
}
if (plugin.getPlayers().hasIsland(playerUUID)) {
Location islandLoc=plugin.getPlayers().getIslandLocation(playerUUID);
if (islandLoc != null) {
sender.sendMessage(ChatColor.RED + plugin.getPlayers().getName(playerUUID) + ""String_Node_Str""+ islandLoc.getBlockX()+ ""String_Node_Str""+ islandLoc.getBlockZ()+ ""String_Node_Str"");
}
}
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().setHasIsland(playerUUID,false);
plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
plugin.getGrid().homeTeleport(targetPlayer);
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
default :
return false;
}
}"
34078,"/** 
 * Enables changing of obsidian back into lava
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteract(final PlayerInteractEvent e){
  if (plugin.playerIsOnIsland(e.getPlayer())) {
    boolean otherOb=false;
    if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK) && e.getPlayer().getItemInHand().getType().equals(Material.BUCKET) && e.getClickedBlock().getType().equals(Material.OBSIDIAN)) {
      Block b=e.getClickedBlock();
      for (int x=-2; x <= 2; x++) {
        for (int y=-2; y <= 2; y++) {
          for (int z=-2; z <= 2; z++) {
            final Block testBlock=b.getWorld().getBlockAt(b.getX() + x,b.getY() + y,b.getZ() + z);
            if ((x != 0 || y != 0 || z != 0) && testBlock.getType().equals(Material.OBSIDIAN)) {
              otherOb=true;
            }
          }
        }
      }
      if (!otherOb) {
        e.getPlayer().sendMessage(ChatColor.YELLOW + Locale.changingObsidiantoLava);
        e.getPlayer().getInventory().removeItem(new ItemStack(Material.BUCKET,1));
        e.getPlayer().getInventory().addItem(new ItemStack(Material.LAVA_BUCKET,1));
        e.getPlayer().updateInventory();
        e.getClickedBlock().setType(Material.AIR);
      }
    }
  }
}","/** 
 * Enables changing of obsidian back into lava
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteract(final PlayerInteractEvent e){
  if (plugin.playerIsOnIsland(e.getPlayer())) {
    boolean otherOb=false;
    if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK) && e.getPlayer().getItemInHand().getType().equals(Material.BUCKET) && e.getClickedBlock().getType().equals(Material.OBSIDIAN)) {
      Block b=e.getClickedBlock();
      for (int x=-2; x <= 2; x++) {
        for (int y=-2; y <= 2; y++) {
          for (int z=-2; z <= 2; z++) {
            final Block testBlock=b.getWorld().getBlockAt(b.getX() + x,b.getY() + y,b.getZ() + z);
            if ((x != 0 || y != 0 || z != 0) && testBlock.getType().equals(Material.OBSIDIAN)) {
              otherOb=true;
            }
          }
        }
      }
      if (!otherOb) {
        e.getPlayer().sendMessage(ChatColor.YELLOW + Locale.changingObsidiantoLava);
        e.getPlayer().getInventory().setItemInHand(null);
        e.getPlayer().getInventory().addItem(new ItemStack(Material.LAVA_BUCKET,1));
        e.getPlayer().updateInventory();
        e.getClickedBlock().setType(Material.AIR);
        e.setCancelled(true);
      }
    }
  }
}"
34079,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent e){
  final Player player=e.getPlayer();
  if (player.isDead()) {
    return;
  }
  if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (player.isOp() && !Settings.damageOps) {
    return;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE)) {
    return;
  }
  final Location playerLoc=player.getLocation();
  final Block block=playerLoc.getBlock();
  if (Settings.rainDamage > 0D && isRaining) {
    boolean hitByRain=true;
    for (int y=playerLoc.getBlockY() + 2; y < playerLoc.getWorld().getMaxHeight(); y++) {
      if (!playerLoc.getWorld().getBlockAt(playerLoc.getBlockX(),y,playerLoc.getBlockZ()).getType().equals(Material.AIR)) {
        hitByRain=false;
        break;
      }
    }
    if (!hitByRain) {
      wetPlayers.remove(player);
    }
 else {
      boolean acidPotion=false;
      Collection<PotionEffect> activePotions=player.getActivePotionEffects();
      for (      PotionEffect s : activePotions) {
        if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
          acidPotion=true;
        }
      }
      if (acidPotion) {
        wetPlayers.remove(player);
      }
 else {
        if (!wetPlayers.contains(player)) {
          wetPlayers.add(player);
          new BukkitRunnable(){
            @Override public void run(){
              if (!isRaining || player.isDead()) {
                wetPlayers.remove(player);
                this.cancel();
              }
 else               if (player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
                Collection<PotionEffect> activePotions=player.getActivePotionEffects();
                for (                PotionEffect s : activePotions) {
                  if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
                    wetPlayers.remove(player);
                    this.cancel();
                    return;
                  }
                }
                for (int y=player.getLocation().getBlockY() + 2; y < player.getLocation().getWorld().getMaxHeight(); y++) {
                  if (!player.getLocation().getWorld().getBlockAt(player.getLocation().getBlockX(),y,player.getLocation().getBlockZ()).getType().equals(Material.AIR)) {
                    wetPlayers.remove(player);
                    this.cancel();
                    return;
                  }
                }
                if (Settings.rainDamage > 0D) {
                  double health=player.getHealth() - (Settings.rainDamage - Settings.rainDamage * getDamageReduced(player));
                  if (health < 0D) {
                    health=0D;
                  }
 else                   if (health > 20D) {
                    health=20D;
                  }
                  player.setHealth(health);
                  player.getWorld().playSound(playerLoc,Sound.FIZZ,3F,3F);
                }
              }
 else {
                wetPlayers.remove(player);
                this.cancel();
              }
            }
          }
.runTaskTimer(plugin,0L,20L);
        }
      }
    }
  }
  if (!block.isLiquid()) {
    return;
  }
  if (playerLoc.getBlockY() < 1) {
    final Vector v=new Vector(player.getVelocity().getX(),1D,player.getVelocity().getZ());
    player.setVelocity(v);
  }
  if (burningPlayers.contains(player)) {
    return;
  }
  if (Settings.allowSpawnNoAcidWater) {
    if (playerLoc.getBlockY() > Settings.sea_level) {
      if (plugin.getGrid().isAtSpawn(playerLoc)) {
        return;
      }
    }
  }
  if (block.getType().equals(Material.STATIONARY_WATER) || block.getType().equals(Material.WATER)) {
    Entity playersVehicle=player.getVehicle();
    if (playersVehicle != null) {
      if (playersVehicle.getType().equals(EntityType.BOAT)) {
        return;
      }
    }
    Collection<PotionEffect> activePotions=player.getActivePotionEffects();
    for (    PotionEffect s : activePotions) {
      if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
        return;
      }
    }
    burningPlayers.add(player);
    new BukkitRunnable(){
      @Override public void run(){
        if (player.isDead()) {
          burningPlayers.remove(player);
          this.cancel();
        }
 else         if (player.getLocation().getBlock().isLiquid() && player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
          if (!Settings.acidDamageType.isEmpty()) {
            for (            PotionEffectType t : Settings.acidDamageType) {
              if (t.equals(PotionEffectType.BLINDNESS) || t.equals(PotionEffectType.CONFUSION) || t.equals(PotionEffectType.HUNGER)|| t.equals(PotionEffectType.SLOW)|| t.equals(PotionEffectType.SLOW_DIGGING)|| t.equals(PotionEffectType.WEAKNESS)) {
                player.addPotionEffect(new PotionEffect(t,600,1));
              }
 else {
                player.addPotionEffect(new PotionEffect(t,200,1));
              }
            }
          }
          if (Settings.acidDamage > 0D) {
            double health=player.getHealth() - (Settings.acidDamage - Settings.acidDamage * getDamageReduced(player));
            if (health < 0D) {
              health=0D;
            }
 else             if (health > 20D) {
              health=20D;
            }
            player.setHealth(health);
            player.getWorld().playSound(playerLoc,Sound.FIZZ,2F,2F);
          }
        }
 else {
          burningPlayers.remove(player);
          this.cancel();
        }
      }
    }
.runTaskTimer(plugin,0L,20L);
  }
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent e){
  final Player player=e.getPlayer();
  if (player.isDead()) {
    return;
  }
  if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (player.isOp()) {
    if (!Settings.damageOps) {
      return;
    }
  }
 else   if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") || VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE)) {
    return;
  }
  final Location playerLoc=player.getLocation();
  final Block block=playerLoc.getBlock();
  if (Settings.rainDamage > 0D && isRaining) {
    boolean hitByRain=true;
    for (int y=playerLoc.getBlockY() + 2; y < playerLoc.getWorld().getMaxHeight(); y++) {
      if (!playerLoc.getWorld().getBlockAt(playerLoc.getBlockX(),y,playerLoc.getBlockZ()).getType().equals(Material.AIR)) {
        hitByRain=false;
        break;
      }
    }
    if (!hitByRain) {
      wetPlayers.remove(player);
    }
 else {
      boolean acidPotion=false;
      Collection<PotionEffect> activePotions=player.getActivePotionEffects();
      for (      PotionEffect s : activePotions) {
        if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
          acidPotion=true;
        }
      }
      if (acidPotion) {
        wetPlayers.remove(player);
      }
 else {
        if (!wetPlayers.contains(player)) {
          wetPlayers.add(player);
          new BukkitRunnable(){
            @Override public void run(){
              if (!isRaining || player.isDead()) {
                wetPlayers.remove(player);
                this.cancel();
              }
 else               if (player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
                Collection<PotionEffect> activePotions=player.getActivePotionEffects();
                for (                PotionEffect s : activePotions) {
                  if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
                    wetPlayers.remove(player);
                    this.cancel();
                    return;
                  }
                }
                for (int y=player.getLocation().getBlockY() + 2; y < player.getLocation().getWorld().getMaxHeight(); y++) {
                  if (!player.getLocation().getWorld().getBlockAt(player.getLocation().getBlockX(),y,player.getLocation().getBlockZ()).getType().equals(Material.AIR)) {
                    wetPlayers.remove(player);
                    this.cancel();
                    return;
                  }
                }
                if (Settings.rainDamage > 0D) {
                  double health=player.getHealth() - (Settings.rainDamage - Settings.rainDamage * getDamageReduced(player));
                  if (health < 0D) {
                    health=0D;
                  }
 else                   if (health > 20D) {
                    health=20D;
                  }
                  player.setHealth(health);
                  player.getWorld().playSound(playerLoc,Sound.FIZZ,3F,3F);
                }
              }
 else {
                wetPlayers.remove(player);
                this.cancel();
              }
            }
          }
.runTaskTimer(plugin,0L,20L);
        }
      }
    }
  }
  if (!block.isLiquid()) {
    return;
  }
  if (playerLoc.getBlockY() < 1) {
    final Vector v=new Vector(player.getVelocity().getX(),1D,player.getVelocity().getZ());
    player.setVelocity(v);
  }
  if (burningPlayers.contains(player)) {
    return;
  }
  if (Settings.allowSpawnNoAcidWater) {
    if (playerLoc.getBlockY() > Settings.sea_level) {
      if (plugin.getGrid().isAtSpawn(playerLoc)) {
        return;
      }
    }
  }
  if (block.getType().equals(Material.STATIONARY_WATER) || block.getType().equals(Material.WATER)) {
    Entity playersVehicle=player.getVehicle();
    if (playersVehicle != null) {
      if (playersVehicle.getType().equals(EntityType.BOAT)) {
        return;
      }
    }
    Collection<PotionEffect> activePotions=player.getActivePotionEffects();
    for (    PotionEffect s : activePotions) {
      if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
        return;
      }
    }
    burningPlayers.add(player);
    new BukkitRunnable(){
      @Override public void run(){
        if (player.isDead()) {
          burningPlayers.remove(player);
          this.cancel();
        }
 else         if (player.getLocation().getBlock().isLiquid() && player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
          if (!Settings.acidDamageType.isEmpty()) {
            for (            PotionEffectType t : Settings.acidDamageType) {
              if (t.equals(PotionEffectType.BLINDNESS) || t.equals(PotionEffectType.CONFUSION) || t.equals(PotionEffectType.HUNGER)|| t.equals(PotionEffectType.SLOW)|| t.equals(PotionEffectType.SLOW_DIGGING)|| t.equals(PotionEffectType.WEAKNESS)) {
                player.addPotionEffect(new PotionEffect(t,600,1));
              }
 else {
                player.addPotionEffect(new PotionEffect(t,200,1));
              }
            }
          }
          if (Settings.acidDamage > 0D) {
            double health=player.getHealth() - (Settings.acidDamage - Settings.acidDamage * getDamageReduced(player));
            if (health < 0D) {
              health=0D;
            }
 else             if (health > 20D) {
              health=20D;
            }
            player.setHealth(health);
            player.getWorld().playSound(playerLoc,Sound.FIZZ,2F,2F);
          }
        }
 else {
          burningPlayers.remove(player);
          this.cancel();
        }
      }
    }
.runTaskTimer(plugin,0L,20L);
  }
}"
34080,"protected List<String> getMessages(UUID playerUUID){
  List<String> playerMessages=messages.get(playerUUID);
  if (playerMessages != null) {
    messages.remove(playerUUID);
  }
 else {
    playerMessages=new ArrayList<String>();
  }
  return playerMessages;
}","/** 
 * Returns what messages are waiting for the player or null if none
 * @param playerUUID
 * @return
 */
protected List<String> getMessages(UUID playerUUID){
  List<String> playerMessages=messages.get(playerUUID);
  return playerMessages;
}"
34081,"/** 
 * Delete Island Called when an island is restarted or reset
 * @param player - player name String
 * @param removeBlocks
 */
protected void deletePlayerIsland(final UUID player,boolean removeBlocks){
  CoopPlay.getInstance().clearAllIslandCoops(player);
  removeWarp(player);
  removeMobsFromIsland(players.getIslandLocation(player));
  if (removeBlocks) {
    new DeleteIslandChunk(this,players.getIslandLocation(player));
  }
 else {
    Island island=grid.getIsland(player);
    if (island != null) {
      island.setLocked(false);
      grid.setIslandOwner(island,null);
    }
  }
  players.zeroPlayerData(player);
}","/** 
 * Delete Island Called when an island is restarted or reset
 * @param player - player name String
 * @param removeBlocks
 */
protected void deletePlayerIsland(final UUID player,boolean removeBlocks){
  CoopPlay.getInstance().clearAllIslandCoops(player);
  removeWarp(player);
  if (removeBlocks) {
    removeMobsFromIsland(players.getIslandLocation(player));
    new DeleteIslandChunk(this,players.getIslandLocation(player));
  }
 else {
    Island island=grid.getIsland(player);
    if (island != null) {
      island.setLocked(false);
      grid.setIslandOwner(island,null);
    }
  }
  players.zeroPlayerData(player);
}"
34082,"/** 
 * Sets a message for the player to receive next time they login
 * @param player
 * @param message
 * @return true if player is offline, false if online
 */
protected boolean setMessage(UUID playerUUID,String message){
  Player player=getServer().getPlayer(playerUUID);
  if (player != null) {
    if (player.isOnline()) {
      return false;
    }
  }
  List<String> playerMessages=messages.get(playerUUID);
  if (playerMessages != null) {
    playerMessages.add(message);
  }
 else {
    playerMessages=new ArrayList<String>(Arrays.asList(message));
  }
  messages.put(playerUUID,playerMessages);
  return true;
}","/** 
 * Sets a message for the player to receive next time they login
 * @param player
 * @param message
 * @return true if player is offline, false if online
 */
protected boolean setMessage(UUID playerUUID,String message){
  getLogger().info(""String_Node_Str"" + message);
  Player player=getServer().getPlayer(playerUUID);
  if (player != null) {
    if (player.isOnline()) {
      return false;
    }
  }
  plugin.getLogger().info(""String_Node_Str"");
  List<String> playerMessages=messages.get(playerUUID);
  if (playerMessages != null) {
    playerMessages.add(message);
  }
 else {
    playerMessages=new ArrayList<String>(Arrays.asList(message));
  }
  messages.put(playerUUID,playerMessages);
  return true;
}"
34083,"public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  Player player;
  if (sender instanceof Player) {
    player=(Player)sender;
    if (split.length > 0) {
      if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!checkAdminPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
 else {
        if (!checkModPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
    }
  }
switch (split.length) {
case 0:
    help(sender,label);
  return true;
case 1:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Player p=(Player)sender;
if (!p.getLocation().getWorld().getName().equals(Settings.worldName)) {
  p.sendMessage(ChatColor.RED + Locale.errorWrongWorld);
  return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
Island oldSpawn=plugin.getGrid().getSpawn();
Island newSpawn=plugin.getGrid().getIslandAt(closestIsland);
if (newSpawn != null && newSpawn.isSpawn()) {
  ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  return true;
}
if (newSpawn != null) {
  UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
  if (target != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(target));
  }
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return false;
}
if (oldSpawn != null) {
  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + oldSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ oldSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
  plugin.getGrid().deleteSpawn();
}
newSpawn=plugin.getGrid().addIsland(closestIsland.getBlockX(),closestIsland.getBlockZ());
plugin.getGrid().setSpawn(newSpawn);
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + p.getLocation().getBlockX()+ ""String_Node_Str""+ p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinX()+ ""String_Node_Str""+ newSpawn.getMinZ()+ ""String_Node_Str""+ (newSpawn.getMinX() + newSpawn.getIslandDistance() - 1)+ ""String_Node_Str""+ (newSpawn.getMinZ() + newSpawn.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinProtectedX()+ ""String_Node_Str""+ newSpawn.getMinProtectedZ()+ ""String_Node_Str""+ (newSpawn.getMinProtectedX() + newSpawn.getProtectionSize() - 1)+ ""String_Node_Str""+ (newSpawn.getMinProtectedZ() + newSpawn.getProtectionSize() - 1));
if (newSpawn.isLocked()) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
if (closestIsland == null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Island island=plugin.getGrid().getIslandAt(closestIsland);
if (island != null && island.isSpawn()) {
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
  sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
  sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
  if (island.isLocked()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
if (target == null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
showInfo(target,sender);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Player p=(Player)sender;
BlockIterator iter=new BlockIterator(p,10);
Block lastBlock=iter.next();
while (iter.hasNext()) {
  lastBlock=iter.next();
  if (lastBlock.getType() == Material.AIR)   continue;
  break;
}
if (!lastBlock.getType().equals(Material.SIGN_POST)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Sign sign=(Sign)lastBlock.getState();
try {
  if (!sign.getLine(0).equalsIgnoreCase(ChatColor.GREEN + Locale.warpswelcomeLine) && !sign.getLine(0).equalsIgnoreCase(ChatColor.RED + Locale.warpswelcomeLine)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
}
 catch (Exception e) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
Location closestBedRock=getClosestIsland(((Player)sender).getLocation());
if (closestBedRock == null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
if (target == null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
if (plugin.addWarp(target,lastBlock.getLocation())) {
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
  return true;
}
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getWarpOwner(lastBlock.getLocation()));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
plugin.reloadConfig();
plugin.loadPluginConfig();
plugin.reloadChallengeConfig();
if (Settings.useEconomy) {
  ControlPanel.loadShop();
}
ControlPanel.loadControlPanel();
sender.sendMessage(ChatColor.YELLOW + Locale.reloadconfigReloaded);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTengenerating);
plugin.topTenCreate();
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTenfinished);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
  sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
  return true;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgeusage.replace(""String_Node_Str"",label));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!confirmReq) {
  sender.sendMessage(ChatColor.RED + Locale.confirmerrorTimeLimitExpired);
  return true;
}
 else {
  confirmOK=true;
  confirmReq=false;
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!split[1].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID owner=island.getOwner();
String name=""String_Node_Str"";
if (owner != null) {
name=plugin.getPlayers().getName(owner);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + name);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ name+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",name));
new DeleteIslandChunk(plugin,island.getCenter());
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=10;
int maxRange=Settings.islandDistance;
if (island.isSpawn()) {
try {
  newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newRange);
if (newRange > maxRange) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ maxRange);
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
}
 else {
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
  maxRange-=16;
}
try {
  newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
  return true;
}
if (newRange < 10 || newRange > maxRange) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
  return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(island.getOwner(),sender);
}
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
purgeFlag=true;
final int time=Integer.parseInt(split[1]) * 24;
sender.sendMessage(ChatColor.YELLOW + Locale.purgecalculating.replace(""String_Node_Str"",split[1]));
plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
public void run(){
final File directoryPlayers=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
long offlineTime=0L;
for (final File playerFile : directoryPlayers.listFiles()) {
if (playerFile.getName().endsWith(""String_Node_Str"")) {
  final UUID playerUUID=UUID.fromString(playerFile.getName().substring(0,playerFile.getName().length() - 4));
  if (Bukkit.getOfflinePlayer(playerUUID) != null && Bukkit.getPlayer(playerUUID) == null) {
    final OfflinePlayer oplayer=Bukkit.getOfflinePlayer(playerUUID);
    offlineTime=oplayer.getLastPlayed();
    offlineTime=(System.currentTimeMillis() - offlineTime) / 3600000L;
    if (offlineTime > time) {
      if (plugin.getPlayers().hasIsland(playerUUID)) {
        if (!plugin.getPlayers().inTeam(playerUUID)) {
          if (plugin.getPlayers().getIslandLevel(playerUUID) < Settings.abandonedIslandLevel) {
            removeList.add(playerUUID);
          }
 else {
          }
        }
 else {
        }
      }
 else {
      }
    }
  }
}
}
if (removeList.isEmpty()) {
sender.sendMessage(ChatColor.YELLOW + Locale.purgenoneFound);
purgeFlag=false;
return;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgethisWillRemove.replace(""String_Node_Str"",String.valueOf(removeList.size())));
sender.sendMessage(ChatColor.RED + Locale.purgewarning);
sender.sendMessage(ChatColor.RED + Locale.purgetypeConfirm.replace(""String_Node_Str"",label));
confirmReq=true;
confirmOK=false;
confirmTimer=0;
new BukkitRunnable(){
@Override public void run(){
  if (confirmTimer++ > 10) {
    confirmReq=false;
    confirmOK=false;
    purgeFlag=false;
    removeList.clear();
    sender.sendMessage(ChatColor.YELLOW + Locale.purgepurgeCancelled);
    this.cancel();
  }
 else   if (confirmOK) {
    final int total=removeList.size();
    new BukkitRunnable(){
      @Override public void run(){
        if (removeList.isEmpty() && purgeFlag) {
          purgeFlag=false;
          sender.sendMessage(ChatColor.YELLOW + Locale.purgefinished);
          this.cancel();
        }
        if (removeList.size() > 0 && purgeFlag) {
          plugin.deletePlayerIsland(removeList.get(0),true);
          sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + removeList.size()+ ""String_Node_Str""+ total+ ""String_Node_Str""+ Locale.purgeremovingName.replace(""String_Node_Str"",plugin.getPlayers().getName(removeList.get(0))));
          removeList.remove(0);
        }
        sender.sendMessage(""String_Node_Str"");
      }
    }
.runTaskTimer(plugin,0L,20L);
    confirmReq=false;
    confirmOK=false;
    this.cancel();
  }
}
}
.runTaskTimer(plugin,0L,40L);
}
}
);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
plugin.getPlayers().setResetsLeft(playerUUID,Settings.resetLimit);
sender.sendMessage(ChatColor.YELLOW + Locale.clearedResetLimit + ""String_Node_Str""+ Settings.resetLimit+ ""String_Node_Str"");
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return true;
}
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
Location safeSpot=plugin.getSafeHomeLocation(playerUUID);
if (safeSpot != null) {
((Player)sender).teleport(safeSpot);
}
 else {
sender.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
Location warpSpot=plugin.getPlayers().getIslandLocation(playerUUID);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpSpot.getBlockX()+ ""String_Node_Str""+ warpSpot.getBlockY()+ ""String_Node_Str""+ warpSpot.getBlockZ());
}
return true;
}
sender.sendMessage(Locale.errorNoIslandOther);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",split[1]));
Player target=plugin.getServer().getPlayer(playerUUID);
if (target != null) {
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
plugin.resetPlayer(target);
}
plugin.deletePlayerIsland(playerUUID,true);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (sender instanceof Player) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (adminSetPlayerIsland(sender,((Player)sender).getLocation(),playerUUID)) {
sender.sendMessage(ChatColor.GREEN + Locale.registersettingIsland.replace(""String_Node_Str"",split[1]));
}
 else {
sender.sendMessage(ChatColor.RED + Locale.registererrorBedrockNotFound);
}
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location island=plugin.getPlayers().getIslandLocation(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getIslandLocation(playerUUID).getBlockX()+ ""String_Node_Str""+ plugin.getPlayers().getIslandLocation(playerUUID).getBlockZ());
plugin.deletePlayerIsland(playerUUID,false);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfo(playerUUID,sender);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
plugin.getPlayers().resetAllChallenges(playerUUID);
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengessuccess.replace(""String_Node_Str"",split[1]));
return true;
}
 else {
return false;
}
case 3:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Island island=plugin.getGrid().getIsland(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=0;
int maxRange=Settings.islandDistance;
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[2]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(playerUUID,sender);
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Biome biome=null;
String biomeName=split[2].toUpperCase();
try {
biome=Biome.valueOf(biomeName);
biomeName=biome.name();
if (!plugin.getConfig().contains(""String_Node_Str"" + biomeName)) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
biomeName=plugin.getConfig().getString(""String_Node_Str"" + biomeName + ""String_Node_Str"",ASkyBlock.prettifyText(biomeName));
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
plugin.setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
}
 else {
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),biome);
}
sender.sendMessage(ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
if (targetPlayer != null) {
targetPlayer.sendMessage(""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
 else {
plugin.setMessage(playerUUID,""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorNoTeam);
return true;
}
UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
if (!teamLeader.equals(playerUUID)) {
plugin.getPlayers().setLeaveTeam(playerUUID);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().removeMember(teamLeader,playerUUID);
if (plugin.getPlayers().getMembers(teamLeader).size() < 2) {
plugin.getPlayers().setLeaveTeam(teamLeader);
}
plugin.removeWarp(playerUUID);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[2]));
return true;
}
 else {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + label+ ""String_Node_Str""+ split[2]+ ""String_Node_Str"");
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.completeChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().get(playerUUID).completeChallenge(split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.completeChallengechallangeCompleted.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.resetChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().resetChallenge(playerUUID,split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengechallengeReset.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfoChallenges(playerUUID,sender);
return true;
}
}
return false;
case 4:
if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
final Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
final UUID teamLeader=plugin.getPlayers().getUUID(split[3]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID) || !plugin.getPlayers().isAKnownPlayer(teamLeader)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (playerUUID.equals(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (!plugin.getPlayers().hasIsland(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
return true;
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
plugin.getPlayers().setJoinTeam(teamLeader,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
targetPlayer.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
}
if (plugin.getPlayers().hasIsland(playerUUID)) {
Location islandLoc=plugin.getPlayers().getIslandLocation(playerUUID);
if (islandLoc != null) {
sender.sendMessage(ChatColor.RED + plugin.getPlayers().getName(playerUUID) + ""String_Node_Str""+ islandLoc.getBlockX()+ ""String_Node_Str""+ islandLoc.getBlockZ()+ ""String_Node_Str"");
}
}
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().setHasIsland(playerUUID,false);
plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
plugin.homeTeleport(targetPlayer);
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
default :
return false;
}
}","public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  Player player;
  if (sender instanceof Player) {
    player=(Player)sender;
    if (split.length > 0) {
      if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!checkAdminPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
 else {
        if (!checkModPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
    }
  }
switch (split.length) {
case 0:
    help(sender,label);
  return true;
case 1:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
  return true;
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Player p=(Player)sender;
if (!p.getLocation().getWorld().getName().equals(Settings.worldName)) {
  p.sendMessage(ChatColor.RED + Locale.errorWrongWorld);
  return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
Island oldSpawn=plugin.getGrid().getSpawn();
Island newSpawn=plugin.getGrid().getIslandAt(closestIsland);
if (newSpawn != null && newSpawn.isSpawn()) {
  ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  return true;
}
if (newSpawn != null) {
  UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
  if (target != null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(target));
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}
if (oldSpawn != null) {
  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + oldSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ oldSpawn.getCenter().getBlockZ()+ ""String_Node_Str"");
  plugin.getGrid().deleteSpawn();
}
newSpawn=plugin.getGrid().addIsland(closestIsland.getBlockX(),closestIsland.getBlockZ());
plugin.getGrid().setSpawn(newSpawn);
ASkyBlock.getIslandWorld().setSpawnLocation(p.getLocation().getBlockX(),p.getLocation().getBlockY(),p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + p.getLocation().getBlockX()+ ""String_Node_Str""+ p.getLocation().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getCenter().getBlockX()+ ""String_Node_Str""+ newSpawn.getCenter().getBlockZ());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinX()+ ""String_Node_Str""+ newSpawn.getMinZ()+ ""String_Node_Str""+ (newSpawn.getMinX() + newSpawn.getIslandDistance() - 1)+ ""String_Node_Str""+ (newSpawn.getMinZ() + newSpawn.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + newSpawn.getMinProtectedX()+ ""String_Node_Str""+ newSpawn.getMinProtectedZ()+ ""String_Node_Str""+ (newSpawn.getMinProtectedX() + newSpawn.getProtectionSize() - 1)+ ""String_Node_Str""+ (newSpawn.getMinProtectedZ() + newSpawn.getProtectionSize() - 1));
if (newSpawn.isLocked()) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Location closestIsland=getClosestIsland(((Player)sender).getLocation());
if (closestIsland == null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Island island=plugin.getGrid().getIslandAt(closestIsland);
if (island != null && island.isSpawn()) {
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
  sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
  sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
  if (island.isLocked()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
if (target == null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
showInfo(target,sender);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Player p=(Player)sender;
BlockIterator iter=new BlockIterator(p,10);
Block lastBlock=iter.next();
while (iter.hasNext()) {
  lastBlock=iter.next();
  if (lastBlock.getType() == Material.AIR)   continue;
  break;
}
if (!lastBlock.getType().equals(Material.SIGN_POST)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
Sign sign=(Sign)lastBlock.getState();
try {
  if (!sign.getLine(0).equalsIgnoreCase(ChatColor.GREEN + Locale.warpswelcomeLine) && !sign.getLine(0).equalsIgnoreCase(ChatColor.RED + Locale.warpswelcomeLine)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
}
 catch (Exception e) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
Location closestBedRock=getClosestIsland(((Player)sender).getLocation());
if (closestBedRock == null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
if (target == null) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
if (plugin.addWarp(target,lastBlock.getLocation())) {
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
  return true;
}
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getWarpOwner(lastBlock.getLocation()));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
plugin.reloadConfig();
plugin.loadPluginConfig();
plugin.reloadChallengeConfig();
if (Settings.useEconomy) {
  ControlPanel.loadShop();
}
ControlPanel.loadControlPanel();
sender.sendMessage(ChatColor.YELLOW + Locale.reloadconfigReloaded);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTengenerating);
plugin.topTenCreate();
sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTenfinished);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
  sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
  return true;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgeusage.replace(""String_Node_Str"",label));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!confirmReq) {
  sender.sendMessage(ChatColor.RED + Locale.confirmerrorTimeLimitExpired);
  return true;
}
 else {
  confirmOK=true;
  confirmReq=false;
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!split[1].equalsIgnoreCase(""String_Node_Str"")) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
UUID owner=island.getOwner();
String name=""String_Node_Str"";
if (owner != null) {
name=plugin.getPlayers().getName(owner);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + name);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ name+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",name));
new DeleteIslandChunk(plugin,island.getCenter());
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Island island=plugin.getGrid().getIslandAt(((Player)sender).getLocation());
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=10;
int maxRange=Settings.islandDistance;
if (island.isSpawn()) {
try {
  newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newRange);
if (newRange > maxRange) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ maxRange);
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinX()+ ""String_Node_Str""+ island.getMinZ()+ ""String_Node_Str""+ (island.getMinX() + island.getIslandDistance() - 1)+ ""String_Node_Str""+ (island.getMinZ() + island.getIslandDistance() - 1));
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getProtectionSize());
sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + island.getMinProtectedX()+ ""String_Node_Str""+ island.getMinProtectedZ()+ ""String_Node_Str""+ (island.getMinProtectedX() + island.getProtectionSize() - 1)+ ""String_Node_Str""+ (island.getMinProtectedZ() + island.getProtectionSize() - 1));
if (island.isLocked()) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}
}
 else {
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
  maxRange-=16;
}
try {
  newRange=Integer.valueOf(split[1]);
}
 catch (Exception e) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
  return true;
}
if (newRange < 10 || newRange > maxRange) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
  return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(island.getOwner(),sender);
}
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
return true;
}
purgeFlag=true;
final int time=Integer.parseInt(split[1]) * 24;
sender.sendMessage(ChatColor.YELLOW + Locale.purgecalculating.replace(""String_Node_Str"",split[1]));
plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
public void run(){
final File directoryPlayers=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
long offlineTime=0L;
for (final File playerFile : directoryPlayers.listFiles()) {
if (playerFile.getName().endsWith(""String_Node_Str"")) {
  final UUID playerUUID=UUID.fromString(playerFile.getName().substring(0,playerFile.getName().length() - 4));
  if (Bukkit.getOfflinePlayer(playerUUID) != null && Bukkit.getPlayer(playerUUID) == null) {
    final OfflinePlayer oplayer=Bukkit.getOfflinePlayer(playerUUID);
    offlineTime=oplayer.getLastPlayed();
    offlineTime=(System.currentTimeMillis() - offlineTime) / 3600000L;
    if (offlineTime > time) {
      if (plugin.getPlayers().hasIsland(playerUUID)) {
        if (!plugin.getPlayers().inTeam(playerUUID)) {
          if (plugin.getPlayers().getIslandLevel(playerUUID) < Settings.abandonedIslandLevel) {
            removeList.add(playerUUID);
          }
 else {
          }
        }
 else {
        }
      }
 else {
      }
    }
  }
}
}
if (removeList.isEmpty()) {
sender.sendMessage(ChatColor.YELLOW + Locale.purgenoneFound);
purgeFlag=false;
return;
}
sender.sendMessage(ChatColor.YELLOW + Locale.purgethisWillRemove.replace(""String_Node_Str"",String.valueOf(removeList.size())));
sender.sendMessage(ChatColor.RED + Locale.purgewarning);
sender.sendMessage(ChatColor.RED + Locale.purgetypeConfirm.replace(""String_Node_Str"",label));
confirmReq=true;
confirmOK=false;
confirmTimer=0;
new BukkitRunnable(){
@Override public void run(){
  if (confirmTimer++ > 10) {
    confirmReq=false;
    confirmOK=false;
    purgeFlag=false;
    removeList.clear();
    sender.sendMessage(ChatColor.YELLOW + Locale.purgepurgeCancelled);
    this.cancel();
  }
 else   if (confirmOK) {
    final int total=removeList.size();
    new BukkitRunnable(){
      @Override public void run(){
        if (removeList.isEmpty() && purgeFlag) {
          purgeFlag=false;
          sender.sendMessage(ChatColor.YELLOW + Locale.purgefinished);
          this.cancel();
        }
        if (removeList.size() > 0 && purgeFlag) {
          plugin.deletePlayerIsland(removeList.get(0),true);
          sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + removeList.size()+ ""String_Node_Str""+ total+ ""String_Node_Str""+ Locale.purgeremovingName.replace(""String_Node_Str"",plugin.getPlayers().getName(removeList.get(0))));
          removeList.remove(0);
        }
        sender.sendMessage(""String_Node_Str"");
      }
    }
.runTaskTimer(plugin,0L,20L);
    confirmReq=false;
    confirmOK=false;
    this.cancel();
  }
}
}
.runTaskTimer(plugin,0L,40L);
}
}
);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
plugin.getPlayers().setResetsLeft(playerUUID,Settings.resetLimit);
sender.sendMessage(ChatColor.YELLOW + Locale.clearedResetLimit + ""String_Node_Str""+ Settings.resetLimit+ ""String_Node_Str"");
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return true;
}
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
Location safeSpot=plugin.getSafeHomeLocation(playerUUID);
if (safeSpot != null) {
((Player)sender).teleport(safeSpot);
}
 else {
sender.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
Location warpSpot=plugin.getPlayers().getIslandLocation(playerUUID);
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpSpot.getBlockX()+ ""String_Node_Str""+ warpSpot.getBlockY()+ ""String_Node_Str""+ warpSpot.getBlockZ());
}
return true;
}
sender.sendMessage(Locale.errorNoIslandOther);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",split[1]));
Player target=plugin.getServer().getPlayer(playerUUID);
if (target != null) {
CoopPlay.getInstance().clearMyInvitedCoops(target);
CoopPlay.getInstance().clearMyCoops(target);
plugin.resetPlayer(target);
}
plugin.deletePlayerIsland(playerUUID,true);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (sender instanceof Player) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (adminSetPlayerIsland(sender,((Player)sender).getLocation(),playerUUID)) {
sender.sendMessage(ChatColor.GREEN + Locale.registersettingIsland.replace(""String_Node_Str"",split[1]));
}
 else {
sender.sendMessage(ChatColor.RED + Locale.registererrorBedrockNotFound);
}
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Location island=plugin.getPlayers().getIslandLocation(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
return true;
}
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getIslandLocation(playerUUID).getBlockX()+ ""String_Node_Str""+ plugin.getPlayers().getIslandLocation(playerUUID).getBlockZ());
plugin.deletePlayerIsland(playerUUID,false);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfo(playerUUID,sender);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
plugin.getPlayers().resetAllChallenges(playerUUID);
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengessuccess.replace(""String_Node_Str"",split[1]));
return true;
}
 else {
return false;
}
case 3:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Island island=plugin.getGrid().getIsland(playerUUID);
if (island == null) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
 else {
int newRange=0;
int maxRange=Settings.islandDistance;
if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
maxRange-=16;
}
try {
newRange=Integer.valueOf(split[2]);
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
if (newRange < 10 || newRange > maxRange) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + maxRange);
return true;
}
island.setProtectionSize(newRange);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ newRange);
showInfo(playerUUID,sender);
return true;
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
return true;
}
}
Biome biome=null;
String biomeName=split[2].toUpperCase();
try {
biome=Biome.valueOf(biomeName);
biomeName=biome.name();
if (!plugin.getConfig().contains(""String_Node_Str"" + biomeName)) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
biomeName=plugin.getConfig().getString(""String_Node_Str"" + biomeName + ""String_Node_Str"",ASkyBlock.prettifyText(biomeName));
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
sender.sendMessage(b.name());
}
}
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
plugin.setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
}
 else {
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),biome);
}
sender.sendMessage(ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
if (targetPlayer != null) {
targetPlayer.sendMessage(""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
 else {
plugin.setMessage(playerUUID,""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorNoTeam);
return true;
}
UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
if (!teamLeader.equals(playerUUID)) {
plugin.getPlayers().setLeaveTeam(playerUUID);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().removeMember(teamLeader,playerUUID);
if (plugin.getPlayers().getMembers(teamLeader).size() < 2) {
plugin.getPlayers().setLeaveTeam(teamLeader);
}
plugin.removeWarp(playerUUID);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[2]));
return true;
}
 else {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + label+ ""String_Node_Str""+ split[2]+ ""String_Node_Str"");
return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.completeChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().get(playerUUID).completeChallenge(split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.completeChallengechallangeCompleted.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.resetChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().resetChallenge(playerUUID,split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengechallengeReset.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
 else {
showInfoChallenges(playerUUID,sender);
return true;
}
}
return false;
case 4:
if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
final Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
final UUID teamLeader=plugin.getPlayers().getUUID(split[3]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID) || !plugin.getPlayers().isAKnownPlayer(teamLeader)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (playerUUID.equals(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (!plugin.getPlayers().hasIsland(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
return true;
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
plugin.getPlayers().setJoinTeam(teamLeader,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
targetPlayer.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
}
if (plugin.getPlayers().hasIsland(playerUUID)) {
Location islandLoc=plugin.getPlayers().getIslandLocation(playerUUID);
if (islandLoc != null) {
sender.sendMessage(ChatColor.RED + plugin.getPlayers().getName(playerUUID) + ""String_Node_Str""+ islandLoc.getBlockX()+ ""String_Node_Str""+ islandLoc.getBlockZ()+ ""String_Node_Str"");
}
}
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().setHasIsland(playerUUID,false);
plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
plugin.homeTeleport(targetPlayer);
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
default :
return false;
}
}"
34084,"/** 
 * @param slot
 * @param cost
 * @param description
 * @param name
 */
protected BiomeItem(Material material,int slot,double cost,String description,String name,boolean confirm,Biome biome){
  this.slot=slot;
  this.price=cost;
  this.name=name;
  this.confirm=confirm;
  this.biome=biome;
  item=new ItemStack(material);
  ItemMeta meta=item.getItemMeta();
  meta.setDisplayName(name);
  List<String> Lore=new ArrayList<String>();
  Lore=Challenges.chop(ChatColor.YELLOW,description,20);
  if (Settings.useEconomy && cost > 0D) {
    Lore.add(VaultHelper.econ.format(cost));
  }
  meta.setLore(Lore);
  item.setItemMeta(meta);
}","/** 
 * @param slot
 * @param cost
 * @param description
 * @param name
 */
protected BiomeItem(Material material,int slot,double cost,String description,String name,boolean confirm,Biome biome){
  this.slot=slot;
  this.price=cost;
  this.name=name;
  this.confirm=confirm;
  this.biome=biome;
  item=new ItemStack(material);
  ItemMeta meta=item.getItemMeta();
  meta.setDisplayName(name);
  List<String> Lore=new ArrayList<String>();
  Lore=Util.chop(ChatColor.YELLOW,description,20);
  if (Settings.useEconomy && cost > 0D) {
    Lore.add(VaultHelper.econ.format(cost));
  }
  meta.setLore(Lore);
  item.setItemMeta(meta);
}"
34085,"/** 
 * Creates the challenge description for the ""item"" in the inventory
 * @param challenge
 * @param player
 * @return
 */
private List<String> challengeDescription(String challenge,Player player){
  List<String> result=new ArrayList<String>();
  final int length=25;
  String level=plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str"");
  if (!level.isEmpty()) {
    result.addAll(chop(ChatColor.WHITE,Locale.challengeslevel + ""String_Node_Str"" + level,length));
  }
  boolean complete=false;
  int maxTimes=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
  int doneTimes=plugin.getPlayers().checkChallengeTimes(player.getUniqueId(),challenge);
  if (players.checkChallenge(player.getUniqueId(),challenge)) {
    complete=true;
  }
  boolean repeatable=false;
  if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"",false)) {
    repeatable=true;
  }
  if (repeatable) {
    if (maxTimes == 0) {
      if (complete) {
        result.add(ChatColor.AQUA + Locale.challengescomplete);
      }
    }
 else {
      if (doneTimes < maxTimes) {
        result.add(""String_Node_Str"" + doneTimes + ""String_Node_Str""+ maxTimes);
      }
 else {
        repeatable=false;
        result.add(""String_Node_Str"" + doneTimes + ""String_Node_Str""+ maxTimes);
      }
    }
  }
 else   if (complete) {
    result.add(ChatColor.AQUA + Locale.challengescomplete);
  }
  final String type=plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str"").toLowerCase();
  if (!complete || (complete && repeatable)) {
    result.addAll(chop(ChatColor.GOLD,plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str""),length));
    if (type.equals(""String_Node_Str"")) {
      if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"")) {
        result.addAll(chop(ChatColor.RED,Locale.challengesitemTakeWarning,length));
      }
    }
 else     if (type.equals(""String_Node_Str"")) {
      result.addAll(chop(ChatColor.RED,Locale.challengeserrorItemsNotThere,length));
    }
  }
  if (complete && (!type.equals(""String_Node_Str"") || !repeatable)) {
    result.addAll(chop(ChatColor.RED,Locale.challengesnotRepeatable,length));
    return result;
  }
  int moneyReward=0;
  int expReward=0;
  String rewardText=""String_Node_Str"";
  if (!players.checkChallenge(player.getUniqueId(),challenge)) {
    moneyReward=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",0);
    rewardText=ChatColor.translateAlternateColorCodes('&',plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",""String_Node_Str""));
    expReward=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
    result.addAll(chop(ChatColor.GOLD,Locale.challengesfirstTimeRewards,length));
  }
 else {
    moneyReward=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",0);
    rewardText=ChatColor.translateAlternateColorCodes('&',plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",""String_Node_Str""));
    expReward=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
    result.addAll(chop(ChatColor.GOLD,Locale.challengesrepeatRewards,length));
  }
  result.addAll(chop(ChatColor.WHITE,rewardText,length));
  if (expReward > 0) {
    result.addAll(chop(ChatColor.GOLD,Locale.challengesexpReward + ""String_Node_Str"" + ChatColor.WHITE+ expReward,length));
  }
  if (Settings.useEconomy && moneyReward > 0) {
    result.addAll(chop(ChatColor.GOLD,Locale.challengesmoneyReward + ""String_Node_Str"" + ChatColor.WHITE+ VaultHelper.econ.format(moneyReward),length));
  }
  return result;
}","/** 
 * Creates the challenge description for the ""item"" in the inventory
 * @param challenge
 * @param player
 * @return
 */
private List<String> challengeDescription(String challenge,Player player){
  List<String> result=new ArrayList<String>();
  final int length=25;
  String level=plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str"");
  if (!level.isEmpty()) {
    result.addAll(Util.chop(ChatColor.WHITE,Locale.challengeslevel + ""String_Node_Str"" + level,length));
  }
  boolean complete=false;
  int maxTimes=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
  int doneTimes=plugin.getPlayers().checkChallengeTimes(player.getUniqueId(),challenge);
  if (players.checkChallenge(player.getUniqueId(),challenge)) {
    complete=true;
  }
  boolean repeatable=false;
  if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"",false)) {
    repeatable=true;
  }
  if (repeatable) {
    if (maxTimes == 0) {
      if (complete) {
        result.add(ChatColor.AQUA + Locale.challengescomplete);
      }
    }
 else {
      if (doneTimes < maxTimes) {
        result.add(""String_Node_Str"" + doneTimes + ""String_Node_Str""+ maxTimes);
      }
 else {
        repeatable=false;
        result.add(""String_Node_Str"" + doneTimes + ""String_Node_Str""+ maxTimes);
      }
    }
  }
 else   if (complete) {
    result.add(ChatColor.AQUA + Locale.challengescomplete);
  }
  final String type=plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str"").toLowerCase();
  if (!complete || (complete && repeatable)) {
    result.addAll(Util.chop(ChatColor.GOLD,plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"",""String_Node_Str""),length));
    if (type.equals(""String_Node_Str"")) {
      if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"")) {
        result.addAll(Util.chop(ChatColor.RED,Locale.challengesitemTakeWarning,length));
      }
    }
 else     if (type.equals(""String_Node_Str"")) {
      result.addAll(Util.chop(ChatColor.RED,Locale.challengeserrorItemsNotThere,length));
    }
  }
  if (complete && (!type.equals(""String_Node_Str"") || !repeatable)) {
    result.addAll(Util.chop(ChatColor.RED,Locale.challengesnotRepeatable,length));
    return result;
  }
  int moneyReward=0;
  int expReward=0;
  String rewardText=""String_Node_Str"";
  if (!players.checkChallenge(player.getUniqueId(),challenge)) {
    moneyReward=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",0);
    rewardText=ChatColor.translateAlternateColorCodes('&',plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",""String_Node_Str""));
    expReward=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
    result.addAll(Util.chop(ChatColor.GOLD,Locale.challengesfirstTimeRewards,length));
  }
 else {
    moneyReward=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",0);
    rewardText=ChatColor.translateAlternateColorCodes('&',plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge.toLowerCase() + ""String_Node_Str"",""String_Node_Str""));
    expReward=plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"",0);
    result.addAll(Util.chop(ChatColor.GOLD,Locale.challengesrepeatRewards,length));
  }
  result.addAll(Util.chop(ChatColor.WHITE,rewardText,length));
  if (expReward > 0) {
    result.addAll(Util.chop(ChatColor.GOLD,Locale.challengesexpReward + ""String_Node_Str"" + ChatColor.WHITE+ expReward,length));
  }
  if (Settings.useEconomy && moneyReward > 0) {
    result.addAll(Util.chop(ChatColor.GOLD,Locale.challengesmoneyReward + ""String_Node_Str"" + ChatColor.WHITE+ VaultHelper.econ.format(moneyReward),length));
  }
  return result;
}"
34086,"/** 
 * Dynamically creates an inventory of challenges for the player showing the level
 * @param player
 * @param level
 * @return inventory
 */
protected Inventory challengePanel(Player player,String level){
  List<CPItem> cp=new ArrayList<CPItem>();
  if (level.isEmpty() && !challengeList.containsKey(""String_Node_Str"")) {
    if (!Settings.challengeLevels.isEmpty()) {
      level=Settings.challengeLevels.get(0);
    }
 else {
      plugin.getLogger().severe(""String_Node_Str"");
      Inventory error=Bukkit.createInventory(null,9,Locale.challengesguiTitle);
      player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
      return error;
    }
  }
  for (  String challengeName : challengeList.get(level)) {
    ItemStack icon=null;
    String iconName=plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",""String_Node_Str"");
    if (!iconName.isEmpty()) {
      try {
        String[] split=iconName.split(""String_Node_Str"");
        if (split.length == 1) {
          if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
          icon=new ItemStack(Material.valueOf(iconName));
        }
 else         if (split.length == 2) {
          icon=new ItemStack(Material.valueOf(split[0]));
          icon.setDurability(Integer.valueOf(split[1]).shortValue());
        }
      }
 catch (      Exception e) {
        plugin.getLogger().warning(""String_Node_Str"" + challengeName + ""String_Node_Str""+ iconName);
        plugin.getLogger().warning(""String_Node_Str"");
      }
    }
    if (icon == null) {
      icon=new ItemStack(Material.PAPER);
    }
    String description=ChatColor.GREEN + plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",challengeName.substring(0,1).toUpperCase() + challengeName.substring(1));
    boolean complete=false;
    if (Settings.addCompletedGlow && players.checkChallenge(player.getUniqueId(),challengeName)) {
      ItemMeta im=icon.getItemMeta();
      im.addEnchant(Enchantment.ARROW_DAMAGE,0,true);
      icon.setItemMeta(im);
      icon.removeEnchantment(Enchantment.ARROW_DAMAGE);
      complete=true;
    }
    boolean repeatable=false;
    if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challengeName + ""String_Node_Str"",false)) {
      repeatable=true;
    }
    if (!complete || ((complete && repeatable) || !Settings.removeCompleteOntimeChallenges)) {
      CPItem item=new CPItem(icon,description,Settings.CHALLENGECOMMAND + ""String_Node_Str"" + challengeName,null);
      List<String> lore=challengeDescription(challengeName,player);
      item.setLore(lore);
      cp.add(item);
    }
  }
  int levelDone=0;
  for (int i=0; i < Settings.challengeLevels.size(); i++) {
    if (i == 0) {
      levelDone=0;
    }
 else {
      levelDone=checkLevelCompletion(player,Settings.challengeLevels.get(i - 1));
    }
    if (!level.equalsIgnoreCase(Settings.challengeLevels.get(i))) {
      List<String> lore=new ArrayList<String>();
      if (levelDone <= 0) {
        CPItem item=new CPItem(Material.BOOK_AND_QUILL,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
        lore=chop(ChatColor.WHITE,Locale.challengesNavigation.replace(""String_Node_Str"",Settings.challengeLevels.get(i)),25);
        item.setNextSection(Settings.challengeLevels.get(i));
        item.setLore(lore);
        cp.add(item);
      }
 else {
        CPItem item=new CPItem(Material.BOOK,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
        lore=chop(ChatColor.WHITE,Locale.challengestoComplete.replace(""String_Node_Str"",String.valueOf(levelDone)).replace(""String_Node_Str"",Settings.challengeLevels.get(i - 1)),25);
        item.setLore(lore);
        cp.add(item);
      }
    }
  }
  if (cp.size() > 0) {
    int size=cp.size() + 8;
    size-=(size % 9);
    Inventory newPanel=Bukkit.createInventory(null,size,Locale.challengesguiTitle);
    playerChallengeGUI.put(player.getUniqueId(),cp);
    for (    CPItem i : cp) {
      newPanel.addItem(i.getItem());
    }
    return newPanel;
  }
  return null;
}","/** 
 * Dynamically creates an inventory of challenges for the player showing the level
 * @param player
 * @param level
 * @return inventory
 */
protected Inventory challengePanel(Player player,String level){
  List<CPItem> cp=new ArrayList<CPItem>();
  if (level.isEmpty() && !challengeList.containsKey(""String_Node_Str"")) {
    if (!Settings.challengeLevels.isEmpty()) {
      level=Settings.challengeLevels.get(0);
    }
 else {
      plugin.getLogger().severe(""String_Node_Str"");
      Inventory error=Bukkit.createInventory(null,9,Locale.challengesguiTitle);
      player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
      return error;
    }
  }
  for (  String challengeName : challengeList.get(level)) {
    ItemStack icon=null;
    String iconName=plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",""String_Node_Str"");
    if (!iconName.isEmpty()) {
      try {
        String[] split=iconName.split(""String_Node_Str"");
        if (split.length == 1) {
          if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
          icon=new ItemStack(Material.valueOf(iconName));
        }
 else         if (split.length == 2) {
          icon=new ItemStack(Material.valueOf(split[0]));
          icon.setDurability(Integer.valueOf(split[1]).shortValue());
        }
      }
 catch (      Exception e) {
        plugin.getLogger().warning(""String_Node_Str"" + challengeName + ""String_Node_Str""+ iconName);
        plugin.getLogger().warning(""String_Node_Str"");
      }
    }
    if (icon == null) {
      icon=new ItemStack(Material.PAPER);
    }
    String description=ChatColor.GREEN + plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",challengeName.substring(0,1).toUpperCase() + challengeName.substring(1));
    boolean complete=false;
    if (Settings.addCompletedGlow && players.checkChallenge(player.getUniqueId(),challengeName)) {
      ItemMeta im=icon.getItemMeta();
      im.addEnchant(Enchantment.ARROW_DAMAGE,0,true);
      icon.setItemMeta(im);
      icon.removeEnchantment(Enchantment.ARROW_DAMAGE);
      complete=true;
    }
    boolean repeatable=false;
    if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challengeName + ""String_Node_Str"",false)) {
      repeatable=true;
    }
    if (!complete || ((complete && repeatable) || !Settings.removeCompleteOntimeChallenges)) {
      CPItem item=new CPItem(icon,description,Settings.CHALLENGECOMMAND + ""String_Node_Str"" + challengeName,null);
      List<String> lore=challengeDescription(challengeName,player);
      item.setLore(lore);
      cp.add(item);
    }
  }
  int levelDone=0;
  for (int i=0; i < Settings.challengeLevels.size(); i++) {
    if (i == 0) {
      levelDone=0;
    }
 else {
      levelDone=checkLevelCompletion(player,Settings.challengeLevels.get(i - 1));
    }
    if (!level.equalsIgnoreCase(Settings.challengeLevels.get(i))) {
      List<String> lore=new ArrayList<String>();
      if (levelDone <= 0) {
        CPItem item=new CPItem(Material.BOOK_AND_QUILL,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
        lore=Util.chop(ChatColor.WHITE,Locale.challengesNavigation.replace(""String_Node_Str"",Settings.challengeLevels.get(i)),25);
        item.setNextSection(Settings.challengeLevels.get(i));
        item.setLore(lore);
        cp.add(item);
      }
 else {
        CPItem item=new CPItem(Material.BOOK,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
        lore=Util.chop(ChatColor.WHITE,Locale.challengestoComplete.replace(""String_Node_Str"",String.valueOf(levelDone)).replace(""String_Node_Str"",Settings.challengeLevels.get(i - 1)),25);
        item.setLore(lore);
        cp.add(item);
      }
    }
  }
  if (cp.size() > 0) {
    int size=cp.size() + 8;
    size-=(size % 9);
    Inventory newPanel=Bukkit.createInventory(null,size,Locale.challengesguiTitle);
    playerChallengeGUI.put(player.getUniqueId(),cp);
    for (    CPItem i : cp) {
      newPanel.addItem(i.getItem());
    }
    return newPanel;
  }
  return null;
}"
34087,"@EventHandler public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  ItemStack clicked=event.getCurrentItem();
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (inventory.getName().equals(Locale.challengesguiTitle)) {
    event.setCancelled(true);
    if (slot == -999) {
      player.closeInventory();
      return;
    }
    List<CPItem> challenges=plugin.getChallenges().getCP(player);
    if (challenges == null) {
      plugin.getLogger().warning(""String_Node_Str"");
      player.closeInventory();
      player.performCommand(Settings.CHALLENGECOMMAND);
      return;
    }
    if (slot >= 0 && slot < challenges.size()) {
      CPItem item=challenges.get(slot);
      if (clicked.equals(item.getItem())) {
        if (item.getNextSection() != null) {
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player,item.getNextSection()));
        }
 else         if (item.getCommand() != null) {
          player.performCommand(item.getCommand());
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player));
        }
      }
    }
  }
  if (miniShop != null && inventory.getName().equals(miniShop.getName())) {
    String message=""String_Node_Str"";
    event.setCancelled(true);
    if (!Settings.useEconomy || slot == -999) {
      player.closeInventory();
      return;
    }
    if (store.containsKey(slot)) {
      MiniShopItem item=store.get(slot);
      if (clicked.equals(item.getItem())) {
        if (event.getClick().equals(ClickType.LEFT)) {
          if (item.getPrice() > 0D) {
            if (!VaultHelper.econ.has(player,Settings.worldName,item.getPrice())) {
              message=(Locale.minishopYouCannotAfford).replace(""String_Node_Str"",item.getDescription());
            }
 else {
              EconomyResponse r=VaultHelper.econ.withdrawPlayer(player,Settings.worldName,item.getPrice());
              if (r.transactionSuccess()) {
                message=Locale.minishopYouBought.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
                message=message.replace(""String_Node_Str"",item.getDescription());
                message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getPrice()));
                player.getInventory().addItem(item.getItemClean());
              }
 else {
                message=(Locale.minishopBuyProblem).replace(""String_Node_Str"",item.getDescription());
              }
            }
          }
        }
 else         if (event.getClick().equals(ClickType.RIGHT) && allowSelling && item.getSellPrice() > 0D) {
          if (player.getInventory().containsAtLeast(item.getItemClean(),item.getQuantity())) {
            player.getInventory().removeItem(item.getItemClean());
            VaultHelper.econ.depositPlayer(player,Settings.worldName,item.getSellPrice());
            message=Locale.minishopYouSold.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
            message=message.replace(""String_Node_Str"",item.getDescription());
            message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getSellPrice()));
          }
 else {
            message=(Locale.minishopSellProblem).replace(""String_Node_Str"",item.getDescription());
            ;
          }
        }
        if (!message.isEmpty()) {
          player.sendMessage(message);
        }
      }
    }
  }
  for (  String panelName : controlPanel.keySet()) {
    if (inventory.getName().equals(panelName)) {
      if (slot == -999) {
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
      HashMap<Integer,CPItem> thisPanel=panels.get(panelName);
      if (slot >= 0 && slot < thisPanel.size()) {
        String command=thisPanel.get(slot).getCommand();
        String nextSection=ChatColor.translateAlternateColorCodes('&',thisPanel.get(slot).getNextSection());
        if (!command.isEmpty()) {
          player.closeInventory();
          event.setCancelled(true);
          player.performCommand(command);
          return;
        }
        if (!nextSection.isEmpty()) {
          player.closeInventory();
          Inventory next=controlPanel.get(nextSection);
          if (next == null) {
          }
          player.openInventory(next);
          event.setCancelled(true);
          return;
        }
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
    }
  }
}","@EventHandler public void onInventoryClick(InventoryClickEvent event){
  Player player=(Player)event.getWhoClicked();
  ItemStack clicked=event.getCurrentItem();
  Inventory inventory=event.getInventory();
  int slot=event.getRawSlot();
  if (inventory.getName().equalsIgnoreCase(""String_Node_Str"")) {
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    event.setCancelled(true);
    return;
  }
  if (inventory.getName().equals(Locale.challengesguiTitle)) {
    event.setCancelled(true);
    if (event.getSlotType() == SlotType.OUTSIDE) {
      player.closeInventory();
      return;
    }
    List<CPItem> challenges=plugin.getChallenges().getCP(player);
    if (challenges == null) {
      plugin.getLogger().warning(""String_Node_Str"");
      player.closeInventory();
      player.performCommand(Settings.CHALLENGECOMMAND);
      return;
    }
    if (slot >= 0 && slot < challenges.size()) {
      CPItem item=challenges.get(slot);
      if (clicked.equals(item.getItem())) {
        if (item.getNextSection() != null) {
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player,item.getNextSection()));
        }
 else         if (item.getCommand() != null) {
          player.performCommand(item.getCommand());
          player.closeInventory();
          player.openInventory(plugin.getChallenges().challengePanel(player));
        }
      }
    }
  }
  if (miniShop != null && inventory.getName().equals(miniShop.getName())) {
    String message=""String_Node_Str"";
    event.setCancelled(true);
    if (!Settings.useEconomy || slot == -999) {
      player.closeInventory();
      return;
    }
    if (store.containsKey(slot)) {
      MiniShopItem item=store.get(slot);
      if (clicked.equals(item.getItem())) {
        if (event.getClick().equals(ClickType.LEFT)) {
          if (item.getPrice() > 0D) {
            if (!VaultHelper.econ.has(player,Settings.worldName,item.getPrice())) {
              message=(Locale.minishopYouCannotAfford).replace(""String_Node_Str"",item.getDescription());
            }
 else {
              EconomyResponse r=VaultHelper.econ.withdrawPlayer(player,Settings.worldName,item.getPrice());
              if (r.transactionSuccess()) {
                message=Locale.minishopYouBought.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
                message=message.replace(""String_Node_Str"",item.getDescription());
                message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getPrice()));
                player.getInventory().addItem(item.getItemClean());
              }
 else {
                message=(Locale.minishopBuyProblem).replace(""String_Node_Str"",item.getDescription());
              }
            }
          }
        }
 else         if (event.getClick().equals(ClickType.RIGHT) && allowSelling && item.getSellPrice() > 0D) {
          if (player.getInventory().containsAtLeast(item.getItemClean(),item.getQuantity())) {
            player.getInventory().removeItem(item.getItemClean());
            VaultHelper.econ.depositPlayer(player,Settings.worldName,item.getSellPrice());
            message=Locale.minishopYouSold.replace(""String_Node_Str"",Integer.toString(item.getQuantity()));
            message=message.replace(""String_Node_Str"",item.getDescription());
            message=message.replace(""String_Node_Str"",VaultHelper.econ.format(item.getSellPrice()));
          }
 else {
            message=(Locale.minishopSellProblem).replace(""String_Node_Str"",item.getDescription());
            ;
          }
        }
        if (!message.isEmpty()) {
          player.sendMessage(message);
        }
      }
    }
  }
  for (  String panelName : controlPanel.keySet()) {
    if (inventory.getName().equals(panelName)) {
      if (slot == -999) {
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
      HashMap<Integer,CPItem> thisPanel=panels.get(panelName);
      if (slot >= 0 && slot < thisPanel.size()) {
        String command=thisPanel.get(slot).getCommand();
        String nextSection=ChatColor.translateAlternateColorCodes('&',thisPanel.get(slot).getNextSection());
        if (!command.isEmpty()) {
          player.closeInventory();
          event.setCancelled(true);
          player.performCommand(command);
          return;
        }
        if (!nextSection.isEmpty()) {
          player.closeInventory();
          Inventory next=controlPanel.get(nextSection);
          if (next == null) {
          }
          player.openInventory(next);
          event.setCancelled(true);
          return;
        }
        player.closeInventory();
        event.setCancelled(true);
        return;
      }
    }
  }
}"
34088,"/** 
 * Sets an island to be owned by another player. If the new owner had an island, that island is released to null ownership
 * @param island
 * @param newOwner
 */
protected void setIslandOwner(Island island,UUID newOwner){
  if (ownershipMap.containsKey(newOwner)) {
    Island oldIsland=ownershipMap.get(newOwner);
    oldIsland.setOwner(null);
    ownershipMap.remove(newOwner);
  }
  if (newOwner != null && island != null) {
    UUID owner=island.getOwner();
    island.setOwner(newOwner);
    if (ownershipMap.containsKey(owner)) {
      ownershipMap.remove(owner);
    }
    if (ownershipMap.containsKey(newOwner)) {
      ownershipMap.get(newOwner).setOwner(null);
    }
    ownershipMap.put(newOwner,island);
  }
}","/** 
 * Sets an island to be owned by another player. If the new owner had an island, that island is released to null ownership
 * @param island
 * @param newOwner
 */
protected void setIslandOwner(Island island,UUID newOwner){
  UUID oldOwner=island.getOwner();
  if (newOwner == null && oldOwner != null) {
    ownershipMap.remove(oldOwner);
    island.setOwner(null);
    return;
  }
  if (ownershipMap.containsKey(newOwner)) {
    Island oldIsland=ownershipMap.get(newOwner);
    oldIsland.setOwner(null);
    ownershipMap.remove(newOwner);
  }
  if (newOwner != null && island != null) {
    island.setOwner(newOwner);
    if (oldOwner != null && ownershipMap.containsKey(oldOwner)) {
      ownershipMap.remove(oldOwner);
    }
    ownershipMap.put(newOwner,island);
  }
}"
34089,"@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + Locale.islandnew);
      final Location cowSpot=newIsland(sender);
      plugin.homeTeleport(player);
      plugin.resetPlayer(player);
      if (Settings.resetMoney) {
        resetMoney(player);
      }
      plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
      plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
        @Override public void run(){
          player.getWorld().spawnEntity(cowSpot,EntityType.COW);
        }
      }
,40L);
      setResetWaitTime(player);
      if (!Locale.islandSubTitle.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandSubTitle+ ""String_Node_Str"");
      }
      if (!Locale.islandTitle.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandTitle+ ""String_Node_Str"");
      }
      if (!Locale.islandDonate.isEmpty() && !Locale.islandURL.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandDonate+ ""String_Node_Str""+ ""String_Node_Str""+ Locale.islandURL+ ""String_Node_Str"");
      }
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !plugin.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        player.sendMessage(ChatColor.GREEN + Locale.lockLocking);
        plugin.tellOfflineTeam(playerUUID,Locale.lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.tellTeam(playerUUID,Locale.lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + Locale.lockUnlocking);
        plugin.tellOfflineTeam(playerUUID,Locale.lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.tellTeam(playerUUID,Locale.lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
    plugin.homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(ControlPanel.miniShop);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.errorWrongWorld);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + Locale.islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + Locale.islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
CoopPlay.getInstance().clearMyInvitedCoops(player);
CoopPlay.getInstance().clearMyCoops(player);
final Location oldIsland=plugin.getPlayers().getIslandLocation(playerUUID);
final Location cowSpot=newIsland(sender);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.homeTeleport(player);
plugin.resetPlayer(player);
if (Settings.resetMoney) {
  resetMoney(player);
}
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    player.getWorld().spawnEntity(cowSpot,EntityType.COW);
  }
}
,40L);
setResetWaitTime(player);
plugin.removeWarp(playerUUID);
if (oldIsland != null) {
  CoopPlay.getInstance().clearAllIslandCoops(oldIsland);
  new DeleteIslandChunk(plugin,oldIsland);
}
runCommands(Settings.resetCommands,player.getUniqueId());
return true;
}
 else {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
 else {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpIsland);
}
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeleport);
if (plugin.getGrid().getSpawn() != null) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSetHome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevel);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarps);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeam);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpInvite);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandHelpLock);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  return true;
}
if (!plugin.playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
  return true;
}
Inventory inv=plugin.biomes.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ Locale.helpColor+ Locale.islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + Locale.inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + Locale.invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + Locale.rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + Locale.rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + Locale.rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + Locale.leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    plugin.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + Locale.leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      plugin.setMessage(teamLeader,ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + Locale.teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ Locale.invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + Locale.warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=plugin.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((ASkyBlock.isSafeLocation(inFront))) {
      float yaw=ASkyBlock.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      Player warpOwner=plugin.getServer().getPlayer(foundWarp);
      if (warpOwner != null) {
        warpOwner.sendMessage(Locale.warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
      }
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    plugin.removeWarp(warpSpot);
    return true;
  }
  if (!(ASkyBlock.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
calculateIslandLevel(player,targetPlayerUUID);
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + Locale.coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + Locale.coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + Locale.coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + Locale.coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + Locale.coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + Locale.expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + Locale.expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + Locale.expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    target.getInventory().clear();
    target.getInventory().setArmorContents(null);
    target.getInventory().setHelmet(null);
    target.getInventory().setChestplate(null);
    target.getInventory().setLeggings(null);
    target.getInventory().setBoots(null);
    target.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(target.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
    plugin.getPlayers().save(target.getUniqueId());
    plugin.topTenAddEntry(playerUUID,0);
    target.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  plugin.setMessage(targetPlayer,ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.removeWarp(targetPlayer);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + Locale.makeLeaderyouAreNowTheOwner);
    }
 else {
      plugin.setMessage(targetPlayer,Locale.makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + Locale.makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}","@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + Locale.islandnew);
      final Location cowSpot=newIsland(sender);
      plugin.homeTeleport(player);
      plugin.resetPlayer(player);
      if (Settings.resetMoney) {
        resetMoney(player);
      }
      plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
      plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
        @Override public void run(){
          player.getWorld().spawnEntity(cowSpot,EntityType.COW);
        }
      }
,40L);
      setResetWaitTime(player);
      if (!Locale.islandSubTitle.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandSubTitle+ ""String_Node_Str"");
      }
      if (!Locale.islandTitle.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandTitle+ ""String_Node_Str"");
      }
      if (!Locale.islandDonate.isEmpty() && !Locale.islandURL.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandDonate+ ""String_Node_Str""+ ""String_Node_Str""+ Locale.islandURL+ ""String_Node_Str"");
      }
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !plugin.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.openInventory(SettingsPanel.islandGuardPanel());
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        player.sendMessage(ChatColor.GREEN + Locale.lockLocking);
        plugin.tellOfflineTeam(playerUUID,Locale.lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.tellTeam(playerUUID,Locale.lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + Locale.lockUnlocking);
        plugin.tellOfflineTeam(playerUUID,Locale.lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.tellTeam(playerUUID,Locale.lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
    plugin.homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy) {
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.openInventory(ControlPanel.miniShop);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.errorWrongWorld);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + Locale.islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + Locale.islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
CoopPlay.getInstance().clearMyInvitedCoops(player);
CoopPlay.getInstance().clearMyCoops(player);
final Location oldIsland=plugin.getPlayers().getIslandLocation(playerUUID);
final Location cowSpot=newIsland(sender);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.homeTeleport(player);
plugin.resetPlayer(player);
if (Settings.resetMoney) {
  resetMoney(player);
}
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    player.getWorld().spawnEntity(cowSpot,EntityType.COW);
  }
}
,40L);
setResetWaitTime(player);
plugin.removeWarp(playerUUID);
if (oldIsland != null) {
  CoopPlay.getInstance().clearAllIslandCoops(oldIsland);
  new DeleteIslandChunk(plugin,oldIsland);
}
runCommands(Settings.resetCommands,player.getUniqueId());
return true;
}
 else {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
 else {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpIsland);
}
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeleport);
if (plugin.getGrid().getSpawn() != null) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSetHome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevel);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarps);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeam);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpInvite);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandHelpLock);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  return true;
}
if (!plugin.playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
  return true;
}
Inventory inv=plugin.biomes.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ Locale.helpColor+ Locale.islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + Locale.inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + Locale.invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + Locale.rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + Locale.rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + Locale.rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + Locale.leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    plugin.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + Locale.leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      plugin.setMessage(teamLeader,ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + Locale.teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ Locale.invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + Locale.warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=plugin.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((ASkyBlock.isSafeLocation(inFront))) {
      float yaw=ASkyBlock.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      Player warpOwner=plugin.getServer().getPlayer(foundWarp);
      if (warpOwner != null) {
        warpOwner.sendMessage(Locale.warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
      }
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    plugin.removeWarp(warpSpot);
    return true;
  }
  if (!(ASkyBlock.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
calculateIslandLevel(player,targetPlayerUUID);
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
      if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
        Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
      }
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + Locale.coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + Locale.coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + Locale.coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + Locale.coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + Locale.coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + Locale.expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + Locale.expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + Locale.expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  plugin.getLogger().info(""String_Node_Str"");
  target.sendMessage(ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    target.getInventory().clear();
    target.getInventory().setArmorContents(null);
    target.getInventory().setHelmet(null);
    target.getInventory().setChestplate(null);
    target.getInventory().setLeggings(null);
    target.getInventory().setBoots(null);
    target.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(target.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
    plugin.getPlayers().save(target.getUniqueId());
    plugin.topTenAddEntry(playerUUID,0);
    target.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  plugin.getLogger().info(""String_Node_Str"" + targetPlayer.toString());
  plugin.setMessage(targetPlayer,ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.removeWarp(targetPlayer);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
plugin.getPlayers().save(targetPlayer);
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + Locale.makeLeaderyouAreNowTheOwner);
    }
 else {
      plugin.setMessage(targetPlayer,Locale.makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + Locale.makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}"
34090,"/** 
 * Adds a player to a team. The player and the teamleader MAY be the same
 * @param playerUUID
 * @param teamLeader
 * @return
 */
protected boolean addPlayertoTeam(final UUID playerUUID,final UUID teamLeader){
  plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
  if (!playerUUID.equals(teamLeader)) {
    if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
      plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
      plugin.getLogger().info(""String_Node_Str"");
    }
 else {
      plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
      plugin.getLogger().info(""String_Node_Str"");
    }
    if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
      plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
    }
    if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
      plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
    }
  }
  return true;
}","/** 
 * Adds a player to a team. The player and the teamleader MAY be the same
 * @param playerUUID
 * @param teamLeader
 * @return
 */
protected boolean addPlayertoTeam(final UUID playerUUID,final UUID teamLeader){
  plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
  if (!playerUUID.equals(teamLeader)) {
    if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
      plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
    }
 else {
      plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
    }
    if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
      plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
    }
    if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
      plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
    }
  }
  return true;
}"
34091,"/** 
 * Removes a player from a team run by teamleader
 * @param player
 * @param teamleader
 */
protected void removePlayerFromTeam(final UUID player,final UUID teamleader){
  plugin.getPlayers().removeMember(teamleader,player);
  if (!player.equals(teamleader)) {
    plugin.getPlayers().setLeaveTeam(player);
    plugin.getPlayers().setHomeLocation(player,null);
    plugin.getPlayers().setIslandLocation(player,null);
    runCommands(Settings.leaveCommands,player);
  }
 else {
    plugin.getPlayers().setLeaveTeam(player);
  }
}","/** 
 * Removes a player from a team run by teamleader
 * @param player
 * @param teamleader
 */
protected void removePlayerFromTeam(final UUID player,final UUID teamleader){
  plugin.getPlayers().removeMember(teamleader,player);
  if (!player.equals(teamleader)) {
    plugin.getPlayers().setLeaveTeam(player);
    plugin.getPlayers().setHomeLocation(player,null);
    plugin.getPlayers().setIslandLocation(player,null);
    plugin.getPlayers().setTeamIslandLocation(player,null);
    runCommands(Settings.leaveCommands,player);
  }
 else {
    plugin.getPlayers().setLeaveTeam(player);
  }
}"
34092,"/** 
 * Prevents teleporting when falling based on setting
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onPlayerTeleport(final PlayerTeleportEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (!e.getFrom().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (!Settings.allowTeleportWhenFalling && e.getPlayer().getGameMode().equals(GameMode.SURVIVAL) && !e.getPlayer().isOp()) {
    if (plugin.isFalling(e.getPlayer().getUniqueId())) {
      e.getPlayer().sendMessage(Locale.islandcannotTeleport);
      e.setCancelled(true);
      if (e.getPlayer().getLocation().getBlockY() < 0) {
        e.getPlayer().setHealth(0D);
        plugin.unsetFalling(e.getPlayer().getUniqueId());
      }
      return;
    }
  }
  Island islandTo=plugin.getGrid().getProtectedIslandAt(e.getTo());
  Island islandFrom=plugin.getGrid().getProtectedIslandAt(e.getFrom());
  if (islandTo != null && islandTo.getOwner() != null) {
    if (islandTo != islandFrom) {
      if (islandTo.isLocked()) {
        e.getPlayer().sendMessage(ChatColor.RED + Locale.lockIslandLocked);
        if (!plugin.locationIsOnIsland(e.getPlayer(),e.getTo()) && !e.getPlayer().isOp() && !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
          e.setCancelled(true);
          return;
        }
      }
      e.getPlayer().sendMessage(Locale.lockNowEntering.replace(""String_Node_Str"",plugin.getPlayers().getName(islandTo.getOwner())));
    }
  }
}","/** 
 * Prevents teleporting when falling based on setting
 * @param e
 */
@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onPlayerTeleport(final PlayerTeleportEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (!e.getFrom().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (plugin.getGrid() == null) {
    return;
  }
  if (!Settings.allowTeleportWhenFalling && e.getPlayer().getGameMode().equals(GameMode.SURVIVAL) && !e.getPlayer().isOp()) {
    if (plugin.isFalling(e.getPlayer().getUniqueId())) {
      e.getPlayer().sendMessage(Locale.islandcannotTeleport);
      e.setCancelled(true);
      if (e.getPlayer().getLocation().getBlockY() < 0) {
        e.getPlayer().setHealth(0D);
        plugin.unsetFalling(e.getPlayer().getUniqueId());
      }
      return;
    }
  }
  Island islandTo=plugin.getGrid().getProtectedIslandAt(e.getTo());
  Island islandFrom=plugin.getGrid().getProtectedIslandAt(e.getFrom());
  if (islandTo != null && islandTo.getOwner() != null) {
    if (islandTo != islandFrom) {
      if (islandTo.isLocked()) {
        e.getPlayer().sendMessage(ChatColor.RED + Locale.lockIslandLocked);
        if (!plugin.locationIsOnIsland(e.getPlayer(),e.getTo()) && !e.getPlayer().isOp() && !VaultHelper.checkPerm(e.getPlayer(),Settings.PERMPREFIX + ""String_Node_Str"")) {
          e.setCancelled(true);
          return;
        }
      }
      e.getPlayer().sendMessage(Locale.lockNowEntering.replace(""String_Node_Str"",plugin.getPlayers().getName(islandTo.getOwner())));
    }
  }
}"
34093,"/** 
 * Transfers ownership of an island from one player to another
 * @param oldOwner
 * @param newOwner
 * @return
 */
protected boolean transferIsland(final UUID oldOwner,final UUID newOwner){
  if (players.hasIsland(oldOwner)) {
    Location islandLoc=players.getIslandLocation(oldOwner);
    players.setHasIsland(newOwner,true);
    players.setIslandLocation(newOwner,islandLoc);
    players.setTeamIslandLocation(newOwner,null);
    players.setHasIsland(oldOwner,false);
    players.setIslandLocation(oldOwner,null);
    players.setTeamIslandLocation(oldOwner,islandLoc);
    Island island=grid.getIslandAt(islandLoc);
    if (island != null) {
      grid.setIslandOwner(island,newOwner);
    }
    while (topTenList.values().remove(oldOwner))     ;
    return true;
  }
  return false;
}","/** 
 * Transfers ownership of an island from one player to another
 * @param oldOwner
 * @param newOwner
 * @return
 */
protected boolean transferIsland(final UUID oldOwner,final UUID newOwner){
  if (players.hasIsland(oldOwner)) {
    Location islandLoc=players.getIslandLocation(oldOwner);
    players.setHasIsland(newOwner,true);
    players.setIslandLocation(newOwner,islandLoc);
    players.setTeamIslandLocation(newOwner,null);
    players.setHasIsland(oldOwner,false);
    players.setIslandLocation(oldOwner,null);
    players.setTeamIslandLocation(oldOwner,islandLoc);
    Island island=grid.getIslandAt(islandLoc);
    if (island != null) {
      grid.setIslandOwner(island,newOwner);
    }
    topTenList.remove(oldOwner);
    return true;
  }
  return false;
}"
34094,"@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + Locale.islandnew);
      final Location cowSpot=newIsland(sender);
      plugin.homeTeleport(player);
      plugin.resetPlayer(player);
      if (Settings.resetMoney) {
        resetMoney(player);
      }
      plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
      plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
        @Override public void run(){
          player.getWorld().spawnEntity(cowSpot,EntityType.COW);
        }
      }
,40L);
      setResetWaitTime(player);
      if (!Locale.islandSubTitle.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandSubTitle+ ""String_Node_Str"");
      }
      if (!Locale.islandTitle.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandTitle+ ""String_Node_Str"");
      }
      if (!Locale.islandDonate.isEmpty() && !Locale.islandURL.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandDonate+ ""String_Node_Str""+ ""String_Node_Str""+ Locale.islandURL+ ""String_Node_Str"");
      }
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !plugin.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      plugin.getLogger().info(""String_Node_Str"");
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        player.sendMessage(ChatColor.GREEN + Locale.lockLocking);
        plugin.tellOfflineTeam(playerUUID,Locale.lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.tellTeam(playerUUID,Locale.lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + Locale.lockUnlocking);
        plugin.tellOfflineTeam(playerUUID,Locale.lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.tellTeam(playerUUID,Locale.lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
    plugin.homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy && player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.miniShop);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + Locale.islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + Locale.islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
CoopPlay.getInstance().clearMyInvitedCoops(player);
CoopPlay.getInstance().clearMyCoops(player);
final Location oldIsland=plugin.getPlayers().getIslandLocation(playerUUID);
final Location cowSpot=newIsland(sender);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.homeTeleport(player);
plugin.resetPlayer(player);
if (Settings.resetMoney) {
  resetMoney(player);
}
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    player.getWorld().spawnEntity(cowSpot,EntityType.COW);
  }
}
,40L);
setResetWaitTime(player);
plugin.removeWarp(playerUUID);
if (oldIsland != null) {
  CoopPlay.getInstance().clearAllIslandCoops(oldIsland);
  new DeleteIslandChunk(plugin,oldIsland);
}
runCommands(Settings.resetCommands,player.getUniqueId());
return true;
}
 else {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
 else {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpIsland);
}
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeleport);
if (plugin.getGrid().getSpawn() != null) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSetHome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevel);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarps);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeam);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpInvite);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandHelpLock);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  return true;
}
if (!plugin.playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
  return true;
}
Inventory inv=plugin.biomes.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ Locale.helpColor+ Locale.islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + Locale.inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + Locale.invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + Locale.rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + Locale.rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + Locale.rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + Locale.leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    plugin.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + Locale.leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      plugin.setMessage(teamLeader,ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + Locale.teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ Locale.invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + Locale.warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=plugin.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((ASkyBlock.isSafeLocation(inFront))) {
      float yaw=ASkyBlock.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      Player warpOwner=plugin.getServer().getPlayer(foundWarp);
      if (warpOwner != null) {
        warpOwner.sendMessage(Locale.warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
      }
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    plugin.removeWarp(warpSpot);
    return true;
  }
  if (!(ASkyBlock.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
calculateIslandLevel(player,targetPlayerUUID);
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + Locale.coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + Locale.coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + Locale.coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + Locale.coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + Locale.coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + Locale.expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + Locale.expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + Locale.expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    target.getInventory().clear();
    target.getInventory().setArmorContents(null);
    target.getInventory().setHelmet(null);
    target.getInventory().setChestplate(null);
    target.getInventory().setLeggings(null);
    target.getInventory().setBoots(null);
    target.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(target.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
    plugin.getPlayers().save(target.getUniqueId());
    plugin.topTenAddEntry(playerUUID,0);
    target.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  plugin.setMessage(targetPlayer,ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.removeWarp(targetPlayer);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + Locale.makeLeaderyouAreNowTheOwner);
    }
 else {
      plugin.setMessage(targetPlayer,Locale.makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + Locale.makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}","@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + Locale.islandnew);
      final Location cowSpot=newIsland(sender);
      plugin.homeTeleport(player);
      plugin.resetPlayer(player);
      if (Settings.resetMoney) {
        resetMoney(player);
      }
      plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
      plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
        @Override public void run(){
          player.getWorld().spawnEntity(cowSpot,EntityType.COW);
        }
      }
,40L);
      setResetWaitTime(player);
      if (!Locale.islandSubTitle.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandSubTitle+ ""String_Node_Str"");
      }
      if (!Locale.islandTitle.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandTitle+ ""String_Node_Str"");
      }
      if (!Locale.islandDonate.isEmpty() && !Locale.islandURL.isEmpty()) {
        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),""String_Node_Str"" + player.getName() + ""String_Node_Str""+ Locale.islandDonate+ ""String_Node_Str""+ ""String_Node_Str""+ Locale.islandURL+ ""String_Node_Str"");
      }
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || Settings.allowTeleportWhenFalling || !plugin.isFalling(playerUUID)|| (player.isOp() && !Settings.damageOps)) {
          plugin.homeTeleport(player);
          if (Settings.islandRemoveMobs) {
            plugin.removeMobs(player.getLocation());
          }
        }
 else {
          player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
      return true;
    }
    Island island=plugin.getGrid().getIsland(playerUUID);
    if (island == null) {
      plugin.getLogger().info(""String_Node_Str"");
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
 else {
      if (!island.isLocked()) {
        player.sendMessage(ChatColor.GREEN + Locale.lockLocking);
        plugin.tellOfflineTeam(playerUUID,Locale.lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.tellTeam(playerUUID,Locale.lockPlayerLocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(true);
      }
 else {
        player.sendMessage(ChatColor.GREEN + Locale.lockUnlocking);
        plugin.tellOfflineTeam(playerUUID,Locale.lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        plugin.tellTeam(playerUUID,Locale.lockPlayerUnlocked.replace(""String_Node_Str"",player.getDisplayName()));
        island.setLocked(false);
      }
      return true;
    }
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
    plugin.homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    return true;
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy && player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.miniShop);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + Locale.islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + Locale.islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.islandresetConfirm.replace(""String_Node_Str"",String.valueOf(Settings.resetConfirmWait)));
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,(Settings.resetConfirmWait * 20));
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
CoopPlay.getInstance().clearMyInvitedCoops(player);
CoopPlay.getInstance().clearMyCoops(player);
final Location oldIsland=plugin.getPlayers().getIslandLocation(playerUUID);
final Location cowSpot=newIsland(sender);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.homeTeleport(player);
plugin.resetPlayer(player);
if (Settings.resetMoney) {
  resetMoney(player);
}
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    player.getWorld().spawnEntity(cowSpot,EntityType.COW);
  }
}
,40L);
setResetWaitTime(player);
plugin.removeWarp(playerUUID);
if (oldIsland != null) {
  CoopPlay.getInstance().clearAllIslandCoops(oldIsland);
  new DeleteIslandChunk(plugin,oldIsland);
}
runCommands(Settings.resetCommands,player.getUniqueId());
return true;
}
 else {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
 else {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpIsland);
}
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeleport);
if (plugin.getGrid().getSpawn() != null) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSpawn);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpRestart);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSetHome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevel);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevelPlayer);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTop);
}
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarps);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeam);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpInvite);
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpBiome);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpCoop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandHelpLock);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  return true;
}
if (!plugin.playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
  return true;
}
Inventory inv=plugin.biomes.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getGrid().getSpawn() != null) {
player.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.topTenShow(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (plugin.playerIsOnIsland(player)) {
  if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
    player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  }
 else {
    calculateIslandLevel(player,playerUUID);
  }
  return true;
}
player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(Locale.helpColor + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ Locale.helpColor+ Locale.islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID,true);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + Locale.inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + Locale.invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + Locale.rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + Locale.rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + Locale.rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + Locale.leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    plugin.getPlayers().startInviteCoolDownTimer(playerUUID,plugin.getPlayers().getTeamIslandLocation(teamLeader));
    removePlayerFromTeam(playerUUID,teamLeader);
    plugin.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + Locale.leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      plugin.setMessage(teamLeader,ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + Locale.teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ Locale.invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + Locale.warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=plugin.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((ASkyBlock.isSafeLocation(inFront))) {
      float yaw=ASkyBlock.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      Player warpOwner=plugin.getServer().getPlayer(foundWarp);
      if (warpOwner != null) {
        warpOwner.sendMessage(Locale.warpsPlayerWarped.replace(""String_Node_Str"",player.getDisplayName()));
      }
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    plugin.removeWarp(warpSpot);
    return true;
  }
  if (!(ASkyBlock.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
calculateIslandLevel(player,targetPlayerUUID);
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
long time=plugin.getPlayers().getInviteCoolDownTime(invitedPlayerUUID,plugin.getPlayers().getIslandLocation(playerUUID));
if (time > 0 && !player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorCoolDown.replace(""String_Node_Str"",String.valueOf(time)));
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + Locale.coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + Locale.coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + Locale.coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (targetPlayerUUID.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.expelNotYourself);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + Locale.coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + Locale.coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.isOnIsland(player,target)) {
if (plugin.getPlayers().inTeam(targetPlayerUUID) || plugin.getPlayers().hasIsland(targetPlayerUUID)) {
plugin.homeTeleport(target);
}
 else {
if (!target.performCommand(Settings.SPAWNCOMMAND)) {
  target.teleport(player.getWorld().getSpawnLocation());
}
}
target.sendMessage(ChatColor.RED + Locale.expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + Locale.expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + Locale.expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  plugin.getPlayers().startInviteCoolDownTimer(targetPlayer,plugin.getPlayers().getIslandLocation(playerUUID));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    target.getInventory().clear();
    target.getInventory().setArmorContents(null);
    target.getInventory().setHelmet(null);
    target.getInventory().setChestplate(null);
    target.getInventory().setLeggings(null);
    target.getInventory().setBoots(null);
    target.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(target.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(target.getUniqueId(),0);
    plugin.getPlayers().save(target.getUniqueId());
    plugin.topTenAddEntry(playerUUID,0);
    target.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  plugin.setMessage(targetPlayer,ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.removeWarp(targetPlayer);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (targetPlayer.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + Locale.makeLeaderyouAreNowTheOwner);
    }
 else {
      plugin.setMessage(targetPlayer,Locale.makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + Locale.makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}"
34095,"@Override public void run(){
  if (!plugin.isCalculatingLevel()) {
    this.cancel();
  }
  calculateSlice(counter,(counter - slice));
  counter=counter - slice - 1;
  if (counter <= 0) {
    plugin.getPlayers().setIslandLevel(targetPlayer,blockcount / 100);
    plugin.getPlayers().save(targetPlayer);
    if (plugin.getPlayers().inTeam(targetPlayer)) {
      for (      UUID member : plugin.getPlayers().getMembers(targetPlayer)) {
        plugin.getPlayers().setIslandLevel(member,blockcount / 100);
        plugin.getPlayers().save(member);
      }
    }
    if (!this.silent) {
      if (plugin.getPlayers().getIslandLevel(targetPlayer) > oldLevel) {
        plugin.tellOfflineTeam(targetPlayer,ChatColor.GREEN + Locale.islandislandLevelis + ""String_Node_Str""+ ChatColor.WHITE+ plugin.getPlayers().getIslandLevel(targetPlayer));
      }
      if (asker.isOnline()) {
        asker.sendMessage(ChatColor.GREEN + Locale.islandislandLevelis + ""String_Node_Str""+ ChatColor.WHITE+ plugin.getPlayers().getIslandLevel(targetPlayer));
      }
    }
    this.silent=false;
    plugin.topTenAddEntry(targetPlayer,blockcount / 100);
    plugin.setCalculatingLevel(false);
    this.cancel();
  }
}","@Override public void run(){
  if (!plugin.isCalculatingLevel()) {
    this.cancel();
  }
  calculateSlice(counter,(counter - slice));
  counter=counter - slice - 1;
  if (counter <= 0) {
    plugin.getPlayers().setIslandLevel(targetPlayer,blockcount / 100);
    plugin.getPlayers().save(targetPlayer);
    if (plugin.getPlayers().inTeam(targetPlayer)) {
      for (      UUID member : plugin.getPlayers().getMembers(targetPlayer)) {
        plugin.getPlayers().setIslandLevel(member,blockcount / 100);
        plugin.getPlayers().save(member);
      }
    }
    if (!this.silent) {
      if (plugin.getPlayers().getIslandLevel(targetPlayer) > oldLevel) {
        plugin.tellOfflineTeam(targetPlayer,ChatColor.GREEN + Locale.islandislandLevelis + ""String_Node_Str""+ ChatColor.WHITE+ plugin.getPlayers().getIslandLevel(targetPlayer));
      }
      if (asker.isOnline()) {
        asker.sendMessage(ChatColor.GREEN + Locale.islandislandLevelis + ""String_Node_Str""+ ChatColor.WHITE+ plugin.getPlayers().getIslandLevel(targetPlayer));
      }
    }
    this.silent=false;
    if (plugin.getPlayers().inTeam(targetPlayer)) {
      UUID leader=plugin.getPlayers().getTeamLeader(targetPlayer);
      if (leader != null) {
        plugin.topTenAddEntry(leader,blockcount / 100);
      }
    }
 else {
      plugin.topTenAddEntry(targetPlayer,blockcount / 100);
    }
    plugin.setCalculatingLevel(false);
    this.cancel();
  }
}"
34096,"protected static List<String> chop(ChatColor color,String longLine,int length){
  List<String> result=new ArrayList<String>();
  int i=0;
  for (i=0; i < longLine.length(); i+=length) {
    int endIndex=Math.min(i + length,longLine.length());
    String line=longLine.substring(i,endIndex);
    if (endIndex < longLine.length()) {
      if (!line.substring(line.length() - 1).equals(""String_Node_Str"")) {
        if (!longLine.substring(endIndex,endIndex + 1).equals(""String_Node_Str"")) {
          int lastSpace=line.lastIndexOf(""String_Node_Str"");
          if (lastSpace < line.length()) {
            line=line.substring(0,lastSpace);
            i-=(length - lastSpace - 1);
          }
        }
      }
    }
    result.add(color + line);
  }
  return result;
}","protected static List<String> chop(ChatColor color,String longLine,int length){
  List<String> result=new ArrayList<String>();
  int i=0;
  for (i=0; i < longLine.length(); i+=length) {
    int endIndex=Math.min(i + length,longLine.length());
    String line=longLine.substring(i,endIndex);
    if (endIndex < longLine.length()) {
      if (!line.substring(line.length() - 1).equals(""String_Node_Str"")) {
        if (!longLine.substring(endIndex,endIndex + 1).equals(""String_Node_Str"")) {
          int lastSpace=line.lastIndexOf(""String_Node_Str"");
          if (lastSpace != -1 && lastSpace < line.length()) {
            line=line.substring(0,lastSpace);
            i-=(length - lastSpace - 1);
          }
        }
      }
    }
    result.add(color + line);
  }
  return result;
}"
34097,"/** 
 * Returns the number of challenges that must still be completed to finish a level Based on how many challenges there are in a level, how many have been done and how many are okay to leave undone.
 * @param player
 * @param level
 * @return
 */
protected int checkLevelCompletion(final Player player,final String level){
  int challengesCompleted=0;
  List<String> levelChallengeList=challengeList.get(level);
  for (  String challenge : levelChallengeList) {
    if (players.checkChallenge(player.getUniqueId(),challenge)) {
      challengesCompleted++;
    }
  }
  return levelChallengeList.size() - Settings.waiverAmount - challengesCompleted;
}","/** 
 * Returns the number of challenges that must still be completed to finish a level Based on how many challenges there are in a level, how many have been done and how many are okay to leave undone.
 * @param player
 * @param level
 * @return
 */
protected int checkLevelCompletion(final Player player,final String level){
  int challengesCompleted=0;
  List<String> levelChallengeList=challengeList.get(level);
  if (levelChallengeList != null) {
    for (    String challenge : levelChallengeList) {
      if (players.checkChallenge(player.getUniqueId(),challenge)) {
        challengesCompleted++;
      }
    }
    return levelChallengeList.size() - Settings.waiverAmount - challengesCompleted;
  }
  return 0;
}"
34098,"/** 
 * Determines if an island is at a location in this area location. Also checks if the spawn island is in this area.
 * @param loc
 * @return
 */
protected boolean islandAtLocation(final Location loc){
  if (loc == null) {
    return true;
  }
  if (loc.getBlock().getType().equals(Material.BEDROCK)) {
    return true;
  }
  Vector v=loc.toVector();
  v.multiply(new Vector(1,0,1));
  if ((getSpawn().getSpawnLoc() != null && v.distanceSquared(getSpawn().getSpawnLoc().toVector().multiply(new Vector(1,0,1))) < (double)((double)Settings.islandDistance) * Settings.islandDistance)) {
    return true;
  }
  String checkName=loc.getBlockX() + ""String_Node_Str"" + loc.getBlockZ()+ ""String_Node_Str"";
  final File islandFile=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str""+ File.separator+ checkName);
  if (islandFile.exists()) {
    return true;
  }
  final int px=loc.getBlockX();
  final int pz=loc.getBlockZ();
  for (int x=-5; x <= 5; x++) {
    for (int y=10; y <= 255; y++) {
      for (int z=-5; z <= 5; z++) {
        if (loc.getWorld().getBlockAt(x + px,y,z + pz).getType().equals(Material.BEDROCK)) {
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * Determines if an island is at a location in this area location. Also checks if the spawn island is in this area.
 * @param loc
 * @return
 */
protected boolean islandAtLocation(final Location loc){
  if (loc == null) {
    return true;
  }
  if (loc.getBlock().getType().equals(Material.BEDROCK)) {
    return true;
  }
  Vector v=loc.toVector();
  v.multiply(new Vector(1,0,1));
  if ((getSpawn().getSpawnLoc() != null && v.distanceSquared(getSpawn().getSpawnLoc().toVector().multiply(new Vector(1,0,1))) < (double)((double)spawn.getRange()) * spawn.getRange())) {
    return true;
  }
  String checkName=loc.getBlockX() + ""String_Node_Str"" + loc.getBlockZ()+ ""String_Node_Str"";
  final File islandFile=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str""+ File.separator+ checkName);
  if (islandFile.exists()) {
    return true;
  }
  final int px=loc.getBlockX();
  final int pz=loc.getBlockZ();
  for (int x=-5; x <= 5; x++) {
    for (int y=10; y <= 255; y++) {
      for (int z=-5; z <= 5; z++) {
        if (loc.getWorld().getBlockAt(x + px,y,z + pz).getType().equals(Material.BEDROCK)) {
          return true;
        }
      }
    }
  }
  return false;
}"
34099,"/** 
 * Checks if a player has enough for a challenge. Supports two types of checks, inventory and island
 * @param player
 * @param challenge
 * @param type
 * @return true if the player has everything required
 */
protected boolean hasRequired(final Player player,final String challenge,final String type){
  final String[] reqList=plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").split(""String_Node_Str"");
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    List<ItemStack> toBeRemoved=new ArrayList<ItemStack>();
    Material reqItem;
    int reqAmount=0;
    for (    final String s : reqList) {
      final String[] part=s.split(""String_Node_Str"");
      if (part.length == 2) {
        try {
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
          reqItem=Material.getMaterial(part[0]);
          reqAmount=Integer.parseInt(part[1]);
          ItemStack item=new ItemStack(reqItem);
          if (!player.getInventory().contains(reqItem)) {
            return false;
          }
 else {
            int amount=0;
            for (            Entry<Integer,? extends ItemStack> en : player.getInventory().all(reqItem).entrySet()) {
              ItemStack i=en.getValue();
              if (i.getDurability() == 0 || (reqItem == Material.MAP && i.getType() == Material.MAP)) {
                i.setItemMeta(null);
                player.getInventory().setItem(en.getKey(),i);
                if ((amount + i.getAmount()) < reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                }
 else                 if ((amount + i.getAmount()) == reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                  break;
                }
 else {
                  item.setAmount(reqAmount - amount);
                  item.setDurability(i.getDurability());
                  toBeRemoved.add(item);
                  amount+=i.getAmount();
                  break;
                }
              }
            }
            if (amount < reqAmount) {
              return false;
            }
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
          String materialList=""String_Node_Str"";
          boolean hint=false;
          for (          Material m : Material.values()) {
            materialList+=m.toString() + ""String_Node_Str"";
            if (m.toString().contains(s.substring(0,3).toUpperCase())) {
              plugin.getLogger().severe(""String_Node_Str"" + m.toString() + ""String_Node_Str"");
              hint=true;
            }
          }
          if (!hint) {
            plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
            plugin.getLogger().severe(materialList.substring(0,materialList.length() - 1));
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"");
          }
          return false;
        }
      }
 else       if (part.length == 3) {
        try {
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
          reqItem=Material.getMaterial(part[0]);
          int reqDurability=Integer.parseInt(part[1]);
          reqAmount=Integer.parseInt(part[2]);
          int count=reqAmount;
          ItemStack item=new ItemStack(reqItem);
          if (reqItem.equals(Material.POTION)) {
            ItemStack[] playerInv=player.getInventory().getContents();
            for (            ItemStack i : playerInv) {
              if (i != null && i.getType().equals(Material.POTION)) {
                if (i.getDurability() == reqDurability) {
                  item=i.clone();
                  if (item.getAmount() > reqAmount) {
                    item.setAmount(reqAmount);
                  }
                  count=count - item.getAmount();
                  toBeRemoved.add(item);
                }
              }
              if (count == 0) {
                break;
              }
            }
            if (count > 0) {
              return false;
            }
          }
 else {
            item.setDurability((short)reqDurability);
            int amount=0;
            for (            Entry<Integer,? extends ItemStack> en : player.getInventory().all(reqItem).entrySet()) {
              ItemStack i=en.getValue();
              if (i.getDurability() == reqDurability) {
                i.setItemMeta(null);
                player.getInventory().setItem(en.getKey(),i);
                if ((amount + i.getAmount()) < reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                }
 else                 if ((amount + i.getAmount()) == reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                  break;
                }
 else {
                  item.setAmount(reqAmount - amount);
                  item.setDurability(i.getDurability());
                  toBeRemoved.add(item);
                  amount+=i.getAmount();
                  break;
                }
              }
            }
            if (amount < reqAmount) {
              return false;
            }
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            plugin.getLogger().severe(""String_Node_Str"");
            for (            PotionType p : PotionType.values()) {
              plugin.getLogger().info(p.toString() + ""String_Node_Str"" + p.getDamageValue());
            }
          }
 else {
            String materialList=""String_Node_Str"";
            boolean hint=false;
            for (            Material m : Material.values()) {
              materialList+=m.toString() + ""String_Node_Str"";
              if (m.toString().contains(s.substring(0,3))) {
                plugin.getLogger().severe(""String_Node_Str"" + m.toString() + ""String_Node_Str"");
                hint=true;
              }
            }
            if (!hint) {
              plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
              plugin.getLogger().severe(materialList.substring(0,materialList.length() - 1));
            }
 else {
              plugin.getLogger().severe(""String_Node_Str"");
            }
            return false;
          }
          return false;
        }
      }
    }
    if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"")) {
      for (      ItemStack i : toBeRemoved) {
        HashMap<Integer,ItemStack> leftOver=player.getInventory().removeItem(i);
        if (!leftOver.isEmpty()) {
          plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
          for (          ItemStack left : leftOver.values()) {
            plugin.getLogger().info(left.toString());
          }
          return false;
        }
      }
    }
    return true;
  }
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    final HashMap<Material,Integer> neededItem=new HashMap<Material,Integer>();
    final HashMap<EntityType,Integer> neededEntities=new HashMap<EntityType,Integer>();
    for (int i=0; i < reqList.length; i++) {
      final String[] sPart=reqList[i].split(""String_Node_Str"");
      try {
        final int qty=Integer.parseInt(sPart[1]);
        Material item=Material.getMaterial(sPart[0]);
        if (item != null) {
          neededItem.put(item,qty);
        }
 else {
          EntityType entityType=EntityType.valueOf(sPart[0].toUpperCase());
          if (entityType != null) {
            neededEntities.put(entityType,qty);
          }
 else {
            plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str"");
            return false;
          }
        }
      }
 catch (      Exception intEx) {
        plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str"");
        return false;
      }
    }
    final Location l=player.getLocation();
    final int px=l.getBlockX();
    final int py=l.getBlockY();
    final int pz=l.getBlockZ();
    for (int x=-10; x <= 10; x++) {
      for (int y=-10; y <= 10; y++) {
        for (int z=-10; z <= 10; z++) {
          final Material b=new Location(l.getWorld(),px + x,py + y,pz + z).getBlock().getType();
          if (neededItem.containsKey(b)) {
            if (neededItem.get(b) == 1) {
              neededItem.remove(b);
            }
 else {
              neededItem.put(b,neededItem.get(b) - 1);
            }
          }
        }
      }
    }
    if (!neededItem.isEmpty()) {
      for (      Material missing : neededItem.keySet()) {
        player.sendMessage(ChatColor.RED + Locale.challengeserrorYouAreMissing + ""String_Node_Str""+ neededItem.get(missing)+ ""String_Node_Str""+ ASkyBlock.prettifyText(missing.toString()));
      }
      return false;
    }
 else {
      for (      Entity entity : player.getNearbyEntities(10,10,10)) {
        if (neededEntities.containsKey(entity.getType())) {
          if (neededEntities.get(entity.getType()) == 1) {
            neededEntities.remove(entity.getType());
          }
 else {
            neededEntities.put(entity.getType(),neededEntities.get(entity.getType()) - 1);
          }
        }
 else {
        }
      }
      if (neededEntities.isEmpty()) {
        return true;
      }
 else {
        for (        EntityType missing : neededEntities.keySet()) {
          player.sendMessage(ChatColor.RED + Locale.challengeserrorYouAreMissing + ""String_Node_Str""+ neededEntities.get(missing)+ ""String_Node_Str""+ ASkyBlock.prettifyText(missing.toString()));
        }
        return false;
      }
    }
  }
  return true;
}","/** 
 * Checks if a player has enough for a challenge. Supports two types of checks, inventory and island
 * @param player
 * @param challenge
 * @param type
 * @return true if the player has everything required
 */
protected boolean hasRequired(final Player player,final String challenge,final String type){
  final String[] reqList=plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").split(""String_Node_Str"");
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    List<ItemStack> toBeRemoved=new ArrayList<ItemStack>();
    Material reqItem;
    int reqAmount=0;
    for (    final String s : reqList) {
      final String[] part=s.split(""String_Node_Str"");
      if (part.length == 2) {
        try {
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
          reqItem=Material.getMaterial(part[0]);
          reqAmount=Integer.parseInt(part[1]);
          ItemStack item=new ItemStack(reqItem);
          if (!player.getInventory().contains(reqItem)) {
            return false;
          }
 else {
            int amount=0;
            for (            Entry<Integer,? extends ItemStack> en : player.getInventory().all(reqItem).entrySet()) {
              ItemStack i=en.getValue();
              if (i.getDurability() == 0 || (reqItem == Material.MAP && i.getType() == Material.MAP)) {
                i.setItemMeta(null);
                player.getInventory().setItem(en.getKey(),i);
                if ((amount + i.getAmount()) < reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                }
 else                 if ((amount + i.getAmount()) == reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                  break;
                }
 else {
                  item.setAmount(reqAmount - amount);
                  item.setDurability(i.getDurability());
                  toBeRemoved.add(item);
                  amount+=i.getAmount();
                  break;
                }
              }
            }
            if (amount < reqAmount) {
              return false;
            }
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
          String materialList=""String_Node_Str"";
          boolean hint=false;
          for (          Material m : Material.values()) {
            materialList+=m.toString() + ""String_Node_Str"";
            if (m.toString().contains(s.substring(0,3).toUpperCase())) {
              plugin.getLogger().severe(""String_Node_Str"" + m.toString() + ""String_Node_Str"");
              hint=true;
            }
          }
          if (!hint) {
            plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
            plugin.getLogger().severe(materialList.substring(0,materialList.length() - 1));
          }
 else {
            plugin.getLogger().severe(""String_Node_Str"");
          }
          return false;
        }
      }
 else       if (part.length == 3) {
        try {
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
 else           if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            part[0]=""String_Node_Str"";
          }
          reqItem=Material.getMaterial(part[0]);
          int reqDurability=Integer.parseInt(part[1]);
          reqAmount=Integer.parseInt(part[2]);
          int count=reqAmount;
          ItemStack item=new ItemStack(reqItem);
          if (reqItem.equals(Material.POTION)) {
            ItemStack[] playerInv=player.getInventory().getContents();
            for (            ItemStack i : playerInv) {
              if (i != null && i.getType().equals(Material.POTION)) {
                if (i.getDurability() == reqDurability) {
                  item=i.clone();
                  if (item.getAmount() > reqAmount) {
                    item.setAmount(reqAmount);
                  }
                  count=count - item.getAmount();
                  toBeRemoved.add(item);
                }
              }
              if (count == 0) {
                break;
              }
            }
            if (count > 0) {
              return false;
            }
          }
 else {
            item.setDurability((short)reqDurability);
            int amount=0;
            for (            Entry<Integer,? extends ItemStack> en : player.getInventory().all(reqItem).entrySet()) {
              ItemStack i=en.getValue();
              if (i.getDurability() == reqDurability) {
                i.setItemMeta(null);
                player.getInventory().setItem(en.getKey(),i);
                if ((amount + i.getAmount()) < reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                }
 else                 if ((amount + i.getAmount()) == reqAmount) {
                  toBeRemoved.add(i.clone());
                  amount+=i.getAmount();
                  break;
                }
 else {
                  item.setAmount(reqAmount - amount);
                  item.setDurability(i.getDurability());
                  toBeRemoved.add(item);
                  amount+=i.getAmount();
                  break;
                }
              }
            }
            if (amount < reqAmount) {
              return false;
            }
          }
        }
 catch (        Exception e) {
          plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
          player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
          if (part[0].equalsIgnoreCase(""String_Node_Str"")) {
            plugin.getLogger().severe(""String_Node_Str"");
            for (            PotionType p : PotionType.values()) {
              plugin.getLogger().info(p.toString() + ""String_Node_Str"" + p.getDamageValue());
            }
          }
 else {
            String materialList=""String_Node_Str"";
            boolean hint=false;
            for (            Material m : Material.values()) {
              materialList+=m.toString() + ""String_Node_Str"";
              if (m.toString().contains(s.substring(0,3))) {
                plugin.getLogger().severe(""String_Node_Str"" + m.toString() + ""String_Node_Str"");
                hint=true;
              }
            }
            if (!hint) {
              plugin.getLogger().severe(""String_Node_Str"" + s + ""String_Node_Str"");
              plugin.getLogger().severe(materialList.substring(0,materialList.length() - 1));
            }
 else {
              plugin.getLogger().severe(""String_Node_Str"");
            }
            return false;
          }
          return false;
        }
      }
    }
    if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"")) {
      for (      ItemStack i : toBeRemoved) {
        HashMap<Integer,ItemStack> leftOver=player.getInventory().removeItem(i);
        if (!leftOver.isEmpty()) {
          plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
          for (          ItemStack left : leftOver.values()) {
            plugin.getLogger().info(left.toString());
          }
          return false;
        }
      }
    }
    return true;
  }
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    final HashMap<Material,Integer> neededItem=new HashMap<Material,Integer>();
    final HashMap<EntityType,Integer> neededEntities=new HashMap<EntityType,Integer>();
    for (int i=0; i < reqList.length; i++) {
      final String[] sPart=reqList[i].split(""String_Node_Str"");
      try {
        final int qty=Integer.parseInt(sPart[1]);
        boolean isEntity=false;
        for (        EntityType entityType : EntityType.values()) {
          if (entityType.toString().equalsIgnoreCase(sPart[0])) {
            isEntity=true;
            break;
          }
        }
        if (isEntity) {
          EntityType entityType=EntityType.valueOf(sPart[0].toUpperCase());
          if (entityType != null) {
            neededEntities.put(entityType,qty);
          }
        }
 else {
          Material item=Material.getMaterial(sPart[0].toUpperCase());
          if (item != null) {
            neededItem.put(item,qty);
          }
 else {
            plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str"");
            return false;
          }
        }
      }
 catch (      Exception intEx) {
        plugin.getLogger().warning(""String_Node_Str"" + challenge + ""String_Node_Str"");
        return false;
      }
    }
    final Location l=player.getLocation();
    final int px=l.getBlockX();
    final int py=l.getBlockY();
    final int pz=l.getBlockZ();
    for (int x=-10; x <= 10; x++) {
      for (int y=-10; y <= 10; y++) {
        for (int z=-10; z <= 10; z++) {
          final Material b=new Location(l.getWorld(),px + x,py + y,pz + z).getBlock().getType();
          if (neededItem.containsKey(b)) {
            if (neededItem.get(b) == 1) {
              neededItem.remove(b);
            }
 else {
              neededItem.put(b,neededItem.get(b) - 1);
            }
          }
        }
      }
    }
    if (!neededItem.isEmpty()) {
      for (      Material missing : neededItem.keySet()) {
        player.sendMessage(ChatColor.RED + Locale.challengeserrorYouAreMissing + ""String_Node_Str""+ neededItem.get(missing)+ ""String_Node_Str""+ ASkyBlock.prettifyText(missing.toString()));
      }
      return false;
    }
 else {
      for (      Entity entity : player.getNearbyEntities(10,10,10)) {
        plugin.getLogger().info(""String_Node_Str"" + entity.getType().toString());
        if (neededEntities.containsKey(entity.getType())) {
          if (neededEntities.get(entity.getType()) == 1) {
            neededEntities.remove(entity.getType());
          }
 else {
            neededEntities.put(entity.getType(),neededEntities.get(entity.getType()) - 1);
          }
        }
 else {
        }
      }
      if (neededEntities.isEmpty()) {
        return true;
      }
 else {
        for (        EntityType missing : neededEntities.keySet()) {
          player.sendMessage(ChatColor.RED + Locale.challengeserrorYouAreMissing + ""String_Node_Str""+ neededEntities.get(missing)+ ""String_Node_Str""+ ASkyBlock.prettifyText(missing.toString()));
        }
        return false;
      }
    }
  }
  return true;
}"
34100,"/** 
 * Prevents usage of an Ender Chest
 * @param event
 */
@EventHandler(priority=EventPriority.LOWEST) void PlayerInteractEvent(PlayerInteractEvent event){
  if (debug) {
    plugin.getLogger().info(event.getEventName());
  }
  Player player=(Player)event.getPlayer();
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || player.getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
      if (event.getClickedBlock().getType() == Material.ENDER_CHEST) {
        if (!(event.getPlayer().hasPermission(Settings.PERMPREFIX + ""String_Node_Str""))) {
          event.setCancelled(true);
        }
 else {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
        }
      }
    }
  }
}","/** 
 * Prevents usage of an Ender Chest
 * @param event
 */
@EventHandler(priority=EventPriority.LOWEST) void PlayerInteractEvent(PlayerInteractEvent event){
  if (debug) {
    plugin.getLogger().info(event.getEventName());
  }
  Player player=(Player)event.getPlayer();
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || player.getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
      if (event.getClickedBlock().getType() == Material.ENDER_CHEST) {
        if (!(event.getPlayer().hasPermission(Settings.PERMPREFIX + ""String_Node_Str""))) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          event.setCancelled(true);
        }
      }
    }
  }
}"
34101,"/** 
 * Prevents crafting of EnderChest unless the player has permission
 * @param event
 */
@EventHandler(priority=EventPriority.LOW) public void onCraft(CraftItemEvent event){
  if (debug) {
    plugin.getLogger().info(event.getEventName());
  }
  Player player=(Player)event.getWhoClicked();
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || player.getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    if (event.getRecipe().getResult().getType() == Material.ENDER_CHEST) {
      if (!(player.hasPermission(Settings.PERMPREFIX + ""String_Node_Str""))) {
        event.setCancelled(true);
      }
 else {
        player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
      }
    }
  }
}","/** 
 * Prevents crafting of EnderChest unless the player has permission
 * @param event
 */
@EventHandler(priority=EventPriority.LOW) public void onCraft(CraftItemEvent event){
  if (debug) {
    plugin.getLogger().info(event.getEventName());
  }
  Player player=(Player)event.getWhoClicked();
  if (player.getWorld().getName().equalsIgnoreCase(Settings.worldName) || player.getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    if (event.getRecipe().getResult().getType() == Material.ENDER_CHEST) {
      if (!(player.hasPermission(Settings.PERMPREFIX + ""String_Node_Str""))) {
        player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
        event.setCancelled(true);
      }
    }
  }
}"
34102,"/** 
 * Returns true if this location is within the spawn area Spawn are is square and goes out to range in + and - x and z directions
 * @param loc
 * @return
 */
protected boolean isAtSpawn(Location loc){
  if (spawnLoc == null) {
    return false;
  }
  if (loc.getWorld().equals(bedrock.getWorld())) {
    if ((Math.abs(loc.getBlockX() - bedrock.getBlockX()) <= range) || (Math.abs(loc.getBlockZ() - bedrock.getBlockZ()) <= range)) {
      return true;
    }
  }
  return false;
}","/** 
 * Returns true if this location is within the spawn area Spawn are is square and goes out to range in + and - x and z directions
 * @param loc
 * @return
 */
protected boolean isAtSpawn(Location loc){
  if (spawnLoc == null) {
    return false;
  }
  if (loc.getWorld().equals(bedrock.getWorld())) {
    if ((Math.abs(loc.getBlockX() - bedrock.getBlockX()) <= range) && (Math.abs(loc.getBlockZ() - bedrock.getBlockZ()) <= range)) {
      return true;
    }
  }
  return false;
}"
34103,"/** 
 * Checks if this location is safe for a player to teleport to. Used by warps and boat exits Unsafe is any liquid or air and also if there's no space
 * @param l - Location to be checked
 * @return true if safe, otherwise false
 */
protected static boolean isSafeLocation(final Location l){
  if (l == null) {
    return false;
  }
  final Block ground=l.getBlock().getRelative(BlockFace.DOWN);
  final Block space1=l.getBlock();
  final Block space2=l.getBlock().getRelative(BlockFace.UP);
  if (ground.getType().equals(Material.AIR)) {
    return false;
  }
  if (ground.isLiquid() || space1.isLiquid() || space2.isLiquid()) {
    if (Settings.acidDamage > 0D) {
      return false;
    }
 else     if (ground.getType().equals(Material.STATIONARY_LAVA) || ground.getType().equals(Material.LAVA) || space1.getType().equals(Material.STATIONARY_LAVA)|| space1.getType().equals(Material.LAVA)|| space2.getType().equals(Material.STATIONARY_LAVA)|| space2.getType().equals(Material.LAVA)) {
      return false;
    }
  }
  if (ground.getType().equals(Material.CACTUS)) {
    return false;
  }
  if (ground.getType().equals(Material.BOAT)) {
    return false;
  }
  if (space1.getType().isSolid()) {
    if (!(space1.getType().equals(Material.SIGN_POST)) && !(space1.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  if (space2.getType().isSolid()) {
    if (!(space2.getType().equals(Material.SIGN_POST)) && !(space2.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks if this location is safe for a player to teleport to. Used by warps and boat exits Unsafe is any liquid or air and also if there's no space
 * @param l - Location to be checked
 * @return true if safe, otherwise false
 */
protected static boolean isSafeLocation(final Location l){
  if (l == null) {
    return false;
  }
  final Block ground=l.getBlock().getRelative(BlockFace.DOWN);
  final Block space1=l.getBlock();
  final Block space2=l.getBlock().getRelative(BlockFace.UP);
  if (ground.getType() == Material.AIR) {
    return false;
  }
  if (ground.isLiquid() || space1.isLiquid() || space2.isLiquid()) {
    if (Settings.acidDamage > 0D) {
      return false;
    }
 else     if (ground.getType().equals(Material.STATIONARY_LAVA) || ground.getType().equals(Material.LAVA) || space1.getType().equals(Material.STATIONARY_LAVA)|| space1.getType().equals(Material.LAVA)|| space2.getType().equals(Material.STATIONARY_LAVA)|| space2.getType().equals(Material.LAVA)) {
      return false;
    }
  }
  if (ground.getType().equals(Material.CACTUS)) {
    return false;
  }
  if (ground.getType().equals(Material.BOAT)) {
    return false;
  }
  if (space1.getType().isSolid()) {
    if (!(space1.getType().equals(Material.SIGN_POST)) && !(space1.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  if (space2.getType().isSolid()) {
    if (!(space2.getType().equals(Material.SIGN_POST)) && !(space2.getType().equals(Material.WALL_SIGN))) {
      return false;
    }
  }
  return true;
}"
34104,"/** 
 * Loads the various settings from the config.yml file into the plugin
 */
protected void loadPluginConfig(){
  try {
    getConfig();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  getChallengeConfig();
  getLocale();
  if (getConfig().contains(""String_Node_Str"")) {
    for (    String key : getConfig().getConfigurationSection(""String_Node_Str"").getKeys(true)) {
      String filename=getConfig().getString(""String_Node_Str"" + key);
      File schematicFile=new File(plugin.getDataFolder(),filename);
      if (schematicFile.exists()) {
        Settings.schematics.put(key,filename);
        getLogger().info(""String_Node_Str"" + filename + ""String_Node_Str""+ key);
      }
    }
  }
  Settings.useEconomy=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.resetCommands=getConfig().getStringList(""String_Node_Str"");
  Settings.useControlPanel=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowTeleportWhenFalling=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.maxTeamSize=getConfig().getInt(""String_Node_Str"",4);
  Settings.maxTeamSizeVIP=getConfig().getInt(""String_Node_Str"",8);
  Settings.maxTeamSizeVIP2=getConfig().getInt(""String_Node_Str"",12);
  Settings.worldName=getConfig().getString(""String_Node_Str"");
  Settings.createNether=getConfig().getBoolean(""String_Node_Str"",true);
  if (!Settings.createNether) {
    getLogger().info(""String_Node_Str"");
  }
  Settings.islandDistance=getConfig().getInt(""String_Node_Str"",110);
  if (Settings.islandDistance < 50) {
    Settings.islandDistance=50;
    getLogger().info(""String_Node_Str"");
  }
  Settings.islandXOffset=getConfig().getInt(""String_Node_Str"",0);
  if (Settings.islandXOffset < 0) {
    Settings.islandXOffset=0;
    getLogger().info(""String_Node_Str"");
  }
 else   if (Settings.islandXOffset > Settings.islandDistance) {
    Settings.islandXOffset=Settings.islandDistance;
    getLogger().info(""String_Node_Str"" + Settings.islandDistance);
  }
  Settings.islandZOffset=getConfig().getInt(""String_Node_Str"",0);
  if (Settings.islandZOffset < 0) {
    Settings.islandZOffset=0;
    getLogger().info(""String_Node_Str"");
  }
 else   if (Settings.islandZOffset > Settings.islandDistance) {
    Settings.islandZOffset=Settings.islandDistance;
    getLogger().info(""String_Node_Str"" + Settings.islandDistance);
  }
  if (Settings.GAMETYPE.equals(Settings.GameType.ACIDISLAND)) {
    Settings.acidDamage=getConfig().getDouble(""String_Node_Str"",5D);
    if (Settings.acidDamage > 100D) {
      Settings.acidDamage=100D;
    }
 else     if (Settings.acidDamage < 0D) {
      Settings.acidDamage=0D;
    }
    Settings.mobAcidDamage=getConfig().getDouble(""String_Node_Str"",10D);
    if (Settings.acidDamage > 100D) {
      Settings.acidDamage=100D;
    }
 else     if (Settings.acidDamage < 0D) {
      Settings.acidDamage=0D;
    }
    Settings.rainDamage=getConfig().getDouble(""String_Node_Str"",0.5D);
    if (Settings.rainDamage > 100D) {
      Settings.rainDamage=100D;
    }
 else     if (Settings.rainDamage < 0D) {
      Settings.rainDamage=0D;
    }
  }
 else {
    Settings.acidDamage=getConfig().getDouble(""String_Node_Str"",0D);
    if (Settings.acidDamage > 100D) {
      Settings.acidDamage=100D;
    }
 else     if (Settings.acidDamage < 0D) {
      Settings.acidDamage=0D;
    }
    Settings.mobAcidDamage=getConfig().getDouble(""String_Node_Str"",0D);
    if (Settings.acidDamage > 100D) {
      Settings.acidDamage=100D;
    }
 else     if (Settings.acidDamage < 0D) {
      Settings.acidDamage=0D;
    }
    Settings.rainDamage=getConfig().getDouble(""String_Node_Str"",0D);
    if (Settings.rainDamage > 100D) {
      Settings.rainDamage=100D;
    }
 else     if (Settings.rainDamage < 0D) {
      Settings.rainDamage=0D;
    }
  }
  Settings.animalAcidDamage=getConfig().getDouble(""String_Node_Str"",0D);
  if (Settings.animalAcidDamage > 100D) {
    Settings.animalAcidDamage=100D;
  }
 else   if (Settings.animalAcidDamage < 0D) {
    Settings.animalAcidDamage=0D;
  }
  Settings.damageChickens=getConfig().getBoolean(""String_Node_Str"",false);
  List<String> acidDamageType=getConfig().getStringList(""String_Node_Str"");
  Settings.acidDamageType.clear();
  if (acidDamageType != null) {
    for (    String effect : acidDamageType) {
      PotionEffectType newPotionType=PotionEffectType.getByName(effect);
      if (newPotionType != null) {
        if (newPotionType.equals(PotionEffectType.BLINDNESS) || newPotionType.equals(PotionEffectType.CONFUSION) || newPotionType.equals(PotionEffectType.HUNGER)|| newPotionType.equals(PotionEffectType.POISON)|| newPotionType.equals(PotionEffectType.SLOW)|| newPotionType.equals(PotionEffectType.SLOW_DIGGING)|| newPotionType.equals(PotionEffectType.WEAKNESS)) {
          Settings.acidDamageType.add(newPotionType);
        }
      }
 else {
        getLogger().warning(""String_Node_Str"" + effect + ""String_Node_Str"");
        getLogger().warning(""String_Node_Str"");
        getLogger().warning(""String_Node_Str"");
      }
    }
  }
  Settings.animalSpawnLimit=getConfig().getInt(""String_Node_Str"",15);
  if (Settings.animalSpawnLimit > 100) {
    Settings.animalSpawnLimit=100;
  }
 else   if (Settings.animalSpawnLimit < -1) {
    Settings.animalSpawnLimit=-1;
  }
  Settings.monsterSpawnLimit=getConfig().getInt(""String_Node_Str"",70);
  if (Settings.monsterSpawnLimit > 100) {
    Settings.monsterSpawnLimit=100;
  }
 else   if (Settings.monsterSpawnLimit < -1) {
    Settings.monsterSpawnLimit=-1;
  }
  Settings.waterAnimalSpawnLimit=getConfig().getInt(""String_Node_Str"",15);
  if (Settings.waterAnimalSpawnLimit > 100) {
    Settings.waterAnimalSpawnLimit=100;
  }
 else   if (Settings.waterAnimalSpawnLimit < -1) {
    Settings.waterAnimalSpawnLimit=-1;
  }
  Settings.abandonedIslandLevel=getConfig().getInt(""String_Node_Str"",10);
  if (Settings.abandonedIslandLevel < 0) {
    Settings.abandonedIslandLevel=0;
  }
  Settings.island_protectionRange=getConfig().getInt(""String_Node_Str"",94);
  if (!getConfig().getBoolean(""String_Node_Str"",false)) {
    if (Settings.island_protectionRange > (Settings.islandDistance - 16)) {
      Settings.island_protectionRange=Settings.islandDistance - 16;
      getLogger().warning(""String_Node_Str"" + (Settings.islandDistance - 16) + ""String_Node_Str""+ Settings.island_protectionRange);
    }
  }
  if (Settings.island_protectionRange < 0) {
    Settings.island_protectionRange=0;
  }
  Settings.resetChallenges=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.resetMoney=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.clearInventory=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.startingMoney=getConfig().getDouble(""String_Node_Str"",0D);
  Settings.newNether=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.netherSpawnRadius=getConfig().getInt(""String_Node_Str"",25);
  if (Settings.netherSpawnRadius < 0) {
    Settings.netherSpawnRadius=0;
  }
 else   if (Settings.netherSpawnRadius > 100) {
    Settings.netherSpawnRadius=100;
  }
  Settings.resetWait=getConfig().getInt(""String_Node_Str"",300);
  if (Settings.resetWait < 0) {
    Settings.resetWait=0;
  }
  Settings.resetLimit=getConfig().getInt(""String_Node_Str"",0);
  if (Settings.resetWait < 0) {
    Settings.resetWait=-1;
  }
  Settings.inviteWait=getConfig().getInt(""String_Node_Str"",60);
  if (Settings.inviteWait < 0) {
    Settings.inviteWait=0;
  }
  Settings.damageOps=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.logInRemoveMobs=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.islandRemoveMobs=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.sea_level=getConfig().getInt(""String_Node_Str"",50);
  if (Settings.sea_level < 0) {
    Settings.sea_level=0;
  }
  Settings.island_level=getConfig().getInt(""String_Node_Str"",50) - 5;
  if (Settings.island_level < 0) {
    Settings.island_level=0;
  }
  final String[] chestItemString=getConfig().getString(""String_Node_Str"").split(""String_Node_Str"");
  final ItemStack[] tempChest=new ItemStack[chestItemString.length];
  for (int i=0; i < tempChest.length; i++) {
    try {
      String[] amountdata=chestItemString[i].split(""String_Node_Str"");
      if (amountdata[0].equals(""String_Node_Str"")) {
        if (amountdata.length == 2) {
          final String chestPotionEffect=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
          if (!chestPotionEffect.isEmpty()) {
            Potion chestPotion=new Potion(PotionType.valueOf(chestPotionEffect));
            tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[1]));
          }
        }
 else         if (amountdata.length == 3) {
          Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1]));
          tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[2]));
        }
 else         if (amountdata.length == 4) {
          if (amountdata[2].equals(""String_Node_Str"")) {
            Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).extend();
            tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
          }
 else           if (amountdata[2].equals(""String_Node_Str"")) {
            Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).splash();
            tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
          }
 else           if (amountdata[2].equals(""String_Node_Str"")) {
            Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).extend().splash();
            tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
          }
        }
      }
 else {
        if (amountdata.length == 2) {
          tempChest[i]=new ItemStack(Material.getMaterial(amountdata[0]),Integer.parseInt(amountdata[1]));
        }
 else         if (amountdata.length == 3) {
          tempChest[i]=new ItemStack(Material.getMaterial(amountdata[0]),Integer.parseInt(amountdata[2]),Short.parseShort(amountdata[1]));
        }
      }
    }
 catch (    java.lang.IllegalArgumentException ex) {
      getLogger().severe(""String_Node_Str"" + chestItemString[i]);
      getLogger().severe(""String_Node_Str"" + ex.getMessage());
      getLogger().info(""String_Node_Str"");
      for (      PotionType c : PotionType.values())       getLogger().info(c.name());
    }
catch (    Exception e) {
      getLogger().severe(""String_Node_Str"" + chestItemString[i]);
      getLogger().info(""String_Node_Str"");
      for (      Material c : Material.values())       getLogger().info(c.name());
    }
  }
  Settings.chestItems=tempChest;
  Settings.allowPvP=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBreakBlocks=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowPlaceBlocks=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBedUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBucketUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowShearing=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowEnderPearls=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowDoorUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowLeverButtonUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowCropTrample=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowChestAccess=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowFurnaceUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowRedStone=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowMusic=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowCrafting=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBrewing=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowGateUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowHurtMobs=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.endermanDeathDrop=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowEndermanGriefing=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowCreeperDamage=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowTNTDamage=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowSpawnEggs=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBreeding=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowFire=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowChestDamage=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowLeashUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowHurtMonsters=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowEnchanting=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowAnvilUse=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowVisitorKeepInvOnDeath=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowVisitorItemDrop=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowVisitorItemPickup=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowArmorStandUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBeaconAccess=getConfig().getBoolean(""String_Node_Str"",false);
  final Set<String> challengeList=getChallengeConfig().getConfigurationSection(""String_Node_Str"").getKeys(false);
  Settings.challengeList=challengeList;
  Settings.challengeLevels=Arrays.asList(getChallengeConfig().getString(""String_Node_Str"").split(""String_Node_Str""));
  Settings.waiverAmount=getChallengeConfig().getInt(""String_Node_Str"",1);
  if (Settings.waiverAmount < 0) {
    Settings.waiverAmount=0;
  }
  Settings.broadcastMessages=getConfig().getBoolean(""String_Node_Str"",true);
  YamlConfiguration blockValuesConfig=ASkyBlock.loadYamlFile(""String_Node_Str"");
  Settings.blockLimits=new HashMap<Material,Integer>();
  if (blockValuesConfig.isSet(""String_Node_Str"")) {
    for (    String material : blockValuesConfig.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      try {
        Material mat=Material.valueOf(material);
        Settings.blockLimits.put(mat,blockValuesConfig.getInt(""String_Node_Str"" + material,0));
        if (debug) {
          getLogger().info(""String_Node_Str"" + mat.toString() + ""String_Node_Str""+ Settings.blockLimits.get(mat));
        }
      }
 catch (      Exception e) {
        getLogger().warning(""String_Node_Str"" + material + ""String_Node_Str"");
      }
    }
  }
  Settings.blockValues=new HashMap<Material,Integer>();
  if (blockValuesConfig.isSet(""String_Node_Str"")) {
    for (    String material : blockValuesConfig.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      try {
        Material mat=Material.valueOf(material);
        Settings.blockValues.put(mat,blockValuesConfig.getInt(""String_Node_Str"" + material,0));
        if (debug) {
          getLogger().info(mat.toString() + ""String_Node_Str"" + Settings.blockValues.get(mat));
        }
      }
 catch (      Exception e) {
        getLogger().warning(""String_Node_Str"" + material + ""String_Node_Str"");
      }
    }
  }
 else {
    getLogger().severe(""String_Node_Str"");
  }
  Settings.biomeCost=getConfig().getDouble(""String_Node_Str"",100D);
  if (Settings.biomeCost < 0D) {
    Settings.biomeCost=0D;
    getLogger().warning(""String_Node_Str"");
  }
  String defaultBiome=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  try {
    Settings.defaultBiome=Biome.valueOf(defaultBiome);
  }
 catch (  Exception e) {
    getLogger().severe(""String_Node_Str"" + defaultBiome + ""String_Node_Str"");
    Settings.defaultBiome=Biome.PLAINS;
  }
  Settings.breedingLimit=getConfig().getInt(""String_Node_Str"",0);
  Settings.removeCompleteOntimeChallenges=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.addCompletedGlow=getConfig().getBoolean(""String_Node_Str"",true);
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    Locale.signLine1=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine2=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine3=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine4=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.islandhelpSpawn=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.newsHeadline=locale.getString(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Locale.signLine1=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine2=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine3=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine4=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.islandhelpSpawn=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.newsHeadline=locale.getString(""String_Node_Str"",""String_Node_Str"");
  }
  Locale.changingObsidiantoLava=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.acidLore=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.acidBucket=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.acidBottle=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.drankAcidAndDied=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.drankAcid=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorUnknownPlayer=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorNoPermission=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorNoIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorNoIslandOther=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorCommandNotReady=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorOfflinePlayer=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorUnknownCommand=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorNoTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorWrongWorld=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandProtected=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.lavaTip=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpswelcomeLine=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpswarpTip=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpssuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpsremoved=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpssignRemoved=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpsdeactivate=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNoRemove=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNoPerm=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNoPlace=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorDuplicate=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNotReadyYet=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNotSafe=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpswarpToPlayersSign=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNoWarpsYet=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpswarpsAvailable=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpsPlayerWarped=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.topTenheader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.topTenerrorNotReady=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.levelislandLevel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.levelerrornotYourIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.setHomehomeSet=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.setHomeerrorNotOnIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.setHomeerrorNoIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesyouHaveCompleted=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesnameHasCompleted=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesyouRepeated=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengestoComplete=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeshelp1=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeshelp2=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengescolors=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengescomplete=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesincomplete=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengescompleteNotRepeatable=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengescompleteRepeatable=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesname=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeslevel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesitemTakeWarning=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesnotRepeatable=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesfirstTimeRewards=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesrepeatRewards=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesexpReward=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesmoneyReward=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengestoCompleteUse=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesinvalidChallengeName=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesrewards=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesyouHaveNotUnlocked=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesunknownChallenge=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorNotEnoughItems=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorNotOnIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorNotCloseEnough=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorItemsNotThere=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorIslandLevel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesguiTitle=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorYouAreMissing=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandteleport=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandcannotTeleport=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandnew=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islanderrorCouldNotCreateIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islanderrorYouDoNotHavePermission=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetOnlyOwner=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetMustRemovePlayers=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetPleaseWait=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetWait=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetConfirm=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpTeleport=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpControlPanel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpRestart=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandDeletedLifeboats=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpSetHome=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpLevel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpLevelPlayer=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpTop=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpWarps=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpWarp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpLeave=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpKick=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpExpel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpHelp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpAcceptReject=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpMakeLeader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islanderrorLevelNotReady=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islanderrorInvalidPlayer=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandislandLevelis=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitehelp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteyouCanInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteyouCannotInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteonlyIslandOwnerCanInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteyouHaveJoinedAnIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitehasJoinedYourIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorCantJoinIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorYouMustHaveIslandToInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorYouCannotInviteYourself=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteremovingInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteinviteSentTo=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitenameHasInvitedYou=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitetoAcceptOrReject=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitewarningYouWillLoseIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorYourIslandIsFull=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorThatPlayerIsAlreadyInATeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorCoolDown=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.rejectyouHaveRejectedInvitation=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.rejectnameHasRejectedInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.rejectyouHaveNotBeenInvited=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveerrorYouAreTheLeader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveyouHaveLeftTheIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leavenameHasLeftYourIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveerrorYouCannotLeaveIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveerrorYouMustBeInWorld=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveerrorLeadersCannotLeave=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.teamlistingMembers=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kickerrorPlayerNotInTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kicknameRemovedYou=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kicknameRemoved=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kickerrorNotPartOfTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kickerrorOnlyLeaderCan=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kickerrorNoTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorPlayerMustBeOnline=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorYouMustBeInTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorRemoveAllPlayersFirst=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeaderyouAreNowTheOwner=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadernameIsNowTheOwner=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorThatPlayerIsNotInTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorNotYourIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorGeneralError=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpHelp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpreload=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelptopTen=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpregister=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpdelete=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpcompleteChallenge=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpresetChallenge=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpresetAllChallenges=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelppurge=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelppurgeholes=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpinfo=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpSetSpawn=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpinfoIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelptp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.reloadconfigReloaded=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminTopTengenerating=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminTopTenfinished=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgealreadyRunning=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgeusage=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgecalculating=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgenoneFound=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgethisWillRemove=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgewarning=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgetypeConfirm=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgepurgeCancelled=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgefinished=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgeremovingName=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.confirmerrorTimeLimitExpired=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.deleteremoving=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.registersettingIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.registererrorBedrockNotFound=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoislandLocation=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorNotPartOfTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorNullTeamLeader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorTeamMembersExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengessuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.checkTeamcheckingTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.completeChallengeerrorChallengeDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.completeChallengechallangeCompleted=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengeerrorChallengeDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.confirmerrorTimeLimitExpired=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.deleteremoving=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.registersettingIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.registererrorBedrockNotFound=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoislandLocation=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorNotPartOfTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorNullTeamLeader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorTeamMembersExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengessuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.checkTeamcheckingTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.completeChallengeerrorChallengeDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.completeChallengechallangeCompleted=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengeerrorChallengeDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengechallengeReset=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.netherSpawnIsProtected=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpMiniShop=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandMiniShopTitle=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopBuy=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopSell=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopYouBought=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopSellProblem=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopYouSold=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopBuyProblem=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopYouCannotAfford=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopOutOfStock=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.boatWarningItIsUnsafe=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpclearReset=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetYouHave=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandResetNoMore=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.clearedResetLimit=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpBiome=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.biomeSet=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.biomeUnknown=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.biomeYouBought=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.biomePanelTitle=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelNotOnIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelSuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelExpelled=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelFail=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelNotYourself=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.moblimitsError=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopRemoved=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopRemoveSuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopSuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopMadeYouCoop=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopOnYourTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpCoop=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopInvited=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopUseExpel=locale.getString(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Loads the various settings from the config.yml file into the plugin
 */
protected void loadPluginConfig(){
  try {
    getConfig();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  getChallengeConfig();
  getLocale();
  if (getConfig().contains(""String_Node_Str"")) {
    for (    String key : getConfig().getConfigurationSection(""String_Node_Str"").getKeys(true)) {
      String filename=getConfig().getString(""String_Node_Str"" + key);
      File schematicFile=new File(plugin.getDataFolder(),filename);
      if (schematicFile.exists()) {
        Settings.schematics.put(key,filename);
        getLogger().info(""String_Node_Str"" + filename + ""String_Node_Str""+ key);
      }
    }
  }
  Settings.useEconomy=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.resetCommands=getConfig().getStringList(""String_Node_Str"");
  Settings.useControlPanel=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowTeleportWhenFalling=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.maxTeamSize=getConfig().getInt(""String_Node_Str"",4);
  Settings.maxTeamSizeVIP=getConfig().getInt(""String_Node_Str"",8);
  Settings.maxTeamSizeVIP2=getConfig().getInt(""String_Node_Str"",12);
  Settings.worldName=getConfig().getString(""String_Node_Str"");
  Settings.createNether=getConfig().getBoolean(""String_Node_Str"",true);
  if (!Settings.createNether) {
    getLogger().info(""String_Node_Str"");
  }
  Settings.islandDistance=getConfig().getInt(""String_Node_Str"",110);
  if (Settings.islandDistance < 50) {
    Settings.islandDistance=50;
    getLogger().info(""String_Node_Str"");
  }
  Settings.islandXOffset=getConfig().getInt(""String_Node_Str"",0);
  if (Settings.islandXOffset < 0) {
    Settings.islandXOffset=0;
    getLogger().info(""String_Node_Str"");
  }
 else   if (Settings.islandXOffset > Settings.islandDistance) {
    Settings.islandXOffset=Settings.islandDistance;
    getLogger().info(""String_Node_Str"" + Settings.islandDistance);
  }
  Settings.islandZOffset=getConfig().getInt(""String_Node_Str"",0);
  if (Settings.islandZOffset < 0) {
    Settings.islandZOffset=0;
    getLogger().info(""String_Node_Str"");
  }
 else   if (Settings.islandZOffset > Settings.islandDistance) {
    Settings.islandZOffset=Settings.islandDistance;
    getLogger().info(""String_Node_Str"" + Settings.islandDistance);
  }
  if (Settings.GAMETYPE.equals(Settings.GameType.ACIDISLAND)) {
    Settings.acidDamage=getConfig().getDouble(""String_Node_Str"",5D);
    if (Settings.acidDamage > 100D) {
      Settings.acidDamage=100D;
    }
 else     if (Settings.acidDamage < 0D) {
      Settings.acidDamage=0D;
    }
    Settings.mobAcidDamage=getConfig().getDouble(""String_Node_Str"",10D);
    if (Settings.mobAcidDamage > 100D) {
      Settings.mobAcidDamage=100D;
    }
 else     if (Settings.mobAcidDamage < 0D) {
      Settings.mobAcidDamage=0D;
    }
    Settings.rainDamage=getConfig().getDouble(""String_Node_Str"",0.5D);
    if (Settings.rainDamage > 100D) {
      Settings.rainDamage=100D;
    }
 else     if (Settings.rainDamage < 0D) {
      Settings.rainDamage=0D;
    }
  }
 else {
    Settings.acidDamage=getConfig().getDouble(""String_Node_Str"",0D);
    if (Settings.acidDamage > 100D) {
      Settings.acidDamage=100D;
    }
 else     if (Settings.acidDamage < 0D) {
      Settings.acidDamage=0D;
    }
    Settings.mobAcidDamage=getConfig().getDouble(""String_Node_Str"",0D);
    if (Settings.mobAcidDamage > 100D) {
      Settings.mobAcidDamage=100D;
    }
 else     if (Settings.mobAcidDamage < 0D) {
      Settings.mobAcidDamage=0D;
    }
    Settings.rainDamage=getConfig().getDouble(""String_Node_Str"",0D);
    if (Settings.rainDamage > 100D) {
      Settings.rainDamage=100D;
    }
 else     if (Settings.rainDamage < 0D) {
      Settings.rainDamage=0D;
    }
  }
  Settings.animalAcidDamage=getConfig().getDouble(""String_Node_Str"",0D);
  if (Settings.animalAcidDamage > 100D) {
    Settings.animalAcidDamage=100D;
  }
 else   if (Settings.animalAcidDamage < 0D) {
    Settings.animalAcidDamage=0D;
  }
  Settings.damageChickens=getConfig().getBoolean(""String_Node_Str"",false);
  List<String> acidDamageType=getConfig().getStringList(""String_Node_Str"");
  Settings.acidDamageType.clear();
  if (acidDamageType != null) {
    for (    String effect : acidDamageType) {
      PotionEffectType newPotionType=PotionEffectType.getByName(effect);
      if (newPotionType != null) {
        if (newPotionType.equals(PotionEffectType.BLINDNESS) || newPotionType.equals(PotionEffectType.CONFUSION) || newPotionType.equals(PotionEffectType.HUNGER)|| newPotionType.equals(PotionEffectType.POISON)|| newPotionType.equals(PotionEffectType.SLOW)|| newPotionType.equals(PotionEffectType.SLOW_DIGGING)|| newPotionType.equals(PotionEffectType.WEAKNESS)) {
          Settings.acidDamageType.add(newPotionType);
        }
      }
 else {
        getLogger().warning(""String_Node_Str"" + effect + ""String_Node_Str"");
        getLogger().warning(""String_Node_Str"");
        getLogger().warning(""String_Node_Str"");
      }
    }
  }
  Settings.animalSpawnLimit=getConfig().getInt(""String_Node_Str"",15);
  if (Settings.animalSpawnLimit > 100) {
    Settings.animalSpawnLimit=100;
  }
 else   if (Settings.animalSpawnLimit < -1) {
    Settings.animalSpawnLimit=-1;
  }
  Settings.monsterSpawnLimit=getConfig().getInt(""String_Node_Str"",70);
  if (Settings.monsterSpawnLimit > 100) {
    Settings.monsterSpawnLimit=100;
  }
 else   if (Settings.monsterSpawnLimit < -1) {
    Settings.monsterSpawnLimit=-1;
  }
  Settings.waterAnimalSpawnLimit=getConfig().getInt(""String_Node_Str"",15);
  if (Settings.waterAnimalSpawnLimit > 100) {
    Settings.waterAnimalSpawnLimit=100;
  }
 else   if (Settings.waterAnimalSpawnLimit < -1) {
    Settings.waterAnimalSpawnLimit=-1;
  }
  Settings.abandonedIslandLevel=getConfig().getInt(""String_Node_Str"",10);
  if (Settings.abandonedIslandLevel < 0) {
    Settings.abandonedIslandLevel=0;
  }
  Settings.island_protectionRange=getConfig().getInt(""String_Node_Str"",94);
  if (!getConfig().getBoolean(""String_Node_Str"",false)) {
    if (Settings.island_protectionRange > (Settings.islandDistance - 16)) {
      Settings.island_protectionRange=Settings.islandDistance - 16;
      getLogger().warning(""String_Node_Str"" + (Settings.islandDistance - 16) + ""String_Node_Str""+ Settings.island_protectionRange);
    }
  }
  if (Settings.island_protectionRange < 0) {
    Settings.island_protectionRange=0;
  }
  Settings.resetChallenges=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.resetMoney=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.clearInventory=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.startingMoney=getConfig().getDouble(""String_Node_Str"",0D);
  Settings.newNether=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.netherSpawnRadius=getConfig().getInt(""String_Node_Str"",25);
  if (Settings.netherSpawnRadius < 0) {
    Settings.netherSpawnRadius=0;
  }
 else   if (Settings.netherSpawnRadius > 100) {
    Settings.netherSpawnRadius=100;
  }
  Settings.resetWait=getConfig().getInt(""String_Node_Str"",300);
  if (Settings.resetWait < 0) {
    Settings.resetWait=0;
  }
  Settings.resetLimit=getConfig().getInt(""String_Node_Str"",0);
  if (Settings.resetWait < 0) {
    Settings.resetWait=-1;
  }
  Settings.inviteWait=getConfig().getInt(""String_Node_Str"",60);
  if (Settings.inviteWait < 0) {
    Settings.inviteWait=0;
  }
  Settings.damageOps=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.logInRemoveMobs=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.islandRemoveMobs=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.sea_level=getConfig().getInt(""String_Node_Str"",50);
  if (Settings.sea_level < 0) {
    Settings.sea_level=0;
  }
  Settings.island_level=getConfig().getInt(""String_Node_Str"",50) - 5;
  if (Settings.island_level < 0) {
    Settings.island_level=0;
  }
  final String[] chestItemString=getConfig().getString(""String_Node_Str"").split(""String_Node_Str"");
  final ItemStack[] tempChest=new ItemStack[chestItemString.length];
  for (int i=0; i < tempChest.length; i++) {
    try {
      String[] amountdata=chestItemString[i].split(""String_Node_Str"");
      if (amountdata[0].equals(""String_Node_Str"")) {
        if (amountdata.length == 2) {
          final String chestPotionEffect=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
          if (!chestPotionEffect.isEmpty()) {
            Potion chestPotion=new Potion(PotionType.valueOf(chestPotionEffect));
            tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[1]));
          }
        }
 else         if (amountdata.length == 3) {
          Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1]));
          tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[2]));
        }
 else         if (amountdata.length == 4) {
          if (amountdata[2].equals(""String_Node_Str"")) {
            Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).extend();
            tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
          }
 else           if (amountdata[2].equals(""String_Node_Str"")) {
            Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).splash();
            tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
          }
 else           if (amountdata[2].equals(""String_Node_Str"")) {
            Potion chestPotion=new Potion(PotionType.valueOf(amountdata[1])).extend().splash();
            tempChest[i]=chestPotion.toItemStack(Integer.parseInt(amountdata[3]));
          }
        }
      }
 else {
        if (amountdata.length == 2) {
          tempChest[i]=new ItemStack(Material.getMaterial(amountdata[0]),Integer.parseInt(amountdata[1]));
        }
 else         if (amountdata.length == 3) {
          tempChest[i]=new ItemStack(Material.getMaterial(amountdata[0]),Integer.parseInt(amountdata[2]),Short.parseShort(amountdata[1]));
        }
      }
    }
 catch (    java.lang.IllegalArgumentException ex) {
      getLogger().severe(""String_Node_Str"" + chestItemString[i]);
      getLogger().severe(""String_Node_Str"" + ex.getMessage());
      getLogger().info(""String_Node_Str"");
      for (      PotionType c : PotionType.values())       getLogger().info(c.name());
    }
catch (    Exception e) {
      getLogger().severe(""String_Node_Str"" + chestItemString[i]);
      getLogger().info(""String_Node_Str"");
      for (      Material c : Material.values())       getLogger().info(c.name());
    }
  }
  Settings.chestItems=tempChest;
  Settings.allowPvP=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBreakBlocks=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowPlaceBlocks=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBedUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBucketUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowShearing=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowEnderPearls=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowDoorUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowLeverButtonUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowCropTrample=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowChestAccess=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowFurnaceUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowRedStone=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowMusic=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowCrafting=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBrewing=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowGateUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowHurtMobs=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.endermanDeathDrop=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowEndermanGriefing=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowCreeperDamage=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowTNTDamage=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowSpawnEggs=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBreeding=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowFire=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowChestDamage=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowLeashUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowHurtMonsters=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowEnchanting=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowAnvilUse=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowVisitorKeepInvOnDeath=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowVisitorItemDrop=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowVisitorItemPickup=getConfig().getBoolean(""String_Node_Str"",true);
  Settings.allowArmorStandUse=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.allowBeaconAccess=getConfig().getBoolean(""String_Node_Str"",false);
  final Set<String> challengeList=getChallengeConfig().getConfigurationSection(""String_Node_Str"").getKeys(false);
  Settings.challengeList=challengeList;
  Settings.challengeLevels=Arrays.asList(getChallengeConfig().getString(""String_Node_Str"").split(""String_Node_Str""));
  Settings.waiverAmount=getChallengeConfig().getInt(""String_Node_Str"",1);
  if (Settings.waiverAmount < 0) {
    Settings.waiverAmount=0;
  }
  Settings.broadcastMessages=getConfig().getBoolean(""String_Node_Str"",true);
  YamlConfiguration blockValuesConfig=ASkyBlock.loadYamlFile(""String_Node_Str"");
  Settings.blockLimits=new HashMap<Material,Integer>();
  if (blockValuesConfig.isSet(""String_Node_Str"")) {
    for (    String material : blockValuesConfig.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      try {
        Material mat=Material.valueOf(material);
        Settings.blockLimits.put(mat,blockValuesConfig.getInt(""String_Node_Str"" + material,0));
        if (debug) {
          getLogger().info(""String_Node_Str"" + mat.toString() + ""String_Node_Str""+ Settings.blockLimits.get(mat));
        }
      }
 catch (      Exception e) {
        getLogger().warning(""String_Node_Str"" + material + ""String_Node_Str"");
      }
    }
  }
  Settings.blockValues=new HashMap<Material,Integer>();
  if (blockValuesConfig.isSet(""String_Node_Str"")) {
    for (    String material : blockValuesConfig.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      try {
        Material mat=Material.valueOf(material);
        Settings.blockValues.put(mat,blockValuesConfig.getInt(""String_Node_Str"" + material,0));
        if (debug) {
          getLogger().info(mat.toString() + ""String_Node_Str"" + Settings.blockValues.get(mat));
        }
      }
 catch (      Exception e) {
        getLogger().warning(""String_Node_Str"" + material + ""String_Node_Str"");
      }
    }
  }
 else {
    getLogger().severe(""String_Node_Str"");
  }
  Settings.biomeCost=getConfig().getDouble(""String_Node_Str"",100D);
  if (Settings.biomeCost < 0D) {
    Settings.biomeCost=0D;
    getLogger().warning(""String_Node_Str"");
  }
  String defaultBiome=getConfig().getString(""String_Node_Str"",""String_Node_Str"");
  try {
    Settings.defaultBiome=Biome.valueOf(defaultBiome);
  }
 catch (  Exception e) {
    getLogger().severe(""String_Node_Str"" + defaultBiome + ""String_Node_Str"");
    Settings.defaultBiome=Biome.PLAINS;
  }
  Settings.breedingLimit=getConfig().getInt(""String_Node_Str"",0);
  Settings.removeCompleteOntimeChallenges=getConfig().getBoolean(""String_Node_Str"",false);
  Settings.addCompletedGlow=getConfig().getBoolean(""String_Node_Str"",true);
  if (Settings.GAMETYPE.equals(Settings.GameType.ASKYBLOCK)) {
    Locale.signLine1=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine2=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine3=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine4=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.islandhelpSpawn=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.newsHeadline=locale.getString(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Locale.signLine1=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine2=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine3=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.signLine4=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.islandhelpSpawn=locale.getString(""String_Node_Str"",""String_Node_Str"");
    Locale.newsHeadline=locale.getString(""String_Node_Str"",""String_Node_Str"");
  }
  Locale.changingObsidiantoLava=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.acidLore=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.acidBucket=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.acidBottle=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.drankAcidAndDied=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.drankAcid=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorUnknownPlayer=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorNoPermission=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorNoIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorNoIslandOther=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorCommandNotReady=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorOfflinePlayer=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorUnknownCommand=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorNoTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.errorWrongWorld=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandProtected=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.lavaTip=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpswelcomeLine=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpswarpTip=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpssuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpsremoved=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpssignRemoved=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpsdeactivate=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNoRemove=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNoPerm=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNoPlace=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorDuplicate=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNotReadyYet=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNotSafe=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpswarpToPlayersSign=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpserrorNoWarpsYet=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpswarpsAvailable=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.warpsPlayerWarped=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.topTenheader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.topTenerrorNotReady=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.levelislandLevel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.levelerrornotYourIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.setHomehomeSet=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.setHomeerrorNotOnIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.setHomeerrorNoIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesyouHaveCompleted=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesnameHasCompleted=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesyouRepeated=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengestoComplete=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeshelp1=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeshelp2=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengescolors=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengescomplete=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesincomplete=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengescompleteNotRepeatable=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengescompleteRepeatable=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesname=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeslevel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesitemTakeWarning=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesnotRepeatable=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesfirstTimeRewards=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesrepeatRewards=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesexpReward=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesmoneyReward=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengestoCompleteUse=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesinvalidChallengeName=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesrewards=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesyouHaveNotUnlocked=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesunknownChallenge=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorNotEnoughItems=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorNotOnIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorNotCloseEnough=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorItemsNotThere=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorIslandLevel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengesguiTitle=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.challengeserrorYouAreMissing=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandteleport=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandcannotTeleport=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandnew=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islanderrorCouldNotCreateIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islanderrorYouDoNotHavePermission=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetOnlyOwner=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetMustRemovePlayers=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetPleaseWait=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetWait=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandresetConfirm=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpTeleport=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpControlPanel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpRestart=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandDeletedLifeboats=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpSetHome=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpLevel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpLevelPlayer=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpTop=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpWarps=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpWarp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpLeave=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpKick=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpExpel=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpHelp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpAcceptReject=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpMakeLeader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islanderrorLevelNotReady=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islanderrorInvalidPlayer=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandislandLevelis=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitehelp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteyouCanInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteyouCannotInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteonlyIslandOwnerCanInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteyouHaveJoinedAnIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitehasJoinedYourIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorCantJoinIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorYouMustHaveIslandToInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorYouCannotInviteYourself=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteremovingInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteinviteSentTo=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitenameHasInvitedYou=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitetoAcceptOrReject=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.invitewarningYouWillLoseIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorYourIslandIsFull=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorThatPlayerIsAlreadyInATeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.inviteerrorCoolDown=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.rejectyouHaveRejectedInvitation=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.rejectnameHasRejectedInvite=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.rejectyouHaveNotBeenInvited=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveerrorYouAreTheLeader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveyouHaveLeftTheIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leavenameHasLeftYourIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveerrorYouCannotLeaveIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveerrorYouMustBeInWorld=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.leaveerrorLeadersCannotLeave=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.teamlistingMembers=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kickerrorPlayerNotInTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kicknameRemovedYou=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kicknameRemoved=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kickerrorNotPartOfTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kickerrorOnlyLeaderCan=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.kickerrorNoTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorPlayerMustBeOnline=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorYouMustBeInTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorRemoveAllPlayersFirst=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeaderyouAreNowTheOwner=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadernameIsNowTheOwner=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorThatPlayerIsNotInTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorNotYourIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.makeLeadererrorGeneralError=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpHelp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpreload=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelptopTen=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpregister=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpdelete=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpcompleteChallenge=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpresetChallenge=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpresetAllChallenges=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelppurge=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelppurgeholes=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpinfo=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpSetSpawn=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpinfoIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelptp=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.reloadconfigReloaded=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminTopTengenerating=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminTopTenfinished=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgealreadyRunning=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgeusage=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgecalculating=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgenoneFound=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgethisWillRemove=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgewarning=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgetypeConfirm=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgepurgeCancelled=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgefinished=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.purgeremovingName=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.confirmerrorTimeLimitExpired=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.deleteremoving=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.registersettingIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.registererrorBedrockNotFound=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoislandLocation=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorNotPartOfTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorNullTeamLeader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorTeamMembersExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengessuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.checkTeamcheckingTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.completeChallengeerrorChallengeDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.completeChallengechallangeCompleted=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengeerrorChallengeDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.confirmerrorTimeLimitExpired=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.deleteremoving=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.registersettingIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.registererrorBedrockNotFound=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoislandLocation=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorNotPartOfTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorNullTeamLeader=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminInfoerrorTeamMembersExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengessuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.checkTeamcheckingTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.completeChallengeerrorChallengeDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.completeChallengechallangeCompleted=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengeerrorChallengeDoesNotExist=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetChallengechallengeReset=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.netherSpawnIsProtected=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpMiniShop=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandMiniShopTitle=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopBuy=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopSell=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopYouBought=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopSellProblem=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopYouSold=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopBuyProblem=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopYouCannotAfford=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.minishopOutOfStock=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.boatWarningItIsUnsafe=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.adminHelpclearReset=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.resetYouHave=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandResetNoMore=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.clearedResetLimit=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpBiome=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.biomeSet=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.biomeUnknown=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.biomeYouBought=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.biomePanelTitle=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelNotOnIsland=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelSuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelExpelled=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelFail=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.expelNotYourself=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.moblimitsError=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopRemoved=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopRemoveSuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopSuccess=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopMadeYouCoop=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopOnYourTeam=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.islandhelpCoop=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopInvited=locale.getString(""String_Node_Str"",""String_Node_Str"");
  Locale.coopUseExpel=locale.getString(""String_Node_Str"",""String_Node_Str"");
}"
34105,"/** 
 * This teleports player to their island. If not safe place can be found then the player is sent to spawn via /spawn command
 * @param player
 * @return
 */
@SuppressWarnings(""String_Node_Str"") protected boolean homeTeleport(final Player player){
  Location home=null;
  home=getSafeHomeLocation(player.getUniqueId());
  if (player.isInsideVehicle()) {
    Entity boat=player.getVehicle();
    if (boat instanceof Boat) {
      player.leaveVehicle();
      boat.remove();
      player.getInventory().addItem(new ItemStack(Material.BOAT,1));
      player.updateInventory();
    }
  }
  if (home == null) {
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.sendBlockChange(player.getWorld().getSpawnLocation(),player.getWorld().getSpawnLocation().getBlock().getType(),player.getWorld().getSpawnLocation().getBlock().getData());
      player.teleport(player.getWorld().getSpawnLocation());
    }
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
    return true;
  }
  home.getWorld().loadChunk(home.getChunk());
  player.sendBlockChange(home,home.getBlock().getType(),home.getBlock().getData());
  player.teleport(home);
  player.sendMessage(ChatColor.GREEN + Locale.islandteleport);
  return true;
}","/** 
 * This teleports player to their island. If not safe place can be found then the player is sent to spawn via /spawn command
 * @param player
 * @return
 */
@SuppressWarnings(""String_Node_Str"") protected boolean homeTeleport(final Player player){
  Location home=null;
  home=getSafeHomeLocation(player.getUniqueId());
  if (player.isInsideVehicle()) {
    Entity boat=player.getVehicle();
    if (boat instanceof Boat) {
      player.leaveVehicle();
      boat.remove();
      player.getInventory().addItem(new ItemStack(Material.BOAT,1));
      player.updateInventory();
    }
  }
  if (home == null) {
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.sendBlockChange(player.getWorld().getSpawnLocation(),player.getWorld().getSpawnLocation().getBlock().getType(),player.getWorld().getSpawnLocation().getBlock().getData());
      player.teleport(player.getWorld().getSpawnLocation());
    }
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
    return true;
  }
  home.getWorld().loadChunk(home.getChunk());
  player.sendBlockChange(home,home.getBlock().getType(),home.getBlock().getData());
  player.sendBlockChange(home.getBlock().getRelative(BlockFace.DOWN).getLocation(),home.getBlock().getRelative(BlockFace.DOWN).getType(),home.getBlock().getRelative(BlockFace.DOWN).getData());
  player.teleport(home);
  player.sendMessage(ChatColor.GREEN + Locale.islandteleport);
  return true;
}"
34106,"/** 
 * Determines a safe teleport spot on player's island or the team island they belong to.
 * @param p PlayerInfo for active player
 * @return Location of a safe teleport spot
 */
protected Location getSafeHomeLocation(final UUID p){
  Location l=players.getHomeLocation(p);
  if (l != null) {
    if (isSafeLocation(l)) {
      return l;
    }
  }
  if (players.inTeam(p)) {
    l=players.getTeamIslandLocation(p);
    if (isSafeLocation(l)) {
      return l;
    }
 else {
      Location tlh=players.getHomeLocation(players.getTeamLeader(p));
      if (tlh != null) {
        if (isSafeLocation(tlh)) {
          return tlh;
        }
      }
    }
  }
 else {
    l=players.getIslandLocation(p);
    if (isSafeLocation(l)) {
      return l;
    }
  }
  if (l == null) {
    getLogger().warning(players.getName(p) + ""String_Node_Str"");
    return null;
  }
  getLogger().info(""String_Node_Str"");
  getLogger().info(""String_Node_Str"");
  Location dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 2.5D,0F,30F);
  if (isSafeLocation(dl)) {
    players.setHomeLocation(p,dl);
    return dl;
  }
  getLogger().info(""String_Node_Str"");
  dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 0.5D,0F,30F);
  if (isSafeLocation(dl)) {
    players.setHomeLocation(p,dl);
    return dl;
  }
  getLogger().info(""String_Node_Str"");
  for (int y=l.getBlockY() + 25; y > 0; y--) {
    final Location n=new Location(l.getWorld(),l.getX() + 0.5D,y,l.getZ() + 0.5D);
    if (isSafeLocation(n)) {
      return n;
    }
  }
  getLogger().info(""String_Node_Str"");
  for (int y=l.getBlockY(); y < 255; y++) {
    final Location n=new Location(l.getWorld(),l.getX() + 0.5D,y,l.getZ() + 0.5D);
    if (isSafeLocation(n)) {
      return n;
    }
  }
  getLogger().info(""String_Node_Str"");
  for (int y=Settings.island_level; y < l.getWorld().getMaxHeight(); y++) {
    for (int x=l.getBlockX(); x < l.getBlockX() + Settings.island_protectionRange / 2; x++) {
      for (int z=l.getBlockZ(); z < l.getBlockZ() + Settings.island_protectionRange / 2; z++) {
        Location ultimate=new Location(l.getWorld(),(double)x + 0.5D,y,(double)z + 0.5D);
        if (!ultimate.getBlock().equals(Material.AIR)) {
          if (isSafeLocation(ultimate)) {
            players.setHomeLocation(p,ultimate);
            return ultimate;
          }
        }
      }
    }
  }
  for (int y=Settings.island_level; y < l.getWorld().getMaxHeight(); y++) {
    for (int x=l.getBlockX(); x > l.getBlockX() - Settings.island_protectionRange / 2; x--) {
      for (int z=l.getBlockZ(); z < l.getBlockZ() - Settings.island_protectionRange / 2; z--) {
        Location ultimate=new Location(l.getWorld(),(double)x + 0.5D,y,(double)z + 0.5D);
        if (!ultimate.getBlock().equals(Material.AIR)) {
          if (isSafeLocation(ultimate)) {
            players.setHomeLocation(p,ultimate);
            return ultimate;
          }
        }
      }
    }
  }
  for (int y=Settings.island_level - 1; y > 0; y--) {
    for (int x=l.getBlockX(); x < l.getBlockX() + Settings.island_protectionRange / 2; x++) {
      for (int z=l.getBlockZ(); z < l.getBlockZ() + Settings.island_protectionRange / 2; z++) {
        Location ultimate=new Location(l.getWorld(),(double)x + 0.5D,y,(double)z + 0.5D);
        if (!ultimate.getBlock().equals(Material.AIR)) {
          if (isSafeLocation(ultimate)) {
            players.setHomeLocation(p,ultimate);
            return ultimate;
          }
        }
      }
    }
  }
  for (int y=Settings.island_level - 1; y > 0; y--) {
    for (int x=l.getBlockX(); x > l.getBlockX() - Settings.island_protectionRange / 2; x--) {
      for (int z=l.getBlockZ(); z > l.getBlockZ() - Settings.island_protectionRange / 2; z--) {
        Location ultimate=new Location(l.getWorld(),(double)x + 0.5D,y,(double)z + 0.5D);
        if (!ultimate.getBlock().equals(Material.AIR)) {
          if (isSafeLocation(ultimate)) {
            players.setHomeLocation(p,ultimate);
            return ultimate;
          }
        }
      }
    }
  }
  return null;
}","/** 
 * Determines a safe teleport spot on player's island or the team island they belong to.
 * @param p PlayerInfo for active player
 * @return Location of a safe teleport spot
 */
protected Location getSafeHomeLocation(final UUID p){
  Location l=players.getHomeLocation(p);
  if (l != null) {
    if (isSafeLocation(l)) {
      return l;
    }
  }
  Location lPlusOne=l.clone();
  lPlusOne.add(new Vector(0,1,0));
  if (lPlusOne != null) {
    if (isSafeLocation(lPlusOne)) {
      l=lPlusOne;
      return lPlusOne;
    }
  }
  if (players.inTeam(p)) {
    l=players.getTeamIslandLocation(p);
    if (isSafeLocation(l)) {
      return l;
    }
 else {
      Location tlh=players.getHomeLocation(players.getTeamLeader(p));
      if (tlh != null) {
        if (isSafeLocation(tlh)) {
          return tlh;
        }
      }
    }
  }
 else {
    l=players.getIslandLocation(p);
    if (isSafeLocation(l)) {
      return l;
    }
  }
  if (l == null) {
    getLogger().warning(players.getName(p) + ""String_Node_Str"");
    return null;
  }
  Location dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 2.5D,0F,30F);
  if (isSafeLocation(dl)) {
    players.setHomeLocation(p,dl);
    return dl;
  }
  dl=new Location(l.getWorld(),l.getX() + 0.5D,l.getY() + 5D,l.getZ() + 0.5D,0F,30F);
  if (isSafeLocation(dl)) {
    players.setHomeLocation(p,dl);
    return dl;
  }
  for (int y=l.getBlockY() + 25; y > 0; y--) {
    final Location n=new Location(l.getWorld(),l.getX() + 0.5D,y,l.getZ() + 0.5D);
    if (isSafeLocation(n)) {
      return n;
    }
  }
  for (int y=l.getBlockY(); y < 255; y++) {
    final Location n=new Location(l.getWorld(),l.getX() + 0.5D,y,l.getZ() + 0.5D);
    if (isSafeLocation(n)) {
      return n;
    }
  }
  for (int y=Settings.island_level; y < l.getWorld().getMaxHeight(); y++) {
    for (int x=l.getBlockX(); x < l.getBlockX() + Settings.island_protectionRange / 2; x++) {
      for (int z=l.getBlockZ(); z < l.getBlockZ() + Settings.island_protectionRange / 2; z++) {
        Location ultimate=new Location(l.getWorld(),(double)x + 0.5D,y,(double)z + 0.5D);
        if (!ultimate.getBlock().equals(Material.AIR)) {
          if (isSafeLocation(ultimate)) {
            players.setHomeLocation(p,ultimate);
            return ultimate;
          }
        }
      }
    }
  }
  for (int y=Settings.island_level; y < l.getWorld().getMaxHeight(); y++) {
    for (int x=l.getBlockX(); x > l.getBlockX() - Settings.island_protectionRange / 2; x--) {
      for (int z=l.getBlockZ(); z < l.getBlockZ() - Settings.island_protectionRange / 2; z--) {
        Location ultimate=new Location(l.getWorld(),(double)x + 0.5D,y,(double)z + 0.5D);
        if (!ultimate.getBlock().equals(Material.AIR)) {
          if (isSafeLocation(ultimate)) {
            players.setHomeLocation(p,ultimate);
            return ultimate;
          }
        }
      }
    }
  }
  for (int y=Settings.island_level - 1; y > 0; y--) {
    for (int x=l.getBlockX(); x < l.getBlockX() + Settings.island_protectionRange / 2; x++) {
      for (int z=l.getBlockZ(); z < l.getBlockZ() + Settings.island_protectionRange / 2; z++) {
        Location ultimate=new Location(l.getWorld(),(double)x + 0.5D,y,(double)z + 0.5D);
        if (!ultimate.getBlock().equals(Material.AIR)) {
          if (isSafeLocation(ultimate)) {
            players.setHomeLocation(p,ultimate);
            return ultimate;
          }
        }
      }
    }
  }
  for (int y=Settings.island_level - 1; y > 0; y--) {
    for (int x=l.getBlockX(); x > l.getBlockX() - Settings.island_protectionRange / 2; x--) {
      for (int z=l.getBlockZ(); z > l.getBlockZ() - Settings.island_protectionRange / 2; z--) {
        Location ultimate=new Location(l.getWorld(),(double)x + 0.5D,y,(double)z + 0.5D);
        if (!ultimate.getBlock().equals(Material.AIR)) {
          if (isSafeLocation(ultimate)) {
            players.setHomeLocation(p,ultimate);
            return ultimate;
          }
        }
      }
    }
  }
  return null;
}"
34107,"/** 
 * Checks if player can complete challenge
 * @param player
 * @param challenge
 * @return true if player can complete otherwise false
 */
protected boolean checkIfCanCompleteChallenge(final Player player,final String challenge){
  if (!players.challengeExists(player.getUniqueId(),challenge)) {
    player.sendMessage(ChatColor.RED + Locale.challengesunknownChallenge);
    return false;
  }
  if (!isLevelAvailable(player,plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.RED + Locale.challengesyouHaveNotUnlocked);
    return false;
  }
  if (players.checkChallenge(player.getUniqueId(),challenge) && !plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.challengesnotRepeatable);
    return false;
  }
  if (players.checkChallenge(player.getUniqueId(),challenge) && plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.challengesnotRepeatable);
    return false;
  }
  if (plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    if (!hasRequired(player,challenge,""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + Locale.challengeserrorNotEnoughItems);
      player.sendMessage(ChatColor.RED + plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""));
      return false;
    }
    return true;
  }
  if (plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.playerIsOnIsland(player)) {
      player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
      return false;
    }
    if (!hasRequired(player,challenge,""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + Locale.challengeserrorNotCloseEnough);
      player.sendMessage(ChatColor.RED + plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""));
      return false;
    }
    return true;
  }
  if (plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    if (players.getIslandLevel(player.getUniqueId()) >= plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"")) {
      return true;
    }
    player.sendMessage(ChatColor.RED + Locale.challengeserrorIslandLevel.replace(""String_Node_Str"",String.valueOf(plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str""))));
    return false;
  }
  player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
  plugin.getLogger().severe(""String_Node_Str"" + challenge + ""String_Node_Str""+ plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""));
  plugin.getLogger().severe(""String_Node_Str"");
  return false;
}","/** 
 * Checks if player can complete challenge
 * @param player
 * @param challenge
 * @return true if player can complete otherwise false
 */
protected boolean checkIfCanCompleteChallenge(final Player player,final String challenge){
  if (!players.challengeExists(player.getUniqueId(),challenge)) {
    player.sendMessage(ChatColor.RED + Locale.challengesunknownChallenge);
    return false;
  }
  String level=plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"");
  if (!level.isEmpty()) {
    if (!isLevelAvailable(player,level)) {
      player.sendMessage(ChatColor.RED + Locale.challengesyouHaveNotUnlocked);
      return false;
    }
  }
  if (players.checkChallenge(player.getUniqueId(),challenge) && !plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challenge + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.challengesnotRepeatable);
    return false;
  }
  if (players.checkChallenge(player.getUniqueId(),challenge) && plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.challengesnotRepeatable);
    return false;
  }
  if (plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    if (!hasRequired(player,challenge,""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + Locale.challengeserrorNotEnoughItems);
      player.sendMessage(ChatColor.RED + plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""));
      return false;
    }
    return true;
  }
  if (plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.playerIsOnIsland(player)) {
      player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
      return false;
    }
    if (!hasRequired(player,challenge,""String_Node_Str"")) {
      player.sendMessage(ChatColor.RED + Locale.challengeserrorNotCloseEnough);
      player.sendMessage(ChatColor.RED + plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""));
      return false;
    }
    return true;
  }
  if (plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    if (players.getIslandLevel(player.getUniqueId()) >= plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str"")) {
      return true;
    }
    player.sendMessage(ChatColor.RED + Locale.challengeserrorIslandLevel.replace(""String_Node_Str"",String.valueOf(plugin.getChallengeConfig().getInt(""String_Node_Str"" + challenge + ""String_Node_Str""))));
    return false;
  }
  player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
  plugin.getLogger().severe(""String_Node_Str"" + challenge + ""String_Node_Str""+ plugin.getChallengeConfig().getString(""String_Node_Str"" + challenge + ""String_Node_Str""));
  plugin.getLogger().severe(""String_Node_Str"");
  return false;
}"
34108,"@EventHandler(priority=EventPriority.LOW) public void ArmorStandDestroy(EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (!(e.getEntity() instanceof LivingEntity)) {
    return;
  }
  if (!e.getEntity().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  final LivingEntity livingEntity=(LivingEntity)e.getEntity();
  if (!livingEntity.getType().equals(EntityType.ARMOR_STAND)) {
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp()) {
      return;
    }
    if (VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
    p.sendMessage(ChatColor.RED + Locale.islandProtected);
    e.setCancelled(true);
  }
}","@EventHandler(priority=EventPriority.LOW) public void ArmorStandDestroy(EntityDamageByEntityEvent e){
  if (debug) {
    plugin.getLogger().info(e.getEventName());
  }
  if (!(e.getEntity() instanceof LivingEntity)) {
    return;
  }
  if (!e.getEntity().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  final LivingEntity livingEntity=(LivingEntity)e.getEntity();
  if (!livingEntity.getType().equals(EntityType.ARMOR_STAND)) {
    return;
  }
  if (e.getDamager() instanceof Player) {
    Player p=(Player)e.getDamager();
    if (p.isOp()) {
      return;
    }
    if (plugin.playerIsOnIsland(p)) {
      return;
    }
    if (VaultHelper.checkPerm(p,Settings.PERMPREFIX + ""String_Node_Str"")) {
      return;
    }
    p.sendMessage(ChatColor.RED + Locale.islandProtected);
    e.setCancelled(true);
  }
}"
34109,"/** 
 * Dynamically creates an inventory of challenges for the player
 * @param player
 * @return
 */
public Inventory challengePanel(Player player){
  List<CPItem> cp=new ArrayList<CPItem>();
  for (  String challengeName : challengeList.get(""String_Node_Str"")) {
    ItemStack icon=null;
    String iconName=plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",""String_Node_Str"");
    if (!iconName.isEmpty()) {
      try {
        String[] split=iconName.split(""String_Node_Str"");
        if (split.length == 1) {
          if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
 else           if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
            iconName=""String_Node_Str"";
          }
          icon=new ItemStack(Material.valueOf(iconName));
        }
 else         if (split.length == 2) {
          icon=new ItemStack(Material.valueOf(split[0]));
          icon.setDurability(Integer.valueOf(split[1]).shortValue());
        }
      }
 catch (      Exception e) {
        plugin.getLogger().warning(""String_Node_Str"" + challengeName + ""String_Node_Str""+ iconName);
        plugin.getLogger().warning(""String_Node_Str"");
      }
    }
    if (icon == null) {
      icon=new ItemStack(Material.PAPER);
    }
    String description=ChatColor.GREEN + plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",challengeName.substring(0,1).toUpperCase() + challengeName.substring(1));
    boolean complete=false;
    if (Settings.addCompletedGlow && players.checkChallenge(player.getUniqueId(),challengeName)) {
      ItemMeta im=icon.getItemMeta();
      im.addEnchant(Enchantment.ARROW_DAMAGE,0,true);
      icon.setItemMeta(im);
      icon.removeEnchantment(Enchantment.ARROW_DAMAGE);
      complete=true;
    }
    boolean repeatable=false;
    if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challengeName + ""String_Node_Str"",false)) {
      repeatable=true;
    }
    if (!complete || ((complete && repeatable) || !Settings.removeCompleteOntimeChallenges)) {
      CPItem item=new CPItem(icon,description,Settings.CHALLENGECOMMAND + ""String_Node_Str"" + challengeName,null);
      List<String> lore=challengeDescription(challengeName,player);
      item.setLore(lore);
      cp.add(item);
    }
  }
  int levelDone=0;
  for (int i=0; i < Settings.challengeLevels.size(); i++) {
    if (i == 0) {
      levelDone=0;
    }
 else {
      levelDone=checkLevelCompletion(player,Settings.challengeLevels.get(i - 1));
    }
    if (levelDone <= 0) {
      for (      String challengeName : challengeList.get(Settings.challengeLevels.get(i))) {
        ItemStack icon=null;
        String iconName=plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",""String_Node_Str"");
        if (!iconName.isEmpty()) {
          try {
            String[] split=iconName.split(""String_Node_Str"");
            if (split.length == 1) {
              if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
              icon=new ItemStack(Material.valueOf(iconName));
            }
 else             if (split.length == 2) {
              icon=new ItemStack(Material.valueOf(split[0]));
              icon.setDurability(Integer.valueOf(split[1]).shortValue());
            }
          }
 catch (          Exception e) {
            plugin.getLogger().warning(""String_Node_Str"" + challengeName + ""String_Node_Str""+ iconName);
            plugin.getLogger().warning(""String_Node_Str"");
          }
        }
        if (icon == null) {
          icon=new ItemStack(Material.PAPER);
        }
        String description=ChatColor.GREEN + plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",challengeName.substring(0,1).toUpperCase() + challengeName.substring(1));
        boolean complete=false;
        if (Settings.addCompletedGlow && players.checkChallenge(player.getUniqueId(),challengeName)) {
          ItemMeta im=icon.getItemMeta();
          im.addEnchant(Enchantment.ARROW_DAMAGE,0,true);
          icon.setItemMeta(im);
          icon.removeEnchantment(Enchantment.ARROW_DAMAGE);
          complete=true;
        }
        boolean repeatable=false;
        if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challengeName + ""String_Node_Str"",false)) {
          repeatable=true;
        }
        if (!complete || ((complete && repeatable) || !Settings.removeCompleteOntimeChallenges)) {
          CPItem item=new CPItem(icon,description,Settings.CHALLENGECOMMAND + ""String_Node_Str"" + challengeName,null);
          List<String> lore=challengeDescription(challengeName,player);
          item.setLore(lore);
          cp.add(item);
        }
      }
    }
 else {
      CPItem item=new CPItem(Material.BOOK,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
      List<String> lore=new ArrayList<String>();
      lore=chop(ChatColor.WHITE,Locale.challengestoComplete.replace(""String_Node_Str"",String.valueOf(levelDone)).replace(""String_Node_Str"",Settings.challengeLevels.get(i - 1)),25);
      item.setLore(lore);
      cp.add(item);
    }
  }
  if (cp.size() > 0) {
    int size=cp.size() + 8;
    size-=(size % 9);
    Inventory newPanel=Bukkit.createInventory(null,size,Locale.challengesguiTitle);
    playerChallengeGUI.put(player.getUniqueId(),cp);
    for (    CPItem i : cp) {
      newPanel.addItem(i.getItem());
    }
    return newPanel;
  }
  return null;
}","/** 
 * Dynamically creates an inventory of challenges for the player
 * @param player
 * @return
 */
public Inventory challengePanel(Player player){
  List<CPItem> cp=new ArrayList<CPItem>();
  if (challengeList.containsKey(""String_Node_Str"")) {
    for (    String challengeName : challengeList.get(""String_Node_Str"")) {
      ItemStack icon=null;
      String iconName=plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",""String_Node_Str"");
      if (!iconName.isEmpty()) {
        try {
          String[] split=iconName.split(""String_Node_Str"");
          if (split.length == 1) {
            if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
 else             if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
 else             if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
 else             if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
 else             if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
 else             if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
 else             if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
 else             if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
 else             if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
              iconName=""String_Node_Str"";
            }
            icon=new ItemStack(Material.valueOf(iconName));
          }
 else           if (split.length == 2) {
            icon=new ItemStack(Material.valueOf(split[0]));
            icon.setDurability(Integer.valueOf(split[1]).shortValue());
          }
        }
 catch (        Exception e) {
          plugin.getLogger().warning(""String_Node_Str"" + challengeName + ""String_Node_Str""+ iconName);
          plugin.getLogger().warning(""String_Node_Str"");
        }
      }
      if (icon == null) {
        icon=new ItemStack(Material.PAPER);
      }
      String description=ChatColor.GREEN + plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",challengeName.substring(0,1).toUpperCase() + challengeName.substring(1));
      boolean complete=false;
      if (Settings.addCompletedGlow && players.checkChallenge(player.getUniqueId(),challengeName)) {
        ItemMeta im=icon.getItemMeta();
        im.addEnchant(Enchantment.ARROW_DAMAGE,0,true);
        icon.setItemMeta(im);
        icon.removeEnchantment(Enchantment.ARROW_DAMAGE);
        complete=true;
      }
      boolean repeatable=false;
      if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challengeName + ""String_Node_Str"",false)) {
        repeatable=true;
      }
      if (!complete || ((complete && repeatable) || !Settings.removeCompleteOntimeChallenges)) {
        CPItem item=new CPItem(icon,description,Settings.CHALLENGECOMMAND + ""String_Node_Str"" + challengeName,null);
        List<String> lore=challengeDescription(challengeName,player);
        item.setLore(lore);
        cp.add(item);
      }
    }
  }
  int levelDone=0;
  for (int i=0; i < Settings.challengeLevels.size(); i++) {
    if (i == 0) {
      levelDone=0;
    }
 else {
      levelDone=checkLevelCompletion(player,Settings.challengeLevels.get(i - 1));
    }
    if (levelDone <= 0) {
      for (      String challengeName : challengeList.get(Settings.challengeLevels.get(i))) {
        ItemStack icon=null;
        String iconName=plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",""String_Node_Str"");
        if (!iconName.isEmpty()) {
          try {
            String[] split=iconName.split(""String_Node_Str"");
            if (split.length == 1) {
              if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"") || iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
 else               if (iconName.equalsIgnoreCase(""String_Node_Str"")) {
                iconName=""String_Node_Str"";
              }
              icon=new ItemStack(Material.valueOf(iconName));
            }
 else             if (split.length == 2) {
              icon=new ItemStack(Material.valueOf(split[0]));
              icon.setDurability(Integer.valueOf(split[1]).shortValue());
            }
          }
 catch (          Exception e) {
            plugin.getLogger().warning(""String_Node_Str"" + challengeName + ""String_Node_Str""+ iconName);
            plugin.getLogger().warning(""String_Node_Str"");
          }
        }
        if (icon == null) {
          icon=new ItemStack(Material.PAPER);
        }
        String description=ChatColor.GREEN + plugin.getChallengeConfig().getString(""String_Node_Str"" + challengeName + ""String_Node_Str"",challengeName.substring(0,1).toUpperCase() + challengeName.substring(1));
        boolean complete=false;
        if (Settings.addCompletedGlow && players.checkChallenge(player.getUniqueId(),challengeName)) {
          ItemMeta im=icon.getItemMeta();
          im.addEnchant(Enchantment.ARROW_DAMAGE,0,true);
          icon.setItemMeta(im);
          icon.removeEnchantment(Enchantment.ARROW_DAMAGE);
          complete=true;
        }
        boolean repeatable=false;
        if (plugin.getChallengeConfig().getBoolean(""String_Node_Str"" + challengeName + ""String_Node_Str"",false)) {
          repeatable=true;
        }
        if (!complete || ((complete && repeatable) || !Settings.removeCompleteOntimeChallenges)) {
          CPItem item=new CPItem(icon,description,Settings.CHALLENGECOMMAND + ""String_Node_Str"" + challengeName,null);
          List<String> lore=challengeDescription(challengeName,player);
          item.setLore(lore);
          cp.add(item);
        }
      }
    }
 else {
      CPItem item=new CPItem(Material.BOOK,ChatColor.GOLD + Settings.challengeLevels.get(i),null,null);
      List<String> lore=new ArrayList<String>();
      lore=chop(ChatColor.WHITE,Locale.challengestoComplete.replace(""String_Node_Str"",String.valueOf(levelDone)).replace(""String_Node_Str"",Settings.challengeLevels.get(i - 1)),25);
      item.setLore(lore);
      cp.add(item);
    }
  }
  if (cp.size() > 0) {
    int size=cp.size() + 8;
    size-=(size % 9);
    Inventory newPanel=Bukkit.createInventory(null,size,Locale.challengesguiTitle);
    playerChallengeGUI.put(player.getUniqueId(),cp);
    for (    CPItem i : cp) {
      newPanel.addItem(i.getItem());
    }
    return newPanel;
  }
  return null;
}"
34110,"public byte[][] generateBlockSections(World world,Random random,int chunkX,int chunkZ,BiomeGrid biomeGrid){
  rand.setSeed(world.getSeed());
  gen=new PerlinOctaveGenerator((long)(random.nextLong() * random.nextGaussian()),8);
  byte[][] result=new byte[world.getMaxHeight() / 16][];
  if (!world.getEnvironment().equals(Environment.NETHER)) {
    return result;
  }
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      setBlock(result,x,(world.getMaxHeight() - 1),z,(byte)Material.BEDROCK.getId());
      for (int y=2; y < 5; y++) {
        double r=gen.noise(x,(world.getMaxHeight() - y),z,0.5,0.5);
        if (r > 0D) {
          setBlock(result,x,(world.getMaxHeight() - y),z,(byte)Material.BEDROCK.getId());
        }
 else {
          setBlock(result,x,(world.getMaxHeight() - y),z,(byte)Material.NETHERRACK.getId());
        }
      }
      for (int y=5; y < 8; y++) {
        double r=gen.noise(x,world.getMaxHeight() - y,z,0.5,0.5);
        if (r > 0D) {
          setBlock(result,x,(world.getMaxHeight() - y),z,(byte)Material.NETHERRACK.getId());
        }
 else {
          setBlock(result,x,(world.getMaxHeight() - y),z,(byte)Material.AIR.getId());
        }
      }
      double r=gen.noise(x,world.getMaxHeight() - 8,z,random.nextFloat(),random.nextFloat());
      if (r > 0.5D) {
        setBlock(result,x,(world.getMaxHeight() - 8),z,(byte)Material.GLOWSTONE.getId());
      }
 else {
        setBlock(result,x,(world.getMaxHeight() - 8),z,(byte)Material.AIR.getId());
      }
    }
  }
  int actualX=chunkX * 16;
  int actualZ=chunkZ * 16;
  int chunkDist=Math.round((float)Settings.islandDistance / 16F);
  if (chunkX % chunkDist == 0 && chunkZ % chunkDist == 0) {
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        int island_height=Settings.island_level;
        for (int y=island_height - 13; y < island_height; y++) {
          double r=gen.noise(x,y,z,0.5,0.5);
          if (y == (island_height - 1)) {
            if (x == 0 || z == 0 || x == 15 || z == 15) {
              setBlock(result,x,y,z,(byte)Material.NETHER_FENCE.getId());
            }
          }
 else           if (y == (island_height - 2)) {
            if (x == 0 || z == 0 || x == 15 || z == 15) {
              setBlock(result,x,y,z,(byte)Material.NETHER_BRICK.getId());
            }
 else {
              if (r > 0.5D) {
                setBlock(result,x,y,z,(byte)Material.FIRE.getId());
              }
            }
          }
 else {
            if (x == 0 || z == 0 || x == 15 || z == 15) {
              if (r > -0.5D) {
                setBlock(result,x,y,z,(byte)Material.NETHER_BRICK.getId());
              }
            }
 else {
              if (r > 0D) {
                setBlock(result,x,y,z,(byte)Material.QUARTZ_ORE.getId());
              }
 else               if (r > -0.4D) {
                setBlock(result,x,y,z,(byte)Material.NETHERRACK.getId());
              }
 else               if (y < island_height - 10) {
                setBlock(result,x,y,z,(byte)Material.LAVA.getId());
              }
            }
          }
        }
      }
    }
  }
 else   if (Math.abs(chunkX % chunkDist) == 2 && Math.abs(chunkZ % chunkDist) == 2) {
    for (int x=5; x < 11; x++) {
      for (int z=5; z < 11; z++) {
        int island_height=Settings.island_level + 25;
        for (int y=Settings.island_level - 20; y < island_height; y++) {
          double r=gen.noise(x,y,z,0.5,0.5);
          if (y == (island_height - 1)) {
            if (x == 5 || z == 5 || x == 10 || z == 10) {
              setBlock(result,x,y,z,(byte)Material.NETHER_FENCE.getId());
            }
 else {
              if (r > 0.1D) {
                setBlock(result,x,y,z,(byte)Material.MOB_SPAWNER.getId());
              }
            }
          }
 else           if (y == (island_height - 2)) {
            setBlock(result,x,y,z,(byte)Material.NETHER_BRICK.getId());
          }
 else {
            if (x == 5 || z == 5 || x == 10 || z == 10) {
              if (r > -0.5D) {
                setBlock(result,x,y,z,(byte)Material.NETHER_BRICK.getId());
              }
 else {
                setBlock(result,x,y,z,(byte)Material.LAVA.getId());
              }
            }
 else {
              if (r > 0.8D) {
                setBlock(result,x,y,z,(byte)Material.LAVA.getId());
              }
 else               if (r > 0.45D) {
                setBlock(result,x,y,z,(byte)Material.QUARTZ_ORE.getId());
              }
 else               if (r > 0.20D) {
                setBlock(result,x,y,z,(byte)Material.SOUL_SAND.getId());
              }
 else               if (r > -0.5D) {
                setBlock(result,x,y,z,(byte)Material.NETHERRACK.getId());
              }
            }
          }
        }
      }
    }
  }
 else {
  }
  return result;
}","public byte[][] generateBlockSections(World world,Random random,int chunkX,int chunkZ,BiomeGrid biomeGrid){
  rand.setSeed(world.getSeed());
  gen=new PerlinOctaveGenerator((long)(random.nextLong() * random.nextGaussian()),8);
  byte[][] result=new byte[world.getMaxHeight() / 16][];
  if (!world.getEnvironment().equals(Environment.NETHER)) {
    return result;
  }
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      setBlock(result,x,(world.getMaxHeight() - 1),z,(byte)Material.BEDROCK.getId());
      for (int y=2; y < 5; y++) {
        double r=gen.noise(x,(world.getMaxHeight() - y),z,0.5,0.5);
        if (r > 0D) {
          setBlock(result,x,(world.getMaxHeight() - y),z,(byte)Material.BEDROCK.getId());
        }
 else {
          setBlock(result,x,(world.getMaxHeight() - y),z,(byte)Material.NETHERRACK.getId());
        }
      }
      for (int y=5; y < 8; y++) {
        double r=gen.noise(x,world.getMaxHeight() - y,z,0.5,0.5);
        if (r > 0D) {
          setBlock(result,x,(world.getMaxHeight() - y),z,(byte)Material.NETHERRACK.getId());
        }
 else {
          setBlock(result,x,(world.getMaxHeight() - y),z,(byte)Material.AIR.getId());
        }
      }
      double r=gen.noise(x,world.getMaxHeight() - 8,z,random.nextFloat(),random.nextFloat());
      if (r > 0.5D) {
        setBlock(result,x,(world.getMaxHeight() - 8),z,(byte)Material.GLOWSTONE.getId());
      }
 else {
        setBlock(result,x,(world.getMaxHeight() - 8),z,(byte)Material.AIR.getId());
      }
    }
  }
  int actualX=chunkX * 16;
  int actualZ=chunkZ * 16;
  int chunkDist=Math.round((float)Settings.islandDistance / 16F);
  if (chunkX % chunkDist == 0 && chunkZ % chunkDist == 0) {
    for (int x=0; x < 16; x++) {
      for (int z=0; z < 16; z++) {
        int island_height=Settings.island_level;
        for (int y=island_height - 13; y < island_height; y++) {
          double r=gen.noise(x,y,z,0.5,0.5);
          if (y == (island_height - 1)) {
            if (x == 0 || z == 0 || x == 15 || z == 15) {
              setBlock(result,x,y,z,(byte)Material.NETHER_FENCE.getId());
            }
          }
 else           if (y == (island_height - 2)) {
            if (x == 0 || z == 0 || x == 15 || z == 15) {
              setBlock(result,x,y,z,(byte)Material.NETHER_BRICK.getId());
            }
 else {
              if (r > 0.5D) {
                setBlock(result,x,y,z,(byte)Material.FIRE.getId());
              }
            }
          }
 else {
            if (x == 0 || z == 0 || x == 15 || z == 15) {
              if (r > -0.5D) {
                setBlock(result,x,y,z,(byte)Material.NETHER_BRICK.getId());
              }
            }
 else {
              if (r > 0.25D) {
                setBlock(result,x,y,z,(byte)Material.AIR.getId());
              }
 else               if (r > 0D) {
                setBlock(result,x,y,z,(byte)Material.STONE.getId());
              }
 else               if (r > -0.4D) {
                setBlock(result,x,y,z,(byte)Material.NETHERRACK.getId());
              }
 else               if (y < island_height - 10) {
                setBlock(result,x,y,z,(byte)Material.LAVA.getId());
              }
            }
          }
        }
      }
    }
  }
 else   if (Math.abs(chunkX % chunkDist) == 2 && Math.abs(chunkZ % chunkDist) == 2) {
    for (int x=0; x < 11; x++) {
      for (int z=0; z < 11; z++) {
        int island_height=Settings.island_level + 25;
        for (int y=Settings.island_level - 20; y < island_height; y++) {
          double r=gen.noise(x,y,z,0.5,0.5);
          if (y == (island_height - 1)) {
            if (x == 0 || z == 0 || x == 10 || z == 10) {
              setBlock(result,x,y,z,(byte)Material.NETHER_FENCE.getId());
            }
 else {
              if (random.nextInt(10) > 8) {
                setBlock(result,x,y,z,(byte)Material.OBSIDIAN.getId());
              }
 else               if (random.nextInt(10) > 8) {
                setBlock(result,x,y,z,(byte)Material.MOB_SPAWNER.getId());
              }
            }
          }
 else           if (y == (island_height - 2)) {
            setBlock(result,x,y,z,(byte)Material.NETHER_BRICK.getId());
          }
 else {
            if (x == 0 || z == 0 || x == 10 || z == 10) {
              if (r > -0.5D) {
                setBlock(result,x,y,z,(byte)Material.NETHER_BRICK.getId());
              }
 else {
                if (random.nextInt(2) == 1) {
                  setBlock(result,x,y,z,(byte)Material.LAVA.getId());
                }
 else {
                  setBlock(result,x,y,z,(byte)Material.AIR.getId());
                }
              }
            }
 else {
              if (r > 0.8D) {
                setBlock(result,x,y,z,(byte)Material.LAVA.getId());
              }
 else               if (r > 0.5D) {
                setBlock(result,x,y,z,(byte)Material.AIR.getId());
              }
 else               if (r > 0.4D) {
                setBlock(result,x,y,z,(byte)Material.STONE.getId());
              }
 else               if (r > 0.2D) {
                setBlock(result,x,y,z,(byte)Material.SOUL_SAND.getId());
              }
 else               if (r > -0.5D) {
                setBlock(result,x,y,z,(byte)Material.NETHERRACK.getId());
              }
            }
            if (y < Settings.island_level - 15) {
              if (r > 0D) {
                setBlock(result,x,y,z,(byte)Material.AIR.getId());
              }
            }
          }
        }
      }
    }
  }
 else {
  }
  return result;
}"
34111,"@Override public void populate(World world,Random random,Chunk source){
  for (int x=0; x < 16; x++) {
    for (int y=0; y < world.getMaxHeight(); y++) {
      for (int z=0; z < 16; z++) {
        Block b=source.getBlock(x,y,z);
        if (b.getType().equals(Material.MOB_SPAWNER)) {
          CreatureSpawner cs=(CreatureSpawner)b.getState();
switch (random.nextInt(3)) {
case 0:
            cs.setSpawnedType(EntityType.BLAZE);
          break;
case 1:
        cs.setSpawnedType(EntityType.SKELETON);
      break;
case 2:
    cs.setSpawnedType(EntityType.MAGMA_CUBE);
  break;
default :
cs.setSpawnedType(EntityType.BLAZE);
}
}
}
}
}
}","@Override public void populate(World world,Random random,Chunk source){
  for (int x=0; x < 16; x++) {
    for (int y=0; y < world.getMaxHeight(); y++) {
      for (int z=0; z < 16; z++) {
        Block b=source.getBlock(x,y,z);
        if (b.getType().equals(Material.MOB_SPAWNER)) {
          CreatureSpawner cs=(CreatureSpawner)b.getState();
switch (random.nextInt(3)) {
case 0:
            cs.setSpawnedType(EntityType.BLAZE);
          break;
case 1:
        cs.setSpawnedType(EntityType.SKELETON);
      break;
case 2:
    cs.setSpawnedType(EntityType.MAGMA_CUBE);
  break;
default :
cs.setSpawnedType(EntityType.BLAZE);
}
}
 else if (b.getType().equals(Material.OBSIDIAN)) {
b.setType(Material.CHEST);
Chest cs=(Chest)b.getState();
Inventory chestInv=cs.getInventory();
int numOfStacks=2 + random.nextInt(3);
for (int i=0; i < numOfStacks; i++) {
int slot=random.nextInt(chestInv.getSize());
for (int j=0; j < chestInv.getSize(); j++) {
if (chestInv.getItem(slot) == null) {
  break;
}
slot=random.nextInt(chestInv.getSize());
}
int choice=random.nextInt(73);
if (choice < 5) {
chestInv.setItem(slot,new ItemStack(Material.DIAMOND,random.nextInt(2) + 1));
}
 else if (choice < 10) {
chestInv.setItem(slot,new ItemStack(Material.IRON_INGOT,random.nextInt(4) + 1));
}
 else if (choice < 25) {
chestInv.setItem(slot,new ItemStack(Material.GOLD_INGOT,random.nextInt(2) + 1));
}
 else if (choice < 30) {
chestInv.setItem(slot,new ItemStack(Material.GOLD_SWORD,1));
}
 else if (choice < 35) {
chestInv.setItem(slot,new ItemStack(Material.GOLD_CHESTPLATE,1));
}
 else if (choice < 40) {
chestInv.setItem(slot,new ItemStack(Material.FLINT_AND_STEEL,1));
}
 else if (choice < 45) {
chestInv.setItem(slot,new ItemStack(Material.NETHER_WARTS,random.nextInt(4) + 3));
}
 else if (choice < 55) {
chestInv.setItem(slot,new ItemStack(Material.SADDLE,1));
}
 else if (choice < 63) {
chestInv.setItem(slot,new ItemStack(Material.GOLD_BARDING,1));
}
 else if (choice < 68) {
chestInv.setItem(slot,new ItemStack(Material.IRON_BARDING,1));
}
 else if (choice < 71) {
chestInv.setItem(slot,new ItemStack(Material.DIAMOND_BARDING,1));
}
 else {
chestInv.setItem(slot,new ItemStack(Material.OBSIDIAN,random.nextInt(3) + 1));
}
}
}
 else if (b.getType().equals(Material.STONE)) {
b.setType(Material.QUARTZ_ORE);
}
}
}
}
}"
34112,"/** 
 * Prevents blocks from being broken
 * @param e
 */
@EventHandler(priority=EventPriority.LOW) public void onBlockBreak(final BlockBreakEvent e){
  if (e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str"") || e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    if (!awayFromSpawn(e.getPlayer()) && !e.getPlayer().isOp()) {
      e.setCancelled(true);
    }
  }
}","/** 
 * Prevents blocks from being broken
 * @param e
 */
@EventHandler(priority=EventPriority.LOW) public void onBlockBreak(final BlockBreakEvent e){
  if ((e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str"") && !Settings.newNether) || e.getPlayer().getWorld().getName().equalsIgnoreCase(Settings.worldName + ""String_Node_Str"")) {
    if (!awayFromSpawn(e.getPlayer()) && !e.getPlayer().isOp()) {
      e.getPlayer().sendMessage(Locale.netherSpawnIsProtected);
      e.setCancelled(true);
    }
  }
}"
34113,"private boolean awayFromSpawn(Player player){
  Vector p=player.getLocation().toVector().multiply(new Vector(1,0,1));
  Vector spawn=player.getWorld().getSpawnLocation().toVector().multiply(new Vector(1,0,1));
  if (spawn.distanceSquared(p) < (Settings.netherSpawnRadius * Settings.netherSpawnRadius)) {
    player.sendMessage(Locale.netherSpawnIsProtected);
    return false;
  }
 else {
    return true;
  }
}","/** 
 * Function to check proximity to nether spawn location
 * @param player
 * @return
 */
private boolean awayFromSpawn(Player player){
  Vector p=player.getLocation().toVector().multiply(new Vector(1,0,1));
  Vector spawn=player.getWorld().getSpawnLocation().toVector().multiply(new Vector(1,0,1));
  if (spawn.distanceSquared(p) < (Settings.netherSpawnRadius * Settings.netherSpawnRadius)) {
    return false;
  }
 else {
    return true;
  }
}"
34114,"/** 
 * Class dedicated to deleting islands
 * @param plugin
 * @param loc
 */
public DeleteIslandChunk(ASkyBlock plugin,final Location loc){
  if (loc == null)   return;
  World world=loc.getWorld();
  int range=Settings.island_protectionRange / 2 * +1;
  this.plugin=plugin;
  int minx=(loc.getBlockX() - range);
  int minz=(loc.getBlockZ() - range);
  int maxx=(loc.getBlockX() + range);
  int maxz=(loc.getBlockZ() + range);
  int islandSpacing=Settings.islandDistance - Settings.island_protectionRange;
  int minxX=(loc.getBlockX() - range - islandSpacing);
  int minzZ=(loc.getBlockZ() - range - islandSpacing);
  int maxxX=(loc.getBlockX() + range + islandSpacing);
  int maxzZ=(loc.getBlockZ() + range + islandSpacing);
  final Chunk minChunk=loc.getWorld().getChunkAt(new Location(world,minx,0,minz));
  final Chunk maxChunk=loc.getWorld().getChunkAt(new Location(world,maxx,0,maxz));
  for (int x=minChunk.getX(); x <= maxChunk.getX(); x++) {
    for (int z=minChunk.getZ(); z <= maxChunk.getZ(); z++) {
      boolean regen=true;
      if (loc.getWorld().getChunkAt(x,z).getBlock(0,0,0).getX() < minxX) {
        regen=false;
      }
      if (loc.getWorld().getChunkAt(x,z).getBlock(0,0,0).getZ() < minzZ) {
        regen=false;
      }
      if (loc.getWorld().getChunkAt(x,z).getBlock(15,0,15).getX() > maxxX) {
        regen=false;
      }
      if (loc.getWorld().getChunkAt(x,z).getBlock(15,0,15).getZ() > maxzZ) {
        regen=false;
      }
      if (regen) {
        loc.getWorld().regenerateChunk(x,z);
      }
    }
  }
  plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
    @Override public void run(){
      for (int x=minChunk.getX(); x <= maxChunk.getX(); x++) {
        for (int z=minChunk.getZ(); z <= maxChunk.getZ(); z++) {
          loc.getWorld().refreshChunk(x,z);
        }
      }
    }
  }
);
}","/** 
 * Class dedicated to deleting islands
 * @param plugin
 * @param loc
 */
public DeleteIslandChunk(ASkyBlock plugin,final Location loc){
  if (loc == null)   return;
  World world=loc.getWorld();
  int range=Settings.island_protectionRange / 2 * +1;
  this.plugin=plugin;
  int minx=(loc.getBlockX() - range);
  int minz=(loc.getBlockZ() - range);
  int maxx=(loc.getBlockX() + range);
  int maxz=(loc.getBlockZ() + range);
  int islandSpacing=Settings.islandDistance - Settings.island_protectionRange;
  int minxX=(loc.getBlockX() - range - islandSpacing);
  int minzZ=(loc.getBlockZ() - range - islandSpacing);
  int maxxX=(loc.getBlockX() + range + islandSpacing);
  int maxzZ=(loc.getBlockZ() + range + islandSpacing);
  final Chunk minChunk=loc.getWorld().getChunkAt(new Location(world,minx,0,minz));
  final Chunk maxChunk=loc.getWorld().getChunkAt(new Location(world,maxx,0,maxz));
  for (int x=minChunk.getX(); x <= maxChunk.getX(); x++) {
    for (int z=minChunk.getZ(); z <= maxChunk.getZ(); z++) {
      boolean regen=true;
      if (loc.getWorld().getChunkAt(x,z).getBlock(0,0,0).getX() < minxX) {
        regen=false;
      }
      if (loc.getWorld().getChunkAt(x,z).getBlock(0,0,0).getZ() < minzZ) {
        regen=false;
      }
      if (loc.getWorld().getChunkAt(x,z).getBlock(15,0,15).getX() > maxxX) {
        regen=false;
      }
      if (loc.getWorld().getChunkAt(x,z).getBlock(15,0,15).getZ() > maxzZ) {
        regen=false;
      }
      if (regen) {
        loc.getWorld().regenerateChunk(x,z);
      }
    }
  }
  String checkName=loc.getBlockX() + ""String_Node_Str"" + loc.getBlockZ()+ ""String_Node_Str"";
  final File islandFile=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str""+ File.separator+ checkName);
  if (islandFile.exists()) {
    if (!islandFile.delete()) {
      plugin.getLogger().severe(""String_Node_Str"" + checkName + ""String_Node_Str"");
    }
  }
  plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
    @Override public void run(){
      for (int x=minChunk.getX(); x <= maxChunk.getX(); x++) {
        for (int z=minChunk.getZ(); z <= maxChunk.getZ(); z++) {
          loc.getWorld().refreshChunk(x,z);
        }
      }
    }
  }
);
}"
34115,"@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + Locale.islandnew);
      final Location cowSpot=newIsland(sender);
      plugin.homeTeleport(player);
      plugin.resetPlayer(player);
      if (Settings.resetMoney) {
        resetMoney(player);
      }
      plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
        @Override public void run(){
          player.getWorld().spawnEntity(cowSpot,EntityType.COW);
        }
      }
,40L);
      setResetWaitTime(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        plugin.homeTeleport(player);
        if (Settings.islandRemoveMobs) {
          plugin.removeMobs(player.getLocation());
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
    plugin.homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy && player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.miniShop);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + Locale.islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + Locale.islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.islandresetConfirm);
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,200L);
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
CoopPlay.getInstance().clearMyInvitedCoops(player);
CoopPlay.getInstance().clearMyCoops(player);
final Location oldIsland=plugin.getPlayers().getIslandLocation(playerUUID);
final Location cowSpot=newIsland(sender);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.homeTeleport(player);
plugin.resetPlayer(player);
if (Settings.resetMoney) {
  resetMoney(player);
}
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    player.getWorld().spawnEntity(cowSpot,EntityType.COW);
  }
}
,40L);
setResetWaitTime(player);
plugin.removeWarp(playerUUID);
if (oldIsland != null) {
  CoopPlay.getInstance().clearAllIslandCoops(oldIsland);
  new DeleteIslandChunk(plugin,oldIsland);
}
for (String cmd : Settings.resetCommands) {
  try {
    if (!plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),cmd.replace(""String_Node_Str"",player.getName()))) {
      plugin.getLogger().severe(""String_Node_Str"");
      plugin.getLogger().severe(""String_Node_Str"" + cmd);
    }
  }
 catch (  Exception e) {
    plugin.getLogger().severe(""String_Node_Str"");
    plugin.getLogger().severe(""String_Node_Str"" + cmd);
    plugin.getLogger().severe(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
 else {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpIsland);
}
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeleport);
if (plugin.getSpawn().getSpawnLoc() != null) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSpawn);
}
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpRestart);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSetHome);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevel);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevelPlayer);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTop);
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarps);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeam);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpInvite);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpBiome);
}
if (!Settings.allowPvP) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpCoop);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  return true;
}
if (!plugin.playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
  return true;
}
Inventory inv=plugin.biomes.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getSpawn().getSpawnLoc() != null) {
player.teleport(plugin.getSpawn().getSpawnLoc());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.showTopTen(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.playerIsOnIsland(player)) {
if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
}
 else {
  calculateIslandLevel(player,playerUUID);
}
return true;
}
player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ ChatColor.YELLOW+ Locale.islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + Locale.inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + Locale.invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + Locale.rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + Locale.rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + Locale.rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + Locale.leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    removePlayerFromTeam(playerUUID,teamLeader);
    plugin.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + Locale.leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      plugin.setMessage(teamLeader,ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      plugin.getLogger().info(""String_Node_Str"");
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + Locale.teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ Locale.invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + Locale.warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=plugin.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((ASkyBlock.isSafeLocation(inFront))) {
      float yaw=ASkyBlock.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    plugin.removeWarp(warpSpot);
    return true;
  }
  if (!(ASkyBlock.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
}
 else {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
  player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
calculateIslandLevel(player,plugin.getPlayers().getUUID(split[1]));
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + Locale.coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + Locale.coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + Locale.coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.allowPvP) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + Locale.coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + Locale.coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.isOnIsland(player,target)) {
plugin.homeTeleport(target);
target.sendMessage(ChatColor.RED + Locale.expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + Locale.expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + Locale.expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    plugin.resetPlayer(target);
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  plugin.setMessage(targetPlayer,ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.removeWarp(targetPlayer);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + Locale.makeLeaderyouAreNowTheOwner);
    }
 else {
      plugin.setMessage(targetPlayer,Locale.makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + Locale.makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}","@Override public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  if (!(sender instanceof Player)) {
    return false;
  }
  final Player player=(Player)sender;
  if (!VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.sendMessage(ChatColor.RED + Locale.islanderrorYouDoNotHavePermission);
    return true;
  }
  final UUID playerUUID=player.getUniqueId();
  final UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
  List<UUID> teamMembers=new ArrayList<UUID>();
  if (teamLeader != null) {
    teamMembers=plugin.getPlayers().getMembers(teamLeader);
  }
  UUID targetPlayer=null;
switch (split.length) {
case 0:
    if (plugin.getPlayers().getIslandLocation(playerUUID) == null && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.GREEN + Locale.islandnew);
      final Location cowSpot=newIsland(sender);
      plugin.homeTeleport(player);
      plugin.resetPlayer(player);
      if (Settings.resetMoney) {
        resetMoney(player);
      }
      plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
        @Override public void run(){
          player.getWorld().spawnEntity(cowSpot,EntityType.COW);
        }
      }
,40L);
      setResetWaitTime(player);
      return true;
    }
 else {
      if (Settings.useControlPanel) {
        player.performCommand(Settings.ISLANDCOMMAND + ""String_Node_Str"");
      }
 else {
        plugin.homeTeleport(player);
        if (Settings.islandRemoveMobs) {
          plugin.removeMobs(player.getLocation());
        }
      }
      return true;
    }
case 1:
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
      player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
      return true;
    }
    plugin.homeTeleport(player);
    if (Settings.islandRemoveMobs) {
      plugin.removeMobs(player.getLocation());
    }
    return true;
  }
 else   if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  }
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.controlPanel.get(ControlPanel.getDefaultPanelName()));
    return true;
  }
}
if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.useEconomy && player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    player.openInventory(ControlPanel.miniShop);
    return true;
  }
}
}
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpWarp);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"") && plugin.playerIsOnIsland(player)) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
 else {
  Boolean hasWarp=false;
  String wlist=""String_Node_Str"";
  for (  UUID w : warpList) {
    if (wlist.isEmpty()) {
      wlist=plugin.getPlayers().getName(w);
    }
 else {
      wlist+=""String_Node_Str"" + plugin.getPlayers().getName(w);
    }
    if (w.equals(playerUUID)) {
      hasWarp=true;
    }
  }
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpsAvailable + ""String_Node_Str""+ ChatColor.WHITE+ wlist);
  if (!hasWarp && (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str""))) {
    player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
  }
  return true;
}
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().hasIsland(playerUUID)) {
player.performCommand(Settings.ISLANDCOMMAND);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.islandresetOnlyOwner);
}
 else {
  player.sendMessage(ChatColor.YELLOW + Locale.islandresetMustRemovePlayers);
}
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
player.sendMessage(ChatColor.RED + Locale.islandResetNoMore);
return true;
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
player.sendMessage(ChatColor.RED + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
if (!onRestartWaitTime(player) || Settings.resetWait == 0 || player.isOp()) {
player.sendMessage(ChatColor.RED + Locale.islandresetConfirm);
if (!confirm.containsKey(playerUUID) || !confirm.get(playerUUID)) {
  confirm.put(playerUUID,true);
  plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
    @Override public void run(){
      confirm.put(playerUUID,false);
    }
  }
,200L);
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetWait.replace(""String_Node_Str"",String.valueOf(getResetWaitTime(player))));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (confirm.containsKey(playerUUID) && confirm.get(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.islandresetPleaseWait);
plugin.getPlayers().setResetsLeft(playerUUID,plugin.getPlayers().getResetsLeft(playerUUID) - 1);
if (plugin.getPlayers().getResetsLeft(playerUUID) == 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.islandResetNoMore);
}
if (plugin.getPlayers().getResetsLeft(playerUUID) > 0) {
  player.sendMessage(ChatColor.YELLOW + Locale.resetYouHave.replace(""String_Node_Str"",String.valueOf(plugin.getPlayers().getResetsLeft(playerUUID))));
}
CoopPlay.getInstance().clearMyInvitedCoops(player);
CoopPlay.getInstance().clearMyCoops(player);
final Location oldIsland=plugin.getPlayers().getIslandLocation(playerUUID);
final Location cowSpot=newIsland(sender);
plugin.getPlayers().setHomeLocation(playerUUID,null);
plugin.homeTeleport(player);
plugin.resetPlayer(player);
if (Settings.resetMoney) {
  resetMoney(player);
}
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),Settings.defaultBiome);
plugin.getServer().getScheduler().runTaskLater(plugin,new Runnable(){
  @Override public void run(){
    player.getWorld().spawnEntity(cowSpot,EntityType.COW);
  }
}
,40L);
setResetWaitTime(player);
plugin.removeWarp(playerUUID);
if (oldIsland != null) {
  CoopPlay.getInstance().clearAllIslandCoops(oldIsland);
  new DeleteIslandChunk(plugin,oldIsland);
}
for (String cmd : Settings.resetCommands) {
  try {
    if (!plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),cmd.replace(""String_Node_Str"",player.getName()))) {
      plugin.getLogger().severe(""String_Node_Str"");
      plugin.getLogger().severe(""String_Node_Str"" + cmd);
    }
  }
 catch (  Exception e) {
    plugin.getLogger().severe(""String_Node_Str"");
    plugin.getLogger().severe(""String_Node_Str"" + cmd);
    plugin.getLogger().severe(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}
return true;
}
 else {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ Locale.islandhelpRestart);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.homeSet(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
player.sendMessage(ChatColor.GREEN + plugin.getName() + ""String_Node_Str""+ plugin.getDescription().getVersion()+ ""String_Node_Str"");
if (Settings.useControlPanel) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
}
 else {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpIsland);
}
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeleport);
if (plugin.getSpawn().getSpawnLoc() != null) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSpawn);
}
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpControlPanel);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpRestart);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpSetHome);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevel);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLevelPlayer);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTop);
if (Settings.useEconomy && VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMiniShop);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarps);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpWarp);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpTeam);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpInvite);
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpLeave);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpKick);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpAcceptReject);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpMakeLeader);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpBiome);
}
if (!Settings.allowPvP) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpExpel);
}
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.WHITE+ Locale.islandhelpCoop);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.levelerrornotYourIsland);
  return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
  return true;
}
if (!plugin.playerIsOnIsland(player)) {
  player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
  return true;
}
Inventory inv=plugin.biomes.getBiomePanel(player);
if (inv != null) {
  player.openInventory(inv);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") && plugin.getSpawn().getSpawnLoc() != null) {
player.teleport(plugin.getSpawn().getSpawnLoc());
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
plugin.showTopTen(player);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.playerIsOnIsland(player)) {
if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
}
 else {
  calculateIslandLevel(player,playerUUID);
}
return true;
}
player.sendMessage(ChatColor.RED + Locale.challengeserrorNotOnIsland);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ label+ ""String_Node_Str""+ ChatColor.YELLOW+ Locale.islandhelpInvite);
if (plugin.getPlayers().inTeam(playerUUID)) {
  if (teamLeader.equals(playerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
  return true;
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && inviteList.containsKey(playerUUID)) {
  if (plugin.getPlayers().hasIsland(playerUUID)) {
    plugin.getLogger().info(player.getName() + ""String_Node_Str"");
    plugin.deletePlayerIsland(playerUUID);
    plugin.getLogger().info(""String_Node_Str"");
  }
  addPlayertoTeam(playerUUID,inviteList.get(playerUUID));
  if (!plugin.getPlayers().inTeam(inviteList.get(playerUUID))) {
    addPlayertoTeam(inviteList.get(playerUUID),inviteList.get(playerUUID));
  }
  setResetWaitTime(player);
  plugin.homeTeleport(player);
  plugin.resetPlayer(player);
  player.sendMessage(ChatColor.GREEN + Locale.inviteyouHaveJoinedAnIsland);
  if (Bukkit.getPlayer(inviteList.get(playerUUID)) != null) {
    Bukkit.getPlayer(inviteList.get(playerUUID)).sendMessage(ChatColor.GREEN + Locale.invitehasJoinedYourIsland.replace(""String_Node_Str"",player.getName()));
  }
  inviteList.remove(player.getUniqueId());
  return true;
}
player.sendMessage(ChatColor.RED + Locale.errorCommandNotReady);
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (inviteList.containsKey(player.getUniqueId())) {
player.sendMessage(ChatColor.YELLOW + Locale.rejectyouHaveRejectedInvitation);
if (Bukkit.getPlayer(inviteList.get(player.getUniqueId())) != null) {
  Bukkit.getPlayer(inviteList.get(player.getUniqueId())).sendMessage(ChatColor.RED + Locale.rejectnameHasRejectedInvite.replace(""String_Node_Str"",player.getName()));
}
inviteList.remove(player.getUniqueId());
}
 else {
player.sendMessage(ChatColor.RED + Locale.rejectyouHaveNotBeenInvited);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (player.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
  if (plugin.getPlayers().inTeam(playerUUID)) {
    if (plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
      player.sendMessage(ChatColor.YELLOW + Locale.leaveerrorYouAreTheLeader);
      return true;
    }
    CoopPlay.getInstance().clearMyInvitedCoops(player);
    CoopPlay.getInstance().clearMyCoops(player);
    plugin.resetPlayer(player);
    if (!player.performCommand(Settings.SPAWNCOMMAND)) {
      player.teleport(player.getWorld().getSpawnLocation());
    }
    removePlayerFromTeam(playerUUID,teamLeader);
    plugin.removeWarp(playerUUID);
    player.sendMessage(ChatColor.YELLOW + Locale.leaveyouHaveLeftTheIsland);
    if (plugin.getServer().getPlayer(teamLeader) != null) {
      plugin.getServer().getPlayer(teamLeader).sendMessage(ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
 else {
      plugin.setMessage(teamLeader,ChatColor.RED + Locale.leavenameHasLeftYourIsland.replace(""String_Node_Str"",player.getName()));
    }
    if (teamMembers.size() < 2) {
      plugin.getLogger().info(""String_Node_Str"");
      removePlayerFromTeam(teamLeader,teamLeader);
    }
    return true;
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.leaveerrorYouCannotLeaveIsland);
    return true;
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorYouMustBeInWorld);
}
return true;
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (plugin.getPlayers().inTeam(playerUUID)) {
if (teamLeader.equals(playerUUID)) {
  int maxSize=Settings.maxTeamSize;
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP;
  }
  if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
    maxSize=Settings.maxTeamSizeVIP2;
  }
  if (teamMembers.size() < maxSize) {
    player.sendMessage(ChatColor.GREEN + Locale.inviteyouCanInvite.replace(""String_Node_Str"",String.valueOf(maxSize - teamMembers.size())));
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
  }
}
player.sendMessage(ChatColor.YELLOW + Locale.teamlistingMembers + ""String_Node_Str"");
for (UUID m : plugin.getPlayers().getMembers(teamLeader)) {
  player.sendMessage(ChatColor.WHITE + plugin.getPlayers().getName(m));
}
}
 else if (inviteList.containsKey(playerUUID)) {
player.sendMessage(ChatColor.YELLOW + Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",plugin.getPlayers().getName(inviteList.get(playerUUID))));
player.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ Locale.invitetoAcceptOrReject);
}
 else {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
}
return true;
}
 else {
return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final Set<UUID> warpList=plugin.listWarps();
if (warpList.isEmpty()) {
player.sendMessage(ChatColor.YELLOW + Locale.warpserrorNoWarpsYet);
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
  player.sendMessage(ChatColor.YELLOW + Locale.warpswarpTip);
}
return true;
}
 else {
UUID foundWarp=null;
for (UUID warp : warpList) {
  if (plugin.getPlayers().getName(warp).toLowerCase().startsWith(split[1].toLowerCase())) {
    foundWarp=warp;
    break;
  }
}
if (foundWarp == null) {
  player.sendMessage(ChatColor.RED + Locale.warpserrorDoesNotExist);
  return true;
}
 else {
  final Location warpSpot=plugin.getWarp(foundWarp);
  if (warpSpot == null) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotReadyYet);
    plugin.getLogger().warning(""String_Node_Str"" + plugin.getPlayers().getName(foundWarp));
    return true;
  }
  Block b=warpSpot.getBlock();
  if (b.getType().equals(Material.SIGN_POST)) {
    Sign sign=(Sign)b.getState();
    org.bukkit.material.Sign s=(org.bukkit.material.Sign)sign.getData();
    BlockFace directionFacing=s.getFacing();
    Location inFront=b.getRelative(directionFacing).getLocation();
    if ((ASkyBlock.isSafeLocation(inFront))) {
      float yaw=ASkyBlock.blockFaceToFloat(directionFacing);
      final Location actualWarp=new Location(inFront.getWorld(),inFront.getBlockX() + 0.5D,inFront.getBlockY(),inFront.getBlockZ() + 0.5D,yaw,30F);
      player.teleport(actualWarp);
      player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
      return true;
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    plugin.removeWarp(warpSpot);
    return true;
  }
  if (!(ASkyBlock.isSafeLocation(warpSpot))) {
    player.sendMessage(ChatColor.RED + Locale.warpserrorNotSafe);
    plugin.getLogger().warning(""String_Node_Str"" + warpSpot.toString() + ""String_Node_Str""+ plugin.getPlayers().getName(foundWarp));
    return true;
  }
 else {
    final Location actualWarp=new Location(warpSpot.getWorld(),warpSpot.getBlockX() + 0.5D,warpSpot.getBlockY(),warpSpot.getBlockZ() + 0.5D);
    player.teleport(actualWarp);
    player.getWorld().playSound(player.getLocation(),Sound.BAT_TAKEOFF,1F,1F);
    return true;
  }
}
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID) && !plugin.getPlayers().hasIsland(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.errorNoIsland);
}
 else {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
  player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
calculateIslandLevel(player,plugin.getPlayers().getUUID(split[1]));
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
}
return false;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getServer().getPlayer(invitedPlayerUUID) == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
    int maxSize=Settings.maxTeamSize;
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP;
    }
    if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
      maxSize=Settings.maxTeamSizeVIP2;
    }
    if (teamMembers.size() < maxSize) {
      if (inviteList.containsValue(playerUUID)) {
        inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
        player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
      }
      inviteList.put(invitedPlayerUUID,player.getUniqueId());
      player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
      Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
    }
 else {
      player.sendMessage(ChatColor.RED + Locale.inviteerrorYourIslandIsFull);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
}
}
 else {
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
  if (inviteList.containsValue(playerUUID)) {
    inviteList.remove(getKeyByValue(inviteList,player.getUniqueId()));
    player.sendMessage(ChatColor.YELLOW + Locale.inviteremovingInvite);
  }
  inviteList.put(invitedPlayerUUID,player.getUniqueId());
  player.sendMessage(ChatColor.GREEN + Locale.inviteinviteSentTo.replace(""String_Node_Str"",split[1]));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(Locale.invitenameHasInvitedYou.replace(""String_Node_Str"",player.getName()));
  Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.WHITE + ""String_Node_Str"" + label+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ Locale.invitetoAcceptOrReject);
  if (plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
    Bukkit.getPlayer(invitedPlayerUUID).sendMessage(ChatColor.RED + Locale.invitewarningYouWillLoseIsland);
  }
}
 else {
  player.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
}
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
final UUID invitedPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (invitedPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
Player newPlayer=plugin.getServer().getPlayer(invitedPlayerUUID);
if (newPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (!plugin.getPlayers().hasIsland(playerUUID) && !plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouMustHaveIslandToInvite);
return true;
}
if (player.getName().equalsIgnoreCase(split[1])) {
player.sendMessage(ChatColor.RED + Locale.inviteerrorYouCannotInviteYourself);
return true;
}
if (plugin.getPlayers().getMembers(playerUUID).contains(invitedPlayerUUID)) {
player.sendMessage(ChatColor.RED + Locale.coopOnYourTeam);
return true;
}
if (!plugin.getPlayers().inTeam(invitedPlayerUUID)) {
if (!plugin.getPlayers().hasIsland(invitedPlayerUUID)) {
  player.sendMessage(ChatColor.RED + Locale.errorNoIslandOther);
  return true;
}
}
CoopPlay.getInstance().addCoopPlayer(player,newPlayer);
player.sendMessage(ChatColor.GREEN + Locale.coopSuccess.replace(""String_Node_Str"",newPlayer.getDisplayName()));
newPlayer.sendMessage(ChatColor.GREEN + Locale.coopMadeYouCoop.replace(""String_Node_Str"",player.getDisplayName()));
return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (Settings.allowPvP) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
final UUID targetPlayerUUID=plugin.getPlayers().getUUID(split[1]);
if (targetPlayerUUID == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
Player target=plugin.getServer().getPlayer(targetPlayerUUID);
if (target == null) {
player.sendMessage(ChatColor.RED + Locale.errorOfflinePlayer);
return true;
}
if (target.isOp() || VaultHelper.checkPerm(target,Settings.PERMPREFIX + ""String_Node_Str"")) {
player.sendMessage(ChatColor.RED + Locale.expelFail.replace(""String_Node_Str"",target.getDisplayName()));
return true;
}
boolean coop=CoopPlay.getInstance().removeCoopPlayer(player,target);
if (coop) {
target.sendMessage(ChatColor.RED + Locale.coopRemoved.replace(""String_Node_Str"",player.getDisplayName()));
player.sendMessage(ChatColor.GREEN + Locale.coopRemoveSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
if (plugin.isOnIsland(player,target)) {
plugin.homeTeleport(target);
target.sendMessage(ChatColor.RED + Locale.expelExpelled);
plugin.getLogger().info(player.getName() + ""String_Node_Str"" + target.getName()+ ""String_Node_Str"");
player.sendMessage(ChatColor.GREEN + Locale.expelSuccess.replace(""String_Node_Str"",target.getDisplayName()));
}
 else if (!coop) {
player.sendMessage(ChatColor.RED + Locale.expelNotOnIsland);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNoTeam);
return true;
}
if (teamLeader != null && !teamLeader.equals(playerUUID)) {
player.sendMessage(ChatColor.RED + Locale.kickerrorOnlyLeaderCan);
return true;
}
targetPlayer=null;
for (UUID member : teamMembers) {
if (plugin.getPlayers().getName(member).equalsIgnoreCase(split[1])) {
  targetPlayer=member;
}
}
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
return true;
}
if (teamMembers.contains(targetPlayer)) {
if (player.getUniqueId().equals(targetPlayer)) {
  player.sendMessage(ChatColor.RED + Locale.leaveerrorLeadersCannotLeave);
  return true;
}
Player target=plugin.getServer().getPlayer(targetPlayer);
if (target != null) {
  target.sendMessage(ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
  CoopPlay.getInstance().clearMyInvitedCoops(target);
  CoopPlay.getInstance().clearMyCoops(target);
  if (target.getWorld().getName().equalsIgnoreCase(ASkyBlock.getIslandWorld().getName())) {
    for (    ItemStack i : target.getInventory().getContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    for (    ItemStack i : target.getEquipment().getArmorContents()) {
      if (i != null) {
        try {
          player.getWorld().dropItemNaturally(player.getLocation(),i);
        }
 catch (        Exception e) {
        }
      }
    }
    player.getInventory().clear();
    player.getInventory().setArmorContents(null);
    player.getInventory().setHelmet(null);
    player.getInventory().setChestplate(null);
    player.getInventory().setLeggings(null);
    player.getInventory().setBoots(null);
    player.getEquipment().clear();
    if (Settings.resetChallenges) {
      plugin.getPlayers().resetAllChallenges(player.getUniqueId());
    }
    plugin.getPlayers().setIslandLevel(player.getUniqueId(),0);
    plugin.getPlayers().save(player.getUniqueId());
    plugin.updateTopTen();
    player.updateInventory();
  }
  if (!target.performCommand(Settings.SPAWNCOMMAND)) {
    target.teleport(ASkyBlock.getIslandWorld().getSpawnLocation());
  }
}
 else {
  plugin.setMessage(targetPlayer,ChatColor.RED + Locale.kicknameRemovedYou.replace(""String_Node_Str"",player.getName()));
}
plugin.removeWarp(targetPlayer);
sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[1]));
removePlayerFromTeam(targetPlayer,teamLeader);
teamMembers.remove(targetPlayer);
if (teamMembers.size() < 2) {
  removePlayerFromTeam(player.getUniqueId(),teamLeader);
}
}
 else {
plugin.getLogger().warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ plugin.getPlayers().getName(targetPlayer));
player.sendMessage(ChatColor.RED + Locale.kickerrorNotPartOfTeam);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (VaultHelper.checkPerm(player,Settings.PERMPREFIX + ""String_Node_Str"")) {
targetPlayer=plugin.getPlayers().getUUID(split[1]);
if (targetPlayer == null) {
player.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().inTeam(player.getUniqueId())) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorYouMustBeInTeam);
return true;
}
if (plugin.getPlayers().getMembers(player.getUniqueId()).size() > 2) {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorRemoveAllPlayersFirst);
plugin.getLogger().info(player.getName() + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(player.getUniqueId())) {
if (teamLeader.equals(player.getUniqueId())) {
  if (teamMembers.contains(targetPlayer)) {
    if (plugin.getServer().getPlayer(targetPlayer) != null) {
      plugin.getServer().getPlayer(targetPlayer).sendMessage(ChatColor.GREEN + Locale.makeLeaderyouAreNowTheOwner);
    }
 else {
      plugin.setMessage(targetPlayer,Locale.makeLeaderyouAreNowTheOwner);
    }
    player.sendMessage(ChatColor.GREEN + Locale.makeLeadernameIsNowTheOwner.replace(""String_Node_Str"",plugin.getPlayers().getName(targetPlayer)));
    removePlayerFromTeam(targetPlayer,teamLeader);
    removePlayerFromTeam(teamLeader,teamLeader);
    plugin.transferIsland(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(player.getUniqueId(),targetPlayer);
    addPlayertoTeam(targetPlayer,targetPlayer);
    return true;
  }
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorThatPlayerIsNotInTeam);
}
 else {
  player.sendMessage(ChatColor.RED + Locale.makeLeadererrorNotYourIsland);
}
}
 else {
player.sendMessage(ChatColor.RED + Locale.makeLeadererrorGeneralError);
}
return true;
}
 else {
player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
return false;
}
}
 else {
return false;
}
}
return false;
}"
34116,"@Override public void onEnable(){
  plugin=this;
  saveDefaultConfig();
  saveDefaultChallengeConfig();
  saveDefaultLocale();
  if (!VaultHelper.setupEconomy()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  loadPluginConfig();
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  getCommand(""String_Node_Str"").setExecutor(new IslandCmd(this));
  getCommand(""String_Node_Str"").setExecutor(getChallenges());
  getCommand(""String_Node_Str"").setExecutor(new AdminCmd(this));
  loadWarpList();
  loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getLogger().info(""String_Node_Str"");
        try {
          getServer().dispatchCommand(getServer().getConsoleSender(),""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
          getServer().dispatchCommand(getServer().getConsoleSender(),""String_Node_Str"" + Settings.worldName);
        }
 catch (        Exception e) {
          getLogger().info(""String_Node_Str"");
          e.printStackTrace();
          getServer().getPluginManager().disablePlugin(plugin);
        }
      }
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getServer().getPluginManager().disablePlugin(plugin);
      }
    }
  }
);
  if (Settings.mobAcidDamage > 0D) {
    getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
      @Override public void run(){
        List<Entity> entList=acidWorld.getEntities();
        for (        Entity current : entList) {
          if (current instanceof Monster) {
            if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
              ((Monster)current).damage(Settings.mobAcidDamage);
            }
          }
        }
      }
    }
,0L,20L);
  }
}","@Override public void onEnable(){
  plugin=this;
  saveDefaultConfig();
  saveDefaultChallengeConfig();
  saveDefaultLocale();
  if (!VaultHelper.setupEconomy()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  loadPluginConfig();
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  getCommand(""String_Node_Str"").setExecutor(new IslandCmd(this));
  getCommand(""String_Node_Str"").setExecutor(getChallenges());
  getCommand(""String_Node_Str"").setExecutor(new AdminCmd(this));
  loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      loadWarpList();
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getLogger().info(""String_Node_Str"");
        try {
          getServer().dispatchCommand(getServer().getConsoleSender(),""String_Node_Str"" + Settings.worldName + ""String_Node_Str"");
          getServer().dispatchCommand(getServer().getConsoleSender(),""String_Node_Str"" + Settings.worldName);
        }
 catch (        Exception e) {
          getLogger().info(""String_Node_Str"");
          e.printStackTrace();
          getServer().getPluginManager().disablePlugin(plugin);
        }
      }
      if (getServer().getWorld(Settings.worldName).getGenerator() == null) {
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getLogger().severe(""String_Node_Str"");
        getServer().getPluginManager().disablePlugin(plugin);
      }
    }
  }
);
  if (Settings.mobAcidDamage > 0D) {
    getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
      @Override public void run(){
        List<Entity> entList=acidWorld.getEntities();
        for (        Entity current : entList) {
          if (current instanceof Monster) {
            if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
              ((Monster)current).damage(Settings.mobAcidDamage);
            }
          }
        }
      }
    }
,0L,20L);
  }
}"
34117,"@Override public void onEnable(){
  plugin=this;
  saveDefaultConfig();
  saveDefaultChallengeConfig();
  saveDefaultLocale();
  if (!VaultHelper.setupEconomy()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
  }
  loadPluginConfig();
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  getCommand(""String_Node_Str"").setExecutor(new IslandCmd(this));
  getCommand(""String_Node_Str"").setExecutor(getChallenges());
  getCommand(""String_Node_Str"").setExecutor(new AdminCmd(this));
  loadWarpList();
  loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getLogger().info(""String_Node_Str"");
        try {
          getServer().dispatchCommand(getServer().getConsoleSender(),""String_Node_Str"" + Settings.worldName);
        }
 catch (        Exception e) {
          getLogger().info(""String_Node_Str"");
          e.printStackTrace();
          getServer().getPluginManager().disablePlugin(plugin);
        }
      }
    }
  }
);
  if (Settings.mobAcidDamage > 0D) {
    getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
      @Override public void run(){
        List<Entity> entList=acidWorld.getEntities();
        for (        Entity current : entList) {
          if (current instanceof Monster) {
            if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
              ((Monster)current).damage(Settings.mobAcidDamage);
            }
          }
        }
      }
    }
,0L,20L);
  }
}","@Override public void onEnable(){
  plugin=this;
  saveDefaultConfig();
  saveDefaultChallengeConfig();
  saveDefaultLocale();
  if (!VaultHelper.setupEconomy()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  if (!VaultHelper.setupPermissions()) {
    getLogger().severe(""String_Node_Str"");
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  loadPluginConfig();
  playersFolder=new File(getDataFolder() + File.separator + ""String_Node_Str"");
  if (!playersFolder.exists()) {
    playersFolder.mkdir();
  }
  getCommand(""String_Node_Str"").setExecutor(new IslandCmd(this));
  getCommand(""String_Node_Str"").setExecutor(getChallenges());
  getCommand(""String_Node_Str"").setExecutor(new AdminCmd(this));
  loadWarpList();
  loadMessages();
  registerEvents();
  try {
    final Metrics metrics=new Metrics(this);
    metrics.start();
  }
 catch (  final IOException localIOException) {
  }
  getServer().getScheduler().runTask(this,new Runnable(){
    @Override public void run(){
      getIslandWorld();
      getServer().getPluginManager().registerEvents(new ControlPanel(plugin),plugin);
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        getLogger().info(""String_Node_Str"");
        try {
          getServer().dispatchCommand(getServer().getConsoleSender(),""String_Node_Str"" + Settings.worldName);
        }
 catch (        Exception e) {
          getLogger().info(""String_Node_Str"");
          e.printStackTrace();
          getServer().getPluginManager().disablePlugin(plugin);
        }
      }
    }
  }
);
  if (Settings.mobAcidDamage > 0D) {
    getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
      @Override public void run(){
        List<Entity> entList=acidWorld.getEntities();
        for (        Entity current : entList) {
          if (current instanceof Monster) {
            if ((current.getLocation().getBlock().getType() == Material.WATER) || (current.getLocation().getBlock().getType() == Material.STATIONARY_WATER)) {
              ((Monster)current).damage(Settings.mobAcidDamage);
            }
          }
        }
      }
    }
,0L,20L);
  }
}"
34118,"public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  Player player;
  if (sender instanceof Player) {
    player=(Player)sender;
    if (split.length > 0) {
      if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!checkAdminPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
 else {
        if (!checkModPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
    }
  }
switch (split.length) {
case 0:
    help(sender);
  return true;
case 1:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!(sender instanceof Player)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Player p=(Player)sender;
  Location closestBedRock=null;
  double distance=0;
  for (int x=-Settings.islandDistance; x < Settings.islandDistance; x++) {
    for (int z=-Settings.islandDistance; z < Settings.islandDistance; z++) {
      Location blockLoc=new Location(p.getWorld(),x + p.getLocation().getBlockX(),Settings.island_level,z + p.getLocation().getBlockZ());
      if (blockLoc.getBlock().getType().equals(Material.BEDROCK)) {
        if (closestBedRock == null) {
          closestBedRock=blockLoc.clone();
          distance=closestBedRock.distanceSquared(p.getLocation());
        }
 else {
          double newDist=blockLoc.distanceSquared(p.getLocation());
          if (distance > newDist) {
            closestBedRock=blockLoc.clone();
            distance=newDist;
          }
        }
      }
    }
  }
  if (closestBedRock == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
  if (target == null) {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
 else {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
    if (plugin.getPlayers().inTeam(target)) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
  plugin.getSpawn().setSpawnLoc(closestBedRock,((Player)sender).getLocation());
  closestBedRock.getWorld().setSpawnLocation(((Player)sender).getLocation().getBlockX(),closestBedRock.getBlockY(),closestBedRock.getBlockZ());
  if (target != null) {
    plugin.getPlayers().setIslandLevel(target,0);
    plugin.getPlayers().setHasIsland(target,false);
    plugin.getPlayers().setHomeLocation(target,null);
    plugin.getPlayers().setIslandLocation(target,null);
    plugin.getPlayers().save(target);
  }
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  plugin.getSpawn().save();
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!(sender instanceof Player)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Location closestIsland=getClosestIsland(((Player)sender).getLocation());
  if (closestIsland == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
  if (target == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  showInfo(target,sender);
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!(sender instanceof Player)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Player p=(Player)sender;
  BlockIterator iter=new BlockIterator(p,10);
  Block lastBlock=iter.next();
  while (iter.hasNext()) {
    lastBlock=iter.next();
    if (lastBlock.getType() == Material.AIR)     continue;
    break;
  }
  if (!lastBlock.getType().equals(Material.SIGN_POST)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Sign sign=(Sign)lastBlock.getState();
  try {
    if (!sign.getLine(0).equalsIgnoreCase(ChatColor.GREEN + Locale.warpswelcomeLine) && !sign.getLine(0).equalsIgnoreCase(ChatColor.RED + Locale.warpswelcomeLine)) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
 catch (  Exception e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  Location closestBedRock=getClosestIsland(((Player)sender).getLocation());
  if (closestBedRock == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
  if (target == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (plugin.addWarp(target,lastBlock.getLocation())) {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
    return true;
  }
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getWarpOwner(lastBlock.getLocation()));
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  plugin.reloadConfig();
  plugin.loadPluginConfig();
  plugin.reloadChallengeConfig();
  ControlPanel.loadShop();
  ControlPanel.loadControlPanel();
  plugin.getSpawn().reload();
  sender.sendMessage(ChatColor.YELLOW + Locale.reloadconfigReloaded);
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTengenerating);
  plugin.updateTopTen();
  sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTenfinished);
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (purgeFlag) {
    sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
    return true;
  }
  sender.sendMessage(ChatColor.YELLOW + Locale.purgeusage);
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!confirmReq) {
    sender.sendMessage(ChatColor.RED + Locale.confirmerrorTimeLimitExpired);
    return true;
  }
 else {
    confirmOK=true;
    confirmReq=false;
  }
  return true;
}
 else {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
  return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
  sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
  return true;
}
purgeFlag=true;
final int time=Integer.parseInt(split[1]) * 24;
sender.sendMessage(ChatColor.YELLOW + Locale.purgecalculating.replace(""String_Node_Str"",split[1]));
plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
  public void run(){
    final File directoryPlayers=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
    long offlineTime=0L;
    for (    final File playerFile : directoryPlayers.listFiles()) {
      if (playerFile.getName().endsWith(""String_Node_Str"")) {
        final UUID playerUUID=UUID.fromString(playerFile.getName().substring(0,playerFile.getName().length() - 4));
        if (Bukkit.getOfflinePlayer(playerUUID) != null && Bukkit.getPlayer(playerUUID) == null) {
          final OfflinePlayer oplayer=Bukkit.getOfflinePlayer(playerUUID);
          offlineTime=oplayer.getLastPlayed();
          offlineTime=(System.currentTimeMillis() - offlineTime) / 3600000L;
          if (offlineTime > time) {
            if (plugin.getPlayers().hasIsland(playerUUID)) {
              if (!plugin.getPlayers().inTeam(playerUUID)) {
                if (plugin.getPlayers().getIslandLevel(playerUUID) < Settings.abandonedIslandLevel) {
                  removeList.add(playerUUID);
                }
              }
            }
          }
        }
      }
    }
    if (removeList.isEmpty()) {
      sender.sendMessage(ChatColor.YELLOW + Locale.purgenoneFound);
      purgeFlag=false;
      return;
    }
    sender.sendMessage(ChatColor.YELLOW + Locale.purgethisWillRemove.replace(""String_Node_Str"",String.valueOf(removeList.size())));
    sender.sendMessage(ChatColor.RED + Locale.purgewarning);
    sender.sendMessage(ChatColor.RED + Locale.purgetypeConfirm);
    confirmReq=true;
    confirmOK=false;
    confirmTimer=0;
    new BukkitRunnable(){
      @Override public void run(){
        if (confirmTimer++ > 10) {
          confirmReq=false;
          confirmOK=false;
          purgeFlag=false;
          removeList.clear();
          sender.sendMessage(ChatColor.YELLOW + Locale.purgepurgeCancelled);
          this.cancel();
        }
 else         if (confirmOK) {
          new BukkitRunnable(){
            @Override public void run(){
              if (removeList.isEmpty() && purgeFlag) {
                purgeFlag=false;
                sender.sendMessage(ChatColor.YELLOW + Locale.purgefinished);
                this.cancel();
              }
              if (removeList.size() > 0 && purgeFlag) {
                plugin.deletePlayerIsland(removeList.get(0));
                sender.sendMessage(ChatColor.YELLOW + Locale.purgeremovingName.replace(""String_Node_Str"",plugin.getPlayers().getName(removeList.get(0))));
                removeList.remove(0);
              }
            }
          }
.runTaskTimer(plugin,0L,100L);
          confirmReq=false;
          confirmOK=false;
          this.cancel();
        }
      }
    }
.runTaskTimer(plugin,0L,20L);
  }
}
);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
 else {
  plugin.getPlayers().setResetsLeft(playerUUID,Settings.resetLimit);
  sender.sendMessage(ChatColor.YELLOW + Locale.clearedResetLimit + ""String_Node_Str""+ Settings.resetLimit+ ""String_Node_Str"");
  return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
  return true;
}
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
 else {
  if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
    ((Player)sender).teleport(plugin.getSafeHomeLocation(playerUUID));
    return true;
  }
  sender.sendMessage(Locale.errorNoIslandOther);
  return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
 else {
  if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
    sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",split[1]));
    plugin.deletePlayerIsland(playerUUID);
    Player target=plugin.getServer().getPlayer(playerUUID);
    if (target != null) {
      plugin.resetPlayer(target);
    }
    return true;
  }
  sender.sendMessage(Locale.errorNoIslandOther);
  return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (sender instanceof Player) {
  final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
  if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
    sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
    return true;
  }
 else {
    if (adminSetPlayerIsland(sender,((Player)sender).getLocation(),playerUUID)) {
      sender.sendMessage(ChatColor.GREEN + Locale.registersettingIsland.replace(""String_Node_Str"",split[1]));
    }
 else {
      sender.sendMessage(ChatColor.RED + Locale.registererrorBedrockNotFound);
    }
    return true;
  }
}
 else {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
 else {
  showInfo(playerUUID,sender);
  return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
plugin.getPlayers().resetAllChallenges(playerUUID);
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengessuccess.replace(""String_Node_Str"",split[1]));
return true;
}
 else {
return false;
}
case 3:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
}
return true;
}
Biome biome=null;
String biomeName=split[2].toUpperCase();
try {
biome=Biome.valueOf(biomeName);
biomeName=biome.name();
if (!plugin.getConfig().contains(""String_Node_Str"" + biomeName)) {
  sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
  for (  Biome b : Biome.values()) {
    if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
      sender.sendMessage(b.name());
    }
  }
  return true;
}
biomeName=plugin.getConfig().getString(""String_Node_Str"" + biomeName + ""String_Node_Str"",ASkyBlock.prettifyText(biomeName));
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
  if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
    sender.sendMessage(b.name());
  }
}
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
plugin.setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
}
 else {
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),biome);
}
sender.sendMessage(ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
if (targetPlayer != null) {
targetPlayer.sendMessage(""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
 else {
plugin.setMessage(playerUUID,""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorNoTeam);
  return true;
}
UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
if (!teamLeader.equals(playerUUID)) {
  plugin.getPlayers().setLeaveTeam(playerUUID);
  plugin.getPlayers().setHomeLocation(playerUUID,null);
  plugin.getPlayers().setIslandLocation(playerUUID,null);
  plugin.getPlayers().removeMember(teamLeader,playerUUID);
  if (plugin.getPlayers().getMembers(teamLeader).size() < 2) {
    plugin.getPlayers().setLeaveTeam(teamLeader);
  }
  plugin.removeWarp(playerUUID);
  sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[2]));
  return true;
}
 else {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + split[2]+ ""String_Node_Str"");
  return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.completeChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().get(playerUUID).completeChallenge(split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.completeChallengechallangeCompleted.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.resetChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().resetChallenge(playerUUID,split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengechallengeReset.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else {
return false;
}
case 4:
if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
final Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
final UUID teamLeader=plugin.getPlayers().getUUID(split[3]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID) || !plugin.getPlayers().isAKnownPlayer(teamLeader)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (playerUUID.equals(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (!plugin.getPlayers().hasIsland(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
return true;
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
plugin.getPlayers().setJoinTeam(teamLeader,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
targetPlayer.performCommand(""String_Node_Str"");
}
if (plugin.getPlayers().hasIsland(playerUUID)) {
Location islandLoc=plugin.getPlayers().getIslandLocation(playerUUID);
if (islandLoc != null) {
sender.sendMessage(ChatColor.RED + plugin.getPlayers().getName(playerUUID) + ""String_Node_Str""+ islandLoc.getBlockX()+ ""String_Node_Str""+ islandLoc.getBlockZ()+ ""String_Node_Str"");
}
}
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().setHasIsland(playerUUID,false);
plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
plugin.homeTeleport(targetPlayer);
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
default :
return false;
}
}","public boolean onCommand(final CommandSender sender,final Command command,final String label,final String[] split){
  Player player;
  if (sender instanceof Player) {
    player=(Player)sender;
    if (split.length > 0) {
      if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")|| split[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (!checkAdminPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
 else {
        if (!checkModPerms(player,split)) {
          player.sendMessage(ChatColor.RED + Locale.errorNoPermission);
          return true;
        }
      }
    }
  }
switch (split.length) {
case 0:
    help(sender);
  return true;
case 1:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!(sender instanceof Player)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Player p=(Player)sender;
  Location closestBedRock=null;
  double distance=0;
  for (int x=-Settings.islandDistance; x < Settings.islandDistance; x++) {
    for (int z=-Settings.islandDistance; z < Settings.islandDistance; z++) {
      Location blockLoc=new Location(p.getWorld(),x + p.getLocation().getBlockX(),Settings.island_level,z + p.getLocation().getBlockZ());
      if (blockLoc.getBlock().getType().equals(Material.BEDROCK)) {
        if (closestBedRock == null) {
          closestBedRock=blockLoc.clone();
          distance=closestBedRock.distanceSquared(p.getLocation());
        }
 else {
          double newDist=blockLoc.distanceSquared(p.getLocation());
          if (distance > newDist) {
            closestBedRock=blockLoc.clone();
            distance=newDist;
          }
        }
      }
    }
  }
  if (closestBedRock == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
  if (target == null) {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
 else {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
    if (plugin.getPlayers().inTeam(target)) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
  plugin.getSpawn().setSpawnLoc(closestBedRock,((Player)sender).getLocation());
  closestBedRock.getWorld().setSpawnLocation(((Player)sender).getLocation().getBlockX(),closestBedRock.getBlockY(),closestBedRock.getBlockZ());
  if (target != null) {
    plugin.getPlayers().setIslandLevel(target,0);
    plugin.getPlayers().setHasIsland(target,false);
    plugin.getPlayers().setHomeLocation(target,null);
    plugin.getPlayers().setIslandLocation(target,null);
    plugin.getPlayers().save(target);
  }
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  plugin.getSpawn().save();
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!(sender instanceof Player)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Location closestIsland=getClosestIsland(((Player)sender).getLocation());
  if (closestIsland == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestIsland);
  if (target == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  showInfo(target,sender);
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!(sender instanceof Player)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Player p=(Player)sender;
  BlockIterator iter=new BlockIterator(p,10);
  Block lastBlock=iter.next();
  while (iter.hasNext()) {
    lastBlock=iter.next();
    if (lastBlock.getType() == Material.AIR)     continue;
    break;
  }
  if (!lastBlock.getType().equals(Material.SIGN_POST)) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  Sign sign=(Sign)lastBlock.getState();
  try {
    if (!sign.getLine(0).equalsIgnoreCase(ChatColor.GREEN + Locale.warpswelcomeLine) && !sign.getLine(0).equalsIgnoreCase(ChatColor.RED + Locale.warpswelcomeLine)) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
 catch (  Exception e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  Location closestBedRock=getClosestIsland(((Player)sender).getLocation());
  if (closestBedRock == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  UUID target=plugin.getPlayers().getPlayerFromIslandLocation(closestBedRock);
  if (target == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (plugin.addWarp(target,lastBlock.getLocation())) {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + plugin.getPlayers().getName(target));
    return true;
  }
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getWarpOwner(lastBlock.getLocation()));
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  plugin.reloadConfig();
  plugin.loadPluginConfig();
  plugin.reloadChallengeConfig();
  ControlPanel.loadShop();
  ControlPanel.loadControlPanel();
  plugin.getSpawn().reload();
  sender.sendMessage(ChatColor.YELLOW + Locale.reloadconfigReloaded);
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTengenerating);
  plugin.updateTopTen();
  sender.sendMessage(ChatColor.YELLOW + Locale.adminTopTenfinished);
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (purgeFlag) {
    sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
    return true;
  }
  sender.sendMessage(ChatColor.YELLOW + Locale.purgeusage);
  return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
  if (!confirmReq) {
    sender.sendMessage(ChatColor.RED + Locale.confirmerrorTimeLimitExpired);
    return true;
  }
 else {
    confirmOK=true;
    confirmReq=false;
  }
  return true;
}
 else {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
  return false;
}
case 2:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (purgeFlag) {
  sender.sendMessage(ChatColor.RED + Locale.purgealreadyRunning);
  return true;
}
purgeFlag=true;
final int time=Integer.parseInt(split[1]) * 24;
sender.sendMessage(ChatColor.YELLOW + Locale.purgecalculating.replace(""String_Node_Str"",split[1]));
plugin.getServer().getScheduler().runTask(plugin,new Runnable(){
  public void run(){
    final File directoryPlayers=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str"");
    long offlineTime=0L;
    for (    final File playerFile : directoryPlayers.listFiles()) {
      if (playerFile.getName().endsWith(""String_Node_Str"")) {
        final UUID playerUUID=UUID.fromString(playerFile.getName().substring(0,playerFile.getName().length() - 4));
        if (Bukkit.getOfflinePlayer(playerUUID) != null && Bukkit.getPlayer(playerUUID) == null) {
          final OfflinePlayer oplayer=Bukkit.getOfflinePlayer(playerUUID);
          offlineTime=oplayer.getLastPlayed();
          offlineTime=(System.currentTimeMillis() - offlineTime) / 3600000L;
          if (offlineTime > time) {
            if (plugin.getPlayers().hasIsland(playerUUID)) {
              if (!plugin.getPlayers().inTeam(playerUUID)) {
                if (plugin.getPlayers().getIslandLevel(playerUUID) < Settings.abandonedIslandLevel) {
                  removeList.add(playerUUID);
                }
              }
            }
          }
        }
      }
    }
    if (removeList.isEmpty()) {
      sender.sendMessage(ChatColor.YELLOW + Locale.purgenoneFound);
      purgeFlag=false;
      return;
    }
    sender.sendMessage(ChatColor.YELLOW + Locale.purgethisWillRemove.replace(""String_Node_Str"",String.valueOf(removeList.size())));
    sender.sendMessage(ChatColor.RED + Locale.purgewarning);
    sender.sendMessage(ChatColor.RED + Locale.purgetypeConfirm);
    confirmReq=true;
    confirmOK=false;
    confirmTimer=0;
    new BukkitRunnable(){
      @Override public void run(){
        if (confirmTimer++ > 10) {
          confirmReq=false;
          confirmOK=false;
          purgeFlag=false;
          removeList.clear();
          sender.sendMessage(ChatColor.YELLOW + Locale.purgepurgeCancelled);
          this.cancel();
        }
 else         if (confirmOK) {
          new BukkitRunnable(){
            @Override public void run(){
              if (removeList.isEmpty() && purgeFlag) {
                purgeFlag=false;
                sender.sendMessage(ChatColor.YELLOW + Locale.purgefinished);
                this.cancel();
              }
              if (removeList.size() > 0 && purgeFlag) {
                plugin.deletePlayerIsland(removeList.get(0));
                sender.sendMessage(ChatColor.YELLOW + Locale.purgeremovingName.replace(""String_Node_Str"",plugin.getPlayers().getName(removeList.get(0))));
                removeList.remove(0);
              }
            }
          }
.runTaskTimer(plugin,0L,100L);
          confirmReq=false;
          confirmOK=false;
          this.cancel();
        }
      }
    }
.runTaskTimer(plugin,0L,20L);
  }
}
);
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
 else {
  plugin.getPlayers().setResetsLeft(playerUUID,Settings.resetLimit);
  sender.sendMessage(ChatColor.YELLOW + Locale.clearedResetLimit + ""String_Node_Str""+ Settings.resetLimit+ ""String_Node_Str"");
  return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (!(sender instanceof Player)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
  return true;
}
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
 else {
  if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
    ((Player)sender).teleport(plugin.getSafeHomeLocation(playerUUID));
    return true;
  }
  sender.sendMessage(Locale.errorNoIslandOther);
  return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
 else {
  if (plugin.getPlayers().getIslandLocation(playerUUID) != null) {
    sender.sendMessage(ChatColor.YELLOW + Locale.deleteremoving.replace(""String_Node_Str"",split[1]));
    plugin.deletePlayerIsland(playerUUID);
    Player target=plugin.getServer().getPlayer(playerUUID);
    if (target != null) {
      plugin.resetPlayer(target);
    }
    return true;
  }
  sender.sendMessage(Locale.errorNoIslandOther);
  return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
if (sender instanceof Player) {
  final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
  if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
    sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
    return true;
  }
 else {
    if (adminSetPlayerIsland(sender,((Player)sender).getLocation(),playerUUID)) {
      sender.sendMessage(ChatColor.GREEN + Locale.registersettingIsland.replace(""String_Node_Str"",split[1]));
    }
 else {
      sender.sendMessage(ChatColor.RED + Locale.registererrorBedrockNotFound);
    }
    return true;
  }
}
 else {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
 else {
  showInfo(playerUUID,sender);
  return true;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
  return true;
}
plugin.getPlayers().resetAllChallenges(playerUUID);
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengessuccess.replace(""String_Node_Str"",split[1]));
return true;
}
 else {
return false;
}
case 3:
if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[1]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
if (!plugin.getPlayers().getTeamLeader(playerUUID).equals(playerUUID)) {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + plugin.getPlayers().getName(plugin.getPlayers().getTeamLeader(playerUUID)));
  return true;
}
}
Biome biome=null;
String biomeName=split[2].toUpperCase();
try {
biome=Biome.valueOf(biomeName);
biomeName=biome.name();
if (!plugin.getConfig().contains(""String_Node_Str"" + biomeName)) {
  sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
  for (  Biome b : Biome.values()) {
    if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
      sender.sendMessage(b.name());
    }
  }
  return true;
}
biomeName=plugin.getConfig().getString(""String_Node_Str"" + biomeName + ""String_Node_Str"",ASkyBlock.prettifyText(biomeName));
}
 catch (Exception e) {
sender.sendMessage(ChatColor.RED + Locale.biomeUnknown);
for (Biome b : Biome.values()) {
  if (plugin.getConfig().contains(""String_Node_Str"" + b.name())) {
    sender.sendMessage(b.name());
  }
}
return true;
}
if (plugin.getPlayers().inTeam(playerUUID) && plugin.getPlayers().getTeamIslandLocation(playerUUID) != null) {
plugin.setIslandBiome(plugin.getPlayers().getTeamIslandLocation(playerUUID),biome);
}
 else {
plugin.setIslandBiome(plugin.getPlayers().getIslandLocation(playerUUID),biome);
}
sender.sendMessage(ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
if (targetPlayer != null) {
targetPlayer.sendMessage(""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
 else {
plugin.setMessage(playerUUID,""String_Node_Str"" + ChatColor.GREEN + Locale.biomeSet.replace(""String_Node_Str"",biomeName));
}
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
if (!plugin.getPlayers().inTeam(playerUUID)) {
  sender.sendMessage(ChatColor.RED + Locale.errorNoTeam);
  return true;
}
UUID teamLeader=plugin.getPlayers().getTeamLeader(playerUUID);
if (!teamLeader.equals(playerUUID)) {
  plugin.getPlayers().setLeaveTeam(playerUUID);
  plugin.getPlayers().setHomeLocation(playerUUID,null);
  plugin.getPlayers().setIslandLocation(playerUUID,null);
  plugin.getPlayers().removeMember(teamLeader,playerUUID);
  if (plugin.getPlayers().getMembers(teamLeader).size() < 2) {
    plugin.getPlayers().setLeaveTeam(teamLeader);
  }
  plugin.removeWarp(playerUUID);
  sender.sendMessage(ChatColor.RED + Locale.kicknameRemoved.replace(""String_Node_Str"",split[2]));
  return true;
}
 else {
  sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + split[2]+ ""String_Node_Str"");
  return true;
}
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.completeChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().get(playerUUID).completeChallenge(split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.completeChallengechallangeCompleted.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (!plugin.getPlayers().checkChallenge(playerUUID,split[1].toLowerCase()) || !plugin.getPlayers().get(playerUUID).challengeExists(split[1].toLowerCase())) {
sender.sendMessage(ChatColor.RED + Locale.resetChallengeerrorChallengeDoesNotExist);
return true;
}
plugin.getPlayers().resetChallenge(playerUUID,split[1].toLowerCase());
sender.sendMessage(ChatColor.YELLOW + Locale.resetChallengechallengeReset.replace(""String_Node_Str"",split[1].toLowerCase()).replace(""String_Node_Str"",split[2]));
return true;
}
 else {
return false;
}
case 4:
if (split[0].equalsIgnoreCase(""String_Node_Str"") && split[1].equalsIgnoreCase(""String_Node_Str"")) {
final UUID playerUUID=plugin.getPlayers().getUUID(split[2]);
final Player targetPlayer=plugin.getServer().getPlayer(playerUUID);
final UUID teamLeader=plugin.getPlayers().getUUID(split[3]);
if (!plugin.getPlayers().isAKnownPlayer(playerUUID) || !plugin.getPlayers().isAKnownPlayer(teamLeader)) {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownPlayer);
return true;
}
if (playerUUID.equals(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (!plugin.getPlayers().hasIsland(teamLeader)) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (plugin.getPlayers().inTeam(playerUUID)) {
sender.sendMessage(ChatColor.RED + Locale.inviteerrorThatPlayerIsAlreadyInATeam);
return true;
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(teamLeader)) {
plugin.getPlayers().setJoinTeam(teamLeader,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
plugin.getPlayers().addTeamMember(teamLeader,teamLeader);
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
targetPlayer.performCommand(""String_Node_Str"");
}
if (plugin.getPlayers().hasIsland(playerUUID)) {
Location islandLoc=plugin.getPlayers().getIslandLocation(playerUUID);
if (islandLoc != null) {
sender.sendMessage(ChatColor.RED + plugin.getPlayers().getName(playerUUID) + ""String_Node_Str""+ islandLoc.getBlockX()+ ""String_Node_Str""+ islandLoc.getBlockZ()+ ""String_Node_Str"");
}
}
plugin.getPlayers().setIslandLocation(playerUUID,null);
plugin.getPlayers().setHasIsland(playerUUID,false);
plugin.getPlayers().setJoinTeam(playerUUID,teamLeader,plugin.getPlayers().getIslandLocation(teamLeader));
if (plugin.getPlayers().getHomeLocation(teamLeader) != null) {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getHomeLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
plugin.getPlayers().setHomeLocation(playerUUID,plugin.getPlayers().getIslandLocation(teamLeader));
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
if (!plugin.getPlayers().getMembers(teamLeader).contains(playerUUID)) {
plugin.getPlayers().addTeamMember(teamLeader,playerUUID);
sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}
 else {
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
}
if (targetPlayer != null) {
plugin.homeTeleport(targetPlayer);
}
return true;
}
 else {
sender.sendMessage(ChatColor.RED + Locale.errorUnknownCommand);
return false;
}
default :
return false;
}
}"
34119,"/** 
 * This event makes sure that any acid bottles become potions without the warning
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onBrewComplete(final BrewEvent e){
  if (e.getBlock().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    BrewerInventory inv=e.getContents();
    int i=0;
    for (    ItemStack item : inv.getContents()) {
      ItemMeta meta=item.getItemMeta();
      meta.setDisplayName(null);
      meta.setLore(null);
      item.setItemMeta(null);
      inv.setItem(i,item);
      i++;
    }
  }
}","/** 
 * This event makes sure that any acid bottles become potions without the warning
 * @param e
 */
@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=false) public void onBrewComplete(final BrewEvent e){
  if (e.getBlock().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    BrewerInventory inv=e.getContents();
    int i=0;
    for (    ItemStack item : inv.getContents()) {
      if (item != null) {
        ItemMeta meta=item.getItemMeta();
        meta.setDisplayName(null);
        meta.setLore(null);
        item.setItemMeta(null);
        inv.setItem(i,item);
      }
      i++;
    }
  }
}"
34120,"@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent e){
  final Player player=e.getPlayer();
  if (player.isDead()) {
    return;
  }
  if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (player.isOp() && !Settings.damageOps) {
    return;
  }
  if (VaultHelper.checkPerm(player,""String_Node_Str"") || VaultHelper.checkPerm(player,""String_Node_Str"")) {
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE)) {
    return;
  }
  final Location playerLoc=player.getLocation();
  final Block block=playerLoc.getBlock();
  if (Settings.rainDamage > 0D && isRaining) {
    boolean hitByRain=true;
    for (int y=playerLoc.getBlockY(); y < playerLoc.getWorld().getMaxHeight(); y++) {
      if (!playerLoc.getWorld().getBlockAt(playerLoc.getBlockX(),y,playerLoc.getBlockZ()).getType().equals(Material.AIR)) {
        hitByRain=false;
        break;
      }
    }
    if (!hitByRain) {
      wetPlayers.remove(player);
    }
 else {
      boolean acidPotion=false;
      Collection<PotionEffect> activePotions=player.getActivePotionEffects();
      for (      PotionEffect s : activePotions) {
        if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
          acidPotion=true;
        }
      }
      if (acidPotion) {
        wetPlayers.remove(player);
      }
 else {
        if (!wetPlayers.contains(player)) {
          wetPlayers.add(player);
          new BukkitRunnable(){
            @Override public void run(){
              if (!isRaining || player.isDead()) {
                wetPlayers.remove(player);
                this.cancel();
              }
 else               if (player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
                Collection<PotionEffect> activePotions=player.getActivePotionEffects();
                for (                PotionEffect s : activePotions) {
                  if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
                    wetPlayers.remove(player);
                    this.cancel();
                    return;
                  }
                }
                for (int y=player.getLocation().getBlockY(); y < player.getLocation().getWorld().getMaxHeight(); y++) {
                  if (!player.getLocation().getWorld().getBlockAt(player.getLocation().getBlockX(),y,player.getLocation().getBlockZ()).getType().equals(Material.AIR)) {
                    wetPlayers.remove(player);
                    this.cancel();
                    return;
                  }
                }
                if (Settings.rainDamage > 0D) {
                  double health=player.getHealth() - (Settings.rainDamage - Settings.rainDamage * getDamageReduced(player));
                  if (health < 0D) {
                    health=0D;
                  }
 else                   if (health > 20D) {
                    health=20D;
                  }
                  player.setHealth(health);
                  player.getWorld().playSound(playerLoc,Sound.FIZZ,3F,3F);
                }
              }
 else {
                wetPlayers.remove(player);
                this.cancel();
              }
            }
          }
.runTaskTimer(plugin,0L,20L);
        }
      }
    }
  }
  if (!block.isLiquid()) {
    return;
  }
  if (playerLoc.getBlockY() < 1) {
    final Vector v=new Vector(player.getVelocity().getX(),1D,player.getVelocity().getZ());
    player.setVelocity(v);
  }
  if (burningPlayers.contains(player)) {
    return;
  }
  if (Settings.allowSpawnNoAcidWater) {
    if (playerLoc.getBlockY() > Settings.sea_level) {
      if (plugin.getSpawn().isAtSpawn(playerLoc)) {
        return;
      }
    }
  }
  if (block.getType().equals(Material.STATIONARY_WATER) || block.getType().equals(Material.WATER)) {
    Entity playersVehicle=player.getVehicle();
    if (playersVehicle != null) {
      if (playersVehicle.getType().equals(EntityType.BOAT)) {
        return;
      }
    }
    Collection<PotionEffect> activePotions=player.getActivePotionEffects();
    for (    PotionEffect s : activePotions) {
      if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
        return;
      }
    }
    burningPlayers.add(player);
    new BukkitRunnable(){
      @Override public void run(){
        if (player.isDead()) {
          burningPlayers.remove(player);
          this.cancel();
        }
 else         if (player.getLocation().getBlock().isLiquid() && player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
          if (!Settings.acidDamageType.isEmpty()) {
            for (            PotionEffectType t : Settings.acidDamageType) {
              if (t.equals(PotionEffectType.BLINDNESS) || t.equals(PotionEffectType.CONFUSION) || t.equals(PotionEffectType.HUNGER)|| t.equals(PotionEffectType.SLOW)|| t.equals(PotionEffectType.SLOW_DIGGING)|| t.equals(PotionEffectType.WEAKNESS)) {
                player.addPotionEffect(new PotionEffect(t,600,1));
              }
 else {
                player.addPotionEffect(new PotionEffect(t,200,1));
              }
            }
          }
          if (Settings.acidDamage > 0D) {
            double health=player.getHealth() - (Settings.acidDamage - Settings.acidDamage * getDamageReduced(player));
            if (health < 0D) {
              health=0D;
            }
 else             if (health > 20D) {
              health=20D;
            }
            player.setHealth(health);
            player.getWorld().playSound(playerLoc,Sound.FIZZ,2F,2F);
          }
        }
 else {
          burningPlayers.remove(player);
          this.cancel();
        }
      }
    }
.runTaskTimer(plugin,0L,20L);
  }
}","@EventHandler(priority=EventPriority.LOWEST,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent e){
  final Player player=e.getPlayer();
  if (player.isDead()) {
    return;
  }
  if (!player.getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
    return;
  }
  if (player.isOp() && !Settings.damageOps) {
    return;
  }
  if (VaultHelper.checkPerm(player,""String_Node_Str"") || VaultHelper.checkPerm(player,""String_Node_Str"")) {
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE)) {
    return;
  }
  final Location playerLoc=player.getLocation();
  final Block block=playerLoc.getBlock();
  if (Settings.rainDamage > 0D && isRaining) {
    boolean hitByRain=true;
    for (int y=playerLoc.getBlockY() + 1; y < playerLoc.getWorld().getMaxHeight(); y++) {
      if (!playerLoc.getWorld().getBlockAt(playerLoc.getBlockX(),y,playerLoc.getBlockZ()).getType().equals(Material.AIR)) {
        hitByRain=false;
        break;
      }
    }
    if (!hitByRain) {
      wetPlayers.remove(player);
    }
 else {
      boolean acidPotion=false;
      Collection<PotionEffect> activePotions=player.getActivePotionEffects();
      for (      PotionEffect s : activePotions) {
        if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
          acidPotion=true;
        }
      }
      if (acidPotion) {
        wetPlayers.remove(player);
      }
 else {
        if (!wetPlayers.contains(player)) {
          wetPlayers.add(player);
          new BukkitRunnable(){
            @Override public void run(){
              if (!isRaining || player.isDead()) {
                wetPlayers.remove(player);
                this.cancel();
              }
 else               if (player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
                Collection<PotionEffect> activePotions=player.getActivePotionEffects();
                for (                PotionEffect s : activePotions) {
                  if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
                    wetPlayers.remove(player);
                    this.cancel();
                    return;
                  }
                }
                for (int y=player.getLocation().getBlockY() + 1; y < player.getLocation().getWorld().getMaxHeight(); y++) {
                  if (!player.getLocation().getWorld().getBlockAt(player.getLocation().getBlockX(),y,player.getLocation().getBlockZ()).getType().equals(Material.AIR)) {
                    wetPlayers.remove(player);
                    this.cancel();
                    return;
                  }
                }
                if (Settings.rainDamage > 0D) {
                  double health=player.getHealth() - (Settings.rainDamage - Settings.rainDamage * getDamageReduced(player));
                  if (health < 0D) {
                    health=0D;
                  }
 else                   if (health > 20D) {
                    health=20D;
                  }
                  player.setHealth(health);
                  player.getWorld().playSound(playerLoc,Sound.FIZZ,3F,3F);
                }
              }
 else {
                wetPlayers.remove(player);
                this.cancel();
              }
            }
          }
.runTaskTimer(plugin,0L,20L);
        }
      }
    }
  }
  if (!block.isLiquid()) {
    return;
  }
  if (playerLoc.getBlockY() < 1) {
    final Vector v=new Vector(player.getVelocity().getX(),1D,player.getVelocity().getZ());
    player.setVelocity(v);
  }
  if (burningPlayers.contains(player)) {
    return;
  }
  if (Settings.allowSpawnNoAcidWater) {
    if (playerLoc.getBlockY() > Settings.sea_level) {
      if (plugin.getSpawn().isAtSpawn(playerLoc)) {
        return;
      }
    }
  }
  if (block.getType().equals(Material.STATIONARY_WATER) || block.getType().equals(Material.WATER)) {
    Entity playersVehicle=player.getVehicle();
    if (playersVehicle != null) {
      if (playersVehicle.getType().equals(EntityType.BOAT)) {
        return;
      }
    }
    Collection<PotionEffect> activePotions=player.getActivePotionEffects();
    for (    PotionEffect s : activePotions) {
      if (s.getType().equals(PotionEffectType.WATER_BREATHING)) {
        return;
      }
    }
    burningPlayers.add(player);
    new BukkitRunnable(){
      @Override public void run(){
        if (player.isDead()) {
          burningPlayers.remove(player);
          this.cancel();
        }
 else         if (player.getLocation().getBlock().isLiquid() && player.getLocation().getWorld().getName().equalsIgnoreCase(Settings.worldName)) {
          if (!Settings.acidDamageType.isEmpty()) {
            for (            PotionEffectType t : Settings.acidDamageType) {
              if (t.equals(PotionEffectType.BLINDNESS) || t.equals(PotionEffectType.CONFUSION) || t.equals(PotionEffectType.HUNGER)|| t.equals(PotionEffectType.SLOW)|| t.equals(PotionEffectType.SLOW_DIGGING)|| t.equals(PotionEffectType.WEAKNESS)) {
                player.addPotionEffect(new PotionEffect(t,600,1));
              }
 else {
                player.addPotionEffect(new PotionEffect(t,200,1));
              }
            }
          }
          if (Settings.acidDamage > 0D) {
            double health=player.getHealth() - (Settings.acidDamage - Settings.acidDamage * getDamageReduced(player));
            if (health < 0D) {
              health=0D;
            }
 else             if (health > 20D) {
              health=20D;
            }
            player.setHealth(health);
            player.getWorld().playSound(playerLoc,Sound.FIZZ,2F,2F);
          }
        }
 else {
          burningPlayers.remove(player);
          this.cancel();
        }
      }
    }
.runTaskTimer(plugin,0L,20L);
  }
}"
34121,"@Override protected Void doInBackground() throws Exception {
  long startTime=System.nanoTime();
  int reactorTicks=0;
  int cooldownTicks=0;
  int totalRodCount=0;
  try {
    publish(""String_Node_Str"");
    publish(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
    reactor.setCurrentHeat(initialHeat);
    reactor.clearVentedHeat();
    double minReactorHeat=initialHeat;
    double maxReactorHeat=initialHeat;
    boolean reachedBurn=initialHeat >= 0.4 * reactor.getMaxHeat();
    boolean reachedEvaporate=initialHeat >= 0.5 * reactor.getMaxHeat();
    boolean reachedHurt=initialHeat >= 0.7 * reactor.getMaxHeat();
    boolean reachedLava=initialHeat >= 0.85 * reactor.getMaxHeat();
    boolean reachedExplode=false;
    for (int row=0; row < 6; row++) {
      for (int col=0; col < 9; col++) {
        ReactorComponent component=reactor.getComponentAt(row,col);
        if (component != null) {
          component.clearCurrentHeat();
          component.clearDamage();
          totalRodCount+=component.getRodCount();
        }
        publish(String.format(""String_Node_Str"",row,col));
      }
    }
    double lastEUoutput=0.0;
    double totalEUoutput=0.0;
    double lastHeatOutput=0.0;
    double totalHeatOutput=0.0;
    double maxGeneratedHeat=0.0;
    do {
      reactor.clearEUOutput();
      reactor.clearVentedHeat();
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null) {
            component.preReactorTick();
          }
        }
      }
      double generatedHeat=0.0;
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null && !component.isBroken()) {
            generatedHeat+=component.generateHeat();
            maxReactorHeat=Math.max(reactor.getCurrentHeat(),maxReactorHeat);
            minReactorHeat=Math.min(reactor.getCurrentHeat(),minReactorHeat);
            component.dissipate();
            maxReactorHeat=Math.max(reactor.getCurrentHeat(),maxReactorHeat);
            minReactorHeat=Math.min(reactor.getCurrentHeat(),minReactorHeat);
            component.transfer();
            maxReactorHeat=Math.max(reactor.getCurrentHeat(),maxReactorHeat);
            minReactorHeat=Math.min(reactor.getCurrentHeat(),minReactorHeat);
          }
          if (maxReactorHeat >= 0.4 * reactor.getMaxHeat() && !reachedBurn) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedBurn=true;
          }
          if (maxReactorHeat >= 0.5 * reactor.getMaxHeat() && !reachedEvaporate) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedEvaporate=true;
          }
          if (maxReactorHeat >= 0.7 * reactor.getMaxHeat() && !reachedHurt) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedHurt=true;
          }
          if (maxReactorHeat >= 0.85 * reactor.getMaxHeat() && !reachedLava) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedLava=true;
          }
          if (maxReactorHeat >= reactor.getMaxHeat() && !reachedExplode) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedExplode=true;
          }
        }
      }
      maxGeneratedHeat=Math.max(generatedHeat,maxGeneratedHeat);
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null && !component.isBroken()) {
            component.generateEnergy();
          }
        }
      }
      lastEUoutput=reactor.getCurrentEUoutput();
      totalEUoutput+=lastEUoutput;
      lastHeatOutput=reactor.getVentedHeat();
      totalHeatOutput+=lastHeatOutput;
      if (reactor.getCurrentHeat() <= reactor.getMaxHeat() && lastEUoutput > 0.0) {
        reactorTicks++;
        minEUoutput=Math.min(lastEUoutput,minEUoutput);
        maxEUoutput=Math.max(lastEUoutput,maxEUoutput);
        minHeatOutput=Math.min(lastHeatOutput,minHeatOutput);
        maxHeatOutput=Math.max(lastHeatOutput,maxHeatOutput);
      }
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null && component.isBroken() && !alreadyBroken[row][col] && !component.getClass().getName().contains(""String_Node_Str"")) {
            publish(String.format(""String_Node_Str"",row,col));
            alreadyBroken[row][col]=true;
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,reactorTicks));
          }
        }
      }
    }
 while (reactor.getCurrentHeat() <= reactor.getMaxHeat() && lastEUoutput > 0.0);
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),minReactorHeat));
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),maxReactorHeat));
    if (reactor.getCurrentHeat() <= reactor.getMaxHeat()) {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
      if (reactorTicks > 0) {
        if (reactor.isFluid()) {
          publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),2 * totalHeatOutput,2 * totalHeatOutput / reactorTicks,2 * minHeatOutput,2 * maxHeatOutput));
          if (totalRodCount > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalHeatOutput / reactorTicks / 4/ totalRodCount,minHeatOutput / 4 / totalRodCount,maxHeatOutput / 4 / totalRodCount));
          }
        }
 else {
          publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalEUoutput,minEUoutput / 20.0,maxEUoutput / 20.0,totalEUoutput / (reactorTicks * 20)));
          if (totalRodCount > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalEUoutput / reactorTicks / 100/ totalRodCount,minEUoutput / 100 / totalRodCount,maxEUoutput / 100 / totalRodCount));
          }
        }
      }
      lastHeatOutput=0.0;
      totalHeatOutput=0.0;
      double prevReactorHeat=reactor.getCurrentHeat();
      double prevTotalComponentHeat=0.0;
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null && !component.isBroken()) {
            prevTotalComponentHeat+=component.getCurrentHeat();
            if (component.getCurrentHeat() > 0.0) {
              publish(String.format(""String_Node_Str"",row,col));
              publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getCurrentHeat()));
              needsCooldown[row][col]=true;
            }
          }
        }
      }
      if (prevReactorHeat == 0.0 && prevTotalComponentHeat == 0.0) {
        output.append(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
      }
 else {
        double currentTotalComponentHeat=prevTotalComponentHeat;
        int reactorCooldownTime=0;
        do {
          reactor.clearVentedHeat();
          prevReactorHeat=reactor.getCurrentHeat();
          if (prevReactorHeat == 0.0) {
            reactorCooldownTime=cooldownTicks;
          }
          prevTotalComponentHeat=currentTotalComponentHeat;
          for (int row=0; row < 6; row++) {
            for (int col=0; col < 9; col++) {
              ReactorComponent component=reactor.getComponentAt(row,col);
              if (component != null && !component.isBroken()) {
                component.dissipate();
                component.transfer();
              }
            }
          }
          lastHeatOutput=reactor.getVentedHeat();
          totalHeatOutput+=lastHeatOutput;
          minEUoutput=Math.min(lastEUoutput,minEUoutput);
          maxEUoutput=Math.max(lastEUoutput,maxEUoutput);
          minHeatOutput=Math.min(lastHeatOutput,minHeatOutput);
          maxHeatOutput=Math.max(lastHeatOutput,maxHeatOutput);
          cooldownTicks++;
          currentTotalComponentHeat=0.0;
          for (int row=0; row < 6; row++) {
            for (int col=0; col < 9; col++) {
              ReactorComponent component=reactor.getComponentAt(row,col);
              if (component != null && !component.isBroken()) {
                currentTotalComponentHeat+=component.getCurrentHeat();
                if (component.getCurrentHeat() == 0.0 && needsCooldown[row][col]) {
                  publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,cooldownTicks));
                  needsCooldown[row][col]=false;
                }
              }
            }
          }
        }
 while (lastHeatOutput > 0 && cooldownTicks < 20000);
        if (reactor.getCurrentHeat() == 0.0) {
          publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorCooldownTime));
        }
 else {
          publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactor.getCurrentHeat(),reactorCooldownTime));
        }
        publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),cooldownTicks));
        for (int row=0; row < 6; row++) {
          for (int col=0; col < 9; col++) {
            ReactorComponent component=reactor.getComponentAt(row,col);
            if (component != null && !component.isBroken()) {
              prevTotalComponentHeat+=component.getCurrentHeat();
              if (component.getCurrentHeat() > 0.0) {
                publish(String.format(""String_Node_Str"",row,col));
                publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getCurrentHeat()));
              }
            }
          }
        }
      }
    }
 else {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
    }
    if (reactor.isFluid() && reactor.getCurrentHeat() < reactor.getMaxHeat()) {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),2 * totalHeatOutput / cooldownTicks,2 * minHeatOutput,2 * maxHeatOutput));
    }
    double totalEffectiveVentCooling=0.0;
    double totalVentCoolingCapacity=0.0;
    double totalCellCooling=0.0;
    double totalCondensatorCooling=0.0;
    for (int row=0; row < 6; row++) {
      for (int col=0; col < 9; col++) {
        ReactorComponent component=reactor.getComponentAt(row,col);
        if (component != null) {
          if (component.getVentCoolingCapacity() > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getEffectiveVentCooling(),component.getVentCoolingCapacity()));
            totalEffectiveVentCooling+=component.getEffectiveVentCooling();
            totalVentCoolingCapacity+=component.getVentCoolingCapacity();
          }
 else           if (component.getBestCellCooling() > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getBestCellCooling()));
            totalCellCooling+=component.getBestCellCooling();
          }
 else           if (component.getBestCondensatorCooling() > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getBestCondensatorCooling()));
            totalCondensatorCooling+=component.getBestCondensatorCooling();
          }
        }
      }
    }
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalEffectiveVentCooling,totalVentCoolingCapacity));
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalCellCooling));
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalCondensatorCooling));
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),maxGeneratedHeat));
    double totalCooling=totalEffectiveVentCooling + totalCellCooling + totalCondensatorCooling;
    if (totalCooling >= maxGeneratedHeat) {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalCooling - maxGeneratedHeat));
    }
 else {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),maxGeneratedHeat - totalCooling));
    }
  }
 catch (  Throwable e) {
    if (cooldownTicks == 0) {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
    }
 else {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),cooldownTicks));
    }
    publish(e.toString(),""String_Node_Str"",Arrays.toString(e.getStackTrace()));
  }
  long endTime=System.nanoTime();
  publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),(endTime - startTime) / 1e9));
  return null;
}","@Override protected Void doInBackground() throws Exception {
  long startTime=System.nanoTime();
  int reactorTicks=0;
  int cooldownTicks=0;
  int totalRodCount=0;
  try {
    publish(""String_Node_Str"");
    publish(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
    reactor.setCurrentHeat(initialHeat);
    reactor.clearVentedHeat();
    double minReactorHeat=initialHeat;
    double maxReactorHeat=initialHeat;
    boolean reachedBurn=initialHeat >= 0.4 * reactor.getMaxHeat();
    boolean reachedEvaporate=initialHeat >= 0.5 * reactor.getMaxHeat();
    boolean reachedHurt=initialHeat >= 0.7 * reactor.getMaxHeat();
    boolean reachedLava=initialHeat >= 0.85 * reactor.getMaxHeat();
    boolean reachedExplode=false;
    for (int row=0; row < 6; row++) {
      for (int col=0; col < 9; col++) {
        ReactorComponent component=reactor.getComponentAt(row,col);
        if (component != null) {
          component.clearCurrentHeat();
          component.clearDamage();
          totalRodCount+=component.getRodCount();
        }
        publish(String.format(""String_Node_Str"",row,col));
      }
    }
    double lastEUoutput=0.0;
    double totalEUoutput=0.0;
    double lastHeatOutput=0.0;
    double totalHeatOutput=0.0;
    double maxGeneratedHeat=0.0;
    do {
      reactor.clearEUOutput();
      reactor.clearVentedHeat();
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null) {
            component.preReactorTick();
          }
        }
      }
      double generatedHeat=0.0;
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null && !component.isBroken()) {
            generatedHeat+=component.generateHeat();
            maxReactorHeat=Math.max(reactor.getCurrentHeat(),maxReactorHeat);
            minReactorHeat=Math.min(reactor.getCurrentHeat(),minReactorHeat);
            component.dissipate();
            maxReactorHeat=Math.max(reactor.getCurrentHeat(),maxReactorHeat);
            minReactorHeat=Math.min(reactor.getCurrentHeat(),minReactorHeat);
            component.transfer();
            maxReactorHeat=Math.max(reactor.getCurrentHeat(),maxReactorHeat);
            minReactorHeat=Math.min(reactor.getCurrentHeat(),minReactorHeat);
          }
          if (maxReactorHeat >= 0.4 * reactor.getMaxHeat() && !reachedBurn) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedBurn=true;
          }
          if (maxReactorHeat >= 0.5 * reactor.getMaxHeat() && !reachedEvaporate) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedEvaporate=true;
          }
          if (maxReactorHeat >= 0.7 * reactor.getMaxHeat() && !reachedHurt) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedHurt=true;
          }
          if (maxReactorHeat >= 0.85 * reactor.getMaxHeat() && !reachedLava) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedLava=true;
          }
          if (maxReactorHeat >= reactor.getMaxHeat() && !reachedExplode) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
            reachedExplode=true;
          }
        }
      }
      maxGeneratedHeat=Math.max(generatedHeat,maxGeneratedHeat);
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null && !component.isBroken()) {
            component.generateEnergy();
          }
        }
      }
      lastEUoutput=reactor.getCurrentEUoutput();
      totalEUoutput+=lastEUoutput;
      lastHeatOutput=reactor.getVentedHeat();
      totalHeatOutput+=lastHeatOutput;
      if (reactor.getCurrentHeat() <= reactor.getMaxHeat() && lastEUoutput > 0.0) {
        reactorTicks++;
        minEUoutput=Math.min(lastEUoutput,minEUoutput);
        maxEUoutput=Math.max(lastEUoutput,maxEUoutput);
        minHeatOutput=Math.min(lastHeatOutput,minHeatOutput);
        maxHeatOutput=Math.max(lastHeatOutput,maxHeatOutput);
      }
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null && component.isBroken() && !alreadyBroken[row][col] && !component.getClass().getName().contains(""String_Node_Str"")) {
            publish(String.format(""String_Node_Str"",row,col));
            alreadyBroken[row][col]=true;
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,reactorTicks));
          }
        }
      }
    }
 while (reactor.getCurrentHeat() <= reactor.getMaxHeat() && lastEUoutput > 0.0);
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),minReactorHeat));
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),maxReactorHeat));
    if (reactor.getCurrentHeat() <= reactor.getMaxHeat()) {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
      if (reactorTicks > 0) {
        if (reactor.isFluid()) {
          publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),2 * totalHeatOutput,2 * totalHeatOutput / reactorTicks,2 * minHeatOutput,2 * maxHeatOutput));
          if (totalRodCount > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalHeatOutput / reactorTicks / 4/ totalRodCount,minHeatOutput / 4 / totalRodCount,maxHeatOutput / 4 / totalRodCount));
          }
        }
 else {
          publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalEUoutput,minEUoutput / 20.0,maxEUoutput / 20.0,totalEUoutput / (reactorTicks * 20)));
          if (totalRodCount > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalEUoutput / reactorTicks / 100/ totalRodCount,minEUoutput / 100 / totalRodCount,maxEUoutput / 100 / totalRodCount));
          }
        }
      }
      lastHeatOutput=0.0;
      totalHeatOutput=0.0;
      double prevReactorHeat=reactor.getCurrentHeat();
      double prevTotalComponentHeat=0.0;
      for (int row=0; row < 6; row++) {
        for (int col=0; col < 9; col++) {
          ReactorComponent component=reactor.getComponentAt(row,col);
          if (component != null && !component.isBroken()) {
            prevTotalComponentHeat+=component.getCurrentHeat();
            if (component.getCurrentHeat() > 0.0) {
              publish(String.format(""String_Node_Str"",row,col));
              publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getCurrentHeat()));
              needsCooldown[row][col]=true;
            }
          }
        }
      }
      if (prevReactorHeat == 0.0 && prevTotalComponentHeat == 0.0) {
        output.append(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
      }
 else {
        double currentTotalComponentHeat=prevTotalComponentHeat;
        int reactorCooldownTime=0;
        do {
          reactor.clearVentedHeat();
          prevReactorHeat=reactor.getCurrentHeat();
          if (prevReactorHeat == 0.0) {
            reactorCooldownTime=cooldownTicks;
          }
          prevTotalComponentHeat=currentTotalComponentHeat;
          for (int row=0; row < 6; row++) {
            for (int col=0; col < 9; col++) {
              ReactorComponent component=reactor.getComponentAt(row,col);
              if (component != null && !component.isBroken()) {
                component.dissipate();
                component.transfer();
              }
            }
          }
          lastHeatOutput=reactor.getVentedHeat();
          totalHeatOutput+=lastHeatOutput;
          minEUoutput=Math.min(lastEUoutput,minEUoutput);
          maxEUoutput=Math.max(lastEUoutput,maxEUoutput);
          minHeatOutput=Math.min(lastHeatOutput,minHeatOutput);
          maxHeatOutput=Math.max(lastHeatOutput,maxHeatOutput);
          cooldownTicks++;
          currentTotalComponentHeat=0.0;
          for (int row=0; row < 6; row++) {
            for (int col=0; col < 9; col++) {
              ReactorComponent component=reactor.getComponentAt(row,col);
              if (component != null && !component.isBroken()) {
                currentTotalComponentHeat+=component.getCurrentHeat();
                if (component.getCurrentHeat() == 0.0 && needsCooldown[row][col]) {
                  publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,cooldownTicks));
                  needsCooldown[row][col]=false;
                }
              }
            }
          }
        }
 while (lastHeatOutput > 0 && cooldownTicks < 20000);
        if (reactor.getCurrentHeat() == 0.0) {
          publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorCooldownTime));
        }
 else {
          publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactor.getCurrentHeat(),reactorCooldownTime));
        }
        publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),cooldownTicks));
        for (int row=0; row < 6; row++) {
          for (int col=0; col < 9; col++) {
            ReactorComponent component=reactor.getComponentAt(row,col);
            if (component != null && !component.isBroken()) {
              prevTotalComponentHeat+=component.getCurrentHeat();
              if (component.getCurrentHeat() > 0.0) {
                publish(String.format(""String_Node_Str"",row,col));
                publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getCurrentHeat()));
              }
            }
          }
        }
      }
    }
 else {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
    }
    if (reactor.isFluid() && reactor.getCurrentHeat() < reactor.getMaxHeat()) {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),2 * totalHeatOutput,2 * totalHeatOutput / cooldownTicks,2 * minHeatOutput,2 * maxHeatOutput));
    }
    double totalEffectiveVentCooling=0.0;
    double totalVentCoolingCapacity=0.0;
    double totalCellCooling=0.0;
    double totalCondensatorCooling=0.0;
    for (int row=0; row < 6; row++) {
      for (int col=0; col < 9; col++) {
        ReactorComponent component=reactor.getComponentAt(row,col);
        if (component != null) {
          if (component.getVentCoolingCapacity() > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getEffectiveVentCooling(),component.getVentCoolingCapacity()));
            totalEffectiveVentCooling+=component.getEffectiveVentCooling();
            totalVentCoolingCapacity+=component.getVentCoolingCapacity();
          }
 else           if (component.getBestCellCooling() > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getBestCellCooling()));
            totalCellCooling+=component.getBestCellCooling();
          }
 else           if (component.getBestCondensatorCooling() > 0) {
            publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),row,col,component.getBestCondensatorCooling()));
            totalCondensatorCooling+=component.getBestCondensatorCooling();
          }
        }
      }
    }
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalEffectiveVentCooling,totalVentCoolingCapacity));
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalCellCooling));
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalCondensatorCooling));
    publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),maxGeneratedHeat));
    double totalCooling=totalEffectiveVentCooling + totalCellCooling + totalCondensatorCooling;
    if (totalCooling >= maxGeneratedHeat) {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),totalCooling - maxGeneratedHeat));
    }
 else {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),maxGeneratedHeat - totalCooling));
    }
  }
 catch (  Throwable e) {
    if (cooldownTicks == 0) {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),reactorTicks));
    }
 else {
      publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),cooldownTicks));
    }
    publish(e.toString(),""String_Node_Str"",Arrays.toString(e.getStackTrace()));
  }
  long endTime=System.nanoTime();
  publish(String.format(java.util.ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""),(endTime - startTime) / 1e9));
  return null;
}"
34122,"public Uri save(ContentResolver contentResolver,String title,String description){
  return CaptureSketchUtils.insertImage(contentResolver,bitmap,title,description);
}","public Uri save(ContentResolver contentResolver,String title,String description){
  return CaptureSketchUtils.insertImage(contentResolver,getBitmap(),title,description);
}"
34123,"private void splitIntoMultipleEventsAndPost(@NonNull MotionEvent event,RainbowInputController rainbowInputController){
  float px=rainbowInputController.getX();
  float py=rainbowInputController.getY();
  float diffX=event.getX() - px;
  float diffY=event.getY() - py;
  int divisions=getDivisionsFor(event);
  for (int i=0; i < divisions; i++) {
    float newEventX=px + diffX * (i + 1) / 2;
    float newEventY=py + diffY * (i + 1) / 2;
    MotionEvent subEvent=obtainEventWithNewPosition(event,newEventX,newEventY);
    rainbowInputController.postEvent(subEvent,rainbow.getRainbowDrawer());
  }
}","private void splitIntoMultipleEventsAndPost(@NonNull MotionEvent event,RainbowInputController rainbowInputController){
  float px=rainbowInputController.getX();
  float py=rainbowInputController.getY();
  float diffX=event.getX() - px;
  float diffY=event.getY() - py;
  int divisions=getDivisionsFor(event);
  for (int i=1; i <= divisions; i++) {
    float newEventX=px + diffX * i / divisions;
    float newEventY=py + diffY * i / divisions;
    MotionEvent subEvent=obtainEventWithNewPosition(event,newEventX,newEventY);
    rainbowInputController.postEvent(subEvent,rainbow.getRainbowDrawer());
  }
}"
34124,"private void performMove(MotionEvent event,RainbowDrawer rainbowDrawer){
  notifyFingerDraggedFor(px,py,x,y,event,rainbowDrawer);
}","private void performMove(MotionEvent event,RainbowDrawer rainbowDrawer){
  fingerPositionPredictor.moveTo(x,y);
  if (hasInteractionListener()) {
    event.setLocation(x,y);
    rainbowInteractionListener.onFingerDragged(event,rainbowDrawer);
  }
}"
34125,"private void handleSketchEvent(final MotionEvent event,final RainbowDrawer rainbowDrawer){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    screenTouched=true;
  fingerPositionPredictor.resetTo(x,y);
if (hasInteractionListener()) {
  rainbowInteractionListener.onSketchTouched(event,rainbowDrawer);
}
break;
case MotionEvent.ACTION_UP:
screenTouched=false;
if (hasInteractionListener()) {
rainbowInteractionListener.onSketchReleased(event,rainbowDrawer);
}
break;
case MotionEvent.ACTION_MOVE:
screenTouched=true;
performMove(event,rainbowDrawer);
break;
}
if (hasInteractionListener()) {
rainbowInteractionListener.onMotionEvent(event,rainbowDrawer);
}
}","private void handleSketchEvent(final MotionEvent event,final RainbowDrawer rainbowDrawer){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    performTouch(event,rainbowDrawer);
  break;
case MotionEvent.ACTION_UP:
screenTouched=false;
performRelease(event,rainbowDrawer);
break;
case MotionEvent.ACTION_MOVE:
screenTouched=true;
performMove(event,rainbowDrawer);
break;
}
performMotion(event,rainbowDrawer);
}"
34126,"private void splitIntoMultipleEventsAndPost(@NonNull MotionEvent event,RainbowInputController rainbowInputController){
  float px=rainbowInputController.getX();
  float py=rainbowInputController.getY();
  float diffX=event.getX() - px;
  float diffY=event.getY() - py;
  int divisions=getContext().getResources().getInteger(R.integer.dragging_divisions);
  for (int i=0; i < divisions; i++) {
    float newEventX=px + diffX * (i + 1) / 2;
    float newEventY=py + diffY * (i + 1) / 2;
    MotionEvent subEvent=obtainEventWithNewPosition(event,newEventX,newEventY);
    rainbowInputController.postEvent(subEvent,rainbow.getRainbowDrawer());
  }
}","private void splitIntoMultipleEventsAndPost(@NonNull MotionEvent event,RainbowInputController rainbowInputController){
  float px=rainbowInputController.getX();
  float py=rainbowInputController.getY();
  float diffX=event.getX() - px;
  float diffY=event.getY() - py;
  int divisions=getDivisionsFor(event);
  for (int i=0; i < divisions; i++) {
    float newEventX=px + diffX * (i + 1) / 2;
    float newEventY=py + diffY * (i + 1) / 2;
    MotionEvent subEvent=obtainEventWithNewPosition(event,newEventX,newEventY);
    rainbowInputController.postEvent(subEvent,rainbow.getRainbowDrawer());
  }
}"
34127,"public String format(String caller){
  Locale locale=LocaleContextHolder.getLocale();
  return messageSource.getMessage(messageKey,new Object[]{caller},locale);
}","public String format(Object... args){
  Locale locale=LocaleContextHolder.getLocale();
  return messageSource.getMessage(messageKey,args,locale);
}"
34128,"@Override public boolean onLongClick(View v){
  if (Resources.getSystem().getString(android.R.string.paste).equals(text.getText().toString())) {
    if (pref.getBoolean(""String_Node_Str"",false))     Etextview.onTextContextMenuItem(android.R.id.paste);
 else {
      Open(text.getContext());
      final int start=Etextview.getSelectionStart();
      final int end=Etextview.getSelectionEnd();
      mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
      mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
        @Override public void onPrimaryClipChanged(){
          if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
            try {
              mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
            }
 catch (            Exception e1) {
              Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
              e1.printStackTrace();
            }
          }
 else {
            try {
              Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
              Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
            }
 catch (            Throwable e) {
              Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
              e.printStackTrace();
            }
          }
        }
      }
;
      mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
    }
    return true;
  }
 else {
    Toast.makeText(text.getContext(),""String_Node_Str"" + text.getText().toString(),Toast.LENGTH_SHORT).show();
    return false;
  }
}","@Override public boolean onLongClick(View v){
  if (Resources.getSystem().getString(android.R.string.paste).equals(text.getText().toString())) {
    if (pref.getBoolean(""String_Node_Str"",false))     Etextview.onTextContextMenuItem(android.R.id.paste);
 else {
      Open(text.getContext());
      start=Etextview.getSelectionStart();
      end=Etextview.getSelectionEnd();
      mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
      mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
        @Override public void onPrimaryClipChanged(){
          if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
            try {
              mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
            }
 catch (            Exception e1) {
              Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
              e1.printStackTrace();
            }
          }
 else           if (pref.getBoolean(""String_Node_Str"",false)) {
            try {
              mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
            }
 catch (            Exception e1) {
              Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
              e1.printStackTrace();
            }
            try {
              Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
              Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
            }
 catch (            Throwable e) {
              Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
              e.printStackTrace();
            }
          }
 else {
            try {
              Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
              Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
              start=start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length();
              end=start;
            }
 catch (            Throwable e) {
              Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
              e.printStackTrace();
            }
          }
        }
      }
;
      mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
    }
    return true;
  }
 else {
    Toast.makeText(text.getContext(),""String_Node_Str"" + text.getText().toString(),Toast.LENGTH_SHORT).show();
    return false;
  }
}"
34129,"public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
  XposedHelpers.findAndHookMethod(TextView.class,""String_Node_Str"",boolean.class,int.class,Rect.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      TextView textView=(TextView)param.thisObject;
      boolean isEditText=textView instanceof EditText;
      if (!isEditText)       return;
      boolean focused=(Boolean)param.args[0];
      if (focused) {
        Etextview=textView;
        Ectx=Etextview.getContext();
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  if (pref.getBoolean(""String_Node_Str"",true)) {
    XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",ActionMode.class,Menu.class,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param) throws Throwable {
        menu=(Menu)param.args[1];
        CBButton(menu);
      }
    }
);
    XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",ActionMode.class,MenuItem.class,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      final MethodHookParam param) throws Throwable {
        MenuItem item=(MenuItem)param.args[1];
switch (item.getItemId()) {
case id:
          Open(Ectx);
        final int start=Etextview.getSelectionStart();
      final int end=Etextview.getSelectionEnd();
    mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
  mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
    @Override public void onPrimaryClipChanged(){
      if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
        try {
          mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
        }
 catch (        Exception e1) {
          Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          e1.printStackTrace();
        }
      }
 else       if (pref.getBoolean(""String_Node_Str"",false)) {
        try {
          mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
        }
 catch (        Exception e1) {
          Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          e1.printStackTrace();
        }
        try {
          Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
          Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
        }
 catch (        Throwable e) {
          Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          e.printStackTrace();
        }
      }
 else {
        try {
          Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
          Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
        }
 catch (        Throwable e) {
          Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          e.printStackTrace();
        }
      }
    }
  }
;
mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
param.setResult(true);
return;
}
}
}
);
}
if (pref.getBoolean(""String_Node_Str"",false)) {
XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",View.class,new XC_MethodHook(){
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
TextView text=(TextView)param.args[0];
if (Resources.getSystem().getString(android.R.string.paste).equals(text.getText().toString())) {
Open(Ectx);
final int start=Etextview.getSelectionStart();
final int end=Etextview.getSelectionEnd();
mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
@Override public void onPrimaryClipChanged(){
if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
try {
  mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  e1.printStackTrace();
}
}
 else if (pref.getBoolean(""String_Node_Str"",false)) {
try {
  mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  e1.printStackTrace();
}
try {
  Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
  Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
}
 catch (Throwable e) {
  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  e.printStackTrace();
}
}
 else {
try {
  Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
  Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
}
 catch (Throwable e) {
  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  e.printStackTrace();
}
}
}
}
;
mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
param.setResult(null);
return;
}
}
}
);
}
if (lpparam.packageName.equals(""String_Node_Str"") || lpparam.packageName.equals(""String_Node_Str"")) {
if (pref.getBoolean(""String_Node_Str"",true)) {
XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",ActionMode.class,Menu.class,new XC_MethodHook(){
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
menu=(Menu)param.args[1];
CBButton(menu);
}
}
);
XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",ActionMode.class,MenuItem.class,new XC_MethodHook(){
@Override protected void afterHookedMethod(final MethodHookParam param) throws Throwable {
Object[] args={};
CSctx=(Context)XposedHelpers.findMethodBestMatch(XposedHelpers.findClass(""String_Node_Str"",lpparam.classLoader),""String_Node_Str"").invoke(param.thisObject,args);
MenuItem item=(MenuItem)param.args[1];
mparam=param;
switch (item.getItemId()) {
case id:
Open(CSctx);
mparam.args[1]=menu.getItem(3);
mClipboardManager=(ClipboardManager)CSctx.getSystemService(Context.CLIPBOARD_SERVICE);
mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
@Override public void onPrimaryClipChanged(){
if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(CPctx).toString().equals(""String_Node_Str"")) {
try {
mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e1.printStackTrace();
}
}
 else if (pref.getBoolean(""String_Node_Str"",false)) {
try {
mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e1.printStackTrace();
}
try {
XposedHelpers.callMethod(mparam.thisObject,""String_Node_Str"",mparam.args);
}
 catch (Throwable e) {
Toast.makeText(CSctx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
 else {
try {
XposedHelpers.callMethod(mparam.thisObject,""String_Node_Str"",mparam.args);
}
 catch (Throwable e) {
Toast.makeText(CSctx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
}
}
;
mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
param.setResult(true);
return;
}
}
}
);
}
XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",View.class,new XC_MethodHook(){
@Override protected void beforeHookedMethod(final MethodHookParam param) throws Throwable {
View mview=(View)param.args[0];
CPctx=mview.getContext();
Open(CPctx);
mClipboardManager=(ClipboardManager)CPctx.getSystemService(Context.CLIPBOARD_SERVICE);
mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
@Override public void onPrimaryClipChanged(){
if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(CPctx).toString().equals(""String_Node_Str"")) {
try {
mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e1.printStackTrace();
}
}
 else if (pref.getBoolean(""String_Node_Str"",false)) {
try {
mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e1.printStackTrace();
}
try {
XposedBridge.invokeOriginalMethod(param.method,param.thisObject,param.args);
}
 catch (Throwable e) {
Toast.makeText(CPctx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
 else {
try {
XposedBridge.invokeOriginalMethod(param.method,param.thisObject,param.args);
}
 catch (Throwable e) {
Toast.makeText(CPctx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
}
}
;
mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
param.setResult(null);
return;
}
}
);
}
}","public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
  XposedHelpers.findAndHookMethod(TextView.class,""String_Node_Str"",boolean.class,int.class,Rect.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      TextView textView=(TextView)param.thisObject;
      boolean isEditText=textView instanceof EditText;
      if (!isEditText)       return;
      boolean focused=(Boolean)param.args[0];
      if (focused) {
        Etextview=textView;
        Ectx=Etextview.getContext();
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  if (pref.getBoolean(""String_Node_Str"",true)) {
    XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",ActionMode.class,Menu.class,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param) throws Throwable {
        menu=(Menu)param.args[1];
        CBButton(menu);
      }
    }
);
    XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",ActionMode.class,MenuItem.class,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      final MethodHookParam param) throws Throwable {
        MenuItem item=(MenuItem)param.args[1];
switch (item.getItemId()) {
case id:
          Open(Ectx);
        start=Etextview.getSelectionStart();
      end=Etextview.getSelectionEnd();
    mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
  mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
    @Override public void onPrimaryClipChanged(){
      if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
        try {
          mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
        }
 catch (        Exception e1) {
          Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          e1.printStackTrace();
        }
      }
 else       if (pref.getBoolean(""String_Node_Str"",false)) {
        try {
          mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
        }
 catch (        Exception e1) {
          Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          e1.printStackTrace();
        }
        try {
          Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
          Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
        }
 catch (        Throwable e) {
          Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          e.printStackTrace();
        }
      }
 else {
        try {
          Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
          Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
          start=start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length();
          end=start;
        }
 catch (        Throwable e) {
          Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          e.printStackTrace();
        }
      }
    }
  }
;
mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
param.setResult(true);
return;
}
}
}
);
}
if (pref.getBoolean(""String_Node_Str"",false)) {
XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",View.class,new XC_MethodHook(){
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
TextView text=(TextView)param.args[0];
if (Resources.getSystem().getString(android.R.string.paste).equals(text.getText().toString())) {
Open(Ectx);
start=Etextview.getSelectionStart();
end=Etextview.getSelectionEnd();
mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
@Override public void onPrimaryClipChanged(){
if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
try {
  mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  e1.printStackTrace();
}
}
 else if (pref.getBoolean(""String_Node_Str"",false)) {
try {
  mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  e1.printStackTrace();
}
try {
  Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
  Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
}
 catch (Throwable e) {
  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  e.printStackTrace();
}
}
 else {
try {
  Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
  Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
  start=start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length();
  end=start;
}
 catch (Throwable e) {
  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  e.printStackTrace();
}
}
}
}
;
mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
param.setResult(null);
return;
}
}
}
);
}
if (lpparam.packageName.equals(""String_Node_Str"") || lpparam.packageName.equals(""String_Node_Str"")) {
if (pref.getBoolean(""String_Node_Str"",true)) {
XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",ActionMode.class,Menu.class,new XC_MethodHook(){
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
menu=(Menu)param.args[1];
CBButton(menu);
}
}
);
XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",ActionMode.class,MenuItem.class,new XC_MethodHook(){
@Override protected void afterHookedMethod(final MethodHookParam param) throws Throwable {
Object[] args={};
CSctx=(Context)XposedHelpers.findMethodBestMatch(XposedHelpers.findClass(""String_Node_Str"",lpparam.classLoader),""String_Node_Str"").invoke(param.thisObject,args);
MenuItem item=(MenuItem)param.args[1];
mparam=param;
switch (item.getItemId()) {
case id:
Open(CSctx);
mparam.args[1]=menu.getItem(3);
mClipboardManager=(ClipboardManager)CSctx.getSystemService(Context.CLIPBOARD_SERVICE);
mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
@Override public void onPrimaryClipChanged(){
if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(CPctx).toString().equals(""String_Node_Str"")) {
try {
mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e1.printStackTrace();
}
}
 else if (pref.getBoolean(""String_Node_Str"",false)) {
try {
mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e1.printStackTrace();
}
try {
XposedHelpers.callMethod(mparam.thisObject,""String_Node_Str"",mparam.args);
}
 catch (Throwable e) {
Toast.makeText(CSctx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
 else {
try {
XposedHelpers.callMethod(mparam.thisObject,""String_Node_Str"",mparam.args);
}
 catch (Throwable e) {
Toast.makeText(CSctx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
}
}
;
mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
param.setResult(true);
return;
}
}
}
);
}
XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",View.class,new XC_MethodHook(){
@Override protected void beforeHookedMethod(final MethodHookParam param) throws Throwable {
View mview=(View)param.args[0];
CPctx=mview.getContext();
Open(CPctx);
mClipboardManager=(ClipboardManager)CPctx.getSystemService(Context.CLIPBOARD_SERVICE);
mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
@Override public void onPrimaryClipChanged(){
if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(CPctx).toString().equals(""String_Node_Str"")) {
try {
mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e1.printStackTrace();
}
}
 else if (pref.getBoolean(""String_Node_Str"",false)) {
try {
mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
}
 catch (Exception e1) {
Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e1.printStackTrace();
}
try {
XposedBridge.invokeOriginalMethod(param.method,param.thisObject,param.args);
}
 catch (Throwable e) {
Toast.makeText(CPctx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
 else {
try {
XposedBridge.invokeOriginalMethod(param.method,param.thisObject,param.args);
}
 catch (Throwable e) {
Toast.makeText(CPctx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
e.printStackTrace();
}
}
}
}
;
mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
param.setResult(null);
return;
}
}
);
}
}"
34130,"public void handleInitPackageResources(InitPackageResourcesParam resparam) throws Throwable {
  resparam.res.hookLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new XC_LayoutInflated(){
    @Override public void handleLayoutInflated(    LayoutInflatedParam liparam) throws Throwable {
      final TextView text=(TextView)liparam.view;
      text.setOnLongClickListener(new OnLongClickListener(){
        @Override public boolean onLongClick(        View v){
          if (Resources.getSystem().getString(android.R.string.paste).equals(text.getText().toString())) {
            if (pref.getBoolean(""String_Node_Str"",false))             Etextview.onTextContextMenuItem(android.R.id.paste);
 else {
              Open(text.getContext());
              final int start=Etextview.getSelectionStart();
              final int end=Etextview.getSelectionEnd();
              mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
              mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
                @Override public void onPrimaryClipChanged(){
                  if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
                    try {
                      mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
                    }
 catch (                    Exception e1) {
                      Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                      e1.printStackTrace();
                    }
                  }
 else {
                    try {
                      Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
                      Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
                    }
 catch (                    Throwable e) {
                      Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                      e.printStackTrace();
                    }
                  }
                }
              }
;
              mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
            }
            return true;
          }
 else {
            Toast.makeText(text.getContext(),""String_Node_Str"" + text.getText().toString(),Toast.LENGTH_SHORT).show();
            return false;
          }
        }
      }
);
    }
  }
);
}","public void handleInitPackageResources(InitPackageResourcesParam resparam) throws Throwable {
  resparam.res.hookLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new XC_LayoutInflated(){
    @Override public void handleLayoutInflated(    LayoutInflatedParam liparam) throws Throwable {
      final TextView text=(TextView)liparam.view;
      text.setOnLongClickListener(new OnLongClickListener(){
        @Override public boolean onLongClick(        View v){
          if (Resources.getSystem().getString(android.R.string.paste).equals(text.getText().toString())) {
            if (pref.getBoolean(""String_Node_Str"",false))             Etextview.onTextContextMenuItem(android.R.id.paste);
 else {
              Open(text.getContext());
              start=Etextview.getSelectionStart();
              end=Etextview.getSelectionEnd();
              mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
              mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
                @Override public void onPrimaryClipChanged(){
                  if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
                    try {
                      mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
                    }
 catch (                    Exception e1) {
                      Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                      e1.printStackTrace();
                    }
                  }
 else                   if (pref.getBoolean(""String_Node_Str"",false)) {
                    try {
                      mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
                    }
 catch (                    Exception e1) {
                      Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                      e1.printStackTrace();
                    }
                    try {
                      Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
                      Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
                    }
 catch (                    Throwable e) {
                      Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                      e.printStackTrace();
                    }
                  }
 else {
                    try {
                      Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
                      Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
                      start=start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length();
                      end=start;
                    }
 catch (                    Throwable e) {
                      Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                      e.printStackTrace();
                    }
                  }
                }
              }
;
              mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
            }
            return true;
          }
 else {
            Toast.makeText(text.getContext(),""String_Node_Str"" + text.getText().toString(),Toast.LENGTH_SHORT).show();
            return false;
          }
        }
      }
);
    }
  }
);
}"
34131,"@Override public void handleLayoutInflated(LayoutInflatedParam liparam) throws Throwable {
  final TextView text=(TextView)liparam.view;
  text.setOnLongClickListener(new OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (Resources.getSystem().getString(android.R.string.paste).equals(text.getText().toString())) {
        if (pref.getBoolean(""String_Node_Str"",false))         Etextview.onTextContextMenuItem(android.R.id.paste);
 else {
          Open(text.getContext());
          final int start=Etextview.getSelectionStart();
          final int end=Etextview.getSelectionEnd();
          mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
          mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
            @Override public void onPrimaryClipChanged(){
              if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
                try {
                  mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
                }
 catch (                Exception e1) {
                  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                  e1.printStackTrace();
                }
              }
 else {
                try {
                  Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
                  Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
                }
 catch (                Throwable e) {
                  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                  e.printStackTrace();
                }
              }
            }
          }
;
          mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
        }
        return true;
      }
 else {
        Toast.makeText(text.getContext(),""String_Node_Str"" + text.getText().toString(),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
  }
);
}","@Override public void handleLayoutInflated(LayoutInflatedParam liparam) throws Throwable {
  final TextView text=(TextView)liparam.view;
  text.setOnLongClickListener(new OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (Resources.getSystem().getString(android.R.string.paste).equals(text.getText().toString())) {
        if (pref.getBoolean(""String_Node_Str"",false))         Etextview.onTextContextMenuItem(android.R.id.paste);
 else {
          Open(text.getContext());
          start=Etextview.getSelectionStart();
          end=Etextview.getSelectionEnd();
          mClipboardManager=(ClipboardManager)Ectx.getSystemService(Context.CLIPBOARD_SERVICE);
          mOnPrimaryClipChangedListener=new ClipboardManager.OnPrimaryClipChangedListener(){
            @Override public void onPrimaryClipChanged(){
              if (mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString().equals(""String_Node_Str"")) {
                try {
                  mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
                }
 catch (                Exception e1) {
                  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                  e1.printStackTrace();
                }
              }
 else               if (pref.getBoolean(""String_Node_Str"",false)) {
                try {
                  mClipboardManager.removePrimaryClipChangedListener(mOnPrimaryClipChangedListener);
                }
 catch (                Exception e1) {
                  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                  e1.printStackTrace();
                }
                try {
                  Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
                  Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
                }
 catch (                Throwable e) {
                  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                  e.printStackTrace();
                }
              }
 else {
                try {
                  Etextview.setText(Etextview.getText().subSequence(0,start).toString() + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).toString() + Etextview.getText().subSequence(end,Etextview.getText().length()).toString());
                  Selection.setSelection((Spannable)Etextview.getText(),start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length());
                  start=start + mClipboardManager.getPrimaryClip().getItemAt(0).coerceToText(Ectx).length();
                  end=start;
                }
 catch (                Throwable e) {
                  Toast.makeText(Ectx,""String_Node_Str"",Toast.LENGTH_SHORT).show();
                  e.printStackTrace();
                }
              }
            }
          }
;
          mClipboardManager.addPrimaryClipChangedListener(mOnPrimaryClipChangedListener);
        }
        return true;
      }
 else {
        Toast.makeText(text.getContext(),""String_Node_Str"" + text.getText().toString(),Toast.LENGTH_SHORT).show();
        return false;
      }
    }
  }
);
}"
34132,"@Before public void initTest(){
  PoreTests.mockPlugin();
  world=PoreWorld.of(mock(World.class));
  when(world.getHandle().getEntities()).thenReturn(ImmutableList.of(mock(org.spongepowered.api.entity.player.Player.class),mock(org.spongepowered.api.entity.Entity.class),mock(org.spongepowered.api.entity.living.Human.class),mock(org.spongepowered.api.entity.player.Player.class),mock(org.spongepowered.api.entity.living.Living.class),mock(org.spongepowered.api.entity.player.Player.class),mock(org.spongepowered.api.entity.player.Player.class),mock(org.spongepowered.api.entity.living.Living.class),mock(org.spongepowered.api.entity.living.Living.class),mock(org.spongepowered.api.entity.Entity.class),mock(org.spongepowered.api.entity.living.Human.class),mock(org.spongepowered.api.entity.player.Player.class),mock(org.spongepowered.api.entity.living.animal.Cow.class),mock(org.spongepowered.api.entity.living.animal.Pig.class)));
}","@Before public void initTest(){
  PoreTests.mockPlugin();
  world=PoreWorld.of(mock(World.class));
  when(world.getHandle().getEntities()).thenReturn(ImmutableList.of(mock(org.spongepowered.api.entity.living.player.Player.class),mock(org.spongepowered.api.entity.Entity.class),mock(org.spongepowered.api.entity.living.Human.class),mock(org.spongepowered.api.entity.living.player.Player.class),mock(org.spongepowered.api.entity.living.Living.class),mock(org.spongepowered.api.entity.living.player.Player.class),mock(org.spongepowered.api.entity.living.player.Player.class),mock(org.spongepowered.api.entity.living.Living.class),mock(org.spongepowered.api.entity.living.Living.class),mock(org.spongepowered.api.entity.Entity.class),mock(org.spongepowered.api.entity.living.Human.class),mock(org.spongepowered.api.entity.living.player.Player.class),mock(org.spongepowered.api.entity.living.animal.Cow.class),mock(org.spongepowered.api.entity.living.animal.Pig.class)));
}"
34133,"@Override public Arrow spawnArrow(Location location,Vector direction,float speed,float spread){
  checkNotNull(location,""String_Node_Str"");
  checkNotNull(direction,""String_Node_Str"");
  Entity spawned=spawnEntity(location,EntityType.ARROW);
  assert(spawned instanceof Arrow);
  Arrow arrow=(Arrow)spawned;
  arrow.setVelocity(VectorConverter.getUnitVector(direction).multiply(speed));
  return arrow;
}","@Override public Arrow spawnArrow(Location location,Vector direction,float speed,float spread){
}"
34134,"@Override public Item dropItem(Location location,ItemStack item){
  Optional<org.spongepowered.api.entity.Entity> created=getHandle().createEntity(EntityTypes.DROPPED_ITEM,VectorConverter.create3d(location));
  if (!created.isPresent()) {
    return null;
  }
  assert(created instanceof Item);
  org.spongepowered.api.entity.Item drop=(org.spongepowered.api.entity.Item)created;
  drop.setPickupDelay(10);
  throw new NotImplementedException();
}","@Override public Item dropItem(Location location,ItemStack item){
}"
34135,"public static EntityInteractionType of(Action action){
  if (action == Action.LEFT_CLICK_AIR) {
    return EntityInteractionType.LEFT_CLICK;
  }
 else   if (action == Action.LEFT_CLICK_BLOCK) {
    return EntityInteractionType.LEFT_CLICK;
  }
 else   if (action == Action.RIGHT_CLICK_AIR) {
    return EntityInteractionType.RIGHT_CLICK;
  }
 else   if (action == Action.RIGHT_CLICK_BLOCK) {
    return EntityInteractionType.RIGHT_CLICK;
  }
  return null;
}","public static EntityInteractionType of(Action action){
  if (action == Action.LEFT_CLICK_AIR) {
    return EntityInteractionTypes.ATTACK;
  }
 else   if (action == Action.LEFT_CLICK_BLOCK) {
    return EntityInteractionTypes.ATTACK;
  }
 else   if (action == Action.RIGHT_CLICK_AIR) {
    return EntityInteractionTypes.USE;
  }
 else   if (action == Action.RIGHT_CLICK_BLOCK) {
    return EntityInteractionTypes.USE;
  }
  return null;
}"
34136,"@Override public Block getBlock(int x,int y,int z){
  return PoreBlock.of(getHandle().getBlock(x,y,z));
}","@Override public Block getBlock(int x,int y,int z){
  return PoreBlock.of(getHandle().getFullBlock(x,y,z));
}"
34137,"@Override public float getSaturation(){
  return getHandle().getSaturation();
}","@Override public float getSaturation(){
  return (float)getHandle().getSaturation();
}"
34138,"@Override public boolean getAllowFlight(){
  return getHandle().getAllowFlight();
}","@Override public boolean getAllowFlight(){
  throw new NotImplementedException();
}"
34139,"@Override public float getExhaustion(){
  return getHandle().getHunger();
}","@Override public float getExhaustion(){
  return (float)getHandle().getExhaustion();
}"
34140,"@Override public void setAllowFlight(boolean flight){
  getHandle().setAllowFlight(flight);
}","@Override public void setAllowFlight(boolean flight){
  throw new NotImplementedException();
}"
34141,"@Override public void setExhaustion(float value){
  getHandle().setHunger(value);
}","@Override public void setExhaustion(float value){
  getHandle().setExhaustion(value);
}"
34142,"@Override public int getExperience(){
  return (int)getHandle().getExperience();
}","@Override public int getExperience(){
  return getHandle().getExperience();
}"
34143,"@Override public int getDroppedExp(){
  return (int)this.getHandle().getDroppedExperience();
}","@Override public int getDroppedExp(){
  return this.getHandle().getExp();
}"
34144,"@Override public void setDroppedExp(int exp){
  this.getHandle().setDroppedExperience(exp);
}","@Override public void setDroppedExp(int exp){
  this.getHandle().setExp(exp);
}"
34145,"@Override public void setFire(boolean fire){
  getHandle().setFlamable(fire);
}","@Override public void setFire(boolean fire){
  getHandle().setFlammable(fire);
}"
34146,"@Override public boolean getFire(){
  return this.getHandle().isFlamable();
}","@Override public boolean getFire(){
  return this.getHandle().isFlammable();
}"
34147,"@Override public InventoryHolder getHolder(){
  if (this instanceof CarriedInventory) {
    Optional<?> carrier=((CarriedInventory)this.getHandle()).getCarrier();
    if (carrier.isPresent()) {
      return PoreInventoryHolder.of((Carrier)carrier.get());
    }
  }
  return null;
}","@Override public InventoryHolder getHolder(){
  if (this.getHandle() instanceof CarriedInventory) {
    Optional<?> carrier=((CarriedInventory)this.getHandle()).getCarrier();
    if (carrier.isPresent()) {
      return PoreInventoryHolder.of((Carrier)carrier.get());
    }
  }
  return null;
}"
34148,"@Subscribe public void onPlayerChat(final PlayerChatEvent event){
  Set<Player> players=new HashSet<Player>(PoreWorld.of(event.getPlayer().getWorld()).getPlayers());
  Bukkit.getPluginManager().callEvent(new org.bukkit.event.player.AsyncPlayerChatEvent(false,PorePlayer.of(event.getPlayer()),event.getMessage(),players){
    @Override public void setCancelled(    boolean cancelled){
      super.setCancelled(cancelled);
    }
  }
);
}","@Subscribe public void onPlayerChat(final PlayerChatEvent event){
  Set<Player> players=new HashSet<Player>(PoreWorld.of(event.getPlayer().getWorld()).getPlayers());
  Bukkit.getPluginManager().callEvent(new org.bukkit.event.player.AsyncPlayerChatEvent(false,PorePlayer.of(event.getPlayer()),event.getMessage().toLegacy(),players){
    @Override public void setCancelled(    boolean cancelled){
      super.setCancelled(cancelled);
    }
  }
);
}"
34149,"@Override public String getMessage(){
  return handle.getMessage();
}","@Override @SuppressWarnings(""String_Node_Str"") public String getMessage(){
  return handle.getMessage().toLegacy();
}"
34150,"@Subscribe public void onInitialization(PreInitializationEvent event){
  instance=this;
  logger.info(""String_Node_Str"");
  initializeEventHandlers();
  server=new PoreServer(event.getGame(),logger);
}","@Subscribe public void onInitialization(PreInitializationEvent event){
  instance=this;
  logger.info(""String_Node_Str"");
  initializeEventHandlers();
  server=new PoreServer(game,logger);
}"
34151,"private static void initializeEventHandlers(){
  getGame().getEventManager().register(getInstance(),getInstance());
  getGame().getEventManager().register(getInstance(),new BlockEventRelay());
  getGame().getEventManager().register(getInstance(),new EntityEventRelay());
  getGame().getEventManager().register(getInstance(),new PlayerEventRelay());
  getGame().getEventManager().register(getInstance(),new WorldEventRelay());
}","private static void initializeEventHandlers(){
  getGame().getEventManager().register(getInstance(),new BlockEventRelay());
  getGame().getEventManager().register(getInstance(),new EntityEventRelay());
  getGame().getEventManager().register(getInstance(),new PlayerEventRelay());
  getGame().getEventManager().register(getInstance(),new WorldEventRelay());
}"
34152,"protected PoreAmbient(Living handle){
  super(handle);
}","protected PoreAmbient(Ambient handle){
  super(handle);
}"
34153,"protected PoreWaterMob(Agent handle){
  super(handle);
}","protected PoreWaterMob(Aquatic handle){
  super(handle);
}"
34154,"@Override public Location getLocation(Location loc){
  loc.setWorld(null);
  loc.setX(getHandle().getPosition().getX());
  loc.setY(getHandle().getPosition().getX());
  loc.setZ(getHandle().getPosition().getX());
  loc.setPitch(getHandle().getVectorRotation().getX());
  loc.setYaw(getHandle().getVectorRotation().getY());
  return loc;
}","@Override public Location getLocation(Location loc){
  loc.setWorld(null);
  loc.setX(getHandle().getLocation().getPosition().getX());
  loc.setY(getHandle().getLocation().getPosition().getX());
  loc.setZ(getHandle().getLocation().getPosition().getX());
  loc.setPitch(getHandle().getRotation().getX());
  loc.setYaw(getHandle().getRotation().getY());
  return loc;
}"
34155,"@Override public boolean leaveVehicle(){
  if (getHandle().getRiding().isPresent()) {
    getHandle().dismount();
    return true;
  }
  return false;
}","@Override public boolean leaveVehicle(){
  if (getHandle().getVehicle().isPresent()) {
    getHandle().setVehicle(null);
    return true;
  }
  return false;
}"
34156,"@Override public boolean isDead(){
  return getHandle().isDead();
}","@Override public boolean isDead(){
  return getHandle().isRemoved();
}"
34157,"@Override public boolean eject(){
  if (getHandle().getRider().isPresent()) {
    final org.spongepowered.api.entity.Entity rider=getHandle().getRider().get();
    getHandle().eject();
    final PoreEntity dismounted=this;
    Pore.getGame().getEventManager().post(new EntityDismountEvent(){
      private boolean cancelled=false;
      @Override public org.spongepowered.api.entity.Entity getDismounted(){
        return dismounted.getHandle();
      }
      @Override public boolean isCancelled(){
        return cancelled;
      }
      @Override public void setCancelled(      boolean cancel){
        this.cancelled=cancel;
        if (cancel)         rider.mount(dismounted.getHandle());
 else         rider.dismount();
      }
      @Override public org.spongepowered.api.entity.Entity getEntity(){
        return rider;
      }
      @Override public Game getGame(){
        return Pore.getGame();
      }
      @Override public CallbackList getCallbacks(){
        return null;
      }
    }
);
    return true;
  }
  return false;
}","@Override public boolean eject(){
  if (getHandle().getPassenger().isPresent()) {
    final org.spongepowered.api.entity.Entity rider=getHandle().getPassenger().get();
    getHandle().setPassenger(null);
    final PoreEntity dismounted=this;
    Pore.getGame().getEventManager().post(new EntityDismountEvent(){
      private boolean cancelled=false;
      @Override public org.spongepowered.api.entity.Entity getDismounted(){
        return dismounted.getHandle();
      }
      @Override public boolean isCancelled(){
        return cancelled;
      }
      @Override public void setCancelled(      boolean cancel){
        this.cancelled=cancel;
        if (cancel)         dismounted.getHandle().setPassenger(rider);
 else         dismounted.setPassenger(null);
      }
      @Override public org.spongepowered.api.entity.Entity getEntity(){
        return rider;
      }
      @Override public Game getGame(){
        return Pore.getGame();
      }
      @Override public CallbackList getCallbacks(){
        return null;
      }
    }
);
    return true;
  }
  return false;
}"
34158,"@Override public void setCancelled(boolean cancel){
  this.cancelled=cancel;
  if (cancel)   rider.mount(dismounted.getHandle());
 else   rider.dismount();
}","@Override public void setCancelled(boolean cancel){
  this.cancelled=cancel;
  if (cancel)   dismounted.getHandle().setPassenger(rider);
 else   dismounted.setPassenger(null);
}"
34159,"@Override public boolean setPassenger(final Entity passenger){
  if (!getHandle().getRider().isPresent()) {
    ((PoreEntity)passenger).getHandle().mount(getHandle());
    final PoreEntity mounted=this;
    Pore.getGame().getEventManager().post(new EntityMountEvent(){
      private boolean cancelled=false;
      @Override public org.spongepowered.api.entity.Entity getMounted(){
        return mounted.getHandle();
      }
      @Override public boolean isCancelled(){
        return cancelled;
      }
      @Override public void setCancelled(      boolean cancel){
        this.cancelled=cancel;
        if (cancel)         mounted.getHandle().eject();
 else         ((PoreEntity)passenger).getHandle().mount(getHandle());
      }
      @Override public org.spongepowered.api.entity.Entity getEntity(){
        return ((PoreEntity)passenger).getHandle();
      }
      @Override public Game getGame(){
        return Pore.getGame();
      }
      @Override public CallbackList getCallbacks(){
        return null;
      }
    }
);
    return true;
  }
 else   if (passenger == null) {
    getHandle().eject();
    return true;
  }
  return false;
}","@Override public boolean setPassenger(final Entity passenger){
  if (!getHandle().getPassenger().isPresent()) {
    getHandle().setPassenger(((PoreEntity)passenger).getHandle());
    final PoreEntity mounted=this;
    Pore.getGame().getEventManager().post(new EntityMountEvent(){
      private boolean cancelled=false;
      @Override public org.spongepowered.api.entity.Entity getVehicle(){
        return mounted.getHandle();
      }
      @Override public boolean isCancelled(){
        return cancelled;
      }
      @Override public void setCancelled(      boolean cancel){
        this.cancelled=cancel;
        if (cancel)         mounted.getHandle().setPassenger(null);
 else         mounted.getHandle().setPassenger(((PoreEntity)passenger).getHandle());
      }
      @Override public org.spongepowered.api.entity.Entity getEntity(){
        return ((PoreEntity)passenger).getHandle();
      }
      @Override public Game getGame(){
        return Pore.getGame();
      }
      @Override public CallbackList getCallbacks(){
        return null;
      }
    }
);
    return true;
  }
 else   if (passenger == null) {
    getHandle().setPassenger(null);
    return true;
  }
  return false;
}"
34160,"@Override public Entity getVehicle(){
  return getHandle().getRiding().isPresent() ? PoreEntity.of(getHandle().getRiding().get()) : null;
}","@Override public Entity getVehicle(){
  return getHandle().getVehicle().isPresent() ? PoreEntity.of(getHandle().getVehicle().get()) : null;
}"
34161,"@Override public boolean isInsideVehicle(){
  return getHandle().getRiding().isPresent();
}","@Override public boolean isInsideVehicle(){
  return getHandle().getVehicle().isPresent();
}"
34162,"@Override public boolean isValid(){
  return getHandle().isValid();
}","@Override public boolean isValid(){
  return getHandle().isLoaded();
}"
34163,"@Override public boolean isEmpty(){
  return !getHandle().getRider().isPresent();
}","@Override public boolean isEmpty(){
  return !getHandle().getPassenger().isPresent();
}"
34164,"@Override public Entity getPassenger(){
  return getHandle().getRider().isPresent() ? PoreEntity.of(getHandle().getRider().get()) : null;
}","@Override public Entity getPassenger(){
  return getHandle().getPassenger().isPresent() ? PoreEntity.of(getHandle().getPassenger().get()) : null;
}"
34165,"public static EulerDirection of(EulerAngle angle){
  throw new NotImplementedException();
}","public static Vector3f of(EulerAngle angle){
  return new Vector3f(angle.getX(),angle.getY(),angle.getZ());
}"
34166,"public PoreBeacon(BlockLoc spongeBlock){
  super(spongeBlock);
}","protected PoreBeacon(org.spongepowered.api.block.BlockState handle){
  super(handle);
}"
34167,"/** 
 * Returns a Pore wrapper for the given handle. If one exists, it will be retrieved; otherwise, a new wrapper instance will be created.
 * @param handle The Sponge object to wrap.
 * @return A Pore wrapper for the given Sponge object.
 */
public static PoreBlock of(BlockLoc handle){
  return getConverter().apply(handle);
}","/** 
 * Returns a Pore wrapper for the given handle. If one exists, it will be retrieved; otherwise, a new wrapper instance will be created.
 * @param handle The Sponge object to wrap.
 * @return A Pore wrapper for the given Sponge object.
 */
public static PoreBlock of(BlockLoc handle){
  return converter.apply(handle);
}"
34168,"/** 
 * Returns a Pore wrapper for the given handle. If one exists, it will be retrieved; otherwise, a new wrapper instance will be created.
 * @param handle The Sponge object to wrap.
 * @return A Pore wrapper for the given Sponge object.
 */
public static PoreBlockState of(org.spongepowered.api.block.BlockState handle){
  return getConverter().apply(handle);
}","/** 
 * Returns a Pore wrapper for the given handle. If one exists, it will be retrieved; otherwise, a new wrapper instance will be created.
 * @param handle The Sponge object to wrap.
 * @return A Pore wrapper for the given Sponge object.
 */
public static PoreBlockState of(org.spongepowered.api.block.BlockState handle){
  return converter.apply(handle);
}"
34169,"private PoreBlockState(org.spongepowered.api.block.BlockState handle){
  super(handle);
}","protected PoreBlockState(org.spongepowered.api.block.BlockState handle){
  super(handle);
}"
34170,"public PoreBrewingStand(BlockLoc spongeBlock){
  super(spongeBlock);
}","protected PoreBrewingStand(org.spongepowered.api.block.BlockState handle){
  super(handle);
}"
34171,"public PoreChest(BlockLoc spongeBlock){
  super(spongeBlock);
}","protected PoreChest(org.spongepowered.api.block.BlockState handle){
  super(handle);
}"
34172,"public PoreCommandBlock(BlockLoc spongeBlock){
  super(spongeBlock);
}","protected PoreCommandBlock(org.spongepowered.api.block.BlockState handle){
  super(handle);
}"
34173,"public PoreCreatureSpawner(BlockLoc spongeBlock){
  super(spongeBlock);
}","protected PoreCreatureSpawner(org.spongepowered.api.block.BlockState handle){
  super(handle);
}"
34174,"public PoreDispenser(BlockLoc spongeBlock){
  super(spongeBlock);
}","protected PoreDispenser(org.spongepowered.api.block.BlockState handle){
  super(handle);
}"
34175,"public PoreDropper(BlockLoc spongeBlock){
  super(spongeBlock);
}","protected PoreDropper(org.spongepowered.api.block.BlockState handle){
  super(handle);
}"
34176,"public PoreServerCommandSender(){
}","protected PoreServerCommandSender(Subject handle){
  super(handle);
}"
34177,"private PorePermissible(Subject handle){
  super(handle);
}","protected PorePermissible(Subject handle){
  super(handle);
}"
34178,"public boolean showPopupHook(){
  return true;
}","/** 
 * This method should be implemented appropriately by subclasses
 * @param event
 * @return boolean
 */
public boolean showPopupHook(MouseEvent event){
  return true;
}"
34179,"private void showMenuIfPopupTrigger(MouseEvent e){
  if (e.isPopupTrigger() && showPopupHook()) {
    popup.show(component,e.getX() + 3,e.getY() + 3);
  }
}","private void showMenuIfPopupTrigger(MouseEvent e){
  if (e.isPopupTrigger() && showPopupHook(e)) {
    popup.show(component,e.getX() + 3,e.getY() + 3);
  }
}"
34180,"@Override public boolean showPopupHook(){
  TreeSelectionModel selectionModel=((PdfTree)component).getSelectionModel();
  TreePath[] paths=selectionModel.getSelectionPaths();
  if (paths.length < 1) {
    return false;
  }
  PdfObjectTreeNode lastPath=((PdfObjectTreeNode)paths[0].getLastPathComponent());
  if (!lastPath.isStream()) {
    return false;
  }
  PRStream stream=(PRStream)lastPath.getPdfObject();
  return stream.get(PdfName.SUBTYPE) != PdfName.IMAGE;
}","@Override public boolean showPopupHook(MouseEvent event){
  PdfTree tree=(PdfTree)component;
  int row=tree.getClosestRowForLocation(event.getX(),event.getY());
  tree.setSelectionRow(row);
  TreeSelectionModel selectionModel=((PdfTree)component).getSelectionModel();
  TreePath[] paths=selectionModel.getSelectionPaths();
  if (paths == null || paths.length < 1) {
    return false;
  }
  PdfObjectTreeNode lastPath=((PdfObjectTreeNode)paths[0].getLastPathComponent());
  if (!lastPath.isStream()) {
    return false;
  }
  PRStream stream=(PRStream)lastPath.getPdfObject();
  return stream.get(PdfName.SUBTYPE) != PdfName.IMAGE;
}"
34181,"/** 
 * @see javax.swing.JTable#valueChanged(javax.swing.event.ListSelectionEvent)
 */
@Override public void valueChanged(ListSelectionEvent evt){
  if (evt != null)   super.valueChanged(evt);
  if (controller == null)   return;
  if (getRowCount() > 0) {
    controller.selectNode(list.get(getSelectedRow()));
    if (listener != null)     listener.gotoPage(getSelectedRow() + 1);
  }
}","/** 
 * @see javax.swing.JTable#valueChanged(javax.swing.event.ListSelectionEvent)
 */
@Override public void valueChanged(ListSelectionEvent evt){
  if (evt != null)   super.valueChanged(evt);
  if (controller == null)   return;
  if (getRowCount() > 0) {
    int selectedRow=getSelectedRow();
    if (selectedRow >= 0) {
      controller.selectNode(list.get(selectedRow));
      if (listener != null)       listener.gotoPage(getSelectedRow() + 1);
    }
  }
}"
34182,"@Override public void setValueAt(Object aValue,int rowIndex,int columnIndex){
  int rowCount=getRowCount();
  if (rowIndex == rowCount - 1) {
    if (columnIndex == 0) {
      tempKey=(String)aValue;
    }
 else     if (columnIndex == 1) {
      tempValue=(String)aValue;
    }
  }
 else {
    if (columnIndex == 0) {
      String key=(String)aValue;
      if (key.contains(""String_Node_Str"")) {
        key=key.replace(""String_Node_Str"",""String_Node_Str"");
      }
      PdfName oldName=keys.get(rowIndex);
      PdfName newName=new PdfName(key);
      keys.set(rowIndex,newName);
      PdfObject pdfObject=dictionary.get(oldName);
      dictionary.remove(oldName);
      dictionary.put(newName,pdfObject);
    }
 else {
    }
  }
}","@Override public void setValueAt(Object aValue,int rowIndex,int columnIndex){
  int rowCount=getRowCount();
  if (rowIndex == rowCount - 1) {
    if (columnIndex == 0) {
      tempKey=(String)aValue;
    }
 else     if (columnIndex == 1) {
      tempValue=(String)aValue;
    }
  }
 else {
    if (columnIndex == 0) {
      String key=(String)aValue;
      if (key.contains(""String_Node_Str"")) {
        key=key.replace(""String_Node_Str"",""String_Node_Str"");
      }
      PdfName oldName=keys.get(rowIndex);
      PdfName newName=new PdfName(key);
      keys.set(rowIndex,newName);
      PdfObject pdfObject=dictionary.get(oldName);
      dictionary.remove(oldName);
      dictionary.put(newName,pdfObject);
    }
 else {
      String value=(String)aValue;
      PdfObject pdfObject=dictionary.get(keys.get(rowIndex));
      if (pdfObject instanceof PdfArray) {
        value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      dictionary.put(keys.get(rowIndex),new PdfLiteral(value));
    }
  }
}"
34183,"/** 
 * Does the actual reading of the file into PdfReader and PDFFile.
 * @param pdf	a Random Access File or Array
 * @throws IOException
 * @throws DocumentException
 */
protected void readFile(RandomAccessFileOrArray pdf) throws IOException, DocumentException {
  permissions=new Permissions();
  try {
    reader=new PdfReader(pdf,null);
    permissions.setEncrypted(false);
  }
 catch (  BadPasswordException bpe) {
    JPasswordField passwordField=new JPasswordField(32);
    JOptionPane.showConfirmDialog(null,passwordField,""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
    byte[] password=new String(passwordField.getPassword()).getBytes();
    reader=new PdfReader(pdf,password);
    permissions.setEncrypted(true);
    permissions.setCryptoMode(reader.getCryptoMode());
    permissions.setPermissions(reader.getPermissions());
    if (reader.isOpenedWithFullPermissions()) {
      permissions.setOwnerPassword(password);
      permissions.setUserPassword(reader.computeUserPassword());
    }
 else {
      throw new IOException(""String_Node_Str"");
    }
  }
}","/** 
 * Does the actual reading of the file into PdfReader and PDFFile.
 * @param pdf	a Random Access File or Array
 * @throws IOException
 * @throws DocumentException
 */
protected void readFile(RandomAccessSource ras) throws IOException, DocumentException {
  permissions=new Permissions();
  try {
    reader=new PdfReader(ras);
    permissions.setEncrypted(false);
  }
 catch (  BadPasswordException bpe) {
    JPasswordField passwordField=new JPasswordField(32);
    JOptionPane.showConfirmDialog(null,passwordField,""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
    byte[] password=new String(passwordField.getPassword()).getBytes();
    reader=new PdfReader(ras,true,password);
    permissions.setEncrypted(true);
    permissions.setCryptoMode(reader.getCryptoMode());
    permissions.setPermissions(reader.getPermissions());
    if (reader.isOpenedWithFullPermissions()) {
      permissions.setOwnerPassword(password);
      permissions.setUserPassword(reader.computeUserPassword());
    }
 else {
      throw new IOException(""String_Node_Str"");
    }
  }
}"
34184,"/** 
 * Constructs a PdfFile object.
 * @param file	the byte[] to read
 * @throws IOException 
 * @throws DocumentException 
 */
public PdfFile(byte[] file) throws IOException, DocumentException {
  RandomAccessFileOrArray pdf=new RandomAccessFileOrArray(file);
  readFile(pdf);
}","/** 
 * Constructs a PdfFile object.
 * @param file	the byte[] to read
 * @throws IOException 
 * @throws DocumentException 
 */
public PdfFile(byte[] file) throws IOException, DocumentException {
  RandomAccessSourceFactory rasf=new RandomAccessSourceFactory();
  RandomAccessSource ras=rasf.createSource(file);
  readFile(ras);
}"
34185,"/** 
 * @see java.util.Observer#update(java.util.Observable,java.lang.Object)
 */
@SuppressWarnings(""String_Node_Str"") public void update(Observable observable,Object obj){
  if (obj == null) {
    list=new ArrayList<PdfPageTreeNode>();
    repaint();
    return;
  }
  if (obj instanceof ObjectLoader) {
    ObjectLoader loader=(ObjectLoader)obj;
    String[] pagelabels=PdfPageLabels.getPageLabels(loader.getReader());
    int i=0;
    TreeNodeFactory factory=loader.getNodes();
    PdfTrailerTreeNode trailer=controller.getPdfTree().getRoot();
    PdfObjectTreeNode catalog=factory.getChildNode(trailer,PdfName.ROOT);
    PdfPagesTreeNode pages=(PdfPagesTreeNode)factory.getChildNode(catalog,PdfName.PAGES);
    if (pages == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    Enumeration<PdfObjectTreeNode> p=pages.depthFirstEnumeration();
    PdfObjectTreeNode child;
    StringBuffer buf;
    while (p.hasMoreElements()) {
      child=p.nextElement();
      if (child instanceof PdfPageTreeNode) {
        buf=new StringBuffer(""String_Node_Str"");
        buf.append(++i);
        if (pagelabels != null) {
          buf.append(""String_Node_Str"");
          buf.append(pagelabels[i - 1]);
          buf.append(""String_Node_Str"");
        }
        child.setUserObject(buf.toString());
        list.add((PdfPageTreeNode)child);
      }
    }
  }
  setModel(new JTableAutoModel(this));
}","/** 
 * @see java.util.Observer#update(java.util.Observable,java.lang.Object)
 */
public void update(Observable observable,Object obj){
  if (obj == null) {
    list=new ArrayList<PdfPageTreeNode>();
    repaint();
    return;
  }
  if (obj instanceof ObjectLoader) {
    ObjectLoader loader=(ObjectLoader)obj;
    String[] pagelabels=PdfPageLabels.getPageLabels(loader.getReader());
    int i=0;
    TreeNodeFactory factory=loader.getNodes();
    PdfTrailerTreeNode trailer=controller.getPdfTree().getRoot();
    PdfObjectTreeNode catalog=factory.getChildNode(trailer,PdfName.ROOT);
    Enumeration<PdfPageTreeNode> p=new PageEnumerator((PdfDictionary)catalog.getPdfObject(),factory);
    PdfPageTreeNode child;
    StringBuffer buf;
    while (p.hasMoreElements()) {
      child=p.nextElement();
      buf=new StringBuffer(""String_Node_Str"");
      buf.append(++i);
      if (pagelabels != null) {
        buf.append(""String_Node_Str"");
        buf.append(pagelabels[i - 1]);
        buf.append(""String_Node_Str"");
      }
      child.setUserObject(buf.toString());
      list.add((PdfPageTreeNode)child);
    }
  }
  setModel(new JTableAutoModel(this));
}"
34186,"/** 
 * Creates a new Console object.
 * @throws IOException
 */
private Console() throws IOException {
  piCustom=new PipedInputStream();
  poCustom=new PipedOutputStream();
  printStream=new PrintStream(poCustom);
  piOut=new PipedInputStream();
  poOut=new PipedOutputStream(piOut);
  System.setOut(new PrintStream(poOut,true));
  piErr=new PipedInputStream();
  poErr=new PipedOutputStream(piErr);
  System.setErr(new PrintStream(poErr,true));
  textArea.setEditable(false);
  new ReadWriteThread(piCustom,ConsoleStyleContext.CUSTOM).start();
  new ReadWriteThread(piOut,ConsoleStyleContext.SYSTEMOUT).start();
  new ReadWriteThread(piErr,ConsoleStyleContext.SYSTEMERR).start();
}","/** 
 * Creates a new Console object.
 * @throws IOException
 */
private Console() throws IOException {
  piCustom=new PipedInputStream();
  poCustom=new PipedOutputStream(piCustom);
  printStream=new PrintStream(poCustom);
  piOut=new PipedInputStream();
  poOut=new PipedOutputStream(piOut);
  System.setOut(new PrintStream(poOut,true));
  piErr=new PipedInputStream();
  poErr=new PipedOutputStream(piErr);
  System.setErr(new PrintStream(poErr,true));
  textArea.setEditable(false);
  new ReadWriteThread(piCustom,ConsoleStyleContext.CUSTOM).start();
  new ReadWriteThread(piOut,ConsoleStyleContext.SYSTEMOUT).start();
  new ReadWriteThread(piErr,ConsoleStyleContext.SYSTEMERR).start();
}"
34187,"public String getLoaderName(){
  return loaderName;
}","/** 
 * getter for a human readable name representing this loader
 * @return the human readable name
 * @since 5.0.3
 */
public String getLoaderName(){
  return loaderName;
}"
34188,"/** 
 * Getter for the filename
 * @return the original filename
 */
public String getFilename(){
  return filename;
}","/** 
 * Getter for the filename
 * @return the original filename
 * @sinece 5.0.3
 */
public String getFilename(){
  return filename;
}"
34189,"/** 
 * Creates AttributePermutations matching the connection and objectName.
 * @param connection The Connection.
 * @param objectName The name of an MBean, which may or may not match the attributes we're supposed to collect forthe connection.
 */
private void createPermutations(final Connection connection,final ObjectName objectName){
  for (  Attribute attribute : attributes) {
    if (connection.getBeanAliases().contains(attribute.getBeanAlias()) && attribute.getObjectName().apply(objectName)) {
      collectablePermutations.addAll(AttributePermutation.create(new ObjectName[]{objectName},connection,attribute));
    }
  }
}","/** 
 * Creates AttributePermutations matching the connection and objectName.
 * @param connection The Connection.
 * @param objectName The name of an MBean, which may or may not match the attributes we're supposed to collect forthe connection.
 */
private void createPermutations(final Connection connection,final ObjectName objectName){
  for (  Attribute attribute : attributes) {
    if (connection.getBeanAliases().contains(attribute.getBeanAlias()) && attribute.getObjectName().apply(objectName)) {
      List<AttributePermutation> permutations=AttributePermutation.create(new ObjectName[]{objectName},connection,attribute);
synchronized (collectablePermutations) {
        collectablePermutations.addAll(permutations);
      }
    }
  }
}"
34190,"/** 
 * Creates AttributePermutations matching the connection and objectName.
 * @param connection The Connection.
 * @param objectName The name of an MBean, which may or may not match the attributes we're supposed to collect forthe connection.
 */
private void createPermutations(final Connection connection,final ObjectName objectName){
  for (  Attribute attribute : attributes) {
    if (connection.getBeanAliases().contains(attribute.getBeanAlias()) && attribute.getObjectName().apply(objectName)) {
      collectablePermutations.addAll(AttributePermutation.create(new ObjectName[]{objectName},connection,attribute));
    }
  }
}","/** 
 * Creates AttributePermutations matching the connection and objectName.
 * @param connection The Connection.
 * @param objectName The name of an MBean, which may or may not match the attributes we're supposed to collect forthe connection.
 */
private void createPermutations(final Connection connection,final ObjectName objectName){
  for (  Attribute attribute : attributes) {
    if (connection.getBeanAliases().contains(attribute.getBeanAlias()) && attribute.getObjectName().apply(objectName)) {
      List<AttributePermutation> permutations=AttributePermutation.create(new ObjectName[]{objectName},connection,attribute);
synchronized (collectablePermutations) {
        collectablePermutations.addAll(permutations);
      }
    }
  }
}"
34191,"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
 else   if (obj instanceof Connection) {
    Connection that=(Connection)obj;
    return that.rawUrl.equals(this.rawUrl) && this.username != null ? this.username.equals(that.username) : this.username == that.username && this.password != null ? this.password.equals(that.password) : this.password == that.password && this.hostname != null ? this.hostname.equals(that.hostname) : this.hostname == that.hostname && this.connectionInstancePrefix != null ? this.connectionInstancePrefix.equals(that.connectionInstancePrefix) : this.connectionInstancePrefix == this.connectionInstancePrefix;
  }
  return false;
}","@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
 else   if (obj instanceof Connection) {
    Connection that=(Connection)obj;
    return this.rawUrl.equals(that.rawUrl) && this.hostname.equals(that.hostname) && (this.username == null ? that.username == null : this.username.equals(that.username))&& (this.password == null ? that.password == null : this.password.equals(that.password))&& (this.connectionInstancePrefix == null ? that.connectionInstancePrefix == null : this.connectionInstancePrefix.equals(that.connectionInstancePrefix))&& this.ttl == that.ttl && this.forceSynchronous == that.forceSynchronous;
  }
  return false;
}"
34192,"/** 
 * Creates AttributePermutations matching the connection and objectName.
 * @param connection The Connection.
 * @param objectName The name of an MBean, which may or may not match the attributes we're supposed to collect forthe connection.
 */
private void createPermutations(final Connection connection,final ObjectName objectName){
  for (  Attribute attribute : attributes) {
    if (connection.getBeanAliases().contains(attribute.getBeanAlias()) && attribute.getObjectName().apply(objectName)) {
      collectablePermutations.addAll(AttributePermutation.create(new ObjectName[]{objectName},connection,attribute));
    }
  }
}","/** 
 * Creates AttributePermutations matching the connection and objectName.
 * @param connection The Connection.
 * @param objectName The name of an MBean, which may or may not match the attributes we're supposed to collect forthe connection.
 */
private void createPermutations(final Connection connection,final ObjectName objectName){
  for (  Attribute attribute : attributes) {
    if (connection.getBeanAliases().contains(attribute.getBeanAlias()) && attribute.getObjectName().apply(objectName)) {
      List<AttributePermutation> permutations=AttributePermutation.create(new ObjectName[]{objectName},connection,attribute);
synchronized (collectablePermutations) {
        collectablePermutations.addAll(permutations);
      }
    }
  }
}"
34193,"public void renderChunk(){
  TextureManager textureManager=Minecraft.getMinecraft().getTextureManager();
  textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
  textureManager.getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false,false);
  GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
  GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
  GlStateManager.enableAlpha();
  GlStateManager.alphaFunc(GL11.GL_GREATER,0.1f);
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA,GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
  GlStateManager.color(1.0f,1.0f,1.0f,1.0f);
  GlStateManager.disableFog();
  GlStateManager.disableLighting();
  RenderHelper.disableStandardItemLighting();
  GlStateManager.enableBlend();
  GlStateManager.enableCull();
  GlStateManager.enableAlpha();
  if (Minecraft.isAmbientOcclusionEnabled()) {
    GlStateManager.shadeModel(GL11.GL_SMOOTH);
  }
 else {
    GlStateManager.shadeModel(GL11.GL_FLAT);
  }
  GlStateManager.pushMatrix();
  GlStateManager.pushAttrib();
  GlStateManager.enableCull();
  GlStateManager.translate(width / 2,height / 2,180.0f);
  GlStateManager.scale(2.0f,2.0f,2.0f);
  GlStateManager.scale(-1.0f,1.0f,1.0f);
  GlStateManager.rotate((float)rotateY,1.0f,0.0f,0.0f);
  GlStateManager.rotate(180.0f,0.0f,0.0f,-1.0f);
  GlStateManager.rotate(rotateX == 0.0d ? RenderTickCounter.renderTicks * 45.0f / 128.0f : (float)rotateX,0.0f,1.0f,0.0f);
  GlStateManager.translate(-8.0f,-8.0f,-8.0f);
  float shift=(GuiMachineData.machineSize - 1) * -4.0f;
  GlStateManager.translate(shift,shift,shift);
  GlStateManager.scale(8.0f,8.0f,8.0f);
  GlStateManager.callList(glListId);
  GlStateManager.resetColor();
  if (ConfigurationHandler.MachineSettings.renderTileEntitiesInGUI) {
    this.renderTileEntities(TileEntityRendererDispatcher.instance,new ArrayList<>(GuiMachineData.toRender));
  }
  if (ConfigurationHandler.MachineSettings.renderLivingEntitiesInGUI) {
    this.renderEntities();
  }
  GlStateManager.popAttrib();
  GlStateManager.popMatrix();
  GlStateManager.disableBlend();
}","public void renderChunk(){
  TextureManager textureManager=Minecraft.getMinecraft().getTextureManager();
  textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
  textureManager.getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false,false);
  GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
  GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
  GlStateManager.enableAlpha();
  GlStateManager.alphaFunc(GL11.GL_GREATER,0.1f);
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA,GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
  GlStateManager.color(1.0f,1.0f,1.0f,1.0f);
  GlStateManager.disableFog();
  GlStateManager.disableLighting();
  RenderHelper.disableStandardItemLighting();
  GlStateManager.enableBlend();
  GlStateManager.enableCull();
  GlStateManager.enableAlpha();
  if (Minecraft.isAmbientOcclusionEnabled()) {
    GlStateManager.shadeModel(GL11.GL_SMOOTH);
  }
 else {
    GlStateManager.shadeModel(GL11.GL_FLAT);
  }
  GlStateManager.pushMatrix();
  GlStateManager.pushAttrib();
  GlStateManager.enableCull();
  GlStateManager.translate(width / 2,height / 2,180.0f);
  GlStateManager.scale(2.0f,2.0f,2.0f);
  GlStateManager.scale(-1.0f,1.0f,1.0f);
  GlStateManager.rotate((float)rotateY,1.0f,0.0f,0.0f);
  GlStateManager.rotate(180.0f,0.0f,0.0f,-1.0f);
  GlStateManager.rotate(rotateX == 0.0d ? RenderTickCounter.renderTicks * 45.0f / 128.0f : (float)rotateX,0.0f,1.0f,0.0f);
  GlStateManager.translate(-8.0f,-8.0f,-8.0f);
  float shift=(GuiMachineData.machineSize - 1) * -4.0f;
  GlStateManager.translate(shift,shift,shift);
  GlStateManager.scale(8.0f,8.0f,8.0f);
  GlStateManager.callList(glListId);
  GlStateManager.resetColor();
  if (ConfigurationHandler.MachineSettings.renderTileEntitiesInGUI) {
    this.renderTileEntities(TileEntityRendererDispatcher.instance,new ArrayList<>(GuiMachineData.toRender));
  }
  if (ConfigurationHandler.MachineSettings.renderLivingEntitiesInGUI) {
    this.renderEntities();
    GlStateManager.enableBlend();
  }
  GlStateManager.popAttrib();
  GlStateManager.popMatrix();
  GlStateManager.disableBlend();
}"
34194,"@Override public ActionResult<ItemStack> onItemRightClick(ItemStack itemStack,World world,EntityPlayer player,EnumHand hand){
  if (hand == EnumHand.OFF_HAND) {
    return new ActionResult(EnumActionResult.FAIL,itemStack);
  }
  PSDFluidStorage tank=(PSDFluidStorage)itemStack.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,null);
  if (tank.getFluidAmount() <= 3500) {
    RayTraceResult raytraceresult=this.rayTrace(world,player,true);
    if (raytraceresult != null && raytraceresult.typeOfHit == RayTraceResult.Type.BLOCK) {
      BlockPos tracepos=raytraceresult.getBlockPos();
      IBlockState state=world.getBlockState(tracepos);
      boolean allowed=world.isBlockModifiable(player,tracepos) && player.canPlayerEdit(tracepos.offset(raytraceresult.sideHit),raytraceresult.sideHit,itemStack);
      if (allowed && state.getBlock() == Blockss.miniaturizationFluidBlock && state.getValue(BlockMiniaturizationFluid.LEVEL).intValue() == 0) {
        world.setBlockState(tracepos,Blocks.AIR.getDefaultState(),11);
        player.playSound(SoundEvents.ITEM_BUCKET_FILL,1.0F,1.0F);
        tank.fill(new FluidStack(Fluidss.miniaturizationFluid,1000),true);
        return new ActionResult(EnumActionResult.SUCCESS,itemStack);
      }
    }
  }
  if (world.provider.getDimension() != ConfigurationHandler.Settings.dimensionId) {
    player.openGui(CompactMachines2.instance,GuiIds.PSD_WELCOME.ordinal(),world,(int)player.posX,(int)player.posY,(int)player.posZ);
    return new ActionResult(EnumActionResult.SUCCESS,itemStack);
  }
  if (world.isRemote && world.provider.getDimension() == ConfigurationHandler.Settings.dimensionId && player instanceof EntityPlayerMP) {
    EntityPlayerMP serverPlayer=(EntityPlayerMP)player;
    if (player.isSneaking()) {
      int coords=StructureTools.getCoordsForPos(player.getPosition());
      Vec3d pos=player.getPositionVector();
      WorldSavedDataMachines.INSTANCE.addSpawnPoint(coords,pos.xCoord,pos.yCoord,pos.zCoord);
      TextComponentTranslation tc=new TextComponentTranslation(""String_Node_Str"");
      tc.getStyle().setColor(TextFormatting.GREEN);
      player.addChatComponentMessage(tc);
      return new ActionResult(EnumActionResult.SUCCESS,itemStack);
    }
    TeleportationTools.teleportPlayerOutOfMachine(serverPlayer);
    return new ActionResult(EnumActionResult.SUCCESS,itemStack);
  }
  return new ActionResult(EnumActionResult.FAIL,itemStack);
}","@Override public ActionResult<ItemStack> onItemRightClick(ItemStack itemStack,World world,EntityPlayer player,EnumHand hand){
  if (hand == EnumHand.OFF_HAND) {
    return new ActionResult(EnumActionResult.FAIL,itemStack);
  }
  PSDFluidStorage tank=(PSDFluidStorage)itemStack.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,null);
  if (tank.getFluidAmount() <= 3500) {
    RayTraceResult raytraceresult=this.rayTrace(world,player,true);
    if (raytraceresult != null && raytraceresult.typeOfHit == RayTraceResult.Type.BLOCK) {
      BlockPos tracepos=raytraceresult.getBlockPos();
      IBlockState state=world.getBlockState(tracepos);
      boolean allowed=world.isBlockModifiable(player,tracepos) && player.canPlayerEdit(tracepos.offset(raytraceresult.sideHit),raytraceresult.sideHit,itemStack);
      if (allowed && state.getBlock() == Blockss.miniaturizationFluidBlock && state.getValue(BlockMiniaturizationFluid.LEVEL).intValue() == 0) {
        world.setBlockState(tracepos,Blocks.AIR.getDefaultState(),11);
        player.playSound(SoundEvents.ITEM_BUCKET_FILL,1.0F,1.0F);
        tank.fill(new FluidStack(Fluidss.miniaturizationFluid,1000),true);
        return new ActionResult(EnumActionResult.SUCCESS,itemStack);
      }
    }
  }
  if (world.provider.getDimension() != ConfigurationHandler.Settings.dimensionId) {
    player.openGui(CompactMachines2.instance,GuiIds.PSD_WELCOME.ordinal(),world,(int)player.posX,(int)player.posY,(int)player.posZ);
    return new ActionResult(EnumActionResult.SUCCESS,itemStack);
  }
  if (!world.isRemote && world.provider.getDimension() == ConfigurationHandler.Settings.dimensionId && player instanceof EntityPlayerMP) {
    EntityPlayerMP serverPlayer=(EntityPlayerMP)player;
    if (player.isSneaking()) {
      int coords=StructureTools.getCoordsForPos(player.getPosition());
      Vec3d pos=player.getPositionVector();
      WorldSavedDataMachines.INSTANCE.addSpawnPoint(coords,pos.xCoord,pos.yCoord,pos.zCoord);
      TextComponentTranslation tc=new TextComponentTranslation(""String_Node_Str"");
      tc.getStyle().setColor(TextFormatting.GREEN);
      player.addChatComponentMessage(tc);
      return new ActionResult(EnumActionResult.SUCCESS,itemStack);
    }
    TeleportationTools.teleportPlayerOutOfMachine(serverPlayer);
    return new ActionResult(EnumActionResult.SUCCESS,itemStack);
  }
  return new ActionResult(EnumActionResult.FAIL,itemStack);
}"
34195,"@Override public void onEntityCollidedWithBlock(World world,BlockPos pos,IBlockState state,Entity entity){
  super.onEntityCollidedWithBlock(world,pos,state,entity);
  if (!(entity instanceof EntityLivingBase)) {
    if (entity instanceof EntityItem) {
      if (((EntityItem)entity).getEntityItem().getItem() == Items.REDSTONE) {
        if (!world.isRemote) {
          CraftingTools.tryCrafting(world,pos);
          entity.setDead();
        }
 else {
          Vec3d entityPosition=entity.getPositionVector();
          world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL,entityPosition.xCoord,entityPosition.yCoord + 0.05f,entityPosition.zCoord,0.0D,0.0D,0.0D,new int[0]);
          world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL,entityPosition.xCoord + 0.05f,entityPosition.yCoord,entityPosition.zCoord,0.0D,0.0D,0.0D,new int[0]);
          world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL,entityPosition.xCoord,entityPosition.yCoord - 0.05f,entityPosition.zCoord + 0.05f,0.0D,0.0D,0.0D,new int[0]);
          world.playSound(entityPosition.xCoord,entityPosition.yCoord,entityPosition.zCoord,SoundEvents.BLOCK_LAVA_POP,SoundCategory.BLOCKS,0.2F,1.0F,false);
        }
      }
    }
    return;
  }
  int duration=ConfigurationHandler.PotionSettings.onBlockContactDuration;
  int amplifier=ConfigurationHandler.PotionSettings.onBlockContactAmplifier;
  if (duration > 0) {
    EntityLivingBase living=(EntityLivingBase)entity;
    PotionEffect active=living.getActivePotionEffect(Potionss.miniaturizationPotion);
    PotionEffect effect=new PotionEffect(Potionss.miniaturizationPotion,duration,amplifier,false,false);
    if (active != null) {
      active.combine(effect);
    }
 else {
      living.addPotionEffect(effect);
    }
  }
}","@Override public void onEntityCollidedWithBlock(World world,BlockPos pos,IBlockState state,Entity entity){
  super.onEntityCollidedWithBlock(world,pos,state,entity);
  if (!(entity instanceof EntityLivingBase)) {
    if (entity instanceof EntityItem) {
      if (((EntityItem)entity).getEntityItem().getItem() == Items.REDSTONE) {
        if (!world.isRemote) {
          CraftingTools.tryCrafting(world,pos);
          entity.setDead();
        }
 else {
          Vec3d entityPosition=entity.getPositionVector();
          world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL,entityPosition.xCoord,entityPosition.yCoord + 0.05f,entityPosition.zCoord,0.0D,0.0D,0.0D,new int[0]);
          world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL,entityPosition.xCoord + 0.05f,entityPosition.yCoord,entityPosition.zCoord,0.0D,0.0D,0.0D,new int[0]);
          world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL,entityPosition.xCoord,entityPosition.yCoord - 0.05f,entityPosition.zCoord + 0.05f,0.0D,0.0D,0.0D,new int[0]);
          world.playSound(entityPosition.xCoord,entityPosition.yCoord,entityPosition.zCoord,SoundEvents.BLOCK_LAVA_POP,SoundCategory.BLOCKS,0.2F,1.0F,false);
        }
      }
    }
    return;
  }
  if (world.isRemote) {
    return;
  }
  int duration=ConfigurationHandler.PotionSettings.onBlockContactDuration;
  int amplifier=ConfigurationHandler.PotionSettings.onBlockContactAmplifier;
  if (duration > 0) {
    EntityLivingBase living=(EntityLivingBase)entity;
    PotionEffect active=living.getActivePotionEffect(Potionss.miniaturizationPotion);
    PotionEffect effect=new PotionEffect(Potionss.miniaturizationPotion,duration,amplifier,false,false);
    if (active != null) {
      active.combine(effect);
    }
 else {
      living.addPotionEffect(effect);
    }
  }
}"
34196,"public ItemMiniFluidDrop(){
  super(1,0.1F,false);
  this.setCreativeTab(CreativeTabCM2.CM2_TAB);
}","public ItemMiniFluidDrop(){
  super(1,0.1F,false);
  this.setAlwaysEdible();
  this.setCreativeTab(CreativeTabCM2.CM2_TAB);
}"
34197,"@Override public ActionResult<ItemStack> onItemRightClick(ItemStack itemStack,World world,EntityPlayer player,EnumHand hand){
  if (world.isRemote || !(player instanceof EntityPlayerMP)) {
    return super.onItemRightClick(itemStack,world,player,hand);
  }
  RayTraceResult trace=player.rayTrace(4.5d,0.0f);
  if (trace == null || trace.getBlockPos() == null) {
    return super.onItemRightClick(itemStack,world,player,hand);
  }
  TileEntity te=world.getTileEntity(trace.getBlockPos());
  if (te != null && te.hasCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,trace.sideHit)) {
    IFluidHandler fluidHandler=world.getTileEntity(trace.getBlockPos()).getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,trace.sideHit);
    if (fluidHandler.fill(new FluidStack(Fluidss.miniaturizationFluid,125),false) == 125) {
      fluidHandler.fill(new FluidStack(Fluidss.miniaturizationFluid,125),true);
      itemStack.stackSize--;
      return new ActionResult(EnumActionResult.SUCCESS,itemStack);
    }
  }
  return super.onItemRightClick(itemStack,world,player,hand);
}","@Override public ActionResult<ItemStack> onItemRightClick(ItemStack itemStack,World world,EntityPlayer player,EnumHand hand){
  if (world.isRemote || !(player instanceof EntityPlayerMP)) {
    return super.onItemRightClick(itemStack,world,player,hand);
  }
  Vec3d eyeVec=new Vec3d(player.posX,player.posY + (double)player.getEyeHeight(),player.posZ);
  Vec3d lookVec=player.getLook(0.0f);
  Vec3d maxVec=eyeVec.addVector(lookVec.xCoord * 4.5d,lookVec.yCoord * 4.5d,lookVec.zCoord * 4.5d);
  RayTraceResult trace=world.rayTraceBlocks(eyeVec,maxVec,false,false,true);
  if (trace == null || trace.getBlockPos() == null) {
    return super.onItemRightClick(itemStack,world,player,hand);
  }
  TileEntity te=world.getTileEntity(trace.getBlockPos());
  if (te != null && te.hasCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,trace.sideHit)) {
    IFluidHandler fluidHandler=world.getTileEntity(trace.getBlockPos()).getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,trace.sideHit);
    if (fluidHandler.fill(new FluidStack(Fluidss.miniaturizationFluid,125),false) == 125) {
      fluidHandler.fill(new FluidStack(Fluidss.miniaturizationFluid,125),true);
      itemStack.stackSize--;
      return new ActionResult(EnumActionResult.SUCCESS,itemStack);
    }
  }
  return super.onItemRightClick(itemStack,world,player,hand);
}"
34198,"@Override protected void onFoodEaten(ItemStack stack,World worldIn,EntityPlayer player){
  super.onFoodEaten(stack,worldIn,player);
  int duration=ConfigurationHandler.PotionSettings.onEatDuration;
  int amplifier=ConfigurationHandler.PotionSettings.onEatAmplifier;
  if (duration > 0) {
    PotionEffect active=player.getActivePotionEffect(Potionss.miniaturizationPotion);
    PotionEffect effect=new PotionEffect(Potionss.miniaturizationPotion,duration,amplifier,false,false);
    if (active != null) {
      active.combine(effect);
    }
 else {
      player.addPotionEffect(effect);
    }
  }
}","@Override protected void onFoodEaten(ItemStack stack,World worldIn,EntityPlayer player){
  super.onFoodEaten(stack,worldIn,player);
  if (worldIn.isRemote) {
    return;
  }
  int duration=ConfigurationHandler.PotionSettings.onEatDuration;
  int amplifier=ConfigurationHandler.PotionSettings.onEatAmplifier;
  if (duration > 0) {
    PotionEffect active=player.getActivePotionEffect(Potionss.miniaturizationPotion);
    PotionEffect effect=new PotionEffect(Potionss.miniaturizationPotion,duration,amplifier,false,false);
    if (active != null) {
      active.combine(effect);
    }
 else {
      player.addPotionEffect(effect);
    }
  }
}"
34199,"@Override public void updateTick(World world,BlockPos pos,IBlockState state,Random rand){
  BlockPos adjacent[]={pos.add(1,0,0),pos.add(-1,0,0),pos.add(0,0,1),pos.add(0,0,-1),pos.add(1,0,1),pos.add(1,0,-1),pos.add(-1,0,-1),pos.add(-1,0,1)};
  if (isSourceBlock(world,pos)) {
    for (    BlockPos adjPos : adjacent) {
      flowIntoBlock(world,adjPos,4);
    }
  }
 else {
    boolean hasAdjacentSourceBlock=false;
    for (    BlockPos adjPos : adjacent) {
      if (this.isSourceBlock(world,adjPos)) {
        hasAdjacentSourceBlock=true;
        break;
      }
    }
    if (!hasAdjacentSourceBlock && world.getBlockState(pos.up()).getBlock() != this) {
      int quantaRemaining=quantaPerBlock - state.getValue(LEVEL);
      if (quantaRemaining > 0) {
        world.setBlockState(pos,this.getBlockState().getBaseState().withProperty(LEVEL,state.getValue(LEVEL) + 1));
      }
 else       if (quantaRemaining <= 1) {
        world.setBlockToAir(pos);
      }
    }
  }
  if (canDisplace(world,pos.down())) {
    flowIntoBlock(world,pos.down(),1);
    return;
  }
}","@Override public void updateTick(World world,BlockPos pos,IBlockState state,Random rand){
  BlockPos adjacent[]={pos.add(1,0,0),pos.add(-1,0,0),pos.add(0,0,1),pos.add(0,0,-1),pos.add(1,0,1),pos.add(1,0,-1),pos.add(-1,0,-1),pos.add(-1,0,1)};
  if (isSourceBlock(world,pos)) {
    for (    BlockPos adjPos : adjacent) {
      flowIntoBlock(world,adjPos,1);
    }
  }
 else {
    boolean hasAdjacentSourceBlock=false;
    for (    BlockPos adjPos : adjacent) {
      if (this.isSourceBlock(world,adjPos)) {
        hasAdjacentSourceBlock=true;
        break;
      }
    }
    if (!hasAdjacentSourceBlock && world.getBlockState(pos.up()).getBlock() != this) {
      int quantaRemaining=quantaPerBlock - state.getValue(LEVEL);
      if (quantaRemaining > 0) {
        world.setBlockState(pos,this.getBlockState().getBaseState().withProperty(LEVEL,state.getValue(LEVEL) + 1));
        world.notifyNeighborsOfStateChange(pos.down(),this);
      }
 else       if (quantaRemaining <= 0) {
        world.setBlockToAir(pos);
      }
    }
  }
  if (canDisplace(world,pos.down())) {
    flowIntoBlock(world,pos.down(),1);
    return;
  }
}"
34200,"public BlockMiniaturizationFluid(){
  super(Fluidss.miniaturizationFluid,Material.WATER);
  this.setUnlocalizedName(""String_Node_Str"");
  this.quantaPerBlock=4;
  this.quantaPerBlockFloat=4F;
}","public BlockMiniaturizationFluid(){
  super(Fluidss.miniaturizationFluid,Material.WATER);
  this.setUnlocalizedName(""String_Node_Str"");
  this.setQuantaPerBlock(4);
  this.setTickRate(5);
}"
34201,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int faceHit,float par7,float par8,float par9){
  if (player.isSneaking()) {
    return false;
  }
 else {
    if (!world.isRemote && player instanceof EntityPlayerMP) {
      if (!(world.getTileEntity(x,y,z) instanceof TileEntityMachine)) {
        return false;
      }
      TileEntityMachine tileEntityMachine=(TileEntityMachine)world.getTileEntity(x,y,z);
      ItemStack playerStack=player.getCurrentEquippedItem();
      NBTTagCompound stackNBT=null;
      NBTTagCompound cmNBT=null;
      if (playerStack != null) {
        if (playerStack.hasTagCompound()) {
          stackNBT=playerStack.getTagCompound();
          if (stackNBT.hasKey(""String_Node_Str"")) {
            cmNBT=stackNBT.getCompoundTag(""String_Node_Str"");
          }
        }
        if (playerStack.getItem() instanceof ItemPersonalShrinkingDevice || ((cmNBT != null && cmNBT.hasKey(""String_Node_Str"")) && cmNBT.getBoolean(""String_Node_Str""))) {
          CompactMachines.instance.machineHandler.teleportPlayerToMachineWorld((EntityPlayerMP)player,tileEntityMachine);
        }
 else         if (FluidContainerRegistry.isEmptyContainer(playerStack)) {
          FluidUtils.emptyTankIntoContainer(tileEntityMachine,player,tileEntityMachine.getFluid(faceHit),ForgeDirection.getOrientation(faceHit));
        }
 else         if (FluidContainerRegistry.isFilledContainer(playerStack)) {
          FluidUtils.fillTankWithContainer(tileEntityMachine,player,ForgeDirection.getOrientation(faceHit));
        }
 else         if (tileEntityMachine.isUpgraded == false && playerStack.getItem() == Reference.upgradeItem) {
          tileEntityMachine.isUpgraded=true;
          tileEntityMachine.markDirty();
          world.markBlockForUpdate(x,y,z);
          playerStack.stackSize--;
        }
 else         if (playerStack.getItem() == ModItems.quantumentangler) {
          if (!ConfigurationHandler.allowEntanglement) {
            player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            return true;
          }
          if (stackNBT != null && stackNBT.hasKey(""String_Node_Str"") && stackNBT.hasKey(""String_Node_Str"")) {
            if (tileEntityMachine.coords != -1) {
              player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            }
 else             if (tileEntityMachine.isUpgraded == false) {
              player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            }
 else {
              int size=stackNBT.getInteger(""String_Node_Str"");
              if (size != tileEntityMachine.meta) {
                player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
              }
 else {
                int coords=stackNBT.getInteger(""String_Node_Str"");
                tileEntityMachine.coords=coords;
                if (stackNBT.hasKey(""String_Node_Str"")) {
                  tileEntityMachine.setCustomName(stackNBT.getString(""String_Node_Str""));
                }
                tileEntityMachine.readInterfacesFromNBT(stackNBT);
                tileEntityMachine.markDirty();
                playerStack.stackSize--;
              }
            }
          }
 else           if (tileEntityMachine.isUpgraded && tileEntityMachine.coords != -1) {
            NBTTagCompound nbt=new NBTTagCompound();
            nbt.setInteger(""String_Node_Str"",tileEntityMachine.coords);
            nbt.setInteger(""String_Node_Str"",tileEntityMachine.meta);
            tileEntityMachine.addInterfacesToNBT(nbt);
            nbt.setString(""String_Node_Str"",tileEntityMachine.getCustomName());
            playerStack.setTagCompound(nbt);
          }
 else {
            if (tileEntityMachine.coords == -1) {
              player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            }
 else             if (!tileEntityMachine.isUpgraded) {
              player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            }
          }
        }
 else {
          player.openGui(CompactMachines.instance,GuiId.MACHINE.ordinal(),world,x,y,z);
        }
      }
 else {
        player.openGui(CompactMachines.instance,GuiId.MACHINE.ordinal(),world,x,y,z);
      }
    }
    return true;
  }
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int faceHit,float par7,float par8,float par9){
  if (player.isSneaking()) {
    return false;
  }
 else {
    if (!world.isRemote && player instanceof EntityPlayerMP) {
      if (!(world.getTileEntity(x,y,z) instanceof TileEntityMachine)) {
        return false;
      }
      TileEntityMachine tileEntityMachine=(TileEntityMachine)world.getTileEntity(x,y,z);
      ItemStack playerStack=player.getCurrentEquippedItem();
      NBTTagCompound stackNBT=null;
      NBTTagCompound cmNBT=null;
      if (playerStack != null) {
        if (playerStack.hasTagCompound()) {
          stackNBT=playerStack.getTagCompound();
          if (stackNBT.hasKey(""String_Node_Str"")) {
            cmNBT=stackNBT.getCompoundTag(""String_Node_Str"");
          }
        }
        if (playerStack.getItem() instanceof ItemPersonalShrinkingDevice || ((cmNBT != null && cmNBT.hasKey(""String_Node_Str"")) && cmNBT.getBoolean(""String_Node_Str""))) {
          CompactMachines.instance.machineHandler.teleportPlayerToMachineWorld((EntityPlayerMP)player,tileEntityMachine);
        }
 else         if (FluidContainerRegistry.isEmptyContainer(playerStack)) {
          FluidUtils.emptyTankIntoContainer(tileEntityMachine,player,tileEntityMachine.getFluid(faceHit),ForgeDirection.getOrientation(faceHit));
        }
 else         if (FluidContainerRegistry.isFilledContainer(playerStack)) {
          FluidUtils.fillTankWithContainer(tileEntityMachine,player,ForgeDirection.getOrientation(faceHit));
        }
 else         if (tileEntityMachine.isUpgraded == false && playerStack.getItem() == Reference.upgradeItem) {
          tileEntityMachine.isUpgraded=true;
          tileEntityMachine.markDirty();
          world.markBlockForUpdate(x,y,z);
          playerStack.stackSize--;
        }
 else         if (playerStack.getItem() == ModItems.quantumentangler) {
          if (!ConfigurationHandler.allowEntanglement) {
            player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            return true;
          }
          if (stackNBT != null && stackNBT.hasKey(""String_Node_Str"") && stackNBT.hasKey(""String_Node_Str"")) {
            if (tileEntityMachine.coords != -1) {
              player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            }
 else             if (tileEntityMachine.isUpgraded == false) {
              player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            }
 else {
              int size=stackNBT.getInteger(""String_Node_Str"");
              if (size != tileEntityMachine.meta) {
                player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
              }
 else {
                int coords=stackNBT.getInteger(""String_Node_Str"");
                tileEntityMachine.coords=coords;
                if (stackNBT.hasKey(""String_Node_Str"")) {
                  tileEntityMachine.setCustomName(stackNBT.getString(""String_Node_Str""));
                }
                tileEntityMachine.readInterfacesFromNBT(stackNBT);
                tileEntityMachine.markDirty();
                WorldUtils.updateNeighborAEGrids(world,x,y,z);
                playerStack.stackSize--;
              }
            }
          }
 else           if (tileEntityMachine.isUpgraded && tileEntityMachine.coords != -1) {
            NBTTagCompound nbt=new NBTTagCompound();
            nbt.setInteger(""String_Node_Str"",tileEntityMachine.coords);
            nbt.setInteger(""String_Node_Str"",tileEntityMachine.meta);
            tileEntityMachine.addInterfacesToNBT(nbt);
            nbt.setString(""String_Node_Str"",tileEntityMachine.getCustomName());
            playerStack.setTagCompound(nbt);
          }
 else {
            if (tileEntityMachine.coords == -1) {
              player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            }
 else             if (!tileEntityMachine.isUpgraded) {
              player.addChatMessage(new ChatComponentTranslation(""String_Node_Str""));
            }
          }
        }
 else {
          player.openGui(CompactMachines.instance,GuiId.MACHINE.ordinal(),world,x,y,z);
        }
      }
 else {
        player.openGui(CompactMachines.instance,GuiId.MACHINE.ordinal(),world,x,y,z);
      }
    }
    return true;
  }
}"
34202,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase player,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,player,stack);
  WorldUtils.updateNeighborAEGrids(world,x,y,z);
  if (stack.stackTagCompound == null) {
    return;
  }
  if (!(world.getTileEntity(x,y,z) instanceof TileEntityMachine)) {
    return;
  }
  TileEntityMachine tileEntityMachine=(TileEntityMachine)world.getTileEntity(x,y,z);
  if (tileEntityMachine.coords != -1) {
    return;
  }
  if (stack.stackTagCompound.hasKey(""String_Node_Str"")) {
    int coords=stack.stackTagCompound.getInteger(""String_Node_Str"");
    if (coords != -1) {
      tileEntityMachine.coords=coords;
      tileEntityMachine.isUpgraded=true;
    }
  }
  if (stack.hasDisplayName()) {
    tileEntityMachine.setCustomName(stack.getDisplayName());
  }
  tileEntityMachine.markDirty();
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase player,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,player,stack);
  if (stack.stackTagCompound == null) {
    return;
  }
  if (!(world.getTileEntity(x,y,z) instanceof TileEntityMachine)) {
    return;
  }
  TileEntityMachine tileEntityMachine=(TileEntityMachine)world.getTileEntity(x,y,z);
  if (tileEntityMachine.coords != -1) {
    return;
  }
  if (stack.stackTagCompound.hasKey(""String_Node_Str"")) {
    int coords=stack.stackTagCompound.getInteger(""String_Node_Str"");
    if (coords != -1) {
      tileEntityMachine.coords=coords;
      tileEntityMachine.isUpgraded=true;
    }
  }
  if (stack.hasDisplayName()) {
    tileEntityMachine.setCustomName(stack.getDisplayName());
  }
  tileEntityMachine.markDirty();
}"
34203,"public IGridNode getMachineNode(CMGridBlock gridBlock){
  if (machineNode == null) {
    machineNode=AEApi.instance().createGridNode(gridBlock);
    machineNode.updateState();
  }
  connectNodes();
  return machineNode;
}","public IGridNode getMachineNode(CMGridBlock gridBlock){
  if (machineNode == null) {
    machineNode=AEApi.instance().createGridNode(gridBlock);
    machineNode.updateState();
    WorldUtils.updateNeighborAEGrids(gridBlock.getLocation().getWorld(),gridBlock.getLocation().x,gridBlock.getLocation().y,gridBlock.getLocation().z);
  }
  connectNodes();
  return machineNode;
}"
34204,"public boolean isWorldAccessible(){
  return isWorldAccessable();
}","@Override public boolean isWorldAccessible(){
  return isWorldAccessable();
}"
34205,"@Override public boolean isWorldAccessable(){
  return false;
}","public boolean isWorldAccessable(){
  return false;
}"
34206,"@Override public void updateEntity(){
  super.updateEntity();
  if (Reference.PR_AVAILABLE) {
    updateIncomingSignals();
  }
  if (Reference.OC_AVAILABLE && !worldObj.isRemote) {
    Node node=storageOC.getNode();
    if (node != null && node.network() == null) {
      li.cil.oc.api.Network.joinOrCreateNetwork(this);
    }
  }
  if (!worldObj.isRemote) {
    ForgeDirection dir=ForgeDirection.getOrientation(side).getOpposite();
    TileEntity tileEntityInside=worldObj.getTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (tileEntityInside != null) {
      hopStorage(storage,tileEntityInside);
      hopStorage(storageLiquid,tileEntityInside);
      if (Reference.MEK_AVAILABLE) {
        hopStorage(storageGas,tileEntityInside);
      }
      hopStorage(storageFlux,tileEntityInside);
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (Reference.PR_AVAILABLE) {
    updateIncomingSignals();
  }
  if (Reference.OC_AVAILABLE && !worldObj.isRemote) {
    Node node=storageOC.getNode();
    if (node != null && node.network() == null) {
      li.cil.oc.api.Network.joinOrCreateNetwork(this);
    }
  }
  if (Reference.AE_AVAILABLE && !worldObj.isRemote) {
    getGridNode(ForgeDirection.UNKNOWN);
  }
  if (!worldObj.isRemote) {
    ForgeDirection dir=ForgeDirection.getOrientation(side).getOpposite();
    TileEntity tileEntityInside=worldObj.getTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (tileEntityInside != null) {
      hopStorage(storage,tileEntityInside);
      hopStorage(storageLiquid,tileEntityInside);
      if (Reference.MEK_AVAILABLE) {
        hopStorage(storageGas,tileEntityInside);
      }
      hopStorage(storageFlux,tileEntityInside);
    }
  }
}"
34207,"@Optional.Method(modid=""String_Node_Str"") @Override public IGridNode getGridNode(ForgeDirection dir){
  if (!worldObj.isRemote) {
    IGridNode gridNode=gridNodes.get(dir.ordinal());
    if (gridNode == null) {
      gridNode=getStorageAE(dir.ordinal()).getMachineNode(getGridBlock(dir));
      gridNodes.put(dir.ordinal(),gridNode);
    }
    return gridNode;
  }
  return null;
}","@Optional.Method(modid=""String_Node_Str"") @Override public IGridNode getGridNode(ForgeDirection dir){
  if (coords == -1) {
    return null;
  }
  if (!worldObj.isRemote) {
    IGridNode gridNode=gridNodes.get(dir.ordinal());
    if (gridNode == null) {
      gridNode=getStorageAE(dir.ordinal()).getMachineNode(getGridBlock(dir));
      gridNodes.put(dir.ordinal(),gridNode);
    }
    return gridNode;
  }
  return null;
}"
34208,"@Override public void invalidate(){
  super.invalidate();
  if (Reference.OC_AVAILABLE && !worldObj.isRemote) {
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
      if (getStorageOC(dir.ordinal()) == null) {
        continue;
      }
      OpenComputersSharedStorage storage=getStorageOC(dir.ordinal());
      Node node=storage.getNode();
      if (node != null) {
        node.remove();
      }
    }
  }
}","@Override public void invalidate(){
  super.invalidate();
  if (worldObj.isRemote) {
    return;
  }
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (Reference.OC_AVAILABLE) {
      OpenComputersSharedStorage storage=getStorageOC(dir.ordinal());
      if (storage == null) {
        continue;
      }
      Node node=storage.getNode();
      if (node != null) {
        node.remove();
      }
    }
    if (Reference.AE_AVAILABLE) {
      AESharedStorage storage=getStorageAE(dir.ordinal());
      if (storage.machineNode != null) {
        storage.machineNode.destroy();
        storage.machineNode=null;
      }
      storage.isConnected=false;
    }
  }
}"
34209,"public void initialize(){
  if (worldObj.isRemote) {
    return;
  }
  if (ConfigurationHandler.chunkLoadingMode != 0 && !CompactMachines.instance.machineHandler.isCoordChunkLoaded(this)) {
    CompactMachines.instance.machineHandler.forceChunkLoad(this.coords);
  }
  if (Reference.OC_AVAILABLE) {
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
      if (getStorageOC(dir.ordinal()) == null) {
        continue;
      }
      OpenComputersSharedStorage storage=getStorageOC(dir.ordinal());
      Node node=storage.getNode();
      if (node != null && node.network() == null) {
        li.cil.oc.api.Network.joinOrCreateNetwork(this);
      }
    }
  }
}","public void initialize(){
  if (worldObj.isRemote) {
    return;
  }
  if (ConfigurationHandler.chunkLoadingMode != 0 && !CompactMachines.instance.machineHandler.isCoordChunkLoaded(this)) {
    CompactMachines.instance.machineHandler.forceChunkLoad(this.coords);
  }
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (Reference.OC_AVAILABLE) {
      OpenComputersSharedStorage storage=getStorageOC(dir.ordinal());
      if (storage == null) {
        continue;
      }
      Node node=storage.getNode();
      if (node != null && node.network() == null) {
        li.cil.oc.api.Network.joinOrCreateNetwork(this);
      }
    }
    if (Reference.AE_AVAILABLE) {
      getGridNode(dir);
    }
  }
}"
34210,"@Override public Collection<String> getAncestorIris(String iri) throws OntologyHelperException {
  Collection<String> parents;
  checkTerm(iri);
  if (!nonDefinitiveTerms.containsKey(iri)) {
    parents=super.getParentIris(iri);
  }
 else {
    parents=findRelatedNonDefinitiveTerms(iri,TermLinkType.ANCESTORS);
  }
  return parents;
}","@Override public Collection<String> getAncestorIris(String iri) throws OntologyHelperException {
  Collection<String> ancestors;
  checkTerm(iri);
  if (!nonDefinitiveTerms.containsKey(iri)) {
    ancestors=super.getAncestorIris(iri);
  }
 else {
    ancestors=findRelatedNonDefinitiveTerms(iri,TermLinkType.ANCESTORS);
  }
  return ancestors;
}"
34211,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void mergeAndConvert(ResponseBuilder rb){
  IndexSchema schema=rb.req.getCore().getLatestSchema();
  ReturnFields rf=rb.rsp.getReturnFields();
  boolean wantsShards=rb.req.getParams().getBool(getName() + ""String_Node_Str"" + SHARD_INFO_PARAM,false);
  SolrDocumentList docs=(SolrDocumentList)rb.rsp.getValues().get(""String_Node_Str"");
  for (  SolrDocument parent : docs) {
    parent.remove(DuplicateDocumentList.MERGE_PARENT_FIELD);
    Set shardList=wantsShards ? new HashSet() : null;
    Float score=null;
    for (    SolrDocument doc : parent.getChildDocuments()) {
      String shard=(String)doc.getFieldValue(""String_Node_Str"");
      NamedList nl=null;
      if (shardList != null) {
        nl=new NamedList();
        nl.add(""String_Node_Str"",shard);
        shardList.add(nl);
      }
      for (      String fieldName : doc.getFieldNames()) {
        Object value=doc.getFieldValue(fieldName);
        for (        CopyField cf : schema.getCopyFieldsList(fieldName)) {
          SchemaField field=cf.getDestination();
          addConvertedFieldValue(shard,parent,value,field);
        }
        SchemaField field=schema.getFieldOrNull(fieldName);
        if (field == null) {
        }
 else         if (field.getName().equals(""String_Node_Str"")) {
          score=Math.max(score != null ? score : 0.0f,(Float)value);
          if (nl != null) {
            nl.add(""String_Node_Str"",score);
          }
        }
 else {
          addConvertedFieldValue(shard,parent,value,field);
        }
      }
    }
    if (shardList != null) {
      parent.setField(""String_Node_Str"",shardList);
    }
 else {
      parent.removeFields(""String_Node_Str"");
    }
    if (score != null) {
      parent.setField(""String_Node_Str"",score);
    }
 else {
      parent.removeFields(""String_Node_Str"");
    }
    for (    SchemaField field : schema.getFields().values()) {
      Object value=parent.getFieldValue(field.getName());
      if (value == null) {
        value=field.getDefaultValue();
        if (value != null) {
          parent.setField(field.getName(),value);
        }
      }
      if (value == null && field.isRequired() && rf.wantsField(field.getName())) {
        throw new MergeException.MissingRequiredField(field);
      }
      if (!field.stored()) {
        parent.removeFields(field.getName());
      }
    }
    while (parent.getChildDocumentCount() > 0) {
      parent.getChildDocuments().remove(0);
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void mergeAndConvert(ResponseBuilder rb){
  IndexSchema schema=rb.req.getCore().getLatestSchema();
  ReturnFields rf=rb.rsp.getReturnFields();
  SolrDocumentList docs=(SolrDocumentList)rb.rsp.getValues().get(""String_Node_Str"");
  for (  SolrDocument parent : docs) {
    parent.remove(DuplicateDocumentList.MERGE_PARENT_FIELD);
    Set shardList=new HashSet();
    Float score=null;
    for (    SolrDocument doc : parent.getChildDocuments()) {
      String shard=(String)doc.getFieldValue(""String_Node_Str"");
      NamedList nl=null;
      if (shard != null) {
        nl=new NamedList();
        nl.add(""String_Node_Str"",shard);
        shardList.add(nl);
      }
      for (      String fieldName : doc.getFieldNames()) {
        Object value=doc.getFieldValue(fieldName);
        for (        CopyField cf : schema.getCopyFieldsList(fieldName)) {
          SchemaField field=cf.getDestination();
          addConvertedFieldValue(shard,parent,value,field);
        }
        SchemaField field=schema.getFieldOrNull(fieldName);
        if (fieldName.equals(""String_Node_Str"")) {
          score=Math.max(score != null ? score : 0.0f,(Float)value);
          if (nl != null) {
            nl.add(""String_Node_Str"",score);
          }
        }
 else         if (field != null) {
          addConvertedFieldValue(shard,parent,value,field);
        }
      }
    }
    if (shardList.size() > 0) {
      parent.setField(""String_Node_Str"",shardList);
    }
 else {
      parent.removeFields(""String_Node_Str"");
    }
    if (score != null) {
      parent.setField(""String_Node_Str"",score);
    }
 else {
      parent.removeFields(""String_Node_Str"");
    }
    for (    SchemaField field : schema.getFields().values()) {
      Object value=parent.getFieldValue(field.getName());
      if (value == null) {
        value=field.getDefaultValue();
        if (value != null) {
          parent.setField(field.getName(),value);
        }
      }
      if (value == null && field.isRequired() && rf.wantsField(field.getName())) {
        throw new MergeException.MissingRequiredField(field);
      }
      if (!field.stored()) {
        parent.removeFields(field.getName());
      }
    }
    while (parent.getChildDocumentCount() > 0) {
      parent.getChildDocuments().remove(0);
    }
  }
}"
34212,"@Override public void modifyRequest(ResponseBuilder rb,SearchComponent who,ShardRequest sreq){
  super.modifyRequest(rb,who,sreq);
  if (!doMerge(rb)) {
    return;
  }
  if (wantsShards(rb)) {
    sreq.params.add(CommonParams.FL,""String_Node_Str"");
  }
  ReturnFields rf=rb.rsp.getReturnFields();
  if (rf.wantsAllFields()) {
    return;
  }
  IndexSchema schema=rb.req.getCore().getLatestSchema();
  for (  SchemaField field : schema.getFields().values()) {
    if (!rf.wantsField(field.getName())) {
      continue;
    }
    for (    String source : schema.getCopySources(field.getName())) {
      if (rf.wantsField(source)) {
        continue;
      }
      sreq.params.add(CommonParams.FL,source);
    }
  }
}","@Override public void modifyRequest(ResponseBuilder rb,SearchComponent who,ShardRequest sreq){
  super.modifyRequest(rb,who,sreq);
  if (!doMerge(rb)) {
    return;
  }
  ReturnFields rf=rb.rsp.getReturnFields();
  if (rf.wantsAllFields()) {
    return;
  }
  IndexSchema schema=rb.req.getCore().getLatestSchema();
  for (  SchemaField field : schema.getFields().values()) {
    if (!rf.wantsField(field.getName())) {
      continue;
    }
    for (    String source : schema.getCopySources(field.getName())) {
      if (rf.wantsField(source)) {
        continue;
      }
      sreq.params.add(CommonParams.FL,source);
    }
  }
}"
34213,"/** 
 * When [shard] is in the field list, it should be returned (and correct!).
 */
@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testWantsShard() throws Exception {
  try (SolrCore core=h.getCoreContainer().getCore(""String_Node_Str"")){
    ModifiableSolrParams params=new ModifiableSolrParams();
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    SolrDocumentList docs=queryDocs(core,""String_Node_Str"",params);
    assertEquals(3,docs.size());
    NamedList[] nls=new NamedList[3];
    for (int i=0; i < nls.length; ++i) {
      nls[i]=new NamedList();
      nls[i].add(""String_Node_Str"",""String_Node_Str"" + (i + 1) + ""String_Node_Str"");
    }
    SolrDocument doc0=docs.get(0);
    assertEquals(new HashSet<NamedList>(Arrays.asList(nls[0],nls[1],nls[2])),doc0.getFieldValue(""String_Node_Str""));
    SolrDocument doc1=docs.get(1);
    assertEquals(new HashSet<NamedList>(Arrays.asList(nls[1],nls[2])),doc1.getFieldValue(""String_Node_Str""));
    SolrDocument doc2=docs.get(2);
    assertEquals(new HashSet<NamedList>(Arrays.asList(nls[0],nls[1],nls[2])),doc2.getFieldValue(""String_Node_Str""));
  }
 }","/** 
 * When [shard] is in the field list, it should be returned (and correct!) (but no score).
 */
@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testWantsShard() throws Exception {
  try (SolrCore core=h.getCoreContainer().getCore(""String_Node_Str"")){
    ModifiableSolrParams params=new ModifiableSolrParams();
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    SolrDocumentList docs=queryDocs(core,""String_Node_Str"",params);
    assertEquals(3,docs.size());
    NamedList[] nls=new NamedList[3];
    for (int i=0; i < nls.length; ++i) {
      nls[i]=new NamedList();
      nls[i].add(""String_Node_Str"",""String_Node_Str"" + (i + 1) + ""String_Node_Str"");
    }
    SolrDocument doc0=docs.get(0);
    assertEquals(new HashSet<NamedList>(Arrays.asList(nls[0],nls[1],nls[2])),doc0.getFieldValue(""String_Node_Str""));
    assertNull(doc0.getFieldValue(""String_Node_Str""));
    SolrDocument doc1=docs.get(1);
    assertEquals(new HashSet<NamedList>(Arrays.asList(nls[1],nls[2])),doc1.getFieldValue(""String_Node_Str""));
    assertNull(doc1.getFieldValue(""String_Node_Str""));
    SolrDocument doc2=docs.get(2);
    assertEquals(new HashSet<NamedList>(Arrays.asList(nls[0],nls[1],nls[2])),doc2.getFieldValue(""String_Node_Str""));
    assertNull(doc2.getFieldValue(""String_Node_Str""));
  }
 }"
34214,"/** 
 * When shardInfo is not requested, the [shard] field should not be returned.
 */
@Test public void testNotWantsShard() throws Exception {
  try (SolrCore core=h.getCoreContainer().getCore(""String_Node_Str"")){
    ModifiableSolrParams params=new ModifiableSolrParams();
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    SolrDocumentList docs=queryDocs(core,""String_Node_Str"",params);
    assertEquals(3,docs.size());
    for (    SolrDocument doc : docs) {
      assertNull(doc.getFieldValue(""String_Node_Str""));
    }
  }
 }","/** 
 * When [shard] is not in the field list, the [shard] field should not be returned.
 */
@Test public void testNotWantsShard() throws Exception {
  try (SolrCore core=h.getCoreContainer().getCore(""String_Node_Str"")){
    ModifiableSolrParams params=new ModifiableSolrParams();
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    params.add(""String_Node_Str"",""String_Node_Str"");
    SolrDocumentList docs=queryDocs(core,""String_Node_Str"",params);
    assertEquals(3,docs.size());
    for (    SolrDocument doc : docs) {
      assertNull(doc.getFieldValue(""String_Node_Str""));
      assertNull(doc.getFieldValue(""String_Node_Str""));
    }
  }
 }"
34215,"public FastaJobResults getResults() throws IOException {
  if (results == null) {
    String id=fasta.getResultTypes(jobId)[0].getIdentifier();
    byte[] result=fasta.getResult(jobId,id,null);
    InputStream in=new ByteArrayInputStream(result);
    results=parseResults(new BufferedReader(new InputStreamReader(in)));
    results.chooseShownAlignments();
  }
  return results;
}","public FastaJobResults getResults() throws IOException {
  if (results == null) {
    byte[] result=getRawResults();
    InputStream in=new ByteArrayInputStream(result);
    results=parseResults(new BufferedReader(new InputStreamReader(in)));
    results.chooseShownAlignments();
  }
  return results;
}"
34216,"private static String getEntryEntity(Alignment a){
  if (a.getChain().length() == 1) {
    int chainId=(int)a.getChain().charAt(0) - (int)'A' + 1;
    return a.getPdbId().toLowerCase() + ""String_Node_Str"" + chainId;
  }
 else {
    return a.getPdbId().toLowerCase() + ""String_Node_Str"" + a.getChain().toLowerCase();
  }
}","public static String getEntryEntity(Alignment a){
  if (a.getChain().length() == 1) {
    int chainId=(int)a.getChain().charAt(0) - (int)'A' + 1;
    return a.getPdbId().toLowerCase() + ""String_Node_Str"" + chainId;
  }
 else {
    return a.getPdbId().toLowerCase() + ""String_Node_Str"" + a.getChain().toLowerCase();
  }
}"
34217,"/** 
 * Add a NamedList (with given name) with properties from the given object. Returns the new NamedList.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public NamedList addNamedList(NamedList target,String name,Object object){
  NamedList<Object> list=new NamedList<>();
  target.add(name,list);
  for (  Method method : object.getClass().getMethods()) {
    if (method.getParameterCount() > 0) {
      continue;
    }
    String fieldName=NameConverter.getFieldName(method.getName());
    if (fieldName == null) {
      continue;
    }
    if (fieldNames == null || fieldNames.contains(fieldName)) {
      try {
        list.add(fieldName,method.invoke(object));
      }
 catch (      IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
        System.out.println(""String_Node_Str"" + fieldName + ""String_Node_Str""+ method);
        throw new RuntimeException(e);
      }
    }
  }
  return list;
}","/** 
 * Add a NamedList (with given name) with properties from the given object. Returns the new NamedList.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public NamedList addNamedList(NamedList target,String name,Object object){
  NamedList<Object> list=new NamedList<>();
  target.add(name,list);
  for (  Method method : object.getClass().getMethods()) {
    if (method.getParameterCount() > 0) {
      continue;
    }
    String fieldName=NameConverter.getFieldName(method.getName());
    if (fieldName == null) {
      continue;
    }
    if (fieldNames == null || fieldNames.contains(fieldName)) {
      try {
        list.add(fieldName,method.invoke(object));
      }
 catch (      IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
        throw new RuntimeException(fieldName + ""String_Node_Str"" + e.getCause().getMessage(),e.getCause());
      }
    }
  }
  return list;
}"
34218,"@Override @SuppressWarnings(""String_Node_Str"") public Query parse() throws SyntaxError {
  Method method=Method.valueOf(localParams.get(METHOD,Method.termsFilter.name()));
  JoinSpec<T> js=JoinSpec.parse(localParams.get(QueryParsing.V));
  Iterator<T> it=js.iterator(this);
  if (joinField == null) {
    throw new Exception(""String_Node_Str"");
  }
  FieldType ft=req.getSchema().getFieldTypeNoEx(joinField);
  Iterator<BytesRef> bytesRefs=new TransformIterator(it,transformer(ft));
  return new SolrConstantScoreQuery(method.makeFilter(joinField,bytesRefs));
}","@Override @SuppressWarnings(""String_Node_Str"") public Query parse() throws SyntaxError {
  Method method=Method.valueOf(localParams.get(METHOD,Method.termsFilter.name()));
  JoinSpec<T> js=JoinSpec.parse(localParams.get(QueryParsing.V));
  Iterator<T> it=js.iterator(this);
  if (joinField == null) {
    throw new Exception(""String_Node_Str"");
  }
  FieldType ft=req.getSchema().getFieldTypeNoEx(joinField);
  Iterator<BytesRef> bytesRefs=new TransformIterator(it,transformer(ft));
  if (!bytesRefs.hasNext()) {
    return new BooleanQuery.Builder().build();
  }
  return new SolrConstantScoreQuery(method.makeFilter(joinField,bytesRefs));
}"
34219,"@Override public Collection<TreeFacetField> prune(Collection<TreeFacetField> unprunedTrees){
  Collection<TreeFacetField> prunedTrees=new TreeSet<>(Comparator.comparingLong(TreeFacetField::getCount).reversed());
  Collection<TreeFacetField> incoming=new LinkedList<>(unprunedTrees);
  long total=getNodeTotal(incoming);
  int itCount=1;
  while (prunedTrees.size() < datapoints && !incoming.isEmpty()) {
    int minCount=Math.round((total / datapoints) / itCount);
    if (minCount == 0 && Math.round((total / datapoints) / (itCount - 1)) > 1) {
      break;
    }
    prunedTrees.addAll(getNodesWithCount(incoming,minCount));
    itCount++;
  }
  if (prunedTrees.size() > datapoints) {
    prunedTrees=prunedTrees.stream().limit(datapoints).collect(Collectors.toList());
  }
  incoming=new LinkedList<>(unprunedTrees);
  trimIncomingNodes(incoming,prunedTrees,0);
  TreeFacetField otherNode=buildOtherNode(incoming);
  prunedTrees.add(otherNode);
  return prunedTrees;
}","@Override public Collection<TreeFacetField> prune(Collection<TreeFacetField> unprunedTrees){
  Collection<TreeFacetField> prunedTrees=new TreeSet<>(Comparator.comparingLong(TreeFacetField::getCount).thenComparing(TreeFacetField::getValue).reversed());
  Collection<TreeFacetField> incoming=unprunedTrees.stream().map(TreeFacetField::clone).collect(Collectors.toList());
  long total=getNodeTotal(incoming);
  int itCount=1;
  int prevCount=Integer.MAX_VALUE;
  while (prunedTrees.size() < datapoints && !incoming.isEmpty()) {
    int minCount=getThreshold(itCount,prevCount,total);
    if (minCount <= 0) {
      break;
    }
    prunedTrees.addAll(getNodesWithCount(incoming,minCount));
    itCount++;
    prevCount=minCount;
  }
  if (prunedTrees.size() > datapoints) {
    prunedTrees=prunedTrees.stream().limit(datapoints).collect(Collectors.toList());
  }
  incoming=new LinkedList<>(unprunedTrees);
  trimIncomingNodes(incoming,prunedTrees,0);
  TreeFacetField otherNode=buildOtherNode(incoming);
  if (otherNode.getTotal() > 0) {
    prunedTrees.add(otherNode);
  }
  return prunedTrees;
}"
34220,"@Override public void apply(Project project){
  String passphrase=getProjectProperty(CREDENTIALS_PASSPHRASE_PROPERTY,DEFAULT_PASSPHRASE,project);
  String credentialsFileName=deriveFileNameFromPassphrase(passphrase);
  CredentialsEncryptor credentialsEncryptor=CredentialsEncryptor.withPassphrase(CredentialsPlugin.DEFAULT_PASSPHRASE.toCharArray());
  File gradleUserHomeDir=project.getGradle().getGradleUserHomeDir();
  File credentialsFile=new File(gradleUserHomeDir,credentialsFileName);
  CredentialsPersistenceManager credentialsPersistenceManager=new CredentialsPersistenceManager(credentialsFile);
  CredentialsContainer credentialsContainer=new CredentialsContainer(credentialsEncryptor,credentialsPersistenceManager.readCredentials());
  project.getExtensions().getExtraProperties().set(CREDENTIALS_CONTAINER_PROPERTY,credentialsContainer);
  LOGGER.debug(""String_Node_Str"" + CREDENTIALS_CONTAINER_PROPERTY + ""String_Node_Str"");
  AddCredentialsTask addCredentials=project.getTasks().create(ADD_CREDENTIALS_TASK_NAME,AddCredentialsTask.class);
  addCredentials.setDescription(""String_Node_Str"");
  addCredentials.setGroup(""String_Node_Str"");
  addCredentials.setCredentialsEncryptor(credentialsEncryptor);
  addCredentials.setCredentialsPersistenceManager(credentialsPersistenceManager);
  LOGGER.debug(String.format(""String_Node_Str"",addCredentials.getName()));
  RemoveCredentialsTask removeCredentials=project.getTasks().create(REMOVE_CREDENTIALS_TASK_NAME,RemoveCredentialsTask.class);
  removeCredentials.setDescription(""String_Node_Str"");
  removeCredentials.setGroup(""String_Node_Str"");
  removeCredentials.setCredentialsPersistenceManager(credentialsPersistenceManager);
  LOGGER.debug(String.format(""String_Node_Str"",removeCredentials.getName()));
}","@Override public void apply(Project project){
  String passphrase=getProjectProperty(CREDENTIALS_PASSPHRASE_PROPERTY,DEFAULT_PASSPHRASE,project);
  String credentialsFileName=deriveFileNameFromPassphrase(passphrase);
  CredentialsEncryptor credentialsEncryptor=CredentialsEncryptor.withPassphrase(passphrase.toCharArray());
  File gradleUserHomeDir=project.getGradle().getGradleUserHomeDir();
  File credentialsFile=new File(gradleUserHomeDir,credentialsFileName);
  CredentialsPersistenceManager credentialsPersistenceManager=new CredentialsPersistenceManager(credentialsFile);
  CredentialsContainer credentialsContainer=new CredentialsContainer(credentialsEncryptor,credentialsPersistenceManager.readCredentials());
  project.getExtensions().getExtraProperties().set(CREDENTIALS_CONTAINER_PROPERTY,credentialsContainer);
  LOGGER.debug(""String_Node_Str"" + CREDENTIALS_CONTAINER_PROPERTY + ""String_Node_Str"");
  AddCredentialsTask addCredentials=project.getTasks().create(ADD_CREDENTIALS_TASK_NAME,AddCredentialsTask.class);
  addCredentials.setDescription(""String_Node_Str"");
  addCredentials.setGroup(""String_Node_Str"");
  addCredentials.setCredentialsEncryptor(credentialsEncryptor);
  addCredentials.setCredentialsPersistenceManager(credentialsPersistenceManager);
  LOGGER.debug(String.format(""String_Node_Str"",addCredentials.getName()));
  RemoveCredentialsTask removeCredentials=project.getTasks().create(REMOVE_CREDENTIALS_TASK_NAME,RemoveCredentialsTask.class);
  removeCredentials.setDescription(""String_Node_Str"");
  removeCredentials.setGroup(""String_Node_Str"");
  removeCredentials.setCredentialsPersistenceManager(credentialsPersistenceManager);
  LOGGER.debug(String.format(""String_Node_Str"",removeCredentials.getName()));
}"
34221,"public JExpression hasSetValue(){
  if (constantField != null) {
    return JExpr.TRUE;
  }
 else   if (isSetter != null) {
    return targetObject.invoke(isSetter);
  }
 else {
    return fieldAccessor.hasSetValue();
  }
}","public JExpression hasSetValue(){
  if (constantField != null) {
    return JExpr.TRUE;
  }
 else   if (isSetter != null) {
    return targetObject.invoke(isSetter);
  }
 else   if (type.isPrimitive()) {
    return JExpr.TRUE;
  }
 else {
    return fieldAccessor.hasSetValue();
  }
}"
34222,"public boolean isAlwaysSet(){
  if (constantField != null) {
    return true;
  }
 else {
    return JExpr.TRUE == fieldAccessor.hasSetValue();
  }
}","public boolean isAlwaysSet(){
  if (constantField != null) {
    return true;
  }
 else   if (type.isPrimitive()) {
    return true;
  }
 else {
    return JExpr.TRUE == fieldAccessor.hasSetValue();
  }
}"
34223,"private void createClassInfos(final CMModel<T,C> model){
  Collection<? extends ClassInfo<T,C>> beans=typeInfoSet.beans().values();
  for (  ClassInfo<T,C> classInfo : beans) {
    @SuppressWarnings(""String_Node_Str"") final CI ci=(CI)classInfo;
    classInfos.put(ci,createClassInfo(ci));
  }
  for (  Map.Entry<CI,MClassInfo<T,C>> entry : classInfos.entrySet()) {
    populateClassInfo(entry.getKey(),entry.getValue());
  }
  for (  ClassInfo<T,C> classInfo : beans) {
    model.addClassInfo(getTypeInfo((CI)classInfo));
  }
}","private void createClassInfos(final CMModel<T,C> model){
  Collection<? extends ClassInfo<T,C>> beans=typeInfoSet.beans().values();
  for (  ClassInfo<T,C> classInfo : beans) {
    @SuppressWarnings(""String_Node_Str"") final CI ci=(CI)classInfo;
    getTypeInfo(ci);
  }
  for (  Map.Entry<CI,MClassInfo<T,C>> entry : classInfos.entrySet()) {
    populateClassInfo(entry.getKey(),entry.getValue());
  }
  for (  ClassInfo<T,C> classInfo : beans) {
    model.addClassInfo(getTypeInfo((CI)classInfo));
  }
}"
34224,"private void createBuiltinLeafInfos(final CMModel<T,C> model){
  Collection<? extends BuiltinLeafInfo<T,C>> builtins=typeInfoSet.builtins().values();
  for (  BuiltinLeafInfo<T,C> builtinLeafInfo : builtins) {
    @SuppressWarnings(""String_Node_Str"") final BLI bli=(BLI)builtinLeafInfo;
    builtinLeafInfos.put(bli,createBuiltinLeafInfo(bli));
  }
  for (  BuiltinLeafInfo<T,C> builtinLeafInfo : builtins) {
    model.addBuiltinLeafInfo(getTypeInfo((BLI)builtinLeafInfo));
  }
}","private void createBuiltinLeafInfos(final CMModel<T,C> model){
  Collection<? extends BuiltinLeafInfo<T,C>> builtins=typeInfoSet.builtins().values();
  for (  BuiltinLeafInfo<T,C> builtinLeafInfo : builtins) {
    @SuppressWarnings(""String_Node_Str"") final BLI bli=(BLI)builtinLeafInfo;
    getTypeInfo(bli);
  }
  for (  BuiltinLeafInfo<T,C> builtinLeafInfo : builtins) {
    model.addBuiltinLeafInfo(getTypeInfo((BLI)builtinLeafInfo));
  }
}"
34225,"private void createEnumLeafInfos(final CMModel<T,C> model){
  Collection<? extends EnumLeafInfo<T,C>> enums=typeInfoSet.enums().values();
  for (  EnumLeafInfo<T,C> enumLeafInfo : enums) {
    @SuppressWarnings(""String_Node_Str"") final ELI eli=(ELI)enumLeafInfo;
    enumLeafInfos.put(eli,createEnumLeafInfo(eli));
  }
  for (  Map.Entry<ELI,MEnumLeafInfo<T,C>> entry : enumLeafInfos.entrySet()) {
    populateEnumLeafInfo(entry.getKey(),entry.getValue());
  }
  for (  EnumLeafInfo<T,C> enumLeafInfo : enums) {
    model.addEnumLeafInfo(getTypeInfo((ELI)enumLeafInfo));
  }
}","private void createEnumLeafInfos(final CMModel<T,C> model){
  Collection<? extends EnumLeafInfo<T,C>> enums=typeInfoSet.enums().values();
  for (  EnumLeafInfo<T,C> enumLeafInfo : enums) {
    @SuppressWarnings(""String_Node_Str"") final ELI eli=(ELI)enumLeafInfo;
    getTypeInfo(eli);
  }
  for (  Map.Entry<ELI,MEnumLeafInfo<T,C>> entry : enumLeafInfos.entrySet()) {
    populateEnumLeafInfo(entry.getKey(),entry.getValue());
  }
  for (  EnumLeafInfo<T,C> enumLeafInfo : enums) {
    model.addEnumLeafInfo(getTypeInfo((ELI)enumLeafInfo));
  }
}"
34226,"private void createElementInfos(final CMModel<T,C> model){
  Iterable<? extends ElementInfo<T,C>> elements=typeInfoSet.getAllElements();
  for (  ElementInfo<T,C> element : elements) {
    final EI ei=(EI)element;
    elementInfos.put(ei,createElementInfo(ei));
  }
  for (  ElementInfo<T,C> element : elements) {
    model.addElementInfo(getElementInfo((EI)element));
  }
}","private void createElementInfos(final CMModel<T,C> model){
  Iterable<? extends ElementInfo<T,C>> elements=typeInfoSet.getAllElements();
  for (  ElementInfo<T,C> element : elements) {
    final EI ei=(EI)element;
    getElementInfo(ei);
  }
  for (  ElementInfo<T,C> element : elements) {
    model.addElementInfo(getElementInfo((EI)element));
  }
}"
34227,"protected MElementInfo<T,C> getElementInfo(EI info){
  return elementInfos.get(info);
}","protected MElementInfo<T,C> getElementInfo(EI info){
  MElementInfo<T,C> elementInfo=elementInfos.get(info);
  if (elementInfo == null) {
    elementInfo=createElementInfo(info);
    elementInfos.put(info,elementInfo);
  }
  return elementInfo;
}"
34228,"/** 
 * Update task progress info. This method is meant to be used inside of   {@link TaskExecutor}for a running task to update its execution progress(0-100).
 * @param RunId run id of the task
 * @param taskId the task
 * @param current progress to be set
 */
public void updateTaskProgress(RunId runId,TaskId taskId,int progress);","/** 
 * Update task progress info. This method is meant to be used inside of   {@link TaskExecutor}for a running task to update its execution progress(0-100).
 * @param runId run id of the task
 * @param taskId the task
 * @param progress progress to be set
 */
public void updateTaskProgress(RunId runId,TaskId taskId,int progress);"
34229,"public TaskInfo(TaskId taskId,String instanceName,LocalDateTime startDateUtc,short progress,TaskExecutionResult result){
  this.taskId=Preconditions.checkNotNull(taskId,""String_Node_Str"");
  this.instanceName=Optional.ofNullable(instanceName);
  this.startDateUtc=Optional.ofNullable(startDateUtc);
  this.result=Optional.ofNullable(result);
  this.progress=Optional.ofNullable(progress);
}","public TaskInfo(TaskId taskId,String instanceName,LocalDateTime startDateUtc,short progress,TaskExecutionResult result){
  this.taskId=Preconditions.checkNotNull(taskId,""String_Node_Str"");
  this.instanceName=Optional.ofNullable(instanceName);
  this.startDateUtc=Optional.ofNullable(startDateUtc);
  this.result=Optional.ofNullable(result);
  this.progress=Optional.of(progress);
}"
34230,"@Override public List<TaskInfo> getTaskInfo(RunId runId){
  List<TaskInfo> taskInfos=Lists.newArrayList();
  String startedTasksParentPath=ZooKeeperConstants.getStartedTasksParentPath();
  String completedTaskParentPath=ZooKeeperConstants.getCompletedTaskParentPath();
  try {
    String runPath=ZooKeeperConstants.getRunPath(runId);
    byte[] runBytes=curator.getData().forPath(runPath);
    RunnableTask runnableTask=serializer.deserialize(runBytes,RunnableTask.class);
    Set<TaskId> notStartedTasks=runnableTask.getTasks().values().stream().filter(ExecutableTask::isExecutable).map(ExecutableTask::getTaskId).collect(Collectors.toSet());
    Map<TaskId,StartedTask> startedTasks=Maps.newHashMap();
    curator.getChildren().forPath(startedTasksParentPath).stream().forEach(child -> {
      String fullPath=ZKPaths.makePath(startedTasksParentPath,child);
      TaskId taskId=new TaskId(ZooKeeperConstants.getTaskIdFromStartedTasksPath(fullPath));
      try {
        byte[] bytes=curator.getData().forPath(fullPath);
        StartedTask startedTask=serializer.deserialize(bytes,StartedTask.class);
        startedTasks.put(taskId,startedTask);
        notStartedTasks.remove(taskId);
      }
 catch (      KeeperException.NoNodeException ignore) {
      }
catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + fullPath,e);
      }
    }
);
    curator.getChildren().forPath(completedTaskParentPath).stream().forEach(child -> {
      String fullPath=ZKPaths.makePath(completedTaskParentPath,child);
      TaskId taskId=new TaskId(ZooKeeperConstants.getTaskIdFromCompletedTasksPath(fullPath));
      StartedTask startedTask=startedTasks.remove(taskId);
      if (startedTask != null) {
        try {
          byte[] bytes=curator.getData().forPath(fullPath);
          TaskExecutionResult taskExecutionResult=serializer.deserialize(bytes,TaskExecutionResult.class);
          taskInfos.add(new TaskInfo(taskId,startedTask.getInstanceName(),startedTask.getStartDateUtc(),taskExecutionResult));
          notStartedTasks.remove(taskId);
        }
 catch (        KeeperException.NoNodeException ignore) {
        }
catch (        Exception e) {
          throw new RuntimeException(""String_Node_Str"" + fullPath,e);
        }
      }
    }
);
    startedTasks.entrySet().forEach(entry -> {
      StartedTask startedTask=entry.getValue();
      taskInfos.add(new TaskInfo(entry.getKey(),startedTask.getInstanceName(),startedTask.getStartDateUtc(),startedTask.getProgress()));
    }
);
    notStartedTasks.forEach(taskId -> taskInfos.add(new TaskInfo(taskId)));
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  return taskInfos;
}","@Override public List<TaskInfo> getTaskInfo(RunId runId){
  List<TaskInfo> taskInfos=Lists.newArrayList();
  String startedTasksParentPath=ZooKeeperConstants.getStartedTasksParentPath();
  String completedTaskParentPath=ZooKeeperConstants.getCompletedTaskParentPath();
  try {
    String runPath=ZooKeeperConstants.getRunPath(runId);
    byte[] runBytes=curator.getData().forPath(runPath);
    RunnableTask runnableTask=serializer.deserialize(runBytes,RunnableTask.class);
    Set<TaskId> notStartedTasks=runnableTask.getTasks().values().stream().filter(ExecutableTask::isExecutable).map(ExecutableTask::getTaskId).collect(Collectors.toSet());
    Map<TaskId,StartedTask> startedTasks=Maps.newHashMap();
    curator.getChildren().forPath(startedTasksParentPath).stream().forEach(child -> {
      String fullPath=ZKPaths.makePath(startedTasksParentPath,child);
      TaskId taskId=new TaskId(ZooKeeperConstants.getTaskIdFromStartedTasksPath(fullPath));
      try {
        byte[] bytes=curator.getData().forPath(fullPath);
        StartedTask startedTask=serializer.deserialize(bytes,StartedTask.class);
        startedTasks.put(taskId,startedTask);
        notStartedTasks.remove(taskId);
      }
 catch (      KeeperException.NoNodeException ignore) {
      }
catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + fullPath,e);
      }
    }
);
    curator.getChildren().forPath(completedTaskParentPath).stream().forEach(child -> {
      String fullPath=ZKPaths.makePath(completedTaskParentPath,child);
      TaskId taskId=new TaskId(ZooKeeperConstants.getTaskIdFromCompletedTasksPath(fullPath));
      StartedTask startedTask=startedTasks.remove(taskId);
      if (startedTask != null) {
        try {
          byte[] bytes=curator.getData().forPath(fullPath);
          TaskExecutionResult taskExecutionResult=serializer.deserialize(bytes,TaskExecutionResult.class);
          taskInfos.add(new TaskInfo(taskId,startedTask.getInstanceName(),startedTask.getStartDateUtc(),startedTask.getProgress(),taskExecutionResult));
          notStartedTasks.remove(taskId);
        }
 catch (        KeeperException.NoNodeException ignore) {
        }
catch (        Exception e) {
          throw new RuntimeException(""String_Node_Str"" + fullPath,e);
        }
      }
    }
);
    startedTasks.entrySet().forEach(entry -> {
      StartedTask startedTask=entry.getValue();
      taskInfos.add(new TaskInfo(entry.getKey(),startedTask.getInstanceName(),startedTask.getStartDateUtc(),startedTask.getProgress()));
    }
);
    notStartedTasks.forEach(taskId -> taskInfos.add(new TaskInfo(taskId)));
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  return taskInfos;
}"
34231,"public int setProgress(int progress){
  this.progress=progress;
}","public short setProgress(short progress){
  this.progress=progress;
}"
34232,"/** 
 * This method checks an acknowledgment message and, if it is found to be valid,  attempts to disseminate it to the Bitmessage network. 
 * @param p - A Payload object containing the acknowledgment msg to be sent
 * @return - A boolean indicating whether or not the acknowledgment was successfullyprocessed 
 */
private boolean checkAndSendAcknowledgment(Payload p){
  byte[] fullAckMessage=p.getPayload();
  byte[] ackObjectBytes=ArrayCopier.copyOfRange(fullAckMessage,24,fullAckMessage.length);
  new ObjectProcessor().parseObject(ackObjectBytes);
  ServerCommunicator servCom=new ServerCommunicator();
  boolean disseminationSuccessful=servCom.disseminateMsg(ackObjectBytes);
  if (disseminationSuccessful == true) {
    PayloadProvider payProv=PayloadProvider.get(App.getContext());
    payProv.deletePayload(p);
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method checks an acknowledgement message and, if it is found to be valid,  attempts to disseminate it to the Bitmessage network. 
 * @param p - A Payload object containing the acknowledgement msg to be sent
 * @return - A boolean indicating whether or not the acknowledgement was successfullyprocessed 
 */
private boolean checkAndSendAcknowledgment(Payload p){
  byte[] fullAckMessage=p.getPayload();
  byte[] ackObjectBytes=ArrayCopier.copyOfRange(fullAckMessage,24,fullAckMessage.length);
  new ObjectProcessor().parseObject(ackObjectBytes);
  ServerCommunicator servCom=new ServerCommunicator();
  boolean disseminationSuccessful=servCom.disseminateMsg(ackObjectBytes);
  if (disseminationSuccessful == true) {
    PayloadProvider payProv=PayloadProvider.get(App.getContext());
    payProv.deletePayload(p);
    return true;
  }
 else {
    return false;
  }
}"
34233,"/** 
 * This method will look in the application database's ""Payloads"" table for any acknowledgment payloads that 'belong to me', and are thus  acknowledgments that are waiting to be sent for messages that the user of the app has received. 
 * @return - A boolean indicating whether or not all outstanding acknowledgmentswere successfully processed 
 */
public boolean sendAcknowledgments(){
  PayloadProvider payProv=PayloadProvider.get(App.getContext());
  ArrayList<Payload> allAcks=payProv.searchPayloads(PayloadsTable.COLUMN_ACK,String.valueOf(1));
  if (allAcks.size() > 0) {
    ArrayList<Payload> acksToSend=new ArrayList<Payload>();
    for (    Payload p : allAcks) {
      if (p.belongsToMe() == false) {
        acksToSend.add(p);
      }
    }
    Log.i(TAG,""String_Node_Str"" + acksToSend.size());
    int numberOfAcksNotProcessedSuccessfully=0;
    for (    Payload p : acksToSend) {
      boolean ackProcessedSuccessfully=false;
      try {
        ackProcessedSuccessfully=checkAndSendAcknowledgment(p);
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
      }
      if (ackProcessedSuccessfully == false) {
        numberOfAcksNotProcessedSuccessfully=numberOfAcksNotProcessedSuccessfully + 1;
      }
    }
    if (numberOfAcksNotProcessedSuccessfully > 0) {
      return false;
    }
 else {
      return true;
    }
  }
 else {
    return true;
  }
}","/** 
 * This method will look in the application database's ""Payloads"" table for any acknowledgement payloads that 'belong to me', and are thus  acknowledgements that are waiting to be sent for messages that the user of the app has received. 
 * @return - A boolean indicating whether or not all outstanding acknowledgementswere successfully processed 
 */
public boolean sendAcknowledgments(){
  PayloadProvider payProv=PayloadProvider.get(App.getContext());
  ArrayList<Payload> allAcks=payProv.searchPayloads(PayloadsTable.COLUMN_ACK,String.valueOf(1));
  if (allAcks.size() > 0) {
    ArrayList<Payload> acksToSend=new ArrayList<Payload>();
    for (    Payload p : allAcks) {
      if (p.belongsToMe() == false) {
        acksToSend.add(p);
      }
    }
    Log.i(TAG,""String_Node_Str"" + acksToSend.size());
    int numberOfAcksNotProcessedSuccessfully=0;
    for (    Payload p : acksToSend) {
      boolean ackProcessedSuccessfully=false;
      try {
        ackProcessedSuccessfully=checkAndSendAcknowledgment(p);
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
      }
      if (ackProcessedSuccessfully == false) {
        numberOfAcksNotProcessedSuccessfully=numberOfAcksNotProcessedSuccessfully + 1;
      }
    }
    if (numberOfAcksNotProcessedSuccessfully > 0) {
      return false;
    }
 else {
      return true;
    }
  }
 else {
    return true;
  }
}"
34234,"/** 
 * Constructs the payload necessary to sign or verify the signature of a PubKey
 * @param pubkey - The PubKey object that we wish to sign or verify the signature of
 * @return A byte[] containing the constructed payload. 
 */
public byte[] createPubkeySignaturePayload(Pubkey pubkey){
  byte[] payload=null;
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    if (pubkey.getObjectVersion() < 4) {
      outputStream.write(ByteUtils.intToBytes((int)pubkey.getExpirationTime()));
    }
 else {
      outputStream.write(ByteUtils.longToBytes(pubkey.getExpirationTime()));
    }
    outputStream.write(ByteUtils.intToBytes(pubkey.getObjectType()));
    outputStream.write(VarintEncoder.encode(pubkey.getObjectVersion()));
    outputStream.write(VarintEncoder.encode(pubkey.getStreamNumber()));
    if (pubkey.getObjectVersion() >= 4) {
      String addressString=new AddressGenerator().recreateAddressString(pubkey.getObjectVersion(),pubkey.getStreamNumber(),pubkey.getPublicSigningKey(),pubkey.getPublicEncryptionKey());
      outputStream.write(new AddressProcessor().calculateAddressTag(addressString));
    }
    outputStream.write(ByteUtils.intToBytes(pubkey.getBehaviourBitfield()));
    byte[] publicSigningKey=pubkey.getPublicSigningKey();
    if (publicSigningKey[0] == (byte)4 && publicSigningKey.length == 65) {
      publicSigningKey=ArrayCopier.copyOfRange(publicSigningKey,1,publicSigningKey.length);
    }
    outputStream.write(publicSigningKey);
    byte[] publicEncryptionKey=pubkey.getPublicEncryptionKey();
    if (publicEncryptionKey[0] == (byte)4 && publicEncryptionKey.length == 65) {
      publicEncryptionKey=ArrayCopier.copyOfRange(publicEncryptionKey,1,publicEncryptionKey.length);
    }
    outputStream.write(publicEncryptionKey);
    outputStream.write(VarintEncoder.encode(pubkey.getNonceTrialsPerByte()));
    outputStream.write(VarintEncoder.encode(pubkey.getExtraBytes()));
    payload=outputStream.toByteArray();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return payload;
}","/** 
 * Constructs the payload necessary to sign or verify the signature of a PubKey
 * @param pubkey - The PubKey object that we wish to sign or verify the signature of
 * @return A byte[] containing the constructed payload. 
 */
public byte[] createPubkeySignaturePayload(Pubkey pubkey){
  byte[] payload=null;
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    outputStream.write(ByteUtils.longToBytes(pubkey.getExpirationTime()));
    outputStream.write(ByteUtils.intToBytes(pubkey.getObjectType()));
    outputStream.write(VarintEncoder.encode(pubkey.getObjectVersion()));
    outputStream.write(VarintEncoder.encode(pubkey.getStreamNumber()));
    if (pubkey.getObjectVersion() >= 4) {
      String addressString=new AddressGenerator().recreateAddressString(pubkey.getObjectVersion(),pubkey.getStreamNumber(),pubkey.getPublicSigningKey(),pubkey.getPublicEncryptionKey());
      outputStream.write(new AddressProcessor().calculateAddressTag(addressString));
    }
    outputStream.write(ByteUtils.intToBytes(pubkey.getBehaviourBitfield()));
    byte[] publicSigningKey=pubkey.getPublicSigningKey();
    if (publicSigningKey[0] == (byte)4 && publicSigningKey.length == 65) {
      publicSigningKey=ArrayCopier.copyOfRange(publicSigningKey,1,publicSigningKey.length);
    }
    outputStream.write(publicSigningKey);
    byte[] publicEncryptionKey=pubkey.getPublicEncryptionKey();
    if (publicEncryptionKey[0] == (byte)4 && publicEncryptionKey.length == 65) {
      publicEncryptionKey=ArrayCopier.copyOfRange(publicEncryptionKey,1,publicEncryptionKey.length);
    }
    outputStream.write(publicEncryptionKey);
    outputStream.write(VarintEncoder.encode(pubkey.getNonceTrialsPerByte()));
    outputStream.write(VarintEncoder.encode(pubkey.getExtraBytes()));
    payload=outputStream.toByteArray();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return payload;
}"
34235,"/** 
 * Attempts to send any acknowledgments that are scheduled to be sent by me for messages that I have received
 * @return - A boolean indicating whether or not all outstanding acknowledgmentswere successfully processed 
 */
public boolean sendAcknowledgments(){
  return new AckProcessor().sendAcknowledgments();
}","/** 
 * Attempts to send any acknowledgements that are scheduled to be sent by me for messages that I have received
 * @return - A boolean indicating whether or not all outstanding acknowledgementswere successfully processed 
 */
public boolean sendAcknowledgments(){
  return new AckProcessor().sendAcknowledgments();
}"
34236,"/** 
 * Runs periodic background processing. <br><br> This method will first check whether there are any QueueRecord objects saved in the database. If there are, it will attempt to complete the task recorded by each of those QueueRecords in turn. After that, it will run the 'check for messages' task. If no QueueRecords are found in the database, it will run the 'check for messages' task. 
 */
private void processTasks(){
  Log.i(TAG,""String_Node_Str"");
  TaskController taskController=new TaskController();
  QueueRecordProvider queueProv=QueueRecordProvider.get(getApplicationContext());
  QueueRecordProcessor queueProc=new QueueRecordProcessor();
  ArrayList<QueueRecord> queueRecords=queueProv.getAllQueueRecords();
  Log.i(TAG,""String_Node_Str"" + queueRecords.size());
  if (queueRecords.size() > 0) {
    Collections.sort(queueRecords);
    for (    QueueRecord q : queueRecords) {
      try {
        Log.i(TAG,""String_Node_Str"" + q.getTask() + ""String_Node_Str""+ q.getAttempts());
        int attempts=q.getAttempts();
        String task=q.getTask();
        if (attempts > MAXIMUM_ATTEMPTS) {
          Log.d(TAG,""String_Node_Str"" + task + ""String_Node_Str""+ attempts+ ""String_Node_Str"");
          if (task.equals(TASK_SEND_MESSAGE)) {
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
            MessageStatusHandler.updateMessageStatus(messageToSend,getApplicationContext().getString(R.string.message_status_sending_failed));
          }
          queueProc.deleteQueueRecord(q);
          continue;
        }
        if (task.equals(TASK_SEND_MESSAGE)) {
          try {
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
            if (checkForEarlierSendMsgQueueRecords(q)) {
              continue;
            }
            long currentTime=System.currentTimeMillis() / 1000;
            if (q.getTriggerTime() > currentTime) {
              Log.i(TAG,""String_Node_Str"" + q.getTask() + ""String_Node_Str""+ ""String_Node_Str""+ TimeUtils.getTimeMessage(q.getTriggerTime() - currentTime));
              continue;
            }
            if (q.getRecordCount() == 0) {
              taskController.sendMessage(q,messageToSend,DO_POW,FIRST_ATTEMPT_TTL,FIRST_ATTEMPT_TTL);
            }
 else {
              currentTime=System.currentTimeMillis() / 1000;
              queueProc.createAndSaveQueueRecord(TASK_SEND_MESSAGE,currentTime + SUBSEQUENT_ATTEMPTS_TTL,q.getRecordCount() + 1,messageToSend,null,null);
              taskController.sendMessage(q,messageToSend,DO_POW,SUBSEQUENT_ATTEMPTS_TTL,SUBSEQUENT_ATTEMPTS_TTL);
            }
          }
 catch (          RuntimeException e) {
            Log.i(TAG,""String_Node_Str"" + TASK_SEND_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
            queueProv.deleteQueueRecord(q);
            continue;
          }
        }
 else         if (task.equals(TASK_PROCESS_OUTGOING_MESSAGE)) {
          Message messageToSend=null;
          try {
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
          }
 catch (          RuntimeException e) {
            Log.i(TAG,""String_Node_Str"" + TASK_PROCESS_OUTGOING_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
            queueProv.deleteQueueRecord(q);
            continue;
          }
          PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
          Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject1Id());
          if (q.getRecordCount() == 0) {
            taskController.processOutgoingMessage(q,messageToSend,toPubkey,DO_POW,FIRST_ATTEMPT_TTL);
          }
 else {
            taskController.processOutgoingMessage(q,messageToSend,toPubkey,DO_POW,SUBSEQUENT_ATTEMPTS_TTL);
          }
        }
 else         if (task.equals(TASK_DISSEMINATE_MESSAGE)) {
          PayloadProvider payProv=PayloadProvider.get(getApplicationContext());
          Payload msgPayload=payProv.searchForSingleRecord(q.getObject1Id());
          boolean msgValid=new ObjectProcessor().validateObject(msgPayload.getPayload());
          if (msgValid == false) {
            Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"");
            payProv.deletePayload(msgPayload);
            queueProv.deleteQueueRecord(q);
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
            PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
            Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject2Id());
            queueProc.createAndSaveQueueRecord(BackgroundService.TASK_PROCESS_OUTGOING_MESSAGE,0,q.getRecordCount(),messageToSend,toPubkey,null);
            continue;
          }
          if (NetworkHelper.checkInternetAvailability() == true) {
            PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
            Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject2Id());
            taskController.disseminateMessage(q,msgPayload,toPubkey,DO_POW);
          }
 else {
            MessageProvider messageProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=messageProv.searchForSingleRecord(q.getObject0Id());
            MessageStatusHandler.updateMessageStatus(messageToSend,getApplicationContext().getString(R.string.message_status_waiting_for_connection));
          }
        }
 else         if (task.equals(TASK_CREATE_IDENTITY)) {
          taskController.createIdentity(q,DO_POW);
        }
 else         if (task.equals(TASK_DISSEMINATE_PUBKEY)) {
          PayloadProvider payProv=PayloadProvider.get(getApplicationContext());
          Payload pubkeyPayload=payProv.searchForSingleRecord(q.getObject0Id());
          boolean pubkeyValid=new ObjectProcessor().validateObject(pubkeyPayload.getPayload());
          if (pubkeyValid) {
            if (NetworkHelper.checkInternetAvailability() == true) {
              taskController.disseminatePubkey(q,pubkeyPayload,DO_POW);
            }
          }
 else {
            Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"");
            queueProv.deleteQueueRecord(q);
            AddressProvider addProv=AddressProvider.get(getApplicationContext());
            Address address=addProv.searchForSingleRecord(pubkeyPayload.getRelatedAddressId());
            queueProc.createAndSaveQueueRecord(TASK_CREATE_IDENTITY,0,q.getRecordCount(),address,null,null);
          }
        }
 else {
          Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + task);
        }
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + e.getMessage());
        queueProv.deleteQueueRecord(q);
      }
    }
    runPeriodicTasks();
  }
 else {
    runPeriodicTasks();
    if (checkIfDatabaseCleaningIsRequired()) {
      Intent intent=new Intent(getBaseContext(),DatabaseCleaningService.class);
      intent.putExtra(DatabaseCleaningService.EXTRA_RUN_DATABASE_CLEANING_ROUTINE,true);
      startService(intent);
    }
  }
}","/** 
 * Runs periodic background processing. <br><br> This method will first check whether there are any QueueRecord objects saved in the database. If there are, it will attempt to complete the task recorded by each of those QueueRecords in turn. After that, it will run the 'check for messages' task. If no QueueRecords are found in the database, it will run the 'check for messages' task. 
 */
private void processTasks(){
  Log.i(TAG,""String_Node_Str"");
  TaskController taskController=new TaskController();
  QueueRecordProvider queueProv=QueueRecordProvider.get(getApplicationContext());
  QueueRecordProcessor queueProc=new QueueRecordProcessor();
  ArrayList<QueueRecord> queueRecords=queueProv.getAllQueueRecords();
  Log.i(TAG,""String_Node_Str"" + queueRecords.size());
  if (queueRecords.size() > 0) {
    Collections.sort(queueRecords);
    for (    QueueRecord q : queueRecords) {
      try {
        Log.i(TAG,""String_Node_Str"" + q.getTask() + ""String_Node_Str""+ q.getAttempts());
        int attempts=q.getAttempts();
        String task=q.getTask();
        if (attempts > MAXIMUM_ATTEMPTS) {
          Log.d(TAG,""String_Node_Str"" + task + ""String_Node_Str""+ attempts+ ""String_Node_Str"");
          if (task.equals(TASK_SEND_MESSAGE)) {
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
            MessageStatusHandler.updateMessageStatus(messageToSend,getApplicationContext().getString(R.string.message_status_sending_failed));
          }
          queueProc.deleteQueueRecord(q);
          continue;
        }
 else         if (task.equals(TASK_SEND_MESSAGE)) {
          try {
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
            if (checkForEarlierSendMsgQueueRecords(q)) {
              continue;
            }
 else {
              if (q.getRecordCount() != 0) {
                q.setRecordCount(0);
                queueProc.updateQueueRecord(q);
              }
            }
            long currentTime=System.currentTimeMillis() / 1000;
            if (q.getTriggerTime() > currentTime) {
              Log.i(TAG,""String_Node_Str"" + q.getTask() + ""String_Node_Str""+ ""String_Node_Str""+ TimeUtils.getTimeMessage(q.getTriggerTime() - currentTime));
              continue;
            }
            if (q.getRecordCount() == 0) {
              taskController.sendMessage(q,messageToSend,DO_POW,FIRST_ATTEMPT_TTL,FIRST_ATTEMPT_TTL);
            }
 else {
              currentTime=System.currentTimeMillis() / 1000;
              queueProc.createAndSaveQueueRecord(TASK_SEND_MESSAGE,currentTime + SUBSEQUENT_ATTEMPTS_TTL,q.getRecordCount() + 1,messageToSend,null,null);
              taskController.sendMessage(q,messageToSend,DO_POW,SUBSEQUENT_ATTEMPTS_TTL,SUBSEQUENT_ATTEMPTS_TTL);
            }
          }
 catch (          RuntimeException e) {
            Log.i(TAG,""String_Node_Str"" + TASK_SEND_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
            queueProv.deleteQueueRecord(q);
            continue;
          }
        }
 else         if (task.equals(TASK_PROCESS_OUTGOING_MESSAGE)) {
          Message messageToSend=null;
          try {
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
          }
 catch (          RuntimeException e) {
            Log.i(TAG,""String_Node_Str"" + TASK_PROCESS_OUTGOING_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
            queueProv.deleteQueueRecord(q);
            continue;
          }
          PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
          Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject1Id());
          if (q.getRecordCount() == 0) {
            taskController.processOutgoingMessage(q,messageToSend,toPubkey,DO_POW,FIRST_ATTEMPT_TTL);
          }
 else {
            taskController.processOutgoingMessage(q,messageToSend,toPubkey,DO_POW,SUBSEQUENT_ATTEMPTS_TTL);
          }
        }
 else         if (task.equals(TASK_DISSEMINATE_MESSAGE)) {
          PayloadProvider payProv=PayloadProvider.get(getApplicationContext());
          Payload msgPayload=payProv.searchForSingleRecord(q.getObject1Id());
          boolean msgValid=new ObjectProcessor().validateObject(msgPayload.getPayload());
          if (msgValid == false) {
            Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"");
            payProv.deletePayload(msgPayload);
            queueProv.deleteQueueRecord(q);
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
            PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
            Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject2Id());
            queueProc.createAndSaveQueueRecord(BackgroundService.TASK_PROCESS_OUTGOING_MESSAGE,0,q.getRecordCount(),messageToSend,toPubkey,null);
            continue;
          }
          if (NetworkHelper.checkInternetAvailability() == true) {
            PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
            Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject2Id());
            taskController.disseminateMessage(q,msgPayload,toPubkey,DO_POW);
          }
 else {
            MessageProvider messageProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=messageProv.searchForSingleRecord(q.getObject0Id());
            MessageStatusHandler.updateMessageStatus(messageToSend,getApplicationContext().getString(R.string.message_status_waiting_for_connection));
          }
        }
 else         if (task.equals(TASK_CREATE_IDENTITY)) {
          taskController.createIdentity(q,DO_POW);
        }
 else         if (task.equals(TASK_DISSEMINATE_PUBKEY)) {
          PayloadProvider payProv=PayloadProvider.get(getApplicationContext());
          Payload pubkeyPayload=payProv.searchForSingleRecord(q.getObject0Id());
          boolean pubkeyValid=new ObjectProcessor().validateObject(pubkeyPayload.getPayload());
          if (pubkeyValid) {
            if (NetworkHelper.checkInternetAvailability() == true) {
              taskController.disseminatePubkey(q,pubkeyPayload,DO_POW);
            }
          }
 else {
            Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"");
            queueProv.deleteQueueRecord(q);
            AddressProvider addProv=AddressProvider.get(getApplicationContext());
            Address address=addProv.searchForSingleRecord(pubkeyPayload.getRelatedAddressId());
            queueProc.createAndSaveQueueRecord(TASK_CREATE_IDENTITY,0,q.getRecordCount(),address,null,null);
          }
        }
 else {
          Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + task);
        }
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + e.getMessage());
        queueProv.deleteQueueRecord(q);
      }
    }
    runPeriodicTasks();
  }
 else {
    runPeriodicTasks();
    if (checkIfDatabaseCleaningIsRequired()) {
      Intent intent=new Intent(getBaseContext(),DatabaseCleaningService.class);
      intent.putExtra(DatabaseCleaningService.EXTRA_RUN_DATABASE_CLEANING_ROUTINE,true);
      startService(intent);
    }
  }
}"
34237,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view_errors);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false)) {
    mCacheWordHandler=new CacheWordHandler(this);
    mCacheWordHandler.connectToService();
  }
  mProcessID=android.os.Process.myPid();
  mErrorListView=(ListView)findViewById(android.R.id.list);
  updateListView();
  new Timer().schedule(new TimerTask(){
    @Override public void run(){
      runOnUiThread(new Runnable(){
        public void run(){
          if (checkForNewLines()) {
            updateListView();
          }
        }
      }
);
    }
  }
,0,UPDATE_FREQUENCY_MILLISECONDS);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view_errors);
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
    if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false)) {
      mCacheWordHandler=new CacheWordHandler(this);
      mCacheWordHandler.connectToService();
    }
    mProcessID=android.os.Process.myPid();
    mErrorListView=(ListView)findViewById(android.R.id.list);
    updateListView();
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
  }
}"
34238,"/** 
 * Returns the an ArrayList<String> containing the errors which should be displayed
 */
private ArrayList<String> getErrors(){
  try {
    Process process=Runtime.getRuntime().exec(""String_Node_Str"");
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    ArrayList<String> logLines=new ArrayList<String>();
    String line=""String_Node_Str"";
    int lines=0;
    while ((bufferedReader.readLine()) != null) {
      lines++;
    }
    process=Runtime.getRuntime().exec(""String_Node_Str"");
    bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    int startPoint=lines - LOGCAT_MAXIMUM_LINES;
    if (lines > LOGCAT_MAXIMUM_LINES) {
      for (int i=0; i < startPoint && bufferedReader.ready(); bufferedReader.readLine()) {
      }
      if (bufferedReader.ready()) {
      }
 else {
        process=Runtime.getRuntime().exec(""String_Node_Str"");
        bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
      }
      while ((line=bufferedReader.readLine()) != null) {
        if (filterErrors(line)) {
          logLines.add(line);
        }
      }
      if (logLines.size() == 0) {
        logLines.add(getResources().getString(R.string.activity_view_errors_placeholder_message));
      }
 else {
        mLastLine=logLines.get(logLines.size() - 1);
        if (logLines.size() > MAXIMUM_ERRORS_TO_DISPLAY) {
          logLines=new ArrayList<String>(logLines.subList(logLines.size() - MAXIMUM_ERRORS_TO_DISPLAY,logLines.size()));
        }
      }
    }
    return logLines;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    ArrayList<String> emptyList=new ArrayList<String>();
    emptyList.add(""String_Node_Str"");
    return emptyList;
  }
}","/** 
 * Returns the an ArrayList<String> containing the errors which should be displayed
 */
private ArrayList<String> getErrors(){
  try {
    Process process=Runtime.getRuntime().exec(""String_Node_Str"");
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    ArrayList<String> errorLines=new ArrayList<String>();
    String line=""String_Node_Str"";
    int lines=0;
    while ((bufferedReader.readLine()) != null) {
      lines++;
    }
    process=Runtime.getRuntime().exec(""String_Node_Str"");
    bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    int startPoint=lines - LOGCAT_MAXIMUM_LINES;
    if (lines > LOGCAT_MAXIMUM_LINES) {
      for (int i=0; i < startPoint && bufferedReader.ready(); bufferedReader.readLine()) {
      }
    }
    while ((line=bufferedReader.readLine()) != null) {
      if (filterErrors(line)) {
        errorLines.add(line);
      }
    }
    if (errorLines.size() == 0) {
      errorLines.add(getResources().getString(R.string.activity_view_errors_placeholder_message));
    }
 else {
      mLastLine=errorLines.get(errorLines.size() - 1);
      if (errorLines.size() > MAXIMUM_ERRORS_TO_DISPLAY) {
        errorLines=new ArrayList<String>(errorLines.subList(errorLines.size() - MAXIMUM_ERRORS_TO_DISPLAY,errorLines.size()));
      }
    }
    return errorLines;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    ArrayList<String> placeholderList=new ArrayList<String>();
    placeholderList.add(getResources().getString(R.string.activity_view_errors_placeholder_message));
    return placeholderList;
  }
}"
34239,"/** 
 * Updates the error log ListView
 */
private void updateListView(){
  mErrors=getErrors();
  Parcelable state=mErrorListView.onSaveInstanceState();
  mErrorListView=new ListView(this);
  mErrorListView=(ListView)findViewById(android.R.id.list);
  mErrorAdapter=new LogAdapter(mErrors);
  mErrorListView.setAdapter(mErrorAdapter);
  mErrorListView.onRestoreInstanceState(state);
  if (mErrorListView.getLastVisiblePosition() == mErrorListView.getAdapter().getCount() - 1 && mErrorListView.getChildAt(mErrorListView.getChildCount() - 1).getBottom() <= mErrorListView.getHeight()) {
    scrollMyListViewToBottom();
  }
}","/** 
 * Updates the error log ListView
 */
private void updateListView(){
  mErrors=getErrors();
  Parcelable state=mErrorListView.onSaveInstanceState();
  mErrorListView=new ListView(this);
  mErrorListView=(ListView)findViewById(android.R.id.list);
  mErrorAdapter=new LogAdapter(mErrors);
  mErrorListView.setAdapter(mErrorAdapter);
  mErrorListView.onRestoreInstanceState(state);
  try {
    if (mErrorListView.getLastVisiblePosition() == mErrorListView.getAdapter().getCount() - 1 && mErrorListView.getChildAt(mErrorListView.getChildCount() - 1).getBottom() <= mErrorListView.getHeight()) {
      scrollMyListViewToBottom();
      ;
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
  }
}"
34240,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view_log);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false)) {
    mCacheWordHandler=new CacheWordHandler(this);
    mCacheWordHandler.connectToService();
  }
  mProcessID=android.os.Process.myPid();
  mLogListView=(ListView)findViewById(android.R.id.list);
  updateListView();
  new Timer().schedule(new TimerTask(){
    @Override public void run(){
      runOnUiThread(new Runnable(){
        public void run(){
          if (checkForNewLines()) {
            updateListView();
          }
        }
      }
);
    }
  }
,0,UPDATE_FREQUENCY_MILLISECONDS);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view_log);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false)) {
    mCacheWordHandler=new CacheWordHandler(this);
    mCacheWordHandler.connectToService();
  }
  mProcessID=android.os.Process.myPid();
  mLogListView=(ListView)findViewById(android.R.id.list);
  updateListView();
}"
34241,"/** 
 * Returns the an ArrayList<String> containing the log items which should be displayed
 */
private ArrayList<String> getLogLines(){
  try {
    Process process=Runtime.getRuntime().exec(""String_Node_Str"");
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    ArrayList<String> logLines=new ArrayList<String>();
    String line=""String_Node_Str"";
    int lines=0;
    while ((bufferedReader.readLine()) != null) {
      lines++;
    }
    process=Runtime.getRuntime().exec(""String_Node_Str"");
    bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    int startPoint=lines - LOGCAT_MAXIMUM_LINES;
    if (lines > LOGCAT_MAXIMUM_LINES) {
      for (int i=0; i < startPoint && bufferedReader.ready(); bufferedReader.readLine()) {
      }
      if (bufferedReader.ready()) {
      }
 else {
        process=Runtime.getRuntime().exec(""String_Node_Str"");
        bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
      }
      while ((line=bufferedReader.readLine()) != null) {
        if (filterLogLine(line)) {
          logLines.add(line);
        }
      }
      if (logLines.size() == 0) {
        logLines.add(getResources().getString(R.string.activity_view_log_placeholder_message));
      }
 else {
        mLastLine=logLines.get(logLines.size() - 1);
        if (logLines.size() > LOG_MAXIMUM_ITEMS) {
          logLines=new ArrayList<String>(logLines.subList(logLines.size() - LOG_MAXIMUM_ITEMS,logLines.size()));
        }
      }
    }
    return logLines;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    ArrayList<String> emptyList=new ArrayList<String>();
    emptyList.add(""String_Node_Str"");
    return emptyList;
  }
}","/** 
 * Returns the an ArrayList<String> containing the log items which should be displayed
 */
private ArrayList<String> getLogLines(){
  try {
    Process process=Runtime.getRuntime().exec(""String_Node_Str"");
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    ArrayList<String> logLines=new ArrayList<String>();
    String line=""String_Node_Str"";
    int lines=0;
    while ((bufferedReader.readLine()) != null) {
      lines++;
    }
    process=Runtime.getRuntime().exec(""String_Node_Str"");
    bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    int startPoint=lines - LOGCAT_MAXIMUM_LINES;
    if (lines > LOGCAT_MAXIMUM_LINES) {
      for (int i=0; i < startPoint && bufferedReader.ready(); bufferedReader.readLine()) {
      }
    }
    while ((line=bufferedReader.readLine()) != null) {
      if (filterLogLine(line)) {
        logLines.add(line);
      }
    }
    if (logLines.size() == 0) {
      logLines.add(getResources().getString(R.string.activity_view_log_placeholder_message));
    }
 else {
      mLastLine=logLines.get(logLines.size() - 1);
      if (logLines.size() > LOG_MAXIMUM_ITEMS) {
        logLines=new ArrayList<String>(logLines.subList(logLines.size() - LOG_MAXIMUM_ITEMS,logLines.size()));
      }
    }
    return logLines;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    ArrayList<String> placeholderList=new ArrayList<String>();
    placeholderList.add(getResources().getString(R.string.activity_view_log_placeholder_message));
    return placeholderList;
  }
}"
34242,"/** 
 * Updates the log ListView
 */
private void updateListView(){
  mLogItems=getLogLines();
  Parcelable state=mLogListView.onSaveInstanceState();
  mLogListView=new ListView(this);
  mLogListView=(ListView)findViewById(android.R.id.list);
  mLogAdapter=new LogAdapter(mLogItems);
  mLogListView.setAdapter(mLogAdapter);
  mLogListView.onRestoreInstanceState(state);
  if (mLogListView.getLastVisiblePosition() == mLogListView.getAdapter().getCount() - 1 && mLogListView.getChildAt(mLogListView.getChildCount() - 1).getBottom() <= mLogListView.getHeight()) {
    scrollMyListViewToBottom();
  }
}","/** 
 * Updates the log ListView
 */
private void updateListView(){
  mLogItems=getLogLines();
  Parcelable state=mLogListView.onSaveInstanceState();
  mLogListView=new ListView(this);
  mLogListView=(ListView)findViewById(android.R.id.list);
  mLogAdapter=new LogAdapter(mLogItems);
  mLogListView.setAdapter(mLogAdapter);
  mLogListView.onRestoreInstanceState(state);
  try {
    if (mLogListView.getLastVisiblePosition() == mLogListView.getAdapter().getCount() - 1 && mLogListView.getChildAt(mLogListView.getChildCount() - 1).getBottom() <= mLogListView.getHeight()) {
      scrollMyListViewToBottom();
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
  }
}"
34243,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_lock_screen);
  mCacheWordHandler=new CacheWordHandler(this);
  mCacheWordHandler.connectToService();
  enterPassphraseEditText=(EditText)findViewById(R.id.lock_screen_enter_passphrase_edittext);
  unlockIcon=(ImageView)findViewById(R.id.lock_screen_unlock_icon_imageview);
  unlockIcon.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Log.i(TAG,""String_Node_Str"");
      unlockIcon.setClickable(false);
      String enteredPassphrase=enterPassphraseEditText.getText().toString();
      if (validatePassphrase(enteredPassphrase)) {
        Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        new AttemptUnlockTask().execute(new String[]{enteredPassphrase});
      }
 else {
        Toast.makeText(getBaseContext(),""String_Node_Str"" + MINIMUM_PASSPHRASE_LENGTH + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
        unlockIcon.setClickable(true);
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_lock_screen);
  mPassphraseEnteredByUser=false;
  mActivityContext=this;
  mCacheWordHandler=new CacheWordHandler(this);
  mCacheWordHandler.connectToService();
  enterPassphraseEditText=(EditText)findViewById(R.id.lock_screen_enter_passphrase_edittext);
  unlockIcon=(ImageView)findViewById(R.id.lock_screen_unlock_icon_imageview);
  unlockIcon.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Log.i(TAG,""String_Node_Str"");
      unlockIcon.setClickable(false);
      String enteredPassphrase=enterPassphraseEditText.getText().toString();
      if (validatePassphrase(enteredPassphrase)) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
        mPassphraseEnteredByUser=true;
        new AttemptUnlockTask().execute(new String[]{enteredPassphrase});
      }
 else {
        Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        unlockIcon.setClickable(true);
      }
    }
  }
);
}"
34244,"@Override public void onClick(View v){
  Log.i(TAG,""String_Node_Str"");
  unlockIcon.setClickable(false);
  String enteredPassphrase=enterPassphraseEditText.getText().toString();
  if (validatePassphrase(enteredPassphrase)) {
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    new AttemptUnlockTask().execute(new String[]{enteredPassphrase});
  }
 else {
    Toast.makeText(getBaseContext(),""String_Node_Str"" + MINIMUM_PASSPHRASE_LENGTH + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
    unlockIcon.setClickable(true);
  }
}","@Override public void onClick(View v){
  Log.i(TAG,""String_Node_Str"");
  unlockIcon.setClickable(false);
  String enteredPassphrase=enterPassphraseEditText.getText().toString();
  if (validatePassphrase(enteredPassphrase)) {
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
      Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
    mPassphraseEnteredByUser=true;
    new AttemptUnlockTask().execute(new String[]{enteredPassphrase});
  }
 else {
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    unlockIcon.setClickable(true);
  }
}"
34245,"@Override protected Boolean doInBackground(String... enteredPassphrase){
  try {
    mCacheWordHandler.setPassphrase(enteredPassphrase[0].toCharArray());
  }
 catch (  GeneralSecurityException e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}","@Override protected Boolean doInBackground(String... enteredPassphrase){
  Log.i(TAG,""String_Node_Str"");
  mLastUnlockAttemptSuccessful=false;
  mUnlockAttemptTimerTask=new TimerTask(){
    @Override public void run(){
      if (mLastUnlockAttemptSuccessful == false)       Log.e(TAG,""String_Node_Str"");
      unlockIcon.setClickable(true);
      mCacheWordHandler=new CacheWordHandler(mActivityContext);
      mCacheWordHandler.connectToService();
    }
  }
;
  new Timer().schedule(mUnlockAttemptTimerTask,4000);
  try {
    mCacheWordHandler.setPassphrase(enteredPassphrase[0].toCharArray());
  }
 catch (  GeneralSecurityException e) {
    Log.i(TAG,""String_Node_Str"");
    mLastUnlockAttemptSuccessful=true;
    return false;
  }
catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    mLastUnlockAttemptSuccessful=true;
    return false;
  }
  mLastUnlockAttemptSuccessful=true;
  return true;
}"
34246,"/** 
 * Validates a passphrase entered by the user
 * @param passphrase - The passphrase
 * @return A boolean indicating whether or not the passphrase is valid
 */
private boolean validatePassphrase(String passphrase){
  if (passphrase.length() < MINIMUM_PASSPHRASE_LENGTH) {
    Log.e(TAG,""String_Node_Str"" + passphrase.length() + ""String_Node_Str""+ ""String_Node_Str""+ MINIMUM_PASSPHRASE_LENGTH+ ""String_Node_Str"");
    return false;
  }
  return true;
}","/** 
 * Validates a passphrase entered by the user
 * @param passphrase - The passphrase
 * @return A boolean indicating whether or not the passphrase is valid
 */
private boolean validatePassphrase(String passphrase){
  if (passphrase.length() < MINIMUM_PASSPHRASE_LENGTH) {
    Log.i(TAG,""String_Node_Str"" + passphrase.length() + ""String_Node_Str""+ ""String_Node_Str""+ MINIMUM_PASSPHRASE_LENGTH+ ""String_Node_Str"");
    return false;
  }
  return true;
}"
34247,"@Override public void onCacheWordOpened(){
  Log.i(TAG,""String_Node_Str"");
  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  notificationManager.cancel(NotificationsService.getUnlockNotificationId());
  Intent intent=new Intent(getBaseContext(),InboxActivity.class);
  intent.putExtra(EXTRA_DATABASE_UNLOCKED,true);
  startActivityForResult(intent,0);
}","@Override public void onCacheWordOpened(){
  Log.i(TAG,""String_Node_Str"");
  if (mPassphraseEnteredByUser) {
    mPassphraseEnteredByUser=false;
    mUnlockAttemptTimerTask.cancel();
    NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.cancel(NotificationsService.getUnlockNotificationId());
    Intent intent=new Intent(getBaseContext(),InboxActivity.class);
    intent.putExtra(EXTRA_DATABASE_UNLOCKED,true);
    startActivityForResult(intent,0);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}"
34248,"@Override public void onCacheWordUninitialized(){
}","@Override public void onCacheWordUninitialized(){
  Log.i(TAG,""String_Node_Str"");
}"
34249,"@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_inbox);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false)) {
    if (getIntent().hasCategory(Intent.CATEGORY_LAUNCHER)) {
      Log.i(TAG,""String_Node_Str"");
      onCacheWordLocked();
      return;
    }
    mCacheWordHandler=new CacheWordHandler(this);
    mCacheWordHandler.connectToService();
    if (getIntent().hasExtra(LockScreenActivity.EXTRA_DATABASE_UNLOCKED)) {
      Intent firstStartIntent=new Intent(this,BackgroundService.class);
      firstStartIntent.putExtra(BackgroundService.PERIODIC_BACKGROUND_PROCESSING_REQUEST,BackgroundService.BACKGROUND_PROCESSING_REQUEST);
      this.startService(firstStartIntent);
    }
  }
  if (prefs.getBoolean(INBOX_FIRST_RUN,true)) {
    runFirstLaunchRoutine();
  }
  MessageProvider msgProv=MessageProvider.get(this);
  mMessages=msgProv.searchMessages(MessagesTable.COLUMN_BELONGS_TO_ME,String.valueOf(0));
  Collections.sort(mMessages);
  mInboxListView=new ListView(this);
  mInboxListView=(ListView)findViewById(android.R.id.list);
  setTitle(getResources().getString(R.string.inbox_activity_title));
  MessageAdapter adapter=new MessageAdapter(mMessages);
  setListAdapter(adapter);
}","@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_inbox);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false)) {
    Log.i(TAG,""String_Node_Str"");
    if (getIntent().hasCategory(Intent.CATEGORY_LAUNCHER)) {
      Log.i(TAG,""String_Node_Str"");
      onCacheWordLocked();
      return;
    }
    mCacheWordHandler=new CacheWordHandler(this);
    mCacheWordHandler.connectToService();
    if (getIntent().hasExtra(LockScreenActivity.EXTRA_DATABASE_UNLOCKED)) {
      Intent firstStartIntent=new Intent(this,BackgroundService.class);
      firstStartIntent.putExtra(BackgroundService.PERIODIC_BACKGROUND_PROCESSING_REQUEST,BackgroundService.BACKGROUND_PROCESSING_REQUEST);
      this.startService(firstStartIntent);
    }
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
  if (prefs.getBoolean(INBOX_FIRST_RUN,true)) {
    runFirstLaunchRoutine();
  }
  mInboxListView=new ListView(this);
  mInboxListView=(ListView)findViewById(android.R.id.list);
  setTitle(getResources().getString(R.string.inbox_activity_title));
  try {
    MessageProvider msgProv=MessageProvider.get(this);
    mMessages=msgProv.searchMessages(MessagesTable.COLUMN_BELONGS_TO_ME,String.valueOf(0));
    Collections.sort(mMessages);
    MessageAdapter adapter=new MessageAdapter(mMessages);
    setListAdapter(adapter);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
    if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false)) {
      Log.e(TAG,""String_Node_Str"");
      onCacheWordLocked();
    }
 else {
      Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      Log.e(TAG,""String_Node_Str"");
    }
  }
}"
34250,"@SuppressLint(""String_Node_Str"") @Override public void onCacheWordLocked(){
  Intent intent=new Intent(getBaseContext(),LockScreenActivity.class);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
  }
 else {
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  }
  startActivity(intent);
}","@SuppressLint(""String_Node_Str"") @Override public void onCacheWordLocked(){
  Log.i(TAG,""String_Node_Str"");
  Intent intent=new Intent(getBaseContext(),LockScreenActivity.class);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
  }
 else {
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  }
  startActivity(intent);
}"
34251,"/** 
 * Takes a msg that we have determined to be an acknowledgment and checks whether it is one which we are awaiting. If so, the status of the corresponding Message is updated. 
 * @param msg - A msg object containing the acknowledgment to be processed
 */
private void processAck(BMObject msg){
  byte[] ackData=msg.getPayload();
  PayloadProvider payProv=PayloadProvider.get(App.getContext());
  String[] columnNames=new String[]{PayloadsTable.COLUMN_ACK,PayloadsTable.COLUMN_BELONGS_TO_ME};
  String[] searchTerms=new String[]{""String_Node_Str"",""String_Node_Str""};
  ArrayList<Payload> expectedAckPayloads=payProv.searchPayloads(columnNames,searchTerms);
  for (  Payload p : expectedAckPayloads) {
    if (Arrays.equals(p.getPayload(),ackData)) {
      MessageProvider msgProv=MessageProvider.get(App.getContext());
      ArrayList<Message> retrievedMessages=msgProv.searchMessages(MessagesTable.COLUMN_ACK_PAYLOAD_ID,String.valueOf(p.getId()));
      if (retrievedMessages.size() == 1) {
        Message originalMessage=retrievedMessages.get(0);
        originalMessage.setStatus(Message.STATUS_ACK_RECEIVED);
        msgProv.updateMessage(originalMessage);
        Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + originalMessage.getSubject() + ""String_Node_Str""+ ""String_Node_Str""+ originalMessage.getToAddress());
        Intent intent=new Intent(UI_NOTIFICATION);
        App.getContext().sendBroadcast(intent);
        QueueRecordProvider queueProv=QueueRecordProvider.get(App.getContext());
        ArrayList<QueueRecord> retrievedRecords=queueProv.searchQueueRecords(QueueRecordsTable.COLUMN_OBJECT_0_ID,String.valueOf(originalMessage.getId()));
        for (        QueueRecord q : retrievedRecords) {
          if (q.getTask().equals(QueueRecordProcessor.TASK_SEND_MESSAGE)) {
            queueProv.deleteQueueRecord(q);
          }
        }
      }
 else {
        Log.d(TAG,""String_Node_Str"");
      }
      payProv.deletePayload(p);
      return;
    }
  }
  Log.i(TAG,""String_Node_Str"");
}","/** 
 * Takes a msg that we have determined to be an acknowledgement and checks whether it is one which we are awaiting. If so, the status of the corresponding Message is updated. 
 * @param msg - A msg object containing the acknowledgement to be processed
 */
private void processAck(BMObject msg){
  byte[] ackData=msg.getPayload();
  PayloadProvider payProv=PayloadProvider.get(App.getContext());
  String[] columnNames=new String[]{PayloadsTable.COLUMN_ACK,PayloadsTable.COLUMN_BELONGS_TO_ME};
  String[] searchTerms=new String[]{""String_Node_Str"",""String_Node_Str""};
  ArrayList<Payload> expectedAckPayloads=payProv.searchPayloads(columnNames,searchTerms);
  for (  Payload p : expectedAckPayloads) {
    if (Arrays.equals(p.getPayload(),ackData)) {
      MessageProvider msgProv=MessageProvider.get(App.getContext());
      ArrayList<Message> retrievedMessages=msgProv.searchMessages(MessagesTable.COLUMN_ACK_PAYLOAD_ID,String.valueOf(p.getId()));
      if (retrievedMessages.size() == 1) {
        Message originalMessage=retrievedMessages.get(0);
        originalMessage.setStatus(Message.STATUS_ACK_RECEIVED);
        msgProv.updateMessage(originalMessage);
        Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + originalMessage.getSubject() + ""String_Node_Str""+ ""String_Node_Str""+ originalMessage.getToAddress());
        Intent intent=new Intent(UI_NOTIFICATION);
        App.getContext().sendBroadcast(intent);
        QueueRecordProvider queueProv=QueueRecordProvider.get(App.getContext());
        ArrayList<QueueRecord> retrievedRecords=queueProv.searchQueueRecords(QueueRecordsTable.COLUMN_OBJECT_0_ID,String.valueOf(originalMessage.getId()));
        for (        QueueRecord q : retrievedRecords) {
          if (q.getTask().equals(QueueRecordProcessor.TASK_SEND_MESSAGE) || q.getTask().equals(QueueRecordProcessor.TASK_PROCESS_OUTGOING_MESSAGE) || q.getTask().equals(QueueRecordProcessor.TASK_DISSEMINATE_MESSAGE)) {
            queueProv.deleteQueueRecord(q);
          }
        }
      }
 else {
        Log.d(TAG,""String_Node_Str"");
      }
      payProv.deletePayload(p);
      return;
    }
  }
  Log.i(TAG,""String_Node_Str"");
}"
34252,"/** 
 * Adds some default entries to the address book, adds a welcome message to the inbox, generates a new Bitmessage address for the user, and starts the BackgroundService for the first time.
 */
private void runFirstLaunchRoutine(){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  SharedPreferences.Editor editor=prefs.edit();
  editor.putBoolean(INBOX_FIRST_RUN,false);
  editor.commit();
  AddressBookRecord addressBookEntry0=new AddressBookRecord();
  addressBookEntry0.setLabel(ADDRESS_BOOK_ENTRY_0_LABEL);
  addressBookEntry0.setAddress(ADDRESS_BOOK_ENTRY_0_ADDRESS);
  AddressBookRecord addressBookEntry1=new AddressBookRecord();
  addressBookEntry1.setLabel(ADDRESS_BOOK_ENTRY_1_LABEL);
  addressBookEntry1.setAddress(ADDRESS_BOOK_ENTRY_1_ADDRESS);
  AddressBookRecordProvider addBookProv=AddressBookRecordProvider.get(this);
  addBookProv.addAddressBookRecord(addressBookEntry0);
  addBookProv.addAddressBookRecord(addressBookEntry1);
  Message welcomeMessage=new Message();
  welcomeMessage.setBelongsToMe(false);
  welcomeMessage.setToAddress(WELCOME_MESSAGE_TO_ADDRESS);
  welcomeMessage.setFromAddress(WELCOME_MESSAGE_FROM_ADDRESS);
  welcomeMessage.setSubject(WELCOME_MESSAGE_SUBJECT);
  welcomeMessage.setBody(WELCOME_MESSAGE_BODY);
  welcomeMessage.setTime(System.currentTimeMillis() / 1000);
  MessageProvider msgProv=MessageProvider.get(getApplicationContext());
  long msg0Id=msgProv.addMessage(welcomeMessage);
  welcomeMessage.setId(msg0Id);
  mMessages=new ArrayList<Message>();
  mMessages.add(welcomeMessage);
  try {
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Adds some default entries to the address book, adds a welcome message to the inbox, generates a new Bitmessage address for the user, and starts the BackgroundService for the first time.
 */
private void runFirstLaunchRoutine(){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  SharedPreferences.Editor editor=prefs.edit();
  editor.putBoolean(INBOX_FIRST_RUN,false);
  editor.commit();
  AddressBookRecord addressBookEntry0=new AddressBookRecord();
  addressBookEntry0.setLabel(ADDRESS_BOOK_ENTRY_0_LABEL);
  addressBookEntry0.setAddress(ADDRESS_BOOK_ENTRY_0_ADDRESS);
  AddressBookRecord addressBookEntry1=new AddressBookRecord();
  addressBookEntry1.setLabel(ADDRESS_BOOK_ENTRY_1_LABEL);
  addressBookEntry1.setAddress(ADDRESS_BOOK_ENTRY_1_ADDRESS);
  AddressBookRecordProvider addBookProv=AddressBookRecordProvider.get(this);
  addBookProv.addAddressBookRecord(addressBookEntry0);
  addBookProv.addAddressBookRecord(addressBookEntry1);
  Message welcomeMessage=new Message();
  welcomeMessage.setBelongsToMe(false);
  welcomeMessage.setToAddress(WELCOME_MESSAGE_TO_ADDRESS);
  welcomeMessage.setFromAddress(WELCOME_MESSAGE_FROM_ADDRESS);
  welcomeMessage.setSubject(WELCOME_MESSAGE_SUBJECT);
  welcomeMessage.setBody(WELCOME_MESSAGE_BODY);
  welcomeMessage.setTime(System.currentTimeMillis() / 1000);
  MessageProvider msgProv=MessageProvider.get(getApplicationContext());
  long msg0Id=msgProv.addMessage(welcomeMessage);
  welcomeMessage.setId(msg0Id);
  mMessages=new ArrayList<Message>();
  mMessages.add(welcomeMessage);
  try {
    AddressGenerator addGen=new AddressGenerator();
    Address firstAddress=addGen.generateAndSaveNewAddress();
    firstAddress.setLabel(FIRST_ADDRESS_LABEL);
    AddressProvider addProv=AddressProvider.get(getApplicationContext());
    addProv.updateAddress(firstAddress);
    long currentTime=System.currentTimeMillis() / 1000;
    editor.putLong(LAST_MSG_CHECK_TIME,currentTime);
    editor.commit();
    Log.i(TAG,""String_Node_Str"" + currentTime);
    editor.putLong(LAST_PROCESSED_MSG_TIME,currentTime);
    editor.commit();
    Log.i(TAG,""String_Node_Str"" + currentTime);
    Intent intent=new Intent(getBaseContext(),BackgroundService.class);
    intent.putExtra(BackgroundService.UI_REQUEST,BackgroundService.UI_REQUEST_CREATE_IDENTITY);
    intent.putExtra(BackgroundService.ADDRESS_ID,firstAddress.getId());
    startService(intent);
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
  }
}"
34253,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  Log.i(TAG,""String_Node_Str"");
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false) == false) {
    Log.i(TAG,""String_Node_Str"");
    menu.removeItem(R.id.menu_item_lock);
  }
  return super.onPrepareOptionsMenu(menu);
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  if (prefs.getBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false) == false) {
    menu.removeItem(R.id.menu_item_lock);
  }
  return super.onPrepareOptionsMenu(menu);
}"
34254,"/** 
 * A routine to be run after we have attempted to set or change the database encryption passphrase
 * @param success - Whether the attempt to modify the passphrase was successful
 */
private void onPassphraseModificationResult(boolean success){
  if (success) {
    Log.d(TAG,""String_Node_Str"");
    closeKeyboardIfOpen();
    savePassphraseButton.setVisibility(View.GONE);
    cancelPassphraseButton.setVisibility(View.GONE);
  }
 else {
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","/** 
 * A routine to be run after we have attempted to set or change the database encryption passphrase
 * @param success - Whether the attempt to modify the passphrase was successful
 */
private void onPassphraseModificationResult(boolean success){
  if (success) {
    closeKeyboardIfOpen();
    savePassphraseButton.setVisibility(View.GONE);
    cancelPassphraseButton.setVisibility(View.GONE);
    cancelPassphraseButton=(Button)findViewById(R.id.security_cancel_passphrase_button);
    cancelPassphraseButton.setVisibility(View.GONE);
  }
 else {
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
34255,"/** 
 * If the soft keyboard is open, this method will close it. Currently only works for API 16 and above. 
 */
private void closeKeyboardIfOpen(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    final View activityRootView=getWindow().getDecorView().getRootView();
    final OnGlobalLayoutListener globalListener=new OnGlobalLayoutListener(){
      @Override @TargetApi(Build.VERSION_CODES.JELLY_BEAN) public void onGlobalLayout(){
        Rect rect=new Rect();
        activityRootView.getWindowVisibleDisplayFrame(rect);
        Log.d(TAG,""String_Node_Str"");
        int heightDiff=activityRootView.getRootView().getHeight() - (rect.bottom - rect.top);
        if (heightDiff > 100) {
          Log.d(TAG,""String_Node_Str"");
          InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
          imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);
        }
        activityRootView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
    }
;
    activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(globalListener);
  }
}","/** 
 * If the soft keyboard is open, this method will close it. Currently only works for API 16 and above. 
 */
private void closeKeyboardIfOpen(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    final View activityRootView=getWindow().getDecorView().getRootView();
    final OnGlobalLayoutListener globalListener=new OnGlobalLayoutListener(){
      @Override @TargetApi(Build.VERSION_CODES.JELLY_BEAN) public void onGlobalLayout(){
        Rect rect=new Rect();
        activityRootView.getWindowVisibleDisplayFrame(rect);
        int heightDiff=activityRootView.getRootView().getHeight() - (rect.bottom - rect.top);
        if (heightDiff > 100) {
          InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
          imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);
        }
        activityRootView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
    }
;
    activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(globalListener);
  }
}"
34256,"/** 
 * Takes a pair Strings and validates them, determining whether or not they contain a valid database passphrase. 
 * @param enteredPassphrase - The entered passphrase
 * @param confirmedPassphrase - The confirmed passphrase
 * @return A boolean indicating whether the given Strings are a valid passphrase
 */
private boolean validateDatabasePassphrase(String enteredPassphrase,String confirmedPassphrase){
  if (enteredPassphrase.equals(confirmedPassphrase) == false) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  if (enteredPassphrase.length() < MINIMUM_PASSPHRASE_LENGTH) {
    Toast.makeText(this,""String_Node_Str"" + MINIMUM_PASSPHRASE_LENGTH + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    Log.e(TAG,""String_Node_Str"" + enteredPassphrase.length() + ""String_Node_Str""+ ""String_Node_Str""+ MINIMUM_PASSPHRASE_LENGTH+ ""String_Node_Str"");
    return false;
  }
  return true;
}","/** 
 * Takes a pair Strings and validates them, determining whether or not they contain a valid database passphrase. 
 * @param enteredPassphrase - The entered passphrase
 * @param confirmedPassphrase - The confirmed passphrase
 * @return A boolean indicating whether the given Strings are a valid passphrase
 */
private boolean validateDatabasePassphrase(String enteredPassphrase,String confirmedPassphrase){
  if (enteredPassphrase.equals(confirmedPassphrase) == false) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  if (enteredPassphrase.length() < MINIMUM_PASSPHRASE_LENGTH) {
    Toast.makeText(this,""String_Node_Str"" + MINIMUM_PASSPHRASE_LENGTH + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    Log.e(TAG,""String_Node_Str"" + enteredPassphrase.length() + ""String_Node_Str""+ ""String_Node_Str""+ MINIMUM_PASSPHRASE_LENGTH+ ""String_Node_Str"");
    return false;
  }
  if (enteredPassphrase.equals(PLACEHOLDER_PASSPHRASE)) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  return true;
}"
34257,"@Override @TargetApi(Build.VERSION_CODES.JELLY_BEAN) public void onGlobalLayout(){
  Rect rect=new Rect();
  activityRootView.getWindowVisibleDisplayFrame(rect);
  Log.d(TAG,""String_Node_Str"");
  int heightDiff=activityRootView.getRootView().getHeight() - (rect.bottom - rect.top);
  if (heightDiff > 100) {
    Log.d(TAG,""String_Node_Str"");
    InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);
  }
  activityRootView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
}","@Override @TargetApi(Build.VERSION_CODES.JELLY_BEAN) public void onGlobalLayout(){
  Rect rect=new Rect();
  activityRootView.getWindowVisibleDisplayFrame(rect);
  int heightDiff=activityRootView.getRootView().getHeight() - (rect.bottom - rect.top);
  if (heightDiff > 100) {
    InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);
  }
  activityRootView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
}"
34258,"@Override protected void onPostExecute(Boolean success){
  if (success) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
    SharedPreferences.Editor editor=prefs.edit();
    editor.putBoolean(KEY_DATABASE_ENCRYPTION_SELECTED,false);
    editor.putBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false);
    editor.commit();
    hideDatabaseEncryptionUI();
    closeKeyboardIfOpen();
    clearPassphraseEditTexts();
    changePassphraseButton.setVisibility(View.GONE);
    savePassphraseButton.setVisibility(View.GONE);
    cancelPassphraseButton.setVisibility(View.GONE);
    databaseEncryptionCheckbox.setText(""String_Node_Str"");
    databaseEncryptionCheckbox.setChecked(false);
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  onPassphraseModificationResult(success);
}","@Override protected void onPostExecute(Boolean success){
  if (success) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
    SharedPreferences.Editor editor=prefs.edit();
    editor.putBoolean(KEY_DATABASE_ENCRYPTION_SELECTED,false);
    editor.putBoolean(KEY_DATABASE_PASSPHRASE_SAVED,false);
    editor.commit();
    hideDatabaseEncryptionUI();
    clearPassphraseEditTexts();
    changePassphraseButton.setVisibility(View.GONE);
    savePassphraseButton.setVisibility(View.GONE);
    cancelPassphraseButton.setVisibility(View.GONE);
    databaseEncryptionCheckbox.setText(""String_Node_Str"");
    databaseEncryptionCheckbox.setChecked(false);
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  onPassphraseModificationResult(success);
}"
34259,"/** 
 * Checks whether CacheWord is locked. If yes, this routine closes the database.
 */
private void closeDatabaseIfLocked(){
  if (mCacheWordHandler.isLocked()) {
    DatabaseContentProvider.closeDatabase();
  }
}","/** 
 * Checks whether CacheWord is locked. If yes, this routine closes the database.
 */
private void closeDatabaseIfLocked(){
  if (mCacheWordHandler != null && mCacheWordHandler.isLocked()) {
    DatabaseContentProvider.closeDatabase();
  }
}"
34260,"/** 
 * Takes an identifier (ripe hash or tag) and requests the corresponding pubkey from a Bitseal server.<br><br> Note: If the pubkey cannot be retrieved after trying all available servers, this method will throw a RuntimeException
 * @param addressString - A String containing the address which we are trying to retrieve the pubkey of
 * @param identifier - A byte[] containing the data used to identify the pubkeywe wish to request. For address versions 3 and below, this is the ripe hash. For address versions 4 and above, this is the 'tag'.
 * @param addressVersion - An int containing the version number of the address forwhich we are requesting the pubkey
 * @return A Pubkey object conatining the requested pubkey
 */
public Pubkey requestPubkeyFromServer(String addressString,byte[] identifier,int addressVersion){
  Log.d(TAG,""String_Node_Str"" + addressString);
  String hexPayload=ByteFormatter.byteArrayToHexString(identifier);
  ApiCaller caller=new ApiCaller();
  int serversToPoll=caller.getNumberOfServers();
  if (serversToPoll > MAX_SERVERS_TO_POLL) {
    serversToPoll=MAX_SERVERS_TO_POLL;
  }
  for (int i=0; i < serversToPoll; i++) {
    Object callResult=caller.call(API_METHOD_REQUEST_PUBKEY,hexPayload,addressVersion);
    String resultString=callResult.toString();
    Log.d(TAG,""String_Node_Str"" + resultString);
    if ((resultString.equals(RESULT_CODE_REQUEST_PUBKEY)) == false) {
      try {
        JSONObject jObject=new JSONObject(resultString);
        JSONArray jArray=jObject.getJSONArray(JSON_NAME_PUBKEY_PAYLOAD);
        JSONObject object=jArray.getJSONObject(0);
        String pubkeyHex=object.getString(JSON_NAME_DATA);
        long payloadByteSize=pubkeyHex.length() / 2;
        if (payloadByteSize < MAX_PAYLOAD_SIZE_TO_ACCEPT) {
          byte[] pubkeyData=ByteFormatter.hexStringToByteArray(pubkeyHex);
          PubkeyProcessor pubProc=new PubkeyProcessor();
          Pubkey pubkey=pubProc.reconstructPubkey(pubkeyData,addressString);
          boolean pubkeyValid=pubProc.validatePubkey(pubkey,addressString);
          if (pubkeyValid == false) {
            Log.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + addressString + ""String_Node_Str""+ ""String_Node_Str"");
            caller.switchToNextServer();
          }
 else {
            return pubkey;
          }
        }
 else {
          long payloadKilobytes=payloadByteSize / 1000;
          Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + payloadKilobytes + ""String_Node_Str"");
        }
      }
 catch (      JSONException e) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + e.getLocalizedMessage() + ""String_Node_Str""+ ""String_Node_Str""+ resultString);
      }
    }
 else {
      try {
        caller.switchToNextServer();
      }
 catch (      RuntimeException e) {
        break;
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * Takes an identifier (ripe hash or tag) and requests the corresponding pubkey from a Bitseal server.<br><br> Note: If the pubkey cannot be retrieved after trying all available servers, this method will throw a RuntimeException
 * @param addressString - A String containing the address which we are trying to retrieve the pubkey of
 * @param identifier - A byte[] containing the data used to identify the pubkeywe wish to request. For address versions 3 and below, this is the ripe hash. For address versions 4 and above, this is the 'tag'.
 * @param addressVersion - An int containing the version number of the address forwhich we are requesting the pubkey
 * @return A Pubkey object containing the requested pubkey
 */
public Pubkey requestPubkeyFromServer(String addressString,byte[] identifier,int addressVersion){
  Log.d(TAG,""String_Node_Str"" + addressString);
  String hexPayload=ByteFormatter.byteArrayToHexString(identifier);
  ApiCaller caller=new ApiCaller();
  int serversToPoll=caller.getNumberOfServers();
  if (serversToPoll > MAX_SERVERS_TO_POLL) {
    serversToPoll=MAX_SERVERS_TO_POLL;
  }
  for (int i=0; i < serversToPoll; i++) {
    Object callResult=caller.call(API_METHOD_REQUEST_PUBKEY,hexPayload,addressVersion);
    String resultString=callResult.toString();
    Log.d(TAG,""String_Node_Str"" + resultString);
    if ((resultString.equals(RESULT_CODE_REQUEST_PUBKEY)) == false) {
      try {
        JSONObject jObject=new JSONObject(resultString);
        JSONArray jArray=jObject.getJSONArray(JSON_NAME_PUBKEY_PAYLOAD);
        JSONObject object=jArray.getJSONObject(0);
        String pubkeyHex=object.getString(JSON_NAME_DATA);
        long payloadByteSize=pubkeyHex.length() / 2;
        if (payloadByteSize < MAX_PAYLOAD_SIZE_TO_ACCEPT) {
          byte[] pubkeyData=ByteFormatter.hexStringToByteArray(pubkeyHex);
          PubkeyProcessor pubProc=new PubkeyProcessor();
          Pubkey pubkey=pubProc.reconstructPubkey(pubkeyData,addressString);
          boolean pubkeyValid=pubProc.validatePubkey(pubkey,addressString);
          if (pubkeyValid == false) {
            Log.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + addressString + ""String_Node_Str""+ ""String_Node_Str"");
            caller.switchToNextServer();
          }
 else {
            return pubkey;
          }
        }
 else {
          long payloadKilobytes=payloadByteSize / 1000;
          Log.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + payloadKilobytes + ""String_Node_Str"");
        }
      }
 catch (      JSONException e) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + e.getLocalizedMessage() + ""String_Node_Str""+ ""String_Node_Str""+ resultString);
      }
    }
 else {
      try {
        caller.switchToNextServer();
      }
 catch (      RuntimeException e) {
        break;
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}"
34261,"/** 
 * Processes one or more msg payloads that have been sent to me
 * @return An int representing the number of new messages successfully received (i.e. successfully decrypted and authenticated). 
 */
public int processIncomingMessages(){
  int newMessagesReceived=0;
  PayloadProvider payProv=PayloadProvider.get(App.getContext());
  String[] columnNames=new String[]{PayloadsTable.COLUMN_TYPE,PayloadsTable.COLUMN_BELONGS_TO_ME,PayloadsTable.COLUMN_PROCESSING_COMPLETE};
  String[] searchTerms=new String[]{Payload.OBJECT_TYPE_MSG,""String_Node_Str"",""String_Node_Str""};
  ArrayList<Payload> msgsToProcess=payProv.searchPayloads(columnNames,searchTerms);
  ArrayList<Payload> processedMsgs=new ArrayList<Payload>();
  for (  Payload p : msgsToProcess) {
    Message decryptedMessage=new IncomingMessageProcessor().processReceivedMsg(p);
    if (decryptedMessage != null) {
      newMessagesReceived++;
      MessageProvider.get(App.getContext()).addMessage(decryptedMessage);
      App.getContext().sendBroadcast(new Intent(UI_NOTIFICATION));
    }
    processedMsgs.add(p);
  }
  for (  Payload p : processedMsgs) {
    p.setProcessingComplete(true);
    payProv.updatePayload(p);
  }
  return newMessagesReceived;
}","/** 
 * Processes one or more msg payloads that have been sent to me
 * @return An int representing the number of new messages successfully processed
 */
public int processIncomingMessages(){
  int newMessagesReceived=0;
  PayloadProvider payProv=PayloadProvider.get(App.getContext());
  String[] columnNames=new String[]{PayloadsTable.COLUMN_TYPE,PayloadsTable.COLUMN_BELONGS_TO_ME,PayloadsTable.COLUMN_PROCESSING_COMPLETE};
  String[] searchTerms=new String[]{Payload.OBJECT_TYPE_MSG,""String_Node_Str"",""String_Node_Str""};
  ArrayList<Payload> msgsToProcess=payProv.searchPayloads(columnNames,searchTerms);
  ArrayList<Payload> processedMsgs=new ArrayList<Payload>();
  for (  Payload p : msgsToProcess) {
    Message decryptedMessage=new IncomingMessageProcessor().processReceivedMsg(p);
    if (decryptedMessage != null) {
      newMessagesReceived++;
      MessageProvider.get(App.getContext()).addMessage(decryptedMessage);
      App.getContext().sendBroadcast(new Intent(UI_NOTIFICATION));
    }
    processedMsgs.add(p);
  }
  for (  Payload p : processedMsgs) {
    p.setProcessingComplete(true);
    payProv.updatePayload(p);
  }
  if (newMessagesReceived > 0) {
    Context appContext=App.getContext();
    Intent intent=new Intent(appContext,NotificationsService.class);
    intent.putExtra(NotificationsService.EXTRA_DISPLAY_NEW_MESSAGES_NOTIFICATION,newMessagesReceived);
    appContext.startService(intent);
  }
  return processedMsgs.size();
}"
34262,"@Override public void run(){
  try {
    Log.i(TAG,""String_Node_Str"");
    CheckForMessagesController controller=new CheckForMessagesController();
    int totalNewMessages=0;
    int newMessagesReceived=controller.processIncomingMessages();
    while (newMessagesReceived > 0) {
      totalNewMessages=totalNewMessages + newMessagesReceived;
      newMessagesReceived=controller.processIncomingMessages();
    }
    if (totalNewMessages > 0) {
      controller.sendAcknowledgments();
      Context appContext=App.getContext();
      Intent intent=new Intent(appContext,NotificationsService.class);
      intent.putExtra(NotificationsService.EXTRA_DISPLAY_NEW_MESSAGES_NOTIFICATION,totalNewMessages);
      appContext.startService(intent);
    }
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
  }
}","@Override public void run(){
  try {
    Log.i(TAG,""String_Node_Str"");
    CheckForMessagesController controller=new CheckForMessagesController();
    int newMessagesProcessed=controller.processIncomingMessages();
    while (newMessagesProcessed > 0) {
      newMessagesProcessed=controller.processIncomingMessages();
    }
    controller.sendAcknowledgments();
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
  }
}"
34263,"private MessageProcessingThread(){
  processingThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Log.i(TAG,""String_Node_Str"");
        CheckForMessagesController controller=new CheckForMessagesController();
        int totalNewMessages=0;
        int newMessagesReceived=controller.processIncomingMessages();
        while (newMessagesReceived > 0) {
          totalNewMessages=totalNewMessages + newMessagesReceived;
          newMessagesReceived=controller.processIncomingMessages();
        }
        if (totalNewMessages > 0) {
          controller.sendAcknowledgments();
          Context appContext=App.getContext();
          Intent intent=new Intent(appContext,NotificationsService.class);
          intent.putExtra(NotificationsService.EXTRA_DISPLAY_NEW_MESSAGES_NOTIFICATION,totalNewMessages);
          appContext.startService(intent);
        }
        Log.i(TAG,""String_Node_Str"");
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
      }
    }
  }
);
}","private MessageProcessingThread(){
  processingThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Log.i(TAG,""String_Node_Str"");
        CheckForMessagesController controller=new CheckForMessagesController();
        int newMessagesProcessed=controller.processIncomingMessages();
        while (newMessagesProcessed > 0) {
          newMessagesProcessed=controller.processIncomingMessages();
        }
        controller.sendAcknowledgments();
        Log.i(TAG,""String_Node_Str"");
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
      }
    }
  }
);
}"
34264,"/** 
 * Runs periodic background processing. <br><br> This method will first check whether there are any QueueRecord objects saved in the database. If there are, it will attempt to complete the task recorded by each of those QueueRecords in turn. After that, it will run the 'check for messages' task. If no QueueRecords are found in the database, it will run the 'check for messages' task. 
 */
private void processTasks(){
  Log.i(TAG,""String_Node_Str"");
  TaskController taskController=new TaskController();
  QueueRecordProvider queueProv=QueueRecordProvider.get(getApplicationContext());
  QueueRecordProcessor queueProc=new QueueRecordProcessor();
  ArrayList<QueueRecord> queueRecords=queueProv.getAllQueueRecords();
  Log.i(TAG,""String_Node_Str"" + queueRecords.size());
  long currentTime=System.currentTimeMillis() / 1000;
  Iterator<QueueRecord> iterator=queueRecords.iterator();
  while (iterator.hasNext()) {
    QueueRecord q=iterator.next();
    if (q.getTriggerTime() > currentTime) {
      Log.i(TAG,""String_Node_Str"" + q.getTask() + ""String_Node_Str""+ ""String_Node_Str""+ (q.getTriggerTime() - currentTime)+ ""String_Node_Str"");
      iterator.remove();
      ;
    }
  }
  if (queueRecords.size() > 0) {
    Collections.sort(queueRecords);
    for (    QueueRecord q : queueRecords) {
      Log.i(TAG,""String_Node_Str"" + q.getTask() + ""String_Node_Str""+ q.getAttempts());
      int attempts=q.getAttempts();
      String task=q.getTask();
      if (attempts > MAXIMUM_ATTEMPTS) {
        if (task.equals(TASK_SEND_MESSAGE)) {
          MessageProvider msgProv=MessageProvider.get(getApplicationContext());
          Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
          messageToSend.setStatus(Message.STATUS_SENDING_FAILED);
          msgProv.updateMessage(messageToSend);
        }
        queueProc.deleteQueueRecord(q);
        continue;
      }
      if (task.equals(TASK_SEND_MESSAGE)) {
        if (NetworkHelper.checkInternetAvailability() == true) {
          try {
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
            ArrayList<QueueRecord> matchingRecords=queueProv.searchQueueRecords(QueueRecordsTable.COLUMN_OBJECT_0_ID,String.valueOf(q.getObject0Id()));
            for (            QueueRecord match : matchingRecords) {
              if (match.getTask().equals(TASK_SEND_MESSAGE) || match.getTask().equals(TASK_PROCESS_OUTGOING_MESSAGE)) {
                if (match.getTriggerTime() < q.getTriggerTime()) {
                  if (match.getRecordCount() == 0) {
                    q.setTriggerTime(q.getTriggerTime() + FIRST_ATTEMPT_TTL);
                  }
 else {
                    q.setTriggerTime(q.getTriggerTime() + SUBSEQUENT_ATTEMPTS_TTL);
                  }
                  queueProv.updateQueueRecord(q);
                  continue;
                }
              }
            }
            if (q.getRecordCount() == 0) {
              taskController.sendMessage(q,messageToSend,DO_POW,FIRST_ATTEMPT_TTL,FIRST_ATTEMPT_TTL);
            }
 else {
              queueProc.createAndSaveQueueRecord(TASK_SEND_MESSAGE,(System.currentTimeMillis() / 1000) + SUBSEQUENT_ATTEMPTS_TTL,q.getRecordCount() + 1,messageToSend,null);
              taskController.sendMessage(q,messageToSend,DO_POW,SUBSEQUENT_ATTEMPTS_TTL,SUBSEQUENT_ATTEMPTS_TTL);
            }
          }
 catch (          RuntimeException e) {
            Log.i(TAG,""String_Node_Str"" + TASK_SEND_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
            queueProv.deleteQueueRecord(q);
            continue;
          }
        }
      }
 else       if (task.equals(TASK_PROCESS_OUTGOING_MESSAGE)) {
        Message messageToSend=null;
        try {
          MessageProvider msgProv=MessageProvider.get(getApplicationContext());
          messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
        }
 catch (        RuntimeException e) {
          Log.i(TAG,""String_Node_Str"" + TASK_PROCESS_OUTGOING_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
          queueProv.deleteQueueRecord(q);
          continue;
        }
        PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
        Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject1Id());
        if (q.getRecordCount() == 0) {
          taskController.processOutgoingMessage(q,messageToSend,toPubkey,DO_POW,FIRST_ATTEMPT_TTL);
        }
 else {
          taskController.processOutgoingMessage(q,messageToSend,toPubkey,DO_POW,SUBSEQUENT_ATTEMPTS_TTL);
        }
      }
 else       if (task.equals(TASK_DISSEMINATE_MESSAGE)) {
        if (NetworkHelper.checkInternetAvailability() == true) {
          PayloadProvider payProv=PayloadProvider.get(getApplicationContext());
          Payload payloadToSend=payProv.searchForSingleRecord(q.getObject0Id());
          PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
          Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject1Id());
          taskController.disseminateMessage(q,payloadToSend,toPubkey,DO_POW);
        }
      }
 else       if (task.equals(TASK_CREATE_IDENTITY)) {
        taskController.createIdentity(q,DO_POW);
      }
 else       if (task.equals(TASK_DISSEMINATE_PUBKEY)) {
        if (NetworkHelper.checkInternetAvailability() == true) {
          PayloadProvider payProv=PayloadProvider.get(getApplicationContext());
          Payload payloadToSend=payProv.searchForSingleRecord(q.getObject0Id());
          taskController.disseminatePubkey(q,payloadToSend,DO_POW);
        }
      }
 else {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + task);
      }
    }
    runPeriodicTasks();
  }
 else {
    runPeriodicTasks();
    if (checkIfDatabaseCleaningIsRequired()) {
      Intent intent=new Intent(getBaseContext(),DatabaseCleaningService.class);
      intent.putExtra(DatabaseCleaningService.EXTRA_RUN_DATABASE_CLEANING_ROUTINE,true);
      startService(intent);
    }
  }
}","/** 
 * Runs periodic background processing. <br><br> This method will first check whether there are any QueueRecord objects saved in the database. If there are, it will attempt to complete the task recorded by each of those QueueRecords in turn. After that, it will run the 'check for messages' task. If no QueueRecords are found in the database, it will run the 'check for messages' task. 
 */
private void processTasks(){
  Log.i(TAG,""String_Node_Str"");
  TaskController taskController=new TaskController();
  QueueRecordProvider queueProv=QueueRecordProvider.get(getApplicationContext());
  QueueRecordProcessor queueProc=new QueueRecordProcessor();
  ArrayList<QueueRecord> queueRecords=queueProv.getAllQueueRecords();
  Log.i(TAG,""String_Node_Str"" + queueRecords.size());
  long currentTime=System.currentTimeMillis() / 1000;
  Iterator<QueueRecord> iterator=queueRecords.iterator();
  while (iterator.hasNext()) {
    QueueRecord q=iterator.next();
    if (q.getTriggerTime() > currentTime) {
      Log.i(TAG,""String_Node_Str"" + q.getTask() + ""String_Node_Str""+ ""String_Node_Str""+ (q.getTriggerTime() - currentTime)+ ""String_Node_Str"");
      iterator.remove();
      ;
    }
  }
  if (queueRecords.size() > 0) {
    Collections.sort(queueRecords);
    for (    QueueRecord q : queueRecords) {
      Log.i(TAG,""String_Node_Str"" + q.getTask() + ""String_Node_Str""+ q.getAttempts());
      int attempts=q.getAttempts();
      String task=q.getTask();
      if (attempts > MAXIMUM_ATTEMPTS) {
        if (task.equals(TASK_SEND_MESSAGE)) {
          MessageProvider msgProv=MessageProvider.get(getApplicationContext());
          Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
          messageToSend.setStatus(Message.STATUS_SENDING_FAILED);
          msgProv.updateMessage(messageToSend);
        }
        queueProc.deleteQueueRecord(q);
        continue;
      }
      if (task.equals(TASK_SEND_MESSAGE)) {
        if (NetworkHelper.checkInternetAvailability() == true) {
          try {
            MessageProvider msgProv=MessageProvider.get(getApplicationContext());
            Message messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
            ArrayList<QueueRecord> matchingRecords=queueProv.searchQueueRecords(QueueRecordsTable.COLUMN_OBJECT_0_ID,String.valueOf(q.getObject0Id()));
            for (            QueueRecord match : matchingRecords) {
              if (match.getTask().equals(TASK_SEND_MESSAGE) || match.getTask().equals(TASK_PROCESS_OUTGOING_MESSAGE)) {
                if (match.getTriggerTime() < q.getTriggerTime()) {
                  currentTime=System.currentTimeMillis() / 1000;
                  if (match.getRecordCount() == 0) {
                    q.setTriggerTime(currentTime + FIRST_ATTEMPT_TTL);
                  }
 else {
                    q.setTriggerTime(currentTime + SUBSEQUENT_ATTEMPTS_TTL);
                  }
                  queueProv.updateQueueRecord(q);
                  continue;
                }
              }
            }
            if (q.getRecordCount() == 0) {
              taskController.sendMessage(q,messageToSend,DO_POW,FIRST_ATTEMPT_TTL,FIRST_ATTEMPT_TTL);
            }
 else {
              currentTime=System.currentTimeMillis() / 1000;
              queueProc.createAndSaveQueueRecord(TASK_SEND_MESSAGE,currentTime + SUBSEQUENT_ATTEMPTS_TTL,q.getRecordCount() + 1,messageToSend,null);
              taskController.sendMessage(q,messageToSend,DO_POW,SUBSEQUENT_ATTEMPTS_TTL,SUBSEQUENT_ATTEMPTS_TTL);
            }
          }
 catch (          RuntimeException e) {
            Log.i(TAG,""String_Node_Str"" + TASK_SEND_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
            queueProv.deleteQueueRecord(q);
            continue;
          }
        }
      }
 else       if (task.equals(TASK_PROCESS_OUTGOING_MESSAGE)) {
        Message messageToSend=null;
        try {
          MessageProvider msgProv=MessageProvider.get(getApplicationContext());
          messageToSend=msgProv.searchForSingleRecord(q.getObject0Id());
        }
 catch (        RuntimeException e) {
          Log.i(TAG,""String_Node_Str"" + TASK_PROCESS_OUTGOING_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
          queueProv.deleteQueueRecord(q);
          continue;
        }
        PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
        Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject1Id());
        if (q.getRecordCount() == 0) {
          taskController.processOutgoingMessage(q,messageToSend,toPubkey,DO_POW,FIRST_ATTEMPT_TTL);
        }
 else {
          taskController.processOutgoingMessage(q,messageToSend,toPubkey,DO_POW,SUBSEQUENT_ATTEMPTS_TTL);
        }
      }
 else       if (task.equals(TASK_DISSEMINATE_MESSAGE)) {
        if (NetworkHelper.checkInternetAvailability() == true) {
          PayloadProvider payProv=PayloadProvider.get(getApplicationContext());
          Payload payloadToSend=payProv.searchForSingleRecord(q.getObject0Id());
          PubkeyProvider pubProv=PubkeyProvider.get(App.getContext());
          Pubkey toPubkey=pubProv.searchForSingleRecord(q.getObject1Id());
          taskController.disseminateMessage(q,payloadToSend,toPubkey,DO_POW);
        }
      }
 else       if (task.equals(TASK_CREATE_IDENTITY)) {
        taskController.createIdentity(q,DO_POW);
      }
 else       if (task.equals(TASK_DISSEMINATE_PUBKEY)) {
        if (NetworkHelper.checkInternetAvailability() == true) {
          PayloadProvider payProv=PayloadProvider.get(getApplicationContext());
          Payload payloadToSend=payProv.searchForSingleRecord(q.getObject0Id());
          taskController.disseminatePubkey(q,payloadToSend,DO_POW);
        }
      }
 else {
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + task);
      }
    }
    runPeriodicTasks();
  }
 else {
    runPeriodicTasks();
    if (checkIfDatabaseCleaningIsRequired()) {
      Intent intent=new Intent(getBaseContext(),DatabaseCleaningService.class);
      intent.putExtra(DatabaseCleaningService.EXTRA_RUN_DATABASE_CLEANING_ROUTINE,true);
      startService(intent);
    }
  }
}"
34265,"/** 
 * Handles requests sent to the BackgroundService via Intents
 * @param - An Intent object that has been received by the BackgroundService
 */
@Override protected void onHandleIntent(Intent i){
  Log.i(TAG,""String_Node_Str"");
  if (i.hasExtra(PERIODIC_BACKGROUND_PROCESSING_REQUEST)) {
    processTasks();
  }
 else   if (i.hasExtra(UI_REQUEST)) {
    String uiRequest=i.getStringExtra(UI_REQUEST);
    TaskController taskController=new TaskController();
    if (uiRequest.equals(UI_REQUEST_SEND_MESSAGE)) {
      Log.i(TAG,""String_Node_Str"");
      Bundle extras=i.getExtras();
      long messageID=extras.getLong(MESSAGE_ID);
      Message messageToSend=null;
      try {
        MessageProvider msgProv=MessageProvider.get(getApplicationContext());
        messageToSend=msgProv.searchForSingleRecord(messageID);
      }
 catch (      RuntimeException e) {
        Log.i(TAG,""String_Node_Str"" + UI_REQUEST_SEND_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
        return;
      }
      QueueRecordProcessor queueProc=new QueueRecordProcessor();
      QueueRecord queueRecord=queueProc.createAndSaveQueueRecord(TASK_SEND_MESSAGE,0,0,messageToSend,null);
      queueProc.createAndSaveQueueRecord(TASK_SEND_MESSAGE,(System.currentTimeMillis() / 1000) + FIRST_ATTEMPT_TTL,1,messageToSend,null);
      if (NetworkHelper.checkInternetAvailability() == true) {
        taskController.sendMessage(queueRecord,messageToSend,DO_POW,FIRST_ATTEMPT_TTL,FIRST_ATTEMPT_TTL);
      }
    }
 else     if (uiRequest.equals(UI_REQUEST_CREATE_IDENTITY)) {
      Log.i(TAG,""String_Node_Str"");
      Bundle extras=i.getExtras();
      long addressId=extras.getLong(ADDRESS_ID);
      Address address=null;
      try {
        AddressProvider addProv=AddressProvider.get(getApplicationContext());
        address=addProv.searchForSingleRecord(addressId);
      }
 catch (      RuntimeException e) {
        Log.i(TAG,""String_Node_Str"" + UI_REQUEST_CREATE_IDENTITY + ""String_Node_Str""+ ""String_Node_Str"");
        return;
      }
      QueueRecordProcessor queueProc=new QueueRecordProcessor();
      QueueRecord queueRecord=queueProc.createAndSaveQueueRecord(TASK_CREATE_IDENTITY,0,0,address,null);
      taskController.createIdentity(queueRecord,DO_POW);
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  Intent intent=new Intent(getApplicationContext(),BackgroundService.class);
  intent.putExtra(BackgroundService.PERIODIC_BACKGROUND_PROCESSING_REQUEST,BackgroundService.BACKGROUND_PROCESSING_REQUEST);
  PendingIntent pendingIntent=PendingIntent.getService(getApplicationContext(),0,intent,PendingIntent.FLAG_CANCEL_CURRENT);
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.SECOND,BACKGROUND_SERVICE_NORMAL_START_INTERVAL);
  Log.i(TAG,""String_Node_Str"" + BACKGROUND_SERVICE_NORMAL_START_INTERVAL + ""String_Node_Str"");
  AlarmManager am=(AlarmManager)getApplicationContext().getSystemService(Context.ALARM_SERVICE);
  am.set(AlarmManager.RTC_WAKEUP,cal.getTimeInMillis(),pendingIntent);
}","/** 
 * Handles requests sent to the BackgroundService via Intents
 * @param - An Intent object that has been received by the BackgroundService
 */
@Override protected void onHandleIntent(Intent i){
  Log.i(TAG,""String_Node_Str"");
  if (i.hasExtra(PERIODIC_BACKGROUND_PROCESSING_REQUEST)) {
    processTasks();
  }
 else   if (i.hasExtra(UI_REQUEST)) {
    String uiRequest=i.getStringExtra(UI_REQUEST);
    TaskController taskController=new TaskController();
    if (uiRequest.equals(UI_REQUEST_SEND_MESSAGE)) {
      Log.i(TAG,""String_Node_Str"");
      Bundle extras=i.getExtras();
      long messageID=extras.getLong(MESSAGE_ID);
      Message messageToSend=null;
      try {
        MessageProvider msgProv=MessageProvider.get(getApplicationContext());
        messageToSend=msgProv.searchForSingleRecord(messageID);
      }
 catch (      RuntimeException e) {
        Log.i(TAG,""String_Node_Str"" + UI_REQUEST_SEND_MESSAGE + ""String_Node_Str""+ ""String_Node_Str"");
        return;
      }
      QueueRecordProcessor queueProc=new QueueRecordProcessor();
      QueueRecord queueRecord=queueProc.createAndSaveQueueRecord(TASK_SEND_MESSAGE,0,0,messageToSend,null);
      long currentTime=System.currentTimeMillis() / 1000;
      queueProc.createAndSaveQueueRecord(TASK_SEND_MESSAGE,currentTime + FIRST_ATTEMPT_TTL,1,messageToSend,null);
      if (NetworkHelper.checkInternetAvailability() == true) {
        taskController.sendMessage(queueRecord,messageToSend,DO_POW,FIRST_ATTEMPT_TTL,FIRST_ATTEMPT_TTL);
      }
    }
 else     if (uiRequest.equals(UI_REQUEST_CREATE_IDENTITY)) {
      Log.i(TAG,""String_Node_Str"");
      Bundle extras=i.getExtras();
      long addressId=extras.getLong(ADDRESS_ID);
      Address address=null;
      try {
        AddressProvider addProv=AddressProvider.get(getApplicationContext());
        address=addProv.searchForSingleRecord(addressId);
      }
 catch (      RuntimeException e) {
        Log.i(TAG,""String_Node_Str"" + UI_REQUEST_CREATE_IDENTITY + ""String_Node_Str""+ ""String_Node_Str"");
        return;
      }
      QueueRecordProcessor queueProc=new QueueRecordProcessor();
      QueueRecord queueRecord=queueProc.createAndSaveQueueRecord(TASK_CREATE_IDENTITY,0,0,address,null);
      taskController.createIdentity(queueRecord,DO_POW);
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  Intent intent=new Intent(getApplicationContext(),BackgroundService.class);
  intent.putExtra(BackgroundService.PERIODIC_BACKGROUND_PROCESSING_REQUEST,BackgroundService.BACKGROUND_PROCESSING_REQUEST);
  PendingIntent pendingIntent=PendingIntent.getService(getApplicationContext(),0,intent,PendingIntent.FLAG_CANCEL_CURRENT);
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.SECOND,BACKGROUND_SERVICE_NORMAL_START_INTERVAL);
  Log.i(TAG,""String_Node_Str"" + BACKGROUND_SERVICE_NORMAL_START_INTERVAL + ""String_Node_Str"");
  AlarmManager am=(AlarmManager)getApplicationContext().getSystemService(Context.ALARM_SERVICE);
  am.set(AlarmManager.RTC_WAKEUP,cal.getTimeInMillis(),pendingIntent);
}"
34266,"/** 
 * Partially expand the sliding panel up to a specific offset
 * @param mSlideOffset Value between 0 and 1, where 0 is completely expanded.
 * @return true if the pane was slideable and is now expanded/in the process of expanding
 */
public boolean expandPanel(float mSlideOffset){
  return expandPanel(mSlideableView,0,mSlideOffset);
}","/** 
 * Partially expand the sliding panel up to a specific offset
 * @param mSlideOffset Value between 0 and 1, where 0 is completely expanded.
 * @return true if the pane was slideable and is now expanded/in the process of expanding
 */
public boolean expandPanel(float mSlideOffset){
  if (mSlideState == SlideState.EXPANDED)   return false;
  mSlideableView.setVisibility(View.VISIBLE);
  return expandPanel(mSlideableView,0,mSlideOffset);
}"
34267,"public boolean isSlidingEnabled(){
  return mIsSlidingEnabled && mSlideableView != null && mSlideableView.getVisibility() == View.VISIBLE;
}","public boolean isSlidingEnabled(){
  return mIsSlidingEnabled && mSlideableView != null;
}"
34268,"public void showPanel(){
  if (!isSlidingEnabled())   return;
  smoothSlideTo(0,0);
}","public void showPanel(){
  if (!isPanelHidden())   return;
  smoothSlideTo(0,0);
}"
34269,"public void hidePanel(){
  if (!isSlidingEnabled())   return;
  mIsPanelBeingHidden=true;
  int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
  smoothSlideTo(computeSlideOffset(newTop),0);
}","public void hidePanel(){
  mIsPanelBeingHidden=true;
  int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
  smoothSlideTo(computeSlideOffset(newTop),0);
}"
34270,"/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isSlidingEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}","/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isSlidingEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}"
34271,"@Override public void onViewCaptured(View capturedChild,int activePointerId){
}","@Override public void onViewCaptured(View capturedChild,int activePointerId){
  setAllChildrenVisible();
}"
34272,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.activity_demo);
  mLayout=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.i(TAG,""String_Node_Str"" + slideOffset);
      setActionBarTranslation(mLayout.getCurrentParalaxOffset());
    }
    @Override public void onPanelExpanded(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
  }
);
  TextView t=(TextView)findViewById(R.id.main);
  t=(TextView)findViewById(R.id.name);
  t.setText(Html.fromHtml(getString(R.string.hello)));
  Button f=(Button)findViewById(R.id.follow);
  f.setText(Html.fromHtml(getString(R.string.follow)));
  f.setMovementMethod(LinkMovementMethod.getInstance());
  f.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  boolean actionBarHidden=savedInstanceState != null && savedInstanceState.getBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,false);
  if (actionBarHidden) {
    int actionBarHeight=getActionBarHeight();
    setActionBarTranslation(-actionBarHeight);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.activity_demo);
  mLayout=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.i(TAG,""String_Node_Str"" + slideOffset);
      setActionBarTranslation(mLayout.getCurrentParalaxOffset());
    }
    @Override public void onPanelExpanded(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelHidden(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
  }
);
  TextView t=(TextView)findViewById(R.id.main);
  t=(TextView)findViewById(R.id.name);
  t.setText(Html.fromHtml(getString(R.string.hello)));
  Button f=(Button)findViewById(R.id.follow);
  f.setText(Html.fromHtml(getString(R.string.follow)));
  f.setMovementMethod(LinkMovementMethod.getInstance());
  f.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  boolean actionBarHidden=savedInstanceState != null && savedInstanceState.getBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,false);
  if (actionBarHidden) {
    int actionBarHeight=getActionBarHeight();
    setActionBarTranslation(-actionBarHeight);
  }
}"
34273,"@SuppressLint(""String_Node_Str"") private void onPanelDragged(int newTop){
  mSlideOffset=computeSlideOffset(newTop);
  if (mParallaxOffset > 0 && mSlideOffset >= 0) {
    int mainViewOffset=getCurrentParalaxOffset();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mMainView.setTranslationY(mainViewOffset);
    }
 else {
      AnimatorProxy.wrap(mMainView).setTranslationY(mainViewOffset);
    }
  }
  dispatchOnPanelSlide(mSlideableView);
  if (mSlideOffset <= 0 && !mOverlayContent) {
    LayoutParams lp=(LayoutParams)mMainView.getLayoutParams();
    lp.height=mIsSlidingUp ? (newTop - getPaddingBottom()) : (getHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight()- newTop);
    mMainView.requestLayout();
  }
}","@SuppressLint(""String_Node_Str"") private void onPanelDragged(int newTop){
  mSlideState=SlideState.DRAGGING;
  mSlideOffset=computeSlideOffset(newTop);
  if (mParallaxOffset > 0 && mSlideOffset >= 0) {
    int mainViewOffset=getCurrentParalaxOffset();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mMainView.setTranslationY(mainViewOffset);
    }
 else {
      AnimatorProxy.wrap(mMainView).setTranslationY(mainViewOffset);
    }
  }
  dispatchOnPanelSlide(mSlideableView);
  if (mSlideOffset <= 0 && !mOverlayContent) {
    LayoutParams lp=(LayoutParams)mMainView.getLayoutParams();
    lp.height=mIsSlidingUp ? (newTop - getPaddingBottom()) : (getHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight()- newTop);
    mMainView.requestLayout();
  }
}"
34274,"/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isSlidingEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}","/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isSlidingEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}"
34275,"/** 
 * Collapse the sliding pane if it is currently slideable. If first layout has already completed this will animate.
 * @return true if the pane was slideable and is now collapsed/in the process of collapsing
 */
public boolean collapsePanel(){
  if (isPanelHidden())   return false;
  return collapsePanel(mSlideableView,0);
}","/** 
 * Collapse the sliding pane if it is currently slideable. If first layout has already completed this will animate.
 * @return true if the pane was slideable and is now collapsed/in the process of collapsing
 */
public boolean collapsePanel(){
  if (mSlideState == SlideState.HIDDEN || mSlideState == SlideState.COLLAPSED)   return false;
  return collapsePanel(mSlideableView,0);
}"
34276,"@Override public void onViewDragStateChanged(int state){
  if (mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) {
    mSlideOffset=computeSlideOffset(mSlideableView.getTop());
    if (mSlideOffset == 1) {
      if (mSlideState != SlideState.EXPANDED) {
        updateObscuredViewVisibility();
        mSlideState=SlideState.EXPANDED;
        dispatchOnPanelExpanded(mSlideableView);
      }
    }
 else     if (mSlideOffset == 0) {
      if (mSlideState != SlideState.COLLAPSED) {
        mSlideState=SlideState.COLLAPSED;
        dispatchOnPanelCollapsed(mSlideableView);
      }
    }
 else     if (mSlideOffset < 0) {
      mSlideState=SlideState.HIDDEN;
      mIsPanelBeingHidden=false;
    }
 else     if (mSlideState != SlideState.ANCHORED) {
      updateObscuredViewVisibility();
      mSlideState=SlideState.ANCHORED;
      dispatchOnPanelAnchored(mSlideableView);
    }
  }
}","@Override public void onViewDragStateChanged(int state){
  if (mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) {
    mSlideOffset=computeSlideOffset(mSlideableView.getTop());
    if (mSlideOffset == 1) {
      if (mSlideState != SlideState.EXPANDED) {
        updateObscuredViewVisibility();
        mSlideState=SlideState.EXPANDED;
        dispatchOnPanelExpanded(mSlideableView);
      }
    }
 else     if (mSlideOffset == 0) {
      if (mSlideState != SlideState.COLLAPSED) {
        mSlideState=SlideState.COLLAPSED;
        dispatchOnPanelCollapsed(mSlideableView);
      }
    }
 else     if (mSlideOffset < 0) {
      mSlideState=SlideState.HIDDEN;
      mSlideableView.setVisibility(View.GONE);
      dispatchOnPanelHidden(mSlideableView);
    }
 else     if (mSlideState != SlideState.ANCHORED) {
      updateObscuredViewVisibility();
      mSlideState=SlideState.ANCHORED;
      dispatchOnPanelAnchored(mSlideableView);
    }
  }
}"
34277,"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  final int paddingLeft=getPaddingLeft();
  final int paddingTop=getPaddingTop();
  final int childCount=getChildCount();
  if (mFirstLayout) {
switch (mSlideState) {
case EXPANDED:
      mSlideOffset=1.0f;
    break;
case ANCHORED:
  mSlideOffset=mAnchorPoint;
break;
case HIDDEN:
int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
mSlideOffset=computeSlideOffset(newTop);
break;
default :
mSlideOffset=0.f;
break;
}
}
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
if (child.getVisibility() == GONE) {
continue;
}
final int childHeight=child.getMeasuredHeight();
int childTop=paddingTop;
if (child == mSlideableView) {
childTop=computePanelTopPosition(mSlideOffset);
}
if (!mIsSlidingUp) {
if (child == mMainView && !mOverlayContent) {
childTop=computePanelTopPosition(mSlideOffset) + mSlideableView.getMeasuredHeight();
}
}
final int childBottom=childTop + childHeight;
final int childLeft=paddingLeft;
final int childRight=childLeft + child.getMeasuredWidth();
child.layout(childLeft,childTop,childRight,childBottom);
}
if (mFirstLayout) {
updateObscuredViewVisibility();
}
mFirstLayout=false;
}","@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  final int paddingLeft=getPaddingLeft();
  final int paddingTop=getPaddingTop();
  final int childCount=getChildCount();
  if (mFirstLayout) {
switch (mSlideState) {
case EXPANDED:
      mSlideOffset=1.0f;
    break;
case ANCHORED:
  mSlideOffset=mAnchorPoint;
break;
case HIDDEN:
int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
mSlideOffset=computeSlideOffset(newTop);
break;
default :
mSlideOffset=0.f;
break;
}
}
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
if (child.getVisibility() == GONE && (i == 0 || mFirstLayout)) {
continue;
}
final int childHeight=child.getMeasuredHeight();
int childTop=paddingTop;
if (child == mSlideableView) {
childTop=computePanelTopPosition(mSlideOffset);
}
if (!mIsSlidingUp) {
if (child == mMainView && !mOverlayContent) {
childTop=computePanelTopPosition(mSlideOffset) + mSlideableView.getMeasuredHeight();
}
}
final int childBottom=childTop + childHeight;
final int childLeft=paddingLeft;
final int childRight=childLeft + child.getMeasuredWidth();
child.layout(childLeft,childTop,childRight,childBottom);
}
if (mFirstLayout) {
updateObscuredViewVisibility();
}
mFirstLayout=false;
}"
34278,"public void showPanel(){
  if (!isPanelHidden())   return;
  smoothSlideTo(0,0);
}","public void showPanel(){
  if (mSlideState != SlideState.HIDDEN)   return;
  mSlideableView.setVisibility(View.VISIBLE);
  requestLayout();
  smoothSlideTo(0,0);
}"
34279,"@Override public void onViewCaptured(View capturedChild,int activePointerId){
  setAllChildrenVisible();
}","@Override public void onViewCaptured(View capturedChild,int activePointerId){
}"
34280,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!mIsSlidingEnabled || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.onInterceptTouchEvent(ev);
  }
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mDragHelper.cancel();
    return false;
  }
  final float x=ev.getX();
  final float y=ev.getY();
  boolean interceptTap=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (isDragViewUnder((int)x,(int)y) && !mIsUsingDragViewTouchEvents) {
        interceptTap=true;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float adx=Math.abs(x - mInitialMotionX);
    final float ady=Math.abs(y - mInitialMotionY);
    final int dragSlop=mDragHelper.getTouchSlop();
    if (mIsUsingDragViewTouchEvents) {
      if (adx > mScrollTouchSlop && ady < mScrollTouchSlop) {
        return super.onInterceptTouchEvent(ev);
      }
 else       if (ady > mScrollTouchSlop) {
        interceptTap=isDragViewUnder((int)x,(int)y);
      }
    }
    if ((ady > dragSlop && adx > ady) || !isDragViewUnder((int)x,(int)y)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
}
final boolean interceptForDrag=mDragHelper.shouldInterceptTouchEvent(ev);
return interceptForDrag || interceptTap;
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !mIsSlidingEnabled || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.onInterceptTouchEvent(ev);
  }
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mDragHelper.cancel();
    return false;
  }
  final float x=ev.getX();
  final float y=ev.getY();
  boolean interceptTap=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (isDragViewUnder((int)x,(int)y) && !mIsUsingDragViewTouchEvents) {
        interceptTap=true;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float adx=Math.abs(x - mInitialMotionX);
    final float ady=Math.abs(y - mInitialMotionY);
    final int dragSlop=mDragHelper.getTouchSlop();
    if (mIsUsingDragViewTouchEvents) {
      if (adx > mScrollTouchSlop && ady < mScrollTouchSlop) {
        return super.onInterceptTouchEvent(ev);
      }
 else       if (ady > mScrollTouchSlop) {
        interceptTap=isDragViewUnder((int)x,(int)y);
      }
    }
    if ((ady > dragSlop && adx > ady) || !isDragViewUnder((int)x,(int)y)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
}
final boolean interceptForDrag=mDragHelper.shouldInterceptTouchEvent(ev);
return interceptForDrag || interceptTap;
}"
34281,"public SlidingUpPanelLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  if (isInEditMode()) {
    mShadowDrawable=null;
    mScrollTouchSlop=0;
    mDragHelper=null;
    return;
  }
  if (attrs != null) {
    TypedArray defAttrs=context.obtainStyledAttributes(attrs,DEFAULT_ATTRS);
    if (defAttrs != null) {
      int gravity=defAttrs.getInt(0,Gravity.NO_GRAVITY);
      if (gravity != Gravity.TOP && gravity != Gravity.BOTTOM) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      mIsSlidingUp=gravity == Gravity.BOTTOM;
    }
    defAttrs.recycle();
    TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.SlidingUpPanelLayout);
    if (ta != null) {
      mPanelHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_panelHeight,-1);
      mShadowHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_shadowHeight,-1);
      mParallaxOffset=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_paralaxOffset,-1);
      mMinFlingVelocity=ta.getInt(R.styleable.SlidingUpPanelLayout_flingVelocity,DEFAULT_MIN_FLING_VELOCITY);
      mCoveredFadeColor=ta.getColor(R.styleable.SlidingUpPanelLayout_fadeColor,DEFAULT_FADE_COLOR);
      mDragViewResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_dragView,-1);
      mOverlayContent=ta.getBoolean(R.styleable.SlidingUpPanelLayout_overlay,DEFAULT_OVERLAY_FLAG);
      mAnchorPoint=ta.getFloat(R.styleable.SlidingUpPanelLayout_anchorPoint,1.0f);
    }
    ta.recycle();
  }
  final float density=context.getResources().getDisplayMetrics().density;
  if (mPanelHeight == -1) {
    mPanelHeight=(int)(DEFAULT_PANEL_HEIGHT * density + 0.5f);
  }
  if (mShadowHeight == -1) {
    mShadowHeight=(int)(DEFAULT_SHADOW_HEIGHT * density + 0.5f);
  }
  if (mParallaxOffset == -1) {
    mParallaxOffset=(int)(DEFAULT_PARALAX_OFFSET * density);
  }
  if (mShadowHeight > 0) {
    if (mIsSlidingUp) {
      mShadowDrawable=getResources().getDrawable(R.drawable.above_shadow);
    }
 else {
      mShadowDrawable=getResources().getDrawable(R.drawable.below_shadow);
    }
  }
 else {
    mShadowDrawable=null;
  }
  setWillNotDraw(false);
  mDragHelper=ViewDragHelper.create(this,0.5f,new DragHelperCallback());
  mDragHelper.setMinVelocity(mMinFlingVelocity * density);
  mIsSlidingEnabled=true;
  mIsPanelBeingHidden=false;
  ViewConfiguration vc=ViewConfiguration.get(context);
  mScrollTouchSlop=vc.getScaledTouchSlop();
}","public SlidingUpPanelLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  if (isInEditMode()) {
    mShadowDrawable=null;
    mScrollTouchSlop=0;
    mDragHelper=null;
    return;
  }
  if (attrs != null) {
    TypedArray defAttrs=context.obtainStyledAttributes(attrs,DEFAULT_ATTRS);
    if (defAttrs != null) {
      int gravity=defAttrs.getInt(0,Gravity.NO_GRAVITY);
      if (gravity != Gravity.TOP && gravity != Gravity.BOTTOM) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      mIsSlidingUp=gravity == Gravity.BOTTOM;
    }
    defAttrs.recycle();
    TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.SlidingUpPanelLayout);
    if (ta != null) {
      mPanelHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_panelHeight,-1);
      mShadowHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_shadowHeight,-1);
      mParallaxOffset=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_paralaxOffset,-1);
      mMinFlingVelocity=ta.getInt(R.styleable.SlidingUpPanelLayout_flingVelocity,DEFAULT_MIN_FLING_VELOCITY);
      mCoveredFadeColor=ta.getColor(R.styleable.SlidingUpPanelLayout_fadeColor,DEFAULT_FADE_COLOR);
      mDragViewResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_dragView,-1);
      mOverlayContent=ta.getBoolean(R.styleable.SlidingUpPanelLayout_overlay,DEFAULT_OVERLAY_FLAG);
      mAnchorPoint=ta.getFloat(R.styleable.SlidingUpPanelLayout_anchorPoint,1.0f);
    }
    ta.recycle();
  }
  final float density=context.getResources().getDisplayMetrics().density;
  if (mPanelHeight == -1) {
    mPanelHeight=(int)(DEFAULT_PANEL_HEIGHT * density + 0.5f);
  }
  if (mShadowHeight == -1) {
    mShadowHeight=(int)(DEFAULT_SHADOW_HEIGHT * density + 0.5f);
  }
  if (mParallaxOffset == -1) {
    mParallaxOffset=(int)(DEFAULT_PARALAX_OFFSET * density);
  }
  if (mShadowHeight > 0) {
    if (mIsSlidingUp) {
      mShadowDrawable=getResources().getDrawable(R.drawable.above_shadow);
    }
 else {
      mShadowDrawable=getResources().getDrawable(R.drawable.below_shadow);
    }
  }
 else {
    mShadowDrawable=null;
  }
  setWillNotDraw(false);
  mDragHelper=ViewDragHelper.create(this,0.5f,new DragHelperCallback());
  mDragHelper.setMinVelocity(mMinFlingVelocity * density);
  mIsSlidingEnabled=true;
  ViewConfiguration vc=ViewConfiguration.get(context);
  mScrollTouchSlop=vc.getScaledTouchSlop();
}"
34282,"public void hidePanel(){
  mIsPanelBeingHidden=true;
  int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
  smoothSlideTo(computeSlideOffset(newTop),0);
}","public void hidePanel(){
  if (mSlideState == SlideState.DRAGGING || mSlideState == SlideState.HIDDEN)   return;
  int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
  smoothSlideTo(computeSlideOffset(newTop),0);
}"
34283,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else   if (heightMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int childCount=getChildCount();
  if (childCount != 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mMainView=getChildAt(0);
  mSlideableView=getChildAt(1);
  int layoutHeight=heightSize - getPaddingTop() - getPaddingBottom();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (child.getVisibility() == GONE) {
      continue;
    }
    int height=layoutHeight;
    if (child == mMainView && !mOverlayContent && mSlideState != SlideState.HIDDEN) {
      height-=mPanelHeight;
    }
    if (child == mSlideableView) {
      mSlideRange=height - mPanelHeight;
    }
    int childWidthSpec;
    if (lp.width == LayoutParams.WRAP_CONTENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.AT_MOST);
    }
 else     if (lp.width == LayoutParams.MATCH_PARENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY);
    }
 else {
      childWidthSpec=MeasureSpec.makeMeasureSpec(lp.width,MeasureSpec.EXACTLY);
    }
    int childHeightSpec;
    if (lp.height == LayoutParams.WRAP_CONTENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST);
    }
 else     if (lp.height == LayoutParams.MATCH_PARENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
    }
 else {
      childHeightSpec=MeasureSpec.makeMeasureSpec(lp.height,MeasureSpec.EXACTLY);
    }
    child.measure(childWidthSpec,childHeightSpec);
  }
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else   if (heightMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int childCount=getChildCount();
  if (childCount != 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mMainView=getChildAt(0);
  mSlideableView=getChildAt(1);
  if (mSlideableView.getVisibility() == GONE) {
    mSlideState=SlideState.HIDDEN;
  }
  int layoutHeight=heightSize - getPaddingTop() - getPaddingBottom();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (child.getVisibility() == GONE && i == 0) {
      continue;
    }
    int height=layoutHeight;
    if (child == mMainView && !mOverlayContent && mSlideState != SlideState.HIDDEN) {
      height-=mPanelHeight;
    }
    if (child == mSlideableView) {
      mSlideRange=height - mPanelHeight;
    }
    int childWidthSpec;
    if (lp.width == LayoutParams.WRAP_CONTENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.AT_MOST);
    }
 else     if (lp.width == LayoutParams.MATCH_PARENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY);
    }
 else {
      childWidthSpec=MeasureSpec.makeMeasureSpec(lp.width,MeasureSpec.EXACTLY);
    }
    int childHeightSpec;
    if (lp.height == LayoutParams.WRAP_CONTENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST);
    }
 else     if (lp.height == LayoutParams.MATCH_PARENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
    }
 else {
      childHeightSpec=MeasureSpec.makeMeasureSpec(lp.height,MeasureSpec.EXACTLY);
    }
    child.measure(childWidthSpec,childHeightSpec);
  }
  setMeasuredDimension(widthSize,heightSize);
}"
34284,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.activity_demo);
  final SlidingUpPanelLayout layout=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  layout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.i(TAG,""String_Node_Str"" + slideOffset);
      setActionBarTranslation(layout.getCurrentParalaxOffset());
    }
    @Override public void onPanelExpanded(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
  }
);
  TextView t=(TextView)findViewById(R.id.main);
  t.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  t=(TextView)findViewById(R.id.name);
  t.setText(Html.fromHtml(getString(R.string.hello)));
  Button f=(Button)findViewById(R.id.follow);
  f.setText(Html.fromHtml(getString(R.string.follow)));
  f.setMovementMethod(LinkMovementMethod.getInstance());
  f.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  boolean actionBarHidden=savedInstanceState != null ? savedInstanceState.getBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,false) : false;
  if (actionBarHidden) {
    getActionBar().hide();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.activity_demo);
  mLayout=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.i(TAG,""String_Node_Str"" + slideOffset);
      setActionBarTranslation(mLayout.getCurrentParalaxOffset());
    }
    @Override public void onPanelExpanded(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
  }
);
  TextView t=(TextView)findViewById(R.id.main);
  t.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  t=(TextView)findViewById(R.id.name);
  t.setText(Html.fromHtml(getString(R.string.hello)));
  Button f=(Button)findViewById(R.id.follow);
  f.setText(Html.fromHtml(getString(R.string.follow)));
  f.setMovementMethod(LinkMovementMethod.getInstance());
  f.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  boolean actionBarHidden=savedInstanceState != null && savedInstanceState.getBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,false);
  if (actionBarHidden) {
    int actionBarHeight=getActionBarHeight();
    setActionBarTranslation(-actionBarHeight);
  }
}"
34285,"public void setActionBarTranslation(float y){
  int actionBarHeight=0;
  TypedValue tv=new TypedValue();
  if (getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {
    actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
  }
  ViewGroup content=((ViewGroup)findViewById(android.R.id.content).getParent());
  int children=content.getChildCount();
  for (int i=0; i < children; i++) {
    View child=content.getChildAt(i);
    if (child.getId() != android.R.id.content) {
      if (y <= -actionBarHeight) {
        child.setVisibility(View.GONE);
      }
 else {
        child.setVisibility(View.VISIBLE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
          child.setTranslationY(y);
        }
 else {
          AnimatorProxy.wrap(child).setTranslationY(y);
        }
      }
    }
  }
}","public void setActionBarTranslation(float y){
  int actionBarHeight=getActionBarHeight();
  ViewGroup content=((ViewGroup)findViewById(android.R.id.content).getParent());
  int children=content.getChildCount();
  for (int i=0; i < children; i++) {
    View child=content.getChildAt(i);
    if (child.getId() != android.R.id.content) {
      if (y <= -actionBarHeight) {
        child.setVisibility(View.GONE);
      }
 else {
        child.setVisibility(View.VISIBLE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
          child.setTranslationY(y);
        }
 else {
          AnimatorProxy.wrap(child).setTranslationY(y);
        }
      }
    }
  }
}"
34286,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,!getActionBar().isShowing());
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,mLayout.isExpanded());
}"
34287,"@Override public void onPanelSlide(View panel,float slideOffset){
  Log.i(TAG,""String_Node_Str"" + slideOffset);
  setActionBarTranslation(layout.getCurrentParalaxOffset());
}","@Override public void onPanelSlide(View panel,float slideOffset){
  Log.i(TAG,""String_Node_Str"" + slideOffset);
  setActionBarTranslation(mLayout.getCurrentParalaxOffset());
}"
34288,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!mCanSlide || !mIsSlidingEnabled || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.onInterceptTouchEvent(ev);
  }
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mDragHelper.cancel();
    return false;
  }
  final float x=ev.getX();
  final float y=ev.getY();
  boolean interceptTap=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (isDragViewUnder((int)x,(int)y) && !mIsUsingDragViewTouchEvents) {
        interceptTap=true;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float adx=Math.abs(x - mInitialMotionX);
    final float ady=Math.abs(y - mInitialMotionY);
    final int dragSlop=mDragHelper.getTouchSlop();
    if (mIsUsingDragViewTouchEvents) {
      if (adx > mScrollTouchSlop && ady < mScrollTouchSlop) {
        return super.onInterceptTouchEvent(ev);
      }
 else       if (ady > mScrollTouchSlop) {
        interceptTap=isDragViewUnder((int)x,(int)y);
      }
    }
    if (ady > dragSlop && adx > ady) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
}
final boolean interceptForDrag=mDragHelper.shouldInterceptTouchEvent(ev);
return interceptForDrag || interceptTap;
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!mCanSlide || !mIsSlidingEnabled || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.onInterceptTouchEvent(ev);
  }
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mDragHelper.cancel();
    return false;
  }
  final float x=ev.getX();
  final float y=ev.getY();
  boolean interceptTap=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (isDragViewUnder((int)x,(int)y) && !mIsUsingDragViewTouchEvents) {
        interceptTap=true;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float adx=Math.abs(x - mInitialMotionX);
    final float ady=Math.abs(y - mInitialMotionY);
    final int dragSlop=mDragHelper.getTouchSlop();
    if (mIsUsingDragViewTouchEvents) {
      if (adx > mScrollTouchSlop && ady < mScrollTouchSlop) {
        return super.onInterceptTouchEvent(ev);
      }
 else       if (ady > mScrollTouchSlop) {
        interceptTap=isDragViewUnder((int)x,(int)y);
      }
    }
    if ((ady > dragSlop && adx > ady) || !isDragViewUnder((int)x,(int)y)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
}
final boolean interceptForDrag=mDragHelper.shouldInterceptTouchEvent(ev);
return interceptForDrag || interceptTap;
}"
34289,"public void addConditions(List<Condition> conditions){
  conditions.addAll(conditions);
}","public void addConditions(List<Condition> conditions){
  this.conditions.addAll(conditions);
}"
34290,"/** 
 * Builds a   {@link Query} by parsing an array of arguments.
 * @param session QuerySession
 * @param arguments String[] Parameter:value list
 * @return {@link Query} Database query object
 */
public static CompletableFuture<Query> fromArguments(QuerySession session,@Nullable String[] arguments) throws ParameterException {
  checkNotNull(session);
  Query query=new Query();
  CompletableFuture<Query> future=new CompletableFuture<>();
  Map<String,String> definedParameters=new HashMap<>();
  if (arguments.length > 0) {
    List<CompletableFuture<?>> futures=new ArrayList<>();
    for (    String arg : arguments) {
      Optional<CompletableFuture<?>> listenable;
      if (flagPattern.matcher(arg).matches()) {
        listenable=parseFlagFromArgument(session,query,arg);
      }
 else {
        Pair<String,String> pair=getParameterKeyValue(arg);
        listenable=parseParameterFromArgument(session,query,pair);
        definedParameters.put(pair.getKey(),pair.getValue());
      }
      if (listenable.isPresent()) {
        futures.add(listenable.get());
      }
    }
    if (!futures.isEmpty()) {
      CompletableFuture<Void> combinedFuture=CompletableFuture.<Void>allOf(futures.toArray(new CompletableFuture[futures.size()]));
      combinedFuture.thenAccept((q) -> future.complete(query));
    }
 else {
      future.complete(query);
    }
  }
 else {
    future.complete(query);
  }
  if (Prism.getConfig().getNode(""String_Node_Str"",""String_Node_Str"").getBoolean()) {
    String defaultsUsed=""String_Node_Str"";
    for (    ParameterHandler handler : Prism.getParameterHandlers()) {
      boolean aliasFound=false;
      for (      String alias : handler.getAliases()) {
        if (definedParameters.containsKey(alias)) {
          aliasFound=true;
          break;
        }
      }
      if (!aliasFound) {
        Optional<Pair<String,String>> pair=handler.processDefault(session,query);
        if (pair.isPresent()) {
          defaultsUsed+=pair.get().getKey() + ""String_Node_Str"" + pair.get().getValue()+ ""String_Node_Str"";
        }
      }
    }
    if (!defaultsUsed.isEmpty()) {
      session.getCommandSource().get().sendMessage(Format.subduedHeading(Text.of(String.format(""String_Node_Str"",defaultsUsed))));
    }
  }
  return future;
}","/** 
 * Builds a   {@link Query} by parsing an array of arguments.
 * @param session QuerySession
 * @param arguments String[] Parameter:value list
 * @return {@link Query} Database query object
 */
public static CompletableFuture<Query> fromArguments(QuerySession session,@Nullable String[] arguments) throws ParameterException {
  checkNotNull(session);
  Query query=new Query();
  CompletableFuture<Query> future=new CompletableFuture<>();
  Map<String,String> definedParameters=new HashMap<>();
  if (arguments != null && arguments.length > 0) {
    List<CompletableFuture<?>> futures=new ArrayList<>();
    for (    String arg : arguments) {
      Optional<CompletableFuture<?>> listenable;
      if (flagPattern.matcher(arg).matches()) {
        listenable=parseFlagFromArgument(session,query,arg);
      }
 else {
        Pair<String,String> pair=getParameterKeyValue(arg);
        listenable=parseParameterFromArgument(session,query,pair);
        definedParameters.put(pair.getKey(),pair.getValue());
      }
      if (listenable.isPresent()) {
        futures.add(listenable.get());
      }
    }
    if (!futures.isEmpty()) {
      CompletableFuture<Void> combinedFuture=CompletableFuture.<Void>allOf(futures.toArray(new CompletableFuture<?>[futures.size()]));
      combinedFuture.thenAccept((q) -> future.complete(query));
    }
 else {
      future.complete(query);
    }
  }
 else {
    future.complete(query);
  }
  if (Prism.getConfig().getNode(""String_Node_Str"",""String_Node_Str"").getBoolean()) {
    String defaultsUsed=""String_Node_Str"";
    for (    ParameterHandler handler : Prism.getParameterHandlers()) {
      boolean aliasFound=false;
      for (      String alias : handler.getAliases()) {
        if (definedParameters.containsKey(alias)) {
          aliasFound=true;
          break;
        }
      }
      if (!aliasFound) {
        Optional<Pair<String,String>> pair=handler.processDefault(session,query);
        if (pair.isPresent()) {
          defaultsUsed+=pair.get().getKey() + ""String_Node_Str"" + pair.get().getValue()+ ""String_Node_Str"";
        }
      }
    }
    if (!defaultsUsed.isEmpty()) {
      session.getCommandSource().get().sendMessage(Format.subduedHeading(Text.of(String.format(""String_Node_Str"",defaultsUsed))));
    }
  }
  return future;
}"
34291,"@Override public ActionableResult rollback() throws Exception {
  Optional<Object> optionalOriginal=data.get(DataQueries.OriginalBlock);
  if (!optionalOriginal.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID);
  }
  DataView finalBlock=((DataView)optionalOriginal.get()).copy();
  Optional<Object> optionalLocation=data.get(DataQueries.Location);
  if (!optionalLocation.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID_LOCATION);
  }
  finalBlock=formatBlockData(finalBlock,optionalLocation);
  Optional<BlockSnapshot> optionalSnapshot=Prism.getGame().getRegistry().createBuilder(Builder.class).build(finalBlock);
  if (!optionalSnapshot.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID);
  }
  BlockSnapshot snapshot=optionalSnapshot.get();
  if (BlockUtil.rejectIllegalApplierBlock(snapshot.getState().getType())) {
    return ActionableResult.skipped(SkipReason.ILLEGAL_BLOCK);
  }
  BlockSnapshot original=snapshot.getLocation().get().getBlock().snapshotFor(snapshot.getLocation().get());
  if (!optionalSnapshot.get().restore(true,BlockChangeFlag.NONE)) {
    return ActionableResult.skipped(SkipReason.UNKNOWN);
  }
  BlockSnapshot resultingBlock=snapshot.getLocation().get().getBlock().snapshotFor(snapshot.getLocation().get());
  return ActionableResult.success(new Transaction<>(original,resultingBlock));
}","@Override public ActionableResult rollback() throws Exception {
  Optional<Object> optionalOriginal=data.get(DataQueries.OriginalBlock);
  if (!optionalOriginal.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID);
  }
  DataView finalBlock=((DataView)optionalOriginal.get()).copy();
  Optional<Object> optionalLocation=data.get(DataQueries.Location);
  if (!optionalLocation.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID_LOCATION);
  }
  finalBlock=formatBlockData(finalBlock,optionalLocation);
  Optional<BlockSnapshot> optionalSnapshot=Prism.getGame().getRegistry().createBuilder(Builder.class).build(finalBlock);
  if (!optionalSnapshot.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID);
  }
  BlockSnapshot snapshot=optionalSnapshot.get();
  if (!snapshot.getLocation().isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID_LOCATION);
  }
  Location<World> location=snapshot.getLocation().get();
  if (BlockUtil.rejectIllegalApplierBlock(snapshot.getState().getType())) {
    return ActionableResult.skipped(SkipReason.ILLEGAL_BLOCK);
  }
  BlockSnapshot original=location.getBlock().snapshotFor(location);
  if (!optionalSnapshot.get().restore(true,BlockChangeFlag.NONE)) {
    return ActionableResult.skipped(SkipReason.UNKNOWN);
  }
  BlockSnapshot resultingBlock=location.getBlock().snapshotFor(location);
  return ActionableResult.success(new Transaction<>(original,resultingBlock));
}"
34292,"@Override public ActionableResult restore() throws Exception {
  Optional<Object> optionalFinal=data.get(DataQueries.ReplacementBlock);
  if (!optionalFinal.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID);
  }
  DataView finalBlock=((DataView)optionalFinal.get()).copy();
  Optional<Object> optionalLocation=data.get(DataQueries.Location);
  if (!optionalLocation.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID_LOCATION);
  }
  finalBlock=formatBlockData(finalBlock,optionalLocation);
  Optional<BlockSnapshot> optionalSnapshot=Prism.getGame().getRegistry().createBuilder(Builder.class).build(finalBlock);
  if (!optionalSnapshot.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID);
  }
  BlockSnapshot snapshot=optionalSnapshot.get();
  if (BlockUtil.rejectIllegalApplierBlock(snapshot.getState().getType())) {
    return ActionableResult.skipped(SkipReason.ILLEGAL_BLOCK);
  }
  BlockSnapshot original=snapshot.getLocation().get().getBlock().snapshotFor(snapshot.getLocation().get());
  if (!optionalSnapshot.get().restore(true,BlockChangeFlag.NONE)) {
    return ActionableResult.skipped(SkipReason.UNKNOWN);
  }
  BlockSnapshot resultingBlock=snapshot.getLocation().get().getBlock().snapshotFor(snapshot.getLocation().get());
  return ActionableResult.success(new Transaction<>(original,resultingBlock));
}","@Override public ActionableResult restore() throws Exception {
  Optional<Object> optionalFinal=data.get(DataQueries.ReplacementBlock);
  if (!optionalFinal.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID);
  }
  DataView finalBlock=((DataView)optionalFinal.get()).copy();
  Optional<Object> optionalLocation=data.get(DataQueries.Location);
  if (!optionalLocation.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID_LOCATION);
  }
  finalBlock=formatBlockData(finalBlock,optionalLocation);
  Optional<BlockSnapshot> optionalSnapshot=Prism.getGame().getRegistry().createBuilder(Builder.class).build(finalBlock);
  if (!optionalSnapshot.isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID);
  }
  BlockSnapshot snapshot=optionalSnapshot.get();
  if (!snapshot.getLocation().isPresent()) {
    return ActionableResult.skipped(SkipReason.INVALID_LOCATION);
  }
  Location<World> location=snapshot.getLocation().get();
  if (BlockUtil.rejectIllegalApplierBlock(snapshot.getState().getType())) {
    return ActionableResult.skipped(SkipReason.ILLEGAL_BLOCK);
  }
  BlockSnapshot original=location.getBlock().snapshotFor(location);
  if (!optionalSnapshot.get().restore(true,BlockChangeFlag.NONE)) {
    return ActionableResult.skipped(SkipReason.UNKNOWN);
  }
  BlockSnapshot resultingBlock=location.getBlock().snapshotFor(location);
  return ActionableResult.success(new Transaction<>(original,resultingBlock));
}"
34293,"public static CommandSpec getCommand(){
  return CommandSpec.builder().permission(""String_Node_Str"").executor((source,args) -> {
    if (!(source instanceof Player)) {
      source.sendMessage(Format.error(""String_Node_Str""));
      return CommandResult.empty();
    }
    List<ActionableResult> results=Prism.getLastActionResults().get(((Player)source).getUniqueId());
    if (results == null) {
      source.sendMessage(Format.error(""String_Node_Str""));
      return CommandResult.empty();
    }
    results=Lists.reverse(results);
    int applied=0;
    int skipped=0;
    for (    ActionableResult result : results) {
      if (result.getTransaction().isPresent()) {
        Object rawOriginal=result.getTransaction().get().getOriginal();
        Object rawFinal=result.getTransaction().get().getFinal();
        if (rawOriginal instanceof BlockSnapshot) {
          if (((BlockSnapshot)rawOriginal).restore(true,BlockChangeFlag.NONE)) {
            applied++;
          }
 else {
            skipped++;
          }
        }
        if (rawFinal instanceof Entity) {
          Entity entity=(Entity)rawFinal;
          if (!entity.isRemoved()) {
            entity.remove();
            applied++;
          }
 else {
            skipped++;
          }
        }
      }
 else {
        skipped++;
      }
    }
    Map<String,String> tokens=new HashMap<>();
    tokens.put(""String_Node_Str"",""String_Node_Str"" + applied);
    tokens.put(""String_Node_Str"",""String_Node_Str"" + skipped);
    String messageTemplate=null;
    if (skipped > 0) {
      messageTemplate=Translation.from(""String_Node_Str"");
    }
 else {
      messageTemplate=Translation.from(""String_Node_Str"");
    }
    source.sendMessage(Format.heading(Text.of(Template.parseTemplate(messageTemplate,tokens)),""String_Node_Str"",Format.bonus(Translation.from(""String_Node_Str""))));
    return CommandResult.success();
  }
).build();
}","public static CommandSpec getCommand(){
  return CommandSpec.builder().permission(""String_Node_Str"").executor((source,args) -> {
    if (!(source instanceof Player)) {
      source.sendMessage(Format.error(""String_Node_Str""));
      return CommandResult.empty();
    }
    List<ActionableResult> results=Prism.getLastActionResults().get(((Player)source).getUniqueId());
    if (results == null || results.isEmpty()) {
      source.sendMessage(Format.error(""String_Node_Str""));
      return CommandResult.empty();
    }
    results=Lists.reverse(results);
    int applied=0;
    int skipped=0;
    for (    ActionableResult result : results) {
      if (result.getTransaction().isPresent()) {
        Object rawOriginal=result.getTransaction().get().getOriginal();
        Object rawFinal=result.getTransaction().get().getFinal();
        if (rawOriginal instanceof BlockSnapshot) {
          if (((BlockSnapshot)rawOriginal).restore(true,BlockChangeFlag.NONE)) {
            applied++;
          }
 else {
            skipped++;
          }
        }
        if (rawFinal instanceof Entity) {
          Entity entity=(Entity)rawFinal;
          if (!entity.isRemoved()) {
            entity.remove();
            applied++;
          }
 else {
            skipped++;
          }
        }
      }
 else {
        skipped++;
      }
    }
    Map<String,String> tokens=new HashMap<>();
    tokens.put(""String_Node_Str"",""String_Node_Str"" + applied);
    tokens.put(""String_Node_Str"",""String_Node_Str"" + skipped);
    String messageTemplate=null;
    if (skipped > 0) {
      messageTemplate=Translation.from(""String_Node_Str"");
    }
 else {
      messageTemplate=Translation.from(""String_Node_Str"");
    }
    source.sendMessage(Format.heading(Text.of(Template.parseTemplate(messageTemplate,tokens)),""String_Node_Str"",Format.bonus(Translation.from(""String_Node_Str""))));
    return CommandResult.success();
  }
).build();
}"
34294,"/** 
 * Get a list of all LIQUID block types.
 * @return List<BlockType>
 */
public static List<BlockType> getLiquidBlockTypes(){
  List<BlockType> liquids=new ArrayList<>();
  Collection<BlockType> types=Prism.getGame().getRegistry().getAllOf(BlockType.class);
  for (  BlockType type : types) {
    Optional<MatterProperty> property=type.getProperty(MatterProperty.class);
    if (property.isPresent() && property.get().equals(Matter.LIQUID)) {
      liquids.add(type);
    }
  }
  liquids.add(BlockTypes.LAVA);
  liquids.add(BlockTypes.FLOWING_LAVA);
  liquids.add(BlockTypes.WATER);
  liquids.add(BlockTypes.FLOWING_WATER);
  return liquids;
}","/** 
 * Get a list of all LIQUID block types.
 * @return List<BlockType>
 */
public static List<BlockType> getLiquidBlockTypes(){
  List<BlockType> liquids=new ArrayList<>();
  Collection<BlockType> types=Prism.getGame().getRegistry().getAllOf(BlockType.class);
  for (  BlockType type : types) {
    Optional<MatterProperty> property=type.getProperty(MatterProperty.class);
    if (property.isPresent() && Objects.equals(property.get().getValue(),Matter.LIQUID)) {
      liquids.add(type);
    }
  }
  liquids.add(BlockTypes.LAVA);
  liquids.add(BlockTypes.FLOWING_LAVA);
  liquids.add(BlockTypes.WATER);
  liquids.add(BlockTypes.FLOWING_WATER);
  return liquids;
}"
34295,"@Override public CompletableFuture<List<Result>> query(QuerySession session,boolean translate) throws Exception {
  List<Result> results=new ArrayList<>();
  CompletableFuture<List<Result>> future=new CompletableFuture<>();
  SQLQuery query=H2SQLQuery.from(session);
  Prism.getLogger().debug(""String_Node_Str"" + query);
  try (Connection conn=H2StorageAdapter.getConnection();PreparedStatement statement=conn.prepareStatement(query.toString());ResultSet rs=statement.executeQuery()){
    List<UUID> uuidsPendingLookup=new ArrayList<>();
    while (rs.next()) {
      Result result=Result.from(rs.getString(DataQueries.EventName.toString()),!session.hasFlag(Flag.NO_GROUP));
      DataContainer data=new MemoryDataContainer();
      data.set(DataQueries.EventName,rs.getString(DataQueries.EventName.toString()));
      data.set(DataQueries.Created,rs.getLong(DataQueries.Created.toString()));
      String target=rs.getString(DataQueries.Target.toString());
      data.set(DataQueries.Target,target != null ? target : ""String_Node_Str"");
      if (!session.hasFlag(Flag.NO_GROUP)) {
        data.set(DataQueries.Count,rs.getInt(""String_Node_Str""));
      }
 else {
        DataContainer loc=new MemoryDataContainer();
        loc.set(DataQueries.X,rs.getInt(DataQueries.X.toString()));
        loc.set(DataQueries.Y,rs.getInt(DataQueries.Y.toString()));
        loc.set(DataQueries.Z,rs.getInt(DataQueries.Z.toString()));
        loc.set(DataQueries.WorldUuid,rs.getString(DataQueries.WorldUuid.toString()));
        data.set(DataQueries.Location,loc);
        JsonObject json=new JsonParser().parse(rs.getString(""String_Node_Str"")).getAsJsonObject();
        DataView extra=DataUtil.dataViewFromJson(json);
        for (        DataQuery key : extra.getKeys(false)) {
          data.set(key,extra.get(key).get());
        }
      }
      String player=rs.getString(DataQueries.Player.toString());
      if (player != null && !player.isEmpty()) {
        data.set(DataQueries.Cause,player);
        if (translate) {
          uuidsPendingLookup.add(UUID.fromString(player));
        }
      }
 else {
        data.set(DataQueries.Cause,rs.getString(DataQueries.Cause.toString()));
      }
      result.data=data;
      results.add(result);
    }
    if (translate && !uuidsPendingLookup.isEmpty()) {
      DataUtil.translateUuidsToNames(results,uuidsPendingLookup).thenAccept(future::complete);
    }
 else {
      future.complete(results);
    }
  }
   return future;
}","@Override public CompletableFuture<List<Result>> query(QuerySession session,boolean translate) throws Exception {
  List<Result> results=new ArrayList<>();
  CompletableFuture<List<Result>> future=new CompletableFuture<>();
  SQLQuery query=H2SQLQuery.from(session);
  Prism.getLogger().debug(""String_Node_Str"" + query);
  try (Connection conn=H2StorageAdapter.getConnection();PreparedStatement statement=conn.prepareStatement(query.toString());ResultSet rs=statement.executeQuery()){
    List<UUID> uuidsPendingLookup=new ArrayList<>();
    while (rs.next()) {
      Result result=Result.from(rs.getString(DataQueries.EventName.toString()),!session.hasFlag(Flag.NO_GROUP));
      DataContainer data=new MemoryDataContainer();
      data.set(DataQueries.EventName,rs.getString(DataQueries.EventName.toString()));
      String target=rs.getString(DataQueries.Target.toString());
      data.set(DataQueries.Target,target != null ? target : ""String_Node_Str"");
      if (!session.hasFlag(Flag.NO_GROUP)) {
        data.set(DataQueries.Count,rs.getInt(""String_Node_Str""));
      }
 else {
        DataContainer loc=new MemoryDataContainer();
        loc.set(DataQueries.X,rs.getInt(DataQueries.X.toString()));
        loc.set(DataQueries.Y,rs.getInt(DataQueries.Y.toString()));
        loc.set(DataQueries.Z,rs.getInt(DataQueries.Z.toString()));
        loc.set(DataQueries.WorldUuid,rs.getString(DataQueries.WorldUuid.toString()));
        data.set(DataQueries.Location,loc);
        data.set(DataQueries.Created,rs.getLong(DataQueries.Created.toString()));
        JsonObject json=new JsonParser().parse(rs.getString(""String_Node_Str"")).getAsJsonObject();
        DataView extra=DataUtil.dataViewFromJson(json);
        for (        DataQuery key : extra.getKeys(false)) {
          data.set(key,extra.get(key).get());
        }
      }
      String player=rs.getString(DataQueries.Player.toString());
      if (player != null && !player.isEmpty()) {
        data.set(DataQueries.Cause,player);
        if (translate) {
          uuidsPendingLookup.add(UUID.fromString(player));
        }
      }
 else {
        data.set(DataQueries.Cause,rs.getString(DataQueries.Cause.toString()));
      }
      result.data=data;
      results.add(result);
    }
    if (translate && !uuidsPendingLookup.isEmpty()) {
      DataUtil.translateUuidsToNames(results,uuidsPendingLookup).thenAccept(future::complete);
    }
 else {
      future.complete(results);
    }
  }
   return future;
}"
34296,"/** 
 * Constructs an SQL query from a given QuerySession.
 * @param session QuerySession
 * @return SQLQuery
 */
public static SQLQuery from(QuerySession session){
  Builder query=SQLQuery.builder().select().from(tablePrefix + ""String_Node_Str"");
  if (!session.hasFlag(Flag.NO_GROUP)) {
    query.col(""String_Node_Str"").group(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    query.col(""String_Node_Str"").leftJoin(tablePrefix + ""String_Node_Str"",tablePrefix + ""String_Node_Str"" + tablePrefix+ ""String_Node_Str"");
  }
  query.conditions(session.getQuery().getConditions());
  query.order(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return query.build();
}","/** 
 * Constructs an SQL query from a given QuerySession.
 * @param session QuerySession
 * @return SQLQuery
 */
public static SQLQuery from(QuerySession session){
  Builder query=SQLQuery.builder().select().from(tablePrefix + ""String_Node_Str"");
  if (!session.hasFlag(Flag.NO_GROUP)) {
    query.col(""String_Node_Str"").group(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    query.col(""String_Node_Str"").leftJoin(tablePrefix + ""String_Node_Str"",tablePrefix + ""String_Node_Str"" + tablePrefix+ ""String_Node_Str"");
  }
  query.conditions(session.getQuery().getConditions());
  query.order(""String_Node_Str"");
  if (session.hasFlag(Flag.NO_GROUP)) {
    query.order(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  return query.build();
}"
34297,"@Override public void onCompleted(Exception e,PopcornTimeRpcClient.RpcResponse result){
  try {
    if (result != null && e == null) {
      mCurrentMap=result.getMapResult();
      final String title=(String)mCurrentMap.get(""String_Node_Str"");
      final String synopsis=(String)mCurrentMap.get(""String_Node_Str"");
      final String year;
      if (mCurrentMap.get(""String_Node_Str"") instanceof Double) {
        year=Integer.toString(((Double)mCurrentMap.get(""String_Node_Str"")).intValue());
      }
 else {
        year=(String)mCurrentMap.get(""String_Node_Str"");
      }
      final String runtime=Integer.toString(((Double)mCurrentMap.get(""String_Node_Str"")).intValue());
      final String rating=(String)mCurrentMap.get(""String_Node_Str"");
      mIsFavourited=(Boolean)mCurrentMap.get(""String_Node_Str"");
      mHandler.post(new Runnable(){
        @Override public void run(){
          titleText.setText(title);
          synopsisText.setText(synopsis);
          yearText.setText(year);
          runtimeText.setText(runtime + ""String_Node_Str"" + getString(R.string.minutes));
          ratingText.setText(rating + ""String_Node_Str"");
          if (mIsFavourited) {
            favouriteText.setText(R.string.remove_favourite);
          }
 else {
            favouriteText.setText(R.string.add_favourite);
          }
          if (!mCurrentMap.containsKey(""String_Node_Str"")) {
            trailerBlock.setVisibility(View.GONE);
            topDivider.setVisibility(View.GONE);
          }
        }
      }
);
      final String posterUrl;
      if (mCurrentMap.containsKey(""String_Node_Str"")) {
        posterUrl=((String)mCurrentMap.get(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        LinkedTreeMap<String,String> images=(LinkedTreeMap<String,String>)mCurrentMap.get(""String_Node_Str"");
        posterUrl=images.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      }
      final String backdropUrl;
      if (mCurrentMap.containsKey(""String_Node_Str"")) {
        backdropUrl=(String)mCurrentMap.get(""String_Node_Str"");
      }
 else {
        LinkedTreeMap<String,String> images=(LinkedTreeMap<String,String>)mCurrentMap.get(""String_Node_Str"");
        backdropUrl=images.get(""String_Node_Str"");
      }
      Bitmap poster=Picasso.with(getActivity()).load(posterUrl).get();
      Palette palette=Palette.generate(poster);
      try {
        int vibrantColor=palette.getVibrantColor(R.color.primary);
        if (vibrantColor == R.color.primary) {
          mPaletteColor=palette.getMutedColor(R.color.primary);
        }
 else {
          mPaletteColor=vibrantColor;
        }
        final ObjectAnimator mainInfoBlockColorFade=ObjectAnimator.ofObject(mainInfoBlock,""String_Node_Str"",new ArgbEvaluator(),getResources().getColor(R.color.primary),mPaletteColor);
        mainInfoBlockColorFade.setDuration(500);
        Drawable oldDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,getResources().getColor(R.color.primary));
        mPlayButtonDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,mPaletteColor);
        final TransitionDrawable td=new TransitionDrawable(new Drawable[]{oldDrawable,mPlayButtonDrawable});
        mHandler.post(new Runnable(){
          @Override public void run(){
            playButton.setImageDrawable(td);
          }
        }
);
        mHandler.post(new Runnable(){
          @Override public void run(){
            Picasso.with(getActivity()).load(backdropUrl).into(coverImage,new com.squareup.picasso.Callback(){
              @Override public void onSuccess(){
                Animation fadeInAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in);
                mainInfoBlockColorFade.start();
                td.startTransition(500);
                coverImage.setVisibility(View.VISIBLE);
                coverImage.startAnimation(fadeInAnim);
              }
              @Override public void onError(){
              }
            }
);
          }
        }
);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
}","@Override public void onCompleted(Exception e,PopcornTimeRpcClient.RpcResponse result){
  try {
    if (result != null && e == null) {
      mCurrentMap=result.getMapResult();
      final String title=(String)mCurrentMap.get(""String_Node_Str"");
      final String synopsis=(String)mCurrentMap.get(""String_Node_Str"");
      final String year;
      if (mCurrentMap.get(""String_Node_Str"") instanceof Double) {
        year=Integer.toString(((Double)mCurrentMap.get(""String_Node_Str"")).intValue());
      }
 else {
        year=(String)mCurrentMap.get(""String_Node_Str"");
      }
      final String runtime=Integer.toString(((Double)mCurrentMap.get(""String_Node_Str"")).intValue());
      final String rating=(String)mCurrentMap.get(""String_Node_Str"");
      mIsFavourited=(Boolean)mCurrentMap.get(""String_Node_Str"");
      mHandler.post(new Runnable(){
        @Override public void run(){
          titleText.setText(title);
          synopsisText.setText(synopsis);
          yearText.setText(year);
          runtimeText.setText(runtime + ""String_Node_Str"" + getString(R.string.minutes));
          ratingText.setText(rating + ""String_Node_Str"");
          if (mIsFavourited) {
            favouriteText.setText(R.string.remove_favourite);
          }
 else {
            favouriteText.setText(R.string.add_favourite);
          }
          if (!mCurrentMap.containsKey(""String_Node_Str"")) {
            trailerBlock.setVisibility(View.GONE);
            topDivider.setVisibility(View.GONE);
          }
        }
      }
);
      final String posterUrl;
      if (mCurrentMap.containsKey(""String_Node_Str"")) {
        posterUrl=((String)mCurrentMap.get(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        LinkedTreeMap<String,String> images=(LinkedTreeMap<String,String>)mCurrentMap.get(""String_Node_Str"");
        posterUrl=images.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      }
      final String backdropUrl;
      if (mCurrentMap.containsKey(""String_Node_Str"")) {
        backdropUrl=(String)mCurrentMap.get(""String_Node_Str"");
      }
 else {
        LinkedTreeMap<String,String> images=(LinkedTreeMap<String,String>)mCurrentMap.get(""String_Node_Str"");
        backdropUrl=images.get(""String_Node_Str"");
      }
      Bitmap poster=Picasso.with(getActivity()).load(posterUrl).get();
      Palette palette=Palette.generate(poster);
      try {
        int vibrantColor=palette.getVibrantColor(R.color.primary);
        if (vibrantColor == R.color.primary) {
          mPaletteColor=palette.getMutedColor(R.color.primary);
        }
 else {
          mPaletteColor=vibrantColor;
        }
        final ObjectAnimator mainInfoBlockColorFade=ObjectAnimator.ofObject(mainInfoBlock,""String_Node_Str"",new ArgbEvaluator(),getResources().getColor(R.color.primary),mPaletteColor);
        mainInfoBlockColorFade.setDuration(500);
        Drawable oldDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,getResources().getColor(R.color.primary));
        mPlayButtonDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,mPaletteColor);
        final TransitionDrawable td=new TransitionDrawable(new Drawable[]{oldDrawable,mPlayButtonDrawable});
        mHandler.post(new Runnable(){
          @Override public void run(){
            playButton.setImageDrawable(td);
          }
        }
);
        mHandler.post(new Runnable(){
          @Override public void run(){
            Picasso.with(getActivity()).load(backdropUrl).into(coverImage,new com.squareup.picasso.Callback(){
              @Override public void onSuccess(){
                if (getActivity() == null)                 return;
                Animation fadeInAnim=AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_in);
                mainInfoBlockColorFade.start();
                td.startTransition(500);
                coverImage.setVisibility(View.VISIBLE);
                coverImage.startAnimation(fadeInAnim);
              }
              @Override public void onError(){
              }
            }
);
          }
        }
);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
}"
34298,"@Override public void run(){
  Picasso.with(getActivity()).load(backdropUrl).into(coverImage,new com.squareup.picasso.Callback(){
    @Override public void onSuccess(){
      Animation fadeInAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in);
      mainInfoBlockColorFade.start();
      td.startTransition(500);
      coverImage.setVisibility(View.VISIBLE);
      coverImage.startAnimation(fadeInAnim);
    }
    @Override public void onError(){
    }
  }
);
}","@Override public void run(){
  Picasso.with(getActivity()).load(backdropUrl).into(coverImage,new com.squareup.picasso.Callback(){
    @Override public void onSuccess(){
      if (getActivity() == null)       return;
      Animation fadeInAnim=AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_in);
      mainInfoBlockColorFade.start();
      td.startTransition(500);
      coverImage.setVisibility(View.VISIBLE);
      coverImage.startAnimation(fadeInAnim);
    }
    @Override public void onError(){
    }
  }
);
}"
34299,"@Override public void onSuccess(){
  Animation fadeInAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in);
  mainInfoBlockColorFade.start();
  td.startTransition(500);
  coverImage.setVisibility(View.VISIBLE);
  coverImage.startAnimation(fadeInAnim);
}","@Override public void onSuccess(){
  if (getActivity() == null)   return;
  Animation fadeInAnim=AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_in);
  mainInfoBlockColorFade.start();
  td.startTransition(500);
  coverImage.setVisibility(View.VISIBLE);
  coverImage.startAnimation(fadeInAnim);
}"
34300,"public void setFragment(Fragment fragment){
  try {
    mHandler.post(new Runnable(){
      @Override public void run(){
        progressBar.setVisibility(View.GONE);
      }
    }
);
    DialogFragment dialogFragment=(DialogFragment)getSupportFragmentManager().findFragmentByTag(""String_Node_Str"");
    if (dialogFragment != null)     dialogFragment.dismiss();
    fragment.setArguments(mExtras);
    FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
    if (mCurrentFragment.equals(""String_Node_Str"")) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
        }
      }
);
      fragmentTransaction.setCustomAnimations(R.anim.still,R.anim.slide_down);
    }
 else     if (mTopView.equals(""String_Node_Str"")) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          toolbar.setNavigationIcon(R.drawable.abc_ic_clear_mtrl_alpha);
        }
      }
);
      fragmentTransaction.setCustomAnimations(R.anim.slide_up,R.anim.still);
    }
 else {
      fragmentTransaction.setCustomAnimations(R.anim.fade_in,R.anim.fade_out);
    }
    fragmentTransaction.replace(R.id.frameLayout,fragment);
    fragmentTransaction.commit();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void setFragment(Fragment fragment){
  try {
    mHandler.post(new Runnable(){
      @Override public void run(){
        progressBar.setVisibility(View.GONE);
      }
    }
);
    DialogFragment dialogFragment=(DialogFragment)getSupportFragmentManager().findFragmentByTag(""String_Node_Str"");
    if (dialogFragment != null)     dialogFragment.dismiss();
    fragment.setArguments(mExtras);
    FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
    if (mCurrentFragment.equals(""String_Node_Str"")) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
        }
      }
);
      fragmentTransaction.setCustomAnimations(R.anim.still,R.anim.slide_down);
    }
 else     if (mTopView.equals(""String_Node_Str"")) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          toolbar.setNavigationIcon(R.drawable.abc_ic_clear_mtrl_alpha);
        }
      }
);
      fragmentTransaction.setCustomAnimations(R.anim.slide_up,R.anim.still);
    }
 else {
      fragmentTransaction.setCustomAnimations(R.anim.fade_open,R.anim.fade_close);
    }
    fragmentTransaction.replace(R.id.frameLayout,fragment);
    fragmentTransaction.commit();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
34301,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.playButton:
    getClient().enter(mBlankResponseCallback);
  break;
case R.id.qualityBlock:
getClient().toggleQuality(mBlankResponseCallback);
break;
case R.id.synopsisBlock:
SynopsisDialogFragment synopsisDialogFragment=new SynopsisDialogFragment();
Bundle b=new Bundle();
b.putString(""String_Node_Str"",(String)mCurrentMap.get(""String_Node_Str""));
synopsisDialogFragment.setArguments(b);
synopsisDialogFragment.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
break;
case R.id.subtitlesBlock:
SubtitleSelectorDialogFragment subtitleFragment=new SubtitleSelectorDialogFragment();
subtitleFragment.setArguments(getArguments());
subtitleFragment.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
break;
case R.id.playerBlock:
PlayerSelectorDialogFragment playerFragment=new PlayerSelectorDialogFragment();
playerFragment.setArguments(getArguments());
playerFragment.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
break;
case R.id.favouriteBlock:
getClient().toggleFavourite(mBlankResponseCallback);
mIsFavourited=!mIsFavourited;
if (mIsFavourited) {
favouriteText.setText(R.string.remove_favourite);
}
 else {
favouriteText.setText(R.string.add_favourite);
}
break;
case R.id.trailerBlock:
getClient().playTrailer(new PopcornTimeRpcClient.Callback(){
@Override public void onCompleted(Exception e,PopcornTimeRpcClient.RpcResponse result){
if (e != null) {
String videoId=mCurrentMap.get(""String_Node_Str"").toString().replace(""String_Node_Str"",""String_Node_Str"");
Intent intent=YouTubeStandalonePlayer.createVideoIntent(getActivity(),Constants.YOUTUBE_KEY,videoId,0,true,true);
startActivity(intent);
}
}
}
);
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.playButton:
    getClient().enter(mBlankResponseCallback);
  break;
case R.id.qualityBlock:
getClient().toggleQuality(mBlankResponseCallback);
break;
case R.id.synopsisBlock:
SynopsisDialogFragment synopsisDialogFragment=new SynopsisDialogFragment();
Bundle b=new Bundle();
b.putString(""String_Node_Str"",(String)mCurrentMap.get(""String_Node_Str""));
synopsisDialogFragment.setArguments(b);
synopsisDialogFragment.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
break;
case R.id.subtitlesBlock:
SubtitleSelectorDialogFragment subtitleFragment=new SubtitleSelectorDialogFragment();
subtitleFragment.setArguments(getArguments());
subtitleFragment.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
break;
case R.id.playerBlock:
PlayerSelectorDialogFragment playerFragment=new PlayerSelectorDialogFragment();
playerFragment.setArguments(getArguments());
playerFragment.show(getActivity().getSupportFragmentManager(),""String_Node_Str"");
break;
case R.id.favouriteBlock:
getClient().toggleFavourite(mBlankResponseCallback);
mIsFavourited=!mIsFavourited;
if (mIsFavourited) {
favouriteText.setText(R.string.remove_favourite);
}
 else {
favouriteText.setText(R.string.add_favourite);
}
break;
case R.id.trailerBlock:
getClient().playTrailer(new PopcornTimeRpcClient.Callback(){
@Override public void onCompleted(Exception e,PopcornTimeRpcClient.RpcResponse result){
if (e != null) {
String videoId=mCurrentMap.get(""String_Node_Str"").toString().replace(""String_Node_Str"",""String_Node_Str"");
if (videoId != null && getActivity() != null) {
Intent intent=YouTubeStandalonePlayer.createVideoIntent(getActivity(),Constants.YOUTUBE_KEY,videoId,0,true,true);
startActivity(intent);
}
}
}
}
);
break;
}
}"
34302,"private void updateViews(){
  if (Version.compare(getClient().getVersion(),""String_Node_Str"")) {
    if (mPlaying) {
      playPauseButton.setImageResource(R.drawable.ic_av_pause);
    }
 else {
      playPauseButton.setImageResource(R.drawable.ic_av_play);
    }
    if (mFullscreen) {
      fullscreenBlockImage.setImageResource(R.drawable.ic_av_small_screen);
    }
 else {
      fullscreenBlockImage.setImageResource(R.drawable.ic_av_full_screen);
    }
  }
}","private void updateViews(){
  if (Version.compare(getClient().getVersion(),""String_Node_Str"")) {
    if (playPauseButton != null) {
      if (mPlaying) {
        playPauseButton.setImageResource(R.drawable.ic_av_pause);
      }
 else {
        playPauseButton.setImageResource(R.drawable.ic_av_play);
      }
    }
    if (fullscreenBlockImage != null) {
      if (mFullscreen) {
        fullscreenBlockImage.setImageResource(R.drawable.ic_av_small_screen);
      }
 else {
        fullscreenBlockImage.setImageResource(R.drawable.ic_av_full_screen);
      }
    }
  }
}"
34303,"private void showNoConnection(){
  setFragment(new ConnectionLostFragment(),true);
  mCurrentFragment=""String_Node_Str"";
  runOnUiThread(new Runnable(){
    @Override public void run(){
      ActionBarBackground.fadeDrawable(ControllerActivity.this,new ColorDrawable(getResources().getColor(R.color.primary)));
    }
  }
);
}","private void showNoConnection(){
  setFragment(new ConnectionLostFragment(),true);
  mCurrentFragment=""String_Node_Str"";
  mHandler.post(new Runnable(){
    @Override public void run(){
      ActionBarBackground.fadeDrawable(ControllerActivity.this,new ColorDrawable(getResources().getColor(R.color.primary)));
    }
  }
);
}"
34304,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_framelayout);
  ButterKnife.inject(this);
  Intent intent=getIntent();
  mExtras=intent.getExtras();
  if (mExtras != null && mExtras.containsKey(KEY_IP) && mExtras.containsKey(KEY_PORT) && mExtras.containsKey(KEY_USERNAME) && mExtras.containsKey(KEY_PASSWORD) && mExtras.containsKey(KEY_NAME)) {
    mRpc=new PopcornTimeRpcClient(mExtras.getString(KEY_IP),mExtras.getString(KEY_PORT),mExtras.getString(KEY_USERNAME),mExtras.getString(KEY_PASSWORD));
    getSupportActionBar().setTitle(getString(R.string.connected_to) + ""String_Node_Str"" + mExtras.getString(KEY_NAME));
  }
 else {
    finish();
  }
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setLogo(R.drawable.ic_logo);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_framelayout);
  ButterKnife.inject(this);
  Intent intent=getIntent();
  mExtras=intent.getExtras();
  if (mExtras != null && mExtras.containsKey(KEY_IP) && mExtras.containsKey(KEY_PORT) && mExtras.containsKey(KEY_USERNAME) && mExtras.containsKey(KEY_PASSWORD) && mExtras.containsKey(KEY_NAME)) {
    mRpc=new PopcornTimeRpcClient(mExtras.getString(KEY_IP),mExtras.getString(KEY_PORT),mExtras.getString(KEY_USERNAME),mExtras.getString(KEY_PASSWORD));
    getSupportActionBar().setTitle(getString(R.string.connected_to) + ""String_Node_Str"" + mExtras.getString(KEY_NAME));
  }
 else {
    finish();
  }
  mHandler=new Handler(getMainLooper());
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setLogo(R.drawable.ic_logo);
}"
34305,"public void setFragment(Fragment fragment,boolean fade){
  try {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        progressBar.setVisibility(View.GONE);
      }
    }
);
    SubtitleSelectorDialogFragment subsFragment=(SubtitleSelectorDialogFragment)getSupportFragmentManager().findFragmentByTag(""String_Node_Str"");
    if (subsFragment != null)     subsFragment.dismiss();
    PlayerSelectorDialogFragment playerFragment=(PlayerSelectorDialogFragment)getSupportFragmentManager().findFragmentByTag(""String_Node_Str"");
    if (playerFragment != null)     playerFragment.dismiss();
    fragment.setArguments(mExtras);
    FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
    if (fade)     fragmentTransaction.setCustomAnimations(R.anim.fade_in,R.anim.fade_out);
    fragmentTransaction.replace(R.id.frameLayout,fragment);
    fragmentTransaction.commit();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void setFragment(Fragment fragment,boolean fade){
  try {
    mHandler.post(new Runnable(){
      @Override public void run(){
        progressBar.setVisibility(View.GONE);
      }
    }
);
    SubtitleSelectorDialogFragment subsFragment=(SubtitleSelectorDialogFragment)getSupportFragmentManager().findFragmentByTag(""String_Node_Str"");
    if (subsFragment != null)     subsFragment.dismiss();
    PlayerSelectorDialogFragment playerFragment=(PlayerSelectorDialogFragment)getSupportFragmentManager().findFragmentByTag(""String_Node_Str"");
    if (playerFragment != null)     playerFragment.dismiss();
    fragment.setArguments(mExtras);
    FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
    if (fade)     fragmentTransaction.setCustomAnimations(R.anim.fade_in,R.anim.fade_out);
    fragmentTransaction.replace(R.id.frameLayout,fragment);
    fragmentTransaction.commit();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
34306,"@Override public void onCompleted(Exception e,PopcornTimeRpcClient.RpcResponse result){
  try {
    if (result != null && e == null) {
      mCurrentMap=result.getMapResult();
      String title=(String)mCurrentMap.get(""String_Node_Str"");
      String synopsis=(String)mCurrentMap.get(""String_Node_Str"");
      String year=Integer.toString(((Double)mCurrentMap.get(""String_Node_Str"")).intValue());
      String runtime=Integer.toString(((Double)mCurrentMap.get(""String_Node_Str"")).intValue());
      String rating=(String)mCurrentMap.get(""String_Node_Str"");
      titleText.setText(title);
      synopsisText.setText(synopsis);
      yearText.setText(year);
      runtimeText.setText(runtime + ""String_Node_Str"" + getString(R.string.minutes));
      ratingText.setText(rating + ""String_Node_Str"");
      String type=null;
      if (mCurrentMap.containsKey(""String_Node_Str""))       type=(String)mCurrentMap.get(""String_Node_Str"");
      final String posterUrl;
      if (type != null && type.equals(""String_Node_Str"")) {
        posterUrl=((String)mCurrentMap.get(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        LinkedTreeMap<String,String> images=(LinkedTreeMap<String,String>)mCurrentMap.get(""String_Node_Str"");
        posterUrl=images.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      }
      final String backdropUrl;
      if (type != null && type.equals(""String_Node_Str"")) {
        backdropUrl=(String)mCurrentMap.get(""String_Node_Str"");
      }
 else {
        LinkedTreeMap<String,String> images=(LinkedTreeMap<String,String>)mCurrentMap.get(""String_Node_Str"");
        backdropUrl=images.get(""String_Node_Str"");
      }
      Picasso.with(getActivity()).load(posterUrl).into(new Target(){
        @Override public void onBitmapLoaded(        Bitmap bitmap,        Picasso.LoadedFrom from){
          if (bitmap != null) {
            Palette.generateAsync(bitmap,new Palette.PaletteAsyncListener(){
              @Override public void onGenerated(              Palette palette){
                try {
                  int vibrantColor=palette.getVibrantColor(R.color.primary);
                  final int color;
                  if (vibrantColor == R.color.primary) {
                    color=palette.getMutedColor(R.color.primary);
                  }
 else {
                    color=vibrantColor;
                  }
                  final ObjectAnimator mainInfoBlockColorFade=ObjectAnimator.ofObject(mainInfoBlock,""String_Node_Str"",new ArgbEvaluator(),getResources().getColor(R.color.primary),color);
                  mainInfoBlockColorFade.setDuration(500);
                  Drawable oldDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,getResources().getColor(R.color.primary));
                  mPlayButtonDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,color);
                  final TransitionDrawable td=new TransitionDrawable(new Drawable[]{oldDrawable,mPlayButtonDrawable});
                  playButton.setImageDrawable(td);
                  Picasso.with(getActivity()).load(backdropUrl).into(coverImage,new com.squareup.picasso.Callback(){
                    @Override public void onSuccess(){
                      mainInfoBlockColorFade.start();
                      td.startTransition(500);
                      mFadingHelper.actionBarBackground(ActionBarBackground.getColoredBackground(color)).initActionBar(getActivity());
                    }
                    @Override public void onError(){
                    }
                  }
);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
            }
);
          }
        }
        @Override public void onBitmapFailed(        Drawable errorDrawable){
        }
        @Override public void onPrepareLoad(        Drawable placeHolderDrawable){
        }
      }
);
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
}","@Override public void onCompleted(Exception e,PopcornTimeRpcClient.RpcResponse result){
  try {
    if (result != null && e == null) {
      mCurrentMap=result.getMapResult();
      final String title=(String)mCurrentMap.get(""String_Node_Str"");
      final String synopsis=(String)mCurrentMap.get(""String_Node_Str"");
      final String year=Integer.toString(((Double)mCurrentMap.get(""String_Node_Str"")).intValue());
      final String runtime=Integer.toString(((Double)mCurrentMap.get(""String_Node_Str"")).intValue());
      final String rating=(String)mCurrentMap.get(""String_Node_Str"");
      mHandler.post(new Runnable(){
        @Override public void run(){
          titleText.setText(title);
          synopsisText.setText(synopsis);
          yearText.setText(year);
          runtimeText.setText(runtime + ""String_Node_Str"" + getString(R.string.minutes));
          ratingText.setText(rating + ""String_Node_Str"");
        }
      }
);
      String type=null;
      if (mCurrentMap.containsKey(""String_Node_Str""))       type=(String)mCurrentMap.get(""String_Node_Str"");
      final String posterUrl;
      if (type != null && type.equals(""String_Node_Str"")) {
        posterUrl=((String)mCurrentMap.get(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        LinkedTreeMap<String,String> images=(LinkedTreeMap<String,String>)mCurrentMap.get(""String_Node_Str"");
        posterUrl=images.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      }
      final String backdropUrl;
      if (type != null && type.equals(""String_Node_Str"")) {
        backdropUrl=(String)mCurrentMap.get(""String_Node_Str"");
      }
 else {
        LinkedTreeMap<String,String> images=(LinkedTreeMap<String,String>)mCurrentMap.get(""String_Node_Str"");
        backdropUrl=images.get(""String_Node_Str"");
      }
      Bitmap poster=Picasso.with(getActivity()).load(posterUrl).get();
      Palette palette=Palette.generate(poster);
      try {
        int vibrantColor=palette.getVibrantColor(R.color.primary);
        final int color;
        if (vibrantColor == R.color.primary) {
          color=palette.getMutedColor(R.color.primary);
        }
 else {
          color=vibrantColor;
        }
        final ObjectAnimator mainInfoBlockColorFade=ObjectAnimator.ofObject(mainInfoBlock,""String_Node_Str"",new ArgbEvaluator(),getResources().getColor(R.color.primary),color);
        mainInfoBlockColorFade.setDuration(500);
        Drawable oldDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,getResources().getColor(R.color.primary));
        mPlayButtonDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,color);
        final TransitionDrawable td=new TransitionDrawable(new Drawable[]{oldDrawable,mPlayButtonDrawable});
        mHandler.post(new Runnable(){
          @Override public void run(){
            playButton.setImageDrawable(td);
          }
        }
);
        mHandler.post(new Runnable(){
          @Override public void run(){
            Picasso.with(getActivity()).load(backdropUrl).into(coverImage,new com.squareup.picasso.Callback(){
              @Override public void onSuccess(){
                Animation fadeInAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in);
                mainInfoBlockColorFade.start();
                td.startTransition(500);
                coverImage.setVisibility(View.VISIBLE);
                coverImage.startAnimation(fadeInAnim);
                mFadingHelper.actionBarBackground(ActionBarBackground.getColoredBackground(color)).initActionBar(getActivity());
              }
              @Override public void onError(){
              }
            }
);
          }
        }
);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
}"
34307,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mFadingHelper=new FadingActionBarHelper().actionBarBackground(ActionBarBackground.getColoredBackground(getResources().getColor(R.color.primary))).headerLayout(R.layout.fragment_detailheader).contentLayout(R.layout.fragment_moviecontroller);
    mFadingHelper.initActionBar(activity);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  getClient().getSelection(mSelectionCallback);
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mFadingHelper=new FadingActionBarHelper().actionBarBackground(ActionBarBackground.getColoredBackground(getResources().getColor(R.color.primary))).headerLayout(R.layout.fragment_detailheader).contentLayout(R.layout.fragment_moviecontroller);
    mFadingHelper.initActionBar(activity);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
34308,"@Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View v=mFadingHelper.createView(inflater);
  ButterKnife.inject(this,v);
  Drawable playButtonDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,getResources().getColor(R.color.primary));
  if (mPlayButtonDrawable == null)   playButton.setImageDrawable(playButtonDrawable);
  playButton.setOnClickListener(mOnClickListener);
  trailerBlock.setOnClickListener(mOnClickListener);
  subtitlesBlock.setOnClickListener(mOnClickListener);
  favouriteBlock.setOnClickListener(mOnClickListener);
  qualityBlock.setOnClickListener(mOnClickListener);
  playerBlock.setOnClickListener(mOnClickListener);
  if (!Version.compare(getClient().getVersion(),""String_Node_Str"")) {
    playerBlock.setVisibility(View.GONE);
    trailerBlock.setVisibility(View.GONE);
    synopsisBlock.setVisibility(View.GONE);
  }
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View v=mFadingHelper.createView(inflater);
  ButterKnife.inject(this,v);
  Drawable playButtonDrawable=PixelUtils.changeDrawableColor(getActivity(),R.drawable.ic_av_play_button,getResources().getColor(R.color.primary));
  if (mPlayButtonDrawable == null)   playButton.setImageDrawable(playButtonDrawable);
  playButton.setOnClickListener(mOnClickListener);
  trailerBlock.setOnClickListener(mOnClickListener);
  subtitlesBlock.setOnClickListener(mOnClickListener);
  favouriteBlock.setOnClickListener(mOnClickListener);
  qualityBlock.setOnClickListener(mOnClickListener);
  playerBlock.setOnClickListener(mOnClickListener);
  if (!Version.compare(getClient().getVersion(),""String_Node_Str"")) {
    playerBlock.setVisibility(View.GONE);
    trailerBlock.setVisibility(View.GONE);
    synopsisBlock.setVisibility(View.GONE);
  }
  getClient().getSelection(mSelectionCallback);
  return v;
}"
34309,"@Override public void onSuccess(){
  mainInfoBlockColorFade.start();
  td.startTransition(500);
  mFadingHelper.actionBarBackground(ActionBarBackground.getColoredBackground(color)).initActionBar(getActivity());
}","@Override public void onSuccess(){
  Animation fadeInAnim=AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in);
  mainInfoBlockColorFade.start();
  td.startTransition(500);
  coverImage.setVisibility(View.VISIBLE);
  coverImage.startAnimation(fadeInAnim);
  mFadingHelper.actionBarBackground(ActionBarBackground.getColoredBackground(color)).initActionBar(getActivity());
}"
34310,"@Override public void onCompleted(Exception e,PopcornTimeRpcClient.RpcResponse result){
  try {
    if (result != null && e == null) {
      mFullscreen=(Boolean)result.getMapResult().get(""String_Node_Str"");
      updateViews();
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
  mHandler.postDelayed(mFullscreenRunnable,1000);
}","@Override public void onCompleted(Exception e,PopcornTimeRpcClient.RpcResponse result){
  try {
    if (result != null && e == null) {
      mFullscreen=(Boolean)result.getMapResult().get(""String_Node_Str"");
      mHandler.post(new Runnable(){
        @Override public void run(){
          updateViews();
        }
      }
);
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
  mHandler.postDelayed(mFullscreenRunnable,1000);
}"
34311,"/** 
 * Send JSON RPC request to the instance
 * @param rpc Request data
 * @param callback Callback for the request
 * @return ResponseFuture
 */
private Call request(final RpcRequest rpc,final Callback callback){
  RequestBody requestBody=RequestBody.create(MEDIA_TYPE_JSON,mGson.toJson(rpc));
  Request request=new Request.Builder().url(mUrl).header(""String_Node_Str"",Credentials.basic(mUsername,mPassword)).post(requestBody).build();
  Call call=mClient.newCall(request);
  call.enqueue(new com.squareup.okhttp.Callback(){
    @Override public void onFailure(    Request request,    IOException e){
      callback.onCompleted(e,null);
    }
    @Override public void onResponse(    Response response) throws IOException {
      RpcResponse result=null;
      Exception e=null;
      try {
        if (response != null && response.isSuccessful()) {
          String responseStr=response.body().string();
          LogUtils.d(""String_Node_Str"",""String_Node_Str"" + responseStr);
          result=mGson.fromJson(responseStr,RpcResponse.class);
          LinkedTreeMap<String,Object> map=result.getMapResult();
          if (map.containsKey(""String_Node_Str"")) {
            mVersion=(String)map.get(""String_Node_Str"");
          }
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        e=ex;
        mVersion=""String_Node_Str"";
        if (rpc.id == RequestId.GET_SELECTION.ordinal()) {
          mVersion=""String_Node_Str"";
        }
      }
      callback.onCompleted(e,result);
    }
  }
);
  return call;
}","/** 
 * Send JSON RPC request to the instance
 * @param rpc Request data
 * @param callback Callback for the request
 * @return ResponseFuture
 */
private Call request(final RpcRequest rpc,final Callback callback){
  RequestBody requestBody=RequestBody.create(MEDIA_TYPE_JSON,mGson.toJson(rpc));
  Request request=new Request.Builder().url(mUrl).header(""String_Node_Str"",Credentials.basic(mUsername,mPassword)).post(requestBody).build();
  Call call=mClient.newCall(request);
  call.enqueue(new com.squareup.okhttp.Callback(){
    @Override public void onFailure(    Request request,    IOException e){
      callback.onCompleted(e,null);
    }
    @Override public void onResponse(    Response response) throws IOException {
      RpcResponse result=null;
      Exception e=null;
      try {
        if (response != null && response.isSuccessful()) {
          String responseStr=response.body().string();
          result=mGson.fromJson(responseStr,RpcResponse.class);
          LinkedTreeMap<String,Object> map=result.getMapResult();
          if (map.containsKey(""String_Node_Str"")) {
            mVersion=(String)map.get(""String_Node_Str"");
          }
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        e=ex;
        mVersion=""String_Node_Str"";
        if (rpc.id == RequestId.GET_SELECTION.ordinal()) {
          mVersion=""String_Node_Str"";
        }
      }
      callback.onCompleted(e,result);
    }
  }
);
  return call;
}"
34312,"@Override public void onResponse(Response response) throws IOException {
  RpcResponse result=null;
  Exception e=null;
  try {
    if (response != null && response.isSuccessful()) {
      String responseStr=response.body().string();
      LogUtils.d(""String_Node_Str"",""String_Node_Str"" + responseStr);
      result=mGson.fromJson(responseStr,RpcResponse.class);
      LinkedTreeMap<String,Object> map=result.getMapResult();
      if (map.containsKey(""String_Node_Str"")) {
        mVersion=(String)map.get(""String_Node_Str"");
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    e=ex;
    mVersion=""String_Node_Str"";
    if (rpc.id == RequestId.GET_SELECTION.ordinal()) {
      mVersion=""String_Node_Str"";
    }
  }
  callback.onCompleted(e,result);
}","@Override public void onResponse(Response response) throws IOException {
  RpcResponse result=null;
  Exception e=null;
  try {
    if (response != null && response.isSuccessful()) {
      String responseStr=response.body().string();
      result=mGson.fromJson(responseStr,RpcResponse.class);
      LinkedTreeMap<String,Object> map=result.getMapResult();
      if (map.containsKey(""String_Node_Str"")) {
        mVersion=(String)map.get(""String_Node_Str"");
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    e=ex;
    mVersion=""String_Node_Str"";
    if (rpc.id == RequestId.GET_SELECTION.ordinal()) {
      mVersion=""String_Node_Str"";
    }
  }
  callback.onCompleted(e,result);
}"
34313,"public void runViewstackRunnable(){
  getSupportFragmentManager().popBackStack();
  mRpc.ping(new FutureCallback<PopcornTimeRpcClient.RpcResponse>(){
    @Override public void onCompleted(    Exception e,    PopcornTimeRpcClient.RpcResponse result){
      if (e == null) {
        mGetViewstackRunnable.run();
      }
 else {
        e.printStackTrace();
        setFragment(new ConnectionLostFragment(),true);
        mCurrentFragment=""String_Node_Str"";
      }
    }
  }
);
}","public void runViewstackRunnable(){
  try {
    getSupportFragmentManager().popBackStack();
    mRpc.ping(new FutureCallback<PopcornTimeRpcClient.RpcResponse>(){
      @Override public void onCompleted(      Exception e,      PopcornTimeRpcClient.RpcResponse result){
        if (e == null) {
          mGetViewstackRunnable.run();
        }
 else {
          e.printStackTrace();
          setFragment(new ConnectionLostFragment(),true);
          mCurrentFragment=""String_Node_Str"";
        }
      }
    }
);
  }
 catch (  Exception e) {
  }
}"
34314,"public static int getTimeSeries(String[] args){
  List<PortableTimeSeries> tslist=null;
  int returnCode=0;
  if (args.length < 2) {
    SFIToolkit.displayln(""String_Node_Str"");
    return -1;
  }
  String provider=args[0];
  String tsKey=args[1];
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String meta=""String_Node_Str"";
  boolean processMeta=false;
  boolean processData=true;
  if (args.length >= 3 && !args[2].isEmpty()) {
    start=args[2];
  }
  if (args.length >= 4 && !args[3].isEmpty()) {
    end=args[3];
  }
  if (args.length >= 5) {
    meta=args[4];
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      meta=""String_Node_Str"";
    }
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
      processData=false;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + meta);
    }
  }
  try {
    int dataLength=0;
    tslist=SdmxClientHandler.getTimeSeries(provider,tsKey,start,end);
    if (tslist == null) {
      SFIToolkit.displayln(""String_Node_Str"");
      return -1;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + tslist.size() + ""String_Node_Str"");
    }
    if (processData) {
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        dataLength+=ts.getObservations().size();
      }
    }
 else {
      dataLength=tslist.size();
    }
    if (dataLength > 0) {
      int name=0;
      int date=0;
      int val=0;
      Data.setObsCount(dataLength);
      Data.addVarStr(""String_Node_Str"",10);
      name=Data.getVarIndex(""String_Node_Str"");
      int lastPos=name;
      if (processData) {
        SFIToolkit.displayln(""String_Node_Str"" + dataLength + ""String_Node_Str"");
        Data.addVarStr(""String_Node_Str"",5);
        Data.addVarDouble(""String_Node_Str"");
        date=Data.getVarIndex(""String_Node_Str"");
        val=Data.getVarIndex(""String_Node_Str"");
        lastPos=val;
      }
      int i=0;
      int rowOffset=0;
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        String tsname=ts.getName();
        if (processData) {
          List<Double> tsobs=ts.getObservations();
          List<String> tsdates=ts.getTimeSlots();
          int j=0;
          for (Iterator<Double> iterator2=tsobs.iterator(); iterator2.hasNext(); ) {
            Data.storeStr(name,rowOffset + j + 1,tsname);
            Data.storeNum(val,rowOffset + j + 1,iterator2.next());
            Data.storeStr(date,rowOffset + j + 1,tsdates.get(j));
            if (processMeta) {
              List<String> dimensions=ts.getDimensions();
              List<String> attributes=ts.getAttributes();
              attributes.addAll(dimensions);
              for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
                String attr=(String)iterator3.next();
                String[] tokens=attr.split(""String_Node_Str"");
                String key=tokens[0];
                String value=tokens[1];
                if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
                  int attrPos=Data.getVarIndex(key);
                  if (attrPos > lastPos) {
                    lastPos=attrPos;
                    Data.addVarStr(key,value.length());
                  }
                  Data.storeStr(attrPos,rowOffset + j + 1,value);
                }
              }
              if (processMeta) {
                List<String> obsAttrNames=ts.getObsLevelAttributesNames();
                for (Iterator<String> iterator3=obsAttrNames.iterator(); iterator3.hasNext(); ) {
                  String attrName=(String)iterator3.next();
                  List<String> obsAttr=ts.getObsLevelAttributes(attrName);
                  if (obsAttr != null && !obsAttr.isEmpty()) {
                    int attrPos=Data.getVarIndex(attrName);
                    if (attrPos > lastPos) {
                      lastPos=attrPos;
                      Data.addVarStr(attrName,1);
                    }
                    Data.storeStr(attrPos,rowOffset + j + 1,obsAttr.get(j));
                  }
                }
              }
            }
            j++;
          }
          rowOffset=j;
        }
 else {
          Data.storeStr(name,i + 1,tsname);
          List<String> dimensions=ts.getDimensions();
          List<String> attributes=ts.getAttributes();
          attributes.addAll(dimensions);
          for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
            String attr=(String)iterator3.next();
            String[] tokens=attr.split(""String_Node_Str"");
            String key=tokens[0];
            String value=tokens[1];
            if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
              int attrPos=Data.getVarIndex(key);
              if (attrPos > lastPos) {
                lastPos=attrPos;
                Data.addVarStr(key,10);
              }
              Data.storeStr(attrPos,i + 1,value);
            }
          }
        }
        i++;
      }
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    SFIToolkit.displayln(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
    logger.log(Level.FINER,""String_Node_Str"",e);
    returnCode=-1;
  }
  return returnCode;
}","public static int getTimeSeries(String[] args){
  List<PortableTimeSeries> tslist=null;
  int returnCode=0;
  if (args.length < 2) {
    SFIToolkit.displayln(""String_Node_Str"");
    return -1;
  }
  String provider=args[0];
  String tsKey=args[1];
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String meta=""String_Node_Str"";
  boolean processMeta=false;
  boolean processData=true;
  if (args.length >= 3 && !args[2].isEmpty()) {
    start=args[2];
  }
  if (args.length >= 4 && !args[3].isEmpty()) {
    end=args[3];
  }
  if (args.length >= 5) {
    meta=args[4];
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      meta=""String_Node_Str"";
    }
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
      processData=false;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + meta);
    }
  }
  try {
    int dataLength=0;
    tslist=SdmxClientHandler.getTimeSeries(provider,tsKey,start,end);
    if (tslist == null) {
      SFIToolkit.displayln(""String_Node_Str"");
      return -1;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + tslist.size() + ""String_Node_Str"");
    }
    if (processData) {
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        dataLength+=ts.getObservations().size();
      }
    }
 else {
      dataLength=tslist.size();
    }
    if (dataLength > 0) {
      int name=0;
      int date=0;
      int val=0;
      Data.setObsCount(dataLength);
      Data.addVarStr(""String_Node_Str"",10);
      name=Data.getVarIndex(""String_Node_Str"");
      int lastPos=name;
      if (processData) {
        SFIToolkit.displayln(""String_Node_Str"" + dataLength + ""String_Node_Str"");
        Data.addVarStr(""String_Node_Str"",5);
        Data.addVarDouble(""String_Node_Str"");
        date=Data.getVarIndex(""String_Node_Str"");
        val=Data.getVarIndex(""String_Node_Str"");
        lastPos=val;
      }
      int i=0;
      int rowOffset=0;
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        String tsname=ts.getName();
        if (processData) {
          List<Double> tsobs=ts.getObservations();
          List<String> tsdates=ts.getTimeSlots();
          int j=0;
          for (Iterator<Double> iterator2=tsobs.iterator(); iterator2.hasNext(); ) {
            Data.storeStr(name,rowOffset + j + 1,tsname);
            Data.storeNum(val,rowOffset + j + 1,iterator2.next());
            Data.storeStr(date,rowOffset + j + 1,tsdates.get(j));
            if (processMeta) {
              List<String> dimensions=ts.getDimensions();
              List<String> attributes=ts.getAttributes();
              attributes.addAll(dimensions);
              for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
                String attr=(String)iterator3.next();
                String[] tokens=attr.split(""String_Node_Str"");
                String key=tokens[0];
                String value=tokens[1];
                if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
                  int attrPos=Data.getVarIndex(key);
                  if (attrPos > lastPos) {
                    lastPos=attrPos;
                    Data.addVarStr(key,value.length());
                  }
                  Data.storeStr(attrPos,rowOffset + j + 1,value);
                }
              }
              List<String> obsAttrNames=ts.getObsLevelAttributesNames();
              for (Iterator<String> iterator3=obsAttrNames.iterator(); iterator3.hasNext(); ) {
                String attrName=(String)iterator3.next();
                List<String> obsAttr=ts.getObsLevelAttributes(attrName);
                if (obsAttr != null && !obsAttr.isEmpty()) {
                  int attrPos=Data.getVarIndex(attrName);
                  if (attrPos > lastPos) {
                    lastPos=attrPos;
                    Data.addVarStr(attrName,1);
                  }
                  Data.storeStr(attrPos,rowOffset + j + 1,obsAttr.get(j));
                }
              }
            }
            j++;
          }
          rowOffset+=j;
        }
 else {
          Data.storeStr(name,i + 1,tsname);
          List<String> dimensions=ts.getDimensions();
          List<String> attributes=ts.getAttributes();
          attributes.addAll(dimensions);
          for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
            String attr=(String)iterator3.next();
            String[] tokens=attr.split(""String_Node_Str"");
            String key=tokens[0];
            String value=tokens[1];
            if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
              int attrPos=Data.getVarIndex(key);
              if (attrPos > lastPos) {
                lastPos=attrPos;
                Data.addVarStr(key,10);
              }
              Data.storeStr(attrPos,i + 1,value);
            }
          }
        }
        i++;
      }
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    SFIToolkit.displayln(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
    logger.log(Level.FINER,""String_Node_Str"",e);
    returnCode=-1;
  }
  return returnCode;
}"
34315,"private static BufferedReader skipBOM(InputStreamReader xmlBuffer) throws SdmxException {
  BufferedReader br=new BufferedReader(xmlBuffer);
  logger.fine(xmlBuffer.getEncoding());
  try {
    char[] cbuf=new char[1];
    br.mark(1);
    br.read(cbuf,0,1);
    logger.fine(String.format(""String_Node_Str"",Integer.toHexString(cbuf[0])));
    if ((byte)cbuf[0] == (byte)0xfeff) {
      logger.fine(""String_Node_Str"");
    }
 else {
      br.reset();
    }
  }
 catch (  IOException e) {
    throw new SdmxException(""String_Node_Str"");
  }
  return br;
}","public static BufferedReader skipBOM(InputStreamReader xmlBuffer) throws SdmxException {
  BufferedReader br=new BufferedReader(xmlBuffer);
  logger.fine(xmlBuffer.getEncoding());
  try {
    char[] cbuf=new char[1];
    br.mark(1);
    br.read(cbuf,0,1);
    logger.fine(String.format(""String_Node_Str"",Integer.toHexString(cbuf[0])));
    if ((byte)cbuf[0] == (byte)0xfeff) {
      logger.fine(""String_Node_Str"");
    }
 else {
      br.reset();
    }
  }
 catch (  IOException e) {
    throw new SdmxException(""String_Node_Str"");
  }
  return br;
}"
34316,"public static List<PortableTimeSeries> parse(InputStreamReader xmlBuffer,DataFlowStructure dsd,String dataflow,boolean data) throws XMLStreamException, UnsupportedEncodingException, SdmxException {
  final String sourceMethod=""String_Node_Str"";
  logger.entering(sourceClass,sourceMethod);
  List<PortableTimeSeries> tsList=new ArrayList<PortableTimeSeries>();
  XMLInputFactory inputFactory=XMLInputFactory.newInstance();
  XMLEventReader eventReader=inputFactory.createXMLEventReader(xmlBuffer);
  PortableTimeSeries ts=null;
  String currentAction=null;
  String currentValidFromDate=null;
  String currentValidToDate=null;
  while (eventReader.hasNext()) {
    XMLEvent event=eventReader.nextEvent();
    logger.finest(event.toString());
    if (event.isStartElement()) {
      StartElement startElement=event.asStartElement();
      if (startElement.getName().getLocalPart() == (DATASET)) {
        logger.finer(""String_Node_Str"");
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        while (attributes.hasNext()) {
          Attribute attr=attributes.next();
          String id=attr.getName().getLocalPart().toString();
          String value=attr.getValue();
          if (id.equalsIgnoreCase(ACTION)) {
            logger.finer(""String_Node_Str"" + value);
            currentAction=value;
          }
 else           if (id.equalsIgnoreCase(VALID_FROM)) {
            logger.finer(""String_Node_Str"" + value);
            currentValidFromDate=value;
          }
 else           if (id.equalsIgnoreCase(VALID_TO)) {
            logger.finer(""String_Node_Str"" + value);
            currentValidToDate=value;
          }
        }
      }
      if (startElement.getName().getLocalPart() == (MESSAGE)) {
        String errorCode=null;
        String errorSeverity=null;
        LocalizedText errorMsg=new LocalizedText(Configuration.getLang());
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        while (attributes.hasNext()) {
          Attribute attr=attributes.next();
          String id=attr.getName().toString();
          String value=attr.getValue();
          if (id.equalsIgnoreCase(CODE)) {
            errorCode=value;
          }
 else           if (id.equalsIgnoreCase(SEVERITY)) {
            errorSeverity=value;
          }
        }
        eventReader.nextEvent();
        errorMsg.setText(startElement,eventReader);
        throw new SdmxException(""String_Node_Str"" + errorCode + ""String_Node_Str""+ errorSeverity+ ""String_Node_Str""+ errorMsg.getText());
      }
      if (startElement.getName().getLocalPart() == (SERIES)) {
        logger.finer(""String_Node_Str"");
        ts=new PortableTimeSeries();
        ts.setDataflow(dataflow);
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        setMetadata(ts,dsd,attributes,currentAction,currentValidFromDate,currentValidToDate);
      }
      if (startElement.getName().getLocalPart().equals(OBS) && data) {
        event=eventReader.nextEvent();
        logger.finest(event.toString());
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        String time=null;
        String obs_val=null;
        Hashtable<String,String> obs_attr=new Hashtable<String,String>();
        while (attributes.hasNext()) {
          Attribute attribute=attributes.next();
          String name=attribute.getName().toString();
          if (name.equals(dsd.getTimeDimension())) {
            time=attribute.getValue();
          }
 else           if (name.equals(dsd.getMeasure())) {
            obs_val=attribute.getValue();
          }
 else {
            obs_attr.put(name,attribute.getValue());
          }
        }
        if (time != null && !time.isEmpty() && obs_val != null && !obs_val.isEmpty()) {
          ts.addObservation(new Double(obs_val),time,obs_attr);
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + time + ""String_Node_Str""+ obs_val);
        }
        continue;
      }
    }
    if (event.isEndElement()) {
      EndElement endElement=event.asEndElement();
      if (endElement.getName().getLocalPart() == (SERIES)) {
        logger.finer(""String_Node_Str"" + ts);
        List<String> dates=ts.getTimeSlots();
        int n=dates.size();
        if (n > 1) {
          if (dates.get(n - 1).compareToIgnoreCase(dates.get(0)) < 0) {
            ts.reverse();
          }
        }
        tsList.add(ts);
      }
    }
  }
  logger.exiting(sourceClass,sourceMethod);
  return tsList;
}","public static List<PortableTimeSeries> parse(InputStreamReader xmlBuffer,DataFlowStructure dsd,String dataflow,boolean data) throws XMLStreamException, UnsupportedEncodingException, SdmxException {
  final String sourceMethod=""String_Node_Str"";
  logger.entering(sourceClass,sourceMethod);
  List<PortableTimeSeries> tsList=new ArrayList<PortableTimeSeries>();
  XMLInputFactory inputFactory=XMLInputFactory.newInstance();
  BufferedReader br=GenericDataParser.skipBOM(xmlBuffer);
  XMLEventReader eventReader=inputFactory.createXMLEventReader(br);
  PortableTimeSeries ts=null;
  String currentAction=null;
  String currentValidFromDate=null;
  String currentValidToDate=null;
  while (eventReader.hasNext()) {
    XMLEvent event=eventReader.nextEvent();
    logger.finest(event.toString());
    if (event.isStartElement()) {
      StartElement startElement=event.asStartElement();
      if (startElement.getName().getLocalPart() == (DATASET)) {
        logger.finer(""String_Node_Str"");
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        while (attributes.hasNext()) {
          Attribute attr=attributes.next();
          String id=attr.getName().getLocalPart().toString();
          String value=attr.getValue();
          if (id.equalsIgnoreCase(ACTION)) {
            logger.finer(""String_Node_Str"" + value);
            currentAction=value;
          }
 else           if (id.equalsIgnoreCase(VALID_FROM)) {
            logger.finer(""String_Node_Str"" + value);
            currentValidFromDate=value;
          }
 else           if (id.equalsIgnoreCase(VALID_TO)) {
            logger.finer(""String_Node_Str"" + value);
            currentValidToDate=value;
          }
        }
      }
      if (startElement.getName().getLocalPart() == (MESSAGE)) {
        String errorCode=null;
        String errorSeverity=null;
        LocalizedText errorMsg=new LocalizedText(Configuration.getLang());
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        while (attributes.hasNext()) {
          Attribute attr=attributes.next();
          String id=attr.getName().toString();
          String value=attr.getValue();
          if (id.equalsIgnoreCase(CODE)) {
            errorCode=value;
          }
 else           if (id.equalsIgnoreCase(SEVERITY)) {
            errorSeverity=value;
          }
        }
        eventReader.nextEvent();
        errorMsg.setText(startElement,eventReader);
        throw new SdmxException(""String_Node_Str"" + errorCode + ""String_Node_Str""+ errorSeverity+ ""String_Node_Str""+ errorMsg.getText());
      }
      if (startElement.getName().getLocalPart() == (SERIES)) {
        logger.finer(""String_Node_Str"");
        ts=new PortableTimeSeries();
        ts.setDataflow(dataflow);
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        setMetadata(ts,dsd,attributes,currentAction,currentValidFromDate,currentValidToDate);
      }
      if (startElement.getName().getLocalPart().equals(OBS) && data) {
        event=eventReader.nextEvent();
        logger.finest(event.toString());
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        String time=null;
        String obs_val=null;
        Hashtable<String,String> obs_attr=new Hashtable<String,String>();
        while (attributes.hasNext()) {
          Attribute attribute=attributes.next();
          String name=attribute.getName().toString();
          if (name.equals(dsd.getTimeDimension())) {
            time=attribute.getValue();
          }
 else           if (name.equals(dsd.getMeasure())) {
            obs_val=attribute.getValue();
          }
 else {
            obs_attr.put(name,attribute.getValue());
          }
        }
        if (time != null && !time.isEmpty() && obs_val != null && !obs_val.isEmpty()) {
          ts.addObservation(new Double(obs_val),time,obs_attr);
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + time + ""String_Node_Str""+ obs_val);
        }
        continue;
      }
    }
    if (event.isEndElement()) {
      EndElement endElement=event.asEndElement();
      if (endElement.getName().getLocalPart() == (SERIES)) {
        logger.finer(""String_Node_Str"" + ts);
        List<String> dates=ts.getTimeSlots();
        int n=dates.size();
        if (n > 1) {
          if (dates.get(n - 1).compareToIgnoreCase(dates.get(0)) < 0) {
            ts.reverse();
          }
        }
        tsList.add(ts);
      }
    }
  }
  logger.exiting(sourceClass,sourceMethod);
  return tsList;
}"
34317,"public void reverse(){
  Collections.reverse(this.observations);
  Collections.reverse(this.timeSlots);
}","public void reverse(){
  Collections.reverse(this.observations);
  Collections.reverse(this.timeSlots);
  for (Iterator<String> iterator=obsLevelAttributes.keySet().iterator(); iterator.hasNext(); ) {
    String key=(String)iterator.next();
    ArrayList<String> attrs=obsLevelAttributes.get(key);
    Collections.reverse(attrs);
    obsLevelAttributes.put(key,attrs);
  }
}"
34318,"public static int getTimeSeries(String[] args){
  List<PortableTimeSeries> tslist=null;
  int returnCode=0;
  if (args.length < 2) {
    SFIToolkit.displayln(""String_Node_Str"");
    return -1;
  }
  String provider=args[0];
  String tsKey=args[1];
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String meta=""String_Node_Str"";
  boolean processMeta=false;
  boolean processData=true;
  if (args.length >= 3 && !args[2].isEmpty()) {
    start=args[2];
  }
  if (args.length >= 4 && !args[3].isEmpty()) {
    end=args[3];
  }
  if (args.length >= 5) {
    meta=args[4];
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      meta=""String_Node_Str"";
    }
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
      processData=false;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + meta);
    }
  }
  try {
    int dataLength=0;
    tslist=SdmxClientHandler.getTimeSeries(provider,tsKey,start,end);
    if (tslist == null) {
      SFIToolkit.displayln(""String_Node_Str"");
      return -1;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + tslist.size() + ""String_Node_Str"");
    }
    if (processData) {
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        dataLength+=ts.getObservations().size();
      }
    }
 else {
      dataLength=tslist.size();
    }
    if (dataLength > 0) {
      int name=0;
      int date=0;
      int val=0;
      Data.setObsCount(dataLength);
      Data.addVarStr(""String_Node_Str"",10);
      name=Data.getVarIndex(""String_Node_Str"");
      int lastPos=name;
      if (processData) {
        SFIToolkit.displayln(""String_Node_Str"" + dataLength + ""String_Node_Str"");
        Data.addVarStr(""String_Node_Str"",5);
        Data.addVarDouble(""String_Node_Str"");
        date=Data.getVarIndex(""String_Node_Str"");
        val=Data.getVarIndex(""String_Node_Str"");
        lastPos=val;
      }
      int i=0;
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        String tsname=ts.getName();
        if (processData) {
          List<Double> tsobs=ts.getObservations();
          List<String> tsdates=ts.getTimeSlots();
          int j=0;
          for (Iterator<Double> iterator2=tsobs.iterator(); iterator2.hasNext(); ) {
            Data.storeStr(name,i + j + 1,tsname);
            Data.storeNum(val,i + j + 1,iterator2.next());
            Data.storeStr(date,i + j + 1,tsdates.get(j));
            if (processMeta) {
              List<String> dimensions=ts.getDimensions();
              List<String> attributes=ts.getAttributes();
              attributes.addAll(dimensions);
              for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
                String attr=(String)iterator3.next();
                String[] tokens=attr.split(""String_Node_Str"");
                String key=tokens[0];
                String value=tokens[1];
                if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
                  int attrPos=Data.getVarIndex(key);
                  if (attrPos > lastPos) {
                    lastPos=attrPos;
                    Data.addVarStr(key,value.length());
                  }
                  Data.storeStr(attrPos,i + j + 1,value);
                }
              }
              List<String> obsAttrNames=ts.getObsLevelAttributesNames();
              for (Iterator<String> iterator3=obsAttrNames.iterator(); iterator3.hasNext(); ) {
                String attrName=(String)iterator3.next();
                List<String> obsAttr=ts.getObsLevelAttributes(attrName);
                if (obsAttr != null && !obsAttr.isEmpty()) {
                  int attrPos=Data.getVarIndex(attrName);
                  if (attrPos > lastPos) {
                    lastPos=attrPos;
                    Data.addVarStr(attrName,1);
                  }
                  Data.storeStr(attrPos,i + j + 1,obsAttr.get(j));
                }
              }
            }
            j++;
          }
          i++;
        }
 else {
          Data.storeStr(name,i + 1,tsname);
          List<String> dimensions=ts.getDimensions();
          List<String> attributes=ts.getAttributes();
          attributes.addAll(dimensions);
          for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
            String attr=(String)iterator3.next();
            String[] tokens=attr.split(""String_Node_Str"");
            String key=tokens[0];
            String value=tokens[1];
            if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
              int attrPos=Data.getVarIndex(key);
              if (attrPos > lastPos) {
                lastPos=attrPos;
                Data.addVarStr(key,10);
              }
              Data.storeStr(attrPos,i + 1,value);
            }
          }
          i++;
        }
      }
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    SFIToolkit.displayln(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
    logger.log(Level.FINER,""String_Node_Str"",e);
    returnCode=-1;
  }
  return returnCode;
}","public static int getTimeSeries(String[] args){
  List<PortableTimeSeries> tslist=null;
  int returnCode=0;
  if (args.length < 2) {
    SFIToolkit.displayln(""String_Node_Str"");
    return -1;
  }
  String provider=args[0];
  String tsKey=args[1];
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String meta=""String_Node_Str"";
  boolean processMeta=false;
  boolean processData=true;
  if (args.length >= 3 && !args[2].isEmpty()) {
    start=args[2];
  }
  if (args.length >= 4 && !args[3].isEmpty()) {
    end=args[3];
  }
  if (args.length >= 5) {
    meta=args[4];
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      meta=""String_Node_Str"";
    }
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
      processData=false;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + meta);
    }
  }
  try {
    int dataLength=0;
    tslist=SdmxClientHandler.getTimeSeries(provider,tsKey,start,end);
    if (tslist == null) {
      SFIToolkit.displayln(""String_Node_Str"");
      return -1;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + tslist.size() + ""String_Node_Str"");
    }
    if (processData) {
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        dataLength+=ts.getObservations().size();
      }
    }
 else {
      dataLength=tslist.size();
    }
    if (dataLength > 0) {
      int name=0;
      int date=0;
      int val=0;
      Data.setObsCount(dataLength);
      Data.addVarStr(""String_Node_Str"",10);
      name=Data.getVarIndex(""String_Node_Str"");
      int lastPos=name;
      if (processData) {
        SFIToolkit.displayln(""String_Node_Str"" + dataLength + ""String_Node_Str"");
        Data.addVarStr(""String_Node_Str"",5);
        Data.addVarDouble(""String_Node_Str"");
        date=Data.getVarIndex(""String_Node_Str"");
        val=Data.getVarIndex(""String_Node_Str"");
        lastPos=val;
      }
      int i=0;
      int rowOffset=0;
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        String tsname=ts.getName();
        if (processData) {
          List<Double> tsobs=ts.getObservations();
          List<String> tsdates=ts.getTimeSlots();
          int j=0;
          for (Iterator<Double> iterator2=tsobs.iterator(); iterator2.hasNext(); ) {
            Data.storeStr(name,rowOffset + j + 1,tsname);
            Data.storeNum(val,rowOffset + j + 1,iterator2.next());
            Data.storeStr(date,rowOffset + j + 1,tsdates.get(j));
            if (processMeta) {
              List<String> dimensions=ts.getDimensions();
              List<String> attributes=ts.getAttributes();
              attributes.addAll(dimensions);
              for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
                String attr=(String)iterator3.next();
                String[] tokens=attr.split(""String_Node_Str"");
                String key=tokens[0];
                String value=tokens[1];
                if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
                  int attrPos=Data.getVarIndex(key);
                  if (attrPos > lastPos) {
                    lastPos=attrPos;
                    Data.addVarStr(key,value.length());
                  }
                  Data.storeStr(attrPos,rowOffset + j + 1,value);
                }
              }
              if (processMeta) {
                List<String> obsAttrNames=ts.getObsLevelAttributesNames();
                for (Iterator<String> iterator3=obsAttrNames.iterator(); iterator3.hasNext(); ) {
                  String attrName=(String)iterator3.next();
                  List<String> obsAttr=ts.getObsLevelAttributes(attrName);
                  if (obsAttr != null && !obsAttr.isEmpty()) {
                    int attrPos=Data.getVarIndex(attrName);
                    if (attrPos > lastPos) {
                      lastPos=attrPos;
                      Data.addVarStr(attrName,1);
                    }
                    Data.storeStr(attrPos,rowOffset + j + 1,obsAttr.get(j));
                  }
                }
              }
            }
            j++;
          }
          rowOffset=j;
        }
 else {
          Data.storeStr(name,i + 1,tsname);
          List<String> dimensions=ts.getDimensions();
          List<String> attributes=ts.getAttributes();
          attributes.addAll(dimensions);
          for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
            String attr=(String)iterator3.next();
            String[] tokens=attr.split(""String_Node_Str"");
            String key=tokens[0];
            String value=tokens[1];
            if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
              int attrPos=Data.getVarIndex(key);
              if (attrPos > lastPos) {
                lastPos=attrPos;
                Data.addVarStr(key,10);
              }
              Data.storeStr(attrPos,i + 1,value);
            }
          }
        }
        i++;
      }
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    SFIToolkit.displayln(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
    logger.log(Level.FINER,""String_Node_Str"",e);
    returnCode=-1;
  }
  return returnCode;
}"
34319,"public static int getTimeSeries(String[] args){
  List<PortableTimeSeries> tslist=null;
  int returnCode=0;
  if (args.length < 2) {
    SFIToolkit.displayln(""String_Node_Str"");
    return -1;
  }
  String provider=args[0];
  String tsKey=args[1];
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String meta=""String_Node_Str"";
  boolean processMeta=false;
  boolean processData=true;
  if (args.length >= 3 && !args[2].isEmpty()) {
    start=args[2];
  }
  if (args.length >= 4 && !args[3].isEmpty()) {
    end=args[3];
  }
  if (args.length >= 5) {
    meta=args[4];
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      meta=""String_Node_Str"";
    }
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
      processData=false;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + meta);
    }
  }
  try {
    int dataLength=0;
    tslist=SdmxClientHandler.getTimeSeries(provider,tsKey,start,end);
    if (tslist == null) {
      SFIToolkit.displayln(""String_Node_Str"");
      return -1;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + tslist.size() + ""String_Node_Str"");
    }
    if (processData) {
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        dataLength+=ts.getObservations().size();
      }
    }
 else {
      dataLength=tslist.size();
    }
    if (dataLength > 0) {
      int name=0;
      int date=0;
      int val=0;
      int stat=0;
      Data.setObsCount(dataLength);
      Data.addVarStr(""String_Node_Str"",10);
      name=Data.getVarIndex(""String_Node_Str"");
      if (processData) {
        SFIToolkit.displayln(""String_Node_Str"" + dataLength + ""String_Node_Str"");
        Data.addVarStr(""String_Node_Str"",5);
        Data.addVarDouble(""String_Node_Str"");
        Data.addVarStr(""String_Node_Str"",1);
        date=Data.getVarIndex(""String_Node_Str"");
        val=Data.getVarIndex(""String_Node_Str"");
        stat=Data.getVarIndex(""String_Node_Str"");
      }
      int i=0;
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        String tsname=ts.getName();
        if (processData) {
          List<Double> tsobs=ts.getObservations();
          List<String> tsdates=ts.getTimeSlots();
          List<String> tsstat=ts.getStatus();
          int j=0;
          for (Iterator<Double> iterator2=tsobs.iterator(); iterator2.hasNext(); ) {
            Data.storeStr(name,i + 1,tsname);
            Data.storeNum(val,i + 1,iterator2.next());
            Data.storeStr(date,i + 1,tsdates.get(j));
            if (tsstat != null && j < tsstat.size()) {
              Data.storeStr(stat,i + 1,tsstat.get(j));
            }
            j++;
            if (processMeta) {
              int lastPos=stat;
              List<String> dimensions=ts.getDimensions();
              List<String> attributes=ts.getAttributes();
              attributes.addAll(dimensions);
              for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
                String attr=(String)iterator3.next();
                String[] tokens=attr.split(""String_Node_Str"");
                String key=tokens[0];
                String value=tokens[1];
                if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
                  int attrPos=Data.getVarIndex(key);
                  if (attrPos > lastPos) {
                    lastPos=attrPos;
                    Data.addVarStr(key,10);
                  }
                  Data.storeStr(attrPos,i + 1,value);
                }
              }
            }
            i++;
          }
        }
 else {
          Data.storeStr(name,i + 1,tsname);
          int lastPos=name;
          List<String> dimensions=ts.getDimensions();
          List<String> attributes=ts.getAttributes();
          attributes.addAll(dimensions);
          for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
            String attr=(String)iterator3.next();
            String[] tokens=attr.split(""String_Node_Str"");
            String key=tokens[0];
            String value=tokens[1];
            if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
              int attrPos=Data.getVarIndex(key);
              if (attrPos > lastPos) {
                lastPos=attrPos;
                Data.addVarStr(key,10);
              }
              Data.storeStr(attrPos,i + 1,value);
            }
          }
          i++;
        }
      }
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    SFIToolkit.displayln(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
    logger.log(Level.FINER,""String_Node_Str"",e);
    returnCode=-1;
  }
  return returnCode;
}","public static int getTimeSeries(String[] args){
  List<PortableTimeSeries> tslist=null;
  int returnCode=0;
  if (args.length < 2) {
    SFIToolkit.displayln(""String_Node_Str"");
    return -1;
  }
  String provider=args[0];
  String tsKey=args[1];
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String meta=""String_Node_Str"";
  boolean processMeta=false;
  boolean processData=true;
  if (args.length >= 3 && !args[2].isEmpty()) {
    start=args[2];
  }
  if (args.length >= 4 && !args[3].isEmpty()) {
    end=args[3];
  }
  if (args.length >= 5) {
    meta=args[4];
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      meta=""String_Node_Str"";
    }
    if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
    }
 else     if (meta.equalsIgnoreCase(""String_Node_Str"")) {
      SFIToolkit.displayln(""String_Node_Str"");
      processMeta=true;
      processData=false;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + meta);
    }
  }
  try {
    int dataLength=0;
    tslist=SdmxClientHandler.getTimeSeries(provider,tsKey,start,end);
    if (tslist == null) {
      SFIToolkit.displayln(""String_Node_Str"");
      return -1;
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"" + tslist.size() + ""String_Node_Str"");
    }
    if (processData) {
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        dataLength+=ts.getObservations().size();
      }
    }
 else {
      dataLength=tslist.size();
    }
    if (dataLength > 0) {
      int name=0;
      int date=0;
      int val=0;
      int stat=0;
      Data.setObsCount(dataLength);
      Data.addVarStr(""String_Node_Str"",10);
      name=Data.getVarIndex(""String_Node_Str"");
      int lastPos=name;
      if (processData) {
        SFIToolkit.displayln(""String_Node_Str"" + dataLength + ""String_Node_Str"");
        Data.addVarStr(""String_Node_Str"",5);
        Data.addVarDouble(""String_Node_Str"");
        Data.addVarStr(""String_Node_Str"",1);
        date=Data.getVarIndex(""String_Node_Str"");
        val=Data.getVarIndex(""String_Node_Str"");
        stat=Data.getVarIndex(""String_Node_Str"");
        lastPos=stat;
      }
      int i=0;
      for (Iterator<PortableTimeSeries> iterator=tslist.iterator(); iterator.hasNext(); ) {
        PortableTimeSeries ts=(PortableTimeSeries)iterator.next();
        String tsname=ts.getName();
        if (processData) {
          List<Double> tsobs=ts.getObservations();
          List<String> tsdates=ts.getTimeSlots();
          List<String> tsstat=ts.getStatus();
          int j=0;
          for (Iterator<Double> iterator2=tsobs.iterator(); iterator2.hasNext(); ) {
            Data.storeStr(name,i + 1,tsname);
            Data.storeNum(val,i + 1,iterator2.next());
            Data.storeStr(date,i + 1,tsdates.get(j));
            if (tsstat != null && j < tsstat.size()) {
              Data.storeStr(stat,i + 1,tsstat.get(j));
            }
            j++;
            if (processMeta) {
              List<String> dimensions=ts.getDimensions();
              List<String> attributes=ts.getAttributes();
              attributes.addAll(dimensions);
              for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
                String attr=(String)iterator3.next();
                String[] tokens=attr.split(""String_Node_Str"");
                String key=tokens[0];
                String value=tokens[1];
                if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
                  int attrPos=Data.getVarIndex(key);
                  if (attrPos > lastPos) {
                    lastPos=attrPos;
                    Data.addVarStr(key,value.length());
                  }
                  Data.storeStr(attrPos,i + 1,value);
                }
              }
            }
            i++;
          }
        }
 else {
          Data.storeStr(name,i + 1,tsname);
          List<String> dimensions=ts.getDimensions();
          List<String> attributes=ts.getAttributes();
          attributes.addAll(dimensions);
          for (Iterator<String> iterator3=attributes.iterator(); iterator3.hasNext(); ) {
            String attr=(String)iterator3.next();
            String[] tokens=attr.split(""String_Node_Str"");
            String key=tokens[0];
            String value=tokens[1];
            if (key != null && !key.isEmpty() && value != null && !value.isEmpty()) {
              int attrPos=Data.getVarIndex(key);
              if (attrPos > lastPos) {
                lastPos=attrPos;
                Data.addVarStr(key,10);
              }
              Data.storeStr(attrPos,i + 1,value);
            }
          }
          i++;
        }
      }
    }
 else {
      SFIToolkit.displayln(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    SFIToolkit.displayln(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
    logger.log(Level.FINER,""String_Node_Str"",e);
    returnCode=-1;
  }
  return returnCode;
}"
34320,"public static List<DataFlowStructure> parse(InputStreamReader xmlBuffer) throws XMLStreamException, SdmxException, UnsupportedEncodingException {
  final String sourceMethod=""String_Node_Str"";
  logger.entering(sourceClass,sourceMethod);
  XMLInputFactory inputFactory=XMLInputFactory.newInstance();
  XMLEventReader eventReader=inputFactory.createXMLEventReader(xmlBuffer);
  List<DataFlowStructure> result=new ArrayList<DataFlowStructure>();
  Map<String,Map<String,String>> codelists=null;
  DataFlowStructure currentStructure=null;
  LocalizedText currentName=new LocalizedText(Configuration.getLang());
  while (eventReader.hasNext()) {
    XMLEvent event=eventReader.nextEvent();
    logger.finest(event.toString());
    if (event.isStartElement()) {
      StartElement startElement=event.asStartElement();
      if (startElement.getName().getLocalPart() == (CODELISTS)) {
        codelists=getCodelists(eventReader);
      }
 else       if (startElement.getName().getLocalPart() == (DATASTRUCTURE)) {
        currentStructure=new DataFlowStructure();
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        while (attributes.hasNext()) {
          Attribute attr=attributes.next();
          String id=null;
          String agency=null;
          if (attr.getName().toString().equals(ID)) {
            id=attr.getValue();
            currentStructure.setId(id);
          }
 else           if (attr.getName().toString().equals(AGENCYID)) {
            agency=attr.getValue();
            currentStructure.setAgency(agency);
          }
        }
      }
 else       if (startElement.getName().getLocalPart().equals(NAME)) {
        if (currentStructure != null) {
          currentName.setText(startElement,eventReader);
        }
      }
 else       if (startElement.getName().getLocalPart().equals(COMPONENTS)) {
        if (currentStructure != null) {
          setStructureDimensionsAndAttributes(currentStructure,eventReader,codelists);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
    if (event.isEndElement()) {
      if (event.asEndElement().getName().getLocalPart().equals(DATASTRUCTURE)) {
        logger.finer(""String_Node_Str"" + currentStructure);
        currentStructure.setName(currentName.getText());
        currentName=new LocalizedText(Configuration.getLang());
        result.add(currentStructure);
      }
    }
  }
  logger.exiting(sourceClass,sourceMethod);
  return result;
}","public static List<DataFlowStructure> parse(InputStreamReader xmlBuffer) throws XMLStreamException, SdmxException, UnsupportedEncodingException {
  final String sourceMethod=""String_Node_Str"";
  logger.entering(sourceClass,sourceMethod);
  XMLInputFactory inputFactory=XMLInputFactory.newInstance();
  XMLEventReader eventReader=inputFactory.createXMLEventReader(xmlBuffer);
  List<DataFlowStructure> result=new ArrayList<DataFlowStructure>();
  Map<String,Map<String,String>> codelists=null;
  DataFlowStructure currentStructure=null;
  LocalizedText currentName=new LocalizedText(Configuration.getLang());
  while (eventReader.hasNext()) {
    XMLEvent event=eventReader.nextEvent();
    logger.finest(event.toString());
    if (event.isStartElement()) {
      StartElement startElement=event.asStartElement();
      if (startElement.getName().getLocalPart() == (CODELISTS)) {
        codelists=getCodelists(eventReader);
      }
 else       if (startElement.getName().getLocalPart() == (DATASTRUCTURE)) {
        currentStructure=new DataFlowStructure();
        currentName.clear();
        @SuppressWarnings(""String_Node_Str"") Iterator<Attribute> attributes=startElement.getAttributes();
        while (attributes.hasNext()) {
          Attribute attr=attributes.next();
          String id=null;
          String agency=null;
          if (attr.getName().toString().equals(ID)) {
            id=attr.getValue();
            currentStructure.setId(id);
          }
 else           if (attr.getName().toString().equals(AGENCYID)) {
            agency=attr.getValue();
            currentStructure.setAgency(agency);
          }
        }
      }
 else       if (startElement.getName().getLocalPart().equals(NAME)) {
        if (currentStructure != null) {
          currentName.setText(startElement,eventReader);
        }
      }
 else       if (startElement.getName().getLocalPart().equals(COMPONENTS)) {
        if (currentStructure != null) {
          setStructureDimensionsAndAttributes(currentStructure,eventReader,codelists);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
    if (event.isEndElement()) {
      if (event.asEndElement().getName().getLocalPart().equals(DATASTRUCTURE)) {
        logger.finer(""String_Node_Str"" + currentStructure);
        currentStructure.setName(currentName.getText());
        result.add(currentStructure);
      }
    }
  }
  logger.exiting(sourceClass,sourceMethod);
  return result;
}"
34321,"/** 
 * 反注册组件
 * @param classname 组件名
 */
public static void unregisterComponent(@Nullable String classname){
  if (TextUtils.isEmpty(classname)) {
    return;
  }
  if (components.keySet().contains(classname)) {
    components.get(classname).onStop();
    components.remove(classname);
    return;
  }
}","/** 
 * 反注册组件
 * @param classname 组件名
 */
public static void unregisterComponent(@Nullable String classname){
  if (TextUtils.isEmpty(classname)) {
    return;
  }
  if (components.keySet().contains(classname)) {
    components.get(classname).onStop();
    components.remove(classname);
    return;
  }
  try {
    Class clazz=Class.forName(classname);
    IApplicationLike applicationLike=(IApplicationLike)clazz.newInstance();
    applicationLike.onStop();
    components.remove(classname);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
34322,"public static void registerComponent(String classname){
  try {
    Class clazz=Class.forName(classname);
    IApplicationLike applicationLike=(IApplicationLike)clazz.newInstance();
    applicationLike.onCreate();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * 注册组件
 * @param classname 组件名
 */
public static void registerComponent(@Nullable String classname){
  if (TextUtils.isEmpty(classname)) {
    return;
  }
  if (components.keySet().contains(classname)) {
    return;
  }
  try {
    Class clazz=Class.forName(classname);
    IApplicationLike applicationLike=(IApplicationLike)clazz.newInstance();
    applicationLike.onCreate();
    components.put(classname,applicationLike);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
34323,"public static void unregisterComponent(String classname){
  try {
    Class clazz=Class.forName(classname);
    IApplicationLike applicationLike=(IApplicationLike)clazz.newInstance();
    applicationLike.onStop();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * 反注册组件
 * @param classname 组件名
 */
public static void unregisterComponent(@Nullable String classname){
  if (TextUtils.isEmpty(classname)) {
    return;
  }
  if (components.keySet().contains(classname)) {
    components.get(classname).onStop();
    components.remove(classname);
    return;
  }
}"
34324,"@Override public boolean verifyUri(Uri uri){
  String scheme=uri.getScheme();
  String host=uri.getHost();
  if (SCHME.equals(scheme) && SHAREHOST.contains(host)) {
    return true;
  }
  return false;
}","@Override public boolean verifyUri(Uri uri){
  String scheme=uri.getScheme();
  String host=uri.getHost();
  if (SCHME.equals(scheme)) {
    for (    String str : HOSTS) {
      if (str.equals(host)) {
        return true;
      }
    }
  }
  return false;
}"
34325,"private boolean thriftIsSetCall(Symbol.MethodSymbol symbol,Types types){
  Preconditions.checkNotNull(tbaseType);
  return tbaseType.isPresent() && symbol.getSimpleName().toString().startsWith(""String_Node_Str"") && types.isSubtype(symbol.owner.type,tbaseType.get());
}","private boolean thriftIsSetCall(Symbol.MethodSymbol symbol,Types types){
  Preconditions.checkNotNull(tbaseType);
  return tbaseType.isPresent() && symbol.getSimpleName().toString().startsWith(""String_Node_Str"") && symbol.getParameters().length() == 0 && types.isSubtype(symbol.owner.type,tbaseType.get());
}"
34326,"private static Pair<Element,Element> getFieldAndSetterForProperty(Symbol.MethodSymbol symbol,String capPropName){
  Element field=null;
  Element getter=null;
  String fieldName=capPropName.toLowerCase();
  String getterName=""String_Node_Str"" + capPropName;
  for (  Symbol elem : symbol.owner.getEnclosedElements()) {
    if (elem.getKind().isField() && elem.getSimpleName().toString().equals(fieldName)) {
      if (field != null) {
        throw new RuntimeException(""String_Node_Str"" + fieldName);
      }
      field=elem;
    }
 else     if (elem.getKind().equals(ElementKind.METHOD) && elem.getSimpleName().toString().equals(getterName)) {
      if (getter != null) {
        throw new RuntimeException(""String_Node_Str"" + getterName);
      }
      getter=elem;
    }
  }
  if (field == null) {
    throw new IllegalStateException(""String_Node_Str"" + fieldName);
  }
  if (getter == null) {
    throw new IllegalStateException(""String_Node_Str"" + getterName);
  }
  return Pair.of(field,getter);
}","/** 
 * Returns the field (if it exists and is visible) and the setter for a property. If the field is not available, the first element of the returned pair is   {@code null}.
 */
private Pair<Element,Element> getFieldAndSetterForProperty(Symbol.MethodSymbol symbol,String capPropName){
  Element field=null;
  Element getter=null;
  String fieldName=capPropName.toLowerCase();
  String getterName=""String_Node_Str"" + capPropName;
  for (  Symbol elem : symbol.owner.getEnclosedElements()) {
    if (elem.getKind().isField() && elem.getSimpleName().toString().equals(fieldName)) {
      if (field != null) {
        throw new RuntimeException(""String_Node_Str"" + fieldName);
      }
      field=elem;
    }
 else     if (elem.getKind().equals(ElementKind.METHOD) && elem.getSimpleName().toString().equals(getterName)) {
      if (getter != null) {
        throw new RuntimeException(""String_Node_Str"" + getterName);
      }
      getter=elem;
    }
  }
  if (getter == null) {
    throw new IllegalStateException(""String_Node_Str"" + getterName);
  }
  return Pair.of(field,getter);
}"
34327,"@Override public void onMatchTopLevelClass(NullAway analysis,ClassTree tree,VisitorState state,Symbol.ClassSymbol classSymbol){
  if (tbaseType == null) {
    tbaseType=Optional.ofNullable(state.getTypeFromString(TBASE_NAME));
  }
}","@Override public void onMatchTopLevelClass(NullAway analysis,ClassTree tree,VisitorState state,Symbol.ClassSymbol classSymbol){
  if (tbaseType == null) {
    tbaseType=getErasedTypeFromName(TBASE_NAME,state);
  }
}"
34328,"@Override public NullnessHint onDataflowVisitMethodInvocation(MethodInvocationNode node,Types types,AccessPathNullnessPropagation.SubNodeValues inputs,AccessPathNullnessPropagation.Updates thenUpdates,AccessPathNullnessPropagation.Updates elseUpdates,AccessPathNullnessPropagation.Updates bothUpdates){
  Symbol.MethodSymbol symbol=ASTHelpers.getSymbol(node.getTree());
  if (thriftIsSetCall(symbol,types)) {
    String methodName=symbol.getSimpleName().toString();
    String capPropName=methodName.substring(5);
    Pair<Element,Element> fieldAndGetter=getFieldAndSetterForProperty(symbol,capPropName);
    Node base=node.getTarget().getReceiver();
    thenUpdates.set(AccessPath.fromBaseAndElement(base,fieldAndGetter.first),Nullness.NONNULL);
    thenUpdates.set(AccessPath.fromBaseAndElement(base,fieldAndGetter.second),Nullness.NONNULL);
  }
  return NullnessHint.UNKNOWN;
}","@Override public NullnessHint onDataflowVisitMethodInvocation(MethodInvocationNode node,Types types,AccessPathNullnessPropagation.SubNodeValues inputs,AccessPathNullnessPropagation.Updates thenUpdates,AccessPathNullnessPropagation.Updates elseUpdates,AccessPathNullnessPropagation.Updates bothUpdates){
  Symbol.MethodSymbol symbol=ASTHelpers.getSymbol(node.getTree());
  if (thriftIsSetCall(symbol,types)) {
    String methodName=symbol.getSimpleName().toString();
    String capPropName=methodName.substring(5);
    Pair<Element,Element> fieldAndGetter=getFieldAndSetterForProperty(symbol,capPropName);
    Node base=node.getTarget().getReceiver();
    if (fieldAndGetter.first != null) {
      thenUpdates.set(AccessPath.fromBaseAndElement(base,fieldAndGetter.first),Nullness.NONNULL);
    }
    thenUpdates.set(AccessPath.fromBaseAndElement(base,fieldAndGetter.second),Nullness.NONNULL);
  }
  return NullnessHint.UNKNOWN;
}"
34329,"/** 
 * Copy Jar Input Stream to Jar Output Stream and add nullability model.
 * @param zis Jar Input Stream.
 * @param zos Jar Output Stream.
 */
private static void writeModelToJarStream(ZipInputStream zis,ZipOutputStream zos) throws IOException {
  for (ZipEntry ze; (ze=zis.getNextEntry()) != null; ) {
    zos.putNextEntry(ze);
    IOUtils.copy(zis,zos);
    zos.closeEntry();
  }
  zis.close();
  if (!map_result.isEmpty()) {
    zos.putNextEntry(new ZipEntry(DEFAULT_ASTUBX_LOCATION));
    writeModel(new DataOutputStream(zos));
    zos.closeEntry();
  }
  zos.finish();
}","/** 
 * Copy Jar Input Stream to Jar Output Stream and add nullability model.
 * @param zis Jar Input Stream.
 * @param zos Jar Output Stream.
 */
private static void writeModelToJarStream(ZipInputStream zis,ZipOutputStream zos) throws IOException {
  for (ZipEntry ze; (ze=zis.getNextEntry()) != null; ) {
    zos.putNextEntry(new ZipEntry(ze.getName()));
    IOUtils.copy(zis,zos);
    zos.closeEntry();
  }
  zis.close();
  if (!map_result.isEmpty()) {
    zos.putNextEntry(new ZipEntry(DEFAULT_ASTUBX_LOCATION));
    writeModel(new DataOutputStream(zos));
    zos.closeEntry();
  }
  zos.finish();
}"
34330,"private static boolean hasSameArgTypes(Symbol.MethodSymbol method1,Symbol.MethodSymbol method2,Types types){
  com.sun.tools.javac.util.List<VarSymbol> method1params=method1.getParameters();
  com.sun.tools.javac.util.List<VarSymbol> method2params=method2.getParameters();
  if (method1params.size() != method2params.size()) {
    return false;
  }
  for (int i=0; i < method1params.size(); i++) {
    if (!types.isSameType(method1params.get(i).type,method2params.get(i).type)) {
      return false;
    }
  }
  return true;
}","private static boolean hasSameArgTypes(Symbol.MethodSymbol method1,Symbol.MethodSymbol method2,Types types){
  com.sun.tools.javac.util.List<Type> method1ArgTypes=method1.type.asMethodType().argtypes;
  com.sun.tools.javac.util.List<Type> method2ArgTypes=method2.type.asMethodType().argtypes;
  return types.isSameTypes(types.erasure(method1ArgTypes),types.erasure(method2ArgTypes));
}"
34331,"private boolean mayBeNullFieldAccess(VisitorState state,ExpressionTree expr,Symbol exprSymbol){
  if (exprSymbol != null && !Nullness.hasNullableAnnotation(exprSymbol)) {
    return false;
  }
  return nullnessFromDataflow(state,expr);
}","private boolean mayBeNullFieldAccess(VisitorState state,ExpressionTree expr,Symbol exprSymbol){
  if (exprSymbol != null && (fromUnannotatedPackage(exprSymbol) || !Nullness.hasNullableAnnotation(exprSymbol))) {
    return false;
  }
  return nullnessFromDataflow(state,expr);
}"
34332,"@Test public void coreNullabilityNegativeCases(){
  compilationHelper.addSourceFile(""String_Node_Str"").addSourceFile(""String_Node_Str"").addSourceFile(""String_Node_Str"").doTest();
}","@Test public void coreNullabilityNegativeCases(){
  compilationHelper.addSourceFile(""String_Node_Str"").addSourceFile(""String_Node_Str"").addSourceFile(""String_Node_Str"").addSourceFile(""String_Node_Str"").doTest();
}"
34333,"UnannotatedClass(){
}","public UnannotatedClass(){
}"
34334,"public NullAway(ErrorProneFlags flags){
  config=new ErrorProneCLIFlagsConfig(flags);
  AnnotationUtils.clear();
}","public NullAway(ErrorProneFlags flags){
  config=new ErrorProneCLIFlagsConfig(flags);
  nonAnnotatedMethod=nonAnnotatedMethodCheck();
  AnnotationUtils.clear();
}"
34335,"private boolean mayBeNullFieldAccess(VisitorState state,ExpressionTree expr,Symbol exprSymbol){
  if (exprSymbol != null && (fromUnannotatedPackage(exprSymbol) || !Nullness.hasNullableAnnotation(exprSymbol))) {
    return false;
  }
  return nullnessFromDataflow(state,expr);
}","private boolean mayBeNullFieldAccess(VisitorState state,ExpressionTree expr,Symbol exprSymbol){
  if (!NullabilityUtil.mayBeNullFieldFromType(exprSymbol,config)) {
    return false;
  }
  return nullnessFromDataflow(state,expr);
}"
34336,"private boolean mayBeNullMethodCall(VisitorState state,ExpressionTree expr,Symbol.MethodSymbol exprSymbol){
  if (fromUnannotatedPackage(exprSymbol)) {
    return false;
  }
  if (!Nullness.hasNullableAnnotation(exprSymbol)) {
    return false;
  }
  return nullnessFromDataflow(state,expr);
}","private boolean mayBeNullMethodCall(VisitorState state,ExpressionTree expr,Symbol.MethodSymbol exprSymbol){
  if (NullabilityUtil.fromUnannotatedPackage(exprSymbol,config)) {
    return false;
  }
  if (!Nullness.hasNullableAnnotation(exprSymbol)) {
    return false;
  }
  return nullnessFromDataflow(state,expr);
}"
34337,"/** 
 * handle either a method invocation or a 'new' invocation
 * @param state visitor state
 * @param methodSymbol symbol for invoked method
 * @param actualParams parameters passed at call
 * @return description of error or NO_MATCH if no error
 */
private Description handleInvocation(VisitorState state,Symbol.MethodSymbol methodSymbol,List<? extends ExpressionTree> actualParams){
  ImmutableSet<Integer> nonNullPositions=null;
  if (fromUnannotatedPackage(methodSymbol)) {
    nonNullPositions=handler.onUnannotatedInvocationGetNonNullPositions(this,state,methodSymbol,actualParams,ImmutableSet.of());
  }
  if (nonNullPositions == null) {
    ImmutableSet.Builder<Integer> builder=ImmutableSet.builder();
    List<VarSymbol> formalParams=methodSymbol.getParameters();
    for (int i=0; i < formalParams.size(); i++) {
      if (i == formalParams.size() - 1 && methodSymbol.isVarArgs()) {
        continue;
      }
      VarSymbol param=formalParams.get(i);
      if (param.type.isPrimitive()) {
        Description unboxingCheck=doUnboxingCheck(state,actualParams.get(i));
        if (unboxingCheck != Description.NO_MATCH) {
          return unboxingCheck;
        }
 else {
          continue;
        }
      }
      boolean nullable=Nullness.hasNullableAnnotation(param);
      if (!nullable) {
        builder.add(i);
      }
    }
    nonNullPositions=builder.build();
  }
  if (nonNullPositions.isEmpty()) {
    return Description.NO_MATCH;
  }
  for (  int argPos : nonNullPositions) {
    ExpressionTree actual=actualParams.get(argPos);
    if (mayBeNullExpr(state,actual)) {
      String message=""String_Node_Str"" + actual.toString() + ""String_Node_Str"";
      return createErrorDescriptionForNullAssignment(MessageTypes.PASS_NULLABLE,actual,message,actual,state.getPath());
    }
  }
  return Description.NO_MATCH;
}","/** 
 * handle either a method invocation or a 'new' invocation
 * @param state visitor state
 * @param methodSymbol symbol for invoked method
 * @param actualParams parameters passed at call
 * @return description of error or NO_MATCH if no error
 */
private Description handleInvocation(VisitorState state,Symbol.MethodSymbol methodSymbol,List<? extends ExpressionTree> actualParams){
  ImmutableSet<Integer> nonNullPositions=null;
  if (NullabilityUtil.fromUnannotatedPackage(methodSymbol,config)) {
    nonNullPositions=handler.onUnannotatedInvocationGetNonNullPositions(this,state,methodSymbol,actualParams,ImmutableSet.of());
  }
  if (nonNullPositions == null) {
    ImmutableSet.Builder<Integer> builder=ImmutableSet.builder();
    List<VarSymbol> formalParams=methodSymbol.getParameters();
    for (int i=0; i < formalParams.size(); i++) {
      if (i == formalParams.size() - 1 && methodSymbol.isVarArgs()) {
        continue;
      }
      VarSymbol param=formalParams.get(i);
      if (param.type.isPrimitive()) {
        Description unboxingCheck=doUnboxingCheck(state,actualParams.get(i));
        if (unboxingCheck != Description.NO_MATCH) {
          return unboxingCheck;
        }
 else {
          continue;
        }
      }
      boolean nullable=Nullness.hasNullableAnnotation(param);
      if (!nullable) {
        builder.add(i);
      }
    }
    nonNullPositions=builder.build();
  }
  if (nonNullPositions.isEmpty()) {
    return Description.NO_MATCH;
  }
  for (  int argPos : nonNullPositions) {
    ExpressionTree actual=actualParams.get(argPos);
    if (mayBeNullExpr(state,actual)) {
      String message=""String_Node_Str"" + actual.toString() + ""String_Node_Str"";
      return createErrorDescriptionForNullAssignment(MessageTypes.PASS_NULLABLE,actual,message,actual,state.getPath());
    }
  }
  return Description.NO_MATCH;
}"
34338,"private Description checkReturnExpression(Tree tree,ExpressionTree retExpr,Symbol.MethodSymbol methodSymbol,VisitorState state){
  Type returnType=methodSymbol.getReturnType();
  if (returnType.isPrimitive()) {
    return doUnboxingCheck(state,retExpr);
  }
  if (returnType.toString().equals(""String_Node_Str"")) {
    return Description.NO_MATCH;
  }
  if (fromUnannotatedPackage(methodSymbol) || Nullness.hasNullableAnnotation(methodSymbol)) {
    return Description.NO_MATCH;
  }
  if (mayBeNullExpr(state,retExpr)) {
    String message=""String_Node_Str"";
    return createErrorDescriptionForNullAssignment(MessageTypes.RETURN_NULLABLE,tree,message,retExpr,state.getPath());
  }
  return Description.NO_MATCH;
}","private Description checkReturnExpression(Tree tree,ExpressionTree retExpr,Symbol.MethodSymbol methodSymbol,VisitorState state){
  Type returnType=methodSymbol.getReturnType();
  if (returnType.isPrimitive()) {
    return doUnboxingCheck(state,retExpr);
  }
  if (returnType.toString().equals(""String_Node_Str"")) {
    return Description.NO_MATCH;
  }
  if (NullabilityUtil.fromUnannotatedPackage(methodSymbol,config) || Nullness.hasNullableAnnotation(methodSymbol)) {
    return Description.NO_MATCH;
  }
  if (mayBeNullExpr(state,retExpr)) {
    String message=""String_Node_Str"";
    return createErrorDescriptionForNullAssignment(MessageTypes.RETURN_NULLABLE,tree,message,retExpr,state.getPath());
  }
  return Description.NO_MATCH;
}"
34339,"@Override public Description matchMethod(MethodTree tree,VisitorState state){
  if (!matchWithinClass) {
    return Description.NO_MATCH;
  }
  Symbol.MethodSymbol methodSymbol=ASTHelpers.getSymbol(tree);
  if (initializerErrors.containsKey(methodSymbol)) {
    return reportInitializerError(methodSymbol,tree);
  }
  handler.onMatchMethod(this,tree,state,methodSymbol);
  boolean isOverriding=ASTHelpers.hasAnnotation(methodSymbol,Override.class,state);
  boolean exhaustiveOverride=config.exhaustiveOverride();
  if (isOverriding || !exhaustiveOverride) {
    Symbol.MethodSymbol closestOverriddenMethod=getClosestOverriddenMethod(methodSymbol,state.getTypes());
    if (closestOverriddenMethod == null) {
      return Description.NO_MATCH;
    }
    if (fromUnannotatedPackage(closestOverriddenMethod)) {
      return Description.NO_MATCH;
    }
    if (!Nullness.hasNullableAnnotation(closestOverriddenMethod)) {
      if (Nullness.hasNullableAnnotation(methodSymbol)) {
        String message=""String_Node_Str"" + ASTHelpers.enclosingClass(closestOverriddenMethod) + ""String_Node_Str""+ closestOverriddenMethod.toString()+ ""String_Node_Str"";
        return createErrorDescription(MessageTypes.WRONG_OVERRIDE_RETURN,tree,message,tree);
      }
    }
    return checkParamOverriding(tree,tree.getParameters(),closestOverriddenMethod,false);
  }
  return Description.NO_MATCH;
}","@Override public Description matchMethod(MethodTree tree,VisitorState state){
  if (!matchWithinClass) {
    return Description.NO_MATCH;
  }
  Symbol.MethodSymbol methodSymbol=ASTHelpers.getSymbol(tree);
  if (initializerErrors.containsKey(methodSymbol)) {
    return reportInitializerError(methodSymbol,tree);
  }
  handler.onMatchMethod(this,tree,state,methodSymbol);
  boolean isOverriding=ASTHelpers.hasAnnotation(methodSymbol,Override.class,state);
  boolean exhaustiveOverride=config.exhaustiveOverride();
  if (isOverriding || !exhaustiveOverride) {
    Symbol.MethodSymbol closestOverriddenMethod=getClosestOverriddenMethod(methodSymbol,state.getTypes());
    if (closestOverriddenMethod == null) {
      return Description.NO_MATCH;
    }
    if (NullabilityUtil.fromUnannotatedPackage(closestOverriddenMethod,config)) {
      return Description.NO_MATCH;
    }
    if (!Nullness.hasNullableAnnotation(closestOverriddenMethod)) {
      if (Nullness.hasNullableAnnotation(methodSymbol)) {
        String message=""String_Node_Str"" + ASTHelpers.enclosingClass(closestOverriddenMethod) + ""String_Node_Str""+ closestOverriddenMethod.toString()+ ""String_Node_Str"";
        return createErrorDescription(MessageTypes.WRONG_OVERRIDE_RETURN,tree,message,tree);
      }
    }
    return checkParamOverriding(tree,tree.getParameters(),closestOverriddenMethod,false);
  }
  return Description.NO_MATCH;
}"
34340,"@Override public TransferResult<Nullness,NullnessStore<Nullness>> visitFieldAccess(FieldAccessNode fieldAccessNode,TransferInput<Nullness,NullnessStore<Nullness>> input){
  ReadableUpdates updates=new ReadableUpdates();
  setReceiverNonnull(updates,fieldAccessNode.getReceiver(),ASTHelpers.getSymbol(fieldAccessNode.getTree()));
  VariableElement element=fieldAccessNode.getElement();
  Nullness nullness=Nullness.NULLABLE;
  if (!Nullness.hasNullableAnnotation(element)) {
    nullness=NONNULL;
  }
 else {
    nullness=input.getRegularStore().valueOfField(fieldAccessNode,nullness);
  }
  return updateRegularStore(nullness,input,updates);
}","@Override public TransferResult<Nullness,NullnessStore<Nullness>> visitFieldAccess(FieldAccessNode fieldAccessNode,TransferInput<Nullness,NullnessStore<Nullness>> input){
  ReadableUpdates updates=new ReadableUpdates();
  Symbol symbol=ASTHelpers.getSymbol(fieldAccessNode.getTree());
  setReceiverNonnull(updates,fieldAccessNode.getReceiver(),symbol);
  VariableElement element=fieldAccessNode.getElement();
  Nullness nullness=Nullness.NULLABLE;
  if (!NullabilityUtil.mayBeNullFieldFromType(symbol,config)) {
    nullness=NONNULL;
  }
 else {
    nullness=input.getRegularStore().valueOfField(fieldAccessNode,nullness);
  }
  return updateRegularStore(nullness,input,updates);
}"
34341,"void foo(){
  UnannotatedClass e=new UnannotatedClass();
  e.maybeNull.hashCode();
}","void foo(){
  UnannotatedClass e=new UnannotatedClass();
  e.maybeNull.hashCode();
  UnannotatedClass f=new UnannotatedClass();
  Object y=f.maybeNull;
  y.hashCode();
}"
34342,"/** 
 * 初始化的时候，layout子View
 */
private void layoutItemsOnScroll(RecyclerView.Recycler recycler,RecyclerView.State state,int dy){
  int childCount=getChildCount();
  if (state.isPreLayout() || childCount == 0) {
    return;
  }
  int itemCount=getItemCount();
  Rect displayRect=new Rect(0,scroll,getWidth(),getHeight() + scroll);
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child == null) {
      continue;
    }
    int position=getPosition(child);
    if (!Rect.intersects(displayRect,locationRects.get(position))) {
      removeAndRecycleView(child,recycler);
      attachedItems.put(position,false);
    }
 else {
      layoutItem(child,locationRects.get(position));
    }
  }
  for (int i=0; i < itemCount; i++) {
    if (Rect.intersects(displayRect,locationRects.get(i)) && !attachedItems.get(i)) {
      View scrap=recycler.getViewForPosition(i);
      measureChildWithMargins(scrap,0,0);
      scrap.setPivotY(0);
      scrap.setPivotX(scrap.getMeasuredWidth() / 2);
      if (dy > 0) {
        addView(scrap);
      }
 else {
        addView(scrap,0);
      }
      layoutItem(scrap,locationRects.get(i));
      attachedItems.put(i,true);
    }
  }
}","/** 
 * 初始化的时候，layout子View
 */
private void layoutItemsOnScroll(){
  int childCount=getChildCount();
  int itemCount=getItemCount();
  Rect displayRect=new Rect(0,scroll,getWidth(),getHeight() + scroll);
  int firstVisiblePosition=-1;
  int lastVisiblePosition=-1;
  for (int i=childCount - 1; i >= 0; i--) {
    View child=getChildAt(i);
    if (child == null) {
      continue;
    }
    int position=getPosition(child);
    if (!Rect.intersects(displayRect,locationRects.get(position))) {
      removeAndRecycleView(child,recycler);
      attachedItems.put(position,false);
    }
 else {
      if (lastVisiblePosition < 0) {
        lastVisiblePosition=position;
      }
      if (firstVisiblePosition < 0) {
        firstVisiblePosition=position;
      }
 else {
        firstVisiblePosition=Math.min(firstVisiblePosition,position);
      }
      layoutItem(child,locationRects.get(position));
    }
  }
  if (firstVisiblePosition > 0) {
    for (int i=firstVisiblePosition - 1; i >= 0; i--) {
      if (Rect.intersects(displayRect,locationRects.get(i)) && !attachedItems.get(i)) {
        reuseItemOnSroll(i,true);
      }
 else {
        break;
      }
    }
  }
  for (int i=lastVisiblePosition + 1; i < itemCount; i++) {
    if (Rect.intersects(displayRect,locationRects.get(i)) && !attachedItems.get(i)) {
      reuseItemOnSroll(i,false);
    }
 else {
      break;
    }
  }
}"
34343,"private void layoutItem(View child,Rect rect){
  int topDistance=scroll - rect.top;
  int layoutTop, layoutBottom;
  if (topDistance < mDecoratedMeasuredHeight && topDistance >= 0) {
    float rate1=(float)topDistance / mDecoratedMeasuredHeight;
    float rate2=1 - rate1 * rate1 / 3;
    float rate3=1 - rate1 * rate1;
    child.setScaleX(rate2);
    child.setScaleY(rate2);
    child.setAlpha(rate3);
    layoutTop=0;
    layoutBottom=mDecoratedMeasuredHeight;
  }
 else {
    child.setScaleX(1);
    child.setScaleY(1);
    child.setAlpha(1);
    layoutTop=rect.top - scroll;
    layoutBottom=rect.bottom - scroll;
  }
  layoutDecorated(child,rect.left,layoutTop,rect.right,layoutBottom);
}","private void layoutItem(View child,Rect rect){
  int topDistance=scroll - rect.top;
  int layoutTop, layoutBottom;
  int itemHeight=rect.bottom - rect.top;
  if (topDistance < itemHeight && topDistance >= 0) {
    float rate1=(float)topDistance / itemHeight;
    float rate2=1 - rate1 * rate1 / 3;
    float rate3=1 - rate1 * rate1;
    child.setScaleX(rate2);
    child.setScaleY(rate2);
    child.setAlpha(rate3);
    layoutTop=0;
    layoutBottom=itemHeight;
  }
 else {
    child.setScaleX(1);
    child.setScaleY(1);
    child.setAlpha(1);
    layoutTop=rect.top - scroll;
    layoutBottom=rect.bottom - scroll;
  }
  layoutDecorated(child,rect.left,layoutTop,rect.right,layoutBottom);
}"
34344,"/** 
 * 计算可滑动的最大值
 */
private void computeMaxScroll(){
  maxScroll=locationRects.get(locationRects.size() - 1).bottom - getHeight();
  if (maxScroll < 0) {
    maxScroll=0;
    return;
  }
  int childCount=getChildCount();
  int screenFilledHeight=0;
  for (int i=childCount - 1; i >= 0; i--) {
    Rect rect=locationRects.get(i);
    screenFilledHeight=screenFilledHeight + (rect.bottom - rect.top);
    if (screenFilledHeight > getHeight()) {
      int extraSnapHeight=getHeight() - (screenFilledHeight - (rect.bottom - rect.top));
      maxScroll=maxScroll + extraSnapHeight;
      break;
    }
  }
}","/** 
 * 计算可滑动的最大值
 */
private void computeMaxScroll(){
  maxScroll=locationRects.get(locationRects.size() - 1).bottom - getHeight();
  if (maxScroll < 0) {
    maxScroll=0;
    return;
  }
  int itemCount=getItemCount();
  int screenFilledHeight=0;
  for (int i=itemCount - 1; i >= 0; i--) {
    Rect rect=locationRects.get(i);
    screenFilledHeight=screenFilledHeight + (rect.bottom - rect.top);
    if (screenFilledHeight > getHeight()) {
      int extraSnapHeight=getHeight() - (screenFilledHeight - (rect.bottom - rect.top));
      maxScroll=maxScroll + extraSnapHeight;
      break;
    }
  }
}"
34345,"@Override public int scrollVerticallyBy(int dy,RecyclerView.Recycler recycler,RecyclerView.State state){
  if (getItemCount() == 0 || dy == 0) {
    return 0;
  }
  int travel=dy;
  if (dy + scroll < 0) {
    travel=-scroll;
  }
 else   if (dy + scroll > maxScroll) {
    travel=maxScroll - scroll;
  }
  scroll+=travel;
  lastDy=dy;
  layoutItemsOnScroll(recycler,state,dy);
  return travel;
}","@Override public int scrollVerticallyBy(int dy,RecyclerView.Recycler recycler,RecyclerView.State state){
  if (getItemCount() == 0 || dy == 0) {
    return 0;
  }
  int travel=dy;
  if (dy + scroll < 0) {
    travel=-scroll;
  }
 else   if (dy + scroll > maxScroll) {
    travel=maxScroll - scroll;
  }
  scroll+=travel;
  lastDy=dy;
  if (!state.isPreLayout() && getChildCount() > 0) {
    layoutItemsOnScroll();
  }
  return travel;
}"
34346,"@Override public void onLayoutChildren(RecyclerView.Recycler recycler,RecyclerView.State state){
  if (!firstLayoutChildren) {
    return;
  }
  firstLayoutChildren=false;
  int itemCount=getItemCount();
  if (itemCount <= 0 || state.isPreLayout()) {
    return;
  }
  if (getChildCount() == 0) {
    View itemView=recycler.getViewForPosition(0);
    addView(itemView);
    measureChildWithMargins(itemView,0,0);
    mDecoratedMeasuredWidth=getDecoratedMeasuredWidth(itemView);
    mDecoratedMeasuredHeight=getDecoratedMeasuredHeight(itemView);
  }
  int tempPosition=getPaddingTop();
  for (int i=0; i < itemCount; i++) {
    Rect rect=new Rect();
    rect.left=getPaddingLeft();
    rect.top=tempPosition;
    rect.right=mDecoratedMeasuredWidth - getPaddingRight();
    rect.bottom=rect.top + mDecoratedMeasuredHeight;
    locationRects.put(i,rect);
    attachedItems.put(i,false);
    tempPosition=tempPosition + mDecoratedMeasuredHeight;
  }
  detachAndScrapAttachedViews(recycler);
  layoutItemsOnCreate(recycler);
  computeMaxScroll();
}","@Override public void onLayoutChildren(RecyclerView.Recycler recycler,RecyclerView.State state){
  this.recycler=recycler;
  if (!firstLayoutChildren || adapter == null || getItemCount() <= 0 || state.isPreLayout()) {
    return;
  }
  firstLayoutChildren=false;
  buildLocationRects();
  detachAndScrapAttachedViews(recycler);
  layoutItemsOnCreate(recycler);
}"
34347,"/** 
 * 初始化的时候，layout子View
 */
private void layoutItemsOnCreate(RecyclerView.Recycler recycler){
  int itemCount=getItemCount();
  for (int i=0; i < itemCount; i++) {
    View childView=recycler.getViewForPosition(i);
    addView(childView);
    measureChildWithMargins(childView,0,0);
    layoutItem(childView,locationRects.get(i));
    attachedItems.put(i,true);
    childView.setPivotY(0);
    childView.setPivotX(childView.getMeasuredWidth() / 2);
    if (locationRects.get(i).top > getHeight()) {
      break;
    }
  }
}","/** 
 * 初始化的时候，layout子View
 */
private void layoutItemsOnCreate(RecyclerView.Recycler recycler){
  int itemCount=getItemCount();
  for (int i=0; i < itemCount; i++) {
    View childView=recycler.getViewForPosition(i);
    addView(childView);
    measureChildWithMargins(childView,View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);
    layoutItem(childView,locationRects.get(i));
    attachedItems.put(i,true);
    childView.setPivotY(0);
    childView.setPivotX(childView.getMeasuredWidth() / 2);
    if (locationRects.get(i).top > getHeight()) {
      break;
    }
  }
}"
34348,"/** 
 * notifyDataSetChanged时会调用此方法
 */
@Override public void onItemsChanged(RecyclerView recyclerView){
  super.onItemsChanged(recyclerView);
  buildLocationRects();
  layoutItemsOnScroll();
}","/** 
 * notifyDataSetChanged时会调用此方法
 */
@Override public void onItemsChanged(RecyclerView recyclerView){
  super.onItemsChanged(recyclerView);
  if (null != recycler) {
    buildLocationRects();
    layoutItemsOnScroll();
  }
}"
34349,"private void buildLocationRects(){
  viewTypeHeightMap.clear();
  locationRects.clear();
  attachedItems.clear();
  int tempPosition=getPaddingTop();
  int itemCount=getItemCount();
  for (int i=0; i < itemCount; i++) {
    int viewType=adapter.getItemViewType(i);
    int itemHeight;
    if (viewTypeHeightMap.containsKey(viewType)) {
      itemHeight=viewTypeHeightMap.get(viewType);
    }
 else {
      View itemView=recycler.getViewForPosition(i);
      addView(itemView);
      measureChildWithMargins(itemView,View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);
      itemHeight=getDecoratedMeasuredHeight(itemView);
      viewTypeHeightMap.put(viewType,itemHeight);
    }
    Rect rect=new Rect();
    rect.left=getPaddingLeft();
    rect.top=tempPosition;
    rect.right=getWidth() - getPaddingRight();
    rect.bottom=rect.top + itemHeight;
    locationRects.put(i,rect);
    attachedItems.put(i,false);
    tempPosition=tempPosition + itemHeight;
  }
  computeMaxScroll();
}","private void buildLocationRects(){
  viewTypeHeightMap.clear();
  locationRects.clear();
  attachedItems.clear();
  int tempPosition=getPaddingTop();
  int itemCount=getItemCount();
  for (int i=0; i < itemCount; i++) {
    int viewType=adapter.getItemViewType(i);
    int itemHeight;
    if (viewTypeHeightMap.containsKey(viewType)) {
      itemHeight=viewTypeHeightMap.get(viewType);
    }
 else {
      View itemView=recycler.getViewForPosition(i);
      addView(itemView);
      measureChildWithMargins(itemView,View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);
      itemHeight=getDecoratedMeasuredHeight(itemView);
      viewTypeHeightMap.put(viewType,itemHeight);
    }
    Rect rect=new Rect();
    rect.left=getPaddingLeft();
    rect.top=tempPosition;
    rect.right=getWidth() - getPaddingRight();
    rect.bottom=rect.top + itemHeight;
    locationRects.put(i,rect);
    attachedItems.put(i,false);
    tempPosition=tempPosition + itemHeight;
  }
  if (itemCount == 0) {
    maxScroll=0;
  }
 else {
    computeMaxScroll();
  }
}"
34350,"@Override public void onLayoutChildren(RecyclerView.Recycler recycler,RecyclerView.State state){
  this.recycler=recycler;
  if (!firstLayoutChildren || adapter == null || getItemCount() <= 0 || state.isPreLayout()) {
    return;
  }
  firstLayoutChildren=false;
  buildLocationRects();
  detachAndScrapAttachedViews(recycler);
  layoutItemsOnCreate(recycler);
}","@Override public void onLayoutChildren(RecyclerView.Recycler recycler,RecyclerView.State state){
  this.recycler=recycler;
  if (state.isPreLayout()) {
    return;
  }
  buildLocationRects();
  detachAndScrapAttachedViews(recycler);
  layoutItemsOnCreate(recycler);
}"
34351,"/** 
 * Returns all selected days
 * @return
 */
public List<Day> getSelectedDays(){
  List<Day> selectedDays=new ArrayList<>();
  for (Iterator<Month> monthIterator=monthAdapter.getData().iterator(); monthIterator.hasNext(); ) {
    Month month=monthIterator.next();
    for (Iterator<Day> dayIterator=month.getDaysWithoutTitlesAndOnlyCurrent().iterator(); dayIterator.hasNext(); ) {
      Day day=dayIterator.next();
      selectedDays.add(day);
    }
  }
  return selectedDays;
}","/** 
 * Returns all selected days
 * @return
 */
public List<Day> getSelectedDays(){
  List<Day> selectedDays=new ArrayList<>();
  for (Iterator<Month> monthIterator=monthAdapter.getData().iterator(); monthIterator.hasNext(); ) {
    Month month=monthIterator.next();
    for (Iterator<Day> dayIterator=month.getDaysWithoutTitlesAndOnlyCurrent().iterator(); dayIterator.hasNext(); ) {
      Day day=dayIterator.next();
      if (selectionManager.isDaySelected(day)) {
        selectedDays.add(day);
      }
    }
  }
  return selectedDays;
}"
34352,"@Override protected void onDestroy(){
  super.onDestroy();
  mViewModel.detachView();
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (mViewModel != null) {
    mViewModel.detachView();
  }
}"
34353,"/** 
 * 退出登录相关操作
 */
private void logout(){
  PreferencesUtils.clear(getContext());
  JMessageClient.logout();
  JPushInterface.setAlias(getContext(),2,""String_Node_Str"");
  getView().finish();
}","/** 
 * 退出登录相关操作
 */
private void logout(){
  PreferencesUtils.clear(getContext());
  JMessageClient.logout();
  JPushInterface.setAlias(getContext(),2,""String_Node_Str"");
  Intent intent=new Intent();
  intent.setClassName(getContext(),""String_Node_Str"");
  getContext().startActivity(intent);
}"
34354,"@Override public void onPause(){
  super.onPause();
  MobclickAgent.onPageEnd(getClass().getSimpleName());
}","@Override public void onPause(){
  super.onPause();
}"
34355,"@Override public void onResume(){
  super.onResume();
  MobclickAgent.onPageStart(getClass().getSimpleName());
}","@Override public void onResume(){
  super.onResume();
  MobclickAgent.onEvent(getActivity(),getClass().getSimpleName());
}"
34356,"/** 
 * 接收消息事件 目前只支持文字消息，后面再进行优化
 * @param event 消息事件
 */
public void onEventMainThread(MessageEvent event){
  getViewModel().updateOfficeData();
}","/** 
 * 接收消息事件 目前只支持文字消息，后面再进行优化
 * @param event 消息事件
 */
public void onEventMainThread(MessageEvent event){
  getViewModel().updateOfficeData(((TextContent)event.getMessage().getContent()).getText());
}"
34357,"public void updateOfficeData(){
  setServiceRedVisible(View.VISIBLE);
  setOfficeNum(++officeNum);
}","public void updateOfficeData(String content){
  setServiceRedVisible(View.VISIBLE);
  setOfficeNum(++officeNum);
  setServiceContent(content);
}"
34358,"/** 
 * 官方服务点击事件处理
 * @param view
 */
public void onServiceClick(View view){
  setOfficeNum(0);
  setServiceRedVisible(View.GONE);
  PublicActivity.startActivity((Activity)getContext(),""String_Node_Str"");
}","/** 
 * 官方服务点击事件处理
 * @param view
 */
public void onServiceClick(View view){
  setOfficeNum(0);
  setServiceRedVisible(View.GONE);
  setServiceContent(""String_Node_Str"");
  if (JMessageClient.getMyInfo() == null) {
    PublicActivity.startActivity((Activity)getContext(),""String_Node_Str"");
  }
 else {
    PublicActivity.startActivity((Activity)getContext(),""String_Node_Str"");
  }
}"
34359,"@Override public void onClick(View view){
  getActivity().finish();
}","@Override public void onClick(DialogInterface dialog,int which){
  getViewModel().deleteAllMessage();
}"
34360,"/** 
 * 给官方客服发送文本消息
 */
public void sendMessageToOffice(View view){
  if (TextUtils.isEmpty(sendContent)) {
    Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  LogUtils.i(""String_Node_Str"",""String_Node_Str"" + sendContent);
  Message message=mConversation.createSendTextMessage(sendContent);
  message.setOnSendCompleteCallback(new BasicCallback(){
    @Override public void gotResult(    int status,    String desc){
      if (status == 0) {
        MessageItemViewModel send=new MessageItemViewModel();
        send.type=MessageItemViewModel.MSG_SEND;
        send.content=sendContent;
        items.add(send);
        setSendContent(""String_Node_Str"");
        getView().scrollToPosition(items.size() - 1);
      }
 else {
        Toast.makeText(getContext(),desc,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  JMessageClient.sendMessage(message);
}","/** 
 * 给官方客服发送文本消息
 */
public void sendMessageToOffice(View view){
  if (TextUtils.isEmpty(sendContent)) {
    Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  LogUtils.i(""String_Node_Str"",""String_Node_Str"" + sendContent);
  Message message=mConversation.createSendTextMessage(sendContent);
  message.setOnSendCompleteCallback(new BasicCallback(){
    @Override public void gotResult(    int status,    String desc){
      if (status == 0) {
        MessageItemViewModel send=new MessageItemViewModel();
        send.type=MessageItemViewModel.MSG_SEND;
        send.content=sendContent;
        items.add(send);
        ++curCount;
        setSendContent(""String_Node_Str"");
        getView().scrollToPosition(items.size() - 1);
      }
 else {
        Toast.makeText(getContext(),desc,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  JMessageClient.sendMessage(message);
}"
34361,"@Override public void gotResult(int status,String desc){
  if (status == 0) {
    MessageItemViewModel send=new MessageItemViewModel();
    send.type=MessageItemViewModel.MSG_SEND;
    send.content=sendContent;
    items.add(send);
    setSendContent(""String_Node_Str"");
    getView().scrollToPosition(items.size() - 1);
  }
 else {
    Toast.makeText(getContext(),desc,Toast.LENGTH_SHORT).show();
  }
}","@Override public void gotResult(int status,String desc){
  if (status == 0) {
    MessageItemViewModel send=new MessageItemViewModel();
    send.type=MessageItemViewModel.MSG_SEND;
    send.content=sendContent;
    items.add(send);
    ++curCount;
    setSendContent(""String_Node_Str"");
    getView().scrollToPosition(items.size() - 1);
  }
 else {
    Toast.makeText(getContext(),desc,Toast.LENGTH_SHORT).show();
  }
}"
34362,"@Override public int getBR(){
  return BR.messageModel;
}","@Override public int getBR(){
  return com.weapon.joker.app.message.BR.messageModel;
}"
34363,"/** 
 * 登陆
 */
private void login(){
  String userName=mTilUserName.getEditText().getText().toString().trim();
  String password=mTilPassword.getEditText().getText().toString().trim();
  if (TextUtils.isEmpty(userName)) {
    mTilUserName.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPassword.setError(""String_Node_Str"");
    return;
  }
  mTilPassword.setErrorEnabled(false);
  mTilUserName.setErrorEnabled(false);
  Api.getDefault(HostType.MINE).login(userName,password).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new BaseObserver<LoginModel>(){
    @Override protected void onSuccess(    LoginModel entry) throws Exception {
      if (entry.status == 1000 && entry != null && entry.data != null) {
        Toast.makeText(LoginActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        LogUtils.logi(""String_Node_Str"" + entry.data.toString());
      }
 else {
        Toast.makeText(LoginActivity.this,""String_Node_Str"" + entry.desc,Toast.LENGTH_SHORT).show();
        LogUtils.logi(""String_Node_Str"" + entry.desc);
      }
    }
    @Override protected void onFailure(    Throwable e,    boolean isNetWorkError) throws Exception {
      Toast.makeText(LoginActivity.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      LogUtils.logi(""String_Node_Str"" + e.getMessage());
    }
  }
);
}","/** 
 * 登陆
 */
private void login(){
  String userName=mTilUserName.getEditText().getText().toString().trim();
  String password=mTilPassword.getEditText().getText().toString().trim();
  mTilPassword.setErrorEnabled(false);
  mTilUserName.setErrorEnabled(false);
  if (TextUtils.isEmpty(userName)) {
    mTilUserName.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPassword.setError(""String_Node_Str"");
    return;
  }
  Api.getDefault(HostType.MINE).login(userName,password).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new BaseObserver<LoginModel>(){
    @Override protected void onSuccess(    LoginModel entry) throws Exception {
      if (entry.status == 1000 && entry != null && entry.data != null) {
        Toast.makeText(LoginActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        LogUtils.logi(""String_Node_Str"" + entry.data.toString());
      }
 else {
        Toast.makeText(LoginActivity.this,""String_Node_Str"" + entry.desc,Toast.LENGTH_SHORT).show();
        LogUtils.logi(""String_Node_Str"" + entry.desc);
      }
    }
    @Override protected void onFailure(    Throwable e,    boolean isNetWorkError) throws Exception {
      Toast.makeText(LoginActivity.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      LogUtils.logi(""String_Node_Str"" + e.getMessage());
    }
  }
);
}"
34364,"/** 
 * 登陆
 */
private void login(){
  String userName=mTilUserName.getEditText().getText().toString().trim();
  String password=mTilPassword.getEditText().getText().toString().trim();
  if (TextUtils.isEmpty(userName)) {
    mTilUserName.getEditText().setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPassword.getEditText().setError(""String_Node_Str"");
    return;
  }
  Api.getDefault(HostType.MINE).login(userName,password).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new BaseObserver<LoginModel>(){
    @Override protected void onSuccess(    LoginModel entry) throws Exception {
      if (entry.status == 1000 && entry != null && entry.data != null) {
        Toast.makeText(LoginActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        LogUtils.logi(""String_Node_Str"" + entry.data.toString());
      }
 else {
        Toast.makeText(LoginActivity.this,""String_Node_Str"" + entry.desc,Toast.LENGTH_SHORT).show();
        LogUtils.logi(""String_Node_Str"" + entry.desc);
      }
    }
    @Override protected void onFailure(    Throwable e,    boolean isNetWorkError) throws Exception {
      Toast.makeText(LoginActivity.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      LogUtils.logi(""String_Node_Str"" + e.getMessage());
    }
  }
);
}","/** 
 * 登陆
 */
private void login(){
  String userName=mTilUserName.getEditText().getText().toString().trim();
  String password=mTilPassword.getEditText().getText().toString().trim();
  if (TextUtils.isEmpty(userName)) {
    mTilUserName.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPassword.setError(""String_Node_Str"");
    return;
  }
  mTilPassword.setErrorEnabled(false);
  mTilUserName.setErrorEnabled(false);
  Api.getDefault(HostType.MINE).login(userName,password).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new BaseObserver<LoginModel>(){
    @Override protected void onSuccess(    LoginModel entry) throws Exception {
      if (entry.status == 1000 && entry != null && entry.data != null) {
        Toast.makeText(LoginActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        LogUtils.logi(""String_Node_Str"" + entry.data.toString());
      }
 else {
        Toast.makeText(LoginActivity.this,""String_Node_Str"" + entry.desc,Toast.LENGTH_SHORT).show();
        LogUtils.logi(""String_Node_Str"" + entry.desc);
      }
    }
    @Override protected void onFailure(    Throwable e,    boolean isNetWorkError) throws Exception {
      Toast.makeText(LoginActivity.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      LogUtils.logi(""String_Node_Str"" + e.getMessage());
    }
  }
);
}"
34365,"/** 
 * {@link MineFragment 我的 Fragment}
 */
void fragment();","/** 
 * {@link MainFragment 我的 Fragment}
 */
void fragment();"
34366,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_mine);
  getSupportFragmentManager().beginTransaction().replace(R.id.fl_mine_content,new MineFragment()).commit();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_mine);
  getSupportFragmentManager().beginTransaction().replace(R.id.fl_mine_content,new MainFragment()).commit();
}"
34367,"private View initFragment(LayoutInflater inflater,ViewGroup container){
  if (mViewDataBinding == null) {
    mContext=getActivity();
    mViewDataBinding=DataBindingUtil.inflate(inflater,getLayoutId(),container,false);
    mViewModel=TUtil.getT(this,0);
    M model=TUtil.getT(this,1);
    if (mViewModel != null) {
      mViewModel.setContext(mContext);
      try {
        Method setModel=mViewModel.getClass().getDeclaredMethod(""String_Node_Str"",model.getClass().getSuperclass());
        Method attachView=mViewModel.getClass().getDeclaredMethod(""String_Node_Str"",this.getClass().getInterfaces());
        setModel.invoke(mViewModel,model);
        attachView.invoke(mViewModel,this);
      }
 catch (      Exception e) {
      }
    }
    if (model != null) {
      model.attachViewModel(mViewModel);
    }
    mViewDataBinding.setVariable(getBR(),mViewModel);
    initView();
  }
 else {
    if (mViewDataBinding.getRoot().getParent() != null) {
      ((ViewGroup)mViewDataBinding.getRoot().getParent()).removeView(mViewDataBinding.getRoot());
    }
  }
  return mViewDataBinding.getRoot();
}","private View initFragment(LayoutInflater inflater,ViewGroup container){
  if (mViewDataBinding == null) {
    mContext=getActivity();
    mViewDataBinding=DataBindingUtil.inflate(inflater,getLayoutId(),container,false);
    mViewModel=TUtil.getT(this,0);
    M model=TUtil.getT(this,1);
    if (mViewModel != null) {
      mViewModel.setContext(mContext);
      mViewModel.setModel(model);
      mViewModel.attachView(this);
    }
    if (model != null) {
      model.attachViewModel(mViewModel);
    }
    mViewDataBinding.setVariable(getBR(),mViewModel);
    initView();
  }
 else {
    if (mViewDataBinding.getRoot().getParent() != null) {
      ((ViewGroup)mViewDataBinding.getRoot().getParent()).removeView(mViewDataBinding.getRoot());
    }
  }
  return mViewDataBinding.getRoot();
}"
34368,"private View initFragment(LayoutInflater inflater,ViewGroup container){
  if (mViewDataBinding == null) {
    mContext=getActivity();
    mViewDataBinding=DataBindingUtil.inflate(inflater,getLayoutId(),container,false);
    mViewModel=TUtil.getT(this,0);
    M model=TUtil.getT(this,1);
    if (mViewModel != null) {
      mViewModel.setModel(model);
      mViewModel.setContext(mContext);
      mViewModel.attachView(this);
    }
    if (model != null) {
      model.attachViewModel(mViewModel);
    }
    mViewDataBinding.setVariable(getBR(),mViewModel);
    initView();
  }
 else {
    if (mViewDataBinding.getRoot().getParent() != null) {
      ((ViewGroup)mViewDataBinding.getRoot().getParent()).removeView(mViewDataBinding.getRoot());
    }
  }
  return mViewDataBinding.getRoot();
}","private View initFragment(LayoutInflater inflater,ViewGroup container){
  if (mViewDataBinding == null) {
    mContext=getActivity();
    mViewDataBinding=DataBindingUtil.inflate(inflater,getLayoutId(),container,false);
    mViewModel=TUtil.getT(this,0);
    M model=TUtil.getT(this,1);
    if (mViewModel != null) {
      mViewModel.setContext(mContext);
      try {
        Method setModel=mViewModel.getClass().getDeclaredMethod(""String_Node_Str"",model.getClass().getSuperclass());
        Method attachView=mViewModel.getClass().getDeclaredMethod(""String_Node_Str"",this.getClass().getInterfaces());
        setModel.invoke(mViewModel,model);
        attachView.invoke(mViewModel,this);
      }
 catch (      Exception e) {
      }
    }
    if (model != null) {
      model.attachViewModel(mViewModel);
    }
    mViewDataBinding.setVariable(getBR(),mViewModel);
    initView();
  }
 else {
    if (mViewDataBinding.getRoot().getParent() != null) {
      ((ViewGroup)mViewDataBinding.getRoot().getParent()).removeView(mViewDataBinding.getRoot());
    }
  }
  return mViewDataBinding.getRoot();
}"
34369,"@Override public Map<String,List<OffsetRange>> folds(org.netbeans.modules.csl.spi.ParserResult info){
  long start=System.currentTimeMillis();
  Map<String,List<OffsetRange>> folds;
  String mimeType=info.getSnapshot().getMimeType();
  if (JsTokenId.isJSONBasedMimeType(mimeType)) {
    folds=foldsJson((ParserResult)info);
  }
 else {
    folds=new HashMap<String,List<OffsetRange>>();
    TokenHierarchy th=info.getSnapshot().getTokenHierarchy();
    TokenSequence ts=th.tokenSequence(language);
    List<TokenSequence<?>> list=th.tokenSequenceList(ts.languagePath(),0,info.getSnapshot().getText().length());
    List<FoldingItem> stack=new ArrayList<FoldingItem>();
    for (TokenSequenceIterator tsi=new TokenSequenceIterator(list,false); tsi.hasMore(); ) {
      ts=tsi.getSequence();
      TokenId tokenId;
      JsTokenId lastContextId=null;
      int functionKeywordPosition=0;
      ts.moveStart();
      while (ts.moveNext()) {
        tokenId=ts.token().id();
        if (tokenId == JsTokenId.DOC_COMMENT) {
          int startOffset=ts.offset() + 3;
          int endOffset=ts.offset() + ts.token().length() - 2;
          appendFold(folds,FoldType.DOCUMENTATION.code(),info.getSnapshot().getOriginalOffset(startOffset),info.getSnapshot().getOriginalOffset(endOffset));
        }
 else         if (tokenId == JsTokenId.BLOCK_COMMENT) {
          int startOffset=ts.offset() + 2;
          int endOffset=ts.offset() + ts.token().length() - 2;
          appendFold(folds,FoldType.COMMENT.code(),info.getSnapshot().getOriginalOffset(startOffset),info.getSnapshot().getOriginalOffset(endOffset));
        }
 else         if (((JsTokenId)tokenId).isKeyword()) {
          lastContextId=(JsTokenId)tokenId;
          if (lastContextId == JsTokenId.KEYWORD_FUNCTION) {
            functionKeywordPosition=ts.offset();
          }
        }
 else         if (tokenId == JsTokenId.BRACKET_LEFT_CURLY) {
          String kind;
          if (lastContextId == JsTokenId.KEYWORD_FUNCTION && isNotAnonymousFunction(ts,functionKeywordPosition)) {
            kind=FoldType.MEMBER.code();
          }
 else {
            kind=FoldType.CODE_BLOCK.code();
          }
          stack.add(new FoldingItem(kind,ts.offset()));
        }
 else         if (tokenId == JsTokenId.BRACKET_RIGHT_CURLY && !stack.isEmpty()) {
          FoldingItem fromStack=stack.remove(stack.size() - 1);
          appendFold(folds,fromStack.kind,info.getSnapshot().getOriginalOffset(fromStack.start),info.getSnapshot().getOriginalOffset(ts.offset() + 1));
        }
      }
    }
  }
  long end=System.currentTimeMillis();
  LOGGER.log(Level.FINE,""String_Node_Str"",(end - start));
  return folds;
}","@Override public Map<String,List<OffsetRange>> folds(org.netbeans.modules.csl.spi.ParserResult info){
  long start=System.currentTimeMillis();
  Map<String,List<OffsetRange>> folds;
  String mimeType=info.getSnapshot().getMimeType();
  if (JsTokenId.isJSONBasedMimeType(mimeType)) {
    folds=foldsJson((ParserResult)info);
  }
 else {
    folds=new HashMap<String,List<OffsetRange>>();
    TokenHierarchy th=info.getSnapshot().getTokenHierarchy();
    TokenSequence ts=th.tokenSequence(language);
    List<TokenSequence<?>> list=th.tokenSequenceList(ts.languagePath(),0,info.getSnapshot().getText().length());
    List<FoldingItem> stack=new ArrayList<FoldingItem>();
    for (TokenSequenceIterator tsi=new TokenSequenceIterator(list,false); tsi.hasMore(); ) {
      ts=tsi.getSequence();
      TokenId tokenId;
      JsTokenId lastContextId=null;
      int functionKeywordPosition=0;
      ts.moveStart();
      while (ts.moveNext()) {
        tokenId=ts.token().id();
        if (tokenId == JsTokenId.DOC_COMMENT) {
          int startOffset=ts.offset() + 3;
          int endOffset=ts.offset() + ts.token().length() - 2;
          appendFold(folds,FoldType.DOCUMENTATION.code(),info.getSnapshot().getOriginalOffset(startOffset),info.getSnapshot().getOriginalOffset(endOffset));
        }
 else         if (tokenId == JsTokenId.BLOCK_COMMENT) {
          int startOffset=ts.offset() + 2;
          int endOffset=ts.offset() + ts.token().length() - 2;
          appendFold(folds,FoldType.COMMENT.code(),info.getSnapshot().getOriginalOffset(startOffset),info.getSnapshot().getOriginalOffset(endOffset));
        }
 else         if (((JsTokenId)tokenId).isKeyword()) {
          lastContextId=(JsTokenId)tokenId;
          if (lastContextId == JsTokenId.KEYWORD_FUNCTION) {
            functionKeywordPosition=ts.offset();
          }
        }
 else         if (tokenId == JsTokenId.BRACKET_LEFT_CURLY) {
          String kind;
          if (lastContextId == JsTokenId.KEYWORD_FUNCTION && isNotAnonymousFunction(ts,functionKeywordPosition)) {
            kind=FoldType.MEMBER.code();
          }
 else {
            kind=FoldType.CODE_BLOCK.code();
          }
          stack.add(new FoldingItem(kind,ts.offset()));
        }
 else         if (tokenId == JsTokenId.BRACKET_RIGHT_CURLY && !stack.isEmpty()) {
          FoldingItem fromStack=stack.remove(stack.size() - 1);
          TokenId previousTokenId=null;
          if (ts.movePrevious()) {
            previousTokenId=ts.token().id();
            ts.moveNext();
          }
          if (previousTokenId != null && previousTokenId != JsTokenId.BRACKET_LEFT_CURLY) {
            appendFold(folds,fromStack.kind,info.getSnapshot().getOriginalOffset(fromStack.start),info.getSnapshot().getOriginalOffset(ts.offset() + 1));
          }
        }
      }
    }
  }
  long end=System.currentTimeMillis();
  LOGGER.log(Level.FINE,""String_Node_Str"",(end - start));
  return folds;
}"
34370,"/** 
 * This method try to analyze the text and says whether the snapshot should be file
 * @param snapshot
 * @return whether the snapshot should be parsed
 */
private boolean isParsable(Snapshot snapshot){
  FileObject fo=snapshot.getSource().getFileObject();
  boolean isEmbeded=!getMimeType().equals(snapshot.getMimePath().getPath());
  Long size;
  CharSequence text=snapshot.getText();
  String scriptName;
  scriptName=(fo != null) ? snapshot.getSource().getFileObject().getNameExt() : getDefaultScriptName();
  size=(fo != null && !isEmbeded) ? fo.getSize() : (long)text.length();
  if (!PARSE_BIG_FILES) {
    if (size > MAX_FILE_SIZE_TO_PARSE) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,""String_Node_Str"",scriptName);
      }
      return false;
    }
    if (size > MAX_MINIMIZE_FILE_SIZE_TO_PARSE && !snapshot.getMimeType().equals(JsTokenId.JSON_MIME_TYPE)) {
      boolean isMinified=false;
      TokenSequence<? extends JsTokenId> ts=LexUtilities.getTokenSequence(snapshot,0,language);
      if (ts != null) {
        int offset=0;
        int countedLines=0;
        int countChars=0;
        while (!isMinified && ts.moveNext() && countedLines < 5) {
          LexUtilities.findNext(ts,Arrays.asList(JsTokenId.DOC_COMMENT,JsTokenId.BLOCK_COMMENT,JsTokenId.LINE_COMMENT,JsTokenId.EOL,JsTokenId.WHITESPACE));
          offset=ts.offset();
          LexUtilities.findNextToken(ts,Arrays.asList(JsTokenId.EOL));
          countChars+=(ts.offset() - offset);
          countedLines++;
        }
        if (countedLines > 0 && (countChars / countedLines) > 200) {
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.log(Level.FINE,""String_Node_Str"",scriptName);
          }
          return false;
        }
      }
    }
 else     if (snapshot.getMimeType().equals(JsTokenId.JSON_MIME_TYPE)) {
      int index=text.length() - 1;
      char ch=text.charAt(index);
      while (index > 0 && ch != '}') {
        index--;
        ch=text.charAt(index);
      }
      int count=0;
      while (index > 0 && ch == '}' && count <= MAX_RIGHT_CURLY_BRACKETS) {
        index--;
        count++;
        ch=text.charAt(index);
      }
      if (count >= MAX_RIGHT_CURLY_BRACKETS) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * This method try to analyze the text and says whether the snapshot should be file
 * @param snapshot
 * @return whether the snapshot should be parsed
 */
private boolean isParsable(Snapshot snapshot){
  FileObject fo=snapshot.getSource().getFileObject();
  boolean isEmbeded=!getMimeType().equals(snapshot.getMimePath().getPath());
  Long size;
  CharSequence text=snapshot.getText();
  String scriptName;
  scriptName=(fo != null) ? snapshot.getSource().getFileObject().getNameExt() : getDefaultScriptName();
  size=(fo != null && !isEmbeded) ? fo.getSize() : (long)text.length();
  if (!PARSE_BIG_FILES) {
    if (size > MAX_FILE_SIZE_TO_PARSE) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,""String_Node_Str"",scriptName);
      }
      return false;
    }
    if (size > MAX_MINIMIZE_FILE_SIZE_TO_PARSE && !(snapshot.getMimeType().equals(JsTokenId.JSON_MIME_TYPE) || snapshot.getMimeType().equals(JsTokenId.PACKAGE_JSON_MIME_TYPE) || snapshot.getMimeType().equals(JsTokenId.BOWER_JSON_MIME_TYPE))) {
      boolean isMinified=false;
      TokenSequence<? extends JsTokenId> ts=LexUtilities.getTokenSequence(snapshot,0,language);
      if (ts != null) {
        int offset=0;
        int countedLines=0;
        int countChars=0;
        while (!isMinified && ts.moveNext() && countedLines < 5) {
          LexUtilities.findNext(ts,Arrays.asList(JsTokenId.DOC_COMMENT,JsTokenId.BLOCK_COMMENT,JsTokenId.LINE_COMMENT,JsTokenId.EOL,JsTokenId.WHITESPACE));
          offset=ts.offset();
          LexUtilities.findNextToken(ts,Arrays.asList(JsTokenId.EOL));
          countChars+=(ts.offset() - offset);
          countedLines++;
        }
        if (countedLines > 0 && (countChars / countedLines) > 200) {
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.log(Level.FINE,""String_Node_Str"",scriptName);
          }
          return false;
        }
      }
    }
 else     if (snapshot.getMimeType().equals(JsTokenId.JSON_MIME_TYPE)) {
      int index=text.length() - 1;
      char ch=text.charAt(index);
      while (index > 0 && ch != '}') {
        index--;
        ch=text.charAt(index);
      }
      int count=0;
      while (index > 0 && ch == '}' && count <= MAX_RIGHT_CURLY_BRACKETS) {
        index--;
        count++;
        ch=text.charAt(index);
      }
      if (count >= MAX_RIGHT_CURLY_BRACKETS) {
        return false;
      }
    }
  }
  return true;
}"
34371,"@Override public void insert(MutableContext context) throws BadLocationException {
  BaseDocument doc=(BaseDocument)context.getDocument();
  TokenHierarchy<BaseDocument> tokenHierarchy=TokenHierarchy.get(doc);
  int offset=context.getCaretOffset();
  int lineBegin=Utilities.getRowStart(doc,offset);
  int lineEnd=Utilities.getRowEnd(doc,offset);
  if (lineBegin == offset && lineEnd == offset) {
    return;
  }
  TokenSequence<? extends JsTokenId> ts=LexUtilities.getTokenSequence(tokenHierarchy,offset,language);
  if (ts == null) {
    return;
  }
  ts.move(offset);
  if (!ts.moveNext() && !ts.movePrevious()) {
    return;
  }
  Token<? extends JsTokenId> token=ts.token();
  JsTokenId id=token.id();
  if (!id.isError() && isInsertMatchingEnabled() && !isDocToken(id)&& isAddRightBrace(doc,offset)) {
    int indent=GsfUtilities.getLineIndent(doc,offset);
    int afterLastNonWhite=Utilities.getRowLastNonWhite(doc,offset);
    StringBuilder sb=new StringBuilder();
    int carretOffset=0;
    int curlyOffset=getUnbalancedCurlyOffset(doc,offset);
    if (offset > afterLastNonWhite) {
      sb.append(""String_Node_Str"");
      sb.append(IndentUtils.createIndentString(doc,indent + IndentUtils.indentLevelSize(doc)));
      carretOffset=sb.length();
      sb.append(""String_Node_Str"");
      if (curlyOffset >= 0) {
        sb.append(IndentUtils.createIndentString(doc,getCurlyIndent(doc,curlyOffset)));
      }
 else {
        sb.append(IndentUtils.createIndentString(doc,indent));
      }
      sb.append(""String_Node_Str"");
    }
 else {
      boolean insert[]={true};
      int end=getRowOrBlockEnd(doc,offset,insert);
      if (insert[0]) {
        String restOfLine=doc.getText(offset,Math.min(end,Utilities.getRowEnd(doc,afterLastNonWhite)) - offset);
        sb.append(""String_Node_Str"");
        sb.append(IndentUtils.createIndentString(doc,indent + IndentUtils.indentLevelSize(doc)));
        carretOffset=sb.length();
        sb.append(restOfLine);
        sb.append(""String_Node_Str"");
        if (curlyOffset >= 0) {
          sb.append(IndentUtils.createIndentString(doc,getCurlyIndent(doc,curlyOffset)));
        }
 else {
          sb.append(IndentUtils.createIndentString(doc,indent));
        }
        sb.append(""String_Node_Str"");
        doc.remove(offset,restOfLine.length());
      }
    }
    if (sb.length() > 0) {
      context.setText(sb.toString(),0,carretOffset);
    }
    return;
  }
  if (id.isError()) {
    String text=token.text().toString();
    if (comments.test(doc) && text.startsWith(""String_Node_Str"") && ts.offset() == Utilities.getRowFirstNonWhite(doc,offset)) {
      int indent=GsfUtilities.getLineIndent(doc,offset);
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(IndentUtils.createIndentString(doc,indent));
      sb.append(""String_Node_Str"");
      int carretOffset=sb.length();
      sb.append(""String_Node_Str"");
      sb.append(IndentUtils.createIndentString(doc,indent));
      sb.append(""String_Node_Str"");
      if (text.startsWith(""String_Node_Str"")) {
        commentGenerator=new CommentGenerator(offset + carretOffset,indent + 1);
      }
      context.setText(sb.toString(),0,carretOffset);
      return;
    }
  }
  if (multiLineLiterals) {
    if (id == JsTokenId.STRING || (id == JsTokenId.STRING_END) && offset < ts.offset() + ts.token().length()) {
      String str=""String_Node_Str"";
      if (id != JsTokenId.STRING || offset > ts.offset()) {
        str=""String_Node_Str"";
        if (offset - ts.offset() < ts.token().length()) {
          String text=ts.token().text().toString();
          text=text.substring(0,offset - ts.offset());
          if (text.endsWith(""String_Node_Str"")) {
            str=""String_Node_Str"";
          }
        }
      }
      context.setText(str,-1,str.length());
      return;
    }
    if (id == JsTokenId.TEMPLATE || (id == JsTokenId.TEMPLATE_END) && offset < ts.offset() + ts.token().length()) {
      String str=""String_Node_Str"";
      context.setText(str,-1,str.length());
      return;
    }
    if (id == JsTokenId.REGEXP || (id == JsTokenId.REGEXP_END) && offset < ts.offset() + ts.token().length()) {
      String str=(id != JsTokenId.REGEXP || offset > ts.offset()) ? ""String_Node_Str"" : ""String_Node_Str"";
      context.setText(str,-1,str.length());
      return;
    }
  }
 else {
    final int indent=GsfUtilities.getLineIndent(doc,offset);
    final StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(IndentUtils.createIndentString(doc,indent + IndentUtils.indentLevelSize(doc)));
    final int carretOffset=sb.length();
    context.setText(sb.toString(),0,carretOffset);
    return;
  }
  if ((id == JsTokenId.BRACKET_RIGHT_CURLY || id == JsTokenId.BRACKET_RIGHT_BRACKET) && offset > 0) {
    Token<? extends JsTokenId> prevToken=LexUtilities.getToken(doc,offset - 1,language);
    if (prevToken != null) {
      JsTokenId prevTokenId=prevToken.id();
      if (id == JsTokenId.BRACKET_RIGHT_CURLY && prevTokenId == JsTokenId.BRACKET_LEFT_CURLY || id == JsTokenId.BRACKET_RIGHT_BRACKET && prevTokenId == JsTokenId.BRACKET_LEFT_BRACKET) {
        int indent=GsfUtilities.getLineIndent(doc,offset);
        StringBuilder sb=new StringBuilder();
        sb.append(""String_Node_Str"");
        sb.append(IndentUtils.createIndentString(doc,indent + IndentUtils.indentLevelSize(doc)));
        int carretOffset=sb.length();
        sb.append(""String_Node_Str"");
        sb.append(IndentUtils.createIndentString(doc,indent));
        context.setText(sb.toString(),0,carretOffset);
        return;
      }
    }
  }
  if (!comments.test(doc)) {
    return;
  }
  if (id == JsTokenId.WHITESPACE) {
    int begin=Utilities.getRowFirstNonWhite(doc,offset);
    if (begin != -1 && offset < begin) {
      ts.move(begin);
      if (ts.moveNext()) {
        id=ts.token().id();
        if (id == JsTokenId.LINE_COMMENT) {
          offset=begin;
        }
      }
    }
  }
  if ((id == JsTokenId.BLOCK_COMMENT || id == JsTokenId.DOC_COMMENT) && offset > ts.offset() && offset < ts.offset() + ts.token().length()) {
    int begin=Utilities.getRowFirstNonWhite(doc,offset);
    int end=Utilities.getRowEnd(doc,offset) + 1;
    if (begin == -1) {
      begin=end;
    }
    String line=doc.getText(begin,end - begin);
    boolean isBlockStart=line.startsWith(""String_Node_Str"") || (begin != -1 && begin < ts.offset());
    if (isBlockStart || line.startsWith(""String_Node_Str"")) {
      int indent=GsfUtilities.getLineIndent(doc,offset);
      StringBuilder sb=new StringBuilder(""String_Node_Str"");
      if (isBlockStart) {
        indent++;
      }
      int carretPosition=0;
      sb.append(IndentUtils.createIndentString(doc,indent));
      if (isBlockStart) {
        sb.append(""String_Node_Str"");
        carretPosition=sb.length();
        TokenSequence<? extends JsDocumentationTokenId> jsDocTS=LexUtilities.getJsDocumentationTokenSequence(tokenHierarchy,offset);
        if (jsDocTS != null) {
          if (!hasCommentEnd(jsDocTS)) {
            commentGenerator=new CommentGenerator(offset + carretPosition,indent);
            sb.append(""String_Node_Str"").append(IndentUtils.createIndentString(doc,indent)).append(""String_Node_Str"");
          }
        }
      }
 else {
        sb.append(""String_Node_Str"");
        int afterStar=isBlockStart ? begin + 2 : begin + 1;
        line=doc.getText(afterStar,Utilities.getRowEnd(doc,afterStar) - afterStar);
        for (int i=0; i < line.length(); i++) {
          char c=line.charAt(i);
          if (c == ' ' || c == '\t') {
            sb.append(c);
          }
 else {
            break;
          }
        }
        carretPosition=sb.length();
      }
      if (offset == begin && offset > 0) {
        context.setText(sb.toString(),-1,sb.length());
        return;
      }
      context.setText(sb.toString(),-1,carretPosition);
      return;
    }
  }
  boolean isComment=id == JsTokenId.LINE_COMMENT;
  if (id == JsTokenId.EOL) {
    if (ts.movePrevious() && ts.token().id() == JsTokenId.LINE_COMMENT) {
      isComment=true;
    }
  }
  if (isComment) {
    boolean continueComment=false;
    int begin=Utilities.getRowFirstNonWhite(doc,offset);
    boolean previousLineWasComment=false;
    boolean nextLineIsComment=false;
    int rowStart=Utilities.getRowStart(doc,offset);
    if (rowStart > 0) {
      int prevBegin=Utilities.getRowFirstNonWhite(doc,rowStart - 1);
      if (prevBegin != -1) {
        Token<? extends JsTokenId> firstToken=LexUtilities.getToken(doc,prevBegin,language);
        if (firstToken != null && firstToken.id() == JsTokenId.LINE_COMMENT) {
          previousLineWasComment=true;
        }
      }
    }
    int rowEnd=Utilities.getRowEnd(doc,offset);
    if (rowEnd < doc.getLength()) {
      int nextBegin=Utilities.getRowFirstNonWhite(doc,rowEnd + 1);
      if (nextBegin != -1) {
        Token<? extends JsTokenId> firstToken=LexUtilities.getToken(doc,nextBegin,language);
        if (firstToken != null && firstToken.id() == JsTokenId.LINE_COMMENT) {
          nextLineIsComment=true;
        }
      }
    }
    if (previousLineWasComment || nextLineIsComment || (offset > ts.offset() && offset < ts.offset() + ts.token().length())) {
      if (ts.offset() + token.length() > offset + 1) {
        String trailing=doc.getText(offset,Utilities.getRowEnd(doc,offset) - offset);
        if (trailing.trim().length() != 0) {
          continueComment=true;
        }
      }
 else       if (CONTINUE_COMMENTS) {
        Token<? extends JsTokenId> firstToken=LexUtilities.getToken(doc,begin,language);
        if (firstToken.id() == JsTokenId.LINE_COMMENT) {
          continueComment=true;
        }
      }
      if (!continueComment) {
        int nextLine=Utilities.getRowEnd(doc,offset) + 1;
        if (nextLine < doc.getLength()) {
          int nextLineFirst=Utilities.getRowFirstNonWhite(doc,nextLine);
          if (nextLineFirst != -1) {
            Token<? extends JsTokenId> firstToken=LexUtilities.getToken(doc,nextLineFirst,language);
            if (firstToken != null && firstToken.id() == JsTokenId.LINE_COMMENT) {
              continueComment=true;
            }
          }
        }
      }
    }
    if (continueComment) {
      int indent=GsfUtilities.getLineIndent(doc,offset);
      StringBuilder sb=new StringBuilder();
      if (offset != begin || offset <= 0) {
        sb.append(""String_Node_Str"");
      }
      sb.append(IndentUtils.createIndentString(doc,indent));
      sb.append(""String_Node_Str"");
      int afterSlash=begin + 2;
      String line=doc.getText(afterSlash,Utilities.getRowEnd(doc,afterSlash) - afterSlash);
      for (int i=0; i < line.length(); i++) {
        char c=line.charAt(i);
        if (c == ' ' || c == '\t') {
          sb.append(c);
        }
 else {
          break;
        }
      }
      if (offset == begin && offset > 0) {
        int caretPosition=sb.length();
        sb.append(""String_Node_Str"");
        context.setText(sb.toString(),-1,caretPosition);
        return;
      }
      context.setText(sb.toString(),-1,sb.length());
      return;
    }
  }
  int indentSize=getNextLineIndentation(doc,offset);
  if (indentSize > 0) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    sb.append(IndentUtils.createIndentString(doc,indentSize));
    context.setText(sb.toString(),-1,sb.length());
  }
}","@Override public void insert(MutableContext context) throws BadLocationException {
  BaseDocument doc=(BaseDocument)context.getDocument();
  TokenHierarchy<BaseDocument> tokenHierarchy=TokenHierarchy.get(doc);
  int offset=context.getCaretOffset();
  int lineBegin=Utilities.getRowStart(doc,offset);
  int lineEnd=Utilities.getRowEnd(doc,offset);
  if (lineBegin == offset && lineEnd == offset) {
    return;
  }
  TokenSequence<? extends JsTokenId> ts=LexUtilities.getTokenSequence(tokenHierarchy,offset,language);
  if (ts == null) {
    return;
  }
  ts.move(offset);
  if (!ts.moveNext() && !ts.movePrevious()) {
    return;
  }
  Token<? extends JsTokenId> token=ts.token();
  JsTokenId id=token.id();
  if (!id.isError() && isInsertMatchingEnabled() && !isDocToken(id)&& isAddRightBrace(doc,offset)) {
    int indent=GsfUtilities.getLineIndent(doc,offset);
    int afterLastNonWhite=Utilities.getRowLastNonWhite(doc,offset);
    StringBuilder sb=new StringBuilder();
    int carretOffset=0;
    int curlyOffset=getUnbalancedCurlyOffset(doc,offset);
    if (offset > afterLastNonWhite) {
      sb.append(""String_Node_Str"");
      sb.append(IndentUtils.createIndentString(doc,indent + IndentUtils.indentLevelSize(doc)));
      carretOffset=sb.length();
      sb.append(""String_Node_Str"");
      if (curlyOffset >= 0) {
        sb.append(IndentUtils.createIndentString(doc,getCurlyIndent(doc,curlyOffset)));
      }
 else {
        sb.append(IndentUtils.createIndentString(doc,indent));
      }
      sb.append(""String_Node_Str"");
    }
 else {
      boolean insert[]={true};
      int end=getRowOrBlockEnd(doc,offset,insert);
      if (insert[0]) {
        String restOfLine=doc.getText(offset,Math.min(end,Utilities.getRowEnd(doc,afterLastNonWhite)) - offset);
        sb.append(""String_Node_Str"");
        sb.append(IndentUtils.createIndentString(doc,indent + IndentUtils.indentLevelSize(doc)));
        carretOffset=sb.length();
        sb.append(restOfLine);
        sb.append(""String_Node_Str"");
        if (curlyOffset >= 0) {
          sb.append(IndentUtils.createIndentString(doc,getCurlyIndent(doc,curlyOffset)));
        }
 else {
          sb.append(IndentUtils.createIndentString(doc,indent));
        }
        sb.append(""String_Node_Str"");
        doc.remove(offset,restOfLine.length());
      }
    }
    if (sb.length() > 0) {
      context.setText(sb.toString(),0,carretOffset);
    }
    return;
  }
  if (id.isError()) {
    String text=token.text().toString();
    if (comments.test(doc) && text.startsWith(""String_Node_Str"")) {
      int indent=GsfUtilities.getLineIndent(doc,ts.offset());
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      sb.append(IndentUtils.createIndentString(doc,indent));
      sb.append(""String_Node_Str"");
      int carretOffset=sb.length();
      sb.append(""String_Node_Str"");
      sb.append(IndentUtils.createIndentString(doc,indent));
      sb.append(""String_Node_Str"");
      if (text.startsWith(""String_Node_Str"")) {
        commentGenerator=new CommentGenerator(offset + carretOffset,indent + 1);
      }
      context.setText(sb.toString(),0,carretOffset);
      return;
    }
  }
  if (multiLineLiterals) {
    if (id == JsTokenId.STRING || (id == JsTokenId.STRING_END) && offset < ts.offset() + ts.token().length()) {
      String str=""String_Node_Str"";
      if (id != JsTokenId.STRING || offset > ts.offset()) {
        str=""String_Node_Str"";
        if (offset - ts.offset() < ts.token().length()) {
          String text=ts.token().text().toString();
          text=text.substring(0,offset - ts.offset());
          if (text.endsWith(""String_Node_Str"")) {
            str=""String_Node_Str"";
          }
        }
      }
      context.setText(str,-1,str.length());
      return;
    }
    if (id == JsTokenId.TEMPLATE || (id == JsTokenId.TEMPLATE_END) && offset < ts.offset() + ts.token().length()) {
      String str=""String_Node_Str"";
      context.setText(str,-1,str.length());
      return;
    }
    if (id == JsTokenId.REGEXP || (id == JsTokenId.REGEXP_END) && offset < ts.offset() + ts.token().length()) {
      String str=(id != JsTokenId.REGEXP || offset > ts.offset()) ? ""String_Node_Str"" : ""String_Node_Str"";
      context.setText(str,-1,str.length());
      return;
    }
  }
 else {
    final int indent=GsfUtilities.getLineIndent(doc,offset);
    final StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(IndentUtils.createIndentString(doc,indent + IndentUtils.indentLevelSize(doc)));
    final int carretOffset=sb.length();
    context.setText(sb.toString(),0,carretOffset);
    return;
  }
  if ((id == JsTokenId.BRACKET_RIGHT_CURLY || id == JsTokenId.BRACKET_RIGHT_BRACKET) && offset > 0) {
    Token<? extends JsTokenId> prevToken=LexUtilities.getToken(doc,offset - 1,language);
    if (prevToken != null) {
      JsTokenId prevTokenId=prevToken.id();
      if (id == JsTokenId.BRACKET_RIGHT_CURLY && prevTokenId == JsTokenId.BRACKET_LEFT_CURLY || id == JsTokenId.BRACKET_RIGHT_BRACKET && prevTokenId == JsTokenId.BRACKET_LEFT_BRACKET) {
        int indent=GsfUtilities.getLineIndent(doc,offset);
        StringBuilder sb=new StringBuilder();
        sb.append(""String_Node_Str"");
        sb.append(IndentUtils.createIndentString(doc,indent + IndentUtils.indentLevelSize(doc)));
        int carretOffset=sb.length();
        sb.append(""String_Node_Str"");
        sb.append(IndentUtils.createIndentString(doc,indent));
        context.setText(sb.toString(),0,carretOffset);
        return;
      }
    }
  }
  if (!comments.test(doc)) {
    return;
  }
  if (id == JsTokenId.WHITESPACE) {
    int begin=Utilities.getRowFirstNonWhite(doc,offset);
    if (begin != -1 && offset < begin) {
      ts.move(begin);
      if (ts.moveNext()) {
        id=ts.token().id();
        if (id == JsTokenId.LINE_COMMENT) {
          offset=begin;
        }
      }
    }
  }
  if ((id == JsTokenId.BLOCK_COMMENT || id == JsTokenId.DOC_COMMENT) && offset > ts.offset() && offset < ts.offset() + ts.token().length()) {
    int begin=Utilities.getRowFirstNonWhite(doc,offset);
    int end=Utilities.getRowEnd(doc,offset) + 1;
    if (begin == -1) {
      begin=end;
    }
    String line=doc.getText(begin,end - begin);
    boolean isBlockStart=line.startsWith(""String_Node_Str"") || (begin != -1 && begin < ts.offset());
    if (isBlockStart || line.startsWith(""String_Node_Str"")) {
      int indent=GsfUtilities.getLineIndent(doc,offset);
      StringBuilder sb=new StringBuilder(""String_Node_Str"");
      if (isBlockStart) {
        indent++;
      }
      int carretPosition=0;
      sb.append(IndentUtils.createIndentString(doc,indent));
      if (isBlockStart) {
        sb.append(""String_Node_Str"");
        carretPosition=sb.length();
        TokenSequence<? extends JsDocumentationTokenId> jsDocTS=LexUtilities.getJsDocumentationTokenSequence(tokenHierarchy,offset);
        if (jsDocTS != null) {
          if (!hasCommentEnd(jsDocTS)) {
            commentGenerator=new CommentGenerator(offset + carretPosition,indent);
            sb.append(""String_Node_Str"").append(IndentUtils.createIndentString(doc,indent)).append(""String_Node_Str"");
          }
        }
      }
 else {
        sb.append(""String_Node_Str"");
        int afterStar=isBlockStart ? begin + 2 : begin + 1;
        line=doc.getText(afterStar,Utilities.getRowEnd(doc,afterStar) - afterStar);
        for (int i=0; i < line.length(); i++) {
          char c=line.charAt(i);
          if (c == ' ' || c == '\t') {
            sb.append(c);
          }
 else {
            break;
          }
        }
        carretPosition=sb.length();
      }
      if (offset == begin && offset > 0) {
        context.setText(sb.toString(),-1,sb.length());
        return;
      }
      context.setText(sb.toString(),-1,carretPosition);
      return;
    }
  }
  boolean isComment=id == JsTokenId.LINE_COMMENT;
  if (id == JsTokenId.EOL) {
    if (ts.movePrevious() && ts.token().id() == JsTokenId.LINE_COMMENT) {
      isComment=true;
    }
  }
  if (isComment) {
    boolean continueComment=false;
    int begin=Utilities.getRowFirstNonWhite(doc,offset);
    boolean previousLineWasComment=false;
    boolean nextLineIsComment=false;
    int rowStart=Utilities.getRowStart(doc,offset);
    if (rowStart > 0) {
      int prevBegin=Utilities.getRowFirstNonWhite(doc,rowStart - 1);
      if (prevBegin != -1) {
        Token<? extends JsTokenId> firstToken=LexUtilities.getToken(doc,prevBegin,language);
        if (firstToken != null && firstToken.id() == JsTokenId.LINE_COMMENT) {
          previousLineWasComment=true;
        }
      }
    }
    int rowEnd=Utilities.getRowEnd(doc,offset);
    if (rowEnd < doc.getLength()) {
      int nextBegin=Utilities.getRowFirstNonWhite(doc,rowEnd + 1);
      if (nextBegin != -1) {
        Token<? extends JsTokenId> firstToken=LexUtilities.getToken(doc,nextBegin,language);
        if (firstToken != null && firstToken.id() == JsTokenId.LINE_COMMENT) {
          nextLineIsComment=true;
        }
      }
    }
    if (previousLineWasComment || nextLineIsComment || (offset > ts.offset() && offset < ts.offset() + ts.token().length())) {
      if (ts.offset() + token.length() > offset + 1) {
        String trailing=doc.getText(offset,Utilities.getRowEnd(doc,offset) - offset);
        if (trailing.trim().length() != 0) {
          continueComment=true;
        }
      }
 else       if (CONTINUE_COMMENTS) {
        Token<? extends JsTokenId> firstToken=LexUtilities.getToken(doc,begin,language);
        if (firstToken.id() == JsTokenId.LINE_COMMENT) {
          continueComment=true;
        }
      }
      if (!continueComment) {
        int nextLine=Utilities.getRowEnd(doc,offset) + 1;
        if (nextLine < doc.getLength()) {
          int nextLineFirst=Utilities.getRowFirstNonWhite(doc,nextLine);
          if (nextLineFirst != -1) {
            Token<? extends JsTokenId> firstToken=LexUtilities.getToken(doc,nextLineFirst,language);
            if (firstToken != null && firstToken.id() == JsTokenId.LINE_COMMENT) {
              continueComment=true;
            }
          }
        }
      }
    }
    if (continueComment) {
      int indent=GsfUtilities.getLineIndent(doc,offset);
      StringBuilder sb=new StringBuilder();
      if (offset != begin || offset <= 0) {
        sb.append(""String_Node_Str"");
      }
      sb.append(IndentUtils.createIndentString(doc,indent));
      sb.append(""String_Node_Str"");
      int afterSlash=begin + 2;
      String line=doc.getText(afterSlash,Utilities.getRowEnd(doc,afterSlash) - afterSlash);
      for (int i=0; i < line.length(); i++) {
        char c=line.charAt(i);
        if (c == ' ' || c == '\t') {
          sb.append(c);
        }
 else {
          break;
        }
      }
      if (offset == begin && offset > 0) {
        int caretPosition=sb.length();
        sb.append(""String_Node_Str"");
        context.setText(sb.toString(),-1,caretPosition);
        return;
      }
      context.setText(sb.toString(),-1,sb.length());
      return;
    }
  }
  int indentSize=getNextLineIndentation(doc,offset);
  if (indentSize > 0) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    sb.append(IndentUtils.createIndentString(doc,indentSize));
    context.setText(sb.toString(),-1,sb.length());
  }
}"
34372,"boolean computeIntroduceMethod(TreePathHandle h,CompilationInfo info,TreePath treePath,Tree tree){
  TreePath block=treePath;
  TreePath method=findMethod(block);
  if (method == null) {
    TreePath parentPath=treePath.getParentPath();
    if (parentPath == null) {
      return false;
    }
    method=parentPath;
  }
  CompilationUnitTree compilationUnit=info.getCompilationUnit();
  SourcePositions sourcePositions=info.getTrees().getSourcePositions();
  long endPosition=sourcePositions.getEndPosition(compilationUnit,method.getLeaf());
  if (TreeUtilities.CLASS_TREE_KINDS.contains(method.getLeaf().getKind())) {
    this.classGeneratePosition=endPosition - 1;
  }
 else {
    this.classGeneratePosition=endPosition + 1;
  }
  List<? extends StatementTree> blockStatements=getStatements(block);
  StatementTree lastStatement=blockStatements.isEmpty() ? null : blockStatements.get(blockStatements.size() - 1);
  ScanLocalVars scanner=new ScanLocalVars(info,lastStatement);
  scanner.scan(block,null);
  Set<TypeMirror> exceptions=new HashSet<>();
  String returnType=scanner.getReturnType();
  if (returnType == null || !scanner.hasReturns()) {
    TypeMirror type=scanner.getReturnTypeMirror();
    if (type == null) {
      Element lastStatementElement;
      if (lastStatement != null && (lastStatementElement=getElement(info,new TreePath(treePath,lastStatement))) != null) {
        type=lastStatementElement.asType();
        if (TypeKind.EXECUTABLE.equals(type.getKind())) {
          ExecutableType eType=(ExecutableType)type;
          type=eType.getReturnType();
          long lsEnd=sourcePositions.getEndPosition(compilationUnit,lastStatement);
          if (lsEnd < 0) {
            lsEnd=this.snippetCode.length() - 1;
          }
 else {
            lsEnd-=codeOffset;
          }
          if (';' != this.snippetCode.charAt((int)lsEnd)) {
            this.snippetCode=new StringBuilder(this.snippetCode).insert((int)lsEnd + 1,""String_Node_Str"").toString();
          }
        }
      }
    }
    if (type != null && !TypeKind.VOID.equals(type.getKind())) {
      returnType=type.toString();
      long lsBegin=sourcePositions.getStartPosition(compilationUnit,lastStatement);
      lsBegin-=codeOffset;
      this.snippetCode=new StringBuilder(this.snippetCode).insert((int)lsBegin,""String_Node_Str"").toString();
    }
    if (returnType == null) {
      returnType=info.getTypes().getNoType(TypeKind.VOID).toString();
    }
  }
  for (  StatementTree s : blockStatements) {
    TreePath path=new TreePath(treePath,s);
    exceptions.addAll(info.getTreeUtilities().getUncaughtExceptions(path));
  }
  Set<VariableElement> referencedVariables=scanner.getReferencedVariables();
  StringBuilder declaration=new StringBuilder(returnType);
  declaration.append(""String_Node_Str"");
  boolean isFirst=true;
  for (  VariableElement var : referencedVariables) {
    if (!isFirst) {
      declaration.append(""String_Node_Str"");
    }
    declaration.append(var.asType().toString());
    declaration.append(""String_Node_Str"");
    declaration.append(var.getSimpleName().toString());
    isFirst=false;
  }
  declaration.append(""String_Node_Str"");
  if (!exceptions.isEmpty()) {
    declaration.append(""String_Node_Str"");
    isFirst=true;
    for (    TypeMirror exc : exceptions) {
      if (!isFirst) {
        declaration.append(""String_Node_Str"");
      }
      declaration.append(exc.toString());
      isFirst=false;
    }
  }
  declaration.append(""String_Node_Str"");
  declaration.append(snippetCode);
  declaration.append(""String_Node_Str"");
  this.methodBodyCode=declaration.toString();
  StringBuilder methodInvode=new StringBuilder(""String_Node_Str"");
  isFirst=true;
  for (  VariableElement var : referencedVariables) {
    if (!isFirst) {
      methodInvode.append(""String_Node_Str"");
    }
    methodInvode.append(var.getSimpleName().toString());
    isFirst=false;
  }
  methodInvode.append(""String_Node_Str"");
  this.methodInvokeCode=methodInvode.toString();
  return true;
}","boolean computeIntroduceMethod(TreePathHandle h,CompilationInfo info,TreePath treePath,Tree tree){
  TreePath block=treePath;
  TreePath method=findMethod(block);
  if (method == null) {
    TreePath parentPath=treePath.getParentPath();
    if (parentPath == null) {
      return false;
    }
    method=parentPath;
  }
  CompilationUnitTree compilationUnit=info.getCompilationUnit();
  SourcePositions sourcePositions=info.getTrees().getSourcePositions();
  long endPosition=sourcePositions.getEndPosition(compilationUnit,method.getLeaf());
  if (TreeUtilities.CLASS_TREE_KINDS.contains(method.getLeaf().getKind())) {
    this.classGeneratePosition=endPosition - 1;
  }
 else {
    this.classGeneratePosition=endPosition + 1;
  }
  List<? extends StatementTree> blockStatements=getStatements(block);
  StatementTree lastStatement=blockStatements.isEmpty() ? null : blockStatements.get(blockStatements.size() - 1);
  ScanLocalVars scanner=new ScanLocalVars(info,lastStatement);
  scanner.scan(block,null);
  Set<TypeMirror> exceptions=new HashSet<>();
  String returnType=scanner.getReturnType();
  if (returnType == null || !scanner.hasReturns()) {
    TypeMirror type=scanner.getReturnTypeMirror();
    if (type == null) {
      Element lastStatementElement;
      if (lastStatement != null && (lastStatementElement=getElement(info,new TreePath(treePath,lastStatement))) != null) {
        type=lastStatementElement.asType();
        if (TypeKind.EXECUTABLE.equals(type.getKind())) {
          ExecutableType eType=(ExecutableType)type;
          type=eType.getReturnType();
          long lsEnd=sourcePositions.getEndPosition(compilationUnit,lastStatement);
          if (lsEnd < 0) {
            lsEnd=this.snippetCode.length() - 1;
          }
 else {
            lsEnd-=codeOffset;
          }
          if (';' != this.snippetCode.charAt((int)lsEnd)) {
            this.snippetCode=new StringBuilder(this.snippetCode).insert((int)lsEnd + 1,""String_Node_Str"").toString();
          }
        }
      }
    }
    if (type != null && !TypeKind.VOID.equals(type.getKind())) {
      returnType=type.toString();
      long lsBegin=sourcePositions.getStartPosition(compilationUnit,lastStatement);
      lsBegin-=codeOffset;
      this.snippetCode=new StringBuilder(this.snippetCode).insert((int)lsBegin,""String_Node_Str"").append(';').toString();
    }
    if (returnType == null) {
      returnType=info.getTypes().getNoType(TypeKind.VOID).toString();
    }
  }
  for (  StatementTree s : blockStatements) {
    TreePath path=new TreePath(treePath,s);
    exceptions.addAll(info.getTreeUtilities().getUncaughtExceptions(path));
  }
  Set<VariableElement> referencedVariables=scanner.getReferencedVariables();
  StringBuilder declaration=new StringBuilder(returnType);
  declaration.append(""String_Node_Str"");
  boolean isFirst=true;
  for (  VariableElement var : referencedVariables) {
    if (!isFirst) {
      declaration.append(""String_Node_Str"");
    }
    declaration.append(var.asType().toString());
    declaration.append(""String_Node_Str"");
    declaration.append(var.getSimpleName().toString());
    isFirst=false;
  }
  declaration.append(""String_Node_Str"");
  if (!exceptions.isEmpty()) {
    declaration.append(""String_Node_Str"");
    isFirst=true;
    for (    TypeMirror exc : exceptions) {
      if (!isFirst) {
        declaration.append(""String_Node_Str"");
      }
      declaration.append(exc.toString());
      isFirst=false;
    }
  }
  declaration.append(""String_Node_Str"");
  declaration.append(snippetCode);
  declaration.append(""String_Node_Str"");
  this.methodBodyCode=declaration.toString();
  StringBuilder methodInvode=new StringBuilder(""String_Node_Str"");
  isFirst=true;
  for (  VariableElement var : referencedVariables) {
    if (!isFirst) {
      methodInvode.append(""String_Node_Str"");
    }
    methodInvode.append(var.getSimpleName().toString());
    isFirst=false;
  }
  methodInvode.append(""String_Node_Str"");
  this.methodInvokeCode=methodInvode.toString();
  return true;
}"
34373,"protected int diffUnionType(JCTypeUnion oldT,JCTypeUnion newT,int[] bounds){
  int localPointer=bounds[0];
  return diffParameterList(oldT.alternatives,newT.alternatives,null,localPointer,Measure.MEMBER,diffContext.style.spaceAroundBinaryOps(),diffContext.style.spaceAroundBinaryOps(),false,""String_Node_Str"");
}","protected int diffUnionType(JCTypeUnion oldT,JCTypeUnion newT,int[] bounds){
  int localPointer=bounds[0];
  int pos=diffParameterList(oldT.alternatives,newT.alternatives,null,localPointer,Measure.MEMBER,diffContext.style.spaceAroundBinaryOps(),diffContext.style.spaceAroundBinaryOps(),false,""String_Node_Str"");
  return Math.min(pos,bounds[1]);
}"
34374,"private int diffVarDef(JCVariableDecl oldT,JCVariableDecl newT,int[] bounds){
  int localPointer=bounds[0];
  if ((oldT.mods.flags & Flags.ENUM) != 0) {
    if (nameChanged(oldT.name,newT.name)) {
      copyTo(localPointer,oldT.pos);
      printer.print(newT.name);
      diffInfo.put(oldT.pos,NbBundle.getMessage(CasualDiff.class,""String_Node_Str"",oldT.name));
      localPointer=oldT.pos + oldT.name.length();
    }
    JCNewClass oldInit=(JCNewClass)oldT.init;
    JCNewClass newInit=(JCNewClass)newT.init;
    if (oldInit.args.nonEmpty() && newInit.args.nonEmpty()) {
      copyTo(localPointer,localPointer=getOldPos(oldInit.args.head));
      localPointer=diffParameterList(oldInit.args,newInit.args,null,localPointer,Measure.ARGUMENT);
    }
    if (oldInit.def != null && newInit.def != null) {
      anonClass=true;
      int[] defBounds=new int[]{localPointer,endPos(oldInit.def)};
      localPointer=diffTree(oldInit.def,newInit.def,defBounds);
      anonClass=false;
    }
    copyTo(localPointer,bounds[1]);
    return bounds[1];
  }
  if (!matchModifiers(oldT.mods,newT.mods)) {
    if (hasModifiers(newT.mods)) {
      localPointer=diffModifiers(oldT.mods,newT.mods,oldT,localPointer);
    }
 else {
      if (hasModifiers(oldT.mods)) {
        int oldPos=getOldPos(oldT.mods);
        copyTo(localPointer,oldPos);
        localPointer=getOldPos(oldT.vartype);
      }
    }
  }
  boolean cLikeArray=false, cLikeArrayChange=false;
  int addDimensions=0;
  if (diffContext.syntheticTrees.contains(oldT.vartype)) {
    if (!diffContext.syntheticTrees.contains(newT.vartype)) {
      int varOffset=skipExtraVarKeywordIfPresent(localPointer,oldT.pos);
      if (varOffset == -1) {
        copyTo(localPointer,oldT.pos);
      }
      localPointer=oldT.pos;
      printer.suppressVariableType=suppressParameterTypes;
      int l=printer.out.length();
      printer.print(newT.vartype);
      printer.suppressVariableType=false;
      if (l < printer.out.length()) {
        printer.print(""String_Node_Str"");
      }
    }
  }
 else {
    if (suppressParameterTypes) {
      int[] vartypeBounds=getBounds(oldT.vartype);
      localPointer=vartypeBounds[1];
    }
 else     if (newT.vartype == null) {
      throw new UnsupportedOperationException();
    }
 else {
      int[] vartypeBounds=getBounds(oldT.vartype);
      addDimensions=dimension(newT.vartype,-1);
      cLikeArray=vartypeBounds[1] > oldT.pos;
      cLikeArrayChange=cLikeArray && dimension(oldT.vartype,oldT.pos) > addDimensions;
      if (oldT.type.getKind() == TypeKind.ERROR && vartypeBounds[1] == -1) {
        int modsUpperBound=getCommentCorrectedEndPos(oldT.mods);
        if (modsUpperBound > -1) {
          tokenSequence.move(modsUpperBound);
          if (tokenSequence.moveNext()) {
            copyTo(localPointer,localPointer=modsUpperBound);
          }
        }
        int offset=localPointer;
        JavaTokenId tokenId=null;
        tokenSequence.move(localPointer);
        while (tokenSequence.moveNext()) {
          offset=tokenSequence.offset();
          tokenId=tokenSequence.token().id();
          if (!((tokenId == JavaTokenId.WHITESPACE || tokenId == JavaTokenId.BLOCK_COMMENT || tokenId == JavaTokenId.JAVADOC_COMMENT) && offset < oldT.sym.pos)) {
            break;
          }
        }
        copyTo(localPointer,localPointer=offset);
        vartypeBounds[1]=oldT.sym.pos;
        vartypeBounds[0]=offset;
      }
 else {
        copyTo(localPointer,vartypeBounds[0]);
      }
      localPointer=diffTree(oldT.vartype,newT.vartype,vartypeBounds);
      if (oldT.type.getKind() == TypeKind.ERROR && localPointer == -1) {
        tokenSequence.move(vartypeBounds[0]);
        tokenSequence.moveNext();
        if (tokenSequence.moveNext()) {
          int offset=tokenSequence.offset();
          copyTo(offset,localPointer=vartypeBounds[1]);
        }
      }
    }
  }
  if (nameChanged(oldT.name,newT.name)) {
    boolean isOldError=oldT.name == Names.instance(context).error;
    if (!isOldError) {
      copyTo(localPointer,oldT.pos);
    }
 else {
      printer.print(""String_Node_Str"");
    }
    if (cLikeArray) {
      printer.eatChars(1);
      for (int i=0; i < addDimensions; i++) {
        printer.print(""String_Node_Str"");
      }
      printer.print(""String_Node_Str"");
    }
    printer.print(newT.name);
    diffInfo.put(oldT.pos,NbBundle.getMessage(CasualDiff.class,""String_Node_Str"",oldT.name));
    if (!isOldError) {
      if (cLikeArray) {
        int[] clab=getBounds(oldT.vartype);
        localPointer=clab[1];
      }
 else {
        localPointer=oldT.pos + oldT.name.length();
      }
    }
  }
 else   if (cLikeArrayChange) {
    for (int i=0; i < addDimensions; i++) {
      printer.print(""String_Node_Str"");
    }
    printer.print(""String_Node_Str"");
    printer.print(newT.name);
  }
  if (newT.init != null && oldT.init != null) {
    copyTo(localPointer,localPointer=getCommentCorrectedOldPos(oldT.init));
    localPointer=diffTree(oldT.init,newT.init,new int[]{localPointer,endPos(oldT.init)});
  }
 else {
    if (oldT.init != null && newT.init == null) {
      int pos=getOldPos(oldT.init);
      tokenSequence.move(pos);
      moveToSrcRelevant(tokenSequence,Direction.BACKWARD);
      moveToSrcRelevant(tokenSequence,Direction.BACKWARD);
      tokenSequence.moveNext();
      int to=tokenSequence.offset();
      copyTo(localPointer,to);
      localPointer=endPos(oldT.init);
    }
    if (oldT.init == null && newT.init != null) {
      int end=endPos(oldT);
      tokenSequence.move(end);
      tokenSequence.moveNext();
      if (!JavaTokenId.COMMA.equals(tokenSequence.token().id()) && !JavaTokenId.SEMICOLON.equals(tokenSequence.token().id())) {
        tokenSequence.movePrevious();
      }
      moveToSrcRelevant(tokenSequence,Direction.BACKWARD);
      tokenSequence.moveNext();
      copyTo(localPointer,localPointer=tokenSequence.offset());
      printer.printVarInit(newT);
    }
  }
  copyTo(localPointer,bounds[1]);
  return bounds[1];
}","private int diffVarDef(JCVariableDecl oldT,JCVariableDecl newT,int[] bounds){
  int localPointer=bounds[0];
  if ((oldT.mods.flags & Flags.ENUM) != 0) {
    if (nameChanged(oldT.name,newT.name)) {
      copyTo(localPointer,oldT.pos);
      printer.print(newT.name);
      diffInfo.put(oldT.pos,NbBundle.getMessage(CasualDiff.class,""String_Node_Str"",oldT.name));
      localPointer=oldT.pos + oldT.name.length();
    }
    JCNewClass oldInit=(JCNewClass)oldT.init;
    JCNewClass newInit=(JCNewClass)newT.init;
    if (oldInit.args.nonEmpty() && newInit.args.nonEmpty()) {
      copyTo(localPointer,localPointer=getOldPos(oldInit.args.head));
      localPointer=diffParameterList(oldInit.args,newInit.args,null,localPointer,Measure.ARGUMENT);
    }
    if (oldInit.def != null && newInit.def != null) {
      anonClass=true;
      int[] defBounds=new int[]{localPointer,endPos(oldInit.def)};
      localPointer=diffTree(oldInit.def,newInit.def,defBounds);
      anonClass=false;
    }
    copyTo(localPointer,bounds[1]);
    return bounds[1];
  }
  if (!matchModifiers(oldT.mods,newT.mods)) {
    if (hasModifiers(newT.mods)) {
      localPointer=diffModifiers(oldT.mods,newT.mods,oldT,localPointer);
    }
 else {
      if (hasModifiers(oldT.mods)) {
        int oldPos=getOldPos(oldT.mods);
        copyTo(localPointer,oldPos);
        localPointer=getOldPos(oldT.vartype);
      }
    }
  }
  boolean cLikeArray=false, cLikeArrayChange=false;
  int addDimensions=0;
  if (diffContext.syntheticTrees.contains(oldT.vartype)) {
    if (!diffContext.syntheticTrees.contains(newT.vartype)) {
      int varOffset=skipExtraVarKeywordIfPresent(localPointer,oldT.pos);
      if (varOffset == -1) {
        copyTo(localPointer,oldT.pos);
      }
      localPointer=oldT.pos;
      printer.suppressVariableType=suppressParameterTypes;
      int l=printer.out.length();
      if (!suppressParameterTypes) {
        printer.print(newT.vartype);
        if (l < printer.out.length()) {
          printer.print(""String_Node_Str"");
        }
      }
      printer.suppressVariableType=false;
    }
  }
 else {
    if (suppressParameterTypes) {
      int[] vartypeBounds=getBounds(oldT.vartype);
      localPointer=vartypeBounds[1];
    }
 else     if (newT.vartype == null) {
      throw new UnsupportedOperationException();
    }
 else {
      int[] vartypeBounds=getBounds(oldT.vartype);
      addDimensions=dimension(newT.vartype,-1);
      cLikeArray=vartypeBounds[1] > oldT.pos;
      cLikeArrayChange=cLikeArray && dimension(oldT.vartype,oldT.pos) > addDimensions;
      if (oldT.type.getKind() == TypeKind.ERROR && vartypeBounds[1] == -1) {
        int modsUpperBound=getCommentCorrectedEndPos(oldT.mods);
        if (modsUpperBound > -1) {
          tokenSequence.move(modsUpperBound);
          if (tokenSequence.moveNext()) {
            copyTo(localPointer,localPointer=modsUpperBound);
          }
        }
        int offset=localPointer;
        JavaTokenId tokenId=null;
        tokenSequence.move(localPointer);
        while (tokenSequence.moveNext()) {
          offset=tokenSequence.offset();
          tokenId=tokenSequence.token().id();
          if (!((tokenId == JavaTokenId.WHITESPACE || tokenId == JavaTokenId.BLOCK_COMMENT || tokenId == JavaTokenId.JAVADOC_COMMENT) && offset < oldT.sym.pos)) {
            break;
          }
        }
        copyTo(localPointer,localPointer=offset);
        vartypeBounds[1]=oldT.sym.pos;
        vartypeBounds[0]=offset;
      }
 else {
        copyTo(localPointer,vartypeBounds[0]);
      }
      localPointer=diffTree(oldT.vartype,newT.vartype,vartypeBounds);
      if (oldT.type.getKind() == TypeKind.ERROR && localPointer == -1) {
        tokenSequence.move(vartypeBounds[0]);
        tokenSequence.moveNext();
        if (tokenSequence.moveNext()) {
          int offset=tokenSequence.offset();
          copyTo(offset,localPointer=vartypeBounds[1]);
        }
      }
    }
  }
  if (nameChanged(oldT.name,newT.name)) {
    boolean isOldError=oldT.name == Names.instance(context).error;
    if (!isOldError) {
      copyTo(localPointer,oldT.pos);
    }
 else {
      printer.print(""String_Node_Str"");
    }
    if (cLikeArray) {
      printer.eatChars(1);
      for (int i=0; i < addDimensions; i++) {
        printer.print(""String_Node_Str"");
      }
      printer.print(""String_Node_Str"");
    }
    printer.print(newT.name);
    diffInfo.put(oldT.pos,NbBundle.getMessage(CasualDiff.class,""String_Node_Str"",oldT.name));
    if (!isOldError) {
      if (cLikeArray) {
        int[] clab=getBounds(oldT.vartype);
        localPointer=clab[1];
      }
 else {
        localPointer=oldT.pos + oldT.name.length();
      }
    }
  }
 else   if (cLikeArrayChange) {
    for (int i=0; i < addDimensions; i++) {
      printer.print(""String_Node_Str"");
    }
    printer.print(""String_Node_Str"");
    printer.print(newT.name);
  }
  if (newT.init != null && oldT.init != null) {
    copyTo(localPointer,localPointer=getCommentCorrectedOldPos(oldT.init));
    localPointer=diffTree(oldT.init,newT.init,new int[]{localPointer,endPos(oldT.init)});
  }
 else {
    if (oldT.init != null && newT.init == null) {
      int pos=getOldPos(oldT.init);
      tokenSequence.move(pos);
      moveToSrcRelevant(tokenSequence,Direction.BACKWARD);
      moveToSrcRelevant(tokenSequence,Direction.BACKWARD);
      tokenSequence.moveNext();
      int to=tokenSequence.offset();
      copyTo(localPointer,to);
      localPointer=endPos(oldT.init);
    }
    if (oldT.init == null && newT.init != null) {
      int end=endPos(oldT);
      tokenSequence.move(end);
      tokenSequence.moveNext();
      if (!JavaTokenId.COMMA.equals(tokenSequence.token().id()) && !JavaTokenId.SEMICOLON.equals(tokenSequence.token().id())) {
        tokenSequence.movePrevious();
      }
      moveToSrcRelevant(tokenSequence,Direction.BACKWARD);
      tokenSequence.moveNext();
      copyTo(localPointer,localPointer=tokenSequence.offset());
      printer.printVarInit(newT);
    }
  }
  copyTo(localPointer,bounds[1]);
  return bounds[1];
}"
34375,"public void run(final WorkingCopy workingCopy) throws IOException {
  workingCopy.toPhase(Phase.RESOLVED);
  final TreeMaker make=workingCopy.getTreeMaker();
  new ErrorAwareTreeScanner<Void,Void>(){
    @Override public Void visitUnionType(    UnionTypeTree node,    Void p){
      List<Tree> alternatives=new ArrayList<Tree>(node.getTypeAlternatives());
      alternatives.add(1,make.Identifier(""String_Node_Str""));
      workingCopy.rewrite(node,make.UnionType(alternatives));
      return null;
    }
  }
.scan(workingCopy.getCompilationUnit(),null);
}","public void run(final WorkingCopy workingCopy) throws IOException {
  workingCopy.toPhase(Phase.RESOLVED);
  final TreeMaker make=workingCopy.getTreeMaker();
  new ErrorAwareTreeScanner<Void,Void>(){
    @Override public Void visitUnionType(    UnionTypeTree node,    Void p){
      List<Tree> alternatives=new ArrayList<Tree>(node.getTypeAlternatives());
      alternatives.remove(0);
      alternatives.remove(0);
      alternatives.add(0,make.Identifier(""String_Node_Str""));
      alternatives.add(1,make.Identifier(""String_Node_Str""));
      workingCopy.rewrite(node,make.UnionType(alternatives));
      return null;
    }
  }
.scan(workingCopy.getCompilationUnit(),null);
}"
34376,"@Override public Void visitUnionType(UnionTypeTree node,Void p){
  List<Tree> alternatives=new ArrayList<Tree>(node.getTypeAlternatives());
  alternatives.add(1,make.Identifier(""String_Node_Str""));
  workingCopy.rewrite(node,make.UnionType(alternatives));
  return null;
}","@Override public Void visitUnionType(UnionTypeTree node,Void p){
  List<Tree> alternatives=new ArrayList<Tree>(node.getTypeAlternatives());
  alternatives.remove(0);
  alternatives.remove(0);
  alternatives.add(0,make.Identifier(""String_Node_Str""));
  alternatives.add(1,make.Identifier(""String_Node_Str""));
  workingCopy.rewrite(node,make.UnionType(alternatives));
  return null;
}"
34377,"@Override protected boolean handleProcess(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv) throws LayerGenerationException {
  Messager messager=processingEnv.getMessager();
  for (  Element e : roundEnv.getElementsAnnotatedWith(PropertyEditorSearchPath.class)) {
    String pkg=findPackage(e);
    String pkgFilename=pkg.replace(""String_Node_Str"",""String_Node_Str"");
    LayerBuilder builder=layer(e);
    LayerBuilder.File file=builder.file(NodesRegistrationSupport.PE_LOOKUP_PATH + ""String_Node_Str"" + pkgFilename+ ""String_Node_Str"");
    file.methodvalue(""String_Node_Str"",NodesRegistrationSupport.class.getName(),""String_Node_Str"");
    file.stringvalue(NodesRegistrationSupport.PACKAGE,pkg);
    file.stringvalue(""String_Node_Str"",NodesRegistrationSupport.PEPackageRegistration.class.getName());
    file.write();
  }
  for (  Element e : roundEnv.getElementsAnnotatedWith(PropertyEditorRegistration.class)) {
    if (e.getKind() == ElementKind.CLASS) {
      String className=((TypeElement)e).getQualifiedName().toString();
      Collection<AnnotationValue> targetTypes=null;
      List<? extends AnnotationMirror> annotationMirrors=e.getAnnotationMirrors();
      for (      AnnotationMirror am : annotationMirrors) {
        for (        Entry<? extends ExecutableElement,? extends AnnotationValue> entry : am.getElementValues().entrySet()) {
          if (""String_Node_Str"".equals(entry.getKey().getSimpleName().toString())) {
            targetTypes=(Collection<AnnotationValue>)entry.getValue().getValue();
          }
        }
      }
      if (targetTypes == null) {
        messager.printMessage(Kind.ERROR,""String_Node_Str"",e);
        continue;
      }
      TypeElement typeElement=processingEnv.getElementUtils().getTypeElement(""String_Node_Str"");
      if (!processingEnv.getTypeUtils().isSubtype(e.asType(),typeElement.asType())) {
        messager.printMessage(Kind.ERROR,className + ""String_Node_Str"",e);
        continue;
      }
      LayerBuilder builder=layer(e);
      String clsFileName=className.replace(""String_Node_Str"",""String_Node_Str"");
      LayerBuilder.File file=builder.instanceFile(NodesRegistrationSupport.PE_LOOKUP_PATH,""String_Node_Str"" + clsFileName);
      file.methodvalue(""String_Node_Str"",NodesRegistrationSupport.class.getName(),""String_Node_Str"");
      file.stringvalue(NodesRegistrationSupport.EDITOR_CLASS,className);
      file.stringvalue(""String_Node_Str"",NodesRegistrationSupport.PEClassRegistration.class.getName());
      int i=1;
      for (      AnnotationValue type : targetTypes) {
        String clsName=type.accept(new SimpleAnnotationValueVisitor6<String,Object>(){
          @Override public String visitType(          TypeMirror t,          Object p){
            return t.toString();
          }
        }
,null);
        file.stringvalue(""String_Node_Str"" + i,clsName);
        i++;
      }
      file.write();
    }
  }
  for (  Element e : roundEnv.getElementsAnnotatedWith(BeanInfoSearchPath.class)) {
    String pkg=findPackage(e);
    String pkgFilename=pkg.replace(""String_Node_Str"",""String_Node_Str"");
    LayerBuilder builder=layer(e);
    LayerBuilder.File file=builder.file(NodesRegistrationSupport.BEANINFO_LOOKUP_PATH + ""String_Node_Str"" + pkgFilename+ ""String_Node_Str"");
    file.methodvalue(""String_Node_Str"",NodesRegistrationSupport.class.getName(),""String_Node_Str"");
    file.stringvalue(NodesRegistrationSupport.PACKAGE,pkg);
    file.stringvalue(""String_Node_Str"",NodesRegistrationSupport.BeanInfoRegistration.class.getName());
    file.write();
  }
  return true;
}","@Override protected boolean handleProcess(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv) throws LayerGenerationException {
  Messager messager=processingEnv.getMessager();
  for (  Element e : roundEnv.getElementsAnnotatedWith(PropertyEditorSearchPath.class)) {
    String pkg=findPackage(e);
    String pkgFilename=pkg.replace(""String_Node_Str"",""String_Node_Str"");
    LayerBuilder builder=layer(e);
    LayerBuilder.File file=builder.file(NodesRegistrationSupport.PE_LOOKUP_PATH + ""String_Node_Str"" + pkgFilename+ ""String_Node_Str"");
    file.methodvalue(""String_Node_Str"",NodesRegistrationSupport.class.getName(),""String_Node_Str"");
    file.stringvalue(NodesRegistrationSupport.PACKAGE,pkg);
    file.stringvalue(""String_Node_Str"",NodesRegistrationSupport.PEPackageRegistration.class.getName());
    file.write();
  }
  for (  Element e : roundEnv.getElementsAnnotatedWith(PropertyEditorRegistration.class)) {
    if (e.getKind() == ElementKind.CLASS) {
      String className=((TypeElement)e).getQualifiedName().toString();
      Collection<AnnotationValue> targetTypes=null;
      List<? extends AnnotationMirror> annotationMirrors=e.getAnnotationMirrors();
      for (      AnnotationMirror am : annotationMirrors) {
        for (        Entry<? extends ExecutableElement,? extends AnnotationValue> entry : am.getElementValues().entrySet()) {
          if (""String_Node_Str"".equals(entry.getKey().getSimpleName().toString())) {
            targetTypes=(Collection<AnnotationValue>)entry.getValue().getValue();
          }
        }
      }
      if (targetTypes == null) {
        messager.printMessage(Kind.ERROR,""String_Node_Str"",e);
        continue;
      }
      TypeElement typeElement=processingEnv.getElementUtils().getTypeElement(""String_Node_Str"");
      if (!processingEnv.getTypeUtils().isSubtype(e.asType(),typeElement.asType())) {
        messager.printMessage(Kind.ERROR,className + ""String_Node_Str"",e);
        continue;
      }
      LayerBuilder builder=layer(e);
      String clsFileName=className.replace(""String_Node_Str"",""String_Node_Str"");
      LayerBuilder.File file=builder.instanceFile(NodesRegistrationSupport.PE_LOOKUP_PATH,""String_Node_Str"" + clsFileName);
      file.methodvalue(""String_Node_Str"",NodesRegistrationSupport.class.getName(),""String_Node_Str"");
      file.stringvalue(NodesRegistrationSupport.EDITOR_CLASS,className);
      file.stringvalue(""String_Node_Str"",NodesRegistrationSupport.PEClassRegistration.class.getName());
      int i=1;
      for (      AnnotationValue type : targetTypes) {
        String clsName=type.accept(new SimpleAnnotationValueVisitor6<String,Object>(){
          @Override public String visitType(          TypeMirror t,          Object p){
            if (t.getKind() == TypeKind.DECLARED) {
              return processingEnv.getElementUtils().getBinaryName((TypeElement)processingEnv.getTypeUtils().asElement(t)).toString();
            }
            return t.toString();
          }
        }
,null);
        file.stringvalue(""String_Node_Str"" + i,clsName);
        i++;
      }
      file.write();
    }
  }
  for (  Element e : roundEnv.getElementsAnnotatedWith(BeanInfoSearchPath.class)) {
    String pkg=findPackage(e);
    String pkgFilename=pkg.replace(""String_Node_Str"",""String_Node_Str"");
    LayerBuilder builder=layer(e);
    LayerBuilder.File file=builder.file(NodesRegistrationSupport.BEANINFO_LOOKUP_PATH + ""String_Node_Str"" + pkgFilename+ ""String_Node_Str"");
    file.methodvalue(""String_Node_Str"",NodesRegistrationSupport.class.getName(),""String_Node_Str"");
    file.stringvalue(NodesRegistrationSupport.PACKAGE,pkg);
    file.stringvalue(""String_Node_Str"",NodesRegistrationSupport.BeanInfoRegistration.class.getName());
    file.write();
  }
  return true;
}"
34378,"@Override public String visitType(TypeMirror t,Object p){
  return t.toString();
}","@Override public String visitType(TypeMirror t,Object p){
  if (t.getKind() == TypeKind.DECLARED) {
    return processingEnv.getElementUtils().getBinaryName((TypeElement)processingEnv.getTypeUtils().asElement(t)).toString();
  }
  return t.toString();
}"
34379,"public void testPERegistered(){
  NodeOp.registerPropertyEditors();
  PropertyEditor pEditor=PropertyEditorManager.findEditor(Double[].class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
  pEditor=PropertyEditorManager.findEditor(Integer.class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
  pEditor=PropertyEditorManager.findEditor(char[][].class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
  pEditor=PropertyEditorManager.findEditor(short.class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
}","public void testPERegistered(){
  NodeOp.registerPropertyEditors();
  PropertyEditor pEditor=PropertyEditorManager.findEditor(Double[].class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
  pEditor=PropertyEditorManager.findEditor(Integer.class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
  pEditor=PropertyEditorManager.findEditor(char[][].class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
  pEditor=PropertyEditorManager.findEditor(short.class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
  pEditor=PropertyEditorManager.findEditor(CustomData.Inner.class);
  assertEquals(""String_Node_Str"",pEditor.getClass().getName());
}"
34380,"@Override public void setModified(boolean modif){
  super.setModified(modif);
  if (!modif) {
    GenericEditorSupport ges=getLookup().lookup(GenericEditorSupport.class);
    if (ges != null) {
      ges.removeSaveCookie();
    }
  }
}","@Override public void setModified(boolean modif){
  super.setModified(modif);
  if (!isModified()) {
    GenericEditorSupport ges=getLookup().lookup(GenericEditorSupport.class);
    if (ges != null) {
      ges.removeSaveCookie();
    }
  }
}"
34381,"@Override public void setModified(boolean modif){
  super.setModified(modif);
  if (!modif) {
    HtmlEditorSupport support=getLookup().lookup(HtmlEditorSupport.class);
    support.removeSaveCookie();
  }
}","@Override public void setModified(boolean modif){
  super.setModified(modif);
  if (!isModified()) {
    HtmlEditorSupport support=getLookup().lookup(HtmlEditorSupport.class);
    support.removeSaveCookie();
  }
}"
34382,"/** 
 * Set whether the object is considered modified. Also fires a change event. If the new value is <code>true</code>, the data object is added into a   {@link #getRegistry registry} of opened data objects.If the new value is <code>false</code>, the data object is removed from the registry.
 */
public void setModified(boolean modif){
  super.setModified(modif);
  if (modif) {
    if (getCookie(SaveCookie.class) == null) {
      getCookieSet().add(saveCookie);
    }
  }
 else {
    if (saveCookie.equals(getCookie(SaveCookie.class))) {
      getCookieSet().remove(saveCookie);
    }
  }
}","/** 
 * Set whether the object is considered modified. Also fires a change event. If the new value is <code>true</code>, the data object is added into a   {@link #getRegistry registry} of opened data objects.If the new value is <code>false</code>, the data object is removed from the registry.
 */
public void setModified(boolean modif){
  super.setModified(modif);
  if (isModified()) {
    if (getCookie(SaveCookie.class) == null) {
      getCookieSet().add(saveCookie);
    }
  }
 else {
    if (saveCookie.equals(getCookie(SaveCookie.class))) {
      getCookieSet().remove(saveCookie);
    }
  }
}"
34383,"private void dropMethodsAndErrors(com.sun.tools.javac.util.Context ctx,CompilationUnitTree cut){
  Symtab syms=Symtab.instance(ctx);
  Names names=Names.instance(ctx);
  TreeMaker make=TreeMaker.instance(ctx);
  new TreePathScanner<Void,Void>(){
    @Override public Void visitVariable(    VariableTree node,    Void p){
      JCTree.JCVariableDecl decl=(JCTree.JCVariableDecl)node;
      if ((decl.mods.flags & Flags.ENUM) == 0) {
        decl.init=null;
      }
      decl.sym.type=decl.type=error2Object(decl.type);
      clearAnnotations(decl.sym.getMetadata());
      return super.visitVariable(node,p);
    }
    @Override public Void visitMethod(    MethodTree node,    Void p){
      JCTree.JCMethodDecl decl=(JCTree.JCMethodDecl)node;
      Symbol.MethodSymbol msym=decl.sym;
      if (Collections.disjoint(msym.getModifiers(),EnumSet.of(Modifier.NATIVE,Modifier.ABSTRACT))) {
        JCTree.JCNewClass nct=make.NewClass(null,com.sun.tools.javac.util.List.nil(),make.QualIdent(syms.runtimeExceptionType.tsym),com.sun.tools.javac.util.List.of(make.Literal(""String_Node_Str"")),null);
        nct.type=syms.runtimeExceptionType;
        nct.constructor=syms.runtimeExceptionType.tsym.members().getSymbols(s -> s.getKind() == ElementKind.CONSTRUCTOR && s.type.getParameterTypes().size() == 1 && s.type.getParameterTypes().head.tsym == syms.stringType.tsym).iterator().next();
        decl.body=make.Block(0,com.sun.tools.javac.util.List.of(make.Throw(nct)));
      }
      Type.MethodType mt;
      if (msym.type.hasTag(TypeTag.FORALL)) {
        ForAll fa=(ForAll)msym.type;
        fa.tvars=error2Object(fa.tvars);
        mt=fa.asMethodType();
      }
 else {
        mt=(Type.MethodType)msym.type;
      }
      mt.restype=error2Object(mt.restype);
      mt.argtypes=error2Object(mt.argtypes);
      mt.thrown=error2Object(mt.thrown);
      clearAnnotations(decl.sym.getMetadata());
      return super.visitMethod(node,p);
    }
    @Override public Void visitClass(    ClassTree node,    Void p){
      JCClassDecl clazz=(JCTree.JCClassDecl)node;
      Symbol.ClassSymbol csym=clazz.sym;
      Type.ClassType ct=(Type.ClassType)csym.type;
      ct.all_interfaces_field=error2Object(ct.all_interfaces_field);
      ct.allparams_field=error2Object(ct.allparams_field);
      ct.interfaces_field=error2Object(ct.interfaces_field);
      ct.typarams_field=error2Object(ct.typarams_field);
      ct.supertype_field=error2Object(ct.supertype_field);
      super.visitClass(node,p);
      for (      JCTree def : clazz.defs) {
        if (def.hasTag(JCTree.Tag.ERRONEOUS)) {
          clazz.defs=com.sun.tools.javac.util.List.filter(clazz.defs,def);
        }
      }
      return null;
    }
    private void clearAnnotations(    SymbolMetadata metadata){
      if (metadata == null)       return;
      com.sun.tools.javac.util.List<Attribute.Compound> annotations=metadata.getDeclarationAttributes();
      com.sun.tools.javac.util.List<Attribute.Compound> prev=null;
      while (annotations.nonEmpty()) {
        if (isErroneous(annotations.head.type)) {
          if (prev == null) {
            metadata.reset();
            metadata.setDeclarationAttributes(annotations.tail);
          }
 else {
            prev.tail=annotations.tail;
          }
        }
        prev=annotations;
        annotations=annotations.tail;
      }
    }
    private boolean isErroneous(    TypeMirror type){
      return type == null || type.getKind() == TypeKind.ERROR || type.getKind() == TypeKind.NONE || type.getKind() == TypeKind.OTHER;
    }
    private Set<Type> seen=Collections.newSetFromMap(new IdentityHashMap<>());
    private Type error2Object(    Type t){
      if (t == null)       return null;
      if (isErroneous(t)) {
        return syms.objectType;
      }
      if (!seen.add(t))       return t;
switch (t.getKind()) {
case DECLARED:
{
          resolveErrors((ClassType)t);
          break;
        }
case WILDCARD:
{
        Type.WildcardType wt=((Type.WildcardType)t);
        wt.type=error2Object(wt.type);
        TypeVar tv=wt.bound;
        tv.bound=error2Object(tv.bound);
        tv.lower=error2Object(tv.lower);
        break;
      }
  }
  return t;
}
private com.sun.tools.javac.util.List<Type> error2Object(com.sun.tools.javac.util.List<Type> types){
  if (types == null)   return null;
  ListBuffer<Type> lb=new ListBuffer<>();
  boolean changed=false;
  for (  Type t : types) {
    Type nue=error2Object(t);
    changed|=nue != t;
    lb.append(nue);
  }
  return changed ? lb.toList() : types;
}
private void resolveErrors(ClassType ct){
  if (ct.tsym == syms.objectType.tsym)   return;
  ct.all_interfaces_field=error2Object(ct.all_interfaces_field);
  ct.allparams_field=error2Object(ct.allparams_field);
  ct.interfaces_field=error2Object(ct.interfaces_field);
  ct.typarams_field=error2Object(ct.typarams_field);
  ct.supertype_field=error2Object(ct.supertype_field);
}
}
.scan(cut,null);
}","private void dropMethodsAndErrors(com.sun.tools.javac.util.Context ctx,CompilationUnitTree cut){
  Symtab syms=Symtab.instance(ctx);
  Names names=Names.instance(ctx);
  TreeMaker make=TreeMaker.instance(ctx);
  new TreePathScanner<Void,Void>(){
    @Override public Void visitVariable(    VariableTree node,    Void p){
      JCTree.JCVariableDecl decl=(JCTree.JCVariableDecl)node;
      if ((decl.mods.flags & Flags.ENUM) == 0) {
        decl.init=null;
      }
      decl.sym.type=decl.type=error2Object(decl.type);
      clearAnnotations(decl.sym.getMetadata());
      return super.visitVariable(node,p);
    }
    @Override public Void visitMethod(    MethodTree node,    Void p){
      JCTree.JCMethodDecl decl=(JCTree.JCMethodDecl)node;
      Symbol.MethodSymbol msym=decl.sym;
      if (Collections.disjoint(msym.getModifiers(),EnumSet.of(Modifier.NATIVE,Modifier.ABSTRACT))) {
        JCTree.JCNewClass nct=make.NewClass(null,com.sun.tools.javac.util.List.nil(),make.QualIdent(syms.runtimeExceptionType.tsym),com.sun.tools.javac.util.List.of(make.Literal(""String_Node_Str"")),null);
        nct.type=syms.runtimeExceptionType;
        nct.constructor=syms.runtimeExceptionType.tsym.members().getSymbols(s -> s.getKind() == ElementKind.CONSTRUCTOR && s.type.getParameterTypes().size() == 1 && s.type.getParameterTypes().head.tsym == syms.stringType.tsym).iterator().next();
        decl.body=make.Block(0,com.sun.tools.javac.util.List.of(make.Throw(nct)));
      }
      Type.MethodType mt;
      if (msym.type.hasTag(TypeTag.FORALL)) {
        ForAll fa=(ForAll)msym.type;
        fa.tvars=error2Object(fa.tvars);
        mt=fa.asMethodType();
      }
 else {
        mt=(Type.MethodType)msym.type;
      }
      clearMethodType(mt);
      if (msym.erasure_field != null && msym.erasure_field.hasTag(TypeTag.METHOD))       clearMethodType((Type.MethodType)msym.erasure_field);
      clearAnnotations(decl.sym.getMetadata());
      return super.visitMethod(node,p);
    }
    private void clearMethodType(    Type.MethodType mt){
      mt.restype=error2Object(mt.restype);
      mt.argtypes=error2Object(mt.argtypes);
      mt.thrown=error2Object(mt.thrown);
    }
    @Override public Void visitClass(    ClassTree node,    Void p){
      JCClassDecl clazz=(JCTree.JCClassDecl)node;
      Symbol.ClassSymbol csym=clazz.sym;
      Type.ClassType ct=(Type.ClassType)csym.type;
      ct.all_interfaces_field=error2Object(ct.all_interfaces_field);
      ct.allparams_field=error2Object(ct.allparams_field);
      ct.interfaces_field=error2Object(ct.interfaces_field);
      ct.typarams_field=error2Object(ct.typarams_field);
      ct.supertype_field=error2Object(ct.supertype_field);
      clearAnnotations(clazz.sym.getMetadata());
      super.visitClass(node,p);
      for (      JCTree def : clazz.defs) {
        if (def.hasTag(JCTree.Tag.ERRONEOUS)) {
          clazz.defs=com.sun.tools.javac.util.List.filter(clazz.defs,def);
        }
      }
      return null;
    }
    private void clearAnnotations(    SymbolMetadata metadata){
      if (metadata == null)       return;
      com.sun.tools.javac.util.List<Attribute.Compound> annotations=metadata.getDeclarationAttributes();
      com.sun.tools.javac.util.List<Attribute.Compound> prev=null;
      while (annotations.nonEmpty()) {
        if (isErroneous(annotations.head.type)) {
          if (prev == null) {
            metadata.reset();
            metadata.setDeclarationAttributes(annotations.tail);
          }
 else {
            prev.tail=annotations.tail;
          }
        }
        prev=annotations;
        annotations=annotations.tail;
      }
    }
    private boolean isErroneous(    TypeMirror type){
      return type == null || type.getKind() == TypeKind.ERROR || type.getKind() == TypeKind.NONE || type.getKind() == TypeKind.OTHER;
    }
    private Set<Type> seen=Collections.newSetFromMap(new IdentityHashMap<>());
    private Type error2Object(    Type t){
      if (t == null)       return null;
      if (isErroneous(t)) {
        return syms.objectType;
      }
      if (!seen.add(t))       return t;
switch (t.getKind()) {
case DECLARED:
{
          resolveErrors((ClassType)t);
          break;
        }
case WILDCARD:
{
        Type.WildcardType wt=((Type.WildcardType)t);
        wt.type=error2Object(wt.type);
        TypeVar tv=wt.bound;
        tv.bound=error2Object(tv.bound);
        tv.lower=error2Object(tv.lower);
        break;
      }
  }
  return t;
}
private com.sun.tools.javac.util.List<Type> error2Object(com.sun.tools.javac.util.List<Type> types){
  if (types == null)   return null;
  ListBuffer<Type> lb=new ListBuffer<>();
  boolean changed=false;
  for (  Type t : types) {
    Type nue=error2Object(t);
    changed|=nue != t;
    lb.append(nue);
  }
  return changed ? lb.toList() : types;
}
private void resolveErrors(ClassType ct){
  if (ct.tsym == syms.objectType.tsym)   return;
  ct.all_interfaces_field=error2Object(ct.all_interfaces_field);
  ct.allparams_field=error2Object(ct.allparams_field);
  ct.interfaces_field=error2Object(ct.interfaces_field);
  ct.typarams_field=error2Object(ct.typarams_field);
  ct.supertype_field=error2Object(ct.supertype_field);
}
}
.scan(cut,null);
}"
34384,"@Override public Void visitClass(ClassTree node,Void p){
  JCClassDecl clazz=(JCTree.JCClassDecl)node;
  Symbol.ClassSymbol csym=clazz.sym;
  Type.ClassType ct=(Type.ClassType)csym.type;
  ct.all_interfaces_field=error2Object(ct.all_interfaces_field);
  ct.allparams_field=error2Object(ct.allparams_field);
  ct.interfaces_field=error2Object(ct.interfaces_field);
  ct.typarams_field=error2Object(ct.typarams_field);
  ct.supertype_field=error2Object(ct.supertype_field);
  super.visitClass(node,p);
  for (  JCTree def : clazz.defs) {
    if (def.hasTag(JCTree.Tag.ERRONEOUS)) {
      clazz.defs=com.sun.tools.javac.util.List.filter(clazz.defs,def);
    }
  }
  return null;
}","@Override public Void visitClass(ClassTree node,Void p){
  JCClassDecl clazz=(JCTree.JCClassDecl)node;
  Symbol.ClassSymbol csym=clazz.sym;
  Type.ClassType ct=(Type.ClassType)csym.type;
  ct.all_interfaces_field=error2Object(ct.all_interfaces_field);
  ct.allparams_field=error2Object(ct.allparams_field);
  ct.interfaces_field=error2Object(ct.interfaces_field);
  ct.typarams_field=error2Object(ct.typarams_field);
  ct.supertype_field=error2Object(ct.supertype_field);
  clearAnnotations(clazz.sym.getMetadata());
  super.visitClass(node,p);
  for (  JCTree def : clazz.defs) {
    if (def.hasTag(JCTree.Tag.ERRONEOUS)) {
      clazz.defs=com.sun.tools.javac.util.List.filter(clazz.defs,def);
    }
  }
  return null;
}"
34385,"@Override public Void visitMethod(MethodTree node,Void p){
  JCTree.JCMethodDecl decl=(JCTree.JCMethodDecl)node;
  Symbol.MethodSymbol msym=decl.sym;
  if (Collections.disjoint(msym.getModifiers(),EnumSet.of(Modifier.NATIVE,Modifier.ABSTRACT))) {
    JCTree.JCNewClass nct=make.NewClass(null,com.sun.tools.javac.util.List.nil(),make.QualIdent(syms.runtimeExceptionType.tsym),com.sun.tools.javac.util.List.of(make.Literal(""String_Node_Str"")),null);
    nct.type=syms.runtimeExceptionType;
    nct.constructor=syms.runtimeExceptionType.tsym.members().getSymbols(s -> s.getKind() == ElementKind.CONSTRUCTOR && s.type.getParameterTypes().size() == 1 && s.type.getParameterTypes().head.tsym == syms.stringType.tsym).iterator().next();
    decl.body=make.Block(0,com.sun.tools.javac.util.List.of(make.Throw(nct)));
  }
  Type.MethodType mt;
  if (msym.type.hasTag(TypeTag.FORALL)) {
    ForAll fa=(ForAll)msym.type;
    fa.tvars=error2Object(fa.tvars);
    mt=fa.asMethodType();
  }
 else {
    mt=(Type.MethodType)msym.type;
  }
  mt.restype=error2Object(mt.restype);
  mt.argtypes=error2Object(mt.argtypes);
  mt.thrown=error2Object(mt.thrown);
  clearAnnotations(decl.sym.getMetadata());
  return super.visitMethod(node,p);
}","@Override public Void visitMethod(MethodTree node,Void p){
  JCTree.JCMethodDecl decl=(JCTree.JCMethodDecl)node;
  Symbol.MethodSymbol msym=decl.sym;
  if (Collections.disjoint(msym.getModifiers(),EnumSet.of(Modifier.NATIVE,Modifier.ABSTRACT))) {
    JCTree.JCNewClass nct=make.NewClass(null,com.sun.tools.javac.util.List.nil(),make.QualIdent(syms.runtimeExceptionType.tsym),com.sun.tools.javac.util.List.of(make.Literal(""String_Node_Str"")),null);
    nct.type=syms.runtimeExceptionType;
    nct.constructor=syms.runtimeExceptionType.tsym.members().getSymbols(s -> s.getKind() == ElementKind.CONSTRUCTOR && s.type.getParameterTypes().size() == 1 && s.type.getParameterTypes().head.tsym == syms.stringType.tsym).iterator().next();
    decl.body=make.Block(0,com.sun.tools.javac.util.List.of(make.Throw(nct)));
  }
  Type.MethodType mt;
  if (msym.type.hasTag(TypeTag.FORALL)) {
    ForAll fa=(ForAll)msym.type;
    fa.tvars=error2Object(fa.tvars);
    mt=fa.asMethodType();
  }
 else {
    mt=(Type.MethodType)msym.type;
  }
  clearMethodType(mt);
  if (msym.erasure_field != null && msym.erasure_field.hasTag(TypeTag.METHOD))   clearMethodType((Type.MethodType)msym.erasure_field);
  clearAnnotations(decl.sym.getMetadata());
  return super.visitMethod(node,p);
}"
34386,"public void testIfMissingObjectOnBootCPUseCPToGuessSourceLevelWithStringBuilder() throws Exception {
  Source ret=guessSourceLevel(false,true,false);
  assertEquals(""String_Node_Str"",Source.JDK1_7,ret);
}","public void testIfMissingObjectOnBootCPUseCPToGuessSourceLevelWithStringBuilder() throws Exception {
  Source ret=guessSourceLevel(false,true,false);
  assertEquals(""String_Node_Str"",SourceLevelUtils.JDK1_7,ret);
}"
34387,"public void testIfMissingObjectOnBootCPUseCPToGuessSourceLevelWithStringBuilderAndAutoCloseable() throws Exception {
  Source ret=guessSourceLevel(false,true,true);
  assertEquals(""String_Node_Str"",Source.JDK1_7,ret);
}","public void testIfMissingObjectOnBootCPUseCPToGuessSourceLevelWithStringBuilderAndAutoCloseable() throws Exception {
  Source ret=guessSourceLevel(false,true,true);
  assertEquals(""String_Node_Str"",SourceLevelUtils.JDK1_7,ret);
}"
34388,"public void testGetJavaFileForInput(){
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,Source.JDK1_8,false,true);
  JavaFileObject res=fm.getJavaFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,Source.JDK1_8,false,true);
  res=fm.getJavaFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,Source.JDK1_9,false,true);
  res=fm.getJavaFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,Source.JDK1_9,false,true);
  res=fm.getJavaFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}","public void testGetJavaFileForInput(){
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,SourceLevelUtils.JDK1_8,false,true);
  JavaFileObject res=fm.getJavaFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,SourceLevelUtils.JDK1_8,false,true);
  res=fm.getJavaFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,SourceLevelUtils.JDK1_9,false,true);
  res=fm.getJavaFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,SourceLevelUtils.JDK1_9,false,true);
  res=fm.getJavaFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}"
34389,"public void testHidesForeignPackage() throws IOException {
  final File wd=FileUtil.normalizeFile(getWorkDir());
  final Collection<Pair<String,Collection<Integer>>> spec=new ArrayList<>();
  spec.add(clz(""String_Node_Str"",0,9));
  spec.add(clz(""String_Node_Str"",0));
  spec.add(clz(""String_Node_Str"",9));
  final File badJar=createMultiReleaseJar(new File(wd,""String_Node_Str""),true,spec);
  final ClassPath cp=ClassPathSupport.createClassPath(FileUtil.urlForArchiveOrDir(badJar));
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),cp,Source.JDK1_8,false,true);
  Iterable<JavaFileObject> res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),cp,Source.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}","public void testHidesForeignPackage() throws IOException {
  final File wd=FileUtil.normalizeFile(getWorkDir());
  final Collection<Pair<String,Collection<Integer>>> spec=new ArrayList<>();
  spec.add(clz(""String_Node_Str"",0,9));
  spec.add(clz(""String_Node_Str"",0));
  spec.add(clz(""String_Node_Str"",9));
  final File badJar=createMultiReleaseJar(new File(wd,""String_Node_Str""),true,spec);
  final ClassPath cp=ClassPathSupport.createClassPath(FileUtil.urlForArchiveOrDir(badJar));
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),cp,SourceLevelUtils.JDK1_8,false,true);
  Iterable<JavaFileObject> res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),cp,SourceLevelUtils.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}"
34390,"public void testGetFileForOutput() throws IOException {
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,null,Source.JDK1_8,false,true);
  JavaFileObject res=(JavaFileObject)fm.getFileForOutput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,null,Source.JDK1_8,false,true);
  res=(JavaFileObject)fm.getFileForOutput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,null,Source.JDK1_9,false,true);
  res=(JavaFileObject)fm.getFileForOutput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,null,Source.JDK1_9,false,true);
  res=(JavaFileObject)fm.getFileForOutput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}","public void testGetFileForOutput() throws IOException {
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,null,SourceLevelUtils.JDK1_8,false,true);
  JavaFileObject res=(JavaFileObject)fm.getFileForOutput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,null,SourceLevelUtils.JDK1_8,false,true);
  res=(JavaFileObject)fm.getFileForOutput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,null,SourceLevelUtils.JDK1_9,false,true);
  res=(JavaFileObject)fm.getFileForOutput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,null,SourceLevelUtils.JDK1_9,false,true);
  res=(JavaFileObject)fm.getFileForOutput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"",null);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}"
34391,"public void testGetFileForInput(){
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,Source.JDK1_8,false,true);
  JavaFileObject res=(JavaFileObject)fm.getFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,Source.JDK1_8,false,true);
  res=(JavaFileObject)fm.getFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,Source.JDK1_9,false,true);
  res=(JavaFileObject)fm.getFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,Source.JDK1_9,false,true);
  res=(JavaFileObject)fm.getFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}","public void testGetFileForInput(){
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,SourceLevelUtils.JDK1_8,false,true);
  JavaFileObject res=(JavaFileObject)fm.getFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,SourceLevelUtils.JDK1_8,false,true);
  res=(JavaFileObject)fm.getFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,SourceLevelUtils.JDK1_9,false,true);
  res=(JavaFileObject)fm.getFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,SourceLevelUtils.JDK1_9,false,true);
  res=(JavaFileObject)fm.getFileForInput(StandardLocation.CLASS_PATH,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}"
34392,"public void testListRecursive(){
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,Source.JDK1_8,false,true);
  Iterable<JavaFileObject> res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,Source.JDK1_8,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,Source.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,Source.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}","public void testListRecursive(){
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,SourceLevelUtils.JDK1_8,false,true);
  Iterable<JavaFileObject> res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,SourceLevelUtils.JDK1_8,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,SourceLevelUtils.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,SourceLevelUtils.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}"
34393,"public void testList(){
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,Source.JDK1_8,false,true);
  Iterable<JavaFileObject> res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,Source.JDK1_8,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,Source.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,Source.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}","public void testList(){
  CachingFileManager fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,SourceLevelUtils.JDK1_8,false,true);
  Iterable<JavaFileObject> res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,SourceLevelUtils.JDK1_8,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),bCp,SourceLevelUtils.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new CachingFileManager(CachingArchiveProvider.getDefault(),mvCp,SourceLevelUtils.JDK1_9,false,true);
  res=fm.list(StandardLocation.CLASS_PATH,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}"
34394,"public void testList() throws IOException {
  ModuleFileManager fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),bCp,(u) -> Collections.singleton(u),Source.JDK1_9,StandardLocation.MODULE_PATH,false);
  JavaFileManager.Location l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  Iterable<JavaFileObject> res=fm.list(l,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),mvCp,(u) -> Collections.singleton(u),Source.JDK1_9,StandardLocation.MODULE_PATH,false);
  l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  res=fm.list(l,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}","public void testList() throws IOException {
  ModuleFileManager fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),bCp,(u) -> Collections.singleton(u),SourceLevelUtils.JDK1_9,StandardLocation.MODULE_PATH,false);
  JavaFileManager.Location l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  Iterable<JavaFileObject> res=fm.list(l,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),mvCp,(u) -> Collections.singleton(u),SourceLevelUtils.JDK1_9,StandardLocation.MODULE_PATH,false);
  l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  res=fm.list(l,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),false);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}"
34395,"public void testGetJavaFileForInput() throws IOException {
  ModuleFileManager fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),bCp,(u) -> Collections.singleton(u),Source.JDK1_9,StandardLocation.MODULE_PATH,false);
  JavaFileManager.Location l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  JavaFileObject res=fm.getJavaFileForInput(l,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),mvCp,(u) -> Collections.singleton(u),Source.JDK1_9,StandardLocation.MODULE_PATH,false);
  l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  res=fm.getJavaFileForInput(l,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}","public void testGetJavaFileForInput() throws IOException {
  ModuleFileManager fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),bCp,(u) -> Collections.singleton(u),SourceLevelUtils.JDK1_9,StandardLocation.MODULE_PATH,false);
  JavaFileManager.Location l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  JavaFileObject res=fm.getJavaFileForInput(l,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),mvCp,(u) -> Collections.singleton(u),SourceLevelUtils.JDK1_9,StandardLocation.MODULE_PATH,false);
  l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  res=fm.getJavaFileForInput(l,""String_Node_Str"",JavaFileObject.Kind.CLASS);
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}"
34396,"public void testGetFileForInput() throws IOException {
  ModuleFileManager fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),bCp,(u) -> Collections.singleton(u),Source.JDK1_9,StandardLocation.MODULE_PATH,false);
  JavaFileManager.Location l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  JavaFileObject res=(JavaFileObject)fm.getFileForInput(l,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),mvCp,(u) -> Collections.singleton(u),Source.JDK1_9,StandardLocation.MODULE_PATH,false);
  l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  res=(JavaFileObject)fm.getFileForInput(l,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}","public void testGetFileForInput() throws IOException {
  ModuleFileManager fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),bCp,(u) -> Collections.singleton(u),SourceLevelUtils.JDK1_9,StandardLocation.MODULE_PATH,false);
  JavaFileManager.Location l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  JavaFileObject res=(JavaFileObject)fm.getFileForInput(l,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
  fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),mvCp,(u) -> Collections.singleton(u),SourceLevelUtils.JDK1_9,StandardLocation.MODULE_PATH,false);
  l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  res=(JavaFileObject)fm.getFileForInput(l,""String_Node_Str"",""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),toContent(Collections.<JavaFileObject>singleton(res)));
  assertEquals(Arrays.asList(""String_Node_Str""),toInferedName(fm,Collections.<JavaFileObject>singleton(res)));
}"
34397,"public void testListRecursive() throws IOException {
  ModuleFileManager fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),bCp,(u) -> Collections.singleton(u),Source.JDK1_9,StandardLocation.MODULE_PATH,false);
  JavaFileManager.Location l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  Iterable<JavaFileObject> res=fm.list(l,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),mvCp,(u) -> Collections.singleton(u),Source.JDK1_9,StandardLocation.MODULE_PATH,false);
  l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  res=fm.list(l,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}","public void testListRecursive() throws IOException {
  ModuleFileManager fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),bCp,(u) -> Collections.singleton(u),SourceLevelUtils.JDK1_9,StandardLocation.MODULE_PATH,false);
  JavaFileManager.Location l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  Iterable<JavaFileObject> res=fm.list(l,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
  fm=new ModuleFileManager(CachingArchiveProvider.getDefault(),mvCp,(u) -> Collections.singleton(u),SourceLevelUtils.JDK1_9,StandardLocation.MODULE_PATH,false);
  l=StreamSupport.stream(fm.listLocationsForModules(StandardLocation.MODULE_PATH).spliterator(),true).flatMap((s) -> s.stream()).findFirst().orElse(null);
  assertNotNull(l);
  res=fm.list(l,""String_Node_Str"",EnumSet.of(JavaFileObject.Kind.CLASS),true);
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toContent(res));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),toInferedName(fm,res));
}"
34398,"private void setupUndoRedoShortcut(boolean undo,Action ourAction){
  KeyStroke ks=null;
  FileObject undoRedoFO=FileUtil.getConfigFile(undo ? ""String_Node_Str"" : ""String_Node_Str"");
  if (undoRedoFO != null) {
    ContextAwareAction undoRedoAction=SystemAction.get(undo ? org.openide.actions.UndoAction.class : org.openide.actions.RedoAction.class);
    Action a=undoRedoAction.createContextAwareInstance(Lookup.EMPTY);
    AcceleratorBinding.setAccelerator(a,undoRedoFO);
    Object ksObj=a.getValue(Action.ACCELERATOR_KEY);
    if (ksObj instanceof KeyStroke) {
      ks=(KeyStroke)ksObj;
    }
  }
  if (ks == null) {
    ks=Utilities.stringToKey(undo ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  String actionId=ourAction.getClass().getName();
  getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(ks,actionId);
  getActionMap().put(actionId,ourAction);
}","private void setupUndoRedoShortcut(boolean undo,Action ourAction){
  KeyStroke ks=null;
  FileObject undoRedoFO=FileUtil.getConfigFile(undo ? ""String_Node_Str"" : ""String_Node_Str"");
  if (undoRedoFO != null) {
    Class<? extends SystemAction> undoClass=undo ? org.openide.actions.UndoAction.class : org.openide.actions.RedoAction.class;
    ContextAwareAction undoRedoAction=(ContextAwareAction)SystemAction.get(undoClass);
    Action a=undoRedoAction.createContextAwareInstance(Lookup.EMPTY);
    AcceleratorBinding.setAccelerator(a,undoRedoFO);
    Object ksObj=a.getValue(Action.ACCELERATOR_KEY);
    if (ksObj instanceof KeyStroke) {
      ks=(KeyStroke)ksObj;
    }
  }
  if (ks == null) {
    ks=Utilities.stringToKey(undo ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  String actionId=ourAction.getClass().getName();
  getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(ks,actionId);
  getActionMap().put(actionId,ourAction);
}"
34399,"@Override public void handleQuitRequestWith(AppEvent.QuitEvent e,QuitResponse response){
  handleQuit();
}","@Override public void handleQuitRequestWith(AppEvent.QuitEvent e,QuitResponse response){
  handleQuit();
  response.cancelQuit();
}"
34400,"@Override public void handleQuitRequestWith(QuitEvent e,QuitResponse response){
  handleQuit();
}","@Override public void handleQuitRequestWith(QuitEvent e,QuitResponse response){
  handleQuit();
  response.cancelQuit();
}"
34401,"public void actionPerformed(final ActionEvent evt,final JTextComponent target){
  try {
    final Rectangle carretRectangle=target.modelToView(target.getCaretPosition());
    final Font font=target.getFont();
    final Point where=new Point(carretRectangle.x,carretRectangle.y + carretRectangle.height);
    SwingUtilities.convertPointToScreen(where,target);
    final int position=target.getCaretPosition();
    final String ident=Utilities.getIdentifier(Utilities.getDocument(target),position);
    FileObject file=getFile(target.getDocument());
    if (ident == null || file == null) {
      Toolkit.getDefaultToolkit().beep();
      return;
    }
    final JavaSource js=JavaSource.forFileObject(file);
    if (js == null) {
      Toolkit.getDefaultToolkit().beep();
      return;
    }
    final AtomicBoolean cancel=new AtomicBoolean();
    final Task<CompilationController> task=new Task<CompilationController>(){
      public void run(      final CompilationController parameter) throws IOException {
        parameter.toPhase(Phase.RESOLVED);
        if (cancel.get()) {
          return;
        }
        final JavaSource javaSource=parameter.getJavaSource();
        Pair<Map<String,List<Element>>,Map<String,List<Element>>> result=new ComputeImports(parameter).computeCandidates(Collections.singleton(ident));
        final List<TypeElement> priviledged=ElementFilter.typesIn(result.a.get(ident));
        if (priviledged == null) {
          Toolkit.getDefaultToolkit().beep();
          return;
        }
        final List<TypeElement> denied=new ArrayList<TypeElement>(ElementFilter.typesIn(result.b.get(ident)));
        denied.removeAll(priviledged);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            ImportClassPanel panel=new ImportClassPanel(priviledged,denied,font,javaSource,position,target);
            PopupUtil.showPopup(panel,""String_Node_Str"",where.x,where.y,true,carretRectangle.height);
          }
        }
);
      }
    }
;
    ProgressUtils.runOffEventDispatchThread(new Runnable(){
      public void run(){
        try {
          js.runUserActionTask(task,true);
        }
 catch (        IOException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    }
,NbBundle.getMessage(FastImportAction.class,""String_Node_Str""),cancel,false);
  }
 catch (  BadLocationException ex) {
    Exceptions.printStackTrace(ex);
  }
}","public void actionPerformed(final ActionEvent evt,final JTextComponent target){
  try {
    final Rectangle carretRectangle=target.modelToView(target.getCaretPosition());
    final Font font=target.getFont();
    final Point where=new Point(carretRectangle.x,carretRectangle.y + carretRectangle.height);
    SwingUtilities.convertPointToScreen(where,target);
    final int position=target.getCaretPosition();
    final String ident=Utilities.getIdentifier(Utilities.getDocument(target),position);
    FileObject file=getFile(target.getDocument());
    if (ident == null || file == null) {
      Toolkit.getDefaultToolkit().beep();
      return;
    }
    final JavaSource js=JavaSource.forFileObject(file);
    if (js == null) {
      Toolkit.getDefaultToolkit().beep();
      return;
    }
    final AtomicBoolean cancel=new AtomicBoolean();
    final Task<CompilationController> task=new Task<CompilationController>(){
      public void run(      final CompilationController parameter) throws IOException {
        parameter.toPhase(Phase.RESOLVED);
        if (cancel.get()) {
          return;
        }
        final JavaSource javaSource=parameter.getJavaSource();
        Pair<Map<String,List<Element>>,Map<String,List<Element>>> result=new ComputeImports(parameter).computeCandidates(Collections.singleton(ident));
        List<Element> candidates=result.a.get(ident);
        if (candidates == null) {
          Toolkit.getDefaultToolkit().beep();
          return;
        }
        final List<TypeElement> priviledged=ElementFilter.typesIn(candidates);
        if (priviledged == null) {
          Toolkit.getDefaultToolkit().beep();
          return;
        }
        final List<TypeElement> denied=new ArrayList<TypeElement>(ElementFilter.typesIn(result.b.get(ident)));
        denied.removeAll(priviledged);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            ImportClassPanel panel=new ImportClassPanel(priviledged,denied,font,javaSource,position,target);
            PopupUtil.showPopup(panel,""String_Node_Str"",where.x,where.y,true,carretRectangle.height);
          }
        }
);
      }
    }
;
    ProgressUtils.runOffEventDispatchThread(new Runnable(){
      public void run(){
        try {
          js.runUserActionTask(task,true);
        }
 catch (        IOException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    }
,NbBundle.getMessage(FastImportAction.class,""String_Node_Str""),cancel,false);
  }
 catch (  BadLocationException ex) {
    Exceptions.printStackTrace(ex);
  }
}"
34402,"@NonNull JavaFileManager[] getFileManagers(@NonNull Location location,@NullAllowed String hint){
  if (ModuleLocation.isInstance(location)) {
    location=ModuleLocation.cast(location).getBaseLocation();
  }
  if (location == ALL) {
    if (TreeLoaderOutputFileManager.OUTPUT_ROOT.equals(hint)) {
      createTreeLoaderFileManager();
    }
    if (JavacParser.OPTION_PATCH_MODULE.equals(hint)) {
      createPatchFileManager();
      createModuleSrcFileManager();
    }
    final List<JavaFileManager> res=new ArrayList<>(emitted.length);
    for (    JavaFileManager jfm : emitted) {
      if (jfm != null) {
        res.add(jfm);
      }
    }
    return res.toArray(new JavaFileManager[res.size()]);
  }
 else {
    final Entry result=fileManagers.get(location);
    return result == null ? EMPTY : result.get();
  }
}","@NonNull JavaFileManager[] getFileManagers(@NonNull Location location,@NullAllowed String hint){
  if (ModuleLocation.isInstance(location)) {
    location=ModuleLocation.cast(location).getBaseLocation();
  }
  if (location == ALL) {
    if (TreeLoaderOutputFileManager.OUTPUT_ROOT.equals(hint)) {
      createTreeLoaderFileManager();
    }
    if (JavacParser.OPTION_PATCH_MODULE.equals(hint)) {
      createPatchFileManager();
      createModuleSrcFileManager();
    }
    if (OutputFileManager.OPTION_SET_CURRENT_ROOT.equals(hint)) {
      createOutputFileManager();
    }
    final List<JavaFileManager> res=new ArrayList<>(emitted.length);
    for (    JavaFileManager jfm : emitted) {
      if (jfm != null) {
        res.add(jfm);
      }
    }
    return res.toArray(new JavaFileManager[res.size()]);
  }
 else {
    final Entry result=fileManagers.get(location);
    return result == null ? EMPTY : result.get();
  }
}"
34403,"public void testTemplateWizardCopiesItsPropertiesToMapForOverridenEntryOnMoreEntries() throws Exception {
  LocalFileSystem fs=new LocalFileSystem();
  fs.setRootDirectory(getWorkDir());
  FileObject root=fs.getRoot();
  FileObject fo=FileUtil.createData(root,""String_Node_Str"");
  FileObject fo2=FileUtil.createData(root,""String_Node_Str"");
  fo.setAttribute(ScriptingCreateFromTemplateHandler.SCRIPT_ENGINE_ATTR,""String_Node_Str"");
  fo2.setAttribute(ScriptingCreateFromTemplateHandler.SCRIPT_ENGINE_ATTR,""String_Node_Str"");
  Charset set=Charset.forName(""String_Node_Str"");
  OutputStream os=fo2.getOutputStream();
  OutputStreamWriter w=new OutputStreamWriter(os,set);
  String txt=""String_Node_Str"";
  w.write(txt);
  w.close();
  DataObject obj=DataObject.find(fo);
  assertEquals(TwoPartObject.class,obj.getClass());
  TwoPartObject tpo=(TwoPartObject)obj;
  tpo.encoding=set;
  FileObject root2=FileUtil.createMemoryFileSystem().getRoot();
  DataFolder folder=DataFolder.findFolder(FileUtil.createFolder(root2,""String_Node_Str""));
  Map<String,String> parameters=Collections.singletonMap(""String_Node_Str"",""String_Node_Str"");
  FEQI.fs=root2.getFileSystem();
  FEQI.result=Charset.forName(""String_Node_Str"");
  DataObject n=obj.createFromTemplate(folder,""String_Node_Str"",parameters);
  Integer cnt=TwoPartLoader.queried.get(n.getPrimaryFile());
  assertEquals(""String_Node_Str"",null,cnt);
  assertEquals(""String_Node_Str"",folder,n.getFolder());
  assertEquals(""String_Node_Str"",""String_Node_Str"",n.getName());
  Iterator<FileObject> it=n.files().iterator();
  it.next();
  FileObject snd=it.next();
  long length=snd.getSize();
  if (length <= 0) {
    fail(""String_Node_Str"" + length + ""String_Node_Str""+ snd);
  }
  InputStream is=snd.getInputStream();
  InputStreamReader r=new InputStreamReader(is,""String_Node_Str"");
  char[] cbuf=new char[1024];
  int len=r.read(cbuf);
  if (len == -1) {
    fail(""String_Node_Str"" + snd);
  }
  String read=new String(cbuf,0,len);
  txt=txt.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"") + '\n';
  assertEquals(txt,read);
}","public void testTemplateWizardCopiesItsPropertiesToMapForOverridenEntryOnMoreEntries() throws Exception {
  LocalFileSystem fs=new LocalFileSystem();
  fs.setRootDirectory(getWorkDir());
  FileObject root=fs.getRoot();
  FileObject fo=FileUtil.createData(root,""String_Node_Str"");
  FileObject fo2=FileUtil.createData(root,""String_Node_Str"");
  fo.setAttribute(ScriptingCreateFromTemplateHandler.SCRIPT_ENGINE_ATTR,""String_Node_Str"");
  fo2.setAttribute(ScriptingCreateFromTemplateHandler.SCRIPT_ENGINE_ATTR,""String_Node_Str"");
  Charset set=Charset.forName(""String_Node_Str"");
  OutputStream os=fo2.getOutputStream();
  OutputStreamWriter w=new OutputStreamWriter(os,set);
  String txt=""String_Node_Str"";
  w.write(txt);
  w.close();
  DataObject obj=DataObject.find(fo);
  assertEquals(TwoPartObject.class,obj.getClass());
  TwoPartObject tpo=(TwoPartObject)obj;
  tpo.encoding=set;
  FileObject root2=FileUtil.createMemoryFileSystem().getRoot();
  DataFolder folder=DataFolder.findFolder(FileUtil.createFolder(root2,""String_Node_Str""));
  Map<String,String> parameters=Collections.singletonMap(""String_Node_Str"",""String_Node_Str"");
  FEQI.fs=root2.getFileSystem();
  FEQI.result=Charset.forName(""String_Node_Str"");
  DataObject n=obj.createFromTemplate(folder,""String_Node_Str"",parameters);
  Integer cnt=TwoPartLoader.queried.get(n.getPrimaryFile());
  assertEquals(""String_Node_Str"",null,cnt);
  assertEquals(""String_Node_Str"",folder,n.getFolder());
  assertEquals(""String_Node_Str"",""String_Node_Str"",n.getName());
  Iterator<FileObject> it=n.files().iterator();
  it.next();
  FileObject snd=it.next();
  long length=snd.getSize();
  if (length <= 0) {
    fail(""String_Node_Str"" + length + ""String_Node_Str""+ snd);
  }
  InputStream is=snd.getInputStream();
  InputStreamReader r=new InputStreamReader(is,""String_Node_Str"");
  char[] cbuf=new char[1024];
  int len=r.read(cbuf);
  if (len == -1) {
    fail(""String_Node_Str"" + snd);
  }
  String read=new String(cbuf,0,len);
  String normRead=read.replace(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  txt=txt.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  assertEquals(txt,normRead);
}"
34404,"private static String readFile(FileObject fo) throws IOException {
  byte[] arr=new byte[(int)fo.getSize()];
  int len=fo.getInputStream().read(arr);
  assertEquals(""String_Node_Str"",arr.length,len);
  return new String(arr);
}","private static String readFile(FileObject fo) throws IOException {
  byte[] arr=new byte[(int)fo.getSize()];
  int len=fo.getInputStream().read(arr);
  assertEquals(""String_Node_Str"",arr.length,len);
  String foRead=new String(arr).replace(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  return foRead;
}"
34405,"private int getNewIndent(int startOffset,int endOffset) throws BadLocationException {
  LinkedList<? extends Tree> path=getPath(startOffset);
  if (path.isEmpty()) {
    return 0;
  }
  Tree last=path.getFirst();
  int lastPos=getStartPosition(last);
  int currentIndent=getCurrentIndent(last,path);
switch (last.getKind()) {
case COMPILATION_UNIT:
    break;
case MODULE:
  TokenSequence<JavaTokenId> token=findFirstNonWhitespaceToken(startOffset,endOffset);
JavaTokenId nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId != null && nextTokenId == JavaTokenId.RBRACE) {
if (isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (cs.getModuleDeclBracePlacement()) {
case NEW_LINE_INDENTED:
    currentIndent+=cs.getIndentSize();
  break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
}
 else {
Tree t=null;
for (Tree member : ((ModuleTree)last).getDirectives()) {
if (sp.getEndPosition(cut,member) > startOffset) {
break;
}
t=member;
}
if (t != null) {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? currentIndent + (cs.indentTopLevelClassMembers() ? cs.getIndentSize() : 0) : i;
}
 else {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
JavaTokenId prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId != null) {
switch (prevTokenId) {
case LBRACE:
currentIndent+=cs.indentTopLevelClassMembers() ? cs.getIndentSize() : 0;
break;
case IDENTIFIER:
if (nextTokenId != null && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getModuleDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else {
currentIndent+=cs.getContinuationIndentSize();
}
break;
default :
currentIndent+=cs.getContinuationIndentSize();
}
}
}
}
break;
case CLASS:
case INTERFACE:
case ENUM:
case ANNOTATION_TYPE:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId != null && nextTokenId == JavaTokenId.RBRACE) {
if (isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (cs.getClassDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
}
 else {
Tree t=null;
for (Tree member : ((ClassTree)last).getMembers()) {
if (getEndPosition(member) > startOffset) {
break;
}
t=member;
}
if (t != null) {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? currentIndent + (cs.indentTopLevelClassMembers() ? cs.getIndentSize() : 0) : i;
}
 else {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
JavaTokenId prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId != null) {
switch (prevTokenId) {
case LBRACE:
if (path.get(1).getKind() == Kind.NEW_CLASS && isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (cs.getClassDeclBracePlacement()) {
case SAME_LINE:
case NEW_LINE:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() - cs.getIndentSize() / 2);
break;
}
}
 else {
currentIndent+=cs.indentTopLevelClassMembers() ? cs.getIndentSize() : 0;
}
break;
case COMMA:
currentIndent=getMultilineIndent(((ClassTree)last).getImplementsClause(),path,token.offset(),currentIndent,cs.alignMultilineImplements(),true);
break;
case IDENTIFIER:
case GT:
case GTGT:
case GTGTGT:
if (nextTokenId != null && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getClassDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else {
currentIndent+=cs.getContinuationIndentSize();
}
break;
default :
currentIndent+=cs.getContinuationIndentSize();
}
}
}
}
break;
case METHOD:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
JavaTokenId prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId != null) {
switch (prevTokenId) {
case COMMA:
List<? extends ExpressionTree> thrws=((MethodTree)last).getThrows();
if (!thrws.isEmpty() && getStartPosition(thrws.get(0)) < token.offset()) {
currentIndent=getMultilineIndent(thrws,path,token.offset(),currentIndent,cs.alignMultilineThrows(),true);
}
 else {
currentIndent=getMultilineIndent(((MethodTree)last).getParameters(),path,token.offset(),currentIndent,cs.alignMultilineMethodParams(),true);
}
break;
case RPAREN:
case IDENTIFIER:
case GT:
case GTGT:
case GTGTGT:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token != null && token.token().id() == JavaTokenId.LBRACE) {
switch (cs.getMethodDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
break;
}
default :
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || token.token().id() != JavaTokenId.RPAREN) {
currentIndent+=cs.getContinuationIndentSize();
}
}
}
break;
case VARIABLE:
Tree type=((VariableTree)last).getType();
if (type != null && type.getKind() != Kind.ERRONEOUS) {
ExpressionTree init=((VariableTree)last).getInitializer();
if (init == null || init.getKind() != Kind.NEW_ARRAY || (token=findFirstNonWhitespaceToken(startOffset,lastPos)) == null || token.token().id() != JavaTokenId.EQ || (token=findFirstNonWhitespaceToken(startOffset,endOffset)) == null || token.token().id() != JavaTokenId.LBRACE) {
if (cs.alignMultilineAssignment()) {
int c=getColumn(last);
if (c >= 0) {
currentIndent=c;
}
}
 else {
currentIndent+=cs.getContinuationIndentSize();
}
}
 else {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
break;
}
 else {
last=((VariableTree)last).getModifiers();
if (last == null) break;
}
case MODIFIERS:
Tree t=null;
for (Tree ann : ((ModifiersTree)last).getAnnotations()) {
if (getEndPosition(ann) > startOffset) {
break;
}
t=ann;
}
if (t == null || findFirstNonWhitespaceToken(startOffset,getEndPosition(t)) != null) {
currentIndent+=cs.getContinuationIndentSize();
}
break;
case DO_WHILE_LOOP:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && !EnumSet.of(JavaTokenId.RBRACE,JavaTokenId.SEMICOLON).contains(token.token().id())) {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.DO),lastPos,currentIndent);
}
break;
case ENHANCED_FOR_LOOP:
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),getEndPosition(((EnhancedForLoopTree)last).getExpression()),currentIndent);
break;
case FOR_LOOP:
LinkedList<Tree> forTrees=new LinkedList<Tree>();
for (StatementTree st : ((ForLoopTree)last).getInitializer()) {
if (getEndPosition(st) > startOffset) {
break;
}
forTrees.add(st);
}
t=((ForLoopTree)last).getCondition();
if (t != null && getEndPosition(t) <= startOffset) {
forTrees.add(t);
}
for (ExpressionStatementTree est : ((ForLoopTree)last).getUpdate()) {
if (getEndPosition(est) > startOffset) {
break;
}
forTrees.add(est);
}
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.SEMICOLON) {
currentIndent=getMultilineIndent(forTrees,path,token.offset(),currentIndent,cs.alignMultilineFor(),true);
}
 else {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),forTrees.isEmpty() ? lastPos : getEndPosition(forTrees.getLast()),currentIndent);
}
break;
case IF:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || token.token().id() != JavaTokenId.ELSE) {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && !EnumSet.of(JavaTokenId.RBRACE,JavaTokenId.SEMICOLON).contains(token.token().id())) {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN,JavaTokenId.ELSE),getEndPosition(((IfTree)last).getCondition()) - 1,currentIndent);
}
}
break;
case SYNCHRONIZED:
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),getEndPosition(((SynchronizedTree)last).getExpression()) - 1,currentIndent);
break;
case TRY:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || !EnumSet.of(JavaTokenId.CATCH,JavaTokenId.FINALLY).contains(token.token().id())) {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() != JavaTokenId.RBRACE) {
t=null;
for (Tree res : ((TryTree)last).getResources()) {
if (getEndPosition(res) > startOffset) {
break;
}
t=res;
}
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.TRY,JavaTokenId.RPAREN,JavaTokenId.FINALLY),t != null ? getEndPosition(t) : lastPos,currentIndent);
}
}
break;
case CATCH:
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),lastPos,currentIndent);
break;
case WHILE_LOOP:
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),getEndPosition(((WhileLoopTree)last).getCondition()) - 1,currentIndent);
break;
case BLOCK:
boolean isStatic=((BlockTree)last).isStatic();
if (isStatic) {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.STATIC && token.offset() == lastPos) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
break;
}
}
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId == null || nextTokenId != JavaTokenId.RBRACE) {
token=findFirstOtherToken(startOffset,lastPos + 1,EnumSet.of(JavaTokenId.WHITESPACE));
int prevTokenLineStartOffset=token != null ? context.lineStartOffset(token.offset()) : -1;
t=null;
boolean isNextLabeledStatement=false;
Iterator<? extends StatementTree> it=((BlockTree)last).getStatements().iterator();
while (it.hasNext()) {
StatementTree st=it.next();
if (getEndPosition(st) > startOffset) {
isNextLabeledStatement=st.getKind() == Kind.LABELED_STATEMENT;
break;
}
t=st;
}
if (isNextLabeledStatement && cs.absoluteLabelIndent()) {
currentIndent=0;
}
 else if (t != null) {
int i=-1;
if (getEndPosition(t) < prevTokenLineStartOffset) {
Integer newIndent=newIndents.get(prevTokenLineStartOffset);
i=newIndent != null ? newIndent : context.lineIndent(prevTokenLineStartOffset);
}
 else {
i=getCurrentIndent(t,path);
}
currentIndent=i < 0 ? currentIndent + cs.getIndentSize() : i;
}
 else if (isStatic) {
currentIndent+=cs.getIndentSize();
}
 else if (isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (path.get(1).getKind() == Kind.METHOD ? cs.getMethodDeclBracePlacement() : cs.getOtherBracePlacement()) {
case SAME_LINE:
case NEW_LINE:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() - cs.getIndentSize() / 2);
break;
}
}
 else if (prevTokenLineStartOffset >= 0 && prevTokenLineStartOffset > context.lineStartOffset(lastPos)) {
Integer newIndent=newIndents.get(prevTokenLineStartOffset);
currentIndent=newIndent != null ? newIndent : context.lineIndent(prevTokenLineStartOffset);
}
 else {
int i=path.size() > 1 ? getCurrentIndent(path.get(1),path) : -1;
currentIndent=(i < 0 ? currentIndent : i) + cs.getIndentSize();
}
if (nextTokenId != null && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
}
 else if (isStatic) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else if (!isLeftBraceOnNewLine(lastPos,startOffset)) {
int i=getCurrentIndent(path.get(1),path);
if (i >= 0) {
currentIndent=i;
}
}
break;
case SWITCH:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId != null && nextTokenId == JavaTokenId.RBRACE) {
if (isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
}
 else {
t=null;
for (CaseTree ct : ((SwitchTree)last).getCases()) {
if (getEndPosition(ct) > startOffset) {
break;
}
t=ct;
}
if (t != null) {
CaseTree ct=(CaseTree)t;
if (nextTokenId == null || !EnumSet.of(JavaTokenId.CASE,JavaTokenId.DEFAULT).contains(nextTokenId)) {
t=null;
for (StatementTree st : ct.getStatements()) {
if (getEndPosition(st) > startOffset) {
break;
}
t=st;
}
if (t != null) {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.COLON),getEndPosition(ct.getExpression()),currentIndent) : i;
}
 else {
int i=getCurrentIndent(ct,path);
currentIndent=i < 0 ? getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.COLON),getEndPosition(ct.getExpression()),currentIndent) : i;
currentIndent+=cs.getIndentSize();
}
}
 else {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? currentIndent + (cs.indentCasesFromSwitch() ? cs.getIndentSize() : 0) : i;
}
}
 else {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.LBRACE) {
currentIndent+=(cs.indentCasesFromSwitch() ? cs.getIndentSize() : 0);
}
 else {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),getEndPosition(((SwitchTree)last).getExpression()) - 1,currentIndent);
}
}
}
break;
case CASE:
t=null;
for (StatementTree st : ((CaseTree)last).getStatements()) {
if (getEndPosition(st) > startOffset) {
break;
}
t=st;
}
if (t != null) {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.COLON),getEndPosition(((CaseTree)last).getExpression()),currentIndent) : i;
}
 else {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.COLON),getEndPosition(((CaseTree)last).getExpression()),currentIndent);
}
break;
case NEW_ARRAY:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId != JavaTokenId.RBRACE) {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId != null) {
switch (prevTokenId) {
case LBRACE:
currentIndent+=cs.getIndentSize();
break;
case COMMA:
currentIndent=getMultilineIndent(((NewArrayTree)last).getInitializers(),path,token.offset(),currentIndent,cs.alignMultilineArrayInit(),false);
break;
case RBRACKET:
if (nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
break;
}
default :
currentIndent+=cs.getContinuationIndentSize();
}
}
}
break;
case LAMBDA_EXPRESSION:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
token=findFirstNonWhitespaceToken(startOffset,lastPos);
prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId == JavaTokenId.ARROW && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else if (nextTokenId != JavaTokenId.RPAREN) {
currentIndent=getContinuationIndent(path,currentIndent);
}
break;
case NEW_CLASS:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
token=findFirstNonWhitespaceToken(startOffset,lastPos);
prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId == JavaTokenId.RPAREN && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getClassDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else if (nextTokenId != JavaTokenId.RPAREN) {
currentIndent=getContinuationIndent(path,currentIndent);
}
break;
case METHOD_INVOCATION:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.COMMA) {
currentIndent=getMultilineIndent(((MethodInvocationTree)last).getArguments(),path,token.offset(),currentIndent,cs.alignMultilineCallArgs(),true);
}
 else {
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || token.token().id() != JavaTokenId.RPAREN) {
currentIndent=getContinuationIndent(path,currentIndent);
}
}
break;
case ANNOTATION:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.COMMA) {
currentIndent=getMultilineIndent(((AnnotationTree)last).getArguments(),path,token.offset(),currentIndent,cs.alignMultilineAnnotationArgs(),true);
}
 else {
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || token.token().id() != JavaTokenId.RPAREN) {
currentIndent=getContinuationIndent(path,currentIndent);
}
}
break;
case LABELED_STATEMENT:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token == null || token.token().id() != JavaTokenId.COLON) {
currentIndent=getContinuationIndent(path,currentIndent);
}
 else {
currentIndent+=cs.getLabelIndent();
}
break;
default :
currentIndent=getContinuationIndent(path,currentIndent);
break;
}
return currentIndent;
}","private int getNewIndent(int startOffset,int endOffset) throws BadLocationException {
  LinkedList<? extends Tree> path=getPath(startOffset);
  if (path.isEmpty()) {
    return 0;
  }
  Tree last=path.getFirst();
  int lastPos=getStartPosition(last);
  int currentIndent=getCurrentIndent(last,path);
switch (last.getKind()) {
case COMPILATION_UNIT:
    break;
case MODULE:
  TokenSequence<JavaTokenId> token=findFirstNonWhitespaceToken(startOffset,endOffset);
JavaTokenId nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId != null && nextTokenId == JavaTokenId.RBRACE) {
if (isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (cs.getModuleDeclBracePlacement()) {
case NEW_LINE_INDENTED:
    currentIndent+=cs.getIndentSize();
  break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
}
 else {
Tree t=null;
for (Tree member : ((ModuleTree)last).getDirectives()) {
if (sp.getEndPosition(cut,member) > startOffset) {
break;
}
t=member;
}
if (t != null) {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? currentIndent + (cs.indentTopLevelClassMembers() ? cs.getIndentSize() : 0) : i;
}
 else {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
JavaTokenId prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId != null) {
switch (prevTokenId) {
case LBRACE:
currentIndent+=cs.indentTopLevelClassMembers() ? cs.getIndentSize() : 0;
break;
case IDENTIFIER:
if (nextTokenId != null && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getModuleDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else {
currentIndent+=cs.getContinuationIndentSize();
}
break;
default :
currentIndent+=cs.getContinuationIndentSize();
}
}
}
}
break;
case CLASS:
case INTERFACE:
case ENUM:
case ANNOTATION_TYPE:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId != null && nextTokenId == JavaTokenId.RBRACE) {
if (isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (cs.getClassDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
}
 else {
Tree t=null;
for (Tree member : ((ClassTree)last).getMembers()) {
if (getEndPosition(member) > startOffset) {
break;
}
t=member;
}
if (t != null) {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? currentIndent + (cs.indentTopLevelClassMembers() ? cs.getIndentSize() : 0) : i;
}
 else {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
JavaTokenId prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId != null) {
switch (prevTokenId) {
case LBRACE:
if (path.size() > 1 && path.get(1).getKind() == Kind.NEW_CLASS && isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (cs.getClassDeclBracePlacement()) {
case SAME_LINE:
case NEW_LINE:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() - cs.getIndentSize() / 2);
break;
}
}
 else {
currentIndent+=cs.indentTopLevelClassMembers() ? cs.getIndentSize() : 0;
}
break;
case COMMA:
currentIndent=getMultilineIndent(((ClassTree)last).getImplementsClause(),path,token.offset(),currentIndent,cs.alignMultilineImplements(),true);
break;
case IDENTIFIER:
case GT:
case GTGT:
case GTGTGT:
if (nextTokenId != null && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getClassDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else {
currentIndent+=cs.getContinuationIndentSize();
}
break;
default :
currentIndent+=cs.getContinuationIndentSize();
}
}
}
}
break;
case METHOD:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
JavaTokenId prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId != null) {
switch (prevTokenId) {
case COMMA:
List<? extends ExpressionTree> thrws=((MethodTree)last).getThrows();
if (!thrws.isEmpty() && getStartPosition(thrws.get(0)) < token.offset()) {
currentIndent=getMultilineIndent(thrws,path,token.offset(),currentIndent,cs.alignMultilineThrows(),true);
}
 else {
currentIndent=getMultilineIndent(((MethodTree)last).getParameters(),path,token.offset(),currentIndent,cs.alignMultilineMethodParams(),true);
}
break;
case RPAREN:
case IDENTIFIER:
case GT:
case GTGT:
case GTGTGT:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token != null && token.token().id() == JavaTokenId.LBRACE) {
switch (cs.getMethodDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
break;
}
default :
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || token.token().id() != JavaTokenId.RPAREN) {
currentIndent+=cs.getContinuationIndentSize();
}
}
}
break;
case VARIABLE:
Tree type=((VariableTree)last).getType();
if (type != null && type.getKind() != Kind.ERRONEOUS) {
ExpressionTree init=((VariableTree)last).getInitializer();
if (init == null || init.getKind() != Kind.NEW_ARRAY || (token=findFirstNonWhitespaceToken(startOffset,lastPos)) == null || token.token().id() != JavaTokenId.EQ || (token=findFirstNonWhitespaceToken(startOffset,endOffset)) == null || token.token().id() != JavaTokenId.LBRACE) {
if (cs.alignMultilineAssignment()) {
int c=getColumn(last);
if (c >= 0) {
currentIndent=c;
}
}
 else {
currentIndent+=cs.getContinuationIndentSize();
}
}
 else {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
break;
}
 else {
last=((VariableTree)last).getModifiers();
if (last == null) break;
}
case MODIFIERS:
Tree t=null;
for (Tree ann : ((ModifiersTree)last).getAnnotations()) {
if (getEndPosition(ann) > startOffset) {
break;
}
t=ann;
}
if (t == null || findFirstNonWhitespaceToken(startOffset,getEndPosition(t)) != null) {
currentIndent+=cs.getContinuationIndentSize();
}
break;
case DO_WHILE_LOOP:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && !EnumSet.of(JavaTokenId.RBRACE,JavaTokenId.SEMICOLON).contains(token.token().id())) {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.DO),lastPos,currentIndent);
}
break;
case ENHANCED_FOR_LOOP:
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),getEndPosition(((EnhancedForLoopTree)last).getExpression()),currentIndent);
break;
case FOR_LOOP:
LinkedList<Tree> forTrees=new LinkedList<Tree>();
for (StatementTree st : ((ForLoopTree)last).getInitializer()) {
if (getEndPosition(st) > startOffset) {
break;
}
forTrees.add(st);
}
t=((ForLoopTree)last).getCondition();
if (t != null && getEndPosition(t) <= startOffset) {
forTrees.add(t);
}
for (ExpressionStatementTree est : ((ForLoopTree)last).getUpdate()) {
if (getEndPosition(est) > startOffset) {
break;
}
forTrees.add(est);
}
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.SEMICOLON) {
currentIndent=getMultilineIndent(forTrees,path,token.offset(),currentIndent,cs.alignMultilineFor(),true);
}
 else {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),forTrees.isEmpty() ? lastPos : getEndPosition(forTrees.getLast()),currentIndent);
}
break;
case IF:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || token.token().id() != JavaTokenId.ELSE) {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && !EnumSet.of(JavaTokenId.RBRACE,JavaTokenId.SEMICOLON).contains(token.token().id())) {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN,JavaTokenId.ELSE),getEndPosition(((IfTree)last).getCondition()) - 1,currentIndent);
}
}
break;
case SYNCHRONIZED:
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),getEndPosition(((SynchronizedTree)last).getExpression()) - 1,currentIndent);
break;
case TRY:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || !EnumSet.of(JavaTokenId.CATCH,JavaTokenId.FINALLY).contains(token.token().id())) {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() != JavaTokenId.RBRACE) {
t=null;
for (Tree res : ((TryTree)last).getResources()) {
if (getEndPosition(res) > startOffset) {
break;
}
t=res;
}
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.TRY,JavaTokenId.RPAREN,JavaTokenId.FINALLY),t != null ? getEndPosition(t) : lastPos,currentIndent);
}
}
break;
case CATCH:
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),lastPos,currentIndent);
break;
case WHILE_LOOP:
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),getEndPosition(((WhileLoopTree)last).getCondition()) - 1,currentIndent);
break;
case BLOCK:
boolean isStatic=((BlockTree)last).isStatic();
if (isStatic) {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.STATIC && token.offset() == lastPos) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
break;
}
}
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId == null || nextTokenId != JavaTokenId.RBRACE) {
token=findFirstOtherToken(startOffset,lastPos + 1,EnumSet.of(JavaTokenId.WHITESPACE));
int prevTokenLineStartOffset=token != null ? context.lineStartOffset(token.offset()) : -1;
t=null;
boolean isNextLabeledStatement=false;
Iterator<? extends StatementTree> it=((BlockTree)last).getStatements().iterator();
while (it.hasNext()) {
StatementTree st=it.next();
if (getEndPosition(st) > startOffset) {
isNextLabeledStatement=st.getKind() == Kind.LABELED_STATEMENT;
break;
}
t=st;
}
if (isNextLabeledStatement && cs.absoluteLabelIndent()) {
currentIndent=0;
}
 else if (t != null) {
int i=-1;
if (getEndPosition(t) < prevTokenLineStartOffset) {
Integer newIndent=newIndents.get(prevTokenLineStartOffset);
i=newIndent != null ? newIndent : context.lineIndent(prevTokenLineStartOffset);
}
 else {
i=getCurrentIndent(t,path);
}
currentIndent=i < 0 ? currentIndent + cs.getIndentSize() : i;
}
 else if (isStatic) {
currentIndent+=cs.getIndentSize();
}
 else if (isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (path.size() > 1 && path.get(1).getKind() == Kind.METHOD ? cs.getMethodDeclBracePlacement() : cs.getOtherBracePlacement()) {
case SAME_LINE:
case NEW_LINE:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() - cs.getIndentSize() / 2);
break;
}
}
 else if (prevTokenLineStartOffset >= 0 && prevTokenLineStartOffset > context.lineStartOffset(lastPos)) {
Integer newIndent=newIndents.get(prevTokenLineStartOffset);
currentIndent=newIndent != null ? newIndent : context.lineIndent(prevTokenLineStartOffset);
}
 else {
int i=path.size() > 1 ? getCurrentIndent(path.get(1),path) : -1;
currentIndent=(i < 0 ? currentIndent : i) + cs.getIndentSize();
}
if (nextTokenId != null && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
}
 else if (isStatic) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else if (!isLeftBraceOnNewLine(lastPos,startOffset)) {
int i=path.size() > 1 ? getCurrentIndent(path.get(1),path) : -1;
currentIndent=i < 0 ? currentIndent + cs.getIndentSize() : i;
}
break;
case SWITCH:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId != null && nextTokenId == JavaTokenId.RBRACE) {
if (isLeftBraceOnNewLine(lastPos,startOffset)) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
}
 else {
t=null;
for (CaseTree ct : ((SwitchTree)last).getCases()) {
if (getEndPosition(ct) > startOffset) {
break;
}
t=ct;
}
if (t != null) {
CaseTree ct=(CaseTree)t;
if (nextTokenId == null || !EnumSet.of(JavaTokenId.CASE,JavaTokenId.DEFAULT).contains(nextTokenId)) {
t=null;
for (StatementTree st : ct.getStatements()) {
if (getEndPosition(st) > startOffset) {
break;
}
t=st;
}
if (t != null) {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.COLON),getEndPosition(ct.getExpression()),currentIndent) : i;
}
 else {
int i=getCurrentIndent(ct,path);
currentIndent=i < 0 ? getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.COLON),getEndPosition(ct.getExpression()),currentIndent) : i;
currentIndent+=cs.getIndentSize();
}
}
 else {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? currentIndent + (cs.indentCasesFromSwitch() ? cs.getIndentSize() : 0) : i;
}
}
 else {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.LBRACE) {
currentIndent+=(cs.indentCasesFromSwitch() ? cs.getIndentSize() : 0);
}
 else {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.RPAREN),getEndPosition(((SwitchTree)last).getExpression()) - 1,currentIndent);
}
}
}
break;
case CASE:
t=null;
for (StatementTree st : ((CaseTree)last).getStatements()) {
if (getEndPosition(st) > startOffset) {
break;
}
t=st;
}
if (t != null) {
int i=getCurrentIndent(t,path);
currentIndent=i < 0 ? getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.COLON),getEndPosition(((CaseTree)last).getExpression()),currentIndent) : i;
}
 else {
currentIndent=getStmtIndent(startOffset,endOffset,EnumSet.of(JavaTokenId.COLON),getEndPosition(((CaseTree)last).getExpression()),currentIndent);
}
break;
case NEW_ARRAY:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
if (nextTokenId != JavaTokenId.RBRACE) {
token=findFirstNonWhitespaceToken(startOffset,lastPos);
prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId != null) {
switch (prevTokenId) {
case LBRACE:
currentIndent+=cs.getIndentSize();
break;
case COMMA:
currentIndent=getMultilineIndent(((NewArrayTree)last).getInitializers(),path,token.offset(),currentIndent,cs.alignMultilineArrayInit(),false);
break;
case RBRACKET:
if (nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
break;
}
default :
currentIndent+=cs.getContinuationIndentSize();
}
}
}
break;
case LAMBDA_EXPRESSION:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
token=findFirstNonWhitespaceToken(startOffset,lastPos);
prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId == JavaTokenId.ARROW && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getOtherBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else if (nextTokenId != JavaTokenId.RPAREN) {
currentIndent=getContinuationIndent(path,currentIndent);
}
break;
case NEW_CLASS:
token=findFirstNonWhitespaceToken(startOffset,endOffset);
nextTokenId=token != null ? token.token().id() : null;
token=findFirstNonWhitespaceToken(startOffset,lastPos);
prevTokenId=token != null ? token.token().id() : null;
if (prevTokenId == JavaTokenId.RPAREN && nextTokenId == JavaTokenId.LBRACE) {
switch (cs.getClassDeclBracePlacement()) {
case NEW_LINE_INDENTED:
currentIndent+=cs.getIndentSize();
break;
case NEW_LINE_HALF_INDENTED:
currentIndent+=(cs.getIndentSize() / 2);
break;
}
}
 else if (nextTokenId != JavaTokenId.RPAREN) {
currentIndent=getContinuationIndent(path,currentIndent);
}
break;
case METHOD_INVOCATION:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.COMMA) {
currentIndent=getMultilineIndent(((MethodInvocationTree)last).getArguments(),path,token.offset(),currentIndent,cs.alignMultilineCallArgs(),true);
}
 else {
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || token.token().id() != JavaTokenId.RPAREN) {
currentIndent=getContinuationIndent(path,currentIndent);
}
}
break;
case ANNOTATION:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token != null && token.token().id() == JavaTokenId.COMMA) {
currentIndent=getMultilineIndent(((AnnotationTree)last).getArguments(),path,token.offset(),currentIndent,cs.alignMultilineAnnotationArgs(),true);
}
 else {
token=findFirstNonWhitespaceToken(startOffset,endOffset);
if (token == null || token.token().id() != JavaTokenId.RPAREN) {
currentIndent=getContinuationIndent(path,currentIndent);
}
}
break;
case LABELED_STATEMENT:
token=findFirstNonWhitespaceToken(startOffset,lastPos);
if (token == null || token.token().id() != JavaTokenId.COLON) {
currentIndent=getContinuationIndent(path,currentIndent);
}
 else {
currentIndent+=cs.getLabelIndent();
}
break;
default :
currentIndent=getContinuationIndent(path,currentIndent);
break;
}
return currentIndent;
}"
34406,"static Link analyse(String line){
  Matcher matcher=LINE_PATTERN.matcher(line);
  if (matcher.find()) {
    int lineNumber=-1;
    try {
      lineNumber=Integer.parseInt(matcher.group(6));
    }
 catch (    NumberFormatException nfe) {
      return null;
    }
    if (matcher.group(1) == null) {
      return new Link(matcher.group(4).split(""String_Node_Str"")[0],lineNumber,matcher.start(4),matcher.end(6) + 1);
    }
    return new Link(matcher.group(1) + matcher.group(4).split(""String_Node_Str"")[0],lineNumber,matcher.start(1),matcher.end(6) + 1);
  }
  return null;
}","static Link analyse(String line){
  Matcher matcher=LINE_PATTERN.matcher(line);
  if (matcher.find()) {
    int lineNumber=-1;
    try {
      lineNumber=Integer.parseInt(matcher.group(6));
    }
 catch (    NumberFormatException nfe) {
      return null;
    }
    if (matcher.group(1) == null) {
      return new Link(matcher.group(4),lineNumber,matcher.start(4),matcher.end(6) + 1);
    }
    return new Link(matcher.group(1) + matcher.group(4),lineNumber,matcher.start(1),matcher.end(6) + 1);
  }
  return null;
}"
34407,"void show(){
  final String resource=className.replace('.','/') + ""String_Node_Str"";
  final ProgressHandle handle=ProgressHandleFactory.createHandle(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",resource));
  handle.start();
  RP.execute(new Runnable(){
    @Override public void run(){
      DataObject dobj=null;
      try {
        final ClassPath classPath=ClassPathSupport.createClassPath(GlobalPathRegistry.getDefault().getSourceRoots().toArray(new FileObject[0]));
        dobj=findDataObject(classPath.findResource(resource));
      }
  finally {
        final DataObject dataObject=dobj;
        Mutex.EVENT.readAccess(new Runnable(){
          @Override public void run(){
            try {
              if (dataObject == null) {
                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",new Object[]{resource}));
                return;
              }
              try {
                EditorCookie editorCookie=(EditorCookie)dataObject.getCookie(EditorCookie.class);
                LineCookie lineCookie=(LineCookie)dataObject.getCookie(LineCookie.class);
                if (editorCookie != null && lineCookie != null && lineNumber != -1) {
                  StyledDocument doc=editorCookie.openDocument();
                  if (doc != null) {
                    if (lineNumber != -1) {
                      try {
                        Line l=lineCookie.getLineSet().getCurrent(lineNumber - 1);
                        if (l != null) {
                          l.show(Line.SHOW_GOTO);
                          return;
                        }
                      }
 catch (                      IndexOutOfBoundsException oob) {
                        StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",new Object[]{lineNumber}));
                      }
                    }
                  }
                }
                OpenCookie openCookie=(OpenCookie)dataObject.getCookie(OpenCookie.class);
                if (openCookie != null) {
                  openCookie.open();
                  return;
                }
              }
 catch (              IOException e) {
                Exceptions.printStackTrace(e);
              }
            }
  finally {
              handle.finish();
            }
          }
        }
);
      }
    }
  }
);
}","void show(){
  String name=className.replace('.','/');
  final List<String> resources=new ArrayList<>();
  resources.add(name + ""String_Node_Str"");
  int idx=name.lastIndexOf('$');
  while (idx >= 0) {
    name=name.substring(0,idx);
    resources.add(name + ""String_Node_Str"");
    idx=name.lastIndexOf('$');
  }
  final ProgressHandle handle=ProgressHandleFactory.createHandle(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",resources.get(0)));
  handle.start();
  RP.execute(new Runnable(){
    @Override public void run(){
      DataObject dobj=null;
      try {
        final ClassPath classPath=ClassPathSupport.createClassPath(GlobalPathRegistry.getDefault().getSourceRoots().toArray(new FileObject[0]));
        for (        String resource : resources) {
          dobj=findDataObject(classPath.findResource(resource));
          if (dobj != null)           break;
        }
      }
  finally {
        final DataObject dataObject=dobj;
        Mutex.EVENT.readAccess(new Runnable(){
          @Override public void run(){
            try {
              if (dataObject == null) {
                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",new Object[]{resources.get(0)}));
                return;
              }
              try {
                EditorCookie editorCookie=(EditorCookie)dataObject.getCookie(EditorCookie.class);
                LineCookie lineCookie=(LineCookie)dataObject.getCookie(LineCookie.class);
                if (editorCookie != null && lineCookie != null && lineNumber != -1) {
                  StyledDocument doc=editorCookie.openDocument();
                  if (doc != null) {
                    if (lineNumber != -1) {
                      try {
                        Line l=lineCookie.getLineSet().getCurrent(lineNumber - 1);
                        if (l != null) {
                          l.show(Line.SHOW_GOTO);
                          return;
                        }
                      }
 catch (                      IndexOutOfBoundsException oob) {
                        StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",new Object[]{lineNumber}));
                      }
                    }
                  }
                }
                OpenCookie openCookie=(OpenCookie)dataObject.getCookie(OpenCookie.class);
                if (openCookie != null) {
                  openCookie.open();
                  return;
                }
              }
 catch (              IOException e) {
                Exceptions.printStackTrace(e);
              }
            }
  finally {
              handle.finish();
            }
          }
        }
);
      }
    }
  }
);
}"
34408,"@Override public void run(){
  try {
    if (dataObject == null) {
      StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",new Object[]{resource}));
      return;
    }
    try {
      EditorCookie editorCookie=(EditorCookie)dataObject.getCookie(EditorCookie.class);
      LineCookie lineCookie=(LineCookie)dataObject.getCookie(LineCookie.class);
      if (editorCookie != null && lineCookie != null && lineNumber != -1) {
        StyledDocument doc=editorCookie.openDocument();
        if (doc != null) {
          if (lineNumber != -1) {
            try {
              Line l=lineCookie.getLineSet().getCurrent(lineNumber - 1);
              if (l != null) {
                l.show(Line.SHOW_GOTO);
                return;
              }
            }
 catch (            IndexOutOfBoundsException oob) {
              StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",new Object[]{lineNumber}));
            }
          }
        }
      }
      OpenCookie openCookie=(OpenCookie)dataObject.getCookie(OpenCookie.class);
      if (openCookie != null) {
        openCookie.open();
        return;
      }
    }
 catch (    IOException e) {
      Exceptions.printStackTrace(e);
    }
  }
  finally {
    handle.finish();
  }
}","@Override public void run(){
  try {
    if (dataObject == null) {
      StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",new Object[]{resources.get(0)}));
      return;
    }
    try {
      EditorCookie editorCookie=(EditorCookie)dataObject.getCookie(EditorCookie.class);
      LineCookie lineCookie=(LineCookie)dataObject.getCookie(LineCookie.class);
      if (editorCookie != null && lineCookie != null && lineNumber != -1) {
        StyledDocument doc=editorCookie.openDocument();
        if (doc != null) {
          if (lineNumber != -1) {
            try {
              Line l=lineCookie.getLineSet().getCurrent(lineNumber - 1);
              if (l != null) {
                l.show(Line.SHOW_GOTO);
                return;
              }
            }
 catch (            IndexOutOfBoundsException oob) {
              StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(StackLineAnalyser.class,""String_Node_Str"",new Object[]{lineNumber}));
            }
          }
        }
      }
      OpenCookie openCookie=(OpenCookie)dataObject.getCookie(OpenCookie.class);
      if (openCookie != null) {
        openCookie.open();
        return;
      }
    }
 catch (    IOException e) {
      Exceptions.printStackTrace(e);
    }
  }
  finally {
    handle.finish();
  }
}"
34409,"private void wrapList(CodeStyle.WrapStyle wrapStyle,boolean align,boolean prependSpace,JavaTokenId separator,boolean wrapAfterSeparator,List<? extends Tree> trees){
  boolean first=true;
  int alignIndent=-1;
  boolean spaceBeforeSeparator, spaceAfterSeparator;
switch (separator) {
case COMMA:
    spaceBeforeSeparator=cs.spaceBeforeComma();
  spaceAfterSeparator=cs.spaceAfterComma();
break;
case SEMICOLON:
spaceBeforeSeparator=cs.spaceBeforeSemi();
spaceAfterSeparator=cs.spaceAfterSemi();
break;
default :
spaceBeforeSeparator=spaceAfterSeparator=cs.spaceAroundBinaryOps();
break;
}
for (Iterator<? extends Tree> it=trees.iterator(); it.hasNext(); ) {
Tree impl=it.next();
if (wrapAnnotation && impl.getKind() == Tree.Kind.ANNOTATION) {
wrapTree(CodeStyle.WrapStyle.WRAP_ALWAYS,alignIndent,spaceAfterSeparator ? 1 : 0,impl);
}
 else if (impl.getKind() == Tree.Kind.ERRONEOUS) {
scan(impl,null);
}
 else if (first) {
int index=tokens.index();
int c=col;
Diff d=diffs.isEmpty() ? null : diffs.getFirst();
spaces(prependSpace ? 1 : 0,true);
if (align) alignIndent=col;
if (wrapStyle == CodeStyle.WrapStyle.WRAP_NEVER || c <= indent()) {
scan(impl,null);
}
 else {
int o=tokens.offset();
WrapAbort oldCheckWrap=checkWrap;
checkWrap=new WrapAbort(o);
try {
scan(impl,null);
}
 catch (WrapAbort wa) {
}
 finally {
checkWrap=oldCheckWrap;
}
if (col > rightMargin && o >= lastNewLineOffset) {
rollback(index,c,d);
newline();
if (align) alignIndent=col;
scan(impl,null);
}
}
}
 else if (wrapAfterSeparator) {
boolean containedNewLine=spaces(spaceBeforeSeparator ? 1 : 0,false);
if (separator.equals(accept(separator)) && containedNewLine) {
newline();
}
wrapTree(wrapStyle,alignIndent,spaceAfterSeparator ? 1 : 0,impl);
}
 else {
wrapOperatorAndTree(wrapStyle,alignIndent,spaceAfterSeparator ? 1 : 0,impl);
}
first=false;
}
}","private void wrapList(CodeStyle.WrapStyle wrapStyle,boolean align,boolean prependSpace,JavaTokenId separator,boolean wrapAfterSeparator,List<? extends Tree> trees){
  boolean first=true;
  int alignIndent=-1;
  boolean spaceBeforeSeparator, spaceAfterSeparator;
switch (separator) {
case COMMA:
    spaceBeforeSeparator=cs.spaceBeforeComma();
  spaceAfterSeparator=cs.spaceAfterComma();
break;
case SEMICOLON:
spaceBeforeSeparator=cs.spaceBeforeSemi();
spaceAfterSeparator=cs.spaceAfterSemi();
break;
default :
spaceBeforeSeparator=spaceAfterSeparator=cs.spaceAroundBinaryOps();
break;
}
for (Iterator<? extends Tree> it=trees.iterator(); it.hasNext(); ) {
Tree impl=it.next();
if (wrapAnnotation && impl.getKind() == Tree.Kind.ANNOTATION) {
if (!first) {
boolean containedNewLine=spaces(spaceBeforeSeparator ? 1 : 0,false);
if (separator.equals(accept(separator)) && containedNewLine) {
newline();
}
}
wrapTree(CodeStyle.WrapStyle.WRAP_ALWAYS,alignIndent,spaceAfterSeparator ? 1 : 0,impl);
}
 else if (impl.getKind() == Tree.Kind.ERRONEOUS) {
scan(impl,null);
}
 else if (first) {
int index=tokens.index();
int c=col;
Diff d=diffs.isEmpty() ? null : diffs.getFirst();
spaces(prependSpace ? 1 : 0,true);
if (align) alignIndent=col;
if (wrapStyle == CodeStyle.WrapStyle.WRAP_NEVER || c <= indent()) {
scan(impl,null);
}
 else {
int o=tokens.offset();
WrapAbort oldCheckWrap=checkWrap;
checkWrap=new WrapAbort(o);
try {
scan(impl,null);
}
 catch (WrapAbort wa) {
}
 finally {
checkWrap=oldCheckWrap;
}
if (col > rightMargin && o >= lastNewLineOffset) {
rollback(index,c,d);
newline();
if (align) alignIndent=col;
scan(impl,null);
}
}
}
 else if (wrapAfterSeparator) {
boolean containedNewLine=spaces(spaceBeforeSeparator ? 1 : 0,false);
if (separator.equals(accept(separator)) && containedNewLine) {
newline();
}
wrapTree(wrapStyle,alignIndent,spaceAfterSeparator ? 1 : 0,impl);
}
 else {
wrapOperatorAndTree(wrapStyle,alignIndent,spaceAfterSeparator ? 1 : 0,impl);
}
first=false;
}
}"
34410,"/** 
 * Creates files that instruct the native launcher to perform restart as soon as the Java process finishes. 
 * @since 1.45
 * @throws UnsupportedOperationException some environments (like WebStart)do not support restart and may throw an exception to indicate that
 */
static void markReadyForRestart() throws UnsupportedOperationException {
  if (!TopSecurityManager.class.getClassLoader().getClass().getName().endsWith(""String_Node_Str"")) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  File userdir=Places.getUserDirectory();
  if (userdir == null) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  File restartFile=new File(userdir,""String_Node_Str"");
  if (!restartFile.exists()) {
    try {
      restartFile.createNewFile();
    }
 catch (    IOException x) {
      throw new UnsupportedOperationException(x);
    }
  }
}","/** 
 * Creates files that instruct the native launcher to perform restart as soon as the Java process finishes. 
 * @since 1.45
 * @throws UnsupportedOperationException some environments (like WebStart)do not support restart and may throw an exception to indicate that
 */
static void markReadyForRestart() throws UnsupportedOperationException {
  String classLoaderName=TopSecurityManager.class.getClassLoader().getClass().getName();
  if (!classLoaderName.endsWith(""String_Node_Str"") && !classLoaderName.endsWith(""String_Node_Str"")) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  File userdir=Places.getUserDirectory();
  if (userdir == null) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  File restartFile=new File(userdir,""String_Node_Str"");
  if (!restartFile.exists()) {
    try {
      restartFile.createNewFile();
    }
 catch (    IOException x) {
      throw new UnsupportedOperationException(x);
    }
  }
}"
34411,"public Iterator<Instance> getReachables(){
  return new TreeIterator<Instance,Instance>(root){
    @Override protected Iterator<Instance> getSameLevelIterator(    Instance popped){
      Collection<Instance> instances=new ArrayList<Instance>();
      for (      Object fv : popped.getFieldValues()) {
        if (fv instanceof ObjectFieldValue) {
          if (excludes == null || !excludes.isExcluded(getFQFieldName(((FieldValue)fv).getField()))) {
            Instance i=((ObjectFieldValue)fv).getInstance();
            if (i != null) {
              instances.add(i);
            }
          }
        }
      }
      if (popped instanceof ObjectArrayInstance) {
        instances.addAll(((ObjectArrayInstance)popped).getValues());
      }
      return instances.iterator();
    }
    @Override protected Iterator<Instance> getTraversingIterator(    Instance popped){
      Collection<Instance> instances=new ArrayList<Instance>();
      for (      Object fv : popped.getFieldValues()) {
        if (fv instanceof ObjectFieldValue) {
          if (excludes == null || !excludes.isExcluded(getFQFieldName(((FieldValue)fv).getField()))) {
            Instance i=((ObjectFieldValue)fv).getInstance();
            if (i != null) {
              instances.add(i);
            }
          }
        }
      }
      if (popped instanceof ObjectArrayInstance) {
        instances.addAll(((ObjectArrayInstance)popped).getValues());
      }
      return instances.iterator();
    }
  }
;
}","public Iterator<Instance> getReachables(){
  return new TreeIterator<Instance,Instance>(root){
    @Override protected Iterator<Instance> getSameLevelIterator(    Instance popped){
      Collection<Instance> instances=new ArrayList<Instance>();
      for (      Object fv : popped.getFieldValues()) {
        if (fv instanceof ObjectFieldValue) {
          if (excludes == null || !excludes.isExcluded(getFQFieldName(((FieldValue)fv).getField()))) {
            Instance i=((ObjectFieldValue)fv).getInstance();
            if (i != null && !alreadyReached.contains(i)) {
              instances.add(i);
              alreadyReached.add(i);
            }
          }
        }
      }
      if (popped instanceof ObjectArrayInstance) {
        for (        Object el : ((ObjectArrayInstance)popped).getValues()) {
          Instance i=(Instance)el;
          if (i != null && !alreadyReached.contains(i)) {
            instances.add(i);
            alreadyReached.add(i);
          }
        }
      }
      return instances.iterator();
    }
    @Override protected Iterator<Instance> getTraversingIterator(    Instance popped){
      Collection<Instance> instances=new ArrayList<Instance>();
      for (      Object fv : popped.getFieldValues()) {
        if (fv instanceof ObjectFieldValue) {
          if (excludes == null || !excludes.isExcluded(getFQFieldName(((FieldValue)fv).getField()))) {
            Instance i=((ObjectFieldValue)fv).getInstance();
            if (i != null) {
              instances.add(i);
            }
          }
        }
      }
      if (popped instanceof ObjectArrayInstance) {
        for (        Object el : ((ObjectArrayInstance)popped).getValues()) {
          if (el instanceof Instance) {
            instances.add((Instance)el);
          }
        }
      }
      return instances.iterator();
    }
  }
;
}"
34412,"public ReachableObjects(Instance root,final ReachableExcludes excludes){
  this.root=root;
  this.excludes=excludes;
}","public ReachableObjects(Instance root,final ReachableExcludes excludes){
  this.root=root;
  this.excludes=excludes;
  alreadyReached=new HashSet();
}"
34413,"@Override protected Iterator<Instance> getTraversingIterator(Instance popped){
  Collection<Instance> instances=new ArrayList<Instance>();
  for (  Object fv : popped.getFieldValues()) {
    if (fv instanceof ObjectFieldValue) {
      if (excludes == null || !excludes.isExcluded(getFQFieldName(((FieldValue)fv).getField()))) {
        Instance i=((ObjectFieldValue)fv).getInstance();
        if (i != null) {
          instances.add(i);
        }
      }
    }
  }
  if (popped instanceof ObjectArrayInstance) {
    instances.addAll(((ObjectArrayInstance)popped).getValues());
  }
  return instances.iterator();
}","@Override protected Iterator<Instance> getTraversingIterator(Instance popped){
  Collection<Instance> instances=new ArrayList<Instance>();
  for (  Object fv : popped.getFieldValues()) {
    if (fv instanceof ObjectFieldValue) {
      if (excludes == null || !excludes.isExcluded(getFQFieldName(((FieldValue)fv).getField()))) {
        Instance i=((ObjectFieldValue)fv).getInstance();
        if (i != null) {
          instances.add(i);
        }
      }
    }
  }
  if (popped instanceof ObjectArrayInstance) {
    for (    Object el : ((ObjectArrayInstance)popped).getValues()) {
      if (el instanceof Instance) {
        instances.add((Instance)el);
      }
    }
  }
  return instances.iterator();
}"
34414,"@Override protected Iterator<Instance> getSameLevelIterator(Instance popped){
  Collection<Instance> instances=new ArrayList<Instance>();
  for (  Object fv : popped.getFieldValues()) {
    if (fv instanceof ObjectFieldValue) {
      if (excludes == null || !excludes.isExcluded(getFQFieldName(((FieldValue)fv).getField()))) {
        Instance i=((ObjectFieldValue)fv).getInstance();
        if (i != null) {
          instances.add(i);
        }
      }
    }
  }
  if (popped instanceof ObjectArrayInstance) {
    instances.addAll(((ObjectArrayInstance)popped).getValues());
  }
  return instances.iterator();
}","@Override protected Iterator<Instance> getSameLevelIterator(Instance popped){
  Collection<Instance> instances=new ArrayList<Instance>();
  for (  Object fv : popped.getFieldValues()) {
    if (fv instanceof ObjectFieldValue) {
      if (excludes == null || !excludes.isExcluded(getFQFieldName(((FieldValue)fv).getField()))) {
        Instance i=((ObjectFieldValue)fv).getInstance();
        if (i != null && !alreadyReached.contains(i)) {
          instances.add(i);
          alreadyReached.add(i);
        }
      }
    }
  }
  if (popped instanceof ObjectArrayInstance) {
    for (    Object el : ((ObjectArrayInstance)popped).getValues()) {
      Instance i=(Instance)el;
      if (i != null && !alreadyReached.contains(i)) {
        instances.add(i);
        alreadyReached.add(i);
      }
    }
  }
  return instances.iterator();
}"
34415,"static String populateProjectData(NewModuleProjectData data,String paths,boolean assignValues){
  if (data.getProjectName() != null && data.getCodeNameBase() != null && assignValues) {
    return null;
  }
  String wrongOnes=null;
  StringTokenizer tokens=new StringTokenizer(paths,File.pathSeparator);
  boolean cutShortestPath=false;
  boolean fileAlreadyMarked=false;
  if (tokens.hasMoreTokens()) {
    fileAlreadyMarked=false;
    File fil=new File(tokens.nextToken());
    if (!fil.exists()) {
      return wrongOnes;
    }
    String name=fil.getName();
    int inddd=name.lastIndexOf('.');
    if (inddd > -1) {
      name=name.substring(0,inddd);
    }
    name=name.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (assignValues) {
      data.setProjectName(name);
    }
    JarFile jf=null;
    String shortestPath=null;
    try {
      jf=new JarFile(fil);
      if (assignValues) {
        Manifest manifest=jf.getManifest();
        Attributes attributes=manifest.getMainAttributes();
        if (attributes.getValue(""String_Node_Str"") != null) {
          data.setProjectName(attributes.getValue(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (manifest.getEntries().size() == 1) {
            attributes=manifest.getEntries().values().iterator().next();
            if (attributes.getValue(""String_Node_Str"") != null) {
              data.setProjectName(attributes.getValue(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
      }
      Enumeration en=jf.entries();
      while (en.hasMoreElements()) {
        JarEntry entry=(JarEntry)en.nextElement();
        if (!entry.isDirectory() && entry.getName().endsWith(""String_Node_Str"")) {
          String nm=entry.getName();
          if (!ApisupportAntUtils.isValidJavaFQN(nm.substring(0,nm.length() - 6).replace('/','.'))) {
            continue;
          }
          int index=nm.lastIndexOf('/');
          if (index > -1) {
            String path=nm.substring(0,index);
            if (shortestPath != null && path.length() == shortestPath.length() && !path.equals(shortestPath)) {
              cutShortestPath=true;
            }
            if (shortestPath == null || path.length() < shortestPath.length()) {
              shortestPath=path;
              cutShortestPath=false;
            }
          }
 else {
            if (!fileAlreadyMarked) {
              wrongOnes=wrongOnes == null ? fil.getName() : wrongOnes + ""String_Node_Str"" + fil.getName();
              fileAlreadyMarked=true;
            }
          }
        }
      }
    }
 catch (    IOException e) {
      ErrorManager.getDefault().notify(ErrorManager.WARNING,e);
    }
 finally {
      if (jf != null) {
        try {
          jf.close();
        }
 catch (        IOException e) {
          Util.err.notify(ErrorManager.INFORMATIONAL,e);
        }
      }
    }
    if (shortestPath != null && assignValues) {
      shortestPath=shortestPath.replace('/','.');
      if (cutShortestPath && shortestPath.indexOf('.') != shortestPath.lastIndexOf('.')) {
        int ind=shortestPath.lastIndexOf('.');
        shortestPath=shortestPath.substring(0,ind);
      }
      data.setCodeNameBase(shortestPath);
    }
  }
  return wrongOnes;
}","static String populateProjectData(NewModuleProjectData data,String paths,boolean assignValues){
  if (data.getProjectName() != null && data.getCodeNameBase() != null && assignValues) {
    return null;
  }
  String wrongOnes=null;
  StringTokenizer tokens=new StringTokenizer(paths,File.pathSeparator);
  boolean cutShortestPath=false;
  boolean fileAlreadyMarked=false;
  if (tokens.hasMoreTokens()) {
    fileAlreadyMarked=false;
    File fil=new File(tokens.nextToken());
    if (!fil.exists()) {
      return wrongOnes;
    }
    String name=fil.getName();
    int inddd=name.lastIndexOf('.');
    if (inddd > -1) {
      name=name.substring(0,inddd);
    }
    name=name.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (assignValues) {
      data.setProjectName(name);
    }
    JarFile jf=null;
    String shortestPath=null;
    try {
      jf=new JarFile(fil);
      if (assignValues) {
        Manifest manifest=jf.getManifest();
        if (manifest != null) {
          Attributes attributes=manifest.getMainAttributes();
          if (attributes.getValue(""String_Node_Str"") != null) {
            data.setProjectName(attributes.getValue(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            if (manifest.getEntries().size() == 1) {
              attributes=manifest.getEntries().values().iterator().next();
              if (attributes.getValue(""String_Node_Str"") != null) {
                data.setProjectName(attributes.getValue(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
              }
            }
          }
        }
      }
      Enumeration en=jf.entries();
      while (en.hasMoreElements()) {
        JarEntry entry=(JarEntry)en.nextElement();
        if (!entry.isDirectory() && entry.getName().endsWith(""String_Node_Str"")) {
          String nm=entry.getName();
          if (!ApisupportAntUtils.isValidJavaFQN(nm.substring(0,nm.length() - 6).replace('/','.'))) {
            continue;
          }
          int index=nm.lastIndexOf('/');
          if (index > -1) {
            String path=nm.substring(0,index);
            if (shortestPath != null && path.length() == shortestPath.length() && !path.equals(shortestPath)) {
              cutShortestPath=true;
            }
            if (shortestPath == null || path.length() < shortestPath.length()) {
              shortestPath=path;
              cutShortestPath=false;
            }
          }
 else {
            if (!fileAlreadyMarked) {
              wrongOnes=wrongOnes == null ? fil.getName() : wrongOnes + ""String_Node_Str"" + fil.getName();
              fileAlreadyMarked=true;
            }
          }
        }
      }
    }
 catch (    IOException e) {
      ErrorManager.getDefault().notify(ErrorManager.WARNING,e);
    }
 finally {
      if (jf != null) {
        try {
          jf.close();
        }
 catch (        IOException e) {
          Util.err.notify(ErrorManager.INFORMATIONAL,e);
        }
      }
    }
    if (shortestPath != null && assignValues) {
      shortestPath=shortestPath.replace('/','.');
      if (cutShortestPath && shortestPath.indexOf('.') != shortestPath.lastIndexOf('.')) {
        int ind=shortestPath.lastIndexOf('.');
        shortestPath=shortestPath.substring(0,ind);
      }
      data.setCodeNameBase(shortestPath);
    }
  }
  return wrongOnes;
}"
34416,"static boolean isJavaFX(File javaHome){
  return new File(new File(javaHome,""String_Node_Str""),""String_Node_Str"").exists() || new File(new File(new File(javaHome,""String_Node_Str""),""String_Node_Str""),""String_Node_Str"").exists();
}","static boolean isJavaFX(File javaHome){
  try {
    Class.forName(""String_Node_Str"");
    return true;
  }
 catch (  ClassNotFoundException ex) {
    return new File(new File(javaHome,""String_Node_Str""),""String_Node_Str"").exists() || new File(new File(new File(javaHome,""String_Node_Str""),""String_Node_Str""),""String_Node_Str"").exists();
  }
}"
34417,"@SuppressWarnings(""String_Node_Str"") private static Object load(Map<?,?> options){
  try {
    return Native.loadLibrary(GENERIC,GnomeKeyringLibrary.class,options);
  }
 catch (  UnsatisfiedLinkError x) {
    if (new File(EXPLICIT_ONEIRIC).isFile()) {
      return Native.loadLibrary(EXPLICIT_ONEIRIC,GnomeKeyringLibrary.class,options);
    }
 else {
      throw x;
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private static Object load(Map<String,?> options){
  try {
    return Native.loadLibrary(GENERIC,GnomeKeyringLibrary.class,options);
  }
 catch (  UnsatisfiedLinkError x) {
    if (new File(EXPLICIT_ONEIRIC).isFile()) {
      return Native.loadLibrary(EXPLICIT_ONEIRIC,GnomeKeyringLibrary.class,options);
    }
 else {
      throw x;
    }
  }
}"
34418,"Pair<Map<String,List<Element>>,Map<String,List<Element>>> computeCandidates(Set<String> forcedUnresolved){
  final CompilationUnitTree cut=info.getCompilationUnit();
  Element el=info.getTrees().getElement(new TreePath(cut));
  ModuleElement modle=el != null ? info.getElements().getModuleOf(el) : null;
  final TreeVisitorImpl v=new TreeVisitorImpl(info);
  setVisitor(v);
  try {
    v.scan(cut,new HashMap<String,Object>());
  }
  finally {
    setVisitor(null);
  }
  Set<String> unresolvedNames=new HashSet<String>(v.unresolved);
  unresolvedNames.addAll(forcedUnresolved);
  unresolvedNames.addAll(JavadocImports.computeUnresolvedImports(info));
  for (  String unresolved : unresolvedNames) {
    if (isCancelled())     return null;
    List<Element> classes=new ArrayList<Element>();
    Set<ElementHandle<TypeElement>> typeNames=info.getClasspathInfo().getClassIndex().getDeclaredTypes(unresolved,NameKind.SIMPLE_NAME,EnumSet.allOf(ClassIndex.SearchScope.class));
    if (typeNames == null) {
      return null;
    }
    for (    ElementHandle<TypeElement> typeName : typeNames) {
      if (isCancelled())       return null;
      TypeElement te=modle != null ? info.getElements().getTypeElement(modle,typeName.getQualifiedName()) : info.getElements().getTypeElement(typeName.getQualifiedName());
      if (te == null) {
        Logger.getLogger(ComputeImports.class.getName()).log(Level.INFO,""String_Node_Str"" + typeName + ""String_Node_Str"");
        continue;
      }
      if (info.getElements().getPackageOf(te).getQualifiedName().length() != 0 && !Utilities.isExcluded(te.getQualifiedName())) {
        classes.add(te);
      }
    }
    Iterable<Symbols> simpleNames=info.getClasspathInfo().getClassIndex().getDeclaredSymbols(unresolved,NameKind.SIMPLE_NAME,EnumSet.allOf(ClassIndex.SearchScope.class));
    if (simpleNames == null) {
      return null;
    }
    for (    final Symbols p : simpleNames) {
      if (isCancelled())       return null;
      final TypeElement te=p.getEnclosingType().resolve(info);
      final Set<String> idents=p.getSymbols();
      if (te != null) {
        for (        Element ne : te.getEnclosedElements()) {
          if (!ne.getModifiers().contains(Modifier.STATIC))           continue;
          if (idents.contains(getSimpleName(ne,te))) {
            classes.add(ne);
          }
        }
      }
    }
    candidates.put(unresolved,new ArrayList(classes));
    notFilteredCandidates.put(unresolved,classes);
  }
  boolean wasChanged=true;
  while (wasChanged) {
    if (isCancelled())     return new Pair(Collections.emptyMap(),Collections.emptyMap());
    wasChanged=false;
    possibleMethodFQNs.clear();
    fqn2Methods.clear();
    for (    Hint hint : v.hints) {
      wasChanged|=hint.filter(info,this);
    }
  }
  for (  String sn : possibleMethodFQNs.keySet()) {
    Set<String> fqns=possibleMethodFQNs.get(sn);
    List<Element> cands=candidates.get(sn);
    List<Element> rawCands=notFilteredCandidates.get(sn);
    if (cands != null) {
      for (Iterator<Element> itE=cands.iterator(); itE.hasNext(); ) {
        Element x=itE.next();
        if (x.getKind() != ElementKind.METHOD) {
          continue;
        }
        String fq=info.getElementUtilities().getElementName(x,true).toString();
        if (!fqns.contains(fq)) {
          itE.remove();
        }
      }
    }
    if (rawCands != null) {
      for (Iterator<Element> itE=rawCands.iterator(); itE.hasNext(); ) {
        Element x=itE.next();
        if (x.getKind() != ElementKind.METHOD) {
          continue;
        }
        String fq=info.getElementUtilities().getElementName(x,true).toString();
        if (!fqns.contains(fq)) {
          itE.remove();
        }
      }
    }
  }
  return new Pair<Map<String,List<Element>>,Map<String,List<Element>>>(candidates,notFilteredCandidates);
}","Pair<Map<String,List<Element>>,Map<String,List<Element>>> computeCandidates(Set<String> forcedUnresolved){
  final CompilationUnitTree cut=info.getCompilationUnit();
  ClasspathInfo cpInfo=allInfo.getClasspathInfo();
  final TreeVisitorImpl v=new TreeVisitorImpl(info);
  setVisitor(v);
  try {
    v.scan(cut,new HashMap<String,Object>());
  }
  finally {
    setVisitor(null);
  }
  Set<String> unresolvedNames=new HashSet<String>(v.unresolved);
  unresolvedNames.addAll(forcedUnresolved);
  unresolvedNames.addAll(JavadocImports.computeUnresolvedImports(info));
  for (  String unresolved : unresolvedNames) {
    if (isCancelled())     return null;
    List<Element> classes=new ArrayList<Element>();
    Set<ElementHandle<TypeElement>> typeNames=cpInfo.getClassIndex().getDeclaredTypes(unresolved,NameKind.SIMPLE_NAME,EnumSet.allOf(ClassIndex.SearchScope.class));
    if (typeNames == null) {
      return null;
    }
    for (    ElementHandle<TypeElement> typeName : typeNames) {
      if (isCancelled())       return null;
      TypeElement te=typeName.resolve(allInfo);
      if (te == null) {
        Logger.getLogger(ComputeImports.class.getName()).log(Level.INFO,""String_Node_Str"" + typeName + ""String_Node_Str"");
        continue;
      }
      if (info.getElements().getPackageOf(te).getQualifiedName().length() != 0 && !Utilities.isExcluded(te.getQualifiedName())) {
        classes.add(te);
      }
    }
    Iterable<Symbols> simpleNames=cpInfo.getClassIndex().getDeclaredSymbols(unresolved,NameKind.SIMPLE_NAME,EnumSet.allOf(ClassIndex.SearchScope.class));
    if (simpleNames == null) {
      return null;
    }
    for (    final Symbols p : simpleNames) {
      if (isCancelled())       return null;
      final TypeElement te=p.getEnclosingType().resolve(allInfo);
      final Set<String> idents=p.getSymbols();
      if (te != null) {
        for (        Element ne : te.getEnclosedElements()) {
          if (!ne.getModifiers().contains(Modifier.STATIC))           continue;
          if (idents.contains(getSimpleName(ne,te))) {
            classes.add(ne);
          }
        }
      }
    }
    candidates.put(unresolved,new ArrayList(classes));
    notFilteredCandidates.put(unresolved,classes);
  }
  boolean wasChanged=true;
  while (wasChanged) {
    if (isCancelled())     return new Pair(Collections.emptyMap(),Collections.emptyMap());
    wasChanged=false;
    possibleMethodFQNs.clear();
    fqn2Methods.clear();
    for (    Hint hint : v.hints) {
      wasChanged|=hint.filter(allInfo,this);
    }
  }
  for (  String sn : possibleMethodFQNs.keySet()) {
    Set<String> fqns=possibleMethodFQNs.get(sn);
    List<Element> cands=candidates.get(sn);
    List<Element> rawCands=notFilteredCandidates.get(sn);
    if (cands != null) {
      for (Iterator<Element> itE=cands.iterator(); itE.hasNext(); ) {
        Element x=itE.next();
        if (x.getKind() != ElementKind.METHOD) {
          continue;
        }
        String fq=info.getElementUtilities().getElementName(x,true).toString();
        if (!fqns.contains(fq)) {
          itE.remove();
        }
      }
    }
    if (rawCands != null) {
      for (Iterator<Element> itE=rawCands.iterator(); itE.hasNext(); ) {
        Element x=itE.next();
        if (x.getKind() != ElementKind.METHOD) {
          continue;
        }
        String fq=info.getElementUtilities().getElementName(x,true).toString();
        if (!fqns.contains(fq)) {
          itE.remove();
        }
      }
    }
  }
  return new Pair<Map<String,List<Element>>,Map<String,List<Element>>>(candidates,notFilteredCandidates);
}"
34419,"public ComputeImports computeCandidatesEx(){
  ComputeImports cache=(ComputeImports)info.getCachedValue(IMPORT_CANDIDATES_KEY);
  if (cache != null) {
    return cache;
  }
  computeCandidates(Collections.<String>emptySet());
  info.putCachedValue(IMPORT_CANDIDATES_KEY,this,CacheClearPolicy.ON_CHANGE);
  return this;
}","public ComputeImports computeCandidatesEx(){
  ComputeImports cache=(ComputeImports)info.getCachedValue(IMPORT_CANDIDATES_KEY);
  if (cache != null) {
    return cache;
  }
  boolean modules=false;
  if (info.getSourceVersion().compareTo(SourceVersion.RELEASE_9) <= 0) {
    if (info.getClasspathInfo().getClassPath(ClasspathInfo.PathKind.SOURCE).findResource(""String_Node_Str"") != null) {
      modules=true;
    }
  }
  if (modules) {
    ClasspathInfo cpInfo=info.getClasspathInfo();
    ClasspathInfo extraInfo=ClasspathInfo.create(ClassPathSupport.createProxyClassPath(cpInfo.getClassPath(ClasspathInfo.PathKind.BOOT),cpInfo.getClassPath(ClasspathInfo.PathKind.MODULE_BOOT)),ClassPathSupport.createProxyClassPath(cpInfo.getClassPath(ClasspathInfo.PathKind.COMPILE),cpInfo.getClassPath(ClasspathInfo.PathKind.MODULE_COMPILE),cpInfo.getClassPath(ClasspathInfo.PathKind.MODULE_CLASS)),cpInfo.getClassPath(ClasspathInfo.PathKind.SOURCE));
    JavaSource src=JavaSource.create(extraInfo,info.getSnapshot().getSource().getFileObject());
    try {
      src.runUserActionTask(new Task<CompilationController>(){
        @Override public void run(        CompilationController parameter) throws Exception {
          allInfo=parameter;
          parameter.toPhase(JavaSource.Phase.RESOLVED);
          computeCandidates(Collections.<String>emptySet());
        }
      }
,true);
    }
 catch (    IOException ex) {
      Exceptions.printStackTrace(ex);
    }
  }
 else {
    allInfo=info;
    computeCandidates(Collections.<String>emptySet());
  }
  info.putCachedValue(IMPORT_CANDIDATES_KEY,this,CacheClearPolicy.ON_CHANGE);
  return this;
}"
34420,"@Override public FileEntry getFileEntry(String filename) throws Exception {
  try {
    filename=removeProtocol(filename);
    Log.d(""String_Node_Str"",""String_Node_Str"" + filename);
    if ((filename.equals(""String_Node_Str"")) || (filename.equals(""String_Node_Str"")))     return getRootFileEntry();
    Metadata dbEntry=dbxClient.files().getMetadata(filename);
    return convertToFileEntry(dbEntry);
  }
 catch (  DbxException e) {
    throw convertException(e);
  }
}","@Override public FileEntry getFileEntry(String filename) throws Exception {
  try {
    filename=removeProtocol(filename);
    Log.d(""String_Node_Str"",""String_Node_Str"" + filename);
    if ((filename.equals(""String_Node_Str"")) || (filename.equals(""String_Node_Str"")))     return getRootFileEntry();
    if (filename.endsWith(""String_Node_Str""))     filename=filename.substring(0,filename.length() - 1);
    Metadata dbEntry=dbxClient.files().getMetadata(filename);
    return convertToFileEntry(dbEntry);
  }
 catch (  DbxException e) {
    throw convertException(e);
  }
}"
34421,"@Override public String getDisplayName(String path){
  if (path.endsWith(""String_Node_Str""))   path=path.substring(0,path.length() - 1);
  int lastIndex=path.lastIndexOf(""String_Node_Str"");
  if (lastIndex >= 0)   return path.substring(lastIndex + 1);
 else   return path;
}","@Override public String getDisplayName(String path){
  try {
    ConnectionInfo ci=splitStringToConnectionInfo(path);
    return ci.URL;
  }
 catch (  Exception e) {
    return getDisplayNameFromHref(path);
  }
}"
34422,"/** 
 * Answers the incoming URI.
 * @param uri the request URI.
 * @return the response.
 */
private MatrixCursor doAnswerApiCommand(Uri uri){
  MatrixCursor matrixCursor=null;
  String lastPathSegment=uri.getLastPathSegment();
  if (BaseFile.CMD_CANCEL.equals(lastPathSegment)) {
    int taskId=ProviderUtils.getIntQueryParam(uri,BaseFile.PARAM_TASK_ID,0);
synchronized (mMapInterruption) {
      if (taskId == 0) {
        for (int i=0; i < mMapInterruption.size(); i++)         mMapInterruption.put(mMapInterruption.keyAt(i),true);
      }
 else       if (mMapInterruption.indexOfKey(taskId) >= 0)       mMapInterruption.put(taskId,true);
    }
    return null;
  }
 else   if (BaseFile.CMD_GET_DEFAULT_PATH.equals(lastPathSegment)) {
    return null;
  }
 else   if (BaseFile.CMD_IS_ANCESTOR_OF.equals(lastPathSegment)) {
    return doCheckAncestor(uri);
  }
 else   if (BaseFile.CMD_GET_PARENT.equals(lastPathSegment)) {
{
      String path=Uri.parse(uri.getQueryParameter(BaseFile.PARAM_SOURCE)).toString();
      String parentPath=getParentPath(path);
      if (parentPath == null) {
        if (Utils.doLog())         Log.d(CLASSNAME,""String_Node_Str"");
        return null;
      }
      FileEntry e=this.getFileEntryCached(parentPath);
      matrixCursor=BaseFileProviderUtils.newBaseFileCursor();
      int type=parentPath != null ? BaseFile.FILE_TYPE_DIRECTORY : BaseFile.FILE_TYPE_NOT_EXISTED;
      RowBuilder newRow=matrixCursor.newRow();
      newRow.add(0);
      newRow.add(BaseFile.genContentIdUriBase(getAuthority()).buildUpon().appendPath(parentPath).build().toString());
      newRow.add(e.path);
      newRow.add(e.displayName);
      newRow.add(e.canRead);
      newRow.add(e.canWrite);
      newRow.add(0);
      newRow.add(type);
      newRow.add(0);
      newRow.add(FileUtils.getResIcon(type,e.displayName));
      return matrixCursor;
    }
  }
 else   if (BaseFile.CMD_SHUTDOWN.equals(lastPathSegment)) {
  }
 else   if (BaseFile.CMD_CHECK_CONNECTION.equals(lastPathSegment)) {
    return getCheckConnectionCursor(uri);
  }
  return matrixCursor;
}","/** 
 * Answers the incoming URI.
 * @param uri the request URI.
 * @return the response.
 */
private MatrixCursor doAnswerApiCommand(Uri uri){
  MatrixCursor matrixCursor=null;
  String lastPathSegment=uri.getLastPathSegment();
  if (BaseFile.CMD_CANCEL.equals(lastPathSegment)) {
    int taskId=ProviderUtils.getIntQueryParam(uri,BaseFile.PARAM_TASK_ID,0);
synchronized (mMapInterruption) {
      if (taskId == 0) {
        for (int i=0; i < mMapInterruption.size(); i++)         mMapInterruption.put(mMapInterruption.keyAt(i),true);
      }
 else       if (mMapInterruption.indexOfKey(taskId) >= 0)       mMapInterruption.put(taskId,true);
    }
    return null;
  }
 else   if (BaseFile.CMD_GET_DEFAULT_PATH.equals(lastPathSegment)) {
    return null;
  }
 else   if (BaseFile.CMD_IS_ANCESTOR_OF.equals(lastPathSegment)) {
    return doCheckAncestor(uri);
  }
 else   if (BaseFile.CMD_GET_PARENT.equals(lastPathSegment)) {
{
      String path=Uri.parse(uri.getQueryParameter(BaseFile.PARAM_SOURCE)).toString();
      String parentPath=getParentPath(path);
      if (parentPath == null) {
        if (Utils.doLog())         Log.d(CLASSNAME,""String_Node_Str"");
        return null;
      }
      FileEntry e;
      try {
        e=this.getFileEntryCached(parentPath);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        return null;
      }
      if (e == null)       return null;
      matrixCursor=BaseFileProviderUtils.newBaseFileCursor();
      int type=parentPath != null ? BaseFile.FILE_TYPE_DIRECTORY : BaseFile.FILE_TYPE_NOT_EXISTED;
      RowBuilder newRow=matrixCursor.newRow();
      newRow.add(0);
      newRow.add(BaseFile.genContentIdUriBase(getAuthority()).buildUpon().appendPath(parentPath).build().toString());
      newRow.add(e.path);
      newRow.add(e.displayName);
      newRow.add(e.canRead);
      newRow.add(e.canWrite);
      newRow.add(0);
      newRow.add(type);
      newRow.add(0);
      newRow.add(FileUtils.getResIcon(type,e.displayName));
      return matrixCursor;
    }
  }
 else   if (BaseFile.CMD_SHUTDOWN.equals(lastPathSegment)) {
  }
 else   if (BaseFile.CMD_CHECK_CONNECTION.equals(lastPathSegment)) {
    return getCheckConnectionCursor(uri);
  }
  return matrixCursor;
}"
34423,"private void onKp2aLockKeyPressed(){
  sendBroadcast(new Intent(""String_Node_Str""));
}","private void onKp2aLockKeyPressed(){
  String action=getPackageName() + ""String_Node_Str"";
  android.util.Log.i(""String_Node_Str"",""String_Node_Str"" + action);
  sendBroadcast(new Intent(action));
}"
34424,"@Override public void onActivityResult(final JavaFileStorage.FileStorageSetupActivity setupAct,int requestCode,int resultCode,Intent data){
  logDebug(""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_ACCOUNT_PICKER:
    logDebug(""String_Node_Str"");
  if (resultCode == Activity.RESULT_OK && data != null && data.getExtras() != null) {
    String accountName=data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
    if (accountName != null) {
      logDebug(""String_Node_Str"" + accountName);
      initializeAccountOrPath(setupAct,accountName);
      return;
    }
  }
Log.i(TAG,""String_Node_Str"");
((Activity)setupAct).setResult(Activity.RESULT_CANCELED,data);
((Activity)setupAct).finish();
case REQUEST_AUTHORIZATION:
if (resultCode == Activity.RESULT_OK) {
String accountName=data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
if (accountName != null) {
Log.d(TAG,""String_Node_Str"" + accountName);
initializeAccountOrPath(setupAct,accountName);
}
 else {
Log.d(TAG,""String_Node_Str"");
}
}
 else {
Log.i(TAG,""String_Node_Str"");
((Activity)setupAct).setResult(Activity.RESULT_CANCELED,data);
((Activity)setupAct).finish();
}
}
}","@Override public void onActivityResult(final JavaFileStorage.FileStorageSetupActivity setupAct,int requestCode,int resultCode,Intent data){
  logDebug(""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_ACCOUNT_PICKER:
    logDebug(""String_Node_Str"");
  if (resultCode == Activity.RESULT_OK && data != null && data.getExtras() != null) {
    String accountName=data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
    if (accountName != null) {
      logDebug(""String_Node_Str"" + accountName);
      initializeAccountOrPath(setupAct,accountName);
      return;
    }
  }
logDebug(""String_Node_Str"");
((Activity)setupAct).setResult(Activity.RESULT_CANCELED,data);
((Activity)setupAct).finish();
case REQUEST_AUTHORIZATION:
if (resultCode == Activity.RESULT_OK) {
String accountName=data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
if (accountName != null) {
logDebug(""String_Node_Str"" + accountName);
initializeAccountOrPath(setupAct,accountName);
}
 else {
logDebug(""String_Node_Str"");
}
}
 else {
logDebug(""String_Node_Str"");
((Activity)setupAct).setResult(Activity.RESULT_CANCELED,data);
((Activity)setupAct).finish();
}
}
}"
34425,"@Override protected AsyncTaskResult<String> doInBackground(Object... arg0){
  try {
    if (!mAccountData.containsKey(accountName)) {
      AccountData newAccountData=new AccountData();
      newAccountData.drive=createDriveService(accountName,activity);
      mAccountData.put(accountName,newAccountData);
      logDebug(""String_Node_Str"" + accountName);
      newAccountData.mFolderCache=buildFoldersCache(accountName);
      About about=newAccountData.drive.about().get().execute();
      newAccountData.mRootFolderId=about.getRootFolderId();
    }
    if (setupAct.getProcessName().equals(PROCESS_NAME_SELECTFILE))     setupAct.getState().putString(EXTRA_PATH,getRootPathForAccount(accountName));
    return new AsyncTaskResult<String>(""String_Node_Str"");
  }
 catch (  Exception anyError) {
    return new AsyncTaskResult<String>(anyError);
  }
}","@Override protected AsyncTaskResult<String> doInBackground(Object... arg0){
  try {
    if (!mAccountData.containsKey(accountName)) {
      AccountData newAccountData=new AccountData();
      newAccountData.drive=createDriveService(accountName,activity);
      mAccountData.put(accountName,newAccountData);
      logDebug(""String_Node_Str"" + accountName);
      finishInitialization(newAccountData,accountName);
    }
    if (setupAct.getProcessName().equals(PROCESS_NAME_SELECTFILE))     setupAct.getState().putString(EXTRA_PATH,getRootPathForAccount(accountName));
    return new AsyncTaskResult<String>(""String_Node_Str"");
  }
 catch (  Exception anyError) {
    return new AsyncTaskResult<String>(anyError);
  }
}"
34426,"private void verify() throws FileNotFoundException, UnsupportedEncodingException {
  if (mAccountLocalPath.equals(""String_Node_Str""))   return;
  String[] parts=mAccountLocalPath.split(""String_Node_Str"");
  AccountData accountData=mAccountData.get(mAccount);
  if (accountData == null) {
    throw new IllegalStateException(""String_Node_Str"" + mAccount + ""String_Node_Str"");
  }
  String parentId=accountData.mRootFolderId;
  for (int i=0; i < parts.length; i++) {
    String part=parts[i];
    logDebug(""String_Node_Str"" + part);
    int indexOfSeparator=part.lastIndexOf(NAME_ID_SEP);
    if (indexOfSeparator < 0)     throw new FileNotFoundException(""String_Node_Str"" + mAccountLocalPath);
    String id=part.substring(indexOfSeparator + NAME_ID_SEP.length());
    String name=decode(part.substring(0,indexOfSeparator));
    logDebug(""String_Node_Str"" + name);
    FileSystemEntryData thisFolder=accountData.mFolderCache.get(id);
    if (thisFolder == null) {
      if (i == parts.length - 1) {
        thisFolder=tryAddFileToCache(this);
      }
      if (thisFolder == null)       throw new FileNotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ mAccountLocalPath+ ""String_Node_Str""+ mAccount);
    }
    if (thisFolder.parentIds.contains(parentId) == false)     throw new FileNotFoundException(""String_Node_Str"" + parentId + ""String_Node_Str""+ thisFolder.displayName+ ""String_Node_Str""+ mAccountLocalPath+ ""String_Node_Str""+ mAccount);
    if (thisFolder.displayName.equals(name) == false)     throw new FileNotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ name+ ""String_Node_Str""+ thisFolder.displayName+ ""String_Node_Str""+ mAccountLocalPath+ ""String_Node_Str""+ mAccount);
    parentId=id;
  }
}","private void verify() throws IOException {
  if (mAccountLocalPath.equals(""String_Node_Str""))   return;
  String[] parts=mAccountLocalPath.split(""String_Node_Str"");
  AccountData accountData=mAccountData.get(mAccount);
  if (accountData == null) {
    throw new IllegalStateException(""String_Node_Str"" + mAccount + ""String_Node_Str"");
  }
  finishInitialization(accountData,mAccount);
  String parentId=accountData.mRootFolderId;
  for (int i=0; i < parts.length; i++) {
    String part=parts[i];
    logDebug(""String_Node_Str"" + part);
    int indexOfSeparator=part.lastIndexOf(NAME_ID_SEP);
    if (indexOfSeparator < 0)     throw new FileNotFoundException(""String_Node_Str"" + mAccountLocalPath);
    String id=part.substring(indexOfSeparator + NAME_ID_SEP.length());
    String name=decode(part.substring(0,indexOfSeparator));
    logDebug(""String_Node_Str"" + name);
    FileSystemEntryData thisFolder=accountData.mFolderCache.get(id);
    if (thisFolder == null) {
      if (i == parts.length - 1) {
        thisFolder=tryAddFileToCache(this);
      }
      if (thisFolder == null)       throw new FileNotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ mAccountLocalPath+ ""String_Node_Str""+ mAccount);
    }
    if (thisFolder.parentIds.contains(parentId) == false)     throw new FileNotFoundException(""String_Node_Str"" + parentId + ""String_Node_Str""+ thisFolder.displayName+ ""String_Node_Str""+ mAccountLocalPath+ ""String_Node_Str""+ mAccount);
    if (thisFolder.displayName.equals(name) == false)     throw new FileNotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ name+ ""String_Node_Str""+ thisFolder.displayName+ ""String_Node_Str""+ mAccountLocalPath+ ""String_Node_Str""+ mAccount);
    parentId=id;
  }
}"
34427,"@Override public FileEntry getFileEntry(String filename) throws Exception {
  try {
    logDebug(""String_Node_Str"" + filename);
    GDrivePath gdrivePath=new GDrivePath(filename);
    FileEntry res=convertToFileEntry(getFileForPath(gdrivePath,getDriveService(gdrivePath.getAccount())),filename);
    logDebug(""String_Node_Str"" + res);
    return res;
  }
 catch (  Exception e) {
    Log.d(TAG,""String_Node_Str"" + e);
    throw convertException(e);
  }
}","@Override public FileEntry getFileEntry(String filename) throws Exception {
  try {
    logDebug(""String_Node_Str"" + filename);
    GDrivePath gdrivePath=new GDrivePath(filename);
    FileEntry res=convertToFileEntry(getFileForPath(gdrivePath,getDriveService(gdrivePath.getAccount())),filename);
    logDebug(""String_Node_Str"" + res);
    return res;
  }
 catch (  Exception e) {
    logDebug(""String_Node_Str"" + e);
    throw convertException(e);
  }
}"
34428,"private void initializeAccountOrPath(final JavaFileStorage.FileStorageSetupActivity setupAct,final String accountNameOrPath){
  final Activity activity=((Activity)setupAct);
  String accountNameTemp;
  GDrivePath gdrivePath=null;
  if (accountNameOrPath.startsWith(getProtocolPrefix())) {
    gdrivePath=new GDrivePath();
    try {
      gdrivePath.setPathWithoutVerify(accountNameOrPath);
    }
 catch (    Exception e) {
      finishWithError(setupAct,e);
    }
    accountNameTemp=gdrivePath.getAccount();
  }
 else   accountNameTemp=accountNameOrPath;
  final String accountName=accountNameTemp;
  AsyncTask<Object,Void,AsyncTaskResult<String>> task=new AsyncTask<Object,Void,AsyncTaskResult<String>>(){
    @Override protected AsyncTaskResult<String> doInBackground(    Object... arg0){
      try {
        if (!mAccountData.containsKey(accountName)) {
          AccountData newAccountData=new AccountData();
          newAccountData.drive=createDriveService(accountName,activity);
          mAccountData.put(accountName,newAccountData);
          logDebug(""String_Node_Str"" + accountName);
          newAccountData.mFolderCache=buildFoldersCache(accountName);
          About about=newAccountData.drive.about().get().execute();
          newAccountData.mRootFolderId=about.getRootFolderId();
        }
        if (setupAct.getProcessName().equals(PROCESS_NAME_SELECTFILE))         setupAct.getState().putString(EXTRA_PATH,getRootPathForAccount(accountName));
        return new AsyncTaskResult<String>(""String_Node_Str"");
      }
 catch (      Exception anyError) {
        return new AsyncTaskResult<String>(anyError);
      }
    }
    @Override protected void onPostExecute(    AsyncTaskResult<String> result){
      Exception error=result.getError();
      if (error != null) {
        if (UserRecoverableAuthIOException.class.isAssignableFrom(error.getClass())) {
          mAccountData.remove(accountName);
          activity.startActivityForResult(((UserRecoverableAuthIOException)error).getIntent(),REQUEST_AUTHORIZATION);
        }
 else {
          finishWithError(setupAct,error);
        }
      }
 else       if (isCancelled()) {
        logDebug(""String_Node_Str"");
        activity.setResult(Activity.RESULT_CANCELED);
        activity.finish();
      }
 else {
        finishActivityWithSuccess(setupAct);
      }
    }
  }
;
  task.execute(new Object[]{});
}","private void initializeAccountOrPath(final JavaFileStorage.FileStorageSetupActivity setupAct,final String accountNameOrPath){
  final Activity activity=((Activity)setupAct);
  String accountNameTemp;
  GDrivePath gdrivePath=null;
  if (accountNameOrPath.startsWith(getProtocolPrefix())) {
    gdrivePath=new GDrivePath();
    try {
      gdrivePath.setPathWithoutVerify(accountNameOrPath);
    }
 catch (    Exception e) {
      finishWithError(setupAct,e);
    }
    accountNameTemp=gdrivePath.getAccount();
  }
 else   accountNameTemp=accountNameOrPath;
  final String accountName=accountNameTemp;
  AsyncTask<Object,Void,AsyncTaskResult<String>> task=new AsyncTask<Object,Void,AsyncTaskResult<String>>(){
    @Override protected AsyncTaskResult<String> doInBackground(    Object... arg0){
      try {
        if (!mAccountData.containsKey(accountName)) {
          AccountData newAccountData=new AccountData();
          newAccountData.drive=createDriveService(accountName,activity);
          mAccountData.put(accountName,newAccountData);
          logDebug(""String_Node_Str"" + accountName);
          finishInitialization(newAccountData,accountName);
        }
        if (setupAct.getProcessName().equals(PROCESS_NAME_SELECTFILE))         setupAct.getState().putString(EXTRA_PATH,getRootPathForAccount(accountName));
        return new AsyncTaskResult<String>(""String_Node_Str"");
      }
 catch (      Exception anyError) {
        return new AsyncTaskResult<String>(anyError);
      }
    }
    @Override protected void onPostExecute(    AsyncTaskResult<String> result){
      Exception error=result.getError();
      if (error != null) {
        if (UserRecoverableAuthIOException.class.isAssignableFrom(error.getClass())) {
          mAccountData.remove(accountName);
          activity.startActivityForResult(((UserRecoverableAuthIOException)error).getIntent(),REQUEST_AUTHORIZATION);
        }
 else {
          finishWithError(setupAct,error);
        }
      }
 else       if (isCancelled()) {
        logDebug(""String_Node_Str"");
        activity.setResult(Activity.RESULT_CANCELED);
        activity.finish();
      }
 else {
        finishActivityWithSuccess(setupAct);
      }
    }
  }
;
  task.execute(new Object[]{});
}"
34429,"public String getGDriveId() throws InvalidPathException, UnsupportedEncodingException {
  String pathWithoutTrailingSlash=mAccountLocalPath;
  if (pathWithoutTrailingSlash.endsWith(""String_Node_Str""))   pathWithoutTrailingSlash=pathWithoutTrailingSlash.substring(0,pathWithoutTrailingSlash.length() - 1);
  if (pathWithoutTrailingSlash.equals(""String_Node_Str"")) {
    return mAccountData.get(mAccount).mRootFolderId;
  }
  String lastPart=pathWithoutTrailingSlash.substring(pathWithoutTrailingSlash.lastIndexOf(NAME_ID_SEP) + NAME_ID_SEP.length());
  if (lastPart.contains(""String_Node_Str""))   throw new InvalidPathException(""String_Node_Str"" + mAccountLocalPath);
  return decode(lastPart);
}","public String getGDriveId() throws InvalidPathException, IOException {
  String pathWithoutTrailingSlash=mAccountLocalPath;
  if (pathWithoutTrailingSlash.endsWith(""String_Node_Str""))   pathWithoutTrailingSlash=pathWithoutTrailingSlash.substring(0,pathWithoutTrailingSlash.length() - 1);
  if (pathWithoutTrailingSlash.equals(""String_Node_Str"")) {
    AccountData accountData=mAccountData.get(mAccount);
    finishInitialization(accountData,mAccount);
    return accountData.mRootFolderId;
  }
  String lastPart=pathWithoutTrailingSlash.substring(pathWithoutTrailingSlash.lastIndexOf(NAME_ID_SEP) + NAME_ID_SEP.length());
  if (lastPart.contains(""String_Node_Str""))   throw new InvalidPathException(""String_Node_Str"" + mAccountLocalPath);
  return decode(lastPart);
}"
34430,"protected void finishActivityWithSuccess(FileStorageSetupActivity setupActivity){
  Activity activity=(Activity)setupActivity;
  if (setupActivity.getProcessName().equals(PROCESS_NAME_FILE_USAGE_SETUP)) {
    Intent data=new Intent();
    data.putExtra(EXTRA_IS_FOR_SAVE,setupActivity.isForSave());
    data.putExtra(EXTRA_PATH,setupActivity.getPath());
    activity.setResult(RESULT_FILEUSAGE_PREPARED,data);
    activity.finish();
    return;
  }
  if (setupActivity.getProcessName().equals(PROCESS_NAME_SELECTFILE)) {
    Intent data=new Intent();
    String path=setupActivity.getState().getString(EXTRA_PATH);
    if (path != null)     data.putExtra(EXTRA_PATH,path);
    activity.setResult(RESULT_FILECHOOSER_PREPARED,data);
    activity.finish();
    return;
  }
  Log.w(""String_Node_Str"",""String_Node_Str"" + setupActivity.getProcessName());
}","protected void finishActivityWithSuccess(FileStorageSetupActivity setupActivity){
  Activity activity=(Activity)setupActivity;
  if (setupActivity.getProcessName().equals(PROCESS_NAME_FILE_USAGE_SETUP)) {
    Intent data=new Intent();
    data.putExtra(EXTRA_IS_FOR_SAVE,setupActivity.isForSave());
    data.putExtra(EXTRA_PATH,setupActivity.getPath());
    activity.setResult(RESULT_FILEUSAGE_PREPARED,data);
    activity.finish();
    return;
  }
  if (setupActivity.getProcessName().equals(PROCESS_NAME_SELECTFILE)) {
    Intent data=new Intent();
    String path=setupActivity.getState().getString(EXTRA_PATH);
    if (path != null)     data.putExtra(EXTRA_PATH,path);
    activity.setResult(RESULT_FILECHOOSER_PREPARED,data);
    activity.finish();
    return;
  }
  logDebug(""String_Node_Str"" + setupActivity.getProcessName());
}"
34431,"protected void finishWithError(final FileStorageSetupActivity setupAct,Exception error){
  Log.e(""String_Node_Str"",""String_Node_Str"" + error.toString());
  error.printStackTrace();
  final Activity activity=(Activity)setupAct;
  int resultCode=Activity.RESULT_CANCELED;
  if (activity.getIntent().getBooleanExtra(EXTRA_ALWAYS_RETURN_SUCCESS,false)) {
    Log.d(TAG,""String_Node_Str"");
    finishActivityWithSuccess(setupAct);
    return;
  }
  Intent retData=new Intent();
  retData.putExtra(EXTRA_ERROR_MESSAGE,error.getMessage());
  activity.setResult(resultCode,retData);
  activity.finish();
}","protected void finishWithError(final FileStorageSetupActivity setupAct,Exception error){
  logDebug(""String_Node_Str"" + error.toString());
  error.printStackTrace();
  final Activity activity=(Activity)setupAct;
  int resultCode=Activity.RESULT_CANCELED;
  if (activity.getIntent().getBooleanExtra(EXTRA_ALWAYS_RETURN_SUCCESS,false)) {
    logDebug(""String_Node_Str"");
    finishActivityWithSuccess(setupAct);
    return;
  }
  Intent retData=new Intent();
  retData.putExtra(EXTRA_ERROR_MESSAGE,error.getMessage());
  activity.setResult(resultCode,retData);
  activity.finish();
}"
34432,"private ContainerLaunchContext setupContainerLaunchContext(TaskStatus taskStatus) throws Exception {
  String taskRoleName=taskStatus.getTaskRoleName();
  Integer taskIndex=taskStatus.getTaskIndex();
  Integer serviceVersion=getServiceVersion(taskRoleName);
  UserDescriptor user=requestManager.getUser();
  Boolean generateContainerIpList=requestManager.getPlatParams().getGenerateContainerIpList();
  List<String> sourceLocations=requestManager.getTaskServices().get(taskRoleName).getSourceLocations();
  String entryPoint=requestManager.getTaskServices().get(taskRoleName).getEntryPoint();
  Map<String,Ports> portDefinitions=requestManager.getTaskResources().get(taskRoleName).getPortDefinitions();
  List<ValueRange> portRanges=taskStatus.getContainerPorts();
  Map<String,LocalResource> localResources=new HashMap<>();
  try {
    for (    String location : sourceLocations) {
      HadoopUtils.addToLocalResources(localResources,location);
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
  if (generateContainerIpList) {
    String location=hdfsStore.getHdfsStruct().getContainerIpListFilePath(conf.getFrameworkName());
    HadoopUtils.addToLocalResources(localResources,location);
  }
  Map<String,String> localEnvs=new HashMap<>();
  localEnvs.put(GlobalConstants.ENV_VAR_HADOOP_USER_NAME,user.getName());
  localEnvs.put(GlobalConstants.ENV_VAR_FRAMEWORK_NAME,conf.getFrameworkName());
  localEnvs.put(GlobalConstants.ENV_VAR_FRAMEWORK_VERSION,conf.getFrameworkVersion().toString());
  localEnvs.put(GlobalConstants.ENV_VAR_TASK_ROLE_NAME,taskRoleName);
  localEnvs.put(GlobalConstants.ENV_VAR_TASK_INDEX,taskIndex.toString());
  localEnvs.put(GlobalConstants.ENV_VAR_SERVICE_VERSION,serviceVersion.toString());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_CONNECT_STRING,conf.getZkConnectString());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_ROOT_DIR,conf.getZkRootDir());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_COMPRESSION_ENABLE,conf.getZkCompressionEnable().toString());
  localEnvs.put(GlobalConstants.ENV_VAR_AM_VERSION,conf.getAmVersion().toString());
  localEnvs.put(GlobalConstants.ENV_VAR_APP_ID,conf.getApplicationId());
  localEnvs.put(GlobalConstants.ENV_VAR_ATTEMPT_ID,conf.getAttemptId());
  localEnvs.put(GlobalConstants.ENV_VAR_CONTAINER_GPUS,taskStatus.getContainerGpus().toString());
  String containerPortsString=ValueRangeUtils.toEnviromentVariableString(portRanges,portDefinitions);
  localEnvs.put(GlobalConstants.ENV_VAR_CONTAINER_PORTS,containerPortsString);
  if (generateContainerIpList) {
    localEnvs.put(GlobalConstants.ENV_VAR_CONTAINER_IP,taskStatus.getContainerIp());
  }
  String command=String.format(""String_Node_Str"",entryPoint,ApplicationConstants.LOG_DIR_EXPANSION_VAR + File.separator);
  ContainerLaunchContext launchContext=Records.newRecord(ContainerLaunchContext.class);
  launchContext.setLocalResources(localResources);
  launchContext.setCommands(Collections.singletonList(command));
  launchContext.setServiceData(new HashMap<>());
  launchContext.setEnvironment(localEnvs);
  return launchContext;
}","private ContainerLaunchContext setupContainerLaunchContext(TaskStatus taskStatus) throws Exception {
  String taskRoleName=taskStatus.getTaskRoleName();
  Integer taskIndex=taskStatus.getTaskIndex();
  Integer serviceVersion=getServiceVersion(taskRoleName);
  UserDescriptor user=requestManager.getUser();
  Boolean generateContainerIpList=requestManager.getPlatParams().getGenerateContainerIpList();
  List<String> sourceLocations=requestManager.getTaskServices().get(taskRoleName).getSourceLocations();
  String entryPoint=requestManager.getTaskServices().get(taskRoleName).getEntryPoint();
  Map<String,Ports> portDefinitions=requestManager.getTaskResources().get(taskRoleName).getPortDefinitions();
  List<ValueRange> portRanges=taskStatus.getContainerPorts();
  Map<String,LocalResource> localResources=new HashMap<>();
  try {
    for (    String location : sourceLocations) {
      HadoopUtils.addToLocalResources(localResources,location);
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
  if (generateContainerIpList) {
    String location=hdfsStore.getHdfsStruct().getContainerIpListFilePath(conf.getFrameworkName());
    HadoopUtils.addToLocalResources(localResources,location);
  }
  Map<String,String> localEnvs=new HashMap<>();
  localEnvs.put(GlobalConstants.ENV_VAR_HADOOP_USER_NAME,user.getName());
  localEnvs.put(GlobalConstants.ENV_VAR_FRAMEWORK_NAME,conf.getFrameworkName());
  localEnvs.put(GlobalConstants.ENV_VAR_FRAMEWORK_VERSION,conf.getFrameworkVersion().toString());
  localEnvs.put(GlobalConstants.ENV_VAR_TASK_ROLE_NAME,taskRoleName);
  localEnvs.put(GlobalConstants.ENV_VAR_TASK_INDEX,taskIndex.toString());
  localEnvs.put(GlobalConstants.ENV_VAR_SERVICE_VERSION,serviceVersion.toString());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_CONNECT_STRING,conf.getZkConnectString());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_ROOT_DIR,conf.getZkRootDir());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_COMPRESSION_ENABLE,conf.getZkCompressionEnable().toString());
  localEnvs.put(GlobalConstants.ENV_VAR_AM_VERSION,conf.getAmVersion().toString());
  localEnvs.put(GlobalConstants.ENV_VAR_APP_ID,conf.getApplicationId());
  localEnvs.put(GlobalConstants.ENV_VAR_ATTEMPT_ID,conf.getAttemptId());
  localEnvs.put(GlobalConstants.ENV_VAR_CONTAINER_GPUS,taskStatus.getContainerGpus().toString());
  String containerPortsString=ValueRangeUtils.toEnviromentVariableString(portRanges,portDefinitions);
  if (portDefinitions != null && !portDefinitions.isEmpty()) {
    if (containerPortsString.split(""String_Node_Str"").length == portDefinitions.size()) {
      localEnvs.put(GlobalConstants.ENV_VAR_CONTAINER_PORTS,containerPortsString);
    }
 else {
      LOGGER.logError(""String_Node_Str"" + containerPortsString + ""String_Node_Str"");
    }
  }
  if (generateContainerIpList) {
    localEnvs.put(GlobalConstants.ENV_VAR_CONTAINER_IP,taskStatus.getContainerIp());
  }
  String command=String.format(""String_Node_Str"",entryPoint,ApplicationConstants.LOG_DIR_EXPANSION_VAR + File.separator);
  ContainerLaunchContext launchContext=Records.newRecord(ContainerLaunchContext.class);
  launchContext.setLocalResources(localResources);
  launchContext.setCommands(Collections.singletonList(command));
  launchContext.setServiceData(new HashMap<>());
  launchContext.setEnvironment(localEnvs);
  return launchContext;
}"
34433,"public static String toEnviromentVariableString(List<ValueRange> portRanges,Map<String,Ports> portsDefinitions){
  StringBuilder portsString=new StringBuilder();
  if (portsDefinitions != null && !portsDefinitions.isEmpty()) {
    Iterator iter=portsDefinitions.entrySet().iterator();
    int basePort=0;
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String key=(String)entry.getKey();
      Ports ports=(Ports)entry.getValue();
      if (ports.getStart() > 0) {
        portsString.append(key + ""String_Node_Str"" + ports.getStart());
        for (int i=2; i <= ports.getCount(); i++) {
          portsString.append(""String_Node_Str"" + (ports.getStart() + i - 1));
        }
        portsString.append(""String_Node_Str"");
      }
 else {
        List<ValueRange> assignPorts=ValueRangeUtils.getSubRange(portRanges,ports.getCount(),basePort);
        basePort=assignPorts.get(assignPorts.size() - 1).getEnd() + 1;
        portsString.append(key + ""String_Node_Str"" + assignPorts.get(0).toDetailString(""String_Node_Str""));
        for (int i=1; i < assignPorts.size(); i++) {
          portsString.append(""String_Node_Str"" + assignPorts.get(i).toDetailString(""String_Node_Str""));
        }
        portsString.append(""String_Node_Str"");
      }
    }
  }
  return portsString.toString();
}","public static String toEnviromentVariableString(List<ValueRange> portRanges,Map<String,Ports> portsDefinitions){
  StringBuilder portsString=new StringBuilder();
  if (portsDefinitions != null && !portsDefinitions.isEmpty()) {
    Iterator iter=portsDefinitions.entrySet().iterator();
    int basePort=0;
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String key=(String)entry.getKey();
      Ports ports=(Ports)entry.getValue();
      if (ports.getStart() > 0) {
        portsString.append(key + ""String_Node_Str"" + ports.getStart());
        for (int i=2; i <= ports.getCount(); i++) {
          portsString.append(""String_Node_Str"" + (ports.getStart() + i - 1));
        }
        portsString.append(""String_Node_Str"");
      }
 else {
        List<ValueRange> assignPorts=ValueRangeUtils.getSubRangeSequence(portRanges,ports.getCount(),basePort);
        basePort=assignPorts.get(assignPorts.size() - 1).getEnd() + 1;
        portsString.append(key + ""String_Node_Str"" + assignPorts.get(0).toDetailString(""String_Node_Str""));
        for (int i=1; i < assignPorts.size(); i++) {
          portsString.append(""String_Node_Str"" + assignPorts.get(i).toDetailString(""String_Node_Str""));
        }
        portsString.append(""String_Node_Str"");
      }
    }
  }
  return portsString.toString();
}"
34434,"public static List<ValueRange> getSubRange(List<ValueRange> availableRange,int requestNumber,int baseValue){
  List<ValueRange> resultList=new ArrayList<ValueRange>();
  if (getValueNumber(availableRange) <= 0) {
    return resultList;
  }
  Random random=new Random();
  int maxValue=availableRange.get(availableRange.size() - 1).getEnd();
  int randomBase=random.nextInt(maxValue) + 1;
  while (randomBase > 0) {
    resultList.clear();
    int needNumber=requestNumber;
    randomBase=randomBase / 2;
    int newbaseValue=baseValue + randomBase;
    for (    ValueRange range : availableRange) {
      if (range.getEnd() < newbaseValue) {
        continue;
      }
      int start=Math.max(range.getBegin(),newbaseValue);
      if ((range.getEnd() - start + 1) >= needNumber) {
        resultList.add(ValueRange.newInstance(start,start + needNumber - 1));
        return resultList;
      }
 else {
        resultList.add(ValueRange.newInstance(start,range.getEnd()));
        needNumber-=(range.getEnd() - start + 1);
      }
    }
  }
  return null;
}","public static List<ValueRange> getSubRange(List<ValueRange> availableRange,int requestNumber,int baseValue){
  List<ValueRange> resultList=new ArrayList<ValueRange>();
  if (getValueNumber(availableRange) <= 0) {
    return resultList;
  }
  Random random=new Random();
  int maxValue=availableRange.get(availableRange.size() - 1).getEnd();
  int randomBase=random.nextInt(maxValue) + 1;
  while (randomBase > 0) {
    resultList.clear();
    int needNumber=requestNumber;
    randomBase=randomBase / 2;
    int newBaseValue=baseValue + randomBase;
    for (    ValueRange range : availableRange) {
      if (range.getEnd() < newBaseValue) {
        continue;
      }
      int start=Math.max(range.getBegin(),newBaseValue);
      if ((range.getEnd() - start + 1) >= needNumber) {
        resultList.add(ValueRange.newInstance(start,start + needNumber - 1));
        return resultList;
      }
 else {
        resultList.add(ValueRange.newInstance(start,range.getEnd()));
        needNumber-=(range.getEnd() - start + 1);
      }
    }
  }
  return resultList;
}"
34435,"@Test public void ValueRangeUtilsTest(){
  List<ValueRange> testRangeList=new ArrayList<ValueRange>();
  testRangeList.add(ValueRange.newInstance(6,7));
  testRangeList.add(ValueRange.newInstance(10,100));
  testRangeList.add(ValueRange.newInstance(3,5));
  testRangeList.add(ValueRange.newInstance(90,102));
  List<ValueRange> testRangeList2=new ArrayList<ValueRange>();
  testRangeList2.add(ValueRange.newInstance(2,3));
  testRangeList2.add(ValueRange.newInstance(7,8));
  testRangeList2.add(ValueRange.newInstance(10,20));
  List<ValueRange> testRangeList3=ValueRangeUtils.cloneList(testRangeList2);
  List<ValueRange> sortedResult=ValueRangeUtils.SortRangeList(testRangeList);
  Assert.assertEquals(3,sortedResult.get(0).getBegin().intValue());
  Assert.assertEquals(6,sortedResult.get(1).getBegin().intValue());
  Assert.assertEquals(10,sortedResult.get(2).getBegin().intValue());
  Assert.assertEquals(90,sortedResult.get(3).getBegin().intValue());
  List<ValueRange> coalesceResult=ValueRangeUtils.coalesceRangeList(testRangeList);
  Assert.assertEquals(2,coalesceResult.size());
  Assert.assertEquals(3,coalesceResult.get(0).getBegin().intValue());
  Assert.assertEquals(7,coalesceResult.get(0).getEnd().intValue());
  Assert.assertEquals(10,coalesceResult.get(1).getBegin().intValue());
  Assert.assertEquals(102,coalesceResult.get(1).getEnd().intValue());
  List<ValueRange> result=ValueRangeUtils.intersectRangeList(coalesceResult,testRangeList2);
  Assert.assertEquals(3,result.size());
  Assert.assertEquals(3,result.get(0).getBegin().intValue());
  Assert.assertEquals(3,result.get(0).getEnd().intValue());
  Assert.assertEquals(7,result.get(1).getBegin().intValue());
  Assert.assertEquals(7,result.get(1).getEnd().intValue());
  Assert.assertEquals(10,result.get(2).getBegin().intValue());
  Assert.assertEquals(20,result.get(2).getEnd().intValue());
  result=ValueRangeUtils.subtractRange(coalesceResult,testRangeList2);
  Assert.assertEquals(2,result.size());
  Assert.assertEquals(4,result.get(0).getBegin().intValue());
  Assert.assertEquals(6,result.get(0).getEnd().intValue());
  Assert.assertEquals(21,result.get(1).getBegin().intValue());
  Assert.assertEquals(102,result.get(1).getEnd().intValue());
  List<ValueRange> testRangeList7=new ArrayList<ValueRange>();
  testRangeList7.add(ValueRange.newInstance(80,80));
  result=ValueRangeUtils.subtractRange(coalesceResult,testRangeList7);
  Assert.assertEquals(3,result.size());
  Assert.assertEquals(3,result.get(0).getBegin().intValue());
  Assert.assertEquals(7,result.get(0).getEnd().intValue());
  Assert.assertEquals(10,result.get(1).getBegin().intValue());
  Assert.assertEquals(79,result.get(1).getEnd().intValue());
  Assert.assertEquals(81,result.get(2).getBegin().intValue());
  Assert.assertEquals(102,result.get(2).getEnd().intValue());
  result=ValueRangeUtils.addRange(sortedResult,testRangeList2);
  Assert.assertEquals(2,result.size());
  Assert.assertEquals(2,result.get(0).getBegin().intValue());
  Assert.assertEquals(8,result.get(0).getEnd().intValue());
  Assert.assertEquals(10,result.get(1).getBegin().intValue());
  Assert.assertEquals(102,result.get(1).getEnd().intValue());
  List<ValueRange> testRangeList4=new ArrayList<ValueRange>();
  testRangeList4.add(ValueRange.newInstance(2,3));
  Assert.assertTrue(ValueRangeUtils.fitInRange(testRangeList4,testRangeList3));
  List<ValueRange> testRangeList5=new ArrayList<ValueRange>();
  testRangeList5.add(ValueRange.newInstance(1,3));
  Assert.assertTrue(!ValueRangeUtils.fitInRange(testRangeList5,testRangeList3));
  List<ValueRange> testRangeList6=new ArrayList<ValueRange>();
  testRangeList6.add(ValueRange.newInstance(9,9));
  Assert.assertTrue(!ValueRangeUtils.fitInRange(testRangeList6,testRangeList3));
  result=ValueRangeUtils.getSubRange(testRangeList3,1,0);
  Assert.assertEquals(1,result.size());
  Assert.assertEquals(1,ValueRangeUtils.getValueNumber(result));
  result=ValueRangeUtils.getSubRange(testRangeList3,3,0);
  Assert.assertEquals(3,ValueRangeUtils.getValueNumber(result));
  result=ValueRangeUtils.getSubRange(testRangeList3,3,10);
  Assert.assertEquals(3,ValueRangeUtils.getValueNumber(result));
  Assert.assertTrue(result.get(0).getBegin() > 10);
  Assert.assertTrue(result.get(0).getEnd() > 10);
  List<ValueRange> testRangeList10=new ArrayList<ValueRange>();
  testRangeList10.add(ValueRange.newInstance(80,80));
  testRangeList10.add(ValueRange.newInstance(80,81));
  testRangeList10.add(ValueRange.newInstance(100,103));
  int[] expectedResult={80,81,100,101,102,103};
  for (int i=0; i < ValueRangeUtils.getValueNumber(testRangeList10); i++) {
    Assert.assertEquals(expectedResult[i],ValueRangeUtils.getValue(testRangeList10,i).intValue());
  }
  Map<String,Ports> portDefinitions=new HashMap<String,Ports>();
  Ports ports1=new Ports();
  ports1.setCount(2);
  ports1.setStart(8000);
  portDefinitions.put(""String_Node_Str"",ports1);
  Ports ports2=new Ports();
  ports2.setCount(4);
  ports2.setStart(9000);
  portDefinitions.put(""String_Node_Str"",ports2);
  List<ValueRange> testValueRange=new ArrayList<ValueRange>();
  testValueRange.add(ValueRange.newInstance(8000,8001));
  List<ValueRange> testValueRange2=new ArrayList<ValueRange>();
  testValueRange.add(ValueRange.newInstance(9000,9003));
  String environmentString=ValueRangeUtils.toEnviromentVariableString(testValueRange,portDefinitions);
  Assert.assertEquals(environmentString,""String_Node_Str"");
  Map<String,Ports> portDefinitions2=new HashMap<String,Ports>();
  Ports ports3=new Ports();
  ports3.setCount(2);
  ports3.setStart(0);
  portDefinitions2.put(""String_Node_Str"",ports3);
  Ports ports4=new Ports();
  ports4.setCount(4);
  ports4.setStart(0);
  portDefinitions2.put(""String_Node_Str"",ports4);
  environmentString=ValueRangeUtils.toEnviromentVariableString(testRangeList,portDefinitions2);
  Assert.assertEquals(environmentString.split(""String_Node_Str"").length,2);
  Assert.assertEquals(environmentString.split(""String_Node_Str"").length,5);
}","@Test public void ValueRangeUtilsTest(){
  List<ValueRange> testRangeList=new ArrayList<ValueRange>();
  testRangeList.add(ValueRange.newInstance(6,7));
  testRangeList.add(ValueRange.newInstance(10,100));
  testRangeList.add(ValueRange.newInstance(3,5));
  testRangeList.add(ValueRange.newInstance(90,102));
  List<ValueRange> testRangeList2=new ArrayList<ValueRange>();
  testRangeList2.add(ValueRange.newInstance(2,3));
  testRangeList2.add(ValueRange.newInstance(7,8));
  testRangeList2.add(ValueRange.newInstance(10,20));
  List<ValueRange> testRangeList3=ValueRangeUtils.cloneList(testRangeList2);
  List<ValueRange> sortedResult=ValueRangeUtils.SortRangeList(testRangeList);
  Assert.assertEquals(3,sortedResult.get(0).getBegin().intValue());
  Assert.assertEquals(6,sortedResult.get(1).getBegin().intValue());
  Assert.assertEquals(10,sortedResult.get(2).getBegin().intValue());
  Assert.assertEquals(90,sortedResult.get(3).getBegin().intValue());
  List<ValueRange> coalesceResult=ValueRangeUtils.coalesceRangeList(testRangeList);
  Assert.assertEquals(2,coalesceResult.size());
  Assert.assertEquals(3,coalesceResult.get(0).getBegin().intValue());
  Assert.assertEquals(7,coalesceResult.get(0).getEnd().intValue());
  Assert.assertEquals(10,coalesceResult.get(1).getBegin().intValue());
  Assert.assertEquals(102,coalesceResult.get(1).getEnd().intValue());
  List<ValueRange> result=ValueRangeUtils.intersectRangeList(coalesceResult,testRangeList2);
  Assert.assertEquals(3,result.size());
  Assert.assertEquals(3,result.get(0).getBegin().intValue());
  Assert.assertEquals(3,result.get(0).getEnd().intValue());
  Assert.assertEquals(7,result.get(1).getBegin().intValue());
  Assert.assertEquals(7,result.get(1).getEnd().intValue());
  Assert.assertEquals(10,result.get(2).getBegin().intValue());
  Assert.assertEquals(20,result.get(2).getEnd().intValue());
  result=ValueRangeUtils.subtractRange(coalesceResult,testRangeList2);
  Assert.assertEquals(2,result.size());
  Assert.assertEquals(4,result.get(0).getBegin().intValue());
  Assert.assertEquals(6,result.get(0).getEnd().intValue());
  Assert.assertEquals(21,result.get(1).getBegin().intValue());
  Assert.assertEquals(102,result.get(1).getEnd().intValue());
  List<ValueRange> testRangeList7=new ArrayList<ValueRange>();
  testRangeList7.add(ValueRange.newInstance(80,80));
  result=ValueRangeUtils.subtractRange(coalesceResult,testRangeList7);
  Assert.assertEquals(3,result.size());
  Assert.assertEquals(3,result.get(0).getBegin().intValue());
  Assert.assertEquals(7,result.get(0).getEnd().intValue());
  Assert.assertEquals(10,result.get(1).getBegin().intValue());
  Assert.assertEquals(79,result.get(1).getEnd().intValue());
  Assert.assertEquals(81,result.get(2).getBegin().intValue());
  Assert.assertEquals(102,result.get(2).getEnd().intValue());
  result=ValueRangeUtils.addRange(sortedResult,testRangeList2);
  Assert.assertEquals(2,result.size());
  Assert.assertEquals(2,result.get(0).getBegin().intValue());
  Assert.assertEquals(8,result.get(0).getEnd().intValue());
  Assert.assertEquals(10,result.get(1).getBegin().intValue());
  Assert.assertEquals(102,result.get(1).getEnd().intValue());
  List<ValueRange> testRangeList4=new ArrayList<ValueRange>();
  testRangeList4.add(ValueRange.newInstance(2,3));
  Assert.assertTrue(ValueRangeUtils.fitInRange(testRangeList4,testRangeList3));
  List<ValueRange> testRangeList5=new ArrayList<ValueRange>();
  testRangeList5.add(ValueRange.newInstance(1,3));
  Assert.assertTrue(!ValueRangeUtils.fitInRange(testRangeList5,testRangeList3));
  List<ValueRange> testRangeList6=new ArrayList<ValueRange>();
  testRangeList6.add(ValueRange.newInstance(9,9));
  Assert.assertTrue(!ValueRangeUtils.fitInRange(testRangeList6,testRangeList3));
  result=ValueRangeUtils.getSubRange(testRangeList3,1,0);
  Assert.assertEquals(1,result.size());
  Assert.assertEquals(1,ValueRangeUtils.getValueNumber(result));
  result=ValueRangeUtils.getSubRange(testRangeList3,3,0);
  Assert.assertEquals(3,ValueRangeUtils.getValueNumber(result));
  result=ValueRangeUtils.getSubRange(testRangeList3,3,10);
  Assert.assertEquals(3,ValueRangeUtils.getValueNumber(result));
  Assert.assertTrue(result.get(0).getBegin() > 10);
  Assert.assertTrue(result.get(0).getEnd() > 10);
  List<ValueRange> testRangeList10=new ArrayList<ValueRange>();
  testRangeList10.add(ValueRange.newInstance(80,80));
  testRangeList10.add(ValueRange.newInstance(80,81));
  testRangeList10.add(ValueRange.newInstance(100,103));
  int[] expectedResult={80,81,100,101,102,103};
  for (int i=0; i < ValueRangeUtils.getValueNumber(testRangeList10); i++) {
    Assert.assertEquals(expectedResult[i],ValueRangeUtils.getValue(testRangeList10,i).intValue());
  }
  Map<String,Ports> portDefinitions=new HashMap<String,Ports>();
  Ports ports1=new Ports();
  ports1.setCount(2);
  ports1.setStart(40);
  portDefinitions.put(""String_Node_Str"",ports1);
  Ports ports2=new Ports();
  ports2.setCount(4);
  ports2.setStart(9000);
  portDefinitions.put(""String_Node_Str"",ports2);
  List<ValueRange> testValueRange=new ArrayList<ValueRange>();
  testValueRange.add(ValueRange.newInstance(40,41));
  List<ValueRange> testValueRange2=new ArrayList<ValueRange>();
  testValueRange.add(ValueRange.newInstance(9000,9003));
  String environmentString=ValueRangeUtils.toEnviromentVariableString(testValueRange,portDefinitions);
  Assert.assertEquals(environmentString,""String_Node_Str"");
  Map<String,Ports> portDefinitions2=new HashMap<String,Ports>();
  Ports ports3=new Ports();
  ports3.setCount(2);
  ports3.setStart(0);
  portDefinitions2.put(""String_Node_Str"",ports3);
  Ports ports4=new Ports();
  ports4.setCount(4);
  ports4.setStart(0);
  portDefinitions2.put(""String_Node_Str"",ports4);
  environmentString=ValueRangeUtils.toEnviromentVariableString(testValueRange,portDefinitions2);
  Assert.assertEquals(environmentString.split(""String_Node_Str"").length,2);
  Assert.assertEquals(environmentString.split(""String_Node_Str"").length,5);
}"
34436,"private void resyncFrameworksWithLiveApplications(Map<String,ApplicationReport> liveApplicationReports) throws Exception {
  String logScope=""String_Node_Str"";
  CHANGE_AWARE_LOGGER.initializeScope(logScope,Level.INFO);
  CHANGE_AWARE_LOGGER.log(logScope,""String_Node_Str"",liveApplicationReports.size());
  for (  ApplicationReport applicationReport : liveApplicationReports.values()) {
    String applicationId=applicationReport.getApplicationId().toString();
    YarnApplicationState applicationState=applicationReport.getYarnApplicationState();
    FinalApplicationStatus applicationFinalStatus=applicationReport.getFinalApplicationStatus();
    String diagnostics=applicationReport.getDiagnostics();
    if (statusManager.isApplicationIdLiveAssociated(applicationId)) {
      FrameworkStatus frameworkStatus=statusManager.getFrameworkStatusWithLiveAssociatedApplicationId(applicationId);
      String frameworkName=frameworkStatus.getFrameworkName();
      FrameworkState frameworkState=frameworkStatus.getFrameworkState();
      if (frameworkState == FrameworkState.APPLICATION_CREATED) {
        return;
      }
      statusManager.updateApplicationStatus(frameworkName,applicationReport);
      if (applicationFinalStatus == FinalApplicationStatus.UNDEFINED) {
        if (applicationState == YarnApplicationState.NEW || applicationState == YarnApplicationState.NEW_SAVING || applicationState == YarnApplicationState.SUBMITTED || applicationState == YarnApplicationState.ACCEPTED) {
          statusManager.transitionFrameworkState(frameworkName,FrameworkState.APPLICATION_WAITING);
        }
 else         if (applicationState == YarnApplicationState.RUNNING) {
          statusManager.transitionFrameworkState(frameworkName,FrameworkState.APPLICATION_RUNNING);
        }
      }
 else       if (applicationFinalStatus == FinalApplicationStatus.SUCCEEDED) {
        retrieveApplicationDiagnostics(applicationId,ExitStatusKey.SUCCEEDED.toInt(),diagnostics,false);
      }
 else       if (applicationFinalStatus == FinalApplicationStatus.KILLED) {
        retrieveApplicationDiagnostics(applicationId,ExitStatusKey.AM_KILLED_BY_USER.toInt(),diagnostics,false);
      }
 else       if (applicationFinalStatus == FinalApplicationStatus.FAILED) {
        retrieveApplicationDiagnostics(applicationId,null,diagnostics,false);
      }
    }
 else {
    }
  }
  List<String> liveAssociatedApplicationIds=statusManager.getLiveAssociatedApplicationIds();
  for (  String applicationId : liveAssociatedApplicationIds) {
    if (!liveApplicationReports.containsKey(applicationId)) {
      FrameworkStatus frameworkStatus=statusManager.getFrameworkStatusWithLiveAssociatedApplicationId(applicationId);
      String frameworkName=frameworkStatus.getFrameworkName();
      FrameworkState frameworkState=frameworkStatus.getFrameworkState();
      if (frameworkState == FrameworkState.APPLICATION_CREATED) {
        return;
      }
      LOGGER.logWarning(""String_Node_Str"" + ""String_Node_Str"",frameworkName,applicationId);
      retrieveApplicationDiagnostics(applicationId,ExitStatusKey.AM_RM_RESYNC_LOST.toInt(),""String_Node_Str"",false);
    }
  }
}","private void resyncFrameworksWithLiveApplications(Map<String,ApplicationReport> liveApplicationReports) throws Exception {
  String logScope=""String_Node_Str"";
  CHANGE_AWARE_LOGGER.initializeScope(logScope,Level.INFO);
  CHANGE_AWARE_LOGGER.log(logScope,""String_Node_Str"",liveApplicationReports.size());
  for (  ApplicationReport applicationReport : liveApplicationReports.values()) {
    String applicationId=applicationReport.getApplicationId().toString();
    YarnApplicationState applicationState=applicationReport.getYarnApplicationState();
    FinalApplicationStatus applicationFinalStatus=applicationReport.getFinalApplicationStatus();
    String diagnostics=applicationReport.getDiagnostics();
    if (statusManager.isApplicationIdLiveAssociated(applicationId)) {
      FrameworkStatus frameworkStatus=statusManager.getFrameworkStatusWithLiveAssociatedApplicationId(applicationId);
      String frameworkName=frameworkStatus.getFrameworkName();
      FrameworkState frameworkState=frameworkStatus.getFrameworkState();
      if (frameworkState == FrameworkState.APPLICATION_CREATED) {
        continue;
      }
      statusManager.updateApplicationStatus(frameworkName,applicationReport);
      if (applicationFinalStatus == FinalApplicationStatus.UNDEFINED) {
        if (applicationState == YarnApplicationState.NEW || applicationState == YarnApplicationState.NEW_SAVING || applicationState == YarnApplicationState.SUBMITTED || applicationState == YarnApplicationState.ACCEPTED) {
          statusManager.transitionFrameworkState(frameworkName,FrameworkState.APPLICATION_WAITING);
        }
 else         if (applicationState == YarnApplicationState.RUNNING) {
          statusManager.transitionFrameworkState(frameworkName,FrameworkState.APPLICATION_RUNNING);
        }
      }
 else       if (applicationFinalStatus == FinalApplicationStatus.SUCCEEDED) {
        retrieveApplicationDiagnostics(applicationId,ExitStatusKey.SUCCEEDED.toInt(),diagnostics,false);
      }
 else       if (applicationFinalStatus == FinalApplicationStatus.KILLED) {
        retrieveApplicationDiagnostics(applicationId,ExitStatusKey.AM_KILLED_BY_USER.toInt(),diagnostics,false);
      }
 else       if (applicationFinalStatus == FinalApplicationStatus.FAILED) {
        retrieveApplicationDiagnostics(applicationId,null,diagnostics,false);
      }
    }
 else {
    }
  }
  List<String> liveAssociatedApplicationIds=statusManager.getLiveAssociatedApplicationIds();
  for (  String applicationId : liveAssociatedApplicationIds) {
    if (!liveApplicationReports.containsKey(applicationId)) {
      FrameworkStatus frameworkStatus=statusManager.getFrameworkStatusWithLiveAssociatedApplicationId(applicationId);
      String frameworkName=frameworkStatus.getFrameworkName();
      FrameworkState frameworkState=frameworkStatus.getFrameworkState();
      if (frameworkState == FrameworkState.APPLICATION_CREATED) {
        continue;
      }
      LOGGER.logWarning(""String_Node_Str"" + ""String_Node_Str"",frameworkName,applicationId);
      retrieveApplicationDiagnostics(applicationId,ExitStatusKey.AM_RM_RESYNC_LOST.toInt(),""String_Node_Str"",false);
    }
  }
}"
34437,"@VisibleForTesting public synchronized SelectionResult select(ResourceDescriptor requestResource,String requestNodeLabel,String requestNodeGpuType,int startStatesTaskCount,List<ValueRange> reusePorts,Map<String,NodeConfiguration> configuredNodes) throws NotAvailableException {
  LOGGER.logInfo(""String_Node_Str"",requestResource,requestNodeLabel,requestNodeGpuType,startStatesTaskCount,ValueRangeUtils.toString(reusePorts));
  initFilteredNodes();
  filterNodesByNodeLabel(requestNodeLabel);
  filterNodesByGpuType(configuredNodes,requestNodeGpuType);
  if (!conf.getAmAllowNoneGpuJobOnGpuNode()) {
    int jobTotalRequestGpu=requestManager.getTotalGpuCount();
    filterNodesForNoneGpuJob(jobTotalRequestGpu);
  }
  ResourceDescriptor optimizedRequestResource=YamlUtils.deepCopy(requestResource,ResourceDescriptor.class);
  if (ValueRangeUtils.getValueNumber(reusePorts) > 0) {
    LOGGER.logInfo(""String_Node_Str"",ValueRangeUtils.toString(reusePorts));
    optimizedRequestResource.setPortRanges(reusePorts);
  }
  filterNodesByResource(optimizedRequestResource,conf.getAmSkipLocalTriedResource());
  filterNodesByRackSelectionPolicy(optimizedRequestResource,startStatesTaskCount);
  if (filteredNodes.size() < 1) {
    if (requestNodeGpuType != null || requestResource.getPortNumber() > 0) {
      throw new NotAvailableException(String.format(""String_Node_Str"",optimizedRequestResource,requestNodeGpuType,requestNodeLabel));
    }
  }
  SelectionResult selectionResult=selectNodes(optimizedRequestResource,startStatesTaskCount);
  List<ValueRange> portRanges=selectPorts(selectionResult,optimizedRequestResource);
  optimizedRequestResource.setPortRanges(portRanges);
  selectionResult.setOptimizedResource(optimizedRequestResource);
  return selectionResult;
}","@VisibleForTesting public synchronized SelectionResult select(ResourceDescriptor requestResource,String requestNodeLabel,String requestNodeGpuType,int startStatesTaskCount,List<ValueRange> reusePorts,Map<String,NodeConfiguration> configuredNodes) throws NotAvailableException {
  LOGGER.logInfo(""String_Node_Str"",requestResource,requestNodeLabel,requestNodeGpuType,startStatesTaskCount,ValueRangeUtils.toString(reusePorts));
  initFilteredNodes();
  filterNodesByNodeLabel(requestNodeLabel);
  filterNodesByGpuType(configuredNodes,requestNodeGpuType);
  if (!conf.getAmAllowNoneGpuJobOnGpuNode()) {
    int jobTotalRequestGpu=requestManager.getTotalGpuCount();
    filterNodesForNoneGpuJob(jobTotalRequestGpu);
  }
  ResourceDescriptor optimizedRequestResource=YamlUtils.deepCopy(requestResource,ResourceDescriptor.class);
  if (ValueRangeUtils.getValueNumber(reusePorts) > 0) {
    LOGGER.logInfo(""String_Node_Str"",ValueRangeUtils.toString(reusePorts));
    optimizedRequestResource.setPortRanges(reusePorts);
  }
  if (optimizedRequestResource.getPortNumber() > 0 && ValueRangeUtils.getValueNumber(optimizedRequestResource.getPortRanges()) <= 0) {
    List<ValueRange> portRanges=selectPortsFromFilteredNodes(optimizedRequestResource);
    LOGGER.logInfo(""String_Node_Str"",ValueRangeUtils.toString(portRanges));
    if (ValueRangeUtils.getValueNumber(portRanges) == optimizedRequestResource.getPortNumber()) {
      optimizedRequestResource.setPortRanges(portRanges);
    }
  }
  filterNodesByResource(optimizedRequestResource,conf.getAmSkipLocalTriedResource());
  filterNodesByRackSelectionPolicy(optimizedRequestResource,startStatesTaskCount);
  if (filteredNodes.size() < 1) {
    if (requestNodeGpuType != null) {
      throw new NotAvailableException(String.format(""String_Node_Str"",optimizedRequestResource,requestNodeGpuType,requestNodeLabel));
    }
    if (optimizedRequestResource.getPortNumber() > 0 && ValueRangeUtils.getValueNumber(optimizedRequestResource.getPortRanges()) <= 0) {
      throw new NotAvailableException(String.format(""String_Node_Str"",optimizedRequestResource,requestNodeGpuType,requestNodeLabel));
    }
  }
  SelectionResult selectionResult=selectNodes(optimizedRequestResource,startStatesTaskCount);
  List<ValueRange> portRanges=selectPorts(selectionResult,optimizedRequestResource);
  optimizedRequestResource.setPortRanges(portRanges);
  selectionResult.setOptimizedResource(optimizedRequestResource);
  return selectionResult;
}"
34438,"public synchronized SelectionResult selectSingleNode(String taskRoleName) throws NotAvailableException {
  SelectionResult results=select(taskRoleName);
  ResourceDescriptor optimizedRequestResource=results.getOptimizedResource();
  String candidateNode=results.getNodeHosts().get(CommonUtils.getRandomNumber(0,results.getNodeHosts().size() - 1));
  optimizedRequestResource.setGpuAttribute(results.getGpuAttribute(candidateNode));
  SelectionResult result=new SelectionResult();
  result.addSelection(candidateNode,results.getGpuAttribute(candidateNode),results.getOverlapPorts());
  result.setOptimizedResource(optimizedRequestResource);
  return result;
}","public synchronized SelectionResult selectSingleNode(String taskRoleName) throws NotAvailableException {
  SelectionResult results=select(taskRoleName);
  if (results.getNodeHosts().size() > 1) {
    ResourceDescriptor optimizedRequestResource=results.getOptimizedResource();
    String candidateNode=results.getNodeHosts().get(CommonUtils.getRandomNumber(0,results.getNodeHosts().size() - 1));
    optimizedRequestResource.setGpuAttribute(results.getGpuAttribute(candidateNode));
    SelectionResult result=new SelectionResult();
    result.addSelection(candidateNode,results.getGpuAttribute(candidateNode),results.getOverlapPorts());
    result.setOptimizedResource(optimizedRequestResource);
    return result;
  }
  return results;
}"
34439,"public synchronized List<ValueRange> selectPorts(SelectionResult selectionResult,ResourceDescriptor optimizedRequestResource) throws NotAvailableException {
  if (ValueRangeUtils.getValueNumber(optimizedRequestResource.getPortRanges()) <= 0 && optimizedRequestResource.getPortNumber() > 0) {
    List<ValueRange> newCandidatePorts=ValueRangeUtils.getSubRange(selectionResult.getOverlapPorts(),optimizedRequestResource.getPortNumber(),conf.getAmContainerMinPort());
    if (ValueRangeUtils.getValueNumber(newCandidatePorts) >= optimizedRequestResource.getPortNumber()) {
      LOGGER.logDebug(""String_Node_Str"",optimizedRequestResource);
      return newCandidatePorts;
    }
 else {
      throw new NotAvailableException(String.format(""String_Node_Str"",optimizedRequestResource));
    }
  }
  return optimizedRequestResource.getPortRanges();
}","private synchronized List<ValueRange> selectPorts(SelectionResult selectionResult,ResourceDescriptor optimizedRequestResource) throws NotAvailableException {
  if (ValueRangeUtils.getValueNumber(optimizedRequestResource.getPortRanges()) <= 0 && optimizedRequestResource.getPortNumber() > 0) {
    List<ValueRange> newCandidatePorts=ValueRangeUtils.getSubRange(selectionResult.getOverlapPorts(),optimizedRequestResource.getPortNumber(),conf.getAmContainerMinPort());
    if (ValueRangeUtils.getValueNumber(newCandidatePorts) >= optimizedRequestResource.getPortNumber()) {
      LOGGER.logDebug(""String_Node_Str"",optimizedRequestResource);
      return newCandidatePorts;
    }
 else {
      throw new NotAvailableException(String.format(""String_Node_Str"",optimizedRequestResource));
    }
  }
  return optimizedRequestResource.getPortRanges();
}"
34440,"public static List<ValueRange> getSubRange(List<ValueRange> availableRange,int requestNumber,int baseValue){
  List<ValueRange> resultList=new ArrayList<ValueRange>();
  Random random=new Random();
  int maxValue=availableRange.get(availableRange.size() - 1).getEnd();
  int randomBase=random.nextInt(maxValue) + 1;
  while (randomBase > 0) {
    resultList.clear();
    int needNumber=requestNumber;
    randomBase=randomBase / 2;
    int newbaseValue=baseValue + randomBase;
    for (    ValueRange range : availableRange) {
      if (range.getEnd() < newbaseValue) {
        continue;
      }
      int start=Math.max(range.getBegin(),newbaseValue);
      if ((range.getEnd() - start + 1) >= needNumber) {
        resultList.add(ValueRange.newInstance(start,start + needNumber - 1));
        return resultList;
      }
 else {
        resultList.add(ValueRange.newInstance(start,range.getEnd()));
        needNumber-=(range.getEnd() - start + 1);
      }
    }
  }
  return null;
}","public static List<ValueRange> getSubRange(List<ValueRange> availableRange,int requestNumber,int baseValue){
  List<ValueRange> resultList=new ArrayList<ValueRange>();
  if (getValueNumber(availableRange) <= 0) {
    return resultList;
  }
  Random random=new Random();
  int maxValue=availableRange.get(availableRange.size() - 1).getEnd();
  int randomBase=random.nextInt(maxValue) + 1;
  while (randomBase > 0) {
    resultList.clear();
    int needNumber=requestNumber;
    randomBase=randomBase / 2;
    int newbaseValue=baseValue + randomBase;
    for (    ValueRange range : availableRange) {
      if (range.getEnd() < newbaseValue) {
        continue;
      }
      int start=Math.max(range.getBegin(),newbaseValue);
      if ((range.getEnd() - start + 1) >= needNumber) {
        resultList.add(ValueRange.newInstance(start,start + needNumber - 1));
        return resultList;
      }
 else {
        resultList.add(ValueRange.newInstance(start,range.getEnd()));
        needNumber-=(range.getEnd() - start + 1);
      }
    }
  }
  return null;
}"
34441,"/** 
 * REGION ReadInterface
 */
public synchronized Integer getStartStatesTaskCount(String taskRoleName){
  int unassociatedTastCount=0;
  List<TaskStatus> taskStatusList=taskStatuseses.get(taskRoleName).getTaskStatusArray();
  for (  TaskStatus taskStatus : taskStatusList) {
    if (!TaskStateDefinition.START_STATES.contains(taskStatus.getTaskState())) {
      unassociatedTastCount++;
    }
  }
  return unassociatedTastCount;
}","/** 
 * REGION ReadInterface
 */
public synchronized Integer getStartStatesTaskCount(String taskRoleName){
  int startStatesTaskCount=0;
  List<TaskStatus> taskStatusList=taskStatuseses.get(taskRoleName).getTaskStatusArray();
  for (  TaskStatus taskStatus : taskStatusList) {
    if (TaskStateDefinition.START_STATES.contains(taskStatus.getTaskState())) {
      startStatesTaskCount++;
    }
  }
  return startStatesTaskCount;
}"
34442,"private void removeContainerRequest(TaskStatus taskStatus){
  TaskStatusLocator taskLocator=new TaskStatusLocator(taskStatus.getTaskRoleName(),taskStatus.getTaskIndex());
  if (!statusManager.containsTask(taskLocator)) {
    return;
  }
  ContainerRequest request=statusManager.getContainerRequest(taskLocator);
  if (request == null) {
    return;
  }
  try {
    rmClient.removeContainerRequest(request);
  }
 catch (  Exception e) {
    LOGGER.logError(e,""String_Node_Str"",taskLocator);
  }
  try {
    gpuAllocationManager.removeContainerRequest(request);
  }
 catch (  Exception e) {
    LOGGER.logError(e,""String_Node_Str"",taskLocator);
  }
}","private void removeContainerRequest(TaskStatus taskStatus){
  TaskStatusLocator taskLocator=new TaskStatusLocator(taskStatus.getTaskRoleName(),taskStatus.getTaskIndex());
  if (!statusManager.containsTask(taskLocator)) {
    return;
  }
  ContainerRequest request=statusManager.getContainerRequest(taskLocator);
  if (request == null) {
    return;
  }
  try {
    rmClient.removeContainerRequest(request);
  }
 catch (  Exception e) {
    LOGGER.logError(e,""String_Node_Str"",taskLocator);
  }
  try {
    selectionManager.removeContainerRequest(request);
  }
 catch (  Exception e) {
    LOGGER.logError(e,""String_Node_Str"",taskLocator);
  }
}"
34443,"public void onNodesUpdated(List<NodeReport> nodeReports){
  if (nodeReports.size() <= 0) {
    return;
  }
  LOGGER.logDebug(""String_Node_Str"",nodeReports.size());
  transitionTaskStateQueue.queueSystemTask(() -> {
    updateNodeReport(nodeReports);
  }
);
}","public void onNodesUpdated(List<NodeReport> nodeReports){
  if (nodeReports.size() <= 0) {
    return;
  }
  LOGGER.logDebug(""String_Node_Str"",nodeReports.size());
  transitionTaskStateQueue.queueSystemTask(() -> {
    updateNodeReports(nodeReports);
  }
);
}"
34444,"private ContainerRequest setupContainerRequest(TaskStatus taskStatus) throws Exception {
  String taskRoleName=taskStatus.getTaskRoleName();
  Priority priority=statusManager.getNextContainerRequestPriority();
  String nodeLabel=requestManager.getTaskPlatParams().get(taskRoleName).getTaskNodeLabel();
  String nodeGpuType=requestManager.getTaskPlatParams().get(taskRoleName).getTaskNodeGpuType();
  ResourceDescriptor resource=YamlUtils.deepCopy(requestManager.getTaskResources().get(taskRoleName),ResourceDescriptor.class);
  ResourceDescriptor maxResource=conf.getMaxResource();
  if (resource.getMemoryMB() > maxResource.getMemoryMB() || resource.getCpuNumber() > maxResource.getCpuNumber() || resource.getGpuNumber() > maxResource.getGpuNumber()) {
    LOGGER.logWarning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",resource,maxResource);
  }
  if (resource.getGpuNumber() > 0) {
    updateNodeReport(yarnClient.getNodeReports(NodeState.RUNNING));
    GpuAllocation gpuAllocation=gpuAllocationManager.selectCandidateRequestNode(resource,nodeLabel,nodeGpuType);
    if (gpuAllocation != null) {
      resource.setGpuAttribute(gpuAllocation.getGpuBitmap());
      return HadoopUtils.toContainerRequest(resource,priority,null,gpuAllocation.getNodeName());
    }
 else {
      LOGGER.logWarning(""String_Node_Str"");
    }
  }
  return HadoopUtils.toContainerRequest(resource,priority,nodeLabel,null);
}","private ContainerRequest setupContainerRequest(TaskStatus taskStatus) throws Exception {
  String taskRoleName=taskStatus.getTaskRoleName();
  Priority requestPriority=statusManager.getNextContainerRequestPriority();
  String requestNodeLabel=requestManager.getTaskPlatParams().get(taskRoleName).getTaskNodeLabel();
  String requestNodeGpuType=requestManager.getTaskPlatParams().get(taskRoleName).getTaskNodeGpuType();
  ResourceDescriptor requestResource=requestManager.getTaskResources().get(taskRoleName);
  ResourceDescriptor maxResource=conf.getMaxResource();
  if (requestResource.getMemoryMB() > maxResource.getMemoryMB() || requestResource.getCpuNumber() > maxResource.getCpuNumber() || requestResource.getGpuNumber() > maxResource.getGpuNumber()) {
    LOGGER.logWarning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",requestResource,maxResource);
  }
  if (requestResource.getGpuNumber() > 0) {
    updateNodeReports(yarnClient.getNodeReports(NodeState.RUNNING));
    SelectionResult selectionResult=selectionManager.select(requestResource,requestNodeLabel,requestNodeGpuType);
    if (selectionResult != null) {
      ResourceDescriptor optimizedRequestResource=YamlUtils.deepCopy(requestResource,ResourceDescriptor.class);
      optimizedRequestResource.setGpuAttribute(selectionResult.getGpuAttribute());
      return HadoopUtils.toContainerRequest(optimizedRequestResource,requestPriority,null,selectionResult.getNodeHost());
    }
 else {
      LOGGER.logWarning(""String_Node_Str"");
    }
  }
  return HadoopUtils.toContainerRequest(requestResource,requestPriority,requestNodeLabel,null);
}"
34445,"@Override protected void initialize() throws Exception {
  super.initialize();
  transitionTaskStateQueue=new SystemTaskQueue(this::handleException);
  conf.initializeNoDependenceConfig();
  rmClient=AMRMClientAsync.createAMRMClientAsync(conf.getAmRmHeartbeatIntervalSec() * 1000,new RMClientCallbackHandler(this));
  rmClient.init(conf.getYarnConfig());
  rmClient.start();
  conf.initializeDependOnRMResponseConfig(registerToRM());
  nmClient=NMClientAsync.createNMClientAsync(new NMClientCallbackHandler(this));
  nmClient.init(conf.getYarnConfig());
  nmClient.start();
  yarnClient=YarnClient.createYarnClient();
  yarnClient.init(conf.getYarnConfig());
  yarnClient.start();
  conf.initializeDependOnYarnClientConfig(yarnClient);
  zkStore=new ZookeeperStore(conf.getZkConnectString(),conf.getZkRootDir());
  conf.initializeDependOnZKStoreConfig(zkStore);
  hdfsStore=new HdfsStore(conf.getLauncherConfig().getHdfsRootDir());
  hdfsStore.makeFrameworkRootDir(conf.getFrameworkName());
  hdfsStore.makeAMStoreRootDir(conf.getFrameworkName());
  launcherClient=new LauncherClientInternal(conf.getLauncherConfig().getWebServerAddress(),30,10,LaunchClientType.APPLICATION_MASTER);
  gpuAllocationManager=new GpuAllocationManager(this);
  rmResyncHandler=new RMResyncHandler(this,conf);
}","@Override protected void initialize() throws Exception {
  super.initialize();
  transitionTaskStateQueue=new SystemTaskQueue(this::handleException);
  conf.initializeNoDependenceConfig();
  rmClient=AMRMClientAsync.createAMRMClientAsync(conf.getAmRmHeartbeatIntervalSec() * 1000,new RMClientCallbackHandler(this));
  rmClient.init(conf.getYarnConfig());
  rmClient.start();
  conf.initializeDependOnRMResponseConfig(registerToRM());
  nmClient=NMClientAsync.createNMClientAsync(new NMClientCallbackHandler(this));
  nmClient.init(conf.getYarnConfig());
  nmClient.start();
  yarnClient=YarnClient.createYarnClient();
  yarnClient.init(conf.getYarnConfig());
  yarnClient.start();
  conf.initializeDependOnYarnClientConfig(yarnClient);
  zkStore=new ZookeeperStore(conf.getZkConnectString(),conf.getZkRootDir());
  conf.initializeDependOnZKStoreConfig(zkStore);
  hdfsStore=new HdfsStore(conf.getLauncherConfig().getHdfsRootDir());
  hdfsStore.makeFrameworkRootDir(conf.getFrameworkName());
  hdfsStore.makeAMStoreRootDir(conf.getFrameworkName());
  launcherClient=new LauncherClientInternal(conf.getLauncherConfig().getWebServerAddress(),30,10,LaunchClientType.APPLICATION_MASTER);
  selectionManager=new SelectionManager(this);
  rmResyncHandler=new RMResyncHandler(this,conf);
}"
34446,"@Override public String toString(){
  return ""String_Node_Str"" + this.host + ""String_Node_Str""+ CommonExtensions.toString(this.labels)+ ""String_Node_Str""+ this.totalResource+ ""String_Node_Str""+ this.usedResource+ ""String_Node_Str""+ this.requestedResource+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + host + ""String_Node_Str""+ CommonExtensions.toString(labels)+ ""String_Node_Str""+ totalResource+ ""String_Node_Str""+ usedResource+ ""String_Node_Str""+ requestedResource+ ""String_Node_Str"";
}"
34447,"@VisibleForTesting public synchronized void removeCandidateNode(Node reportedNode){
  if (candidateNodes.containsKey(reportedNode.getHost())) {
    LOGGER.logInfo(""String_Node_Str"",reportedNode);
    candidateNodes.remove(reportedNode.getHost());
  }
}","@VisibleForTesting public synchronized void removeCandidateNode(Node reportedNode){
  if (candidateNodes.containsKey(reportedNode.getHost())) {
    LOGGER.logDebug(""String_Node_Str"",reportedNode);
    candidateNodes.remove(reportedNode.getHost());
  }
}"
34448,"public synchronized GpuAllocation selectCandidateRequestNode(ResourceDescriptor request,String nodeLabel,String nodeGpuType){
  LOGGER.logDebug(""String_Node_Str"",request,nodeLabel,nodeGpuType);
  ClusterConfiguration clusterConfiguration=am.getClusterConfiguration();
  Map<String,NodeConfiguration> nodes=clusterConfiguration.getNodes();
  Long candidateGpu=request.getGpuAttribute();
  if (candidateGpu > 0 && Long.bitCount(candidateGpu) != request.getGpuNumber()) {
    LOGGER.logError(""String_Node_Str"",request.getGpuNumber(),Long.toBinaryString(candidateGpu));
    return null;
  }
  GpuAllocation gpuAllocation=null;
  List gpuTypeList=null;
  if (nodeGpuType != null && !nodeGpuType.trim().isEmpty()) {
    gpuTypeList=Arrays.asList(nodeGpuType.split(""String_Node_Str""));
  }
  for (  Map.Entry<String,Node> entry : candidateRequestNodes.entrySet()) {
    LOGGER.logDebug(""String_Node_Str"" + entry.getValue().toString());
    if (nodeLabel != null) {
      Set<String> nodeLabels=entry.getValue().getNodeLabels();
      if (nodeLabels != null && nodeLabels.size() > 0 && !nodeLabels.contains(nodeLabel)) {
        LOGGER.logDebug(""String_Node_Str"",entry.getValue().getHostName(),CommonExtensions.toString(nodeLabels),nodeLabel);
        continue;
      }
    }
    if (gpuTypeList != null) {
      if (nodes.size() > 0) {
        if (!nodes.containsKey(entry.getValue().getHostName())) {
          LOGGER.logWarning(""String_Node_Str"",entry.getValue().getHostName());
          continue;
        }
        String gpuType=(nodes.get(entry.getValue().getHostName())).getGpuType();
        if (!gpuTypeList.contains(gpuType)) {
          LOGGER.logDebug(""String_Node_Str"",entry.getValue().getHostName(),gpuType,nodeGpuType);
          continue;
        }
      }
    }
    if (request.getMemoryMB() <= entry.getValue().getAvailableMemory() && request.getCpuNumber() <= entry.getValue().getAvailableCpu() && request.getGpuNumber() <= entry.getValue().getAvailableNumGpus()) {
      if (request.getGpuNumber() > 0) {
        if (candidateGpu > 0) {
          if ((candidateGpu & entry.getValue().getNodeGpuStatus()) != candidateGpu)           continue;
        }
 else {
          candidateGpu=selectCandidateGpu(entry.getValue(),request.getGpuNumber());
          if (Long.bitCount(candidateGpu) != request.getGpuNumber()) {
            continue;
          }
        }
        gpuAllocation=new GpuAllocation();
        gpuAllocation.setNodeName(entry.getValue().getHostName());
        gpuAllocation.setGpuBitmap(candidateGpu);
        break;
      }
    }
  }
  if (gpuAllocation != null) {
    LOGGER.logInfo(""String_Node_Str"" + gpuAllocation.getNodeName() + ""String_Node_Str""+ Long.toBinaryString(gpuAllocation.getGpuBitmap()));
  }
 else {
    LOGGER.logInfo(""String_Node_Str"");
  }
  return gpuAllocation;
}","public synchronized GpuAllocation selectCandidateRequestNode(ResourceDescriptor request,String nodeLabel,String nodeGpuType){
  LOGGER.logDebug(""String_Node_Str"",request,nodeLabel,nodeGpuType);
  ClusterConfiguration clusterConfiguration=am.getClusterConfiguration();
  Map<String,NodeConfiguration> nodes=clusterConfiguration.getNodes();
  Long requestGpu=request.getGpuAttribute();
  if (requestGpu > 0 && Long.bitCount(requestGpu) != request.getGpuNumber()) {
    LOGGER.logError(""String_Node_Str"",request.getGpuNumber(),Long.toBinaryString(requestGpu));
    return null;
  }
  GpuAllocation gpuAllocation=null;
  List gpuTypeList=null;
  if (nodeGpuType != null && !nodeGpuType.trim().isEmpty()) {
    gpuTypeList=Arrays.asList(nodeGpuType.split(""String_Node_Str""));
  }
  for (  Map.Entry<String,Node> entry : candidateRequestNodes.entrySet()) {
    LOGGER.logDebug(""String_Node_Str"" + entry.getValue().toString());
    if (nodeLabel != null) {
      Set<String> nodeLabels=entry.getValue().getNodeLabels();
      if (nodeLabels != null && nodeLabels.size() > 0 && !nodeLabels.contains(nodeLabel)) {
        LOGGER.logDebug(""String_Node_Str"",entry.getValue().getHostName(),CommonExtensions.toString(nodeLabels),nodeLabel);
        continue;
      }
    }
    if (gpuTypeList != null) {
      if (nodes.size() > 0) {
        if (!nodes.containsKey(entry.getValue().getHostName())) {
          LOGGER.logWarning(""String_Node_Str"",entry.getValue().getHostName());
          continue;
        }
        String gpuType=(nodes.get(entry.getValue().getHostName())).getGpuType();
        if (!gpuTypeList.contains(gpuType)) {
          LOGGER.logDebug(""String_Node_Str"",entry.getValue().getHostName(),gpuType,nodeGpuType);
          continue;
        }
      }
 else {
        LOGGER.logWarning(""String_Node_Str"");
      }
    }
    if (request.getMemoryMB() <= entry.getValue().getAvailableMemory() && request.getCpuNumber() <= entry.getValue().getAvailableCpu() && request.getGpuNumber() <= entry.getValue().getAvailableNumGpus()) {
      if (request.getGpuNumber() > 0) {
        Long candidateGpu=requestGpu;
        if (candidateGpu > 0) {
          if ((candidateGpu & entry.getValue().getNodeGpuStatus()) != candidateGpu)           continue;
        }
 else {
          candidateGpu=selectCandidateGpu(entry.getValue(),request.getGpuNumber());
          if (Long.bitCount(candidateGpu) != request.getGpuNumber()) {
            continue;
          }
        }
        gpuAllocation=new GpuAllocation();
        gpuAllocation.setNodeName(entry.getValue().getHostName());
        gpuAllocation.setGpuBitmap(candidateGpu);
        break;
      }
    }
  }
  if (gpuAllocation != null) {
    LOGGER.logInfo(""String_Node_Str"" + gpuAllocation.getNodeName() + ""String_Node_Str""+ Long.toBinaryString(gpuAllocation.getGpuBitmap()));
  }
 else {
    LOGGER.logInfo(""String_Node_Str"");
  }
  return gpuAllocation;
}"
34449,"public void addContainerRequest(ResourceDescriptor resource,List<String> nodeList) throws Exception {
  for (  String nodeName : nodeList) {
    if (!candidateRequestNodes.containsKey(nodeName)) {
      LOGGER.logWarning(""String_Node_Str"" + nodeName);
      continue;
    }
    candidateRequestNodes.get(nodeName).addContainerRequest(resource);
  }
  return;
}","public void addContainerRequest(ResourceDescriptor resource,List<String> nodeList){
  for (  String nodeName : nodeList) {
    if (!candidateRequestNodes.containsKey(nodeName)) {
      LOGGER.logWarning(""String_Node_Str"" + nodeName);
      continue;
    }
    candidateRequestNodes.get(nodeName).addContainerRequest(resource);
  }
}"
34450,"private ContainerLaunchContext setupContainerLaunchContextForDefaultAM(FrameworkStatus frameworkStatus,FrameworkRequest frameworkRequest,Resource amResource) throws Exception {
  String frameworkName=frameworkStatus.getFrameworkName();
  Integer frameworkVersion=frameworkStatus.getFrameworkVersion();
  UserDescriptor loggedInUser=statusManager.getLoggedInUser();
  Map<String,LocalResource> localResources=new HashMap<>();
  hdfsStore.makeFrameworkRootDir(frameworkName);
  HadoopUtils.addToLocalResources(localResources,hdfsStore.uploadAMPackageFile(frameworkName));
  Map<String,String> localEnvs=new HashMap<>();
  StringBuilder classpath=new StringBuilder(ApplicationConstants.Environment.CLASSPATH.$$()).append(ApplicationConstants.CLASS_PATH_SEPARATOR).append(""String_Node_Str"");
  for (  String c : yarnConf.getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH)) {
    classpath.append(ApplicationConstants.CLASS_PATH_SEPARATOR);
    classpath.append(c.trim());
  }
  classpath.append(ApplicationConstants.CLASS_PATH_SEPARATOR).append(GlobalConstants.LOGGER_CONFIG_FILE);
  if (yarnConf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,false)) {
    classpath.append(':');
    classpath.append(System.getProperty(""String_Node_Str""));
  }
  localEnvs.put(GlobalConstants.ENV_VAR_CLASSPATH,classpath.toString());
  localEnvs.put(GlobalConstants.ENV_VAR_HADOOP_USER_NAME,loggedInUser.getName());
  localEnvs.put(GlobalConstants.ENV_VAR_FRAMEWORK_NAME,frameworkName);
  localEnvs.put(GlobalConstants.ENV_VAR_FRAMEWORK_VERSION,frameworkVersion.toString());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_CONNECT_STRING,conf.getZkConnectString());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_ROOT_DIR,conf.getZkRootDir());
  localEnvs.put(GlobalConstants.ENV_VAR_AM_VERSION,conf.getAmVersion().toString());
  localEnvs.put(GlobalConstants.ENV_VAR_AM_RM_HEARTBEAT_INTERVAL_SEC,conf.getAmRmHeartbeatIntervalSec().toString());
  Vector<CharSequence> vargs=new Vector<>(30);
  vargs.add(ApplicationConstants.Environment.JAVA_HOME.$$() + ""String_Node_Str"");
  vargs.add(""String_Node_Str"");
  vargs.add(""String_Node_Str"" + amResource.getMemory() + ""String_Node_Str"");
  vargs.add(GlobalConstants.MAIN_CLASS_APPLICATION_MASTER);
  vargs.add(String.format(""String_Node_Str"",ApplicationConstants.LOG_DIR_EXPANSION_VAR + File.separator));
  StringBuilder command=new StringBuilder();
  for (  CharSequence str : vargs) {
    command.append(str).append(""String_Node_Str"");
  }
  List<String> commands=new ArrayList<>();
  commands.add(command.toString());
  ByteBuffer fsTokens=null;
  if (UserGroupInformation.isSecurityEnabled()) {
    Credentials credentials=new Credentials();
    String tokenRenewer=yarnConf.get(YarnConfiguration.RM_PRINCIPAL);
    FileSystem fs=FileSystem.get(yarnConf);
    if (tokenRenewer == null || tokenRenewer.length() == 0) {
      throw new IOException(""String_Node_Str"");
    }
    final org.apache.hadoop.security.token.Token<?> tokens[]=fs.addDelegationTokens(tokenRenewer,credentials);
    if (tokens != null) {
      for (      org.apache.hadoop.security.token.Token<?> token : tokens) {
        LOGGER.logInfo(""String_Node_Str"" + fs.getUri() + ""String_Node_Str""+ token);
      }
    }
    DataOutputBuffer dob=new DataOutputBuffer();
    credentials.writeTokenStorageToStream(dob);
    fsTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  }
  return ContainerLaunchContext.newInstance(localResources,localEnvs,commands,null,fsTokens,null);
}","private ContainerLaunchContext setupContainerLaunchContextForDefaultAM(FrameworkStatus frameworkStatus,FrameworkRequest frameworkRequest,Resource amResource) throws Exception {
  String frameworkName=frameworkStatus.getFrameworkName();
  Integer frameworkVersion=frameworkStatus.getFrameworkVersion();
  UserDescriptor loggedInUser=statusManager.getLoggedInUser();
  Map<String,LocalResource> localResources=new HashMap<>();
  hdfsStore.makeFrameworkRootDir(frameworkName);
  HadoopUtils.addToLocalResources(localResources,hdfsStore.uploadAMPackageFile(frameworkName));
  Map<String,String> localEnvs=new HashMap<>();
  localEnvs.put(ApplicationConstants.Environment.CLASSPATH_PREPEND_DISTCACHE.name(),""String_Node_Str"");
  StringBuilder classpath=new StringBuilder(""String_Node_Str"");
  for (  String c : yarnConf.getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH)) {
    classpath.append(ApplicationConstants.CLASS_PATH_SEPARATOR).append(c.trim());
  }
  classpath.append(ApplicationConstants.CLASS_PATH_SEPARATOR).append(ApplicationConstants.Environment.CLASSPATH.$$());
  localEnvs.put(GlobalConstants.ENV_VAR_CLASSPATH,classpath.toString());
  localEnvs.put(GlobalConstants.ENV_VAR_HADOOP_USER_NAME,loggedInUser.getName());
  localEnvs.put(GlobalConstants.ENV_VAR_FRAMEWORK_NAME,frameworkName);
  localEnvs.put(GlobalConstants.ENV_VAR_FRAMEWORK_VERSION,frameworkVersion.toString());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_CONNECT_STRING,conf.getZkConnectString());
  localEnvs.put(GlobalConstants.ENV_VAR_ZK_ROOT_DIR,conf.getZkRootDir());
  localEnvs.put(GlobalConstants.ENV_VAR_AM_VERSION,conf.getAmVersion().toString());
  localEnvs.put(GlobalConstants.ENV_VAR_AM_RM_HEARTBEAT_INTERVAL_SEC,conf.getAmRmHeartbeatIntervalSec().toString());
  Vector<CharSequence> vargs=new Vector<>(30);
  vargs.add(ApplicationConstants.Environment.JAVA_HOME.$$() + ""String_Node_Str"");
  vargs.add(""String_Node_Str"");
  vargs.add(""String_Node_Str"" + amResource.getMemory() + ""String_Node_Str"");
  vargs.add(GlobalConstants.MAIN_CLASS_APPLICATION_MASTER);
  vargs.add(String.format(""String_Node_Str"",ApplicationConstants.LOG_DIR_EXPANSION_VAR + File.separator));
  StringBuilder command=new StringBuilder();
  for (  CharSequence str : vargs) {
    command.append(str).append(""String_Node_Str"");
  }
  List<String> commands=new ArrayList<>();
  commands.add(command.toString());
  ByteBuffer fsTokens=null;
  if (UserGroupInformation.isSecurityEnabled()) {
    Credentials credentials=new Credentials();
    String tokenRenewer=yarnConf.get(YarnConfiguration.RM_PRINCIPAL);
    FileSystem fs=FileSystem.get(yarnConf);
    if (tokenRenewer == null || tokenRenewer.length() == 0) {
      throw new IOException(""String_Node_Str"");
    }
    final org.apache.hadoop.security.token.Token<?> tokens[]=fs.addDelegationTokens(tokenRenewer,credentials);
    if (tokens != null) {
      for (      org.apache.hadoop.security.token.Token<?> token : tokens) {
        LOGGER.logInfo(""String_Node_Str"" + fs.getUri() + ""String_Node_Str""+ token);
      }
    }
    DataOutputBuffer dob=new DataOutputBuffer();
    credentials.writeTokenStorageToStream(dob);
    fsTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  }
  return ContainerLaunchContext.newInstance(localResources,localEnvs,commands,null,fsTokens,null);
}"
34451,"private static FileStatus getFileStatusInHdfsInternal(String hdfsPath) throws Exception {
  try {
    FileSystem fs=FileSystem.get(conf);
    LOGGER.logInfo(""String_Node_Str"",hdfsPath);
    FileStatus fileStatus=fs.getFileStatus(new Path(hdfsPath));
    return fileStatus;
  }
 catch (  PathNotFoundException e) {
    throw new NonTransientException(""String_Node_Str"",e);
  }
}","private static FileStatus getFileStatusInHdfsInternal(String hdfsPath) throws Exception {
  try {
    FileSystem fs=FileSystem.get(conf);
    LOGGER.logInfo(""String_Node_Str"",hdfsPath);
    FileStatus fileStatus=fs.getFileStatus(new Path(hdfsPath));
    return fileStatus;
  }
 catch (  PathNotFoundException|FileNotFoundException e) {
    throw new NonTransientException(""String_Node_Str"",e);
  }
}"
34452,"private void gcCompletedFrameworks(Map<String,FrameworkStatus> completedFrameworkStatuses) throws Exception {
  Long currentTimestamp=System.currentTimeMillis();
  for (  FrameworkStatus completedFrameworkStatus : completedFrameworkStatuses.values()) {
    String frameworkName=completedFrameworkStatus.getFrameworkName();
    Integer frameworkVersion=completedFrameworkStatus.getFrameworkVersion();
    Long frameworkCompletedTimestamp=completedFrameworkStatus.getFrameworkCompletedTimestamp();
    if (!aggFrameworkRequests.containsKey(frameworkName)) {
      continue;
    }
    FrameworkRequest frameworkRequest=aggFrameworkRequests.get(frameworkName).getFrameworkRequest();
    if (frameworkRequest.getFrameworkDescriptor().getVersion().equals(frameworkVersion)) {
      continue;
    }
    if (frameworkRequest.getLaunchClientType() == LaunchClientType.DATA_DEPLOYMENT) {
      continue;
    }
    if (currentTimestamp - frameworkCompletedTimestamp <= conf.getFrameworkCompletedRetainSec()) {
      continue;
    }
    LOGGER.logInfo(""String_Node_Str"" + ""String_Node_Str"",frameworkName,frameworkCompletedTimestamp,conf.getFrameworkCompletedRetainSec(),currentTimestamp);
    deleteFrameworkRequest(frameworkName);
  }
}","private void gcCompletedFrameworks(Map<String,FrameworkStatus> completedFrameworkStatuses) throws Exception {
  Long currentTimestamp=System.currentTimeMillis();
  for (  FrameworkStatus completedFrameworkStatus : completedFrameworkStatuses.values()) {
    String frameworkName=completedFrameworkStatus.getFrameworkName();
    Integer frameworkVersion=completedFrameworkStatus.getFrameworkVersion();
    Long frameworkCompletedTimestamp=completedFrameworkStatus.getFrameworkCompletedTimestamp();
    if (!aggFrameworkRequests.containsKey(frameworkName)) {
      continue;
    }
    FrameworkRequest frameworkRequest=aggFrameworkRequests.get(frameworkName).getFrameworkRequest();
    if (!frameworkRequest.getFrameworkDescriptor().getVersion().equals(frameworkVersion)) {
      continue;
    }
    if (frameworkRequest.getLaunchClientType() == LaunchClientType.DATA_DEPLOYMENT) {
      continue;
    }
    if (currentTimestamp - frameworkCompletedTimestamp <= conf.getFrameworkCompletedRetainSec() * 1000) {
      continue;
    }
    LOGGER.logInfo(""String_Node_Str"" + ""String_Node_Str"",frameworkName,frameworkCompletedTimestamp,conf.getFrameworkCompletedRetainSec(),currentTimestamp);
    deleteFrameworkRequest(frameworkName);
  }
}"
34453,"/** 
 * setEquals determines whether two string sets are identical.
 * @param a the first set.
 * @param b the second set.
 * @return whether a equals to b.
 */
public static boolean setEquals(List<String> a,List<String> b){
  if (a.size() != b.size()) {
    return false;
  }
  Collections.sort(a);
  Collections.sort(b);
  for (int i=0; i < a.size(); i++) {
    if (!a.get(i).equals(b.get(i))) {
      return false;
    }
  }
  return true;
}","/** 
 * setEquals determines whether two string sets are identical.
 * @param a the first set.
 * @param b the second set.
 * @return whether a equals to b.
 */
public static boolean setEquals(List<String> a,List<String> b){
  if (a == null) {
    a=new ArrayList<>();
  }
  if (b == null) {
    b=new ArrayList<>();
  }
  if (a.size() != b.size()) {
    return false;
  }
  Collections.sort(a);
  Collections.sort(b);
  for (int i=0; i < a.size(); i++) {
    if (!a.get(i).equals(b.get(i))) {
      return false;
    }
  }
  return true;
}"
34454,"/** 
 * arrayEquals determines whether two string arrays are identical.
 * @param a the first array.
 * @param b the second array.
 * @return whether a equals to b.
 */
public static boolean arrayEquals(List<String> a,List<String> b){
  if (a.size() != b.size()) {
    return false;
  }
  for (int i=0; i < a.size(); i++) {
    if (!a.get(i).equals(b.get(i))) {
      return false;
    }
  }
  return true;
}","/** 
 * arrayEquals determines whether two string arrays are identical.
 * @param a the first array.
 * @param b the second array.
 * @return whether a equals to b.
 */
public static boolean arrayEquals(List<String> a,List<String> b){
  if (a == null) {
    a=new ArrayList<>();
  }
  if (b == null) {
    b=new ArrayList<>();
  }
  if (a.size() != b.size()) {
    return false;
  }
  for (int i=0; i < a.size(); i++) {
    if (!a.get(i).equals(b.get(i))) {
      return false;
    }
  }
  return true;
}"
34455,"/** 
 * array2DEquals determines whether two 2-dimensional string arrays are identical.
 * @param a the first 2-dimensional array.
 * @param b the second 2-dimensional array.
 * @return whether a equals to b.
 */
public static boolean array2DEquals(List<List<String>> a,List<List<String>> b){
  if (a.size() != b.size()) {
    return false;
  }
  for (int i=0; i < a.size(); i++) {
    if (!arrayEquals(a.get(i),b.get(i))) {
      return false;
    }
  }
  return true;
}","/** 
 * array2DEquals determines whether two 2-dimensional string arrays are identical.
 * @param a the first 2-dimensional array.
 * @param b the second 2-dimensional array.
 * @return whether a equals to b.
 */
public static boolean array2DEquals(List<List<String>> a,List<List<String>> b){
  if (a == null) {
    a=new ArrayList<>();
  }
  if (b == null) {
    b=new ArrayList<>();
  }
  if (a.size() != b.size()) {
    return false;
  }
  for (int i=0; i < a.size(); i++) {
    if (!arrayEquals(a.get(i),b.get(i))) {
      return false;
    }
  }
  return true;
}"
34456,"private Role createRole(String name){
  return allRoles.getOrDefault(name,new Role(name));
}","private Role createRole(String name){
  if (hasRole(name)) {
    return allRoles.get(name);
  }
 else {
    Role role=new Role(name);
    allRoles.put(name,role);
    return role;
  }
}"
34457,"public void testEnforce(Enforcer e,String sub,String obj,String act,boolean res){
  assertEquals(e.enforce(sub,obj,act),res);
}","public void testEnforce(Enforcer e,String sub,String obj,String act,boolean res){
  assertEquals(res,e.enforce(sub,obj,act));
}"
34458,"public void testEnforce(Enforcer e,String sub,String obj,String act,boolean res){
  assertEquals(e.enforce(sub,obj,act),res);
}","public void testEnforce(Enforcer e,String sub,String obj,String act,boolean res){
  assertEquals(res,e.enforce(sub,obj,act));
}"
34459,"public void testEnforceWithoutUsers(Enforcer e,String obj,String act,boolean res){
  assertEquals(e.enforce(obj,act),res);
}","public void testEnforceWithoutUsers(Enforcer e,String obj,String act,boolean res){
  assertEquals(res,e.enforce(obj,act));
}"
34460,"/** 
 * ipMatch determines whether IP address ip1 matches the pattern of IP address ip2, ip2 can be an IP address or a CIDR pattern. For example, ""192.168.2.123"" matches ""192.168.2.0/24""
 */
public static boolean ipMatch(String ip1,String ip2){
  IPAddressString ipas1=new IPAddressString(ip1);
  try {
    ipas1.validateIPv4();
  }
 catch (  AddressStringException e) {
    e.printStackTrace();
    throw new Error(""String_Node_Str"");
  }
  IPAddressString ipas2=new IPAddressString(ip2);
  try {
    ipas2.validate();
  }
 catch (  AddressStringException e) {
    e.printStackTrace();
    throw new Error(""String_Node_Str"");
  }
  if (ipas1.equals(ipas2)) {
    return true;
  }
  IPAddress ipa1;
  IPAddress ipa2;
  try {
    ipa1=ipas1.toAddress();
    ipa2=ipas2.toAddress();
  }
 catch (  AddressStringException e) {
    e.printStackTrace();
    throw new Error(""String_Node_Str"");
  }
  Integer prefix=ipa2.getNetworkPrefixLength();
  IPAddress mask=ipa2.getNetwork().getNetworkMask(prefix,false);
  return ipa1.mask(mask).equals(ipa2);
}","/** 
 * ipMatch determines whether IP address ip1 matches the pattern of IP address ip2, ip2 can be an IP address or a CIDR pattern. For example, ""192.168.2.123"" matches ""192.168.2.0/24""
 */
public static boolean ipMatch(String ip1,String ip2){
  IPAddressString ipas1=new IPAddressString(ip1);
  try {
    ipas1.validateIPv4();
  }
 catch (  AddressStringException e) {
    e.printStackTrace();
    throw new Error(""String_Node_Str"");
  }
  IPAddressString ipas2=new IPAddressString(ip2);
  try {
    ipas2.validate();
  }
 catch (  AddressStringException e) {
    e.printStackTrace();
    throw new Error(""String_Node_Str"");
  }
  if (ipas1.equals(ipas2)) {
    return true;
  }
  IPAddress ipa1;
  IPAddress ipa2;
  try {
    ipa1=ipas1.toAddress();
    ipa2=ipas2.toAddress();
  }
 catch (  AddressStringException e) {
    e.printStackTrace();
    throw new Error(""String_Node_Str"");
  }
  Integer prefix=ipa2.getNetworkPrefixLength();
  IPAddress mask=ipa2.getNetwork().getNetworkMask(prefix,false);
  return ipa1.mask(mask).equals(ipas2.getHostAddress());
}"
34461,"protected void deleteRole(Role role){
  for (  Role r : roles) {
    if (r.name.equals(role.name)) {
      roles.remove(r);
    }
  }
}","void deleteRole(Role role){
  for (  Role r : roles) {
    if (r.name.equals(role.name)) {
      roles.remove(r);
    }
  }
}"
34462,"protected boolean hasDirectRole(String name){
  for (  Role r : roles) {
    if (r.name.equals(name)) {
      return true;
    }
  }
  return false;
}","boolean hasDirectRole(String name){
  for (  Role r : roles) {
    if (r.name.equals(name)) {
      return true;
    }
  }
  return false;
}"
34463,"protected boolean hasRole(String name,int hierarchyLevel){
  if (name.equals(name)) {
    return true;
  }
  if (hierarchyLevel <= 0) {
    return false;
  }
  for (  Role role : roles) {
    if (role.hasRole(name,hierarchyLevel - 1)) {
      return true;
    }
  }
  return false;
}","boolean hasRole(String name,int hierarchyLevel){
  if (this.name.equals(name)) {
    return true;
  }
  if (hierarchyLevel <= 0) {
    return false;
  }
  for (  Role role : roles) {
    if (role.hasRole(name,hierarchyLevel - 1)) {
      return true;
    }
  }
  return false;
}"
34464,"protected void addRole(Role role){
  for (  Role r : roles) {
    if (r.name.equals(role.name)) {
      return;
    }
  }
  roles.add(role);
}","void addRole(Role role){
  for (  Role r : roles) {
    if (r.name.equals(role.name)) {
      return;
    }
  }
  roles.add(role);
}"
34465,"protected List<String> getRoles(){
  List<String> names=new ArrayList<>();
  for (  Role r : roles) {
    names.add(r.name);
  }
  return names;
}","List<String> getRoles(){
  List<String> names=new ArrayList<>();
  for (  Role r : roles) {
    names.add(r.name);
  }
  return names;
}"
34466,"/** 
 * escapeAssertion escapes the dots in the assertion, because the expression evaluation doesn't support such variable names.
 */
public static String escapeAssertion(String s){
  s=s.replaceAll(""String_Node_Str"",""String_Node_Str"");
  s=s.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return s;
}","/** 
 * escapeAssertion escapes the dots in the assertion, because the expression evaluation doesn't support such variable names.
 */
public static String escapeAssertion(String s){
  s=s.replace(""String_Node_Str"",""String_Node_Str"");
  s=s.replace(""String_Node_Str"",""String_Node_Str"");
  return s;
}"
34467,"public String get(String key){
  String section;
  String option;
  String[] keys=key.toLowerCase().split(""String_Node_Str"");
  if (keys.length >= 2) {
    section=keys[0];
    option=keys[1];
  }
 else {
    section=DEFAULT_SECTION;
    option=keys[0];
  }
  boolean ok=data.get(section).containsKey(option);
  if (ok) {
    return data.get(section).get(option);
  }
 else {
    return ""String_Node_Str"";
  }
}","public String get(String key){
  String section;
  String option;
  String[] keys=key.toLowerCase().split(""String_Node_Str"");
  if (keys.length >= 2) {
    section=keys[0];
    option=keys[1];
  }
 else {
    section=DEFAULT_SECTION;
    option=keys[0];
  }
  boolean ok=data.containsKey(section) && data.get(section).containsKey(option);
  if (ok) {
    return data.get(section).get(option);
  }
 else {
    return ""String_Node_Str"";
  }
}"
34468,"/** 
 * setWatcher sets the current watcher.
 */
public void setWatcher(Watcher watcher){
  this.watcher=watcher;
  watcher.setUpdateCallback(loadPolicy());
}","/** 
 * setWatcher sets the current watcher.
 */
public void setWatcher(Watcher watcher){
  this.watcher=watcher;
  watcher.setUpdateCallback(this::loadPolicy);
}"
34469,"/** 
 * SetUpdateCallback sets the callback function that the watcher will call when the policy in DB has been changed by other instances. A classic callback is Enforcer.LoadPolicy().
 */
public void setUpdateCallback(Method callback);","/** 
 * SetUpdateCallback sets the callback function that the watcher will call when the policy in DB has been changed by other instances. A classic callback is Enforcer.LoadPolicy().
 */
void setUpdateCallback(Runnable runnable);"
34470,"/** 
 * Update calls the update callback of other instances to synchronize their policy. It is usually called after changing the policy in DB, like Enforcer.SavePolicy(), Enforcer.AddPolicy(), Enforcer.RemovePolicy(), etc.
 */
public void update();","/** 
 * Update calls the update callback of other instances to synchronize their policy. It is usually called after changing the policy in DB, like Enforcer.SavePolicy(), Enforcer.AddPolicy(), Enforcer.RemovePolicy(), etc.
 */
void update();"
34471,"/** 
 * DefaultRoleManager is the constructor for creating an instance of the default RoleManager implementation.
 */
public DefaultRoleManager(int maxHierarchyLevel){
  allRoles=new HashMap<>();
  maxHierarchyLevel=maxHierarchyLevel;
}","/** 
 * DefaultRoleManager is the constructor for creating an instance of the default RoleManager implementation.
 */
public DefaultRoleManager(int maxHierarchyLevel){
  allRoles=new HashMap<>();
  this.maxHierarchyLevel=maxHierarchyLevel;
}"
34472,"/** 
 * DefaultRoleManager is the constructor for creating an instance of the default RoleManager implementation.
 */
public DefaultRoleManager(int level){
  this.allRoles=new HashMap<>();
  this.level=level;
}","/** 
 * DefaultRoleManager is the constructor for creating an instance of the default RoleManager implementation.
 */
public DefaultRoleManager(int level){
  this.allRoles=new HashMap<String,Role>();
  this.level=level;
}"
34473,"private void updateByProgress(float progress){
  mArcPath.reset();
  float startX=mDirection == DIRECTION_LEFT ? 0 : getWidth();
  float progressX=endX * (progress - 1f);
  if (progress >= 0 && progress <= 2 && mNeedFade) {
    mFadeView.setAlpha(progress / 2);
  }
  if (progress >= 1f) {
    float realX=mDirection == DIRECTION_LEFT ? progressX : startX - progressX;
    mArcPath.moveTo(startX,0);
    mArcPath.lineTo(realX,0);
    mArcPath.quadTo(mDirection == DIRECTION_LEFT ? endX : startX - endX,arcDrawY == 0 ? getHeight() / 2 : arcDrawY,realX,getHeight());
    mArcPath.lineTo(startX,getHeight());
    mContent.setTranslationX(mDirection == DIRECTION_LEFT ? progressX : -progressX);
    if (progress >= 2f) {
      isBouncing=true;
    }
  }
 else {
    mArcPath.moveTo(startX,0);
    if (isOpen) {
      mArcPath.quadTo(mDirection == DIRECTION_LEFT ? endX * progress : getScreenWidth() - endX * progress,arcDrawY == 0 ? getHeight() / 2 : arcDrawY,startX,getHeight());
      if (progress <= 0f) {
        isBouncing=true;
      }
      if (!isBouncing) {
        mContent.setTranslationX(mDirection == DIRECTION_LEFT ? progressX : -progressX);
      }
 else {
        mContent.setTranslationX(0);
      }
    }
 else {
      mArcPath.quadTo(mDirection == DIRECTION_LEFT ? endX * 2 * progress : startX - (endX * 2 * progress),arcDrawY == 0 ? getHeight() / 2 : arcDrawY,startX,getHeight());
    }
  }
  mArcPath.close();
  if (menuListener != null) {
    menuListener.onProgressUpdate(progress,isBouncing);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    if (mSpring.getCurrentValue() <= 2f) {
      invalidateOutline();
    }
  }
  postInvalidate();
}","private void updateByProgress(float progress){
  mArcPath.reset();
  float startX=mDirection == DIRECTION_LEFT ? 0 : getWidth();
  if (progress >= 0 && progress <= 2 && mNeedFade) {
    mFadeView.setAlpha(progress / 2);
  }
  if (progress >= 1f) {
    float progressX=endX * (progress - 1f);
    float realX=mDirection == DIRECTION_LEFT ? progressX : startX - progressX;
    mArcPath.moveTo(startX,0);
    mArcPath.lineTo(realX,0);
    mArcPath.quadTo(mDirection == DIRECTION_LEFT ? endX : startX - endX,arcDrawY == 0 ? getHeight() / 2 : arcDrawY,realX,getHeight());
    mArcPath.lineTo(startX,getHeight());
    mContent.setTranslationX(mDirection == DIRECTION_LEFT ? progressX : -progressX);
    if (progress >= 2f) {
      isBouncing=true;
    }
  }
 else {
    mArcPath.moveTo(startX,0);
    if (isOpen) {
      mArcPath.quadTo(mDirection == DIRECTION_LEFT ? endX * progress : getScreenWidth() - endX * progress,arcDrawY == 0 ? getHeight() / 2 : arcDrawY,startX,getHeight());
      if (progress <= 0f) {
        isBouncing=true;
      }
      mContent.setTranslationX(0);
    }
 else {
      mArcPath.quadTo(mDirection == DIRECTION_LEFT ? endX * 2 * progress : startX - (endX * 2 * progress),arcDrawY == 0 ? getHeight() / 2 : arcDrawY,startX,getHeight());
    }
  }
  mArcPath.close();
  if (menuListener != null) {
    menuListener.onProgressUpdate(progress,isBouncing);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    if (mSpring.getCurrentValue() <= 2f) {
      invalidateOutline();
    }
  }
  postInvalidate();
}"
34474,"private void handleProxyData(Channel channel,Object msg,boolean isHttp) throws Exception {
  if (cf == null) {
    if (isHttp && !(msg instanceof HttpRequest)) {
      return;
    }
    ProxyHandler proxyHandler=ProxyHandleFactory.build(proxyConfig);
    RequestProto requestProto=new RequestProto(host,port,isSsl);
    ChannelInitializer channelInitializer=isHttp ? new HttpProxyInitializer(channel,requestProto,proxyHandler) : new TunnelProxyInitializer(channel,proxyHandler);
    Bootstrap bootstrap=new Bootstrap();
    bootstrap.group(serverConfig.getLoopGroup()).channel(NioSocketChannel.class).handler(channelInitializer);
    if (proxyConfig != null) {
      bootstrap.resolver(NoopAddressResolverGroup.INSTANCE);
    }
    requestList=new LinkedList();
    cf=bootstrap.connect(host,port);
    cf.addListener((ChannelFutureListener)future -> {
      if (future.isSuccess()) {
        future.channel().writeAndFlush(msg);
synchronized (requestList) {
          requestList.forEach((obj) -> future.channel().write(obj));
          isConnect=true;
        }
      }
 else {
        future.channel().close();
        channel.close();
      }
    }
);
  }
 else {
synchronized (requestList) {
      if (isConnect) {
        cf.channel().writeAndFlush(msg);
      }
 else {
        requestList.add(msg);
      }
    }
  }
}","private void handleProxyData(Channel channel,Object msg,boolean isHttp) throws Exception {
  if (cf == null) {
    if (isHttp && !(msg instanceof HttpRequest)) {
      return;
    }
    ProxyHandler proxyHandler=ProxyHandleFactory.build(proxyConfig);
    RequestProto requestProto=new RequestProto(host,port,isSsl);
    ChannelInitializer channelInitializer=isHttp ? new HttpProxyInitializer(channel,requestProto,proxyHandler) : new TunnelProxyInitializer(channel,proxyHandler);
    Bootstrap bootstrap=new Bootstrap();
    bootstrap.group(serverConfig.getLoopGroup()).channel(NioSocketChannel.class).handler(channelInitializer);
    if (proxyConfig != null) {
      bootstrap.resolver(NoopAddressResolverGroup.INSTANCE);
    }
    requestList=new LinkedList();
    cf=bootstrap.connect(host,port);
    cf.addListener((ChannelFutureListener)future -> {
      if (future.isSuccess()) {
        future.channel().writeAndFlush(msg);
synchronized (requestList) {
          requestList.forEach((obj) -> future.channel().write(obj));
          requestList.clear();
          isConnect=true;
        }
      }
 else {
        future.channel().close();
        channel.close();
      }
    }
);
  }
 else {
synchronized (requestList) {
      if (isConnect) {
        cf.channel().writeAndFlush(msg);
      }
 else {
        requestList.add(msg);
      }
    }
  }
}"
34475,"public static RequestProto getRequestProto(HttpRequest httpRequest){
  RequestProto requestProto=new RequestProto();
  int port=-1;
  String hostStr=httpRequest.headers().get(HttpHeaderNames.HOST);
  if (hostStr == null) {
    return null;
  }
  String uriStr=httpRequest.uri();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(hostStr);
  String portTemp=null;
  if (matcher.find()) {
    requestProto.setHost(matcher.group(""String_Node_Str""));
    portTemp=matcher.group(""String_Node_Str"");
    if (portTemp == null) {
      matcher=pattern.matcher(uriStr);
      if (matcher.find()) {
        portTemp=matcher.group(""String_Node_Str"");
      }
    }
  }
  if (portTemp != null) {
    port=Integer.parseInt(portTemp);
  }
  boolean isSsl=uriStr.indexOf(""String_Node_Str"") == 0 || hostStr.indexOf(""String_Node_Str"") == 0;
  if (port == -1) {
    if (isSsl) {
      port=443;
    }
 else {
      port=80;
    }
  }
  requestProto.setPort(port);
  requestProto.setSsl(isSsl);
  return requestProto;
}","public static RequestProto getRequestProto(HttpRequest httpRequest){
  RequestProto requestProto=new RequestProto();
  int port=-1;
  String hostStr=httpRequest.headers().get(HttpHeaderNames.HOST);
  if (hostStr == null) {
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(httpRequest.uri());
    if (matcher.find()) {
      hostStr=matcher.group(""String_Node_Str"");
    }
 else {
      return null;
    }
  }
  String uriStr=httpRequest.uri();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(hostStr);
  String portTemp=null;
  if (matcher.find()) {
    requestProto.setHost(matcher.group(""String_Node_Str""));
    portTemp=matcher.group(""String_Node_Str"");
    if (portTemp == null) {
      matcher=pattern.matcher(uriStr);
      if (matcher.find()) {
        portTemp=matcher.group(""String_Node_Str"");
      }
    }
  }
  if (portTemp != null) {
    port=Integer.parseInt(portTemp);
  }
  boolean isSsl=uriStr.indexOf(""String_Node_Str"") == 0 || hostStr.indexOf(""String_Node_Str"") == 0;
  if (port == -1) {
    if (isSsl) {
      port=443;
    }
 else {
      port=80;
    }
  }
  requestProto.setPort(port);
  requestProto.setSsl(isSsl);
  return requestProto;
}"
34476,"private void handleProxyData(final Channel channel,final Object msg,boolean isHttp) throws Exception {
  if (cf == null) {
    if (!(msg instanceof HttpRequest)) {
      return;
    }
    ProxyHandler proxyHandler=ProxyHandleFactory.build(proxyConfig);
    RequestProto proto=ProtoUtil.getRequestProto((HttpRequest)msg);
    proto.setSsl(isSSL);
    ChannelInitializer channelInitializer=isHttp ? new HttpProxyInitializer(channel,proto,proxyHandler) : new TunnelProxyInitializer(channel,proxyHandler);
    Bootstrap bootstrap=new Bootstrap();
    bootstrap.group(HttpProxyServer.proxyGroup).channel(NioSocketChannel.class).handler(channelInitializer);
    if (proxyConfig != null) {
      bootstrap.resolver(NoopAddressResolverGroup.INSTANCE);
    }
    cf=bootstrap.connect(host,port).sync();
  }
  cf.channel().writeAndFlush(msg);
}","private void handleProxyData(Channel channel,Object msg,boolean isHttp) throws Exception {
  if (cf == null) {
    if (isHttp && !(msg instanceof HttpRequest)) {
      return;
    }
    ProxyHandler proxyHandler=ProxyHandleFactory.build(proxyConfig);
    RequestProto proto=new RequestProto(host,port,isSSL);
    ChannelInitializer channelInitializer=isHttp ? new HttpProxyInitializer(channel,proto,proxyHandler) : new TunnelProxyInitializer(channel,proxyHandler);
    Bootstrap bootstrap=new Bootstrap();
    bootstrap.group(HttpProxyServer.proxyGroup).channel(NioSocketChannel.class).handler(channelInitializer);
    if (proxyConfig != null) {
      bootstrap.resolver(NoopAddressResolverGroup.INSTANCE);
    }
    cf=bootstrap.connect(host,port).sync();
  }
  cf.channel().writeAndFlush(msg);
}"
34477,"private void handleProxyData(final Channel channel,final Object msg,boolean isHttp) throws InterruptedException {
  if (cf == null) {
    ProxyHandler proxyHandler=ProxyHandleFactory.build(proxyConfig);
    RequestProto proto=ProtoUtil.getRequestProto((HttpRequest)msg);
    proto.setSsl(isSSL);
    ChannelInitializer channelInitializer=isHttp ? new HttpProxyInitializer(channel,proto,proxyHandler) : new TunnelProxyInitializer(channel,proxyHandler);
    Bootstrap bootstrap=new Bootstrap();
    bootstrap.group(HttpProxyServer.proxyGroup).channel(NioSocketChannel.class).handler(channelInitializer);
    if (proxyConfig != null) {
      bootstrap.resolver(NoopAddressResolverGroup.INSTANCE);
    }
    cf=bootstrap.connect(host,port).sync();
  }
  cf.channel().writeAndFlush(msg);
}","private void handleProxyData(final Channel channel,final Object msg,boolean isHttp) throws InterruptedException {
  if (!channel.isOpen()) {
    return;
  }
  if (cf == null) {
    ProxyHandler proxyHandler=ProxyHandleFactory.build(proxyConfig);
    RequestProto proto=ProtoUtil.getRequestProto((HttpRequest)msg);
    proto.setSsl(isSSL);
    ChannelInitializer channelInitializer=isHttp ? new HttpProxyInitializer(channel,proto,proxyHandler) : new TunnelProxyInitializer(channel,proxyHandler);
    Bootstrap bootstrap=new Bootstrap();
    bootstrap.group(HttpProxyServer.proxyGroup).channel(NioSocketChannel.class).handler(channelInitializer);
    if (proxyConfig != null) {
      bootstrap.resolver(NoopAddressResolverGroup.INSTANCE);
    }
    cf=bootstrap.connect(host,port).sync();
  }
  cf.channel().writeAndFlush(msg);
}"
34478,"public static void main(String[] args) throws Exception {
  new HttpProxyServer().start(9999);
}","public static void main(String[] args) throws Exception {
  new HttpProxyServer().proxyInterceptFactory(() -> new HttpProxyIntercept(){
    @Override public boolean beforeRequest(    Channel clientChannel,    HttpRequest httpRequest){
      httpRequest.headers().set(HttpHeaderNames.USER_AGENT,""String_Node_Str"");
      return true;
    }
    @Override public boolean afterResponse(    Channel clientChannel,    Channel proxyChannel,    HttpResponse httpResponse){
      httpResponse.headers().add(""String_Node_Str"",""String_Node_Str"");
      return true;
    }
  }
).start(9999);
}"
34479,"public static void main(String[] args) throws InterruptedException {
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(new NioEventLoopGroup()).channel(NioSocketChannel.class).handler(new ChannelInitializer(){
    @Override protected void initChannel(    Channel ch) throws Exception {
      ch.pipeline().addLast(SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build().newHandler(ch.alloc(),""String_Node_Str"",443));
      ch.pipeline().addLast(new HttpClientCodec());
      ch.pipeline().addLast(new HttpObjectAggregator(81920000));
      ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg) throws Exception {
          System.out.println(msg.toString());
        }
      }
);
    }
  }
);
  ChannelFuture cf=bootstrap.connect(""String_Node_Str"",443).sync();
  HttpRequest httpRequest=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.HOST,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.USER_AGENT,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.CONTENT_LENGTH,0);
  System.out.println(httpRequest.toString());
  cf.channel().writeAndFlush(httpRequest);
}","public static void main(String[] args) throws InterruptedException {
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(new NioEventLoopGroup()).channel(NioSocketChannel.class).handler(new ChannelInitializer(){
    @Override protected void initChannel(    Channel ch) throws Exception {
      ch.pipeline().addLast(new HttpClientCodec());
      ch.pipeline().addLast(new HttpObjectAggregator(81920000));
      ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
        @Override public void channelUnregistered(        ChannelHandlerContext ctx) throws Exception {
          System.out.println(""String_Node_Str"");
          super.channelUnregistered(ctx);
        }
        @Override public void exceptionCaught(        ChannelHandlerContext ctx,        Throwable cause) throws Exception {
          System.out.println(""String_Node_Str"");
          super.exceptionCaught(ctx,cause);
        }
        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg) throws Exception {
          System.out.println(msg.toString());
        }
      }
);
    }
    @Override public void channelUnregistered(    ChannelHandlerContext ctx) throws Exception {
      System.out.println(""String_Node_Str"");
      super.channelUnregistered(ctx);
    }
    @Override public void exceptionCaught(    ChannelHandlerContext ctx,    Throwable cause) throws Exception {
      System.out.println(""String_Node_Str"");
      super.exceptionCaught(ctx,cause);
    }
  }
);
  ChannelFuture cf=bootstrap.connect(""String_Node_Str"",80).sync();
  HttpRequest httpRequest=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.HOST,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.USER_AGENT,""String_Node_Str"");
  byte[] bts=new byte[512];
  httpRequest.headers().add(HttpHeaderNames.CONTENT_LENGTH,bts.length + 100);
  System.out.println(httpRequest.toString());
  HttpContent httpContent=new DefaultLastHttpContent();
  httpContent.content().writeBytes(bts);
  cf.channel().writeAndFlush(httpRequest);
  cf.channel().writeAndFlush(httpContent);
}"
34480,"@Override protected void initChannel(Channel ch) throws Exception {
  ch.pipeline().addLast(SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build().newHandler(ch.alloc(),""String_Node_Str"",443));
  ch.pipeline().addLast(new HttpClientCodec());
  ch.pipeline().addLast(new HttpObjectAggregator(81920000));
  ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelRead(    ChannelHandlerContext ctx,    Object msg) throws Exception {
      System.out.println(msg.toString());
    }
  }
);
}","@Override protected void initChannel(Channel ch) throws Exception {
  ch.pipeline().addLast(new HttpClientCodec());
  ch.pipeline().addLast(new HttpObjectAggregator(81920000));
  ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelUnregistered(    ChannelHandlerContext ctx) throws Exception {
      System.out.println(""String_Node_Str"");
      super.channelUnregistered(ctx);
    }
    @Override public void exceptionCaught(    ChannelHandlerContext ctx,    Throwable cause) throws Exception {
      System.out.println(""String_Node_Str"");
      super.exceptionCaught(ctx,cause);
    }
    @Override public void channelRead(    ChannelHandlerContext ctx,    Object msg) throws Exception {
      System.out.println(msg.toString());
    }
  }
);
}"
34481,"public static void main(String[] args) throws InterruptedException {
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(new NioEventLoopGroup()).channel(NioSocketChannel.class).resolver(NoopAddressResolverGroup.INSTANCE).handler(new ChannelInitializer(){
    @Override protected void initChannel(    Channel ch) throws Exception {
      System.out.println(1111);
      ch.pipeline().addLast(new HttpClientCodec());
      ch.pipeline().addLast(new HttpObjectAggregator(81920000));
      ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg) throws Exception {
          System.out.println(msg.toString());
        }
      }
);
    }
  }
);
  ChannelFuture cf=bootstrap.connect(""String_Node_Str"",80).sync();
  HttpRequest httpRequest=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.HOST,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.USER_AGENT,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.CONTENT_LENGTH,0);
  System.out.println(httpRequest.toString());
  cf.channel().writeAndFlush(httpRequest);
}","public static void main(String[] args) throws InterruptedException {
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(new NioEventLoopGroup()).channel(NioSocketChannel.class).resolver(NoopAddressResolverGroup.INSTANCE).handler(new ChannelInitializer(){
    @Override protected void initChannel(    Channel ch) throws Exception {
      ch.pipeline().addLast(new HttpClientCodec());
      ch.pipeline().addLast(new HttpObjectAggregator(81920000));
      ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg) throws Exception {
          System.out.println(msg.toString());
        }
      }
);
    }
  }
);
  ChannelFuture cf=bootstrap.connect(""String_Node_Str"",80).sync();
  HttpRequest httpRequest=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.HOST,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.USER_AGENT,""String_Node_Str"");
  httpRequest.headers().add(HttpHeaderNames.CONTENT_LENGTH,0);
  System.out.println(httpRequest.toString());
  cf.channel().writeAndFlush(httpRequest);
}"
34482,"@Override protected void initChannel(Channel ch) throws Exception {
  System.out.println(1111);
  ch.pipeline().addLast(new HttpClientCodec());
  ch.pipeline().addLast(new HttpObjectAggregator(81920000));
  ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelRead(    ChannelHandlerContext ctx,    Object msg) throws Exception {
      System.out.println(msg.toString());
    }
  }
);
}","@Override protected void initChannel(Channel ch) throws Exception {
  ch.pipeline().addLast(new HttpClientCodec());
  ch.pipeline().addLast(new HttpObjectAggregator(81920000));
  ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelRead(    ChannelHandlerContext ctx,    Object msg) throws Exception {
      System.out.println(msg.toString());
    }
  }
);
}"
34483,"public static void main(String[] args){
  EventLoopGroup bossGroup=new NioEventLoopGroup();
  EventLoopGroup workerGroup=new NioEventLoopGroup();
  try {
    ServerBootstrap b=new ServerBootstrap();
    b.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.TCP_NODELAY,true).childHandler(new ChannelInitializer<Channel>(){
      @Override protected void initChannel(      Channel ch) throws Exception {
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg) throws Exception {
            ctx.channel().writeAndFlush(msg);
          }
        }
);
      }
    }
);
    ChannelFuture f=b.bind(80).sync();
    f.channel().closeFuture().sync();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    bossGroup.shutdownGracefully();
    workerGroup.shutdownGracefully();
  }
}","public static void main(String[] args){
  EventLoopGroup bossGroup=new NioEventLoopGroup();
  EventLoopGroup workerGroup=new NioEventLoopGroup();
  try {
    ServerBootstrap b=new ServerBootstrap();
    b.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.TCP_NODELAY,true).childHandler(new ChannelInitializer<Channel>(){
      @Override protected void initChannel(      Channel ch) throws Exception {
        ch.pipeline().addLast(new HttpServerCodec());
        ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg) throws Exception {
            ctx.channel().writeAndFlush(msg);
          }
        }
);
      }
      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause) throws Exception {
        System.out.println(""String_Node_Str"");
        super.exceptionCaught(ctx,cause);
      }
      @Override public void channelUnregistered(      ChannelHandlerContext ctx) throws Exception {
        System.out.println(""String_Node_Str"");
        super.channelUnregistered(ctx);
      }
    }
);
    ChannelFuture f=b.bind(80).sync();
    f.channel().closeFuture().sync();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    bossGroup.shutdownGracefully();
    workerGroup.shutdownGracefully();
  }
}"
34484,"@Override protected void initChannel(Channel ch) throws Exception {
  ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelRead(    ChannelHandlerContext ctx,    Object msg) throws Exception {
      ctx.channel().writeAndFlush(msg);
    }
  }
);
}","@Override protected void initChannel(Channel ch) throws Exception {
  ch.pipeline().addLast(new HttpServerCodec());
  ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelRead(    ChannelHandlerContext ctx,    Object msg) throws Exception {
      ctx.channel().writeAndFlush(msg);
    }
  }
);
}"
34485,"@Override public void channelRead(final ChannelHandlerContext ctx,final Object msg) throws Exception {
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)msg;
    if (status == 0) {
      status=1;
      ProtoUtil.RequestProto requestProto=ProtoUtil.getRequestProto(request);
      this.host=requestProto.getHost();
      this.port=requestProto.getPort();
      if (""String_Node_Str"".equalsIgnoreCase(request.method().name())) {
        status=2;
        HttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpProxyServer.SUCCESS);
        ctx.writeAndFlush(response);
        ctx.channel().pipeline().remove(""String_Node_Str"");
        return;
      }
    }
    if (!httpProxyIntercept.beforeRequest(ctx.channel(),request)) {
      return;
    }
    handleProxyData(ctx.channel(),msg,true);
  }
 else   if (msg instanceof HttpContent) {
    if (status != 2) {
      if (!httpProxyIntercept.beforeRequest(ctx.channel(),(HttpContent)msg)) {
        return;
      }
      handleProxyData(ctx.channel(),msg,true);
    }
 else {
      status=1;
    }
  }
 else {
    ByteBuf byteBuf=(ByteBuf)msg;
    if (byteBuf.getByte(0) == 22) {
      isSSL=true;
      SslContext sslCtx=SslContextBuilder.forServer(HttpProxyServer.serverPriKey,CertPool.getCert(this.host)).build();
      ctx.pipeline().addFirst(""String_Node_Str"",new HttpServerCodec());
      ctx.pipeline().addFirst(""String_Node_Str"",sslCtx.newHandler(ctx.alloc()));
      ctx.pipeline().fireChannelRead(msg);
      return;
    }
    handleProxyData(ctx.channel(),msg,false);
  }
}","@Override public void channelRead(final ChannelHandlerContext ctx,final Object msg) throws Exception {
  if (msg instanceof HttpRequest) {
    HttpRequest request=(HttpRequest)msg;
    if (status == 0) {
      ProtoUtil.RequestProto requestProto=ProtoUtil.getRequestProto(request);
      if (requestProto == null) {
        ctx.channel().close();
        return;
      }
      status=1;
      this.host=requestProto.getHost();
      this.port=requestProto.getPort();
      if (""String_Node_Str"".equalsIgnoreCase(request.method().name())) {
        status=2;
        HttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpProxyServer.SUCCESS);
        ctx.writeAndFlush(response);
        ctx.channel().pipeline().remove(""String_Node_Str"");
        return;
      }
    }
    if (!httpProxyIntercept.beforeRequest(ctx.channel(),request)) {
      return;
    }
    handleProxyData(ctx.channel(),msg,true);
  }
 else   if (msg instanceof HttpContent) {
    if (status != 2) {
      if (!httpProxyIntercept.beforeRequest(ctx.channel(),(HttpContent)msg)) {
        return;
      }
      handleProxyData(ctx.channel(),msg,true);
    }
 else {
      status=1;
    }
  }
 else {
    ByteBuf byteBuf=(ByteBuf)msg;
    if (byteBuf.getByte(0) == 22) {
      isSSL=true;
      SslContext sslCtx=SslContextBuilder.forServer(HttpProxyServer.serverPriKey,CertPool.getCert(this.host)).build();
      ctx.pipeline().addFirst(""String_Node_Str"",new HttpServerCodec());
      ctx.pipeline().addFirst(""String_Node_Str"",sslCtx.newHandler(ctx.alloc()));
      ctx.pipeline().fireChannelRead(msg);
      return;
    }
    handleProxyData(ctx.channel(),msg,false);
  }
}"
34486,"/** 
 * @param clientTargetURI
 * @return
 */
private ProfileElementInstance getTargetURIInst(URI clientTargetURI,ProfileElement elem){
  String host=clientTargetURI.getHost();
  int port=clientTargetURI.getPort();
  String uri=clientTargetURI.getScheme() + ""String_Node_Str"" + host;
  if (port > 0) {
    uri+=""String_Node_Str"" + port;
  }
  ProfileElementInstance pei=elem.getInstance(uri);
  return pei;
}","/** 
 * @param clientTargetURI
 * @return
 */
private ProfileElementInstance getTargetURIInst(URI clientTargetURI,ProfileElement elem){
  String uri=clientTargetURI.getScheme() + ""String_Node_Str"";
  String host=clientTargetURI.getHost();
  if (host == null) {
    String authority=clientTargetURI.getAuthority();
    int index=authority.indexOf(""String_Node_Str"");
    if (index >= 0) {
      uri+=authority.substring(index + 1);
    }
 else {
      uri+=authority;
    }
  }
 else {
    uri+=host;
    int port=clientTargetURI.getPort();
    if (port > 0) {
      uri+=""String_Node_Str"" + port;
    }
  }
  ProfileElementInstance pei=elem.getInstance(uri);
  return pei;
}"
34487,"private boolean needDoCap(Method method,Object[] args){
  if (method.getExceptionTypes().length == 0 || !method.getExceptionTypes()[0].getName().equals(IOException.class.getName())) {
    return false;
  }
  String methodName=method.getName();
  if (queueNameIndex.containsKey(methodName) && args.length != 0) {
    if (isTempQueue((String)args[queueNameIndex.get(methodName)])) {
      return false;
    }
  }
  return true;
}","private boolean needDoCap(Method method,Object[] args){
  if (method.getExceptionTypes().length == 0 || !method.getExceptionTypes()[0].getName().equals(IOException.class.getName())) {
    return false;
  }
  String methodName=method.getName();
  if (queueNameIndex.containsKey(methodName) && (args != null && args.length != 0)) {
    if (isTempQueue((String)args[queueNameIndex.get(methodName)])) {
      return false;
    }
  }
  return true;
}"
34488,"@Override public BufferedReader getReader() throws IOException {
  return new BufferedReader(new InputStreamReader(rewriteInputStream));
}","@Override public BufferedReader getReader() throws IOException {
  return new BufferedReader(new InputStreamReader(wrapServletInputStream()));
}"
34489,"public StringBuilder getContent(){
  if (this.builder == null) {
    return this.rewriteInputStream.getContent();
  }
 else {
    return this.builder;
  }
}","public StringBuilder getContent(){
  if (builder != null) {
    return builder;
  }
  if (rewriteInputStream == null) {
    return new StringBuilder();
  }
  return rewriteInputStream.getContent();
}"
34490,"/** 
 * 清空池，方便回收
 */
public void clearBodyContent(){
  StringBuilder bodyContent;
  if (this.builder == null) {
    bodyContent=this.rewriteInputStream.getContent();
  }
 else {
    bodyContent=this.builder;
  }
  bodyContent.delete(0,bodyContent.length());
}","/** 
 * 清空池，方便回收， 虽然可能并没有什么卵用
 */
public void clearBodyContent(){
  if (builder != null || rewriteInputStream == null) {
    return;
  }
  StringBuilder bodyContent=rewriteInputStream.getContent();
  bodyContent.delete(0,bodyContent.length());
}"
34491,"@Override public ServletInputStream getInputStream() throws IOException {
  return this.rewriteInputStream;
}","@Override public ServletInputStream getInputStream() throws IOException {
  return wrapServletInputStream();
}"
34492,"public RewriteIvcRequestWrapper(HttpServletRequest request,String tag){
  super(request);
  this.tag=tag;
  try {
    this.inputStream=request.getInputStream();
  }
 catch (  IOException e) {
    this.builder=new StringBuilder(e.toString());
  }
  rewriteInputStream=new RewriteIvcInputStream(this.inputStream,request.getCharacterEncoding());
}","public RewriteIvcRequestWrapper(HttpServletRequest request,String tag){
  super(request);
  this.request=request;
  this.tag=tag;
}"
34493,"@Override protected void doRequest(HttpServletRequest request,HttpServletResponse response,InterceptContext context){
  StringBuffer bf=request.getRequestURL();
  if (bf == null) {
    return;
  }
  String urlInfo=bf.toString();
  if (!MonitorServerUtil.isIncludeMonitorURLForService(urlInfo) && !MonitorServerUtil.isIncludeMonitorURLForPage(urlInfo)) {
    return;
  }
  if (logger.isDebugable()) {
    logger.debug(""String_Node_Str"" + urlInfo,null);
  }
  Object args[];
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    RewriteIvcResponseWrapper responseWrapper=new RewriteIvcResponseWrapper(response,""String_Node_Str"");
    context.put(InterceptConstants.HTTPRESPONSE,responseWrapper);
    request.getParameterMap();
    RewriteIvcRequestWrapper requestWrapper=new RewriteIvcRequestWrapper(request,""String_Node_Str"");
    context.put(InterceptConstants.HTTPREQUEST,requestWrapper);
    args=new Object[]{requestWrapper,responseWrapper};
  }
 else {
    args=new Object[]{request,response};
  }
  Map<String,Object> params=new HashMap<String,Object>();
  HttpServletRequest httprequest=(HttpServletRequest)context.get(InterceptConstants.HTTPREQUEST);
  String traceContext=httprequest.getHeader(InvokeChainConstants.PARAM_HTTPHEAD_SPANINFO);
  String method=httprequest.getHeader(InvokeChainConstants.CLIENT_IT_METHOD);
  if (!StringHelper.isEmpty(traceContext)) {
    params.put(InvokeChainConstants.PARAM_HTTPHEAD_SPANINFO,traceContext);
  }
  if (!StringHelper.isEmpty(method)) {
    params.put(InvokeChainConstants.CLIENT_IT_METHOD,method);
  }
  String clientip=MonitorServerUtil.getClientIP(httprequest.getRemoteAddr(),httprequest.getHeader(""String_Node_Str""));
  params.put(InvokeChainConstants.PARAM_INTECEPTCONTEXT,context);
  params.put(InvokeChainConstants.PARAM_REMOTE_SRC_INFO,clientip);
  params.put(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL,request.getRequestURL().toString());
  UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",ServerSpanAdapter.class);
  UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",InvokeChainConstants.CHAIN_APP_SERVICE,InvokeChainConstants.CapturePhase.PRECAP,params,ServerSpanAdapter.class,args);
}","@Override protected void doRequest(HttpServletRequest request,HttpServletResponse response,InterceptContext context){
  StringBuffer bf=request.getRequestURL();
  if (bf == null) {
    return;
  }
  String urlInfo=bf.toString();
  if (!MonitorServerUtil.isIncludeMonitorURLForService(urlInfo) && !MonitorServerUtil.isIncludeMonitorURLForPage(urlInfo)) {
    return;
  }
  if (logger.isDebugable()) {
    logger.debug(""String_Node_Str"" + urlInfo,null);
  }
  Object args[];
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    RewriteIvcRequestWrapper requestWrapper=new RewriteIvcRequestWrapper(request,""String_Node_Str"");
    context.put(InterceptConstants.HTTPREQUEST,requestWrapper);
    RewriteIvcResponseWrapper responseWrapper=new RewriteIvcResponseWrapper(response,""String_Node_Str"");
    context.put(InterceptConstants.HTTPRESPONSE,responseWrapper);
    args=new Object[]{requestWrapper,responseWrapper};
  }
 else {
    args=new Object[]{request,response};
  }
  Map<String,Object> params=new HashMap<String,Object>();
  HttpServletRequest httprequest=(HttpServletRequest)context.get(InterceptConstants.HTTPREQUEST);
  String traceContext=httprequest.getHeader(InvokeChainConstants.PARAM_HTTPHEAD_SPANINFO);
  String method=httprequest.getHeader(InvokeChainConstants.CLIENT_IT_METHOD);
  if (!StringHelper.isEmpty(traceContext)) {
    params.put(InvokeChainConstants.PARAM_HTTPHEAD_SPANINFO,traceContext);
  }
  if (!StringHelper.isEmpty(method)) {
    params.put(InvokeChainConstants.CLIENT_IT_METHOD,method);
  }
  String clientip=MonitorServerUtil.getClientIP(httprequest.getRemoteAddr(),httprequest.getHeader(""String_Node_Str""));
  params.put(InvokeChainConstants.PARAM_INTECEPTCONTEXT,context);
  params.put(InvokeChainConstants.PARAM_REMOTE_SRC_INFO,clientip);
  params.put(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL,request.getRequestURL().toString());
  UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",ServerSpanAdapter.class);
  UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",InvokeChainConstants.CHAIN_APP_SERVICE,InvokeChainConstants.CapturePhase.PRECAP,params,ServerSpanAdapter.class,args);
}"
34494,"@Override public void afterDoCap(InvokeChainContext context,Object[] args){
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    String url=(String)context.get(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL);
    Span span=this.spanFactory.getRemoveSpanFromContext(url);
    if (span == null) {
      return;
    }
    SlowOperContext slowOperContext=new SlowOperContext();
    if (RewriteIvcRequestWrapper.class.isAssignableFrom(args[0].getClass()) && RewriteIvcResponseWrapper.class.isAssignableFrom(args[1].getClass())) {
      RewriteIvcRequestWrapper request=(RewriteIvcRequestWrapper)args[0];
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_REQ_BODY,request.getContent().toString());
      request.clearBodyContent();
      RewriteIvcResponseWrapper response=(RewriteIvcResponseWrapper)args[1];
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_RSP_HEADER,getResponHeaders(response));
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_RSP_BODY,response.getContent().toString());
      response.clearBodyContent();
    }
 else {
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_REQ_BODY,""String_Node_Str"");
      HttpServletResponse response=(HttpServletResponse)args[1];
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_RSP_HEADER,getResponHeaders(response));
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_RSP_BODY,""String_Node_Str"");
    }
    Object params[]={span,slowOperContext};
    UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",span.getEndpointInfo().split(""String_Node_Str"")[0],InvokeChainConstants.CapturePhase.DOCAP,context,params);
  }
}","@Override public void afterDoCap(InvokeChainContext context,Object[] args){
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    String url=(String)context.get(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL);
    Span span=this.spanFactory.getRemoveSpanFromContext(url);
    if (span == null) {
      return;
    }
    SlowOperContext slowOperContext=new SlowOperContext();
    if (RewriteIvcRequestWrapper.class.isAssignableFrom(args[0].getClass()) && RewriteIvcResponseWrapper.class.isAssignableFrom(args[1].getClass())) {
      RewriteIvcRequestWrapper request=(RewriteIvcRequestWrapper)args[0];
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_REQ_HEADER,getRequestHeaders(request) + generateParameterString(request.getAllParameters()));
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_REQ_BODY,request.getContent().toString());
      request.clearBodyContent();
      RewriteIvcResponseWrapper response=(RewriteIvcResponseWrapper)args[1];
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_RSP_HEADER,getResponHeaders(response));
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_RSP_BODY,response.getContent().toString());
      response.clearBodyContent();
    }
 else {
      HttpServletRequest request=(HttpServletRequest)args[0];
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_REQ_HEADER,getRequestHeaders(request));
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_REQ_BODY,""String_Node_Str"");
      HttpServletResponse response=(HttpServletResponse)args[1];
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_RSP_HEADER,getResponHeaders(response));
      slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_RSP_BODY,""String_Node_Str"");
    }
    Object params[]={span,slowOperContext};
    UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",span.getEndpointInfo().split(""String_Node_Str"")[0],InvokeChainConstants.CapturePhase.DOCAP,context,params);
  }
}"
34495,"@Override public void afterPreCap(InvokeChainContext context,Object[] args){
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    String url=(String)context.get(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL);
    Span span=this.spanFactory.getSpanFromContext(url);
    SlowOperContext slowOperContext=new SlowOperContext();
    HttpServletRequest request=(HttpServletRequest)args[0];
    String parameters=JSONHelper.toString(request.getParameterMap());
    if (parameters == null) {
      parameters=""String_Node_Str"";
    }
    slowOperContext.put(SlowOperConstants.PROTOCOL_HTTP_REQ_HEADER,getRequestHeaders(request) + parameters);
    Object params[]={span,slowOperContext};
    UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",span.getEndpointInfo().split(""String_Node_Str"")[0],InvokeChainConstants.CapturePhase.PRECAP,context,params);
  }
}","@Override public void afterPreCap(InvokeChainContext context,Object[] args){
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    String url=(String)context.get(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL);
    Span span=this.spanFactory.getSpanFromContext(url);
    SlowOperContext slowOperContext=new SlowOperContext();
    Object params[]={span,slowOperContext};
    UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",span.getEndpointInfo().split(""String_Node_Str"")[0],InvokeChainConstants.CapturePhase.PRECAP,context,params);
  }
}"
34496,"@Override public void buildSpanContent(SlowOperContext slowOperContext,SlowOperSpan slowOperSpan){
  if (slowOperContext.containsKey(SlowOperConstants.PROTOCOL_HTTP_REQ_HEADER)) {
    String reqHeader=(String)slowOperContext.get(SlowOperConstants.PROTOCOL_HTTP_REQ_HEADER);
    int length=DataConvertHelper.toInt(System.getProperty(""String_Node_Str""),2000);
    slowOperSpan.appendContent(reqHeader,length,true);
  }
 else {
    String reqBody=((String)slowOperContext.get(SlowOperConstants.PROTOCOL_HTTP_REQ_BODY)).replace(System.getProperty(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").trim();
    String rspHeader=(String)slowOperContext.get(SlowOperConstants.PROTOCOL_HTTP_RSP_HEADER);
    String rspBody=((String)slowOperContext.get(SlowOperConstants.PROTOCOL_HTTP_RSP_BODY)).replace(System.getProperty(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"").trim();
    int headerLength=DataConvertHelper.toInt(System.getProperty(""String_Node_Str""),2000);
    int bodyLength=DataConvertHelper.toInt(System.getProperty(""String_Node_Str""),2000);
    slowOperSpan.appendContent(reqBody,bodyLength,true);
    slowOperSpan.appendContent(rspHeader,headerLength,true);
    slowOperSpan.appendContent(rspBody,bodyLength,true);
  }
}","@Override public void buildSpanContent(SlowOperContext slowOperContext,SlowOperSpan slowOperSpan){
  if (!slowOperContext.containsKey(SlowOperConstants.PROTOCOL_HTTP_REQ_HEADER)) {
    return;
  }
  String reqHeader=(String)slowOperContext.get(SlowOperConstants.PROTOCOL_HTTP_REQ_HEADER);
  String reqBody=(String)slowOperContext.get(SlowOperConstants.PROTOCOL_HTTP_REQ_BODY);
  reqBody=reqBody.replace(lineSeparator,""String_Node_Str"").trim();
  String respHeader=(String)slowOperContext.get(SlowOperConstants.PROTOCOL_HTTP_RSP_HEADER);
  String respBody=(String)slowOperContext.get(SlowOperConstants.PROTOCOL_HTTP_RSP_BODY);
  respBody=respBody.replace(lineSeparator,""String_Node_Str"").trim();
  slowOperSpan.appendContent(reqHeader,headerLength,true);
  slowOperSpan.appendContent(reqBody,bodyLength,true);
  slowOperSpan.appendContent(respHeader,headerLength,true);
  slowOperSpan.appendContent(respBody,bodyLength,true);
}"
34497,"public TailFile(String serverid,String appid,String logid,File file,Map<String,String> headers,long inode,long pos,long lnumber,boolean unsplit) throws IOException {
  this.raf=new RandomAccessFile(file,""String_Node_Str"");
  if (pos > 0)   raf.seek(pos);
  this.path=file.getAbsolutePath();
  this.inode=inode;
  this.pos=pos;
  this.lastUpdated=0L;
  this.needTail=true;
  this.headers=headers;
  this.serverid=serverid;
  this.appid=appid;
  this.logid=logid;
  this.id=serverid + ""String_Node_Str"" + appid+ ""String_Node_Str""+ logid;
  this.lnumber=lnumber;
  this.unsplit=unsplit;
}","public TailFile(String serverid,String appid,String logid,File file,Map<String,String> headers,long inode,long pos,long lnumber,boolean unsplit) throws IOException {
  this.raf=new RandomAccessFile(file,""String_Node_Str"");
  if (pos > 0)   raf.seek(pos);
  this.path=file.getAbsolutePath();
  this.inode=inode;
  this.pos=pos;
  this.lastUpdated=0L;
  this.needTail=true;
  this.headers=headers;
  this.serverid=serverid;
  this.appid=appid;
  this.logid=logid;
  this.id=serverid + ""String_Node_Str"" + appid+ ""String_Node_Str""+ logid;
  this.lnumber=lnumber;
  this.unsplit=unsplit;
  if (this.unsplit) {
    this.lastUpdated=System.currentTimeMillis();
  }
}"
34498,"/** 
 * 官网上的 【Top Hits Aggregation】 JAVA API 运行报错，
 * @see https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/_metrics_aggregations.html<pre> {@code AggregationBuilder aggregation = AggregationBuilders .terms(""agg"").field(""gender"") .subAggregation( AggregationBuilders.topHits(""top"") .explain(true) .size(1) .from(10) );}</pre> Caused by: java.lang.IllegalArgumentException: An SPI class of type org.apache.lucene.codecs.PostingsFormat with name 'Lucene50' does not exist. You need to add the corresponding JAR file supporting this SPI to your classpath. The current classpath supports the following names: [completion, completion090] <p> 以下满足张真要求的ES的查询可以工作，但找不到对应的JAVA API（原因在上）？？！！！ <pre>  {@code}{ ""aggs"": { ""time"": { ""terms"": { ""field"": ""time"", ""order"":{""_term"":""desc""}, ""size"": 1000 }, ""aggs"": { ""example"": { ""top_hits"": { ""sort"": [ { ""percpu"": { ""order"": ""desc"" } } ], ""size"": 1 } } } } }, ""from"": 0, ""size"": 0 } } </pre>
 * @param data
 */
private void queryDistinct(UAVHttpMessage data){
  try {
    String ipport=data.getRequest(""String_Node_Str"");
    AggregationBuilder agg=AggregationBuilders.terms(""String_Node_Str"").field(""String_Node_Str"").order(Terms.Order.term(false)).subAggregation(AggregationBuilders.terms(""String_Node_Str"").field(""String_Node_Str""));
    String date=data.getRequest(""String_Node_Str"");
    String currentIndex;
    if (date != null) {
      currentIndex=this.indexMgr.getIndexByDate(date);
    }
 else {
      currentIndex=this.indexMgr.getCurrentIndex();
    }
    SearchResponse sResponse=client.getClient().prepareSearch(currentIndex).setTypes(ThreadAnalysisIndexMgr.JTA_TABLE).setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(""String_Node_Str"",ipport))).setSize(0).addAggregation(agg).execute().actionGet();
    Terms aggs=sResponse.getAggregations().get(""String_Node_Str"");
    List<Map<String,Object>> records=new ArrayList<Map<String,Object>>();
    for (    Terms.Bucket entry : aggs.getBuckets()) {
      String key=entry.getKey().toString();
      long docCount=entry.getDocCount();
      Map<String,Object> record=new HashMap<String,Object>();
      record.put(""String_Node_Str"",key);
      record.put(""String_Node_Str"",docCount);
      Terms userAggs=entry.getAggregations().get(""String_Node_Str"");
      List<Terms.Bucket> users=userAggs.getBuckets();
      if (!users.isEmpty()) {
        record.put(""String_Node_Str"",users.get(0).getKey().toString());
      }
      records.add(record);
    }
    data.putResponse(""String_Node_Str"",JSONHelper.toString(records));
    data.putResponse(""String_Node_Str"",aggs.getBuckets().size() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (e.getMessage().indexOf(""String_Node_Str"") >= 0) {
      data.putResponse(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      data.putResponse(""String_Node_Str"",""String_Node_Str"");
      log.err(this,""String_Node_Str"" + JSONHelper.toString(data),e);
    }
  }
}","/** 
 * 官网上的 【Top Hits Aggregation】 JAVA API 运行报错，
 * @see https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/_metrics_aggregations.html<pre> {@code AggregationBuilder aggregation = AggregationBuilders .terms(""agg"").field(""gender"") .subAggregation( AggregationBuilders.topHits(""top"") .explain(true) .size(1) .from(10) );}</pre> Caused by: java.lang.IllegalArgumentException: An SPI class of type org.apache.lucene.codecs.PostingsFormat with name 'Lucene50' does not exist. You need to add the corresponding JAR file supporting this SPI to your classpath. The current classpath supports the following names: [completion, completion090] <p> 以下满足张真要求的ES的查询可以工作，但找不到对应的JAVA API（原因在上）？？！！！ <pre>  {@code}{ ""aggs"": { ""time"": { ""terms"": { ""field"": ""time"", ""order"":{""_term"":""desc""}, ""size"": 1000 }, ""aggs"": { ""example"": { ""top_hits"": { ""sort"": [ { ""percpu"": { ""order"": ""desc"" } } ], ""size"": 1 } } } } }, ""from"": 0, ""size"": 0 } } </pre>
 * @param data
 */
private void queryDistinct(UAVHttpMessage data){
  try {
    String ipport=data.getRequest(""String_Node_Str"");
    AggregationBuilder agg=AggregationBuilders.terms(""String_Node_Str"").field(""String_Node_Str"").size(1000).order(Terms.Order.term(false)).subAggregation(AggregationBuilders.terms(""String_Node_Str"").field(""String_Node_Str"").size(1000));
    String date=data.getRequest(""String_Node_Str"");
    String currentIndex;
    if (date != null) {
      currentIndex=this.indexMgr.getIndexByDate(date);
    }
 else {
      currentIndex=this.indexMgr.getCurrentIndex();
    }
    SearchResponse sResponse=client.getClient().prepareSearch(currentIndex).setTypes(ThreadAnalysisIndexMgr.JTA_TABLE).setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(""String_Node_Str"",ipport))).setSize(0).addAggregation(agg).execute().actionGet();
    Terms aggs=sResponse.getAggregations().get(""String_Node_Str"");
    List<Map<String,Object>> records=new ArrayList<Map<String,Object>>();
    for (    Terms.Bucket entry : aggs.getBuckets()) {
      String key=entry.getKey().toString();
      long docCount=entry.getDocCount();
      Map<String,Object> record=new HashMap<String,Object>();
      record.put(""String_Node_Str"",key);
      record.put(""String_Node_Str"",docCount);
      Terms userAggs=entry.getAggregations().get(""String_Node_Str"");
      List<Terms.Bucket> users=userAggs.getBuckets();
      if (!users.isEmpty()) {
        record.put(""String_Node_Str"",users.get(0).getKey().toString());
      }
      records.add(record);
    }
    data.putResponse(""String_Node_Str"",JSONHelper.toString(records));
    data.putResponse(""String_Node_Str"",aggs.getBuckets().size() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (e.getMessage().indexOf(""String_Node_Str"") >= 0) {
      data.putResponse(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      data.putResponse(""String_Node_Str"",""String_Node_Str"");
      log.err(this,""String_Node_Str"" + JSONHelper.toString(data),e);
    }
  }
}"
34499,"private void initHookFactory(){
  String config=System.getProperty(""String_Node_Str"");
  hookConfig=JSONHelper.toObjectArray(config,Map.class);
  String hookFactoryClassStr=System.getProperty(""String_Node_Str"" + vendor.toString().toLowerCase() + ""String_Node_Str"");
  if (hookFactoryClassStr == null) {
    hookfactory=new HookFactory();
    return;
  }
  Class<?> hookFactoryClass=null;
  try {
    hookFactoryClass=this.getClass().getClassLoader().loadClass(hookFactoryClassStr);
    this.logger.info(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    hookfactory=(HookFactory)hookFactoryClass.newInstance();
  }
 catch (  InstantiationException e) {
    this.logger.error(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    this.logger.error(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"",e);
  }
}","private void initHookFactory(){
  String config=System.getProperty(""String_Node_Str"");
  hookConfig=JSONHelper.toObject(config,List.class,true);
  String hookFactoryClassStr=System.getProperty(""String_Node_Str"" + vendor.toString().toLowerCase() + ""String_Node_Str"");
  if (hookFactoryClassStr == null) {
    hookfactory=new HookFactory();
    return;
  }
  Class<?> hookFactoryClass=null;
  try {
    hookFactoryClass=this.getClass().getClassLoader().loadClass(hookFactoryClassStr);
    this.logger.info(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    hookfactory=(HookFactory)hookFactoryClass.newInstance();
  }
 catch (  InstantiationException e) {
    this.logger.error(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    this.logger.error(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"",e);
  }
}"
34500,"private void initHookFactory(){
  String config=System.getProperty(""String_Node_Str"");
  hookConfig=JSONHelper.toObject(config,List.class,true);
  String hookFactoryClassStr=System.getProperty(""String_Node_Str"" + vendor.toString().toLowerCase() + ""String_Node_Str"");
  if (hookFactoryClassStr == null) {
    hookfactory=new HookFactory();
    return;
  }
  Class<?> hookFactoryClass=null;
  try {
    hookFactoryClass=this.getClass().getClassLoader().loadClass(hookFactoryClassStr);
    this.logger.info(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    hookfactory=(HookFactory)hookFactoryClass.newInstance();
  }
 catch (  InstantiationException e) {
    this.logger.error(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    this.logger.error(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"",e);
  }
}","@SuppressWarnings(""String_Node_Str"") private void initHookFactory(){
  String config=System.getProperty(""String_Node_Str"");
  hookConfig=JSONHelper.toObject(config,List.class,true);
  String hookFactoryClassStr=System.getProperty(""String_Node_Str"" + vendor.toString().toLowerCase() + ""String_Node_Str"");
  if (hookFactoryClassStr == null) {
    hookfactory=new HookFactory();
    return;
  }
  Class<?> hookFactoryClass=null;
  try {
    hookFactoryClass=this.getClass().getClassLoader().loadClass(hookFactoryClassStr);
    this.logger.info(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    hookfactory=(HookFactory)hookFactoryClass.newInstance();
  }
 catch (  InstantiationException e) {
    this.logger.error(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    this.logger.error(""String_Node_Str"" + hookFactoryClassStr + ""String_Node_Str"",e);
  }
}"
34501,"/** 
 * 解析入参
 * @param args
 * @return
 */
private String parseParams(Object[] args){
  if (args == null) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder();
  for (  Object temp : args) {
    if (temp == null) {
      temp=""String_Node_Str"";
    }
    String tempStr=temp.toString();
    int methodParamsLength=DataConvertHelper.toInt(System.getProperty(""String_Node_Str""),2000);
    if (tempStr.toString().length() > methodParamsLength && methodParamsLength > 0) {
      tempStr=tempStr.substring(0,methodParamsLength);
    }
 else     if (methodParamsLength == 0) {
      tempStr=""String_Node_Str"";
    }
    tempStr=EncodeHelper.urlEncode(tempStr);
    stringBuilder.append(tempStr.length() + ""String_Node_Str"" + tempStr.toString()+ ""String_Node_Str"");
  }
  return stringBuilder.substring(0,stringBuilder.length() - 1);
}","/** 
 * 解析入参
 * @param args
 * @return
 */
private String parseParams(Object[] args){
  if (args == null || args.length == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder();
  for (  Object temp : args) {
    if (temp == null) {
      temp=""String_Node_Str"";
    }
    String tempStr=temp.toString();
    int methodParamsLength=DataConvertHelper.toInt(System.getProperty(""String_Node_Str""),2000);
    if (tempStr.toString().length() > methodParamsLength && methodParamsLength > 0) {
      tempStr=tempStr.substring(0,methodParamsLength);
    }
 else     if (methodParamsLength == 0) {
      tempStr=""String_Node_Str"";
    }
    tempStr=EncodeHelper.urlEncode(tempStr);
    stringBuilder.append(tempStr.length() + ""String_Node_Str"" + tempStr.toString()+ ""String_Node_Str"");
  }
  return stringBuilder.substring(0,stringBuilder.length() - 1);
}"
34502,"@Override public void afterDoCap(InvokeChainContext context,Object[] args){
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    String url=(String)context.get(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL);
    Span span=this.spanFactory.getRemoveSpanFromContext(url);
    Object params[]={span};
    UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",span.getEndpointInfo().split(""String_Node_Str"")[0],InvokeChainConstants.CapturePhase.DOCAP,context,params);
  }
}","@Override public void afterDoCap(InvokeChainContext context,Object[] args){
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    String url=(String)context.get(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL);
    Span span=this.spanFactory.getRemoveSpanFromContext(url);
    if (span == null || span.getEndpointInfo() == null) {
      if (logger.isDebugable()) {
        logger.debug(""String_Node_Str"" + url,null);
      }
      return;
    }
    Object params[]={span};
    UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",span.getEndpointInfo().split(""String_Node_Str"")[0],InvokeChainConstants.CapturePhase.DOCAP,context,params);
  }
}"
34503,"@Override public void afterPreCap(InvokeChainContext context,Object[] args){
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    AMQP.BasicProperties props=(BasicProperties)args[2];
    byte[] body=(byte[])args[3];
    SlowOperContext slowOperContext=new SlowOperContext();
    if (props == null || StringHelper.isEmpty(props.getContentEncoding())) {
      String content=""String_Node_Str"";
      try {
        content=new String(body,""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        content=""String_Node_Str"";
      }
      slowOperContext.put(SlowOperConstants.PROTOCOL_MQ_RABBIT_BODY,content);
    }
 else {
      String encoding=props.getContentEncoding();
      String content=""String_Node_Str"";
      try {
        content=new String(body,encoding);
      }
 catch (      UnsupportedEncodingException e) {
        content=""String_Node_Str"" + encoding + ""String_Node_Str"";
      }
      slowOperContext.put(SlowOperConstants.PROTOCOL_MQ_RABBIT_BODY,content);
    }
    String url=(String)context.get(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL);
    Span span=this.spanFactory.getSpanFromContext(url);
    Object params[]={span,slowOperContext};
    UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",span.getEndpointInfo().split(""String_Node_Str"")[0],InvokeChainConstants.CapturePhase.PRECAP,context,params);
  }
}","@Override public void afterPreCap(InvokeChainContext context,Object[] args){
  if (UAVServer.instance().isExistSupportor(""String_Node_Str"")) {
    AMQP.BasicProperties props=(BasicProperties)args[2];
    byte[] body=(byte[])args[3];
    SlowOperContext slowOperContext=new SlowOperContext();
    if (props == null || StringHelper.isEmpty(props.getContentEncoding())) {
      String content=""String_Node_Str"";
      try {
        content=new String(body,""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        content=""String_Node_Str"";
      }
      slowOperContext.put(SlowOperConstants.PROTOCOL_MQ_RABBIT_BODY,content);
    }
 else {
      String encoding=props.getContentEncoding();
      String content=""String_Node_Str"";
      try {
        content=new String(body,encoding);
      }
 catch (      UnsupportedEncodingException e) {
        content=""String_Node_Str"" + encoding + ""String_Node_Str"";
      }
      slowOperContext.put(SlowOperConstants.PROTOCOL_MQ_RABBIT_BODY,content);
    }
    String url=(String)context.get(CaptureConstants.INFO_APPSERVER_CONNECTOR_REQUEST_URL);
    Span span=this.spanFactory.getSpanFromContext(url);
    if (span == null || span.getEndpointInfo() == null) {
      if (logger.isDebugable()) {
        logger.debug(""String_Node_Str"" + url,null);
      }
      return;
    }
    Object params[]={span,slowOperContext};
    UAVServer.instance().runSupporter(""String_Node_Str"",""String_Node_Str"",span.getEndpointInfo().split(""String_Node_Str"")[0],InvokeChainConstants.CapturePhase.PRECAP,context,params);
  }
}"
34504,"/** 
 * /beans/jaxws:server/id to class implementor name or /beans/jaxws:endpoint/id to class implementor name
 */
private String getImplClassAsKey(String key,Node jaxws,ClassLoader cl,String serviceClass,String serviceBean){
  Node impl=jaxws.getAttributes().getNamedItem(serviceClass);
  if (null != impl) {
    String sClass=impl.getNodeValue();
    try {
      Class<?> c=cl.loadClass(sClass);
      if (c.isInterface() == true) {
        if (logger.isDebugable()) {
          logger.debug(""String_Node_Str"" + sClass + ""String_Node_Str""+ serviceClass+ ""String_Node_Str"",null);
        }
      }
 else {
        return sClass;
      }
    }
 catch (    ClassNotFoundException e) {
      if (logger.isDebugable()) {
        logger.debug(""String_Node_Str"" + sClass + ""String_Node_Str""+ serviceClass+ ""String_Node_Str"",e);
      }
    }
  }
  impl=jaxws.getAttributes().getNamedItem(serviceBean);
  if (impl != null) {
    String sClass=impl.getNodeValue();
    try {
      cl.loadClass(sClass);
      return sClass;
    }
 catch (    ClassNotFoundException e) {
      if (logger.isDebugable()) {
        logger.debug(""String_Node_Str"" + sClass + ""String_Node_Str""+ serviceBean+ ""String_Node_Str"",e);
      }
      Node beanClazz=processor.selectXMLNode(""String_Node_Str"" + sClass + ""String_Node_Str"");
      return beanClazz.getNodeValue();
    }
  }
  impl=processor.selectXMLNode(serviceBean + ""String_Node_Str"",jaxws);
  if (impl != null) {
    return impl.getNodeValue();
  }
  impl=processor.selectXMLNode(serviceBean + ""String_Node_Str"",jaxws);
  if (impl != null) {
    Node beanClazz=processor.selectXMLNode(""String_Node_Str"" + impl.getNodeValue() + ""String_Node_Str"");
    return beanClazz.getNodeValue();
  }
  impl=processor.selectXMLNode(serviceBean + ""String_Node_Str"",jaxws);
  if (impl != null) {
    Node beanClazz=processor.selectXMLNode(""String_Node_Str"" + impl.getNodeValue() + ""String_Node_Str"");
    return beanClazz.getNodeValue();
  }
  return key;
}","/** 
 * /beans/jaxws:server/id to class implementor name or /beans/jaxws:endpoint/id to class implementor name
 */
private String getImplClassAsKey(String key,Node jaxws,ClassLoader cl,String serviceClass,String serviceBean){
  Node impl=jaxws.getAttributes().getNamedItem(serviceClass);
  if (null != impl) {
    String sClass=impl.getNodeValue();
    try {
      Class<?> c=cl.loadClass(sClass);
      if (c.isInterface() == true) {
        if (logger.isDebugable()) {
          logger.debug(""String_Node_Str"" + sClass + ""String_Node_Str""+ serviceClass+ ""String_Node_Str"",null);
        }
      }
 else {
        return sClass;
      }
    }
 catch (    ClassNotFoundException e) {
      if (logger.isDebugable()) {
        logger.debug(""String_Node_Str"" + sClass + ""String_Node_Str""+ serviceClass+ ""String_Node_Str"",e);
      }
    }
  }
  impl=jaxws.getAttributes().getNamedItem(serviceBean);
  if (impl != null) {
    String sClass=impl.getNodeValue();
    try {
      cl.loadClass(sClass);
      return sClass;
    }
 catch (    ClassNotFoundException e) {
      if (logger.isDebugable()) {
        logger.debug(""String_Node_Str"" + sClass + ""String_Node_Str""+ serviceBean+ ""String_Node_Str"",e);
      }
      String classId=sClass.startsWith(""String_Node_Str"") ? sClass.substring(1) : sClass;
      Node beanClazz=processor.selectXMLNode(""String_Node_Str"" + classId + ""String_Node_Str"");
      if (beanClazz == null) {
        beanClazz=processor.selectXMLNode(""String_Node_Str"" + classId + ""String_Node_Str"");
      }
      return beanClazz.getNodeValue();
    }
  }
  impl=processor.selectXMLNode(serviceBean + ""String_Node_Str"",jaxws);
  if (impl != null) {
    return impl.getNodeValue();
  }
  impl=processor.selectXMLNode(serviceBean + ""String_Node_Str"",jaxws);
  if (impl != null) {
    Node beanClazz=processor.selectXMLNode(""String_Node_Str"" + impl.getNodeValue() + ""String_Node_Str"");
    return beanClazz.getNodeValue();
  }
  impl=processor.selectXMLNode(serviceBean + ""String_Node_Str"",jaxws);
  if (impl != null) {
    Node beanClazz=processor.selectXMLNode(""String_Node_Str"" + impl.getNodeValue() + ""String_Node_Str"");
    return beanClazz.getNodeValue();
  }
  return key;
}"
34505,"/** 
 * 支持普通Http Post调用和智能的带FailOver的调用
 * @param postUrl
 * @param data
 * @param contentType
 * @param encoding
 * @param callBack
 */
public void doHttpPost(String serverAddress,String subPath,byte[] data,String contentType,String encoding,HttpClientCallback callBack){
  ConnectionFailoverMgr cfm=httpConnInvokeMgr.get(serverAddress);
  if (cfm == null) {
    final String postURL=(subPath != null) ? (serverAddress + subPath) : serverAddress;
    httpAsyncClient.doAsyncHttpPost(postURL,data,contentType,encoding,callBack);
    return;
  }
  String url=cfm.getConnection();
  if (url == null) {
    String msg=""String_Node_Str"" + serverAddress + ""String_Node_Str"";
    this.getLogger().warn(this,msg);
    if (callBack != null) {
      HttpClientCallbackResult result=new HttpClientCallbackResult(null,null);
      result.setException(new HttpAsyncException(ExceptionEvent.REPLY_ERROR,new ConnectException(msg)));
      callBack.failed(result);
    }
    return;
  }
  String postURL=(subPath != null) ? (url + subPath) : url;
  getLogger().info(this,""String_Node_Str"" + postURL);
  PostHttpCallback postHttpCb=new PostHttpCallback();
  postHttpCb.setCallBack(callBack);
  postHttpCb.setCfm(cfm);
  postHttpCb.setContentType(contentType);
  postHttpCb.setData(data);
  postHttpCb.setEncoding(encoding);
  postHttpCb.setPostURL(postURL);
  postHttpCb.setServerAddress(serverAddress);
  postHttpCb.setSubPath(subPath);
  postHttpCb.setUrl(url);
  httpAsyncClient.doAsyncHttpPost(postURL,data,contentType,encoding,postHttpCb);
}","/** 
 * 支持普通Http Post调用和智能的带FailOver的调用
 * @param postUrl
 * @param subPath
 * @param data
 * @param contentType
 * @param encoding
 * @param callBack
 */
public void doHttpPost(String serverAddress,String subPath,byte[] data,String contentType,String encoding,HttpClientCallback callBack){
  ConnectionFailoverMgr cfm=httpConnInvokeMgr.get(serverAddress);
  if (cfm == null) {
    final String postURL=(subPath != null) ? (serverAddress + subPath) : serverAddress;
    httpAsyncClient.doAsyncHttpPost(postURL,data,contentType,encoding,callBack);
    return;
  }
  String url=cfm.getConnection();
  if (url == null) {
    String msg=""String_Node_Str"" + serverAddress + ""String_Node_Str"";
    this.getLogger().warn(this,msg);
    if (callBack != null) {
      HttpClientCallbackResult result=new HttpClientCallbackResult(null,null);
      result.setException(new HttpAsyncException(ExceptionEvent.REPLY_ERROR,new ConnectException(msg)));
      callBack.failed(result);
    }
    return;
  }
  String postURL=(subPath != null) ? (url + subPath) : url;
  getLogger().info(this,""String_Node_Str"" + postURL);
  PostHttpCallback postHttpCb=new PostHttpCallback();
  postHttpCb.setCallBack(callBack);
  postHttpCb.setCfm(cfm);
  postHttpCb.setContentType(contentType);
  postHttpCb.setData(data);
  postHttpCb.setEncoding(encoding);
  postHttpCb.setPostURL(postURL);
  postHttpCb.setServerAddress(serverAddress);
  postHttpCb.setSubPath(subPath);
  postHttpCb.setUrl(url);
  httpAsyncClient.doAsyncHttpPost(postURL,data,contentType,encoding,postHttpCb);
}"
34506,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") public void queryIVCData(String data,@Suspended AsyncResponse response){
  UAVHttpMessage msg=new UAVHttpMessage(data);
  this.doHttpPost(""String_Node_Str"",""String_Node_Str"",JSONHelper.toString(msg).getBytes(),""String_Node_Str"",""String_Node_Str"",new IVCCallback(response));
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") public void queryIVCData(String data,@Suspended AsyncResponse response){
  UAVHttpMessage msg=new UAVHttpMessage(data);
  this.doHttpPost(""String_Node_Str"",""String_Node_Str"",msg,new IVCCallback(response));
}"
34507,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") public void queryIVC(String data,@Suspended AsyncResponse response){
  UAVHttpMessage msg=new UAVHttpMessage(data);
  this.doHttpPost(""String_Node_Str"",""String_Node_Str"",JSONHelper.toString(msg).getBytes(),""String_Node_Str"",""String_Node_Str"",new IVCCallback(response));
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") public void queryIVC(String data,@Suspended AsyncResponse response){
  UAVHttpMessage msg=new UAVHttpMessage(data);
  this.doHttpPost(""String_Node_Str"",""String_Node_Str"",msg,new IVCCallback(response));
}"
34508,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") public void queryJavaThreadAnalysis(String data,@Suspended final AsyncResponse response){
  UAVHttpMessage msg=new UAVHttpMessage(data);
  this.doHttpPost(""String_Node_Str"",""String_Node_Str"",JSONHelper.toString(msg).getBytes(),""String_Node_Str"",""String_Node_Str"",new HttpClientCallback(){
    @Override public void completed(    HttpClientCallbackResult result){
      response.resume(result.getReplyData());
    }
    @Override public void failed(    HttpClientCallbackResult result){
      String reStr=result.getReplyDataAsString();
      response.resume(reStr);
      logger.err(this,""String_Node_Str"" + result.getRetCode() + ""String_Node_Str""+ reStr,result.getException());
    }
  }
);
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON + ""String_Node_Str"") public void queryJavaThreadAnalysis(String data,@Suspended final AsyncResponse response){
  UAVHttpMessage msg=new UAVHttpMessage(data);
  this.doHttpPost(""String_Node_Str"",""String_Node_Str"",msg,new HttpClientCallback(){
    @Override public void completed(    HttpClientCallbackResult result){
      response.resume(result.getReplyData());
    }
    @Override public void failed(    HttpClientCallbackResult result){
      String reStr=result.getReplyDataAsString();
      response.resume(reStr);
      logger.err(this,""String_Node_Str"" + result.getRetCode() + ""String_Node_Str""+ reStr,result.getException());
    }
  }
);
}"
34509,"/** 
 * buildDubboServiceComponents
 * @param mdf
 * @param pi
 * @param appid
 * @param compServices
 */
@SuppressWarnings(""String_Node_Str"") private void buildDubboServiceComponents(MonitorDataFrame mdf,Map<String,Object> pi,String appid,Map<String,Set<String>> compServices){
  Map<String,Object> comps=mdf.getElemInstValues(appid,""String_Node_Str"",""String_Node_Str"");
  if (comps == null || comps.size() == 0) {
    return;
  }
  pi.put(""String_Node_Str"",JSONHelper.toString(comps));
  for (  String compName : comps.keySet()) {
    Map<String,Object> info=(Map<String,Object>)comps.get(compName);
    Set<String> compServicesURLs=compServices.get(compName);
    if (compServicesURLs == null) {
      compServicesURLs=new HashSet<String>();
      compServices.put(compName,compServicesURLs);
    }
    String group=(String)info.get(""String_Node_Str"");
    String version=(String)info.get(""String_Node_Str"");
    String servcls=(String)info.get(""String_Node_Str"");
    Map<String,Object> compMethodInfo=(Map<String,Object>)info.get(""String_Node_Str"");
    if (compMethodInfo == null || compMethodInfo.size() == 0) {
      continue;
    }
    Map<String,Object> protocols=(Map<String,Object>)info.get(""String_Node_Str"");
    if (protocols == null || protocols.size() == 0) {
      continue;
    }
    for (    String method : compMethodInfo.keySet()) {
      for (      String protocol : protocols.keySet()) {
        Map<String,Object> pAttrs=(Map<String,Object>)protocols.get(protocol);
        Integer port=(Integer)pAttrs.get(""String_Node_Str"");
        String path=(String)pAttrs.get(""String_Node_Str"");
        path=(StringHelper.isEmpty(path)) ? servcls : path;
        String url=getDubboURL(group,version,method,port,protocol,path);
        compServicesURLs.add(url);
      }
    }
  }
}","/** 
 * buildDubboServiceComponents
 * @param mdf
 * @param pi
 * @param appid
 * @param compServices
 */
@SuppressWarnings(""String_Node_Str"") private void buildDubboServiceComponents(MonitorDataFrame mdf,Map<String,Object> pi,String appid,Map<String,Set<String>> compServices){
  Map<String,Object> comps=mdf.getElemInstValues(appid,""String_Node_Str"",""String_Node_Str"");
  String ip=mdf.getIP();
  if (comps == null || comps.size() == 0) {
    return;
  }
  pi.put(""String_Node_Str"",JSONHelper.toString(comps));
  for (  String compName : comps.keySet()) {
    Map<String,Object> info=(Map<String,Object>)comps.get(compName);
    Set<String> compServicesURLs=compServices.get(compName);
    if (compServicesURLs == null) {
      compServicesURLs=new HashSet<String>();
      compServices.put(compName,compServicesURLs);
    }
    String group=(String)info.get(""String_Node_Str"");
    String version=(String)info.get(""String_Node_Str"");
    String servcls=(String)info.get(""String_Node_Str"");
    Map<String,Object> compMethodInfo=(Map<String,Object>)info.get(""String_Node_Str"");
    if (compMethodInfo == null || compMethodInfo.size() == 0) {
      continue;
    }
    Map<String,Object> protocols=(Map<String,Object>)info.get(""String_Node_Str"");
    if (protocols == null || protocols.size() == 0) {
      continue;
    }
    for (    String method : compMethodInfo.keySet()) {
      for (      String protocol : protocols.keySet()) {
        Map<String,Object> pAttrs=(Map<String,Object>)protocols.get(protocol);
        Integer port=(Integer)pAttrs.get(""String_Node_Str"");
        String path=(String)pAttrs.get(""String_Node_Str"");
        path=(StringHelper.isEmpty(path)) ? servcls : path;
        String url=getDubboURL(ip,group,version,method,port,protocol,path);
        compServicesURLs.add(url);
      }
    }
  }
}"
34510,"private String getDubboURL(String group,String version,String method,Integer localPort,String protocol,String path){
  StringBuilder requestURL=new StringBuilder();
  requestURL.append(protocol).append(""String_Node_Str"").append(NetworkHelper.getLocalIP()).append(""String_Node_Str"").append(localPort);
  if (group != null) {
    requestURL.append(""String_Node_Str"").append(group);
  }
  requestURL.append(""String_Node_Str"").append(path);
  if (version != null) {
    requestURL.append(""String_Node_Str"").append(version);
  }
  requestURL.append(""String_Node_Str"").append(method);
  return requestURL.toString();
}","private String getDubboURL(String ip,String group,String version,String method,Integer localPort,String protocol,String path){
  StringBuilder requestURL=new StringBuilder();
  requestURL.append(protocol).append(""String_Node_Str"").append(ip).append(""String_Node_Str"").append(localPort);
  if (group != null) {
    requestURL.append(""String_Node_Str"").append(group);
  }
  requestURL.append(""String_Node_Str"").append(path);
  if (version != null) {
    requestURL.append(""String_Node_Str"").append(version);
  }
  requestURL.append(""String_Node_Str"").append(method);
  return requestURL.toString();
}"
34511,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  while (true) {
    new Object();
  }
}"
34512,"public static void main(String[] args){
  new FairyServer(""String_Node_Str"").start();
}","public static void main(String[] args){
  Looper.prepareMainLooper();
  new FairyServer(""String_Node_Str"").start();
  Looper.loop();
}"
34513,"public void enqueue(Request request,LogcatCall.ResponseCallback callback){
  String body=request.getBody().readUtf8();
  ZLog.d(""String_Node_Str"" + body);
  PostBody postBody=PostBody.parse(body);
  executor.execute(new LogcatCall(postBody,callback));
}","public void enqueue(Request request,LogcatCall.ResponseCallback callback){
  String body=request.getBody().readUtf8();
  PostBody postBody=PostBody.parse(body);
  executor.execute(new LogcatCall(postBody,callback));
}"
34514,"public String getValue(String key){
  String value=map.get(key);
  return value != null ? value : ""String_Node_Str"";
}","public String getValue(String key){
  return map.get(key);
}"
34515,"public static PostBody parse(String body){
  HashMap<String,String> fieldMap=new HashMap<>();
  String[] fields=body.split(""String_Node_Str"");
  for (  String field : fields) {
    String[] keyValue=field.split(""String_Node_Str"");
    fieldMap.put(keyValue[0],keyValue[1]);
  }
  return new PostBody(fieldMap);
}","public static PostBody parse(String rawBody){
  ZLog.i(""String_Node_Str"" + rawBody);
  String body=formatBody(rawBody);
  ZLog.i(""String_Node_Str"" + body);
  HashMap<String,String> fieldMap=new HashMap<>();
  String[] fields=body.split(""String_Node_Str"");
  for (  String field : fields) {
    String[] keyValue=field.split(""String_Node_Str"");
    if (keyValue.length == 1) {
      fieldMap.put(keyValue[0],""String_Node_Str"");
    }
 else     if (keyValue.length == 3) {
      fieldMap.put(keyValue[0],keyValue[1] + ""String_Node_Str"" + keyValue[2]);
    }
 else     if (keyValue.length == 2) {
      fieldMap.put(keyValue[0],keyValue[1]);
    }
  }
  return new PostBody(fieldMap);
}"
34516,"@Override public Date getNextTimeout(Date lastExecution,Date timerCreationTime){
  if (parsedSchedule == null) {
    if (lastExecution == null) {
      return new Date(expiration);
    }
    if (interval < 0) {
      return null;
    }
    return new Date(lastExecution.getTime() + interval);
  }
  long nextTimeout;
  if (lastExecution != null) {
    nextTimeout=parsedSchedule.getNextTimeout(lastExecution.getTime());
  }
 else {
    nextTimeout=parsedSchedule.getFirstTimeout();
  }
  if (nextTimeout == -1) {
    return null;
  }
  return new Date(nextTimeout);
}","@Override public Date getNextTimeout(Date lastExecution,Date timerCreationTime){
  if (parsedSchedule == null) {
    if (lastExecution == null) {
      return new Date(expiration);
    }
    if (interval < 0) {
      return null;
    }
    return new Date(lastExecution.getTime() + interval);
  }
  long nextTimeout;
  if (lastExecution != null) {
    nextTimeout=parsedSchedule.getNextTimeout(lastExecution.getTime());
  }
 else {
    nextTimeout=parsedSchedule.getFirstTimeout();
    if (nextTimeout == -1) {
      return timerCreationTime;
    }
  }
  if (nextTimeout == -1) {
    return null;
  }
  return new Date(nextTimeout);
}"
34517,"private static String jsonifyGCEvent(String wlpUserDir,String serverName,String hostName,Object event,String[] tags){
  GCData gcData=(GCData)event;
  StringBuilder sb=CollectorJsonHelpers.startGCJson(hostName,wlpUserDir,serverName);
  CollectorJsonHelpers.addToJSON(sb,gcData.getHeapKey(),Long.toString(gcData.getHeap()),false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getUsedHeapKey(),Long.toString(gcData.getUsedHeap()),false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getMaxHeapKey(),Long.toString(gcData.getMaxHeap()),false,false,false,false,false);
  long duration=gcData.getDuration() * 1000;
  CollectorJsonHelpers.addToJSON(sb,gcData.getDurationKey(),Long.toString(duration),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getGcTypeKey(),gcData.getGcType(),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getReasonKey(),gcData.getReason(),false,false,false,false,true);
  String datetime=CollectorJsonHelpers.dateFormatTL.get().format(gcData.getDatetime());
  CollectorJsonHelpers.addToJSON(sb,gcData.getDatetimeKey(),datetime,false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getSequenceKey(),gcData.getSequence(),false,false,false,false,true);
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String jsonifyGCEvent(String wlpUserDir,String serverName,String hostName,Object event,String[] tags){
  GCData gcData=(GCData)event;
  StringBuilder sb=CollectorJsonHelpers.startGCJson(hostName,wlpUserDir,serverName);
  CollectorJsonHelpers.addToJSON(sb,gcData.getHeapKey(),Long.toString(gcData.getHeap()),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getUsedHeapKey(),Long.toString(gcData.getUsedHeap()),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getMaxHeapKey(),Long.toString(gcData.getMaxHeap()),false,false,false,false,true);
  long duration=gcData.getDuration() * 1000;
  CollectorJsonHelpers.addToJSON(sb,gcData.getDurationKey(),Long.toString(duration),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getGcTypeKey(),gcData.getGcType(),false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getReasonKey(),gcData.getReason(),false,false,false,false,false);
  String datetime=CollectorJsonHelpers.dateFormatTL.get().format(gcData.getDatetime());
  CollectorJsonHelpers.addToJSON(sb,gcData.getDatetimeKey(),datetime,false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getSequenceKey(),gcData.getSequence(),false,false,false,false,false);
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
34518,"private static String jsonifyGCEvent(String wlpUserDir,String serverName,String hostName,Object event,String[] tags){
  GCData gcData=(GCData)event;
  StringBuilder sb=CollectorJsonHelpers.startGCJson1_1(hostName,wlpUserDir,serverName);
  CollectorJsonHelpers.addToJSON(sb,gcData.getHeapKey1_1(),Long.toString(gcData.getHeap()),false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getUsedHeapKey1_1(),Long.toString(gcData.getUsedHeap()),false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getMaxHeapKey1_1(),Long.toString(gcData.getMaxHeap()),false,false,false,false,false);
  long duration=gcData.getDuration() * 1000;
  CollectorJsonHelpers.addToJSON(sb,gcData.getDurationKey1_1(),Long.toString(duration),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getGcTypeKey1_1(),gcData.getGcType(),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getReasonKey1_1(),gcData.getReason(),false,false,false,false,true);
  String datetime=CollectorJsonHelpers.dateFormatTL.get().format(gcData.getDatetime());
  CollectorJsonHelpers.addToJSON(sb,gcData.getDatetimeKey1_1(),datetime,false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getSequenceKey1_1(),gcData.getSequence(),false,false,false,false,true);
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String jsonifyGCEvent(String wlpUserDir,String serverName,String hostName,Object event,String[] tags){
  GCData gcData=(GCData)event;
  StringBuilder sb=CollectorJsonHelpers.startGCJson1_1(hostName,wlpUserDir,serverName);
  CollectorJsonHelpers.addToJSON(sb,gcData.getHeapKey1_1(),Long.toString(gcData.getHeap()),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getUsedHeapKey1_1(),Long.toString(gcData.getUsedHeap()),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getMaxHeapKey1_1(),Long.toString(gcData.getMaxHeap()),false,false,false,false,true);
  long duration=gcData.getDuration() * 1000;
  CollectorJsonHelpers.addToJSON(sb,gcData.getDurationKey1_1(),Long.toString(duration),false,false,false,false,true);
  CollectorJsonHelpers.addToJSON(sb,gcData.getGcTypeKey1_1(),gcData.getGcType(),false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getReasonKey1_1(),gcData.getReason(),false,false,false,false,false);
  String datetime=CollectorJsonHelpers.dateFormatTL.get().format(gcData.getDatetime());
  CollectorJsonHelpers.addToJSON(sb,gcData.getDatetimeKey1_1(),datetime,false,false,false,false,false);
  CollectorJsonHelpers.addToJSON(sb,gcData.getSequenceKey1_1(),gcData.getSequence(),false,false,false,false,false);
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
34519,"/** 
 * Load java.sql.Driver implementations available to the specific class loader and return the first that accepts the URL (if any) that is specified in the vendor properties.
 * @param vProps configured JDBC vendor properties.
 * @param classloader class loader from which to load JDBC drivers.
 * @return Driver instance that accepts the URL. NULL if no such Driver can be loaded.
 * @throws SQLException if an error occurs.
 */
private Driver loadDriver(Properties vProps,ClassLoader classloader) throws SQLException {
  String url=vProps.getProperty(""String_Node_Str"",vProps.getProperty(""String_Node_Str""));
  final boolean trace=TraceComponent.isAnyTracingEnabled();
  if (trace && tc.isDebugEnabled())   Tr.entry(this,tc,""String_Node_Str"",url,classloader);
  SQLException failure=null;
  if (url != null)   for (  Driver driver : ServiceLoader.load(Driver.class,classloader)) {
    boolean acceptsURL;
    try {
      acceptsURL=driver.acceptsURL(url);
    }
 catch (    SQLException x) {
      if (failure != null)       failure=x;
      acceptsURL=false;
    }
    if (acceptsURL) {
      for (      Map.Entry<Object,Object> prop : vProps.entrySet()) {
        Object value=prop.getValue();
        if (value instanceof String) {
          String str=(String)value;
          if (PropertyService.isPassword((String)prop.getKey()) && PasswordUtil.getCryptoAlgorithm(str) != null)           try {
            prop.setValue(PasswordUtil.decode(str));
          }
 catch (          Exception x) {
            if (trace && tc.isEntryEnabled())             Tr.exit(this,tc,""String_Node_Str"",x);
            if (x instanceof SQLException)             throw (SQLException)x;
 else             throw new SQLNonTransientException(x);
          }
        }
 else {
          prop.setValue(value.toString());
        }
      }
      if (classloader != null && url.startsWith(""String_Node_Str"") && isDerbyEmbedded.compareAndSet(false,true)) {
        embDerbyRefCount.add(classloader);
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())         Tr.debug(this,tc,""String_Node_Str"",classloader,embDerbyRefCount);
      }
      if (trace && tc.isEntryEnabled())       Tr.exit(this,tc,""String_Node_Str"",driver);
      return driver;
    }
 else {
      if (trace && tc.isDebugEnabled())       Tr.debug(this,tc,driver + ""String_Node_Str"");
    }
  }
  if (trace && tc.isEntryEnabled())   Tr.exit(this,tc,""String_Node_Str"",failure);
  if (failure == null)   return null;
 else   throw failure;
}","/** 
 * Load java.sql.Driver implementations available to the specific class loader and return the first that accepts the URL (if any) that is specified in the vendor properties.
 * @param vProps configured JDBC vendor properties.
 * @param classloader class loader from which to load JDBC drivers.
 * @return Driver instance that accepts the URL. NULL if no such Driver can be loaded.
 * @throws SQLException if an error occurs.
 */
private Driver loadDriver(Properties vProps,ClassLoader classloader) throws SQLException {
  String url=vProps.getProperty(""String_Node_Str"",vProps.getProperty(""String_Node_Str""));
  final boolean trace=TraceComponent.isAnyTracingEnabled();
  if (trace && tc.isDebugEnabled())   Tr.entry(this,tc,""String_Node_Str"",url,classloader);
  SQLException failure=null;
  if (url != null)   for (  Driver driver : ServiceLoader.load(Driver.class,classloader)) {
    boolean acceptsURL;
    try {
      acceptsURL=driver.acceptsURL(url);
    }
 catch (    SQLException x) {
      if (failure == null)       failure=x;
      acceptsURL=false;
    }
    if (acceptsURL) {
      for (      Map.Entry<Object,Object> prop : vProps.entrySet()) {
        Object value=prop.getValue();
        if (value instanceof String) {
          String str=(String)value;
          if (PropertyService.isPassword((String)prop.getKey()) && PasswordUtil.getCryptoAlgorithm(str) != null)           try {
            prop.setValue(PasswordUtil.decode(str));
          }
 catch (          Exception x) {
            if (trace && tc.isEntryEnabled())             Tr.exit(this,tc,""String_Node_Str"",x);
            if (x instanceof SQLException)             throw (SQLException)x;
 else             throw new SQLNonTransientException(x);
          }
        }
 else {
          prop.setValue(value.toString());
        }
      }
      if (classloader != null && url.startsWith(""String_Node_Str"") && isDerbyEmbedded.compareAndSet(false,true)) {
        embDerbyRefCount.add(classloader);
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())         Tr.debug(this,tc,""String_Node_Str"",classloader,embDerbyRefCount);
      }
      if (trace && tc.isEntryEnabled())       Tr.exit(this,tc,""String_Node_Str"",driver);
      return driver;
    }
 else {
      if (trace && tc.isDebugEnabled())       Tr.debug(this,tc,driver + ""String_Node_Str"");
    }
  }
  if (trace && tc.isEntryEnabled())   Tr.exit(this,tc,""String_Node_Str"",failure);
  if (failure == null)   return null;
 else   throw failure;
}"
34520,"private void handleConfigUpdateException(ConfigUpdateException e){
  Tr.error(tc,""String_Node_Str"",e.getMessage());
  if (getOnError(variableRegistryService).equals(OnError.FAIL)) {
    quit(e);
  }
}","private void handleConfigUpdateException(ConfigUpdateException e){
  Tr.error(tc,""String_Node_Str"",e.getMessage());
  if (ErrorHandler.INSTANCE.getOnError().equals(OnError.FAIL)) {
    quit(e);
  }
}"
34521,"private void buildRefElement(TypeBuilder.OCDType ocdType,List<TypeMember> xmlElements,ExtendedAttributeDefinition attributeDef,boolean requiredForThisAttribute,String baseId,OCDType ocdReference,boolean topLevel){
  if (generateNested(attributeDef) && !!!ocdReference.isInternal() && ocdType.getHasIBMFinalWithDefault()&& (topLevel || (ocdReference.getExtendsAlias() != null))&& !(topLevel && !shouldAddAttribute(attributeDef))) {
    TypeMember refElement=new TypeMember(attributeDef);
    if (topLevel) {
      refElement.setID(baseId);
    }
 else {
      String extendsAlias=ocdReference.getExtendsAlias();
      if (extendsAlias.startsWith(""String_Node_Str"")) {
        refElement.setID(extendsAlias.substring(1));
      }
 else {
        refElement.setID(baseId + ""String_Node_Str"" + extendsAlias);
      }
    }
    refElement.setType((Type)null);
    refElement.setCardinality(attributeDef.getCardinality() == 0 ? 1 : attributeDef.getCardinality());
    String typeName=refElement.getCardinality() == 1 ? ocdReference.getTypeName() : ocdReference.getTypeName() + ""String_Node_Str"";
    refElement.setType(typeName);
    refElement.setRequired(requiredForThisAttribute);
    xmlElements.add(refElement);
    processExtensions(ocdType,refElement,attributeDef);
  }
  for (  OCDType extender : ocdReference.getExtensions()) {
    buildRefElement(ocdType,xmlElements,attributeDef,requiredForThisAttribute,baseId,extender,false);
  }
}","private void buildRefElement(TypeBuilder.OCDType ocdType,List<TypeMember> xmlElements,ExtendedAttributeDefinition attributeDef,boolean requiredForThisAttribute,String baseId,OCDType ocdReference,boolean topLevel){
  if (generateNested(attributeDef) && !!!ocdReference.isInternal() && (topLevel || (ocdReference.getExtendsAlias() != null))&& !(topLevel && !shouldAddAttribute(attributeDef))) {
    TypeMember refElement=new TypeMember(attributeDef);
    if (topLevel) {
      refElement.setID(baseId);
    }
 else {
      String extendsAlias=ocdReference.getExtendsAlias();
      if (extendsAlias.startsWith(""String_Node_Str"")) {
        refElement.setID(extendsAlias.substring(1));
      }
 else {
        refElement.setID(baseId + ""String_Node_Str"" + extendsAlias);
      }
    }
    refElement.setType((Type)null);
    refElement.setCardinality(attributeDef.getCardinality() == 0 ? 1 : attributeDef.getCardinality());
    String typeName=null;
    if (ocdReference.getHasIBMFinalWithDefault() == false) {
      typeName=refElement.getCardinality() == 1 ? ocdReference.getTypeName() : ocdReference.getTypeName() + ""String_Node_Str"";
    }
 else {
      typeName=refElement.getCardinality() == 1 ? ocdReference.getTypeName() : ocdReference.getTypeName();
    }
    refElement.setType(typeName);
    refElement.setRequired(requiredForThisAttribute);
    xmlElements.add(refElement);
    processExtensions(ocdType,refElement,attributeDef);
  }
  for (  OCDType extender : ocdReference.getExtensions()) {
    buildRefElement(ocdType,xmlElements,attributeDef,requiredForThisAttribute,baseId,extender,false);
  }
}"
34522,"/** 
 * Use the completeAsync method to complete a stage that is already running.
 */
@Test public void testCompleteAsyncWhileRunning() throws Exception {
  CountDownLatch beginLatch=new CountDownLatch(1);
  CountDownLatch continueLatch=new CountDownLatch(1);
  BlockableSupplier<String> blockingSupplier=new BlockableSupplier<String>(""String_Node_Str"",beginLatch,continueLatch);
  ManagedCompletableFuture<String> cf0;
  try {
    cf0=(ManagedCompletableFuture<String>)ManagedCompletableFuture.supplyAsync(blockingSupplier);
  }
 catch (  UnsupportedOperationException x) {
    if (AT_LEAST_JAVA_9)     throw x;
 else     return;
  }
  assertTrue(beginLatch.await(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  CompletableFuture<String> cf1=cf0.completeAsync(() -> Thread.currentThread().getName());
  assertSame(""String_Node_Str"",cf0,cf1);
  String result=cf0.get(TIMEOUT_NS,TimeUnit.NANOSECONDS);
  assertTrue(result,result.startsWith(""String_Node_Str""));
  assertTrue(result,!Thread.currentThread().getName().equals(result));
  for (long start=System.nanoTime(); blockingSupplier.executionThread != null && System.nanoTime() - start <= TIMEOUT_NS; TimeUnit.MILLISECONDS.sleep(200))   ;
  assertNull(blockingSupplier.executionThread);
}","/** 
 * Use the completeAsync method to complete a stage that is already running.
 */
@Test public void testCompleteAsyncWhileRunning() throws Exception {
  CountDownLatch beginLatch=new CountDownLatch(1);
  CountDownLatch continueLatch=new CountDownLatch(1);
  BlockableSupplier<String> blockingSupplier=new BlockableSupplier<String>(""String_Node_Str"",beginLatch,continueLatch);
  ManagedCompletableFuture<String> cf0=(ManagedCompletableFuture<String>)ManagedCompletableFuture.supplyAsync(blockingSupplier);
  assertTrue(beginLatch.await(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  CompletableFuture<String> cf1;
  try {
    cf1=cf0.completeAsync(() -> Thread.currentThread().getName());
  }
 catch (  UnsupportedOperationException x) {
    continueLatch.countDown();
    if (AT_LEAST_JAVA_9)     throw x;
 else     return;
  }
  assertSame(""String_Node_Str"",cf0,cf1);
  String result=cf0.get(TIMEOUT_NS,TimeUnit.NANOSECONDS);
  assertTrue(result,result.startsWith(""String_Node_Str""));
  assertTrue(result,!Thread.currentThread().getName().equals(result));
  for (long start=System.nanoTime(); blockingSupplier.executionThread != null && System.nanoTime() - start <= TIMEOUT_NS; TimeUnit.MILLISECONDS.sleep(200))   ;
  assertNull(blockingSupplier.executionThread);
}"
34523,"/** 
 * Verify that completeAsync can be used on an incomplete stage to cause it to complete.
 */
@Test public void testCompleteAsyncOfIncompleteStage() throws Exception {
  ManagedCompletableFuture<String> cf0;
  try {
    cf0=(ManagedCompletableFuture<String>)ManagedCompletableFuture.completedFuture(""String_Node_Str"");
  }
 catch (  UnsupportedOperationException x) {
    if (AT_LEAST_JAVA_9)     throw x;
 else     return;
  }
  ManagedCompletableFuture<String> cf1=(ManagedCompletableFuture<String>)cf0.newIncompleteFuture();
  CompletableFuture<String> cf2=cf1.completeAsync(() -> {
    StringBuilder s=new StringBuilder(Thread.currentThread().getName()).append(':');
    try {
      s.append(InitialContext.doLookup(""String_Node_Str"").toString());
    }
 catch (    NamingException x) {
      s.append(""String_Node_Str"");
    }
    return s.toString();
  }
,noContextExecutor);
  assertSame(cf1,cf2);
  String result=cf2.get(TIMEOUT_NS,TimeUnit.NANOSECONDS);
  assertTrue(result,result.startsWith(""String_Node_Str""));
  assertTrue(result,!Thread.currentThread().getName().equals(result));
  assertTrue(result,result.endsWith(""String_Node_Str""));
  assertTrue(cf2.isDone());
  assertFalse(cf2.isCancelled());
  assertFalse(cf2.isCompletedExceptionally());
}","/** 
 * Verify that completeAsync can be used on an incomplete stage to cause it to complete.
 */
@Test public void testCompleteAsyncOfIncompleteStage() throws Exception {
  ManagedCompletableFuture<String> cf0=(ManagedCompletableFuture<String>)ManagedCompletableFuture.completedFuture(""String_Node_Str"");
  ManagedCompletableFuture<String> cf1=(ManagedCompletableFuture<String>)cf0.newIncompleteFuture();
  CompletableFuture<String> cf2;
  try {
    cf2=cf1.completeAsync(() -> {
      StringBuilder s=new StringBuilder(Thread.currentThread().getName()).append(':');
      try {
        s.append(InitialContext.doLookup(""String_Node_Str"").toString());
      }
 catch (      NamingException x) {
        s.append(""String_Node_Str"");
      }
      return s.toString();
    }
,noContextExecutor);
  }
 catch (  UnsupportedOperationException x) {
    if (AT_LEAST_JAVA_9)     throw x;
 else     return;
  }
  assertSame(cf1,cf2);
  String result=cf2.get(TIMEOUT_NS,TimeUnit.NANOSECONDS);
  assertTrue(result,result.startsWith(""String_Node_Str""));
  assertTrue(result,!Thread.currentThread().getName().equals(result));
  assertTrue(result,result.endsWith(""String_Node_Str""));
  assertTrue(cf2.isDone());
  assertFalse(cf2.isCancelled());
  assertFalse(cf2.isCompletedExceptionally());
}"
34524,"/** 
 * Verify that completeAsync is a no-op on an already-completed stage
 */
@Test public void testCompleteAsyncOfCompletedStage() throws Exception {
  ManagedCompletableFuture<Integer> cf0;
  try {
    cf0=(ManagedCompletableFuture<Integer>)ManagedCompletableFuture.completedFuture(90);
  }
 catch (  UnsupportedOperationException x) {
    if (AT_LEAST_JAVA_9)     throw x;
 else     return;
  }
  CompletableFuture<Integer> cf1=cf0.completeAsync(() -> 900);
  assertSame(cf0,cf1);
  assertEquals(Integer.valueOf(90),cf0.join());
}","/** 
 * Verify that completeAsync is a no-op on an already-completed stage
 */
@Test public void testCompleteAsyncOfCompletedStage() throws Exception {
  ManagedCompletableFuture<Integer> cf0=(ManagedCompletableFuture<Integer>)ManagedCompletableFuture.completedFuture(90);
  CompletableFuture<Integer> cf1;
  try {
    cf1=cf0.completeAsync(() -> 900);
  }
 catch (  UnsupportedOperationException x) {
    if (AT_LEAST_JAVA_9)     throw x;
 else     return;
  }
  assertSame(cf0,cf1);
  assertEquals(Integer.valueOf(90),cf0.join());
}"
34525,"/** 
 * Tests that accessing a session prevents invalidation.
 */
@Test public void testRefreshInvalidation() throws Exception {
  int refreshes=TestModeFilter.FRAMEWORK_TEST_MODE == TestMode.FULL ? 15 : 3;
  for (int attempt=0; attempt < 5; attempt++) {
    List<String> session=newSession();
    app.sessionPut(""String_Node_Str"",""String_Node_Str"",session,true);
    long start=0;
    try {
      for (int i=0; i < refreshes; i++) {
        start=System.nanoTime();
        TimeUnit.SECONDS.sleep(3);
        app.sessionGet(""String_Node_Str"",""String_Node_Str"",session);
      }
      return;
    }
 catch (    AssertionError e) {
      long elapsed=System.nanoTime() - start;
      if (TimeUnit.NANOSECONDS.toMillis(elapsed) > 4500) {
        Log.info(c,testName.getMethodName(),""String_Node_Str"");
        continue;
      }
 else {
        throw e;
      }
    }
  }
  fail(""String_Node_Str"");
}","/** 
 * Tests that accessing a session prevents invalidation.
 */
@Test public void testRefreshInvalidation() throws Exception {
  int refreshes=TestModeFilter.FRAMEWORK_TEST_MODE == TestMode.FULL ? 15 : 3;
  for (int attempt=0; attempt < 5; attempt++) {
    List<String> session=newSession();
    app.sessionPut(""String_Node_Str"",""String_Node_Str"",session,true);
    long start=0, prevStart=0;
    try {
      for (int i=0; i < refreshes; i++) {
        prevStart=start;
        start=System.nanoTime();
        TimeUnit.SECONDS.sleep(3);
        app.sessionGet(""String_Node_Str"",""String_Node_Str"",session);
      }
      return;
    }
 catch (    AssertionError e) {
      long elapsed=System.nanoTime() - start;
      if (TimeUnit.NANOSECONDS.toMillis(elapsed) > 4500 || prevStart > 0 && start - prevStart > TimeUnit.SECONDS.toNanos(4)) {
        Log.info(c,testName.getMethodName(),""String_Node_Str"");
        continue;
      }
 else {
        throw e;
      }
    }
  }
  fail(""String_Node_Str"");
}"
34526,"/** 
 * This test will verify that we can't change the dataSourceLookup setting via an immediate EL expression. <ul> <li>DB_USER1 - authorized with default datasourc</li> <li>DB_USER2 - authorized with datasource</li> <li>DB_USER3 - unauthorized (never authorized)</li> </ul>
 * @throws Exception If the test failed for some unforeseen reason.
 */
@Test public void dataSourceLookup() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Map<String,String> overrides=new HashMap<String,String>();
  overrides.put(JavaEESecConstants.DS_LOOKUP,""String_Node_Str"");
  DatabaseSettingsBean.updateDatabaseSettingsBean(server.getServerRoot(),overrides);
  String msg=""String_Node_Str"";
  String msg2=""String_Node_Str"";
  String msg3=""String_Node_Str"";
  List<String> foundResults=myServer.findStringsInLogsAndTrace(msg3);
  assertEquals(""String_Node_Str"" + msg3,1,foundResults.size());
  verifyAuthorization(SC_OK,SC_OK,SC_FORBIDDEN);
  foundResults=myServer.findStringsInLogsAndTrace(msg);
  assertFalse(""String_Node_Str"" + msg,foundResults.isEmpty());
  foundResults=myServer.findStringsInLogs(msg2);
  assertTrue(""String_Node_Str"" + msg2,foundResults.isEmpty());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * This test will verify that we can't change the dataSourceLookup setting via an immediate EL expression. <ul> <li>DB_USER1 - authorized with default datasourc</li> <li>DB_USER2 - authorized with datasource</li> <li>DB_USER3 - unauthorized (never authorized)</li> </ul>
 * @throws Exception If the test failed for some unforeseen reason.
 */
@Test public void dataSourceLookup() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Map<String,String> overrides=new HashMap<String,String>();
  overrides.put(JavaEESecConstants.DS_LOOKUP,""String_Node_Str"");
  DatabaseSettingsBean.updateDatabaseSettingsBean(server.getServerRoot(),overrides);
  String msg=""String_Node_Str"";
  String msg2=""String_Node_Str"";
  String msg3=""String_Node_Str"";
  verifyAuthorization(SC_OK,SC_OK,SC_FORBIDDEN);
  List<String> foundResults=myServer.findStringsInLogsAndTrace(msg3);
  assertEquals(""String_Node_Str"" + msg3,1,foundResults.size());
  foundResults=myServer.findStringsInLogsAndTrace(msg);
  assertFalse(""String_Node_Str"" + msg,foundResults.isEmpty());
  foundResults=myServer.findStringsInLogs(msg2);
  assertTrue(""String_Node_Str"" + msg2,foundResults.isEmpty());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34527,"@Before public void setupConnection(){
  httpclient=new DefaultHttpClient();
}","@Before public void setupConnection(){
  HttpParams httpParams=new BasicHttpParams();
  httpParams.setParameter(ClientPNames.HANDLE_REDIRECTS,Boolean.FALSE);
  httpclient=new DefaultHttpClient(httpParams);
}"
34528,"/** 
 * This method is only called from code synched on the <code>freeLockObject</code>, so we do not have to worry about synchronizing access to <code>waiterCount</code>.
 */
private void queueRequest(ManagedConnectionFactory managedConnectionFactory,long waitTimeout) throws ResourceAllocationException, ConnectionWaitTimeoutException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(this,tc,""String_Node_Str"",waitTimeout);
  }
  if (waitTimeout == 0) {
    --pm.waiterCount;
    Tr.error(tc,""String_Node_Str"",new Object[]{""String_Node_Str"",gConfigProps.cfName});
    ConnectionWaitTimeoutException cwte=new ConnectionWaitTimeoutException(""String_Node_Str"");
    com.ibm.ws.ffdc.FFDCFilter.processException(cwte,J2CConstants.DMSID_MAX_CONNECTIONS_REACHED,""String_Node_Str"",this.pm);
    pm.activeRequest.decrementAndGet();
    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())     Tr.exit(this,tc,""String_Node_Str"",cwte);
    throw cwte;
  }
  if ((tc.isDebugEnabled())) {
    ++freePoolQueuedRequests;
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      String poolStats=pm.gatherPoolStatisticalData();
      Tr.debug(this,tc,""String_Node_Str"" + gConfigProps.getXpathId() + ""String_Node_Str"");
      Tr.debug(this,tc,poolStats);
    }
  }
  try {
    if (pm.displayInfiniteWaitMessage) {
      Tr.info(tc,""String_Node_Str"",gConfigProps.getXpathId());
      pm.displayInfiniteWaitMessage=false;
    }
    pm.activeRequest.decrementAndGet();
    pm.waiterFreePoolLock.wait(waitTimeout);
    pm.requestingAccessToPool();
  }
 catch (  InterruptedException ie) {
    if (tc.isDebugEnabled()) {
      Tr.debug(this,tc,""String_Node_Str"");
    }
synchronized (pm.waiterFreePoolLock) {
      --pm.waiterCount;
    }
    if (tc.isDebugEnabled()) {
      if (pm.waiterCount == 0) {
        pm.waitersEndedTime=System.currentTimeMillis();
        Tr.debug(this,tc,""String_Node_Str"" + pm.waitersEndedTime);
        Tr.debug(this,tc,""String_Node_Str"" + (pm.waitersEndedTime - pm.waitersStartedTime));
      }
    }
    ResourceAllocationException throwMe=new ResourceAllocationException(ie.getMessage());
    throwMe.initCause(ie);
    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())     Tr.exit(this,tc,""String_Node_Str"",throwMe);
    throw throwMe;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(this,tc,""String_Node_Str"");
  }
}","/** 
 * This method is only called from code synched on the <code>freeLockObject</code>, so we do not have to worry about synchronizing access to <code>waiterCount</code>.
 */
private void queueRequest(ManagedConnectionFactory managedConnectionFactory,long waitTimeout) throws ResourceAllocationException, ConnectionWaitTimeoutException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(this,tc,""String_Node_Str"",waitTimeout);
  }
  if (waitTimeout == 0) {
    --pm.waiterCount;
    Tr.error(tc,""String_Node_Str"",new Object[]{""String_Node_Str"",gConfigProps.cfName});
    ConnectionWaitTimeoutException cwte=new ConnectionWaitTimeoutException(""String_Node_Str"");
    com.ibm.ws.ffdc.FFDCFilter.processException(cwte,J2CConstants.DMSID_MAX_CONNECTIONS_REACHED,""String_Node_Str"",this.pm);
    pm.activeRequest.decrementAndGet();
    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())     Tr.exit(this,tc,""String_Node_Str"",cwte);
    throw cwte;
  }
  if ((tc.isDebugEnabled())) {
    ++freePoolQueuedRequests;
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      String poolStats=pm.gatherPoolStatisticalData();
      Tr.debug(this,tc,""String_Node_Str"" + gConfigProps.getXpathId() + ""String_Node_Str"");
      Tr.debug(this,tc,poolStats);
    }
  }
  try {
    if (pm.displayInfiniteWaitMessage) {
      Tr.info(tc,""String_Node_Str"",gConfigProps.getXpathId());
      pm.displayInfiniteWaitMessage=false;
    }
    pm.activeRequest.decrementAndGet();
    if (waitTimeout < 0) {
      pm.waiterFreePoolLock.wait(0);
    }
 else {
      pm.waiterFreePoolLock.wait(waitTimeout);
    }
    pm.requestingAccessToPool();
  }
 catch (  InterruptedException ie) {
    if (tc.isDebugEnabled()) {
      Tr.debug(this,tc,""String_Node_Str"");
    }
synchronized (pm.waiterFreePoolLock) {
      --pm.waiterCount;
    }
    if (tc.isDebugEnabled()) {
      if (pm.waiterCount == 0) {
        pm.waitersEndedTime=System.currentTimeMillis();
        Tr.debug(this,tc,""String_Node_Str"" + pm.waitersEndedTime);
        Tr.debug(this,tc,""String_Node_Str"" + (pm.waitersEndedTime - pm.waitersStartedTime));
      }
    }
    ResourceAllocationException throwMe=new ResourceAllocationException(ie.getMessage());
    throwMe.initCause(ie);
    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())     Tr.exit(this,tc,""String_Node_Str"",throwMe);
    throw throwMe;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(this,tc,""String_Node_Str"");
  }
}"
34529,"/** 
 * Test method and field injection on custom state manager. No intercepter or constructor tests on this. Would like to do something more than look for message in logs, a future improvement.
 * @throws Exception
 */
protected void testCustomStateManagerInjectionsByApp(String app,LibertyServer server) throws Exception {
  String msg=""String_Node_Str"" + app;
  String isStateManagerMessage=server.waitForStringInLog(msg);
  assertNotNull(""String_Node_Str"" + msg,isStateManagerMessage);
}","/** 
 * Test method and field injection on custom state manager. No intercepter or constructor tests on this. Would like to do something more than look for message in logs, a future improvement.
 * @throws Exception
 */
protected void testCustomStateManagerInjectionsByApp(String contextRoot,LibertyServer server) throws Exception {
  WebClient webClient=new WebClient();
  URL url=JSFUtils.createHttpUrl(server,contextRoot,""String_Node_Str"");
  HtmlPage page=(HtmlPage)webClient.getPage(url);
  if (page == null) {
    Assert.fail(""String_Node_Str"");
  }
  String msg=""String_Node_Str"" + contextRoot;
  String isStateManagerMessage=server.waitForStringInLog(msg);
  assertNotNull(""String_Node_Str"" + msg,isStateManagerMessage);
}"
34530,"/** 
 * Get the Destination Roles, it will be used for audit
 */
public String[] getDestinationRoles(Map<String,?> destinationPermissions,String dest,String user){
  SibTr.debug(tc,""String_Node_Str"" + dest + ""String_Node_Str""+ user);
  ArrayList<String> roleList=new ArrayList();
  int element=0;
  Set<String> destinations=destinationPermissions.keySet();
  for (  String destination : destinations) {
    SibTr.debug(tc,""String_Node_Str"" + destination);
    if (destination.equals(dest)) {
      Permission permission=(Permission)destinationPermissions.get(destination);
      Map<String,Set<String>> userRoles=permission.getRoleToUserMap();
      Set<String> uRoles=userRoles.keySet();
      for (      String role : uRoles) {
        SibTr.debug(tc,""String_Node_Str"" + role);
        SibTr.debug(tc,""String_Node_Str"" + userRoles.get(role));
        Set<String> rs=userRoles.get(role);
        for (        String r : rs) {
          SibTr.debug(tc,""String_Node_Str"" + r);
          if (r.equals(user)) {
            roleList.add(role);
          }
        }
      }
    }
  }
  if (roleList != null)   SibTr.debug(tc,""String_Node_Str"" + roleList.toArray().toString());
 else   SibTr.debut(tc,""String_Node_Str"" + user);
  Object[] roleListAsObjectArray=roleList.toArray();
  String[] roleListAsStrArray=Arrays.copyOf(roleListAsObjectArray,roleListAsObjectArray.length,String[].class);
  return (roleListAsStrArray);
}","/** 
 * Get the Destination Roles, it will be used for audit
 */
public String[] getDestinationRoles(Map<String,?> destinationPermissions,String dest,String user){
  SibTr.debug(tc,""String_Node_Str"" + dest + ""String_Node_Str""+ user);
  ArrayList<String> roleList=new ArrayList();
  int element=0;
  Set<String> destinations=destinationPermissions.keySet();
  for (  String destination : destinations) {
    SibTr.debug(tc,""String_Node_Str"" + destination);
    if (destination.equals(dest)) {
      Permission permission=(Permission)destinationPermissions.get(destination);
      Map<String,Set<String>> userRoles=permission.getRoleToUserMap();
      Set<String> uRoles=userRoles.keySet();
      for (      String role : uRoles) {
        SibTr.debug(tc,""String_Node_Str"" + role);
        SibTr.debug(tc,""String_Node_Str"" + userRoles.get(role));
        Set<String> rs=userRoles.get(role);
        for (        String r : rs) {
          SibTr.debug(tc,""String_Node_Str"" + r);
          if (r.equals(user)) {
            roleList.add(role);
          }
        }
      }
    }
  }
  if (roleList != null)   SibTr.debug(tc,""String_Node_Str"" + roleList.toArray().toString());
 else   SibTr.debug(tc,""String_Node_Str"" + user);
  Object[] roleListAsObjectArray=roleList.toArray();
  String[] roleListAsStrArray=Arrays.copyOf(roleListAsObjectArray,roleListAsObjectArray.length,String[].class);
  return (roleListAsStrArray);
}"
34531,"private static Provider getLongAdderProvider(){
  try {
    final JdkProvider jdkProvider=new JdkProvider();
    jdkProvider.get();
    return jdkProvider;
  }
 catch (  Throwable e) {
    return new InternalLongAdderProvider();
  }
}","private static Provider getLongAdderProvider(){
  return new InternalLongAdderProvider();
}"
34532,"/** 
 * Test that a FacesConverter, a FacesValidator and a FacesBehavior can be injected in a Managed Bean
 * @throws Exception
 */
@Test public void testConverterValidatorBehaviorObjectInjection() throws Exception {
  WebClient webClient=new WebClient();
  String contextRoot=""String_Node_Str"";
  URL url=JSFUtils.createHttpUrl(jsf23CDIServer,contextRoot,""String_Node_Str"");
  HtmlPage page=(HtmlPage)webClient.getPage(url);
  Log.info(c,name.getMethodName(),page.asText());
  Log.info(c,name.getMethodName(),page.asXml());
  assertTrue(page.asText().contains(""String_Node_Str""));
  assertTrue(page.asText().contains(""String_Node_Str""));
  assertTrue(page.asText().contains(""String_Node_Str""));
  assertTrue(page.asText().contains(""String_Node_Str""));
}","/** 
 * Test that a FacesConverter, a FacesValidator and a FacesBehavior can be injected in a Managed Bean
 * @throws Exception
 */
@Test public void testConverterValidatorBehaviorObjectInjection() throws Exception {
  WebClient webClient=new WebClient();
  String contextRoot=""String_Node_Str"";
  URL url=JSFUtils.createHttpUrl(jsf23CDIServer,contextRoot,""String_Node_Str"");
  HtmlPage page=(HtmlPage)webClient.getPage(url);
  Log.info(c,name.getMethodName(),page.asText());
  Log.info(c,name.getMethodName(),page.asXml());
  assertTrue(page.asText().contains(""String_Node_Str""));
  assertTrue(page.asText().contains(""String_Node_Str""));
}"
34533,"/** 
 * Create an Entity object corresponding to the LdapEntry object returned by the LdapConnection object.
 * @param parentDO
 * @param propName
 * @param ldapEntry
 * @param propNames
 * @return
 * @throws WIMException
 */
private Entity createEntityFromLdapEntry(Object parentDO,String propName,LdapEntry ldapEntry,List<String> propNames) throws WIMException {
  final String METHODNAME=""String_Node_Str"";
  String outEntityType=ldapEntry.getType();
  Entity outEntity=null;
  if (outEntityType != null) {
    if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_PERSON))     outEntity=new Person();
 else     if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_PERSON_ACCOUNT))     outEntity=new PersonAccount();
 else     if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_GROUP))     outEntity=new Group();
 else     outEntity=new Entity();
  }
 else {
    outEntity=new Entity();
  }
  if (parentDO instanceof Root) {
    if (SchemaConstants.DO_ENTITIES.equalsIgnoreCase(propName))     ((Root)parentDO).getEntities().add(outEntity);
  }
 else   if (parentDO instanceof Entity) {
    if (SchemaConstants.DO_GROUP.equalsIgnoreCase(propName)) {
      if (outEntity instanceof Group) {
        ((Entity)parentDO).getGroups().add((Group)outEntity);
      }
 else {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,METHODNAME + ""String_Node_Str"" + outEntity);
        }
      }
    }
 else     if (SchemaConstants.DO_MEMBERS.equalsIgnoreCase(propName)) {
      ((Group)parentDO).getMembers().add(outEntity);
    }
 else     if (SchemaConstants.DO_CHILDREN.equalsIgnoreCase(propName)) {
      ((Entity)parentDO).getChildren().add(outEntity);
    }
  }
  IdentifierType outId=new IdentifierType();
  outEntity.setIdentifier(outId);
  outId.setUniqueName(ldapEntry.getUniqueName());
  outId.setExternalId(ldapEntry.getExtId());
  outId.setExternalName(ldapEntry.getDN());
  outId.setRepositoryId(reposId);
  String changeType=ldapEntry.getChangeType();
  if (changeType != null) {
    outEntity.setChangeType(changeType);
    if (SchemaConstants.CHANGETYPE_DELETE.equals(changeType) == false) {
      populateEntity(outEntity,propNames,ldapEntry.getAttributes());
    }
  }
 else {
    populateEntity(outEntity,propNames,ldapEntry.getAttributes());
  }
  return outEntity;
}","/** 
 * Create an Entity object corresponding to the LdapEntry object returned by the LdapConnection object.
 * @param parentDO
 * @param propName
 * @param ldapEntry
 * @param propNames
 * @return
 * @throws WIMException
 */
private Entity createEntityFromLdapEntry(Object parentDO,String propName,LdapEntry ldapEntry,List<String> propNames) throws WIMException {
  final String METHODNAME=""String_Node_Str"";
  String outEntityType=ldapEntry.getType();
  Entity outEntity=null;
  if (outEntityType != null) {
    if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_PERSON))     outEntity=new Person();
 else     if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_PERSON_ACCOUNT))     outEntity=new PersonAccount();
 else     if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_GROUP))     outEntity=new Group();
 else     outEntity=new Entity();
  }
 else {
    outEntity=new Entity();
  }
  if (parentDO instanceof Root) {
    if (SchemaConstants.DO_ENTITIES.equalsIgnoreCase(propName))     ((Root)parentDO).getEntities().add(outEntity);
  }
 else   if (parentDO instanceof Entity) {
    if (SchemaConstants.DO_GROUP.equalsIgnoreCase(propName)) {
      if (outEntity instanceof Group) {
        ((Entity)parentDO).getGroups().add((Group)outEntity);
      }
 else {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,METHODNAME + ""String_Node_Str"" + outEntity,ldapEntry);
        }
      }
    }
 else     if (SchemaConstants.DO_MEMBERS.equalsIgnoreCase(propName)) {
      ((Group)parentDO).getMembers().add(outEntity);
    }
 else     if (SchemaConstants.DO_CHILDREN.equalsIgnoreCase(propName)) {
      ((Entity)parentDO).getChildren().add(outEntity);
    }
  }
  IdentifierType outId=new IdentifierType();
  outEntity.setIdentifier(outId);
  outId.setUniqueName(ldapEntry.getUniqueName());
  outId.setExternalId(ldapEntry.getExtId());
  outId.setExternalName(ldapEntry.getDN());
  outId.setRepositoryId(reposId);
  String changeType=ldapEntry.getChangeType();
  if (changeType != null) {
    outEntity.setChangeType(changeType);
    if (SchemaConstants.CHANGETYPE_DELETE.equals(changeType) == false) {
      populateEntity(outEntity,propNames,ldapEntry.getAttributes());
    }
  }
 else {
    populateEntity(outEntity,propNames,ldapEntry.getAttributes());
  }
  return outEntity;
}"
34534,"/** 
 * Set the filters depending on the ldap type selected.
 * @param configProps
 */
private void setFilters(Map<String,Object> configProps){
  if (iLdapType == null)   return;
  String key=null;
  if (iLdapType.equalsIgnoreCase(LdapConstants.AD_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_ACTIVE_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.CUSTOM_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_CUSTOM_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.DOMINO_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_DOMINO_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.NOVELL_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_NOVELL_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.IDS_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_TDS_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.SUN_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_SUN_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.NETSCAPE_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_NETSCAPE_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.SECUREWAY_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_SECUREWAY_DIRECTORY_FILTERS;
  }
 else {
    return;
  }
  List<Map<String,Object>> filterList=Nester.nest(key,configProps);
  if (!filterList.isEmpty()) {
    Map<String,Object> props=filterList.get(0);
    if (props.get(ConfigConstants.CONFIG_USER_FILTER) != null)     iUserFilter=(String)props.get(ConfigConstants.CONFIG_USER_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_FILTER) != null)     iGroupFilter=(String)props.get(ConfigConstants.CONFIG_GROUP_FILTER);
    if (props.get(ConfigConstants.CONFIG_USER_ID_FILTER) != null)     iUserIdMap=(String)props.get(ConfigConstants.CONFIG_USER_ID_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_ID_FILTER) != null)     iGroupIdMap=(String)props.get(ConfigConstants.CONFIG_GROUP_ID_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_MEMBER_ID_FILTER) != null)     iGroupMemberIdMap=(String)props.get(ConfigConstants.CONFIG_GROUP_MEMBER_ID_FILTER);
    String objectClassStr=""String_Node_Str"";
    if (iLdapType.equalsIgnoreCase(LdapConstants.AD_LDAP_SERVER))     objectClassStr=""String_Node_Str"";
    int length=objectClassStr.length();
    if (iUserFilter != null) {
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_PERSON_ACCOUNT);
      if (ldapEntity != null) {
        Set<String> objClsSet=new HashSet<String>();
        int index=iUserFilter.indexOf(objectClassStr);
        while (index > -1) {
          int endIndex=iUserFilter.indexOf(""String_Node_Str"",index);
          String objectClass=iUserFilter.substring(index + length,endIndex);
          objClsSet.add(objectClass);
          index=endIndex + 1;
          index=iUserFilter.indexOf(objectClassStr,endIndex);
        }
        if (objClsSet.size() > 0) {
          ldapEntity.getObjectClasses().clear();
          ldapEntity.getObjectClasses().addAll(objClsSet);
        }
      }
      if (iLoginAttrs != null)       iLoginAttrs.remove(0);
      if (iLoginProps != null)       iLoginProps.remove(0);
      String pattern=""String_Node_Str"";
      int startIndex=0;
      boolean hasLoginProperties=true;
      LdapEntity acct=getLdapEntity(iPersonAccountTypes.get(iPersonAccountTypes.size() - 1));
      while (hasLoginProperties) {
        int index=iUserFilter.indexOf(pattern,startIndex);
        int beginIndex=index;
        if (index > -1) {
          for (; beginIndex > 0; beginIndex--) {
            if (iUserFilter.charAt(beginIndex) == ' ' || iUserFilter.charAt(beginIndex) == '(')             break;
          }
          String propName=iUserFilter.substring(beginIndex + 1,index);
          if (iLoginAttrs != null && !iLoginAttrs.contains(propName)) {
            if (tc.isDebugEnabled())             Tr.debug(tc,""String_Node_Str"" + propName + ""String_Node_Str"");
            iLoginAttrs.add(getAttributeName(acct,propName));
            iLoginProps.add(propName);
          }
          startIndex=index + 1;
        }
 else         hasLoginProperties=false;
      }
      if (ldapEntity != null)       ldapEntity.addPropertyAttributeMap(SchemaConstants.PROP_PRINCIPAL_NAME,iLoginAttrs.get(0));
    }
    if (iGroupFilter != null) {
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_GROUP);
      if (ldapEntity != null) {
        Set<String> objClsSet=new HashSet<String>();
        int index=iGroupFilter.indexOf(objectClassStr);
        while (index > -1) {
          int endIndex=iGroupFilter.indexOf(""String_Node_Str"",index);
          String objectClass=iGroupFilter.substring(index + length,endIndex);
          objClsSet.add(objectClass);
          index=endIndex + 1;
          index=iGroupFilter.indexOf(objectClassStr,endIndex);
        }
        if (objClsSet.size() > 0) {
          ldapEntity.getObjectClasses().clear();
          ldapEntity.getObjectClasses().addAll(objClsSet);
        }
      }
    }
    if (iUserIdMap != null) {
      StringTokenizer strtok=new StringTokenizer(iUserIdMap,""String_Node_Str"");
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_PERSON_ACCOUNT);
      if (ldapEntity != null) {
        List<String> rdnPropList=new ArrayList<String>();
        List<String> objClsList=new ArrayList<String>();
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          Set<String> propNames=null;
          if (LdapConstants.LDAP_ATTR_SAM_ACCOUNT_NAME.equalsIgnoreCase(attribute)) {
            propNames=getPropertyName(ldapEntity,""String_Node_Str"");
          }
 else           propNames=getPropertyName(ldapEntity,attribute);
          rdnPropList.add(propNames.iterator().next());
          if (!SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass))           objClsList.add(objectClass);
        }
        if (rdnPropList.size() > 0) {
          String[][] rdnProps=new String[rdnPropList.size()][];
          String[][] rdnAttrs=new String[rdnPropList.size()][];
          String rdnObjCls[][]=new String[objClsList.size()][];
          String objCls[]=new String[objClsList.size()];
          objCls=objClsList.toArray(objCls);
          for (int j=0; j < rdnPropList.size(); j++) {
            rdnProps[j]=LdapHelper.getRDNs(rdnPropList.get(j));
            rdnAttrs[j]=new String[rdnProps[j].length];
            for (int k=0; k < rdnProps[j].length; k++) {
              String rdnProp=rdnProps[j][k];
              rdnAttrs[j][k]=getAttributeName(ldapEntity,rdnProp);
            }
            if (objCls.length > 0) {
              rdnObjCls[j]=new String[objCls.length];
              rdnObjCls[j][0]=objCls[j];
            }
          }
          ldapEntity.setRDNProperties(rdnProps,rdnAttrs);
          if (isVMMRdnPropertiesDefined) {
            String updatedRdnAttrs[][]=null;
            String updatedRdnObjCls[][]=null;
            if (ldapEntity.getRDNAttributes().length > 0) {
              String orgRdnAttr[][]=ldapEntity.getRDNAttributes();
              updatedRdnAttrs=new String[orgRdnAttr.length + rdnAttrs.length][];
              for (int i=0; i < orgRdnAttr.length; i++) {
                updatedRdnAttrs[i]=new String[orgRdnAttr[i].length];
                for (int j=0; j < orgRdnAttr[i].length; j++)                 updatedRdnAttrs[i][j]=orgRdnAttr[i][j];
              }
              int len=orgRdnAttr.length;
              for (int i=0; i < rdnAttrs.length; i++) {
                updatedRdnAttrs[len]=new String[rdnAttrs[i].length];
                for (int j=0; j < rdnAttrs[i].length; j++)                 updatedRdnAttrs[len][j]=rdnAttrs[i][j];
                len++;
              }
            }
            if (ldapEntity.getRDNObjectclasses().length > 0) {
              String orgRdnObjCls[][]=ldapEntity.getRDNObjectclasses();
              updatedRdnObjCls=new String[orgRdnObjCls.length + rdnObjCls.length][];
              for (int i=0; i < orgRdnObjCls.length; i++) {
                updatedRdnObjCls[i]=new String[orgRdnObjCls[i].length];
                for (int j=0; j < orgRdnObjCls[i].length; j++)                 updatedRdnObjCls[i][j]=orgRdnObjCls[i][j];
              }
              int len=orgRdnObjCls.length;
              for (int i=0; i < rdnObjCls.length; i++) {
                updatedRdnObjCls[len]=new String[rdnObjCls[i].length];
                for (int j=0; j < rdnObjCls[i].length; j++)                 updatedRdnObjCls[len][j]=rdnObjCls[i][j];
                len++;
              }
            }
            ldapEntity.setRDNAttributes(updatedRdnAttrs,updatedRdnObjCls);
          }
 else {
            ldapEntity.setRDNAttributes(rdnAttrs,rdnObjCls);
          }
          if (ldapEntity.needTranslateRDN()) {
            iNeedTranslateRDN=true;
          }
        }
      }
 else {
        if (tc.isDebugEnabled())         Tr.debug(tc,""String_Node_Str"");
      }
    }
    if (iGroupIdMap != null) {
      StringTokenizer strtok=new StringTokenizer(iGroupIdMap,""String_Node_Str"");
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_GROUP);
      if (ldapEntity != null) {
        List<String> rdnPropList=new ArrayList<String>();
        Set<String> objClsSet=new HashSet<String>();
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          Set<String> propNames=getPropertyName(ldapEntity,attribute);
          rdnPropList.add(propNames.iterator().next());
          if (!SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass))           objClsSet.add(objectClass);
        }
        if (rdnPropList.size() > 0) {
          String[][] rdnProps=new String[rdnPropList.size()][];
          String[][] rdnAttrs=new String[rdnPropList.size()][];
          for (int j=0; j < rdnPropList.size(); j++) {
            rdnProps[j]=LdapHelper.getRDNs(rdnPropList.get(j));
            rdnAttrs[j]=new String[rdnProps[j].length];
            for (int k=0; k < rdnProps[j].length; k++) {
              String rdnProp=rdnProps[j][k];
              rdnAttrs[j][k]=getAttributeName(ldapEntity,rdnProp);
            }
          }
          ldapEntity.setRDNProperties(rdnProps,rdnAttrs);
          if (ldapEntity.needTranslateRDN()) {
            iNeedTranslateRDN=true;
          }
        }
      }
 else       if (tc.isDebugEnabled())       Tr.debug(tc,""String_Node_Str"");
    }
    if (iGroupMemberIdMap != null) {
      iLdapOperationalAttr=iGroupMemberIdMap.toLowerCase().contains(IBM_ALL_GROUPS.toLowerCase());
      if (iDefaultMembershipAttr) {
        iMembershipAttrName=null;
      }
      LdapEntity ldapEntity=null;
      List<String> grpTypes=getGroupTypes();
      List<String> objectClasses=new ArrayList<String>();
      for (int i=0; i < grpTypes.size(); i++) {
        ldapEntity=getLdapEntity(grpTypes.get(i));
        List<String> objClses=ldapEntity.getObjectClasses();
        for (int j=0; j < objClses.size(); j++) {
          String objCls=objClses.get(j);
          objectClasses.add(objCls);
        }
      }
      List<String> attrScopes=new ArrayList<String>();
      List<String> attrNames=new ArrayList<String>();
      StringTokenizer strtok=new StringTokenizer(iGroupMemberIdMap,""String_Node_Str"");
      if (ldapEntity != null) {
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          String scope=LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP_STRING;
          if (SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass)) {
            for (int j=0; j < objectClasses.size(); j++) {
              iMbrAttrMap.put(objectClasses.get(j),attribute);
            }
          }
 else {
            iMbrAttrMap.put(objectClass.toLowerCase(),attribute);
          }
          if (!attrNames.contains(attribute)) {
            attrNames.add(attribute);
            attrScopes.add(scope);
          }
          if (objectClass != null && !objectClasses.contains(objectClass.toLowerCase())) {
            if (getGroupTypes() != null && getGroupTypes().size() > 0)             getLdapEntity(getGroupTypes().get(0)).addObjectClass(objectClass);
          }
        }
        iMbrAttrs=attrNames.toArray(new String[0]);
        iMbrAttrScope=new short[iMbrAttrs.length];
        iMbrAttrsAllScope=true;
        iMbrAttrsNestedScope=true;
        for (int i=0; i < attrScopes.size(); i++) {
          iMbrAttrScope[i]=LdapHelper.getMembershipScope(attrScopes.get(i));
          if (iMbrAttrScope[i] == LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP) {
            iMbrAttrsAllScope=false;
            iMbrAttrsNestedScope=false;
          }
 else           if (iMbrAttrScope[i] == LdapConstants.LDAP_NESTED_GROUP_MEMBERSHIP) {
            iMbrAttrsAllScope=false;
          }
        }
      }
 else       if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
    if (checkIfRacf()) {
      initializeRacfFilters();
    }
    resetEntitySearchFilters();
  }
}","/** 
 * Set the filters depending on the ldap type selected.
 * @param configProps
 */
private void setFilters(Map<String,Object> configProps){
  if (iLdapType == null)   return;
  String key=null;
  if (iLdapType.equalsIgnoreCase(LdapConstants.AD_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_ACTIVE_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.CUSTOM_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_CUSTOM_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.DOMINO_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_DOMINO_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.NOVELL_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_NOVELL_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.IDS_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_TDS_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.SUN_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_SUN_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.NETSCAPE_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_NETSCAPE_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.SECUREWAY_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_SECUREWAY_DIRECTORY_FILTERS;
  }
 else {
    return;
  }
  List<Map<String,Object>> filterList=Nester.nest(key,configProps);
  if (!filterList.isEmpty()) {
    Map<String,Object> props=filterList.get(0);
    if (props.get(ConfigConstants.CONFIG_USER_FILTER) != null)     iUserFilter=(String)props.get(ConfigConstants.CONFIG_USER_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_FILTER) != null)     iGroupFilter=(String)props.get(ConfigConstants.CONFIG_GROUP_FILTER);
    if (props.get(ConfigConstants.CONFIG_USER_ID_FILTER) != null)     iUserIdMap=(String)props.get(ConfigConstants.CONFIG_USER_ID_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_ID_FILTER) != null)     iGroupIdMap=(String)props.get(ConfigConstants.CONFIG_GROUP_ID_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_MEMBER_ID_FILTER) != null)     iGroupMemberIdMap=(String)props.get(ConfigConstants.CONFIG_GROUP_MEMBER_ID_FILTER);
    String objectClassStr=""String_Node_Str"";
    if (iLdapType.equalsIgnoreCase(LdapConstants.AD_LDAP_SERVER))     objectClassStr=""String_Node_Str"";
    int length=objectClassStr.length();
    if (iUserFilter != null) {
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_PERSON_ACCOUNT);
      if (ldapEntity != null) {
        Set<String> objClsSet=new HashSet<String>();
        int index=iUserFilter.indexOf(objectClassStr);
        while (index > -1) {
          int endIndex=iUserFilter.indexOf(""String_Node_Str"",index);
          String objectClass=iUserFilter.substring(index + length,endIndex);
          objClsSet.add(objectClass);
          index=endIndex + 1;
          index=iUserFilter.indexOf(objectClassStr,endIndex);
        }
        if (objClsSet.size() > 0) {
          ldapEntity.getObjectClasses().clear();
          ldapEntity.getObjectClasses().addAll(objClsSet);
        }
      }
      if (iLoginAttrs != null)       iLoginAttrs.remove(0);
      if (iLoginProps != null)       iLoginProps.remove(0);
      String pattern=""String_Node_Str"";
      int startIndex=0;
      boolean hasLoginProperties=true;
      LdapEntity acct=getLdapEntity(iPersonAccountTypes.get(iPersonAccountTypes.size() - 1));
      while (hasLoginProperties) {
        int index=iUserFilter.indexOf(pattern,startIndex);
        int beginIndex=index;
        if (index > -1) {
          for (; beginIndex > 0; beginIndex--) {
            if (iUserFilter.charAt(beginIndex) == ' ' || iUserFilter.charAt(beginIndex) == '(')             break;
          }
          String propName=iUserFilter.substring(beginIndex + 1,index);
          if (iLoginAttrs != null && !iLoginAttrs.contains(propName)) {
            if (tc.isDebugEnabled())             Tr.debug(tc,""String_Node_Str"" + propName + ""String_Node_Str"");
            iLoginAttrs.add(getAttributeName(acct,propName));
            iLoginProps.add(propName);
          }
          startIndex=index + 1;
        }
 else         hasLoginProperties=false;
      }
      if (ldapEntity != null)       ldapEntity.addPropertyAttributeMap(SchemaConstants.PROP_PRINCIPAL_NAME,iLoginAttrs.get(0));
    }
    if (iGroupFilter != null) {
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_GROUP);
      if (ldapEntity != null) {
        Set<String> objClsSet=new HashSet<String>();
        int index=iGroupFilter.indexOf(objectClassStr);
        while (index > -1) {
          int endIndex=iGroupFilter.indexOf(""String_Node_Str"",index);
          String objectClass=iGroupFilter.substring(index + length,endIndex);
          objClsSet.add(objectClass);
          index=endIndex + 1;
          index=iGroupFilter.indexOf(objectClassStr,endIndex);
        }
        if (objClsSet.size() > 0) {
          ldapEntity.getObjectClasses().clear();
          ldapEntity.getObjectClasses().addAll(objClsSet);
        }
      }
    }
    if (iUserIdMap != null) {
      StringTokenizer strtok=new StringTokenizer(iUserIdMap,""String_Node_Str"");
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_PERSON_ACCOUNT);
      if (ldapEntity != null) {
        List<String> rdnPropList=new ArrayList<String>();
        List<String> objClsList=new ArrayList<String>();
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          Set<String> propNames=null;
          if (LdapConstants.LDAP_ATTR_SAM_ACCOUNT_NAME.equalsIgnoreCase(attribute)) {
            propNames=getPropertyName(ldapEntity,""String_Node_Str"");
          }
 else           propNames=getPropertyName(ldapEntity,attribute);
          rdnPropList.add(propNames.iterator().next());
          if (!SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass))           objClsList.add(objectClass);
        }
        if (rdnPropList.size() > 0) {
          String[][] rdnProps=new String[rdnPropList.size()][];
          String[][] rdnAttrs=new String[rdnPropList.size()][];
          String rdnObjCls[][]=new String[objClsList.size()][];
          String objCls[]=new String[objClsList.size()];
          objCls=objClsList.toArray(objCls);
          for (int j=0; j < rdnPropList.size(); j++) {
            rdnProps[j]=LdapHelper.getRDNs(rdnPropList.get(j));
            rdnAttrs[j]=new String[rdnProps[j].length];
            for (int k=0; k < rdnProps[j].length; k++) {
              String rdnProp=rdnProps[j][k];
              rdnAttrs[j][k]=getAttributeName(ldapEntity,rdnProp);
            }
            if (objCls.length > 0) {
              rdnObjCls[j]=new String[objCls.length];
              rdnObjCls[j][0]=objCls[j];
            }
          }
          ldapEntity.setRDNProperties(rdnProps,rdnAttrs);
          if (isVMMRdnPropertiesDefined) {
            String updatedRdnAttrs[][]=null;
            String updatedRdnObjCls[][]=null;
            if (ldapEntity.getRDNAttributes().length > 0) {
              String orgRdnAttr[][]=ldapEntity.getRDNAttributes();
              updatedRdnAttrs=new String[orgRdnAttr.length + rdnAttrs.length][];
              for (int i=0; i < orgRdnAttr.length; i++) {
                updatedRdnAttrs[i]=new String[orgRdnAttr[i].length];
                for (int j=0; j < orgRdnAttr[i].length; j++)                 updatedRdnAttrs[i][j]=orgRdnAttr[i][j];
              }
              int len=orgRdnAttr.length;
              for (int i=0; i < rdnAttrs.length; i++) {
                updatedRdnAttrs[len]=new String[rdnAttrs[i].length];
                for (int j=0; j < rdnAttrs[i].length; j++)                 updatedRdnAttrs[len][j]=rdnAttrs[i][j];
                len++;
              }
            }
            if (ldapEntity.getRDNObjectclasses().length > 0) {
              String orgRdnObjCls[][]=ldapEntity.getRDNObjectclasses();
              updatedRdnObjCls=new String[orgRdnObjCls.length + rdnObjCls.length][];
              for (int i=0; i < orgRdnObjCls.length; i++) {
                updatedRdnObjCls[i]=new String[orgRdnObjCls[i].length];
                for (int j=0; j < orgRdnObjCls[i].length; j++)                 updatedRdnObjCls[i][j]=orgRdnObjCls[i][j];
              }
              int len=orgRdnObjCls.length;
              for (int i=0; i < rdnObjCls.length; i++) {
                updatedRdnObjCls[len]=new String[rdnObjCls[i].length];
                for (int j=0; j < rdnObjCls[i].length; j++)                 updatedRdnObjCls[len][j]=rdnObjCls[i][j];
                len++;
              }
            }
            ldapEntity.setRDNAttributes(updatedRdnAttrs,updatedRdnObjCls);
          }
 else {
            ldapEntity.setRDNAttributes(rdnAttrs,rdnObjCls);
          }
          if (ldapEntity.needTranslateRDN()) {
            iNeedTranslateRDN=true;
          }
        }
      }
 else {
        if (tc.isDebugEnabled())         Tr.debug(tc,""String_Node_Str"");
      }
    }
    if (iGroupIdMap != null) {
      StringTokenizer strtok=new StringTokenizer(iGroupIdMap,""String_Node_Str"");
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_GROUP);
      if (ldapEntity != null) {
        List<String> rdnPropList=new ArrayList<String>();
        Set<String> objClsSet=new HashSet<String>();
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          Set<String> propNames=getPropertyName(ldapEntity,attribute);
          rdnPropList.add(propNames.iterator().next());
          if (!SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass))           objClsSet.add(objectClass);
        }
        if (rdnPropList.size() > 0) {
          String[][] rdnProps=new String[rdnPropList.size()][];
          String[][] rdnAttrs=new String[rdnPropList.size()][];
          for (int j=0; j < rdnPropList.size(); j++) {
            rdnProps[j]=LdapHelper.getRDNs(rdnPropList.get(j));
            rdnAttrs[j]=new String[rdnProps[j].length];
            for (int k=0; k < rdnProps[j].length; k++) {
              String rdnProp=rdnProps[j][k];
              rdnAttrs[j][k]=getAttributeName(ldapEntity,rdnProp);
            }
          }
          ldapEntity.setRDNProperties(rdnProps,rdnAttrs);
          if (ldapEntity.needTranslateRDN()) {
            iNeedTranslateRDN=true;
          }
        }
      }
 else       if (tc.isDebugEnabled())       Tr.debug(tc,""String_Node_Str"");
    }
    if (iGroupMemberIdMap != null) {
      iLdapOperationalAttr=iGroupMemberIdMap.toLowerCase().contains(IBM_ALL_GROUPS.toLowerCase());
      if (iDefaultMembershipAttr) {
        iMembershipAttrName=null;
      }
      LdapEntity ldapEntity=null;
      List<String> grpTypes=getGroupTypes();
      List<String> objectClasses=new ArrayList<String>();
      for (int i=0; i < grpTypes.size(); i++) {
        ldapEntity=getLdapEntity(grpTypes.get(i));
        List<String> objClses=ldapEntity.getObjectClasses();
        for (int j=0; j < objClses.size(); j++) {
          String objCls=objClses.get(j);
          objectClasses.add(objCls);
        }
      }
      List<String> attrScopes=new ArrayList<String>();
      List<String> attrNames=new ArrayList<String>();
      StringTokenizer strtok=new StringTokenizer(iGroupMemberIdMap,""String_Node_Str"");
      if (ldapEntity != null) {
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          String scope=LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP_STRING;
          if (SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass)) {
            for (int j=0; j < objectClasses.size(); j++) {
              iMbrAttrMap.put(objectClasses.get(j),attribute);
            }
          }
 else {
            iMbrAttrMap.put(objectClass.toLowerCase(),attribute);
          }
          if (!attrNames.contains(attribute)) {
            attrNames.add(attribute);
            attrScopes.add(scope);
          }
          if (objectClass != null && !objectClasses.contains(objectClass.toLowerCase()) && (getGroupTypes() != null && getGroupTypes().size() > 0) && !SchemaConstants.VALUE_ALL_PROPERTIES.equals(objectClass)) {
            getLdapEntity(getGroupTypes().get(0)).addObjectClass(objectClass);
          }
        }
        iMbrAttrs=attrNames.toArray(new String[0]);
        iMbrAttrScope=new short[iMbrAttrs.length];
        iMbrAttrsAllScope=true;
        iMbrAttrsNestedScope=true;
        for (int i=0; i < attrScopes.size(); i++) {
          iMbrAttrScope[i]=LdapHelper.getMembershipScope(attrScopes.get(i));
          if (iMbrAttrScope[i] == LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP) {
            iMbrAttrsAllScope=false;
            iMbrAttrsNestedScope=false;
          }
 else           if (iMbrAttrScope[i] == LdapConstants.LDAP_NESTED_GROUP_MEMBERSHIP) {
            iMbrAttrsAllScope=false;
          }
        }
      }
 else       if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
    if (checkIfRacf()) {
      initializeRacfFilters();
    }
    resetEntitySearchFilters();
  }
}"
34535,"public LogTraceData parse(RoutedMessage routedMessage,LogRecord logRecord){
  LogTraceData logData=new LogTraceData();
  long dateVal=logRecord.getMillis();
  logData.setDatetime(dateVal);
  String messageIdVal=null;
  String messageVal=extractMessage(routedMessage,logRecord);
  logData.setMessage(messageVal);
  if (messageVal != null) {
    messageIdVal=parseMessageId(messageVal);
  }
  logData.setMessageId(messageIdVal);
  int threadIdVal=(int)Thread.currentThread().getId();
  logData.setThreadId(threadIdVal);
  logData.setModule(logRecord.getLoggerName());
  logData.setSeverity(LogFormatUtils.mapLevelToType(logRecord));
  logData.setLoglevel(LogFormatUtils.mapLevelToRawType(logRecord));
  logData.setMethodName(logRecord.getSourceMethodName());
  logData.setClassName(logRecord.getSourceClassName());
  logData.setLevelValue(logRecord.getLevel().intValue());
  String threadName=Thread.currentThread().getName();
  logData.setThreadName(threadName);
  WsLogRecord wsLogRecord=getWsLogRecord(logRecord);
  KeyValuePairList extensions=null;
  if (wsLogRecord != null) {
    logData.setCorrelationId(wsLogRecord.getCorrelationId());
    logData.setOrg(wsLogRecord.getOrganization());
    logData.setProduct(wsLogRecord.getProduct());
    logData.setComponent(wsLogRecord.getComponent());
    if (wsLogRecord.getExtensions() != null) {
      extensions=new KeyValuePairList(LogFieldConstants.EXTENSIONS_KVPL);
      Map<String,String> extMap=wsLogRecord.getExtensions();
      for (      Map.Entry<String,String> entry : extMap.entrySet()) {
        CollectorJsonHelpers.handleExtensions(extensions,entry.getKey(),entry.getValue());
      }
    }
  }
 else {
    logData.setCorrelationId(null);
    logData.setOrg(null);
    logData.setProduct(null);
    logData.setComponent(null);
    extensions=null;
  }
  logData.setSequence(sequenceNumber.next(dateVal));
  Throwable thrown=logRecord.getThrown();
  if (thrown != null) {
    String stackTrace=DataFormatHelper.throwableToString(thrown);
    logData.setThrowable(stackTrace);
    String s=thrown.getLocalizedMessage();
    if (s == null) {
      s=thrown.toString();
    }
    logData.setThrowableLocalized(s);
  }
 else {
    logData.setThrowable(null);
    logData.setThrowableLocalized(null);
  }
  if (routedMessage.getFormattedMsg() != null) {
    logData.setFormattedMsg(routedMessage.getFormattedMsg());
  }
 else {
    logData.setFormattedMsg(null);
  }
  logData.setExtensions(extensions);
  logData.setSourceType(sourceName);
  return logData;
}","public LogTraceData parse(RoutedMessage routedMessage,LogRecord logRecord){
  LogTraceData logData=new LogTraceData();
  long dateVal=logRecord.getMillis();
  logData.setDatetime(dateVal);
  String messageIdVal=null;
  String messageVal=extractMessage(routedMessage,logRecord);
  if (messageVal != null) {
    messageIdVal=parseMessageId(messageVal);
  }
  logData.setMessageId(messageIdVal);
  int threadIdVal=(int)Thread.currentThread().getId();
  logData.setThreadId(threadIdVal);
  logData.setModule(logRecord.getLoggerName());
  logData.setSeverity(LogFormatUtils.mapLevelToType(logRecord));
  logData.setLoglevel(LogFormatUtils.mapLevelToRawType(logRecord));
  logData.setMethodName(logRecord.getSourceMethodName());
  logData.setClassName(logRecord.getSourceClassName());
  logData.setLevelValue(logRecord.getLevel().intValue());
  String threadName=Thread.currentThread().getName();
  logData.setThreadName(threadName);
  WsLogRecord wsLogRecord=getWsLogRecord(logRecord);
  KeyValuePairList extensions=null;
  if (wsLogRecord != null) {
    logData.setCorrelationId(wsLogRecord.getCorrelationId());
    logData.setOrg(wsLogRecord.getOrganization());
    logData.setProduct(wsLogRecord.getProduct());
    logData.setComponent(wsLogRecord.getComponent());
    if (wsLogRecord.getExtensions() != null) {
      extensions=new KeyValuePairList(LogFieldConstants.EXTENSIONS_KVPL);
      Map<String,String> extMap=wsLogRecord.getExtensions();
      for (      Map.Entry<String,String> entry : extMap.entrySet()) {
        CollectorJsonHelpers.handleExtensions(extensions,entry.getKey(),entry.getValue());
      }
    }
  }
 else {
    logData.setCorrelationId(null);
    logData.setOrg(null);
    logData.setProduct(null);
    logData.setComponent(null);
    extensions=null;
  }
  logData.setSequence(sequenceNumber.next(dateVal));
  Throwable thrown=logRecord.getThrown();
  if (thrown != null) {
    String stackTrace=DataFormatHelper.throwableToString(thrown);
    logData.setThrowable(stackTrace);
    String s=thrown.getLocalizedMessage();
    if (s == null) {
      s=thrown.toString();
    }
    logData.setThrowableLocalized(s);
  }
 else {
    logData.setThrowable(null);
    logData.setThrowableLocalized(null);
  }
  logData.setMessage(messageVal);
  if (routedMessage.getFormattedMsg() != null) {
    logData.setFormattedMsg(routedMessage.getFormattedMsg());
  }
 else {
    logData.setFormattedMsg(null);
  }
  logData.setExtensions(extensions);
  logData.setSourceType(sourceName);
  return logData;
}"
34536,"@Override public AuthenticationStatus notifyContainerAboutLogin(String callername,Set<String> groups){
  try {
    this.groups=Collections.unmodifiableSet(groups);
    Callback[] callbacks=new Callback[3];
    callbacks[0]=new CallerPrincipalCallback(clientSubject,callername);
    callbacks[1]=new GroupPrincipalCallback(clientSubject,groups.toArray(new String[]{}));
    handler.handle(callbacks);
  }
 catch (  Exception e) {
  }
  return AuthenticationStatus.SUCCESS;
}","@Override public AuthenticationStatus notifyContainerAboutLogin(String callername,Set<String> groups){
  try {
    this.groups=Collections.unmodifiableSet(groups);
    Callback[] callbacks=new Callback[2];
    callbacks[0]=new CallerPrincipalCallback(clientSubject,callername);
    callbacks[1]=new GroupPrincipalCallback(clientSubject,groups.toArray(new String[]{}));
    handler.handle(callbacks);
  }
 catch (  Exception e) {
  }
  return AuthenticationStatus.SUCCESS;
}"
34537,public abstract SearchExpressionContextFactory getWrapped();,"public SearchExpressionContextFactory getWrapped(){
  return this.delegate;
}"
34538,"protected void setMemberFactories(FaceletCache.MemberFactory<V> faceletFactory,FaceletCache.MemberFactory<V> viewMetadataFaceletFactory){
  if (faceletFactory == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (viewMetadataFaceletFactory == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  _faceletFactory=faceletFactory;
  _viewMetadataFaceletFactory=viewMetadataFaceletFactory;
}","@Deprecated protected void setMemberFactories(FaceletCache.MemberFactory<V> faceletFactory,FaceletCache.MemberFactory<V> viewMetadataFaceletFactory){
  if (faceletFactory == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (viewMetadataFaceletFactory == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  _faceletFactory=faceletFactory;
  _viewMetadataFaceletFactory=viewMetadataFaceletFactory;
}"
34539,"public CustomSearchExpressionContextFactory(SearchExpressionContextFactory wrapped){
  this.wrapped=wrapped;
}","public CustomSearchExpressionContextFactory(SearchExpressionContextFactory wrapped){
  super(wrapped);
  this.wrapped=wrapped;
}"
34540,"private static String jsonifyTraceAndMessage(int maxFieldLength,String wlpUserDir,String serverName,String hostName,String eventType,Object event,String[] tags){
  LogTraceData logData=(LogTraceData)event;
  StringBuilder sb=null;
  if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startMessageJson(hostName,wlpUserDir,serverName);
  if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startTraceJson(hostName,wlpUserDir,serverName);
  String message=logData.getMessage();
  String loglevel=logData.getLoglevel();
  if (loglevel != null) {
    if (loglevel.equals(""String_Node_Str"") || loglevel.equals(""String_Node_Str"")) {
      message=CollectorJsonHelpers.jsonRemoveSpace(message);
    }
  }
  String formattedValue=CollectorJsonHelpers.formatMessage(logData.getMessage(),maxFieldLength);
  CollectorJsonHelpers.addToJSON(sb,logData.getMessageKey(),formattedValue,false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getThreadIdKey(),DataFormatHelper.padHexString(logData.getThreadId(),8),false,true,false,false);
  String datetime=CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());
  CollectorJsonHelpers.addToJSON(sb,logData.getDatetimeKey(),datetime,false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getModuleKey(),logData.getModule(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getMessageIdKey(),logData.getMessageId(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getSeverityKey(),logData.getSeverity(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getMethodNameKey(),logData.getMethodName(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getClassNameKey(),logData.getClassName(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getSequenceKey(),logData.getSequence(),false,true,false,false);
  KeyValuePairList kvpl=logData.getExtensions();
  if (kvpl != null) {
    if (kvpl.getName().equals(LogFieldConstants.EXTENSIONS_KVPL)) {
      ArrayList<KeyValuePair> extensions=kvpl.getKeyValuePairs();
      for (      KeyValuePair k : extensions) {
        String extKey=k.getKey();
        if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Integer.toString(k.getIntValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Float.toString(k.getFloatValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Long.toString(k.getLongValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Boolean.toString(k.getBooleanValue()),false,true,false,false,true);
        }
 else {
          CollectorJsonHelpers.addToJSON(sb,extKey,k.getStringValue(),false,true,false,false,false);
        }
      }
    }
  }
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String jsonifyTraceAndMessage(int maxFieldLength,String wlpUserDir,String serverName,String hostName,String eventType,Object event,String[] tags){
  LogTraceData logData=(LogTraceData)event;
  StringBuilder sb=null;
  if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startMessageJson(hostName,wlpUserDir,serverName);
  if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startTraceJson(hostName,wlpUserDir,serverName);
  String message=logData.getMessage();
  String loglevel=logData.getLoglevel();
  if (loglevel != null) {
    if (loglevel.equals(""String_Node_Str"") || loglevel.equals(""String_Node_Str"")) {
      message=CollectorJsonHelpers.jsonRemoveSpace(message);
    }
  }
  StringBuilder formattedValue=new StringBuilder(CollectorJsonHelpers.formatMessage(message,maxFieldLength));
  String throwable=logData.getThrowable();
  if (throwable != null) {
    formattedValue.append(CollectorJsonHelpers.LINE_SEPARATOR).append(throwable);
  }
  CollectorJsonHelpers.addToJSON(sb,logData.getMessageKey(),formattedValue.toString(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getThreadIdKey(),DataFormatHelper.padHexString(logData.getThreadId(),8),false,true,false,false);
  String datetime=CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());
  CollectorJsonHelpers.addToJSON(sb,logData.getDatetimeKey(),datetime,false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getModuleKey(),logData.getModule(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getMessageIdKey(),logData.getMessageId(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getSeverityKey(),logData.getSeverity(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getMethodNameKey(),logData.getMethodName(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getClassNameKey(),logData.getClassName(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getSequenceKey(),logData.getSequence(),false,true,false,false);
  KeyValuePairList kvpl=logData.getExtensions();
  if (kvpl != null) {
    if (kvpl.getName().equals(LogFieldConstants.EXTENSIONS_KVPL)) {
      ArrayList<KeyValuePair> extensions=kvpl.getKeyValuePairs();
      for (      KeyValuePair k : extensions) {
        String extKey=k.getKey();
        if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Integer.toString(k.getIntValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Float.toString(k.getFloatValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Long.toString(k.getLongValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Boolean.toString(k.getBooleanValue()),false,true,false,false,true);
        }
 else {
          CollectorJsonHelpers.addToJSON(sb,extKey,k.getStringValue(),false,true,false,false,false);
        }
      }
    }
  }
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
34541,"private static String jsonifyTraceAndMessage(int maxFieldLength,String wlpUserDir,String serverName,String hostName,String eventType,Object event,String[] tags){
  LogTraceData logData=(LogTraceData)event;
  StringBuilder sb=null;
  ArrayList<KeyValuePair> extensions=null;
  KeyValuePairList kvpl=null;
  if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startMessageJson1_1(hostName,wlpUserDir,serverName);
  if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startTraceJson1_1(hostName,wlpUserDir,serverName);
  String message=logData.getMessage();
  String loglevel=logData.getLoglevel();
  if (loglevel != null) {
    if (loglevel.equals(""String_Node_Str"") || loglevel.equals(""String_Node_Str"")) {
      message=CollectorJsonHelpers.jsonRemoveSpace(message);
    }
  }
  String formattedValue=CollectorJsonHelpers.formatMessage(message,maxFieldLength);
  CollectorJsonHelpers.addToJSON(sb,logData.getMessageKey1_1(),formattedValue,false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getThreadIdKey1_1(),DataFormatHelper.padHexString(logData.getThreadId(),8),false,true,false,false);
  String datetime=CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());
  CollectorJsonHelpers.addToJSON(sb,logData.getDatetimeKey1_1(),datetime,false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getMessageIdKey1_1(),logData.getMessageId(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getModuleKey1_1(),logData.getModule(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getLoglevelKey1_1(),logData.getLoglevel(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getMethodNameKey1_1(),logData.getMethodName(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getClassNameKey1_1(),logData.getClassName(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getSequenceKey1_1(),logData.getSequence(),false,true,false,false);
  kvpl=logData.getExtensions();
  if (kvpl != null) {
    if (kvpl.getName().equals(LogFieldConstants.EXTENSIONS_KVPL)) {
      extensions=kvpl.getKeyValuePairs();
      for (      KeyValuePair k : extensions) {
        String extKey=k.getKey();
        if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Integer.toString(k.getIntValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Float.toString(k.getFloatValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Long.toString(k.getLongValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Boolean.toString(k.getBooleanValue()),false,true,false,false,true);
        }
 else {
          CollectorJsonHelpers.addToJSON(sb,extKey,k.getStringValue(),false,true,false,false,false);
        }
      }
    }
  }
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String jsonifyTraceAndMessage(int maxFieldLength,String wlpUserDir,String serverName,String hostName,String eventType,Object event,String[] tags){
  LogTraceData logData=(LogTraceData)event;
  StringBuilder sb=null;
  ArrayList<KeyValuePair> extensions=null;
  KeyValuePairList kvpl=null;
  if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startMessageJson1_1(hostName,wlpUserDir,serverName);
  if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startTraceJson1_1(hostName,wlpUserDir,serverName);
  String message=logData.getMessage();
  String loglevel=logData.getLoglevel();
  if (loglevel != null) {
    if (loglevel.equals(""String_Node_Str"") || loglevel.equals(""String_Node_Str"")) {
      message=CollectorJsonHelpers.jsonRemoveSpace(message);
    }
  }
  StringBuilder formattedValue=new StringBuilder(CollectorJsonHelpers.formatMessage(message,maxFieldLength));
  String throwable=logData.getThrowable();
  if (throwable != null) {
    formattedValue.append(CollectorJsonHelpers.LINE_SEPARATOR).append(throwable);
  }
  CollectorJsonHelpers.addToJSON(sb,logData.getMessageKey1_1(),formattedValue.toString(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getThreadIdKey1_1(),DataFormatHelper.padHexString(logData.getThreadId(),8),false,true,false,false);
  String datetime=CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());
  CollectorJsonHelpers.addToJSON(sb,logData.getDatetimeKey1_1(),datetime,false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getMessageIdKey1_1(),logData.getMessageId(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getModuleKey1_1(),logData.getModule(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getLoglevelKey1_1(),logData.getLoglevel(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getMethodNameKey1_1(),logData.getMethodName(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getClassNameKey1_1(),logData.getClassName(),false,true,false,false);
  CollectorJsonHelpers.addToJSON(sb,logData.getSequenceKey1_1(),logData.getSequence(),false,true,false,false);
  kvpl=logData.getExtensions();
  if (kvpl != null) {
    if (kvpl.getName().equals(LogFieldConstants.EXTENSIONS_KVPL)) {
      extensions=kvpl.getKeyValuePairs();
      for (      KeyValuePair k : extensions) {
        String extKey=k.getKey();
        if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Integer.toString(k.getIntValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Float.toString(k.getFloatValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Long.toString(k.getLongValue()),false,true,false,false,true);
        }
 else         if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {
          CollectorJsonHelpers.addToJSON(sb,extKey,Boolean.toString(k.getBooleanValue()),false,true,false,false,true);
        }
 else {
          CollectorJsonHelpers.addToJSON(sb,extKey,k.getStringValue(),false,true,false,false,false);
        }
      }
    }
  }
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
34542,"public LogTraceData parse(RoutedMessage routedMessage,LogRecord logRecord){
  LogTraceData logData=new LogTraceData();
  long dateVal=logRecord.getMillis();
  logData.setDatetime(dateVal);
  String messageIdVal=null;
  String messageVal=extractMessage(routedMessage,logRecord);
  if (messageVal != null) {
    messageIdVal=parseMessageId(messageVal);
  }
  logData.setMessageId(messageIdVal);
  int threadIdVal=(int)Thread.currentThread().getId();
  logData.setThreadId(threadIdVal);
  logData.setModule(logRecord.getLoggerName());
  logData.setSeverity(LogFormatUtils.mapLevelToType(logRecord));
  logData.setLoglevel(LogFormatUtils.mapLevelToRawType(logRecord));
  logData.setMethodName(logRecord.getSourceMethodName());
  logData.setClassName(logRecord.getSourceClassName());
  logData.setLevelValue(logRecord.getLevel().intValue());
  String threadName=Thread.currentThread().getName();
  logData.setThreadName(threadName);
  WsLogRecord wsLogRecord=getWsLogRecord(logRecord);
  KeyValuePairList extensions=null;
  if (wsLogRecord != null) {
    logData.setCorrelationId(wsLogRecord.getCorrelationId());
    logData.setOrg(wsLogRecord.getOrganization());
    logData.setProduct(wsLogRecord.getProduct());
    logData.setComponent(wsLogRecord.getComponent());
    if (wsLogRecord.getExtensions() != null) {
      extensions=new KeyValuePairList(LogFieldConstants.EXTENSIONS_KVPL);
      Map<String,String> extMap=wsLogRecord.getExtensions();
      for (      Map.Entry<String,String> entry : extMap.entrySet()) {
        CollectorJsonHelpers.handleExtensions(extensions,entry.getKey(),entry.getValue());
      }
    }
  }
 else {
    logData.setCorrelationId(null);
    logData.setOrg(null);
    logData.setProduct(null);
    logData.setComponent(null);
    extensions=null;
  }
  logData.setSequence(sequenceNumber.next(dateVal));
  Throwable thrown=logRecord.getThrown();
  if (thrown != null) {
    String stackTrace=DataFormatHelper.throwableToString(thrown);
    logData.setThrowable(stackTrace);
    String s=thrown.getLocalizedMessage();
    if (s == null) {
      s=thrown.toString();
    }
    logData.setThrowableLocalized(s);
  }
 else {
    logData.setThrowable(null);
    logData.setThrowableLocalized(null);
  }
  StringBuilder msgBldr=new StringBuilder();
  msgBldr.append(messageVal);
  if (thrown != null) {
    String stackTrace=DataFormatHelper.throwableToString(thrown);
    if (stackTrace != null) {
      msgBldr.append(LINE_SEPARATOR).append(stackTrace);
    }
  }
  logData.setMessage(msgBldr.toString());
  if (routedMessage.getFormattedMsg() != null) {
    logData.setFormattedMsg(routedMessage.getFormattedMsg());
  }
 else {
    logData.setFormattedMsg(null);
  }
  logData.setExtensions(extensions);
  logData.setSourceType(sourceName);
  return logData;
}","public LogTraceData parse(RoutedMessage routedMessage,LogRecord logRecord){
  LogTraceData logData=new LogTraceData();
  long dateVal=logRecord.getMillis();
  logData.setDatetime(dateVal);
  String messageIdVal=null;
  String messageVal=extractMessage(routedMessage,logRecord);
  logData.setMessage(messageVal);
  if (messageVal != null) {
    messageIdVal=parseMessageId(messageVal);
  }
  logData.setMessageId(messageIdVal);
  int threadIdVal=(int)Thread.currentThread().getId();
  logData.setThreadId(threadIdVal);
  logData.setModule(logRecord.getLoggerName());
  logData.setSeverity(LogFormatUtils.mapLevelToType(logRecord));
  logData.setLoglevel(LogFormatUtils.mapLevelToRawType(logRecord));
  logData.setMethodName(logRecord.getSourceMethodName());
  logData.setClassName(logRecord.getSourceClassName());
  logData.setLevelValue(logRecord.getLevel().intValue());
  String threadName=Thread.currentThread().getName();
  logData.setThreadName(threadName);
  WsLogRecord wsLogRecord=getWsLogRecord(logRecord);
  KeyValuePairList extensions=null;
  if (wsLogRecord != null) {
    logData.setCorrelationId(wsLogRecord.getCorrelationId());
    logData.setOrg(wsLogRecord.getOrganization());
    logData.setProduct(wsLogRecord.getProduct());
    logData.setComponent(wsLogRecord.getComponent());
    if (wsLogRecord.getExtensions() != null) {
      extensions=new KeyValuePairList(LogFieldConstants.EXTENSIONS_KVPL);
      Map<String,String> extMap=wsLogRecord.getExtensions();
      for (      Map.Entry<String,String> entry : extMap.entrySet()) {
        CollectorJsonHelpers.handleExtensions(extensions,entry.getKey(),entry.getValue());
      }
    }
  }
 else {
    logData.setCorrelationId(null);
    logData.setOrg(null);
    logData.setProduct(null);
    logData.setComponent(null);
    extensions=null;
  }
  logData.setSequence(sequenceNumber.next(dateVal));
  Throwable thrown=logRecord.getThrown();
  if (thrown != null) {
    String stackTrace=DataFormatHelper.throwableToString(thrown);
    logData.setThrowable(stackTrace);
    String s=thrown.getLocalizedMessage();
    if (s == null) {
      s=thrown.toString();
    }
    logData.setThrowableLocalized(s);
  }
 else {
    logData.setThrowable(null);
    logData.setThrowableLocalized(null);
  }
  if (routedMessage.getFormattedMsg() != null) {
    logData.setFormattedMsg(routedMessage.getFormattedMsg());
  }
 else {
    logData.setFormattedMsg(null);
  }
  logData.setExtensions(extensions);
  logData.setSourceType(sourceName);
  return logData;
}"
34543,"public JwtSsoTokenUtils(String consumer,AtomicServiceReference<TrustAssociationInterceptor> mpjwttaiserviceref){
  consumerId=consumer;
  mpjwttai=(MicroProfileJwtTAI)mpjwttaiserviceref.getService();
}","public JwtSsoTokenUtils(String consumer,AtomicServiceReference<TrustAssociationInterceptor> mpjwttaiserviceref){
  consumerId=consumer;
  TrustAssociationInterceptor service=mpjwttaiserviceref.getService();
  if (service instanceof MicroProfileJwtTAI) {
    mpjwttai=(MicroProfileJwtTAI)service;
  }
}"
34544,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. </OL> <P> Users will be able to access the application since they are using the correct realm. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testEJBAnnotatedLdapISRealmOnWar1andWar2CorrectRealm() throws Exception {
  String response;
  String queryString;
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_REALM1_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_REALM2_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_REALM_NAME,true,EJB_REALM1_WAR_NAME);
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_REALM2_NAME,true,EJB_REALM2_WAR_NAME);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_REALM_NAME);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_REALM2_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(XML_REALM_NAME,EJB_REALM_APP_NAME,EJB_REALM2_APP_NAME);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_REALM1_WAR_PATH + SIMPLE_SERVLET_REALM1 + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbUserResponse(response,Constants.getEJBBeanResponse + Constants.ejb03Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodManager,Constants.getEjbCallerPrincipal + LocalLdapServer.USER1);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_REALM2_WAR_PATH + SIMPLE_SERVLET_REALM2 + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.ANOTHERPASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbUserResponse(response,Constants.getEJBBeanResponse + Constants.ejb03Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodManager,Constants.getEjbCallerPrincipal + LocalLdapServer.USER1);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  myServer.removeInstalledAppForValidation(EJB_REALM_APP_NAME);
  myServer.removeInstalledAppForValidation(EJB_REALM2_APP_NAME);
  myServer.stopServer();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. </OL> <P> Users will be able to access the application since they are using the correct realm. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testEJBAnnotatedLdapISRealmOnWar1andWar2CorrectRealm() throws Exception {
  String response;
  String queryString;
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_REALM1_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_REALM2_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_REALM_NAME,true,EJB_REALM1_WAR_NAME);
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_REALM2_NAME,true,EJB_REALM2_WAR_NAME);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_REALM_NAME);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_REALM2_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(XML_REALM_NAME,EJB_REALM_APP_NAME,EJB_REALM2_APP_NAME);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_REALM1_WAR_PATH + SIMPLE_SERVLET_REALM1 + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbUserResponse(response,Constants.getEJBBeanResponse + Constants.ejb03Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodManager,Constants.getEjbCallerPrincipal + LocalLdapServer.USER1);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_REALM2_WAR_PATH + SIMPLE_SERVLET_REALM2 + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.ANOTHERPASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbUserResponse(response,Constants.getEJBBeanResponse + Constants.ejb03Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodManager,Constants.getEjbCallerPrincipal + LocalLdapServer.USER1);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  myServer.removeInstalledAppForValidation(EJB_REALM_APP_NAME);
  myServer.removeInstalledAppForValidation(EJB_REALM2_APP_NAME);
  myServer.stopServer();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34545,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. </OL> <P> Users will fail to access the apps because of wrong realm. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testEJBAnnotatedLdapISRealmOnWar1andWar2IncorrectRealm() throws Exception {
  String response;
  String queryString;
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_REALM1_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_REALM2_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_REALM_NAME,true,EJB_REALM1_WAR_NAME);
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_REALM2_NAME,true,EJB_REALM2_WAR_NAME);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_REALM_NAME);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_REALM2_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(XML_INCORRECT_REALM,EJB_REALM_APP_NAME,EJB_REALM2_APP_NAME);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_REALM1_WAR_PATH + SIMPLE_SERVLET_REALM1 + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.PASSWORD,HttpServletResponse.SC_FORBIDDEN);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbErrorUserResponse(response,Constants.ejbAuthorizationFailed);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_REALM2_WAR_PATH + SIMPLE_SERVLET_REALM2 + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.ANOTHERPASSWORD,HttpServletResponse.SC_FORBIDDEN);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbErrorUserResponse(response,Constants.ejbAuthorizationFailed);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  myServer.removeInstalledAppForValidation(EJB_REALM_APP_NAME);
  myServer.removeInstalledAppForValidation(EJB_REALM2_APP_NAME);
  myServer.stopServer();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. </OL> <P> Users will fail to access the apps because of wrong realm. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testEJBAnnotatedLdapISRealmOnWar1andWar2IncorrectRealm() throws Exception {
  String response;
  String queryString;
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_REALM1_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_REALM2_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_REALM_NAME,true,EJB_REALM1_WAR_NAME);
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_REALM2_NAME,true,EJB_REALM2_WAR_NAME);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_REALM_NAME);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_REALM2_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(XML_INCORRECT_REALM,EJB_REALM_APP_NAME,EJB_REALM2_APP_NAME);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_REALM1_WAR_PATH + SIMPLE_SERVLET_REALM1 + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.PASSWORD,HttpServletResponse.SC_FORBIDDEN);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbErrorUserResponse(response,Constants.ejbAuthorizationFailed);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_REALM2_WAR_PATH + SIMPLE_SERVLET_REALM2 + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.ANOTHERPASSWORD,HttpServletResponse.SC_FORBIDDEN);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbErrorUserResponse(response,Constants.ejbAuthorizationFailed);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  myServer.removeInstalledAppForValidation(EJB_REALM_APP_NAME);
  myServer.removeInstalledAppForValidation(EJB_REALM2_APP_NAME);
  myServer.stopServer();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34546,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will be configured to use Database. 2. WAR 2 will use the LDAP Identity Store. 3. Test cases will run using the RunAsServlet. 4. To test this out, we will be using the local ldap user: User 2. However, in the server.xml the blue3 is configured as the run-as manager. but that user doesn't exist in the database. For that reason it is expected that user 2 will appear in the servlet response. </OL> <P> The user we are sending exist on the LDAP but the RunAs exist on the DB. 200 is expected. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testEJBRunAsAnnotatedLdapOnWar1AndDBOnWAR2() throws Exception {
  String response;
  String queryString;
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(XML_NAME,EJB_APP_NAME);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_WAR_PATH + RUNAS_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER2,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbRunAsUserResponse(response,Constants.ejb01Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodRunAsSpecified,Constants.getEjbCallerPrincipal + Constants.DB_USER3,Constants.DB_USER2);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  myServer.removeInstalledAppForValidation(EJB_APP_NAME);
  myServer.stopServer();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will be configured to use Database. 2. WAR 2 will use the LDAP Identity Store. 3. Test cases will run using the RunAsServlet. 4. To test this out, we will be using the local ldap user: User 2. However, in the server.xml the blue3 is configured as the run-as manager. but that user doesn't exist in the database. For that reason it is expected that user 2 will appear in the servlet response. </OL> <P> The user we are sending exist on the LDAP but the RunAs exist on the DB. 200 is expected. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) public void testEJBRunAsAnnotatedLdapOnWar1AndDBOnWAR2() throws Exception {
  String response;
  String queryString;
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(XML_NAME,EJB_APP_NAME);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_WAR_PATH + RUNAS_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER2,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbRunAsUserResponse(response,Constants.ejb01Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodRunAsSpecified,Constants.getEjbCallerPrincipal + Constants.DB_USER3,Constants.DB_USER2);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  httpclient.getConnectionManager().shutdown();
  setupConnection();
  myServer.removeInstalledAppForValidation(EJB_APP_NAME);
  myServer.stopServer();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34547,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two unprotected servlets, the other one contains one unprotected servlet. Each war files has one jar file. Test case tries to access unprotected servlet with invalid user. RunAs is expected to be called. </OL> <P> Expected Results: 200 OK and isCallerInRole(false). <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testRunAsInvalidUserUnprotectedServletInRoleLDAPWar1() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  String queryString=EJB_WAR_PATH + RUNAS_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  String response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.INVALIDUSER,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbRunAsUserResponse(response,Constants.ejb01Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodRunAsSpecified,Constants.getEjbCallerPrincipal + LocalLdapServer.INVALIDUSER,Constants.DB_USER2);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two unprotected servlets, the other one contains one unprotected servlet. Each war files has one jar file. Test case tries to access unprotected servlet with invalid user. RunAs is expected to be called. </OL> <P> Expected Results: 200 OK and isCallerInRole(false). <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testRunAsInvalidUserUnprotectedServletInRoleLDAPWar1() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  String queryString=EJB_WAR_PATH + RUNAS_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  String response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.INVALIDUSER,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbRunAsUserResponse(response,Constants.ejb01Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodRunAsSpecified,Constants.getEjbCallerPrincipal + Constants.DB_USER3,Constants.DB_USER2);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34548,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two unprotected servlets, the other one contains one unprotected servlet. Each war files has one jar file. This test case uses EJB with the purpose of testing Basic Authentication with the use of LDAP and DB Identity Store. The user will try to authenticate as LDAPUser, authentication will suceed however the RunAs config will be picked up DB user will be used with employee access given. </OL> <P> Expected Results: 200 OK and isUserInRole(true). <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testisRunAsUserInRoleLDAPtoDBWar1() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  String queryString=EJB_WAR_PATH + RUNAS_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  String response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER2,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbRunAsUserResponse(response,Constants.ejb01Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodRunAsSpecified,Constants.getEjbCallerPrincipal + LocalLdapServer.USER2,Constants.DB_USER2);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two unprotected servlets, the other one contains one unprotected servlet. Each war files has one jar file. This test case uses EJB with the purpose of testing Basic Authentication with the use of LDAP and DB Identity Store. The user will try to authenticate as LDAPUser, authentication will succeed however the RunAs config will be picked up DB user will be used with employee access given. </OL> <P> Expected Results: 200 OK and isUserInRole(true). <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testisRunAsUserInRoleLDAPtoDBWar1() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  String queryString=EJB_WAR_PATH + RUNAS_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  String response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER2,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbRunAsUserResponse(response,Constants.ejb01Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodRunAsSpecified,Constants.getEjbCallerPrincipal + Constants.DB_USER3,Constants.DB_USER2);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34549,"@BeforeClass public static void setUp() throws Exception {
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  ldapServer=new LocalLdapServer();
  ldapServer.start();
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  startServer(XML_NAME,EJB_APP_NAME);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
}","@BeforeClass public static void setUp() throws Exception {
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  ldapServer=new LocalLdapServer();
  ldapServer.start();
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  startServer(XML_NAME,EJB_APP_NAME);
}"
34550,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. </OL> <P> Multiple results are expected. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testEJBAppSecurity30() throws Exception {
  String response;
  String queryString;
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(XML_NAME,EJB_APP_NAME);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_WAR_PATH + SIMPLE_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbUserResponse(response,Constants.getEJBBeanResponse + Constants.ejb03Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodManager,Constants.getEjbCallerPrincipal + LocalLdapServer.USER1);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  myServer.removeInstalledAppForValidation(EJB_APP_NAME);
  myServer.stopServer();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. </OL> <P> Multiple results are expected. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testEJBAppSecurity30() throws Exception {
  String response;
  String queryString;
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(XML_NAME,EJB_APP_NAME);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  queryString=EJB_WAR_PATH + SIMPLE_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,LocalLdapServer.USER1,LocalLdapServer.PASSWORD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbUserResponse(response,Constants.getEJBBeanResponse + Constants.ejb03Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodManager,Constants.getEjbCallerPrincipal + LocalLdapServer.USER1);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  myServer.removeInstalledAppForValidation(EJB_APP_NAME);
  myServer.stopServer();
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34551,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. 3. AppSecurity feature 2.0 Will be used. </OL> <P> The application will fail to start because the feature does not support Identity Store. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test @ExpectedFFDC(value={""String_Node_Str"",""String_Node_Str""}) public void testEJBAppSecurity10() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME_noPermission,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME_noPermission);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(APP_SEC_1_XML_NAME,EJB_APP_NAME_noPermission);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  myServer.removeInstalledAppForValidation(EJB_APP_NAME_noPermission);
  myServer.stopServer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. 3. AppSecurity feature 2.0 Will be used. </OL> <P> The application will fail to start because the feature does not support Identity Store. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test @ExpectedFFDC(value={""String_Node_Str"",""String_Node_Str""}) public void testEJBAppSecurity10() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME_noPermission,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME_noPermission);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(APP_SEC_1_XML_NAME,EJB_APP_NAME_noPermission);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  myServer.removeInstalledAppForValidation(EJB_APP_NAME_noPermission);
  myServer.stopServer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34552,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. 3. AppSecurity feature 2.0 Will be used. </OL> <P> The application will fail to start because the feature does not support Identity Store. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test @ExpectedFFDC(value={""String_Node_Str"",""String_Node_Str""}) public void testEJBAppSecurity20() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME_noPermission,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME_noPermission);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(APP_SEC_2_XML_NAME,EJB_APP_NAME_noPermission);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  myServer.removeInstalledAppForValidation(EJB_APP_NAME_noPermission);
  myServer.stopServer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. In this test case the following configuration will be used. 1. WAR 1 will use the LDAP Identity Store. 2. WAR 2 will use the LDAP2 Identity Store. 3. AppSecurity feature 2.0 Will be used. </OL> <P> The application will fail to start because the feature does not support Identity Store. <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test @ExpectedFFDC(value={""String_Node_Str"",""String_Node_Str""}) public void testEJBAppSecurity20() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.createWar(myServer,TEMP_DIR,EJB_WAR_NAME2,true,EJB_BEAN_JAR_NAME,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  WCApplicationHelper.packageWarsToEar(myServer,TEMP_DIR,EJB_EAR_NAME_noPermission,true,EJB_WAR_NAME,EJB_WAR_NAME2);
  WCApplicationHelper.addEarToServerApps(myServer,TEMP_DIR,EJB_EAR_NAME_noPermission);
  WCApplicationHelper.addWarToServerApps(myServer,""String_Node_Str"",true,JAR_NAME,false,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  startServer(APP_SEC_2_XML_NAME,EJB_APP_NAME_noPermission);
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  assertNotNull(""String_Node_Str"",myServer.waitForStringInLog(""String_Node_Str""));
  myServer.removeInstalledAppForValidation(EJB_APP_NAME_noPermission);
  myServer.stopServer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34553,"/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. This test case uses EJB with the purpose of testing Basic Authentication with DB Identity Store. The servlet for DB is designed to use RunAS. </OL> <P> Expected Results: 200 OK and isUserInRole(true). <OL> <LI> </OL>
 */
@Mode(TestMode.LITE) @Test public void testisUserInRoleDBWar1() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  String queryString=EJB_WAR_PATH + RUNAS_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  String response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,Constants.DB_USER1,Constants.DB_USER1_PWD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbUserResponse(response,Constants.getEJBBeanResponse + Constants.ejb03Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodManager,Constants.getEjbCallerPrincipal + Constants.DB_USER1);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}","/** 
 * Verify the following: <OL> <LI> An ear file that contains two war files. One war file contains two servlets, the other one contains one servlet. Each war files has one jar file. This test case uses EJB with the purpose of testing Basic Authentication with DB Identity Store. The servlet for DB is designed to use RunAS. </OL> <P> Expected Results: 200 OK and isUserInRole(true). <OL> <LI> </OL>
 */
public void testisUserInRoleDBWar1() throws Exception {
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
  String queryString=EJB_WAR_PATH + RUNAS_SERVLET + ""String_Node_Str"";
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  String response=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,Constants.DB_USER1,Constants.DB_USER1_PWD,HttpServletResponse.SC_OK);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  verifyEjbUserResponse(response,Constants.getEJBBeanResponse + Constants.ejb03Bean,Constants.getEjbBeanMethodName + Constants.ejbBeanMethodManager,Constants.getEjbCallerPrincipal + Constants.DB_USER1);
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"");
  Log.info(logClass,getCurrentTestName(),""String_Node_Str"" + getCurrentTestName());
}"
34554,"protected void verifyEjbUserResponse(String response,String ejbBean,String ejbBeanMethod,String getEjbUserPrincipal){
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"" + ejbBean + ""String_Node_Str""+ ejbBeanMethod+ ""String_Node_Str""+ getEjbUserPrincipal);
  mustContain(response,ejbBean);
  mustContain(response,ejbBeanMethod);
  mustContain(response,getEjbUserPrincipal);
}","protected void verifyEjbUserResponse(String response,String ejbBean,String ejbBeanMethod,String getEjbRemoteUser){
  Log.info(logClass,""String_Node_Str"",""String_Node_Str"" + ejbBean + ""String_Node_Str""+ ejbBeanMethod+ ""String_Node_Str""+ getEjbRemoteUser);
  mustContain(response,ejbBean);
  mustContain(response,ejbBeanMethod);
  mustContain(response,getEjbRemoteUser);
}"
34555,"@Override protected SecurityContext getSecurityContext(){
  return null;
}","@Override protected SecurityContext getSecurityContext(){
  return securityContext;
}"
34556,"@BeforeClass public static void setUp() throws Exception {
  appA=new SessionCacheApp(serverA,true,""String_Node_Str"");
  appB=new SessionCacheApp(serverB,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  serverB.useSecondaryHTTPPort();
  String hazelcastConfigFile=""String_Node_Str"";
  if (FATSuite.isMulticastDisabled()) {
    Log.info(SessionCacheTwoServerTest.class,""String_Node_Str"",""String_Node_Str"");
    hazelcastConfigFile=""String_Node_Str"";
  }
  String configLocation=new File(serverB.getUserDir() + ""String_Node_Str"" + hazelcastConfigFile).getAbsolutePath();
  String rand=UUID.randomUUID().toString();
  serverA.setJvmOptions(Arrays.asList(""String_Node_Str"" + rand,""String_Node_Str"" + hazelcastConfigFile));
  serverB.setJvmOptions(Arrays.asList(""String_Node_Str"" + rand,""String_Node_Str"" + configLocation));
  serverA.startServer();
  serverB.startServer();
}","@BeforeClass public static void setUp() throws Exception {
  appA=new SessionCacheApp(serverA,true,""String_Node_Str"");
  appB=new SessionCacheApp(serverB,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  serverB.useSecondaryHTTPPort();
  String hazelcastConfigFile=""String_Node_Str"";
  if (FATSuite.isMulticastDisabled()) {
    Log.info(SessionCacheTwoServerTest.class,""String_Node_Str"",""String_Node_Str"");
    hazelcastConfigFile=""String_Node_Str"";
  }
  String configLocation=new File(serverB.getUserDir() + ""String_Node_Str"" + hazelcastConfigFile).getAbsolutePath();
  String rand=UUID.randomUUID().toString();
  serverA.setJvmOptions(Arrays.asList(""String_Node_Str"" + rand,""String_Node_Str"" + hazelcastConfigFile));
  serverB.setJvmOptions(Arrays.asList(""String_Node_Str"" + rand,""String_Node_Str"" + configLocation));
  serverA.startServer();
  List<String> sessionA=new ArrayList<>();
  appA.sessionPut(""String_Node_Str"",""String_Node_Str"",sessionA,true);
  appA.invalidateSession(sessionA);
  serverB.startServer();
}"
34557,"/** 
 * Configure httpSessionCache pointing at a library that lacks a valid JCache provider. Access a session before and after, verifying that a session attribute added afterward is persisted, whereas a session attribute added before is not.
 */
@AllowedFFDC(value={""String_Node_Str"",""String_Node_Str""}) @Test public void testLibraryWithoutJCacheProvider() throws Exception {
  ServerConfiguration config=savedConfig.clone();
  Library libraryWithoutJCacheProvider=new Library();
  libraryWithoutJCacheProvider.setId(""String_Node_Str"");
  File libraryWithoutJCacheProvider_file=new File();
  libraryWithoutJCacheProvider_file.setName(""String_Node_Str"");
  libraryWithoutJCacheProvider.setFile(libraryWithoutJCacheProvider_file);
  config.getLibraries().add(libraryWithoutJCacheProvider);
  config.getHttpSessionCaches().get(0).setLibraryRef(""String_Node_Str"");
  server.updateServerConfiguration(config);
  server.startServer(testName.getMethodName() + ""String_Node_Str"");
  try {
    List<String> session=new ArrayList<>();
    run(""String_Node_Str"",session);
    server.setMarkToEndOfLog();
    server.updateServerConfiguration(savedConfig);
    server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
    session=new ArrayList<>();
    run(""String_Node_Str"",session);
    run(""String_Node_Str"",session);
    run(""String_Node_Str"",session);
  }
  finally {
    server.stopServer(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Configure httpSessionCache pointing at a library that lacks a valid JCache provider. Access a session before and after, verifying that a session attribute added afterward is persisted, whereas a session attribute added before is not.
 */
@AllowedFFDC(value={""String_Node_Str"",""String_Node_Str""}) @Test public void testLibraryWithoutJCacheProvider() throws Exception {
  ServerConfiguration config=savedConfig.clone();
  Library libraryWithoutJCacheProvider=new Library();
  libraryWithoutJCacheProvider.setId(""String_Node_Str"");
  File libraryWithoutJCacheProvider_file=new File();
  libraryWithoutJCacheProvider_file.setName(""String_Node_Str"");
  libraryWithoutJCacheProvider.setFile(libraryWithoutJCacheProvider_file);
  config.getLibraries().add(libraryWithoutJCacheProvider);
  config.getHttpSessionCaches().get(0).setLibraryRef(""String_Node_Str"");
  server.updateServerConfiguration(config);
  server.startServer(testName.getMethodName() + ""String_Node_Str"");
  try {
    List<String> session=new ArrayList<>();
    run(""String_Node_Str"",session);
    server.setMarkToEndOfLog();
    server.updateServerConfiguration(savedConfig);
    server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
    session=new ArrayList<>();
    run(""String_Node_Str"",session);
    run(""String_Node_Str"",session);
    run(""String_Node_Str"",session);
  }
  finally {
    server.stopServer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}"
34558,"/** 
 * Configure httpSessionCache lacking a libraryRef (or bell). Access a session before and after, verifying that a session attribute added afterward is persisted, whereas a session attribute added before is not (the OSGi service backing httpSessionCache config will be unable to activate in the absence of libraryRef).
 */
@AllowedFFDC(""String_Node_Str"") @Test public void testMissingLibraryRef() throws Exception {
  ServerConfiguration config=savedConfig.clone();
  config.getHttpSessionCaches().get(0).setLibraryRef(null);
  server.updateServerConfiguration(config);
  server.startServer(testName.getMethodName() + ""String_Node_Str"");
  assertEquals(1,server.findStringsInLogs(""String_Node_Str"").size());
  List<String> session=new ArrayList<>();
  run(""String_Node_Str"",session);
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(savedConfig);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
}","/** 
 * Configure httpSessionCache lacking a libraryRef (or bell). Access a session before and after, verifying that a session attribute added afterward is persisted, whereas a session attribute added before is not (the OSGi service backing httpSessionCache config will be unable to activate in the absence of libraryRef).
 */
@AllowedFFDC(""String_Node_Str"") @Test public void testMissingLibraryRef() throws Exception {
  try {
    LibertyServer.setValidateApps(false);
    ServerConfiguration config=savedConfig.clone();
    config.getHttpSessionCaches().get(0).setLibraryRef(null);
    server.updateServerConfiguration(config);
    server.startServer(testName.getMethodName() + ""String_Node_Str"");
    assertEquals(1,server.findStringsInLogs(""String_Node_Str"").size());
    List<String> session=new ArrayList<>();
    server.setMarkToEndOfLog();
    server.updateServerConfiguration(savedConfig);
    server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
    run(""String_Node_Str"",session);
    run(""String_Node_Str"",session);
    run(""String_Node_Str"",session);
  }
  finally {
    if (server.isStarted())     server.stopServer(""String_Node_Str"");
    LibertyServer.setValidateApps(true);
  }
}"
34559,"@AllowedFFDC(value={""String_Node_Str"",""String_Node_Str""}) @Test public void testModifyFileset() throws Exception {
  ServerConfiguration config=server.getServerConfiguration();
  com.ibm.websphere.simplicity.config.File hazelcastFile=config.getLibraries().getById(""String_Node_Str"").getNestedFile();
  String originalName=hazelcastFile.getName();
  server.startServer(testName.getMethodName() + ""String_Node_Str"");
  List<String> session=new ArrayList<>();
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  hazelcastFile.setName(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES);
  run(""String_Node_Str"",session);
  hazelcastFile.setName(originalName);
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES);
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  server.stopServer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@AllowedFFDC(value={""String_Node_Str"",""String_Node_Str""}) @Test public void testModifyFileset() throws Exception {
  ServerConfiguration config=server.getServerConfiguration();
  com.ibm.websphere.simplicity.config.File hazelcastFile=config.getLibraries().getById(""String_Node_Str"").getNestedFile();
  String originalName=hazelcastFile.getName();
  server.startServer(testName.getMethodName() + ""String_Node_Str"");
  List<String> session=new ArrayList<>();
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  hazelcastFile.setName(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES);
  run(""String_Node_Str"",session);
  hazelcastFile.setName(originalName);
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES);
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  server.stopServer(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
34560,"/** 
 * @param webRequest
 * @return
 */
private WebReply handleJaspi(Subject receivedSubject,String uriName,WebRequest webRequest,WebSecurityContext webSecurityContext) throws SecurityViolationException, IOException {
  performPrecludedAccessTests(webRequest,webSecurityContext,uriName);
  WebReply webReply=unprotectedSpecialURI(webRequest,uriName,webRequest.getHttpServletRequest().getMethod());
  if (webReply == null) {
    String authMech=webAppSecConfig.getOverrideHttpAuthenticationMechanism();
    AuthenticationResult authResult=null;
    if (authMech != null && authMech.equals(""String_Node_Str"")) {
      authResult=authenticateRequest(webRequest);
    }
    if (authResult != null && authResult.getStatus() != AuthResult.SUCCESS) {
      authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
      authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
      if (receivedSubject != null && receivedSubject.getPrincipals() != null) {
        authResult.setAuditCredValue(receivedSubject.getPrincipals().iterator().next().getName());
      }
    }
    if (authResult.getStatus() == AuthResult.RETURN) {
      String reason=authResult.getReason();
      int statusCode=webRequest.getHttpServletResponse().getStatus();
      if (reason != null && reason.contains(""String_Node_Str"")) {
        if (unprotectedResource(webRequest) == PERMIT_REPLY) {
          AuthenticationResult permitResult=new AuthenticationResult(AuthResult.SUCCESS,(Subject)null,AuditEvent.CRED_TYPE_JASPIC,null,AuditEvent.OUTCOME_SUCCESS);
          Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,Integer.valueOf(statusCode));
          Audit.audit(Audit.EventID.SECURITY_AUTHZ_01,webRequest,permitResult,uriName,Integer.valueOf(HttpServletResponse.SC_OK));
          return PERMIT_REPLY;
        }
 else         if (statusCode == HttpServletResponse.SC_OK) {
          statusCode=HttpServletResponse.SC_UNAUTHORIZED;
          webRequest.getHttpServletResponse().setStatus(statusCode);
        }
      }
      webReply=new ReturnReply(statusCode,reason);
      Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,Integer.valueOf(webReply.getStatusCode()));
      SecurityViolationException secVE=convertWebSecurityException(new WebSecurityCollaboratorException(webReply.message,webReply,webSecurityContext));
      throw secVE;
    }
 else     if (authResult.getStatus() != AuthResult.CONTINUE) {
      webReply=determineWebReply(receivedSubject,uriName,webRequest,authResult);
    }
  }
  return webReply;
}","/** 
 * @param webRequest
 * @return
 */
private WebReply handleJaspi(Subject receivedSubject,String uriName,WebRequest webRequest,WebSecurityContext webSecurityContext) throws SecurityViolationException, IOException {
  performPrecludedAccessTests(webRequest,webSecurityContext,uriName);
  WebReply webReply=unprotectedSpecialURI(webRequest,uriName,webRequest.getHttpServletRequest().getMethod());
  if (webReply == null) {
    String authMech=webAppSecConfig.getOverrideHttpAuthenticationMechanism();
    AuthenticationResult authResult=null;
    if (authMech != null && authMech.equals(""String_Node_Str"")) {
      authResult=authenticateRequest(webRequest);
    }
    if (authResult == null || authResult.getStatus() != AuthResult.SUCCESS) {
      authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
      authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
      if (receivedSubject != null && receivedSubject.getPrincipals() != null) {
        authResult.setAuditCredValue(receivedSubject.getPrincipals().iterator().next().getName());
      }
    }
    if (authResult.getStatus() == AuthResult.RETURN) {
      String reason=authResult.getReason();
      int statusCode=webRequest.getHttpServletResponse().getStatus();
      if (reason != null && reason.contains(""String_Node_Str"")) {
        if (unprotectedResource(webRequest) == PERMIT_REPLY) {
          AuthenticationResult permitResult=new AuthenticationResult(AuthResult.SUCCESS,(Subject)null,AuditEvent.CRED_TYPE_JASPIC,null,AuditEvent.OUTCOME_SUCCESS);
          Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,Integer.valueOf(statusCode));
          Audit.audit(Audit.EventID.SECURITY_AUTHZ_01,webRequest,permitResult,uriName,Integer.valueOf(HttpServletResponse.SC_OK));
          return PERMIT_REPLY;
        }
 else         if (statusCode == HttpServletResponse.SC_OK) {
          statusCode=HttpServletResponse.SC_UNAUTHORIZED;
          webRequest.getHttpServletResponse().setStatus(statusCode);
        }
      }
      webReply=new ReturnReply(statusCode,reason);
      Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,Integer.valueOf(webReply.getStatusCode()));
      SecurityViolationException secVE=convertWebSecurityException(new WebSecurityCollaboratorException(webReply.message,webReply,webSecurityContext));
      throw secVE;
    }
 else     if (authResult.getStatus() != AuthResult.CONTINUE) {
      webReply=determineWebReply(receivedSubject,uriName,webRequest,authResult);
    }
  }
  return webReply;
}"
34561,"public static void handleExtensions(KeyValuePairList extensions,String extKey,String extValue){
  extKey=LogFieldConstants.EXT_PREFIX + extKey;
  if (extKey.indexOf('_',extKey.length() - 6) != -1) {
    if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {
      try {
        extensions.addPair(extKey,Integer.parseInt(extValue));
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {
      try {
        extensions.addPair(extKey,Float.parseFloat(extValue));
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {
      if (extValue.toLowerCase().trim().equals(TRUE_BOOL)) {
        extensions.addPair(extKey,true);
      }
 else       if (extValue.toLowerCase().trim().equals(FALSE_BOOL)) {
        extensions.addPair(extKey,false);
      }
    }
 else     if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {
      try {
        extensions.addPair(extKey,Long.parseLong(extValue));
      }
 catch (      NumberFormatException e) {
      }
    }
  }
 else {
    extensions.addPair(extKey,extValue);
  }
}","public static void handleExtensions(KeyValuePairList extensions,String extKey,String extValue){
  extKey=LogFieldConstants.EXT_PREFIX + extKey;
  if (extKey.indexOf('_',4) != -1) {
    if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {
      try {
        extensions.addPair(extKey,Integer.parseInt(extValue));
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {
      try {
        extensions.addPair(extKey,Float.parseFloat(extValue));
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {
      if (extValue.toLowerCase().trim().equals(TRUE_BOOL)) {
        extensions.addPair(extKey,true);
      }
 else       if (extValue.toLowerCase().trim().equals(FALSE_BOOL)) {
        extensions.addPair(extKey,false);
      }
    }
 else     if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {
      try {
        extensions.addPair(extKey,Long.parseLong(extValue));
      }
 catch (      NumberFormatException e) {
      }
    }
  }
 else {
    extensions.addPair(extKey,extValue);
  }
}"
34562,"@Override public boolean checkTemporaryDestinationAccess(Subject authenticatedSubject,String destinationName,String operationType) throws MessagingAuthorizationException {
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,destinationName,operationType});
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  Map<String,TemporaryDestinationPermission> mq=messagingSecurityService.getTemporaryDestinationPermissions();
  roles=messagingSecurityService.getDestinationRoles(mq,destinationName,user);
  boolean result=false;
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destinationName),e);
  }
  Map<String,TemporaryDestinationPermission> tempDestinationPermissions=messagingSecurityService.getTemporaryDestinationPermissions();
  List<String> prefixList=getPrefixMatchingTemporaryDestination(tempDestinationPermissions.keySet(),destinationName);
  for (  String prefix : prefixList) {
    TemporaryDestinationPermission permission=tempDestinationPermissions.get(prefix);
    result=checkPermission(permission,operationType,userName);
    if (result)     break;
  }
  if (!result) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,destinationName});
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destinationName));
  }
  if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
    ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
  }
 else {
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}","@Override public boolean checkTemporaryDestinationAccess(Subject authenticatedSubject,String destinationName,String operationType) throws MessagingAuthorizationException {
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,destinationName,operationType});
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  Map<String,TemporaryDestinationPermission> mq=messagingSecurityService.getTemporaryDestinationPermissions();
  roles=messagingSecurityService.getDestinationRoles(mq,destinationName,user);
  boolean result=false;
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destinationName),e);
  }
  Map<String,TemporaryDestinationPermission> tempDestinationPermissions=messagingSecurityService.getTemporaryDestinationPermissions();
  List<String> prefixList=getPrefixMatchingTemporaryDestination(tempDestinationPermissions.keySet(),destinationName);
  for (  String prefix : prefixList) {
    TemporaryDestinationPermission permission=tempDestinationPermissions.get(prefix);
    result=checkPermission(permission,operationType,userName);
    if (result)     break;
  }
  if (!result) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,destinationName});
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destinationName));
  }
 else {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}"
34563,"@Override public boolean checkTopicAccess(Subject authenticatedSubject,String topicSpace,String topicName,String operationType) throws MessagingAuthorizationException {
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  String resource=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  String destinationName=topicSpace;
  resource=""String_Node_Str"";
  if (topicName != null) {
    destinationName=topicSpace + MessagingSecurityConstants.TOPIC_DELIMITER + topicName;
    resource=""String_Node_Str"";
  }
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,destinationName,operationType});
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  Map<String,TopicPermission> mq=messagingSecurityService.getTopicPermissions();
  roles=messagingSecurityService.getDestinationRoles(mq,destinationName,user);
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destinationName),e);
  }
  Map<String,TopicPermission> topicPermissions=messagingSecurityService.getTopicPermissions();
  TopicPermission permission=getTopicPermission(topicPermissions,destinationName);
  boolean result=checkPermission(permission,operationType,userName);
  if (!result) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
    SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,destinationName});
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destinationName));
  }
  if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
    ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
  }
 else {
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}","@Override public boolean checkTopicAccess(Subject authenticatedSubject,String topicSpace,String topicName,String operationType) throws MessagingAuthorizationException {
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  String resource=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  String destinationName=topicSpace;
  resource=""String_Node_Str"";
  if (topicName != null) {
    destinationName=topicSpace + MessagingSecurityConstants.TOPIC_DELIMITER + topicName;
    resource=""String_Node_Str"";
  }
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,destinationName,operationType});
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  Map<String,TopicPermission> mq=messagingSecurityService.getTopicPermissions();
  roles=messagingSecurityService.getDestinationRoles(mq,destinationName,user);
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destinationName),e);
  }
  Map<String,TopicPermission> topicPermissions=messagingSecurityService.getTopicPermissions();
  TopicPermission permission=getTopicPermission(topicPermissions,destinationName);
  boolean result=checkPermission(permission,operationType,userName);
  if (!result) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
    SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,destinationName});
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destinationName));
  }
 else {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,resource,Integer.valueOf(""String_Node_Str""));
    }
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}"
34564,"@Override public boolean checkQueueAccess(Subject authenticatedSubject,String destination,String operationType,boolean logWarning) throws MessagingAuthorizationException {
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,destination,operationType});
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  if (operationType.equalsIgnoreCase(MessagingSecurityConstants.OPERATION_TYPE_BROWSE)) {
    if (checkQueueAccess(authenticatedSubject,destination,MessagingSecurityConstants.OPERATION_TYPE_RECEIVE,false)) {
      return true;
    }
  }
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  Map<String,QueuePermission> mq=messagingSecurityService.getQueuePermissions();
  roles=messagingSecurityService.getDestinationRoles(mq,destination,user);
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destination),e);
  }
  Map<String,QueuePermission> queuePermissions=messagingSecurityService.getQueuePermissions();
  QueuePermission permission=queuePermissions.get(destination);
  boolean result=checkPermission(permission,operationType,userName);
  if (!result && logWarning) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,destination});
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destination));
  }
  if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
    ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
  }
 else {
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}","@Override public boolean checkQueueAccess(Subject authenticatedSubject,String destination,String operationType,boolean logWarning) throws MessagingAuthorizationException {
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,destination,operationType});
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  if (operationType.equalsIgnoreCase(MessagingSecurityConstants.OPERATION_TYPE_BROWSE)) {
    if (checkQueueAccess(authenticatedSubject,destination,MessagingSecurityConstants.OPERATION_TYPE_RECEIVE,false)) {
      return true;
    }
  }
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  Map<String,QueuePermission> mq=messagingSecurityService.getQueuePermissions();
  roles=messagingSecurityService.getDestinationRoles(mq,destination,user);
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destination),e);
  }
  Map<String,QueuePermission> queuePermissions=messagingSecurityService.getQueuePermissions();
  QueuePermission permission=queuePermissions.get(destination);
  boolean result=checkPermission(permission,operationType,userName);
  if (!result) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    if (logWarning) {
      SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,destination});
      throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,destination));
    }
  }
 else {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destination,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}"
34565,"@Override public boolean checkAliasAccess(Subject authenticatedSubject,String destination,String aliasDestination,int destinationType,String operationType,boolean logWarning) throws MessagingAuthorizationException {
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,aliasDestination,operationType});
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  roles=new String[]{MessagingSecurityConstants.OPERATION_TYPE_RECEIVE};
  if (operationType.equalsIgnoreCase(MessagingSecurityConstants.OPERATION_TYPE_BROWSE)) {
    if (checkAliasAccess(authenticatedSubject,destination,aliasDestination,destinationType,MessagingSecurityConstants.OPERATION_TYPE_RECEIVE,false)) {
      return true;
    }
  }
  String destinationName=destination + ""String_Node_Str"" + aliasDestination;
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,aliasDestination),e);
  }
  Permission permission=null;
  if (destinationType == MessagingSecurityConstants.DESTINATION_TYPE_QUEUE) {
    Map<String,QueuePermission> destinationPermission=messagingSecurityService.getQueuePermissions();
    permission=destinationPermission.get(destination);
  }
 else   if (destinationType == MessagingSecurityConstants.DESTINATION_TYPE_TOPICSPACE) {
    Map<String,TopicPermission> destinationPermission=messagingSecurityService.getTopicPermissions();
    permission=destinationPermission.get(destination);
  }
  boolean result=checkPermission(permission,operationType,userName);
  if (!result && logWarning) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,aliasDestination});
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,aliasDestination));
  }
  if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
    ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
  }
 else {
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}","@Override public boolean checkAliasAccess(Subject authenticatedSubject,String destination,String aliasDestination,int destinationType,String operationType,boolean logWarning) throws MessagingAuthorizationException {
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,aliasDestination,operationType});
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  roles=new String[]{MessagingSecurityConstants.OPERATION_TYPE_RECEIVE};
  if (operationType.equalsIgnoreCase(MessagingSecurityConstants.OPERATION_TYPE_BROWSE)) {
    if (checkAliasAccess(authenticatedSubject,destination,aliasDestination,destinationType,MessagingSecurityConstants.OPERATION_TYPE_RECEIVE,false)) {
      return true;
    }
  }
  String destinationName=destination + ""String_Node_Str"" + aliasDestination;
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,aliasDestination),e);
  }
  Permission permission=null;
  if (destinationType == MessagingSecurityConstants.DESTINATION_TYPE_QUEUE) {
    Map<String,QueuePermission> destinationPermission=messagingSecurityService.getQueuePermissions();
    permission=destinationPermission.get(destination);
  }
 else   if (destinationType == MessagingSecurityConstants.DESTINATION_TYPE_TOPICSPACE) {
    Map<String,TopicPermission> destinationPermission=messagingSecurityService.getTopicPermissions();
    permission=destinationPermission.get(destination);
  }
  boolean result=checkPermission(permission,operationType,userName);
  if (!result) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    if (logWarning) {
      SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,aliasDestination});
      throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,aliasDestination));
    }
  }
 else {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}"
34566,"/** 
 * Test method for   {@link com.ibm.ws.security.intfc.internal.UserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate[])}.
 */
@Test public void mapCertificate() throws Exception {
  mock.checking(new Expectations(){
{
      one(wrappedUr).mapCertificate(CERT);
      will(returnValue(NAME));
    }
  }
);
  X509Certificate[] certs=new X509Certificate[]{CERT};
  assertEquals(""String_Node_Str"",NAME,wrapper.mapCertificate(certs));
}","/** 
 * Test method for   {@link com.ibm.ws.security.intfc.internal.UserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate[])}.
 */
@Test public void mapCertificate() throws Exception {
  final X509Certificate[] certs=new X509Certificate[]{CERT};
  mock.checking(new Expectations(){
{
      one(wrappedUr).mapCertificate(certs);
      will(returnValue(NAME));
    }
  }
);
  assertEquals(""String_Node_Str"",NAME,wrapper.mapCertificate(certs));
}"
34567,"/** 
 * Test method for   {@link com.ibm.ws.security.intfc.internal.UserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate[])}.
 */
@Test(expected=CustomRegistryException.class) public void mapCertificate_RegistryException() throws Exception {
  mock.checking(new Expectations(){
{
      one(wrappedUr).mapCertificate(CERT);
      will(throwException(new com.ibm.ws.security.registry.RegistryException(""String_Node_Str"")));
    }
  }
);
  X509Certificate[] certs=new X509Certificate[]{CERT};
  wrapper.mapCertificate(certs);
}","/** 
 * Test method for   {@link com.ibm.ws.security.intfc.internal.UserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate[])}.
 */
@Test(expected=CustomRegistryException.class) public void mapCertificate_RegistryException() throws Exception {
  final X509Certificate[] certs=new X509Certificate[]{CERT};
  mock.checking(new Expectations(){
{
      one(wrappedUr).mapCertificate(certs);
      will(throwException(new com.ibm.ws.security.registry.RegistryException(""String_Node_Str"")));
    }
  }
);
  wrapper.mapCertificate(certs);
}"
34568,"/** 
 * Test method for   {@link com.ibm.ws.security.intfc.internal.UserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate[])}.
 */
@Test(expected=CertificateMapNotSupportedException.class) public void mapCertificate_CertificateMapNotSupportedException() throws Exception {
  mock.checking(new Expectations(){
{
      one(wrappedUr).mapCertificate(CERT);
      will(throwException(new com.ibm.ws.security.registry.CertificateMapNotSupportedException(""String_Node_Str"")));
    }
  }
);
  X509Certificate[] certs=new X509Certificate[]{CERT};
  wrapper.mapCertificate(certs);
}","/** 
 * Test method for   {@link com.ibm.ws.security.intfc.internal.UserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate[])}.
 */
@Test(expected=CertificateMapNotSupportedException.class) public void mapCertificate_CertificateMapNotSupportedException() throws Exception {
  final X509Certificate[] certs=new X509Certificate[]{CERT};
  mock.checking(new Expectations(){
{
      one(wrappedUr).mapCertificate(certs);
      will(throwException(new com.ibm.ws.security.registry.CertificateMapNotSupportedException(""String_Node_Str"")));
    }
  }
);
  wrapper.mapCertificate(certs);
}"
34569,"/** 
 * Test method for   {@link com.ibm.ws.security.intfc.internal.UserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate[])}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_failed() throws Exception {
  mock.checking(new Expectations(){
{
      one(wrappedUr).mapCertificate(CERT);
      will(throwException(new com.ibm.ws.security.registry.CertificateMapFailedException(""String_Node_Str"")));
    }
  }
);
  X509Certificate[] certs=new X509Certificate[]{CERT};
  wrapper.mapCertificate(certs);
}","/** 
 * Test method for   {@link com.ibm.ws.security.intfc.internal.UserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate[])}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_failed() throws Exception {
  final X509Certificate[] certs=new X509Certificate[]{CERT};
  mock.checking(new Expectations(){
{
      one(wrappedUr).mapCertificate(certs);
      will(throwException(new com.ibm.ws.security.registry.CertificateMapFailedException(""String_Node_Str"")));
    }
  }
);
  wrapper.mapCertificate(certs);
}"
34570,"@Override protected CertificateLoginModule createInitializedModule(Subject subject,Map<String,Object> sharedState) throws Exception {
  final X509Certificate[] certChain=new X509Certificate[]{cert};
  CallbackHandler callbackHandler=new CallbackHandlerDouble(certChain);
  final CertificateLoginModule module=new CertificateLoginModule();
  module.initialize(subject,callbackHandler,sharedState,null);
  mock.checking(new Expectations(){
{
      one(collectiveAuthenticationPlugin).isCollectiveCertificateChain(certChain);
      will(returnValue(false));
      one(collectiveAuthenticationPlugin).isCollectiveCACertificate(certChain);
      will(returnValue(false));
      allowing(cert).getSubjectX500Principal();
      will(returnValue(new X500Principal(""String_Node_Str"")));
      one(userRegistry).mapCertificate(cert);
      will(returnValue(USER_NAME));
      allowing(userRegistry).getRealm();
      will(returnValue(TEST_REALM));
      allowing(userRegistry).getType();
      will(returnValue(""String_Node_Str""));
      allowing(userRegistry).getUniqueUserId(USER_NAME);
      will(returnValue(USER_NAME));
      allowing(userRegistry).getUserSecurityName(USER_NAME);
      will(returnValue(USER_NAME));
      allowing(credentialsService).setCredentials(with(any(Subject.class)));
      will(new Action(){
        @Override public Object invoke(        Invocation arg0) throws Throwable {
          module.temporarySubject.getPublicCredentials().add(wsCredential);
          module.temporarySubject.getPrivateCredentials().add(ssoToken);
          return null;
        }
        @Override public void describeTo(        Description arg0){
        }
      }
);
    }
  }
);
  return module;
}","@Override protected CertificateLoginModule createInitializedModule(Subject subject,Map<String,Object> sharedState) throws Exception {
  final X509Certificate[] certChain=new X509Certificate[]{cert};
  CallbackHandler callbackHandler=new CallbackHandlerDouble(certChain);
  final CertificateLoginModule module=new CertificateLoginModule();
  module.initialize(subject,callbackHandler,sharedState,null);
  mock.checking(new Expectations(){
{
      one(collectiveAuthenticationPlugin).isCollectiveCertificateChain(certChain);
      will(returnValue(false));
      one(collectiveAuthenticationPlugin).isCollectiveCACertificate(certChain);
      will(returnValue(false));
      allowing(cert).getSubjectX500Principal();
      will(returnValue(new X500Principal(""String_Node_Str"")));
      one(userRegistry).mapCertificate(certChain);
      will(returnValue(USER_NAME));
      allowing(userRegistry).getRealm();
      will(returnValue(TEST_REALM));
      allowing(userRegistry).getType();
      will(returnValue(""String_Node_Str""));
      allowing(userRegistry).getUniqueUserId(USER_NAME);
      will(returnValue(USER_NAME));
      allowing(userRegistry).getUserSecurityName(USER_NAME);
      will(returnValue(USER_NAME));
      allowing(credentialsService).setCredentials(with(any(Subject.class)));
      will(new Action(){
        @Override public Object invoke(        Invocation arg0) throws Throwable {
          module.temporarySubject.getPublicCredentials().add(wsCredential);
          module.temporarySubject.getPrivateCredentials().add(ssoToken);
          return null;
        }
        @Override public void describeTo(        Description arg0){
        }
      }
);
    }
  }
);
  return module;
}"
34571,"/** 
 * Test method for   {@link com.ibm.ws.security.authentication.jaas.modules.modules.CertificateLoginModule#login()}.
 */
@Test public void loginFailsUnexpectedException() throws Exception {
  final X509Certificate[] certChain=new X509Certificate[]{cert};
  mock.checking(new Expectations(){
{
      one(collectiveAuthenticationPlugin).isCollectiveCertificateChain(certChain);
      will(returnValue(false));
      one(collectiveAuthenticationPlugin).isCollectiveCACertificate(certChain);
      will(returnValue(false));
      one(userRegistry).mapCertificate(cert);
      will(throwException(new RegistryException(""String_Node_Str"")));
      one(cert).getSubjectX500Principal();
      will(returnValue(new X500Principal(""String_Node_Str"")));
    }
  }
);
  CallbackHandler callbackHandler=new CallbackHandlerDouble(certChain);
  CertificateLoginModule module=new CertificateLoginModule();
  module.initialize(null,callbackHandler,null,null);
  try {
    module.login();
  }
 catch (  AuthenticationException e) {
    assertEquals(""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
}","/** 
 * Test method for   {@link com.ibm.ws.security.authentication.jaas.modules.modules.CertificateLoginModule#login()}.
 */
@Test public void loginFailsUnexpectedException() throws Exception {
  final X509Certificate[] certChain=new X509Certificate[]{cert};
  mock.checking(new Expectations(){
{
      one(collectiveAuthenticationPlugin).isCollectiveCertificateChain(certChain);
      will(returnValue(false));
      one(collectiveAuthenticationPlugin).isCollectiveCACertificate(certChain);
      will(returnValue(false));
      one(userRegistry).mapCertificate(certChain);
      will(throwException(new RegistryException(""String_Node_Str"")));
      one(cert).getSubjectX500Principal();
      will(returnValue(new X500Principal(""String_Node_Str"")));
    }
  }
);
  CallbackHandler callbackHandler=new CallbackHandlerDouble(certChain);
  CertificateLoginModule module=new CertificateLoginModule();
  module.initialize(null,callbackHandler,null,null);
  try {
    module.login();
  }
 catch (  AuthenticationException e) {
    assertEquals(""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
}"
34572,"/** 
 * Test method for   {@link com.ibm.ws.security.authentication.jaas.modules.modules.CertificateLoginModule#login()}.
 */
@Test public void loginFailsCertificateMapFailedException() throws Exception {
  final X509Certificate[] certChain=new X509Certificate[]{cert};
  mock.checking(new Expectations(){
{
      one(collectiveAuthenticationPlugin).isCollectiveCertificateChain(certChain);
      will(returnValue(false));
      one(collectiveAuthenticationPlugin).isCollectiveCACertificate(certChain);
      will(returnValue(false));
      one(userRegistry).mapCertificate(cert);
      will(throwException(new CertificateMapFailedException(""String_Node_Str"")));
      one(cert).getSubjectX500Principal();
      will(returnValue(new X500Principal(""String_Node_Str"")));
    }
  }
);
  CallbackHandler callbackHandler=new CallbackHandlerDouble(certChain);
  CertificateLoginModule module=new CertificateLoginModule();
  module.initialize(null,callbackHandler,null,null);
  try {
    module.login();
  }
 catch (  AuthenticationException e) {
    assertEquals(""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
}","/** 
 * Test method for   {@link com.ibm.ws.security.authentication.jaas.modules.modules.CertificateLoginModule#login()}.
 */
@Test public void loginFailsCertificateMapFailedException() throws Exception {
  final X509Certificate[] certChain=new X509Certificate[]{cert};
  mock.checking(new Expectations(){
{
      one(collectiveAuthenticationPlugin).isCollectiveCertificateChain(certChain);
      will(returnValue(false));
      one(collectiveAuthenticationPlugin).isCollectiveCACertificate(certChain);
      will(returnValue(false));
      one(userRegistry).mapCertificate(certChain);
      will(throwException(new CertificateMapFailedException(""String_Node_Str"")));
      one(cert).getSubjectX500Principal();
      will(returnValue(new X500Principal(""String_Node_Str"")));
    }
  }
);
  CallbackHandler callbackHandler=new CallbackHandlerDouble(certChain);
  CertificateLoginModule module=new CertificateLoginModule();
  module.initialize(null,callbackHandler,null,null);
  try {
    module.login();
  }
 catch (  AuthenticationException e) {
    assertEquals(""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
}"
34573,"@Test public void loginTrustedWithCertificateChainPasses() throws Exception {
  final String methodName=""String_Node_Str"";
  try {
    mockery.checking(new Expectations(){
{
        one(userRegistry).mapCertificate(certificateChain[0]);
        will(returnValue(CERTIFICATE_USER_NAME));
      }
    }
);
    IdentityAssertionLoginModule module=new IdentityAssertionLoginModule();
    Subject subject=new Subject();
    CallbackHandler callbackHandler=null;
    Map sharedState=createSharedState(true,null,certificateChain);
    Map options=null;
    module.initialize(subject,callbackHandler,sharedState,options);
    assertTrue(module.login());
  }
 catch (  Throwable t) {
    outputMgr.failWithThrowable(methodName,t);
  }
}","@Test public void loginTrustedWithCertificateChainPasses() throws Exception {
  final String methodName=""String_Node_Str"";
  try {
    mockery.checking(new Expectations(){
{
        one(userRegistry).mapCertificate(certificateChain);
        will(returnValue(CERTIFICATE_USER_NAME));
      }
    }
);
    IdentityAssertionLoginModule module=new IdentityAssertionLoginModule();
    Subject subject=new Subject();
    CallbackHandler callbackHandler=null;
    Map sharedState=createSharedState(true,null,certificateChain);
    Map options=null;
    module.initialize(subject,callbackHandler,sharedState,options);
    assertTrue(module.login());
  }
 catch (  Throwable t) {
    outputMgr.failWithThrowable(methodName,t);
  }
}"
34574,"/** 
 * Test method for   {@link com.ibm.ws.management.security.internal.QuickStartSecurityRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test public void mapCertificate() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"" + DEFAULT_ADMIN_USER);
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  assertEquals(DEFAULT_ADMIN_USER,reg.mapCertificate(cert));
}","/** 
 * Test method for   {@link com.ibm.ws.management.security.internal.QuickStartSecurityRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test public void mapCertificate() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"" + DEFAULT_ADMIN_USER);
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  assertEquals(DEFAULT_ADMIN_USER,reg.mapCertificate(new X509Certificate[]{cert}));
}"
34575,"/** 
 * Test method for   {@link com.ibm.ws.management.security.internal.QuickStartSecurityRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_noCN() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  reg.mapCertificate(cert);
}","/** 
 * Test method for   {@link com.ibm.ws.management.security.internal.QuickStartSecurityRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_noCN() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  reg.mapCertificate(new X509Certificate[]{cert});
}"
34576,"/** 
 * Test method for   {@link com.ibm.ws.management.security.internal.QuickStartSecurityRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_userDoesntExist() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  reg.mapCertificate(cert);
}","/** 
 * Test method for   {@link com.ibm.ws.management.security.internal.QuickStartSecurityRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_userDoesntExist() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  reg.mapCertificate(new X509Certificate[]{cert});
}"
34577,"/** 
 * Test method for   {@link com.ibm.ws.security.registry.basic.internal.BasicRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test public void mapCertificate() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  assertEquals(""String_Node_Str"",fullBasicRegistry().mapCertificate(cert));
}","/** 
 * Test method for   {@link com.ibm.ws.security.registry.basic.internal.BasicRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test public void mapCertificate() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  assertEquals(""String_Node_Str"",fullBasicRegistry().mapCertificate(new X509Certificate[]{cert}));
}"
34578,"/** 
 * Test method for   {@link com.ibm.ws.security.registry.basic.internal.BasicRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_noCN() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  fullBasicRegistry().mapCertificate(cert);
}","/** 
 * Test method for   {@link com.ibm.ws.security.registry.basic.internal.BasicRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_noCN() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  fullBasicRegistry().mapCertificate(new X509Certificate[]{cert});
}"
34579,"/** 
 * Test method for   {@link com.ibm.ws.security.registry.basic.internal.BasicRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_userDoesntExist() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  fullBasicRegistry().mapCertificate(cert);
}","/** 
 * Test method for   {@link com.ibm.ws.security.registry.basic.internal.BasicRegistry#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void mapCertificate_userDoesntExist() throws Exception {
  final X509Certificate cert=mock.mock(X509Certificate.class);
  final X500Principal principal=new X500Principal(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(cert).getSubjectX500Principal();
      will(returnValue(principal));
    }
  }
);
  fullBasicRegistry().mapCertificate(new X509Certificate[]{cert});
}"
34580,"/** 
 * Test method for   {@link com.ibm.ws.security.registry.internal.CustomUserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void testMapCertificate_CertificateMapFailedException() throws Exception {
  final com.ibm.websphere.security.CertificateMapFailedException certMapFailedException=new com.ibm.websphere.security.CertificateMapFailedException(EXPECTED_EXCEPTION_MESSAGE);
  mockery.checking(new Expectations(){
{
      one(customUserRegistry).mapCertificate(certChain);
      will(throwException(certMapFailedException));
    }
  }
);
  try {
    wrapper.mapCertificate(cert);
  }
 catch (  Exception e) {
    assertExceptionContentsAndRethrow(certMapFailedException,e);
  }
}","/** 
 * Test method for   {@link com.ibm.ws.security.registry.internal.CustomUserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapFailedException.class) public void testMapCertificate_CertificateMapFailedException() throws Exception {
  final com.ibm.websphere.security.CertificateMapFailedException certMapFailedException=new com.ibm.websphere.security.CertificateMapFailedException(EXPECTED_EXCEPTION_MESSAGE);
  mockery.checking(new Expectations(){
{
      one(customUserRegistry).mapCertificate(certChain);
      will(throwException(certMapFailedException));
    }
  }
);
  try {
    wrapper.mapCertificate(certChain);
  }
 catch (  Exception e) {
    assertExceptionContentsAndRethrow(certMapFailedException,e);
  }
}"
34581,"/** 
 * Test method for   {@link com.ibm.ws.security.registry.internal.CustomUserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapNotSupportedException.class) public void testMapCertificate_CertificateMapNotSupportedException() throws Exception {
  final com.ibm.websphere.security.CertificateMapNotSupportedException certMapNotSupportedException=new com.ibm.websphere.security.CertificateMapNotSupportedException(EXPECTED_EXCEPTION_MESSAGE);
  mockery.checking(new Expectations(){
{
      one(customUserRegistry).mapCertificate(certChain);
      will(throwException(certMapNotSupportedException));
    }
  }
);
  try {
    wrapper.mapCertificate(cert);
  }
 catch (  Exception e) {
    assertExceptionMessage(e);
    throw e;
  }
}","/** 
 * Test method for   {@link com.ibm.ws.security.registry.internal.CustomUserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=CertificateMapNotSupportedException.class) public void testMapCertificate_CertificateMapNotSupportedException() throws Exception {
  final com.ibm.websphere.security.CertificateMapNotSupportedException certMapNotSupportedException=new com.ibm.websphere.security.CertificateMapNotSupportedException(EXPECTED_EXCEPTION_MESSAGE);
  mockery.checking(new Expectations(){
{
      one(customUserRegistry).mapCertificate(certChain);
      will(throwException(certMapNotSupportedException));
    }
  }
);
  try {
    wrapper.mapCertificate(certChain);
  }
 catch (  Exception e) {
    assertExceptionMessage(e);
    throw e;
  }
}"
34582,"/** 
 * Test method for   {@link com.ibm.ws.security.registry.internal.CustomUserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test public void testMapCertificate() throws Exception {
  mockery.checking(new Expectations(){
{
      one(customUserRegistry).mapCertificate(certChain);
      will(returnValue(NAME));
    }
  }
);
  assertEquals(""String_Node_Str"",NAME,wrapper.mapCertificate(cert));
}","/** 
 * Test method for   {@link com.ibm.ws.security.registry.internal.CustomUserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test public void testMapCertificate() throws Exception {
  mockery.checking(new Expectations(){
{
      one(customUserRegistry).mapCertificate(certChain);
      will(returnValue(NAME));
    }
  }
);
  assertEquals(""String_Node_Str"",NAME,wrapper.mapCertificate(certChain));
}"
34583,"/** 
 * Test method for   {@link com.ibm.ws.security.registry.internal.CustomUserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=RegistryException.class) public void testMapCertificate_CustomRegistryException() throws Exception {
  mockery.checking(new Expectations(){
{
      one(customUserRegistry).mapCertificate(certChain);
      will(throwException(customRegistryException));
    }
  }
);
  try {
    wrapper.mapCertificate(cert);
  }
 catch (  Exception e) {
    assertExceptionContentsAndRethrow(customRegistryException,e);
  }
}","/** 
 * Test method for   {@link com.ibm.ws.security.registry.internal.CustomUserRegistryWrapper#mapCertificate(java.security.cert.X509Certificate)}.
 */
@Test(expected=RegistryException.class) public void testMapCertificate_CustomRegistryException() throws Exception {
  mockery.checking(new Expectations(){
{
      one(customUserRegistry).mapCertificate(certChain);
      will(throwException(customRegistryException));
    }
  }
);
  try {
    wrapper.mapCertificate(certChain);
  }
 catch (  Exception e) {
    assertExceptionContentsAndRethrow(customRegistryException,e);
  }
}"
34584,"public static void createJwtSSOToken(Subject subject){
  if (jwtSSOTokenProxyRef.getService() != null) {
    try {
      jwtSSOTokenProxyRef.getService().createJwtSSOToken(subject);
    }
 catch (    WSSecurityException e) {
      String msg=Tr.formatMessage(tc,""String_Node_Str"");
      Tr.error(tc,msg);
    }
  }
}","public static void createJwtSSOToken(Subject subject){
  if (jwtSSOTokenProxyRef.getService() != null) {
    try {
      jwtSSOTokenProxyRef.getService().createJwtSSOToken(subject);
    }
 catch (    WSSecurityException e) {
      String msg=Tr.formatMessage(tc,""String_Node_Str"");
      Tr.warning(tc,msg);
    }
  }
}"
34585,"/** 
 * @param subject
 * @param req
 * @param resp
 */
@Override public void addJwtSsoCookiesToResponse(Subject subject,HttpServletRequest req,HttpServletResponse resp){
  String cookieByteString=JwtSSOTokenHelper.getJwtSSOToken(subject);
  if (cookieByteString != null) {
    addJwtCookies(cookieByteString,req,resp);
    isJwtCookie=true;
  }
}","/** 
 * @param subject
 * @param req
 * @param resp
 */
@Override public void addJwtSsoCookiesToResponse(Subject subject,HttpServletRequest req,HttpServletResponse resp){
  String cookieByteString=JwtSSOTokenHelper.getJwtSSOToken(subject);
  if (cookieByteString != null) {
    String testString=getJwtSsoTokenFromCookies(req,getJwtCookieName());
    boolean cookieAlreadySent=testString != null && testString.equals(cookieByteString);
    if (!cookieAlreadySent) {
      addJwtCookies(cookieByteString,req,resp);
    }
    isJwtCookie=true;
  }
}"
34586,"@Test public void testScheduleInvalidation() throws Exception {
  int hour=ZonedDateTime.now().getHour();
  int hour1=(hour + 8) % 24;
  int hour2=(hour + 16) % 24;
  ServerConfiguration config=server.getServerConfiguration();
  HttpSessionCache httpSessionCache=config.getHttpSessionCaches().get(0);
  httpSessionCache.setScheduleInvalidationFirstHour(Integer.toString(hour1));
  httpSessionCache.setScheduleInvalidationSecondHour(Integer.toString(hour2));
  httpSessionCache.setWriteFrequency(""String_Node_Str"");
  httpSessionCache.setWriteInterval(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  ArrayList<String> session=new ArrayList<>();
  String response=FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  int start=response.indexOf(""String_Node_Str"") + 13;
  String sessionId=response.substring(start,response.indexOf(']',start));
  TimeUnit.SECONDS.sleep(35);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"" + sessionId,null);
  response=FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  start=response.indexOf(""String_Node_Str"") + 13;
  sessionId=response.substring(start,response.indexOf(']',start));
}","@Test public void testScheduleInvalidation() throws Exception {
  int hour=ZonedDateTime.now().getHour();
  int hour1=(hour + 8) % 24;
  int hour2=(hour + 16) % 24;
  ServerConfiguration config=server.getServerConfiguration();
  HttpSessionCache httpSessionCache=config.getHttpSessionCaches().get(0);
  httpSessionCache.setScheduleInvalidationFirstHour(Integer.toString(hour1));
  httpSessionCache.setScheduleInvalidationSecondHour(Integer.toString(hour2));
  httpSessionCache.setWriteFrequency(""String_Node_Str"");
  httpSessionCache.setWriteInterval(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  ArrayList<String> session=new ArrayList<>();
  String response=run(""String_Node_Str"",session);
  int start=response.indexOf(""String_Node_Str"") + 13;
  String sessionId=response.substring(start,response.indexOf(']',start));
  TimeUnit.SECONDS.sleep(35);
  run(""String_Node_Str"" + sessionId,null);
  response=run(""String_Node_Str"",session);
  start=response.indexOf(""String_Node_Str"") + 13;
  sessionId=response.substring(start,response.indexOf(']',start));
}"
34587,"/** 
 * Update the configured value of the writeContents attribute while the server is running. Confirm the configured behavior.
 */
@Test public void testWriteContents() throws Exception {
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",new ArrayList<>());
  ServerConfiguration config=server.getServerConfiguration();
  HttpSessionCache httpSessionCache=config.getHttpSessionCaches().get(0);
  httpSessionCache.setWriteContents(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",new ArrayList<>());
  httpSessionCache.setWriteContents(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",new ArrayList<>());
}","/** 
 * Update the configured value of the writeContents attribute while the server is running. Confirm the configured behavior.
 */
@Test public void testWriteContents() throws Exception {
  run(""String_Node_Str"",new ArrayList<>());
  ServerConfiguration config=server.getServerConfiguration();
  HttpSessionCache httpSessionCache=config.getHttpSessionCaches().get(0);
  httpSessionCache.setWriteContents(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  run(""String_Node_Str"",new ArrayList<>());
  httpSessionCache.setWriteContents(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  run(""String_Node_Str"",new ArrayList<>());
}"
34588,"/** 
 * Verify that application usage of a caching provider does not interfere with the sessionCache feature.
 */
@Test public void testApplicationClosesCachingProvider() throws Exception {
  ServerConfiguration config=server.getServerConfiguration();
  Application jcacheApp=new Application();
  ClassloaderElement jcacheApp_classloader=new ClassloaderElement();
  jcacheApp_classloader.getCommonLibraryRefs().add(""String_Node_Str"");
  jcacheApp.getClassloaders().add(jcacheApp_classloader);
  jcacheApp.setLocation(""String_Node_Str"");
  config.getApplications().add(jcacheApp);
  Set<String> appNames=new TreeSet<String>(APP_NAMES);
  appNames.add(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(appNames,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,""String_Node_Str"",""String_Node_Str"",null);
  List<String> session=new ArrayList<>();
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
}","/** 
 * Verify that application usage of a caching provider does not interfere with the sessionCache feature.
 */
@Test public void testApplicationClosesCachingProvider() throws Exception {
  ServerConfiguration config=server.getServerConfiguration();
  Application jcacheApp=new Application();
  ClassloaderElement jcacheApp_classloader=new ClassloaderElement();
  jcacheApp_classloader.getCommonLibraryRefs().add(""String_Node_Str"");
  jcacheApp.getClassloaders().add(jcacheApp_classloader);
  jcacheApp.setLocation(APP_JCACHE + ""String_Node_Str"");
  config.getApplications().add(jcacheApp);
  Set<String> appNames=new TreeSet<String>(APP_NAMES);
  appNames.add(APP_JCACHE);
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(appNames,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,APP_JCACHE + ""String_Node_Str"",""String_Node_Str"",null);
  List<String> session=new ArrayList<>();
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
}"
34589,"/** 
 * Update the configured value of the writeInterval attribute while the server is running.
 */
@Test public void testWriteInterval() throws Exception {
  List<String> session=new ArrayList<>();
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  ServerConfiguration config=server.getServerConfiguration();
  HttpSessionCache httpSessionCache=config.getHttpSessionCaches().get(0);
  httpSessionCache.setWriteFrequency(""String_Node_Str"");
  httpSessionCache.setWriteInterval(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  String previousValue=""String_Node_Str"";
  String newValue=null;
  for (int numAttempts=1; numAttempts < 20; numAttempts++) {
    newValue=numAttempts + ""String_Node_Str"";
    FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"" + newValue,session);
    String response=FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
    int start=response.indexOf(""String_Node_Str"") + 19;
    String cachedValue=response.substring(start,response.indexOf(']',start));
    if (!previousValue.equals(cachedValue))     break;
    previousValue=newValue;
  }
  assertFalse(""String_Node_Str"" + ""String_Node_Str"",previousValue.equals(newValue));
  String response=FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  int start=response.indexOf(""String_Node_Str"") + 13;
  String sessionId=response.substring(start,response.indexOf(']',start));
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"" + newValue + ""String_Node_Str""+ sessionId,null);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
}","/** 
 * Update the configured value of the writeInterval attribute while the server is running.
 */
@Test public void testWriteInterval() throws Exception {
  List<String> session=new ArrayList<>();
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  ServerConfiguration config=server.getServerConfiguration();
  HttpSessionCache httpSessionCache=config.getHttpSessionCaches().get(0);
  httpSessionCache.setWriteFrequency(""String_Node_Str"");
  httpSessionCache.setWriteInterval(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  String previousValue=""String_Node_Str"";
  String newValue=null;
  for (int numAttempts=1; numAttempts < 20; numAttempts++) {
    newValue=numAttempts + ""String_Node_Str"";
    run(""String_Node_Str"" + newValue,session);
    String response=run(""String_Node_Str"",session);
    int start=response.indexOf(""String_Node_Str"") + 19;
    String cachedValue=response.substring(start,response.indexOf(']',start));
    if (!previousValue.equals(cachedValue))     break;
    previousValue=newValue;
  }
  assertFalse(""String_Node_Str"" + ""String_Node_Str"",previousValue.equals(newValue));
  String response=run(""String_Node_Str"",session);
  int start=response.indexOf(""String_Node_Str"") + 13;
  String sessionId=response.substring(start,response.indexOf(']',start));
  run(""String_Node_Str"" + newValue + ""String_Node_Str""+ sessionId,null);
  run(""String_Node_Str"",session);
}"
34590,"/** 
 * Update the configured value of the writeFrequency attribute from default (END_OF_SERVLET_SERVICE) to MANUAL_UPDATE while the server is running. The session must remain valid, and must exhibit the new behavior (MANUAL_UPDATE) after the configuration change.
 */
@Test public void testWriteFrequency() throws Exception {
  List<String> session=new ArrayList<>();
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  ServerConfiguration config=server.getServerConfiguration();
  HttpSessionCache httpSessionCache=config.getHttpSessionCaches().get(0);
  httpSessionCache.setWriteFrequency(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",session);
}","/** 
 * Update the configured value of the writeFrequency attribute from default (END_OF_SERVLET_SERVICE) to MANUAL_UPDATE while the server is running. The session must remain valid, and must exhibit the new behavior (MANUAL_UPDATE) after the configuration change.
 */
@Test public void testWriteFrequency() throws Exception {
  List<String> session=new ArrayList<>();
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  ServerConfiguration config=server.getServerConfiguration();
  HttpSessionCache httpSessionCache=config.getHttpSessionCaches().get(0);
  httpSessionCache.setWriteFrequency(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
  run(""String_Node_Str"",session);
}"
34591,"@BeforeClass public static void setUp() throws Exception {
  ShrinkHelper.defaultApp(server,APP_NAME,""String_Node_Str"");
  ShrinkHelper.defaultApp(server,""String_Node_Str"",""String_Node_Str"");
  server.removeInstalledAppForValidation(""String_Node_Str"");
  String configLocation=new File(server.getUserDir() + ""String_Node_Str"").getAbsolutePath();
  server.setJvmOptions(Arrays.asList(""String_Node_Str"" + configLocation,""String_Node_Str"" + UUID.randomUUID()));
  savedConfig=server.getServerConfiguration().clone();
  server.startServer();
}","@BeforeClass public static void setUp() throws Exception {
  ShrinkHelper.defaultApp(server,APP_DEFAULT,""String_Node_Str"");
  ShrinkHelper.defaultApp(server,APP_JCACHE,""String_Node_Str"");
  server.removeInstalledAppForValidation(APP_JCACHE);
  String configLocation=new File(server.getUserDir() + ""String_Node_Str"").getAbsolutePath();
  server.setJvmOptions(Arrays.asList(""String_Node_Str"" + configLocation,""String_Node_Str"" + UUID.randomUUID()));
  savedConfig=server.getServerConfiguration().clone();
  server.startServer();
}"
34592,"/** 
 * Enable and disable monitoring for sessions while the server is running.
 */
@Test public void testMonitoring() throws Exception {
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",new ArrayList<>());
  ServerConfiguration config=server.getServerConfiguration();
  config.getFeatureManager().getFeatures().add(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",new ArrayList<>());
  Monitor monitor=new Monitor();
  monitor.setFilter(""String_Node_Str"");
  config.getMonitors().add(monitor);
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",new ArrayList<>());
  monitor.setFilter(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",new ArrayList<>());
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(savedConfig);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  FATSuite.run(server,APP_NAME + '/' + SERVLET_NAME,""String_Node_Str"",new ArrayList<>());
}","/** 
 * Enable and disable monitoring for sessions while the server is running.
 */
@Test public void testMonitoring() throws Exception {
  run(""String_Node_Str"",new ArrayList<>());
  ServerConfiguration config=server.getServerConfiguration();
  config.getFeatureManager().getFeatures().add(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  run(""String_Node_Str"",new ArrayList<>());
  Monitor monitor=new Monitor();
  monitor.setFilter(""String_Node_Str"");
  config.getMonitors().add(monitor);
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  run(""String_Node_Str"",new ArrayList<>());
  monitor.setFilter(""String_Node_Str"");
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(config);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  run(""String_Node_Str"",new ArrayList<>());
  server.setMarkToEndOfLog();
  server.updateServerConfiguration(savedConfig);
  server.waitForConfigUpdateInLogUsingMark(APP_NAMES,EMPTY_RECYCLE_LIST);
  run(""String_Node_Str"",new ArrayList<>());
}"
34593,"/** 
 * Gets a Hashtable of values from the Subject.
 * @param subject {@code null} is not supported.
 * @param properties The properties to get.
 * @return
 */
public Hashtable<String,?> getHashtableFromSubject(final Subject subject,final String[] properties){
  return AccessController.doPrivileged(new PrivilegedAction<Hashtable<String,?>>(){
    @Override public Hashtable<String,?> run(){
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      Set<Object> list_public=subject.getPublicCredentials();
      Hashtable<String,?> hashtableFromPublic=getHashtable(list_public,properties);
      if (hashtableFromPublic != null) {
        return hashtableFromPublic;
      }
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      Set<Object> list_private=subject.getPrivateCredentials();
      Hashtable<String,?> hashtableFromPrivate=getHashtable(list_private,properties);
      if (hashtableFromPrivate != null) {
        return hashtableFromPrivate;
      }
      return null;
    }
  }
);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Trivial private Hashtable<String,?> getHashtableFromSubject(Subject subject){
  Set s=subject.getPrivateCredentials(Hashtable.class);
  if (s == null || s.isEmpty()) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    return null;
  }
 else {
    return (Hashtable<String,?>)s.iterator().next();
  }
}"
34594,"protected Hashtable<String,Object> getSubjectCustomData(final Subject clientSubject){
  Hashtable<String,Object> cred=jaspiService.getCustomCredentials(clientSubject);
  if (cred == null) {
    PrivilegedAction<Hashtable<String,Object>> action=new PrivilegedAction<Hashtable<String,Object>>(){
      @Override public Hashtable<String,Object> run(){
        Hashtable<String,Object> newCred=new Hashtable<String,Object>();
        clientSubject.getPrivateCredentials().add(newCred);
        return newCred;
      }
    }
;
    cred=AccessController.doPrivileged(action);
  }
  return cred;
}","protected Hashtable<String,Object> getSubjectCustomData(@Sensitive final Subject clientSubject){
  Hashtable<String,Object> cred=jaspiService.getCustomCredentials(clientSubject);
  if (cred == null) {
    SubjectHelper subjectHelper=new SubjectHelper();
    cred=subjectHelper.createNewHashtableInSubject(clientSubject);
  }
  return cred;
}"
34595,"@Override public boolean checkAliasAccess(Subject authenticatedSubject,String destination,String aliasDestination,int destinationType,String operationType,boolean logWarning) throws MessagingAuthorizationException {
}","@Override public boolean checkAliasAccess(Subject authenticatedSubject,String destination,String aliasDestination,int destinationType,String operationType,boolean logWarning) throws MessagingAuthorizationException {
  SibTr.entry(tc,CLASS_NAME + ""String_Node_Str"",new Object[]{authenticatedSubject,aliasDestination,operationType});
  String busName=null;
  String messagingEngine=null;
  String[] roles=null;
  if (auditManager != null) {
    if (auditManager.getJMSBusName() != null)     busName=auditManager.getJMSBusName();
    if (auditManager.getJMSMessagingEngine() != null)     messagingEngine=auditManager.getJMSMessagingEngine();
  }
  roles=new String[]{MessagingSecurityConstants.OPERATION_TYPE_RECEIVE};
  if (operationType.equalsIgnoreCase(MessagingSecurityConstants.OPERATION_TYPE_BROWSE)) {
    if (checkAliasAccess(authenticatedSubject,destination,aliasDestination,destinationType,MessagingSecurityConstants.OPERATION_TYPE_RECEIVE,false)) {
      return true;
    }
  }
  String destinationName=destination + ""String_Node_Str"" + aliasDestination;
  checkIfUserIsAuthenticated(authenticatedSubject);
  String userName=null;
  String user=authenticatedSubject.getPrincipals().iterator().next().getName();
  try {
    userName=MessagingSecurityUtility.getUniqueUserName(authenticatedSubject);
  }
 catch (  MessagingSecurityException e) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,aliasDestination),e);
  }
  Permission permission=null;
  if (destinationType == MessagingSecurityConstants.DESTINATION_TYPE_QUEUE) {
    Map<String,QueuePermission> destinationPermission=messagingSecurityService.getQueuePermissions();
    permission=destinationPermission.get(destination);
  }
 else   if (destinationType == MessagingSecurityConstants.DESTINATION_TYPE_TOPICSPACE) {
    Map<String,TopicPermission> destinationPermission=messagingSecurityService.getTopicPermissions();
    permission=destinationPermission.get(destination);
  }
  boolean result=checkPermission(permission,operationType,userName);
  if (!result && logWarning) {
    if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
      ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
 else {
      Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
    }
    SibTr.debug(tc,""String_Node_Str"",new Object[]{userName,operationType,aliasDestination});
    throw new MessagingAuthorizationException(Tr.formatMessage(tc,""String_Node_Str"",userName,operationType,aliasDestination));
  }
  if (auditManager != null && auditManager.getJMSConversationMetaData() != null) {
    ConversationMetaData cmd=(ConversationMetaData)auditManager.getJMSConversationMetaData();
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,cmd.getRemoteAddress().getHostAddress(),new Integer(cmd.getRemotePort()).toString(),cmd.getChainName(),busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
  }
 else {
    Audit.audit(Audit.EventID.SECURITY_JMS_AUTHZ_01,user,null,null,null,busName,messagingEngine,destinationName,operationType,roles,""String_Node_Str"",Integer.valueOf(""String_Node_Str""));
  }
  SibTr.exit(tc,CLASS_NAME + ""String_Node_Str"",result);
  return result;
}"
34596,"@Override public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"" + this.getId() + ""String_Node_Str"");
  if (this.hostAliases != null)   for (  String hostAlias : hostAliases)   buf.append(""String_Node_Str"" + hostAlias + ""String_Node_Str"");
  if (this.allowFromEndpoint != null) {
    buf.append(""String_Node_Str"" + this.allowFromEndpoint + ""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}","@Override public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  buf.append(""String_Node_Str"" + this.getId() + ""String_Node_Str"");
  if (this.hostAliases != null)   for (  String hostAlias : hostAliases)   buf.append(""String_Node_Str"" + hostAlias + ""String_Node_Str"");
  if (this.allowFromEndpointRef != null) {
    buf.append(""String_Node_Str"" + this.allowFromEndpointRef + ""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}"
34597,"private static void configureVirtualHost(ServerConfiguration serverConfig,LibertyServletContainerFactory factory,String springBootConfigId){
  List<VirtualHost> virtualHosts=serverConfig.getVirtualHosts();
  virtualHosts.clear();
  VirtualHost virtualHost=new VirtualHost();
  virtualHost.setId(SPRING_VIRTUALHOST + springBootConfigId);
  HttpEndpoint httpEndpoint=serverConfig.getHttpEndpoints().iterator().next();
  virtualHost.setAllowFromEndpoint(httpEndpoint.getId());
  Set<String> aliases=virtualHost.getHostAliases();
  aliases.clear();
  aliases.add(""String_Node_Str"" + factory.getPort());
  virtualHosts.add(virtualHost);
}","private static void configureVirtualHost(ServerConfiguration serverConfig,LibertyServletContainerFactory factory,String springBootConfigId){
  List<VirtualHost> virtualHosts=serverConfig.getVirtualHosts();
  virtualHosts.clear();
  VirtualHost virtualHost=new VirtualHost();
  virtualHost.setId(SPRING_VIRTUALHOST + springBootConfigId);
  HttpEndpoint httpEndpoint=serverConfig.getHttpEndpoints().iterator().next();
  virtualHost.setAllowFromEndpointRef(httpEndpoint.getId());
  Set<String> aliases=virtualHost.getHostAliases();
  aliases.clear();
  aliases.add(""String_Node_Str"" + factory.getPort());
  virtualHosts.add(virtualHost);
}"
34598,"private static void configureVirtualHost(ServerConfiguration serverConfig,LibertyServletContainerFactory factory,String springBootConfigId){
  List<VirtualHost> virtualHosts=serverConfig.getVirtualHosts();
  virtualHosts.clear();
  VirtualHost virtualHost=new VirtualHost();
  virtualHost.setId(SPRING_VIRTUALHOST + springBootConfigId);
  HttpEndpoint httpEndpoint=serverConfig.getHttpEndpoints().iterator().next();
  virtualHost.setAllowFromEndpoint(httpEndpoint.getId());
  Set<String> aliases=virtualHost.getHostAliases();
  aliases.clear();
  aliases.add(""String_Node_Str"" + factory.getPort());
  virtualHosts.add(virtualHost);
}","private static void configureVirtualHost(ServerConfiguration serverConfig,LibertyServletContainerFactory factory,String springBootConfigId){
  List<VirtualHost> virtualHosts=serverConfig.getVirtualHosts();
  virtualHosts.clear();
  VirtualHost virtualHost=new VirtualHost();
  virtualHost.setId(SPRING_VIRTUALHOST + springBootConfigId);
  HttpEndpoint httpEndpoint=serverConfig.getHttpEndpoints().iterator().next();
  virtualHost.setAllowFromEndpointRef(httpEndpoint.getId());
  Set<String> aliases=virtualHost.getHostAliases();
  aliases.clear();
  aliases.add(""String_Node_Str"" + factory.getPort());
  virtualHosts.add(virtualHost);
}"
34599,"/** 
 * When the output file has reached it's maximum size, this code will rotate the current log to a backup and get ready to start logging with a new file.
 */
private void rotate(){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,getFileName() + ""String_Node_Str"");
  }
  bytesWritten=0;
  try {
    getChannel().close();
  }
 catch (  IOException ioe) {
    FFDCFilter.processException(ioe,getClass().getName() + ""String_Node_Str"",""String_Node_Str"",this);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,getFileName() + ""String_Node_Str"" + ioe);
    }
  }
  try {
    if (0 < getMaximumBackupFiles()) {
      addBackup();
    }
    setChannel(createFileOutputStream().getChannel());
  }
 catch (  Throwable t) {
    FFDCFilter.processException(t,getClass().getName() + ""String_Node_Str"",""String_Node_Str"",this);
    if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {
      Tr.event(tc,getFileName() + ""String_Node_Str"" + t);
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + getFileName());
  }
}","/** 
 * When the output file has reached it's maximum size, this code will rotate the current log to a backup and get ready to start logging with a new file.
 */
private void rotate(){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,getFileName() + ""String_Node_Str"");
  }
  bytesWritten=0;
  try {
    getChannel().close();
  }
 catch (  IOException ioe) {
    FFDCFilter.processException(ioe,getClass().getName() + ""String_Node_Str"",""String_Node_Str"",this);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,getFileName() + ""String_Node_Str"" + ioe);
    }
  }
  try {
    if (0 <= getMaximumBackupFiles()) {
      addBackup();
    }
    setChannel(createFileOutputStream().getChannel());
  }
 catch (  Throwable t) {
    FFDCFilter.processException(t,getClass().getName() + ""String_Node_Str"",""String_Node_Str"",this);
    if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {
      Tr.event(tc,getFileName() + ""String_Node_Str"" + t);
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + getFileName());
  }
}"
34600,"/** 
 * Start this worker thread accepting and handling new data.
 */
@Override public void start(){
  if (0 < getMaximumBackupFiles()) {
    this.myFormat=new SimpleDateFormat(""String_Node_Str"",Locale.US);
    int index=getFileName().lastIndexOf(""String_Node_Str"");
    if (-1 != index) {
      index+=(getFilePathName().length() - getFileName().length());
      this.fileinfo=getFilePathName().substring(0,index);
      this.extensioninfo=getFilePathName().substring(index);
    }
 else {
      this.fileinfo=getFilePathName();
      this.extensioninfo=""String_Node_Str"";
    }
    this.backups=new LinkedList<File>();
  }
  try {
    bytesWritten=myChannel.size();
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + bytesWritten);
    }
  }
 catch (  IOException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    bytesWritten=0;
  }
  super.start();
}","/** 
 * Start this worker thread accepting and handling new data.
 */
@Override public void start(){
  if (0 <= getMaximumBackupFiles()) {
    this.myFormat=new SimpleDateFormat(""String_Node_Str"",Locale.US);
    int index=getFileName().lastIndexOf(""String_Node_Str"");
    if (-1 != index) {
      index+=(getFilePathName().length() - getFileName().length());
      this.fileinfo=getFilePathName().substring(0,index);
      this.extensioninfo=getFilePathName().substring(index);
    }
 else {
      this.fileinfo=getFilePathName();
      this.extensioninfo=""String_Node_Str"";
    }
    this.backups=new LinkedList<File>();
  }
  try {
    bytesWritten=myChannel.size();
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + bytesWritten);
    }
  }
 catch (  IOException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    bytesWritten=0;
  }
  super.start();
}"
34601,"/** 
 * Move the current logfile to a backup name, taking care of any existing backup files according to the configured limit.
 */
private void addBackup(){
  String newname=this.fileinfo + this.myFormat.format(new Date(HttpDispatcher.getApproxTime())) + this.extensioninfo;
  File newFile=new File(newname);
  renameFile(getFile(),newFile);
  while (this.backups.size() >= getMaximumBackupFiles()) {
    File oldest=this.backups.removeLast();
    if (null != oldest && oldest.exists()) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,getFileName() + ""String_Node_Str"" + oldest.getName());
      }
      oldest.delete();
    }
  }
  this.backups.addFirst(newFile);
}","/** 
 * Move the current logfile to a backup name, taking care of any existing backup files according to the configured limit.
 */
private void addBackup(){
  String newname=this.fileinfo + this.myFormat.format(new Date(HttpDispatcher.getApproxTime())) + this.extensioninfo;
  File newFile=new File(newname);
  renameFile(getFile(),newFile);
  if (getMaximumBackupFiles() > 0) {
    while (this.backups.size() >= getMaximumBackupFiles()) {
      File oldest=this.backups.removeLast();
      if (null != oldest && oldest.exists()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,getFileName() + ""String_Node_Str"" + oldest.getName());
        }
        oldest.delete();
      }
    }
  }
  this.backups.addFirst(newFile);
}"
34602,"/** 
 * {@inheritDoc} 
 */
@Override public void createLogoutCookies(HttpServletRequest req,HttpServletResponse res){
  Cookie[] cookies=req.getCookies();
  java.util.ArrayList<Cookie> logoutCookieList=new java.util.ArrayList<Cookie>();
  if (cookies != null) {
    String ssoCookieName=resolveCookieName(cookies);
    for (int i=0; i < cookies.length; i++) {
      if (cookies[i].getName().equalsIgnoreCase(ssoCookieName)) {
        cookies[i].setValue(null);
        addLogoutCookieToList(req,ssoCookieName,logoutCookieList);
      }
    }
    String jwtCookieName=getJwtCookieName();
    if (jwtCookieName != null) {
      for (int i=0; i < cookies.length; i++) {
        if (isJwtCookie(jwtCookieName,cookies[i].getName())) {
          cookies[i].setValue(null);
          addLogoutCookieToList(req,cookies[i].getName(),logoutCookieList);
        }
      }
      if (config.isTrackLoggedOutSSOCookiesEnabled()) {
        LoggedOutJwtSsoCookieCache.put(getJwtSsoTokenFromCookies(req,jwtCookieName));
      }
    }
    for (    Cookie cookie : logoutCookieList) {
      res.addCookie(cookie);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void createLogoutCookies(HttpServletRequest req,HttpServletResponse res){
  Cookie[] cookies=req.getCookies();
  java.util.ArrayList<Cookie> logoutCookieList=new java.util.ArrayList<Cookie>();
  if (cookies != null) {
    String ssoCookieName=resolveCookieName(cookies);
    for (int i=0; i < cookies.length; i++) {
      if (cookies[i].getName().equalsIgnoreCase(ssoCookieName)) {
        cookies[i].setValue(null);
        addLogoutCookieToList(req,ssoCookieName,logoutCookieList);
      }
    }
    String jwtCookieName=getJwtCookieName();
    if (jwtCookieName != null) {
      if (config.isTrackLoggedOutSSOCookiesEnabled()) {
        LoggedOutJwtSsoCookieCache.put(getJwtSsoTokenFromCookies(req,jwtCookieName));
      }
      for (int i=0; i < cookies.length; i++) {
        if (isJwtCookie(jwtCookieName,cookies[i].getName())) {
          cookies[i].setValue(null);
          addLogoutCookieToList(req,cookies[i].getName(),logoutCookieList);
        }
      }
    }
    for (    Cookie cookie : logoutCookieList) {
      res.addCookie(cookie);
    }
  }
}"
34603,"void unregisterSpringConfigFactory(){
  springBootConfigReg.updateAndGet((r) -> {
    if (r != null) {
      r.unregister();
    }
    return null;
  }
);
}","@FFDCIgnore(IllegalStateException.class) void unregisterSpringConfigFactory(){
  try {
    springBootConfigReg.updateAndGet((r) -> {
      if (r != null) {
        r.unregister();
      }
      return null;
    }
);
  }
 catch (  IllegalStateException e) {
  }
}"
34604,"/** 
 * Log the user out by clearing the LTPA cookie if LTPA and SSO are enabled. Must also invalidate the http session since it contains user id and password. Finally, if the user specified an exit page with a form parameter of logoutExitPage, redirect to the specified page. This is a special hidden servlet which is always loaded by the servlet engine. Logout is achieved by having a html, jsp, or other servlet which specifies ibm_security_logout HTTP post action.
 * @param req The http request object
 * @param res The http response object.
 * @exception ServletException
 * @exception IOException
 */
private void formLogout(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  try {
    String exitPage=getValidLogoutExitPage(req);
    if (exitPage != null) {
      req.setAttribute(""String_Node_Str"",exitPage);
    }
    authenticateApi.logout(req,res,webAppSecurityConfig);
    String str=null;
    if (req.getAttribute(""String_Node_Str"") != null) {
      AuthenticationResult authResult=new AuthenticationResult(AuthResult.SUCCESS,str);
      authResult.setAuditLogoutSubject(authenticateApi.returnSubjectOnLogout());
      authResult.setAuditCredType(""String_Node_Str"");
      authResult.setAuditOutcome(AuditEvent.OUTCOME_SUCCESS);
      authResult.setTargetRealm(authResult.realm);
      Audit.audit(Audit.EventID.SECURITY_AUTHN_TERMINATE_01,req,authResult,Integer.valueOf(res.getStatus()));
      redirectLogoutExitPage(req,res);
    }
  }
 catch (  ServletException se) {
    String str=""String_Node_Str"" + se.getMessage();
    AuthenticationResult authResult=new AuthenticationResult(AuthResult.FAILURE,str);
    authResult.setAuditCredType(""String_Node_Str"");
    authResult.setAuditOutcome(AuditEvent.OUTCOME_FAILURE);
    authResult.setTargetRealm(authResult.realm);
    Audit.audit(Audit.EventID.SECURITY_AUTHN_TERMINATE_01,req,authResult,Integer.valueOf(res.getStatus()));
    throw se;
  }
catch (  IOException ie) {
    String str=""String_Node_Str"" + ie.getMessage();
    AuthenticationResult authResult=new AuthenticationResult(AuthResult.FAILURE,str);
    authResult.setAuditCredType(""String_Node_Str"");
    authResult.setAuditOutcome(AuditEvent.OUTCOME_FAILURE);
    authResult.setTargetRealm(authResult.realm);
    Audit.audit(Audit.EventID.SECURITY_AUTHN_TERMINATE_01,req,authResult,Integer.valueOf(res.getStatus()));
    throw ie;
  }
}","/** 
 * Log the user out by clearing the LTPA cookie if LTPA and SSO are enabled. Must also invalidate the http session since it contains user id and password. Finally, if the user specified an exit page with a form parameter of logoutExitPage, redirect to the specified page. This is a special hidden servlet which is always loaded by the servlet engine. Logout is achieved by having a html, jsp, or other servlet which specifies ibm_security_logout HTTP post action.
 * @param req The http request object
 * @param res The http response object.
 * @exception ServletException
 * @exception IOException
 */
private void formLogout(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  try {
    String exitPage=getValidLogoutExitPage(req);
    if (exitPage != null) {
      req.setAttribute(""String_Node_Str"",exitPage);
    }
    authenticateApi.logout(req,res,webAppSecurityConfig);
    String str=null;
    if (req.getAttribute(""String_Node_Str"") == null) {
      AuthenticationResult authResult=new AuthenticationResult(AuthResult.SUCCESS,str);
      authResult.setAuditLogoutSubject(authenticateApi.returnSubjectOnLogout());
      authResult.setAuditCredType(""String_Node_Str"");
      authResult.setAuditOutcome(AuditEvent.OUTCOME_SUCCESS);
      authResult.setTargetRealm(authResult.realm);
      Audit.audit(Audit.EventID.SECURITY_AUTHN_TERMINATE_01,req,authResult,Integer.valueOf(res.getStatus()));
      redirectLogoutExitPage(req,res);
    }
  }
 catch (  ServletException se) {
    String str=""String_Node_Str"" + se.getMessage();
    AuthenticationResult authResult=new AuthenticationResult(AuthResult.FAILURE,str);
    authResult.setAuditCredType(""String_Node_Str"");
    authResult.setAuditOutcome(AuditEvent.OUTCOME_FAILURE);
    authResult.setTargetRealm(authResult.realm);
    Audit.audit(Audit.EventID.SECURITY_AUTHN_TERMINATE_01,req,authResult,Integer.valueOf(res.getStatus()));
    throw se;
  }
catch (  IOException ie) {
    String str=""String_Node_Str"" + ie.getMessage();
    AuthenticationResult authResult=new AuthenticationResult(AuthResult.FAILURE,str);
    authResult.setAuditCredType(""String_Node_Str"");
    authResult.setAuditOutcome(AuditEvent.OUTCOME_FAILURE);
    authResult.setTargetRealm(authResult.realm);
    Audit.audit(Audit.EventID.SECURITY_AUTHN_TERMINATE_01,req,authResult,Integer.valueOf(res.getStatus()));
    throw ie;
  }
}"
34605,"private BasicHttpAuthenticationMechanismTest withNewAuthenticate(Credential cred){
  setNewAuthenticateExpectations().withAuthParamsExpectations(ap).withCredentialExpectations(cred);
  withJaspicSessionEnabled(false);
  return this;
}","private BasicHttpAuthenticationMechanismTest withNewAuthenticate(Credential cred){
  setHttpMessageContextExpectations(true).setNewAuthenticateExpectations().withAuthParamsExpectations(ap).withCredentialExpectations(cred);
  withJaspicSessionEnabled(false);
  return this;
}"
34606,"@Test public void testValidateRequestRegistersJaspicSession() throws Exception {
  setHttpMessageContextExpectations(true).withAuthorizationHeader(authzHeader).withAuthenticationRequest(false);
  withIdentityStoreHandlerResult(validResult);
  withJaspicSessionEnabled(true);
  withoutJaspicSessionPrincipal();
  setModulePropertiesProvider(realmName);
  assertValidateRequestSUCCESS(REGISTERS_NEW_JASPIC_SESSION);
}","@Test public void testValidateRequestRegistersJaspicSession() throws Exception {
  setHttpMessageContextExpectations(true).withAuthParamsExpectations(null).withAuthorizationHeader(authzHeader).withAuthenticationRequest(false);
  withIdentityStoreHandlerResult(validResult);
  withJaspicSessionEnabled(true);
  withoutJaspicSessionPrincipal();
  setModulePropertiesProvider(realmName);
  assertValidateRequestSUCCESS(REGISTERS_NEW_JASPIC_SESSION);
}"
34607,"private BasicHttpAuthenticationMechanismTest setNewAuthenticateExpectations(){
  final MessageInfo messageInfo=createMessageInfo(true);
  mockery.checking(new Expectations(){
{
      one(httpMessageContext).getClientSubject();
      will(returnValue(clientSubject));
      never(httpMessageContext).getRequest();
      never(httpMessageContext).getResponse();
      allowing(httpMessageContext).getMessageInfo();
      will(returnValue(messageInfo));
    }
  }
);
  return this;
}","private BasicHttpAuthenticationMechanismTest setNewAuthenticateExpectations(){
  mockery.checking(new Expectations(){
{
      never(httpMessageContext).getResponse();
    }
  }
);
  return this;
}"
34608,"private CustomFormAuthenticationMechanismTest withMessageContext(final AuthenticationParameters ap) throws Exception {
  mockery.checking(new Expectations(){
{
      allowing(hmc).getClientSubject();
      will(returnValue(cs));
      allowing(hmc).getAuthParameters();
      will(returnValue(ap));
    }
  }
);
  return this;
}","private CustomFormAuthenticationMechanismTest withMessageContext(final AuthenticationParameters ap) throws Exception {
  mockery.checking(new Expectations(){
{
      allowing(hmc).getClientSubject();
      will(returnValue(cs));
      allowing(hmc).getAuthParameters();
      will(returnValue(ap));
      allowing(hmc).getRequest();
      will(returnValue(request));
    }
  }
);
  return this;
}"
34609,"@Test public void testValidateRequestRegistersJaspicSession() throws Exception {
  withMessageContext(ap).withMessageInfo();
  withUsernamePassword(USER1,PASSWORD1).withIDSBeanInstance(ids,false,false).withSetStatusToResponse(HttpServletResponse.SC_OK);
  withJaspicSessionEnabled(true);
  withoutJaspicSessionPrincipal();
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
  assertRegisterSessionProperty(true);
}","@Test public void testValidateRequestRegistersJaspicSession() throws Exception {
  withMessageContext(ap).withMessageInfo().withGetResponse();
  withUsernamePassword(USER1,PASSWORD1).withIsNewAuthentication(false);
  withIDSBeanInstance(ids,false,false).withSetStatusToResponse(HttpServletResponse.SC_OK);
  withJaspicSessionEnabled(true);
  withoutJaspicSessionPrincipal();
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
  assertRegisterSessionProperty(true);
}"
34610,"@Test public void testValidateRequestNewAuthenticateUsernamePasswordCredSuccess() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withNewAuthenticate(upCred).withMessageInfo().withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish);
  withJaspicSessionEnabled(false);
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
}","@Test public void testValidateRequestNewAuthenticateUsernamePasswordCredSuccess() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withMessageContext(ap).withNewAuthenticate(upCred).withMessageInfo();
  withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish);
  withJaspicSessionEnabled(false);
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
}"
34611,"private CustomFormAuthenticationMechanismTest setNewAuthenticateExpectations(){
  mockery.checking(new Expectations(){
{
      one(hmc).getClientSubject();
      will(returnValue(cs));
      never(hmc).getRequest();
      never(hmc).getResponse();
    }
  }
);
  return this;
}","private CustomFormAuthenticationMechanismTest setNewAuthenticateExpectations(){
  mockery.checking(new Expectations(){
{
      never(hmc).getResponse();
    }
  }
);
  return this;
}"
34612,"private CustomFormAuthenticationMechanismTest withAuthParamsExpectations(final AuthenticationParameters ap){
  mockery.checking(new Expectations(){
{
      one(hmc).getAuthParameters();
      will(returnValue(ap));
      one(ap).isNewAuthentication();
      will(returnValue(true));
    }
  }
);
  return this;
}","private CustomFormAuthenticationMechanismTest withAuthParamsExpectations(final AuthenticationParameters ap){
  mockery.checking(new Expectations(){
{
      one(ap).isNewAuthentication();
      will(returnValue(true));
    }
  }
);
  return this;
}"
34613,"@Test public void testValidateRequestNewAuthenticateInvalidCredentialFailure() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withNewAuthenticate(coCred).withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish);
  withJaspicSessionEnabled(false);
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SEND_FAILURE,status);
}","@Test public void testValidateRequestNewAuthenticateInvalidCredentialFailure() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withMessageContext(ap).withNewAuthenticate(coCred);
  withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish);
  withJaspicSessionEnabled(false);
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SEND_FAILURE,status);
}"
34614,"@Test public void testValidateRequestNewAuthenticateInvalidUsernamePasswordCredFailure() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withNewAuthenticate(invalidUpCred).withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish);
  withJaspicSessionEnabled(false);
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SEND_FAILURE,status);
}","@Test public void testValidateRequestNewAuthenticateInvalidUsernamePasswordCredFailure() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withMessageContext(ap).withNewAuthenticate(invalidUpCred);
  withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish);
  withJaspicSessionEnabled(false);
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SEND_FAILURE,status);
}"
34615,"@SuppressWarnings(""String_Node_Str"") @Test public void testValidateRequestInvalidCredential() throws Exception {
  CallerOnlyCredential coc=new CallerOnlyCredential(USER1);
  withMessageContext(ap).withIsNewAuthentication(false).withGetResponse().withHandler(ch);
  withCredential(coc).withIDSBeanInstance(null,false,true);
  withJaspicSessionEnabled(false);
  try {
    AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
    fail(""String_Node_Str"");
  }
 catch (  AuthenticationException e) {
    assertTrue(""String_Node_Str"",outputMgr.checkForStandardErr(""String_Node_Str""));
    assertTrue(""String_Node_Str"",e.getMessage().contains(""String_Node_Str""));
  }
}","@SuppressWarnings(""String_Node_Str"") @Test public void testValidateRequestInvalidCredential() throws Exception {
  CallerOnlyCredential coc=new CallerOnlyCredential(USER1);
  withMessageContext(ap).withIsNewAuthentication(false).withGetResponse().withHandler(ch);
  withCredential(coc).withIDSBeanInstance(null,false,true);
  withJaspicSessionEnabled(false);
  try {
    cfam.validateRequest(request,res,hmc);
    fail(""String_Node_Str"");
  }
 catch (  AuthenticationException e) {
    assertTrue(""String_Node_Str"",outputMgr.checkForStandardErr(""String_Node_Str""));
    assertTrue(""String_Node_Str"",e.getMessage().contains(""String_Node_Str""));
  }
}"
34616,"@Test public void testValidateRequestValidIdAndPWNoIdentityStoreHandlerCallbackHandlerException() throws Exception {
  final String msg=""String_Node_Str"";
  IOException ex=new IOException(msg);
  withMessageContext(ap).withIsNewAuthentication(false).withGetResponse().withHandler(ch);
  withUsernamePassword(USER1,PASSWORD1).withIDSBeanInstance(null,true,false).withCallbackHandlerException(ex);
  withJaspicSessionEnabled(false);
  try {
    AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
    fail(""String_Node_Str"");
  }
 catch (  AuthenticationException e) {
    assertTrue(""String_Node_Str"",outputMgr.checkForStandardOut(""String_Node_Str""));
    assertTrue(""String_Node_Str"",e.getMessage().contains(msg));
  }
}","@Test public void testValidateRequestValidIdAndPWNoIdentityStoreHandlerCallbackHandlerException() throws Exception {
  final String msg=""String_Node_Str"";
  IOException ex=new IOException(msg);
  withMessageContext(ap).withIsNewAuthentication(false).withGetResponse().withHandler(ch);
  withUsernamePassword(USER1,PASSWORD1).withIDSBeanInstance(null,true,false).withCallbackHandlerException(ex);
  withJaspicSessionEnabled(false);
  try {
    cfam.validateRequest(request,res,hmc);
    fail(""String_Node_Str"");
  }
 catch (  AuthenticationException e) {
    assertTrue(""String_Node_Str"",outputMgr.checkForStandardOut(""String_Node_Str""));
    assertTrue(""String_Node_Str"",e.getMessage().contains(msg));
  }
}"
34617,"@Test public void testValidateRequestWithJaspicSessionPrincipal() throws Exception {
  withMessageContext(ap).withMessageInfo().withSetStatusToResponse(HttpServletResponse.SC_OK);
  withJaspicSessionEnabled(true);
  withJaspicSessionPrincipal();
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
  assertRegisterSessionProperty(false);
}","@Test public void testValidateRequestWithJaspicSessionPrincipal() throws Exception {
  withMessageContext(ap).withMessageInfo().withGetResponse().withSetStatusToResponse(HttpServletResponse.SC_OK);
  withJaspicSessionEnabled(true);
  withJaspicSessionPrincipal();
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
  assertRegisterSessionProperty(false);
}"
34618,"@Test public void testValidateRequestNewAuthenticateBasicAuthCredSuccess() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withNewAuthenticate(baCred).withMessageInfo().withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish);
  withJaspicSessionEnabled(false);
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
}","@Test public void testValidateRequestNewAuthenticateBasicAuthCredSuccess() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withMessageContext(ap).withNewAuthenticate(baCred).withMessageInfo();
  withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish);
  withJaspicSessionEnabled(false);
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
}"
34619,"private FormAuthenticationMechanismTest withMessageContext() throws Exception {
  mockery.checking(new Expectations(){
{
      allowing(hmc).getClientSubject();
      will(returnValue(cs));
      one(hmc).getAuthParameters();
      will(returnValue(null));
      allowing(hmc).getRequest();
      will(returnValue(request));
      allowing(hmc).getResponse();
      will(returnValue(res));
    }
  }
);
  return this;
}","private FormAuthenticationMechanismTest withMessageContext() throws Exception {
  mockery.checking(new Expectations(){
{
      allowing(hmc).getClientSubject();
      will(returnValue(cs));
      allowing(hmc).getRequest();
      will(returnValue(request));
      allowing(hmc).getResponse();
      will(returnValue(res));
    }
  }
);
  return this;
}"
34620,"private FormAuthenticationMechanismTest withNewAuthenticate(Credential cred){
  setNewAuthenticateExpectations().withAuthParamsExpectations(ap).withCredentialExpectations(cred);
  return this;
}","private FormAuthenticationMechanismTest withNewAuthenticate(Credential cred) throws Exception {
  withMessageContext().setNewAuthenticateExpectations().withAuthParamsExpectations(ap).withCredentialExpectations(cred);
  withJaspicSessionEnabled(false);
  return this;
}"
34621,"private FormAuthenticationMechanismTest withAuthenticationRequest(final boolean value) throws Exception {
  mockery.checking(new Expectations(){
{
      one(hmc).isAuthenticationRequest();
      will(returnValue(value));
    }
  }
);
  return this;
}","private FormAuthenticationMechanismTest withAuthenticationRequest(final boolean value) throws Exception {
  mockery.checking(new Expectations(){
{
      one(hmc).isAuthenticationRequest();
      will(returnValue(value));
    }
  }
);
  if (value == false) {
    withAuthParamsExpectations(null);
  }
 else {
    withAuthParamsExpectations(ap).withCredentialExpectations(null);
  }
  return this;
}"
34622,"private FormAuthenticationMechanismTest setNewAuthenticateExpectations(){
  mockery.checking(new Expectations(){
{
      one(hmc).getClientSubject();
      will(returnValue(cs));
      never(hmc).getRequest();
      never(hmc).getResponse();
    }
  }
);
  return this;
}","private FormAuthenticationMechanismTest setNewAuthenticateExpectations(){
  mockery.checking(new Expectations(){
{
      never(hmc).getResponse();
    }
  }
);
  return this;
}"
34623,"protected ModulePropertiesProvider getModulePropertiesProvider(){
  Instance<ModulePropertiesProvider> modulePropertiesProivderInstance=getCDI().select(ModulePropertiesProvider.class);
  if (modulePropertiesProivderInstance != null) {
    return modulePropertiesProivderInstance.get();
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") protected ModulePropertiesProvider getModulePropertiesProvider(){
  Instance<ModulePropertiesProvider> modulePropertiesProivderInstance=getCDI().select(ModulePropertiesProvider.class);
  if (modulePropertiesProivderInstance != null) {
    return modulePropertiesProivderInstance.get();
  }
  return null;
}"
34624,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private AuthenticationStatus handleAuthorizationHeader(@Sensitive String authorizationHeader,Subject clientSubject,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=AuthenticationStatus.SEND_FAILURE;
  int rspStatus=HttpServletResponse.SC_FORBIDDEN;
  if (authorizationHeader.startsWith(""String_Node_Str"")) {
    String encodedHeader=authorizationHeader.substring(6);
    String basicAuthHeader=decodeCookieString(encodedHeader);
    if (isAuthorizationHeaderValid(basicAuthHeader)) {
      BasicAuthenticationCredential basicAuthCredential=new BasicAuthenticationCredential(encodedHeader);
      status=utils.validateUserAndPassword(getCDI(),realmName,clientSubject,basicAuthCredential,httpMessageContext);
      if (status == AuthenticationStatus.SUCCESS) {
        Map messageInfoMap=httpMessageContext.getMessageInfo().getMap();
        messageInfoMap.put(""String_Node_Str"",""String_Node_Str"");
        if (isJaspicSessionForMechanismsEnabled(httpMessageContext)) {
          messageInfoMap.put(""String_Node_Str"",Boolean.TRUE.toString());
        }
        rspStatus=HttpServletResponse.SC_OK;
      }
 else       if (status == AuthenticationStatus.NOT_DONE) {
        rspStatus=HttpServletResponse.SC_OK;
      }
    }
  }
  httpMessageContext.getResponse().setStatus(rspStatus);
  return status;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private AuthenticationStatus handleAuthorizationHeader(@Sensitive String authorizationHeader,Subject clientSubject,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=AuthenticationStatus.SEND_FAILURE;
  int rspStatus=HttpServletResponse.SC_FORBIDDEN;
  if (authorizationHeader.startsWith(""String_Node_Str"")) {
    String encodedHeader=authorizationHeader.substring(6);
    String basicAuthHeader=decodeCookieString(encodedHeader);
    if (isAuthorizationHeaderValid(basicAuthHeader)) {
      BasicAuthenticationCredential basicAuthCredential=new BasicAuthenticationCredential(encodedHeader);
      status=utils.validateUserAndPassword(getCDI(),realmName,clientSubject,basicAuthCredential,httpMessageContext);
      if (status == AuthenticationStatus.SUCCESS) {
        Map messageInfoMap=httpMessageContext.getMessageInfo().getMap();
        messageInfoMap.put(""String_Node_Str"",""String_Node_Str"");
        if (isJaspicSessionForMechanismsEnabled(httpMessageContext)) {
          messageInfoMap.put(""String_Node_Str"",Boolean.TRUE.toString());
          setCacheKey(clientSubject);
        }
        rspStatus=HttpServletResponse.SC_OK;
      }
 else       if (status == AuthenticationStatus.NOT_DONE) {
        rspStatus=HttpServletResponse.SC_OK;
      }
    }
  }
  httpMessageContext.getResponse().setStatus(rspStatus);
  return status;
}"
34625,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private AuthenticationStatus handleFormLogin(@Sensitive Credential credential,HttpServletResponse rsp,Subject clientSubject,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=utils.handleAuthenticate(getCDI(),JavaEESecConstants.DEFAULT_REALM,credential,clientSubject,httpMessageContext);
  int rspStatus;
  if (status == AuthenticationStatus.SUCCESS) {
    Map messageInfoMap=httpMessageContext.getMessageInfo().getMap();
    messageInfoMap.put(""String_Node_Str"",""String_Node_Str"");
    if (isJaspicSessionForMechanismsEnabled(httpMessageContext)) {
      messageInfoMap.put(""String_Node_Str"",Boolean.TRUE.toString());
    }
    rspStatus=HttpServletResponse.SC_OK;
  }
 else   if (status == AuthenticationStatus.NOT_DONE) {
    rspStatus=HttpServletResponse.SC_OK;
  }
 else {
    rspStatus=HttpServletResponse.SC_FORBIDDEN;
  }
  if (rsp != null) {
    rsp.setStatus(rspStatus);
  }
  return status;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private AuthenticationStatus handleFormLogin(@Sensitive Credential credential,HttpServletResponse rsp,Subject clientSubject,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=utils.handleAuthenticate(getCDI(),JavaEESecConstants.DEFAULT_REALM,credential,clientSubject,httpMessageContext);
  int rspStatus;
  if (status == AuthenticationStatus.SUCCESS) {
    Map messageInfoMap=httpMessageContext.getMessageInfo().getMap();
    messageInfoMap.put(""String_Node_Str"",""String_Node_Str"");
    if (isJaspicSessionForMechanismsEnabled(httpMessageContext)) {
      messageInfoMap.put(""String_Node_Str"",Boolean.TRUE.toString());
      setCacheKey(clientSubject);
    }
    rspStatus=HttpServletResponse.SC_OK;
  }
 else   if (status == AuthenticationStatus.NOT_DONE) {
    rspStatus=HttpServletResponse.SC_OK;
  }
 else {
    rspStatus=HttpServletResponse.SC_FORBIDDEN;
  }
  if (rsp != null) {
    rsp.setStatus(rspStatus);
  }
  return status;
}"
34626,"/** 
 * note that both username and password should not be null.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private AuthenticationStatus handleFormLogin(String username,@Sensitive String password,HttpServletResponse rsp,Subject clientSubject,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=AuthenticationStatus.SEND_FAILURE;
  int rspStatus=HttpServletResponse.SC_FORBIDDEN;
  UsernamePasswordCredential credential=new UsernamePasswordCredential(username,password);
  status=utils.validateUserAndPassword(getCDI(),JavaEESecConstants.DEFAULT_REALM,clientSubject,credential,httpMessageContext);
  if (status == AuthenticationStatus.SUCCESS) {
    Map messageInfoMap=httpMessageContext.getMessageInfo().getMap();
    messageInfoMap.put(""String_Node_Str"",""String_Node_Str"");
    if (isJaspicSessionForMechanismsEnabled(httpMessageContext)) {
      messageInfoMap.put(""String_Node_Str"",Boolean.TRUE.toString());
    }
    rspStatus=HttpServletResponse.SC_OK;
  }
 else   if (status == AuthenticationStatus.NOT_DONE) {
    rspStatus=HttpServletResponse.SC_OK;
  }
 else {
  }
  rsp.setStatus(rspStatus);
  return status;
}","/** 
 * note that both username and password should not be null.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private AuthenticationStatus handleFormLogin(String username,@Sensitive String password,HttpServletResponse rsp,Subject clientSubject,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=AuthenticationStatus.SEND_FAILURE;
  int rspStatus=HttpServletResponse.SC_FORBIDDEN;
  UsernamePasswordCredential credential=new UsernamePasswordCredential(username,password);
  status=utils.validateUserAndPassword(getCDI(),JavaEESecConstants.DEFAULT_REALM,clientSubject,credential,httpMessageContext);
  if (status == AuthenticationStatus.SUCCESS) {
    Map messageInfoMap=httpMessageContext.getMessageInfo().getMap();
    messageInfoMap.put(""String_Node_Str"",""String_Node_Str"");
    if (isJaspicSessionForMechanismsEnabled(httpMessageContext)) {
      messageInfoMap.put(""String_Node_Str"",Boolean.TRUE.toString());
      setCacheKey(clientSubject);
    }
    rspStatus=HttpServletResponse.SC_OK;
  }
 else   if (status == AuthenticationStatus.NOT_DONE) {
    rspStatus=HttpServletResponse.SC_OK;
  }
 else {
  }
  rsp.setStatus(rspStatus);
  return status;
}"
34627,"protected AuthenticationStatus validateUserAndPassword(CDI cdi,String realmName,Subject clientSubject,@Sensitive UsernamePasswordCredential credential,HttpMessageContext httpMessageContext) throws AuthenticationException {
  return validateCredential(cdi,realmName,clientSubject,credential,httpMessageContext);
}","@SuppressWarnings(""String_Node_Str"") protected AuthenticationStatus validateUserAndPassword(CDI cdi,String realmName,Subject clientSubject,@Sensitive UsernamePasswordCredential credential,HttpMessageContext httpMessageContext) throws AuthenticationException {
  return validateCredential(cdi,realmName,clientSubject,credential,httpMessageContext);
}"
34628,"@SuppressWarnings(""String_Node_Str"") public IdentityStoreHandler getIdentityStoreHandler(CDI cdi){
  IdentityStoreHandler identityStoreHandler=null;
  Instance<IdentityStoreHandler> storeHandlerInstance=cdi.select(IdentityStoreHandler.class);
  if (storeHandlerInstance.isUnsatisfied() == false && storeHandlerInstance.isAmbiguous() == false) {
    identityStoreHandler=storeHandlerInstance.get();
  }
  if (identityStoreHandler == null && cdi.getBeanManager().equals(CDIHelper.getBeanManager()) == false) {
    identityStoreHandler=(IdentityStoreHandler)CDIHelper.getBeanFromCurrentModule(IdentityStoreHandler.class);
  }
  return identityStoreHandler;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public IdentityStoreHandler getIdentityStoreHandler(CDI cdi){
  IdentityStoreHandler identityStoreHandler=null;
  Instance<IdentityStoreHandler> storeHandlerInstance=cdi.select(IdentityStoreHandler.class);
  if (storeHandlerInstance.isUnsatisfied() == false && storeHandlerInstance.isAmbiguous() == false) {
    identityStoreHandler=storeHandlerInstance.get();
  }
  if (identityStoreHandler == null && cdi.getBeanManager().equals(CDIHelper.getBeanManager()) == false) {
    identityStoreHandler=(IdentityStoreHandler)CDIHelper.getBeanFromCurrentModule(IdentityStoreHandler.class);
  }
  return identityStoreHandler;
}"
34629,"private void setLoginHashtable(String realmName,Subject clientSubject,CredentialValidationResult result){
  Hashtable<String,Object> subjectHashtable=getSubjectHashtable(clientSubject);
  String callerPrincipalName=result.getCallerPrincipal().getName();
  String callerUniqueId=result.getCallerUniqueId();
  String realm=result.getIdentityStoreId();
  realm=realm != null ? realm : realmName;
  String uniqueId=callerUniqueId != null ? callerUniqueId : callerPrincipalName;
  setCommonAttributes(subjectHashtable,realm,callerPrincipalName);
  setUniqueIdAndCacheKey(subjectHashtable,realm,uniqueId);
  setGroups(subjectHashtable,result.getCallerGroups());
}","private void setLoginHashtable(String realmName,Subject clientSubject,CredentialValidationResult result){
  Hashtable<String,Object> subjectHashtable=getSubjectHashtable(clientSubject);
  String callerPrincipalName=result.getCallerPrincipal().getName();
  String callerUniqueId=result.getCallerUniqueId();
  String realm=result.getIdentityStoreId();
  realm=realm != null ? realm : realmName;
  String uniqueId=callerUniqueId != null ? callerUniqueId : callerPrincipalName;
  setCommonAttributes(subjectHashtable,realm,callerPrincipalName);
  setUniqueId(subjectHashtable,realm,uniqueId);
  setGroups(subjectHashtable,result.getCallerGroups());
}"
34630,"@SuppressWarnings(""String_Node_Str"") public boolean isIdentityStoreAvailable(CDI cdi){
  Instance<IdentityStore> identityStoreInstances=cdi.select(IdentityStore.class);
  if (identityStoreInstances != null && !identityStoreInstances.isUnsatisfied() && !identityStoreInstances.isAmbiguous()) {
    return true;
  }
  if (cdi.getBeanManager().equals(CDIHelper.getBeanManager()) == false) {
    if (!CDIHelper.getBeansFromCurrentModule(IdentityStore.class).isEmpty()) {
      return true;
    }
  }
  return false;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public boolean isIdentityStoreAvailable(CDI cdi){
  Instance<IdentityStore> identityStoreInstances=cdi.select(IdentityStore.class);
  if (identityStoreInstances != null && !identityStoreInstances.isUnsatisfied() && !identityStoreInstances.isAmbiguous()) {
    return true;
  }
  if (cdi.getBeanManager().equals(CDIHelper.getBeanManager()) == false) {
    if (!CDIHelper.getBeansFromCurrentModule(IdentityStore.class).isEmpty()) {
      return true;
    }
  }
  return false;
}"
34631,"protected AuthenticationStatus validateCredential(CDI cdi,String realmName,Subject clientSubject,@Sensitive Credential credential,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=AuthenticationStatus.SEND_FAILURE;
  if (isIdentityStoreAvailable(cdi)) {
    IdentityStoreHandler identityStoreHandler=getIdentityStoreHandler(cdi);
    if (identityStoreHandler != null) {
      status=validateWithIdentityStore(realmName,clientSubject,credential,identityStoreHandler);
    }
 else {
      if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      throw new AuthenticationException(""String_Node_Str"");
    }
  }
 else {
    if (!logNoIDWarning) {
      Tr.warning(tc,""String_Node_Str"");
      logNoIDWarning=true;
    }
    if (isRegistryAvailable()) {
      status=validateWithUserRegistry(clientSubject,credential,httpMessageContext.getHandler());
    }
 else {
      status=AuthenticationStatus.NOT_DONE;
    }
  }
  return status;
}","@SuppressWarnings(""String_Node_Str"") protected AuthenticationStatus validateCredential(CDI cdi,String realmName,Subject clientSubject,@Sensitive Credential credential,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=AuthenticationStatus.SEND_FAILURE;
  if (isIdentityStoreAvailable(cdi)) {
    IdentityStoreHandler identityStoreHandler=getIdentityStoreHandler(cdi);
    if (identityStoreHandler != null) {
      status=validateWithIdentityStore(realmName,clientSubject,credential,identityStoreHandler);
    }
 else {
      if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      throw new AuthenticationException(""String_Node_Str"");
    }
  }
 else {
    if (!logNoIDWarning) {
      Tr.warning(tc,""String_Node_Str"");
      logNoIDWarning=true;
    }
    if (isRegistryAvailable()) {
      status=validateWithUserRegistry(clientSubject,credential,httpMessageContext.getHandler());
    }
 else {
      status=AuthenticationStatus.NOT_DONE;
    }
  }
  return status;
}"
34632,"protected AuthenticationStatus handleAuthenticate(CDI cdi,String realmName,@Sensitive Credential credential,Subject clientSubject,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=AuthenticationStatus.SEND_FAILURE;
  status=validateCredential(cdi,realmName,clientSubject,credential,httpMessageContext);
  if (status == AuthenticationStatus.SUCCESS) {
    httpMessageContext.getMessageInfo().getMap().put(""String_Node_Str"",""String_Node_Str"");
  }
  return status;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected AuthenticationStatus handleAuthenticate(CDI cdi,String realmName,@Sensitive Credential credential,Subject clientSubject,HttpMessageContext httpMessageContext) throws AuthenticationException {
  AuthenticationStatus status=AuthenticationStatus.SEND_FAILURE;
  status=validateCredential(cdi,realmName,clientSubject,credential,httpMessageContext);
  if (status == AuthenticationStatus.SUCCESS) {
    httpMessageContext.getMessageInfo().getMap().put(""String_Node_Str"",""String_Node_Str"");
  }
  return status;
}"
34633,"private Hashtable<String,Object> getSubjectExistingHashtable(final Subject clientSubject){
  if (clientSubject == null) {
    return null;
  }
  PrivilegedAction<Hashtable<String,Object>> action=new PrivilegedAction<Hashtable<String,Object>>(){
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Hashtable<String,Object> run(){
      Set hashtables=clientSubject.getPrivateCredentials(Hashtable.class);
      if (hashtables == null || hashtables.isEmpty()) {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        return null;
      }
 else {
        Hashtable hashtable=(Hashtable)hashtables.iterator().next();
        return hashtable;
      }
    }
  }
;
  Hashtable<String,Object> cred=AccessController.doPrivileged(action);
  return cred;
}","public Hashtable<String,Object> getSubjectExistingHashtable(final Subject clientSubject){
  if (clientSubject == null) {
    return null;
  }
  PrivilegedAction<Hashtable<String,Object>> action=new PrivilegedAction<Hashtable<String,Object>>(){
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Hashtable<String,Object> run(){
      Set hashtables=clientSubject.getPrivateCredentials(Hashtable.class);
      if (hashtables == null || hashtables.isEmpty()) {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        return null;
      }
 else {
        Hashtable hashtable=(Hashtable)hashtables.iterator().next();
        return hashtable;
      }
    }
  }
;
  Hashtable<String,Object> cred=AccessController.doPrivileged(action);
  return cred;
}"
34634,"@SuppressWarnings(""String_Node_Str"") private void assertSubjectContents(String realmName,String uniqueId){
  Hashtable<String,?> customProperties=getSubjectHashtable();
  assertEquals(""String_Node_Str"",Boolean.TRUE,customProperties.get(AuthenticationConstants.INTERNAL_ASSERTION_KEY));
  assertEquals(""String_Node_Str"",""String_Node_Str"" + realmName + ""String_Node_Str""+ uniqueId,customProperties.get(AttributeNameConstants.WSCREDENTIAL_UNIQUEID));
  assertEquals(""String_Node_Str"",principalName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_USERID));
  assertEquals(""String_Node_Str"",principalName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_SECURITYNAME));
  List<String> subjectGroups=(List<String>)customProperties.get(AttributeNameConstants.WSCREDENTIAL_GROUPS);
  assertTrue(""String_Node_Str"",groups.containsAll(subjectGroups) && subjectGroups.containsAll(groups));
  assertEquals(""String_Node_Str"",realmName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_REALM));
  assertNotNull(""String_Node_Str"",customProperties.get(AttributeNameConstants.WSCREDENTIAL_CACHE_KEY));
}","@SuppressWarnings(""String_Node_Str"") private void assertSubjectContents(String realmName,String uniqueId){
  Hashtable<String,?> customProperties=getSubjectHashtable();
  assertEquals(""String_Node_Str"",Boolean.TRUE,customProperties.get(AuthenticationConstants.INTERNAL_ASSERTION_KEY));
  assertEquals(""String_Node_Str"",""String_Node_Str"" + realmName + ""String_Node_Str""+ uniqueId,customProperties.get(AttributeNameConstants.WSCREDENTIAL_UNIQUEID));
  assertEquals(""String_Node_Str"",principalName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_USERID));
  assertEquals(""String_Node_Str"",principalName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_SECURITYNAME));
  List<String> subjectGroups=(List<String>)customProperties.get(AttributeNameConstants.WSCREDENTIAL_GROUPS);
  assertTrue(""String_Node_Str"",groups.containsAll(subjectGroups) && subjectGroups.containsAll(groups));
  assertEquals(""String_Node_Str"",realmName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_REALM));
}"
34635,"@SuppressWarnings(""String_Node_Str"") private void assertSubjectContents(Subject subject,String realmName,String uniqueId){
  Hashtable<String,?> customProperties=getSubjectHashtable(subject);
  assertEquals(""String_Node_Str"",Boolean.TRUE,customProperties.get(AuthenticationConstants.INTERNAL_ASSERTION_KEY));
  assertEquals(""String_Node_Str"",""String_Node_Str"" + realmName + ""String_Node_Str""+ uniqueId,customProperties.get(AttributeNameConstants.WSCREDENTIAL_UNIQUEID));
  assertEquals(""String_Node_Str"",principalName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_USERID));
  assertEquals(""String_Node_Str"",principalName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_SECURITYNAME));
  List<String> subjectGroups=(List<String>)customProperties.get(AttributeNameConstants.WSCREDENTIAL_GROUPS);
  assertTrue(""String_Node_Str"",groups.containsAll(subjectGroups) && subjectGroups.containsAll(groups));
  assertEquals(""String_Node_Str"",realmName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_REALM));
  assertNotNull(""String_Node_Str"",customProperties.get(AttributeNameConstants.WSCREDENTIAL_CACHE_KEY));
}","@SuppressWarnings(""String_Node_Str"") private void assertSubjectContents(Subject subject,String realmName,String uniqueId){
  Hashtable<String,?> customProperties=getSubjectHashtable(subject);
  assertEquals(""String_Node_Str"",Boolean.TRUE,customProperties.get(AuthenticationConstants.INTERNAL_ASSERTION_KEY));
  assertEquals(""String_Node_Str"",""String_Node_Str"" + realmName + ""String_Node_Str""+ uniqueId,customProperties.get(AttributeNameConstants.WSCREDENTIAL_UNIQUEID));
  assertEquals(""String_Node_Str"",principalName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_USERID));
  assertEquals(""String_Node_Str"",principalName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_SECURITYNAME));
  List<String> subjectGroups=(List<String>)customProperties.get(AttributeNameConstants.WSCREDENTIAL_GROUPS);
  assertTrue(""String_Node_Str"",groups.containsAll(subjectGroups) && subjectGroups.containsAll(groups));
  assertEquals(""String_Node_Str"",realmName,customProperties.get(AttributeNameConstants.WSCREDENTIAL_REALM));
  assertNull(""String_Node_Str"",customProperties.get(AttributeNameConstants.WSCREDENTIAL_CACHE_KEY));
}"
34636,"/** 
 * Evaluate and return the groupSearchFilter.
 * @param immediateOnly If true, only return a non-null value if the setting is either animmediate EL expression or not set by an EL expression. If false, return the value regardless of where it is evaluated.
 * @return The groupSearchFilter or null if immediateOnly==true AND the value is not evaluatedfrom a deferred EL expression.
 */
@FFDCIgnore(IllegalArgumentException.class) private String evaluateGroupSearchFilter(boolean immediateOnly){
  try {
    String result=ELHelper.processString(""String_Node_Str"",this.idStoreDefinition.groupSearchFilter(),immediateOnly);
    if (result == null || result.isEmpty()) {
      if (isCTS()) {
        Tr.debug(tc,""String_Node_Str"");
        return ""String_Node_Str"";
      }
    }
    return result;
  }
 catch (  IllegalArgumentException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isWarningEnabled()) {
      Tr.warning(tc,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    }
    return ""String_Node_Str"";
  }
}","/** 
 * Evaluate and return the groupSearchFilter.
 * @param immediateOnly If true, only return a non-null value if the setting is either animmediate EL expression or not set by an EL expression. If false, return the value regardless of where it is evaluated.
 * @return The groupSearchFilter or null if immediateOnly==true AND the value is not evaluatedfrom a deferred EL expression.
 */
@FFDCIgnore(IllegalArgumentException.class) private String evaluateGroupSearchFilter(boolean immediateOnly){
  try {
    final String result=ELHelper.processString(""String_Node_Str"",this.idStoreDefinition.groupSearchFilter(),immediateOnly);
    if (result == null || result.isEmpty()) {
      if (isCTS()) {
        Tr.debug(tc,""String_Node_Str"");
        return ""String_Node_Str"";
      }
    }
    return result;
  }
 catch (  IllegalArgumentException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isWarningEnabled()) {
      Tr.warning(tc,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    }
    return ""String_Node_Str"";
  }
}"
34637,"@Test public void testValidateRequestRegistersJaspicSession() throws Exception {
  withMessageContext(ap).withMessageInfo().withGetResponse();
  withUsernamePassword(USER1,PASSWORD1).withIsNewAuthentication(false);
  withIDSBeanInstance(ids,false,false).withSetStatusToResponse(HttpServletResponse.SC_OK);
  withJaspicSessionEnabled(true);
  withoutJaspicSessionPrincipal();
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
  assertRegisterSessionProperty(true);
}","@Test public void testValidateRequestRegistersJaspicSession() throws Exception {
  IdentityStoreHandler mish=new MyIdentityStoreHandler();
  withMessageContext(ap).withMessageInfo().withGetResponse();
  withUsernamePassword(USER1,PASSWORD1).withIsNewAuthentication(false);
  withIDSBeanInstance(ids,false,false).withIDSHandlerBeanInstance(mish).withSetStatusToResponse(HttpServletResponse.SC_OK);
  withJaspicSessionEnabled(true);
  withoutJaspicSessionPrincipal();
  AuthenticationStatus status=cfam.validateRequest(request,res,hmc);
  assertEquals(""String_Node_Str"",AuthenticationStatus.SUCCESS,status);
  assertRegisterSessionProperty(true);
}"
34638,"private boolean isRegistryAvailable(){
  try {
    return (RegistryHelper.getUserRegistry(null) != null);
  }
 catch (  WSSecurityException e) {
    if (tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"",e);
    return true;
  }
}","protected boolean isRegistryAvailable(){
  try {
    return (RegistryHelper.getUserRegistry(null) != null);
  }
 catch (  WSSecurityException e) {
    if (tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"",e);
    return true;
  }
}"
34639,"@Before public void setUp(){
  cdi=mockery.mock(CDI.class);
  mechanism=new BasicHttpAuthenticationMechanism(){
    @SuppressWarnings(""String_Node_Str"") @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
  realmName=""String_Node_Str"";
  request=mockery.mock(HttpServletRequest.class);
  response=mockery.mock(HttpServletResponse.class);
  httpMessageContext=mockery.mock(HttpMessageContext.class);
  clientSubject=new Subject();
  String authzValue=Base64Coder.base64Encode(""String_Node_Str"");
  authzHeader=""String_Node_Str"" + authzValue;
  iis=mockery.mock(Instance.class,""String_Node_Str"");
  identityStoreHandler=mockery.mock(IdentityStoreHandler.class);
  bm=mockery.mock(BeanManager.class,""String_Node_Str"");
  principalName=""String_Node_Str"";
  callerPrincipal=new CallerPrincipal(principalName);
  groups=new HashSet<String>();
  validResult=new CredentialValidationResult(callerPrincipal,groups);
  callbackHandler=mockery.mock(CallbackHandler.class);
  mpp=mockery.mock(ModulePropertiesProvider.class);
  mechanism.setMPP(mpp);
  ap=mockery.mock(AuthenticationParameters.class);
  coCred=new CallerOnlyCredential(""String_Node_Str"");
  upCred=new UsernamePasswordCredential(""String_Node_Str"",""String_Node_Str"");
  invalidUpCred=new UsernamePasswordCredential(""String_Node_Str"",""String_Node_Str"");
  baCred=new BasicAuthenticationCredential(authzValue);
  cdis=mockery.mock(CDIService.class);
  cdiHelperTestWrapper=new CDIHelperTestWrapper(mockery,null);
  cdiHelperTestWrapper.setCDIService(cdis);
}","@Before public void setUp(){
  cdi=mockery.mock(CDI.class);
  Utils utils=new Utils(){
    @Override protected boolean isRegistryAvailable(){
      return isRegistryAvailable;
    }
  }
;
  mechanism=new BasicHttpAuthenticationMechanism(utils){
    @SuppressWarnings(""String_Node_Str"") @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
  realmName=""String_Node_Str"";
  request=mockery.mock(HttpServletRequest.class);
  response=mockery.mock(HttpServletResponse.class);
  httpMessageContext=mockery.mock(HttpMessageContext.class);
  clientSubject=new Subject();
  String authzValue=Base64Coder.base64Encode(""String_Node_Str"");
  authzHeader=""String_Node_Str"" + authzValue;
  iis=mockery.mock(Instance.class,""String_Node_Str"");
  identityStoreHandler=mockery.mock(IdentityStoreHandler.class);
  bm=mockery.mock(BeanManager.class,""String_Node_Str"");
  principalName=""String_Node_Str"";
  callerPrincipal=new CallerPrincipal(principalName);
  groups=new HashSet<String>();
  validResult=new CredentialValidationResult(callerPrincipal,groups);
  callbackHandler=mockery.mock(CallbackHandler.class);
  mpp=mockery.mock(ModulePropertiesProvider.class);
  mechanism.setMPP(mpp);
  ap=mockery.mock(AuthenticationParameters.class);
  coCred=new CallerOnlyCredential(""String_Node_Str"");
  upCred=new UsernamePasswordCredential(""String_Node_Str"",""String_Node_Str"");
  invalidUpCred=new UsernamePasswordCredential(""String_Node_Str"",""String_Node_Str"");
  baCred=new BasicAuthenticationCredential(authzValue);
  cdis=mockery.mock(CDIService.class);
  cdiHelperTestWrapper=new CDIHelperTestWrapper(mockery,null);
  cdiHelperTestWrapper.setCDIService(cdis);
}"
34640,"@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  cdi=mockery.mock(CDI.class);
  iis=mockery.mock(Instance.class,""String_Node_Str"");
  iish=mockery.mock(Instance.class,""String_Node_Str"");
  ids=mockery.mock(IdentityStore.class);
  bm=mockery.mock(BeanManager.class,""String_Node_Str"");
  ap=mockery.mock(AuthenticationParameters.class);
  hmc=mockery.mock(HttpMessageContext.class);
  mi=mockery.mock(MessageInfo.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  ch=mockery.mock(CallbackHandler.class);
  cs=new Subject();
  cdis=mockery.mock(CDIService.class);
  cdiHelperTestWrapper=new CDIHelperTestWrapper(mockery,null);
  cdiHelperTestWrapper.setCDIService(cdis);
  cfam=new CustomFormAuthenticationMechanism(){
    @SuppressWarnings(""String_Node_Str"") @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
  coCred=new CallerOnlyCredential(USER1);
  upCred=new UsernamePasswordCredential(USER1,PASSWORD1);
  invalidUpCred=new UsernamePasswordCredential(USER1,INVALID_PASSWORD);
  baCred=new BasicAuthenticationCredential(Base64Coder.base64Encode(USER1 + ""String_Node_Str"" + PASSWORD1));
}","@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  cdi=mockery.mock(CDI.class);
  iis=mockery.mock(Instance.class,""String_Node_Str"");
  iish=mockery.mock(Instance.class,""String_Node_Str"");
  ids=mockery.mock(IdentityStore.class);
  bm=mockery.mock(BeanManager.class,""String_Node_Str"");
  ap=mockery.mock(AuthenticationParameters.class);
  hmc=mockery.mock(HttpMessageContext.class);
  mi=mockery.mock(MessageInfo.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  ch=mockery.mock(CallbackHandler.class);
  cs=new Subject();
  cdis=mockery.mock(CDIService.class);
  cdiHelperTestWrapper=new CDIHelperTestWrapper(mockery,null);
  cdiHelperTestWrapper.setCDIService(cdis);
  Utils utils=new Utils(){
    @Override protected boolean isRegistryAvailable(){
      return isRegistryAvailable;
    }
  }
;
  cfam=new CustomFormAuthenticationMechanism(utils){
    @SuppressWarnings(""String_Node_Str"") @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
  coCred=new CallerOnlyCredential(USER1);
  upCred=new UsernamePasswordCredential(USER1,PASSWORD1);
  invalidUpCred=new UsernamePasswordCredential(USER1,INVALID_PASSWORD);
  baCred=new BasicAuthenticationCredential(Base64Coder.base64Encode(USER1 + ""String_Node_Str"" + PASSWORD1));
}"
34641,"@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  cdi=mockery.mock(CDI.class);
  iis=mockery.mock(Instance.class,""String_Node_Str"");
  iish=mockery.mock(Instance.class);
  ids=mockery.mock(IdentityStore.class);
  bm=mockery.mock(BeanManager.class,""String_Node_Str"");
  ap=mockery.mock(AuthenticationParameters.class);
  hmc=mockery.mock(HttpMessageContext.class);
  mi=mockery.mock(MessageInfo.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  ch=mockery.mock(CallbackHandler.class);
  cs=new Subject();
  cdis=mockery.mock(CDIService.class);
  cdiHelperTestWrapper=new CDIHelperTestWrapper(mockery,null);
  cdiHelperTestWrapper.setCDIService(cdis);
  fam=new FormAuthenticationMechanism(){
    @SuppressWarnings(""String_Node_Str"") @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
  coCred=new CallerOnlyCredential(USER1);
  upCred=new UsernamePasswordCredential(USER1,PASSWORD1);
  invalidUpCred=new UsernamePasswordCredential(USER1,INVALID_PASSWORD);
  baCred=new BasicAuthenticationCredential(Base64Coder.base64Encode(USER1 + ""String_Node_Str"" + PASSWORD1));
}","@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  cdi=mockery.mock(CDI.class);
  iis=mockery.mock(Instance.class,""String_Node_Str"");
  iish=mockery.mock(Instance.class);
  ids=mockery.mock(IdentityStore.class);
  bm=mockery.mock(BeanManager.class,""String_Node_Str"");
  ap=mockery.mock(AuthenticationParameters.class);
  hmc=mockery.mock(HttpMessageContext.class);
  mi=mockery.mock(MessageInfo.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  ch=mockery.mock(CallbackHandler.class);
  cs=new Subject();
  cdis=mockery.mock(CDIService.class);
  cdiHelperTestWrapper=new CDIHelperTestWrapper(mockery,null);
  cdiHelperTestWrapper.setCDIService(cdis);
  Utils utils=new Utils(){
    @Override protected boolean isRegistryAvailable(){
      return isRegistryAvailable;
    }
  }
;
  fam=new FormAuthenticationMechanism(utils){
    @SuppressWarnings(""String_Node_Str"") @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
  coCred=new CallerOnlyCredential(USER1);
  upCred=new UsernamePasswordCredential(USER1,PASSWORD1);
  invalidUpCred=new UsernamePasswordCredential(USER1,INVALID_PASSWORD);
  baCred=new BasicAuthenticationCredential(Base64Coder.base64Encode(USER1 + ""String_Node_Str"" + PASSWORD1));
}"
34642,"private static String jsonifyTraceAndMessage(int maxFieldLength,String wlpUserDir,String serverName,String hostName,String eventType,Object event,String[] tags){
  GenericData genData=(GenericData)event;
  StringBuilder sb=null;
  ArrayList<Pair> pairs=genData.getPairs();
  KeyValuePair kvp=null;
  String key=null;
  ArrayList<KeyValuePair> extensions=null;
  KeyValuePairList kvpl=null;
  if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startMessageJson(hostName,wlpUserDir,serverName);
  if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startTraceJson(hostName,wlpUserDir,serverName);
  for (  Pair p : pairs) {
    if (p instanceof KeyValuePair) {
      kvp=(KeyValuePair)p;
      key=kvp.getKey();
      if (key.equals(LogFieldConstants.LOGLEVEL)) {
      }
 else       if (key.equals(LogFieldConstants.MESSAGE)) {
        String formattedValue=CollectorJsonHelpers.formatMessage(kvp.getStringValue(),maxFieldLength);
        CollectorJsonHelpers.addToJSON(sb,key,formattedValue,false,true,false,false,false);
      }
 else       if (key.equals(LogFieldConstants.IBM_THREADID)) {
        key=LogFieldConstants.THREADID;
        CollectorJsonHelpers.addToJSON(sb,key,DataFormatHelper.padHexString(kvp.getIntValue(),8),false,true,false,false,false);
      }
 else       if (key.equals(LogFieldConstants.IBM_DATETIME)) {
        key=LogFieldConstants.DATETIME;
        String datetime=CollectorJsonHelpers.dateFormatTL.get().format(kvp.getLongValue());
        CollectorJsonHelpers.addToJSON(sb,key,datetime,false,true,false,false,false);
      }
 else       if (key.equals(LogFieldConstants.MODULE)) {
        key=LogFieldConstants.LOGGERNAME;
        CollectorJsonHelpers.addToJSON(sb,key,kvp.getStringValue(),false,true,false,false,false);
      }
 else {
        if (key.contains(LogFieldConstants.IBM_TAG)) {
          key=CollectorJsonHelpers.removeIBMTag(key);
        }
        String value=null;
        if (kvp.isInteger()) {
          value=Integer.toString(kvp.getIntValue());
        }
 else         if (kvp.isLong()) {
          value=Long.toString(kvp.getLongValue());
        }
 else {
          value=kvp.getStringValue();
        }
        CollectorJsonHelpers.addToJSON(sb,key,value,false,true,false,false,!kvp.isString());
      }
    }
 else     if (p instanceof KeyValuePairList) {
      kvpl=(KeyValuePairList)p;
      if (kvpl.getName().equals(LogFieldConstants.EXTENSIONS_KVPL)) {
        extensions=kvpl.getKeyValuePairs();
        for (        KeyValuePair k : extensions) {
          String extKey=k.getKey();
          if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {
            CollectorJsonHelpers.addToJSON(sb,extKey,Integer.toString(kvp.getIntValue()),false,true,false,false,true);
          }
 else           if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {
            CollectorJsonHelpers.addToJSON(sb,extKey,Float.toString(k.getFloatValue()),false,true,false,false,true);
          }
 else           if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {
            CollectorJsonHelpers.addToJSON(sb,extKey,Long.toString(kvp.getLongValue()),false,true,false,false,true);
          }
 else           if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {
            CollectorJsonHelpers.addToJSON(sb,extKey,Boolean.toString(k.getBooleanValue()),false,true,false,false,true);
          }
 else {
            CollectorJsonHelpers.addToJSON(sb,extKey,k.getStringValue(),false,true,false,false,false);
          }
        }
      }
    }
  }
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String jsonifyTraceAndMessage(int maxFieldLength,String wlpUserDir,String serverName,String hostName,String eventType,Object event,String[] tags){
  GenericData genData=(GenericData)event;
  StringBuilder sb=null;
  ArrayList<Pair> pairs=genData.getPairs();
  KeyValuePair kvp=null;
  String key=null;
  ArrayList<KeyValuePair> extensions=null;
  KeyValuePairList kvpl=null;
  if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startMessageJson(hostName,wlpUserDir,serverName);
  if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE))   sb=CollectorJsonHelpers.startTraceJson(hostName,wlpUserDir,serverName);
  for (  Pair p : pairs) {
    if (p instanceof KeyValuePair) {
      kvp=(KeyValuePair)p;
      key=kvp.getKey();
      if (key.equals(LogFieldConstants.LOGLEVEL)) {
      }
 else       if (key.equals(LogFieldConstants.MESSAGE)) {
        String formattedValue=CollectorJsonHelpers.formatMessage(kvp.getStringValue(),maxFieldLength);
        CollectorJsonHelpers.addToJSON(sb,key,formattedValue,false,true,false,false,false);
      }
 else       if (key.equals(LogFieldConstants.IBM_THREADID)) {
        key=LogFieldConstants.THREADID;
        CollectorJsonHelpers.addToJSON(sb,key,DataFormatHelper.padHexString(kvp.getIntValue(),8),false,true,false,false,false);
      }
 else       if (key.equals(LogFieldConstants.IBM_DATETIME)) {
        key=LogFieldConstants.DATETIME;
        String datetime=CollectorJsonHelpers.dateFormatTL.get().format(kvp.getLongValue());
        CollectorJsonHelpers.addToJSON(sb,key,datetime,false,true,false,false,false);
      }
 else       if (key.equals(LogFieldConstants.MODULE)) {
        key=LogFieldConstants.LOGGERNAME;
        CollectorJsonHelpers.addToJSON(sb,key,kvp.getStringValue(),false,true,false,false,false);
      }
 else {
        if (key.contains(LogFieldConstants.IBM_TAG)) {
          key=CollectorJsonHelpers.removeIBMTag(key);
        }
        String value=null;
        if (kvp.isInteger()) {
          value=Integer.toString(kvp.getIntValue());
        }
 else         if (kvp.isLong()) {
          value=Long.toString(kvp.getLongValue());
        }
 else {
          value=kvp.getStringValue();
        }
        CollectorJsonHelpers.addToJSON(sb,key,value,false,true,false,false,!kvp.isString());
      }
    }
 else     if (p instanceof KeyValuePairList) {
      kvpl=(KeyValuePairList)p;
      if (kvpl.getName().equals(LogFieldConstants.EXTENSIONS_KVPL)) {
        extensions=kvpl.getKeyValuePairs();
        for (        KeyValuePair k : extensions) {
          String extKey=k.getKey();
          if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {
            CollectorJsonHelpers.addToJSON(sb,extKey,Integer.toString(k.getIntValue()),false,true,false,false,true);
          }
 else           if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {
            CollectorJsonHelpers.addToJSON(sb,extKey,Float.toString(k.getFloatValue()),false,true,false,false,true);
          }
 else           if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {
            CollectorJsonHelpers.addToJSON(sb,extKey,Long.toString(k.getLongValue()),false,true,false,false,true);
          }
 else           if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {
            CollectorJsonHelpers.addToJSON(sb,extKey,Boolean.toString(k.getBooleanValue()),false,true,false,false,true);
          }
 else {
            CollectorJsonHelpers.addToJSON(sb,extKey,k.getStringValue(),false,true,false,false,false);
          }
        }
      }
    }
  }
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
34643,"@Override public void setApplication(Application application){
synchronized (this) {
    _applicationFactory.setApplication(application);
  }
}","@Override public void setApplication(Application application){
synchronized (this) {
    if (application == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    _application=application;
  }
}"
34644,"@FFDCIgnore(IOException.class) public InputStream getInputStream() throws IOException {
  InputStream is=null;
  try {
    URL newURL=new URL(url.toExternalForm());
    URLConnection conn=newURL.openConnection();
    conn.setUseCaches(false);
    is=conn.getInputStream();
  }
 catch (  IOException e) {
    if (relativeUrl.endsWith(""String_Node_Str"") || relativeUrl.endsWith(""String_Node_Str"") || searchOnClasspath) {
      String s=relativeUrl;
      if (s.charAt(0) == '/')       s=s.substring(1);
      is=classloader.getResourceAsStream(s);
    }
  }
  if (is == null) {
    if (dru != null) {
synchronized (dru) {
        dru.handleDocumentRoots(relativeUrl);
        is=dru.getInputStream();
      }
    }
 else {
      throw new IOException(JspCoreException.getMsg(""String_Node_Str"",new Object[]{url}));
    }
  }
  return is;
}","@FFDCIgnore(IOException.class) public InputStream getInputStream() throws IOException {
  InputStream is=null;
  try {
    URL newURL=new URL(url.toExternalForm());
    URLConnection conn=newURL.openConnection();
    conn.setUseCaches(false);
    is=conn.getInputStream();
  }
 catch (  IOException e) {
    if (relativeUrl.endsWith(""String_Node_Str"") || relativeUrl.endsWith(""String_Node_Str"") || relativeUrl.endsWith(""String_Node_Str"")|| searchOnClasspath) {
      String s=relativeUrl;
      if (s.charAt(0) == '/')       s=s.substring(1);
      is=classloader.getResourceAsStream(s);
    }
  }
  if (is == null) {
    if (dru != null) {
synchronized (dru) {
        dru.handleDocumentRoots(relativeUrl);
        is=dru.getInputStream();
      }
    }
 else {
      throw new IOException(JspCoreException.getMsg(""String_Node_Str"",new Object[]{url}));
    }
  }
  return is;
}"
34645,"public static JspTranslationResult translateJsp(JspResources jspResources,JspTranslationContext context,JspConfiguration config,JspOptions options,TagLibraryCache tlc,boolean forceTagFileTranslation,List compilerOptions) throws JspCoreException {
  JspTranslationResult translationResult=new JspTranslationResult();
  Integer JspIdConsumerCounter=new Integer(-1);
  String JspIdConsumerPrefix=null;
  List tagFileDependencyIdList=new ArrayList();
  JspVisitorInputMap inputMap=new JspVisitorInputMap();
  inputMap.put(""String_Node_Str"",tagFileDependencyIdList);
  inputMap.put(""String_Node_Str"",tlc);
  inputMap.put(""String_Node_Str"",jspResources);
  inputMap.put(""String_Node_Str"",options);
  inputMap.put(""String_Node_Str"",jspResources.getInputSource().getRelativeURL());
  inputMap.put(""String_Node_Str"",JspIdConsumerCounter);
  inputMap.put(""String_Node_Str"",JspIdConsumerPrefix);
  String jspVisitorCollectionId=null;
  String tagFileVisitorCollectionId=null;
  if (!options.isUseInMemory()) {
    jspVisitorCollectionId=JSP_TRANSLATION_ID;
    tagFileVisitorCollectionId=TAGFILE_TRANSLATION_ID;
    if (options.isDebugEnabled()) {
      jspVisitorCollectionId=DEBUG_JSP_TRANSLATION_ID;
      tagFileVisitorCollectionId=DEBUG_TAGFILE_TRANSLATION_ID;
    }
  }
 else {
    jspVisitorCollectionId=IN_MEMORY_JSP_TRANSLATION_ID;
    tagFileVisitorCollectionId=IN_MEMORY_TAGFILE_TRANSLATION_ID;
    if (options.isDebugEnabled()) {
      jspVisitorCollectionId=IN_MEMORY_DEBUG_JSP_TRANSLATION_ID;
      tagFileVisitorCollectionId=IN_MEMORY_DEBUG_TAGFILE_TRANSLATION_ID;
    }
  }
  JspTranslator jspTranslator=JspTranslatorFactory.getFactory().createTranslator(jspVisitorCollectionId,jspResources.getInputSource(),context,config,options,tlc.getImplicitTagLibPrefixMap());
  HashMap resultMap=jspTranslator.processVisitors(inputMap);
  if (resultMap.containsKey(""String_Node_Str"")) {
    SmapVisitorResult smapResult=(SmapVisitorResult)resultMap.get(""String_Node_Str"");
    translationResult.addSmapGenerator(obtainAbsoluteRelativeURL(context,jspResources.getInputSource()),smapResult.getSmapGenerator());
  }
  translationResult.addJspLineIds(jspResources,jspTranslator.getDocument());
  if (tagFileDependencyIdList.size() > 0) {
    Object lock=tlc.getTagFileLock(tagFileDependencyIdList);
    try {
synchronized (lock) {
        List tagFilesToCompile=new ArrayList();
        List tagFilesNotToCompile=new ArrayList();
        Collection tagFileIds=new ArrayList();
        for (Iterator itr=tagFileDependencyIdList.iterator(); itr.hasNext(); ) {
          TagFileId tagFileId=(TagFileId)itr.next();
          TagLibraryInfoImpl tli=tlc.getTagLibraryInfo(tagFileId.getUri(),tagFileId.getPrefix(),jspResources.getInputSource().getRelativeURL());
          TagFileInfo tfi=tli.getTagFile(tagFileId.getTagName());
          JspInputSource tagFileInputSource=context.getJspInputSourceFactory().copyJspInputSource(tli.getInputSource(),tfi.getPath());
          TagFileResources tagFileResources=context.getJspResourcesFactory().createTagFileResources(tagFileInputSource,tfi);
          tagFileResources=tlc.getTagFileResources(tagFileResources);
          translationResult.getTagFileDependencyList().add(tagFileResources);
          if (forceTagFileTranslation && tagFileResources.getGeneratedSourceFile().getParentFile().exists() == false) {
            tagFileResources.getGeneratedSourceFile().getParentFile().mkdirs();
          }
          if (forceTagFileTranslation || tagFileResources.isOutdated()) {
            JspConfiguration tagConfiguration=config.createEmptyJspConfiguration();
            if (tli != null) {
              if (tli.getRequiredVersion() != null) {
                tagConfiguration.setJspVersion(tli.getRequiredVersion());
              }
            }
            tagConfiguration.setElIgnored(config.elIgnored());
            JspTranslator tagFileTranslator=JspTranslatorFactory.getFactory().createTranslator(tagFileVisitorCollectionId,tagFileInputSource,context,tagConfiguration,options,tlc.getImplicitTagLibPrefixMap());
            JspVisitorInputMap tagFileInputMap=new JspVisitorInputMap();
            tagFileInputMap.put(""String_Node_Str"",options);
            tagFileInputMap.put(""String_Node_Str"",tlc);
            tagFileInputMap.put(""String_Node_Str"",tagFileResources);
            tagFileInputMap.put(""String_Node_Str"",tfi);
            tagFileInputMap.put(""String_Node_Str"",new Boolean(true));
            tagFileInputMap.put(""String_Node_Str"",jspResources.getInputSource().getRelativeURL());
            HashMap results=tagFileTranslator.processVisitors(tagFileInputMap);
            if (results.containsKey(""String_Node_Str"")) {
              SmapVisitorResult smapResult=(SmapVisitorResult)results.get(""String_Node_Str"");
              translationResult.addSmapGenerator(obtainAbsoluteRelativeURL(context,tagFileResources.getInputSource()),smapResult.getSmapGenerator());
            }
            JspTranslationResult.loadJspIdList(tagFileResources,tagFileTranslator.getDocument().getDocumentElement(),tagFileIds);
            tagFileResources.syncGeneratedSource();
            tagFilesToCompile.add(tagFileResources);
          }
 else {
            tagFilesNotToCompile.add(tagFileResources);
          }
        }
        if (tagFilesToCompile.size() > 0) {
          JspResources[] resourcesToCompile=new JspResources[tagFilesToCompile.size()];
          resourcesToCompile=(JspResources[])tagFilesToCompile.toArray(resourcesToCompile);
          JspCompiler compiler=context.getJspCompilerFactory().createJspCompiler();
          JspResources[] dependencies=null;
          if (tagFilesNotToCompile.size() > 0) {
            dependencies=new JspResources[tagFilesNotToCompile.size()];
            dependencies=(JspResources[])tagFilesNotToCompile.toArray(dependencies);
          }
          JspCompilerResult compileResult=compiler.compile(resourcesToCompile,dependencies,tagFileIds,compilerOptions);
          translationResult.setTagFileCompileResult(compileResult);
          syncTagFileFiles(options,tagFilesToCompile,translationResult,context);
        }
      }
    }
  finally {
      tlc.releaseTagFileLock(tagFileDependencyIdList);
    }
  }
  return translationResult;
}","public static JspTranslationResult translateJsp(JspResources jspResources,JspTranslationContext context,JspConfiguration config,JspOptions options,TagLibraryCache tlc,boolean forceTagFileTranslation,List compilerOptions) throws JspCoreException {
  JspTranslationResult translationResult=new JspTranslationResult();
  Integer JspIdConsumerCounter=new Integer(-1);
  String JspIdConsumerPrefix=null;
  List tagFileDependencyIdList=new ArrayList();
  JspVisitorInputMap inputMap=new JspVisitorInputMap();
  inputMap.put(""String_Node_Str"",tagFileDependencyIdList);
  inputMap.put(""String_Node_Str"",tlc);
  inputMap.put(""String_Node_Str"",jspResources);
  inputMap.put(""String_Node_Str"",options);
  inputMap.put(""String_Node_Str"",jspResources.getInputSource().getRelativeURL());
  inputMap.put(""String_Node_Str"",JspIdConsumerCounter);
  inputMap.put(""String_Node_Str"",JspIdConsumerPrefix);
  String jspVisitorCollectionId=null;
  String tagFileVisitorCollectionId=null;
  if (!options.isUseInMemory()) {
    jspVisitorCollectionId=JSP_TRANSLATION_ID;
    tagFileVisitorCollectionId=TAGFILE_TRANSLATION_ID;
    if (options.isDebugEnabled()) {
      jspVisitorCollectionId=DEBUG_JSP_TRANSLATION_ID;
      tagFileVisitorCollectionId=DEBUG_TAGFILE_TRANSLATION_ID;
    }
  }
 else {
    jspVisitorCollectionId=IN_MEMORY_JSP_TRANSLATION_ID;
    tagFileVisitorCollectionId=IN_MEMORY_TAGFILE_TRANSLATION_ID;
    if (options.isDebugEnabled()) {
      jspVisitorCollectionId=IN_MEMORY_DEBUG_JSP_TRANSLATION_ID;
      tagFileVisitorCollectionId=IN_MEMORY_DEBUG_TAGFILE_TRANSLATION_ID;
    }
  }
  JspTranslator jspTranslator=JspTranslatorFactory.getFactory().createTranslator(jspVisitorCollectionId,jspResources.getInputSource(),context,config,options,tlc.getImplicitTagLibPrefixMap());
  HashMap resultMap=jspTranslator.processVisitors(inputMap);
  if (resultMap.containsKey(""String_Node_Str"")) {
    SmapVisitorResult smapResult=(SmapVisitorResult)resultMap.get(""String_Node_Str"");
    translationResult.addSmapGenerator(obtainAbsoluteRelativeURL(context,jspResources.getInputSource()),smapResult.getSmapGenerator());
  }
  translationResult.addJspLineIds(jspResources,jspTranslator.getDocument());
  if (tagFileDependencyIdList.size() > 0) {
    Object lock=tlc.getTagFileLock(tagFileDependencyIdList);
    try {
synchronized (lock) {
        List tagFilesToCompile=new ArrayList();
        List tagFilesNotToCompile=new ArrayList();
        Collection tagFileIds=new ArrayList();
        for (Iterator itr=tagFileDependencyIdList.iterator(); itr.hasNext(); ) {
          TagFileId tagFileId=(TagFileId)itr.next();
          TagLibraryInfoImpl tli=tlc.getTagLibraryInfo(tagFileId.getUri(),tagFileId.getPrefix(),jspResources.getInputSource().getRelativeURL());
          TagFileInfo tfi=tli.getTagFile(tagFileId.getTagName());
          JspInputSource tagFileInputSource=context.getJspInputSourceFactory().copyJspInputSource(tli.getInputSource(),tfi.getPath());
          TagFileResources tagFileResources=context.getJspResourcesFactory().createTagFileResources(tagFileInputSource,tfi);
          tagFileResources=tlc.getTagFileResources(tagFileResources);
          translationResult.getTagFileDependencyList().add(tagFileResources);
          if (forceTagFileTranslation || tagFileResources.getGeneratedSourceFile().getParentFile().exists() == false) {
            tagFileResources.getGeneratedSourceFile().getParentFile().mkdirs();
          }
          if (forceTagFileTranslation || tagFileResources.isOutdated()) {
            JspConfiguration tagConfiguration=config.createEmptyJspConfiguration();
            if (tli != null) {
              if (tli.getRequiredVersion() != null) {
                tagConfiguration.setJspVersion(tli.getRequiredVersion());
              }
            }
            tagConfiguration.setElIgnored(config.elIgnored());
            JspTranslator tagFileTranslator=JspTranslatorFactory.getFactory().createTranslator(tagFileVisitorCollectionId,tagFileInputSource,context,tagConfiguration,options,tlc.getImplicitTagLibPrefixMap());
            JspVisitorInputMap tagFileInputMap=new JspVisitorInputMap();
            tagFileInputMap.put(""String_Node_Str"",options);
            tagFileInputMap.put(""String_Node_Str"",tlc);
            tagFileInputMap.put(""String_Node_Str"",tagFileResources);
            tagFileInputMap.put(""String_Node_Str"",tfi);
            tagFileInputMap.put(""String_Node_Str"",new Boolean(true));
            tagFileInputMap.put(""String_Node_Str"",jspResources.getInputSource().getRelativeURL());
            HashMap results=tagFileTranslator.processVisitors(tagFileInputMap);
            if (results.containsKey(""String_Node_Str"")) {
              SmapVisitorResult smapResult=(SmapVisitorResult)results.get(""String_Node_Str"");
              translationResult.addSmapGenerator(obtainAbsoluteRelativeURL(context,tagFileResources.getInputSource()),smapResult.getSmapGenerator());
            }
            JspTranslationResult.loadJspIdList(tagFileResources,tagFileTranslator.getDocument().getDocumentElement(),tagFileIds);
            tagFileResources.syncGeneratedSource();
            tagFilesToCompile.add(tagFileResources);
          }
 else {
            tagFilesNotToCompile.add(tagFileResources);
          }
        }
        if (tagFilesToCompile.size() > 0) {
          JspResources[] resourcesToCompile=new JspResources[tagFilesToCompile.size()];
          resourcesToCompile=(JspResources[])tagFilesToCompile.toArray(resourcesToCompile);
          JspCompiler compiler=context.getJspCompilerFactory().createJspCompiler();
          JspResources[] dependencies=null;
          if (tagFilesNotToCompile.size() > 0) {
            dependencies=new JspResources[tagFilesNotToCompile.size()];
            dependencies=(JspResources[])tagFilesNotToCompile.toArray(dependencies);
          }
          JspCompilerResult compileResult=compiler.compile(resourcesToCompile,dependencies,tagFileIds,compilerOptions);
          translationResult.setTagFileCompileResult(compileResult);
          syncTagFileFiles(options,tagFilesToCompile,translationResult,context);
        }
      }
    }
  finally {
      tlc.releaseTagFileLock(tagFileDependencyIdList);
    }
  }
  return translationResult;
}"
34646,"private String getAttribute(GenericData genData,String key){
  ArrayList<Pair> pairs=genData.getPairs();
  for (  Pair p : pairs) {
    if (p instanceof KeyValuePair) {
      KeyValuePair kvp=(KeyValuePair)p;
      if (kvp.getKey().equals(key)) {
        if (kvp.isInteger()) {
          return kvp.getIntValue().toString();
        }
 else         if (kvp.isLong()) {
          return kvp.getLongValue().toString();
        }
 else {
          return kvp.getStringValue();
        }
      }
    }
  }
  return ""String_Node_Str"";
}","private String getAttribute(GenericData genData,String key){
  ArrayList<Pair> pairs=genData.getPairs();
  for (  Pair p : pairs) {
    if (p instanceof KeyValuePair) {
      KeyValuePair kvp=(KeyValuePair)p;
      if (kvp.getKey().equals(key)) {
        if (kvp.isInteger()) {
          return Integer.toString(kvp.getIntValue());
        }
 else         if (kvp.isLong()) {
          return Long.toString(kvp.getLongValue());
        }
 else {
          return kvp.getStringValue();
        }
      }
    }
  }
  return ""String_Node_Str"";
}"
34647,"/** 
 * @param webRequest
 * @return
 */
private WebReply handleJaspi(Subject receivedSubject,String uriName,WebRequest webRequest,WebSecurityContext webSecurityContext) throws SecurityViolationException, IOException {
  performPrecludedAccessTests(webRequest,webSecurityContext,uriName);
  WebReply webReply=unprotectedSpecialURI(webRequest,uriName,webRequest.getHttpServletRequest().getMethod());
  if (webReply == null) {
    AuthenticationResult authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
    authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
    if (receivedSubject != null && receivedSubject.getPrincipals() != null) {
      authResult.setAuditCredValue(receivedSubject.getPrincipals().iterator().next().getName());
    }
    if (authResult.getStatus() == AuthResult.RETURN) {
      webReply=new ReturnReply(webRequest.getHttpServletResponse().getStatus(),authResult.getReason());
      SecurityViolationException secVE=convertWebSecurityException(new WebSecurityCollaboratorException(webReply.message,webReply,webSecurityContext));
      throw secVE;
    }
 else     if (authResult.getStatus() != AuthResult.CONTINUE) {
      webReply=determineWebReply(receivedSubject,uriName,webRequest,authResult);
    }
  }
  return webReply;
}","/** 
 * @param webRequest
 * @return
 */
private WebReply handleJaspi(Subject receivedSubject,String uriName,WebRequest webRequest,WebSecurityContext webSecurityContext) throws SecurityViolationException, IOException {
  performPrecludedAccessTests(webRequest,webSecurityContext,uriName);
  WebReply webReply=unprotectedSpecialURI(webRequest,uriName,webRequest.getHttpServletRequest().getMethod());
  if (webReply == null) {
    AuthenticationResult authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
    authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
    if (receivedSubject != null && receivedSubject.getPrincipals() != null) {
      authResult.setAuditCredValue(receivedSubject.getPrincipals().iterator().next().getName());
    }
    if (authResult.getStatus() == AuthResult.RETURN) {
      webReply=new ReturnReply(webRequest.getHttpServletResponse().getStatus(),authResult.getReason());
      SecurityViolationException secVE=convertWebSecurityException(new WebSecurityCollaboratorException(webReply.message,webReply,webSecurityContext));
      throw secVE;
    }
 else     if (authResult.getStatus() != AuthResult.CONTINUE) {
      if (authResult.getStatus() == AuthResult.FAILURE && unprotectedResource(webRequest) == PERMIT_REPLY) {
        webReply=PERMIT_REPLY;
      }
 else {
        webReply=determineWebReply(receivedSubject,uriName,webRequest,authResult);
      }
    }
  }
  return webReply;
}"
34648,"/** 
 * {@inheritDoc} 
 */
@Override public SecurityCookieImpl preInvoke(EJBRequestData request) throws EJBAccessDeniedException {
  Subject invokedSubject=subjectManager.getInvocationSubject();
  Subject callerSubject=subjectManager.getCallerSubject();
  EJBMethodMetaData methodMetaData=request.getEJBMethodMetaData();
  if (ejbSecConfig.getUseUnauthenticatedForExpiredCredentials()) {
    invokedSubject=setNullSubjectWhenExpired(invokedSubject);
    callerSubject=setNullSubjectWhenExpired(callerSubject);
  }
  SecurityCookieImpl securityCookie=new SecurityCookieImpl(invokedSubject,callerSubject);
  if (setUnauthenticatedSubjectIfNeeded(invokedSubject,callerSubject)) {
    invokedSubject=subjectManager.getInvocationSubject();
    callerSubject=subjectManager.getCallerSubject();
  }
  Subject subjectToAuthorize=(invokedSubject == null) ? callerSubject : invokedSubject;
  if (!isInternalUnprotectedMethod(methodMetaData)) {
    eah.authorizeEJB(request,subjectToAuthorize);
  }
  performDelegation(methodMetaData,subjectToAuthorize);
  subjectManager.setCallerSubject(subjectToAuthorize);
  return securityCookie;
}","/** 
 * {@inheritDoc} 
 */
@Override public SecurityCookieImpl preInvoke(EJBRequestData request) throws EJBAccessDeniedException {
  Subject invokedSubject=subjectManager.getInvocationSubject();
  Subject callerSubject=subjectManager.getCallerSubject();
  EJBMethodMetaData methodMetaData=request.getEJBMethodMetaData();
  if (ejbSecConfig.getUseUnauthenticatedForExpiredCredentials()) {
    invokedSubject=setNullSubjectWhenExpired(invokedSubject);
    callerSubject=setNullSubjectWhenExpired(callerSubject);
  }
  Subject originalInvokedSubject=invokedSubject;
  Subject originalCallerSubject=callerSubject;
  if (setUnauthenticatedSubjectIfNeeded(invokedSubject,callerSubject)) {
    invokedSubject=subjectManager.getInvocationSubject();
    callerSubject=subjectManager.getCallerSubject();
  }
  Subject subjectToAuthorize=(invokedSubject == null) ? callerSubject : invokedSubject;
  if (!isInternalUnprotectedMethod(methodMetaData)) {
    eah.authorizeEJB(request,subjectToAuthorize);
  }
  performDelegation(methodMetaData,subjectToAuthorize);
  subjectManager.setCallerSubject(subjectToAuthorize);
  SecurityCookieImpl securityCookie=new SecurityCookieImpl(originalInvokedSubject,originalCallerSubject,subjectManager.getInvocationSubject(),subjectToAuthorize);
  return securityCookie;
}"
34649,"/** 
 * {@inheritDoc} 
 */
@Override public void postInvoke(EJBRequestData request,SecurityCookieImpl preInvokeResult) throws EJBAccessDeniedException {
  if (preInvokeResult != null) {
    SecurityCookieImpl securityCookie=preInvokeResult;
    Subject invokedSubject=securityCookie.getInvokedSubject();
    Subject receivedSubject=securityCookie.getReceivedSubject();
    subjectManager.setCallerSubject(receivedSubject);
    subjectManager.setInvocationSubject(invokedSubject);
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void postInvoke(EJBRequestData request,SecurityCookieImpl preInvokeResult) throws EJBAccessDeniedException {
  if (preInvokeResult != null) {
    SecurityCookieImpl securityCookie=preInvokeResult;
    Subject invocationSubject=subjectManager.getInvocationSubject();
    Subject callerSubject=subjectManager.getCallerSubject();
    if ((invocationSubject == null || invocationSubject.equals(securityCookie.getAdjustedInvokedSubject())) && (callerSubject == null || callerSubject.equals(securityCookie.getAdjustedReceivedSubject()))) {
      Subject invokedSubject=securityCookie.getInvokedSubject();
      Subject receivedSubject=securityCookie.getReceivedSubject();
      subjectManager.setCallerSubject(receivedSubject);
      subjectManager.setInvocationSubject(invokedSubject);
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
  }
}"
34650,"SecurityCookieImpl(Subject invokedSubject,Subject receivedSubject){
  this.invokedSubject=invokedSubject;
  this.receivedSubject=receivedSubject;
}","SecurityCookieImpl(Subject invokedSubject,Subject receivedSubject,Subject adjustedInvokedSubject,Subject adjustedReceivedSubject){
  this.invokedSubject=invokedSubject;
  this.receivedSubject=receivedSubject;
  this.adjustedInvokedSubject=adjustedInvokedSubject;
  this.adjustedReceivedSubject=adjustedReceivedSubject;
}"
34651,"/** 
 * Validate and return the   {@link ValidationType}s for the   {@link IdentityStore} from eitherthe EL expression or the direct useFor setting.
 * @param useForExpression The EL expression returned from from the identity store definition.
 * @param useFor The non-EL value.
 * @param immediateOnly Return null if the value is a deferred EL expression.
 * @return The validated useFor types.
 */
static Set<ValidationType> processUseFor(String useForExpression,ValidationType[] useFor,boolean immediateOnly){
  Set<ValidationType> result=null;
  boolean immediate=false;
  if (useForExpression.isEmpty()) {
    result=new HashSet<ValidationType>(Arrays.asList(useFor));
  }
 else {
    Object obj=evaluateElExpression(useForExpression);
    if (obj instanceof Object[]) {
      result=new HashSet(Arrays.asList(obj));
      System.out.println(""String_Node_Str"" + result);
      immediate=isImmediateExpression(useForExpression);
    }
 else     if (obj instanceof Set) {
      result=(Set<ValidationType>)obj;
      immediate=isImmediateExpression(useForExpression);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (result == null || result.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (immediateOnly && !immediate) ? null : result;
}","/** 
 * Validate and return the   {@link ValidationType}s for the   {@link IdentityStore} from eitherthe EL expression or the direct useFor setting.
 * @param useForExpression The EL expression returned from from the identity store definition.
 * @param useFor The non-EL value.
 * @param immediateOnly Return null if the value is a deferred EL expression.
 * @return The validated useFor types.
 */
static Set<ValidationType> processUseFor(String useForExpression,ValidationType[] useFor,boolean immediateOnly){
  Set<ValidationType> result=null;
  boolean immediate=false;
  if (useForExpression.isEmpty()) {
    result=new HashSet<ValidationType>(Arrays.asList(useFor));
  }
 else {
    Object obj=evaluateElExpression(useForExpression);
    if (obj instanceof ValidationType[]) {
      ValidationType[] types=(ValidationType[])obj;
      result=new HashSet<ValidationType>(Arrays.asList(types));
      immediate=isImmediateExpression(useForExpression);
    }
 else     if (obj instanceof Set) {
      result=(Set<ValidationType>)obj;
      immediate=isImmediateExpression(useForExpression);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (result == null || result.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (immediateOnly && !immediate) ? null : Collections.unmodifiableSet(result);
}"
34652,"/** 
 * {@inheritDoc} 
 */
@Override public SecurityCookieImpl preInvoke(EJBRequestData request) throws EJBAccessDeniedException {
  Subject originalInvokedSubject=subjectManager.getInvocationSubject();
  Subject originalCallerSubject=subjectManager.getCallerSubject();
  Subject invokedSubject=originalInvokedSubject;
  Subject callerSubject=originalCallerSubject;
  EJBMethodMetaData methodMetaData=request.getEJBMethodMetaData();
  if (ejbSecConfig.getUseUnauthenticatedForExpiredCredentials()) {
    invokedSubject=setNullSubjectWhenExpired(invokedSubject);
    callerSubject=setNullSubjectWhenExpired(callerSubject);
  }
  if (setUnauthenticatedSubjectIfNeeded(invokedSubject,callerSubject)) {
    invokedSubject=subjectManager.getInvocationSubject();
    callerSubject=subjectManager.getCallerSubject();
  }
  Subject subjectToAuthorize=(invokedSubject == null) ? callerSubject : invokedSubject;
  if (!isInternalUnprotectedMethod(methodMetaData)) {
    eah.authorizeEJB(request,subjectToAuthorize);
  }
  performDelegation(methodMetaData,subjectToAuthorize);
  subjectManager.setCallerSubject(subjectToAuthorize);
  SecurityCookieImpl securityCookie=new SecurityCookieImpl(originalInvokedSubject,originalCallerSubject,subjectManager.getInvocationSubject(),subjectToAuthorize);
  return securityCookie;
}","/** 
 * {@inheritDoc} 
 */
@Override public SecurityCookieImpl preInvoke(EJBRequestData request) throws EJBAccessDeniedException {
  Subject invokedSubject=subjectManager.getInvocationSubject();
  Subject callerSubject=subjectManager.getCallerSubject();
  EJBMethodMetaData methodMetaData=request.getEJBMethodMetaData();
  if (ejbSecConfig.getUseUnauthenticatedForExpiredCredentials()) {
    invokedSubject=setNullSubjectWhenExpired(invokedSubject);
    callerSubject=setNullSubjectWhenExpired(callerSubject);
  }
  Subject originalInvokedSubject=invokedSubject;
  Subject originalCallerSubject=callerSubject;
  if (setUnauthenticatedSubjectIfNeeded(invokedSubject,callerSubject)) {
    invokedSubject=subjectManager.getInvocationSubject();
    callerSubject=subjectManager.getCallerSubject();
  }
  Subject subjectToAuthorize=(invokedSubject == null) ? callerSubject : invokedSubject;
  if (!isInternalUnprotectedMethod(methodMetaData)) {
    eah.authorizeEJB(request,subjectToAuthorize);
  }
  performDelegation(methodMetaData,subjectToAuthorize);
  subjectManager.setCallerSubject(subjectToAuthorize);
  SecurityCookieImpl securityCookie=new SecurityCookieImpl(originalInvokedSubject,originalCallerSubject,subjectManager.getInvocationSubject(),subjectToAuthorize);
  return securityCookie;
}"
34653,"/** 
 * {@inheritDoc} 
 */
@Override public void postInvoke(EJBRequestData request,SecurityCookieImpl preInvokeResult) throws EJBAccessDeniedException {
  if (preInvokeResult != null) {
    SecurityCookieImpl securityCookie=preInvokeResult;
    if (securityCookie.getAdjustedInvokedSubject().equals(subjectManager.getInvocationSubject()) && securityCookie.getAdjustedReceivedSubject().equals(subjectManager.getCallerSubject())) {
      Subject invokedSubject=securityCookie.getInvokedSubject();
      Subject receivedSubject=securityCookie.getReceivedSubject();
      subjectManager.setCallerSubject(receivedSubject);
      subjectManager.setInvocationSubject(invokedSubject);
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void postInvoke(EJBRequestData request,SecurityCookieImpl preInvokeResult) throws EJBAccessDeniedException {
  if (preInvokeResult != null) {
    SecurityCookieImpl securityCookie=preInvokeResult;
    Subject invocationSubject=subjectManager.getInvocationSubject();
    Subject callerSubject=subjectManager.getCallerSubject();
    if ((invocationSubject == null || invocationSubject.equals(securityCookie.getAdjustedInvokedSubject())) && (callerSubject == null || callerSubject.equals(securityCookie.getAdjustedReceivedSubject()))) {
      Subject invokedSubject=securityCookie.getInvokedSubject();
      Subject receivedSubject=securityCookie.getReceivedSubject();
      subjectManager.setCallerSubject(receivedSubject);
      subjectManager.setInvocationSubject(invokedSubject);
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
  }
}"
34654,"@Override public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {
  try {
    if (!unregisterMBeanIfDelayed(name)) {
      super.unregisterMBean(name);
    }
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@Override @FFDCIgnore({InstanceNotFoundException.class,MBeanRegistrationException.class}) public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {
  try {
    if (!unregisterMBeanIfDelayed(name)) {
      super.unregisterMBean(name);
    }
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
34655,"@Override public ObjectInstance registerMBean(Object object,ObjectName name) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  ObjectInstance oi=null;
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw new InstanceAlreadyExistsException();
  }
  try {
    oi=super.registerMBean(object,name);
  }
 catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  NotCompliantMBeanException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return oi;
}","@Override @FFDCIgnore({InstanceAlreadyExistsException.class,MBeanRegistrationException.class,NotCompliantMBeanException.class}) public ObjectInstance registerMBean(Object object,ObjectName name) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  ObjectInstance oi=null;
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw new InstanceAlreadyExistsException();
  }
  try {
    oi=super.registerMBean(object,name);
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  NotCompliantMBeanException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  return oi;
}"
34656,"@Override public Object invoke(ObjectName name,String operationName,Object[] params,String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {
  Object oi=null;
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    oi=super.invoke(name,operationName,params,signature);
  }
 catch (  ReflectionException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceNotFoundException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return oi;
}","@Override @FFDCIgnore({MBeanException.class,InstanceNotFoundException.class,ReflectionException.class}) public Object invoke(ObjectName name,String operationName,Object[] params,String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {
  Object oi=null;
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    oi=super.invoke(name,operationName,params,signature);
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  ReflectionException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceNotFoundException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  return oi;
}"
34657,"@Override public Object getAttribute(ObjectName name,String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return super.getAttribute(name,attribute);
}","@Override @FFDCIgnore({MBeanException.class,AttributeNotFoundException.class,InstanceNotFoundException.class,ReflectionException.class}) public Object getAttribute(ObjectName name,String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  Object oi=null;
  try {
    oi=super.getAttribute(name,attribute);
  }
 catch (  MBeanException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  AttributeNotFoundException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceNotFoundException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  ReflectionException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return oi;
}"
34658,"/** 
 * @param className b * @param property
 * @return
 */
private boolean checkTypeMatch(String className,String[] classNames){
  for (  String test : classNames) {
    if (test.equals(className)) {
      return true;
    }
  }
  return false;
}","/** 
 * @param className
 * @param property
 * @return
 */
private boolean checkTypeMatch(String className,String[] classNames){
  for (  String test : classNames) {
    if (test.equals(className)) {
      return true;
    }
  }
  return false;
}"
34659,"@Override public ObjectInstance createMBean(String className,ObjectName name,ObjectName loaderName,Object[] params,String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
  ObjectInstance oi=null;
  registerMBeanIfDelayed(name);
  registerMBeanIfDelayed(loaderName);
  try {
    oi=super.createMBean(className,name,loaderName,params,signature);
  }
 catch (  ReflectionException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  NotCompliantMBeanException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return oi;
}","@Override @FFDCIgnore({ReflectionException.class,InstanceAlreadyExistsException.class,MBeanRegistrationException.class,MBeanException.class,NotCompliantMBeanException.class}) public ObjectInstance createMBean(String className,ObjectName name,ObjectName loaderName,Object[] params,String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
  ObjectInstance oi=null;
  registerMBeanIfDelayed(name);
  registerMBeanIfDelayed(loaderName);
  try {
    oi=super.createMBean(className,name,loaderName,params,signature);
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  ReflectionException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  NotCompliantMBeanException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  return oi;
}"
34660,"@Override public AttributeList getAttributes(ObjectName name,String[] attributes) throws InstanceNotFoundException, ReflectionException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return super.getAttributes(name,attributes);
}","@Override @FFDCIgnore({InstanceNotFoundException.class,ReflectionException.class}) public AttributeList getAttributes(ObjectName name,String[] attributes) throws InstanceNotFoundException, ReflectionException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  AttributeList al=null;
  try {
    al=super.getAttributes(name,attributes);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  ReflectionException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return al;
}"
34661,"@Override public void addNotificationListener(ObjectName name,ObjectName listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException {
  try {
    registerMBeanIfDelayed(name);
    registerMBeanIfDelayed(listener);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    super.addNotificationListener(name,listener,filter,handback);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@Override @FFDCIgnore(InstanceNotFoundException.class) public void addNotificationListener(ObjectName name,ObjectName listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException {
  try {
    registerMBeanIfDelayed(name);
    registerMBeanIfDelayed(listener);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    super.addNotificationListener(name,listener,filter,handback);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
34662,"@Override public void removeNotificationListener(ObjectName name,NotificationListener listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  super.removeNotificationListener(name,listener,filter,handback);
  emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@Override @FFDCIgnore({InstanceNotFoundException.class,ListenerNotFoundException.class}) public void removeNotificationListener(ObjectName name,NotificationListener listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    super.removeNotificationListener(name,listener,filter,handback);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXNotificationEvent(name,listener,null,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  ListenerNotFoundException e) {
    emitJMXNotificationEvent(name,listener,null,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
34663,"/** 
 * {@inheritDoc} 
 */
@Override public SecurityCookieImpl preInvoke(EJBRequestData request) throws EJBAccessDeniedException {
  Subject originalInvokedSubject=subjectManager.getInvocationSubject();
  Subject originalCallerSubject=subjectManager.getCallerSubject();
  Subject invokedSubject=originalInvokedSubject;
  Subject callerSubject=originalCallerSubject;
  EJBMethodMetaData methodMetaData=request.getEJBMethodMetaData();
  if (ejbSecConfig.getUseUnauthenticatedForExpiredCredentials()) {
    invokedSubject=setNullSubjectWhenExpired(invokedSubject);
    callerSubject=setNullSubjectWhenExpired(callerSubject);
  }
  if (setUnauthenticatedSubjectIfNeeded(invokedSubject,callerSubject)) {
    invokedSubject=subjectManager.getInvocationSubject();
    callerSubject=subjectManager.getCallerSubject();
  }
  Subject subjectToAuthorize=(invokedSubject == null) ? callerSubject : invokedSubject;
  if (!isInternalUnprotectedMethod(methodMetaData)) {
    eah.authorizeEJB(request,subjectToAuthorize);
  }
  performDelegation(methodMetaData,subjectToAuthorize);
  subjectManager.setCallerSubject(subjectToAuthorize);
  SecurityCookieImpl securityCookie=new SecurityCookieImpl(originalInvokedSubject,originalCallerSubject,subjectManager.getInvocationSubject(),subjectToAuthorize);
  return securityCookie;
}","/** 
 * {@inheritDoc} 
 */
@Override public SecurityCookieImpl preInvoke(EJBRequestData request) throws EJBAccessDeniedException {
  Subject invokedSubject=subjectManager.getInvocationSubject();
  Subject callerSubject=subjectManager.getCallerSubject();
  EJBMethodMetaData methodMetaData=request.getEJBMethodMetaData();
  if (ejbSecConfig.getUseUnauthenticatedForExpiredCredentials()) {
    invokedSubject=setNullSubjectWhenExpired(invokedSubject);
    callerSubject=setNullSubjectWhenExpired(callerSubject);
  }
  Subject originalInvokedSubject=invokedSubject;
  Subject originalCallerSubject=callerSubject;
  if (setUnauthenticatedSubjectIfNeeded(invokedSubject,callerSubject)) {
    invokedSubject=subjectManager.getInvocationSubject();
    callerSubject=subjectManager.getCallerSubject();
  }
  Subject subjectToAuthorize=(invokedSubject == null) ? callerSubject : invokedSubject;
  if (!isInternalUnprotectedMethod(methodMetaData)) {
    eah.authorizeEJB(request,subjectToAuthorize);
  }
  performDelegation(methodMetaData,subjectToAuthorize);
  subjectManager.setCallerSubject(subjectToAuthorize);
  SecurityCookieImpl securityCookie=new SecurityCookieImpl(originalInvokedSubject,originalCallerSubject,subjectManager.getInvocationSubject(),subjectToAuthorize);
  return securityCookie;
}"
34664,"/** 
 * {@inheritDoc} 
 */
@Override public void postInvoke(EJBRequestData request,SecurityCookieImpl preInvokeResult) throws EJBAccessDeniedException {
  if (preInvokeResult != null) {
    SecurityCookieImpl securityCookie=preInvokeResult;
    if (securityCookie.getAdjustedInvokedSubject().equals(subjectManager.getInvocationSubject()) && securityCookie.getAdjustedReceivedSubject().equals(subjectManager.getCallerSubject())) {
      Subject invokedSubject=securityCookie.getInvokedSubject();
      Subject receivedSubject=securityCookie.getReceivedSubject();
      subjectManager.setCallerSubject(receivedSubject);
      subjectManager.setInvocationSubject(invokedSubject);
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void postInvoke(EJBRequestData request,SecurityCookieImpl preInvokeResult) throws EJBAccessDeniedException {
  if (preInvokeResult != null) {
    SecurityCookieImpl securityCookie=preInvokeResult;
    Subject invocationSubject=subjectManager.getInvocationSubject();
    Subject callerSubject=subjectManager.getCallerSubject();
    if ((invocationSubject == null || invocationSubject.equals(securityCookie.getAdjustedInvokedSubject())) && (callerSubject == null || callerSubject.equals(securityCookie.getAdjustedReceivedSubject()))) {
      Subject invokedSubject=securityCookie.getInvokedSubject();
      Subject receivedSubject=securityCookie.getReceivedSubject();
      subjectManager.setCallerSubject(receivedSubject);
      subjectManager.setInvocationSubject(invokedSubject);
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
  }
}"
34665,"/** 
 * Test the constructor for managed completable future that has no underlying action, backed by the specified executor as its default asynchronous execution facility. This test specifies an unmanaged executor to validate that managed completable future can tolerate other executors.
 */
@Test public void testActionlessFutureWithSpecifiedExecutor() throws Exception {
  BlockableIncrementFunction increment1=new BlockableIncrementFunction(""String_Node_Str"",null,null,false);
  BlockableIncrementFunction increment2=new BlockableIncrementFunction(""String_Node_Str"",null,null,false);
  BlockableIncrementFunction increment3=new BlockableIncrementFunction(""String_Node_Str"",null,null,false);
  BlockableIncrementFunction increment4=new BlockableIncrementFunction(""String_Node_Str"",null,null,false);
  CompletableFuture<Integer> cf0=new ManagedCompletableFuture<Integer>(sameThreadExecutor);
  CompletableFuture<Integer> cf1=cf0.thenApplyAsync(increment1);
  CompletableFuture<Integer> cf2=cf1.thenApplyAsync(increment2);
  CompletableFuture<Integer> cf3=cf2.thenApplyAsync(increment3,noContextExecutor);
  CompletableFuture<Integer> cf4=cf3.thenApplyAsync(increment4);
  assertFalse(cf0.isDone());
  assertFalse(cf1.isDone());
  assertFalse(cf2.isDone());
  assertFalse(cf3.isDone());
  assertFalse(cf4.isDone());
  assertTrue(cf0.complete(180));
  assertEquals(Integer.valueOf(181),cf1.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(Integer.valueOf(182),cf2.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(Integer.valueOf(183),cf3.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(Integer.valueOf(184),cf4.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  Thread servletThread=Thread.currentThread();
  assertEquals(servletThread,increment1.executionThread);
  assertEquals(servletThread,increment2.executionThread);
  String executorThreadName=increment3.executionThread.getName();
  assertTrue(executorThreadName,executorThreadName.startsWith(""String_Node_Str""));
  assertNotSame(servletThread,increment3.executionThread);
  assertEquals(increment3.executionThread,increment4.executionThread);
}","/** 
 * Test the constructor for managed completable future that has no underlying action, backed by the specified executor as its default asynchronous execution facility. This test specifies an unmanaged executor to validate that managed completable future can tolerate other executors.
 */
@Test public void testActionlessFutureWithSpecifiedExecutor() throws Exception {
  BlockableIncrementFunction increment1=new BlockableIncrementFunction(""String_Node_Str"",null,null,false);
  BlockableIncrementFunction increment2=new BlockableIncrementFunction(""String_Node_Str"",null,null,false);
  BlockableIncrementFunction increment3=new BlockableIncrementFunction(""String_Node_Str"",null,null,false);
  BlockableIncrementFunction increment4=new BlockableIncrementFunction(""String_Node_Str"",null,null,false);
  CompletableFuture<Integer> cf0=new ManagedCompletableFuture<Integer>(sameThreadExecutor);
  CompletableFuture<Integer> cf1=cf0.thenApplyAsync(increment1);
  CompletableFuture<Integer> cf2=cf1.thenApplyAsync(increment2);
  CompletableFuture<Integer> cf3=cf2.thenApplyAsync(increment3,noContextExecutor);
  CompletableFuture<Integer> cf4=cf3.thenApplyAsync(increment4);
  assertFalse(cf0.isDone());
  assertFalse(cf1.isDone());
  assertFalse(cf2.isDone());
  assertFalse(cf3.isDone());
  assertFalse(cf4.isDone());
  assertTrue(cf0.complete(180));
  assertEquals(Integer.valueOf(181),cf1.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(Integer.valueOf(182),cf2.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(Integer.valueOf(183),cf3.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(Integer.valueOf(184),cf4.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  Thread servletThread=Thread.currentThread();
  assertEquals(servletThread,increment1.executionThread);
  assertEquals(servletThread,increment2.executionThread);
  String executorThreadName=increment3.executionThread.getName();
  assertTrue(executorThreadName,executorThreadName.startsWith(""String_Node_Str""));
  assertNotSame(servletThread,increment3.executionThread);
  assertEquals(increment3.executionThread,increment4.executionThread);
  assertTrue(""String_Node_Str"" + increment3.executionThread + ""String_Node_Str""+ servletThread+ ""String_Node_Str""+ increment4.executionThread,increment4.executionThread.equals(increment3.executionThread) || increment4.executionThread.equals(servletThread));
}"
34666,"@Override public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {
  try {
    if (!unregisterMBeanIfDelayed(name)) {
      super.unregisterMBean(name);
    }
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@Override @FFDCIgnore({InstanceNotFoundException.class,MBeanRegistrationException.class}) public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {
  try {
    if (!unregisterMBeanIfDelayed(name)) {
      super.unregisterMBean(name);
    }
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanRegisterEvent(name,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
34667,"@Override public ObjectInstance registerMBean(Object object,ObjectName name) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  ObjectInstance oi=null;
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw new InstanceAlreadyExistsException();
  }
  try {
    oi=super.registerMBean(object,name);
  }
 catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  NotCompliantMBeanException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return oi;
}","@Override @FFDCIgnore({InstanceAlreadyExistsException.class,MBeanRegistrationException.class,NotCompliantMBeanException.class}) public ObjectInstance registerMBean(Object object,ObjectName name) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  ObjectInstance oi=null;
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw new InstanceAlreadyExistsException();
  }
  try {
    oi=super.registerMBean(object,name);
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  NotCompliantMBeanException e) {
    emitJMXMBeanRegisterEvent(name,object,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  return oi;
}"
34668,"@Override public Object invoke(ObjectName name,String operationName,Object[] params,String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {
  Object oi=null;
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    oi=super.invoke(name,operationName,params,signature);
  }
 catch (  ReflectionException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceNotFoundException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return oi;
}","@Override @FFDCIgnore({MBeanException.class,InstanceNotFoundException.class,ReflectionException.class}) public Object invoke(ObjectName name,String operationName,Object[] params,String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {
  Object oi=null;
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    oi=super.invoke(name,operationName,params,signature);
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  ReflectionException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceNotFoundException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanException e) {
    emitJMXMBeanInvokeEvent(name,operationName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  return oi;
}"
34669,"@Override public Object getAttribute(ObjectName name,String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return super.getAttribute(name,attribute);
}","@Override @FFDCIgnore({MBeanException.class,AttributeNotFoundException.class,InstanceNotFoundException.class,ReflectionException.class}) public Object getAttribute(ObjectName name,String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  Object oi=null;
  try {
    oi=super.getAttribute(name,attribute);
  }
 catch (  MBeanException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  AttributeNotFoundException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceNotFoundException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  ReflectionException e) {
    emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanAttributeAction(name,attribute,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return oi;
}"
34670,"/** 
 * @param className b * @param property
 * @return
 */
private boolean checkTypeMatch(String className,String[] classNames){
  for (  String test : classNames) {
    if (test.equals(className)) {
      return true;
    }
  }
  return false;
}","/** 
 * @param className
 * @param property
 * @return
 */
private boolean checkTypeMatch(String className,String[] classNames){
  for (  String test : classNames) {
    if (test.equals(className)) {
      return true;
    }
  }
  return false;
}"
34671,"@Override public ObjectInstance createMBean(String className,ObjectName name,ObjectName loaderName,Object[] params,String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
  ObjectInstance oi=null;
  registerMBeanIfDelayed(name);
  registerMBeanIfDelayed(loaderName);
  try {
    oi=super.createMBean(className,name,loaderName,params,signature);
  }
 catch (  ReflectionException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  NotCompliantMBeanException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return oi;
}","@Override @FFDCIgnore({ReflectionException.class,InstanceAlreadyExistsException.class,MBeanRegistrationException.class,MBeanException.class,NotCompliantMBeanException.class}) public ObjectInstance createMBean(String className,ObjectName name,ObjectName loaderName,Object[] params,String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
  ObjectInstance oi=null;
  registerMBeanIfDelayed(name);
  registerMBeanIfDelayed(loaderName);
  try {
    oi=super.createMBean(className,name,loaderName,params,signature);
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  ReflectionException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  MBeanException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  NotCompliantMBeanException e) {
    emitJMXMBeanCreateAction(name,className,loaderName,params,signature,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  return oi;
}"
34672,"@Override public AttributeList getAttributes(ObjectName name,String[] attributes) throws InstanceNotFoundException, ReflectionException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return super.getAttributes(name,attributes);
}","@Override @FFDCIgnore({InstanceNotFoundException.class,ReflectionException.class}) public AttributeList getAttributes(ObjectName name,String[] attributes) throws InstanceNotFoundException, ReflectionException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  AttributeList al=null;
  try {
    al=super.getAttributes(name,attributes);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  ReflectionException e) {
    emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXMBeanAttributeAction(name,attributes,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return al;
}"
34673,"@Override public void addNotificationListener(ObjectName name,ObjectName listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException {
  try {
    registerMBeanIfDelayed(name);
    registerMBeanIfDelayed(listener);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    super.addNotificationListener(name,listener,filter,handback);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@Override @FFDCIgnore(InstanceNotFoundException.class) public void addNotificationListener(ObjectName name,ObjectName listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException {
  try {
    registerMBeanIfDelayed(name);
    registerMBeanIfDelayed(listener);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    super.addNotificationListener(name,listener,filter,handback);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
34674,"@Override public void removeNotificationListener(ObjectName name,NotificationListener listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  super.removeNotificationListener(name,listener,filter,handback);
  emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@Override @FFDCIgnore({InstanceNotFoundException.class,ListenerNotFoundException.class}) public void removeNotificationListener(ObjectName name,NotificationListener listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
  try {
    registerMBeanIfDelayed(name);
  }
 catch (  NotCompliantMBeanException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
catch (  MBeanRegistrationException e) {
    emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    newInstanceNotFoundException(e);
  }
  try {
    super.removeNotificationListener(name,listener,filter,handback);
  }
 catch (  InstanceNotFoundException e) {
    emitJMXNotificationEvent(name,listener,null,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
catch (  ListenerNotFoundException e) {
    emitJMXNotificationEvent(name,listener,null,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    throw e;
  }
  emitJMXNotificationEvent(name,listener,filter,handback,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
34675,"public int processNextBuffer(@Sensitive WsByteBuffer buf) throws ProtocolException, FrameSizeException {
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + frameState);
  }
  if (frameState == FrameState.PAYLOAD_COMPLETE) {
    return Constants.BP_FRAME_ALREADY_COMPLETE;
  }
  if (countOfBuffers >= frameBuffers.length) {
    int originalSize=frameBuffers.length;
    WsByteBuffer[] temp=new WsByteBuffer[originalSize + BUFFER_ARRAY_GROWTH_SIZE];
    System.arraycopy(frameBuffers,0,temp,0,originalSize);
    frameBuffers=temp;
  }
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + countOfBuffers);
  }
  frameBuffers[countOfBuffers]=buf;
  countOfBuffers++;
  if (muxLink != null && muxLink.connection_preface_string_rcvd == false) {
    long bytesToProcess=bytesRemaining();
    if (bytesToProcess < 24) {
      return Constants.BP_FRAME_IS_NOT_COMPLETE;
    }
    currentBufferArrayIndex=0;
    try {
      if (checkConnectionPreface()) {
        frameState=FrameState.INIT;
        muxLink.processConnectionPrefaceMagic();
      }
 else {
        throw new ProtocolException(""String_Node_Str"");
      }
    }
 catch (    FrameSizeException e1) {
      throw new ProtocolException(""String_Node_Str"");
    }
  }
  if (frameState == FrameState.INIT) {
    byte frameSixthByte;
    long bytesToProcess=bytesRemaining();
    if (bytesToProcess < Frame.SIZE_FRAME_BEFORE_PAYLOAD) {
      return Constants.BP_FRAME_IS_NOT_COMPLETE;
    }
    currentBufferArrayIndex=0;
    int payloadLength=grabNext24BitInt();
    byteFrameType=grabNextByte();
    byte flags=grabNextByte();
    frameSixthByte=grabNextByte();
    int frameReserveBit=(byte)(frameSixthByte & Constants.MASK_80);
    if (frameReserveBit != 0) {
      frameReserveBit=1;
    }
    frameSixthByte=(byte)(frameSixthByte & Constants.MASK_7F);
    int streamId=new Integer(grabNext24BitInt(frameSixthByte));
    this.currentFrame=FrameFactory.getFrame(byteFrameType,streamId,payloadLength,flags,frameReserveBit == 1,Frame.FrameDirection.READ);
    if (this.currentFrame.getFrameType() == FrameTypes.UNKNOWN) {
      if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
    frameState=FrameState.FIND_PAYLOAD;
  }
  if (currentFrame != null && frameState == FrameState.FIND_PAYLOAD) {
    int returnValue=Constants.BP_FRAME_IS_NOT_COMPLETE;
    long count=0;
    int remaining=0;
    for (int i=0; i < countOfBuffers; i++) {
      remaining=frameBuffers[i].remaining();
      if (count + remaining <= currentFrame.getPayloadLength()) {
        count+=remaining;
        if (count == currentFrame.getPayloadLength()) {
          frameState=FrameState.PAYLOAD_COMPLETE;
          returnValue=Constants.BP_FRAME_EXACTLY_COMPLETED;
        }
      }
 else {
        int nextPosition=frameBuffers[i].position() + ((int)(currentFrame.getPayloadLength() - count));
        frameState=FrameState.PAYLOAD_COMPLETE;
        returnValue=nextPosition;
      }
    }
    return returnValue;
  }
  ProtocolException e=new ProtocolException(""String_Node_Str"");
  throw e;
}","public int processNextBuffer(@Sensitive WsByteBuffer buf) throws ProtocolException, FrameSizeException {
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + frameState);
  }
  if (frameState == FrameState.PAYLOAD_COMPLETE) {
    return Constants.BP_FRAME_ALREADY_COMPLETE;
  }
  if (countOfBuffers >= frameBuffers.length) {
    int originalSize=frameBuffers.length;
    WsByteBuffer[] temp=new WsByteBuffer[originalSize + BUFFER_ARRAY_GROWTH_SIZE];
    System.arraycopy(frameBuffers,0,temp,0,originalSize);
    frameBuffers=temp;
  }
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + countOfBuffers);
  }
  frameBuffers[countOfBuffers]=buf;
  countOfBuffers++;
  if (muxLink != null && muxLink.connection_preface_string_rcvd == false) {
    long bytesToProcess=bytesRemaining();
    if (bytesToProcess < 24) {
      return Constants.BP_FRAME_IS_NOT_COMPLETE;
    }
    currentBufferArrayIndex=0;
    try {
      if (checkConnectionPreface()) {
        frameState=FrameState.INIT;
        muxLink.processConnectionPrefaceMagic();
      }
 else {
        throw new ProtocolException(""String_Node_Str"");
      }
    }
 catch (    Http2Exception e) {
      throw new ProtocolException(""String_Node_Str"");
    }
  }
  if (frameState == FrameState.INIT) {
    byte frameSixthByte;
    long bytesToProcess=bytesRemaining();
    if (bytesToProcess < Frame.SIZE_FRAME_BEFORE_PAYLOAD) {
      return Constants.BP_FRAME_IS_NOT_COMPLETE;
    }
    currentBufferArrayIndex=0;
    int payloadLength=grabNext24BitInt();
    byteFrameType=grabNextByte();
    byte flags=grabNextByte();
    frameSixthByte=grabNextByte();
    int frameReserveBit=(byte)(frameSixthByte & Constants.MASK_80);
    if (frameReserveBit != 0) {
      frameReserveBit=1;
    }
    frameSixthByte=(byte)(frameSixthByte & Constants.MASK_7F);
    int streamId=new Integer(grabNext24BitInt(frameSixthByte));
    this.currentFrame=FrameFactory.getFrame(byteFrameType,streamId,payloadLength,flags,frameReserveBit == 1,Frame.FrameDirection.READ);
    if (this.currentFrame.getFrameType() == FrameTypes.UNKNOWN) {
      if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
    frameState=FrameState.FIND_PAYLOAD;
  }
  if (currentFrame != null && frameState == FrameState.FIND_PAYLOAD) {
    int returnValue=Constants.BP_FRAME_IS_NOT_COMPLETE;
    long count=0;
    int remaining=0;
    for (int i=0; i < countOfBuffers; i++) {
      remaining=frameBuffers[i].remaining();
      if (count + remaining <= currentFrame.getPayloadLength()) {
        count+=remaining;
        if (count == currentFrame.getPayloadLength()) {
          frameState=FrameState.PAYLOAD_COMPLETE;
          returnValue=Constants.BP_FRAME_EXACTLY_COMPLETED;
        }
      }
 else {
        int nextPosition=frameBuffers[i].position() + ((int)(currentFrame.getPayloadLength() - count));
        frameState=FrameState.PAYLOAD_COMPLETE;
        returnValue=nextPosition;
      }
    }
    return returnValue;
  }
  ProtocolException e=new ProtocolException(""String_Node_Str"");
  throw e;
}"
34676,"/** 
 * Handle the receipt of the MAGIC string from the client: initialize the control stream 0 and and send out a settings frame to acknowledge the MAGIC string
 */
public void processConnectionPrefaceMagic(){
  connection_preface_string_rcvd=true;
  H2StreamProcessor controlStream=createNewInboundLink(0);
  controlStream.completeConnectionPreface();
  connection_preface_sent=true;
}","/** 
 * Handle the receipt of the MAGIC string from the client: initialize the control stream 0 and and send out a settings frame to acknowledge the MAGIC string
 * @throws StreamClosedException
 */
public void processConnectionPrefaceMagic() throws ProtocolException, StreamClosedException {
  connection_preface_string_rcvd=true;
  H2StreamProcessor controlStream=createNewInboundLink(0);
  controlStream.completeConnectionPreface();
  connection_preface_sent=true;
}"
34677,"@Override public void run(){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  h2HttpInboundLinkWrap.ready(this.h2HttpInboundLinkWrap.vc);
  headersCompleted=false;
}","@Override public void run(){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (!muxLink.checkIfGoAwaySendingOrClosing()) {
    h2HttpInboundLinkWrap.ready(this.h2HttpInboundLinkWrap.vc);
  }
  headersCompleted=false;
}"
34678,"/** 
 * Complete the connection preface. At this point, we should have received the client connection preface string. Now we need to make sure that the client sent a settings frame along with the preface, update our settings, and send an empty settings frame in response to the client preface.
 */
protected void completeConnectionPreface(){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  if (Constants.SPEC_INITIAL_WINDOW_SIZE != this.streamReadWindowSize) {
    currentFrame=new FrameSettings(0,-1,-1,-1,(int)this.streamReadWindowSize,-1,-1,false);
  }
 else {
    currentFrame=new FrameSettings();
  }
  this.frameType=FrameTypes.SETTINGS;
  try {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ currentFrame.getFrameType().toString()+ ""String_Node_Str""+ Direction.WRITING_OUT+ ""String_Node_Str""+ muxLink.hashCode());
    }
    this.writeFrameSync();
  }
 catch (  FlowControlException e) {
  }
  if (Constants.SPEC_INITIAL_WINDOW_SIZE != muxLink.maxReadWindowSize) {
    currentFrame=new FrameWindowUpdate(0,(int)muxLink.maxReadWindowSize,false);
    try {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ currentFrame.getFrameType().toString()+ ""String_Node_Str""+ Direction.WRITING_OUT+ ""String_Node_Str""+ muxLink.hashCode());
      }
      this.writeFrameSync();
    }
 catch (    FlowControlException e) {
    }
  }
}","/** 
 * Complete the connection preface. At this point, we should have received the client connection preface string. Now we need to make sure that the client sent a settings frame along with the preface, update our settings, and send an empty settings frame in response to the client preface.
 * @throws StreamClosedException
 * @throws ProtocolException
 */
protected void completeConnectionPreface() throws ProtocolException, StreamClosedException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  FrameSettings settings;
  if (Constants.SPEC_INITIAL_WINDOW_SIZE != this.streamReadWindowSize) {
    settings=new FrameSettings(0,-1,-1,-1,(int)this.streamReadWindowSize,-1,-1,false);
  }
 else {
    settings=new FrameSettings();
  }
  this.frameType=FrameTypes.SETTINGS;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ currentFrame.getFrameType().toString()+ ""String_Node_Str""+ Direction.WRITING_OUT+ ""String_Node_Str""+ muxLink.hashCode());
  }
  this.processNextFrame(settings,Direction.WRITING_OUT);
  if (Constants.SPEC_INITIAL_WINDOW_SIZE != muxLink.maxReadWindowSize) {
    FrameWindowUpdate wup=new FrameWindowUpdate(0,(int)muxLink.maxReadWindowSize,false);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ currentFrame.getFrameType().toString()+ ""String_Node_Str""+ Direction.WRITING_OUT+ ""String_Node_Str""+ muxLink.hashCode());
    }
    this.processNextFrame(wup,Direction.WRITING_OUT);
  }
}"
34679,"@Override public boolean authenticate(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  JaspiService jaspiService=null;
  boolean isNewAuthenticate=false;
  boolean isProviderRegistered=false;
  if (isJaspiEnabled) {
    jaspiService=(JaspiService)webAuthenticatorRef.getService(""String_Node_Str"");
    isNewAuthenticate=jaspiService.isProcessingNewAuthentication(req);
  }
  if (!isJaspiEnabled || !isNewAuthenticate) {
    Subject callerSubject=subjectManager.getCallerSubject();
    if (!subjectHelper.isUnauthenticated(callerSubject)) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())       Tr.debug(tc,""String_Node_Str"");
      return true;
    }
  }
  WebReply webReply=PERMIT_REPLY;
  boolean result=true;
  WebRequest webRequest=new WebRequestImpl(req,resp,getSecurityMetadata(),webAppSecConfig);
  webRequest.setRequestAuthenticate(true);
  AuthenticationResult authResult=null;
  if (isJaspiEnabled && jaspiService.isAnyProviderRegistered(webRequest)) {
    isProviderRegistered=true;
    authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
  }
  if (authResult == null || authResult.getStatus() == AuthResult.CONTINUE) {
    authResult=authenticateRequest(webRequest);
  }
  if (authResult.getStatus() == AuthResult.SUCCESS) {
    getAuthenticateApi().postProgrammaticAuthenticate(req,resp,authResult,true,!isProviderRegistered);
  }
 else {
    String realm=authResult.realm;
    if (realm == null) {
      realm=collabUtils.getUserRegistryRealm(securityServiceRef);
    }
    webReply=createReplyForAuthnFailure(authResult,realm);
    result=false;
  }
  authResult.setTargetRealm(authResult.realm != null ? authResult.realm : collabUtils.getUserRegistryRealm(securityServiceRef));
  if (!resp.isCommitted() && webReply != null) {
    webReply.writeResponse(resp);
  }
  int statusCode=webReply != null ? Integer.valueOf(webReply.getStatusCode()) : resp.getStatus();
  Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,statusCode);
  return result;
}","@Override public boolean authenticate(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  JaspiService jaspiService=null;
  boolean isNewAuthenticate=false;
  if (isJaspiEnabled) {
    jaspiService=(JaspiService)webAuthenticatorRef.getService(""String_Node_Str"");
    isNewAuthenticate=jaspiService.isProcessingNewAuthentication(req);
  }
  if (!isJaspiEnabled || !isNewAuthenticate) {
    Subject callerSubject=subjectManager.getCallerSubject();
    if (!subjectHelper.isUnauthenticated(callerSubject)) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())       Tr.debug(tc,""String_Node_Str"");
      return true;
    }
  }
  WebReply webReply=PERMIT_REPLY;
  boolean result=true;
  WebRequest webRequest=new WebRequestImpl(req,resp,getSecurityMetadata(),webAppSecConfig);
  webRequest.setRequestAuthenticate(true);
  AuthenticationResult authResult=null;
  if (isJaspiEnabled && jaspiService.isAnyProviderRegistered(webRequest)) {
    authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
  }
  if (authResult == null || authResult.getStatus() == AuthResult.CONTINUE) {
    authResult=authenticateRequest(webRequest);
  }
  if (authResult.getStatus() == AuthResult.SUCCESS) {
    getAuthenticateApi().postProgrammaticAuthenticate(req,resp,authResult,true,!isNewAuthenticate);
  }
 else {
    String realm=authResult.realm;
    if (realm == null) {
      realm=collabUtils.getUserRegistryRealm(securityServiceRef);
    }
    webReply=createReplyForAuthnFailure(authResult,realm);
    result=false;
  }
  authResult.setTargetRealm(authResult.realm != null ? authResult.realm : collabUtils.getUserRegistryRealm(securityServiceRef));
  if (!resp.isCommitted() && webReply != null) {
    webReply.writeResponse(resp);
  }
  int statusCode=webReply != null ? Integer.valueOf(webReply.getStatusCode()) : resp.getStatus();
  Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,statusCode);
  return result;
}"
34680,"@BeforeClass public static void setUp() throws Exception {
  client.addIgnoreErrors(""String_Node_Str"");
  JavaArchive appClientSecurity=ShrinkWrap.create(JavaArchive.class,""String_Node_Str"").addClass(""String_Node_Str"").addClass(""String_Node_Str"").addClass(""String_Node_Str"").addClass(""String_Node_Str"").add(new FileAsset(new File(""String_Node_Str"")),""String_Node_Str"").add(new FileAsset(new File(""String_Node_Str"")),""String_Node_Str"");
  EnterpriseArchive appClientSecurityEar=ShrinkWrap.create(EnterpriseArchive.class,""String_Node_Str"").add(new FileAsset(new File(""String_Node_Str"")),""String_Node_Str"").addAsModule(appClientSecurity);
  ShrinkHelper.exportToClient(client,""String_Node_Str"",appClientSecurityEar);
}","@BeforeClass public static void setUp() throws Exception {
  client.addIgnoreErrors(""String_Node_Str"");
  JavaArchive appClientSecurity=ShrinkWrap.create(JavaArchive.class,""String_Node_Str"").addClass(""String_Node_Str"").addClass(""String_Node_Str"").addClass(""String_Node_Str"").addClass(""String_Node_Str"").add(new FileAsset(new File(""String_Node_Str"")),""String_Node_Str"").add(new FileAsset(new File(""String_Node_Str"")),""String_Node_Str"");
  EnterpriseArchive appClientSecurityEar=ShrinkWrap.create(EnterpriseArchive.class,""String_Node_Str"").add(new FileAsset(new File(""String_Node_Str"")),""String_Node_Str"").add(new FileAsset(new File(""String_Node_Str"")),""String_Node_Str"").addAsModule(appClientSecurity);
  ShrinkHelper.exportToClient(client,""String_Node_Str"",appClientSecurityEar);
}"
34681,"private boolean getGroupsByMembership(Entity entity,LdapEntry ldapEntry,String[] bases,int level,List<String> propNames,String groupDN) throws WIMException {
  final String METHODNAME=""String_Node_Str"";
  boolean nested=(level == 0 && iLdapConfigMgr.getMembershipAttributeScope() == LDAP_DIRECT_GROUP_MEMBERSHIP);
  if (!nested && (iLdapConfigMgr.isRecursiveSearch()))   nested=true;
  boolean isInGrp=false;
  List<String> supportedProps=iLdapConfigMgr.getSupportedProperties(SchemaConstants.DO_GROUP,propNames);
  String mbrshipAttrName=iLdapConfigMgr.getMembershipAttribute();
  Attribute mbrshipAttr=ldapEntry.getAttributes().get(mbrshipAttrName);
  try {
    if (mbrshipAttr == null || (mbrshipAttr.size() == 1 && mbrshipAttr.get(0) == null)) {
      if (iLdapConfigMgr.getLdapType().startsWith(""String_Node_Str"") && mbrshipAttrName != null && mbrshipAttrName.equalsIgnoreCase(LDAP_ATTR_IBM_ALL_GROUP))       isInGrp=false;
 else       isInGrp=getGroupsByMember(entity,ldapEntry,bases,level,supportedProps,groupDN);
      return isInGrp;
    }
 else     if (mbrshipAttr.size() == 0) {
      isInGrp=false;
      return isInGrp;
    }
    Map<String,Attribute> DNMbrshipMap=null;
    if (nested) {
      DNMbrshipMap=new HashMap<String,Attribute>();
    }
    Set<String> groupsToDo=new HashSet<String>();
    List<String> groupTypes=iLdapConfigMgr.getGroupTypes();
    NamingEnumeration<?> enm=mbrshipAttr.getAll();
    while (enm.hasMoreElements()) {
      String dn=(String)enm.nextElement();
      dn=LdapHelper.getValidDN(dn);
      if (groupDN != null && groupDN.equalsIgnoreCase(dn)) {
        isInGrp=true;
        return isInGrp;
      }
      if (!LdapHelper.isUnderBases(dn,bases)) {
        continue;
      }
      List grpTypes=iLdapConfigMgr.getGroupTypes();
      Set entityType=new HashSet(groupTypes);
      String entityTypeFilter=iLdapConfigMgr.getEntityTypesFilter(entityType);
      LdapEntry grpEntry=null;
      Set grpEntries=null;
      try {
        grpEntries=iLdapConn.searchEntities(dn,entityTypeFilter,null,SearchControls.OBJECT_SCOPE,grpTypes,supportedProps,true,false);
        if (grpEntries != null) {
          Iterator itr=grpEntries.iterator();
          while (itr.hasNext())           grpEntry=(LdapEntry)itr.next();
        }
      }
 catch (      EntityNotFoundException e) {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,METHODNAME + ""String_Node_Str"" + dn+ ""String_Node_Str"");
        }
        continue;
      }
      if (grpEntry != null && !iLdapConfigMgr.isGroup(grpEntry.getType())) {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,METHODNAME + ""String_Node_Str"" + dn+ ""String_Node_Str"");
        }
        continue;
      }
      if (grpEntry != null && entity != null) {
        createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,grpEntry,supportedProps);
      }
      if (grpEntry != null && nested) {
        String key=dn.toLowerCase();
        DNMbrshipMap.put(key,grpEntry.getAttributes().get(mbrshipAttrName));
        groupsToDo.add(key);
      }
    }
    Map<String,LdapEntry> dynaGrpMap=null;
    Map<String,LdapURL[]> dynaGrpURLsMap=null;
    boolean findDynaGrp=iLdapConfigMgr.getMembershipAttributeScope() != LDAP_ALL_GROUP_MEMBERSHIP && iLdapConfigMgr.supportDynamicGroup();
    if (findDynaGrp) {
      dynaGrpMap=iLdapConn.getDynamicGroups(bases,supportedProps,true);
      dynaGrpURLsMap=new HashMap<String,LdapURL[]>(dynaGrpMap.size());
      Set<Map.Entry<String,LdapEntry>> dynaGrpMapEntrySet=dynaGrpMap.entrySet();
      for (      Map.Entry<String,LdapEntry> dynaEntry : dynaGrpMapEntrySet) {
        String dynaGrpDn=dynaEntry.getKey();
        String dynaGrpKey=dynaGrpDn.toLowerCase();
        LdapEntry dynaGrpEntry=dynaEntry.getValue();
        Attributes attrs=dynaGrpEntry.getAttributes();
        Attribute dynaMbrAttr=attrs.get(iLdapConfigMgr.getDynamicMemberAttribute(attrs.get(LDAP_ATTR_OBJECTCLASS)));
        if (dynaMbrAttr != null) {
          LdapURL[] ldapURLs=LdapHelper.getLdapURLs(dynaMbrAttr);
          if (ldapURLs != null && ldapURLs.length > 0) {
            dynaGrpURLsMap.put(dynaGrpDn,ldapURLs);
            if (!DNMbrshipMap.containsKey(dynaGrpKey) && iLdapConn.isMemberInURLQuery(ldapURLs,ldapEntry.getDN())) {
              if (groupDN != null && groupDN.equalsIgnoreCase(dynaGrpDn)) {
                isInGrp=true;
                return isInGrp;
              }
              if (entity != null) {
                createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,dynaGrpEntry,supportedProps);
              }
              if (nested) {
                DNMbrshipMap.put(dynaGrpKey,dynaGrpEntry.getAttributes().get(mbrshipAttrName));
                groupsToDo.add(dynaGrpKey);
              }
            }
          }
        }
      }
    }
    if (!nested && groupDN != null) {
      return isInGrp;
    }
    while (groupsToDo.size() > 0) {
      Set<String> nextGroups=new HashSet<String>();
      for (      String dn : groupsToDo) {
        Attribute grpMbrshipAttr=DNMbrshipMap.get(dn.toLowerCase());
        if (grpMbrshipAttr != null) {
          NamingEnumeration<?> grpEnum=grpMbrshipAttr.getAll();
          while (grpEnum.hasMoreElements()) {
            String grpDn=(String)grpEnum.nextElement();
            if (grpDn != null) {
              if (groupDN != null && groupDN.equalsIgnoreCase(grpDn)) {
                isInGrp=true;
                return isInGrp;
              }
              if (!LdapHelper.isUnderBases(grpDn,bases)) {
                continue;
              }
              String grpKey=grpDn.toLowerCase();
              if (DNMbrshipMap.containsKey(grpKey)) {
                continue;
              }
              LdapEntry grpEntry=null;
              Set grpEntries=null;
              List grpTypes=iLdapConfigMgr.getGroupTypes();
              Set entityType=new HashSet(groupTypes);
              String entityTypeFilter=iLdapConfigMgr.getEntityTypesFilter(entityType);
              try {
                grpEntries=iLdapConn.searchEntities(grpDn,entityTypeFilter,null,SearchControls.OBJECT_SCOPE,grpTypes,supportedProps,true,false);
                if (grpEntries != null) {
                  Iterator itr=grpEntries.iterator();
                  while (itr.hasNext())                   grpEntry=(LdapEntry)itr.next();
                }
              }
 catch (              EntityNotFoundException e) {
                if (tc.isDebugEnabled()) {
                  Tr.debug(tc,METHODNAME + ""String_Node_Str"" + grpDn+ ""String_Node_Str"");
                }
                continue;
              }
              if (grpEntry != null && !iLdapConfigMgr.isGroup(grpEntry.getType())) {
                if (tc.isDebugEnabled()) {
                  Tr.debug(tc,METHODNAME + ""String_Node_Str"" + grpDn+ ""String_Node_Str"");
                }
                continue;
              }
              if (grpEntry != null && entity != null) {
                createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,grpEntry,supportedProps);
              }
              if (grpEntry != null && nested) {
                DNMbrshipMap.put(grpKey,grpEntry.getAttributes().get(mbrshipAttrName));
                if (!groupsToDo.contains(grpKey)) {
                  nextGroups.add(grpKey);
                }
              }
            }
          }
        }
        if (findDynaGrp) {
          Set<Map.Entry<String,LdapURL[]>> dynaGrpUrlEntrySet=dynaGrpURLsMap.entrySet();
          for (          Map.Entry<String,LdapURL[]> dynaUrlEntry : dynaGrpUrlEntrySet) {
            String dynaGrpDn=dynaUrlEntry.getKey();
            String dynaGrpKey=dynaGrpDn.toLowerCase();
            if (!DNMbrshipMap.containsKey(dynaGrpKey) && iLdapConn.isMemberInURLQuery(dynaUrlEntry.getValue(),dn)) {
              if (groupDN != null && groupDN.equalsIgnoreCase(dynaGrpDn)) {
                isInGrp=true;
                return isInGrp;
              }
              LdapEntry dynaGrpEntry=dynaGrpMap.get(dynaGrpDn);
              if (entity != null) {
                createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,dynaGrpEntry,supportedProps);
              }
              DNMbrshipMap.put(dynaGrpKey,dynaGrpEntry.getAttributes().get(mbrshipAttrName));
              if (!groupsToDo.contains(dynaGrpKey)) {
                nextGroups.add(dynaGrpKey);
              }
            }
          }
        }
      }
      groupsToDo=nextGroups;
    }
  }
 catch (  NamingException e) {
    throw new WIMSystemException(WIMMessageKey.NAMING_EXCEPTION,Tr.formatMessage(tc,WIMMessageKey.NAMING_EXCEPTION,WIMMessageHelper.generateMsgParms(e.toString(true))));
  }
  return isInGrp;
}","private boolean getGroupsByMembership(Entity entity,LdapEntry ldapEntry,String[] bases,int level,List<String> propNames,String groupDN) throws WIMException {
  final String METHODNAME=""String_Node_Str"";
  boolean nested=(level == 0 && iLdapConfigMgr.getMembershipAttributeScope() == LDAP_DIRECT_GROUP_MEMBERSHIP);
  if (!nested && (iLdapConfigMgr.isRecursiveSearch()))   nested=true;
  boolean isInGrp=false;
  List<String> supportedProps=iLdapConfigMgr.getSupportedProperties(SchemaConstants.DO_GROUP,propNames);
  String mbrshipAttrName=iLdapConfigMgr.getMembershipAttribute();
  Attribute mbrshipAttr=ldapEntry.getAttributes().get(mbrshipAttrName);
  try {
    if (mbrshipAttr == null || (mbrshipAttr.size() == 1 && mbrshipAttr.get(0) == null)) {
      if (LdapConstants.IDS_LDAP_SERVER.equalsIgnoreCase(iLdapConfigMgr.getLdapType()) && mbrshipAttrName != null && mbrshipAttrName.equalsIgnoreCase(LDAP_ATTR_IBM_ALL_GROUP)) {
        isInGrp=false;
      }
 else {
        isInGrp=getGroupsByMember(entity,ldapEntry,bases,level,supportedProps,groupDN);
      }
      return isInGrp;
    }
 else     if (mbrshipAttr.size() == 0) {
      isInGrp=false;
      return isInGrp;
    }
    Map<String,Attribute> DNMbrshipMap=null;
    if (nested) {
      DNMbrshipMap=new HashMap<String,Attribute>();
    }
    Set<String> groupsToDo=new HashSet<String>();
    List<String> groupTypes=iLdapConfigMgr.getGroupTypes();
    NamingEnumeration<?> enm=mbrshipAttr.getAll();
    while (enm.hasMoreElements()) {
      String dn=(String)enm.nextElement();
      dn=LdapHelper.getValidDN(dn);
      if (groupDN != null && groupDN.equalsIgnoreCase(dn)) {
        isInGrp=true;
        return isInGrp;
      }
      if (!LdapHelper.isUnderBases(dn,bases)) {
        continue;
      }
      List grpTypes=iLdapConfigMgr.getGroupTypes();
      Set entityType=new HashSet(groupTypes);
      String entityTypeFilter=iLdapConfigMgr.getEntityTypesFilter(entityType);
      LdapEntry grpEntry=null;
      Set grpEntries=null;
      try {
        grpEntries=iLdapConn.searchEntities(dn,entityTypeFilter,null,SearchControls.OBJECT_SCOPE,grpTypes,supportedProps,true,false);
        if (grpEntries != null) {
          Iterator itr=grpEntries.iterator();
          while (itr.hasNext())           grpEntry=(LdapEntry)itr.next();
        }
      }
 catch (      EntityNotFoundException e) {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,METHODNAME + ""String_Node_Str"" + dn+ ""String_Node_Str"");
        }
        continue;
      }
      if (grpEntry != null && !iLdapConfigMgr.isGroup(grpEntry.getType())) {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,METHODNAME + ""String_Node_Str"" + dn+ ""String_Node_Str"");
        }
        continue;
      }
      if (grpEntry != null && entity != null) {
        createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,grpEntry,supportedProps);
      }
      if (grpEntry != null && nested) {
        String key=dn.toLowerCase();
        DNMbrshipMap.put(key,grpEntry.getAttributes().get(mbrshipAttrName));
        groupsToDo.add(key);
      }
    }
    Map<String,LdapEntry> dynaGrpMap=null;
    Map<String,LdapURL[]> dynaGrpURLsMap=null;
    boolean findDynaGrp=iLdapConfigMgr.getMembershipAttributeScope() != LDAP_ALL_GROUP_MEMBERSHIP && iLdapConfigMgr.supportDynamicGroup();
    if (findDynaGrp) {
      dynaGrpMap=iLdapConn.getDynamicGroups(bases,supportedProps,true);
      dynaGrpURLsMap=new HashMap<String,LdapURL[]>(dynaGrpMap.size());
      Set<Map.Entry<String,LdapEntry>> dynaGrpMapEntrySet=dynaGrpMap.entrySet();
      for (      Map.Entry<String,LdapEntry> dynaEntry : dynaGrpMapEntrySet) {
        String dynaGrpDn=dynaEntry.getKey();
        String dynaGrpKey=dynaGrpDn.toLowerCase();
        LdapEntry dynaGrpEntry=dynaEntry.getValue();
        Attributes attrs=dynaGrpEntry.getAttributes();
        Attribute dynaMbrAttr=attrs.get(iLdapConfigMgr.getDynamicMemberAttribute(attrs.get(LDAP_ATTR_OBJECTCLASS)));
        if (dynaMbrAttr != null) {
          LdapURL[] ldapURLs=LdapHelper.getLdapURLs(dynaMbrAttr);
          if (ldapURLs != null && ldapURLs.length > 0) {
            dynaGrpURLsMap.put(dynaGrpDn,ldapURLs);
            if (!DNMbrshipMap.containsKey(dynaGrpKey) && iLdapConn.isMemberInURLQuery(ldapURLs,ldapEntry.getDN())) {
              if (groupDN != null && groupDN.equalsIgnoreCase(dynaGrpDn)) {
                isInGrp=true;
                return isInGrp;
              }
              if (entity != null) {
                createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,dynaGrpEntry,supportedProps);
              }
              if (nested) {
                DNMbrshipMap.put(dynaGrpKey,dynaGrpEntry.getAttributes().get(mbrshipAttrName));
                groupsToDo.add(dynaGrpKey);
              }
            }
          }
        }
      }
    }
    if (!nested && groupDN != null) {
      return isInGrp;
    }
    while (groupsToDo.size() > 0) {
      Set<String> nextGroups=new HashSet<String>();
      for (      String dn : groupsToDo) {
        Attribute grpMbrshipAttr=DNMbrshipMap.get(dn.toLowerCase());
        if (grpMbrshipAttr != null) {
          NamingEnumeration<?> grpEnum=grpMbrshipAttr.getAll();
          while (grpEnum.hasMoreElements()) {
            String grpDn=(String)grpEnum.nextElement();
            if (grpDn != null) {
              if (groupDN != null && groupDN.equalsIgnoreCase(grpDn)) {
                isInGrp=true;
                return isInGrp;
              }
              if (!LdapHelper.isUnderBases(grpDn,bases)) {
                continue;
              }
              String grpKey=grpDn.toLowerCase();
              if (DNMbrshipMap.containsKey(grpKey)) {
                continue;
              }
              LdapEntry grpEntry=null;
              Set grpEntries=null;
              List grpTypes=iLdapConfigMgr.getGroupTypes();
              Set entityType=new HashSet(groupTypes);
              String entityTypeFilter=iLdapConfigMgr.getEntityTypesFilter(entityType);
              try {
                grpEntries=iLdapConn.searchEntities(grpDn,entityTypeFilter,null,SearchControls.OBJECT_SCOPE,grpTypes,supportedProps,true,false);
                if (grpEntries != null) {
                  Iterator itr=grpEntries.iterator();
                  while (itr.hasNext())                   grpEntry=(LdapEntry)itr.next();
                }
              }
 catch (              EntityNotFoundException e) {
                if (tc.isDebugEnabled()) {
                  Tr.debug(tc,METHODNAME + ""String_Node_Str"" + grpDn+ ""String_Node_Str"");
                }
                continue;
              }
              if (grpEntry != null && !iLdapConfigMgr.isGroup(grpEntry.getType())) {
                if (tc.isDebugEnabled()) {
                  Tr.debug(tc,METHODNAME + ""String_Node_Str"" + grpDn+ ""String_Node_Str"");
                }
                continue;
              }
              if (grpEntry != null && entity != null) {
                createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,grpEntry,supportedProps);
              }
              if (grpEntry != null && nested) {
                DNMbrshipMap.put(grpKey,grpEntry.getAttributes().get(mbrshipAttrName));
                if (!groupsToDo.contains(grpKey)) {
                  nextGroups.add(grpKey);
                }
              }
            }
          }
        }
        if (findDynaGrp) {
          Set<Map.Entry<String,LdapURL[]>> dynaGrpUrlEntrySet=dynaGrpURLsMap.entrySet();
          for (          Map.Entry<String,LdapURL[]> dynaUrlEntry : dynaGrpUrlEntrySet) {
            String dynaGrpDn=dynaUrlEntry.getKey();
            String dynaGrpKey=dynaGrpDn.toLowerCase();
            if (!DNMbrshipMap.containsKey(dynaGrpKey) && iLdapConn.isMemberInURLQuery(dynaUrlEntry.getValue(),dn)) {
              if (groupDN != null && groupDN.equalsIgnoreCase(dynaGrpDn)) {
                isInGrp=true;
                return isInGrp;
              }
              LdapEntry dynaGrpEntry=dynaGrpMap.get(dynaGrpDn);
              if (entity != null) {
                createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,dynaGrpEntry,supportedProps);
              }
              DNMbrshipMap.put(dynaGrpKey,dynaGrpEntry.getAttributes().get(mbrshipAttrName));
              if (!groupsToDo.contains(dynaGrpKey)) {
                nextGroups.add(dynaGrpKey);
              }
            }
          }
        }
      }
      groupsToDo=nextGroups;
    }
  }
 catch (  NamingException e) {
    throw new WIMSystemException(WIMMessageKey.NAMING_EXCEPTION,Tr.formatMessage(tc,WIMMessageKey.NAMING_EXCEPTION,WIMMessageHelper.generateMsgParms(e.toString(true))));
  }
  return isInGrp;
}"
34682,"/** 
 * @param entity
 * @param propNames
 * @param attrs
 * @throws WIMException NOTE: BEHAVIOR CHANGE USING APAR PM46133 Before: Properties having binary data-type were not being parsed and pushed into populated Entity. This method used to iterate every attribute returned by JNDI_CALL and parse them according to their Property-to-Attribute mapping from wimconfig.xml After: Whenever a LDAP returned object(attributes) ;then they'd be returned as DN: CN=myCN1,o=ibm ExtId: E525BE85647D750E882578E300444D6A UniqueName: CN=myCN1,o=ibm Type: PersonAccount Attributes: { dominounid=Attribute ID: dominounid Attribute values: E525BE85647D750E882578E300444D6A ; jpegphoto;binary=Attribute ID: jpegphoto;binary Attribute values: [B@4b3a4b3a ; objectclass=Attribute ID: objectclass Attribute values: inetorgperson,organizationalPerson,person,top ; sn=Attribute ID: sn Attribute values: mySN1 ; cn=Attribute ID: cn Attribute values: myCN1 } all attributes EXCEPT jpegphoto(binary type) are having a common syntax <attrName>=Attribute ID:<attrName> Attribute values:<someValue> Attributes of type binary have added it's type in the attribute name itself; hence method can't find/validate said attribute (jpegphoto;binary); hence fails to retrieve attribute and populate it's value in Entry. PS. These changes are not going to affect original behaviour; New changes will be serving binary dataType attributes too!
 */
private void populateEntity(Entity entity,List<String> propNames,Attributes attrs) throws WIMException {
  if (propNames == null || propNames.size() == 0) {
    return;
  }
  String entityType=entity.getTypeName();
  LdapEntity ldapEntity=iLdapConfigMgr.getLdapEntity(entityType);
  Set<String> allSupportedAttrs=ldapEntity.getAttributes();
  List<String> supportedProps=iLdapConfigMgr.getSupportedProperties(entityType,propNames);
  try {
    List<String> propVisitedList=new ArrayList<String>();
    for (NamingEnumeration<?> neu=attrs.getAll(); neu.hasMore(); ) {
      boolean contain=false;
      Attribute attr=(Attribute)neu.next();
      String attrName=attr.getID();
      int pos=attrName.indexOf(';');
      if (pos > 0) {
        attrName=attrName.substring(0,pos);
      }
      if (allSupportedAttrs.contains(attrName)) {
        contain=true;
      }
 else {
        for (        String curAttr : allSupportedAttrs) {
          if (curAttr.equalsIgnoreCase(attrName)) {
            contain=true;
            break;
          }
        }
      }
      if (!contain) {
        if (LDAP_ATTR_USER_PASSWORD.equalsIgnoreCase(attrName) || LDAP_ATTR_UNICODEPWD.equalsIgnoreCase(attrName))         contain=true;
      }
      Set<String> props=iLdapConfigMgr.getPropertyName(ldapEntity,attrName);
      boolean exclude=false;
      if (props.contains(""String_Node_Str"") && props.contains(""String_Node_Str"")) {
        exclude=true;
      }
      if (props.contains(""String_Node_Str"") && props.contains(""String_Node_Str"")) {
        exclude=true;
      }
      for (      String propName : props) {
        if (propName.equalsIgnoreCase(""String_Node_Str"") && exclude) {
          continue;
        }
        if (propName.equalsIgnoreCase(""String_Node_Str"") && exclude) {
          continue;
        }
        for (int i=0; i < supportedProps.size(); i++) {
          String reqPropName=supportedProps.get(i);
          if ((SchemaConstants.VALUE_ALL_PROPERTIES.equals(reqPropName) && contain) || reqPropName.equalsIgnoreCase(propName)) {
            Object prop=entity.get(propName);
            if ((!propVisitedList.contains(propName) || !attrName.equalsIgnoreCase(propName))) {
              setPropertyValue(entity,attr,propName,iLdapConfigMgr.getLdapAttribute(attrName));
              if (!propVisitedList.contains(propName)) {
                propVisitedList.add(propName);
              }
            }
            break;
          }
        }
      }
    }
  }
 catch (  NamingException e) {
    throw new WIMSystemException(WIMMessageKey.NAMING_EXCEPTION,Tr.formatMessage(tc,WIMMessageKey.NAMING_EXCEPTION,WIMMessageHelper.generateMsgParms(e.toString(true))));
  }
}","/** 
 * @param entity
 * @param propNames
 * @param attrs
 * @throws WIMException NOTE: BEHAVIOR CHANGE USING APAR PM46133 Before: Properties having binary data-type were not being parsed and pushed into populated Entity. This method used to iterate every attribute returned by JNDI_CALL and parse them according to their Property-to-Attribute mapping from wimconfig.xml After: Whenever a LDAP returned object(attributes) ;then they'd be returned as DN: CN=myCN1,o=ibm ExtId: E525BE85647D750E882578E300444D6A UniqueName: CN=myCN1,o=ibm Type: PersonAccount Attributes: { dominounid=Attribute ID: dominounid Attribute values: E525BE85647D750E882578E300444D6A ; jpegphoto;binary=Attribute ID: jpegphoto;binary Attribute values: [B@4b3a4b3a ; objectclass=Attribute ID: objectclass Attribute values: inetorgperson,organizationalPerson,person,top ; sn=Attribute ID: sn Attribute values: mySN1 ; cn=Attribute ID: cn Attribute values: myCN1 } all attributes EXCEPT jpegphoto(binary type) are having a common syntax <attrName>=Attribute ID:<attrName> Attribute values:<someValue> Attributes of type binary have added it's type in the attribute name itself; hence method can't find/validate said attribute (jpegphoto;binary); hence fails to retrieve attribute and populate it's value in Entry. PS. These changes are not going to affect original behaviour; New changes will be serving binary dataType attributes too!
 */
private void populateEntity(Entity entity,List<String> propNames,Attributes attrs) throws WIMException {
  if (propNames == null || propNames.size() == 0 || attrs == null) {
    return;
  }
  String entityType=entity.getTypeName();
  LdapEntity ldapEntity=iLdapConfigMgr.getLdapEntity(entityType);
  Set<String> allSupportedAttrs=ldapEntity.getAttributes();
  List<String> supportedProps=iLdapConfigMgr.getSupportedProperties(entityType,propNames);
  try {
    List<String> propVisitedList=new ArrayList<String>();
    for (NamingEnumeration<?> neu=attrs.getAll(); neu.hasMore(); ) {
      boolean contain=false;
      Attribute attr=(Attribute)neu.next();
      String attrName=attr.getID();
      int pos=attrName.indexOf(';');
      if (pos > 0) {
        attrName=attrName.substring(0,pos);
      }
      if (allSupportedAttrs.contains(attrName)) {
        contain=true;
      }
 else {
        for (        String curAttr : allSupportedAttrs) {
          if (curAttr.equalsIgnoreCase(attrName)) {
            contain=true;
            break;
          }
        }
      }
      if (!contain) {
        if (LDAP_ATTR_USER_PASSWORD.equalsIgnoreCase(attrName) || LDAP_ATTR_UNICODEPWD.equalsIgnoreCase(attrName))         contain=true;
      }
      Set<String> props=iLdapConfigMgr.getPropertyName(ldapEntity,attrName);
      boolean exclude=false;
      if (props.contains(""String_Node_Str"") && props.contains(""String_Node_Str"")) {
        exclude=true;
      }
      if (props.contains(""String_Node_Str"") && props.contains(""String_Node_Str"")) {
        exclude=true;
      }
      for (      String propName : props) {
        if (propName.equalsIgnoreCase(""String_Node_Str"") && exclude) {
          continue;
        }
        if (propName.equalsIgnoreCase(""String_Node_Str"") && exclude) {
          continue;
        }
        for (int i=0; i < supportedProps.size(); i++) {
          String reqPropName=supportedProps.get(i);
          if ((SchemaConstants.VALUE_ALL_PROPERTIES.equals(reqPropName) && contain) || reqPropName.equalsIgnoreCase(propName)) {
            Object prop=entity.get(propName);
            if ((!propVisitedList.contains(propName) || !attrName.equalsIgnoreCase(propName))) {
              setPropertyValue(entity,attr,propName,iLdapConfigMgr.getLdapAttribute(attrName));
              if (!propVisitedList.contains(propName)) {
                propVisitedList.add(propName);
              }
            }
            break;
          }
        }
      }
    }
  }
 catch (  NamingException e) {
    throw new WIMSystemException(WIMMessageKey.NAMING_EXCEPTION,Tr.formatMessage(tc,WIMMessageKey.NAMING_EXCEPTION,WIMMessageHelper.generateMsgParms(e.toString(true))));
  }
}"
34683,"private Object getDateString(Object ldapValue,boolean getCalendar) throws WIMSystemException {
  if (ldapValue instanceof Date) {
    return LdapHelper.getDateString((Date)ldapValue);
  }
  String timestampFormat=null;
  DateFormat dateFormat=null;
  StringBuffer originValue=new StringBuffer(ldapValue.toString());
  int pos=originValue.indexOf(""String_Node_Str"");
  if (pos == -1) {
    pos=originValue.indexOf(""String_Node_Str"");
  }
  if (pos != -1) {
    originValue.replace(pos,pos,""String_Node_Str"");
  }
  timestampFormat=iLdapConfigMgr.getTimestampFormat();
  if (timestampFormat != null) {
    dateFormat=new SimpleDateFormat(timestampFormat);
  }
 else {
    if (""String_Node_Str"".equalsIgnoreCase(iLdapConfigMgr.getLdapType())) {
      int position=originValue.indexOf(""String_Node_Str"");
      if (originValue.indexOf(""String_Node_Str"") == -1) {
        while (originValue.substring(0,position).length() < 21) {
          if (originValue.indexOf(""String_Node_Str"") == -1) {
            originValue.replace(position,position,""String_Node_Str"");
            position+=1;
          }
          originValue.replace(position,position,""String_Node_Str"");
          position=originValue.indexOf(""String_Node_Str"");
        }
      }
      dateFormat=new SimpleDateFormat(""String_Node_Str"");
      originValue=new StringBuffer(originValue.substring(0,18) + originValue.substring(21));
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(iLdapConfigMgr.getLdapType()) || ""String_Node_Str"".equalsIgnoreCase(iLdapConfigMgr.getLdapType()) || ""String_Node_Str"".equalsIgnoreCase(iLdapConfigMgr.getLdapType())) {
      dateFormat=new SimpleDateFormat(""String_Node_Str"");
    }
 else {
      if (originValue.toString().contains(""String_Node_Str"")) {
        dateFormat=new SimpleDateFormat(""String_Node_Str"");
      }
 else {
        dateFormat=new SimpleDateFormat(""String_Node_Str"");
      }
    }
  }
  Date date=null;
  try {
    date=dateFormat.parse(originValue.toString());
  }
 catch (  java.text.ParseException e) {
    throw new WIMSystemException(WIMMessageKey.SYSTEM_EXCEPTION,Tr.formatMessage(tc,WIMMessageKey.SYSTEM_EXCEPTION,WIMMessageHelper.generateMsgParms(e.toString())));
  }
  if (getCalendar)   return date;
 else   return LdapHelper.getDateString(date);
}","private Object getDateString(Object ldapValue,boolean getCalendar) throws WIMSystemException {
  if (ldapValue instanceof Date) {
    return LdapHelper.getDateString((Date)ldapValue);
  }
  String timestampFormat=null;
  DateFormat dateFormat=null;
  StringBuffer originValue=new StringBuffer(ldapValue.toString());
  int pos=originValue.indexOf(""String_Node_Str"");
  if (pos == -1) {
    pos=originValue.indexOf(""String_Node_Str"");
  }
  if (pos != -1) {
    originValue.replace(pos,pos,""String_Node_Str"");
  }
  timestampFormat=iLdapConfigMgr.getTimestampFormat();
  if (timestampFormat != null) {
    dateFormat=new SimpleDateFormat(timestampFormat);
  }
 else {
    if (LdapConstants.IDS_LDAP_SERVER.equalsIgnoreCase(iLdapConfigMgr.getLdapType())) {
      int position=originValue.indexOf(""String_Node_Str"");
      if (originValue.indexOf(""String_Node_Str"") == -1) {
        while (originValue.substring(0,position).length() < 21) {
          if (originValue.indexOf(""String_Node_Str"") == -1) {
            originValue.replace(position,position,""String_Node_Str"");
            position+=1;
          }
          originValue.replace(position,position,""String_Node_Str"");
          position=originValue.indexOf(""String_Node_Str"");
        }
      }
      dateFormat=new SimpleDateFormat(""String_Node_Str"");
      originValue=new StringBuffer(originValue.substring(0,18) + originValue.substring(21));
    }
 else     if (LdapConstants.SUN_LDAP_SERVER.equalsIgnoreCase(iLdapConfigMgr.getLdapType()) || LdapConstants.DOMINO_LDAP_SERVER.equalsIgnoreCase(iLdapConfigMgr.getLdapType()) || LdapConstants.NOVELL_LDAP_SERVER.equalsIgnoreCase(iLdapConfigMgr.getLdapType())) {
      dateFormat=new SimpleDateFormat(""String_Node_Str"");
    }
 else {
      if (originValue.toString().contains(""String_Node_Str"")) {
        dateFormat=new SimpleDateFormat(""String_Node_Str"");
      }
 else {
        dateFormat=new SimpleDateFormat(""String_Node_Str"");
      }
    }
  }
  Date date=null;
  try {
    date=dateFormat.parse(originValue.toString());
  }
 catch (  java.text.ParseException e) {
    throw new WIMSystemException(WIMMessageKey.SYSTEM_EXCEPTION,Tr.formatMessage(tc,WIMMessageKey.SYSTEM_EXCEPTION,WIMMessageHelper.generateMsgParms(e.toString())));
  }
  if (getCalendar)   return date;
 else   return LdapHelper.getDateString(date);
}"
34684,"/** 
 * Create an Entity object corresponding to the LdapEntry object returned by the LdapConnection object.
 * @param parentDO
 * @param propName
 * @param ldapEntry
 * @param propNames
 * @return
 * @throws WIMException
 */
private Entity createEntityFromLdapEntry(Object parentDO,String propName,LdapEntry ldapEntry,List<String> propNames) throws WIMException {
  String outEntityType=ldapEntry.getType();
  Entity outEntity=null;
  if (outEntityType != null) {
    if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_PERSON))     outEntity=new Person();
 else     if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_PERSON_ACCOUNT))     outEntity=new PersonAccount();
 else     if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_GROUP))     outEntity=new Group();
 else     outEntity=new Entity();
  }
 else {
    outEntity=new Entity();
  }
  if (parentDO instanceof Root) {
    if (SchemaConstants.DO_ENTITIES.equalsIgnoreCase(propName))     ((Root)parentDO).getEntities().add(outEntity);
  }
 else   if (parentDO instanceof Entity) {
    if (SchemaConstants.DO_GROUP.equalsIgnoreCase(propName))     ((Entity)parentDO).getGroups().add((Group)outEntity);
    if (SchemaConstants.DO_MEMBERS.equalsIgnoreCase(propName))     ((Group)parentDO).getMembers().add(outEntity);
    if (SchemaConstants.DO_CHILDREN.equalsIgnoreCase(propName))     ((Entity)parentDO).getChildren().add(outEntity);
  }
  IdentifierType outId=new IdentifierType();
  outEntity.setIdentifier(outId);
  outId.setUniqueName(ldapEntry.getUniqueName());
  outId.setExternalId(ldapEntry.getExtId());
  outId.setExternalName(ldapEntry.getDN());
  outId.setRepositoryId(reposId);
  String changeType=ldapEntry.getChangeType();
  if (changeType != null) {
    outEntity.setChangeType(changeType);
    if (SchemaConstants.CHANGETYPE_DELETE.equals(changeType) == false) {
      populateEntity(outEntity,propNames,ldapEntry.getAttributes());
    }
  }
 else {
    populateEntity(outEntity,propNames,ldapEntry.getAttributes());
  }
  return outEntity;
}","/** 
 * Create an Entity object corresponding to the LdapEntry object returned by the LdapConnection object.
 * @param parentDO
 * @param propName
 * @param ldapEntry
 * @param propNames
 * @return
 * @throws WIMException
 */
private Entity createEntityFromLdapEntry(Object parentDO,String propName,LdapEntry ldapEntry,List<String> propNames) throws WIMException {
  final String METHODNAME=""String_Node_Str"";
  String outEntityType=ldapEntry.getType();
  Entity outEntity=null;
  if (outEntityType != null) {
    if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_PERSON))     outEntity=new Person();
 else     if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_PERSON_ACCOUNT))     outEntity=new PersonAccount();
 else     if (outEntityType.equalsIgnoreCase(SchemaConstants.DO_GROUP))     outEntity=new Group();
 else     outEntity=new Entity();
  }
 else {
    outEntity=new Entity();
  }
  if (parentDO instanceof Root) {
    if (SchemaConstants.DO_ENTITIES.equalsIgnoreCase(propName))     ((Root)parentDO).getEntities().add(outEntity);
  }
 else   if (parentDO instanceof Entity) {
    if (SchemaConstants.DO_GROUP.equalsIgnoreCase(propName)) {
      if (outEntity instanceof Group) {
        ((Entity)parentDO).getGroups().add((Group)outEntity);
      }
 else {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,METHODNAME + ""String_Node_Str"" + outEntity);
        }
      }
    }
 else     if (SchemaConstants.DO_MEMBERS.equalsIgnoreCase(propName)) {
      ((Group)parentDO).getMembers().add(outEntity);
    }
 else     if (SchemaConstants.DO_CHILDREN.equalsIgnoreCase(propName)) {
      ((Entity)parentDO).getChildren().add(outEntity);
    }
  }
  IdentifierType outId=new IdentifierType();
  outEntity.setIdentifier(outId);
  outId.setUniqueName(ldapEntry.getUniqueName());
  outId.setExternalId(ldapEntry.getExtId());
  outId.setExternalName(ldapEntry.getDN());
  outId.setRepositoryId(reposId);
  String changeType=ldapEntry.getChangeType();
  if (changeType != null) {
    outEntity.setChangeType(changeType);
    if (SchemaConstants.CHANGETYPE_DELETE.equals(changeType) == false) {
      populateEntity(outEntity,propNames,ldapEntry.getAttributes());
    }
  }
 else {
    populateEntity(outEntity,propNames,ldapEntry.getAttributes());
  }
  return outEntity;
}"
34685,"/** 
 * @param entity
 * @param ldapEntry
 * @param bases
 * @param level
 * @param propNames
 * @param object
 */
private void getGroupsByOperationalAttribute(Entity entity,LdapEntry ldapEntry,String[] bases,int level,List<String> propNames) throws WIMException {
  String filter=""String_Node_Str"";
  List<String> grpTypes=iLdapConfigMgr.getGroupTypes();
  List<String> supportedProps=iLdapConfigMgr.getSupportedProperties(SchemaConstants.DO_GROUP,propNames);
  SearchResult result=iLdapConn.searchByOperationalAttribute(ldapEntry.getDN(),filter,grpTypes,supportedProps,""String_Node_Str"");
  if (result != null) {
    Attribute attribute=result.getAttributes().get(LDAP_ATTR_IBM_ALL_GROUP);
    if (attribute != null) {
      try {
        NamingEnumeration<?> groups=attribute.getAll();
        while (groups.hasMore()) {
          if (entity != null) {
            String groupDN=String.valueOf(groups.next());
            LdapEntry grpEntry=new LdapEntry(groupDN,null,groupDN,iLdapConfigMgr.getGroupTypes().get(0),null);
            createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,grpEntry,supportedProps);
          }
        }
      }
 catch (      NamingException e) {
        throw new WIMSystemException(WIMMessageKey.NAMING_EXCEPTION,Tr.formatMessage(tc,WIMMessageKey.NAMING_EXCEPTION,WIMMessageHelper.generateMsgParms(e.toString(true))));
      }
    }
  }
}","/** 
 * @param entity
 * @param ldapEntry
 * @param bases
 * @param level
 * @param propNames
 * @param object
 */
private void getGroupsByOperationalAttribute(Entity entity,LdapEntry ldapEntry,String[] bases,int level,List<String> propNames) throws WIMException {
  String filter=""String_Node_Str"";
  List<String> grpTypes=iLdapConfigMgr.getGroupTypes();
  List<String> supportedProps=iLdapConfigMgr.getSupportedProperties(SchemaConstants.DO_GROUP,propNames);
  SearchResult result=iLdapConn.searchByOperationalAttribute(ldapEntry.getDN(),filter,grpTypes,supportedProps,LdapConstants.LDAP_ATTR_IBM_ALL_GROUP);
  if (result != null) {
    Attribute attribute=result.getAttributes().get(LDAP_ATTR_IBM_ALL_GROUP);
    if (attribute != null) {
      try {
        NamingEnumeration<?> groups=attribute.getAll();
        while (groups.hasMore()) {
          if (entity != null) {
            String groupDN=String.valueOf(groups.next());
            LdapEntry grpEntry=iLdapConn.getEntityByIdentifier(groupDN,null,null,iLdapConfigMgr.getGroupTypes(),propNames,false,false);
            createEntityFromLdapEntry(entity,SchemaConstants.DO_GROUP,grpEntry,supportedProps);
          }
        }
      }
 catch (      NamingException e) {
        throw new WIMSystemException(WIMMessageKey.NAMING_EXCEPTION,Tr.formatMessage(tc,WIMMessageKey.NAMING_EXCEPTION,WIMMessageHelper.generateMsgParms(e.toString(true))));
      }
    }
  }
}"
34686,"@Trivial public boolean updateGroupMembership(){
  if (getLdapType().startsWith(""String_Node_Str"") || getLdapType().startsWith(""String_Node_Str""))   return true;
 else   return false;
}","@Trivial public boolean updateGroupMembership(){
  if (LdapConstants.DOMINO_LDAP_SERVER.equalsIgnoreCase(iLdapType) || LdapConstants.SUN_LDAP_SERVER.equalsIgnoreCase(iLdapType))   return true;
 else   return false;
}"
34687,"/** 
 * @return
 */
private String defaultDummyMember(){
  if (iLdapType.startsWith(LdapConstants.IDS_LDAP_SERVER) || iLdapType.startsWith(LdapConstants.DOMINO_LDAP_SERVER)) {
    return LdapConstants.LDAP_DUMMY_MEMBER_DEFAULT;
  }
 else   return null;
}","/** 
 * @return
 */
private String defaultDummyMember(){
  if (LdapConstants.IDS_LDAP_SERVER.equalsIgnoreCase(iLdapType) || LdapConstants.DOMINO_LDAP_SERVER.equalsIgnoreCase(iLdapType)) {
    return LdapConstants.LDAP_DUMMY_MEMBER_DEFAULT;
  }
 else   return null;
}"
34688,"/** 
 * Set the filters depending on the ldap type selected.
 * @param configProps
 */
private void setFilters(Map<String,Object> configProps){
  if (iLdapType == null)   return;
  String key=null;
  if (iLdapType.equalsIgnoreCase(LdapConstants.AD_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_ACTIVE_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.CUSTOM_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_CUSTOM_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.DOMINO_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_DOMINO_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.NOVELL_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_NOVELL_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.IDS_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_TDS_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.SUN_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_SUN_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.NETSCAPE_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_NETSCAPE_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.SECUREWAY_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_SECUREWAY_DIRECTORY_FILTERS;
  }
 else {
    return;
  }
  List<Map<String,Object>> filterList=Nester.nest(key,configProps);
  if (!filterList.isEmpty()) {
    Map<String,Object> props=filterList.get(0);
    if (props.get(ConfigConstants.CONFIG_USER_FILTER) != null)     iUserFilter=(String)props.get(ConfigConstants.CONFIG_USER_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_FILTER) != null)     iGroupFilter=(String)props.get(ConfigConstants.CONFIG_GROUP_FILTER);
    if (props.get(ConfigConstants.CONFIG_USER_ID_FILTER) != null)     iUserIdMap=(String)props.get(ConfigConstants.CONFIG_USER_ID_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_ID_FILTER) != null)     iGroupIdMap=(String)props.get(ConfigConstants.CONFIG_GROUP_ID_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_MEMBER_ID_FILTER) != null)     iGroupMemberIdMap=(String)props.get(ConfigConstants.CONFIG_GROUP_MEMBER_ID_FILTER);
    String objectClassStr=""String_Node_Str"";
    if (iLdapType.equalsIgnoreCase(LdapConstants.AD_LDAP_SERVER))     objectClassStr=""String_Node_Str"";
    int length=objectClassStr.length();
    if (iUserFilter != null) {
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_PERSON_ACCOUNT);
      if (ldapEntity != null) {
        Set<String> objClsSet=new HashSet<String>();
        int index=iUserFilter.indexOf(objectClassStr);
        while (index > -1) {
          int endIndex=iUserFilter.indexOf(""String_Node_Str"",index);
          String objectClass=iUserFilter.substring(index + length,endIndex);
          objClsSet.add(objectClass);
          index=endIndex + 1;
          index=iUserFilter.indexOf(objectClassStr,endIndex);
        }
        if (objClsSet.size() > 0) {
          ldapEntity.getObjectClasses().clear();
          ldapEntity.getObjectClasses().addAll(objClsSet);
        }
      }
      if (iLoginAttrs != null)       iLoginAttrs.remove(0);
      if (iLoginProps != null)       iLoginProps.remove(0);
      String pattern=""String_Node_Str"";
      int startIndex=0;
      boolean hasLoginProperties=true;
      LdapEntity acct=getLdapEntity(iPersonAccountTypes.get(iPersonAccountTypes.size() - 1));
      while (hasLoginProperties) {
        int index=iUserFilter.indexOf(pattern,startIndex);
        int beginIndex=index;
        if (index > -1) {
          for (; beginIndex > 0; beginIndex--) {
            if (iUserFilter.charAt(beginIndex) == ' ' || iUserFilter.charAt(beginIndex) == '(')             break;
          }
          String propName=iUserFilter.substring(beginIndex + 1,index);
          if (iLoginAttrs != null && !iLoginAttrs.contains(propName)) {
            if (tc.isDebugEnabled())             Tr.debug(tc,""String_Node_Str"" + propName + ""String_Node_Str"");
            iLoginAttrs.add(getAttributeName(acct,propName));
            iLoginProps.add(propName);
          }
          startIndex=index + 1;
        }
 else         hasLoginProperties=false;
      }
      if (ldapEntity != null)       ldapEntity.addPropertyAttributeMap(SchemaConstants.PROP_PRINCIPAL_NAME,iLoginAttrs.get(0));
    }
    if (iGroupFilter != null) {
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_GROUP);
      if (ldapEntity != null) {
        Set<String> objClsSet=new HashSet<String>();
        int index=iGroupFilter.indexOf(objectClassStr);
        while (index > -1) {
          int endIndex=iGroupFilter.indexOf(""String_Node_Str"",index);
          String objectClass=iGroupFilter.substring(index + length,endIndex);
          objClsSet.add(objectClass);
          index=endIndex + 1;
          index=iGroupFilter.indexOf(objectClassStr,endIndex);
        }
        if (objClsSet.size() > 0) {
          ldapEntity.getObjectClasses().clear();
          ldapEntity.getObjectClasses().addAll(objClsSet);
        }
      }
    }
    if (iUserIdMap != null) {
      StringTokenizer strtok=new StringTokenizer(iUserIdMap,""String_Node_Str"");
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_PERSON_ACCOUNT);
      if (ldapEntity != null) {
        List<String> rdnPropList=new ArrayList<String>();
        List<String> objClsList=new ArrayList<String>();
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          Set<String> propNames=null;
          if (LdapConstants.LDAP_ATTR_SAM_ACCOUNT_NAME.equalsIgnoreCase(attribute)) {
            propNames=getPropertyName(ldapEntity,""String_Node_Str"");
          }
 else           propNames=getPropertyName(ldapEntity,attribute);
          rdnPropList.add(propNames.iterator().next());
          if (!SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass))           objClsList.add(objectClass);
        }
        if (rdnPropList.size() > 0) {
          String[][] rdnProps=new String[rdnPropList.size()][];
          String[][] rdnAttrs=new String[rdnPropList.size()][];
          String rdnObjCls[][]=new String[objClsList.size()][];
          String objCls[]=new String[objClsList.size()];
          objCls=objClsList.toArray(objCls);
          for (int j=0; j < rdnPropList.size(); j++) {
            rdnProps[j]=LdapHelper.getRDNs(rdnPropList.get(j));
            rdnAttrs[j]=new String[rdnProps[j].length];
            for (int k=0; k < rdnProps[j].length; k++) {
              String rdnProp=rdnProps[j][k];
              rdnAttrs[j][k]=getAttributeName(ldapEntity,rdnProp);
            }
            if (objCls.length > 0) {
              rdnObjCls[j]=new String[objCls.length];
              rdnObjCls[j][0]=objCls[j];
            }
          }
          ldapEntity.setRDNProperties(rdnProps,rdnAttrs);
          if (isVMMRdnPropertiesDefined) {
            String updatedRdnAttrs[][]=null;
            String updatedRdnObjCls[][]=null;
            if (ldapEntity.getRDNAttributes().length > 0) {
              String orgRdnAttr[][]=ldapEntity.getRDNAttributes();
              updatedRdnAttrs=new String[orgRdnAttr.length + rdnAttrs.length][];
              for (int i=0; i < orgRdnAttr.length; i++) {
                updatedRdnAttrs[i]=new String[orgRdnAttr[i].length];
                for (int j=0; j < orgRdnAttr[i].length; j++)                 updatedRdnAttrs[i][j]=orgRdnAttr[i][j];
              }
              int len=orgRdnAttr.length;
              for (int i=0; i < rdnAttrs.length; i++) {
                updatedRdnAttrs[len]=new String[rdnAttrs[i].length];
                for (int j=0; j < rdnAttrs[i].length; j++)                 updatedRdnAttrs[len][j]=rdnAttrs[i][j];
                len++;
              }
            }
            if (ldapEntity.getRDNObjectclasses().length > 0) {
              String orgRdnObjCls[][]=ldapEntity.getRDNObjectclasses();
              updatedRdnObjCls=new String[orgRdnObjCls.length + rdnObjCls.length][];
              for (int i=0; i < orgRdnObjCls.length; i++) {
                updatedRdnObjCls[i]=new String[orgRdnObjCls[i].length];
                for (int j=0; j < orgRdnObjCls[i].length; j++)                 updatedRdnObjCls[i][j]=orgRdnObjCls[i][j];
              }
              int len=orgRdnObjCls.length;
              for (int i=0; i < rdnObjCls.length; i++) {
                updatedRdnObjCls[len]=new String[rdnObjCls[i].length];
                for (int j=0; j < rdnObjCls[i].length; j++)                 updatedRdnObjCls[len][j]=rdnObjCls[i][j];
                len++;
              }
            }
            ldapEntity.setRDNAttributes(updatedRdnAttrs,updatedRdnObjCls);
          }
 else {
            ldapEntity.setRDNAttributes(rdnAttrs,rdnObjCls);
          }
          if (ldapEntity.needTranslateRDN()) {
            iNeedTranslateRDN=true;
          }
        }
      }
 else {
        if (tc.isDebugEnabled())         Tr.debug(tc,""String_Node_Str"");
      }
    }
    if (iGroupIdMap != null) {
      StringTokenizer strtok=new StringTokenizer(iGroupIdMap,""String_Node_Str"");
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_GROUP);
      if (ldapEntity != null) {
        List<String> rdnPropList=new ArrayList<String>();
        Set<String> objClsSet=new HashSet<String>();
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          Set<String> propNames=getPropertyName(ldapEntity,attribute);
          rdnPropList.add(propNames.iterator().next());
          if (!SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass))           objClsSet.add(objectClass);
        }
        if (rdnPropList.size() > 0) {
          String[][] rdnProps=new String[rdnPropList.size()][];
          String[][] rdnAttrs=new String[rdnPropList.size()][];
          for (int j=0; j < rdnPropList.size(); j++) {
            rdnProps[j]=LdapHelper.getRDNs(rdnPropList.get(j));
            rdnAttrs[j]=new String[rdnProps[j].length];
            for (int k=0; k < rdnProps[j].length; k++) {
              String rdnProp=rdnProps[j][k];
              rdnAttrs[j][k]=getAttributeName(ldapEntity,rdnProp);
            }
          }
          ldapEntity.setRDNProperties(rdnProps,rdnAttrs);
          if (ldapEntity.needTranslateRDN()) {
            iNeedTranslateRDN=true;
          }
        }
      }
 else       if (tc.isDebugEnabled())       Tr.debug(tc,""String_Node_Str"");
    }
    if (iGroupMemberIdMap != null) {
      iLdapOperationalAttr=(iGroupMemberIdMap.contains(IBM_ALL_GROUPS));
      if (iDefaultMembershipAttr) {
        iMembershipAttrName=null;
      }
      LdapEntity ldapEntity=null;
      List<String> grpTypes=getGroupTypes();
      List<String> objectClasses=new ArrayList<String>();
      for (int i=0; i < grpTypes.size(); i++) {
        ldapEntity=getLdapEntity(grpTypes.get(i));
        List<String> objClses=ldapEntity.getObjectClasses();
        for (int j=0; j < objClses.size(); j++) {
          String objCls=objClses.get(j);
          objectClasses.add(objCls);
        }
      }
      List<String> attrScopes=new ArrayList<String>();
      List<String> attrNames=new ArrayList<String>();
      StringTokenizer strtok=new StringTokenizer(iGroupMemberIdMap,""String_Node_Str"");
      if (ldapEntity != null) {
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          String scope=LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP_STRING;
          if (SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass)) {
            for (int j=0; j < objectClasses.size(); j++) {
              iMbrAttrMap.put(objectClasses.get(j),attribute);
            }
          }
 else {
            iMbrAttrMap.put(objectClass.toLowerCase(),attribute);
          }
          if (!attrNames.contains(attribute)) {
            attrNames.add(attribute);
            attrScopes.add(scope);
          }
          if (objectClass != null && !objectClasses.contains(objectClass.toLowerCase())) {
            if (getGroupTypes() != null && getGroupTypes().size() > 0)             getLdapEntity(getGroupTypes().get(0)).addObjectClass(objectClass);
          }
        }
        iMbrAttrs=attrNames.toArray(new String[0]);
        iMbrAttrScope=new short[iMbrAttrs.length];
        iMbrAttrsAllScope=true;
        iMbrAttrsNestedScope=true;
        for (int i=0; i < attrScopes.size(); i++) {
          iMbrAttrScope[i]=LdapHelper.getMembershipScope(attrScopes.get(i));
          if (iMbrAttrScope[i] == LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP) {
            iMbrAttrsAllScope=false;
            iMbrAttrsNestedScope=false;
          }
 else           if (iMbrAttrScope[i] == LdapConstants.LDAP_NESTED_GROUP_MEMBERSHIP) {
            iMbrAttrsAllScope=false;
          }
        }
      }
 else       if (tc.isDebugEnabled())       Tr.debug(tc,""String_Node_Str"");
    }
    if (checkIfRacf()) {
      initializeRacfFilters();
    }
    resetEntitySearchFilters();
  }
}","/** 
 * Set the filters depending on the ldap type selected.
 * @param configProps
 */
private void setFilters(Map<String,Object> configProps){
  if (iLdapType == null)   return;
  String key=null;
  if (iLdapType.equalsIgnoreCase(LdapConstants.AD_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_ACTIVE_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.CUSTOM_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_CUSTOM_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.DOMINO_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_DOMINO_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.NOVELL_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_NOVELL_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.IDS_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_TDS_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.SUN_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_SUN_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.NETSCAPE_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_NETSCAPE_DIRECTORY_FILTERS;
  }
 else   if (iLdapType.equalsIgnoreCase(LdapConstants.SECUREWAY_LDAP_SERVER)) {
    key=ConfigConstants.CONFIG_SECUREWAY_DIRECTORY_FILTERS;
  }
 else {
    return;
  }
  List<Map<String,Object>> filterList=Nester.nest(key,configProps);
  if (!filterList.isEmpty()) {
    Map<String,Object> props=filterList.get(0);
    if (props.get(ConfigConstants.CONFIG_USER_FILTER) != null)     iUserFilter=(String)props.get(ConfigConstants.CONFIG_USER_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_FILTER) != null)     iGroupFilter=(String)props.get(ConfigConstants.CONFIG_GROUP_FILTER);
    if (props.get(ConfigConstants.CONFIG_USER_ID_FILTER) != null)     iUserIdMap=(String)props.get(ConfigConstants.CONFIG_USER_ID_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_ID_FILTER) != null)     iGroupIdMap=(String)props.get(ConfigConstants.CONFIG_GROUP_ID_FILTER);
    if (props.get(ConfigConstants.CONFIG_GROUP_MEMBER_ID_FILTER) != null)     iGroupMemberIdMap=(String)props.get(ConfigConstants.CONFIG_GROUP_MEMBER_ID_FILTER);
    String objectClassStr=""String_Node_Str"";
    if (iLdapType.equalsIgnoreCase(LdapConstants.AD_LDAP_SERVER))     objectClassStr=""String_Node_Str"";
    int length=objectClassStr.length();
    if (iUserFilter != null) {
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_PERSON_ACCOUNT);
      if (ldapEntity != null) {
        Set<String> objClsSet=new HashSet<String>();
        int index=iUserFilter.indexOf(objectClassStr);
        while (index > -1) {
          int endIndex=iUserFilter.indexOf(""String_Node_Str"",index);
          String objectClass=iUserFilter.substring(index + length,endIndex);
          objClsSet.add(objectClass);
          index=endIndex + 1;
          index=iUserFilter.indexOf(objectClassStr,endIndex);
        }
        if (objClsSet.size() > 0) {
          ldapEntity.getObjectClasses().clear();
          ldapEntity.getObjectClasses().addAll(objClsSet);
        }
      }
      if (iLoginAttrs != null)       iLoginAttrs.remove(0);
      if (iLoginProps != null)       iLoginProps.remove(0);
      String pattern=""String_Node_Str"";
      int startIndex=0;
      boolean hasLoginProperties=true;
      LdapEntity acct=getLdapEntity(iPersonAccountTypes.get(iPersonAccountTypes.size() - 1));
      while (hasLoginProperties) {
        int index=iUserFilter.indexOf(pattern,startIndex);
        int beginIndex=index;
        if (index > -1) {
          for (; beginIndex > 0; beginIndex--) {
            if (iUserFilter.charAt(beginIndex) == ' ' || iUserFilter.charAt(beginIndex) == '(')             break;
          }
          String propName=iUserFilter.substring(beginIndex + 1,index);
          if (iLoginAttrs != null && !iLoginAttrs.contains(propName)) {
            if (tc.isDebugEnabled())             Tr.debug(tc,""String_Node_Str"" + propName + ""String_Node_Str"");
            iLoginAttrs.add(getAttributeName(acct,propName));
            iLoginProps.add(propName);
          }
          startIndex=index + 1;
        }
 else         hasLoginProperties=false;
      }
      if (ldapEntity != null)       ldapEntity.addPropertyAttributeMap(SchemaConstants.PROP_PRINCIPAL_NAME,iLoginAttrs.get(0));
    }
    if (iGroupFilter != null) {
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_GROUP);
      if (ldapEntity != null) {
        Set<String> objClsSet=new HashSet<String>();
        int index=iGroupFilter.indexOf(objectClassStr);
        while (index > -1) {
          int endIndex=iGroupFilter.indexOf(""String_Node_Str"",index);
          String objectClass=iGroupFilter.substring(index + length,endIndex);
          objClsSet.add(objectClass);
          index=endIndex + 1;
          index=iGroupFilter.indexOf(objectClassStr,endIndex);
        }
        if (objClsSet.size() > 0) {
          ldapEntity.getObjectClasses().clear();
          ldapEntity.getObjectClasses().addAll(objClsSet);
        }
      }
    }
    if (iUserIdMap != null) {
      StringTokenizer strtok=new StringTokenizer(iUserIdMap,""String_Node_Str"");
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_PERSON_ACCOUNT);
      if (ldapEntity != null) {
        List<String> rdnPropList=new ArrayList<String>();
        List<String> objClsList=new ArrayList<String>();
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          Set<String> propNames=null;
          if (LdapConstants.LDAP_ATTR_SAM_ACCOUNT_NAME.equalsIgnoreCase(attribute)) {
            propNames=getPropertyName(ldapEntity,""String_Node_Str"");
          }
 else           propNames=getPropertyName(ldapEntity,attribute);
          rdnPropList.add(propNames.iterator().next());
          if (!SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass))           objClsList.add(objectClass);
        }
        if (rdnPropList.size() > 0) {
          String[][] rdnProps=new String[rdnPropList.size()][];
          String[][] rdnAttrs=new String[rdnPropList.size()][];
          String rdnObjCls[][]=new String[objClsList.size()][];
          String objCls[]=new String[objClsList.size()];
          objCls=objClsList.toArray(objCls);
          for (int j=0; j < rdnPropList.size(); j++) {
            rdnProps[j]=LdapHelper.getRDNs(rdnPropList.get(j));
            rdnAttrs[j]=new String[rdnProps[j].length];
            for (int k=0; k < rdnProps[j].length; k++) {
              String rdnProp=rdnProps[j][k];
              rdnAttrs[j][k]=getAttributeName(ldapEntity,rdnProp);
            }
            if (objCls.length > 0) {
              rdnObjCls[j]=new String[objCls.length];
              rdnObjCls[j][0]=objCls[j];
            }
          }
          ldapEntity.setRDNProperties(rdnProps,rdnAttrs);
          if (isVMMRdnPropertiesDefined) {
            String updatedRdnAttrs[][]=null;
            String updatedRdnObjCls[][]=null;
            if (ldapEntity.getRDNAttributes().length > 0) {
              String orgRdnAttr[][]=ldapEntity.getRDNAttributes();
              updatedRdnAttrs=new String[orgRdnAttr.length + rdnAttrs.length][];
              for (int i=0; i < orgRdnAttr.length; i++) {
                updatedRdnAttrs[i]=new String[orgRdnAttr[i].length];
                for (int j=0; j < orgRdnAttr[i].length; j++)                 updatedRdnAttrs[i][j]=orgRdnAttr[i][j];
              }
              int len=orgRdnAttr.length;
              for (int i=0; i < rdnAttrs.length; i++) {
                updatedRdnAttrs[len]=new String[rdnAttrs[i].length];
                for (int j=0; j < rdnAttrs[i].length; j++)                 updatedRdnAttrs[len][j]=rdnAttrs[i][j];
                len++;
              }
            }
            if (ldapEntity.getRDNObjectclasses().length > 0) {
              String orgRdnObjCls[][]=ldapEntity.getRDNObjectclasses();
              updatedRdnObjCls=new String[orgRdnObjCls.length + rdnObjCls.length][];
              for (int i=0; i < orgRdnObjCls.length; i++) {
                updatedRdnObjCls[i]=new String[orgRdnObjCls[i].length];
                for (int j=0; j < orgRdnObjCls[i].length; j++)                 updatedRdnObjCls[i][j]=orgRdnObjCls[i][j];
              }
              int len=orgRdnObjCls.length;
              for (int i=0; i < rdnObjCls.length; i++) {
                updatedRdnObjCls[len]=new String[rdnObjCls[i].length];
                for (int j=0; j < rdnObjCls[i].length; j++)                 updatedRdnObjCls[len][j]=rdnObjCls[i][j];
                len++;
              }
            }
            ldapEntity.setRDNAttributes(updatedRdnAttrs,updatedRdnObjCls);
          }
 else {
            ldapEntity.setRDNAttributes(rdnAttrs,rdnObjCls);
          }
          if (ldapEntity.needTranslateRDN()) {
            iNeedTranslateRDN=true;
          }
        }
      }
 else {
        if (tc.isDebugEnabled())         Tr.debug(tc,""String_Node_Str"");
      }
    }
    if (iGroupIdMap != null) {
      StringTokenizer strtok=new StringTokenizer(iGroupIdMap,""String_Node_Str"");
      LdapEntity ldapEntity=getLdapEntity(SchemaConstants.DO_GROUP);
      if (ldapEntity != null) {
        List<String> rdnPropList=new ArrayList<String>();
        Set<String> objClsSet=new HashSet<String>();
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          Set<String> propNames=getPropertyName(ldapEntity,attribute);
          rdnPropList.add(propNames.iterator().next());
          if (!SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass))           objClsSet.add(objectClass);
        }
        if (rdnPropList.size() > 0) {
          String[][] rdnProps=new String[rdnPropList.size()][];
          String[][] rdnAttrs=new String[rdnPropList.size()][];
          for (int j=0; j < rdnPropList.size(); j++) {
            rdnProps[j]=LdapHelper.getRDNs(rdnPropList.get(j));
            rdnAttrs[j]=new String[rdnProps[j].length];
            for (int k=0; k < rdnProps[j].length; k++) {
              String rdnProp=rdnProps[j][k];
              rdnAttrs[j][k]=getAttributeName(ldapEntity,rdnProp);
            }
          }
          ldapEntity.setRDNProperties(rdnProps,rdnAttrs);
          if (ldapEntity.needTranslateRDN()) {
            iNeedTranslateRDN=true;
          }
        }
      }
 else       if (tc.isDebugEnabled())       Tr.debug(tc,""String_Node_Str"");
    }
    if (iGroupMemberIdMap != null) {
      iLdapOperationalAttr=iGroupMemberIdMap.toLowerCase().contains(IBM_ALL_GROUPS.toLowerCase());
      if (iDefaultMembershipAttr) {
        iMembershipAttrName=null;
      }
      LdapEntity ldapEntity=null;
      List<String> grpTypes=getGroupTypes();
      List<String> objectClasses=new ArrayList<String>();
      for (int i=0; i < grpTypes.size(); i++) {
        ldapEntity=getLdapEntity(grpTypes.get(i));
        List<String> objClses=ldapEntity.getObjectClasses();
        for (int j=0; j < objClses.size(); j++) {
          String objCls=objClses.get(j);
          objectClasses.add(objCls);
        }
      }
      List<String> attrScopes=new ArrayList<String>();
      List<String> attrNames=new ArrayList<String>();
      StringTokenizer strtok=new StringTokenizer(iGroupMemberIdMap,""String_Node_Str"");
      if (ldapEntity != null) {
        while (strtok.hasMoreTokens()) {
          String objectClass=strtok.nextToken();
          String attribute=strtok.nextToken();
          String scope=LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP_STRING;
          if (SchemaConstants.VALUE_ALL_PROPERTIES.equalsIgnoreCase(objectClass)) {
            for (int j=0; j < objectClasses.size(); j++) {
              iMbrAttrMap.put(objectClasses.get(j),attribute);
            }
          }
 else {
            iMbrAttrMap.put(objectClass.toLowerCase(),attribute);
          }
          if (!attrNames.contains(attribute)) {
            attrNames.add(attribute);
            attrScopes.add(scope);
          }
          if (objectClass != null && !objectClasses.contains(objectClass.toLowerCase())) {
            if (getGroupTypes() != null && getGroupTypes().size() > 0)             getLdapEntity(getGroupTypes().get(0)).addObjectClass(objectClass);
          }
        }
        iMbrAttrs=attrNames.toArray(new String[0]);
        iMbrAttrScope=new short[iMbrAttrs.length];
        iMbrAttrsAllScope=true;
        iMbrAttrsNestedScope=true;
        for (int i=0; i < attrScopes.size(); i++) {
          iMbrAttrScope[i]=LdapHelper.getMembershipScope(attrScopes.get(i));
          if (iMbrAttrScope[i] == LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP) {
            iMbrAttrsAllScope=false;
            iMbrAttrsNestedScope=false;
          }
 else           if (iMbrAttrScope[i] == LdapConstants.LDAP_NESTED_GROUP_MEMBERSHIP) {
            iMbrAttrsAllScope=false;
          }
        }
      }
 else       if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
    if (checkIfRacf()) {
      initializeRacfFilters();
    }
    resetEntitySearchFilters();
  }
}"
34689,"/** 
 * Refreshes the caches using the given configuration data object. This method should be called when there are changes in configuration and schema.
 * @param reposConfig the data object containing configuration information of the repository.
 * @throws WIMException
 */
public void initialize(Map<String,Object> configProps) throws WIMException {
  final String METHODNAME=""String_Node_Str"";
  iLdapType=(String)configProps.get(ConfigConstants.CONFIG_PROP_LDAP_SERVER_TYPE);
  if (iLdapType == null) {
    iLdapType=ConfigConstants.CONFIG_LDAP_IDS52;
  }
 else {
    iLdapType=iLdapType.toUpperCase();
  }
  setCertificateMapMode((String)configProps.get(ConfigConstants.CONFIG_PROP_CERTIFICATE_MAP_MODE));
  if (ConfigConstants.CONFIG_VALUE_FILTER_DESCRIPTOR_MODE.equalsIgnoreCase(getCertificateMapMode())) {
    setCertificateFilter((String)configProps.get(ConfigConstants.CONFIG_PROP_CERTIFICATE_FILTER));
  }
  List<HashMap<String,String>> baseEntries=new ArrayList<HashMap<String,String>>();
  String baseDN=(String)configProps.get(BASE_DN);
  String name=(String)configProps.get(BASE_ENTRY_NAME);
  HashMap<String,String> baseEntryMap=new HashMap<String,String>();
  if (name != null)   baseEntryMap.put(name,baseDN);
 else   baseEntryMap.put(baseDN,baseDN);
  baseEntries.add(baseEntryMap);
  Map<String,List<Map<String,Object>>> configMap=Nester.nest(configProps,BASE_ENTRY,LDAP_ENTITY_TYPE,GROUP_PROPERTIES);
  for (  Map<String,Object> entry : configMap.get(BASE_ENTRY)) {
    baseDN=(String)entry.get(BASE_DN);
    name=(String)entry.get(BASE_ENTRY_NAME);
    if (baseDN == null || baseDN.trim().length() == 0) {
      Tr.error(tc,WIMMessageKey.INVALID_BASE_ENTRY_DEFINITION,name);
    }
 else {
      baseEntryMap=new HashMap<String,String>();
      if (name != null) {
        baseEntryMap.put(name,baseDN);
      }
 else {
        baseEntryMap.put(baseDN,baseDN);
      }
      baseEntries.add(baseEntryMap);
    }
  }
  if (configProps.containsKey(ConfigConstants.TIMESTAMP_FORMAT))   timestampFormat=(String)configProps.get(ConfigConstants.TIMESTAMP_FORMAT);
 else   timestampFormat=null;
  setNodes(baseEntries);
  setLDAPEntities(configMap.get(LDAP_ENTITY_TYPE),baseEntries);
  List<Map<String,Object>> groupPropList=configMap.get(GROUP_PROPERTIES);
  Map<String,Object> groupProps=groupPropList.isEmpty() ? Collections.<String,Object>emptyMap() : groupPropList.get(0);
  setMemberAttributes(groupProps);
  setMembershipAttribute(groupProps);
  setDynaMemberAttributes(groupProps);
  setGroupSeachScope(configProps);
  setAttributes(configProps);
  setExtIdAttributes(configProps);
  setConfidentialAttributes();
  setLoginProperties((String)configProps.get(ConfigConstants.CONFIG_PROP_LOGIN_PROPERTIES));
  setFilters(configProps);
  setGroupMemberFilter();
  useEncodingInSearchExpression=AccessControllerHelper.getSystemProperty(ConfigConstants.CONFIG_CUSTOM_PROP_USE_ENCODING_IN_SEARCH_EXPRESSION);
  if (useEncodingInSearchExpression != null) {
    try {
      ""String_Node_Str"".getBytes(useEncodingInSearchExpression);
    }
 catch (    UnsupportedEncodingException e) {
      if (tc.isDebugEnabled())       Tr.debug(tc,METHODNAME + ""String_Node_Str"" + e.getMessage());
      useEncodingInSearchExpression=""String_Node_Str"";
    }
  }
  entityTypeProps.add(""String_Node_Str"");
  entityTypeProps.add(""String_Node_Str"");
  entityTypeProps.add(""String_Node_Str"");
  if (tc.isDebugEnabled()) {
    StringBuffer strBuf=new StringBuffer();
    strBuf.append(""String_Node_Str"").append(iLdapType).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(WIMTraceHelper.printObjectArray(iNodes)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(WIMTraceHelper.printObjectArray(iLdapNodes)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(WIMTraceHelper.printObjectArray(iTopLdapNodes)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iNeedSwitchNode).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(""String_Node_Str"");
    for (int i=0; i < iLdapEntities.size(); i++) {
      strBuf.append(iLdapEntities.get(i).toString());
    }
    strBuf.append(""String_Node_Str"").append(iMbrAttrMap).append(""String_Node_Str"").append(WIMTraceHelper.printObjectArray(iMbrAttrs)).append(""String_Node_Str"").append(WIMTraceHelper.printPrimitiveArray(iMbrAttrScope)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iGrpMbrFilter).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iDynaMbrAttrMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iDynaGrpFilter).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iMembershipAttrName).append(""String_Node_Str"").append(iMembershipAttrScope).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iPropToAttrMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iAttrToPropMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iExtIds).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iAttrs).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iLoginAttrs).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iUserFilter).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iGroupFilter).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iUserIdMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iGroupIdMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iGroupMemberIdMap).append(""String_Node_Str"");
    Tr.debug(tc,METHODNAME + strBuf.toString());
  }
}","/** 
 * Refreshes the caches using the given configuration data object. This method should be called when there are changes in configuration and schema.
 * @param reposConfig the data object containing configuration information of the repository.
 * @throws WIMException
 */
public void initialize(Map<String,Object> configProps) throws WIMException {
  final String METHODNAME=""String_Node_Str"";
  iLdapType=(String)configProps.get(ConfigConstants.CONFIG_PROP_LDAP_SERVER_TYPE);
  if (iLdapType == null) {
    iLdapType=ConfigConstants.CONFIG_LDAP_IDS52;
  }
 else {
    iLdapType=iLdapType.toUpperCase();
  }
  setCertificateMapMode((String)configProps.get(ConfigConstants.CONFIG_PROP_CERTIFICATE_MAP_MODE));
  if (ConfigConstants.CONFIG_VALUE_FILTER_DESCRIPTOR_MODE.equalsIgnoreCase(getCertificateMapMode())) {
    setCertificateFilter((String)configProps.get(ConfigConstants.CONFIG_PROP_CERTIFICATE_FILTER));
  }
  List<HashMap<String,String>> baseEntries=new ArrayList<HashMap<String,String>>();
  String baseDN=(String)configProps.get(BASE_DN);
  String name=(String)configProps.get(BASE_ENTRY_NAME);
  HashMap<String,String> baseEntryMap=new HashMap<String,String>();
  if (name != null)   baseEntryMap.put(name,baseDN);
 else   baseEntryMap.put(baseDN,baseDN);
  baseEntries.add(baseEntryMap);
  Map<String,List<Map<String,Object>>> configMap=Nester.nest(configProps,BASE_ENTRY,LDAP_ENTITY_TYPE,GROUP_PROPERTIES);
  for (  Map<String,Object> entry : configMap.get(BASE_ENTRY)) {
    baseDN=(String)entry.get(BASE_DN);
    name=(String)entry.get(BASE_ENTRY_NAME);
    if (baseDN == null || baseDN.trim().length() == 0) {
      Tr.error(tc,WIMMessageKey.INVALID_BASE_ENTRY_DEFINITION,name);
    }
 else {
      baseEntryMap=new HashMap<String,String>();
      if (name != null) {
        baseEntryMap.put(name,baseDN);
      }
 else {
        baseEntryMap.put(baseDN,baseDN);
      }
      baseEntries.add(baseEntryMap);
    }
  }
  if (configProps.containsKey(ConfigConstants.TIMESTAMP_FORMAT))   timestampFormat=(String)configProps.get(ConfigConstants.TIMESTAMP_FORMAT);
 else   timestampFormat=null;
  setNodes(baseEntries);
  setLDAPEntities(configMap.get(LDAP_ENTITY_TYPE),baseEntries);
  List<Map<String,Object>> groupPropList=configMap.get(GROUP_PROPERTIES);
  Map<String,Object> groupProps=groupPropList.isEmpty() ? Collections.<String,Object>emptyMap() : groupPropList.get(0);
  setMemberAttributes(groupProps);
  setMembershipAttribute(groupProps);
  setDynaMemberAttributes(groupProps);
  setGroupSearchScope(configProps);
  setAttributes(configProps);
  setExtIdAttributes(configProps);
  setConfidentialAttributes();
  setLoginProperties((String)configProps.get(ConfigConstants.CONFIG_PROP_LOGIN_PROPERTIES));
  setFilters(configProps);
  setGroupMemberFilter();
  useEncodingInSearchExpression=AccessControllerHelper.getSystemProperty(ConfigConstants.CONFIG_CUSTOM_PROP_USE_ENCODING_IN_SEARCH_EXPRESSION);
  if (useEncodingInSearchExpression != null) {
    try {
      ""String_Node_Str"".getBytes(useEncodingInSearchExpression);
    }
 catch (    UnsupportedEncodingException e) {
      if (tc.isDebugEnabled())       Tr.debug(tc,METHODNAME + ""String_Node_Str"" + e.getMessage());
      useEncodingInSearchExpression=""String_Node_Str"";
    }
  }
  entityTypeProps.add(""String_Node_Str"");
  entityTypeProps.add(""String_Node_Str"");
  entityTypeProps.add(""String_Node_Str"");
  if (tc.isDebugEnabled()) {
    StringBuffer strBuf=new StringBuffer();
    strBuf.append(""String_Node_Str"").append(iLdapType).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(WIMTraceHelper.printObjectArray(iNodes)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(WIMTraceHelper.printObjectArray(iLdapNodes)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(WIMTraceHelper.printObjectArray(iTopLdapNodes)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iNeedSwitchNode).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(""String_Node_Str"");
    for (int i=0; i < iLdapEntities.size(); i++) {
      strBuf.append(""String_Node_Str"" + iLdapEntities.get(i).toString()).append(""String_Node_Str"");
    }
    strBuf.append(""String_Node_Str"").append(iMbrAttrMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(WIMTraceHelper.printObjectArray(iMbrAttrs)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(WIMTraceHelper.printPrimitiveArray(iMbrAttrScope)).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iGrpMbrFilter).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iDynaMbrAttrMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iDynaGrpFilter).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iMembershipAttrName).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iMembershipAttrScope).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iPropToAttrMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iAttrToPropMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iExtIds).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iAttrs).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iLoginAttrs).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iUserFilter).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iGroupFilter).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iUserIdMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iGroupIdMap).append(""String_Node_Str"");
    strBuf.append(""String_Node_Str"").append(iGroupMemberIdMap).append(""String_Node_Str"");
    Tr.debug(tc,METHODNAME + strBuf.toString());
  }
}"
34690,"private void initializeServers(Map<String,Object> configProps) throws WIMException {
  if (configProps.containsKey(CONFIG_PROP_SEARCH_TIME_OUT)) {
    long val=Long.parseLong(String.valueOf(configProps.get(CONFIG_PROP_SEARCH_TIME_OUT)));
    iTimeLimit=(int)val;
  }
  if (configProps.containsKey(CONFIG_PROP_SEARCH_COUNT_LIMIT)) {
    iCountLimit=(int)configProps.get(CONFIG_PROP_SEARCH_COUNT_LIMIT);
  }
  if (configProps.containsKey(CONFIG_PROP_SEARCH_PAGE_SIZE)) {
    iPageSize=(int)configProps.get(CONFIG_PROP_SEARCH_PAGE_SIZE);
  }
 else {
    if (iLdapConfigMgr.getLdapType().startsWith(""String_Node_Str"")) {
      iPageSize=1000;
    }
  }
  if (configProps.containsKey(CONFIG_PROP_ATTRIBUTE_RANGE_STEP)) {
    iAttrRangeStep=Integer.parseInt((String)configProps.get(CONFIG_PROP_ATTRIBUTE_RANGE_STEP));
  }
 else {
    if (iLdapConfigMgr.getLdapType().equals(""String_Node_Str"") || iLdapConfigMgr.getLdapType().equals(""String_Node_Str"")) {
      iAttrRangeStep=1000;
    }
 else     if (iLdapConfigMgr.getLdapType().startsWith(""String_Node_Str"")) {
      iAttrRangeStep=1500;
    }
 else     if (iLdapConfigMgr.getLdapType().startsWith(""String_Node_Str"")) {
      iAttrRangeStep=1000;
    }
  }
  iWriteToSecondary=Boolean.getBoolean((String)configProps.get(CONFIG_PROP_ALLOW_WRITE_TO_SECONDARY_SERVERS));
  iReturnToPrimary=(Boolean)configProps.get(CONFIG_PROP_RETURN_TO_PRIMARY_SERVER);
  iQueryInterval=(Integer)configProps.get(CONFIG_PROP_PRIMARY_SERVER_QUERY_TIME_INTERVAL) * 60;
  initializeSSL(configProps);
  List<Map<String,Object>> serversConfig=Nester.nest(FAILOVER_SERVERS,configProps);
  boolean sslEnabled=(Boolean)configProps.get(CONFIG_PROP_SSL_ENABLED);
  iEnvironment=initializeEnvironmentProperties(sslEnabled,serversConfig,configProps);
}","private void initializeServers(Map<String,Object> configProps) throws WIMException {
  if (configProps.containsKey(CONFIG_PROP_SEARCH_TIME_OUT)) {
    long val=Long.parseLong(String.valueOf(configProps.get(CONFIG_PROP_SEARCH_TIME_OUT)));
    iTimeLimit=(int)val;
  }
  if (configProps.containsKey(CONFIG_PROP_SEARCH_COUNT_LIMIT)) {
    iCountLimit=(int)configProps.get(CONFIG_PROP_SEARCH_COUNT_LIMIT);
  }
  if (configProps.containsKey(CONFIG_PROP_SEARCH_PAGE_SIZE)) {
    iPageSize=(int)configProps.get(CONFIG_PROP_SEARCH_PAGE_SIZE);
  }
 else {
    if (LdapConstants.AD_LDAP_SERVER.equalsIgnoreCase(iLdapConfigMgr.getLdapType())) {
      iPageSize=1000;
    }
  }
  if (configProps.containsKey(CONFIG_PROP_ATTRIBUTE_RANGE_STEP)) {
    iAttrRangeStep=Integer.parseInt((String)configProps.get(CONFIG_PROP_ATTRIBUTE_RANGE_STEP));
  }
 else   if (LdapConstants.AD_LDAP_SERVER.equalsIgnoreCase(iLdapConfigMgr.getLdapType())) {
    iAttrRangeStep=1000;
  }
  iWriteToSecondary=Boolean.getBoolean((String)configProps.get(CONFIG_PROP_ALLOW_WRITE_TO_SECONDARY_SERVERS));
  iReturnToPrimary=(Boolean)configProps.get(CONFIG_PROP_RETURN_TO_PRIMARY_SERVER);
  iQueryInterval=(Integer)configProps.get(CONFIG_PROP_PRIMARY_SERVER_QUERY_TIME_INTERVAL) * 60;
  initializeSSL(configProps);
  List<Map<String,Object>> serversConfig=Nester.nest(FAILOVER_SERVERS,configProps);
  boolean sslEnabled=(Boolean)configProps.get(CONFIG_PROP_SSL_ENABLED);
  iEnvironment=initializeEnvironmentProperties(sslEnabled,serversConfig,configProps);
}"
34691,"private void processCSSUpdates(ScheduledExecutorService executor){
  if (cssUpdates.size() > 0) {
    final CustomCSSProcessor cssUpdator=this;
    Runnable bundleUpdater=new Runnable(){
      @Override public void run(){
synchronized (cssUpdator) {
          Iterator<CSSUpdate> it=cssUpdates.iterator();
          while (it.hasNext()) {
            CSSUpdate update=it.next();
            if (update.updateData != null) {
              updater.update(update.updateData);
            }
 else {
              updater.restoreDefaults();
            }
            it.remove();
          }
        }
      }
    }
;
    executor.execute(bundleUpdater);
  }
}","private void processCSSUpdates(ScheduledExecutorService executor){
  if (cssUpdates.size() > 0) {
    final Object cssUpdator=cssUpdaterLock;
    Runnable bundleUpdater=new Runnable(){
      @Override public void run(){
synchronized (cssUpdator) {
          Iterator<CSSUpdate> it=cssUpdates.iterator();
          while (it.hasNext()) {
            CSSUpdate update=it.next();
            if (update.updateData != null) {
              updater.update(update.updateData);
            }
 else {
              updater.restoreDefaults();
            }
            it.remove();
          }
        }
      }
    }
;
    executor.execute(bundleUpdater);
  }
}"
34692,"private void unsetServiceReferenceInternal(ServiceReference<?> ref){
  final ObjectName name=mBeanMap.remove(ref);
  if (name != null) {
    try {
      mDelayedMBeanActivator.unregisterMBean(name);
    }
 catch (    InstanceNotFoundException e) {
    }
catch (    MBeanRegistrationException e) {
    }
  }
}","@FFDCIgnore(InstanceNotFoundException.class) private void unsetServiceReferenceInternal(ServiceReference<?> ref){
  final ObjectName name=mBeanMap.remove(ref);
  if (name != null) {
    try {
      mDelayedMBeanActivator.unregisterMBean(name);
    }
 catch (    InstanceNotFoundException e) {
    }
catch (    MBeanRegistrationException e) {
    }
  }
}"
34693,"public void testTimeout(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  long start=System.currentTimeMillis();
  try {
    bean.connectA();
    throw new AssertionError(""String_Node_Str"");
  }
 catch (  TimeoutException e) {
    long timeout=System.currentTimeMillis();
    long duration=timeout - start;
    if (duration > 3000) {
      throw new AssertionError(""String_Node_Str"" + timeout);
    }
  }
catch (  ConnectException e) {
    throw new ServletException(e);
  }
}","public void testTimeout(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  long start=System.currentTimeMillis();
  try {
    bean.connectA();
    throw new AssertionError(""String_Node_Str"");
  }
 catch (  TimeoutException e) {
    long timeout=System.currentTimeMillis();
    long duration=timeout - start;
    if (duration > 3000) {
      throw new AssertionError(""String_Node_Str"" + duration);
    }
  }
catch (  ConnectException e) {
    throw new ServletException(e);
  }
}"
34694,"/** 
 * Test method level override of Timeout value on a synchronous service. A timeout will not occur unless the configuration overrides the value set on the connectG method.
 * @param request
 * @param response
 * @throws ServletException
 * @throws IOException
 */
public void testTimeoutConfig(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  long start=System.currentTimeMillis();
  try {
    bean.connectG();
    throw new AssertionError(""String_Node_Str"");
  }
 catch (  TimeoutException e) {
    long timeout=System.currentTimeMillis();
    long duration=timeout - start;
    if (duration > 1000) {
      throw new AssertionError(""String_Node_Str"" + timeout);
    }
  }
catch (  ConnectException e) {
    throw new ServletException(e);
  }
}","/** 
 * Test method level override of Timeout value on a synchronous service. A timeout will not occur unless the configuration overrides the value set on the connectG method.
 * @param request
 * @param response
 * @throws ServletException
 * @throws IOException
 */
public void testTimeoutConfig(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  long start=System.currentTimeMillis();
  try {
    bean.connectG();
    throw new AssertionError(""String_Node_Str"");
  }
 catch (  TimeoutException e) {
    long timeout=System.currentTimeMillis();
    long duration=timeout - start;
    if (duration > 1000) {
      throw new AssertionError(""String_Node_Str"" + duration);
    }
  }
catch (  ConnectException e) {
    throw new ServletException(e);
  }
}"
34695,"/** 
 * Test method level override of Timeout value on a synchronous service. A timeout will not occur unless the configuration overrides the value set on the classScopedConfigBean.
 * @param request
 * @param response
 * @throws ServletException
 * @throws IOException
 */
public void testTimeoutClassScopeConfig(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  long start=System.currentTimeMillis();
  try {
    classScopedConfigBean.connectA();
    throw new AssertionError(""String_Node_Str"");
  }
 catch (  TimeoutException e) {
    long timeout=System.currentTimeMillis();
    long duration=timeout - start;
    if (duration > 1000) {
      throw new AssertionError(""String_Node_Str"" + timeout);
    }
  }
catch (  ConnectException e) {
    throw new ServletException(e);
  }
}","/** 
 * Test method level override of Timeout value on a synchronous service. A timeout will not occur unless the configuration overrides the value set on the classScopedConfigBean.
 * @param request
 * @param response
 * @throws ServletException
 * @throws IOException
 */
public void testTimeoutClassScopeConfig(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  long start=System.currentTimeMillis();
  try {
    classScopedConfigBean.connectA();
    throw new AssertionError(""String_Node_Str"");
  }
 catch (  TimeoutException e) {
    long timeout=System.currentTimeMillis();
    long duration=timeout - start;
    if (duration > 1000) {
      throw new AssertionError(""String_Node_Str"" + duration);
    }
  }
catch (  ConnectException e) {
    throw new ServletException(e);
  }
}"
34696,"public static ClassLoader getClassLoader(Object defaultObject){
  ClassLoader cl;
  if (System.getSecurityManager() != null) {
    try {
      cl=AccessController.doPrivileged(new PrivilegedExceptionAction<ClassLoader>(){
        public ClassLoader run() throws PrivilegedActionException {
          return Thread.currentThread().getContextClassLoader();
        }
      }
);
    }
 catch (    PrivilegedActionException pae) {
      throw new FacesException(pae);
    }
  }
 else {
    cl=Thread.currentThread().getContextClassLoader();
  }
  if (cl == null) {
    cl=defaultObject.getClass().getClassLoader();
  }
  return cl;
}","public static ClassLoader getClassLoader(final Object defaultObject){
  ClassLoader cl;
  if (System.getSecurityManager() != null) {
    try {
      cl=AccessController.doPrivileged(new PrivilegedExceptionAction<ClassLoader>(){
        public ClassLoader run() throws PrivilegedActionException {
          return defaultObject.getClass().getClassLoader();
        }
      }
);
    }
 catch (    PrivilegedActionException pae) {
      throw new FacesException(pae);
    }
  }
 else {
    cl=defaultObject.getClass().getClassLoader();
  }
  return cl;
}"
34697,"/** 
 * Copied from DatabaseHashMap.pollForInvalidSessionsWithListeners and DatabaseHashMap.processInvalidListeners. This method determines the set of sessions with session listeners which need to be invalidated and processes them.
 */
private void processInvalidListeners(){
  final boolean trace=com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled();
  String appName=getIStore().getId();
  long start=System.currentTimeMillis();
  for (@SuppressWarnings(""String_Node_Str"") Iterator<Cache.Entry<String,ArrayList>> it=sessionInfoCache.iterator(); it.hasNext(); ) {
    @SuppressWarnings(""String_Node_Str"") Cache.Entry<String,ArrayList> entry=it.next();
    String id=entry == null ? null : entry.getKey();
    if (id != null && !INVAL_KEY.equals(id)) {
      SessionInfo sessionInfo=new SessionInfo(entry.getValue());
      long lastAccess=sessionInfo.getLastAccess();
      short listenerCnt=sessionInfo.getListenerCount();
      int maxInactive=sessionInfo.getMaxInactiveTime();
      if ((listenerCnt == 0 || listenerCnt == 2) && maxInactive >= 0 && maxInactive < (start - lastAccess) / 1000) {
        if (trace && tc.isDebugEnabled())         Tr.debug(this,tc,""String_Node_Str"" + id);
        CacheSession s=new CacheSession(this,id,_iStore.getStoreCallback());
        s.initSession(_iStore);
        s.setIsValid(true);
        s.setIsNew(false);
        s.updateLastAccessTime(lastAccess);
        s.setCreationTime(sessionInfo.getCreationTime());
        s.internalSetMaxInactive(maxInactive);
        s.internalSetUser(sessionInfo.getUser());
        s.setListenerFlag(listenerCnt);
        long now=System.currentTimeMillis();
        lastAccess=s.getCurrentAccessTime();
        try {
          s.setIsNew(false);
          s.getSwappableListeners(BackedSession.HTTP_SESSION_BINDING_LISTENER);
          sessionInfo=sessionInfo.clone();
          sessionInfo.setLastAccess(lastAccess);
          if (sessionInfoCache.remove(id,sessionInfo.getArrayList())) {
            s.internalInvalidate(true);
            Set<String> propIds=sessionInfo.getSessionPropertyIds();
            if (propIds != null && !propIds.isEmpty()) {
              HashSet<String> propKeys=new HashSet<String>();
              for (              String propId : propIds)               propKeys.add(createSessionPropertyKey(id,propId));
              if (trace && tc.isDebugEnabled())               Tr.debug(this,tc,""String_Node_Str"",propKeys);
              sessionPropertyCache.removeAll(propKeys);
            }
          }
          if ((now + _smc.getInvalidationCheckInterval() * (1000 / 2)) < System.currentTimeMillis()) {
            updateNukerTimeStamp(appName);
            now=System.currentTimeMillis();
          }
        }
 catch (        Exception e) {
          FFDCFilter.processException(e,getClass().getName(),""String_Node_Str"",s);
          throw e;
        }
      }
    }
  }
}","/** 
 * Copied from DatabaseHashMap.pollForInvalidSessionsWithListeners and DatabaseHashMap.processInvalidListeners. This method determines the set of sessions with session listeners which need to be invalidated and processes them.
 */
private void processInvalidListeners(){
  final boolean trace=com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled();
  String appName=getIStore().getId();
  long start=System.currentTimeMillis();
  for (@SuppressWarnings(""String_Node_Str"") Iterator<Cache.Entry<String,ArrayList>> it=sessionInfoCache.iterator(); it.hasNext(); ) {
    @SuppressWarnings(""String_Node_Str"") Cache.Entry<String,ArrayList> entry=it.next();
    String id=entry == null ? null : entry.getKey();
    if (id != null && !INVAL_KEY.equals(id)) {
      SessionInfo sessionInfo=new SessionInfo(entry.getValue());
      long lastAccess=sessionInfo.getLastAccess();
      short listenerCnt=sessionInfo.getListenerCount();
      int maxInactive=sessionInfo.getMaxInactiveTime();
      if ((listenerCnt == 1 || listenerCnt == 3) && maxInactive >= 0 && maxInactive < (start - lastAccess) / 1000) {
        if (trace && tc.isDebugEnabled())         Tr.debug(this,tc,""String_Node_Str"" + id);
        CacheSession s=new CacheSession(this,id,_iStore.getStoreCallback());
        s.initSession(_iStore);
        s.setIsValid(true);
        s.setIsNew(false);
        s.updateLastAccessTime(lastAccess);
        s.setCreationTime(sessionInfo.getCreationTime());
        s.internalSetMaxInactive(maxInactive);
        s.internalSetUser(sessionInfo.getUser());
        s.setListenerFlag(listenerCnt);
        long now=System.currentTimeMillis();
        lastAccess=s.getCurrentAccessTime();
        try {
          s.setIsNew(false);
          s.getSwappableListeners(BackedSession.HTTP_SESSION_BINDING_LISTENER);
          sessionInfo=sessionInfo.clone();
          sessionInfo.setLastAccess(lastAccess);
          if (sessionInfoCache.remove(id,sessionInfo.getArrayList())) {
            s.internalInvalidate(true);
            Set<String> propIds=sessionInfo.getSessionPropertyIds();
            if (propIds != null && !propIds.isEmpty()) {
              HashSet<String> propKeys=new HashSet<String>();
              for (              String propId : propIds)               propKeys.add(createSessionPropertyKey(id,propId));
              if (trace && tc.isDebugEnabled())               Tr.debug(this,tc,""String_Node_Str"",propKeys);
              sessionPropertyCache.removeAll(propKeys);
            }
          }
          if ((now + _smc.getInvalidationCheckInterval() * (1000 / 2)) < System.currentTimeMillis()) {
            updateNukerTimeStamp(appName);
            now=System.currentTimeMillis();
          }
        }
 catch (        Exception e) {
          FFDCFilter.processException(e,getClass().getName(),""String_Node_Str"",s);
          throw e;
        }
      }
    }
  }
}"
34698,"private static List<ServiceRegistration<?>> registerServices(final List<ServiceInfo> serviceInfos,final Library library,final BundleContext context){
  final List<ServiceRegistration<?>> registeredServices=new LinkedList<ServiceRegistration<?>>();
  for (  final ServiceInfo serviceInfo : serviceInfos) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"",serviceInfo);
    }
    final URL fileUrl=serviceInfo.providerConfigFile.getResource();
    final String interfaceName=serviceInfo.providerConfigFile.getName();
    final Dictionary<String,Object> properties=new Hashtable<String,Object>();
    properties.put(""String_Node_Str"",serviceInfo.implClass);
    properties.put(""String_Node_Str"",library.id());
    final ServiceRegistration<?> reg=context.registerService(interfaceName,createServiceFactory(serviceInfo,library,fileUrl),properties);
    if (TraceComponent.isAnyTracingEnabled() && tc.isInfoEnabled()) {
      Tr.info(tc,""String_Node_Str"",library.id(),fileUrl,serviceInfo.implClass);
    }
    registeredServices.add(reg);
    MetaInfServicesProvider provider=new MetaInfServicesProvider(){
      private final AtomicReference<Class<?>> implClassRef=new AtomicReference<Class<?>>();
      @Override public Class<?> getProviderImplClass(){
        Class<?> implClass=implClassRef.get();
        if (implClass == null) {
          Object service=context.getService(reg.getReference());
          if (service != null)           implClassRef.set(implClass=service.getClass());
        }
        return implClass;
      }
    }
;
    Dictionary<String,Object> metaInfProps=new Hashtable<String,Object>();
    metaInfProps.put(""String_Node_Str"",serviceInfo.implClass);
    metaInfProps.put(""String_Node_Str"",serviceInfo.providerConfigFile.getPath().substring(1));
    metaInfProps.put(""String_Node_Str"",fileUrl);
    ServiceRegistration<MetaInfServicesProvider> metaInfReg=context.registerService(MetaInfServicesProvider.class,provider,metaInfProps);
    registeredServices.add(metaInfReg);
  }
  return registeredServices;
}","private static List<ServiceRegistration<?>> registerServices(final List<ServiceInfo> serviceInfos,final Library library,final BundleContext context){
  final List<ServiceRegistration<?>> registeredServices=new LinkedList<ServiceRegistration<?>>();
  for (  final ServiceInfo serviceInfo : serviceInfos) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"",serviceInfo);
    }
    final URL fileUrl=serviceInfo.providerConfigFile.getResource();
    final String interfaceName=serviceInfo.providerConfigFile.getName();
    final Dictionary<String,Object> properties=new Hashtable<String,Object>();
    properties.put(""String_Node_Str"",serviceInfo.implClass);
    properties.put(""String_Node_Str"",library.id());
    final ServiceRegistration<?> reg=context.registerService(interfaceName,createServiceFactory(serviceInfo,library,fileUrl),properties);
    if (TraceComponent.isAnyTracingEnabled() && tc.isInfoEnabled()) {
      Tr.info(tc,""String_Node_Str"",library.id(),fileUrl,serviceInfo.implClass);
    }
    registeredServices.add(reg);
    MetaInfServicesProvider provider=new MetaInfServicesProvider(){
      private final AtomicReference<Class<?>> implClassRef=new AtomicReference<Class<?>>();
      @Override public Class<?> getProviderImplClass(){
        Class<?> implClass=implClassRef.get();
        if (implClass == null) {
          Object service=AccessController.doPrivileged(new PrivilegedAction<Object>(){
            @Override public Object run(){
              return context.getService(reg.getReference());
            }
          }
);
          if (service != null)           implClassRef.set(implClass=service.getClass());
        }
        return implClass;
      }
    }
;
    Dictionary<String,Object> metaInfProps=new Hashtable<String,Object>();
    metaInfProps.put(""String_Node_Str"",serviceInfo.implClass);
    metaInfProps.put(""String_Node_Str"",serviceInfo.providerConfigFile.getPath().substring(1));
    metaInfProps.put(""String_Node_Str"",fileUrl);
    ServiceRegistration<MetaInfServicesProvider> metaInfReg=context.registerService(MetaInfServicesProvider.class,provider,metaInfProps);
    registeredServices.add(metaInfReg);
  }
  return registeredServices;
}"
34699,"@Override public Class<?> getProviderImplClass(){
  Class<?> implClass=implClassRef.get();
  if (implClass == null) {
    Object service=context.getService(reg.getReference());
    if (service != null)     implClassRef.set(implClass=service.getClass());
  }
  return implClass;
}","@Override public Class<?> getProviderImplClass(){
  Class<?> implClass=implClassRef.get();
  if (implClass == null) {
    Object service=AccessController.doPrivileged(new PrivilegedAction<Object>(){
      @Override public Object run(){
        return context.getService(reg.getReference());
      }
    }
);
    if (service != null)     implClassRef.set(implClass=service.getClass());
  }
  return implClass;
}"
34700,"/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,Callback t){
  String message;
  for (  String urlTemplate : t.keySet()) {
    if (urlTemplate.isEmpty()) {
      message=Tr.formatMessage(tc,""String_Node_Str"");
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      continue;
    }
    List<String> vars=RuntimeExpressionUtils.extractURLVars(urlTemplate);
    if (vars == null) {
      message=Tr.formatMessage(tc,""String_Node_Str"",urlTemplate);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
    }
 else {
      for (      String v : vars) {
        if (!RuntimeExpressionUtils.isRuntimeExpression(v)) {
          message=Tr.formatMessage(tc,""String_Node_Str"",v);
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
      String buildURL=urlTemplate;
      for (      String v : vars) {
        String templateVar=""String_Node_Str"" + v + ""String_Node_Str"";
        buildURL=buildURL.replace(templateVar,""String_Node_Str"");
      }
      if (!ValidatorUtils.isValidURL(buildURL)) {
        message=Tr.formatMessage(tc,""String_Node_Str"",urlTemplate);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      }
    }
    Object pathItem=t.get(urlTemplate);
    if (!(pathItem instanceof PathItem)) {
      message=Tr.formatMessage(tc,""String_Node_Str"",urlTemplate);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,Callback t){
  String message;
  for (  String urlTemplate : t.keySet()) {
    if (urlTemplate.isEmpty()) {
      message=Tr.formatMessage(tc,""String_Node_Str"");
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      continue;
    }
    List<String> vars=RuntimeExpressionUtils.extractURLVars(urlTemplate);
    if (vars == null) {
      message=Tr.formatMessage(tc,""String_Node_Str"",urlTemplate);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
    }
 else {
      for (      String v : vars) {
        if (!RuntimeExpressionUtils.isRuntimeExpression(v)) {
          message=Tr.formatMessage(tc,""String_Node_Str"",v);
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
      String buildURL=urlTemplate;
      for (      String v : vars) {
        String templateVar=""String_Node_Str"" + v + ""String_Node_Str"";
        buildURL=buildURL.replace(templateVar,""String_Node_Str"");
      }
      if (urlTemplate.contains(""String_Node_Str"")) {
        if (OpenAPIUtils.isDebugEnabled(tc)) {
          Tr.debug(tc,""String_Node_Str"" + key);
        }
      }
 else {
        if (!ValidatorUtils.isValidURI(buildURL)) {
          message=Tr.formatMessage(tc,""String_Node_Str"",urlTemplate);
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
    }
    Object pathItem=t.get(urlTemplate);
    if (!(pathItem instanceof PathItem)) {
      message=Tr.formatMessage(tc,""String_Node_Str"",urlTemplate);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
    }
  }
}"
34701,"/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,Contact t){
  if (t != null) {
    String url=t.getUrl();
    if (url != null) {
      if (!ValidatorUtils.isValidURL(url)) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",url);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
    String email=t.getEmail();
    if (email != null) {
      if (!ValidatorUtils.isValidEmailAddress(email)) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",email);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,Contact t){
  if (t != null) {
    String url=t.getUrl();
    if (url != null) {
      if (!ValidatorUtils.isValidURI(url)) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",url);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
    String email=t.getEmail();
    if (email != null) {
      if (!ValidatorUtils.isValidEmailAddress(email)) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",email);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
  }
}"
34702,"/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,ExternalDocumentation t){
  ValidatorUtils.validateRequiredField(t.getUrl(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
  if (t.getUrl() != null) {
    if (!ValidatorUtils.isValidURL(t.getUrl())) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getUrl());
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,ExternalDocumentation t){
  ValidatorUtils.validateRequiredField(t.getUrl(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
  if (t.getUrl() != null) {
    if (!ValidatorUtils.isValidURI(t.getUrl())) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getUrl());
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
    }
  }
}"
34703,"/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,Info t){
  if (t != null) {
    ValidatorUtils.validateRequiredField(t.getVersion(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    ValidatorUtils.validateRequiredField(t.getTitle(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    if (t.getTermsOfService() != null) {
      if (!ValidatorUtils.isValidURL(t.getTermsOfService())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getTermsOfService());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,Info t){
  if (t != null) {
    ValidatorUtils.validateRequiredField(t.getVersion(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    ValidatorUtils.validateRequiredField(t.getTitle(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    if (t.getTermsOfService() != null) {
      if (!ValidatorUtils.isValidURI(t.getTermsOfService())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getTermsOfService());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
  }
}"
34704,"/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,License t){
  if (t != null) {
    ValidatorUtils.validateRequiredField(t.getName(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    if (t.getUrl() != null) {
      if (!ValidatorUtils.isValidURL(t.getUrl())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getUrl());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      }
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,License t){
  if (t != null) {
    ValidatorUtils.validateRequiredField(t.getName(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    if (t.getUrl() != null) {
      if (!ValidatorUtils.isValidURI(t.getUrl())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getUrl());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      }
    }
  }
}"
34705,"/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,OAuthFlow t){
  if (t != null) {
    if (t.getAuthorizationUrl() != null) {
      if (!ValidatorUtils.isValidURL(t.getAuthorizationUrl())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getAuthorizationUrl());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
    if (t.getTokenUrl() != null) {
      if (!ValidatorUtils.isValidURL(t.getTokenUrl())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getTokenUrl());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
    if (t.getRefreshUrl() != null) {
      if (!ValidatorUtils.isValidURL(t.getRefreshUrl())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getRefreshUrl());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
    ValidatorUtils.validateRequiredField(t.getScopes(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,OAuthFlow t){
  if (t != null) {
    if (t.getAuthorizationUrl() != null) {
      if (!ValidatorUtils.isValidURI(t.getAuthorizationUrl())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getAuthorizationUrl());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
    if (t.getTokenUrl() != null) {
      if (!ValidatorUtils.isValidURI(t.getTokenUrl())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getTokenUrl());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
    if (t.getRefreshUrl() != null) {
      if (!ValidatorUtils.isValidURI(t.getRefreshUrl())) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getRefreshUrl());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(""String_Node_Str""),message));
      }
    }
    ValidatorUtils.validateRequiredField(t.getScopes(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
  }
}"
34706,"private void validateParameters(ValidationHelper helper,Context context,String pathStr,PathItem path){
  Set<String> definedSharedPathParameters=new HashSet<String>(), definedSharedQueryParameters=new HashSet<String>(), definedSharedHeaderParameters=new HashSet<String>(), definedSharedCookieParameters=new HashSet<String>();
  List<Parameter> sharedParameters=path.getParameters();
  if (sharedParameters != null) {
    for (    Parameter parameter : sharedParameters) {
      if (isPathParameter(parameter)) {
        if (!parameter.getRequired()) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",parameter.getName(),pathStr);
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
      if ((isPathParameter(parameter) && !definedSharedPathParameters.add(parameter.getName())) || (isQueryParameter(parameter) && !definedSharedQueryParameters.add(parameter.getName())) || (isHeaderParameter(parameter) && !definedSharedHeaderParameters.add(parameter.getName()))|| (isCookieParameter(parameter) && !definedSharedCookieParameters.add(parameter.getName()))) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",pathStr,parameter.getIn(),parameter.getName());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      }
    }
  }
  Set<String> declaredPathParameters=validatePathAndRetrievePathParams(helper,context,pathStr);
  if (!declaredPathParameters.containsAll(definedSharedPathParameters)) {
    Set<String> undeclaredParameters=new HashSet<String>(definedSharedPathParameters);
    undeclaredParameters.removeAll(declaredPathParameters);
    boolean isMultiple=undeclaredParameters.size() > 1;
    final String message;
    if (isMultiple) {
      message=Tr.formatMessage(tc,""String_Node_Str"",pathStr,undeclaredParameters.size(),undeclaredParameters);
    }
 else {
      message=Tr.formatMessage(tc,""String_Node_Str"",pathStr,undeclaredParameters);
    }
    helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
  }
  final Map<PathItem.HttpMethod,Operation> operationMap=path.readOperationsMap();
  if (operationMap != null) {
    for (    PathItem.HttpMethod httpMethod : operationMap.keySet()) {
      Operation operation=operationMap.get(httpMethod);
      validateOperationParameters(helper,context,operation,declaredPathParameters,definedSharedPathParameters,pathStr,httpMethod.toString());
    }
  }
}","private void validateParameters(ValidationHelper helper,Context context,String pathStr,PathItem path){
  Set<String> definedSharedPathParameters=new HashSet<String>(), definedSharedQueryParameters=new HashSet<String>(), definedSharedHeaderParameters=new HashSet<String>(), definedSharedCookieParameters=new HashSet<String>();
  List<Parameter> sharedParameters=path.getParameters();
  if (sharedParameters != null) {
    for (    Parameter param : sharedParameters) {
      Parameter parameter=param;
      String reference=parameter.getRef();
      if (reference != null && !reference.isEmpty()) {
        Object componentItem=ReferenceValidator.getInstance().validate(helper,context,null,reference);
        if (parameter.getClass().isInstance(componentItem)) {
          parameter=(Parameter)componentItem;
        }
      }
      if (isPathParameter(parameter)) {
        if (!parameter.getRequired()) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",parameter.getName(),pathStr);
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
      if ((isPathParameter(parameter) && !definedSharedPathParameters.add(parameter.getName())) || (isQueryParameter(parameter) && !definedSharedQueryParameters.add(parameter.getName())) || (isHeaderParameter(parameter) && !definedSharedHeaderParameters.add(parameter.getName()))|| (isCookieParameter(parameter) && !definedSharedCookieParameters.add(parameter.getName()))) {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",pathStr,parameter.getIn(),parameter.getName());
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      }
    }
  }
  Set<String> declaredPathParameters=validatePathAndRetrievePathParams(helper,context,pathStr);
  if (!declaredPathParameters.containsAll(definedSharedPathParameters)) {
    Set<String> undeclaredParameters=new HashSet<String>(definedSharedPathParameters);
    undeclaredParameters.removeAll(declaredPathParameters);
    boolean isMultiple=undeclaredParameters.size() > 1;
    final String message;
    if (isMultiple) {
      message=Tr.formatMessage(tc,""String_Node_Str"",pathStr,undeclaredParameters.size(),undeclaredParameters);
    }
 else {
      message=Tr.formatMessage(tc,""String_Node_Str"",pathStr,undeclaredParameters);
    }
    helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
  }
  final Map<PathItem.HttpMethod,Operation> operationMap=path.readOperationsMap();
  if (operationMap != null) {
    for (    PathItem.HttpMethod httpMethod : operationMap.keySet()) {
      Operation operation=operationMap.get(httpMethod);
      validateOperationParameters(helper,context,operation,declaredPathParameters,definedSharedPathParameters,pathStr,httpMethod.toString());
    }
  }
}"
34707,"private void validateOperationParameters(ValidationHelper helper,Context context,Operation operation,Set<String> declaredPathParameters,Set<String> definedSharedPathParams,String path,String operationType){
  Set<String> definedPathParameters=new HashSet<String>(), definedQueryParameters=new HashSet<String>(), definedHeaderParameters=new HashSet<String>(), definedCookieParameters=new HashSet<String>();
  List<Parameter> parameters=operation.getParameters();
  if (parameters != null && !parameters.isEmpty()) {
    for (    Parameter parameter : parameters) {
      if (parameter != null) {
        if (isPathParameter(parameter)) {
          if (!parameter.getRequired()) {
            final String message=Tr.formatMessage(tc,""String_Node_Str"",parameter.getName(),operationType,path);
            helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
          }
        }
        if ((isPathParameter(parameter) && !definedPathParameters.add(parameter.getName())) || (isQueryParameter(parameter) && !definedQueryParameters.add(parameter.getName())) || (isHeaderParameter(parameter) && !definedHeaderParameters.add(parameter.getName()))|| (isCookieParameter(parameter) && !definedCookieParameters.add(parameter.getName()))) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path,parameter.getIn(),parameter.getName());
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
 else {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      }
    }
  }
  if (!declaredPathParameters.containsAll(definedPathParameters)) {
    Set<String> undeclaredParameters=new HashSet<String>(definedPathParameters);
    undeclaredParameters.removeAll(declaredPathParameters);
    boolean isMultiple=undeclaredParameters.size() > 1;
    final String message;
    if (isMultiple) {
      message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path,undeclaredParameters.size(),undeclaredParameters);
    }
 else {
      message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path,undeclaredParameters);
    }
    helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
  }
  for (  String declaredParam : declaredPathParameters) {
    if (!definedSharedPathParams.contains(declaredParam) && !definedPathParameters.contains(declaredParam)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path,declaredParam);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
    }
  }
}","private void validateOperationParameters(ValidationHelper helper,Context context,Operation operation,Set<String> declaredPathParameters,Set<String> definedSharedPathParams,String path,String operationType){
  Set<String> definedPathParameters=new HashSet<String>(), definedQueryParameters=new HashSet<String>(), definedHeaderParameters=new HashSet<String>(), definedCookieParameters=new HashSet<String>();
  List<Parameter> parameters=operation.getParameters();
  if (parameters != null && !parameters.isEmpty()) {
    for (    Parameter param : parameters) {
      if (param != null) {
        Parameter parameter=param;
        String reference=parameter.getRef();
        if (reference != null && !reference.isEmpty()) {
          Object componentItem=ReferenceValidator.getInstance().validate(helper,context,null,reference);
          if (parameter.getClass().isInstance(componentItem)) {
            parameter=(Parameter)componentItem;
          }
        }
        if (isPathParameter(parameter)) {
          if (!parameter.getRequired()) {
            final String message=Tr.formatMessage(tc,""String_Node_Str"",parameter.getName(),operationType,path);
            helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
          }
        }
        if ((isPathParameter(parameter) && !definedPathParameters.add(parameter.getName())) || (isQueryParameter(parameter) && !definedQueryParameters.add(parameter.getName())) || (isHeaderParameter(parameter) && !definedHeaderParameters.add(parameter.getName()))|| (isCookieParameter(parameter) && !definedCookieParameters.add(parameter.getName()))) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path,parameter.getIn(),parameter.getName());
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
 else {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
      }
    }
  }
  if (!declaredPathParameters.containsAll(definedPathParameters)) {
    Set<String> undeclaredParameters=new HashSet<String>(definedPathParameters);
    undeclaredParameters.removeAll(declaredPathParameters);
    boolean isMultiple=undeclaredParameters.size() > 1;
    final String message;
    if (isMultiple) {
      message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path,undeclaredParameters.size(),undeclaredParameters);
    }
 else {
      message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path,undeclaredParameters);
    }
    helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
  }
  for (  String declaredParam : declaredPathParameters) {
    if (!definedSharedPathParams.contains(declaredParam) && !definedPathParameters.contains(declaredParam)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",operationType,path,declaredParam);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
    }
  }
}"
34708,"/** 
 * {@inheritDoc} 
 */
public Object validate(ValidationHelper helper,Context context,String key,String $ref){
  if ($ref != null && !$ref.isEmpty()) {
    if ($ref.contains(""String_Node_Str"") || $ref.contains(""String_Node_Str"") || $ref.contains(""String_Node_Str"")|| $ref.contains(""String_Node_Str"")|| $ref.startsWith(""String_Node_Str"")|| $ref.startsWith(""String_Node_Str"")) {
      return null;
    }
 else {
      boolean validRefStruct=true;
      String[] references=$ref.split(""String_Node_Str"");
      if (!($ref.startsWith(""String_Node_Str"") && references.length == 4)) {
        validRefStruct=false;
      }
      if (validRefStruct) {
        Components components=context.getModel().getComponents();
        if (components == null) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
          return null;
        }
        for (int i=2; i < ((references.length) - 1); i++) {
          String name=references[i + 1];
switch (references[i]) {
case ""String_Node_Str"":
            Map<String,Schema> schemas=components.getSchemas();
          if (schemas != null && schemas.containsKey(name)) {
            return schemas.get(name);
          }
 else {
            final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
            helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
            break;
          }
case ""String_Node_Str"":
        Map<String,APIResponse> responses=components.getResponses();
      if (responses != null && responses.containsKey(name)) {
        return responses.get(name);
      }
 else {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        break;
      }
case ""String_Node_Str"":
    Map<String,Parameter> parameters=components.getParameters();
  if (parameters != null && parameters.containsKey(name)) {
    return parameters.get(name);
  }
 else {
    final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
    helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
    break;
  }
case ""String_Node_Str"":
Map<String,Example> examples=components.getExamples();
if (examples != null && examples.containsKey(name)) {
return examples.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
case ""String_Node_Str"":
Map<String,RequestBody> requestBodies=components.getRequestBodies();
if (requestBodies != null && requestBodies.containsKey(name)) {
return requestBodies.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
case ""String_Node_Str"":
Map<String,Header> headers=components.getHeaders();
if (headers != null && headers.containsKey(name)) {
return headers.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
case ""String_Node_Str"":
Map<String,SecurityScheme> securitySchemes=components.getSecuritySchemes();
if (securitySchemes != null && securitySchemes.containsKey(name)) {
return securitySchemes.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
case ""String_Node_Str"":
Map<String,Link> links=components.getLinks();
if (links != null && links.containsKey(name)) {
return links.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
default :
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
}
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
}
}
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"");
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
}
return null;
}","public Object validate(ValidationHelper helper,Context context,String key,String $ref){
  if ($ref != null && !$ref.trim().isEmpty()) {
    if (!$ref.startsWith(""String_Node_Str"")) {
      return null;
    }
 else {
      boolean validRefStruct=true;
      String[] references=$ref.split(""String_Node_Str"");
      if (!($ref.startsWith(""String_Node_Str"") && references.length == 4)) {
        validRefStruct=false;
      }
      if (validRefStruct) {
        Components components=context.getModel().getComponents();
        if (components == null) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
          return null;
        }
        for (int i=2; i < ((references.length) - 1); i++) {
          String name=references[i + 1];
switch (references[i]) {
case ""String_Node_Str"":
            Map<String,Schema> schemas=components.getSchemas();
          if (schemas != null && schemas.containsKey(name)) {
            return schemas.get(name);
          }
 else {
            final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
            helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
            break;
          }
case ""String_Node_Str"":
        Map<String,APIResponse> responses=components.getResponses();
      if (responses != null && responses.containsKey(name)) {
        return responses.get(name);
      }
 else {
        final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
        helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        break;
      }
case ""String_Node_Str"":
    Map<String,Parameter> parameters=components.getParameters();
  if (parameters != null && parameters.containsKey(name)) {
    return parameters.get(name);
  }
 else {
    final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
    helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
    break;
  }
case ""String_Node_Str"":
Map<String,Example> examples=components.getExamples();
if (examples != null && examples.containsKey(name)) {
return examples.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
case ""String_Node_Str"":
Map<String,RequestBody> requestBodies=components.getRequestBodies();
if (requestBodies != null && requestBodies.containsKey(name)) {
return requestBodies.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
case ""String_Node_Str"":
Map<String,Header> headers=components.getHeaders();
if (headers != null && headers.containsKey(name)) {
return headers.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
case ""String_Node_Str"":
Map<String,SecurityScheme> securitySchemes=components.getSecuritySchemes();
if (securitySchemes != null && securitySchemes.containsKey(name)) {
return securitySchemes.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
case ""String_Node_Str"":
Map<String,Link> links=components.getLinks();
if (links != null && links.containsKey(name)) {
return links.get(name);
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
default :
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
break;
}
}
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"",$ref);
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
}
}
}
 else {
final String message=Tr.formatMessage(tc,""String_Node_Str"");
helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
}
return null;
}"
34709,"/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,SecurityScheme t){
  String reference=t.getRef();
  if (reference != null && !reference.isEmpty()) {
    ValidatorUtils.referenceValidatorHelper(reference,t,helper,context,key);
    return;
  }
  Optional<ValidationEvent> op_type=ValidatorUtils.validateRequiredField(t.getType(),context,""String_Node_Str"");
  if (op_type.isPresent()) {
    op_type.ifPresent(helper::addValidationEvent);
  }
 else {
    String type=t.getType().toString();
    if (""String_Node_Str"".equals(type)) {
      ValidatorUtils.validateRequiredField(t.getName(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
      Optional<ValidationEvent> op_in=ValidatorUtils.validateRequiredField(t.getIn(),context,""String_Node_Str"");
      if (op_in.isPresent()) {
        op_in.ifPresent(helper::addValidationEvent);
      }
 else {
        Set<String> inValues=new HashSet<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        if (!(inValues.contains(t.getIn().toString()))) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",key,t.getIn().toString());
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
    }
 else     if (""String_Node_Str"".equals(type)) {
      ValidatorUtils.validateRequiredField(t.getScheme(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    }
 else     if (""String_Node_Str"".equals(type)) {
      ValidatorUtils.validateRequiredField(t.getFlows(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    }
 else     if (""String_Node_Str"".equals(type)) {
      Optional<ValidationEvent> op_url=ValidatorUtils.validateRequiredField(t.getOpenIdConnectUrl(),context,""String_Node_Str"");
      if (op_url.isPresent()) {
        op_url.ifPresent(helper::addValidationEvent);
      }
 else {
        if (!(ValidatorUtils.isValidURL(t.getOpenIdConnectUrl()))) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getOpenIdConnectUrl());
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
    }
    if (t.getBearerFormat() != null && !t.getBearerFormat().isEmpty() && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getBearerFormat(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (t.getScheme() != null && !t.getScheme().isEmpty() && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getScheme(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (t.getIn() != null && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getIn(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (t.getName() != null && !t.getName().isEmpty() && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (t.getOpenIdConnectUrl() != null && !t.getOpenIdConnectUrl().isEmpty() && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getOpenIdConnectUrl(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (!""String_Node_Str"".equals(type) && ValidatorUtils.flowsIsSet(t.getFlows())) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,SecurityScheme t){
  String reference=t.getRef();
  if (reference != null && !reference.isEmpty()) {
    ValidatorUtils.referenceValidatorHelper(reference,t,helper,context,key);
    return;
  }
  Optional<ValidationEvent> op_type=ValidatorUtils.validateRequiredField(t.getType(),context,""String_Node_Str"");
  if (op_type.isPresent()) {
    op_type.ifPresent(helper::addValidationEvent);
  }
 else {
    String type=t.getType().toString();
    if (""String_Node_Str"".equals(type)) {
      ValidatorUtils.validateRequiredField(t.getName(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
      Optional<ValidationEvent> op_in=ValidatorUtils.validateRequiredField(t.getIn(),context,""String_Node_Str"");
      if (op_in.isPresent()) {
        op_in.ifPresent(helper::addValidationEvent);
      }
 else {
        Set<String> inValues=new HashSet<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        if (!(inValues.contains(t.getIn().toString()))) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",key,t.getIn().toString());
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
    }
 else     if (""String_Node_Str"".equals(type)) {
      ValidatorUtils.validateRequiredField(t.getScheme(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    }
 else     if (""String_Node_Str"".equals(type)) {
      ValidatorUtils.validateRequiredField(t.getFlows(),context,""String_Node_Str"").ifPresent(helper::addValidationEvent);
    }
 else     if (""String_Node_Str"".equals(type)) {
      Optional<ValidationEvent> op_url=ValidatorUtils.validateRequiredField(t.getOpenIdConnectUrl(),context,""String_Node_Str"");
      if (op_url.isPresent()) {
        op_url.ifPresent(helper::addValidationEvent);
      }
 else {
        if (!(ValidatorUtils.isValidURI(t.getOpenIdConnectUrl()))) {
          final String message=Tr.formatMessage(tc,""String_Node_Str"",t.getOpenIdConnectUrl());
          helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.ERROR,context.getLocation(),message));
        }
      }
    }
    if (t.getBearerFormat() != null && !t.getBearerFormat().isEmpty() && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getBearerFormat(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (t.getScheme() != null && !t.getScheme().isEmpty() && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getScheme(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (t.getIn() != null && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getIn(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (t.getName() != null && !t.getName().isEmpty() && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getName(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (t.getOpenIdConnectUrl() != null && !t.getOpenIdConnectUrl().isEmpty() && !""String_Node_Str"".equals(type)) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",t.getOpenIdConnectUrl(),""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
    if (!""String_Node_Str"".equals(type) && ValidatorUtils.flowsIsSet(t.getFlows())) {
      final String message=Tr.formatMessage(tc,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",type);
      helper.addValidationEvent(new ValidationEvent(ValidationEvent.Severity.WARNING,context.getLocation(),message));
    }
  }
}"
34710,"@FFDCIgnore({URISyntaxException.class}) public static boolean isValidURI(String uriStr){
  try {
    @SuppressWarnings(""String_Node_Str"") URI url=new URI(uriStr);
    return true;
  }
 catch (  URISyntaxException e) {
    return false;
  }
}","@FFDCIgnore({URISyntaxException.class}) public static boolean isValidURI(String uriStr){
  try {
    @SuppressWarnings(""String_Node_Str"") URI uri=new URI(uriStr);
    return true;
  }
 catch (  URISyntaxException e) {
    return false;
  }
}"
34711,"/** 
 * This test ensures that the OpenAPI document always reflects the correct server object when a WAR without server object is deployed
 * @throws Exception s
 */
@Test public void testContextRootWARWithoutServerObject() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_5);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_5);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),APP_NAME_5));
}","/** 
 * This test ensures that the OpenAPI document always reflects the correct server object when a WAR without server object is deployed
 * @throws Exception s
 */
@Test public void testContextRootWARWithoutServerObject() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_5);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),APP_NAME_5));
}"
34712,"@Test public void testCompleteFlow() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_11);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_11);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  OpenAPITestUtil.checkPaths(openapiNode,3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  JsonNode infoNode=openapiNode.get(""String_Node_Str"");
  assertNotNull(infoNode);
  assertTrue(infoNode.isObject());
  JsonNode titleNode=infoNode.get(""String_Node_Str"");
  assertNotNull(titleNode);
  assertEquals(titleNode.asText(),""String_Node_Str"");
}","@Test public void testCompleteFlow() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_11);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  OpenAPITestUtil.checkPaths(openapiNode,3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  JsonNode infoNode=openapiNode.get(""String_Node_Str"");
  assertNotNull(infoNode);
  assertTrue(infoNode.isObject());
  JsonNode titleNode=infoNode.get(""String_Node_Str"");
  assertNotNull(titleNode);
  assertEquals(titleNode.asText(),""String_Node_Str"");
}"
34713,"@Test public void testContextRootEARWithoutServerObject() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_7,""String_Node_Str"" + APP_NAME_7 + ""String_Node_Str"",""String_Node_Str"");
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_7);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),APP_NAME_5));
}","@Test public void testContextRootEARWithoutServerObject() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_7,""String_Node_Str"" + APP_NAME_7 + ""String_Node_Str"",""String_Node_Str"");
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),APP_NAME_5));
}"
34714,"@Test public void testPureJaxRsApp() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_10);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_10);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),APP_NAME_10));
  OpenAPITestUtil.checkPaths(openapiNode,1,""String_Node_Str"");
}","@Test public void testPureJaxRsApp() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_10);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),APP_NAME_10));
  OpenAPITestUtil.checkPaths(openapiNode,1,""String_Node_Str"");
}"
34715,"/** 
 * This test ensures that the OpenAPI document always reflects the correct server object when a WAR with server object is deployed
 * @throws Exception s
 */
@Test public void testContextRootWARWithServerObject() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_4);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_4);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * This test ensures that the OpenAPI document always reflects the correct server object when a WAR with server object is deployed
 * @throws Exception s
 */
@Test public void testContextRootWARWithServerObject() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_4);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,""String_Node_Str"",""String_Node_Str"");
}"
34716,"@Test public void testOverwrittenContextRootEAR() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_8,""String_Node_Str"" + APP_NAME_8 + ""String_Node_Str"",""String_Node_Str"");
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_8);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),""String_Node_Str""));
}","@Test public void testOverwrittenContextRootEAR() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_8,""String_Node_Str"" + APP_NAME_8 + ""String_Node_Str"",""String_Node_Str"");
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),""String_Node_Str""));
}"
34717,"/** 
 * Tests for validating Application Processor behaviour in the following scenarios: single app with OAS, two apps with OAS, two apps one with OAS and one without, single app without OAS. This tests deploys and undeploys apps to ensure once deployed, nothing is left behind.
 */
@Test public void testApplicationProcessor() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_1);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_1);
  String app1Doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(app1Doc);
  OpenAPITestUtil.checkServer(openapiNode,""String_Node_Str"",""String_Node_Str"");
  OpenAPITestUtil.checkPaths(openapiNode,16);
  OpenAPITestUtil.addApplication(server,APP_NAME_2);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_2);
  String openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  assertEquals(""String_Node_Str"",app1Doc,openapi);
  OpenAPITestUtil.removeApplication(server,APP_NAME_1);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_2);
  String app2Doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  openapiNode=OpenAPITestUtil.readYamlTree(app2Doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),APP_NAME_2));
  OpenAPITestUtil.checkPaths(openapiNode,1);
  OpenAPITestUtil.removeApplication(server,APP_NAME_2);
  String emptyDoc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  openapiNode=OpenAPITestUtil.readYamlTree(emptyDoc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort()));
  OpenAPITestUtil.checkPaths(openapiNode,0);
  OpenAPITestUtil.addApplication(server,APP_NAME_3);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_3);
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  assertEquals(""String_Node_Str"",emptyDoc,openapi);
  OpenAPITestUtil.addApplication(server,APP_NAME_1);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_1);
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  assertEquals(""String_Node_Str"",app1Doc,openapi);
}","/** 
 * Tests for validating Application Processor behaviour in the following scenarios: single app with OAS, two apps with OAS, two apps one with OAS and one without, single app without OAS. This tests deploys and undeploys apps to ensure once deployed, nothing is left behind.
 */
@Test public void testApplicationProcessor() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_1);
  String app1Doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(app1Doc);
  OpenAPITestUtil.checkServer(openapiNode,""String_Node_Str"",""String_Node_Str"");
  OpenAPITestUtil.checkPaths(openapiNode,16);
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.addApplication(server,APP_NAME_2,false);
  String openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  assertEquals(""String_Node_Str"",app1Doc,openapi);
  OpenAPITestUtil.removeApplication(server,APP_NAME_1);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_2);
  String app2Doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  openapiNode=OpenAPITestUtil.readYamlTree(app2Doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),APP_NAME_2));
  OpenAPITestUtil.checkPaths(openapiNode,1);
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.removeApplication(server,APP_NAME_2);
  String emptyDoc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  openapiNode=OpenAPITestUtil.readYamlTree(emptyDoc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort()));
  OpenAPITestUtil.checkPaths(openapiNode,0);
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.addApplication(server,APP_NAME_3);
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  assertEquals(""String_Node_Str"",emptyDoc,openapi);
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.addApplication(server,APP_NAME_1);
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  assertEquals(""String_Node_Str"",app1Doc,openapi);
}"
34718,"/** 
 * This test ensures that the OpenAPI document always reflects the correct server object when a EAR application includes a WAR with server object.
 * @throws Exception s
 */
@Test public void testContextRootEARWithServerObject() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_6,""String_Node_Str"" + APP_NAME_6 + ""String_Node_Str"",""String_Node_Str"");
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_6);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * This test ensures that the OpenAPI document always reflects the correct server object when a EAR application includes a WAR with server object.
 * @throws Exception s
 */
@Test public void testContextRootEARWithServerObject() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_6,""String_Node_Str"" + APP_NAME_6 + ""String_Node_Str"",""String_Node_Str"");
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,""String_Node_Str"",""String_Node_Str"");
}"
34719,"/** 
 * This ensures all the applications are removed before running each test to make sure we start with a clean server.xml.
 */
@Before public void setUp() throws Exception {
  OpenAPITestUtil.removeAllApplication(server);
  OpenAPITestUtil.changeServerPorts(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort());
  server.setMarkToEndOfLog();
}","/** 
 * This ensures all the applications are removed before running each test to make sure we start with a clean server.xml.
 */
@Before public void setUp() throws Exception {
  OpenAPITestUtil.removeAllApplication(server);
  OpenAPITestUtil.changeServerPorts(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort());
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
}"
34720,"/** 
 * This test ensures that the OpenAPI document always reflects the correct host/port
 * @throws Exception s
 */
@Test public void testHostPort() throws Exception {
  String openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort()));
  openapi=OpenAPIConnection.openAPIDocsConnection(server,true).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort()));
  OpenAPITestUtil.changeServerPorts(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort());
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).port(server.getHttpSecondaryPort()).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort()));
  openapi=OpenAPIConnection.openAPIDocsConnection(server,true).port(server.getHttpSecondarySecurePort()).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort()));
  OpenAPITestUtil.changeServerPorts(server,-1,server.getHttpDefaultSecurePort());
  openapi=OpenAPIConnection.openAPIDocsConnection(server,true).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,-1,server.getHttpDefaultSecurePort()));
  OpenAPITestUtil.changeServerPorts(server,server.getHttpDefaultPort(),-1);
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),-1));
}","/** 
 * This test ensures that the OpenAPI document always reflects the correct host/port
 * @throws Exception s
 */
@Test public void testHostPort() throws Exception {
  String openapi=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort()));
  openapi=OpenAPIConnection.openAPIDocsConnection(server,true).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort()));
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.changeServerPorts(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort());
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).port(server.getHttpSecondaryPort()).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort()));
  openapi=OpenAPIConnection.openAPIDocsConnection(server,true).port(server.getHttpSecondarySecurePort()).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort()));
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.changeServerPorts(server,-1,server.getHttpDefaultSecurePort());
  openapi=OpenAPIConnection.openAPIDocsConnection(server,true).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,-1,server.getHttpDefaultSecurePort()));
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.changeServerPorts(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort());
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).port(server.getHttpSecondaryPort()).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort()));
  openapi=OpenAPIConnection.openAPIDocsConnection(server,true).port(server.getHttpSecondarySecurePort()).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpSecondaryPort(),server.getHttpSecondarySecurePort()));
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.changeServerPorts(server,server.getHttpSecondaryPort(),-1);
  openapi=OpenAPIConnection.openAPIDocsConnection(server,false).port(server.getHttpSecondaryPort()).download();
  openapiNode=OpenAPITestUtil.readYamlTree(openapi);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpSecondaryPort(),-1));
  OpenAPITestUtil.setMarkToEndOfAllLogs(server);
  OpenAPITestUtil.changeServerPorts(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort());
}"
34721,"/** 
 * This test ensures that the OpenAPI document always reflects the correct server object when a WAR without server object is deployed
 * @throws Exception s
 */
@Test public void testContextRootWARWithPathPrefixedContextRoot() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_9);
  OpenAPITestUtil.waitForApplicationProcessorAddedEvent(server,APP_NAME_9);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),null));
}","/** 
 * This test ensures that the OpenAPI document always reflects the correct server object when a WAR without server object is deployed
 * @throws Exception s
 */
@Test public void testContextRootWARWithPathPrefixedContextRoot() throws Exception {
  OpenAPITestUtil.addApplication(server,APP_NAME_9);
  String doc=OpenAPIConnection.openAPIDocsConnection(server,false).download();
  JsonNode openapiNode=OpenAPITestUtil.readYamlTree(doc);
  OpenAPITestUtil.checkServer(openapiNode,OpenAPITestUtil.getServerURLs(server,server.getHttpDefaultPort(),server.getHttpDefaultSecurePort(),null));
}"
34722,"/** 
 * Adds an WAR application inside the '${server.config.dir}/apps/' to the current config, or updates an application with a specific name if it already exists. This method waits for the app to be processed by OpenAPI Application Processor.
 * @param name the name of the application
 * @return the deployed application
 */
public static Application addApplication(LibertyServer server,String name) throws Exception {
  return addApplication(server,name,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"");
}","public static Application addApplication(LibertyServer server,String name,boolean waitForAppProcessor) throws Exception {
  return addApplication(server,name,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"",waitForAppProcessor);
}"
34723,"/** 
 * Sets the http and https ports on the server configuration object. Note: After this method is called, you should also call <code>server.updateServerConfiguration(config);</code> for the configuration to take effect.
 * @param config
 * @param httpPort
 * @param httpsPort
 * @throws Exception
 */
public static void changeServerPorts(LibertyServer server,int httpPort,int httpsPort) throws Exception {
  ServerConfiguration config=server.getServerConfiguration();
  HttpEndpoint http=config.getHttpEndpoints().getById(""String_Node_Str"");
  if (http == null) {
    http=new HttpEndpoint();
    http.setId(""String_Node_Str"");
    http.setHttpPort(server.getHttpDefaultPort());
    http.setHttpPort(server.getHttpDefaultSecurePort());
    config.getHttpEndpoints().add(http);
  }
  if (http.getHttpPort() == httpPort && http.getHttpsPort() == httpsPort) {
    return;
  }
  http.setHttpPort(httpPort);
  http.setHttpsPort(httpsPort);
  if (server.isStarted()) {
    server.setMarkToEndOfLog();
    server.updateServerConfiguration(config);
    assertNotNull(""String_Node_Str"",server.waitForConfigUpdateInLogUsingMark(null,false));
    server.resetLogMarks();
  }
 else {
    server.updateServerConfiguration(config);
  }
}","public static void changeServerPorts(LibertyServer server,int httpPort,int httpsPort) throws Exception {
  ServerConfiguration config=server.getServerConfiguration();
  HttpEndpoint http=config.getHttpEndpoints().getById(""String_Node_Str"");
  if (http == null) {
    http=new HttpEndpoint();
    http.setId(""String_Node_Str"");
    http.setHttpPort(httpPort);
    http.setHttpsPort(httpsPort);
    config.getHttpEndpoints().add(http);
  }
 else   if (http.getHttpPort() == httpPort && http.getHttpsPort() == httpsPort) {
    return;
  }
  http.setHttpPort(httpPort);
  http.setHttpsPort(httpsPort);
  if (server.isStarted()) {
    setMarkToEndOfAllLogs(server);
    server.updateServerConfiguration(config);
    assertNotNull(""String_Node_Str"",server.waitForConfigUpdateInLogUsingMark(null,false));
    String regex=""String_Node_Str"" + ""String_Node_Str"" + (httpPort == -1 ? 0 : httpPort) + ""String_Node_Str""+ (httpsPort == -1 ? 0 : httpsPort);
    server.waitForStringInTrace(regex,TIMEOUT);
  }
 else {
    server.updateServerConfiguration(config);
  }
}"
34724,"@Override public HttpOutputStreamImpl getBody(){
  if (null == this.body) {
    if (this.useEE7Streams) {
      this.body=new HttpOutputStreamEE7(this.isc);
    }
 else {
      this.body=new HttpOutputStreamImpl(this.isc);
    }
    this.body.setVirtualConnection(this.connlink.getVirtualConnection());
    if (this.message != null) {
      long messageContentLength=getContentLength();
      if (messageContentLength != -1) {
        this.body.setContentLength(getContentLength());
      }
    }
  }
  return this.body;
}","@Override public HttpOutputStreamImpl getBody(){
  if (null == this.body) {
    if (this.useEE7Streams) {
      this.body=new HttpOutputStreamEE7(this.isc);
      isLastStreamUsedEE7=true;
    }
 else {
      this.body=new HttpOutputStreamImpl(this.isc);
    }
    this.body.setVirtualConnection(this.connlink.getVirtualConnection());
    if (this.message != null) {
      long messageContentLength=getContentLength();
      if (messageContentLength != -1) {
        this.body.setContentLength(getContentLength());
      }
    }
  }
 else   if (this.useEE7Streams && !isLastStreamUsedEE7) {
    this.body=new HttpOutputStreamEE7(this.isc);
    isLastStreamUsedEE7=true;
  }
 else   if (!this.useEE7Streams && isLastStreamUsedEE7) {
    this.body=new HttpOutputStreamImpl(this.isc);
    isLastStreamUsedEE7=false;
  }
  return this.body;
}"
34725,"@Override public void close(VirtualConnection inVC,Exception e){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + this + ""String_Node_Str""+ inVC);
  }
  if (streamID == 0 || streamID % 2 == 1) {
    this.muxLink.close(inVC,e);
  }
}","@Override public void close(VirtualConnection inVC,Exception e){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + this + ""String_Node_Str""+ inVC);
  }
  if (streamID == 0 || streamID % 2 == 1) {
    if (e == null || e instanceof Http2Exception) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
      this.muxLink.close(inVC,e);
    }
 else {
      H2StreamProcessor h2sp=muxLink.getStreamProcessor(streamID);
      if (h2sp != null) {
        try {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"" + streamID);
          }
          int PROTOCOL_ERROR=0x1;
          Frame reset=new FrameRstStream(streamID,PROTOCOL_ERROR,false);
          h2sp.processNextFrame(reset,Constants.Direction.WRITING_OUT);
        }
 catch (        Http2Exception h2e) {
          this.muxLink.close(inVC,e);
        }
      }
      this.muxLink.close(inVC,null);
    }
  }
 else {
    H2StreamProcessor h2sp=muxLink.getStreamProcessor(streamID);
    if (h2sp != null && !h2sp.isStreamClosed() && !h2sp.isHalfClosed()) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + streamID);
      }
      int PROTOCOL_ERROR=0x1;
      Frame reset=new FrameRstStream(streamID,PROTOCOL_ERROR,false);
      try {
        h2sp.processNextFrame(reset,Constants.Direction.WRITING_OUT);
      }
 catch (      Http2Exception h2e) {
      }
    }
  }
}"
34726,"/** 
 * @param direction
 * @throws CompressionException
 * @throws ProtocolException
 */
private void processHalfClosedRemote(Constants.Direction direction) throws FlowControlException, CompressionException, ProtocolException {
  if (direction == Direction.WRITING_OUT) {
    boolean writeCompleted=writeFrameSync();
    if ((currentFrame.getFrameType() == FrameTypes.RST_STREAM || currentFrame.flagEndStreamSet()) && writeCompleted) {
      endStream=true;
      updateStreamState(StreamState.CLOSED);
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
      }
 else {
        setContinuationFrameExpected(true);
      }
    }
  }
 else   if (currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    endStream=true;
    updateStreamState(StreamState.CLOSED);
  }
 else   if (frameType == FrameTypes.CONTINUATION) {
    getHeadersFromFrame();
    if (currentFrame.flagEndHeadersSet()) {
      processCompleteHeaders(false);
      setHeadersComplete();
      setReadyForRead();
    }
  }
}","/** 
 * @param direction
 * @throws CompressionException
 * @throws ProtocolException
 */
private void processHalfClosedRemote(Constants.Direction direction) throws FlowControlException, CompressionException, ProtocolException {
  if (direction == Direction.WRITING_OUT) {
    boolean writeCompleted=writeFrameSync();
    if ((currentFrame.getFrameType() == FrameTypes.RST_STREAM || currentFrame.flagEndStreamSet()) && writeCompleted) {
      endStream=true;
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
      }
 else {
        setContinuationFrameExpected(true);
      }
    }
  }
 else   if (currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    endStream=true;
    updateStreamState(StreamState.CLOSED);
  }
 else   if (frameType == FrameTypes.CONTINUATION) {
    getHeadersFromFrame();
    if (currentFrame.flagEndHeadersSet()) {
      processCompleteHeaders(false);
      setHeadersComplete();
      setReadyForRead();
    }
  }
}"
34727,"/** 
 * Transitions the stream state, give the previous state and current frame. Handles writes and error processing as needed.
 * @param Direction.WRITING_OUT or Direction.READING_IN
 * @throws Http2Exception
 */
private void readWriteTransitionState(Constants.Direction direction) throws Http2Exception {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ state);
  }
  if (currentFrame.getFrameType() == FrameTypes.GOAWAY || currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    writeFrameSync();
    this.updateStreamState(StreamState.CLOSED);
    if (currentFrame.getFrameType() == FrameTypes.GOAWAY) {
      muxLink.closeConnectionLink(null);
    }
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + state);
    }
    return;
  }
switch (state) {
case IDLE:
    processIdle(direction);
  break;
case RESERVED_LOCAL:
processReservedLocal(direction);
break;
case RESERVED_REMOTE:
processReservedRemote(direction);
break;
case OPEN:
processOpen(direction);
break;
case HALF_CLOSED_REMOTE:
processHalfClosedRemote(direction);
break;
case HALF_CLOSED_LOCAL:
processHalfClosedLocal(direction);
break;
case CLOSED:
processClosed(direction);
break;
default :
break;
}
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + state);
}
}","/** 
 * Transitions the stream state, give the previous state and current frame. Handles writes and error processing as needed.
 * @param Direction.WRITING_OUT or Direction.READING_IN
 * @throws Http2Exception
 */
private void readWriteTransitionState(Constants.Direction direction) throws Http2Exception {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ state);
  }
  if (currentFrame.getFrameType() == FrameTypes.GOAWAY || currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    writeFrameSync();
    if (currentFrame.getFrameType() == FrameTypes.GOAWAY) {
      this.updateStreamState(StreamState.CLOSED);
      muxLink.closeConnectionLink(null);
    }
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + state);
    }
    return;
  }
switch (state) {
case IDLE:
    processIdle(direction);
  break;
case RESERVED_LOCAL:
processReservedLocal(direction);
break;
case RESERVED_REMOTE:
processReservedRemote(direction);
break;
case OPEN:
processOpen(direction);
break;
case HALF_CLOSED_REMOTE:
processHalfClosedRemote(direction);
break;
case HALF_CLOSED_LOCAL:
processHalfClosedLocal(direction);
break;
case CLOSED:
processClosed(direction);
break;
default :
break;
}
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + state);
}
}"
34728,"/** 
 * Check to see if the passed headers contain values for :method, :scheme, and :path If the CONNECT method header was found, :path and :scheme are not allowed, and :authority is required
 * @param HashMap<String, String> headers
 * @return true if :method, :scheme, and :path are found
 */
private boolean isValidH2Request(HashMap<String,String> pseudoHeaders){
  if (MethodValues.CONNECT.getName().equals(pseudoHeaders.get(HpackConstants.METHOD))) {
    if (pseudoHeaders.get(HpackConstants.PATH) == null && pseudoHeaders.get(HpackConstants.SCHEME) == null && pseudoHeaders.get(HpackConstants.AUTHORITY) != null) {
      this.isConnectStream=true;
      return true;
    }
    return false;
  }
  if (pseudoHeaders.get(HpackConstants.METHOD) != null && pseudoHeaders.get(HpackConstants.PATH) != null && pseudoHeaders.get(HpackConstants.SCHEME) != null) {
    if (pseudoHeaders.get(HpackConstants.METHOD).equals(""String_Node_Str"") && !pseudoHeaders.get(HpackConstants.PATH).equals(""String_Node_Str"")) {
      return false;
    }
    return true;
  }
  return false;
}","/** 
 * Check to see if the passed headers contain values for :method, :scheme, and :path If the CONNECT method header was found, :path and :scheme are not allowed, and :authority is required
 * @param HashMap<String, String> headers
 * @return true if :method, :scheme, and :path are found
 */
private boolean isValidH2Request(HashMap<String,String> pseudoHeaders){
  if (MethodValues.CONNECT.getName().equals(pseudoHeaders.get(HpackConstants.METHOD))) {
    if (pseudoHeaders.get(HpackConstants.PATH) == null && pseudoHeaders.get(HpackConstants.SCHEME) == null && pseudoHeaders.get(HpackConstants.AUTHORITY) != null) {
      this.isConnectStream=true;
      return true;
    }
    return false;
  }
  if (pseudoHeaders.get(HpackConstants.METHOD) != null && pseudoHeaders.get(HpackConstants.PATH) != null && pseudoHeaders.get(HpackConstants.SCHEME) != null) {
    return true;
  }
  return false;
}"
34729,"/** 
 * Update the state of this stream by passing in a given Frame to read or write. This method handles state validation, state transitions, connection setting updates, frame responses, and error processing. Note this method is synchronized.
 * @param Frame
 * @param Direction.WRITING_OUT or Direction.READING_IN
 * @throws ProtocolException
 * @throws StreamClosedException
 */
public synchronized void processNextFrame(Frame frame,Constants.Direction direction) throws ProtocolException, StreamClosedException {
  boolean doDebugWhile=false;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString()+ ""String_Node_Str""+ muxLink.hashCode());
  }
  if (isStreamClosed()) {
    if (direction.equals(Constants.Direction.WRITING_OUT)) {
      if (muxLink.significantlyPastCloseTime(myID)) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
 else {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
    }
 else     if (direction.equals(Constants.Direction.READ_IN)) {
      if (frame.getFrameType() == FrameTypes.PRIORITY) {
        return;
      }
      if (muxLink.significantlyPastCloseTime(myID)) {
        throw new ProtocolException(""String_Node_Str"");
      }
      if (frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.HEADERS) {
        if (muxLink.closeTable.containsKey(this.myID)) {
          throw new StreamClosedException(frame.getFrameType() + ""String_Node_Str"");
        }
 else {
          throw new ProtocolException(frame.getFrameType() + ""String_Node_Str"");
        }
      }
 else       if (frame.getFrameType() == FrameTypes.RST_STREAM) {
        return;
      }
    }
  }
  ADDITIONAL_FRAME addFrame=ADDITIONAL_FRAME.FIRST_TIME;
  Http2Exception addFrameException=null;
  currentFrame=frame;
  while (addFrame != ADDITIONAL_FRAME.NO) {
    if (doDebugWhile) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString());
      }
    }
 else {
      doDebugWhile=true;
    }
    if (addFrame == ADDITIONAL_FRAME.RESET) {
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
      currentFrame=new FrameRstStream(myID,addFrameException.getErrorCode(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    if (addFrame == ADDITIONAL_FRAME.GOAWAY) {
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + muxLink.getHighestClientStreamId());
      }
      currentFrame=new FrameGoAway(0,addFrameException.getMessage().getBytes(),addFrameException.getErrorCode(),muxLink.getHighestClientStreamId(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    frameType=currentFrame.getFrameType();
    if (frameType == FrameTypes.RST_STREAM && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.RESET;
    }
 else     if (frameType == FrameTypes.GOAWAY && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.GOAWAY;
    }
    try {
      currentFrame.validate(muxLink.getConnectionSettings());
    }
 catch (    Http2Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str""+ e.getErrorString());
      }
      if (addFrame == ADDITIONAL_FRAME.FIRST_TIME || addFrame == ADDITIONAL_FRAME.RESET || addFrame == ADDITIONAL_FRAME.GOAWAY) {
        if (e.isConnectionError()) {
          addFrame=ADDITIONAL_FRAME.GOAWAY;
        }
 else {
          addFrame=ADDITIONAL_FRAME.RESET;
        }
        addFrameException=e;
      }
 else {
        if (direction == Constants.Direction.READ_IN) {
          addFrame=ADDITIONAL_FRAME.RESET;
          addFrameException=e;
        }
 else {
        }
        addFrame=ADDITIONAL_FRAME.NO;
      }
      continue;
    }
    if (direction == Constants.Direction.READ_IN) {
      if (muxLink.checkIfGoAwaySendingOrClosing()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str"");
        }
        return;
      }
      if (isContinuationFrameExpected() && (frameType != FrameTypes.CONTINUATION || !this.continuationExpected)) {
        addFrame=ADDITIONAL_FRAME.GOAWAY;
        addFrameException=new ProtocolException(""String_Node_Str"");
        continue;
      }
      if (frameType == FrameTypes.SETTINGS || frameType == FrameTypes.GOAWAY || frameType == FrameTypes.PING) {
switch (frameType) {
case SETTINGS:
          processSETTINGSFrame();
        break;
case GOAWAY:
      processGOAWAYFrame();
    updateStreamState(StreamState.CLOSED);
  break;
case PING:
processPINGFrame();
break;
default :
break;
}
return;
}
try {
verifyReadFrameSequence();
}
 catch (Http2Exception e) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.RESET;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
addFrameException=e;
continue;
}
if (frameType == FrameTypes.PRIORITY) {
processPriorityFrame();
return;
}
if (frameType == FrameTypes.RST_STREAM) {
processRstFrame();
return;
}
try {
if (frameType == FrameTypes.WINDOW_UPDATE) {
processWindowUpdateFrame();
if (dataWaitingForWindowUpdate != null) {
if (!this.isWindowLimitExceeded(dataWaitingForWindowUpdate.peek())) {
waitingForWindowUpdate=false;
}
}
 else {
return;
}
}
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
updateStreamReadWindow();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
 else {
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"");
}
try {
verifyWriteFrameSequence();
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if ((addFrame == ADDITIONAL_FRAME.FIRST_TIME) || (addFrame == ADDITIONAL_FRAME.RESET)) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
if (!waitingForWindowUpdate && dataWaitingForWindowUpdate != null && !this.isWindowLimitExceeded(this.dataWaitingForWindowUpdate.peek())) {
addFrame=ADDITIONAL_FRAME.DATA;
currentFrame=this.dataWaitingForWindowUpdate.remove();
direction=Constants.Direction.WRITING_OUT;
if (this.dataWaitingForWindowUpdate.isEmpty()) {
this.dataWaitingForWindowUpdate=null;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
}
}","/** 
 * Update the state of this stream by passing in a given Frame to read or write. This method handles state validation, state transitions, connection setting updates, frame responses, and error processing. Note this method is synchronized.
 * @param Frame
 * @param Direction.WRITING_OUT or Direction.READING_IN
 * @throws ProtocolException
 * @throws StreamClosedException
 */
public synchronized void processNextFrame(Frame frame,Constants.Direction direction) throws ProtocolException, StreamClosedException {
  boolean doDebugWhile=false;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString()+ ""String_Node_Str""+ muxLink.hashCode());
  }
  if (isStreamClosed()) {
    if (direction.equals(Constants.Direction.WRITING_OUT)) {
      if (muxLink.significantlyPastCloseTime(myID)) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
 else {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
    }
 else     if (direction.equals(Constants.Direction.READ_IN)) {
      if (frame.getFrameType() == FrameTypes.PRIORITY || frame.getFrameType() == FrameTypes.RST_STREAM) {
        return;
      }
      if (muxLink.closeTable.containsKey(this.myID)) {
        throw new StreamClosedException(frame.getFrameType() + ""String_Node_Str"");
      }
 else {
        throw new ProtocolException(frame.getFrameType() + ""String_Node_Str"");
      }
    }
  }
  ADDITIONAL_FRAME addFrame=ADDITIONAL_FRAME.FIRST_TIME;
  Http2Exception addFrameException=null;
  currentFrame=frame;
  while (addFrame != ADDITIONAL_FRAME.NO) {
    if (doDebugWhile) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString());
      }
    }
 else {
      doDebugWhile=true;
    }
    if (addFrame == ADDITIONAL_FRAME.RESET) {
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
      currentFrame=new FrameRstStream(myID,addFrameException.getErrorCode(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    if (addFrame == ADDITIONAL_FRAME.GOAWAY) {
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + muxLink.getHighestClientStreamId());
      }
      currentFrame=new FrameGoAway(0,addFrameException.getMessage().getBytes(),addFrameException.getErrorCode(),muxLink.getHighestClientStreamId(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    frameType=currentFrame.getFrameType();
    if (frameType == FrameTypes.RST_STREAM && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.RESET;
    }
 else     if (frameType == FrameTypes.GOAWAY && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.GOAWAY;
    }
    try {
      currentFrame.validate(muxLink.getConnectionSettings());
    }
 catch (    Http2Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str""+ e.getErrorString());
      }
      if (addFrame == ADDITIONAL_FRAME.FIRST_TIME || addFrame == ADDITIONAL_FRAME.RESET || addFrame == ADDITIONAL_FRAME.GOAWAY) {
        if (e.isConnectionError()) {
          addFrame=ADDITIONAL_FRAME.GOAWAY;
        }
 else {
          addFrame=ADDITIONAL_FRAME.RESET;
        }
        addFrameException=e;
      }
 else {
        if (direction == Constants.Direction.READ_IN) {
          addFrame=ADDITIONAL_FRAME.RESET;
          addFrameException=e;
        }
 else {
        }
        addFrame=ADDITIONAL_FRAME.NO;
      }
      continue;
    }
    if (direction == Constants.Direction.READ_IN) {
      if (muxLink.checkIfGoAwaySendingOrClosing()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str"");
        }
        return;
      }
      if (isContinuationFrameExpected() && (frameType != FrameTypes.CONTINUATION || !this.continuationExpected)) {
        addFrame=ADDITIONAL_FRAME.GOAWAY;
        addFrameException=new ProtocolException(""String_Node_Str"");
        continue;
      }
      if (frameType == FrameTypes.SETTINGS || frameType == FrameTypes.GOAWAY || frameType == FrameTypes.PING) {
switch (frameType) {
case SETTINGS:
          processSETTINGSFrame();
        break;
case GOAWAY:
      processGOAWAYFrame();
    updateStreamState(StreamState.CLOSED);
  break;
case PING:
processPINGFrame();
break;
default :
break;
}
return;
}
try {
verifyReadFrameSequence();
}
 catch (Http2Exception e) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.RESET;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
addFrameException=e;
continue;
}
if (frameType == FrameTypes.PRIORITY) {
processPriorityFrame();
return;
}
if (frameType == FrameTypes.RST_STREAM) {
processRstFrame();
return;
}
try {
if (frameType == FrameTypes.WINDOW_UPDATE) {
processWindowUpdateFrame();
if (dataWaitingForWindowUpdate != null) {
if (!this.isWindowLimitExceeded(dataWaitingForWindowUpdate.peek())) {
waitingForWindowUpdate=false;
}
}
 else {
return;
}
}
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
updateStreamReadWindow();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
 else {
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"");
}
try {
verifyWriteFrameSequence();
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if ((addFrame == ADDITIONAL_FRAME.FIRST_TIME) || (addFrame == ADDITIONAL_FRAME.RESET)) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
if (!waitingForWindowUpdate && dataWaitingForWindowUpdate != null && !this.isWindowLimitExceeded(this.dataWaitingForWindowUpdate.peek())) {
addFrame=ADDITIONAL_FRAME.DATA;
currentFrame=this.dataWaitingForWindowUpdate.remove();
direction=Constants.Direction.WRITING_OUT;
if (this.dataWaitingForWindowUpdate.isEmpty()) {
this.dataWaitingForWindowUpdate=null;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
}
}"
34730,"/** 
 * @param direction
 */
private void processHalfClosedLocal(Constants.Direction direction) throws FlowControlException {
  if (direction == Direction.WRITING_OUT) {
    writeFrameSync();
    if (currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
      endStream=true;
      updateStreamState(StreamState.CLOSED);
    }
  }
 else   if (currentFrame.getFrameType() == FrameTypes.RST_STREAM || currentFrame.flagEndStreamSet()) {
    endStream=true;
    updateStreamState(StreamState.CLOSED);
  }
}","/** 
 * @param direction
 */
private void processHalfClosedLocal(Constants.Direction direction) throws FlowControlException {
  if (direction == Direction.WRITING_OUT) {
    writeFrameSync();
    if (currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
      endStream=true;
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
    }
  }
 else   if (currentFrame.getFrameType() == FrameTypes.RST_STREAM || currentFrame.flagEndStreamSet()) {
    endStream=true;
    updateStreamState(StreamState.CLOSED);
  }
}"
34731,"@Override protected void setPseudoHeaders(HashMap<String,String> pseudoHeaders) throws Exception {
  for (  Entry<String,String> entry : pseudoHeaders.entrySet()) {
    H2HeaderField header=new H2HeaderField(entry.getKey(),entry.getValue());
    if (!isValidPseudoHeader(header)) {
      throw new CompressionException(""String_Node_Str"" + header.toString());
    }
  }
  if (pseudoHeaders.containsKey(HpackConstants.AUTHORITY)) {
    this.sUrlHost=pseudoHeaders.get(HpackConstants.AUTHORITY);
    this.sHdrHost=pseudoHeaders.get(HpackConstants.AUTHORITY);
  }
  if (pseudoHeaders.containsKey(HpackConstants.METHOD)) {
    this.setMethod(pseudoHeaders.get(HpackConstants.METHOD));
  }
  if (pseudoHeaders.containsKey(HpackConstants.PATH)) {
    this.setRequestURI(pseudoHeaders.get(HpackConstants.PATH));
  }
  if (pseudoHeaders.containsKey(HpackConstants.SCHEME)) {
    this.setScheme(pseudoHeaders.get(HpackConstants.SCHEME));
  }
}","@Override protected void setPseudoHeaders(HashMap<String,String> pseudoHeaders) throws Exception {
  for (  Entry<String,String> entry : pseudoHeaders.entrySet()) {
    H2HeaderField header=new H2HeaderField(entry.getKey(),entry.getValue());
    if (!isValidPseudoHeader(header)) {
      throw new CompressionException(""String_Node_Str"" + header.toString());
    }
  }
  if (pseudoHeaders.containsKey(HpackConstants.METHOD)) {
    this.setMethod(pseudoHeaders.get(HpackConstants.METHOD));
  }
  if (pseudoHeaders.containsKey(HpackConstants.PATH)) {
    this.setRequestURI(pseudoHeaders.get(HpackConstants.PATH));
  }
  if (pseudoHeaders.containsKey(HpackConstants.SCHEME)) {
    this.setScheme(pseudoHeaders.get(HpackConstants.SCHEME));
  }
  if (pseudoHeaders.containsKey(HpackConstants.AUTHORITY)) {
    parseAuthority(pseudoHeaders.get(HpackConstants.AUTHORITY).getBytes(),0);
  }
}"
34732,"@Override public void add(Object event){
  if (event == null)   throw new NullPointerException();
  RERWLOCK.readLock().lock();
  try {
    if (!synchronousHandlerSet.isEmpty()) {
      for (      SynchronousHandler synchronousHandler : synchronousHandlerSet) {
        synchronousHandler.synchronousWrite(event);
      }
    }
    if (ringBuffer != null) {
      ringBuffer.add(event);
    }
    if (earlyMessageQueue != null) {
synchronized (earlyMessageQueue) {
        earlyMessageQueue.add(event);
      }
    }
  }
  finally {
    RERWLOCK.readLock().unlock();
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + event);
  }
}","@Override public void add(Object event){
  if (event == null)   throw new NullPointerException();
  SynchronousHandler[] arrayCopy=null;
  RERWLOCK.readLock().lock();
  try {
    if (!synchronousHandlerSet.isEmpty()) {
      arrayCopy=synchronousHandlerSet.toArray(new SynchronousHandler[0]);
    }
    if (ringBuffer != null) {
      ringBuffer.add(event);
    }
    if (earlyMessageQueue != null) {
synchronized (earlyMessageQueue) {
        earlyMessageQueue.add(event);
      }
    }
  }
  finally {
    RERWLOCK.readLock().unlock();
    if (arrayCopy != null) {
      for (      SynchronousHandler synchronousHandler : arrayCopy) {
        synchronousHandler.synchronousWrite(event);
      }
    }
    arrayCopy=null;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + event);
  }
}"
34733,"/** 
 * {@inheritDoc} <p>This method is triggered by the managed service listening for logging configuration updates from config admin & metatype processing. Tr metatype is defined to preserve variables set in bootstrap.properties so values set there are not unset by metatype defaults.
 * @param config a {@link LogProviderConfigImpl} containing dynamic updates fromthe OSGi managed service.
 */
@Override public synchronized void update(LogProviderConfig config){
  LogProviderConfigImpl trConfig=(LogProviderConfigImpl)config;
  logHeader=trConfig.getLogHeader();
  javaLangInstrument=trConfig.hasJavaLangInstrument();
  consoleLogLevel=trConfig.getConsoleLogLevel();
  copySystemStreams=trConfig.copySystemStreams();
  hideMessageids=trConfig.getMessagesToHide();
  if (hideMessageids.size() > 0) {
    logHeader=logHeader.concat(""String_Node_Str"" + hideMessageids).concat((LoggingConstants.nl));
  }
  if (formatter == null || trConfig.getTraceFormat() != formatter.getTraceFormat()) {
    formatter=new BaseTraceFormatter(trConfig.getTraceFormat());
  }
  isoDateFormat=trConfig.getIsoDateFormat();
  if (isoDateFormat != BaseTraceFormatter.useIsoDateFormat) {
    BaseTraceFormatter.useIsoDateFormat=isoDateFormat;
  }
  initializeWriters(trConfig);
  if (hideMessageids.size() > 0) {
    Tr.info(TraceSpecification.getTc(),""String_Node_Str"",new Object[]{hideMessageids});
  }
  serverName=trConfig.getServerName();
  wlpUserDir=trConfig.getWlpUsrDir();
  if (collectorMgrPipelineUtils == null) {
    collectorMgrPipelineUtils=CollectorManagerPipelineUtils.getInstance();
  }
  logSource=collectorMgrPipelineUtils.getLogSource();
  traceSource=collectorMgrPipelineUtils.getTraceSource();
  logConduit=collectorMgrPipelineUtils.getLogConduit();
  traceConduit=collectorMgrPipelineUtils.getTraceConduit();
  String messageFormat=trConfig.getMessageFormat();
  String consoleFormat=trConfig.getConsoleFormat();
  List<String> messageSourceList=new ArrayList<String>(trConfig.getMessageSource());
  List<String> consoleSourceList=new ArrayList<String>(trConfig.getConsoleSource());
  List<String> filterdMessageSourceList=filterSourcelist(messageSourceList);
  List<String> filterdConsoleSourceList=filterSourcelist(consoleSourceList);
  if (messageLogHandler == null && messagesLog != null) {
    messageLogHandler=new MessageLogHandler(serverName,wlpUserDir,filterdMessageSourceList);
    collectorMgrPipelineUtils.setMessageHandler(messageLogHandler);
    messageLogHandler.setWriter(messagesLog);
  }
  if (consoleLogHandler == null) {
    consoleLogHandler=new ConsoleLogHandler(serverName,wlpUserDir,filterdConsoleSourceList);
    collectorMgrPipelineUtils.setConsoleHandler(consoleLogHandler);
    consoleLogHandler.setWriter(systemOut);
    consoleLogHandler.setSysErrHolder(systemErr);
  }
  if (messageFormat.toLowerCase().equals(LoggingConstants.DEFAULT_MESSAGE_FORMAT)) {
    if (messageLogHandler != null) {
      messageLogHandler.setFormat(LoggingConstants.DEFAULT_MESSAGE_FORMAT);
      messageLogHandler.setWriter(messagesLog);
      ArrayList<String> filteredList=new ArrayList<String>();
      filteredList.add(""String_Node_Str"");
      updateConduitSyncHandlerConnection(filteredList,messageLogHandler);
    }
  }
  if (consoleFormat.toLowerCase().equals(LoggingConstants.DEFAULT_CONSOLE_FORMAT)) {
    if (consoleLogHandler != null) {
      consoleLogHandler.setFormat(LoggingConstants.DEFAULT_CONSOLE_FORMAT);
      ArrayList<String> filteredList=new ArrayList<String>();
      filteredList.add(""String_Node_Str"");
      if (traceLog == systemOut) {
        filteredList.add(""String_Node_Str"");
        consoleLogHandler.setIsTraceStdout(true);
      }
 else {
        consoleLogHandler.setIsTraceStdout(false);
      }
      updateConduitSyncHandlerConnection(filteredList,consoleLogHandler);
      consoleLogHandler.setCopySystemStreams(copySystemStreams);
      consoleLogHandler.setConsoleLogLevel(consoleLogLevel.intValue());
    }
  }
  if (messageFormat.toLowerCase().equals(LoggingConstants.JSON_FORMAT)) {
    if (messageLogHandler != null) {
      messageLogHandler.setFormat(LoggingConstants.JSON_FORMAT);
      messageLogHandler.setWriter(messagesLog);
      messageLogHandler.modified(filterdMessageSourceList);
      updateConduitSyncHandlerConnection(messageSourceList,messageLogHandler);
    }
  }
  if (consoleFormat.toLowerCase().equals(LoggingConstants.JSON_FORMAT)) {
    if (consoleLogHandler != null) {
      consoleLogHandler.setFormat(LoggingConstants.JSON_FORMAT);
      consoleLogHandler.modified(filterdConsoleSourceList);
      updateConduitSyncHandlerConnection(consoleSourceList,consoleLogHandler);
    }
  }
  if (messageLogHandler != null) {
    messageLogHandler.setFormatter(formatter);
  }
  consoleLogHandler.setFormatter(formatter);
  consoleLogHandler.setBTS(this);
}","/** 
 * {@inheritDoc} <p>This method is triggered by the managed service listening for logging configuration updates from config admin & metatype processing. Tr metatype is defined to preserve variables set in bootstrap.properties so values set there are not unset by metatype defaults.
 * @param config a {@link LogProviderConfigImpl} containing dynamic updates fromthe OSGi managed service.
 */
@Override public synchronized void update(LogProviderConfig config){
  LogProviderConfigImpl trConfig=(LogProviderConfigImpl)config;
  logHeader=trConfig.getLogHeader();
  javaLangInstrument=trConfig.hasJavaLangInstrument();
  consoleLogLevel=trConfig.getConsoleLogLevel();
  copySystemStreams=trConfig.copySystemStreams();
  hideMessageids=trConfig.getMessagesToHide();
  if (hideMessageids.size() > 0) {
    logHeader=logHeader.concat(""String_Node_Str"" + hideMessageids).concat((LoggingConstants.nl));
  }
  if (formatter == null || trConfig.getTraceFormat() != formatter.getTraceFormat()) {
    formatter=new BaseTraceFormatter(trConfig.getTraceFormat());
  }
  isoDateFormat=trConfig.getIsoDateFormat();
  if (isoDateFormat != BaseTraceFormatter.useIsoDateFormat) {
    BaseTraceFormatter.useIsoDateFormat=isoDateFormat;
  }
  initializeWriters(trConfig);
  if (hideMessageids.size() > 0) {
    Tr.info(TraceSpecification.getTc(),""String_Node_Str"",new Object[]{hideMessageids});
  }
  serverName=trConfig.getServerName();
  wlpUserDir=trConfig.getWlpUsrDir();
  if (collectorMgrPipelineUtils == null) {
    collectorMgrPipelineUtils=CollectorManagerPipelineUtils.getInstance();
    collectorMgrPipelineUtils.setJsonTrService(true);
  }
  logSource=collectorMgrPipelineUtils.getLogSource();
  traceSource=collectorMgrPipelineUtils.getTraceSource();
  logConduit=collectorMgrPipelineUtils.getLogConduit();
  traceConduit=collectorMgrPipelineUtils.getTraceConduit();
  String messageFormat=trConfig.getMessageFormat();
  String consoleFormat=trConfig.getConsoleFormat();
  List<String> messageSourceList=new ArrayList<String>(trConfig.getMessageSource());
  List<String> consoleSourceList=new ArrayList<String>(trConfig.getConsoleSource());
  List<String> filterdMessageSourceList=filterSourcelist(messageSourceList);
  List<String> filterdConsoleSourceList=filterSourcelist(consoleSourceList);
  if (messageLogHandler == null && messagesLog != null) {
    messageLogHandler=new MessageLogHandler(serverName,wlpUserDir,filterdMessageSourceList);
    collectorMgrPipelineUtils.setMessageHandler(messageLogHandler);
    messageLogHandler.setWriter(messagesLog);
  }
  if (consoleLogHandler == null) {
    consoleLogHandler=new ConsoleLogHandler(serverName,wlpUserDir,filterdConsoleSourceList);
    collectorMgrPipelineUtils.setConsoleHandler(consoleLogHandler);
    consoleLogHandler.setWriter(systemOut);
    consoleLogHandler.setSysErrHolder(systemErr);
  }
  if (messageFormat.toLowerCase().equals(LoggingConstants.DEFAULT_MESSAGE_FORMAT)) {
    if (messageLogHandler != null) {
      messageLogHandler.setFormat(LoggingConstants.DEFAULT_MESSAGE_FORMAT);
      messageLogHandler.setWriter(messagesLog);
      ArrayList<String> filteredList=new ArrayList<String>();
      filteredList.add(""String_Node_Str"");
      updateConduitSyncHandlerConnection(filteredList,messageLogHandler);
    }
  }
  if (consoleFormat.toLowerCase().equals(LoggingConstants.DEFAULT_CONSOLE_FORMAT)) {
    if (consoleLogHandler != null) {
      consoleLogHandler.setFormat(LoggingConstants.DEFAULT_CONSOLE_FORMAT);
      ArrayList<String> filteredList=new ArrayList<String>();
      filteredList.add(""String_Node_Str"");
      if (traceLog == systemOut) {
        filteredList.add(""String_Node_Str"");
        consoleLogHandler.setIsTraceStdout(true);
      }
 else {
        consoleLogHandler.setIsTraceStdout(false);
      }
      updateConduitSyncHandlerConnection(filteredList,consoleLogHandler);
      consoleLogHandler.setCopySystemStreams(copySystemStreams);
      consoleLogHandler.setConsoleLogLevel(consoleLogLevel.intValue());
    }
  }
  if (messageFormat.toLowerCase().equals(LoggingConstants.JSON_FORMAT)) {
    if (messageLogHandler != null) {
      messageLogHandler.setFormat(LoggingConstants.JSON_FORMAT);
      messageLogHandler.setWriter(messagesLog);
      messageLogHandler.modified(filterdMessageSourceList);
      updateConduitSyncHandlerConnection(messageSourceList,messageLogHandler);
    }
  }
  if (consoleFormat.toLowerCase().equals(LoggingConstants.JSON_FORMAT)) {
    if (consoleLogHandler != null) {
      consoleLogHandler.setFormat(LoggingConstants.JSON_FORMAT);
      consoleLogHandler.modified(filterdConsoleSourceList);
      updateConduitSyncHandlerConnection(consoleSourceList,consoleLogHandler);
    }
  }
  if (messageLogHandler != null) {
    messageLogHandler.setFormatter(formatter);
  }
  consoleLogHandler.setFormatter(formatter);
  consoleLogHandler.setBTS(this);
}"
34734,"private void addJava2SecurityPropertiesToBootstrapFile(RemoteFile f) throws Exception {
  java.io.OutputStream w=f.openForWriting(true);
  try {
    w.write(""String_Node_Str"".getBytes());
    w.write(""String_Node_Str"".getBytes());
    w.write(""String_Node_Str"".getBytes());
    w.write(""String_Node_Str"".getBytes());
    w.write(""String_Node_Str"".getBytes());
    Log.info(c,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.info(c,""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
  w.flush();
  w.close();
  isJava2SecurityEnabled=true;
}","private void addJava2SecurityPropertiesToBootstrapFile(RemoteFile f,boolean debug) throws Exception {
  java.io.OutputStream w=f.openForWriting(true);
  try {
    w.write(""String_Node_Str"".getBytes());
    w.write(""String_Node_Str"".getBytes());
    w.write(""String_Node_Str"".getBytes());
    w.write((""String_Node_Str"" + debug).getBytes());
    w.write(""String_Node_Str"".getBytes());
    if (debug) {
      w.write(""String_Node_Str"".getBytes());
      w.write(""String_Node_Str"".getBytes());
    }
    Log.info(c,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.info(c,""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
  w.flush();
  w.close();
  isJava2SecurityEnabled=true;
}"
34735,"private OpenAPI processWebModule(Container appContainer,WebModuleInfo moduleInfo){
  ClassLoader appClassloader=moduleInfo.getClassLoader();
  boolean isOASApp=false;
  ConfigProcessor configProcessor=new ConfigProcessor(appClassloader);
  OpenAPI newDocument=null;
  OASModelReader modelReader=OpenAPIUtils.getOASModelReader(appClassloader,configProcessor.getModelReaderClassName());
  if (modelReader != null) {
    try {
      OpenAPI model=modelReader.buildModel();
      if (model != null) {
        isOASApp=true;
        newDocument=model;
      }
    }
 catch (    Throwable e) {
      if (OpenAPIUtils.isEventEnabled(tc)) {
        Tr.event(tc,""String_Node_Str"" + e.getMessage());
      }
    }
  }
  String openAPIStaticFile=StaticFileProcessor.getOpenAPIFile(appContainer);
  if (openAPIStaticFile != null) {
    SwaggerParseResult result=new OpenAPIV3Parser().readContents(openAPIStaticFile,newDocument,null,null);
    if (result.getOpenAPI() != null) {
      newDocument=result.getOpenAPI();
      isOASApp=true;
    }
 else {
      Tr.error(tc,""String_Node_Str"",moduleInfo.getApplicationInfo().getDeploymentName());
    }
  }
  AnnotationScanner scanner=OpenAPIUtils.creatAnnotationScanner(appClassloader,appContainer);
  if (!configProcessor.isScanDisabled()) {
    Set<String> classNamesToScan=new HashSet<>();
    if (configProcessor.getClassesToScan() != null) {
      classNamesToScan.addAll(configProcessor.getClassesToScan());
    }
    if (configProcessor.getPackagesToScan() != null) {
      Set<String> foundClasses=scanner.getAnnotatedClassesNames();
      for (      String packageName : configProcessor.getPackagesToScan()) {
        for (        String className : foundClasses) {
          if (className.startsWith(packageName)) {
            classNamesToScan.add(className);
          }
        }
      }
    }
    if (classNamesToScan.size() == 0 && scanner.anyAnnotatedClasses()) {
      classNamesToScan.addAll(scanner.getAnnotatedClassesNames());
    }
    if (configProcessor.getClassesToExclude() != null) {
      classNamesToScan.removeAll(configProcessor.getClassesToExclude());
    }
    if (configProcessor.getPackagesToExclude() != null) {
      for (      String packageToExclude : configProcessor.getPackagesToExclude()) {
        Iterator<String> iterator=classNamesToScan.iterator();
        while (iterator.hasNext()) {
          if (iterator.next().startsWith(packageToExclude)) {
            iterator.remove();
          }
        }
      }
    }
    if (classNamesToScan.size() > 0) {
      isOASApp=true;
      Set<Class<?>> classes=new HashSet<>();
      for (      String clazz : classNamesToScan) {
        try {
          classes.add(appClassloader.loadClass(clazz));
        }
 catch (        ClassNotFoundException e) {
          if (OpenAPIUtils.isEventEnabled(tc)) {
            Tr.event(tc,""String_Node_Str"" + e.getMessage());
          }
        }
      }
      Reader reader=new Reader(newDocument);
      reader.setApplicationPath(scanner.getURLMapping());
      newDocument=reader.read(classes);
    }
  }
  if (!isOASApp) {
    return null;
  }
  handleServers(newDocument,configProcessor);
  OASFilter oasFilter=OpenAPIUtils.getOASFilter(appClassloader,configProcessor.getOpenAPIFilterClassName());
  if (oasFilter != null) {
    final OpenAPIFilter filter=new OpenAPIFilter(oasFilter);
    try {
      filter.filter(newDocument);
    }
 catch (    Throwable e) {
      if (OpenAPIUtils.isEventEnabled(tc)) {
        Tr.event(tc,""String_Node_Str"" + e.getMessage());
      }
    }
  }
  final boolean validating=configProcessor.isValidating();
  if (validating) {
    try {
      validateDocument(newDocument);
    }
 catch (    Throwable e) {
      if (OpenAPIUtils.isEventEnabled(tc)) {
        Tr.event(tc,""String_Node_Str"" + e.getMessage());
      }
    }
  }
  return newDocument;
}","private OpenAPI processWebModule(Container appContainer,WebModuleInfo moduleInfo){
  ClassLoader appClassloader=moduleInfo.getClassLoader();
  boolean isOASApp=false;
  ConfigProcessor configProcessor=new ConfigProcessor(appClassloader);
  OpenAPI newDocument=null;
  OASModelReader modelReader=OpenAPIUtils.getOASModelReader(appClassloader,configProcessor.getModelReaderClassName());
  if (modelReader != null) {
    try {
      OpenAPI model=modelReader.buildModel();
      if (model != null) {
        isOASApp=true;
        newDocument=model;
      }
    }
 catch (    Throwable e) {
      if (OpenAPIUtils.isEventEnabled(tc)) {
        Tr.event(tc,""String_Node_Str"" + e.getMessage());
      }
    }
  }
  String openAPIStaticFile=StaticFileProcessor.getOpenAPIFile(appContainer);
  if (openAPIStaticFile != null) {
    SwaggerParseResult result=new OpenAPIV3Parser().readContents(openAPIStaticFile,newDocument,null,null);
    if (result.getOpenAPI() != null) {
      newDocument=result.getOpenAPI();
      isOASApp=true;
    }
 else {
      Tr.error(tc,""String_Node_Str"",moduleInfo.getApplicationInfo().getDeploymentName());
    }
  }
  AnnotationScanner scanner=OpenAPIUtils.creatAnnotationScanner(appClassloader,appContainer);
  if (!configProcessor.isScanDisabled()) {
    Set<String> classNamesToScan=new HashSet<>();
    if (configProcessor.getClassesToScan() != null) {
      classNamesToScan.addAll(configProcessor.getClassesToScan());
    }
    if (configProcessor.getPackagesToScan() != null) {
      Set<String> foundClasses=scanner.getAnnotatedClassesNames();
      for (      String packageName : configProcessor.getPackagesToScan()) {
        for (        String className : foundClasses) {
          if (className.startsWith(packageName)) {
            classNamesToScan.add(className);
          }
        }
      }
    }
    if (classNamesToScan.size() == 0 && scanner.anyAnnotatedClasses()) {
      classNamesToScan.addAll(scanner.getAnnotatedClassesNames());
    }
    if (configProcessor.getClassesToExclude() != null) {
      classNamesToScan.removeAll(configProcessor.getClassesToExclude());
    }
    if (configProcessor.getPackagesToExclude() != null) {
      for (      String packageToExclude : configProcessor.getPackagesToExclude()) {
        Iterator<String> iterator=classNamesToScan.iterator();
        while (iterator.hasNext()) {
          if (iterator.next().startsWith(packageToExclude)) {
            iterator.remove();
          }
        }
      }
    }
    if (classNamesToScan.size() > 0) {
      isOASApp=true;
      Set<Class<?>> classes=new HashSet<>();
      for (      String clazz : classNamesToScan) {
        try {
          classes.add(appClassloader.loadClass(clazz));
        }
 catch (        ClassNotFoundException e) {
          if (OpenAPIUtils.isEventEnabled(tc)) {
            Tr.event(tc,""String_Node_Str"" + e.getMessage());
          }
        }
      }
      Reader reader=new Reader(newDocument);
      reader.setApplicationPath(scanner.getURLMapping());
      newDocument=reader.read(classes);
    }
  }
  if (!isOASApp) {
    return null;
  }
  handleServers(newDocument,configProcessor);
  OASFilter oasFilter=OpenAPIUtils.getOASFilter(appClassloader,configProcessor.getOpenAPIFilterClassName());
  if (oasFilter != null) {
    final OpenAPIFilter filter=new OpenAPIFilter(oasFilter);
    try {
      filter.filter(newDocument);
    }
 catch (    Throwable e) {
      if (OpenAPIUtils.isEventEnabled(tc)) {
        Tr.event(tc,""String_Node_Str"" + e.getMessage());
      }
    }
  }
  if (newDocument != null && newDocument.getInfo() == null) {
    newDocument.setInfo(new InfoImpl().title(""String_Node_Str"").version(""String_Node_Str""));
  }
  final boolean validating=configProcessor.isValidating();
  if (validating) {
    try {
      validateDocument(newDocument);
    }
 catch (    Throwable e) {
      if (OpenAPIUtils.isEventEnabled(tc)) {
        Tr.event(tc,""String_Node_Str"" + e.getMessage());
      }
    }
  }
  return newDocument;
}"
34736,"@Override public SwaggerParseResult readContents(String swaggerAsString,OpenAPI startingModel,List<AuthorizationValue> auth,ParseOptions options){
  SwaggerParseResult result=new SwaggerParseResult();
  if (swaggerAsString != null && !""String_Node_Str"".equals(swaggerAsString.trim())) {
    ObjectMapper mapper=getRightMapper(swaggerAsString);
    if (auth == null) {
      auth=new ArrayList<>();
    }
    if (options != null) {
      if (options.isResolve()) {
        try {
          OpenAPIDeserializer deserializer=new OpenAPIDeserializer();
          JsonNode rootNode=mapper.readTree(swaggerAsString.getBytes());
          result=deserializer.deserialize(rootNode,startingModel);
          OpenAPIResolver resolver=new OpenAPIResolver(result.getOpenAPI(),auth,null);
          result.setOpenAPI(resolver.resolve());
        }
 catch (        Exception e) {
          result.setMessages(Arrays.asList(e.getMessage()));
        }
      }
 else {
        try {
          JsonNode rootNode=mapper.readTree(swaggerAsString.getBytes());
          result=new OpenAPIDeserializer().deserialize(rootNode,null);
        }
 catch (        Exception e) {
          result.setMessages(Arrays.asList(e.getMessage()));
        }
      }
      if (options.isResolveFully()) {
        result.setOpenAPI(new OpenAPIResolver(result.getOpenAPI(),auth,null).resolve());
        new ResolverFully(options.isResolveCombinators()).resolveFully(result.getOpenAPI());
      }
      if (options.isFlatten()) {
        new InlineModelResolver().flatten(result.getOpenAPI());
      }
    }
 else {
      try {
        JsonNode rootNode=mapper.readTree(swaggerAsString.getBytes());
        result=new OpenAPIDeserializer().deserialize(rootNode,null);
      }
 catch (      Exception e) {
        result.setMessages(Arrays.asList(e.getMessage()));
      }
    }
  }
 else {
    result.setMessages(Arrays.asList(""String_Node_Str""));
  }
  return result;
}","@Override public SwaggerParseResult readContents(String swaggerAsString,OpenAPI startingModel,List<AuthorizationValue> auth,ParseOptions options){
  SwaggerParseResult result=new SwaggerParseResult();
  if (swaggerAsString != null && !""String_Node_Str"".equals(swaggerAsString.trim())) {
    ObjectMapper mapper=getRightMapper(swaggerAsString);
    if (auth == null) {
      auth=new ArrayList<>();
    }
    if (options != null) {
      if (options.isResolve()) {
        try {
          OpenAPIDeserializer deserializer=new OpenAPIDeserializer();
          JsonNode rootNode=mapper.readTree(swaggerAsString.getBytes());
          result=deserializer.deserialize(rootNode,startingModel);
          OpenAPIResolver resolver=new OpenAPIResolver(result.getOpenAPI(),auth,null);
          result.setOpenAPI(resolver.resolve());
        }
 catch (        Exception e) {
          result.setMessages(Arrays.asList(e.getMessage()));
        }
      }
 else {
        try {
          JsonNode rootNode=mapper.readTree(swaggerAsString.getBytes());
          result=new OpenAPIDeserializer().deserialize(rootNode,startingModel);
        }
 catch (        Exception e) {
          result.setMessages(Arrays.asList(e.getMessage()));
        }
      }
      if (options.isResolveFully()) {
        result.setOpenAPI(new OpenAPIResolver(result.getOpenAPI(),auth,null).resolve());
        new ResolverFully(options.isResolveCombinators()).resolveFully(result.getOpenAPI());
      }
      if (options.isFlatten()) {
        new InlineModelResolver().flatten(result.getOpenAPI());
      }
    }
 else {
      try {
        JsonNode rootNode=mapper.readTree(swaggerAsString.getBytes());
        result=new OpenAPIDeserializer().deserialize(rootNode,startingModel);
      }
 catch (      Exception e) {
        result.setMessages(Arrays.asList(e.getMessage()));
      }
    }
  }
 else {
    result.setMessages(Arrays.asList(""String_Node_Str""));
  }
  return result;
}"
34737,"public OpenAPI parseRoot(JsonNode node,ParseResult result,OpenAPI startingModel){
  String location=""String_Node_Str"";
  OpenAPI openAPI=new OpenAPIImpl();
  if (startingModel != null)   openAPI=startingModel;
  if (node.getNodeType().equals(JsonNodeType.OBJECT)) {
    ObjectNode rootNode=(ObjectNode)node;
    String value=getString(""String_Node_Str"",rootNode,true,location,result);
    if (value == null || !value.startsWith(""String_Node_Str"")) {
      return null;
    }
    openAPI.setOpenapi(value);
    ObjectNode obj=getObject(""String_Node_Str"",rootNode,true,location,result);
    if (obj != null) {
      Info info=getInfo(obj,""String_Node_Str"",result);
      openAPI.setInfo(info);
    }
    obj=getObject(""String_Node_Str"",rootNode,true,location,result);
    if (obj != null) {
      Paths paths=getPaths(obj,""String_Node_Str"",result);
      openAPI.setPaths(paths);
    }
    obj=getObject(""String_Node_Str"",rootNode,false,location,result);
    if (obj != null) {
      Components components=getComponents(obj,""String_Node_Str"",result);
      openAPI.setComponents(components);
    }
    ArrayNode array=getArray(""String_Node_Str"",rootNode,false,location,result);
    if (array != null && array.size() > 0) {
      openAPI.setServers(getServersList(array,String.format(""String_Node_Str"",location,""String_Node_Str""),result));
    }
    obj=getObject(""String_Node_Str"",rootNode,false,location,result);
    if (obj != null) {
      ExternalDocumentation externalDocs=getExternalDocs(obj,""String_Node_Str"",result);
      openAPI.setExternalDocs(externalDocs);
    }
    array=getArray(""String_Node_Str"",rootNode,false,location,result);
    if (array != null && array.size() > 0) {
      openAPI.setTags(getTagList(array,""String_Node_Str"",result));
    }
    array=getArray(""String_Node_Str"",rootNode,false,location,result);
    if (array != null && array.size() > 0) {
      List<SecurityRequirement> securityRequirements=getSecurityRequirementsList(array,""String_Node_Str"",result);
      if (securityRequirements != null && securityRequirements.size() > 0) {
        openAPI.setSecurity(securityRequirements);
      }
    }
    Map<String,Object> extensions=getExtensions(rootNode);
    if (extensions != null && extensions.size() > 0) {
      openAPI.setExtensions(extensions);
    }
    Set<String> keys=getKeys(rootNode);
    for (    String key : keys) {
      if (!ROOT_KEYS.contains(key) && !key.startsWith(""String_Node_Str"")) {
        result.extra(location,key,node.get(key));
      }
    }
  }
 else {
    result.invalidType(location,""String_Node_Str"",""String_Node_Str"",node);
    result.invalid();
    return null;
  }
  return openAPI;
}","public OpenAPI parseRoot(JsonNode node,ParseResult result,OpenAPI startingModel){
  String location=""String_Node_Str"";
  OpenAPI openAPI=new OpenAPIImpl();
  if (startingModel != null)   openAPI=startingModel;
  if (node.getNodeType().equals(JsonNodeType.OBJECT)) {
    ObjectNode rootNode=(ObjectNode)node;
    String value=getString(""String_Node_Str"",rootNode,true,location,result);
    if (value == null || !value.startsWith(""String_Node_Str"")) {
      return null;
    }
    openAPI.setOpenapi(value);
    ObjectNode obj=getObject(""String_Node_Str"",rootNode,true,location,result);
    if (obj != null) {
      Info info=getInfo(obj,""String_Node_Str"",result);
      openAPI.setInfo(info);
    }
    obj=getObject(""String_Node_Str"",rootNode,true,location,result);
    if (obj != null) {
      Paths paths=getPaths(obj,""String_Node_Str"",result);
      if (openAPI.getPaths() != null && paths != null && paths.size() > 0) {
        for (        Entry<String,PathItem> entry : paths.entrySet()) {
          openAPI.path(entry.getKey(),entry.getValue());
        }
      }
 else {
        openAPI.setPaths(paths);
      }
    }
    obj=getObject(""String_Node_Str"",rootNode,false,location,result);
    if (obj != null) {
      Components components=getComponents(obj,""String_Node_Str"",result);
      if (components != null && openAPI.getComponents() != null) {
        mergeComponents(openAPI.getComponents(),components);
      }
 else       if (components != null) {
        openAPI.setComponents(components);
      }
    }
    ArrayNode array=getArray(""String_Node_Str"",rootNode,false,location,result);
    if (array != null && array.size() > 0) {
      List<Server> servers=getServersList(array,String.format(""String_Node_Str"",location,""String_Node_Str""),result);
      if (openAPI.getServers() != null && openAPI.getServers().size() > 0 && servers != null && servers.size() > 0) {
        for (        Server server : servers) {
          openAPI.addServer(server);
        }
      }
 else       if (servers != null && servers.size() > 0) {
        openAPI.setServers(servers);
      }
    }
    obj=getObject(""String_Node_Str"",rootNode,false,location,result);
    if (obj != null) {
      ExternalDocumentation externalDocs=getExternalDocs(obj,""String_Node_Str"",result);
      openAPI.setExternalDocs(externalDocs);
    }
    array=getArray(""String_Node_Str"",rootNode,false,location,result);
    if (array != null && array.size() > 0) {
      List<Tag> tags=getTagList(array,""String_Node_Str"",result);
      if (openAPI.getTags() != null && openAPI.getTags().size() > 0 && tags != null && tags.size() > 0) {
        Map<String,Tag> tagsMap=new LinkedHashMap<>();
        for (        Tag tag : openAPI.getTags()) {
          tagsMap.put(tag.getName(),tag);
        }
        for (        Tag tag : tags) {
          tagsMap.put(tag.getName(),tag);
        }
        openAPI.setTags(new ArrayList<>(tagsMap.values()));
      }
 else       if (tags != null && tags.size() > 0) {
        openAPI.setTags(tags);
      }
    }
    array=getArray(""String_Node_Str"",rootNode,false,location,result);
    if (array != null && array.size() > 0) {
      List<SecurityRequirement> securityRequirements=getSecurityRequirementsList(array,""String_Node_Str"",result);
      if (openAPI.getSecurity() != null && securityRequirements != null && securityRequirements.size() > 0) {
        for (        SecurityRequirement securityRequirement : securityRequirements) {
          openAPI.addSecurityRequirement(securityRequirement);
        }
      }
 else       if (securityRequirements != null && securityRequirements.size() > 0) {
        openAPI.setSecurity(securityRequirements);
      }
    }
    Map<String,Object> extensions=getExtensions(rootNode);
    if (openAPI.getExtensions() != null && extensions != null && extensions.size() > 0) {
      openAPI.setExtensions(mergeMaps(openAPI.getExtensions(),extensions));
    }
 else     if (extensions != null && extensions.size() > 0) {
      openAPI.setExtensions(extensions);
    }
    Set<String> keys=getKeys(rootNode);
    for (    String key : keys) {
      if (!ROOT_KEYS.contains(key) && !key.startsWith(""String_Node_Str"")) {
        result.extra(location,key,node.get(key));
      }
    }
  }
 else {
    result.invalidType(location,""String_Node_Str"",""String_Node_Str"",node);
    result.invalid();
    return null;
  }
  return openAPI;
}"
34738,"/** 
 * @throws Exception
 * @see com.ibm.wsspi.genericbnf.BNFHeaders#marshallHeaders(WsByteBuffer[])
 */
@Override public WsByteBuffer[] marshallHeaders(WsByteBuffer[] src){
  final boolean bTrace=TraceComponent.isAnyTracingEnabled();
  if (bTrace && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  preMarshallHeaders();
  WsByteBuffer[] buffers=src;
  if (HeaderStorage.NOTSET != this.parseIndex && !overHeaderChangeLimit() && this.table == null) {
    buffers=marshallReuseHeaders(src);
  }
 else {
    if (null == buffers) {
      buffers=new WsByteBuffer[1];
      buffers[0]=allocateBuffer(this.outgoingHdrBufferSize);
      this.bytePosition=0;
    }
    HeaderElement elem=this.hdrSequence;
    for (; null != elem; elem=elem.nextSequence) {
      if (this.table != null) {
        try {
          buffers=encodeHeader(buffers,elem);
        }
 catch (        Exception e) {
          Tr.error(tc,e.getMessage());
          for (          WsByteBuffer buffer : buffers) {
            buffer.release();
            buffer=null;
          }
          return null;
        }
      }
 else {
        buffers=marshallHeader(buffers,elem);
      }
    }
    if (this.table == null) {
      buffers=putBytes(BNFHeaders.EOL,buffers);
    }
    buffers=flushCache(buffers);
    buffers[buffers.length - 1].flip();
  }
  postMarshallHeaders();
  if (bTrace && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
  return buffers;
}","/** 
 * @throws Exception
 * @see com.ibm.wsspi.genericbnf.BNFHeaders#marshallHeaders(WsByteBuffer[])
 */
@Override public WsByteBuffer[] marshallHeaders(WsByteBuffer[] src){
  final boolean bTrace=TraceComponent.isAnyTracingEnabled();
  if (bTrace && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  preMarshallHeaders();
  WsByteBuffer[] buffers=src;
  if (HeaderStorage.NOTSET != this.parseIndex && !overHeaderChangeLimit() && this.table == null) {
    buffers=marshallReuseHeaders(src);
  }
 else {
    if (null == buffers) {
      buffers=new WsByteBuffer[1];
      buffers[0]=allocateBuffer(this.outgoingHdrBufferSize);
      this.bytePosition=0;
    }
    HeaderElement elem=this.hdrSequence;
    for (; null != elem; elem=elem.nextSequence) {
      if (this.table != null) {
        try {
          if (!H2Headers.checkIsValidH2WriteHeader(elem.getName())) {
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
              Tr.debug(tc,""String_Node_Str"" + elem.getName());
            }
            continue;
          }
          buffers=encodeHeader(buffers,elem);
        }
 catch (        Exception e) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isErrorEnabled()) {
            Tr.error(tc,e.getMessage());
          }
          for (          WsByteBuffer buffer : buffers) {
            buffer.release();
            buffer=null;
          }
          return null;
        }
      }
 else {
        buffers=marshallHeader(buffers,elem);
      }
    }
    if (this.table == null) {
      buffers=putBytes(BNFHeaders.EOL,buffers);
    }
    buffers=flushCache(buffers);
    buffers[buffers.length - 1].flip();
  }
  postMarshallHeaders();
  if (bTrace && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
  return buffers;
}"
34739,"public boolean significantlyPastCloseTime(int streamID){
  if (streamTable.contains(streamID))   return false;
  if (closeTable.containsKey(streamID)) {
    H2StreamProcessor streamProcessor=closeTable.get(streamID);
    if (streamProcessor.getCloseTime() != Constants.INITIAL_CLOSE_TIME) {
      long diff=System.nanoTime() - streamProcessor.getCloseTime();
      if (diff > CLOSE_TABLE_PURGE_TIME) {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + streamID + ""String_Node_Str""+ streamProcessor.getCloseTime()+ ""String_Node_Str""+ System.nanoTime()+ ""String_Node_Str""+ diff);
        }
        closeTable.remove(streamID);
        return true;
      }
 else {
        return false;
      }
    }
 else {
      return false;
    }
  }
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamID + ""String_Node_Str"");
  }
  return true;
}","public boolean significantlyPastCloseTime(int streamID){
  if (streamTable.containsKey(streamID))   return false;
  if (closeTable.containsKey(streamID)) {
    H2StreamProcessor streamProcessor=closeTable.get(streamID);
    if (streamProcessor.getCloseTime() != Constants.INITIAL_CLOSE_TIME) {
      long diff=System.nanoTime() - streamProcessor.getCloseTime();
      if (diff > CLOSE_TABLE_PURGE_TIME) {
        if (tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + streamID + ""String_Node_Str""+ streamProcessor.getCloseTime()+ ""String_Node_Str""+ System.nanoTime()+ ""String_Node_Str""+ diff);
        }
        closeTable.remove(streamID);
        return true;
      }
 else {
        return false;
      }
    }
 else {
      return false;
    }
  }
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamID + ""String_Node_Str"");
  }
  return true;
}"
34740,"/** 
 * Update the stream state and provide logging, if enabled
 * @param state
 */
private void updateStreamState(StreamState state){
  this.state=state;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + this.myID + ""String_Node_Str""+ this.state);
  }
}","/** 
 * Update the stream state and provide logging, if enabled
 * @param state
 */
private void updateStreamState(StreamState state){
  this.state=state;
  if (StreamState.CLOSED.equals(state)) {
    muxLink.triggerStreamClose(this);
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + this.myID + ""String_Node_Str""+ this.state);
  }
}"
34741,"/** 
 * Puts stream's header block into the read buffer that will be passed to the webcontainer
 * @throws CompressionException
 * @throws ProtocolException
 */
private void processCompleteHeaders(boolean isPush) throws CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (this.headerBlock != null) {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(getByteCount(headerBlock));
    int firstBlockLength=headerBlock.get(0).length;
    for (    byte[] byteArray : headerBlock) {
      buf.put(byteArray);
    }
    buf.flip();
    headerBlock=null;
    boolean isFirstLineComplete=false;
    HashMap<String,String> pseudoHeaders=new HashMap<String,String>();
    ArrayList<H2HeaderField> headers=new ArrayList<H2HeaderField>();
    H2HeaderField current=null;
    boolean isFirstHeaderBlock;
    boolean isFirstHeader=true;
    boolean processTrailerHeaders=headersCompleted;
    while (buf.hasRemaining()) {
      isFirstHeaderBlock=buf.position() < firstBlockLength;
      current=(H2Headers.decodeHeader(buf,this.muxLink.getReadTable(),isFirstHeader && isFirstHeaderBlock,processTrailerHeaders && !isPush,this.muxLink.getConnectionSettings()));
      if (current == null) {
        continue;
      }
      isFirstHeader=false;
      if (!isFirstLineComplete) {
        if (current.getName().startsWith(""String_Node_Str"")) {
          if (pseudoHeaders.get(current.getName()) != null) {
            this.muxLink.getReadTable().setDynamicTableValidity(false);
            throw new CompressionException(""String_Node_Str"" + current.toString());
          }
          pseudoHeaders.put(current.getName(),current.getValue());
        }
 else {
          isFirstLineComplete=true;
          if (H2Headers.getContentLengthValue(current) > -1) {
            expectedContentLength=H2Headers.getContentLengthValue(current);
          }
          headers.add(current);
        }
      }
 else {
        if (current.getName().startsWith(""String_Node_Str"")) {
          this.muxLink.getReadTable().setDynamicTableValidity(false);
          throw new CompressionException(""String_Node_Str"" + ""String_Node_Str"");
        }
        if (H2Headers.getContentLengthValue(current) > -1) {
          expectedContentLength=H2Headers.getContentLengthValue(current);
        }
        headers.add(current);
      }
    }
    if ((isPush || !processTrailerHeaders) && h2HttpInboundLinkWrap.getHeadersLength() == 0) {
      this.h2HttpInboundLinkWrap.setReadHeaders(headers);
      this.h2HttpInboundLinkWrap.setReadPseudoHeaders(pseudoHeaders);
      if (pseudoHeaders.get(HpackConstants.AUTHORITY) != null) {
        muxLink.setAuthority(pseudoHeaders.get(HpackConstants.AUTHORITY));
      }
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID);
    }
  }
}","/** 
 * Puts stream's header block into the read buffer that will be passed to the webcontainer
 * @throws CompressionException
 * @throws ProtocolException
 */
private void processCompleteHeaders(boolean isPush) throws CompressionException, ProtocolException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (this.headerBlock != null) {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(getByteCount(headerBlock));
    int firstBlockLength=headerBlock.get(0).length;
    for (    byte[] byteArray : headerBlock) {
      buf.put(byteArray);
    }
    buf.flip();
    headerBlock=null;
    boolean isFirstLineComplete=false;
    HashMap<String,String> pseudoHeaders=new HashMap<String,String>();
    ArrayList<H2HeaderField> headers=new ArrayList<H2HeaderField>();
    H2HeaderField current=null;
    boolean isFirstHeaderBlock;
    boolean isFirstHeader=true;
    boolean processTrailerHeaders=headersCompleted;
    while (buf.hasRemaining()) {
      isFirstHeaderBlock=buf.position() < firstBlockLength;
      current=(H2Headers.decodeHeader(buf,this.muxLink.getReadTable(),isFirstHeader && isFirstHeaderBlock,processTrailerHeaders && !isPush,this.muxLink.getConnectionSettings()));
      if (current == null) {
        continue;
      }
      isFirstHeader=false;
      if (!isFirstLineComplete) {
        if (current.getName().startsWith(""String_Node_Str"")) {
          if (pseudoHeaders.get(current.getName()) != null) {
            this.muxLink.getReadTable().setDynamicTableValidity(false);
            throw new CompressionException(""String_Node_Str"" + current.toString());
          }
          pseudoHeaders.put(current.getName(),current.getValue());
        }
 else {
          isFirstLineComplete=true;
          if (H2Headers.getContentLengthValue(current) > -1) {
            expectedContentLength=H2Headers.getContentLengthValue(current);
          }
          headers.add(current);
        }
      }
 else {
        if (current.getName().startsWith(""String_Node_Str"")) {
          this.muxLink.getReadTable().setDynamicTableValidity(false);
          throw new CompressionException(""String_Node_Str"" + ""String_Node_Str"");
        }
        if (H2Headers.getContentLengthValue(current) > -1) {
          expectedContentLength=H2Headers.getContentLengthValue(current);
        }
        headers.add(current);
      }
    }
    if ((isPush || !processTrailerHeaders) && h2HttpInboundLinkWrap.getHeadersLength() == 0) {
      if (!isValidH2Request(pseudoHeaders)) {
        this.setContinuationFrameExpected(false);
        ProtocolException e=new ProtocolException(""String_Node_Str"" + myID);
        e.setConnectionError(false);
        throw e;
      }
      if (pseudoHeaders.get(HpackConstants.AUTHORITY) != null) {
        muxLink.setAuthority(pseudoHeaders.get(HpackConstants.AUTHORITY));
      }
      this.h2HttpInboundLinkWrap.setReadHeaders(headers);
      this.h2HttpInboundLinkWrap.setReadPseudoHeaders(pseudoHeaders);
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID);
    }
  }
}"
34742,"private void verifyReadFrameSequence() throws ProtocolException, StreamClosedException {
  if (!currentFrame.isReadFrame()) {
    throw new ProtocolException(""String_Node_Str"");
  }
switch (frameType) {
case DATA:
    if (state == StreamState.IDLE) {
      throw new ProtocolException(""String_Node_Str"" + state);
    }
  if (!(state == StreamState.OPEN || state == StreamState.HALF_CLOSED_LOCAL)) {
    throw new StreamClosedException(""String_Node_Str"" + state);
  }
break;
case HEADERS:
if (state == StreamState.HALF_CLOSED_REMOTE || state == StreamState.CLOSED) {
throw new StreamClosedException(""String_Node_Str"" + state);
}
 else if (state != StreamState.IDLE && state != StreamState.OPEN) {
throw new ProtocolException(""String_Node_Str"" + state);
}
 else if (state == StreamState.OPEN && !currentFrame.flagEndStreamSet()) {
throw new ProtocolException(""String_Node_Str"");
}
break;
case PRIORITY:
break;
case RST_STREAM:
if (state == StreamState.IDLE) {
throw new ProtocolException(""String_Node_Str"" + state);
}
break;
case PUSH_PROMISE:
throw new ProtocolException(""String_Node_Str"");
case WINDOW_UPDATE:
if (state == StreamState.IDLE && myID != 0) {
throw new ProtocolException(""String_Node_Str"" + state);
}
break;
case CONTINUATION:
if (state == StreamState.IDLE) {
throw new ProtocolException(""String_Node_Str"" + state);
}
 else if (state == StreamState.CLOSED) {
throw new StreamClosedException(""String_Node_Str"" + state);
}
 else if (!isContinuationFrameExpected()) {
throw new ProtocolException(""String_Node_Str"");
}
break;
default :
break;
}
}","private void verifyReadFrameSequence() throws ProtocolException, StreamClosedException {
  if (!currentFrame.isReadFrame()) {
    throw new ProtocolException(""String_Node_Str"");
  }
switch (frameType) {
case DATA:
    if (state == StreamState.IDLE) {
      throw new ProtocolException(""String_Node_Str"" + state);
    }
  if (!(state == StreamState.OPEN || state == StreamState.HALF_CLOSED_LOCAL)) {
    StreamClosedException se=new StreamClosedException(""String_Node_Str"" + state);
    se.setConnectionError(false);
    throw se;
  }
break;
case HEADERS:
if (state == StreamState.HALF_CLOSED_REMOTE || state == StreamState.CLOSED) {
throw new StreamClosedException(""String_Node_Str"" + state);
}
 else if (state != StreamState.IDLE && state != StreamState.OPEN) {
throw new ProtocolException(""String_Node_Str"" + state);
}
 else if (state == StreamState.OPEN && !currentFrame.flagEndStreamSet()) {
throw new ProtocolException(""String_Node_Str"");
}
 else if (isConnectStream) {
ProtocolException pe=new ProtocolException(""String_Node_Str"");
pe.setConnectionError(false);
throw pe;
}
break;
case PRIORITY:
break;
case RST_STREAM:
if (state == StreamState.IDLE) {
throw new ProtocolException(""String_Node_Str"" + state);
}
break;
case PUSH_PROMISE:
throw new ProtocolException(""String_Node_Str"");
case WINDOW_UPDATE:
if (state == StreamState.IDLE && myID != 0) {
throw new ProtocolException(""String_Node_Str"" + state);
}
break;
case CONTINUATION:
if (state == StreamState.IDLE) {
throw new ProtocolException(""String_Node_Str"" + state);
}
 else if (state == StreamState.CLOSED) {
throw new StreamClosedException(""String_Node_Str"" + state);
}
 else if (!isContinuationFrameExpected()) {
throw new ProtocolException(""String_Node_Str"");
}
 else if (isConnectStream) {
ProtocolException pe=new ProtocolException(""String_Node_Str"");
pe.setConnectionError(false);
throw pe;
}
break;
default :
break;
}
}"
34743,"/** 
 * Send an artificially created H2 request from a push_promise up to the WebContainer
 */
public void sendRequestToWc(FrameHeaders frame){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  if (null == frame) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 else {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(frame.buildFrameForWrite().length);
    byte[] ba=frame.buildFrameForWrite();
    buf.put(ba);
    buf.flip();
    TCPReadRequestContext readi=h2HttpInboundLinkWrap.getConnectionContext().getReadInterface();
    readi.setBuffer(buf);
    currentFrame=frame;
    getHeadersFromFrame();
    setHeadersComplete();
    try {
      processCompleteHeaders(true);
    }
 catch (    CompressionException ce) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + ce);
      }
      buf.release();
      currentFrame=new FrameRstStream(myID,Constants.CANCEL,false);
      try {
        processNextFrame(currentFrame,Constants.Direction.WRITING_OUT);
      }
 catch (      Http2Exception e) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + e);
        }
      }
      currentFrame=null;
      muxLink.triggerStreamClose(this);
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
        Tr.exit(tc,""String_Node_Str"" + myID);
      }
      return;
    }
    try {
      setReadyForRead();
    }
 catch (    ProtocolException e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.exit(tc,""String_Node_Str"" + e);
      }
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}","/** 
 * Send an artificially created H2 request from a push_promise up to the WebContainer
 */
public void sendRequestToWc(FrameHeaders frame){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  if (null == frame) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 else {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(frame.buildFrameForWrite().length);
    byte[] ba=frame.buildFrameForWrite();
    buf.put(ba);
    buf.flip();
    TCPReadRequestContext readi=h2HttpInboundLinkWrap.getConnectionContext().getReadInterface();
    readi.setBuffer(buf);
    currentFrame=frame;
    getHeadersFromFrame();
    setHeadersComplete();
    try {
      processCompleteHeaders(true);
    }
 catch (    Http2Exception he) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + he);
      }
      buf.release();
      currentFrame=new FrameRstStream(myID,Constants.CANCEL,false);
      try {
        processNextFrame(currentFrame,Constants.Direction.WRITING_OUT);
      }
 catch (      Http2Exception e) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + e);
        }
      }
      currentFrame=null;
      muxLink.triggerStreamClose(this);
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
        Tr.exit(tc,""String_Node_Str"" + myID);
      }
      return;
    }
    try {
      setReadyForRead();
    }
 catch (    ProtocolException e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.exit(tc,""String_Node_Str"" + e);
      }
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}"
34744,"/** 
 * @param direction
 * @throws CompressionException
 * @throws ProtocolException
 */
private void processHalfClosedRemote(Constants.Direction direction) throws FlowControlException, CompressionException, ProtocolException {
  if (direction == Direction.WRITING_OUT) {
    boolean writeCompleted=writeFrameSync();
    if ((currentFrame.getFrameType() == FrameTypes.RST_STREAM || currentFrame.flagEndStreamSet()) && writeCompleted) {
      endStream=true;
      muxLink.triggerStreamClose(this);
      updateStreamState(StreamState.CLOSED);
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
      }
 else {
        setContinuationFrameExpected(true);
      }
    }
  }
 else   if (currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    endStream=true;
    updateStreamState(StreamState.CLOSED);
  }
 else   if (frameType == FrameTypes.CONTINUATION) {
    getHeadersFromFrame();
    if (currentFrame.flagEndHeadersSet()) {
      processCompleteHeaders(false);
      setHeadersComplete();
      setReadyForRead();
    }
  }
}","/** 
 * @param direction
 * @throws CompressionException
 * @throws ProtocolException
 */
private void processHalfClosedRemote(Constants.Direction direction) throws FlowControlException, CompressionException, ProtocolException {
  if (direction == Direction.WRITING_OUT) {
    boolean writeCompleted=writeFrameSync();
    if ((currentFrame.getFrameType() == FrameTypes.RST_STREAM || currentFrame.flagEndStreamSet()) && writeCompleted) {
      endStream=true;
      updateStreamState(StreamState.CLOSED);
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
      }
 else {
        setContinuationFrameExpected(true);
      }
    }
  }
 else   if (currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    endStream=true;
    updateStreamState(StreamState.CLOSED);
  }
 else   if (frameType == FrameTypes.CONTINUATION) {
    getHeadersFromFrame();
    if (currentFrame.flagEndHeadersSet()) {
      processCompleteHeaders(false);
      setHeadersComplete();
      setReadyForRead();
    }
  }
}"
34745,"/** 
 * Process an incoming RstStream Frame: log the error and close this stream
 */
private void processRstFrame(){
  int error=((FrameRstStream)currentFrame).getErrorCode();
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + utils.getErrorFromCode(error));
  }
  muxLink.triggerStreamClose(this);
  this.updateStreamState(StreamState.CLOSED);
}","/** 
 * Process an incoming RstStream Frame: log the error and close this stream
 */
private void processRstFrame(){
  int error=((FrameRstStream)currentFrame).getErrorCode();
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + utils.getErrorFromCode(error));
  }
  this.updateStreamState(StreamState.CLOSED);
}"
34746,"/** 
 * Update the state of this stream by passing in a given Frame to read or write. This method handles state validation, state transitions, connection setting updates, frame responses, and error processing. Note this method is synchronized.
 * @param Frame
 * @param Direction.WRITING_OUT or Direction.READING_IN
 * @throws ProtocolException
 * @throws StreamClosedException
 */
public synchronized void processNextFrame(Frame frame,Constants.Direction direction) throws ProtocolException, StreamClosedException {
  boolean doDebugWhile=false;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString()+ ""String_Node_Str""+ muxLink.hashCode());
  }
  if (isStreamClosed()) {
    if (direction.equals(Constants.Direction.WRITING_OUT)) {
      if (muxLink.significantlyPastCloseTime(myID)) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
 else {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
    }
 else     if (direction.equals(Constants.Direction.READ_IN)) {
      if (frame.getFrameType() == FrameTypes.PRIORITY) {
        return;
      }
      if (muxLink.significantlyPastCloseTime(myID)) {
        throw new ProtocolException(""String_Node_Str"");
      }
      if (frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.HEADERS) {
        if (muxLink.closeTable.containsKey(this.myID)) {
          throw new StreamClosedException(frame.getFrameType() + ""String_Node_Str"");
        }
 else {
          throw new ProtocolException(frame.getFrameType() + ""String_Node_Str"");
        }
      }
 else       if (frame.getFrameType() == FrameTypes.RST_STREAM) {
        return;
      }
    }
  }
  ADDITIONAL_FRAME addFrame=ADDITIONAL_FRAME.FIRST_TIME;
  Http2Exception addFrameException=null;
  currentFrame=frame;
  while (addFrame != ADDITIONAL_FRAME.NO) {
    if (doDebugWhile) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString());
      }
    }
 else {
      doDebugWhile=true;
    }
    if (addFrame == ADDITIONAL_FRAME.RESET) {
      currentFrame=new FrameRstStream(myID,addFrameException.getErrorCode(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    if (addFrame == ADDITIONAL_FRAME.GOAWAY) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + muxLink.getHighestClientStreamId());
      }
      currentFrame=new FrameGoAway(0,addFrameException.getMessage().getBytes(),addFrameException.getErrorCode(),muxLink.getHighestClientStreamId(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    frameType=currentFrame.getFrameType();
    if (frameType == FrameTypes.RST_STREAM && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.RESET;
    }
 else     if (frameType == FrameTypes.GOAWAY && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.GOAWAY;
    }
    try {
      currentFrame.validate(muxLink.getConnectionSettings());
    }
 catch (    Http2Exception e) {
      if (addFrame == ADDITIONAL_FRAME.FIRST_TIME || addFrame == ADDITIONAL_FRAME.RESET || addFrame == ADDITIONAL_FRAME.GOAWAY) {
        if (e.isConnectionError()) {
          addFrame=ADDITIONAL_FRAME.GOAWAY;
        }
 else {
          addFrame=ADDITIONAL_FRAME.RESET;
        }
        addFrameException=e;
      }
 else {
        if (direction == Constants.Direction.READ_IN) {
          addFrame=ADDITIONAL_FRAME.RESET;
          addFrameException=e;
        }
 else {
        }
        addFrame=ADDITIONAL_FRAME.NO;
      }
      continue;
    }
    if (direction == Constants.Direction.READ_IN) {
      if (muxLink.checkIfGoAwaySendingOrClosing()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str"");
        }
        return;
      }
      if (isContinuationFrameExpected() && (frameType != FrameTypes.CONTINUATION || !this.continuationExpected)) {
        addFrame=ADDITIONAL_FRAME.GOAWAY;
        addFrameException=new ProtocolException(""String_Node_Str"");
        continue;
      }
      if (frameType == FrameTypes.SETTINGS || frameType == FrameTypes.GOAWAY || frameType == FrameTypes.PING) {
switch (frameType) {
case SETTINGS:
          processSETTINGSFrame();
        break;
case GOAWAY:
      processGOAWAYFrame();
    updateStreamState(StreamState.CLOSED);
  break;
case PING:
processPINGFrame();
break;
default :
break;
}
return;
}
try {
verifyReadFrameSequence();
}
 catch (Http2Exception e) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.RESET;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
addFrameException=e;
continue;
}
if (frameType == FrameTypes.PRIORITY) {
processPriorityFrame();
return;
}
if (frameType == FrameTypes.RST_STREAM) {
processRstFrame();
return;
}
try {
if (frameType == FrameTypes.WINDOW_UPDATE) {
processWindowUpdateFrame();
if (dataWaitingForWindowUpdate != null) {
if (!this.isWindowLimitExceeded(dataWaitingForWindowUpdate.peek())) {
waitingForWindowUpdate=false;
}
}
 else {
return;
}
}
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
updateStreamReadWindow();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
 else {
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"");
}
try {
verifyWriteFrameSequence();
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if ((addFrame == ADDITIONAL_FRAME.FIRST_TIME) || (addFrame == ADDITIONAL_FRAME.RESET)) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
if (!waitingForWindowUpdate && dataWaitingForWindowUpdate != null && !this.isWindowLimitExceeded(this.dataWaitingForWindowUpdate.peek())) {
addFrame=ADDITIONAL_FRAME.DATA;
currentFrame=this.dataWaitingForWindowUpdate.remove();
direction=Constants.Direction.WRITING_OUT;
if (this.dataWaitingForWindowUpdate.isEmpty()) {
this.dataWaitingForWindowUpdate=null;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
}
}","/** 
 * Update the state of this stream by passing in a given Frame to read or write. This method handles state validation, state transitions, connection setting updates, frame responses, and error processing. Note this method is synchronized.
 * @param Frame
 * @param Direction.WRITING_OUT or Direction.READING_IN
 * @throws ProtocolException
 * @throws StreamClosedException
 */
public synchronized void processNextFrame(Frame frame,Constants.Direction direction) throws ProtocolException, StreamClosedException {
  boolean doDebugWhile=false;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString()+ ""String_Node_Str""+ muxLink.hashCode());
  }
  if (isStreamClosed()) {
    if (direction.equals(Constants.Direction.WRITING_OUT)) {
      if (muxLink.significantlyPastCloseTime(myID)) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
 else {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
    }
 else     if (direction.equals(Constants.Direction.READ_IN)) {
      if (frame.getFrameType() == FrameTypes.PRIORITY) {
        return;
      }
      if (muxLink.significantlyPastCloseTime(myID)) {
        throw new ProtocolException(""String_Node_Str"");
      }
      if (frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.HEADERS) {
        if (muxLink.closeTable.containsKey(this.myID)) {
          throw new StreamClosedException(frame.getFrameType() + ""String_Node_Str"");
        }
 else {
          throw new ProtocolException(frame.getFrameType() + ""String_Node_Str"");
        }
      }
 else       if (frame.getFrameType() == FrameTypes.RST_STREAM) {
        return;
      }
    }
  }
  ADDITIONAL_FRAME addFrame=ADDITIONAL_FRAME.FIRST_TIME;
  Http2Exception addFrameException=null;
  currentFrame=frame;
  while (addFrame != ADDITIONAL_FRAME.NO) {
    if (doDebugWhile) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString());
      }
    }
 else {
      doDebugWhile=true;
    }
    if (addFrame == ADDITIONAL_FRAME.RESET) {
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
      currentFrame=new FrameRstStream(myID,addFrameException.getErrorCode(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    if (addFrame == ADDITIONAL_FRAME.GOAWAY) {
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + muxLink.getHighestClientStreamId());
      }
      currentFrame=new FrameGoAway(0,addFrameException.getMessage().getBytes(),addFrameException.getErrorCode(),muxLink.getHighestClientStreamId(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    frameType=currentFrame.getFrameType();
    if (frameType == FrameTypes.RST_STREAM && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.RESET;
    }
 else     if (frameType == FrameTypes.GOAWAY && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.GOAWAY;
    }
    try {
      currentFrame.validate(muxLink.getConnectionSettings());
    }
 catch (    Http2Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str""+ e.getErrorString());
      }
      if (addFrame == ADDITIONAL_FRAME.FIRST_TIME || addFrame == ADDITIONAL_FRAME.RESET || addFrame == ADDITIONAL_FRAME.GOAWAY) {
        if (e.isConnectionError()) {
          addFrame=ADDITIONAL_FRAME.GOAWAY;
        }
 else {
          addFrame=ADDITIONAL_FRAME.RESET;
        }
        addFrameException=e;
      }
 else {
        if (direction == Constants.Direction.READ_IN) {
          addFrame=ADDITIONAL_FRAME.RESET;
          addFrameException=e;
        }
 else {
        }
        addFrame=ADDITIONAL_FRAME.NO;
      }
      continue;
    }
    if (direction == Constants.Direction.READ_IN) {
      if (muxLink.checkIfGoAwaySendingOrClosing()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str"");
        }
        return;
      }
      if (isContinuationFrameExpected() && (frameType != FrameTypes.CONTINUATION || !this.continuationExpected)) {
        addFrame=ADDITIONAL_FRAME.GOAWAY;
        addFrameException=new ProtocolException(""String_Node_Str"");
        continue;
      }
      if (frameType == FrameTypes.SETTINGS || frameType == FrameTypes.GOAWAY || frameType == FrameTypes.PING) {
switch (frameType) {
case SETTINGS:
          processSETTINGSFrame();
        break;
case GOAWAY:
      processGOAWAYFrame();
    updateStreamState(StreamState.CLOSED);
  break;
case PING:
processPINGFrame();
break;
default :
break;
}
return;
}
try {
verifyReadFrameSequence();
}
 catch (Http2Exception e) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.RESET;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
addFrameException=e;
continue;
}
if (frameType == FrameTypes.PRIORITY) {
processPriorityFrame();
return;
}
if (frameType == FrameTypes.RST_STREAM) {
processRstFrame();
return;
}
try {
if (frameType == FrameTypes.WINDOW_UPDATE) {
processWindowUpdateFrame();
if (dataWaitingForWindowUpdate != null) {
if (!this.isWindowLimitExceeded(dataWaitingForWindowUpdate.peek())) {
waitingForWindowUpdate=false;
}
}
 else {
return;
}
}
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
updateStreamReadWindow();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
 else {
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"");
}
try {
verifyWriteFrameSequence();
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if ((addFrame == ADDITIONAL_FRAME.FIRST_TIME) || (addFrame == ADDITIONAL_FRAME.RESET)) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
if (!waitingForWindowUpdate && dataWaitingForWindowUpdate != null && !this.isWindowLimitExceeded(this.dataWaitingForWindowUpdate.peek())) {
addFrame=ADDITIONAL_FRAME.DATA;
currentFrame=this.dataWaitingForWindowUpdate.remove();
direction=Constants.Direction.WRITING_OUT;
if (this.dataWaitingForWindowUpdate.isEmpty()) {
this.dataWaitingForWindowUpdate=null;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
}
}"
34747,"@Override public void validate(H2ConnectionSettings settings) throws ProtocolException, FrameSizeException {
  if (streamId == 0) {
    throw new ProtocolException(""String_Node_Str"");
  }
 else   if (this.getPayloadLength() <= 0) {
    throw new ProtocolException(""String_Node_Str"");
  }
 else   if (this.getPayloadLength() > settings.maxFrameSize) {
    throw new FrameSizeException(""String_Node_Str"");
  }
 else   if (this.paddingLength >= this.payloadLength) {
    throw new ProtocolException(""String_Node_Str"");
  }
 else   if (this.streamId == this.streamDependency) {
    throw new ProtocolException(""String_Node_Str"");
  }
 else   if (this.paddingLength < 0) {
    throw new ProtocolException(""String_Node_Str"");
  }
}","@Override public void validate(H2ConnectionSettings settings) throws Http2Exception {
  if (streamId == 0) {
    throw new ProtocolException(""String_Node_Str"");
  }
 else   if (this.getPayloadLength() <= 0) {
    throw new CompressionException(""String_Node_Str"");
  }
 else   if (this.getPayloadLength() > settings.maxFrameSize) {
    throw new FrameSizeException(""String_Node_Str"");
  }
 else   if (this.paddingLength >= this.payloadLength) {
    throw new ProtocolException(""String_Node_Str"");
  }
 else   if (this.streamId == this.streamDependency) {
    throw new ProtocolException(""String_Node_Str"");
  }
 else   if (this.paddingLength < 0) {
    throw new ProtocolException(""String_Node_Str"");
  }
}"
34748,"@Override public void validate(H2ConnectionSettings settings) throws ProtocolException {
  if (streamId == 0) {
    throw new ProtocolException(""String_Node_Str"");
  }
  if (this.streamId == this.streamDependency) {
    throw new ProtocolException(""String_Node_Str"");
  }
}","@Override public void validate(H2ConnectionSettings settings) throws ProtocolException {
  if (streamId == 0) {
    throw new ProtocolException(""String_Node_Str"");
  }
 else   if (this.streamId == this.streamDependency) {
    ProtocolException pe=new ProtocolException(""String_Node_Str"");
    pe.setConnectionError(false);
    throw pe;
  }
 else   if (this.payloadLength != 5) {
    ProtocolException pe=new ProtocolException(""String_Node_Str"");
    pe.setConnectionError(false);
    throw pe;
  }
}"
34749,"/** 
 * Check if the   {@code method} is expected to be handled by{@code OpentracingContainerFilter}.
 * @param method Wrapped method.
 * @return True if handled by the filter.
 */
private boolean isHandledByFilter(Method method){
  if (method.isAnnotationPresent(Path.class)) {
    return true;
  }
 else {
    for (    Annotation annotation : method.getAnnotations()) {
      if (HttpMethod.class.isAssignableFrom(annotation.annotationType())) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Check if the   {@code method} is expected to be handled by{@code OpentracingContainerFilter}.
 * @param method Wrapped method.
 * @return True if handled by the filter.
 */
private boolean isHandledByFilter(Method method){
  for (  Annotation annotation : method.getAnnotations()) {
    if (HttpMethod.class.isAssignableFrom(annotation.annotationType())) {
      return true;
    }
  }
  if (method.isAnnotationPresent(Path.class)) {
    return true;
  }
  return false;
}"
34750,"/** 
 * See class comment.
 * @param context Information about the wrapped method.
 * @return Result of the invoking the method.
 * @throws Exception Thrown by wrapped method.
 */
@AroundInvoke public Object execute(InvocationContext context) throws Exception {
  String methodName=""String_Node_Str"";
  String classOperationName=OpentracingService.getClassOperationName(context.getMethod());
  String methodOperationName=OpentracingService.getMethodOperationName(context.getMethod());
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,methodName + ""String_Node_Str"",classOperationName,methodOperationName);
  }
  boolean process=true;
  if (!OpentracingService.isTraced(classOperationName,methodOperationName)) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"");
    }
    process=false;
  }
  if (process && isHandledByFilter(context.getMethod())) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"");
    }
    process=false;
  }
  if (process) {
    String operationName;
    if (OpentracingService.hasExplicitOperationName(methodOperationName)) {
      operationName=methodOperationName;
    }
 else {
      if (OpentracingService.hasExplicitOperationName(classOperationName)) {
        operationName=classOperationName;
      }
 else {
        operationName=context.getMethod().getDeclaringClass().getName() + ""String_Node_Str"" + context.getMethod().getName();
      }
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,methodName + ""String_Node_Str"",operationName);
      }
    }
    Tracer tracer=OpentracingTracerManager.getTracer();
    ActiveSpan activeSpan=tracer.activeSpan();
    Tracer.SpanBuilder spanBuilder=tracer.buildSpan(operationName);
    if (activeSpan != null) {
      spanBuilder.asChildOf(activeSpan.context());
    }
    Span span=spanBuilder.startManual();
    if (activeSpan == null) {
      tracer.makeActive(span);
    }
    try {
      Object result=context.proceed();
      return result;
    }
 catch (    Exception e) {
      OpentracingService.addSpanErrorInfo(span,e);
      throw e;
    }
catch (    Error e) {
      OpentracingService.addSpanErrorInfo(span,e);
      throw e;
    }
 finally {
      span.finish();
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"");
    }
    return context.proceed();
  }
}","/** 
 * See class comment.
 * @param context Information about the wrapped method.
 * @return Result of the invoking the method.
 * @throws Exception Thrown by wrapped method.
 */
@AroundInvoke public Object execute(InvocationContext context) throws Exception {
  String methodName=""String_Node_Str"";
  String classOperationName=OpentracingService.getClassOperationName(context.getMethod());
  String methodOperationName=OpentracingService.getMethodOperationName(context.getMethod());
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,methodName + ""String_Node_Str"",classOperationName,methodOperationName);
  }
  boolean process=true;
  if (!OpentracingService.isTraced(classOperationName,methodOperationName)) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"");
    }
    process=false;
  }
  if (process && isHandledByFilter(context.getMethod())) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"");
    }
    process=false;
  }
  if (process) {
    String operationName;
    if (OpentracingService.hasExplicitOperationName(methodOperationName)) {
      operationName=methodOperationName;
    }
 else {
      if (OpentracingService.hasExplicitOperationName(classOperationName)) {
        operationName=classOperationName;
      }
 else {
        operationName=context.getMethod().getDeclaringClass().getName() + ""String_Node_Str"" + context.getMethod().getName();
      }
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,methodName + ""String_Node_Str"",operationName);
      }
    }
    Tracer tracer=OpentracingTracerManager.getTracer();
    try (ActiveSpan activeSpan=tracer.buildSpan(operationName).startActive()){
      try {
        Object result=context.proceed();
        return result;
      }
 catch (      Exception e) {
        OpentracingService.addSpanErrorInfo(activeSpan,e);
        throw e;
      }
catch (      Error e) {
        OpentracingService.addSpanErrorInfo(activeSpan,e);
        throw e;
      }
    }
   }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"");
    }
    return context.proceed();
  }
}"
34751,"/** 
 * <p>Handle an incoming response.</p> <p>A span is expected to be available from the tracing context. Do nothing if a span is not available.</p>
 * @param clientRequestContext The outgoing request context.
 * @param clientResponseContext The incoming response context.
 * @throws IOException Thrown if handling the response failed.
 */
@Override public void filter(ClientRequestContext clientRequestContext,ClientResponseContext clientResponseContext) throws IOException {
  String methodName=""String_Node_Str"";
  if ((Boolean)clientRequestContext.getProperty(CLIENT_SPAN_SKIPPED_ID)) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName,""String_Node_Str"");
    }
    clientRequestContext.removeProperty(CLIENT_SPAN_SKIPPED_ID);
    return;
  }
  Span priorOutgoingSpan=(Span)clientRequestContext.getProperty(CLIENT_SPAN_PROP_ID);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,methodName,priorOutgoingSpan);
  }
  if (priorOutgoingSpan == null) {
    Tr.error(tc,""String_Node_Str"");
    return;
  }
  try {
    Integer httpStatus=Integer.valueOf(clientResponseContext.getStatus());
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"",httpStatus);
    }
    priorOutgoingSpan.setTag(Tags.HTTP_STATUS.getKey(),httpStatus);
    if (clientResponseContext.getStatus() >= 400) {
      priorOutgoingSpan.setTag(Tags.ERROR.getKey(),true);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,methodName + ""String_Node_Str"",Boolean.TRUE);
      }
    }
    priorOutgoingSpan.finish();
  }
  finally {
    clientRequestContext.removeProperty(CLIENT_SPAN_PROP_ID);
  }
}","/** 
 * <p>Handle an incoming response.</p> <p>A span is expected to be available from the tracing context. Do nothing if a span is not available.</p>
 * @param clientRequestContext The outgoing request context.
 * @param clientResponseContext The incoming response context.
 * @throws IOException Thrown if handling the response failed.
 */
@Override public void filter(ClientRequestContext clientRequestContext,ClientResponseContext clientResponseContext) throws IOException {
  String methodName=""String_Node_Str"";
  if ((Boolean)clientRequestContext.getProperty(CLIENT_SPAN_SKIPPED_ID)) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName,""String_Node_Str"");
    }
    clientRequestContext.removeProperty(CLIENT_SPAN_SKIPPED_ID);
    return;
  }
  Continuation continuation=(Continuation)clientRequestContext.getProperty(CLIENT_CONTINUATION_PROP_ID);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,methodName,continuation);
  }
  if (continuation == null) {
    Tr.error(tc,""String_Node_Str"");
    return;
  }
  clientRequestContext.removeProperty(CLIENT_CONTINUATION_PROP_ID);
  try (ActiveSpan activeSpan=continuation.activate()){
    Integer httpStatus=Integer.valueOf(clientResponseContext.getStatus());
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"",httpStatus);
    }
    activeSpan.setTag(Tags.HTTP_STATUS.getKey(),httpStatus);
    if (clientResponseContext.getStatus() >= 400) {
      activeSpan.setTag(Tags.ERROR.getKey(),true);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,methodName + ""String_Node_Str"",clientResponseContext.getStatus());
      }
    }
  }
 }"
34752,"/** 
 * {@inheritDoc} 
 */
@Override public void filter(ContainerRequestContext incomingRequestContext,ContainerResponseContext outgoingResponseContext) throws IOException {
  String methodName=""String_Node_Str"";
  Boolean skipped=(Boolean)incomingRequestContext.getProperty(OpentracingContainerFilter.SERVER_SPAN_SKIPPED_ID);
  if (skipped != null && skipped) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"");
    }
    incomingRequestContext.removeProperty(OpentracingContainerFilter.SERVER_SPAN_SKIPPED_ID);
    return;
  }
  Span incomingSpan=(Span)incomingRequestContext.getProperty(OpentracingContainerFilter.SERVER_SPAN_PROP_ID);
  if (incomingSpan == null) {
    Tr.error(tc,""String_Node_Str"");
    return;
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"",incomingSpan);
    }
  }
  try {
    Integer httpStatus=Integer.valueOf(outgoingResponseContext.getStatus());
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"",httpStatus);
    }
    incomingSpan.setTag(Tags.HTTP_STATUS.getKey(),httpStatus);
    if (outgoingResponseContext.getStatus() >= 400) {
      MultivaluedMap<String,Object> headers=outgoingResponseContext.getHeaders();
      Throwable exception=(Throwable)headers.getFirst(EXCEPTION_KEY);
      if (exception != null) {
        headers.remove(EXCEPTION_KEY);
      }
      OpentracingService.addSpanErrorInfo(incomingSpan,exception);
    }
  }
  finally {
    incomingSpan.finish();
    incomingRequestContext.removeProperty(OpentracingContainerFilter.SERVER_SPAN_PROP_ID);
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void filter(ContainerRequestContext incomingRequestContext,ContainerResponseContext outgoingResponseContext) throws IOException {
  String methodName=""String_Node_Str"";
  Boolean skipped=(Boolean)incomingRequestContext.getProperty(OpentracingContainerFilter.SERVER_SPAN_SKIPPED_ID);
  if (skipped != null) {
    incomingRequestContext.removeProperty(OpentracingContainerFilter.SERVER_SPAN_SKIPPED_ID);
  }
  if (skipped != null && skipped) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"");
    }
    return;
  }
  ActiveSpan activeSpan=(ActiveSpan)incomingRequestContext.getProperty(OpentracingContainerFilter.SERVER_SPAN_PROP_ID);
  if (activeSpan == null) {
    Tr.error(tc,""String_Node_Str"");
    return;
  }
  incomingRequestContext.removeProperty(OpentracingContainerFilter.SERVER_SPAN_PROP_ID);
  try {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"",activeSpan);
    }
    Integer httpStatus=Integer.valueOf(outgoingResponseContext.getStatus());
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"",httpStatus);
    }
    activeSpan.setTag(Tags.HTTP_STATUS.getKey(),httpStatus);
    if (outgoingResponseContext.getStatus() >= 400) {
      MultivaluedMap<String,Object> headers=outgoingResponseContext.getHeaders();
      Throwable exception=(Throwable)headers.getFirst(EXCEPTION_KEY);
      if (exception != null) {
        headers.remove(EXCEPTION_KEY);
      }
      OpentracingService.addSpanErrorInfo(activeSpan,exception);
    }
  }
  finally {
    activeSpan.deactivate();
  }
}"
34753,"/** 
 * ""An Tags.ERROR tag SHOULD be added to a Span on failed operations. It means for any server error (5xx) codes. If there is an exception object available the implementation SHOULD also add logs event=error and error.object=<error object instance> to the active span."" https://github.com/eclipse/microprofile-opentracing/blob/master/spec/src/main/asciidoc/microprofile-opentracing.asciidoc#server-span-tags
 * @param span The span to add the information to.
 * @param exception Optional exception details.
 */
public static void addSpanErrorInfo(Span span,Throwable exception){
  String methodName=""String_Node_Str"";
  span.setTag(Tags.ERROR.getKey(),true);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,methodName + ""String_Node_Str"",Boolean.TRUE);
  }
  if (exception != null) {
    Map<String,Object> log=new HashMap<>();
    log.put(""String_Node_Str"",""String_Node_Str"");
    log.put(""String_Node_Str"",exception);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"",log);
    }
    span.log(log);
  }
}","/** 
 * ""An Tags.ERROR tag SHOULD be added to a Span on failed operations. It means for any server error (5xx) codes. If there is an exception object available the implementation SHOULD also add logs event=error and error.object=<error object instance> to the active span."" https://github.com/eclipse/microprofile-opentracing/blob/master/spec/src/main/asciidoc/microprofile-opentracing.asciidoc#server-span-tags
 * @param span The span to add the information to.
 * @param exception Optional exception details.
 */
public static void addSpanErrorInfo(BaseSpan<?> span,Throwable exception){
  String methodName=""String_Node_Str"";
  span.setTag(Tags.ERROR.getKey(),true);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,methodName + ""String_Node_Str"",Boolean.TRUE);
  }
  if (exception != null) {
    Map<String,Object> log=new HashMap<>();
    log.put(""String_Node_Str"",""String_Node_Str"");
    log.put(""String_Node_Str"",exception);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,methodName + ""String_Node_Str"",log);
    }
    span.log(log);
  }
}"
34754,"protected void processRequestBody(Parameter requestBodyParameter,Operation operation,Consumes methodConsumes,Consumes classConsumes,List<Parameter> operationParameters,Annotation[] paramAnnotations,Type type,org.eclipse.microprofile.openapi.annotations.parameters.RequestBody methododRequestBody){
  if (operation.getRequestBody() == null) {
    org.eclipse.microprofile.openapi.annotations.parameters.RequestBody requestBodyAnnotation=getRequestBody(Arrays.asList(paramAnnotations));
    if (requestBodyAnnotation == null) {
      if (methododRequestBody != null) {
        requestBodyAnnotation=methododRequestBody;
      }
    }
    if (requestBodyAnnotation != null) {
      Optional<RequestBody> optionalRequestBody=OperationParser.getRequestBody(requestBodyAnnotation,classConsumes,methodConsumes,components);
      if (optionalRequestBody.isPresent()) {
        RequestBody requestBody=optionalRequestBody.get();
        if (StringUtils.isBlank(requestBody.getRef()) && (requestBody.getContent() == null || requestBody.getContent().isEmpty())) {
          if (requestBodyParameter.getSchema() != null) {
            Content content=processContent(requestBody.getContent(),requestBodyParameter.getSchema(),methodConsumes,classConsumes);
            requestBody.setContent(content);
          }
        }
 else         if (StringUtils.isBlank(requestBody.getRef()) && requestBody.getContent() != null && !requestBody.getContent().isEmpty()) {
          if (requestBodyParameter.getSchema() != null) {
            for (            MediaType mediaType : requestBody.getContent().values()) {
              if (mediaType.getSchema() == null) {
                mediaType.setSchema(new SchemaImpl());
              }
              if (mediaType.getSchema().getType() == null) {
                mediaType.getSchema().setType(requestBodyParameter.getSchema().getType());
              }
            }
          }
        }
        operation.setRequestBody(requestBody);
      }
    }
 else {
      boolean isRequestBodyEmpty=true;
      RequestBody requestBody=new RequestBodyImpl();
      if (StringUtils.isNotBlank(requestBodyParameter.getRef())) {
        requestBody.setRef(requestBodyParameter.getRef());
        isRequestBodyEmpty=false;
      }
      if (StringUtils.isNotBlank(requestBodyParameter.getDescription())) {
        requestBody.setDescription(requestBodyParameter.getDescription());
        isRequestBodyEmpty=false;
      }
      if (Boolean.TRUE.equals(requestBodyParameter.getRequired())) {
        requestBody.setRequired(requestBodyParameter.getRequired());
        isRequestBodyEmpty=false;
      }
      if (requestBodyParameter.getSchema() != null) {
        Content content=processContent(null,requestBodyParameter.getSchema(),methodConsumes,classConsumes);
        requestBody.setContent(content);
        isRequestBodyEmpty=false;
      }
      if (!isRequestBodyEmpty) {
        operation.setRequestBody(requestBody);
      }
    }
  }
}","protected void processRequestBody(Parameter requestBodyParameter,Operation operation,Consumes methodConsumes,Consumes classConsumes,Annotation[] paramAnnotations,org.eclipse.microprofile.openapi.annotations.parameters.RequestBody methodRequestBody){
  if (operation.getRequestBody() == null) {
    org.eclipse.microprofile.openapi.annotations.parameters.RequestBody requestBodyAnnotation=null;
    if (paramAnnotations != null) {
      requestBodyAnnotation=getRequestBody(Arrays.asList(paramAnnotations));
    }
    if (requestBodyAnnotation == null && methodRequestBody != null) {
      requestBodyAnnotation=methodRequestBody;
    }
    if (requestBodyAnnotation != null) {
      Optional<RequestBody> optionalRequestBody=OperationParser.getRequestBody(requestBodyAnnotation,classConsumes,methodConsumes,components);
      if (optionalRequestBody.isPresent()) {
        RequestBody requestBody=optionalRequestBody.get();
        if (StringUtils.isBlank(requestBody.getRef()) && (requestBody.getContent() == null || requestBody.getContent().isEmpty())) {
          if (requestBodyParameter.getSchema() != null) {
            Content content=processContent(requestBody.getContent(),requestBodyParameter.getSchema(),methodConsumes,classConsumes);
            requestBody.setContent(content);
          }
        }
 else         if (StringUtils.isBlank(requestBody.getRef()) && requestBody.getContent() != null && !requestBody.getContent().isEmpty()) {
          if (requestBodyParameter.getSchema() != null) {
            for (            MediaType mediaType : requestBody.getContent().values()) {
              if (mediaType.getSchema() == null) {
                mediaType.setSchema(new SchemaImpl());
              }
              if (mediaType.getSchema().getType() == null) {
                mediaType.getSchema().setType(requestBodyParameter.getSchema().getType());
              }
            }
          }
        }
        operation.setRequestBody(requestBody);
      }
    }
 else {
      boolean isRequestBodyEmpty=true;
      RequestBody requestBody=new RequestBodyImpl();
      if (StringUtils.isNotBlank(requestBodyParameter.getRef())) {
        requestBody.setRef(requestBodyParameter.getRef());
        isRequestBodyEmpty=false;
      }
      if (StringUtils.isNotBlank(requestBodyParameter.getDescription())) {
        requestBody.setDescription(requestBodyParameter.getDescription());
        isRequestBodyEmpty=false;
      }
      if (Boolean.TRUE.equals(requestBodyParameter.getRequired())) {
        requestBody.setRequired(requestBodyParameter.getRequired());
        isRequestBodyEmpty=false;
      }
      if (requestBodyParameter.getSchema() != null) {
        Content content=processContent(null,requestBodyParameter.getSchema(),methodConsumes,classConsumes);
        requestBody.setContent(content);
        isRequestBodyEmpty=false;
      }
      if (!isRequestBodyEmpty) {
        operation.setRequestBody(requestBody);
      }
    }
  }
}"
34755,"public OpenAPI read(Class<?> cls,String parentPath){
  List<org.eclipse.microprofile.openapi.annotations.security.SecurityScheme> apiSecurityScheme=ReflectionUtils.getRepeatableAnnotations(cls,org.eclipse.microprofile.openapi.annotations.security.SecurityScheme.class);
  List<org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement> apiSecurityRequirements=ReflectionUtils.getRepeatableAnnotations(cls,org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement.class);
  List<org.eclipse.microprofile.openapi.annotations.servers.Server> apiServers=ReflectionUtils.getRepeatableAnnotations(cls,org.eclipse.microprofile.openapi.annotations.servers.Server.class);
  List<org.eclipse.microprofile.openapi.annotations.callbacks.Callback> apiCallbacks=ReflectionUtils.getRepeatableAnnotations(cls,org.eclipse.microprofile.openapi.annotations.callbacks.Callback.class);
  ExternalDocumentation apiExternalDocs=ReflectionUtils.getAnnotation(cls,ExternalDocumentation.class);
  org.eclipse.microprofile.openapi.annotations.tags.Tag[] apiTags=ReflectionUtils.getRepeatableAnnotationsArray(cls,org.eclipse.microprofile.openapi.annotations.tags.Tag.class);
  org.eclipse.microprofile.openapi.annotations.tags.Tags tagsAnnotation=ReflectionUtils.getAnnotation(cls,org.eclipse.microprofile.openapi.annotations.tags.Tags.class);
  javax.ws.rs.Consumes classConsumes=ReflectionUtils.getAnnotation(cls,javax.ws.rs.Consumes.class);
  javax.ws.rs.Produces classProduces=ReflectionUtils.getAnnotation(cls,javax.ws.rs.Produces.class);
  if (apiSecurityScheme != null) {
    for (    org.eclipse.microprofile.openapi.annotations.security.SecurityScheme securitySchemeAnnotation : apiSecurityScheme) {
      Optional<SecurityScheme> securityScheme=SecurityParser.getSecurityScheme(securitySchemeAnnotation);
      if (securityScheme.isPresent()) {
        Map<String,SecurityScheme> securitySchemeMap=new HashMap<>();
        if (StringUtils.isNotBlank(((SecuritySchemeImpl)securityScheme.get()).getSchemeName())) {
          securitySchemeMap.put(((SecuritySchemeImpl)securityScheme.get()).getSchemeName(),securityScheme.get());
          if (components.getSecuritySchemes() != null && components.getSecuritySchemes().size() != 0) {
            components.getSecuritySchemes().putAll(securitySchemeMap);
          }
 else {
            components.setSecuritySchemes(securitySchemeMap);
          }
        }
      }
    }
  }
  List<SecurityRequirement> classSecurityRequirements=new ArrayList<>();
  if (apiSecurityRequirements != null) {
    Optional<List<SecurityRequirement>> requirementsObject=SecurityParser.getSecurityRequirements(apiSecurityRequirements.toArray(new org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement[apiSecurityRequirements.size()]));
    if (requirementsObject.isPresent()) {
      classSecurityRequirements=requirementsObject.get();
    }
  }
  List<org.eclipse.microprofile.openapi.models.servers.Server> classServers=new ArrayList<>();
  if (apiServers != null) {
    Optional<List<org.eclipse.microprofile.openapi.models.servers.Server>> serversObject=AnnotationsUtils.getServers(apiServers.toArray(new org.eclipse.microprofile.openapi.annotations.servers.Server[apiServers.size()]));
    if (serversObject.isPresent()) {
      classServers=serversObject.get();
    }
  }
  Map<String,Callback> classCallbacks=null;
  if (apiCallbacks != null) {
    Map<String,Callback> callbacks=new LinkedHashMap<>();
    for (    org.eclipse.microprofile.openapi.annotations.callbacks.Callback classCallback : apiCallbacks) {
      Map<String,Callback> currentCallbacks=getCallbacks(classCallback);
      callbacks.putAll(currentCallbacks);
    }
    if (callbacks.size() > 0) {
      classCallbacks=callbacks;
    }
  }
  final Set<String> classTags=new LinkedHashSet<>();
  if (apiTags != null) {
    AnnotationsUtils.getTags(apiTags,false).ifPresent(tags -> tags.stream().map(t -> t.getName()).forEach(t -> classTags.add(t)));
  }
  if (tagsAnnotation != null && tagsAnnotation.refs() != null) {
    classTags.addAll(Stream.of(tagsAnnotation.refs()).filter(StringUtils::isNotBlank).collect(Collectors.toList()));
  }
  Optional<org.eclipse.microprofile.openapi.models.ExternalDocumentation> classExternalDocumentation=AnnotationsUtils.getExternalDocumentation(apiExternalDocs);
  final javax.ws.rs.Path apiPath=ReflectionUtils.getAnnotation(cls,javax.ws.rs.Path.class);
  JavaType classType=TypeFactory.defaultInstance().constructType(cls);
  BeanDescription bd=Json.mapper().getSerializationConfig().introspect(classType);
  final List<Parameter> globalParameters=new ArrayList<>();
  globalParameters.addAll(ReaderUtils.collectConstructorParameters(cls,components,classConsumes));
  globalParameters.addAll(ReaderUtils.collectFieldParameters(cls,components,classConsumes));
  Method methods[]=cls.getMethods();
  for (  Method method : methods) {
    if (isOperationHidden(method)) {
      continue;
    }
    AnnotatedMethod annotatedMethod=bd.findMethod(method.getName(),method.getParameterTypes());
    javax.ws.rs.Produces methodProduces=ReflectionUtils.getAnnotation(method,javax.ws.rs.Produces.class);
    javax.ws.rs.Consumes methodConsumes=ReflectionUtils.getAnnotation(method,javax.ws.rs.Consumes.class);
    if (ReflectionUtils.isOverriddenMethod(method,cls)) {
      continue;
    }
    javax.ws.rs.Path methodPath=ReflectionUtils.getAnnotation(method,javax.ws.rs.Path.class);
    String operationPath=ReaderUtils.getPath(apiPath,methodPath,parentPath);
    if (ignoreOperationPath(operationPath,parentPath)) {
      continue;
    }
    Map<String,String> regexMap=new LinkedHashMap<>();
    operationPath=PathUtils.parsePath(operationPath,regexMap);
    if (operationPath != null) {
      Operation operation=parseMethod(method,globalParameters,methodProduces,classProduces,methodConsumes,classConsumes,classSecurityRequirements,classExternalDocumentation,classTags,classServers,classCallbacks);
      if (operation != null) {
        PathItem pathItemObject;
        if (openAPI.getPaths() != null && openAPI.getPaths().get(operationPath) != null) {
          pathItemObject=openAPI.getPaths().get(operationPath);
        }
 else {
          pathItemObject=new PathItemImpl();
        }
        String httpMethod=ReaderUtils.extractOperationMethod(operation,method,OpenAPIExtensions.chain());
        if (StringUtils.isBlank(httpMethod)) {
          continue;
        }
        setPathItemOperation(pathItemObject,httpMethod,operation);
        List<Parameter> operationParameters=new ArrayList<>();
        Annotation[][] paramAnnotations=ReflectionUtils.getParameterAnnotations(method);
        if (annotatedMethod == null) {
          Type[] genericParameterTypes=method.getGenericParameterTypes();
          for (int i=0; i < genericParameterTypes.length; i++) {
            final Type type=TypeFactory.defaultInstance().constructType(genericParameterTypes[i],cls);
            ResolvedParameter resolvedParameter=getParameters(type,Arrays.asList(paramAnnotations[i]),operation,classConsumes,methodConsumes);
            for (            Parameter p : resolvedParameter.parameters) {
              operationParameters.add(p);
            }
            if (resolvedParameter.requestBody != null) {
              processRequestBody(resolvedParameter.requestBody,operation,methodConsumes,classConsumes,operationParameters,paramAnnotations[i],type,method.getAnnotation(org.eclipse.microprofile.openapi.annotations.parameters.RequestBody.class));
            }
          }
        }
 else {
          for (int i=0; i < annotatedMethod.getParameterCount(); i++) {
            AnnotatedParameter param=annotatedMethod.getParameter(i);
            final Type type=TypeFactory.defaultInstance().constructType(param.getParameterType(),cls);
            ResolvedParameter resolvedParameter=getParameters(type,Arrays.asList(paramAnnotations[i]),operation,classConsumes,methodConsumes);
            for (            Parameter p : resolvedParameter.parameters) {
              operationParameters.add(p);
            }
            if (resolvedParameter.requestBody != null) {
              processRequestBody(resolvedParameter.requestBody,operation,methodConsumes,classConsumes,operationParameters,paramAnnotations[i],type,method.getAnnotation(org.eclipse.microprofile.openapi.annotations.parameters.RequestBody.class));
            }
          }
        }
        if (operationParameters.size() > 0) {
          Map<String,Parameter> params=new HashMap<>();
          if (operation.getParameters() != null) {
            for (            Parameter param : operation.getParameters()) {
              if (param.getIn() != null) {
                params.put(param.getName() + '/' + param.getIn().toString(),param);
              }
 else {
                params.put(param.getName(),param);
              }
            }
          }
          for (          Parameter operationParameter : operationParameters) {
            Parameter p=null;
            if (operationParameter.getIn() != null)             p=params.get(operationParameter.getName() + '/' + operationParameter.getIn().toString());
            if (p == null) {
              p=params.get(operationParameter.getName());
            }
            if (p != null) {
              ReaderUtils.copyParamValues(p,operationParameter);
            }
 else {
              operation.addParameter(operationParameter);
            }
          }
        }
        paths.addPathItem(operationPath,pathItemObject);
        if (openAPI.getPaths() != null) {
          this.paths.putAll(openAPI.getPaths());
        }
        openAPI.setPaths(this.paths);
      }
    }
  }
  AnnotationsUtils.getTags(apiTags,true).ifPresent(tags -> openApiTags.addAll(tags));
  if (!openApiTags.isEmpty()) {
    Set<Tag> tagsSet=new LinkedHashSet<>();
    if (openAPI.getTags() != null) {
      for (      Tag tag : openAPI.getTags()) {
        if (tagsSet.stream().noneMatch(t -> t.getName().equals(tag.getName()))) {
          tagsSet.add(tag);
        }
      }
    }
    for (    Tag tag : openApiTags) {
      if (tagsSet.stream().noneMatch(t -> t.getName().equals(tag.getName()))) {
        tagsSet.add(tag);
      }
    }
    openAPI.setTags(new ArrayList<>(tagsSet));
  }
  handleOpenAPIDefinition(ReflectionUtils.getAnnotation(cls,OpenAPIDefinition.class));
  if (!isEmptyComponents(components) && openAPI.getComponents() == null) {
    openAPI.setComponents(components);
  }
  return openAPI;
}","public OpenAPI read(Class<?> cls,String parentPath){
  List<org.eclipse.microprofile.openapi.annotations.security.SecurityScheme> apiSecurityScheme=ReflectionUtils.getRepeatableAnnotations(cls,org.eclipse.microprofile.openapi.annotations.security.SecurityScheme.class);
  List<org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement> apiSecurityRequirements=ReflectionUtils.getRepeatableAnnotations(cls,org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement.class);
  List<org.eclipse.microprofile.openapi.annotations.servers.Server> apiServers=ReflectionUtils.getRepeatableAnnotations(cls,org.eclipse.microprofile.openapi.annotations.servers.Server.class);
  List<org.eclipse.microprofile.openapi.annotations.callbacks.Callback> apiCallbacks=ReflectionUtils.getRepeatableAnnotations(cls,org.eclipse.microprofile.openapi.annotations.callbacks.Callback.class);
  ExternalDocumentation apiExternalDocs=ReflectionUtils.getAnnotation(cls,ExternalDocumentation.class);
  org.eclipse.microprofile.openapi.annotations.tags.Tag[] apiTags=ReflectionUtils.getRepeatableAnnotationsArray(cls,org.eclipse.microprofile.openapi.annotations.tags.Tag.class);
  org.eclipse.microprofile.openapi.annotations.tags.Tags tagsAnnotation=ReflectionUtils.getAnnotation(cls,org.eclipse.microprofile.openapi.annotations.tags.Tags.class);
  javax.ws.rs.Consumes classConsumes=ReflectionUtils.getAnnotation(cls,javax.ws.rs.Consumes.class);
  javax.ws.rs.Produces classProduces=ReflectionUtils.getAnnotation(cls,javax.ws.rs.Produces.class);
  if (apiSecurityScheme != null) {
    for (    org.eclipse.microprofile.openapi.annotations.security.SecurityScheme securitySchemeAnnotation : apiSecurityScheme) {
      Optional<SecurityScheme> securityScheme=SecurityParser.getSecurityScheme(securitySchemeAnnotation);
      if (securityScheme.isPresent()) {
        Map<String,SecurityScheme> securitySchemeMap=new HashMap<>();
        if (StringUtils.isNotBlank(((SecuritySchemeImpl)securityScheme.get()).getSchemeName())) {
          securitySchemeMap.put(((SecuritySchemeImpl)securityScheme.get()).getSchemeName(),securityScheme.get());
          if (components.getSecuritySchemes() != null && components.getSecuritySchemes().size() != 0) {
            components.getSecuritySchemes().putAll(securitySchemeMap);
          }
 else {
            components.setSecuritySchemes(securitySchemeMap);
          }
        }
      }
    }
  }
  List<SecurityRequirement> classSecurityRequirements=new ArrayList<>();
  if (apiSecurityRequirements != null) {
    Optional<List<SecurityRequirement>> requirementsObject=SecurityParser.getSecurityRequirements(apiSecurityRequirements.toArray(new org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement[apiSecurityRequirements.size()]));
    if (requirementsObject.isPresent()) {
      classSecurityRequirements=requirementsObject.get();
    }
  }
  List<org.eclipse.microprofile.openapi.models.servers.Server> classServers=new ArrayList<>();
  if (apiServers != null) {
    Optional<List<org.eclipse.microprofile.openapi.models.servers.Server>> serversObject=AnnotationsUtils.getServers(apiServers.toArray(new org.eclipse.microprofile.openapi.annotations.servers.Server[apiServers.size()]));
    if (serversObject.isPresent()) {
      classServers=serversObject.get();
    }
  }
  Map<String,Callback> classCallbacks=null;
  if (apiCallbacks != null) {
    Map<String,Callback> callbacks=new LinkedHashMap<>();
    for (    org.eclipse.microprofile.openapi.annotations.callbacks.Callback classCallback : apiCallbacks) {
      Map<String,Callback> currentCallbacks=getCallbacks(classCallback);
      callbacks.putAll(currentCallbacks);
    }
    if (callbacks.size() > 0) {
      classCallbacks=callbacks;
    }
  }
  final Set<String> classTags=new LinkedHashSet<>();
  if (apiTags != null) {
    AnnotationsUtils.getTags(apiTags,false).ifPresent(tags -> tags.stream().map(t -> t.getName()).forEach(t -> classTags.add(t)));
  }
  if (tagsAnnotation != null && tagsAnnotation.refs() != null) {
    classTags.addAll(Stream.of(tagsAnnotation.refs()).filter(StringUtils::isNotBlank).collect(Collectors.toList()));
  }
  Optional<org.eclipse.microprofile.openapi.models.ExternalDocumentation> classExternalDocumentation=AnnotationsUtils.getExternalDocumentation(apiExternalDocs);
  final javax.ws.rs.Path apiPath=ReflectionUtils.getAnnotation(cls,javax.ws.rs.Path.class);
  JavaType classType=TypeFactory.defaultInstance().constructType(cls);
  BeanDescription bd=Json.mapper().getSerializationConfig().introspect(classType);
  final List<Parameter> globalParameters=new ArrayList<>();
  globalParameters.addAll(ReaderUtils.collectConstructorParameters(cls,components,classConsumes));
  globalParameters.addAll(ReaderUtils.collectFieldParameters(cls,components,classConsumes));
  Method methods[]=cls.getMethods();
  for (  Method method : methods) {
    if (isOperationHidden(method)) {
      continue;
    }
    AnnotatedMethod annotatedMethod=bd.findMethod(method.getName(),method.getParameterTypes());
    javax.ws.rs.Produces methodProduces=ReflectionUtils.getAnnotation(method,javax.ws.rs.Produces.class);
    javax.ws.rs.Consumes methodConsumes=ReflectionUtils.getAnnotation(method,javax.ws.rs.Consumes.class);
    if (ReflectionUtils.isOverriddenMethod(method,cls)) {
      continue;
    }
    javax.ws.rs.Path methodPath=ReflectionUtils.getAnnotation(method,javax.ws.rs.Path.class);
    String operationPath=ReaderUtils.getPath(apiPath,methodPath,parentPath);
    if (ignoreOperationPath(operationPath,parentPath)) {
      continue;
    }
    Map<String,String> regexMap=new LinkedHashMap<>();
    operationPath=PathUtils.parsePath(operationPath,regexMap);
    if (operationPath != null) {
      Operation operation=parseMethod(method,globalParameters,methodProduces,classProduces,methodConsumes,classConsumes,classSecurityRequirements,classExternalDocumentation,classTags,classServers,classCallbacks);
      if (operation != null) {
        PathItem pathItemObject;
        if (openAPI.getPaths() != null && openAPI.getPaths().get(operationPath) != null) {
          pathItemObject=openAPI.getPaths().get(operationPath);
        }
 else {
          pathItemObject=new PathItemImpl();
        }
        String httpMethod=ReaderUtils.extractOperationMethod(operation,method,OpenAPIExtensions.chain());
        if (StringUtils.isBlank(httpMethod)) {
          continue;
        }
        setPathItemOperation(pathItemObject,httpMethod,operation);
        org.eclipse.microprofile.openapi.annotations.parameters.RequestBody methodRequestBody=method.getAnnotation(org.eclipse.microprofile.openapi.annotations.parameters.RequestBody.class);
        List<Parameter> operationParameters=new ArrayList<>();
        Annotation[][] paramAnnotations=ReflectionUtils.getParameterAnnotations(method);
        if (annotatedMethod == null) {
          Type[] genericParameterTypes=method.getGenericParameterTypes();
          for (int i=0; i < genericParameterTypes.length; i++) {
            final Type type=TypeFactory.defaultInstance().constructType(genericParameterTypes[i],cls);
            ResolvedParameter resolvedParameter=getParameters(type,Arrays.asList(paramAnnotations[i]),operation,classConsumes,methodConsumes);
            for (            Parameter p : resolvedParameter.parameters) {
              operationParameters.add(p);
            }
            if (resolvedParameter.requestBody != null) {
              processRequestBody(resolvedParameter.requestBody,operation,methodConsumes,classConsumes,paramAnnotations[i],methodRequestBody);
            }
          }
        }
 else {
          for (int i=0; i < annotatedMethod.getParameterCount(); i++) {
            AnnotatedParameter param=annotatedMethod.getParameter(i);
            final Type type=TypeFactory.defaultInstance().constructType(param.getParameterType(),cls);
            ResolvedParameter resolvedParameter=getParameters(type,Arrays.asList(paramAnnotations[i]),operation,classConsumes,methodConsumes);
            for (            Parameter p : resolvedParameter.parameters) {
              operationParameters.add(p);
            }
            if (resolvedParameter.requestBody != null) {
              processRequestBody(resolvedParameter.requestBody,operation,methodConsumes,classConsumes,paramAnnotations[i],methodRequestBody);
            }
          }
        }
        if (operation.getRequestBody() == null) {
          processRequestBody(new ParameterImpl(),operation,methodConsumes,classConsumes,null,methodRequestBody);
        }
        if (operationParameters.size() > 0) {
          Map<String,Parameter> params=new HashMap<>();
          if (operation.getParameters() != null) {
            for (            Parameter param : operation.getParameters()) {
              if (param.getIn() != null) {
                params.put(param.getName() + '/' + param.getIn().toString(),param);
              }
 else {
                params.put(param.getName(),param);
              }
            }
          }
          for (          Parameter operationParameter : operationParameters) {
            Parameter p=null;
            if (operationParameter.getIn() != null)             p=params.get(operationParameter.getName() + '/' + operationParameter.getIn().toString());
            if (p == null) {
              p=params.get(operationParameter.getName());
            }
            if (p != null) {
              ReaderUtils.copyParamValues(p,operationParameter);
            }
 else {
              operation.addParameter(operationParameter);
            }
          }
        }
        paths.addPathItem(operationPath,pathItemObject);
        if (openAPI.getPaths() != null) {
          this.paths.putAll(openAPI.getPaths());
        }
        openAPI.setPaths(this.paths);
      }
    }
  }
  AnnotationsUtils.getTags(apiTags,true).ifPresent(tags -> openApiTags.addAll(tags));
  if (!openApiTags.isEmpty()) {
    Set<Tag> tagsSet=new LinkedHashSet<>();
    if (openAPI.getTags() != null) {
      for (      Tag tag : openAPI.getTags()) {
        if (tagsSet.stream().noneMatch(t -> t.getName().equals(tag.getName()))) {
          tagsSet.add(tag);
        }
      }
    }
    for (    Tag tag : openApiTags) {
      if (tagsSet.stream().noneMatch(t -> t.getName().equals(tag.getName()))) {
        tagsSet.add(tag);
      }
    }
    openAPI.setTags(new ArrayList<>(tagsSet));
  }
  handleOpenAPIDefinition(ReflectionUtils.getAnnotation(cls,OpenAPIDefinition.class));
  if (!isEmptyComponents(components) && openAPI.getComponents() == null) {
    openAPI.setComponents(components);
  }
  return openAPI;
}"
34756,"private Operation parseMethod(Class<?> cls,Method method,List<Parameter> globalParameters,Produces methodProduces,Produces classProduces,Consumes methodConsumes,Consumes classConsumes,List<SecurityRequirement> classSecurityRequirements,Optional<org.eclipse.microprofile.openapi.models.ExternalDocumentation> classExternalDocs,Set<String> classTags,List<org.eclipse.microprofile.openapi.models.servers.Server> classServers,Map<String,Callback> classCallbacks){
  Operation operation=new OperationImpl();
  org.eclipse.microprofile.openapi.annotations.Operation apiOperation=ReflectionUtils.getAnnotation(method,org.eclipse.microprofile.openapi.annotations.Operation.class);
  List<org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement> apiSecurity=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement.class);
  List<org.eclipse.microprofile.openapi.annotations.callbacks.Callback> apiCallbacks=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.callbacks.Callback.class);
  List<Server> apiServers=ReflectionUtils.getRepeatableAnnotations(method,Server.class);
  List<org.eclipse.microprofile.openapi.annotations.tags.Tag> apiTags=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.tags.Tag.class);
  org.eclipse.microprofile.openapi.annotations.tags.Tags tagsAnnotation=ReflectionUtils.getAnnotation(method,org.eclipse.microprofile.openapi.annotations.tags.Tags.class);
  List<org.eclipse.microprofile.openapi.annotations.parameters.Parameter> apiParameters=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.parameters.Parameter.class);
  List<org.eclipse.microprofile.openapi.annotations.responses.APIResponse> apiResponses=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.responses.APIResponse.class);
  List<Extension> apiExtensions=ReflectionUtils.getRepeatableAnnotations(method,Extension.class);
  ExternalDocumentation apiExternalDocumentation=ReflectionUtils.getAnnotation(method,ExternalDocumentation.class);
  Map<String,Callback> callbacks=new LinkedHashMap<>();
  if (apiCallbacks != null) {
    for (    org.eclipse.microprofile.openapi.annotations.callbacks.Callback methodCallback : apiCallbacks) {
      Map<String,Callback> currentCallbacks=getCallbacks(methodCallback);
      callbacks.putAll(currentCallbacks);
    }
  }
  if (!callbacks.isEmpty()) {
    operation.setCallbacks(callbacks);
  }
 else {
    operation.setCallbacks(classCallbacks);
  }
  if (apiSecurity != null && apiSecurity.size() > 0) {
    Optional<List<SecurityRequirement>> requirementsObject=SecurityParser.getSecurityRequirements(apiSecurity.toArray(new org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement[apiSecurity.size()]));
    if (requirementsObject.isPresent()) {
      requirementsObject.get().stream().filter(r -> operation.getSecurity() == null || !operation.getSecurity().contains(r)).forEach(operation::addSecurityRequirement);
    }
  }
 else {
    classSecurityRequirements.forEach(operation::addSecurityRequirement);
  }
  if (apiServers != null && apiServers.size() > 0) {
    AnnotationsUtils.getServers(apiServers.toArray(new Server[apiServers.size()])).ifPresent(servers -> servers.forEach(operation::addServer));
  }
 else   if (classServers != null && classServers.size() > 0) {
    operation.setServers(classServers);
  }
  AnnotationsUtils.getExternalDocumentation(apiExternalDocumentation).ifPresent(operation::setExternalDocs);
  if ((apiTags != null && !apiTags.isEmpty()) || (tagsAnnotation != null && ArrayUtils.isNotEmpty(tagsAnnotation.refs()))) {
    Stream<String> operationTags=Stream.empty();
    if (apiTags != null) {
      operationTags=apiTags.stream().filter(t -> StringUtils.isNotBlank(t.name()) || StringUtils.isNotBlank(t.ref())).map(t -> {
        if (StringUtils.isNotBlank(t.ref())) {
          return t.ref();
        }
 else {
          return t.name();
        }
      }
);
      AnnotationsUtils.getTags(apiTags.toArray(new org.eclipse.microprofile.openapi.annotations.tags.Tag[apiTags.size()]),true).ifPresent(tags -> openApiTags.addAll(tags));
    }
    if (tagsAnnotation != null && ArrayUtils.isNotEmpty(tagsAnnotation.refs())) {
      operationTags=Stream.concat(operationTags,Stream.of(tagsAnnotation.refs()).filter(StringUtils::isNotBlank));
    }
    operationTags.distinct().forEach(operation::addTag);
  }
 else   if (classTags != null) {
    operation.setTags(new ArrayList<>(classTags));
  }
  if (globalParameters != null) {
    for (    Parameter globalParameter : globalParameters) {
      operation.addParameter(globalParameter);
    }
  }
  if (apiParameters != null) {
    getParametersListFromAnnotation(apiParameters.toArray(new org.eclipse.microprofile.openapi.annotations.parameters.Parameter[apiParameters.size()]),classConsumes,methodConsumes,operation).ifPresent(p -> p.forEach(operation::addParameter));
  }
  if (apiResponses != null) {
    OperationParser.getApiResponses(apiResponses.toArray(new org.eclipse.microprofile.openapi.annotations.responses.APIResponse[apiResponses.size()]),classProduces,methodProduces,components).ifPresent(responses -> {
      if (operation.getResponses() == null) {
        operation.setResponses(responses);
      }
 else {
        responses.forEach(operation.getResponses()::addApiResponse);
      }
    }
);
  }
  if (StringUtils.isBlank(operation.getOperationId())) {
    operation.setOperationId(method.getName());
  }
  if (apiOperation != null) {
    setOperationObjectFromApiOperationAnnotation(operation,apiOperation,methodProduces,classProduces,methodConsumes,classConsumes);
  }
  if (operation.getExternalDocs() == null) {
    classExternalDocs.ifPresent(operation::setExternalDocs);
  }
  Type returnType=method.getGenericReturnType();
  if (!shouldIgnoreClass(returnType.getTypeName())) {
    ResolvedSchema resolvedSchema=ModelConverters.getInstance().resolveAnnotatedType(returnType,new ArrayList<>(),""String_Node_Str"");
    if (resolvedSchema.schema != null) {
      Schema returnTypeSchema=resolvedSchema.schema;
      Content content=new ContentImpl();
      MediaType mediaType=new MediaTypeImpl().schema(returnTypeSchema);
      AnnotationsUtils.applyTypes(classConsumes == null ? new String[0] : classConsumes.value(),methodConsumes == null ? new String[0] : methodConsumes.value(),content,mediaType);
      if (operation.getResponses() == null) {
        operation.responses(new APIResponsesImpl().defaultValue(new APIResponseImpl().description(DEFAULT_DESCRIPTION).content(content)));
      }
      if (operation.getResponses().getDefault() != null && StringUtils.isBlank(operation.getResponses().getDefault().getRef()) && operation.getResponses().getDefault().getContent() == null) {
        operation.getResponses().getDefault().content(content);
      }
      Map<String,Schema> schemaMap=resolvedSchema.referencedSchemas;
      if (schemaMap != null) {
        schemaMap.forEach((key,schema) -> components.addSchema(key,schema));
      }
    }
  }
  if (operation.getResponses() == null || operation.getResponses().size() == 0) {
    APIResponse apiResponseObject=new APIResponseImpl();
    apiResponseObject.setDescription(DEFAULT_DESCRIPTION);
    operation.setResponses(new APIResponsesImpl().defaultValue(apiResponseObject));
  }
  return operation;
}","private Operation parseMethod(Class<?> cls,Method method,List<Parameter> globalParameters,Produces methodProduces,Produces classProduces,Consumes methodConsumes,Consumes classConsumes,List<SecurityRequirement> classSecurityRequirements,Optional<org.eclipse.microprofile.openapi.models.ExternalDocumentation> classExternalDocs,Set<String> classTags,List<org.eclipse.microprofile.openapi.models.servers.Server> classServers,Map<String,Callback> classCallbacks){
  Operation operation=new OperationImpl();
  org.eclipse.microprofile.openapi.annotations.Operation apiOperation=ReflectionUtils.getAnnotation(method,org.eclipse.microprofile.openapi.annotations.Operation.class);
  List<org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement> apiSecurity=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement.class);
  List<org.eclipse.microprofile.openapi.annotations.callbacks.Callback> apiCallbacks=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.callbacks.Callback.class);
  List<Server> apiServers=ReflectionUtils.getRepeatableAnnotations(method,Server.class);
  List<org.eclipse.microprofile.openapi.annotations.tags.Tag> apiTags=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.tags.Tag.class);
  org.eclipse.microprofile.openapi.annotations.tags.Tags tagsAnnotation=ReflectionUtils.getAnnotation(method,org.eclipse.microprofile.openapi.annotations.tags.Tags.class);
  List<org.eclipse.microprofile.openapi.annotations.parameters.Parameter> apiParameters=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.parameters.Parameter.class);
  List<org.eclipse.microprofile.openapi.annotations.responses.APIResponse> apiResponses=ReflectionUtils.getRepeatableAnnotations(method,org.eclipse.microprofile.openapi.annotations.responses.APIResponse.class);
  List<Extension> apiExtensions=ReflectionUtils.getRepeatableAnnotations(method,Extension.class);
  ExternalDocumentation apiExternalDocumentation=ReflectionUtils.getAnnotation(method,ExternalDocumentation.class);
  Map<String,Callback> callbacks=new LinkedHashMap<>();
  if (apiCallbacks != null) {
    for (    org.eclipse.microprofile.openapi.annotations.callbacks.Callback methodCallback : apiCallbacks) {
      Map<String,Callback> currentCallbacks=getCallbacks(methodCallback);
      callbacks.putAll(currentCallbacks);
    }
  }
  if (!callbacks.isEmpty()) {
    operation.setCallbacks(callbacks);
  }
 else {
    operation.setCallbacks(classCallbacks);
  }
  if (apiSecurity != null && apiSecurity.size() > 0) {
    Optional<List<SecurityRequirement>> requirementsObject=SecurityParser.getSecurityRequirements(apiSecurity.toArray(new org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement[apiSecurity.size()]));
    if (requirementsObject.isPresent()) {
      requirementsObject.get().stream().filter(r -> operation.getSecurity() == null || !operation.getSecurity().contains(r)).forEach(operation::addSecurityRequirement);
    }
  }
 else {
    classSecurityRequirements.forEach(operation::addSecurityRequirement);
  }
  if (apiServers != null && apiServers.size() > 0) {
    AnnotationsUtils.getServers(apiServers.toArray(new Server[apiServers.size()])).ifPresent(servers -> servers.forEach(operation::addServer));
  }
 else   if (classServers != null && classServers.size() > 0) {
    operation.setServers(classServers);
  }
  AnnotationsUtils.getExternalDocumentation(apiExternalDocumentation).ifPresent(operation::setExternalDocs);
  if ((apiTags != null && !apiTags.isEmpty()) || (tagsAnnotation != null && ArrayUtils.isNotEmpty(tagsAnnotation.refs()))) {
    Stream<String> operationTags=Stream.empty();
    if (apiTags != null) {
      operationTags=apiTags.stream().filter(t -> StringUtils.isNotBlank(t.name()) || StringUtils.isNotBlank(t.ref())).map(t -> {
        if (StringUtils.isNotBlank(t.ref())) {
          return t.ref();
        }
 else {
          return t.name();
        }
      }
);
      AnnotationsUtils.getTags(apiTags.toArray(new org.eclipse.microprofile.openapi.annotations.tags.Tag[apiTags.size()]),true).ifPresent(tags -> openApiTags.addAll(tags));
    }
    if (tagsAnnotation != null && ArrayUtils.isNotEmpty(tagsAnnotation.refs())) {
      operationTags=Stream.concat(operationTags,Stream.of(tagsAnnotation.refs()).filter(StringUtils::isNotBlank));
    }
    operationTags.distinct().forEach(operation::addTag);
  }
 else   if (classTags != null && !classTags.isEmpty()) {
    operation.setTags(new ArrayList<>(classTags));
  }
  if (globalParameters != null) {
    for (    Parameter globalParameter : globalParameters) {
      operation.addParameter(globalParameter);
    }
  }
  if (apiParameters != null) {
    getParametersListFromAnnotation(apiParameters.toArray(new org.eclipse.microprofile.openapi.annotations.parameters.Parameter[apiParameters.size()]),classConsumes,methodConsumes,operation).ifPresent(p -> p.forEach(operation::addParameter));
  }
  if (apiResponses != null) {
    OperationParser.getApiResponses(apiResponses.toArray(new org.eclipse.microprofile.openapi.annotations.responses.APIResponse[apiResponses.size()]),classProduces,methodProduces,components).ifPresent(responses -> {
      if (operation.getResponses() == null) {
        operation.setResponses(responses);
      }
 else {
        responses.forEach(operation.getResponses()::addApiResponse);
      }
    }
);
  }
  if (StringUtils.isBlank(operation.getOperationId())) {
    operation.setOperationId(method.getName());
  }
  if (apiOperation != null) {
    setOperationObjectFromApiOperationAnnotation(operation,apiOperation,methodProduces,classProduces,methodConsumes,classConsumes);
  }
  if (operation.getExternalDocs() == null) {
    classExternalDocs.ifPresent(operation::setExternalDocs);
  }
  Type returnType=method.getGenericReturnType();
  if (!shouldIgnoreClass(returnType.getTypeName())) {
    ResolvedSchema resolvedSchema=ModelConverters.getInstance().resolveAnnotatedType(returnType,new ArrayList<>(),""String_Node_Str"");
    if (resolvedSchema.schema != null) {
      Schema returnTypeSchema=resolvedSchema.schema;
      Content content=new ContentImpl();
      MediaType mediaType=new MediaTypeImpl().schema(returnTypeSchema);
      AnnotationsUtils.applyTypes(classConsumes == null ? new String[0] : classConsumes.value(),methodConsumes == null ? new String[0] : methodConsumes.value(),content,mediaType);
      if (operation.getResponses() == null) {
        operation.responses(new APIResponsesImpl().defaultValue(new APIResponseImpl().description(DEFAULT_DESCRIPTION).content(content)));
      }
      if (operation.getResponses().getDefault() != null && StringUtils.isBlank(operation.getResponses().getDefault().getRef()) && operation.getResponses().getDefault().getContent() == null) {
        operation.getResponses().getDefault().content(content);
      }
      Map<String,Schema> schemaMap=resolvedSchema.referencedSchemas;
      if (schemaMap != null) {
        schemaMap.forEach((key,schema) -> components.addSchema(key,schema));
      }
    }
  }
  if (operation.getResponses() == null || operation.getResponses().size() == 0) {
    APIResponse apiResponseObject=new APIResponseImpl();
    apiResponseObject.setDescription(DEFAULT_DESCRIPTION);
    operation.setResponses(new APIResponsesImpl().defaultValue(apiResponseObject));
  }
  return operation;
}"
34757,"public SchemaImpl(SchemaImpl schema){
  this._default=schema.getDefaultValue();
  this.name=schema.getName();
  this.title=schema.getTitle();
  this.multipleOf=schema.getMultipleOf();
  this.maximum=schema.getMaximum();
  this.exclusiveMaximum=schema.getExclusiveMaximum();
  this.minimum=schema.getMinimum();
  this.exclusiveMinimum=schema.getExclusiveMinimum();
  this.maxLength=schema.getMaxLength();
  this.minLength=schema.getMinLength();
  this.pattern=schema.getPattern();
  this.maxItems=schema.getMaxItems();
  this.minItems=schema.getMinItems();
  this.uniqueItems=schema.getUniqueItems();
  this.maxProperties=schema.getMaxProperties();
  this.minProperties=schema.getMinProperties();
  this.required=schema.getRequired();
  this.type=schema.getType();
  this.not=schema.getNot();
  this.properties=schema.getProperties();
  this.description=schema.getDescription();
  this.format=schema.getFormat();
  this.$ref=schema.getRef();
  this.nullable=schema.getNullable();
  this.readOnly=schema.getReadOnly();
  this.writeOnly=schema.getWriteOnly();
  this.example=schema.getExample();
  this.externalDocs=schema.getExternalDocs();
  this.deprecated=schema.getDeprecated();
  this.xml=schema.getXml();
  this.extensions=schema.getExtensions();
  this._enum=schema.getEnumeration();
  this.discriminator=schema.getDiscriminator();
  this.anyOf=schema.getAnyOf();
  this.allOf=schema.getAllOf();
  this.oneOf=schema.getOneOf();
  this.additionalProperties=schema.getAdditionalProperties();
  this.items=schema.getItems();
}","public SchemaImpl(SchemaImpl schema){
  if (schema == null) {
    return;
  }
  this._default=schema.getDefaultValue();
  this.name=schema.getName();
  this.title=schema.getTitle();
  this.multipleOf=schema.getMultipleOf();
  this.maximum=schema.getMaximum();
  this.exclusiveMaximum=schema.getExclusiveMaximum();
  this.minimum=schema.getMinimum();
  this.exclusiveMinimum=schema.getExclusiveMinimum();
  this.maxLength=schema.getMaxLength();
  this.minLength=schema.getMinLength();
  this.pattern=schema.getPattern();
  this.maxItems=schema.getMaxItems();
  this.minItems=schema.getMinItems();
  this.uniqueItems=schema.getUniqueItems();
  this.maxProperties=schema.getMaxProperties();
  this.minProperties=schema.getMinProperties();
  this.required=schema.getRequired();
  this.type=schema.getType();
  this.not=schema.getNot();
  this.properties=schema.getProperties();
  this.description=schema.getDescription();
  this.format=schema.getFormat();
  this.$ref=schema.getRef();
  this.nullable=schema.getNullable();
  this.readOnly=schema.getReadOnly();
  this.writeOnly=schema.getWriteOnly();
  this.example=schema.getExample();
  this.externalDocs=schema.getExternalDocs();
  this.deprecated=schema.getDeprecated();
  this.xml=schema.getXml();
  this.extensions=schema.getExtensions();
  this._enum=schema.getEnumeration();
  this.discriminator=schema.getDiscriminator();
  this.anyOf=schema.getAnyOf();
  this.allOf=schema.getAllOf();
  this.oneOf=schema.getOneOf();
  this.additionalProperties=schema.getAdditionalProperties();
  this.items=schema.getItems();
}"
34758,"private static String jsonifyTraceAndMessage(int maxFieldLength,String wlpUserDir,String serverName,String hostName,String eventType,Object event,String[] tags){
  GenericData genData=(GenericData)event;
  StringBuilder sb=new StringBuilder();
  boolean isFirstField=true;
  ArrayList<Pair> pairs=genData.getPairs();
  KeyValuePair kvp=null;
  String key=null;
  String value=null;
  sb.append(""String_Node_Str"");
  isFirstField=CollectorJsonHelpers.addCommonFields(sb,hostName,wlpUserDir,serverName,isFirstField,eventType);
  for (  Pair p : pairs) {
    if (p instanceof KeyValuePair) {
      kvp=(KeyValuePair)p;
      key=kvp.getKey();
      value=kvp.getValue();
      if (!(key.equals(LogFieldConstants.LOGLEVEL))) {
      }
 else       if (key.equals(LogFieldConstants.MESSAGE)) {
        String formattedValue=CollectorJsonHelpers.formatMessage(value,maxFieldLength);
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,formattedValue,false,true,false,isFirstField,kvp.isNumber());
      }
 else       if (key.equals(LogFieldConstants.IBM_THREADID)) {
        key=LogFieldConstants.THREADID;
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,DataFormatHelper.padHexString(Integer.parseInt(value),8),false,true,false,isFirstField,kvp.isNumber());
      }
 else       if (key.equals(LogFieldConstants.IBM_DATETIME)) {
        key=LogFieldConstants.DATETIME;
        String datetime=CollectorJsonHelpers.dateFormatTL.get().format(Long.parseLong(value));
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,datetime,false,true,false,isFirstField,kvp.isNumber());
      }
 else       if (key.equals(LogFieldConstants.MODULE)) {
        key=LogFieldConstants.LOGGERNAME;
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,value,false,true,false,isFirstField,kvp.isNumber());
      }
 else {
        if (key.contains(LogFieldConstants.IBM_TAG)) {
          key=CollectorJsonHelpers.removeIBMTag(key);
        }
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,value,false,true,false,isFirstField,kvp.isNumber());
      }
    }
  }
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String jsonifyTraceAndMessage(int maxFieldLength,String wlpUserDir,String serverName,String hostName,String eventType,Object event,String[] tags){
  GenericData genData=(GenericData)event;
  StringBuilder sb=new StringBuilder();
  boolean isFirstField=true;
  ArrayList<Pair> pairs=genData.getPairs();
  KeyValuePair kvp=null;
  String key=null;
  String value=null;
  sb.append(""String_Node_Str"");
  isFirstField=CollectorJsonHelpers.addCommonFields(sb,hostName,wlpUserDir,serverName,isFirstField,eventType);
  for (  Pair p : pairs) {
    if (p instanceof KeyValuePair) {
      kvp=(KeyValuePair)p;
      key=kvp.getKey();
      value=kvp.getValue();
      if (key.equals(LogFieldConstants.LOGLEVEL)) {
      }
 else       if (key.equals(LogFieldConstants.MESSAGE)) {
        String formattedValue=CollectorJsonHelpers.formatMessage(value,maxFieldLength);
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,formattedValue,false,true,false,isFirstField,kvp.isNumber());
      }
 else       if (key.equals(LogFieldConstants.IBM_THREADID)) {
        key=LogFieldConstants.THREADID;
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,DataFormatHelper.padHexString(Integer.parseInt(value),8),false,true,false,isFirstField,kvp.isNumber());
      }
 else       if (key.equals(LogFieldConstants.IBM_DATETIME)) {
        key=LogFieldConstants.DATETIME;
        String datetime=CollectorJsonHelpers.dateFormatTL.get().format(Long.parseLong(value));
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,datetime,false,true,false,isFirstField,kvp.isNumber());
      }
 else       if (key.equals(LogFieldConstants.MODULE)) {
        key=LogFieldConstants.LOGGERNAME;
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,value,false,true,false,isFirstField,kvp.isNumber());
      }
 else {
        if (key.contains(LogFieldConstants.IBM_TAG)) {
          key=CollectorJsonHelpers.removeIBMTag(key);
        }
        isFirstField=isFirstField & !CollectorJsonHelpers.addToJSON(sb,key,value,false,true,false,isFirstField,kvp.isNumber());
      }
    }
  }
  if (tags != null) {
    addTagNameForVersion(sb).append(CollectorJsonHelpers.jsonifyTags(tags));
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
34759,"/** 
 * Method to return log event data in json format. If the collector version passed is greater than 1.0 then the jsonifyEvent call is passed to another version of CollectorJsonUtils.
 * @param event The object originating from logging source which contains necessary fields
 * @param eventType The type of event
 * @param servername The name of the server
 * @param wlpUserDir The name of wlp user directory
 * @param serverHostName The name of server host
 * @param collectorVersion The version number
 * @param tags An array of tags
 * @param maxFieldLength The max character length of strings
 */
public static String jsonifyEvent(Object event,String eventType,String serverName,String wlpUserDir,String serverHostName,String collectorVersion,String[] tags,int maxFieldLength){
  if (!collectorVersion.equals(""String_Node_Str"")) {
    return CollectorJsonUtils1_1.jsonifyEvent(event,eventType,serverName,wlpUserDir,serverHostName,tags,maxFieldLength);
  }
 else {
    if (eventType.equals(CollectorConstants.GC_EVENT_TYPE)) {
      return jsonifyGCEvent(serverHostName,wlpUserDir,serverName,(HCGCData)event,tags);
    }
 else     if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE)) {
      return jsonifyTraceAndMessage(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.MESSAGES_LOG_EVENT_TYPE,event,tags);
    }
 else     if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE)) {
      return jsonifyTraceAndMessage(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.TRACE_LOG_EVENT_TYPE,event,tags);
    }
 else     if (eventType.equals(CollectorConstants.FFDC_EVENT_TYPE)) {
      return jsonifyFFDC(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.FFDC_EVENT_TYPE,event,tags);
    }
 else     if (eventType.equals(CollectorConstants.ACCESS_LOG_EVENT_TYPE)) {
      return jsonifyAccess(-1,wlpUserDir,serverName,serverHostName,CollectorConstants.ACCESS_LOG_EVENT_TYPE,event,tags);
    }
  }
  return ""String_Node_Str"";
}","/** 
 * Method to return log event data in json format. If the collector version passed is greater than 1.0 then the jsonifyEvent call is passed to another version of CollectorJsonUtils.
 * @param event The object originating from logging source which contains necessary fields
 * @param eventType The type of event
 * @param servername The name of the server
 * @param wlpUserDir The name of wlp user directory
 * @param serverHostName The name of server host
 * @param collectorVersion The version number
 * @param tags An array of tags
 * @param maxFieldLength The max character length of strings
 */
public static String jsonifyEvent(Object event,String eventType,String serverName,String wlpUserDir,String serverHostName,String collectorVersion,String[] tags,int maxFieldLength){
  if (!collectorVersion.equals(""String_Node_Str"")) {
    return CollectorJsonUtils1_1.jsonifyEvent(event,eventType,serverName,wlpUserDir,serverHostName,tags,maxFieldLength);
  }
 else {
    if (eventType.equals(CollectorConstants.GC_EVENT_TYPE)) {
      if (event instanceof GenericData) {
        return jsonifyGCEvent(-1,wlpUserDir,serverName,serverHostName,CollectorConstants.GC_EVENT_TYPE,event,tags);
      }
 else {
        return jsonifyGCEvent(serverHostName,wlpUserDir,serverName,(HCGCData)event,tags);
      }
    }
 else     if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE)) {
      return jsonifyTraceAndMessage(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.MESSAGES_LOG_EVENT_TYPE,event,tags);
    }
 else     if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE)) {
      return jsonifyTraceAndMessage(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.TRACE_LOG_EVENT_TYPE,event,tags);
    }
 else     if (eventType.equals(CollectorConstants.FFDC_EVENT_TYPE)) {
      return jsonifyFFDC(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.FFDC_EVENT_TYPE,event,tags);
    }
 else     if (eventType.equals(CollectorConstants.ACCESS_LOG_EVENT_TYPE)) {
      return jsonifyAccess(-1,wlpUserDir,serverName,serverHostName,CollectorConstants.ACCESS_LOG_EVENT_TYPE,event,tags);
    }
  }
  return ""String_Node_Str"";
}"
34760,"/** 
 * Method to return log event data in json format. This method is for collector version greater than 1.0
 * @param event The object originating from logging source which contains necessary fields
 * @param eventType The type of event
 * @param servername The name of the server
 * @param wlpUserDir The name of wlp user directory
 * @param serverHostName The name of server host
 * @param collectorVersion The version number
 * @param tags An array of tags
 * @param maxFieldLength The max character length of strings
 */
public static String jsonifyEvent(Object event,String eventType,String serverName,String wlpUserDir,String serverHostName,String[] tags,int maxFieldLength){
  if (eventType.equals(CollectorConstants.GC_EVENT_TYPE)) {
    return jsonifyGCEvent(serverHostName,wlpUserDir,serverName,(HCGCData)event,tags);
  }
 else   if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE)) {
    return jsonifyTraceAndMessage(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.MESSAGES_LOG_EVENT_TYPE,event,tags);
  }
 else   if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE)) {
    return jsonifyTraceAndMessage(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.TRACE_LOG_EVENT_TYPE,event,tags);
  }
 else   if (eventType.equals(CollectorConstants.FFDC_EVENT_TYPE)) {
    return jsonifyFFDC(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.FFDC_EVENT_TYPE,event,tags);
  }
 else   if (eventType.equals(CollectorConstants.ACCESS_LOG_EVENT_TYPE)) {
    return jsonifyAccess(-1,wlpUserDir,serverName,serverHostName,CollectorConstants.ACCESS_LOG_EVENT_TYPE,event,tags);
  }
  return ""String_Node_Str"";
}","/** 
 * Method to return log event data in json format. This method is for collector version greater than 1.0
 * @param event The object originating from logging source which contains necessary fields
 * @param eventType The type of event
 * @param servername The name of the server
 * @param wlpUserDir The name of wlp user directory
 * @param serverHostName The name of server host
 * @param collectorVersion The version number
 * @param tags An array of tags
 * @param maxFieldLength The max character length of strings
 */
public static String jsonifyEvent(Object event,String eventType,String serverName,String wlpUserDir,String serverHostName,String[] tags,int maxFieldLength){
  if (eventType.equals(CollectorConstants.GC_EVENT_TYPE)) {
    if (event instanceof GenericData) {
      return jsonifyGCEvent(-1,wlpUserDir,serverName,serverHostName,CollectorConstants.GC_EVENT_TYPE,event,tags);
    }
 else {
      return jsonifyGCEvent(serverHostName,wlpUserDir,serverName,(HCGCData)event,tags);
    }
  }
 else   if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE)) {
    return jsonifyTraceAndMessage(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.MESSAGES_LOG_EVENT_TYPE,event,tags);
  }
 else   if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE)) {
    return jsonifyTraceAndMessage(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.TRACE_LOG_EVENT_TYPE,event,tags);
  }
 else   if (eventType.equals(CollectorConstants.FFDC_EVENT_TYPE)) {
    return jsonifyFFDC(maxFieldLength,wlpUserDir,serverName,serverHostName,CollectorConstants.FFDC_EVENT_TYPE,event,tags);
  }
 else   if (eventType.equals(CollectorConstants.ACCESS_LOG_EVENT_TYPE)) {
    return jsonifyAccess(-1,wlpUserDir,serverName,serverHostName,CollectorConstants.ACCESS_LOG_EVENT_TYPE,event,tags);
  }
  return ""String_Node_Str"";
}"
34761,"protected AuthenticationResult mapToAuthenticationResult(AuthStatus status,JaspiRequest jaspiRequest,Subject clientSubject){
  if (tc.isEntryEnabled())   Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + status);
  AuthenticationResult authResult=null;
  String pretty=""String_Node_Str"";
  if (AuthStatus.SUCCESS == status || AuthStatus.SEND_SUCCESS == status) {
    authResult=new AuthenticationResult(AuthResult.SUCCESS,clientSubject);
    pretty=""String_Node_Str"";
  }
 else   if (AuthStatus.SEND_CONTINUE == status) {
    int responseStatus=getResponseStatus(jaspiRequest.getHttpServletResponse());
    HttpServletRequest req=jaspiRequest.getHttpServletRequest();
switch (responseStatus) {
case HttpServletResponse.SC_UNAUTHORIZED:
      String realm=(String)jaspiRequest.getMessageInfo().getMap().get(AttributeNameConstants.WSCREDENTIAL_REALM);
    authResult=new AuthenticationResult(AuthResult.SEND_401,realm != null ? realm : (String)null);
  pretty=""String_Node_Str"";
break;
case HttpServletResponse.SC_MOVED_TEMPORARILY:
case HttpServletResponse.SC_SEE_OTHER:
case HttpServletResponse.SC_TEMPORARY_REDIRECT:
String loginURL=getLoginURL(jaspiRequest,req);
String query=req.getQueryString();
String originalURL=req.getRequestURL().append(query != null ? ""String_Node_Str"" + query : ""String_Node_Str"").toString();
authResult=new AuthenticationResult(AuthResult.REDIRECT,loginURL);
pretty=""String_Node_Str"";
ReferrerURLCookieHandler referrerURLHandler=WebConfigUtils.getWebAppSecurityConfig().createReferrerURLCookieHandler();
referrerURLHandler.setReferrerURLCookie(req,authResult,originalURL);
break;
default :
authResult=new AuthenticationResult(AuthResult.RETURN,""String_Node_Str"" + responseStatus);
break;
}
}
 else if (AuthStatus.SEND_FAILURE == status) {
String detail=""String_Node_Str"" + status + ""String_Node_Str"";
authResult=new AuthenticationResult(AuthResult.FAILURE,detail);
if (tc.isDebugEnabled()) Tr.debug(tc,detail);
}
 else {
authResult=new AuthenticationResult(AuthResult.FAILURE,""String_Node_Str"" + status);
}
if (authResult.getStatus().equals(AuthResult.FAILURE)) {
Tr.info(tc,""String_Node_Str"",new Object[]{status,jaspiRequest.getHttpServletRequest().getRequestURI(),jaspiProviderServiceRef.getService() != null ? jaspiProviderServiceRef.getService().getClass() : null});
}
if (tc.isEntryEnabled()) Tr.exit(tc,""String_Node_Str"",""String_Node_Str"" + pretty);
return authResult;
}","protected AuthenticationResult mapToAuthenticationResult(AuthStatus status,JaspiRequest jaspiRequest,Subject clientSubject){
  if (tc.isEntryEnabled())   Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + status);
  AuthenticationResult authResult=null;
  String pretty=""String_Node_Str"";
  if (AuthStatus.SUCCESS == status || AuthStatus.SEND_SUCCESS == status) {
    authResult=new AuthenticationResult(AuthResult.SUCCESS,clientSubject);
    pretty=""String_Node_Str"";
  }
 else   if (AuthStatus.SEND_CONTINUE == status) {
    int responseStatus=getResponseStatus(jaspiRequest.getHttpServletResponse());
    HttpServletRequest req=jaspiRequest.getHttpServletRequest();
switch (responseStatus) {
case HttpServletResponse.SC_UNAUTHORIZED:
      String realm=(String)jaspiRequest.getMessageInfo().getMap().get(AttributeNameConstants.WSCREDENTIAL_REALM);
    authResult=new AuthenticationResult(AuthResult.SEND_401,realm != null ? realm : (String)null);
  pretty=""String_Node_Str"";
break;
case HttpServletResponse.SC_MOVED_TEMPORARILY:
case HttpServletResponse.SC_SEE_OTHER:
case HttpServletResponse.SC_TEMPORARY_REDIRECT:
String loginURL=getLoginURL(jaspiRequest,req);
String query=req.getQueryString();
String originalURL=req.getRequestURL().append(query != null ? ""String_Node_Str"" + query : ""String_Node_Str"").toString();
authResult=new AuthenticationResult(AuthResult.REDIRECT,loginURL);
pretty=""String_Node_Str"";
ReferrerURLCookieHandler referrerURLHandler=WebConfigUtils.getWebAppSecurityConfig().createReferrerURLCookieHandler();
referrerURLHandler.setReferrerURLCookie(req,authResult,originalURL);
break;
default :
authResult=new AuthenticationResult(AuthResult.RETURN,""String_Node_Str"" + responseStatus);
break;
}
}
 else if (AuthStatus.SEND_FAILURE == status) {
pretty=""String_Node_Str"";
String detail=""String_Node_Str"" + pretty + ""String_Node_Str"";
authResult=new AuthenticationResult(AuthResult.FAILURE,detail);
if (tc.isDebugEnabled()) Tr.debug(tc,detail);
}
 else {
authResult=new AuthenticationResult(AuthResult.FAILURE,""String_Node_Str"" + status);
}
if (authResult.getStatus().equals(AuthResult.FAILURE)) {
Tr.info(tc,""String_Node_Str"",new Object[]{status,jaspiRequest.getHttpServletRequest().getRequestURI(),jaspiProviderServiceRef.getService() != null ? jaspiProviderServiceRef.getService().getClass() : null});
}
if (tc.isEntryEnabled()) Tr.exit(tc,""String_Node_Str"",""String_Node_Str"" + pretty);
return authResult;
}"
34762,"@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  AuthStatus status=AuthStatus.SEND_FAILURE;
  try {
    HttpAuthenticationMechanism authMech=getModulePropertiesUtils().getHttpAuthenticationMechanism();
    HttpMessageContext httpMessageContext=createHttpMessageContext(messageInfo,clientSubject);
    AuthenticationStatus authenticationStatus=authMech.validateRequest((HttpServletRequest)messageInfo.getRequestMessage(),(HttpServletResponse)messageInfo.getResponseMessage(),httpMessageContext);
    status=translateValidateRequestStatus(authenticationStatus);
    registerSession(httpMessageContext);
  }
 catch (  Exception e) {
    e.printStackTrace();
    AuthException authException=new AuthException();
    authException.initCause(e);
    throw authException;
  }
  return status;
}","@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  AuthStatus status=AuthStatus.SEND_FAILURE;
  try {
    HttpAuthenticationMechanism authMech=getModulePropertiesUtils().getHttpAuthenticationMechanism();
    HttpMessageContext httpMessageContext=createHttpMessageContext(messageInfo,clientSubject);
    AuthenticationStatus authenticationStatus=authMech.validateRequest((HttpServletRequest)messageInfo.getRequestMessage(),(HttpServletResponse)messageInfo.getResponseMessage(),httpMessageContext);
    status=translateValidateRequestStatus(authenticationStatus);
    registerSession(httpMessageContext);
  }
 catch (  Exception e) {
    e.printStackTrace();
    AuthException authException=new AuthException(e.getMessage());
    authException.initCause(e);
    throw authException;
  }
  return status;
}"
34763,"public WebReply createReplyForAuthnFailure(AuthenticationResult authResult,String realm){
  WebReply reply=null;
switch (authResult.getStatus()) {
case FAILURE:
    return DENY_AUTHN_FAILED;
case SEND_401:
  return new ChallengeReply(realm);
case TAI_CHALLENGE:
return new TAIChallengeReply(authResult.getTAIChallengeCode());
case REDIRECT:
return new RedirectReply(authResult.getRedirectURL(),authResult.getCookies());
case UNKNOWN:
case CONTINUE:
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + authResult.getStatus() + ""String_Node_Str""+ authResult.getReason()+ ""String_Node_Str"");
}
return DENY_AUTHN_FAILED;
default :
break;
}
return reply;
}","public WebReply createReplyForAuthnFailure(AuthenticationResult authResult,String realm){
  WebReply reply=null;
switch (authResult.getStatus()) {
case FAILURE:
    String reason=authResult.getReason();
  if (reason != null && reason.contains(""String_Node_Str""))   return new DenyReply(reason);
return DENY_AUTHN_FAILED;
case SEND_401:
return new ChallengeReply(realm);
case TAI_CHALLENGE:
return new TAIChallengeReply(authResult.getTAIChallengeCode());
case REDIRECT:
return new RedirectReply(authResult.getRedirectURL(),authResult.getCookies());
case UNKNOWN:
case CONTINUE:
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + authResult.getStatus() + ""String_Node_Str""+ authResult.getReason()+ ""String_Node_Str"");
}
return DENY_AUTHN_FAILED;
default :
break;
}
return reply;
}"
34764,"/** 
 * @param webRequest
 * @return
 */
protected AuthenticationResult handleJaspi(WebRequest webRequest,HashMap<String,Object> props){
  AuthenticationResult authResult=JASPI_CONT;
  if (webAuthenticatorRef != null) {
    WebAuthenticator jaspiAuthenticator=webAuthenticatorRef.getService(""String_Node_Str"");
    if (jaspiAuthenticator != null) {
      if (props == null) {
        authResult=handleSSO(webRequest,null);
        if (authResult.getStatus() == AuthResult.CONTINUE) {
          authResult=handleSSO(webRequest,""String_Node_Str"");
          if (authResult.getStatus() == AuthResult.SUCCESS) {
            Map<String,Object> requestProps=new HashMap<String,Object>();
            requestProps.put(""String_Node_Str"",authResult.getSubject());
            webRequest.setProperties(requestProps);
          }
          authResult=jaspiAuthenticator.authenticate(webRequest);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
      }
 else {
        try {
          authResult=jaspiAuthenticator.authenticate(webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse(),props);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
 catch (        Exception e) {
          if (tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"",e);
          }
        }
      }
      if (authResult.getStatus() == AuthResult.SUCCESS) {
        boolean registerSession=false;
        Map<String,Object> reqProps=webRequest.getProperties();
        if (reqProps != null) {
          registerSession=Boolean.valueOf((String)reqProps.get(""String_Node_Str"")).booleanValue();
        }
        if (registerSession) {
          SSOCookieHelper ssoCh=new SSOCookieHelperImpl(webAppSecurityConfig,""String_Node_Str"");
          ssoCh.addSSOCookiesToResponse(authResult.getSubject(),webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse());
        }
        SSOCookieHelper ssoCh=webAppSecurityConfig.createSSOCookieHelper();
        HttpServletResponse res=webRequest.getHttpServletResponse();
        if (!res.isCommitted()) {
          PostParameterHelper postParameterHelper=new PostParameterHelper(webAppSecurityConfig);
          postParameterHelper.restore(webRequest.getHttpServletRequest(),res);
        }
        if (props != null && props.get(""String_Node_Str"") != null && props.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        }
 else {
          if (!res.isCommitted()) {
            ssoCh.removeSSOCookieFromResponse(res);
          }
        }
      }
    }
  }
  return authResult;
}","/** 
 * @param webRequest
 * @return
 */
protected AuthenticationResult handleJaspi(WebRequest webRequest,HashMap<String,Object> props){
  AuthenticationResult authResult=JASPI_CONT;
  if (webAuthenticatorRef != null) {
    WebAuthenticator jaspiAuthenticator=webAuthenticatorRef.getService(""String_Node_Str"");
    if (jaspiAuthenticator != null) {
      if (props == null) {
        authResult=handleSSO(webRequest,null);
        if (authResult.getStatus() == AuthResult.CONTINUE) {
          authResult=handleSSO(webRequest,""String_Node_Str"");
          if (authResult.getStatus() == AuthResult.SUCCESS) {
            Map<String,Object> requestProps=new HashMap<String,Object>();
            requestProps.put(""String_Node_Str"",authResult.getSubject());
            webRequest.setProperties(requestProps);
          }
          authResult=jaspiAuthenticator.authenticate(webRequest);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
      }
 else {
        try {
          authResult=jaspiAuthenticator.authenticate(webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse(),props);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
 catch (        Exception e) {
          if (tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"",e);
          }
          authResult=new AuthenticationResult(AuthResult.FAILURE,e.getMessage());
        }
      }
      if (authResult.getStatus() == AuthResult.SUCCESS) {
        boolean registerSession=false;
        Map<String,Object> reqProps=webRequest.getProperties();
        if (reqProps != null) {
          registerSession=Boolean.valueOf((String)reqProps.get(""String_Node_Str"")).booleanValue();
        }
        if (registerSession) {
          SSOCookieHelper ssoCh=new SSOCookieHelperImpl(webAppSecurityConfig,""String_Node_Str"");
          ssoCh.addSSOCookiesToResponse(authResult.getSubject(),webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse());
        }
        SSOCookieHelper ssoCh=webAppSecurityConfig.createSSOCookieHelper();
        HttpServletResponse res=webRequest.getHttpServletResponse();
        if (!res.isCommitted()) {
          PostParameterHelper postParameterHelper=new PostParameterHelper(webAppSecurityConfig);
          postParameterHelper.restore(webRequest.getHttpServletRequest(),res);
        }
        if (props != null && props.get(""String_Node_Str"") != null && props.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        }
 else {
          if (!res.isCommitted()) {
            ssoCh.removeSSOCookieFromResponse(res);
          }
        }
      }
    }
  }
  return authResult;
}"
34765,"protected AuthenticationResult mapToAuthenticationResult(AuthStatus status,JaspiRequest jaspiRequest,Subject clientSubject){
  if (tc.isEntryEnabled())   Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + status);
  AuthenticationResult authResult=null;
  String pretty=""String_Node_Str"";
  if (AuthStatus.SUCCESS == status || AuthStatus.SEND_SUCCESS == status) {
    authResult=new AuthenticationResult(AuthResult.SUCCESS,clientSubject);
    pretty=""String_Node_Str"";
  }
 else   if (AuthStatus.SEND_CONTINUE == status) {
    int responseStatus=getResponseStatus(jaspiRequest.getHttpServletResponse());
    HttpServletRequest req=jaspiRequest.getHttpServletRequest();
switch (responseStatus) {
case HttpServletResponse.SC_UNAUTHORIZED:
      String realm=(String)jaspiRequest.getMessageInfo().getMap().get(AttributeNameConstants.WSCREDENTIAL_REALM);
    authResult=new AuthenticationResult(AuthResult.SEND_401,realm != null ? realm : (String)null);
  pretty=""String_Node_Str"";
break;
case HttpServletResponse.SC_MOVED_TEMPORARILY:
case HttpServletResponse.SC_SEE_OTHER:
case HttpServletResponse.SC_TEMPORARY_REDIRECT:
String loginURL=getLoginURL(jaspiRequest,req);
String query=req.getQueryString();
String originalURL=req.getRequestURL().append(query != null ? ""String_Node_Str"" + query : ""String_Node_Str"").toString();
authResult=new AuthenticationResult(AuthResult.REDIRECT,loginURL);
pretty=""String_Node_Str"";
ReferrerURLCookieHandler referrerURLHandler=WebConfigUtils.getWebAppSecurityConfig().createReferrerURLCookieHandler();
referrerURLHandler.setReferrerURLCookie(req,authResult,originalURL);
break;
default :
authResult=new AuthenticationResult(AuthResult.RETURN,""String_Node_Str"" + responseStatus);
break;
}
}
 else if (AuthStatus.SEND_FAILURE == status) {
pretty=""String_Node_Str"";
String detail=""String_Node_Str"" + pretty + ""String_Node_Str"";
authResult=new AuthenticationResult(AuthResult.FAILURE,detail);
if (tc.isDebugEnabled()) Tr.debug(tc,detail);
}
 else {
authResult=new AuthenticationResult(AuthResult.FAILURE,""String_Node_Str"" + status);
}
if (authResult.getStatus().equals(AuthResult.FAILURE)) {
Tr.info(tc,""String_Node_Str"",new Object[]{status,jaspiRequest.getHttpServletRequest().getRequestURI(),jaspiProviderServiceRef.getService() != null ? jaspiProviderServiceRef.getService().getClass() : null});
}
if (tc.isEntryEnabled()) Tr.exit(tc,""String_Node_Str"",""String_Node_Str"" + pretty);
return authResult;
}","protected AuthenticationResult mapToAuthenticationResult(AuthStatus status,JaspiRequest jaspiRequest,Subject clientSubject){
  if (tc.isEntryEnabled())   Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + status);
  AuthenticationResult authResult=null;
  String pretty=""String_Node_Str"";
  if (AuthStatus.SUCCESS == status || AuthStatus.SEND_SUCCESS == status) {
    authResult=new AuthenticationResult(AuthResult.SUCCESS,clientSubject);
    pretty=""String_Node_Str"";
  }
 else   if (AuthStatus.SEND_CONTINUE == status) {
    int responseStatus=getResponseStatus(jaspiRequest.getHttpServletResponse());
    HttpServletRequest req=jaspiRequest.getHttpServletRequest();
switch (responseStatus) {
case HttpServletResponse.SC_UNAUTHORIZED:
      String realm=(String)jaspiRequest.getMessageInfo().getMap().get(AttributeNameConstants.WSCREDENTIAL_REALM);
    authResult=new AuthenticationResult(AuthResult.SEND_401,realm != null ? realm : (String)null);
  pretty=""String_Node_Str"";
break;
case HttpServletResponse.SC_MOVED_TEMPORARILY:
case HttpServletResponse.SC_SEE_OTHER:
case HttpServletResponse.SC_TEMPORARY_REDIRECT:
String loginURL=getLoginURL(jaspiRequest,req);
String query=req.getQueryString();
String originalURL=req.getRequestURL().append(query != null ? ""String_Node_Str"" + query : ""String_Node_Str"").toString();
authResult=new AuthenticationResult(AuthResult.REDIRECT,loginURL);
pretty=""String_Node_Str"";
ReferrerURLCookieHandler referrerURLHandler=WebConfigUtils.getWebAppSecurityConfig().createReferrerURLCookieHandler();
referrerURLHandler.setReferrerURLCookie(req,authResult,originalURL);
break;
default :
authResult=new AuthenticationResult(AuthResult.RETURN,""String_Node_Str"" + responseStatus);
break;
}
}
 else if (AuthStatus.SEND_FAILURE == status) {
String detail=""String_Node_Str"" + status + ""String_Node_Str"";
authResult=new AuthenticationResult(AuthResult.FAILURE,detail);
if (tc.isDebugEnabled()) Tr.debug(tc,detail);
}
 else {
authResult=new AuthenticationResult(AuthResult.FAILURE,""String_Node_Str"" + status);
}
if (authResult.getStatus().equals(AuthResult.FAILURE)) {
Tr.info(tc,""String_Node_Str"",new Object[]{status,jaspiRequest.getHttpServletRequest().getRequestURI(),jaspiProviderServiceRef.getService() != null ? jaspiProviderServiceRef.getService().getClass() : null});
}
if (tc.isEntryEnabled()) Tr.exit(tc,""String_Node_Str"",""String_Node_Str"" + pretty);
return authResult;
}"
34766,"@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  AuthStatus status=AuthStatus.SEND_FAILURE;
  try {
    HttpAuthenticationMechanism authMech=getModulePropertiesUtils().getHttpAuthenticationMechanism();
    HttpMessageContext httpMessageContext=createHttpMessageContext(messageInfo,clientSubject);
    AuthenticationStatus authenticationStatus=authMech.validateRequest((HttpServletRequest)messageInfo.getRequestMessage(),(HttpServletResponse)messageInfo.getResponseMessage(),httpMessageContext);
    status=translateValidateRequestStatus(authenticationStatus);
    registerSession(httpMessageContext);
  }
 catch (  Exception e) {
    e.printStackTrace();
    AuthException authException=new AuthException(e.getMessage());
    authException.initCause(e);
    throw authException;
  }
  return status;
}","@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  AuthStatus status=AuthStatus.SEND_FAILURE;
  try {
    HttpAuthenticationMechanism authMech=getModulePropertiesUtils().getHttpAuthenticationMechanism();
    HttpMessageContext httpMessageContext=createHttpMessageContext(messageInfo,clientSubject);
    AuthenticationStatus authenticationStatus=authMech.validateRequest((HttpServletRequest)messageInfo.getRequestMessage(),(HttpServletResponse)messageInfo.getResponseMessage(),httpMessageContext);
    status=translateValidateRequestStatus(authenticationStatus);
    registerSession(httpMessageContext);
  }
 catch (  Exception e) {
    e.printStackTrace();
    AuthException authException=new AuthException();
    authException.initCause(e);
    throw authException;
  }
  return status;
}"
34767,"public WebReply createReplyForAuthnFailure(AuthenticationResult authResult,String realm){
  WebReply reply=null;
switch (authResult.getStatus()) {
case FAILURE:
    String reason=authResult.getReason();
  if (reason != null && reason.contains(""String_Node_Str""))   return new DenyReply(reason);
return DENY_AUTHN_FAILED;
case SEND_401:
return new ChallengeReply(realm);
case TAI_CHALLENGE:
return new TAIChallengeReply(authResult.getTAIChallengeCode());
case REDIRECT:
return new RedirectReply(authResult.getRedirectURL(),authResult.getCookies());
case UNKNOWN:
case CONTINUE:
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + authResult.getStatus() + ""String_Node_Str""+ authResult.getReason()+ ""String_Node_Str"");
}
return DENY_AUTHN_FAILED;
default :
break;
}
return reply;
}","public WebReply createReplyForAuthnFailure(AuthenticationResult authResult,String realm){
  WebReply reply=null;
switch (authResult.getStatus()) {
case FAILURE:
    return DENY_AUTHN_FAILED;
case SEND_401:
  return new ChallengeReply(realm);
case TAI_CHALLENGE:
return new TAIChallengeReply(authResult.getTAIChallengeCode());
case REDIRECT:
return new RedirectReply(authResult.getRedirectURL(),authResult.getCookies());
case UNKNOWN:
case CONTINUE:
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + authResult.getStatus() + ""String_Node_Str""+ authResult.getReason()+ ""String_Node_Str"");
}
return DENY_AUTHN_FAILED;
default :
break;
}
return reply;
}"
34768,"/** 
 * @param webRequest
 * @return
 */
protected AuthenticationResult handleJaspi(WebRequest webRequest,HashMap<String,Object> props){
  AuthenticationResult authResult=JASPI_CONT;
  if (webAuthenticatorRef != null) {
    WebAuthenticator jaspiAuthenticator=webAuthenticatorRef.getService(""String_Node_Str"");
    if (jaspiAuthenticator != null) {
      if (props == null) {
        authResult=handleSSO(webRequest,null);
        if (authResult.getStatus() == AuthResult.CONTINUE) {
          authResult=handleSSO(webRequest,""String_Node_Str"");
          if (authResult.getStatus() == AuthResult.SUCCESS) {
            Map<String,Object> requestProps=new HashMap<String,Object>();
            requestProps.put(""String_Node_Str"",authResult.getSubject());
            webRequest.setProperties(requestProps);
          }
          authResult=jaspiAuthenticator.authenticate(webRequest);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
      }
 else {
        try {
          authResult=jaspiAuthenticator.authenticate(webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse(),props);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
 catch (        Exception e) {
          if (tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"",e);
          }
          authResult=new AuthenticationResult(AuthResult.FAILURE,e.getMessage());
        }
      }
      if (authResult.getStatus() == AuthResult.SUCCESS) {
        boolean registerSession=false;
        Map<String,Object> reqProps=webRequest.getProperties();
        if (reqProps != null) {
          registerSession=Boolean.valueOf((String)reqProps.get(""String_Node_Str"")).booleanValue();
        }
        if (registerSession) {
          SSOCookieHelper ssoCh=new SSOCookieHelperImpl(webAppSecurityConfig,""String_Node_Str"");
          ssoCh.addSSOCookiesToResponse(authResult.getSubject(),webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse());
        }
        SSOCookieHelper ssoCh=webAppSecurityConfig.createSSOCookieHelper();
        HttpServletResponse res=webRequest.getHttpServletResponse();
        if (!res.isCommitted()) {
          PostParameterHelper postParameterHelper=new PostParameterHelper(webAppSecurityConfig);
          postParameterHelper.restore(webRequest.getHttpServletRequest(),res);
        }
        if (props != null && props.get(""String_Node_Str"") != null && props.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        }
 else {
          if (!res.isCommitted()) {
            ssoCh.removeSSOCookieFromResponse(res);
          }
        }
      }
    }
  }
  return authResult;
}","/** 
 * @param webRequest
 * @return
 */
protected AuthenticationResult handleJaspi(WebRequest webRequest,HashMap<String,Object> props){
  AuthenticationResult authResult=JASPI_CONT;
  if (webAuthenticatorRef != null) {
    WebAuthenticator jaspiAuthenticator=webAuthenticatorRef.getService(""String_Node_Str"");
    if (jaspiAuthenticator != null) {
      if (props == null) {
        authResult=handleSSO(webRequest,null);
        if (authResult.getStatus() == AuthResult.CONTINUE) {
          authResult=handleSSO(webRequest,""String_Node_Str"");
          if (authResult.getStatus() == AuthResult.SUCCESS) {
            Map<String,Object> requestProps=new HashMap<String,Object>();
            requestProps.put(""String_Node_Str"",authResult.getSubject());
            webRequest.setProperties(requestProps);
          }
          authResult=jaspiAuthenticator.authenticate(webRequest);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
      }
 else {
        try {
          authResult=jaspiAuthenticator.authenticate(webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse(),props);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
 catch (        Exception e) {
          if (tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"",e);
          }
        }
      }
      if (authResult.getStatus() == AuthResult.SUCCESS) {
        boolean registerSession=false;
        Map<String,Object> reqProps=webRequest.getProperties();
        if (reqProps != null) {
          registerSession=Boolean.valueOf((String)reqProps.get(""String_Node_Str"")).booleanValue();
        }
        if (registerSession) {
          SSOCookieHelper ssoCh=new SSOCookieHelperImpl(webAppSecurityConfig,""String_Node_Str"");
          ssoCh.addSSOCookiesToResponse(authResult.getSubject(),webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse());
        }
        SSOCookieHelper ssoCh=webAppSecurityConfig.createSSOCookieHelper();
        HttpServletResponse res=webRequest.getHttpServletResponse();
        if (!res.isCommitted()) {
          PostParameterHelper postParameterHelper=new PostParameterHelper(webAppSecurityConfig);
          postParameterHelper.restore(webRequest.getHttpServletRequest(),res);
        }
        if (props != null && props.get(""String_Node_Str"") != null && props.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        }
 else {
          if (!res.isCommitted()) {
            ssoCh.removeSSOCookieFromResponse(res);
          }
        }
      }
    }
  }
  return authResult;
}"
34769,"private String FixUpUrl(String input,String contextRoot){
  String output=input;
  if (!input.startsWith(""String_Node_Str"")) {
    input=""String_Node_Str"" + input;
  }
  if (input.startsWith(contextRoot) && input.charAt(contextRoot.length()) == '/') {
    output=input.substring(contextRoot.length());
  }
  return output;
}","private String FixUpUrl(String input,String contextRoot){
  String output=input;
  if (input != null) {
    if (!input.startsWith(""String_Node_Str"")) {
      input=""String_Node_Str"" + input;
    }
    if (input.startsWith(contextRoot) && input.charAt(contextRoot.length()) == '/') {
      output=input.substring(contextRoot.length());
    }
  }
  return output;
}"
34770,"/** 
 * Returns LoginToContinue properties for container override form login
 */
private Properties getGlobalLoginFormProps() throws Exception {
  WebAppSecurityConfig webAppSecConfig=getWebAppSecurityConfig();
  String loginURL=webAppSecConfig.getLoginFormURL();
  String errorURL=webAppSecConfig.getLoginErrorURL();
  String contextRoot=webAppSecConfig.getLoginFormContextRoot();
  if (contextRoot == null) {
    contextRoot=getFirstPathElement(loginURL);
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + contextRoot);
    }
  }
  loginURL=FixUpUrl(loginURL,contextRoot);
  errorURL=FixUpUrl(errorURL,contextRoot);
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + loginURL + ""String_Node_Str""+ errorURL+ ""String_Node_Str""+ contextRoot);
  }
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,loginURL);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,errorURL);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,true);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USE_GLOBAL_LOGIN,true);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGIN_FORM_CONTEXT_ROOT,contextRoot);
  return props;
}","/** 
 * Returns LoginToContinue properties for container override form login
 */
private Properties getGlobalLoginFormProps() throws Exception {
  WebAppSecurityConfig webAppSecConfig=getWebAppSecurityConfig();
  String loginURL=webAppSecConfig.getLoginFormURL();
  String errorURL=webAppSecConfig.getLoginErrorURL();
  String contextRoot=webAppSecConfig.getLoginFormContextRoot();
  if (contextRoot == null) {
    contextRoot=getFirstPathElement(loginURL);
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + contextRoot);
    }
  }
  loginURL=FixUpUrl(loginURL,contextRoot);
  errorURL=FixUpUrl(errorURL,contextRoot);
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + loginURL + ""String_Node_Str""+ errorURL+ ""String_Node_Str""+ contextRoot);
  }
  Properties props=new Properties();
  if (loginURL != null) {
    props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,loginURL);
  }
  if (errorURL != null) {
    props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,errorURL);
  }
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,true);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USE_GLOBAL_LOGIN,true);
  if (contextRoot != null) {
    props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGIN_FORM_CONTEXT_ROOT,contextRoot);
  }
  return props;
}"
34771,"public void writeFramesSync(CopyOnWriteArrayList<Frame> frames){
  if (frames == null) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    return;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + frames.size());
  }
  Iterator<Frame> i=frames.iterator();
  while (i.hasNext()) {
    try {
      Frame currentFrame=i.next();
      H2StreamProcessor streamProcessor=muxLink.getStreamProcessor(streamID);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType());
      }
      if (streamProcessor != null) {
        streamProcessor.processNextFrame(currentFrame,Direction.WRITING_OUT);
      }
 else {
        throw new StreamClosedException(""String_Node_Str"" + streamID + ""String_Node_Str"");
      }
    }
 catch (    Http2Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e.getErrorString());
      }
      muxLink.close(vc,e);
    }
catch (    Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
}","public void writeFramesSync(CopyOnWriteArrayList<Frame> frames){
  if (frames == null) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    return;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + frames.size());
  }
  Iterator<Frame> i=frames.iterator();
  while (i.hasNext()) {
    try {
      Frame currentFrame=i.next();
      H2StreamProcessor streamProcessor=muxLink.getStreamProcessor(streamID);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType());
      }
      if (streamProcessor != null) {
        streamProcessor.processNextFrame(currentFrame,Direction.WRITING_OUT);
      }
 else {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + streamID + ""String_Node_Str"");
        }
      }
    }
 catch (    Http2Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e.getErrorString());
      }
      muxLink.close(vc,e);
    }
catch (    Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
}"
34772,"@Override public void close(VirtualConnection inVC,Exception e){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + this + ""String_Node_Str""+ inVC);
  }
  this.muxLink.close(inVC,e);
}","@Override public void close(VirtualConnection inVC,Exception e){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + this + ""String_Node_Str""+ inVC);
  }
  if (streamID == 0 || streamID % 2 == 1) {
    this.muxLink.close(inVC,e);
  }
}"
34773,"public void sendRequestToWc(FrameHeaders frame){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  if (null == frame) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 else {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(frame.buildFrameForWrite().length);
    byte[] ba=frame.buildFrameForWrite();
    buf.put(ba);
    buf.flip();
    TCPReadRequestContext readi=h2HttpInboundLinkWrap.getConnectionContext().getReadInterface();
    readi.setBuffer(buf);
    currentFrame=frame;
    getHeadersFromFrame();
    setHeadersComplete();
    try {
      processCompleteHeaders(true);
    }
 catch (    CompressionException ce) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + ce);
      }
      buf.release();
      currentFrame=new FrameRstStream(myID,Constants.CANCEL,false);
      try {
        processNextFrame(currentFrame,Constants.Direction.WRITING_OUT);
      }
 catch (      ProtocolException pe) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + pe);
        }
      }
      currentFrame=null;
      muxLink.triggerStreamClose(this);
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
        Tr.exit(tc,""String_Node_Str"" + myID);
      }
      return;
    }
    setReadyForRead();
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}","/** 
 * Send an artificially created H2 request from a push_promise up to the WebContainer
 */
public void sendRequestToWc(FrameHeaders frame){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  if (null == frame) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 else {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(frame.buildFrameForWrite().length);
    byte[] ba=frame.buildFrameForWrite();
    buf.put(ba);
    buf.flip();
    TCPReadRequestContext readi=h2HttpInboundLinkWrap.getConnectionContext().getReadInterface();
    readi.setBuffer(buf);
    currentFrame=frame;
    getHeadersFromFrame();
    setHeadersComplete();
    try {
      processCompleteHeaders(true);
    }
 catch (    CompressionException ce) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + ce);
      }
      buf.release();
      currentFrame=new FrameRstStream(myID,Constants.CANCEL,false);
      try {
        processNextFrame(currentFrame,Constants.Direction.WRITING_OUT);
      }
 catch (      ProtocolException pe) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + pe);
        }
      }
      currentFrame=null;
      muxLink.triggerStreamClose(this);
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
        Tr.exit(tc,""String_Node_Str"" + myID);
      }
      return;
    }
    setReadyForRead();
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}"
34774,"private void readWriteTransitionState(Constants.Direction direction) throws Http2Exception {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ state);
  }
  if (currentFrame.getFrameType() == FrameTypes.GOAWAY || currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    writeFrameSync();
    this.updateStreamState(StreamState.CLOSED);
    if (currentFrame.getFrameType() == FrameTypes.GOAWAY) {
      muxLink.closeConnectionLink(null);
    }
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + state);
    }
    return;
  }
switch (state) {
case IDLE:
    processIdle(direction);
  break;
case RESERVED_LOCAL:
processReservedLocal(direction);
break;
case RESERVED_REMOTE:
processReservedRemote(direction);
break;
case OPEN:
processOpen(direction);
break;
case HALF_CLOSED_REMOTE:
processHalfClosedRemote(direction);
break;
case HALF_CLOSED_LOCAL:
processHalfClosedLocal(direction);
break;
case CLOSED:
processClosed(direction);
break;
default :
break;
}
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + state);
}
}","/** 
 * Transitions the stream state, give the previous state and current frame. Handles writes and error processing as needed.
 * @param Direction.WRITING_OUT or Direction.READING_IN
 * @throws Http2Exception
 */
private void readWriteTransitionState(Constants.Direction direction) throws Http2Exception {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ state);
  }
  if (currentFrame.getFrameType() == FrameTypes.GOAWAY || currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    writeFrameSync();
    this.updateStreamState(StreamState.CLOSED);
    if (currentFrame.getFrameType() == FrameTypes.GOAWAY) {
      muxLink.closeConnectionLink(null);
    }
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + state);
    }
    return;
  }
switch (state) {
case IDLE:
    processIdle(direction);
  break;
case RESERVED_LOCAL:
processReservedLocal(direction);
break;
case RESERVED_REMOTE:
processReservedRemote(direction);
break;
case OPEN:
processOpen(direction);
break;
case HALF_CLOSED_REMOTE:
processHalfClosedRemote(direction);
break;
case HALF_CLOSED_LOCAL:
processHalfClosedLocal(direction);
break;
case CLOSED:
processClosed(direction);
break;
default :
break;
}
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + state);
}
}"
34775,"public synchronized void processNextFrame(Frame frame,Constants.Direction direction) throws ProtocolException {
  boolean doDebugWhile=false;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString()+ ""String_Node_Str""+ muxLink.hashCode());
  }
  if (isStreamClosed()) {
    if (direction.equals(Constants.Direction.WRITING_OUT)) {
      if (muxLink.significantlyPastCloseTime(myID)) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        throw new ProtocolException(""String_Node_Str"");
      }
 else {
        if (frame.getFrameType() == FrameTypes.PRIORITY || frame.getFrameType() == FrameTypes.WINDOW_UPDATE || frame.getFrameType() == FrameTypes.RST_STREAM) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
          return;
        }
 else         if (frame.getFrameType() == FrameTypes.HEADERS || frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.PUSH_PROMISE) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
          throw new ProtocolException(""String_Node_Str"");
        }
      }
    }
 else     if (direction.equals(Constants.Direction.READ_IN)) {
      if (frame.getFrameType() == FrameTypes.PRIORITY) {
        return;
      }
      if (muxLink.significantlyPastCloseTime(myID)) {
        throw new ProtocolException(""String_Node_Str"");
      }
      if (frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.HEADERS) {
        throw new ProtocolException(""String_Node_Str"");
      }
 else       if (frame.getFrameType() == FrameTypes.RST_STREAM) {
        return;
      }
    }
  }
  ADDITIONAL_FRAME addFrame=ADDITIONAL_FRAME.FIRST_TIME;
  Http2Exception addFrameException=null;
  currentFrame=frame;
  while (addFrame != ADDITIONAL_FRAME.NO) {
    if (doDebugWhile) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString());
      }
    }
 else {
      doDebugWhile=true;
    }
    if (addFrame == ADDITIONAL_FRAME.RESET) {
      currentFrame=new FrameRstStream(myID,addFrameException.getErrorCode(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    if (addFrame == ADDITIONAL_FRAME.GOAWAY) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + muxLink.getHighestClientStreamId());
      }
      currentFrame=new FrameGoAway(0,addFrameException.getMessage().getBytes(),addFrameException.getErrorCode(),muxLink.getHighestClientStreamId(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    frameType=currentFrame.getFrameType();
    if (frameType == FrameTypes.RST_STREAM && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.RESET;
    }
 else     if (frameType == FrameTypes.GOAWAY && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.GOAWAY;
    }
    try {
      currentFrame.validate(muxLink.getConnectionSettings());
    }
 catch (    Http2Exception e) {
      if (addFrame == ADDITIONAL_FRAME.FIRST_TIME || addFrame == ADDITIONAL_FRAME.RESET || addFrame == ADDITIONAL_FRAME.GOAWAY) {
        if (e.isConnectionError()) {
          addFrame=ADDITIONAL_FRAME.GOAWAY;
        }
 else {
          addFrame=ADDITIONAL_FRAME.RESET;
        }
        addFrameException=e;
      }
 else {
        if (direction == Constants.Direction.READ_IN) {
          addFrame=ADDITIONAL_FRAME.RESET;
          addFrameException=e;
        }
 else {
        }
        addFrame=ADDITIONAL_FRAME.NO;
      }
      continue;
    }
    if (direction == Constants.Direction.READ_IN) {
      if (muxLink.checkIfGoAwaySendingOrClosing()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str"");
        }
        return;
      }
      if (isContinuationFrameExpected() && (frameType != FrameTypes.CONTINUATION || !this.continuationExpected)) {
        addFrame=ADDITIONAL_FRAME.GOAWAY;
        addFrameException=new ProtocolException(""String_Node_Str"");
        continue;
      }
      if (frameType == FrameTypes.SETTINGS || frameType == FrameTypes.GOAWAY || frameType == FrameTypes.PING) {
switch (frameType) {
case SETTINGS:
          processSETTINGSFrame();
        break;
case GOAWAY:
      processGOAWAYFrame();
    updateStreamState(StreamState.CLOSED);
  break;
case PING:
processPINGFrame();
break;
default :
break;
}
return;
}
try {
verifyReadFrameSequence();
}
 catch (Http2Exception e) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.RESET;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
addFrameException=e;
continue;
}
if (frameType == FrameTypes.PRIORITY) {
processPriorityFrame();
return;
}
if (frameType == FrameTypes.RST_STREAM) {
processRstFrame();
return;
}
try {
if (frameType == FrameTypes.WINDOW_UPDATE) {
processWindowUpdateFrame();
if (dataWaitingForWindowUpdate != null) {
if (!this.isWindowLimitExceeded(dataWaitingForWindowUpdate.peek())) {
waitingForWindowUpdate=false;
}
}
 else {
return;
}
}
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
updateStreamReadWindow();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
 else {
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"");
}
try {
verifyWriteFrameSequence();
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if ((addFrame == ADDITIONAL_FRAME.FIRST_TIME) || (addFrame == ADDITIONAL_FRAME.RESET)) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
if (!waitingForWindowUpdate && dataWaitingForWindowUpdate != null && !this.isWindowLimitExceeded(this.dataWaitingForWindowUpdate.peek())) {
addFrame=ADDITIONAL_FRAME.DATA;
currentFrame=this.dataWaitingForWindowUpdate.remove();
direction=Constants.Direction.WRITING_OUT;
if (this.dataWaitingForWindowUpdate.isEmpty()) {
this.dataWaitingForWindowUpdate=null;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
}
}","/** 
 * Update the state of this stream by passing in a given Frame to read or write. This method handles state validation, state transitions, connection setting updates, frame responses, and error processing. Note this method is synchronized.
 * @param Frame
 * @param Direction.WRITING_OUT or Direction.READING_IN
 * @throws ProtocolException
 */
public synchronized void processNextFrame(Frame frame,Constants.Direction direction) throws ProtocolException {
  boolean doDebugWhile=false;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString()+ ""String_Node_Str""+ muxLink.hashCode());
  }
  if (isStreamClosed()) {
    if (direction.equals(Constants.Direction.WRITING_OUT)) {
      if (muxLink.significantlyPastCloseTime(myID)) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
 else {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + myID);
        }
        return;
      }
    }
 else     if (direction.equals(Constants.Direction.READ_IN)) {
      if (frame.getFrameType() == FrameTypes.PRIORITY) {
        return;
      }
      if (muxLink.significantlyPastCloseTime(myID)) {
        throw new ProtocolException(""String_Node_Str"");
      }
      if (frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.HEADERS) {
        throw new ProtocolException(""String_Node_Str"");
      }
 else       if (frame.getFrameType() == FrameTypes.RST_STREAM) {
        return;
      }
    }
  }
  ADDITIONAL_FRAME addFrame=ADDITIONAL_FRAME.FIRST_TIME;
  Http2Exception addFrameException=null;
  currentFrame=frame;
  while (addFrame != ADDITIONAL_FRAME.NO) {
    if (doDebugWhile) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString());
      }
    }
 else {
      doDebugWhile=true;
    }
    if (addFrame == ADDITIONAL_FRAME.RESET) {
      currentFrame=new FrameRstStream(myID,addFrameException.getErrorCode(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    if (addFrame == ADDITIONAL_FRAME.GOAWAY) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + muxLink.getHighestClientStreamId());
      }
      currentFrame=new FrameGoAway(0,addFrameException.getMessage().getBytes(),addFrameException.getErrorCode(),muxLink.getHighestClientStreamId(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    frameType=currentFrame.getFrameType();
    if (frameType == FrameTypes.RST_STREAM && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.RESET;
    }
 else     if (frameType == FrameTypes.GOAWAY && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.GOAWAY;
    }
    try {
      currentFrame.validate(muxLink.getConnectionSettings());
    }
 catch (    Http2Exception e) {
      if (addFrame == ADDITIONAL_FRAME.FIRST_TIME || addFrame == ADDITIONAL_FRAME.RESET || addFrame == ADDITIONAL_FRAME.GOAWAY) {
        if (e.isConnectionError()) {
          addFrame=ADDITIONAL_FRAME.GOAWAY;
        }
 else {
          addFrame=ADDITIONAL_FRAME.RESET;
        }
        addFrameException=e;
      }
 else {
        if (direction == Constants.Direction.READ_IN) {
          addFrame=ADDITIONAL_FRAME.RESET;
          addFrameException=e;
        }
 else {
        }
        addFrame=ADDITIONAL_FRAME.NO;
      }
      continue;
    }
    if (direction == Constants.Direction.READ_IN) {
      if (muxLink.checkIfGoAwaySendingOrClosing()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str"");
        }
        return;
      }
      if (isContinuationFrameExpected() && (frameType != FrameTypes.CONTINUATION || !this.continuationExpected)) {
        addFrame=ADDITIONAL_FRAME.GOAWAY;
        addFrameException=new ProtocolException(""String_Node_Str"");
        continue;
      }
      if (frameType == FrameTypes.SETTINGS || frameType == FrameTypes.GOAWAY || frameType == FrameTypes.PING) {
switch (frameType) {
case SETTINGS:
          processSETTINGSFrame();
        break;
case GOAWAY:
      processGOAWAYFrame();
    updateStreamState(StreamState.CLOSED);
  break;
case PING:
processPINGFrame();
break;
default :
break;
}
return;
}
try {
verifyReadFrameSequence();
}
 catch (Http2Exception e) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.RESET;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
addFrameException=e;
continue;
}
if (frameType == FrameTypes.PRIORITY) {
processPriorityFrame();
return;
}
if (frameType == FrameTypes.RST_STREAM) {
processRstFrame();
return;
}
try {
if (frameType == FrameTypes.WINDOW_UPDATE) {
processWindowUpdateFrame();
if (dataWaitingForWindowUpdate != null) {
if (!this.isWindowLimitExceeded(dataWaitingForWindowUpdate.peek())) {
waitingForWindowUpdate=false;
}
}
 else {
return;
}
}
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
updateStreamReadWindow();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
 else {
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"");
}
try {
verifyWriteFrameSequence();
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if ((addFrame == ADDITIONAL_FRAME.FIRST_TIME) || (addFrame == ADDITIONAL_FRAME.RESET)) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
if (!waitingForWindowUpdate && dataWaitingForWindowUpdate != null && !this.isWindowLimitExceeded(this.dataWaitingForWindowUpdate.peek())) {
addFrame=ADDITIONAL_FRAME.DATA;
currentFrame=this.dataWaitingForWindowUpdate.remove();
direction=Constants.Direction.WRITING_OUT;
if (this.dataWaitingForWindowUpdate.isEmpty()) {
this.dataWaitingForWindowUpdate=null;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
}
}"
34776,"/** 
 * Helper method to process a SETTINGS frame received from the client. Since the protocol utilizes SETTINGS frames for initialization, some special logic is needed.
 */
private void processSETTINGSFrame(){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  if (!connection_preface_settings_rcvd && !((FrameSettings)currentFrame).flagAckSet()) {
    connection_preface_settings_rcvd=true;
  }
  if (((FrameSettings)currentFrame).flagAckSet()) {
    if (!connection_preface_settings_ack_rcvd) {
      connection_preface_settings_ack_rcvd=true;
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    if (((FrameSettings)currentFrame).getInitialWindowSize() != -1) {
      int newSize=((FrameSettings)currentFrame).getInitialWindowSize();
      muxLink.changeInitialWindowSizeAllStreams(newSize);
    }
    muxLink.getConnectionSettings().updateSettings((FrameSettings)currentFrame);
    currentFrame=new FrameSettings();
    currentFrame.setAckFlag();
    try {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ currentFrame.getFrameType().toString()+ ""String_Node_Str""+ Direction.WRITING_OUT+ ""String_Node_Str""+ muxLink.hashCode());
      }
      writeFrameSync();
    }
 catch (    FlowControlException e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
    }
  }
  if (connection_preface_settings_rcvd && connection_preface_settings_ack_rcvd) {
    if (muxLink.checkInitAndOpen()) {
      muxLink.initLock.countDown();
    }
  }
}","/** 
 * Helper method to process a SETTINGS frame received from the client. Since the protocol utilizes SETTINGS frames for initialization, some special logic is needed.
 */
private void processSETTINGSFrame(){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + currentFrame.toString());
  }
  if (!connection_preface_settings_rcvd && !((FrameSettings)currentFrame).flagAckSet()) {
    connection_preface_settings_rcvd=true;
  }
  if (((FrameSettings)currentFrame).flagAckSet()) {
    if (!connection_preface_settings_ack_rcvd) {
      connection_preface_settings_ack_rcvd=true;
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    if (((FrameSettings)currentFrame).getInitialWindowSize() != -1) {
      int newSize=((FrameSettings)currentFrame).getInitialWindowSize();
      muxLink.changeInitialWindowSizeAllStreams(newSize);
    }
    muxLink.getConnectionSettings().updateSettings((FrameSettings)currentFrame);
    currentFrame=new FrameSettings();
    currentFrame.setAckFlag();
    try {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ currentFrame.getFrameType().toString()+ ""String_Node_Str""+ Direction.WRITING_OUT+ ""String_Node_Str""+ muxLink.hashCode());
      }
      writeFrameSync();
    }
 catch (    FlowControlException e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
    }
  }
  if (connection_preface_settings_rcvd && connection_preface_settings_ack_rcvd) {
    if (muxLink.checkInitAndOpen()) {
      muxLink.initLock.countDown();
    }
  }
}"
34777,"/** 
 * Before marshalling headers into a buffer, this will run the data through a compliancy check and take appropriate action (throw errors, add missing headers, etc).
 * @throws MessageSentException
 */
@Override protected void headerComplianceCheck() throws MessageSentException {
  final HttpServiceContextImpl sc=getServiceContext();
  if (sc.headersSent()) {
    throw new MessageSentException(""String_Node_Str"");
  }
  try {
    if (getVersionValue().equals(VersionValues.V11)) {
      if (NOTSET == getContentLength() && !isChunkedEncodingSet()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        if (sc.isOutgoingBodyValid()) {
          addTransferEncoding(TransferEncodingValues.CHUNKED);
          commitTransferEncoding();
        }
      }
      if (!sc.isPersistent() && !isCloseSet()) {
        setupConnectionClose();
      }
    }
 else     if (getVersionValue().equals(VersionValues.V10)) {
      if (isChunkedEncodingSet()) {
        removeSpecialHeader(HttpHeaderKeys.HDR_TRANSFER_ENCODING);
        removeLocalTransferEncoding();
        sc.setPersistent(false);
      }
      if (!sc.isPersistent() || NOTSET == getContentLength()) {
        if (!isCloseSet()) {
          setupConnectionClose();
        }
        sc.setPersistent(false);
      }
 else       if (sc.isPersistent()) {
        if (!isKeepAliveSet() && !isCloseSet()) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
          addConnection(ConnectionValues.KEEPALIVE);
          commitConnection();
        }
      }
    }
 else     if (getVersionValue().equals(VersionValues.V20)) {
      if (getContentLength() != HeaderStorage.NOTSET) {
        setContentLength(HeaderStorage.NOTSET);
      }
      if (isChunkedEncodingSet()) {
        removeTransferEncoding(TransferEncodingValues.CHUNKED);
      }
    }
    removeSpecialHeader(HttpHeaderKeys.HDR_$WSZIP);
    removeSpecialHeader(HttpHeaderKeys.HDR_$WSORIGCL);
  }
 catch (  IllegalArgumentException iae) {
    FFDCFilter.processException(iae,getClass().getName() + ""String_Node_Str"",""String_Node_Str"",this);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 finally {
    if (sc.getHttpConfig().isServantRegion()) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + sc.isPersistent());
      }
      sc.getVC().getStateMap().put(HttpConstants.SESSION_PERSISTENCE,(sc.isPersistent()) ? ""String_Node_Str"" : ""String_Node_Str"");
      sc.setPersistent(false);
    }
  }
}","/** 
 * Before marshalling headers into a buffer, this will run the data through a compliancy check and take appropriate action (throw errors, add missing headers, etc).
 * @throws MessageSentException
 */
@Override protected void headerComplianceCheck() throws MessageSentException {
  final HttpServiceContextImpl sc=getServiceContext();
  if (sc.headersSent()) {
    throw new MessageSentException(""String_Node_Str"");
  }
  try {
    if (getVersionValue().equals(VersionValues.V11)) {
      if (NOTSET == getContentLength() && !isChunkedEncodingSet()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        if (sc.isOutgoingBodyValid()) {
          addTransferEncoding(TransferEncodingValues.CHUNKED);
          commitTransferEncoding();
        }
      }
      if (!sc.isPersistent() && !isCloseSet()) {
        setupConnectionClose();
      }
    }
 else     if (getVersionValue().equals(VersionValues.V10)) {
      if (isChunkedEncodingSet()) {
        removeSpecialHeader(HttpHeaderKeys.HDR_TRANSFER_ENCODING);
        removeLocalTransferEncoding();
        sc.setPersistent(false);
      }
      if (!sc.isPersistent() || NOTSET == getContentLength()) {
        if (!isCloseSet()) {
          setupConnectionClose();
        }
        sc.setPersistent(false);
      }
 else       if (sc.isPersistent()) {
        if (!isKeepAliveSet() && !isCloseSet()) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
          addConnection(ConnectionValues.KEEPALIVE);
          commitConnection();
        }
      }
    }
 else     if (getVersionValue().equals(VersionValues.V20)) {
      if (isChunkedEncodingSet()) {
        removeTransferEncoding(TransferEncodingValues.CHUNKED);
      }
    }
    removeSpecialHeader(HttpHeaderKeys.HDR_$WSZIP);
    removeSpecialHeader(HttpHeaderKeys.HDR_$WSORIGCL);
  }
 catch (  IllegalArgumentException iae) {
    FFDCFilter.processException(iae,getClass().getName() + ""String_Node_Str"",""String_Node_Str"",this);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 finally {
    if (sc.getHttpConfig().isServantRegion()) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + sc.isPersistent());
      }
      sc.getVC().getStateMap().put(HttpConstants.SESSION_PERSISTENCE,(sc.isPersistent()) ? ""String_Node_Str"" : ""String_Node_Str"");
      sc.setPersistent(false);
    }
  }
}"
34778,"@Override public PushBuilder path(String path){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + path);
  }
  _path=path;
  if (path != null && path.contains(""String_Node_Str"")) {
    String[] pathParts=path.split(""String_Node_Str"");
    _pathURI=pathParts[0];
    _pathQueryString=""String_Node_Str"" + pathParts[1];
  }
 else {
    _pathURI=path;
    _pathQueryString=null;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + _pathURI + ""String_Node_Str""+ _pathQueryString);
  }
  return this;
}","@Override public PushBuilder path(String path){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + path);
  }
  if (path != null && !path.startsWith(""String_Node_Str"")) {
    String baseUri=_inboundRequest.getContextPath();
    if (baseUri != null) {
      path=baseUri + ""String_Node_Str"" + path;
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
        Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + path);
      }
    }
  }
  _path=path;
  if (path != null && path.contains(""String_Node_Str"")) {
    String[] pathParts=path.split(""String_Node_Str"");
    _pathURI=pathParts[0];
    _pathQueryString=""String_Node_Str"" + pathParts[1];
  }
 else {
    _pathURI=path;
    _pathQueryString=null;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + _pathURI + ""String_Node_Str""+ _pathQueryString);
  }
  return this;
}"
34779,"@BeforeClass public static void setup() throws Exception {
  bootstrap=Bootstrap.getInstance();
  machine=LibertyServerUtils.createMachine(bootstrap);
  previousWorkDir=machine.getWorkDir();
  machine.setWorkDir(null);
  installPath=LibertyFileManager.getInstallPath(bootstrap);
  defaultServerPath=installPath + ""String_Node_Str"" + serverName;
}","@BeforeClass public static void setup() throws Exception {
  bootstrap=Bootstrap.getInstance();
  machine=LibertyServerUtils.createMachine(bootstrap);
  previousWorkDir=machine.getWorkDir();
  machine.setWorkDir(null);
  installPath=LibertyFileManager.getInstallPath(bootstrap);
  defaultServerPath=installPath + ""String_Node_Str"" + serverName;
  bootstrap.setValue(""String_Node_Str"",installPath);
}"
34780,"@BeforeClass public static void setup() throws Exception {
  bootstrap=Bootstrap.getInstance();
  machine=LibertyServerUtils.createMachine(bootstrap);
  previousWorkDir=machine.getWorkDir();
  machine.setWorkDir(null);
  installPath=LibertyFileManager.getInstallPath(bootstrap);
  defaultServerPath=installPath + ""String_Node_Str"" + defaultServerName;
}","@BeforeClass public static void setup() throws Exception {
  bootstrap=Bootstrap.getInstance();
  machine=LibertyServerUtils.createMachine(bootstrap);
  previousWorkDir=machine.getWorkDir();
  machine.setWorkDir(null);
  installPath=LibertyFileManager.getInstallPath(bootstrap);
  defaultServerPath=installPath + ""String_Node_Str"" + defaultServerName;
  bootstrap.setValue(""String_Node_Str"",installPath);
}"
34781,"/** 
 * Test method for  {@link com.ibm.ws.security.authorization.builtin.internal.BuiltinAuthorizationService#isAuthorized(java.lang.Object,java.util.List,javax.security.auth.Subject)} .
 * @throws CredentialDestroyedException
 * @throws CredentialExpiredException
 */
@Test public void testIsAuthorized_falseWSCredThrowsCredentialExpiredException() throws Exception {
  WSPrincipal princ=new WSPrincipal(subject1,accessId1,authMethod);
  Set<Principal> principals=new HashSet<Principal>();
  principals.add(princ);
  HashSet<Object> pubCredentials=new HashSet<Object>();
  pubCredentials.add(wsCred);
  HashSet<Object> privCredentials=new HashSet<Object>();
  final Subject subject=new Subject(false,principals,pubCredentials,privCredentials);
  requiredRoles.add(role1);
  context.checking(new Expectations(){
{
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,null);
      will(returnValue(Boolean.FALSE));
      one(wsCred).isUnauthenticated();
      will(returnValue(Boolean.FALSE));
      one(wsCred).isBasicAuth();
      will(returnValue(Boolean.FALSE));
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getAccessId();
      will(throwException(new CredentialExpiredException(""String_Node_Str"")));
      one(wsCred).getGroupIds();
      will(throwException(new CredentialExpiredException(""String_Node_Str"")));
      one(authzTableService).getRolesForAccessId(resourceName,null);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
    }
  }
);
  assertFalse(""String_Node_Str"",builtinAuthz.isAuthorized(resourceName,requiredRoles,subject));
}","/** 
 * Test method for  {@link com.ibm.ws.security.authorization.builtin.internal.BuiltinAuthorizationService#isAuthorized(java.lang.Object,java.util.List,javax.security.auth.Subject)} .
 * @throws CredentialDestroyedException
 * @throws CredentialExpiredException
 */
@Test public void testIsAuthorized_falseWSCredThrowsCredentialExpiredException() throws Exception {
  WSPrincipal princ=new WSPrincipal(subject1,accessId1,authMethod);
  Set<Principal> principals=new HashSet<Principal>();
  principals.add(princ);
  HashSet<Object> pubCredentials=new HashSet<Object>();
  pubCredentials.add(wsCred);
  HashSet<Object> privCredentials=new HashSet<Object>();
  final Subject subject=new Subject(false,principals,pubCredentials,privCredentials);
  requiredRoles.add(role1);
  context.checking(new Expectations(){
{
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,null);
      will(returnValue(Boolean.FALSE));
      one(wsCred).isUnauthenticated();
      will(returnValue(Boolean.FALSE));
      one(wsCred).isBasicAuth();
      will(returnValue(Boolean.FALSE));
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getAccessId();
      will(throwException(new CredentialExpiredException(""String_Node_Str"")));
      one(wsCred).getGroupIds();
      will(throwException(new CredentialExpiredException(""String_Node_Str"")));
      one(wsCred).getRealmName();
      will(throwException(new CredentialExpiredException(""String_Node_Str"")));
      one(authzTableService).getRolesForAccessId(resourceName,null,null);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
    }
  }
);
  assertFalse(""String_Node_Str"",builtinAuthz.isAuthorized(resourceName,requiredRoles,subject));
}"
34782,"/** 
 * Test method for  {@link com.ibm.ws.security.authorization.builtin.internal.BuiltinAuthorizationService#isAuthorized(java.lang.Object,java.util.List,javax.security.auth.Subject)} .
 * @throws CredentialDestroyedException
 * @throws CredentialExpiredException
 */
@Test public void testIsAuthorized_falseWSCredThrowsCredentialDestroyedException() throws Exception {
  WSPrincipal princ=new WSPrincipal(subject1,accessId1,authMethod);
  Set<Principal> principals=new HashSet<Principal>();
  principals.add(princ);
  HashSet<Object> pubCredentials=new HashSet<Object>();
  pubCredentials.add(wsCred);
  HashSet<Object> privCredentials=new HashSet<Object>();
  final Subject subject=new Subject(false,principals,pubCredentials,privCredentials);
  requiredRoles.add(role1);
  context.checking(new Expectations(){
{
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,null);
      will(returnValue(Boolean.FALSE));
      one(wsCred).isUnauthenticated();
      will(returnValue(Boolean.FALSE));
      one(wsCred).isBasicAuth();
      will(returnValue(Boolean.FALSE));
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getAccessId();
      will(throwException(new CredentialDestroyedException(""String_Node_Str"")));
      one(wsCred).getGroupIds();
      will(throwException(new CredentialDestroyedException(""String_Node_Str"")));
      one(authzTableService).getRolesForAccessId(resourceName,null);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
    }
  }
);
  assertFalse(""String_Node_Str"",builtinAuthz.isAuthorized(resourceName,requiredRoles,subject));
}","/** 
 * Test method for  {@link com.ibm.ws.security.authorization.builtin.internal.BuiltinAuthorizationService#isAuthorized(java.lang.Object,java.util.List,javax.security.auth.Subject)} .
 * @throws CredentialDestroyedException
 * @throws CredentialExpiredException
 */
@Test public void testIsAuthorized_falseWSCredThrowsCredentialDestroyedException() throws Exception {
  WSPrincipal princ=new WSPrincipal(subject1,accessId1,authMethod);
  Set<Principal> principals=new HashSet<Principal>();
  principals.add(princ);
  HashSet<Object> pubCredentials=new HashSet<Object>();
  pubCredentials.add(wsCred);
  HashSet<Object> privCredentials=new HashSet<Object>();
  final Subject subject=new Subject(false,principals,pubCredentials,privCredentials);
  requiredRoles.add(role1);
  context.checking(new Expectations(){
{
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,null);
      will(returnValue(Boolean.FALSE));
      one(wsCred).isUnauthenticated();
      will(returnValue(Boolean.FALSE));
      one(wsCred).isBasicAuth();
      will(returnValue(Boolean.FALSE));
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getAccessId();
      will(throwException(new CredentialDestroyedException(""String_Node_Str"")));
      one(wsCred).getGroupIds();
      will(throwException(new CredentialDestroyedException(""String_Node_Str"")));
      one(wsCred).getRealmName();
      will(throwException(new CredentialExpiredException(""String_Node_Str"")));
      one(authzTableService).getRolesForAccessId(resourceName,null,null);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
    }
  }
);
  assertFalse(""String_Node_Str"",builtinAuthz.isAuthorized(resourceName,requiredRoles,subject));
}"
34783,"/** 
 * Test method for  {@link com.ibm.ws.security.authorization.builtin.internal.BuiltinAuthorizationService#isAuthorized(java.lang.Object,java.util.List,javax.security.auth.Subject)} .
 * @throws CredentialDestroyedException
 * @throws CredentialExpiredException
 */
@Test public void testIsAuthorized_false() throws Exception {
  WSPrincipal princ=new WSPrincipal(subject1,accessId1,authMethod);
  Set<Principal> principals=new HashSet<Principal>();
  principals.add(princ);
  HashSet<Object> pubCredentials=new HashSet<Object>();
  pubCredentials.add(wsCred);
  final List<String> groupIds=new ArrayList<String>();
  groupIds.add(""String_Node_Str"");
  HashSet<Object> privCredentials=new HashSet<Object>();
  final Subject subject=new Subject(false,principals,pubCredentials,privCredentials);
  requiredRoles.add(role1);
  assignedRoles=new RoleSet(requiredRoles);
  context.checking(new Expectations(){
{
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,null);
      will(returnValue(Boolean.FALSE));
      one(wsCred).isUnauthenticated();
      will(returnValue(Boolean.FALSE));
      one(wsCred).isBasicAuth();
      will(returnValue(Boolean.FALSE));
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getAccessId();
      will(returnValue(accessId1));
      one(authzTableService).getRolesForAccessId(resourceName,accessId1);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getGroupIds();
      will(returnValue(groupIds));
      one(authzTableService).getRolesForAccessId(resourceName,groupAccessId1);
      will(returnValue(assignedRoles));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,assignedRoles,subject);
      will(returnValue(Boolean.FALSE));
    }
  }
);
  assertFalse(""String_Node_Str"",builtinAuthz.isAuthorized(resourceName,requiredRoles,subject));
}","/** 
 * Test method for  {@link com.ibm.ws.security.authorization.builtin.internal.BuiltinAuthorizationService#isAuthorized(java.lang.Object,java.util.List,javax.security.auth.Subject)} .
 * @throws CredentialDestroyedException
 * @throws CredentialExpiredException
 */
@Test public void testIsAuthorized_false() throws Exception {
  WSPrincipal princ=new WSPrincipal(subject1,accessId1,authMethod);
  Set<Principal> principals=new HashSet<Principal>();
  principals.add(princ);
  HashSet<Object> pubCredentials=new HashSet<Object>();
  pubCredentials.add(wsCred);
  final List<String> groupIds=new ArrayList<String>();
  groupIds.add(""String_Node_Str"");
  HashSet<Object> privCredentials=new HashSet<Object>();
  final Subject subject=new Subject(false,principals,pubCredentials,privCredentials);
  requiredRoles.add(role1);
  assignedRoles=new RoleSet(requiredRoles);
  context.checking(new Expectations(){
{
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,null);
      will(returnValue(Boolean.FALSE));
      one(wsCred).isUnauthenticated();
      will(returnValue(Boolean.FALSE));
      one(wsCred).isBasicAuth();
      will(returnValue(Boolean.FALSE));
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getAccessId();
      will(returnValue(accessId1));
      one(wsCred).getRealmName();
      will(returnValue(realmName1));
      one(authzTableService).getRolesForAccessId(resourceName,accessId1,realmName1);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,RoleSet.EMPTY_ROLESET,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getGroupIds();
      will(returnValue(groupIds));
      one(authzTableService).getRolesForAccessId(resourceName,groupAccessId1,realmName1);
      will(returnValue(assignedRoles));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,assignedRoles,subject);
      will(returnValue(Boolean.FALSE));
    }
  }
);
  assertFalse(""String_Node_Str"",builtinAuthz.isAuthorized(resourceName,requiredRoles,subject));
}"
34784,"/** 
 * Test method for  {@link com.ibm.ws.security.authorization.builtin.internal.BuiltinAuthorizationService#isAuthorized(java.lang.Object,java.util.List,javax.security.auth.Subject)} .
 * @throws CredentialDestroyedException
 * @throws CredentialExpiredException
 */
@Test public void testIsAuthorized_multipleTablesAnswer() throws Exception {
  WSPrincipal princ=new WSPrincipal(subject1,accessId1,authMethod);
  Set<Principal> principals=new HashSet<Principal>();
  principals.add(princ);
  HashSet<Object> pubCredentials=new HashSet<Object>();
  pubCredentials.add(wsCred);
  HashSet<Object> privCredentials=new HashSet<Object>();
  final Subject subject=new Subject(false,principals,pubCredentials,privCredentials);
  requiredRoles.add(role1);
  assignedRoles=new RoleSet(requiredRoles);
  builtinAuthz.setAuthorizationTableService(authzTableService2Ref);
  builtinAuthz.setAuthorizationTableService(authzTableService3Ref);
  context.checking(new Expectations(){
{
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(authzTableService2).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(authzTableService3).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(null));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,null,null);
      will(returnValue(Boolean.FALSE));
      one(wsCred).isUnauthenticated();
      will(returnValue(Boolean.FALSE));
      one(wsCred).isBasicAuth();
      will(returnValue(Boolean.FALSE));
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(authzTableService2).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(authzTableService3).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(null));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,null,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getAccessId();
      will(returnValue(accessId1));
      one(authzTableService).getRolesForAccessId(resourceName,accessId1);
      will(returnValue(assignedRoles));
      one(authzTableService2).getRolesForAccessId(resourceName,accessId1);
      will(returnValue(assignedRoles));
      one(authzTableService3).getRolesForAccessId(resourceName,accessId1);
      will(returnValue(null));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,null,subject);
      will(returnValue(Boolean.TRUE));
    }
  }
);
  builtinAuthz.isAuthorized(resourceName,requiredRoles,subject);
  assertTrue(""String_Node_Str"",outputMgr.checkForMessages(""String_Node_Str"" + resourceName + ""String_Node_Str""));
}","/** 
 * Test method for  {@link com.ibm.ws.security.authorization.builtin.internal.BuiltinAuthorizationService#isAuthorized(java.lang.Object,java.util.List,javax.security.auth.Subject)} .
 * @throws CredentialDestroyedException
 * @throws CredentialExpiredException
 */
@Test public void testIsAuthorized_multipleTablesAnswer() throws Exception {
  WSPrincipal princ=new WSPrincipal(subject1,accessId1,authMethod);
  Set<Principal> principals=new HashSet<Principal>();
  principals.add(princ);
  HashSet<Object> pubCredentials=new HashSet<Object>();
  pubCredentials.add(wsCred);
  HashSet<Object> privCredentials=new HashSet<Object>();
  final Subject subject=new Subject(false,principals,pubCredentials,privCredentials);
  requiredRoles.add(role1);
  assignedRoles=new RoleSet(requiredRoles);
  builtinAuthz.setAuthorizationTableService(authzTableService2Ref);
  builtinAuthz.setAuthorizationTableService(authzTableService3Ref);
  context.checking(new Expectations(){
{
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(authzTableService2).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(authzTableService3).getRolesForSpecialSubject(resourceName,AuthorizationTableService.EVERYONE);
      will(returnValue(null));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,null,null);
      will(returnValue(Boolean.FALSE));
      one(wsCred).isUnauthenticated();
      will(returnValue(Boolean.FALSE));
      one(wsCred).isBasicAuth();
      will(returnValue(Boolean.FALSE));
      one(authzTableService).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(authzTableService2).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(RoleSet.EMPTY_ROLESET));
      one(authzTableService3).getRolesForSpecialSubject(resourceName,AuthorizationTableService.ALL_AUTHENTICATED_USERS);
      will(returnValue(null));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,null,subject);
      will(returnValue(Boolean.FALSE));
      one(wsCred).getAccessId();
      will(returnValue(accessId1));
      one(wsCred).getRealmName();
      will(returnValue(realmName1));
      one(authzTableService).getRolesForAccessId(resourceName,accessId1,realmName1);
      will(returnValue(assignedRoles));
      one(authzTableService2).getRolesForAccessId(resourceName,accessId1,realmName1);
      will(returnValue(assignedRoles));
      one(authzTableService3).getRolesForAccessId(resourceName,accessId1,realmName1);
      will(returnValue(null));
      one(accessDecisionService).isGranted(resourceName,requiredRoles,null,subject);
      will(returnValue(Boolean.TRUE));
    }
  }
);
  builtinAuthz.isAuthorized(resourceName,requiredRoles,subject);
  assertTrue(""String_Node_Str"",outputMgr.checkForMessages(""String_Node_Str"" + resourceName + ""String_Node_Str""));
}"
34785,"public void triggerStreamClose(H2StreamProcessor streamProcessor){
  if (closeTable.size() >= 512) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    purgeCloseTable();
  }
  streamProcessor.setCloseTime(System.nanoTime());
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamProcessor.getId());
  }
  closeTable.put(streamProcessor.getId(),streamProcessor);
  streamTable.remove(streamProcessor.getId());
}","/** 
 * Set a stream as closed on this link: remove it from the open streams table and move it to the closed streams table If the stream is even (locally opened), decrement the number of open push streams
 * @param streamProcessor
 */
public void triggerStreamClose(H2StreamProcessor streamProcessor){
  if (closeTable.size() >= 512) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    purgeCloseTable();
  }
  streamProcessor.setCloseTime(System.nanoTime());
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamProcessor.getId());
  }
  closeTable.put(streamProcessor.getId(),streamProcessor);
  streamTable.remove(streamProcessor.getId());
  if (streamProcessor.getId() % 2 == 0) {
synchronized (pushSync) {
      this.openPushStreams--;
    }
  }
}"
34786,"public H2StreamProcessor createNewInboundLink(Integer streamID){
  H2VirtualConnectionImpl h2VC=new H2VirtualConnectionImpl(initialVC);
  h2VC.getStateMap().remove(HttpDispatcherLink.LINK_ID);
  H2HttpInboundLinkWrap link=new H2HttpInboundLinkWrap(httpInboundChannel,h2VC,streamID,this);
  H2StreamProcessor stream=new H2StreamProcessor(streamID,link,this);
  writeQ.addNewNodeToQ(streamID,Node.ROOT_STREAM_ID,Node.DEFAULT_NODE_PRIORITY,false);
  streamTable.put(streamID,stream);
  return stream;
}","/** 
 * Create a new stream and add it to this link. If the stream ID is even, check to make sure this link has not exceeded the maximum number of concurrent streams (as set by the client); if too many streams are open, don't open a new one.
 * @param streamID
 * @return null if creating this stream would exceed the maximum number locally-opened streams
 */
public H2StreamProcessor createNewInboundLink(Integer streamID){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamID);
  }
  if ((streamID % 2 == 0) && (streamID != 0)) {
synchronized (pushSync) {
      if (openPushStreams > this.getConnectionSettings().getMaxConcurrentStreams()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + openPushStreams);
        }
        return null;
      }
      openPushStreams++;
    }
  }
  H2VirtualConnectionImpl h2VC=new H2VirtualConnectionImpl(initialVC);
  h2VC.getStateMap().remove(HttpDispatcherLink.LINK_ID);
  H2HttpInboundLinkWrap link=new H2HttpInboundLinkWrap(httpInboundChannel,h2VC,streamID,this);
  H2StreamProcessor stream=new H2StreamProcessor(streamID,link,this);
  writeQ.addNewNodeToQ(streamID,Node.ROOT_STREAM_ID,Node.DEFAULT_NODE_PRIORITY,false);
  streamTable.put(streamID,stream);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamID + ""String_Node_Str""+ stream);
  }
  return stream;
}"
34787,"/** 
 * Puts stream's header block into the read buffer that will be passed to the webcontainer
 * @throws CompressionException
 * @throws ProtocolException
 */
private void processCompleteHeaders() throws CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (this.headerBlock != null) {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(getByteCount(headerBlock));
    int firstBlockLength=headerBlock.get(0).length;
    for (    byte[] byteArray : headerBlock) {
      buf.put(byteArray);
    }
    buf.flip();
    headerBlock=null;
    boolean isFirstLineComplete=false;
    HashMap<String,String> pseudoHeaders=new HashMap<String,String>();
    ArrayList<H2HeaderField> headers=new ArrayList<H2HeaderField>();
    H2HeaderField current=null;
    boolean isFirstHeaderBlock;
    boolean isFirstHeader=true;
    boolean processTrailerHeaders=headersCompleted;
    while (buf.hasRemaining()) {
      isFirstHeaderBlock=buf.position() < firstBlockLength;
      current=(H2Headers.decodeHeader(buf,this.muxLink.getReadTable(),isFirstHeader && isFirstHeaderBlock,processTrailerHeaders,this.muxLink.getConnectionSettings()));
      if (current == null) {
        continue;
      }
      isFirstHeader=false;
      if (!isFirstLineComplete) {
        if (current.getName().startsWith(""String_Node_Str"")) {
          if (pseudoHeaders.get(current.getName()) != null) {
            this.muxLink.getReadTable().setDynamicTableValidity(false);
            throw new CompressionException(""String_Node_Str"" + current.toString());
          }
          pseudoHeaders.put(current.getName(),current.getValue());
        }
 else {
          isFirstLineComplete=true;
          if (H2Headers.getContentLengthValue(current) > -1) {
            expectedContentLength=H2Headers.getContentLengthValue(current);
          }
          headers.add(current);
        }
      }
 else {
        if (current.getName().startsWith(""String_Node_Str"")) {
          this.muxLink.getReadTable().setDynamicTableValidity(false);
          throw new CompressionException(""String_Node_Str"" + ""String_Node_Str"");
        }
        if (H2Headers.getContentLengthValue(current) > -1) {
          expectedContentLength=H2Headers.getContentLengthValue(current);
        }
        headers.add(current);
      }
    }
    if (!processTrailerHeaders && h2HttpInboundLinkWrap.getHeadersLength() == 0) {
      this.h2HttpInboundLinkWrap.setReadHeaders(headers);
      this.h2HttpInboundLinkWrap.setReadPseudoHeaders(pseudoHeaders);
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID);
    }
  }
}","/** 
 * Puts stream's header block into the read buffer that will be passed to the webcontainer
 * @throws CompressionException
 * @throws ProtocolException
 */
private void processCompleteHeaders(boolean isPush) throws CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (this.headerBlock != null) {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(getByteCount(headerBlock));
    int firstBlockLength=headerBlock.get(0).length;
    for (    byte[] byteArray : headerBlock) {
      buf.put(byteArray);
    }
    buf.flip();
    headerBlock=null;
    boolean isFirstLineComplete=false;
    HashMap<String,String> pseudoHeaders=new HashMap<String,String>();
    ArrayList<H2HeaderField> headers=new ArrayList<H2HeaderField>();
    H2HeaderField current=null;
    boolean isFirstHeaderBlock;
    boolean isFirstHeader=true;
    boolean processTrailerHeaders=headersCompleted;
    while (buf.hasRemaining()) {
      isFirstHeaderBlock=buf.position() < firstBlockLength;
      current=(H2Headers.decodeHeader(buf,this.muxLink.getReadTable(),isFirstHeader && isFirstHeaderBlock,processTrailerHeaders && !isPush,this.muxLink.getConnectionSettings()));
      if (current == null) {
        continue;
      }
      isFirstHeader=false;
      if (!isFirstLineComplete) {
        if (current.getName().startsWith(""String_Node_Str"")) {
          if (pseudoHeaders.get(current.getName()) != null) {
            this.muxLink.getReadTable().setDynamicTableValidity(false);
            throw new CompressionException(""String_Node_Str"" + current.toString());
          }
          pseudoHeaders.put(current.getName(),current.getValue());
        }
 else {
          isFirstLineComplete=true;
          if (H2Headers.getContentLengthValue(current) > -1) {
            expectedContentLength=H2Headers.getContentLengthValue(current);
          }
          headers.add(current);
        }
      }
 else {
        if (current.getName().startsWith(""String_Node_Str"")) {
          this.muxLink.getReadTable().setDynamicTableValidity(false);
          throw new CompressionException(""String_Node_Str"" + ""String_Node_Str"");
        }
        if (H2Headers.getContentLengthValue(current) > -1) {
          expectedContentLength=H2Headers.getContentLengthValue(current);
        }
        headers.add(current);
      }
    }
    if ((isPush || !processTrailerHeaders) && h2HttpInboundLinkWrap.getHeadersLength() == 0) {
      this.h2HttpInboundLinkWrap.setReadHeaders(headers);
      this.h2HttpInboundLinkWrap.setReadPseudoHeaders(pseudoHeaders);
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID);
    }
  }
}"
34788,"public void sendRequestToWc(FrameHeaders frame){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  if (null == frame) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 else {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(frame.buildFrameForWrite().length);
    byte[] ba=frame.buildFrameForWrite();
    buf.put(ba);
    buf.flip();
    TCPReadRequestContext readi=h2HttpInboundLinkWrap.getConnectionContext().getReadInterface();
    readi.setBuffer(buf);
    currentFrame=frame;
    this.getHeadersFromFrame();
    setHeadersComplete();
    try {
      processCompleteHeaders();
    }
 catch (    CompressionException e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID);
      }
      buf.release();
      this.currentFrame=null;
      h2HttpInboundLinkWrap.muxLink.streamTable.remove(this);
      return;
    }
    setReadyForRead();
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}","public void sendRequestToWc(FrameHeaders frame){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  if (null == frame) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 else {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(frame.buildFrameForWrite().length);
    byte[] ba=frame.buildFrameForWrite();
    buf.put(ba);
    buf.flip();
    TCPReadRequestContext readi=h2HttpInboundLinkWrap.getConnectionContext().getReadInterface();
    readi.setBuffer(buf);
    currentFrame=frame;
    this.getHeadersFromFrame();
    setHeadersComplete();
    try {
      processCompleteHeaders(true);
    }
 catch (    CompressionException e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ e);
      }
      buf.release();
      this.currentFrame=null;
      h2HttpInboundLinkWrap.muxLink.streamTable.remove(this);
      return;
    }
    setReadyForRead();
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}"
34789,"/** 
 * @param direction
 * @throws CompressionException
 */
private void processHalfClosedRemote(Constants.Direction direction) throws FlowControlException, CompressionException {
  if (direction == Direction.WRITING_OUT) {
    boolean writeCompleted=writeFrameSync();
    if ((currentFrame.getFrameType() == FrameTypes.RST_STREAM || currentFrame.flagEndStreamSet()) && writeCompleted) {
      endStream=true;
      muxLink.triggerStreamClose(this);
      updateStreamState(StreamState.CLOSED);
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
      }
 else {
        setContinuationFrameExpected(true);
      }
    }
  }
 else   if (currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    endStream=true;
    updateStreamState(StreamState.CLOSED);
  }
 else   if (frameType == FrameTypes.CONTINUATION) {
    getHeadersFromFrame();
    if (currentFrame.flagEndHeadersSet()) {
      processCompleteHeaders();
      setHeadersComplete();
      setReadyForRead();
    }
  }
}","/** 
 * @param direction
 * @throws CompressionException
 */
private void processHalfClosedRemote(Constants.Direction direction) throws FlowControlException, CompressionException {
  if (direction == Direction.WRITING_OUT) {
    boolean writeCompleted=writeFrameSync();
    if ((currentFrame.getFrameType() == FrameTypes.RST_STREAM || currentFrame.flagEndStreamSet()) && writeCompleted) {
      endStream=true;
      muxLink.triggerStreamClose(this);
      updateStreamState(StreamState.CLOSED);
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
      }
 else {
        setContinuationFrameExpected(true);
      }
    }
  }
 else   if (currentFrame.getFrameType() == FrameTypes.RST_STREAM) {
    endStream=true;
    updateStreamState(StreamState.CLOSED);
  }
 else   if (frameType == FrameTypes.CONTINUATION) {
    getHeadersFromFrame();
    if (currentFrame.flagEndHeadersSet()) {
      processCompleteHeaders(false);
      setHeadersComplete();
      setReadyForRead();
    }
  }
}"
34790,"private void processOpen(Constants.Direction direction) throws ProtocolException, FlowControlException, CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (direction == Constants.Direction.READ_IN) {
    if (frameType == FrameTypes.DATA) {
      getBodyFromFrame();
      if (currentFrame.flagEndStreamSet()) {
        processCompleteData();
        setReadyForRead();
      }
    }
 else     if (frameType == FrameTypes.CONTINUATION || (frameType == FrameTypes.HEADERS)) {
      getHeadersFromFrame();
      if (currentFrame.flagEndHeadersSet()) {
        processCompleteHeaders();
        setHeadersComplete();
        if (currentFrame.flagEndStreamSet()) {
          setReadyForRead();
        }
      }
 else {
        setContinuationFrameExpected(true);
      }
    }
    if (currentFrame.flagEndStreamSet()) {
      endStream=true;
      updateStreamState(StreamState.HALF_CLOSED_REMOTE);
    }
  }
 else {
    if (frameType == FrameTypes.PUSH_PROMISE) {
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
        if (currentFrame.flagEndStreamSet()) {
          endStream=true;
          updateStreamState(StreamState.HALF_CLOSED_LOCAL);
        }
      }
 else {
        setContinuationFrameExpected(true);
        if (currentFrame.flagEndStreamSet()) {
          endStream=true;
        }
      }
    }
    boolean writeCompleted=writeFrameSync();
    if (frameType == FrameTypes.DATA && writeCompleted && currentFrame.flagEndStreamSet()) {
      endStream=true;
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
    }
  }
}","private void processOpen(Constants.Direction direction) throws ProtocolException, FlowControlException, CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (direction == Constants.Direction.READ_IN) {
    if (frameType == FrameTypes.DATA) {
      getBodyFromFrame();
      if (currentFrame.flagEndStreamSet()) {
        processCompleteData();
        setReadyForRead();
      }
    }
 else     if (frameType == FrameTypes.CONTINUATION || (frameType == FrameTypes.HEADERS)) {
      getHeadersFromFrame();
      if (currentFrame.flagEndHeadersSet()) {
        processCompleteHeaders(false);
        setHeadersComplete();
        if (currentFrame.flagEndStreamSet()) {
          setReadyForRead();
        }
      }
 else {
        setContinuationFrameExpected(true);
      }
    }
    if (currentFrame.flagEndStreamSet()) {
      endStream=true;
      updateStreamState(StreamState.HALF_CLOSED_REMOTE);
    }
  }
 else {
    if (frameType == FrameTypes.PUSH_PROMISE) {
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
        if (currentFrame.flagEndStreamSet()) {
          endStream=true;
          updateStreamState(StreamState.HALF_CLOSED_LOCAL);
        }
      }
 else {
        setContinuationFrameExpected(true);
        if (currentFrame.flagEndStreamSet()) {
          endStream=true;
        }
      }
    }
    boolean writeCompleted=writeFrameSync();
    if (frameType == FrameTypes.DATA && writeCompleted && currentFrame.flagEndStreamSet()) {
      endStream=true;
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
    }
  }
}"
34791,"/** 
 * Perform operations to transition into IDLE state
 * @param direction
 * @throws CompressionException
 * @throws FlowControlException
 * @throws ProtocolException
 */
private void processIdle(Constants.Direction direction) throws CompressionException, FlowControlException, ProtocolException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (currentFrame.getFrameType() == FrameTypes.HEADERS || currentFrame.getFrameType() == FrameTypes.PUSH_PROMISE) {
    muxLink.updateHighestStreamId(myID);
  }
  if (direction == Constants.Direction.READ_IN) {
    if (frameType == FrameTypes.HEADERS) {
      processHeadersPriority();
      getHeadersFromFrame();
      if (currentFrame.flagEndHeadersSet()) {
        processCompleteHeaders();
        setHeadersComplete();
      }
 else {
        setContinuationFrameExpected(true);
      }
      if (currentFrame.flagEndStreamSet()) {
        endStream=true;
        updateStreamState(StreamState.HALF_CLOSED_REMOTE);
        if (currentFrame.flagEndHeadersSet()) {
          setReadyForRead();
        }
      }
 else {
        updateStreamState(StreamState.OPEN);
      }
    }
  }
 else {
    if (frameType == FrameTypes.HEADERS) {
      updateStreamState(StreamState.OPEN);
      if (!currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(true);
      }
    }
    writeFrameSync();
  }
}","/** 
 * Perform operations to transition into IDLE state
 * @param direction
 * @throws CompressionException
 * @throws FlowControlException
 * @throws ProtocolException
 */
private void processIdle(Constants.Direction direction) throws CompressionException, FlowControlException, ProtocolException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (currentFrame.getFrameType() == FrameTypes.HEADERS || currentFrame.getFrameType() == FrameTypes.PUSH_PROMISE) {
    muxLink.updateHighestStreamId(myID);
  }
  if (direction == Constants.Direction.READ_IN) {
    if (frameType == FrameTypes.HEADERS) {
      processHeadersPriority();
      getHeadersFromFrame();
      if (currentFrame.flagEndHeadersSet()) {
        processCompleteHeaders(false);
        setHeadersComplete();
      }
 else {
        setContinuationFrameExpected(true);
      }
      if (currentFrame.flagEndStreamSet()) {
        endStream=true;
        updateStreamState(StreamState.HALF_CLOSED_REMOTE);
        if (currentFrame.flagEndHeadersSet()) {
          setReadyForRead();
        }
      }
 else {
        updateStreamState(StreamState.OPEN);
      }
    }
  }
 else {
    if (frameType == FrameTypes.HEADERS) {
      updateStreamState(StreamState.OPEN);
      if (!currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(true);
      }
    }
    writeFrameSync();
  }
}"
34792,"@Override public String toString(){
  StringBuilder frameToString=new StringBuilder();
  frameToString.append(super.toString());
  frameToString.append(""String_Node_Str"" + this.getEnablePush() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getHeaderTableSize() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getInitialWindowSize() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getMaxHeaderListSize() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getMaxFrameSize() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getMaxHeaderListSize() + ""String_Node_Str"");
  return frameToString.toString();
}","@Override public String toString(){
  StringBuilder frameToString=new StringBuilder();
  frameToString.append(super.toString());
  frameToString.append(""String_Node_Str"" + this.getEnablePush() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getHeaderTableSize() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getInitialWindowSize() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getMaxFrameSize() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getMaxHeaderListSize() + ""String_Node_Str"");
  frameToString.append(""String_Node_Str"" + this.getMaxConcurrentStreams() + ""String_Node_Str"");
  return frameToString.toString();
}"
34793,"public static byte[] encodeHeader(H2HeaderTable table,String name,String value,LiteralIndexType type,boolean huffman) throws CompressionException, IOException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (table == null || !table.isDynamicTableValid()) {
    throw new CompressionException(""String_Node_Str"");
  }
  ByteArrayOutputStream encodedHeader=new ByteArrayOutputStream();
  String compliantName=name.toLowerCase();
  int indexLocation=0;
  H2HeaderField indexedHeader=null;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  indexedHeader=table.getHeaderEntry(compliantName,value);
  if (indexedHeader != null) {
    indexLocation=indexedHeader.getCurrentIndex();
    if (indexedHeader.getValueHash() == value.hashCode()) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + indexLocation + ""String_Node_Str"");
      }
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.exit(tc,""String_Node_Str"");
      }
      return IntegerRepresentation.encode(indexLocation,ByteFormatType.INDEXED);
    }
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + indexLocation + ""String_Node_Str"");
    }
  }
  encodedHeader.write(IntegerRepresentation.encode(indexLocation,type));
  if (indexLocation == 0) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    encodeFragment(encodedHeader,compliantName,huffman);
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  encodeFragment(encodedHeader,value,huffman);
  if (type == LiteralIndexType.INDEX) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    table.addHeaderEntry(new H2HeaderField(compliantName,value));
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
  return encodedHeader.toByteArray();
}","public static byte[] encodeHeader(H2HeaderTable table,String name,String value,LiteralIndexType type,boolean huffman) throws CompressionException, IOException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str""+ value);
  }
  if (table == null || !table.isDynamicTableValid()) {
    throw new CompressionException(""String_Node_Str"");
  }
  ByteArrayOutputStream encodedHeader=new ByteArrayOutputStream();
  String compliantName=name.toLowerCase();
  int indexLocation=0;
  H2HeaderField indexedHeader=null;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  indexedHeader=table.getHeaderEntry(compliantName,value);
  if (indexedHeader != null) {
    indexLocation=indexedHeader.getCurrentIndex();
    if (indexedHeader.getValueHash() == value.hashCode()) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + indexLocation + ""String_Node_Str"");
      }
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.exit(tc,""String_Node_Str"");
      }
      return IntegerRepresentation.encode(indexLocation,ByteFormatType.INDEXED);
    }
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + indexLocation + ""String_Node_Str"");
    }
  }
  encodedHeader.write(IntegerRepresentation.encode(indexLocation,type));
  if (indexLocation == 0) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    encodeFragment(encodedHeader,compliantName,huffman);
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  encodeFragment(encodedHeader,value,huffman);
  if (type == LiteralIndexType.INDEX) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    table.addHeaderEntry(new H2HeaderField(compliantName,value));
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
  return encodedHeader.toByteArray();
}"
34794,"/** 
 * pushNewRequest - called by WebContainer when a servlet determines that a push_promise is needed 1. Send an HTTP2 push promise frame to the client 2. Send an HTTP 1.1 request to WebContainer
 * @return
 * @throws Http2PushException
 */
@Override public void pushNewRequest(Http2PushBuilder pushBuilder) throws Http2PushException, com.ibm.ws.http.channel.h2internal.exceptions.ProtocolException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"" + this);
  }
  if (!isPushSupported())   return;
  HttpInboundServiceContext isc=(HttpInboundServiceContext)getServiceContext();
  HttpInboundLink link=((HttpInboundServiceContextImpl)isc).getLink();
  H2HeaderTable h2WriteTable=((H2HttpInboundLinkWrap)link).muxLink.getWriteTable();
  ByteArrayOutputStream ppStream=new ByteArrayOutputStream();
  ByteArrayOutputStream hdrStream=new ByteArrayOutputStream();
  try {
    if (pushBuilder.getMethod() == null) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      throw new Http2PushException(""String_Node_Str"");
    }
 else {
      ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.METHOD,pushBuilder.getMethod(),LiteralIndexType.NOINDEXING));
      hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.METHOD,pushBuilder.getMethod(),LiteralIndexType.NOINDEXING));
    }
    if (pushBuilder.getPath() == null) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      throw new Http2PushException(""String_Node_Str"");
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + pushBuilder.getPath());
      }
      ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.PATH,pushBuilder.getPath(),LiteralIndexType.NOINDEXING));
      hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.PATH,pushBuilder.getPath(),LiteralIndexType.NOINDEXING));
    }
    ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.AUTHORITY,isc.getLocalAddr().getHostName(),LiteralIndexType.NOINDEXING));
    hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.AUTHORITY,isc.getLocalAddr().getHostName(),LiteralIndexType.NOINDEXING));
    Set<HeaderField> headerSet=pushBuilder.getHeaders();
    if (headerSet != null) {
      Iterator<HeaderField> hsit=headerSet.iterator();
      HeaderField hf=null;
      while (hsit.hasNext()) {
        hf=hsit.next();
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + hf.getName() + ""String_Node_Str""+ hf.asString());
        }
        ppStream.write(H2Headers.encodeHeader(h2WriteTable,hf.getName(),hf.asString(),LiteralIndexType.NOINDEXING));
        hdrStream.write(H2Headers.encodeHeader(h2WriteTable,hf.getName(),hf.asString(),LiteralIndexType.NOINDEXING));
      }
    }
    Set<HttpCookie> cookieSet=pushBuilder.getCookies();
    if (cookieSet != null) {
      Iterator<HttpCookie> ckit=cookieSet.iterator();
      HttpCookie ck=null;
      while (ckit.hasNext()) {
        ck=ckit.next();
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + ck.getName() + ""String_Node_Str""+ ck.toString());
        }
        ppStream.write(H2Headers.encodeHeader(h2WriteTable,""String_Node_Str"",ck.getName() + ""String_Node_Str"" + ck.toString(),LiteralIndexType.NOINDEXING));
        hdrStream.write(H2Headers.encodeHeader(h2WriteTable,""String_Node_Str"",ck.getName() + ""String_Node_Str"" + ck.toString(),LiteralIndexType.NOINDEXING));
        ckit.next();
      }
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
    if (pushBuilder.getSessionId() != null) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + pushBuilder.getSessionId());
      }
      ppStream.write(H2Headers.encodeHeader(h2WriteTable,""String_Node_Str"",""String_Node_Str"" + pushBuilder.getSessionId(),LiteralIndexType.NOINDEXING));
      hdrStream.write(H2Headers.encodeHeader(h2WriteTable,""String_Node_Str"",""String_Node_Str"" + pushBuilder.getSessionId(),LiteralIndexType.NOINDEXING));
    }
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + e);
    }
    return;
  }
  int promisedStreamId=((H2HttpInboundLinkWrap)link).muxLink.getNextPromisedStreamId();
  H2StreamProcessor promisedSP=((H2HttpInboundLinkWrap)link).muxLink.createNewInboundLink(promisedStreamId);
  ((H2HttpInboundLinkWrap)link).setPushPromise(true);
  promisedSP.initializePromisedStream();
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + promisedStreamId);
  }
  int streamId=((H2HttpInboundLinkWrap)link).getStreamId();
  FramePushPromise pushPromiseFrame=new FramePushPromise(streamId,ppStream.toByteArray(),promisedStreamId,0,true,false,false);
  FrameHeaders headersFrame=new FrameHeaders(streamId,hdrStream.toByteArray());
  H2StreamProcessor existingSP=((H2HttpInboundLinkWrap)link).muxLink.getStreamProcessor(streamId);
  if (existingSP != null)   existingSP.processNextFrame(pushPromiseFrame,Constants.Direction.WRITING_OUT);
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + streamId + ""String_Node_Str"");
    }
    return;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamId);
  }
  promisedSP.sendRequestToWc(headersFrame);
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"" + this);
  }
}","/** 
 * pushNewRequest - called by WebContainer when a servlet determines that a push_promise is needed 1. Send an HTTP2 push promise frame to the client 2. Send an HTTP 1.1 request to WebContainer
 * @return
 * @throws Http2PushException
 */
@Override public void pushNewRequest(Http2PushBuilder pushBuilder) throws Http2PushException, com.ibm.ws.http.channel.h2internal.exceptions.ProtocolException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"" + this);
  }
  if (!isPushSupported())   return;
  HttpInboundServiceContext isc=(HttpInboundServiceContext)getServiceContext();
  HttpInboundLink link=((HttpInboundServiceContextImpl)isc).getLink();
  H2HeaderTable h2WriteTable=((H2HttpInboundLinkWrap)link).muxLink.getWriteTable();
  ByteArrayOutputStream ppStream=new ByteArrayOutputStream();
  ByteArrayOutputStream hdrStream=new ByteArrayOutputStream();
  try {
    if (pushBuilder.getMethod() == null) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      throw new Http2PushException(""String_Node_Str"");
    }
 else {
      ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.METHOD,pushBuilder.getMethod(),LiteralIndexType.NOINDEXING));
      hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.METHOD,pushBuilder.getMethod(),LiteralIndexType.NOINDEXING));
    }
    if (pushBuilder.getPath() == null) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      throw new Http2PushException(""String_Node_Str"");
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + pushBuilder.getPath());
      }
      ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.PATH,pushBuilder.getPath(),LiteralIndexType.NOINDEXING));
      hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.PATH,pushBuilder.getPath(),LiteralIndexType.NOINDEXING));
    }
    if (isc.isSecure()) {
      ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
      hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    }
 else {
      ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
      hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    }
    String authority=isc.getLocalAddr().getHostName() + ""String_Node_Str"" + isc.getLocalPort();
    ppStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.AUTHORITY,authority,LiteralIndexType.NOINDEXING));
    hdrStream.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.AUTHORITY,authority,LiteralIndexType.NOINDEXING));
    Set<HeaderField> headerSet=pushBuilder.getHeaders();
    if (headerSet != null) {
      Iterator<HeaderField> hsit=headerSet.iterator();
      HeaderField hf=null;
      while (hsit.hasNext()) {
        hf=hsit.next();
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + hf.getName() + ""String_Node_Str""+ hf.asString());
        }
        ppStream.write(H2Headers.encodeHeader(h2WriteTable,hf.getName(),hf.asString(),LiteralIndexType.NOINDEXING));
        hdrStream.write(H2Headers.encodeHeader(h2WriteTable,hf.getName(),hf.asString(),LiteralIndexType.NOINDEXING));
      }
    }
    Set<HttpCookie> cookieSet=pushBuilder.getCookies();
    if (cookieSet != null) {
      Iterator<HttpCookie> ckit=cookieSet.iterator();
      HttpCookie ck=null;
      while (ckit.hasNext()) {
        ck=ckit.next();
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + ck.getName() + ""String_Node_Str""+ ck.toString());
        }
        ppStream.write(H2Headers.encodeHeader(h2WriteTable,""String_Node_Str"",ck.getName() + ""String_Node_Str"" + ck.toString(),LiteralIndexType.NOINDEXING));
        hdrStream.write(H2Headers.encodeHeader(h2WriteTable,""String_Node_Str"",ck.getName() + ""String_Node_Str"" + ck.toString(),LiteralIndexType.NOINDEXING));
        ckit.next();
      }
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + e);
    }
    return;
  }
  int promisedStreamId=((H2HttpInboundLinkWrap)link).muxLink.getNextPromisedStreamId();
  H2StreamProcessor promisedSP=((H2HttpInboundLinkWrap)link).muxLink.createNewInboundLink(promisedStreamId);
  if (promisedSP == null) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + link);
    }
    return;
  }
  ((H2HttpInboundLinkWrap)link).setPushPromise(true);
  promisedSP.initializePromisedStream();
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + promisedStreamId);
  }
  int streamId=((H2HttpInboundLinkWrap)link).getStreamId();
  FramePushPromise pushPromiseFrame=new FramePushPromise(streamId,ppStream.toByteArray(),promisedStreamId,0,true,false,false);
  FrameHeaders headersFrame=new FrameHeaders(streamId,hdrStream.toByteArray());
  H2StreamProcessor existingSP=((H2HttpInboundLinkWrap)link).muxLink.getStreamProcessor(streamId);
  if (existingSP != null)   existingSP.processNextFrame(pushPromiseFrame,Constants.Direction.WRITING_OUT);
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + streamId + ""String_Node_Str"");
    }
    return;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamId);
  }
  promisedSP.sendRequestToWc(headersFrame);
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"" + this);
  }
}"
34795,"private void handleH2LinkPreload(HeaderField header,HttpInboundLink link){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  int streamId=((H2HttpInboundLinkWrap)link).getStreamId();
  String uri=header.asString().substring(header.asString().indexOf('<') + 1,header.asString().indexOf('>'));
  H2HeaderTable h2WriteTable=((H2HttpInboundLinkWrap)link).muxLink.getWriteTable();
  ByteArrayOutputStream ppHb=new ByteArrayOutputStream();
  ByteArrayOutputStream hdrsHb=new ByteArrayOutputStream();
  try {
    ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.METHOD,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.AUTHORITY,getLocalAddr().getHostName(),LiteralIndexType.NOINDEXING));
    ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.PATH,uri,LiteralIndexType.NOINDEXING));
    hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.METHOD,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.AUTHORITY,getLocalAddr().getHostName(),LiteralIndexType.NOINDEXING));
    hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.PATH,uri,LiteralIndexType.NOINDEXING));
  }
 catch (  Exception e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + e);
    }
    return;
  }
  int promisedStreamId=((H2HttpInboundLinkWrap)link).muxLink.getNextPromisedStreamId();
  FramePushPromise pushPromiseFrame=new FramePushPromise(streamId,ppHb.toByteArray(),promisedStreamId,0,true,false,false);
  FrameHeaders headersFrame=new FrameHeaders(streamId,hdrsHb.toByteArray());
  H2StreamProcessor promisedSP=((H2HttpInboundLinkWrap)link).muxLink.createNewInboundLink(promisedStreamId);
  ((H2HttpInboundLinkWrap)link).setPushPromise(true);
  promisedSP.initializePromisedStream();
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + promisedStreamId);
  }
  H2StreamProcessor existingSP=((H2HttpInboundLinkWrap)link).muxLink.getStreamProcessor(streamId);
  if (existingSP != null) {
    try {
      existingSP.processNextFrame(pushPromiseFrame,com.ibm.ws.http.channel.h2internal.Constants.Direction.WRITING_OUT);
    }
 catch (    ProtocolException e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      return;
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + streamId + ""String_Node_Str"");
    }
    return;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamId);
  }
  promisedSP.sendRequestToWc(headersFrame);
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}","private void handleH2LinkPreload(HeaderField header,HttpInboundLink link){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  int streamId=((H2HttpInboundLinkWrap)link).getStreamId();
  String uri=header.asString().substring(header.asString().indexOf('<') + 1,header.asString().indexOf('>'));
  H2HeaderTable h2WriteTable=((H2HttpInboundLinkWrap)link).muxLink.getWriteTable();
  ByteArrayOutputStream ppHb=new ByteArrayOutputStream();
  ByteArrayOutputStream hdrsHb=new ByteArrayOutputStream();
  try {
    ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.METHOD,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    String authority=getLocalAddr().getHostName() + ""String_Node_Str"" + getLocalPort();
    ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.AUTHORITY,authority,LiteralIndexType.NOINDEXING));
    if (this.isSecure()) {
      ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    }
 else {
      ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    }
    ppHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.PATH,uri,LiteralIndexType.NOINDEXING));
    hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.METHOD,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.AUTHORITY,getLocalAddr().getHostName(),LiteralIndexType.NOINDEXING));
    if (this.isSecure()) {
      hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    }
 else {
      hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.SCHEME,""String_Node_Str"",LiteralIndexType.NOINDEXING));
    }
    hdrsHb.write(H2Headers.encodeHeader(h2WriteTable,HpackConstants.PATH,uri,LiteralIndexType.NOINDEXING));
  }
 catch (  Exception e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + e);
    }
    return;
  }
  int promisedStreamId=((H2HttpInboundLinkWrap)link).muxLink.getNextPromisedStreamId();
  FramePushPromise pushPromiseFrame=new FramePushPromise(streamId,ppHb.toByteArray(),promisedStreamId,0,true,false,false);
  FrameHeaders headersFrame=new FrameHeaders(streamId,hdrsHb.toByteArray());
  H2StreamProcessor promisedSP=((H2HttpInboundLinkWrap)link).muxLink.createNewInboundLink(promisedStreamId);
  if (promisedSP == null) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + link);
    }
    return;
  }
  ((H2HttpInboundLinkWrap)link).setPushPromise(true);
  promisedSP.initializePromisedStream();
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + promisedStreamId);
  }
  H2StreamProcessor existingSP=((H2HttpInboundLinkWrap)link).muxLink.getStreamProcessor(streamId);
  if (existingSP != null) {
    try {
      existingSP.processNextFrame(pushPromiseFrame,com.ibm.ws.http.channel.h2internal.Constants.Direction.WRITING_OUT);
    }
 catch (    ProtocolException e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
      return;
    }
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + streamId + ""String_Node_Str"");
    }
    return;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamId);
  }
  promisedSP.sendRequestToWc(headersFrame);
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}"
34796,"protected AuthenticationResult mapToAuthenticationResult(AuthStatus status,JaspiRequest jaspiRequest,Subject clientSubject){
  if (tc.isEntryEnabled())   Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + status);
  AuthenticationResult authResult=null;
  String pretty=""String_Node_Str"";
  if (AuthStatus.SUCCESS == status || AuthStatus.SEND_SUCCESS == status) {
    authResult=new AuthenticationResult(AuthResult.SUCCESS,clientSubject);
    pretty=""String_Node_Str"";
  }
 else   if (AuthStatus.SEND_CONTINUE == status) {
    int responseStatus=getResponseStatus(jaspiRequest.getHttpServletResponse());
    HttpServletRequest req=jaspiRequest.getHttpServletRequest();
switch (responseStatus) {
case HttpServletResponse.SC_UNAUTHORIZED:
      String realm=(String)jaspiRequest.getMessageInfo().getMap().get(AttributeNameConstants.WSCREDENTIAL_REALM);
    authResult=new AuthenticationResult(AuthResult.SEND_401,realm != null ? realm : (String)null);
  pretty=""String_Node_Str"";
break;
case HttpServletResponse.SC_MOVED_TEMPORARILY:
case HttpServletResponse.SC_SEE_OTHER:
case HttpServletResponse.SC_TEMPORARY_REDIRECT:
String loginURL=getLoginURL(jaspiRequest,req);
String query=req.getQueryString();
String originalURL=req.getRequestURL().append(query != null ? ""String_Node_Str"" + query : ""String_Node_Str"").toString();
authResult=new AuthenticationResult(AuthResult.REDIRECT,loginURL);
pretty=""String_Node_Str"";
ReferrerURLCookieHandler referrerURLHandler=WebConfigUtils.getWebAppSecurityConfig().createReferrerURLCookieHandler();
referrerURLHandler.setReferrerURLCookie(req,authResult,originalURL);
break;
default :
authResult=new AuthenticationResult(AuthResult.RETURN,""String_Node_Str"" + responseStatus);
break;
}
}
 else if (AuthStatus.SEND_FAILURE == status) {
String detail=""String_Node_Str"" + status + ""String_Node_Str"";
authResult=new AuthenticationResult(AuthResult.FAILURE,detail);
if (tc.isDebugEnabled()) Tr.debug(tc,detail);
}
 else {
authResult=new AuthenticationResult(AuthResult.FAILURE,""String_Node_Str"" + status);
}
if (authResult.getStatus().equals(AuthResult.FAILURE)) {
Tr.info(tc,""String_Node_Str"",new Object[]{status,jaspiRequest.getHttpServletRequest().getRequestURI(),jaspiProviderServiceRef.getService() != null ? jaspiProviderServiceRef.getService().getClass() : null});
}
if (tc.isEntryEnabled()) Tr.exit(tc,""String_Node_Str"",""String_Node_Str"" + pretty);
return authResult;
}","protected AuthenticationResult mapToAuthenticationResult(AuthStatus status,JaspiRequest jaspiRequest,Subject clientSubject){
  if (tc.isEntryEnabled())   Tr.entry(tc,""String_Node_Str"",""String_Node_Str"" + status);
  AuthenticationResult authResult=null;
  String pretty=""String_Node_Str"";
  if (AuthStatus.SUCCESS == status || AuthStatus.SEND_SUCCESS == status) {
    authResult=new AuthenticationResult(AuthResult.SUCCESS,clientSubject);
    pretty=""String_Node_Str"";
  }
 else   if (AuthStatus.SEND_CONTINUE == status) {
    int responseStatus=getResponseStatus(jaspiRequest.getHttpServletResponse());
    HttpServletRequest req=jaspiRequest.getHttpServletRequest();
switch (responseStatus) {
case HttpServletResponse.SC_UNAUTHORIZED:
      String realm=(String)jaspiRequest.getMessageInfo().getMap().get(AttributeNameConstants.WSCREDENTIAL_REALM);
    authResult=new AuthenticationResult(AuthResult.SEND_401,realm != null ? realm : (String)null);
  pretty=""String_Node_Str"";
break;
case HttpServletResponse.SC_MOVED_TEMPORARILY:
case HttpServletResponse.SC_SEE_OTHER:
case HttpServletResponse.SC_TEMPORARY_REDIRECT:
String loginURL=getLoginURL(jaspiRequest,req);
String query=req.getQueryString();
String originalURL=req.getRequestURL().append(query != null ? ""String_Node_Str"" + query : ""String_Node_Str"").toString();
authResult=new AuthenticationResult(AuthResult.REDIRECT,loginURL);
pretty=""String_Node_Str"";
ReferrerURLCookieHandler referrerURLHandler=WebConfigUtils.getWebAppSecurityConfig().createReferrerURLCookieHandler();
referrerURLHandler.setReferrerURLCookie(req,authResult,originalURL);
break;
default :
authResult=new AuthenticationResult(AuthResult.RETURN,""String_Node_Str"" + responseStatus);
break;
}
}
 else if (AuthStatus.SEND_FAILURE == status) {
pretty=""String_Node_Str"";
String detail=""String_Node_Str"" + pretty + ""String_Node_Str"";
authResult=new AuthenticationResult(AuthResult.FAILURE,detail);
if (tc.isDebugEnabled()) Tr.debug(tc,detail);
}
 else {
authResult=new AuthenticationResult(AuthResult.FAILURE,""String_Node_Str"" + status);
}
if (authResult.getStatus().equals(AuthResult.FAILURE)) {
Tr.info(tc,""String_Node_Str"",new Object[]{status,jaspiRequest.getHttpServletRequest().getRequestURI(),jaspiProviderServiceRef.getService() != null ? jaspiProviderServiceRef.getService().getClass() : null});
}
if (tc.isEntryEnabled()) Tr.exit(tc,""String_Node_Str"",""String_Node_Str"" + pretty);
return authResult;
}"
34797,"@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  AuthStatus status=AuthStatus.SEND_FAILURE;
  try {
    HttpAuthenticationMechanism authMech=getModulePropertiesUtils().getHttpAuthenticationMechanism();
    HttpMessageContext httpMessageContext=createHttpMessageContext(messageInfo,clientSubject);
    AuthenticationStatus authenticationStatus=authMech.validateRequest((HttpServletRequest)messageInfo.getRequestMessage(),(HttpServletResponse)messageInfo.getResponseMessage(),httpMessageContext);
    status=translateValidateRequestStatus(authenticationStatus);
    registerSession(httpMessageContext);
  }
 catch (  Exception e) {
    e.printStackTrace();
    AuthException authException=new AuthException();
    authException.initCause(e);
    throw authException;
  }
  return status;
}","@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  AuthStatus status=AuthStatus.SEND_FAILURE;
  try {
    HttpAuthenticationMechanism authMech=getModulePropertiesUtils().getHttpAuthenticationMechanism();
    HttpMessageContext httpMessageContext=createHttpMessageContext(messageInfo,clientSubject);
    AuthenticationStatus authenticationStatus=authMech.validateRequest((HttpServletRequest)messageInfo.getRequestMessage(),(HttpServletResponse)messageInfo.getResponseMessage(),httpMessageContext);
    status=translateValidateRequestStatus(authenticationStatus);
    registerSession(httpMessageContext);
  }
 catch (  Exception e) {
    e.printStackTrace();
    AuthException authException=new AuthException(e.getMessage());
    authException.initCause(e);
    throw authException;
  }
  return status;
}"
34798,"public WebReply createReplyForAuthnFailure(AuthenticationResult authResult,String realm){
  WebReply reply=null;
switch (authResult.getStatus()) {
case FAILURE:
    return DENY_AUTHN_FAILED;
case SEND_401:
  return new ChallengeReply(realm);
case TAI_CHALLENGE:
return new TAIChallengeReply(authResult.getTAIChallengeCode());
case REDIRECT:
return new RedirectReply(authResult.getRedirectURL(),authResult.getCookies());
case UNKNOWN:
case CONTINUE:
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + authResult.getStatus() + ""String_Node_Str""+ authResult.getReason()+ ""String_Node_Str"");
}
return DENY_AUTHN_FAILED;
default :
break;
}
return reply;
}","public WebReply createReplyForAuthnFailure(AuthenticationResult authResult,String realm){
  WebReply reply=null;
switch (authResult.getStatus()) {
case FAILURE:
    String reason=authResult.getReason();
  if (reason != null && reason.contains(""String_Node_Str""))   return new DenyReply(reason);
return DENY_AUTHN_FAILED;
case SEND_401:
return new ChallengeReply(realm);
case TAI_CHALLENGE:
return new TAIChallengeReply(authResult.getTAIChallengeCode());
case REDIRECT:
return new RedirectReply(authResult.getRedirectURL(),authResult.getCookies());
case UNKNOWN:
case CONTINUE:
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"" + authResult.getStatus() + ""String_Node_Str""+ authResult.getReason()+ ""String_Node_Str"");
}
return DENY_AUTHN_FAILED;
default :
break;
}
return reply;
}"
34799,"/** 
 * @param webRequest
 * @return
 */
protected AuthenticationResult handleJaspi(WebRequest webRequest,HashMap<String,Object> props){
  AuthenticationResult authResult=JASPI_CONT;
  if (webAuthenticatorRef != null) {
    WebAuthenticator jaspiAuthenticator=webAuthenticatorRef.getService(""String_Node_Str"");
    if (jaspiAuthenticator != null) {
      if (props == null) {
        authResult=handleSSO(webRequest,null);
        if (authResult.getStatus() == AuthResult.CONTINUE) {
          authResult=handleSSO(webRequest,""String_Node_Str"");
          if (authResult.getStatus() == AuthResult.SUCCESS) {
            Map<String,Object> requestProps=new HashMap<String,Object>();
            requestProps.put(""String_Node_Str"",authResult.getSubject());
            webRequest.setProperties(requestProps);
          }
          authResult=jaspiAuthenticator.authenticate(webRequest);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
      }
 else {
        try {
          authResult=jaspiAuthenticator.authenticate(webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse(),props);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
 catch (        Exception e) {
          if (tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"",e);
          }
        }
      }
      if (authResult.getStatus() == AuthResult.SUCCESS) {
        boolean registerSession=false;
        Map<String,Object> reqProps=webRequest.getProperties();
        if (reqProps != null) {
          registerSession=Boolean.valueOf((String)reqProps.get(""String_Node_Str"")).booleanValue();
        }
        if (registerSession) {
          SSOCookieHelper ssoCh=new SSOCookieHelperImpl(webAppSecurityConfig,""String_Node_Str"");
          ssoCh.addSSOCookiesToResponse(authResult.getSubject(),webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse());
        }
        SSOCookieHelper ssoCh=webAppSecurityConfig.createSSOCookieHelper();
        HttpServletResponse res=webRequest.getHttpServletResponse();
        if (!res.isCommitted()) {
          PostParameterHelper postParameterHelper=new PostParameterHelper(webAppSecurityConfig);
          postParameterHelper.restore(webRequest.getHttpServletRequest(),res);
        }
        if (props != null && props.get(""String_Node_Str"") != null && props.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        }
 else {
          if (!res.isCommitted()) {
            ssoCh.removeSSOCookieFromResponse(res);
          }
        }
      }
    }
  }
  return authResult;
}","/** 
 * @param webRequest
 * @return
 */
protected AuthenticationResult handleJaspi(WebRequest webRequest,HashMap<String,Object> props){
  AuthenticationResult authResult=JASPI_CONT;
  if (webAuthenticatorRef != null) {
    WebAuthenticator jaspiAuthenticator=webAuthenticatorRef.getService(""String_Node_Str"");
    if (jaspiAuthenticator != null) {
      if (props == null) {
        authResult=handleSSO(webRequest,null);
        if (authResult.getStatus() == AuthResult.CONTINUE) {
          authResult=handleSSO(webRequest,""String_Node_Str"");
          if (authResult.getStatus() == AuthResult.SUCCESS) {
            Map<String,Object> requestProps=new HashMap<String,Object>();
            requestProps.put(""String_Node_Str"",authResult.getSubject());
            webRequest.setProperties(requestProps);
          }
          authResult=jaspiAuthenticator.authenticate(webRequest);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
      }
 else {
        try {
          authResult=jaspiAuthenticator.authenticate(webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse(),props);
          if (authResult.getStatus() != AuthResult.CONTINUE) {
            String authHeader=webRequest.getHttpServletRequest().getHeader(""String_Node_Str"");
            if (authHeader != null && authHeader.startsWith(""String_Node_Str"")) {
              String basicAuthHeader=decodeCookieString(authHeader.substring(6));
              int index=basicAuthHeader.indexOf(':');
              String uid=basicAuthHeader.substring(0,index);
              authResult.setAuditCredValue(uid);
            }
            authResult.setAuditCredType(AuditEvent.CRED_TYPE_JASPIC);
          }
        }
 catch (        Exception e) {
          if (tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"",e);
          }
          authResult=new AuthenticationResult(AuthResult.FAILURE,e.getMessage());
        }
      }
      if (authResult.getStatus() == AuthResult.SUCCESS) {
        boolean registerSession=false;
        Map<String,Object> reqProps=webRequest.getProperties();
        if (reqProps != null) {
          registerSession=Boolean.valueOf((String)reqProps.get(""String_Node_Str"")).booleanValue();
        }
        if (registerSession) {
          SSOCookieHelper ssoCh=new SSOCookieHelperImpl(webAppSecurityConfig,""String_Node_Str"");
          ssoCh.addSSOCookiesToResponse(authResult.getSubject(),webRequest.getHttpServletRequest(),webRequest.getHttpServletResponse());
        }
        SSOCookieHelper ssoCh=webAppSecurityConfig.createSSOCookieHelper();
        HttpServletResponse res=webRequest.getHttpServletResponse();
        if (!res.isCommitted()) {
          PostParameterHelper postParameterHelper=new PostParameterHelper(webAppSecurityConfig);
          postParameterHelper.restore(webRequest.getHttpServletRequest(),res);
        }
        if (props != null && props.get(""String_Node_Str"") != null && props.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        }
 else {
          if (!res.isCommitted()) {
            ssoCh.removeSSOCookieFromResponse(res);
          }
        }
      }
    }
  }
  return authResult;
}"
34800,"@After public void after() throws Exception {
  server.stopServer();
}","@After public void after() throws Exception {
  if (server.isStarted()) {
    server.stopServer();
  }
}"
34801,"/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,Header t){
  String reference=t.getRef();
  if (reference != null && !reference.isEmpty()) {
    ValidatorUtils.referenceValidatorHelper(reference,t,helper,context,key);
    return;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void validate(ValidationHelper helper,Context context,String key,Header t){
  if (t != null) {
    String reference=t.getRef();
    if (reference != null && !reference.isEmpty()) {
      ValidatorUtils.referenceValidatorHelper(reference,t,helper,context,key);
      return;
    }
  }
}"
34802,"@Test public void missingPathCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",null);
  vh.resetResults();
  validator.validate(vh,null,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}","@Test public void missingPathCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",null);
  vh.resetResults();
  validator.validate(vh,context,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}"
34803,"@Test public void complexCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  c.addPathItem(""String_Node_Str"",pathItem);
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,null,c);
  if (vh.hasEvents())   Assert.fail(""String_Node_Str"" + vh);
}","@Test public void complexCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  c.addPathItem(""String_Node_Str"",pathItem);
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,context,c);
  if (vh.hasEvents())   Assert.fail(""String_Node_Str"" + vh);
}"
34804,"@Test public void invalidRuntimeExpressionCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,null,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}","@Test public void invalidRuntimeExpressionCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,context,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}"
34805,"@Test public void simpleCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,null,c);
  if (vh.hasEvents())   Assert.fail(""String_Node_Str"" + vh);
}","@Test public void simpleCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,context,c);
  if (vh.hasEvents())   Assert.fail(""String_Node_Str"" + vh);
}"
34806,"@Test public void emptyCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,null,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}","@Test public void emptyCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,context,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}"
34807,"@Test public void invalidUrlCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,null,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}","@Test public void invalidUrlCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,context,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}"
34808,"@Test public void invalidTemplateCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,null,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}","@Test public void invalidTemplateCallBack(){
  CallbackImpl c=new CallbackImpl();
  c.addPathItem(""String_Node_Str"",pathItem);
  c.addPathItem(""String_Node_Str"",pathItem);
  vh.resetResults();
  validator.validate(vh,context,c);
  Assert.assertEquals(""String_Node_Str"" + vh,1,vh.getEventsSize());
  String message=vh.getResult().getEvents().get(0).message;
  if (!message.contains(""String_Node_Str""))   Assert.fail(""String_Node_Str"" + vh);
}"
34809,"@Test public void testValidMediaTypeValidator(){
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  validator.validate(validationHelper,null,mediaType);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}","@Test public void testValidMediaTypeValidator(){
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  validator.validate(validationHelper,context,mediaType);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}"
34810,"@Test public void testEmptySchemaInvalidEncodingMediaTypeValidator(){
  mediaType.setSchema(new SchemaImpl());
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  validator.validate(validationHelper,null,mediaType);
  Assert.assertEquals(1,validationHelper.getEventsSize());
}","@Test public void testEmptySchemaInvalidEncodingMediaTypeValidator(){
  mediaType.setSchema(new SchemaImpl());
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  validator.validate(validationHelper,context,mediaType);
  Assert.assertEquals(1,validationHelper.getEventsSize());
}"
34811,"@Test public void testInvalidExampleMediaTypeValidator(){
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  mediaType.setExample(""String_Node_Str"");
  Map<String,ExampleImpl> examples=new HashMap<String,ExampleImpl>();
  examples.put(""String_Node_Str"",new ExampleImpl());
  mediaType.setExample(examples);
  validator.validate(validationHelper,null,mediaType);
  Assert.assertEquals(1,validationHelper.getEventsSize());
}","@Test public void testInvalidExampleMediaTypeValidator(){
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  mediaType.setExample(""String_Node_Str"");
  Map<String,ExampleImpl> examples=new HashMap<String,ExampleImpl>();
  examples.put(""String_Node_Str"",new ExampleImpl());
  mediaType.setExample(examples);
  validator.validate(validationHelper,context,mediaType);
  Assert.assertEquals(1,validationHelper.getEventsSize());
}"
34812,"@Test public void testNullSchemaInvalidEncodingMediaTypeValidator(){
  mediaType.setSchema(null);
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  validator.validate(validationHelper,null,mediaType);
  Assert.assertEquals(1,validationHelper.getEventsSize());
}","@Test public void testNullSchemaInvalidEncodingMediaTypeValidator(){
  mediaType.setSchema(null);
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  validator.validate(validationHelper,context,mediaType);
  Assert.assertEquals(1,validationHelper.getEventsSize());
}"
34813,"@Test public void testInvalidEncodingMediaTypeValidator(){
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  validator.validate(validationHelper,null,mediaType);
  Assert.assertEquals(1,validationHelper.getEventsSize());
}","@Test public void testInvalidEncodingMediaTypeValidator(){
  EncodingImpl encoding=new EncodingImpl();
  encoding.setContentType(""String_Node_Str"");
  Map<String,Encoding> encodingMap=new HashMap<String,Encoding>();
  encodingMap.put(""String_Node_Str"",encoding);
  mediaType.setEncoding(encodingMap);
  validator.validate(validationHelper,context,mediaType);
  Assert.assertEquals(1,validationHelper.getEventsSize());
}"
34814,"@Test public void testValidExamplesMediaTypeValidator(){
  Map<String,ExampleImpl> examples=new HashMap<String,ExampleImpl>();
  examples.put(""String_Node_Str"",new ExampleImpl());
  mediaType.setExample(examples);
  validator.validate(validationHelper,null,mediaType);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}","@Test public void testValidExamplesMediaTypeValidator(){
  Map<String,ExampleImpl> examples=new HashMap<String,ExampleImpl>();
  examples.put(""String_Node_Str"",new ExampleImpl());
  mediaType.setExample(examples);
  validator.validate(validationHelper,context,mediaType);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}"
34815,"@Test public void testEmptySchemaMediaTypeValidator(){
  mediaType.setSchema(null);
  validator.validate(validationHelper,null,mediaType);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}","@Test public void testEmptySchemaMediaTypeValidator(){
  mediaType.setSchema(null);
  validator.validate(validationHelper,context,mediaType);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}"
34816,"@Test public void testValidExampleMediaTypeValidator(){
  mediaType.setExample(""String_Node_Str"");
  validator.validate(validationHelper,null,mediaType);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}","@Test public void testValidExampleMediaTypeValidator(){
  mediaType.setExample(""String_Node_Str"");
  validator.validate(validationHelper,context,mediaType);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}"
34817,"@Test public void testOpenAPIValidator(){
  OpenAPIValidator validator=OpenAPIValidator.getInstance();
  TestValidationHelper vh=new TestValidationHelper();
  OpenAPIImpl openapi=new OpenAPIImpl();
  openapi.setOpenapi(null);
  validator.validate(vh,null,openapi);
  Assert.assertEquals(3,vh.getEventsSize());
  vh.resetResults();
  openapi.setOpenapi(""String_Node_Str"");
  validator.validate(vh,null,openapi);
  Assert.assertEquals(3,vh.getEventsSize());
  vh.resetResults();
  openapi.setOpenapi(""String_Node_Str"");
  openapi.setInfo(new InfoImpl());
  openapi.setPaths(new PathsImpl().addPathItem(""String_Node_Str"",new PathItemImpl()));
  validator.validate(vh,null,openapi);
  Assert.assertFalse(vh.hasEvents());
}","@Test public void testOpenAPIValidator(){
  OpenAPIValidator validator=OpenAPIValidator.getInstance();
  TestValidationHelper vh=new TestValidationHelper();
  OpenAPIImpl openapi=new OpenAPIImpl();
  openapi.setOpenapi(null);
  validator.validate(vh,context,openapi);
  Assert.assertEquals(3,vh.getEventsSize());
  vh.resetResults();
  openapi.setOpenapi(""String_Node_Str"");
  validator.validate(vh,context,openapi);
  Assert.assertEquals(3,vh.getEventsSize());
  vh.resetResults();
  openapi.setOpenapi(""String_Node_Str"");
  openapi.setInfo(new InfoImpl());
  openapi.setPaths(new PathsImpl().addPathItem(""String_Node_Str"",new PathItemImpl()));
  validator.validate(vh,context,openapi);
  Assert.assertFalse(vh.hasEvents());
}"
34818,"@Test public void testRequestBodyValidator(){
  RequestBodyValidator validator=RequestBodyValidator.getInstance();
  TestValidationHelper validationHelper=new TestValidationHelper();
  RequestBodyImpl requestBody=new RequestBodyImpl();
  validator.validate(validationHelper,null,requestBody);
  Assert.assertEquals(1,validationHelper.getEventsSize());
  validationHelper.resetResults();
  requestBody.setContent(new ContentImpl());
  validator.validate(validationHelper,null,requestBody);
  Assert.assertEquals(1,validationHelper.getEventsSize());
  validationHelper.resetResults();
  ContentImpl content=new ContentImpl();
  content.addMediaType(""String_Node_Str"",new MediaTypeImpl());
  requestBody.setContent(content);
  validator.validate(validationHelper,null,requestBody);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}","@Test public void testRequestBodyValidator(){
  RequestBodyValidator validator=RequestBodyValidator.getInstance();
  TestValidationHelper validationHelper=new TestValidationHelper();
  RequestBodyImpl requestBody=new RequestBodyImpl();
  validator.validate(validationHelper,context,requestBody);
  Assert.assertEquals(1,validationHelper.getEventsSize());
  validationHelper.resetResults();
  requestBody.setContent(new ContentImpl());
  validator.validate(validationHelper,context,requestBody);
  Assert.assertEquals(1,validationHelper.getEventsSize());
  validationHelper.resetResults();
  ContentImpl content=new ContentImpl();
  content.addMediaType(""String_Node_Str"",new MediaTypeImpl());
  requestBody.setContent(content);
  validator.validate(validationHelper,context,requestBody);
  Assert.assertEquals(0,validationHelper.getEventsSize());
}"
34819,"@Test public void testHelloAppClientWithEnterpriseApplication() throws Exception {
  client.copyFileToLibertyClientRoot(""String_Node_Str"");
  String appClientMsg=""String_Node_Str"";
  startProcess();
  assertStartMessages();
  assertAppMessage(appClientMsg);
}","@Test public void testHelloAppClientWithEnterpriseApplication() throws Exception {
  ShrinkHelper.exportAppToClient(client,earHAC);
  String appClientMsg=""String_Node_Str"";
  client.startClient();
  assertAppMessage(appClientMsg);
}"
34820,"@Test public void testHelloAppClient() throws Exception {
  client.copyFileToLibertyClientRoot(""String_Node_Str"");
  String cbhPostConstructMsg=""String_Node_Str"";
  String mainPostConstructMsg=""String_Node_Str"";
  String cbhPreDestroyMsg=""String_Node_Str"";
  String appClientMsg=""String_Node_Str"";
  startProcess();
  assertStartMessages();
  assertAppMessage(cbhPostConstructMsg);
  assertAppMessage(mainPostConstructMsg);
  assertAppMessage(appClientMsg);
  assertAppMessage(cbhPreDestroyMsg);
}","@Test public void testHelloAppClient() throws Exception {
  ShrinkHelper.exportAppToClient(client,earHAC);
  String cbhPostConstructMsg=""String_Node_Str"";
  String mainPostConstructMsg=""String_Node_Str"";
  String cbhPreDestroyMsg=""String_Node_Str"";
  String appClientMsg=""String_Node_Str"";
  client.startClient();
  assertAppMessage(cbhPostConstructMsg);
  assertAppMessage(mainPostConstructMsg);
  assertAppMessage(appClientMsg);
  assertAppMessage(cbhPreDestroyMsg);
}"
34821,"@Test public void testSystemExitFromClientMainWithNoDD() throws Exception {
  client.copyFileToLibertyClientRoot(""String_Node_Str"");
  ProgramOutput po=startProcess();
  System.out.println(""String_Node_Str"" + po.getStdout());
  System.out.println(""String_Node_Str"" + po.getStderr());
  assertStartMessages();
  assertAppMessage(""String_Node_Str"");
  assertNotAppMessage(""String_Node_Str"");
  assertAppMessage(""String_Node_Str"");
  assertNotAppMessage(""String_Node_Str"");
}","@Test public void testSystemExitFromClientMainWithNoDD() throws Exception {
  String APP_NAME=""String_Node_Str"";
  JavaArchive jar=ShrinkHelper.buildJavaArchive(APP_NAME + ""String_Node_Str"",""String_Node_Str"");
  EnterpriseArchive app=ShrinkWrap.create(EnterpriseArchive.class,APP_NAME + ""String_Node_Str"").addAsModule(jar).addAsManifestResource(new File(""String_Node_Str"" + APP_NAME + ""String_Node_Str""));
  ShrinkHelper.exportAppToClient(client,app);
  client.startClient();
  assertAppMessage(""String_Node_Str"");
  assertNotAppMessage(""String_Node_Str"");
  assertAppMessage(""String_Node_Str"");
  assertNotAppMessage(""String_Node_Str"");
}"
34822,"@Test public void testSystemExitFromClientMain() throws Exception {
  client.copyFileToLibertyClientRoot(""String_Node_Str"");
  ProgramOutput po=startProcess();
  System.out.println(""String_Node_Str"" + po.getStdout());
  System.out.println(""String_Node_Str"" + po.getStderr());
  assertStartMessages();
  assertAppMessage(""String_Node_Str"");
  assertNotAppMessage(""String_Node_Str"");
  assertAppMessage(""String_Node_Str"");
  assertNotAppMessage(""String_Node_Str"");
}","@Test public void testSystemExitFromClientMain() throws Exception {
  String APP_NAME=""String_Node_Str"";
  JavaArchive jar=ShrinkHelper.buildJavaArchive(APP_NAME + ""String_Node_Str"",""String_Node_Str"");
  EnterpriseArchive app=ShrinkWrap.create(EnterpriseArchive.class,APP_NAME + ""String_Node_Str"").addAsModule(jar).addAsManifestResource(new File(""String_Node_Str"" + APP_NAME + ""String_Node_Str""));
  ShrinkHelper.exportAppToClient(client,app);
  client.startClient();
  assertAppMessage(""String_Node_Str"");
  assertNotAppMessage(""String_Node_Str"");
  assertAppMessage(""String_Node_Str"");
  assertNotAppMessage(""String_Node_Str"");
}"
34823,"@Test public void testClientConfigDir() throws Exception {
  client.copyFileToLibertyClientRoot(""String_Node_Str"");
  String appClientMsg=""String_Node_Str"";
  startProcess();
  assertStartMessages();
  assertAppMessage(appClientMsg);
}","@Test public void testClientConfigDir() throws Exception {
  ShrinkHelper.exportAppToClient(client,earHAC);
  client.startClient();
  assertAppMessage(""String_Node_Str"");
}"
34824,"@Test public void testCallbackHandlerNoDefaultConstructor() throws Exception {
  client.copyFileToLibertyClientRoot(""String_Node_Str"");
  String errorMsg=""String_Node_Str"";
  startProcess();
  assertAppMessage(errorMsg);
}","@Test public void testCallbackHandlerNoDefaultConstructor() throws Exception {
  String APP_NAME=""String_Node_Str"";
  JavaArchive jar=ShrinkHelper.buildJavaArchive(APP_NAME + ""String_Node_Str"",""String_Node_Str"");
  EnterpriseArchive app=ShrinkWrap.create(EnterpriseArchive.class,APP_NAME + ""String_Node_Str"").addAsModule(jar).addAsManifestResource(new File(""String_Node_Str"" + APP_NAME + ""String_Node_Str""));
  ShrinkHelper.exportAppToClient(client,app);
  client.addIgnoreErrors(""String_Node_Str"",""String_Node_Str"" + APP_NAME,""String_Node_Str"" + APP_NAME);
  client.startClient();
  assertAppMessage(""String_Node_Str"");
}"
34825,"@Test public void testInAppClientContainerLookup() throws Exception {
  client.copyFileToLibertyClientRoot(""String_Node_Str"");
  String appClientMsg=""String_Node_Str"";
  startProcess();
  assertStartMessages();
  assertAppMessage(appClientMsg);
}","@Test public void testInAppClientContainerLookup() throws Exception {
  String APP_NAME=""String_Node_Str"";
  JavaArchive jar=ShrinkHelper.buildJavaArchive(APP_NAME + ""String_Node_Str"",""String_Node_Str"");
  EnterpriseArchive app=ShrinkWrap.create(EnterpriseArchive.class,APP_NAME + ""String_Node_Str"").addAsModule(jar).addAsManifestResource(new File(""String_Node_Str"" + APP_NAME + ""String_Node_Str""));
  ShrinkHelper.exportAppToClient(client,app);
  client.startClient();
  assertAppMessage(""String_Node_Str"");
}"
34826,"@Test public void testHelloAppClientNoClassDefFoundError() throws Exception {
  client.copyFileToLibertyClientRoot(""String_Node_Str"");
  String errorMsg=""String_Node_Str"";
  startProcess();
  assertAppMessage(errorMsg);
}","@Test public void testHelloAppClientNoClassDefFoundError() throws Exception {
  String APP_NAME=""String_Node_Str"";
  JavaArchive jar=ShrinkHelper.buildJavaArchive(APP_NAME + ""String_Node_Str"",""String_Node_Str"");
  EnterpriseArchive app=ShrinkWrap.create(EnterpriseArchive.class,APP_NAME + ""String_Node_Str"").addAsModule(jar).addAsManifestResource(new File(""String_Node_Str"" + APP_NAME + ""String_Node_Str""));
  ShrinkHelper.exportAppToClient(client,app);
  client.addIgnoreErrors(""String_Node_Str"" + APP_NAME,""String_Node_Str"" + APP_NAME);
  client.startClient();
  assertAppMessage(""String_Node_Str"");
}"
34827,"public String executeCustomFormLogin(HttpClient httpclient,String url,String username,String password,String viewState) throws Exception {
  String methodName=""String_Node_Str"";
  Log.info(logClass,methodName,""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str""+ password+ ""String_Node_Str""+ viewState);
  HttpPost postMethod=new HttpPost(url);
  List<NameValuePair> nvps=new ArrayList<NameValuePair>();
  nvps.add(new BasicNameValuePair(""String_Node_Str"",username));
  nvps.add(new BasicNameValuePair(""String_Node_Str"",password));
  nvps.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvps.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  if (viewState != null) {
    nvps.add(new BasicNameValuePair(""String_Node_Str"",viewState));
  }
  postMethod.setEntity(new UrlEncodedFormEntity(nvps,HTTP.UTF_8));
  HttpResponse response=httpclient.execute(postMethod);
  Log.info(logClass,methodName,""String_Node_Str"" + response.getStatusLine().getStatusCode());
  String content=EntityUtils.toString(response.getEntity());
  EntityUtils.consume(response.getEntity());
  System.out.println(""String_Node_Str"" + content);
  int status=response.getStatusLine().getStatusCode();
  assertTrue(""String_Node_Str"" + status,status == HttpServletResponse.SC_MOVED_TEMPORARILY);
  Header header=response.getFirstHeader(""String_Node_Str"");
  String location=header.getValue();
  Log.info(logClass,methodName,""String_Node_Str"" + location);
  return location;
}","public String executeCustomFormLogin(HttpClient httpclient,String url,String username,String password,String viewState) throws Exception {
  String methodName=""String_Node_Str"";
  Log.info(logClass,methodName,""String_Node_Str"" + url + ""String_Node_Str""+ username+ ""String_Node_Str""+ password+ ""String_Node_Str""+ viewState);
  HttpPost postMethod=new HttpPost(url);
  List<NameValuePair> nvps=new ArrayList<NameValuePair>();
  nvps.add(new BasicNameValuePair(""String_Node_Str"",username));
  nvps.add(new BasicNameValuePair(""String_Node_Str"",password));
  nvps.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvps.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  if (viewState != null) {
    nvps.add(new BasicNameValuePair(""String_Node_Str"",viewState));
  }
  postMethod.setEntity(new UrlEncodedFormEntity(nvps,HTTP.UTF_8));
  HttpResponse response=httpclient.execute(postMethod);
  Log.info(logClass,methodName,""String_Node_Str"" + response.getStatusLine().getStatusCode());
  String content=EntityUtils.toString(response.getEntity());
  EntityUtils.consume(response.getEntity());
  Log.info(logClass,methodName,""String_Node_Str"" + content);
  int status=response.getStatusLine().getStatusCode();
  assertTrue(""String_Node_Str"" + status,status == HttpServletResponse.SC_MOVED_TEMPORARILY);
  Header header=response.getFirstHeader(""String_Node_Str"");
  String location=header.getValue();
  Log.info(logClass,methodName,""String_Node_Str"" + location);
  return location;
}"
34828,"public static void createJar(LibertyServer server,String dir,String jarName,boolean addJarResources,String... packageNames) throws Exception {
  String baseDir=DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir+ ""String_Node_Str"";
  JavaArchive jar=null;
  if (jarName != null) {
    LOG.info(""String_Node_Str"" + jarName + ""String_Node_Str""+ addJarResources);
    jar=ShrinkWrap.create(JavaArchive.class,jarName);
    if (packageNames != null) {
      for (      String packageName : packageNames) {
        if (packageName.contains(""String_Node_Str"")) {
          jar.addPackage(packageName);
        }
      }
    }
    if (addJarResources)     ShrinkHelper.addDirectory(jar,""String_Node_Str"" + jarName + ""String_Node_Str"");
  }
  ShrinkHelper.exportArtifact(jar,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir);
}","public static void createJar(LibertyServer server,String dir,String jarName,boolean addJarResources,String... packageNames) throws Exception {
  String baseDir=DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir+ ""String_Node_Str"";
  JavaArchive jar=null;
  if (jarName != null) {
    LOG.info(""String_Node_Str"" + jarName + ""String_Node_Str""+ addJarResources);
    jar=ShrinkWrap.create(JavaArchive.class,jarName);
    if (packageNames != null) {
      for (      String packageName : packageNames) {
        if (packageName.contains(""String_Node_Str"")) {
          jar.addPackage(packageName);
        }
      }
    }
    if (addJarResources)     ShrinkHelper.addDirectory(jar,""String_Node_Str"" + jarName + ""String_Node_Str"");
  }
  ShrinkHelper.exportArtifact(jar,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir,true,true);
}"
34829,"private static void addEarToServer(LibertyServer server,String dir,String earName,boolean addEarResources,String warName,boolean addWarResources,String jarName,boolean addJarResources,String... packageNames) throws Exception {
  if (warName == null)   return;
  if (server.isStarted()) {
    String appName=warName.substring(0,warName.indexOf(""String_Node_Str""));
    Set<String> appInstalled=server.getInstalledAppNames(appName);
    LOG.info(""String_Node_Str"" + appName + ""String_Node_Str""+ !appInstalled.isEmpty());
    if (!appInstalled.isEmpty())     return;
  }
  JavaArchive jar=null;
  WebArchive war=null;
  if (jarName != null) {
    LOG.info(""String_Node_Str"" + jarName + ""String_Node_Str""+ addJarResources);
    jar=ShrinkWrap.create(JavaArchive.class,jarName);
    if (packageNames != null) {
      for (      String packageName : packageNames) {
        if (packageName.contains(""String_Node_Str"")) {
          jar.addPackage(packageName);
        }
      }
    }
    if (addJarResources)     ShrinkHelper.addDirectory(jar,""String_Node_Str"" + jarName + ""String_Node_Str"");
  }
  war=ShrinkWrap.create(WebArchive.class,warName);
  LOG.info(""String_Node_Str"" + warName + ""String_Node_Str""+ addWarResources);
  if (packageNames != null) {
    for (    String packageName : packageNames) {
      if (packageName.contains(""String_Node_Str"")) {
        war.addPackage(packageName);
      }
    }
  }
  if (jar != null)   war.addAsLibrary(jar);
  if (addWarResources)   ShrinkHelper.addDirectory(war,""String_Node_Str"" + warName + ""String_Node_Str"");
  boolean deploy=false;
  if (dir.equals(DIR_APPS) || dir.equals(DIR_DROPINS)) {
    deploy=true;
  }
  if (earName != null) {
    LOG.info(""String_Node_Str"" + earName + ""String_Node_Str""+ addEarResources);
    EnterpriseArchive ear=ShrinkWrap.create(EnterpriseArchive.class,earName);
    ear.addAsModule(war);
    if (addEarResources) {
      ShrinkHelper.addDirectory(ear,""String_Node_Str"" + earName + ""String_Node_Str"");
    }
    if (deploy) {
      ShrinkHelper.exportToServer(server,dir,ear);
    }
 else {
      ShrinkHelper.exportArtifact(ear,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir);
    }
  }
 else {
    if (deploy) {
      ShrinkHelper.exportToServer(server,dir,war);
    }
 else {
      ShrinkHelper.exportArtifact(war,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir);
    }
  }
}","private static void addEarToServer(LibertyServer server,String dir,String earName,boolean addEarResources,String warName,boolean addWarResources,String jarName,boolean addJarResources,String... packageNames) throws Exception {
  if (warName == null)   return;
  if (server.isStarted()) {
    String appName=warName.substring(0,warName.indexOf(""String_Node_Str""));
    Set<String> appInstalled=server.getInstalledAppNames(appName);
    LOG.info(""String_Node_Str"" + appName + ""String_Node_Str""+ !appInstalled.isEmpty());
    if (!appInstalled.isEmpty())     return;
  }
  JavaArchive jar=null;
  WebArchive war=null;
  if (jarName != null) {
    LOG.info(""String_Node_Str"" + jarName + ""String_Node_Str""+ addJarResources);
    jar=ShrinkWrap.create(JavaArchive.class,jarName);
    if (packageNames != null) {
      for (      String packageName : packageNames) {
        if (packageName.contains(""String_Node_Str"")) {
          jar.addPackage(packageName);
        }
      }
    }
    if (addJarResources)     ShrinkHelper.addDirectory(jar,""String_Node_Str"" + jarName + ""String_Node_Str"");
  }
  war=ShrinkWrap.create(WebArchive.class,warName);
  LOG.info(""String_Node_Str"" + warName + ""String_Node_Str""+ addWarResources);
  if (packageNames != null) {
    for (    String packageName : packageNames) {
      if (packageName.contains(""String_Node_Str"")) {
        war.addPackage(packageName);
      }
    }
  }
  if (jar != null)   war.addAsLibrary(jar);
  if (addWarResources)   ShrinkHelper.addDirectory(war,""String_Node_Str"" + warName + ""String_Node_Str"");
  boolean deploy=false;
  if (dir.equals(DIR_APPS) || dir.equals(DIR_DROPINS)) {
    deploy=true;
  }
  if (earName != null) {
    LOG.info(""String_Node_Str"" + earName + ""String_Node_Str""+ addEarResources);
    EnterpriseArchive ear=ShrinkWrap.create(EnterpriseArchive.class,earName);
    ear.addAsModule(war);
    if (addEarResources) {
      ShrinkHelper.addDirectory(ear,""String_Node_Str"" + earName + ""String_Node_Str"");
    }
    if (deploy) {
      deleteFileIfExist(""String_Node_Str"" + server.getServerName() + ""String_Node_Str""+ dir+ ""String_Node_Str""+ ear.getName());
      ShrinkHelper.exportToServer(server,dir,ear);
    }
 else {
      ShrinkHelper.exportArtifact(ear,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir,true,true);
    }
  }
 else {
    if (deploy) {
      deleteFileIfExist(""String_Node_Str"" + server.getServerName() + ""String_Node_Str""+ dir+ ""String_Node_Str""+ war.getName());
      ShrinkHelper.exportToServer(server,dir,war);
    }
 else {
      ShrinkHelper.exportArtifact(war,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir,true,true);
    }
  }
}"
34830,"public static void packageWarsToEar(LibertyServer server,String dir,String earName,boolean addEarResources,String... warFiles) throws Exception {
  String baseDir=DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir+ ""String_Node_Str"";
  EnterpriseArchive ear=ShrinkWrap.create(EnterpriseArchive.class,earName);
  if (addEarResources) {
    ShrinkHelper.addDirectory(ear,""String_Node_Str"" + earName + ""String_Node_Str"");
  }
  for (  String warFile : warFiles) {
    WebArchive war=ShrinkWrap.createFromZipFile(WebArchive.class,new File(baseDir + warFile));
    ear.addAsModule(war);
  }
  ShrinkHelper.exportArtifact(ear,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir);
}","public static void packageWarsToEar(LibertyServer server,String dir,String earName,boolean addEarResources,String... warFiles) throws Exception {
  String baseDir=DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir+ ""String_Node_Str"";
  EnterpriseArchive ear=ShrinkWrap.create(EnterpriseArchive.class,earName);
  if (addEarResources) {
    ShrinkHelper.addDirectory(ear,""String_Node_Str"" + earName + ""String_Node_Str"");
  }
  for (  String warFile : warFiles) {
    WebArchive war=ShrinkWrap.createFromZipFile(WebArchive.class,new File(baseDir + warFile));
    ear.addAsModule(war);
  }
  ShrinkHelper.exportArtifact(ear,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir,true,true);
}"
34831,"public static void exportEar(LibertyServer server,String dir,EnterpriseArchive ear) throws Exception {
  ShrinkHelper.exportArtifact(ear,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir);
}","public static void exportEar(LibertyServer server,String dir,EnterpriseArchive ear) throws Exception {
  ShrinkHelper.exportArtifact(ear,DIR_PUBLISH + server.getServerName() + ""String_Node_Str""+ dir,true,true);
}"
34832,"/** 
 * Setup the SSL engine for the given context.
 * @param context used to build the engine
 * @param type to determine if connection is inbound or outbound
 * @param config SSL channel configuration
 * @return SSLEngine
 */
public static SSLEngine getSSLEngine(SSLContext context,FlowType type,SSLLinkConfig config){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  SSLEngine engine=context.createSSLEngine();
  configureEngine(engine,type,config);
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"" + engine.hashCode());
  }
  return engine;
}","/** 
 * Setup the SSL engine for the given context.
 * @param context used to build the engine
 * @param type to determine if connection is inbound or outbound
 * @param config SSL channel configuration
 * @return SSLEngine
 */
public static SSLEngine getSSLEngine(SSLContext context,FlowType type,SSLLinkConfig config){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"");
  }
  SSLEngine engine=context.createSSLEngine();
  grizzlyAlpnNegotiator.tryToUseGrizzlyJdk8Alpn(engine);
  configureEngine(engine,type,config);
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"" + engine.hashCode());
  }
  return engine;
}"
34833,"/** 
 * Create an SSL engine with the input parameters. The host and port values allow the re-use of possible cached SSL session ids.
 * @param context
 * @param config
 * @param host
 * @param port
 * @return SSLEngine
 */
public static SSLEngine getOutboundSSLEngine(SSLContext context,SSLLinkConfig config,String host,int port){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"" + host + ""String_Node_Str""+ port);
  }
  SSLEngine engine=context.createSSLEngine(host,port);
  configureEngine(engine,FlowType.OUTBOUND,config);
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"" + engine.hashCode());
  }
  return engine;
}","/** 
 * Create an SSL engine with the input parameters. The host and port values allow the re-use of possible cached SSL session ids.
 * @param context
 * @param config
 * @param host
 * @param port
 * @return SSLEngine
 */
public static SSLEngine getOutboundSSLEngine(SSLContext context,SSLLinkConfig config,String host,int port){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"" + host + ""String_Node_Str""+ port);
  }
  SSLEngine engine=context.createSSLEngine(host,port);
  grizzlyAlpnNegotiator.tryToUseGrizzlyJdk8Alpn(engine);
  configureEngine(engine,FlowType.OUTBOUND,config);
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"" + engine.hashCode());
  }
  return engine;
}"
34834,"@Override public void run(){
synchronized (linkStatusSync) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + linkStatus + ""String_Node_Str""+ hcDebug);
    }
    if (linkStatus != LINK_STATUS.WAIT_TO_SEND_GOAWAY) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + hcDebug);
      }
      return;
    }
    linkStatus=LINK_STATUS.GOAWAY_SENDING;
  }
  try {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + hcDebug);
    }
    streamTable.get(0).sendGOAWAYFrame(new Http2Exception(""String_Node_Str""));
  }
 catch (  Exception x) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + hcDebug + ""String_Node_Str""+ x);
    }
  }
 finally {
    closeConnectionLink(e);
  }
}","@Override public void run(){
synchronized (linkStatusSync) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + linkStatus + ""String_Node_Str""+ hcDebug);
    }
    if (linkStatus != LINK_STATUS.WAIT_TO_SEND_GOAWAY) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + hcDebug);
      }
      return;
    }
    linkStatus=LINK_STATUS.GOAWAY_SENDING;
  }
  try {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + hcDebug);
    }
    if (e == null) {
      streamTable.get(0).sendGOAWAYFrame(new Http2Exception(""String_Node_Str""));
    }
 else     if (e instanceof Http2Exception) {
      streamTable.get(0).sendGOAWAYFrame((Http2Exception)e);
    }
 else {
      streamTable.get(0).sendGOAWAYFrame(new Http2Exception(e.getMessage()));
    }
  }
 catch (  Exception x) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + hcDebug + ""String_Node_Str""+ x);
    }
  }
 finally {
    closeConnectionLink(e);
  }
}"
34835,"@Trivial @Override public boolean handleContent(DDParser parser) throws ParseException {
  parser.skipSubtree();
  return true;
}","@Trivial @Override public boolean handleContent(DDParser parser) throws ParseException {
  return true;
}"
34836,"public static <T>T readYamlValue(String contents,Class<T> expectedType){
  org.yaml.snakeyaml.Yaml yaml=new org.yaml.snakeyaml.Yaml();
  return Json.mapper().convertValue(yaml.load(contents),expectedType);
}","public static <T>T readYamlValue(String contents,Class<T> expectedType){
  org.yaml.snakeyaml.Yaml yaml=new org.yaml.snakeyaml.Yaml(new SafeConstructor());
  return Json.mapper().convertValue(yaml.load(contents),expectedType);
}"
34837,"public static JsonNode readYamlTree(String contents){
  org.yaml.snakeyaml.Yaml yaml=new org.yaml.snakeyaml.Yaml();
  return Json.mapper().convertValue(yaml.load(contents),JsonNode.class);
}","public static JsonNode readYamlTree(String contents){
  org.yaml.snakeyaml.Yaml yaml=new org.yaml.snakeyaml.Yaml(new SafeConstructor());
  return Json.mapper().convertValue(yaml.load(contents),JsonNode.class);
}"
34838,"/** 
 * Finish building the current frame: process its payload and pass it to the Stream Processor
 * @throws ProtocolException
 */
public void processCompleteFrame() throws Http2Exception {
  Frame currentFrame=getCurrentFrame();
  boolean frameSizeError=false;
  try {
    currentFrame.processPayload(this);
  }
 catch (  FrameSizeException e) {
    if (!e.isConnectionError()) {
      frameSizeError=true;
    }
 else {
      throw e;
    }
  }
  int streamId=currentFrame.getStreamId();
  H2StreamProcessor stream=muxLink.getStream(streamId);
  if (stream != null && stream.isStreamClosed() && muxLink.significantlyPastCloseTime(streamId)) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + streamId);
    }
    throw new ProtocolException(""String_Node_Str"");
  }
  if (stream == null && streamId < muxLink.getHighestClientStreamId()) {
    throw new ProtocolException(""String_Node_Str"" + streamId);
  }
  if (stream == null && (streamId != 0) && (streamId % 2 == 0)) {
    throw new ProtocolException(""String_Node_Str"" + streamId);
  }
  if (frameSizeError) {
    currentFrame=new FrameRstStream(streamId,Constants.FRAME_SIZE_ERROR,false);
  }
  if (stream == null) {
    stream=startNewInboundSession(streamId);
  }
  stream.processNextFrame(currentFrame,Direction.READ_IN);
}","/** 
 * Finish building the current frame: process its payload and pass it to the Stream Processor
 * @throws ProtocolException
 */
public void processCompleteFrame() throws Http2Exception {
  Frame currentFrame=getCurrentFrame();
  boolean frameSizeError=false;
  try {
    currentFrame.processPayload(this);
  }
 catch (  FrameSizeException e) {
    if (!e.isConnectionError()) {
      frameSizeError=true;
    }
 else {
      throw e;
    }
  }
catch (  Exception e) {
    throw new ProtocolException(""String_Node_Str"" + currentFrame);
  }
  int streamId=currentFrame.getStreamId();
  H2StreamProcessor stream=muxLink.getStream(streamId);
  if (stream != null && stream.isStreamClosed() && muxLink.significantlyPastCloseTime(streamId)) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + streamId);
    }
    throw new ProtocolException(""String_Node_Str"");
  }
  if (stream == null && (streamId != 0) && (streamId % 2 == 0)) {
    throw new ProtocolException(""String_Node_Str"" + streamId);
  }
  if (frameSizeError) {
    currentFrame=new FrameRstStream(streamId,Constants.FRAME_SIZE_ERROR,false);
  }
  if (stream == null) {
    stream=startNewInboundSession(streamId);
  }
  stream.processNextFrame(currentFrame,Direction.READ_IN);
}"
34839,"public int processNextBuffer(@Sensitive WsByteBuffer buf) throws ProtocolException, FrameSizeException {
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + frameState);
  }
  if (frameState == FrameState.PAYLOAD_COMPLETE) {
    return Constants.BP_FRAME_ALREADY_COMPLETE;
  }
  if (countOfBuffers >= frameBuffers.length) {
    int originalSize=frameBuffers.length;
    WsByteBuffer[] temp=new WsByteBuffer[originalSize + BUFFER_ARRAY_GROWTH_SIZE];
    System.arraycopy(frameBuffers,0,temp,0,originalSize);
    frameBuffers=temp;
  }
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + countOfBuffers);
  }
  frameBuffers[countOfBuffers]=buf;
  countOfBuffers++;
  if (muxLink != null && muxLink.connection_preface_string_rcvd == false) {
    long bytesToProcess=bytesRemaining();
    if (bytesToProcess < 24) {
      return Constants.BP_FRAME_IS_NOT_COMPLETE;
    }
    currentBufferArrayIndex=0;
    try {
      if (checkConnectionPreface()) {
        frameState=FrameState.INIT;
        muxLink.processConnectionPrefaceMagic();
      }
 else {
        throw new ProtocolException(""String_Node_Str"");
      }
    }
 catch (    FrameSizeException e1) {
      throw new ProtocolException(""String_Node_Str"");
    }
  }
  if (frameState == FrameState.INIT) {
    byte frameSixthByte;
    long bytesToProcess=bytesRemaining();
    if (bytesToProcess < Frame.SIZE_FRAME_BEFORE_PAYLOAD) {
      return Constants.BP_FRAME_IS_NOT_COMPLETE;
    }
    currentBufferArrayIndex=0;
    int payloadLength=grabNext24BitInt();
    byteFrameType=grabNextByte();
    byte flags=grabNextByte();
    frameSixthByte=grabNextByte();
    int frameReserveBit=(byte)(frameSixthByte & Constants.MASK_80);
    if (frameReserveBit != 0) {
      frameReserveBit=1;
    }
    frameSixthByte=(byte)(frameSixthByte & Constants.MASK_7F);
    int streamId=new Integer(grabNext24BitInt(frameSixthByte));
    this.currentFrame=FrameFactory.getFrame(byteFrameType,streamId,payloadLength,flags,frameReserveBit == 1,Frame.FrameDirection.READ);
    frameState=FrameState.FIND_PAYLOAD;
  }
  if (currentFrame != null && frameState == FrameState.FIND_PAYLOAD) {
    int returnValue=Constants.BP_FRAME_IS_NOT_COMPLETE;
    long count=0;
    int remaining=0;
    for (int i=0; i < countOfBuffers; i++) {
      remaining=frameBuffers[i].remaining();
      if (count + remaining <= currentFrame.getPayloadLength()) {
        count+=remaining;
        if (count == currentFrame.getPayloadLength()) {
          frameState=FrameState.PAYLOAD_COMPLETE;
          returnValue=Constants.BP_FRAME_EXACTLY_COMPLETED;
        }
      }
 else {
        int nextPosition=frameBuffers[i].position() + ((int)(currentFrame.getPayloadLength() - count));
        frameState=FrameState.PAYLOAD_COMPLETE;
        returnValue=nextPosition;
      }
    }
    return returnValue;
  }
  ProtocolException e=new ProtocolException(""String_Node_Str"");
  throw e;
}","public int processNextBuffer(@Sensitive WsByteBuffer buf) throws ProtocolException, FrameSizeException {
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + frameState);
  }
  if (frameState == FrameState.PAYLOAD_COMPLETE) {
    return Constants.BP_FRAME_ALREADY_COMPLETE;
  }
  if (countOfBuffers >= frameBuffers.length) {
    int originalSize=frameBuffers.length;
    WsByteBuffer[] temp=new WsByteBuffer[originalSize + BUFFER_ARRAY_GROWTH_SIZE];
    System.arraycopy(frameBuffers,0,temp,0,originalSize);
    frameBuffers=temp;
  }
  if (tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + countOfBuffers);
  }
  frameBuffers[countOfBuffers]=buf;
  countOfBuffers++;
  if (muxLink != null && muxLink.connection_preface_string_rcvd == false) {
    long bytesToProcess=bytesRemaining();
    if (bytesToProcess < 24) {
      return Constants.BP_FRAME_IS_NOT_COMPLETE;
    }
    currentBufferArrayIndex=0;
    try {
      if (checkConnectionPreface()) {
        frameState=FrameState.INIT;
        muxLink.processConnectionPrefaceMagic();
      }
 else {
        throw new ProtocolException(""String_Node_Str"");
      }
    }
 catch (    FrameSizeException e1) {
      throw new ProtocolException(""String_Node_Str"");
    }
  }
  if (frameState == FrameState.INIT) {
    byte frameSixthByte;
    long bytesToProcess=bytesRemaining();
    if (bytesToProcess < Frame.SIZE_FRAME_BEFORE_PAYLOAD) {
      return Constants.BP_FRAME_IS_NOT_COMPLETE;
    }
    currentBufferArrayIndex=0;
    int payloadLength=grabNext24BitInt();
    byteFrameType=grabNextByte();
    byte flags=grabNextByte();
    frameSixthByte=grabNextByte();
    int frameReserveBit=(byte)(frameSixthByte & Constants.MASK_80);
    if (frameReserveBit != 0) {
      frameReserveBit=1;
    }
    frameSixthByte=(byte)(frameSixthByte & Constants.MASK_7F);
    int streamId=new Integer(grabNext24BitInt(frameSixthByte));
    this.currentFrame=FrameFactory.getFrame(byteFrameType,streamId,payloadLength,flags,frameReserveBit == 1,Frame.FrameDirection.READ);
    if (this.currentFrame.getFrameType() == FrameTypes.UNKNOWN) {
      if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
    frameState=FrameState.FIND_PAYLOAD;
  }
  if (currentFrame != null && frameState == FrameState.FIND_PAYLOAD) {
    int returnValue=Constants.BP_FRAME_IS_NOT_COMPLETE;
    long count=0;
    int remaining=0;
    for (int i=0; i < countOfBuffers; i++) {
      remaining=frameBuffers[i].remaining();
      if (count + remaining <= currentFrame.getPayloadLength()) {
        count+=remaining;
        if (count == currentFrame.getPayloadLength()) {
          frameState=FrameState.PAYLOAD_COMPLETE;
          returnValue=Constants.BP_FRAME_EXACTLY_COMPLETED;
        }
      }
 else {
        int nextPosition=frameBuffers[i].position() + ((int)(currentFrame.getPayloadLength() - count));
        frameState=FrameState.PAYLOAD_COMPLETE;
        returnValue=nextPosition;
      }
    }
    return returnValue;
  }
  ProtocolException e=new ProtocolException(""String_Node_Str"");
  throw e;
}"
34840,"public void triggerStreamClose(H2StreamProcessor streamProcessor){
  if (closeTable.size() >= 512) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    purgeCloseTable();
  }
  streamProcessor.setCloseTime(System.nanoTime());
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamProcessor.myID);
  }
  closeTable.put(streamProcessor.myID,streamProcessor);
  streamTable.remove(streamProcessor.myID);
}","public void triggerStreamClose(H2StreamProcessor streamProcessor){
  if (closeTable.size() >= 512) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    purgeCloseTable();
  }
  streamProcessor.setCloseTime(System.nanoTime());
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamProcessor.getId());
  }
  closeTable.put(streamProcessor.getId(),streamProcessor);
  streamTable.remove(streamProcessor.getId());
}"
34841,"public H2StreamProcessor getStream(int streamID){
  H2StreamProcessor streamProcessor=null;
  streamProcessor=streamTable.get(streamID);
  if (streamProcessor == null) {
    streamProcessor=closeTable.get(streamID);
  }
  return streamProcessor;
}","/** 
 * Get the stream processor for a given stream ID, if it exists
 * @param streamID of the desired stream
 * @return a stream object if it's in the open or close table, or null if theID is new or has already been removed from the close table
 */
public H2StreamProcessor getStream(int streamID){
  H2StreamProcessor streamProcessor=null;
  streamProcessor=streamTable.get(streamID);
  if (streamProcessor == null) {
    streamProcessor=closeTable.get(streamID);
  }
  return streamProcessor;
}"
34842,"@Override public void close(VirtualConnection inVC,Exception e){
synchronized (linkStatusSync) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + linkStatus + ""String_Node_Str""+ this.hashCode());
    }
    if ((linkStatus == LINK_STATUS.CLOSING) || (linkStatus == LINK_STATUS.GOAWAY_SENDING) || (linkStatus == LINK_STATUS.WAIT_TO_SEND_GOAWAY)) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + this.hashCode());
      }
      return;
    }
    if (e == null) {
      H2StreamProcessor stream;
      for (      Integer i : streamTable.keySet()) {
        stream=streamTable.get(i);
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + stream.myID);
        }
        if (stream.myID != 0 && !stream.isHalfClosed() && !stream.isStreamClosed() && highestLocalStreamId > -1) {
          continue;
        }
 else {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"" + stream.myID + ""String_Node_Str""+ this.hashCode());
          }
          return;
        }
      }
    }
    linkStatus=LINK_STATUS.WAIT_TO_SEND_GOAWAY;
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + this.hashCode());
    }
    ScheduledExecutorService scheduler=CHFWBundle.getScheduledExecutorService();
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + scheduler + ""String_Node_Str""+ config);
    }
    connTimeout=new H2ConnectionTimeout(initialVC,e);
    if (e == null) {
      closeFuture=scheduler.schedule(connTimeout,config.getH2ConnCloseTimeout(),TimeUnit.SECONDS);
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
      connTimeout.run();
    }
  }
}","@Override public void close(VirtualConnection inVC,Exception e){
synchronized (linkStatusSync) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + linkStatus + ""String_Node_Str""+ this.hashCode());
    }
    if ((linkStatus == LINK_STATUS.CLOSING) || (linkStatus == LINK_STATUS.GOAWAY_SENDING) || (linkStatus == LINK_STATUS.WAIT_TO_SEND_GOAWAY)) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + this.hashCode());
      }
      return;
    }
    if (e == null) {
      H2StreamProcessor stream;
      for (      Integer i : streamTable.keySet()) {
        stream=streamTable.get(i);
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + stream.getId());
        }
        if (stream.getId() != 0 && !stream.isHalfClosed() && !stream.isStreamClosed() && highestLocalStreamId > -1) {
          continue;
        }
 else {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"" + stream.getId() + ""String_Node_Str""+ this.hashCode());
          }
          return;
        }
      }
    }
    linkStatus=LINK_STATUS.WAIT_TO_SEND_GOAWAY;
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + ""String_Node_Str"" + this.hashCode());
    }
    ScheduledExecutorService scheduler=CHFWBundle.getScheduledExecutorService();
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + scheduler + ""String_Node_Str""+ config);
    }
    connTimeout=new H2ConnectionTimeout(initialVC,e);
    if (e == null) {
      closeFuture=scheduler.schedule(connTimeout,config.getH2ConnCloseTimeout(),TimeUnit.SECONDS);
    }
 else {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
      connTimeout.run();
    }
  }
}"
34843,"@Override public void destroy(Exception e){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  H2StreamProcessor stream;
  for (  Integer i : streamTable.keySet()) {
    stream=streamTable.get(i);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + stream + ""String_Node_Str""+ stream.myID);
    }
    if (stream.myID != 0) {
      stream.h2HttpInboundLinkWrap.destroy(e);
    }
  }
  initialVC=null;
  frameReadProcessor=null;
  h2MuxReadCallback=null;
  h2MuxTCPConnectionContext=null;
  h2MuxTCPReadContext=null;
  h2MuxTCPWriteContext=null;
  connectionSettings=null;
  readContextTable=null;
  writeContextTable=null;
  super.destroy(e);
}","@Override public void destroy(Exception e){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  H2StreamProcessor stream;
  for (  Integer i : streamTable.keySet()) {
    stream=streamTable.get(i);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + stream + ""String_Node_Str""+ stream.getId());
    }
    if (stream.getId() != 0) {
      stream.getWrappedInboundLink().destroy(e);
    }
  }
  initialVC=null;
  frameReadProcessor=null;
  h2MuxReadCallback=null;
  h2MuxTCPConnectionContext=null;
  h2MuxTCPReadContext=null;
  h2MuxTCPWriteContext=null;
  connectionSettings=null;
  readContextTable=null;
  writeContextTable=null;
  super.destroy(e);
}"
34844,"public H2StreamProcessor createNewInboundLink(Integer streamID){
  if ((streamID & 1) == 0) {
    if (streamID > highestLocalStreamId) {
      highestLocalStreamId=streamID;
    }
  }
 else {
    if (streamID > highestClientStreamId) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + streamID);
      }
      highestClientStreamId=streamID;
    }
  }
  H2VirtualConnectionImpl h2VC=new H2VirtualConnectionImpl(initialVC);
  h2VC.getStateMap().remove(HttpDispatcherLink.LINK_ID);
  H2HttpInboundLinkWrap link=new H2HttpInboundLinkWrap(httpInboundChannel,h2VC,streamID,this);
  H2StreamProcessor stream=new H2StreamProcessor(streamID,link,this);
  writeQ.addNewNodeToQ(streamID,Node.ROOT_STREAM_ID,Node.DEFAULT_NODE_PRIORITY,false);
  streamTable.put(streamID,stream);
  return stream;
}","public H2StreamProcessor createNewInboundLink(Integer streamID){
  H2VirtualConnectionImpl h2VC=new H2VirtualConnectionImpl(initialVC);
  h2VC.getStateMap().remove(HttpDispatcherLink.LINK_ID);
  H2HttpInboundLinkWrap link=new H2HttpInboundLinkWrap(httpInboundChannel,h2VC,streamID,this);
  H2StreamProcessor stream=new H2StreamProcessor(streamID,link,this);
  writeQ.addNewNodeToQ(streamID,Node.ROOT_STREAM_ID,Node.DEFAULT_NODE_PRIORITY,false);
  streamTable.put(streamID,stream);
  return stream;
}"
34845,"/** 
 * Tests that the expected exception is thrown if the MBean resume method is issued when no pauseable components exist
 * @throws Exception
 */
@AllowedFFDC(PAUSEABLE_EXCEPTION_CLASS) @Test public void testResumeAllNoPauseableComponents() throws Exception {
  final String METHOD_NAME=""String_Node_Str"";
  Log.entering(c,METHOD_NAME);
  boolean noException=true;
  restoreSavedConfig=true;
  server.setMarkToEndOfLog();
  server.changeFeatures(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  assertNotNull(""String_Node_Str"",server.waitForConfigUpdateInLogUsingMark(null,true));
  try {
    server.setMarkToEndOfLog();
    mbean.resume();
  }
 catch (  MBeanException e) {
    Log.info(c,METHOD_NAME,""String_Node_Str"" + e.getCause());
    noException=false;
  }
  final String res=server.waitForStringInLog(""String_Node_Str"");
  if (noException && (""String_Node_Str"".equals(res) || res == null)) {
    fail(""String_Node_Str"");
  }
  Log.exiting(c,METHOD_NAME);
}","/** 
 * Tests that the expected exception is thrown if the MBean resume all method is issued when no pauseable components exist
 * @throws Exception
 */
@ExpectedFFDC(PAUSEABLE_EXCEPTION_CLASS) @Test public void testResumeAllNoPauseableComponents() throws Exception {
  final String METHOD_NAME=""String_Node_Str"";
  Log.entering(c,METHOD_NAME);
  restoreSavedConfig=true;
  server.setMarkToEndOfLog();
  server.changeFeatures(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  assertNotNull(""String_Node_Str"",server.waitForConfigUpdateInLogUsingMark(null,true));
  try {
    server.setMarkToEndOfLog();
    mbean.resume();
    fail(""String_Node_Str"");
  }
 catch (  MBeanException e) {
  }
  assertNotNull(""String_Node_Str"",server.waitForStringInLog(""String_Node_Str""));
  Log.exiting(c,METHOD_NAME);
}"
34846,"/** 
 * Tests that the expected warning log is emitted if the MBean pause method is issued with no targets when no pauseable components exist
 * @throws Exception
 */
@AllowedFFDC(PAUSEABLE_EXCEPTION_CLASS) @Test public void testPauseAllNoPauseableComponents() throws Exception {
  final String METHOD_NAME=""String_Node_Str"";
  Log.entering(c,METHOD_NAME);
  boolean noException=true;
  restoreSavedConfig=true;
  server.setMarkToEndOfLog();
  server.changeFeatures(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  assertNotNull(""String_Node_Str"",server.waitForConfigUpdateInLogUsingMark(null,true));
  try {
    server.setMarkToEndOfLog();
    mbean.pause();
  }
 catch (  MBeanException e) {
    noException=false;
  }
  final String res=server.waitForStringInLog(""String_Node_Str"");
  if (noException && (""String_Node_Str"".equals(res) || res == null)) {
    fail(""String_Node_Str"");
  }
  Log.exiting(c,METHOD_NAME);
}","/** 
 * Tests that the expected exception is emitted if the MBean pause all method is issued when no pauseable components exist
 * @throws Exception
 */
@ExpectedFFDC(PAUSEABLE_EXCEPTION_CLASS) @Test public void testPauseAllNoPauseableComponents() throws Exception {
  final String METHOD_NAME=""String_Node_Str"";
  Log.entering(c,METHOD_NAME);
  restoreSavedConfig=true;
  server.setMarkToEndOfLog();
  server.changeFeatures(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  assertNotNull(""String_Node_Str"",server.waitForConfigUpdateInLogUsingMark(null,true));
  try {
    server.setMarkToEndOfLog();
    mbean.pause();
    fail(""String_Node_Str"");
  }
 catch (  MBeanException e) {
  }
  assertNotNull(""String_Node_Str"",server.waitForStringInLog(""String_Node_Str""));
  Log.exiting(c,METHOD_NAME);
}"
34847,"protected void connectionErrorOccurred(ConnectionEvent connectionEvent){
  final boolean isTracingEnabled=TraceComponent.isAnyTracingEnabled();
  if (poolState.get() == 50) {
    if (isTracingEnabled && tc.isDebugEnabled()) {
      Tr.debug(this,tc,""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str"");
    }
    do_not_reuse_mcw=true;
  }
 else {
    try {
      if (!stale) {
        if (connectionEvent.getId() != com.ibm.websphere.j2c.ConnectionEvent.SINGLE_CONNECTION_ERROR_OCCURRED) {
          pm.fatalErrorNotification(_managedConnectionFactory,this,uowCoord);
        }
 else {
          this.markStale();
        }
      }
    }
 catch (    Exception e) {
      if (isTracingEnabled && tc.isDebugEnabled()) {
        String pmiName=""String_Node_Str"";
        if (cm != null) {
          pmiName=gConfigProps.cfName;
        }
        Tr.debug(this,tc,""String_Node_Str"" + pmiName + ""String_Node_Str"",e);
      }
      com.ibm.ws.ffdc.FFDCFilter.processException(e,""String_Node_Str"",""String_Node_Str"",this);
    }
    if ((this.getTranWrapperId() == MCWrapper.NOTXWRAPPER) || (this.getTranWrapperId() == MCWrapper.RRSLOCALTXWRAPPER) || (this.getTranWrapperId() == MCWrapper.NONE)|| (state != STATE_TRAN_WRAPPER_INUSE && state != STATE_INACTIVE)) {
      if (this.getTranWrapperId() == MCWrapper.NOTXWRAPPER || this.getTranWrapperId() == MCWrapper.RRSLOCALTXWRAPPER) {
        if (isTracingEnabled && tc.isDebugEnabled()) {
          Tr.debug(this,tc,""String_Node_Str"" + getTranWrapperString());
        }
        this.transactionComplete();
      }
      this.clearHandleList();
      try {
        this.releaseToPoolManager();
      }
 catch (      Exception ex) {
        com.ibm.ws.ffdc.FFDCFilter.processException(ex,""String_Node_Str"",""String_Node_Str"",this);
        if (isTracingEnabled && tc.isDebugEnabled()) {
          Tr.debug(this,tc,""String_Node_Str"" + gConfigProps.cfName + ""String_Node_Str"",ex);
        }
      }
    }
 else {
      if (isTracingEnabled && tc.isDebugEnabled()) {
        Tr.debug(this,tc,""String_Node_Str"");
      }
    }
  }
}","protected void connectionErrorOccurred(ConnectionEvent connectionEvent){
  final boolean isTracingEnabled=TraceComponent.isAnyTracingEnabled();
  if (poolState.get() == 50) {
    if (isTracingEnabled && tc.isDebugEnabled()) {
      Tr.debug(this,tc,""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str"");
    }
    do_not_reuse_mcw=true;
  }
 else {
    try {
      if (!stale) {
        if (connectionEvent.getId() != com.ibm.websphere.j2c.ConnectionEvent.SINGLE_CONNECTION_ERROR_OCCURRED) {
          pm.fatalErrorNotification(_managedConnectionFactory,this,uowCoord);
        }
 else {
          this.markStale();
        }
      }
    }
 catch (    Exception e) {
      if (isTracingEnabled && tc.isDebugEnabled()) {
        String pmiName=""String_Node_Str"";
        if (cm != null) {
          pmiName=gConfigProps.cfName;
        }
        Tr.debug(this,tc,""String_Node_Str"" + pmiName + ""String_Node_Str"",e);
      }
      com.ibm.ws.ffdc.FFDCFilter.processException(e,""String_Node_Str"",""String_Node_Str"",this);
    }
    if ((this.getTranWrapperId() == MCWrapper.NOTXWRAPPER) || (this.getTranWrapperId() == MCWrapper.RRSLOCALTXWRAPPER) || (this.getTranWrapperId() == MCWrapper.NONE)|| (state != STATE_TRAN_WRAPPER_INUSE && state != STATE_INACTIVE)) {
      if (this.getTranWrapperId() == MCWrapper.NOTXWRAPPER || this.getTranWrapperId() == MCWrapper.RRSLOCALTXWRAPPER) {
        if (isTracingEnabled && tc.isDebugEnabled()) {
          Tr.debug(this,tc,""String_Node_Str"" + getTranWrapperString());
        }
        this.transactionComplete();
      }
      this.clearHandleList();
      try {
        if (state != STATE_INACTIVE) {
          this.releaseToPoolManager();
        }
 else {
          if (isTracingEnabled && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
        }
      }
 catch (      Exception ex) {
        com.ibm.ws.ffdc.FFDCFilter.processException(ex,""String_Node_Str"",""String_Node_Str"",this);
        if (isTracingEnabled && tc.isDebugEnabled()) {
          Tr.debug(this,tc,""String_Node_Str"" + gConfigProps.cfName + ""String_Node_Str"",ex);
        }
      }
    }
 else {
      if (isTracingEnabled && tc.isDebugEnabled()) {
        Tr.debug(this,tc,""String_Node_Str"");
      }
    }
  }
}"
34848,"/** 
 * Puts stream's header block into the read buffer that will be passed to the webcontainer
 * @throws CompressionException
 */
private void processCompleteHeaders() throws CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (this.headerBlock != null) {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(this.headerBlock.length);
    buf.put(this.headerBlock);
    buf.flip();
    moveDataIntoReadBufferArray(buf);
    this.h2HttpInboundLinkWrap.setHeadersLength(buf.limit());
    headerBlock=null;
    boolean isFirstLineComplete=false;
    HashMap<String,String> pseudoHeaders=new HashMap<String,String>();
    ArrayList<H2HeaderField> headers=new ArrayList<H2HeaderField>();
    H2HeaderField current=null;
    int headersLength=buf.position();
    while (buf.hasRemaining()) {
      headersLength++;
      current=(H2Headers.decodeHeader(buf,this.muxLink.getReadTable()));
      if (!isFirstLineComplete) {
        if (current.getName().startsWith(""String_Node_Str"")) {
          if (pseudoHeaders.get(current.getName()) != null) {
            this.muxLink.getReadTable().setDynamicTableValidity(false);
            throw new CompressionException(""String_Node_Str"" + current.toString());
          }
          pseudoHeaders.put(current.getName(),current.getValue());
        }
 else {
          isFirstLineComplete=true;
          headers.add(current);
        }
      }
 else {
        if (current.getName().startsWith(""String_Node_Str"")) {
          this.muxLink.getReadTable().setDynamicTableValidity(false);
          throw new CompressionException(""String_Node_Str"" + ""String_Node_Str"");
        }
        headers.add(current);
      }
    }
    this.h2HttpInboundLinkWrap.setReadPseudoHeaders(pseudoHeaders);
    this.h2HttpInboundLinkWrap.setReadHeaders(headers);
    buf.flip();
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID);
    }
  }
}","/** 
 * Puts stream's header block into the read buffer that will be passed to the webcontainer
 * @throws CompressionException
 */
private void processCompleteHeaders() throws CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (this.headerBlock != null) {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(getByteCount(headerBlock));
    for (    byte[] byteArray : headerBlock) {
      buf.put(byteArray);
    }
    buf.flip();
    moveDataIntoReadBufferArray(buf);
    this.h2HttpInboundLinkWrap.setHeadersLength(buf.limit());
    headerBlock=null;
    boolean isFirstLineComplete=false;
    HashMap<String,String> pseudoHeaders=new HashMap<String,String>();
    ArrayList<H2HeaderField> headers=new ArrayList<H2HeaderField>();
    H2HeaderField current=null;
    int headersLength=buf.position();
    while (buf.hasRemaining()) {
      headersLength++;
      current=(H2Headers.decodeHeader(buf,this.muxLink.getReadTable()));
      if (!isFirstLineComplete) {
        if (current.getName().startsWith(""String_Node_Str"")) {
          if (pseudoHeaders.get(current.getName()) != null) {
            this.muxLink.getReadTable().setDynamicTableValidity(false);
            throw new CompressionException(""String_Node_Str"" + current.toString());
          }
          pseudoHeaders.put(current.getName(),current.getValue());
        }
 else {
          isFirstLineComplete=true;
          headers.add(current);
        }
      }
 else {
        if (current.getName().startsWith(""String_Node_Str"")) {
          this.muxLink.getReadTable().setDynamicTableValidity(false);
          throw new CompressionException(""String_Node_Str"" + ""String_Node_Str"");
        }
        headers.add(current);
      }
    }
    this.h2HttpInboundLinkWrap.setReadPseudoHeaders(pseudoHeaders);
    this.h2HttpInboundLinkWrap.setReadHeaders(headers);
    buf.flip();
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID);
    }
  }
}"
34849,"public long readCount(long numBytes,WsByteBuffer[] req){
  if (read(numBytes,req) != null) {
    return actualReadCount;
  }
  return 0;
}","/** 
 * Read the http header and data bytes for this stream
 * @param numBytes the number of bytes requested
 * @param requestBuffers an array of buffers to copy the read data into
 * @return the number of bytes that were actually copied into requestBuffers
 */
public long readCount(long numBytes,WsByteBuffer[] requestBuffers){
  if (read(numBytes,requestBuffers) != null) {
    return actualReadCount;
  }
  return 0;
}"
34850,"/** 
 * Put the payload from the current Data frame into the read buffer that will be passed to the webcontainer
 */
private void getBodyFromFrame(){
  if (currentFrame.getFrameType() == FrameTypes.DATA) {
    dataPayload=((FrameData)currentFrame).getData();
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(this.dataPayload.length);
    buf.put(this.dataPayload);
    buf.flip();
    moveDataIntoReadBufferArray(buf);
  }
}","/** 
 * Grab the data from the current frame
 */
private void getBodyFromFrame(){
  if (dataPayload == null) {
    dataPayload=new ArrayList<byte[]>();
  }
  if (currentFrame.getFrameType() == FrameTypes.DATA) {
    dataPayload.add(((FrameData)currentFrame).getData());
  }
}"
34851,"private void processOpen(Constants.Direction direction) throws ProtocolException, FlowControlException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (direction == Constants.Direction.READ_IN) {
    if (frameType == FrameTypes.DATA) {
      getBodyFromFrame();
      if (currentFrame.flagEndStreamSet()) {
        endStream=true;
        updateStreamState(StreamState.HALF_CLOSED_REMOTE);
        setReadyForRead();
      }
    }
  }
 else {
    if (frameType == FrameTypes.PUSH_PROMISE) {
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
        if (currentFrame.flagEndStreamSet()) {
          endStream=true;
          updateStreamState(StreamState.HALF_CLOSED_LOCAL);
        }
      }
 else {
        setContinuationFrameExpected(true);
        if (currentFrame.flagEndStreamSet()) {
          endStream=true;
        }
      }
    }
    boolean writeCompleted=writeFrameSync();
    if (frameType == FrameTypes.DATA && writeCompleted && currentFrame.flagEndStreamSet()) {
      endStream=true;
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
    }
  }
}","private void processOpen(Constants.Direction direction) throws ProtocolException, FlowControlException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (direction == Constants.Direction.READ_IN) {
    if (frameType == FrameTypes.DATA) {
      getBodyFromFrame();
      if (currentFrame.flagEndStreamSet()) {
        endStream=true;
        processCompleteData();
        updateStreamState(StreamState.HALF_CLOSED_REMOTE);
        setReadyForRead();
      }
    }
  }
 else {
    if (frameType == FrameTypes.PUSH_PROMISE) {
    }
 else     if (frameType == FrameTypes.HEADERS || frameType == FrameTypes.CONTINUATION) {
      if (currentFrame.flagEndHeadersSet()) {
        setContinuationFrameExpected(false);
        if (currentFrame.flagEndStreamSet()) {
          endStream=true;
          updateStreamState(StreamState.HALF_CLOSED_LOCAL);
        }
      }
 else {
        setContinuationFrameExpected(true);
        if (currentFrame.flagEndStreamSet()) {
          endStream=true;
        }
      }
    }
    boolean writeCompleted=writeFrameSync();
    if (frameType == FrameTypes.DATA && writeCompleted && currentFrame.flagEndStreamSet()) {
      endStream=true;
      updateStreamState(StreamState.HALF_CLOSED_LOCAL);
    }
  }
}"
34852,"/** 
 * Appends the header block fragment in the current header frame to this stream's incomplete header block
 */
private void getHeadersFromFrame(){
  byte[] hbf=null;
  if (currentFrame.getFrameType() == FrameTypes.HEADERS) {
    hbf=((FrameHeaders)currentFrame).getHeaderBlockFragment();
  }
 else   if (currentFrame.getFrameType() == FrameTypes.CONTINUATION) {
    hbf=((FrameContinuation)currentFrame).getHeaderBlockFragment();
  }
  if (hbf != null) {
    if (headerBlock == null) {
      headerBlock=hbf;
    }
 else {
      headerBlock=concatenateArrays(headerBlock,hbf);
    }
  }
}","/** 
 * Appends the header block fragment in the current header frame to this stream's incomplete header block
 */
private void getHeadersFromFrame(){
  byte[] hbf=null;
  if (currentFrame.getFrameType() == FrameTypes.HEADERS) {
    hbf=((FrameHeaders)currentFrame).getHeaderBlockFragment();
  }
 else   if (currentFrame.getFrameType() == FrameTypes.CONTINUATION) {
    hbf=((FrameContinuation)currentFrame).getHeaderBlockFragment();
  }
  if (hbf != null) {
    if (headerBlock == null) {
      headerBlock=new ArrayList<byte[]>();
    }
    headerBlock.add(hbf);
  }
}"
34853,"public VirtualConnection read(long numBytes,WsByteBuffer[] req){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ req+ ""String_Node_Str""+ numBytes);
  }
  long streamCount=0;
  long requestCount=0;
  if (numBytes > streamReadSize) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ numBytes+ ""String_Node_Str""+ streamReadSize);
    }
    return null;
  }
  streamCount=streamReadSize;
  requestCount=bytesRemaining(req);
  if (streamCount < requestCount) {
    actualReadCount=streamCount;
  }
 else {
    actualReadCount=requestCount;
  }
  int streamArrayIndex=0;
  int reqArrayIndex=0;
  for (int i=0; i < actualReadCount; i++) {
    if (!req[reqArrayIndex].hasRemaining()) {
      reqArrayIndex++;
      while (true) {
        if (req[reqArrayIndex].hasRemaining()) {
          break;
        }
 else {
          reqArrayIndex++;
        }
      }
    }
    if (!streamReadReady[streamArrayIndex].hasRemaining()) {
      streamReadReady[streamArrayIndex].release();
      streamArrayIndex++;
      while (true) {
        if (streamReadReady[streamArrayIndex].hasRemaining()) {
          break;
        }
 else {
          streamArrayIndex++;
        }
      }
    }
    req[reqArrayIndex].put(streamReadReady[streamArrayIndex].get());
  }
  int streamOldBufferIndex=streamReadBufferIndex;
  streamReadBufferIndex=0;
  streamReadSize=0;
  if (streamReadReady[streamArrayIndex].hasRemaining()) {
    moveDataIntoReadBufferArray(streamReadReady[streamArrayIndex].slice());
  }
  streamArrayIndex++;
  while (streamArrayIndex <= streamOldBufferIndex) {
    moveDataIntoReadBufferArray(streamReadReady[streamArrayIndex]);
    streamArrayIndex++;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  return h2HttpInboundLinkWrap.getVirtualConnection();
}","/** 
 * Read the HTTP header and data bytes for this stream
 * @param numBytes the number of bytes to read
 * @param requestBuffers an array of buffers to copy the read data into
 * @return this stream's VirtualConnection or null if too many bytes were requested
 */
@SuppressWarnings(""String_Node_Str"") public VirtualConnection read(long numBytes,WsByteBuffer[] requestBuffers){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ requestBuffers+ ""String_Node_Str""+ numBytes);
  }
  long streamByteCount=streamReadSize;
  long requestByteCount=bytesRemaining(requestBuffers);
  int reqArrayIndex=0;
  if (numBytes > streamReadSize) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ numBytes+ ""String_Node_Str""+ streamReadSize);
    }
    return null;
  }
  if (streamByteCount < requestByteCount) {
    actualReadCount=streamByteCount;
  }
 else {
    actualReadCount=requestByteCount;
  }
  for (int bytesRead=0; bytesRead < actualReadCount; bytesRead++) {
    while ((requestBuffers[reqArrayIndex].position() == requestBuffers[reqArrayIndex].limit())) {
      reqArrayIndex++;
    }
    while (!streamReadReady.isEmpty() && !streamReadReady.get(0).hasRemaining()) {
      streamReadReady.get(0).release();
      streamReadReady.remove(0);
    }
    requestBuffers[reqArrayIndex].put(streamReadReady.get(0).get());
  }
  streamReadSize=0;
  readLatch=new CountDownLatch(1);
  for (  WsByteBuffer buffer : ((ArrayList<WsByteBuffer>)streamReadReady.clone())) {
    streamReadReady.clear();
    if (buffer.hasRemaining()) {
      moveDataIntoReadBufferArray(buffer.slice());
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamId());
  }
  return h2HttpInboundLinkWrap.getVirtualConnection();
}"
34854,"private void moveDataIntoReadBufferArray(WsByteBuffer newBuf){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ newBuf);
  }
  if (newBuf != null) {
    int size=newBuf.remaining();
    streamReadReady[streamReadBufferIndex]=newBuf;
    streamReadBufferIndex++;
    streamReadSize+=size;
  }
}","/** 
 * Add a buffer to the list of buffers that will be sent to the WebContainer when a read is requested
 * @param newReadBuffer
 */
private void moveDataIntoReadBufferArray(WsByteBuffer newReadBuffer){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ newReadBuffer);
  }
  if (newReadBuffer != null) {
    int size=newReadBuffer.remaining();
    if (size > 0) {
      streamReadReady.add(newReadBuffer);
      streamReadSize+=size;
      this.readLatch.countDown();
    }
  }
}"
34855,"@Override public long read(long numBytes,int timeout) throws IOException {
  long readCount=0;
  H2StreamProcessor p=muxLink.getStreamProcessor(streamID);
  while (true) {
    try {
      readCount=p.readCount(numBytes,this.getBuffers());
      if ((readCount != 0) || (numBytes == 0)) {
        return readCount;
      }
      Thread.sleep(250);
    }
 catch (    InterruptedException e) {
    }
  }
}","/** 
 * Get bytes from the stream processor associated with this read context
 */
@Override public long read(long numBytes,int timeout) throws IOException {
  long readCount=0;
  H2StreamProcessor p=muxLink.getStreamProcessor(streamID);
  try {
    p.getReadLatch().await(timeout,TimeUnit.MILLISECONDS);
    readCount=p.readCount(numBytes,this.getBuffers());
  }
 catch (  InterruptedException e) {
    throw new IOException(""String_Node_Str"" + e);
  }
  return readCount;
}"
34856,"public boolean invokeFilters(ServletRequest request,ServletResponse response,IServletContext context,RequestProcessor requestProcessor,EnumSet<CollaboratorInvocationEnum> colEnum,HttpInboundConnection httpInboundConnection) throws ServletException, IOException {
  final boolean isTraceOn=com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled();
  if (isTraceOn && logger.isLoggable(Level.FINE)) {
    logger.entering(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + request + ""String_Node_Str""+ response+ ""String_Node_Str""+ requestProcessor+ ""String_Node_Str""+ context);
  }
  boolean result=false;
  IExtendedRequest wasreq=null;
  WebAppDispatcherContext dispatchContext=null;
  IServletConfig servletConfig=null;
  WebComponentMetaData componentMetaData=null;
  wasreq=(IExtendedRequest)ServletUtil.unwrapRequest(request);
  dispatchContext=(WebAppDispatcherContext)wasreq.getWebAppDispatcherContext();
  boolean securityEnforced=false;
  boolean isInclude=dispatchContext.isInclude();
  boolean isForward=dispatchContext.isForward();
  boolean isRequest=dispatchContext.getDispatcherType() == DispatcherType.REQUEST;
  HttpServletRequest httpServletReq=(HttpServletRequest)ServletUtil.unwrapRequest(request,HttpServletRequest.class);
  HttpServletResponse httpServletRes=(HttpServletResponse)ServletUtil.unwrapResponse(response,HttpServletResponse.class);
  ICollaboratorMetaData collabMetaData=null;
  boolean checkDefaultMethodAttributeSet=false;
  String attributeTargetClass=null;
  try {
    if (requestProcessor != null) {
      if (requestProcessor instanceof ExtensionProcessor) {
        IServletWrapper servletWrapper=((ExtensionProcessor)requestProcessor).getServletWrapper(request,response);
        if (servletWrapper != null) {
          requestProcessor=servletWrapper;
        }
 else         if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE)) {
          logger.logp(Level.FINE,CLASS_NAME,""String_Node_Str"",""String_Node_Str"");
        }
      }
      if (requestProcessor instanceof IServletWrapper) {
        IServletWrapper servletWrapper=(IServletWrapper)requestProcessor;
        servletConfig=servletWrapper.getServletConfig();
        if (servletConfig != null)         componentMetaData=servletConfig.getMetaData();
 else         if (isTraceOn && logger.isLoggable(Level.FINE)) {
          logger.logp(Level.FINE,CLASS_NAME,""String_Node_Str"",""String_Node_Str"");
        }
        dispatchContext.pushServletReference(servletWrapper);
        if (servletWrapper instanceof ServletWrapper) {
          ((ServletWrapper)servletWrapper).startRequest(request);
        }
 else {
          String httpMethod=httpServletReq.getMethod().toUpperCase();
          if (!(httpMethod.equals(""String_Node_Str"") || httpMethod.equals(""String_Node_Str""))) {
            if (servletWrapper instanceof FileServletWrapper) {
              attributeTargetClass=""String_Node_Str"";
              checkDefaultMethodAttributeSet=setDefaultMethod(httpServletReq,attributeTargetClass,httpMethod);
            }
 else             if (servletWrapper instanceof GenericServletWrapper) {
              attributeTargetClass=""String_Node_Str"";
              checkDefaultMethodAttributeSet=setDefaultMethod(httpServletReq,attributeTargetClass,httpMethod);
            }
          }
        }
      }
 else       if (requestProcessor instanceof ExtensionProcessor) {
        componentMetaData=((ExtensionProcessor)requestProcessor).getMetaData();
        String httpMethod=httpServletReq.getMethod().toUpperCase();
        if (!(httpMethod.equals(""String_Node_Str"") || httpMethod.equals(""String_Node_Str""))) {
          if (requestProcessor instanceof DefaultExtensionProcessor) {
            attributeTargetClass=""String_Node_Str"";
            checkDefaultMethodAttributeSet=setDefaultMethod(httpServletReq,attributeTargetClass,httpMethod);
          }
        }
      }
    }
    if (componentMetaData == null) {
      componentMetaData=getDefaultComponentMetaData();
    }
    collabMetaData=new CollaboratorMetaDataImpl(componentMetaData,httpServletReq,httpServletRes,dispatchContext,servletConfig,context,requestProcessor);
    collabHelper.preInvokeCollaborators(collabMetaData,colEnum);
    if (httpServletReq.isSecure()) {
      ServletRequest implRequest=ServletUtil.unwrapRequest(httpServletReq);
      ((SRTServletRequest)implRequest).setSSLAttributesInRequest(httpServletReq,((SRTServletRequest)implRequest).getCipherSuite());
    }
    if (checkDefaultMethodAttributeSet) {
      httpServletReq.removeAttribute(attributeTargetClass);
      httpServletReq.removeAttribute(""String_Node_Str"");
      checkDefaultMethodAttributeSet=false;
    }
    if (context.isFiltersDefined()) {
      doFilter(request,response,requestProcessor,dispatchContext);
    }
 else {
      if (requestProcessor != null) {
        if (!RegisterRequestInterceptor.notifyRequestInterceptors(""String_Node_Str"",httpServletReq,httpServletRes)) {
          WsocHandler wsocHandler=((com.ibm.ws.webcontainer.osgi.webapp.WebApp)webApp).getWebSocketHandler();
          if (wsocHandler != null) {
            if (wsocHandler.isWsocRequest(request)) {
              HttpServletRequest httpRequest=(HttpServletRequest)ServletUtil.unwrapRequest(request,HttpServletRequest.class);
              HttpServletResponse httpResponse=(HttpServletResponse)ServletUtil.unwrapResponse(response,HttpServletResponse.class);
              wsocHandler.handleRequest(httpRequest,httpResponse);
            }
 else {
              requestProcessor.handleRequest(request,response);
            }
          }
 else {
            requestProcessor.handleRequest(request,response);
          }
        }
      }
 else {
        webApp.finishedFiltersWithNullTarget(request,response,requestProcessor);
      }
    }
  }
 catch (  IOException ioe) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    if (isRethrowOriginalException(request,isInclude,isForward)) {
      dispatchContext.pushException(ioe);
      throw ioe;
    }
    if ((com.ibm.ws.webcontainer.osgi.WebContainer.getServletContainerSpecLevel() >= 31) && ioe.getMessage() != null && ioe.getMessage().contains(""String_Node_Str"")) {
      throw ioe;
    }
    ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(ioe,requestProcessor);
    dispatchContext.pushException(ioe);
    throw errorReport;
  }
catch (  ServletErrorReport ser) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    dispatchContext.pushException(ser);
    if (!dispatchContext.isInclude() && !dispatchContext.isForward() && (request instanceof HttpServletRequest)) {
      if (isTraceOn && logger.isLoggable(Level.FINE)) {
        logger.logp(Level.FINE,CLASS_NAME,""String_Node_Str"",""String_Node_Str"");
      }
      WebApp app=(WebApp)dispatchContext.getWebApp();
      app.sendError((HttpServletRequest)request,(HttpServletResponse)response,ser);
    }
 else {
      throw ser;
    }
  }
catch (  ServletException se) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    if (isRethrowOriginalException(request,isInclude,isForward)) {
      dispatchContext.pushException(se);
      throw se;
    }
    ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(se,requestProcessor);
    dispatchContext.pushException(se);
    Throwable causedBy=se.getCause();
    if (causedBy != null && causedBy instanceof FileNotFoundException) {
      if (isTraceOn && logger.isLoggable(Level.FINE)) {
        logger.logp(Level.FINE,CLASS_NAME,""String_Node_Str"",""String_Node_Str"",se);
      }
    }
 else {
      if (!webApp.getDestroyed())       com.ibm.ws.ffdc.FFDCFilter.processException(se,""String_Node_Str"",""String_Node_Str"");
 else       logger.logp(Level.WARNING,CLASS_NAME,""String_Node_Str"",""String_Node_Str"",new Object[]{httpServletReq.getRequestURI()});
    }
    throw errorReport;
  }
catch (  SecurityViolationException wse) {
    if (collabMetaData != null) {
      if (servletConfig == null)       collabMetaData.setSecurityObject(collabHelper.processSecurityPreInvokeException(wse,requestProcessor,httpServletReq,httpServletRes,dispatchContext,webApp,null));
 else       collabMetaData.setSecurityObject(collabHelper.processSecurityPreInvokeException(wse,requestProcessor,httpServletReq,httpServletRes,dispatchContext,webApp,servletConfig.getServletName()));
    }
  }
catch (  RuntimeException re) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    if (isRethrowOriginalException(request,isInclude,isForward)) {
      dispatchContext.pushException(re);
      throw re;
    }
    ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(re,dispatchContext.getCurrentServletReference());
    dispatchContext.pushException(re);
    com.ibm.ws.ffdc.FFDCFilter.processException(re,""String_Node_Str"",""String_Node_Str"",this);
    throw errorReport;
  }
catch (  Throwable th2) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    com.ibm.ws.ffdc.FFDCFilter.processException(th2,""String_Node_Str"",""String_Node_Str"",this);
    ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(th2,requestProcessor);
    dispatchContext.pushException(th2);
    throw errorReport;
  }
 finally {
    WebContainerRequestState reqFilterState=WebContainerRequestState.getInstance(false);
    if (reqFilterState != null) {
      reqFilterState.setInvokedFilters(false);
      reqFilterState.removeAttribute(""String_Node_Str"");
    }
    if (checkDefaultMethodAttributeSet) {
      httpServletReq.removeAttribute(attributeTargetClass);
      httpServletReq.removeAttribute(""String_Node_Str"");
      checkDefaultMethodAttributeSet=false;
    }
    if (isRequest && requestProcessor != null) {
      if (requestProcessor instanceof IServletWrapper) {
        if (request.getAttribute(javax.servlet.RequestDispatcher.ERROR_STATUS_CODE) == null)         WebContainer.addToCache((HttpServletRequest)request,requestProcessor,this.webApp);
        if (requestProcessor instanceof ServletWrapper) {
          ((ServletWrapper)requestProcessor).finishRequest(request);
        }
      }
    }
    try {
      if (collabMetaData != null)       collabHelper.postInvokeCollaborators(collabMetaData,colEnum);
    }
 catch (    Throwable th) {
      com.ibm.ws.ffdc.FFDCFilter.processException(th,""String_Node_Str"",""String_Node_Str"",this);
      ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(th,requestProcessor);
      throw errorReport;
    }
  }
  if (isTraceOn && logger.isLoggable(Level.FINE)) {
    logger.exiting(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + result);
  }
  return result;
}","public boolean invokeFilters(ServletRequest request,ServletResponse response,IServletContext context,RequestProcessor requestProcessor,EnumSet<CollaboratorInvocationEnum> colEnum,HttpInboundConnection httpInboundConnection) throws ServletException, IOException {
  final boolean isTraceOn=com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled();
  if (isTraceOn && logger.isLoggable(Level.FINE)) {
    logger.entering(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + request + ""String_Node_Str""+ response+ ""String_Node_Str""+ requestProcessor+ ""String_Node_Str""+ context);
  }
  boolean result=false;
  IExtendedRequest wasreq=null;
  WebAppDispatcherContext dispatchContext=null;
  IServletConfig servletConfig=null;
  WebComponentMetaData componentMetaData=null;
  wasreq=(IExtendedRequest)ServletUtil.unwrapRequest(request);
  dispatchContext=(WebAppDispatcherContext)wasreq.getWebAppDispatcherContext();
  boolean securityEnforced=false;
  boolean isInclude=dispatchContext.isInclude();
  boolean isForward=dispatchContext.isForward();
  boolean isRequest=dispatchContext.getDispatcherType() == DispatcherType.REQUEST;
  HttpServletRequest httpServletReq=(HttpServletRequest)ServletUtil.unwrapRequest(request,HttpServletRequest.class);
  HttpServletResponse httpServletRes=(HttpServletResponse)ServletUtil.unwrapResponse(response,HttpServletResponse.class);
  ICollaboratorMetaData collabMetaData=null;
  boolean checkDefaultMethodAttributeSet=false;
  String attributeTargetClass=null;
  try {
    if (requestProcessor != null) {
      if (requestProcessor instanceof ExtensionProcessor) {
        IServletWrapper servletWrapper=((ExtensionProcessor)requestProcessor).getServletWrapper(request,response);
        if (servletWrapper != null) {
          requestProcessor=servletWrapper;
        }
 else         if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE)) {
          logger.logp(Level.FINE,CLASS_NAME,""String_Node_Str"",""String_Node_Str"");
        }
      }
      if (requestProcessor instanceof IServletWrapper) {
        IServletWrapper servletWrapper=(IServletWrapper)requestProcessor;
        servletConfig=servletWrapper.getServletConfig();
        if (servletConfig != null)         componentMetaData=servletConfig.getMetaData();
 else         if (isTraceOn && logger.isLoggable(Level.FINE)) {
          logger.logp(Level.FINE,CLASS_NAME,""String_Node_Str"",""String_Node_Str"");
        }
        dispatchContext.pushServletReference(servletWrapper);
        if (servletWrapper instanceof ServletWrapper) {
          ((ServletWrapper)servletWrapper).startRequest(request);
        }
 else {
          String httpMethod=httpServletReq.getMethod().toUpperCase();
          if (!(httpMethod.equals(""String_Node_Str"") || httpMethod.equals(""String_Node_Str""))) {
            if (servletWrapper instanceof FileServletWrapper) {
              attributeTargetClass=""String_Node_Str"";
              checkDefaultMethodAttributeSet=setDefaultMethod(httpServletReq,attributeTargetClass,httpMethod);
            }
 else             if (servletWrapper instanceof GenericServletWrapper) {
              attributeTargetClass=""String_Node_Str"";
              checkDefaultMethodAttributeSet=setDefaultMethod(httpServletReq,attributeTargetClass,httpMethod);
            }
          }
        }
      }
 else       if (requestProcessor instanceof ExtensionProcessor) {
        componentMetaData=((ExtensionProcessor)requestProcessor).getMetaData();
        String httpMethod=httpServletReq.getMethod().toUpperCase();
        if (!(httpMethod.equals(""String_Node_Str"") || httpMethod.equals(""String_Node_Str""))) {
          if (requestProcessor instanceof DefaultExtensionProcessor) {
            attributeTargetClass=""String_Node_Str"";
            checkDefaultMethodAttributeSet=setDefaultMethod(httpServletReq,attributeTargetClass,httpMethod);
          }
        }
      }
    }
    if (componentMetaData == null) {
      componentMetaData=getDefaultComponentMetaData();
    }
    collabMetaData=new CollaboratorMetaDataImpl(componentMetaData,httpServletReq,httpServletRes,dispatchContext,servletConfig,context,requestProcessor);
    collabHelper.preInvokeCollaborators(collabMetaData,colEnum);
    if (httpServletReq.isSecure()) {
      ServletRequest implRequest=ServletUtil.unwrapRequest(httpServletReq);
      ((SRTServletRequest)implRequest).setSSLAttributesInRequest(httpServletReq,((SRTServletRequest)implRequest).getCipherSuite());
    }
    if (checkDefaultMethodAttributeSet) {
      httpServletReq.removeAttribute(attributeTargetClass);
      httpServletReq.removeAttribute(""String_Node_Str"");
      checkDefaultMethodAttributeSet=false;
    }
    if (context.isFiltersDefined()) {
      doFilter(request,response,requestProcessor,dispatchContext);
    }
 else {
      if (requestProcessor != null) {
        if (!RegisterRequestInterceptor.notifyRequestInterceptors(""String_Node_Str"",httpServletReq,httpServletRes)) {
          WsocHandler wsocHandler=((com.ibm.ws.webcontainer.osgi.webapp.WebApp)webApp).getWebSocketHandler();
          if (wsocHandler != null) {
            if (wsocHandler.isWsocRequest(request)) {
              HttpServletRequest httpRequest=(HttpServletRequest)ServletUtil.unwrapRequest(request,HttpServletRequest.class);
              HttpServletResponse httpResponse=(HttpServletResponse)ServletUtil.unwrapResponse(response,HttpServletResponse.class);
              wsocHandler.handleRequest(httpRequest,httpResponse);
            }
 else {
              requestProcessor.handleRequest(request,response);
            }
          }
 else {
            if (httpInboundConnection != null && request instanceof HttpServletRequest) {
              H2Handler h2Handler=((com.ibm.ws.webcontainer.osgi.webapp.WebApp)webApp).getH2Handler();
              if (h2Handler != null) {
                if (h2Handler.isH2Request(httpInboundConnection,request)) {
                  HttpServletRequest httpRequest=(HttpServletRequest)ServletUtil.unwrapRequest(request,HttpServletRequest.class);
                  HttpServletResponse httpResponse=(HttpServletResponse)ServletUtil.unwrapResponse(response,HttpServletResponse.class);
                  h2Handler.handleRequest(httpInboundConnection,httpRequest,httpResponse);
                  webApp.setUpgraded();
                }
              }
            }
            requestProcessor.handleRequest(request,response);
          }
        }
      }
 else {
        webApp.finishedFiltersWithNullTarget(request,response,requestProcessor);
      }
    }
  }
 catch (  IOException ioe) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    if (isRethrowOriginalException(request,isInclude,isForward)) {
      dispatchContext.pushException(ioe);
      throw ioe;
    }
    if ((com.ibm.ws.webcontainer.osgi.WebContainer.getServletContainerSpecLevel() >= 31) && ioe.getMessage() != null && ioe.getMessage().contains(""String_Node_Str"")) {
      throw ioe;
    }
    ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(ioe,requestProcessor);
    dispatchContext.pushException(ioe);
    throw errorReport;
  }
catch (  ServletErrorReport ser) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    dispatchContext.pushException(ser);
    if (!dispatchContext.isInclude() && !dispatchContext.isForward() && (request instanceof HttpServletRequest)) {
      if (isTraceOn && logger.isLoggable(Level.FINE)) {
        logger.logp(Level.FINE,CLASS_NAME,""String_Node_Str"",""String_Node_Str"");
      }
      WebApp app=(WebApp)dispatchContext.getWebApp();
      app.sendError((HttpServletRequest)request,(HttpServletResponse)response,ser);
    }
 else {
      throw ser;
    }
  }
catch (  ServletException se) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    if (isRethrowOriginalException(request,isInclude,isForward)) {
      dispatchContext.pushException(se);
      throw se;
    }
    ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(se,requestProcessor);
    dispatchContext.pushException(se);
    Throwable causedBy=se.getCause();
    if (causedBy != null && causedBy instanceof FileNotFoundException) {
      if (isTraceOn && logger.isLoggable(Level.FINE)) {
        logger.logp(Level.FINE,CLASS_NAME,""String_Node_Str"",""String_Node_Str"",se);
      }
    }
 else {
      if (!webApp.getDestroyed())       com.ibm.ws.ffdc.FFDCFilter.processException(se,""String_Node_Str"",""String_Node_Str"");
 else       logger.logp(Level.WARNING,CLASS_NAME,""String_Node_Str"",""String_Node_Str"",new Object[]{httpServletReq.getRequestURI()});
    }
    throw errorReport;
  }
catch (  SecurityViolationException wse) {
    if (collabMetaData != null) {
      if (servletConfig == null)       collabMetaData.setSecurityObject(collabHelper.processSecurityPreInvokeException(wse,requestProcessor,httpServletReq,httpServletRes,dispatchContext,webApp,null));
 else       collabMetaData.setSecurityObject(collabHelper.processSecurityPreInvokeException(wse,requestProcessor,httpServletReq,httpServletRes,dispatchContext,webApp,servletConfig.getServletName()));
    }
  }
catch (  RuntimeException re) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    if (isRethrowOriginalException(request,isInclude,isForward)) {
      dispatchContext.pushException(re);
      throw re;
    }
    ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(re,dispatchContext.getCurrentServletReference());
    dispatchContext.pushException(re);
    com.ibm.ws.ffdc.FFDCFilter.processException(re,""String_Node_Str"",""String_Node_Str"",this);
    throw errorReport;
  }
catch (  Throwable th2) {
    if (DEFER_SERVLET_REQUEST_LISTENER_DESTROY_ON_ERROR) {
      WebContainerRequestState reqState=WebContainerRequestState.getInstance(true);
      reqState.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    com.ibm.ws.ffdc.FFDCFilter.processException(th2,""String_Node_Str"",""String_Node_Str"",this);
    ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(th2,requestProcessor);
    dispatchContext.pushException(th2);
    throw errorReport;
  }
 finally {
    WebContainerRequestState reqFilterState=WebContainerRequestState.getInstance(false);
    if (reqFilterState != null) {
      reqFilterState.setInvokedFilters(false);
      reqFilterState.removeAttribute(""String_Node_Str"");
    }
    if (checkDefaultMethodAttributeSet) {
      httpServletReq.removeAttribute(attributeTargetClass);
      httpServletReq.removeAttribute(""String_Node_Str"");
      checkDefaultMethodAttributeSet=false;
    }
    if (isRequest && requestProcessor != null) {
      if (requestProcessor instanceof IServletWrapper) {
        if (request.getAttribute(javax.servlet.RequestDispatcher.ERROR_STATUS_CODE) == null)         WebContainer.addToCache((HttpServletRequest)request,requestProcessor,this.webApp);
        if (requestProcessor instanceof ServletWrapper) {
          ((ServletWrapper)requestProcessor).finishRequest(request);
        }
      }
    }
    try {
      if (collabMetaData != null)       collabHelper.postInvokeCollaborators(collabMetaData,colEnum);
    }
 catch (    Throwable th) {
      com.ibm.ws.ffdc.FFDCFilter.processException(th,""String_Node_Str"",""String_Node_Str"",this);
      ServletErrorReport errorReport=WebAppErrorReport.constructErrorReport(th,requestProcessor);
      throw errorReport;
    }
  }
  if (isTraceOn && logger.isLoggable(Level.FINE)) {
    logger.exiting(CLASS_NAME,""String_Node_Str"",""String_Node_Str"" + result);
  }
  return result;
}"
34857,"public void writeFramesSync(CopyOnWriteArrayList<Frame> frames){
  if (frames == null) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    return;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + frames.size());
  }
  Iterator<Frame> i=frames.iterator();
  while (i.hasNext()) {
    try {
      Frame currentFrame=i.next();
      H2StreamProcessor streamProcessor=muxLink.getStreamProcessor(streamID);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType());
      }
      streamProcessor.processNextFrame(currentFrame,Direction.WRITING_OUT);
    }
 catch (    Http2Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e.getErrorString());
      }
      try {
        muxLink.getStreamProcessor(0).sendGOAWAYFrame(e);
      }
 catch (      ProtocolException x) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + x);
        }
      }
    }
catch (    Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
}","public void writeFramesSync(CopyOnWriteArrayList<Frame> frames){
  if (frames == null) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    return;
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + frames.size());
  }
  Iterator<Frame> i=frames.iterator();
  while (i.hasNext()) {
    try {
      Frame currentFrame=i.next();
      H2StreamProcessor streamProcessor=muxLink.getStreamProcessor(streamID);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType());
      }
      if (streamProcessor != null) {
        streamProcessor.processNextFrame(currentFrame,Direction.WRITING_OUT);
      }
 else {
        throw new StreamClosedException(""String_Node_Str"" + streamID + ""String_Node_Str"");
      }
    }
 catch (    Http2Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e.getErrorString());
      }
      try {
        muxLink.getStreamProcessor(0).sendGOAWAYFrame(e);
      }
 catch (      ProtocolException x) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + x);
        }
      }
    }
catch (    Exception e) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + e);
      }
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
}"
34858,"public boolean handleHTTP2UpgradeRequest(Map<String,String> headers,HttpInboundLink link){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  link.getHTTPContext().send101SwitchingProtocol(""String_Node_Str"");
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  Integer streamID=new Integer(1);
  H2VirtualConnectionImpl h2VC=new H2VirtualConnectionImpl(initialVC);
  h2VC.getStateMap().remove(HttpDispatcherLink.LINK_ID);
  H2HttpInboundLinkWrap wrap=new H2HttpInboundLinkWrap(httpInboundChannel,h2VC,streamID,this);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  H2StreamProcessor streamProcessor=new H2StreamProcessor(streamID,wrap,this,StreamState.HALF_CLOSED_REMOTE);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamProcessor);
  }
  writeQ.addNewNodeToQ(streamID,Node.ROOT_STREAM_ID,Node.DEFAULT_NODE_PRIORITY,false);
  streamTable.put(streamID,streamProcessor);
  highestClientStreamId=streamID;
  String settings=headers.get(""String_Node_Str"");
  try {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + settings);
    }
    getConnectionSettings().processUpgradeHeaderSettings(settings);
  }
 catch (  ProtocolException e1) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    return false;
  }
  initialHttpInboundLink=link;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + link);
  }
  link.reinit(wrap.getConnectionContext(),wrap.getVirtualConnection(),wrap);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  return true;
}","/** 
 * Handle an h2c upgrade request
 * @param headers a map of the headers for this request
 * @param link the initial inbound link
 * @return true if the http2 upgrade was successful
 */
public boolean handleHTTP2UpgradeRequest(Map<String,String> headers,HttpInboundLink link){
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  link.getHTTPContext().send101SwitchingProtocol(""String_Node_Str"");
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  Integer streamID=new Integer(1);
  H2VirtualConnectionImpl h2VC=new H2VirtualConnectionImpl(initialVC);
  h2VC.getStateMap().remove(HttpDispatcherLink.LINK_ID);
  H2HttpInboundLinkWrap wrap=new H2HttpInboundLinkWrap(httpInboundChannel,h2VC,streamID,this);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  H2StreamProcessor streamProcessor=new H2StreamProcessor(streamID,wrap,this,StreamState.HALF_CLOSED_REMOTE);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + streamProcessor);
  }
  writeQ.addNewNodeToQ(streamID,Node.ROOT_STREAM_ID,Node.DEFAULT_NODE_PRIORITY,false);
  streamTable.put(streamID,streamProcessor);
  highestClientStreamId=streamID;
  String settings=headers.get(""String_Node_Str"");
  try {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + settings);
    }
    getConnectionSettings().processUpgradeHeaderSettings(settings);
  }
 catch (  ProtocolException e1) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    return false;
  }
  initialHttpInboundLink=link;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + link);
  }
  link.reinit(wrap.getConnectionContext(),wrap.getVirtualConnection(),wrap);
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"");
  }
  return true;
}"
34859,"public synchronized void processNextFrame(Frame frame,Constants.Direction direction) throws ProtocolException {
  boolean doDebugWhile=false;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString()+ ""String_Node_Str""+ muxLink.hashCode());
  }
  if (isStreamClosed()) {
    if (direction.equals(Constants.Direction.WRITING_OUT)) {
      if (muxLink.significantlyPastCloseTime(myID)) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        throw new ProtocolException(""String_Node_Str"");
      }
 else {
        if (frame.getFrameType() == FrameTypes.PRIORITY || frame.getFrameType() == FrameTypes.WINDOW_UPDATE || frame.getFrameType() == FrameTypes.RST_STREAM) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
          return;
        }
 else         if (frame.getFrameType() == FrameTypes.HEADERS || frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.PUSH_PROMISE) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
          throw new ProtocolException(""String_Node_Str"");
        }
      }
    }
 else     if (direction.equals(Constants.Direction.READ_IN)) {
      if (frame.getFrameType() == FrameTypes.PRIORITY) {
        return;
      }
      if (muxLink.significantlyPastCloseTime(myID)) {
        throw new ProtocolException(""String_Node_Str"");
      }
      if (frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.HEADERS) {
        if (state.equals(StreamState.HALF_CLOSED_REMOTE)) {
          throw new ProtocolException(""String_Node_Str"");
        }
 else {
          return;
        }
      }
 else       if (frame.getFrameType() == FrameTypes.RST_STREAM) {
        return;
      }
    }
  }
  ADDITIONAL_FRAME addFrame=ADDITIONAL_FRAME.FIRST_TIME;
  Http2Exception addFrameException=null;
  currentFrame=frame;
  while (addFrame != ADDITIONAL_FRAME.NO) {
    if (doDebugWhile) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString());
      }
    }
 else {
      doDebugWhile=true;
    }
    if (addFrame == ADDITIONAL_FRAME.RESET) {
      currentFrame=new FrameRstStream(myID,addFrameException.getErrorCode(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    if (addFrame == ADDITIONAL_FRAME.GOAWAY) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + muxLink.getHighestClientStreamId());
      }
      currentFrame=new FrameGoAway(0,addFrameException.getMessage().getBytes(),addFrameException.getErrorCode(),muxLink.getHighestClientStreamId(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    frameType=currentFrame.getFrameType();
    if (frameType == FrameTypes.RST_STREAM && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.RESET;
    }
 else     if (frameType == FrameTypes.GOAWAY && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.GOAWAY;
    }
    try {
      currentFrame.validate(muxLink.getConnectionSettings());
    }
 catch (    Http2Exception e) {
      if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
        if (e.isConnectionError()) {
          addFrame=ADDITIONAL_FRAME.GOAWAY;
        }
 else {
          addFrame=ADDITIONAL_FRAME.RESET;
        }
        addFrameException=e;
      }
 else {
        if (direction == Constants.Direction.READ_IN) {
          addFrame=ADDITIONAL_FRAME.RESET;
          addFrameException=e;
        }
 else {
        }
        addFrame=ADDITIONAL_FRAME.NO;
      }
      continue;
    }
    if (direction == Constants.Direction.READ_IN) {
      if (muxLink.checkIfGoAwaySendingOrClosing()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str"");
        }
        return;
      }
      if (isContinuationFrameExpected() && (frameType != FrameTypes.CONTINUATION || !this.continuationExpected)) {
        addFrame=ADDITIONAL_FRAME.GOAWAY;
        addFrameException=new ProtocolException(""String_Node_Str"");
        continue;
      }
      if (frameType == FrameTypes.RST_STREAM || frameType == FrameTypes.SETTINGS || frameType == FrameTypes.GOAWAY || frameType == FrameTypes.PING) {
switch (frameType) {
case RST_STREAM:
          processRstFrame();
        break;
case SETTINGS:
      processSETTINGSFrame();
    break;
case GOAWAY:
  processGOAWAYFrame();
updateStreamState(StreamState.CLOSED);
break;
case PING:
processPINGFrame();
break;
default :
break;
}
return;
}
try {
verifyReadFrameSequence();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
if (frameType == FrameTypes.PRIORITY) {
processPriorityFrame();
return;
}
try {
if (frameType == FrameTypes.WINDOW_UPDATE) {
processWindowUpdateFrame();
if (dataWaitingForWindowUpdate != null) {
if (!this.isWindowLimitExceeded(dataWaitingForWindowUpdate.peek())) {
waitingForWindowUpdate=false;
}
}
 else {
return;
}
}
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
updateStreamReadWindow();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
 else {
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"");
}
try {
verifyWriteFrameSequence();
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if ((addFrame == ADDITIONAL_FRAME.FIRST_TIME) || (addFrame == ADDITIONAL_FRAME.RESET)) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
if (!waitingForWindowUpdate && dataWaitingForWindowUpdate != null && !this.isWindowLimitExceeded(this.dataWaitingForWindowUpdate.peek())) {
addFrame=ADDITIONAL_FRAME.DATA;
currentFrame=this.dataWaitingForWindowUpdate.remove();
direction=Constants.Direction.WRITING_OUT;
if (this.dataWaitingForWindowUpdate.isEmpty()) {
this.dataWaitingForWindowUpdate=null;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
}
}","public synchronized void processNextFrame(Frame frame,Constants.Direction direction) throws ProtocolException {
  boolean doDebugWhile=false;
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString()+ ""String_Node_Str""+ muxLink.hashCode());
  }
  if (isStreamClosed()) {
    if (direction.equals(Constants.Direction.WRITING_OUT)) {
      if (muxLink.significantlyPastCloseTime(myID)) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        throw new ProtocolException(""String_Node_Str"");
      }
 else {
        if (frame.getFrameType() == FrameTypes.PRIORITY || frame.getFrameType() == FrameTypes.WINDOW_UPDATE || frame.getFrameType() == FrameTypes.RST_STREAM) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
          return;
        }
 else         if (frame.getFrameType() == FrameTypes.HEADERS || frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.PUSH_PROMISE) {
          if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc,""String_Node_Str"");
          }
          throw new ProtocolException(""String_Node_Str"");
        }
      }
    }
 else     if (direction.equals(Constants.Direction.READ_IN)) {
      if (frame.getFrameType() == FrameTypes.PRIORITY) {
        return;
      }
      if (muxLink.significantlyPastCloseTime(myID)) {
        throw new ProtocolException(""String_Node_Str"");
      }
      if (frame.getFrameType() == FrameTypes.DATA || frame.getFrameType() == FrameTypes.HEADERS) {
        throw new ProtocolException(""String_Node_Str"");
      }
 else       if (frame.getFrameType() == FrameTypes.RST_STREAM) {
        return;
      }
    }
  }
  ADDITIONAL_FRAME addFrame=ADDITIONAL_FRAME.FIRST_TIME;
  Http2Exception addFrameException=null;
  currentFrame=frame;
  while (addFrame != ADDITIONAL_FRAME.NO) {
    if (doDebugWhile) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ frame.getFrameType().toString()+ ""String_Node_Str""+ direction.toString());
      }
    }
 else {
      doDebugWhile=true;
    }
    if (addFrame == ADDITIONAL_FRAME.RESET) {
      currentFrame=new FrameRstStream(myID,addFrameException.getErrorCode(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + myID + ""String_Node_Str""+ addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    if (addFrame == ADDITIONAL_FRAME.GOAWAY) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + muxLink.getHighestClientStreamId());
      }
      currentFrame=new FrameGoAway(0,addFrameException.getMessage().getBytes(),addFrameException.getErrorCode(),muxLink.getHighestClientStreamId(),false);
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + addFrameException.getErrorString());
      }
      direction=Constants.Direction.WRITING_OUT;
    }
    frameType=currentFrame.getFrameType();
    if (frameType == FrameTypes.RST_STREAM && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.RESET;
    }
 else     if (frameType == FrameTypes.GOAWAY && addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
      addFrame=ADDITIONAL_FRAME.GOAWAY;
    }
    try {
      currentFrame.validate(muxLink.getConnectionSettings());
    }
 catch (    Http2Exception e) {
      if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
        if (e.isConnectionError()) {
          addFrame=ADDITIONAL_FRAME.GOAWAY;
        }
 else {
          addFrame=ADDITIONAL_FRAME.RESET;
        }
        addFrameException=e;
      }
 else {
        if (direction == Constants.Direction.READ_IN) {
          addFrame=ADDITIONAL_FRAME.RESET;
          addFrameException=e;
        }
 else {
        }
        addFrame=ADDITIONAL_FRAME.NO;
      }
      continue;
    }
    if (direction == Constants.Direction.READ_IN) {
      if (muxLink.checkIfGoAwaySendingOrClosing()) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"" + currentFrame.getFrameType() + ""String_Node_Str""+ this.myID+ ""String_Node_Str"");
        }
        return;
      }
      if (isContinuationFrameExpected() && (frameType != FrameTypes.CONTINUATION || !this.continuationExpected)) {
        addFrame=ADDITIONAL_FRAME.GOAWAY;
        addFrameException=new ProtocolException(""String_Node_Str"");
        continue;
      }
      if (frameType == FrameTypes.SETTINGS || frameType == FrameTypes.GOAWAY || frameType == FrameTypes.PING) {
switch (frameType) {
case SETTINGS:
          processSETTINGSFrame();
        break;
case GOAWAY:
      processGOAWAYFrame();
    updateStreamState(StreamState.CLOSED);
  break;
case PING:
processPINGFrame();
break;
default :
break;
}
return;
}
try {
verifyReadFrameSequence();
}
 catch (Http2Exception e) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
addFrame=ADDITIONAL_FRAME.RESET;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
addFrameException=e;
continue;
}
if (frameType == FrameTypes.PRIORITY) {
processPriorityFrame();
return;
}
if (frameType == FrameTypes.RST_STREAM) {
processRstFrame();
return;
}
try {
if (frameType == FrameTypes.WINDOW_UPDATE) {
processWindowUpdateFrame();
if (dataWaitingForWindowUpdate != null) {
if (!this.isWindowLimitExceeded(dataWaitingForWindowUpdate.peek())) {
waitingForWindowUpdate=false;
}
}
 else {
return;
}
}
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
updateStreamReadWindow();
}
 catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
try {
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
 else {
if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
Tr.debug(tc,""String_Node_Str"");
}
try {
verifyWriteFrameSequence();
readWriteTransitionState(direction);
}
 catch (CompressionException e) {
if ((addFrame == ADDITIONAL_FRAME.FIRST_TIME) || (addFrame == ADDITIONAL_FRAME.RESET)) {
Tr.info(tc,""String_Node_Str"");
addFrame=ADDITIONAL_FRAME.GOAWAY;
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
catch (Http2Exception e) {
if (addFrame == ADDITIONAL_FRAME.FIRST_TIME) {
if (e.isConnectionError()) {
addFrame=ADDITIONAL_FRAME.GOAWAY;
}
 else {
addFrame=ADDITIONAL_FRAME.RESET;
}
addFrameException=e;
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
continue;
}
}
if (!waitingForWindowUpdate && dataWaitingForWindowUpdate != null && !this.isWindowLimitExceeded(this.dataWaitingForWindowUpdate.peek())) {
addFrame=ADDITIONAL_FRAME.DATA;
currentFrame=this.dataWaitingForWindowUpdate.remove();
direction=Constants.Direction.WRITING_OUT;
if (this.dataWaitingForWindowUpdate.isEmpty()) {
this.dataWaitingForWindowUpdate=null;
}
}
 else {
addFrame=ADDITIONAL_FRAME.NO;
}
}
}"
34860,"/** 
 * Puts stream's header block into the read buffer that will be passed to the webcontainer
 * @throws CompressionException
 */
private void processCompleteHeaders() throws CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (this.headerBlock != null) {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(this.headerBlock.length);
    buf.put(this.headerBlock);
    buf.flip();
    moveDataIntoReadBufferArray(buf);
    headerBlock=null;
    boolean isFirstLineComplete=false;
    HashMap<String,String> pseudoHeaders=new HashMap<String,String>();
    ArrayList<H2HeaderField> headers=new ArrayList<H2HeaderField>();
    H2HeaderField current=null;
    while (buf.hasRemaining()) {
      current=(H2Headers.decodeHeader(buf,this.muxLink.getReadTable()));
      if (!isFirstLineComplete) {
        if (current.getName().startsWith(""String_Node_Str"")) {
          if (pseudoHeaders.get(current.getName()) != null) {
            this.muxLink.getReadTable().setDynamicTableValidity(false);
            throw new CompressionException(""String_Node_Str"" + current.toString());
          }
          pseudoHeaders.put(current.getName(),current.getValue());
        }
 else {
          isFirstLineComplete=true;
          headers.add(current);
        }
      }
 else {
        if (current.getName().startsWith(""String_Node_Str"")) {
          this.muxLink.getReadTable().setDynamicTableValidity(false);
          throw new CompressionException(""String_Node_Str"" + ""String_Node_Str"");
        }
        headers.add(current);
      }
    }
    this.h2HttpInboundLinkWrap.setReadPseudoHeaders(pseudoHeaders);
    this.h2HttpInboundLinkWrap.setReadHeaders(headers);
    buf.flip();
  }
}","/** 
 * Puts stream's header block into the read buffer that will be passed to the webcontainer
 * @throws CompressionException
 */
private void processCompleteHeaders() throws CompressionException {
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + myID);
  }
  if (this.headerBlock != null) {
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(this.headerBlock.length);
    buf.put(this.headerBlock);
    buf.flip();
    moveDataIntoReadBufferArray(buf);
    this.h2HttpInboundLinkWrap.setHeadersLength(buf.limit());
    headerBlock=null;
    boolean isFirstLineComplete=false;
    HashMap<String,String> pseudoHeaders=new HashMap<String,String>();
    ArrayList<H2HeaderField> headers=new ArrayList<H2HeaderField>();
    H2HeaderField current=null;
    int headersLength=buf.position();
    while (buf.hasRemaining()) {
      headersLength++;
      current=(H2Headers.decodeHeader(buf,this.muxLink.getReadTable()));
      if (!isFirstLineComplete) {
        if (current.getName().startsWith(""String_Node_Str"")) {
          if (pseudoHeaders.get(current.getName()) != null) {
            this.muxLink.getReadTable().setDynamicTableValidity(false);
            throw new CompressionException(""String_Node_Str"" + current.toString());
          }
          pseudoHeaders.put(current.getName(),current.getValue());
        }
 else {
          isFirstLineComplete=true;
          headers.add(current);
        }
      }
 else {
        if (current.getName().startsWith(""String_Node_Str"")) {
          this.muxLink.getReadTable().setDynamicTableValidity(false);
          throw new CompressionException(""String_Node_Str"" + ""String_Node_Str"");
        }
        headers.add(current);
      }
    }
    this.h2HttpInboundLinkWrap.setReadPseudoHeaders(pseudoHeaders);
    this.h2HttpInboundLinkWrap.setReadHeaders(headers);
    buf.flip();
  }
 else {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + myID);
    }
  }
}"
34861,"/** 
 * Put the payload from the current Data frame into the read buffer that will be passed to the webcontainer
 */
private void getBodyFromFrame(){
  if (currentFrame.getFrameType() == FrameTypes.DATA) {
    dataPayload=((FrameData)currentFrame).getData();
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(this.dataPayload.length);
    buf.put(this.dataPayload);
    moveDataIntoReadBufferArray(buf);
  }
}","/** 
 * Put the payload from the current Data frame into the read buffer that will be passed to the webcontainer
 */
private void getBodyFromFrame(){
  if (currentFrame.getFrameType() == FrameTypes.DATA) {
    dataPayload=((FrameData)currentFrame).getData();
    WsByteBufferPoolManager bufManager=HttpDispatcher.getBufferManager();
    WsByteBuffer buf=bufManager.allocate(this.dataPayload.length);
    buf.put(this.dataPayload);
    buf.flip();
    moveDataIntoReadBufferArray(buf);
  }
}"
34862,"/** 
 * Called by the device side channel when a new request is ready for work.
 * @param inVC
 */
@Override public void ready(VirtualConnection inVC){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"" + this + ""String_Node_Str""+ inVC);
  }
  this.myTSC=(TCPConnectionContext)getDeviceLink().getChannelAccessor();
  HttpInboundServiceContextImpl sc=getHTTPContext();
  sc.init(this.myTSC,this,inVC,getChannel().getHttpConfig());
  if (getChannel().getHttpConfig().getDebugLog().isEnabled(DebugLog.Level.INFO)) {
    getChannel().getHttpConfig().getDebugLog().log(DebugLog.Level.INFO,HttpMessages.MSG_CONN_STARTING,sc);
  }
  if (this.myTSC.getSSLContext() != null && !sc.isH2Connection() && this.myTSC.getSSLContext().getAlpnProtocol().equals(""String_Node_Str"") && checkForH2MagicString(sc)) {
    alreadyH2Upgraded=true;
    handleHttp2();
  }
 else {
    processRequest();
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}","/** 
 * Called by the device side channel when a new request is ready for work.
 * @param inVC
 */
@Override public void ready(VirtualConnection inVC){
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.entry(tc,""String_Node_Str"" + this + ""String_Node_Str""+ inVC);
  }
  this.myTSC=(TCPConnectionContext)getDeviceLink().getChannelAccessor();
  HttpInboundServiceContextImpl sc=getHTTPContext();
  sc.init(this.myTSC,this,inVC,getChannel().getHttpConfig());
  if (getChannel().getHttpConfig().getDebugLog().isEnabled(DebugLog.Level.INFO)) {
    getChannel().getHttpConfig().getDebugLog().log(DebugLog.Level.INFO,HttpMessages.MSG_CONN_STARTING,sc);
  }
  if (this.myTSC.getSSLContext() != null && !sc.isH2Connection() && this.myTSC.getSSLContext().getAlpnProtocol() != null && this.myTSC.getSSLContext().getAlpnProtocol().equals(""String_Node_Str"") && checkForH2MagicString(sc)) {
    alreadyH2Upgraded=true;
    handleHttp2();
  }
 else {
    processRequest();
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {
    Tr.exit(tc,""String_Node_Str"");
  }
}"
34863,"@SuppressWarnings(""String_Node_Str"") private LoginToContinueInterceptorTest withSetCookies() throws Exception {
  final String ORIGINAL_URL=""String_Node_Str"";
  final StringBuffer sb=new StringBuffer(ORIGINAL_URL);
  mockery.checking(new Expectations(){
{
      one(req).getQueryString();
      will(returnValue(null));
      one(req).getRequestURL();
      will(returnValue(sb));
      one(req).isSecure();
      will(returnValue(true));
      one(wasc).getSSORequiresSSL();
      will(returnValue(false));
      one(req).getMethod();
      will(returnValue(""String_Node_Str""));
      one(ruh).setReferrerURLCookie(with(any(HttpServletRequest.class)),with(any(AuthenticationResult.class)),with(any(String.class)));
    }
  }
);
  return this;
}","@SuppressWarnings(""String_Node_Str"") private LoginToContinueInterceptorTest withSetCookies() throws Exception {
  final String ORIGINAL_URL=""String_Node_Str"";
  final StringBuffer sb=new StringBuffer(ORIGINAL_URL);
  mockery.checking(new Expectations(){
{
      one(req).getQueryString();
      will(returnValue(null));
      one(req).getRequestURL();
      will(returnValue(sb));
      one(req).isSecure();
      will(returnValue(true));
      one(wasc).getSSORequiresSSL();
      will(returnValue(false));
      between(1,2).of(req).getMethod();
      will(returnValue(""String_Node_Str""));
      one(ruh).setReferrerURLCookie(with(any(HttpServletRequest.class)),with(any(AuthenticationResult.class)),with(any(String.class)));
    }
  }
);
  return this;
}"
34864,"/** 
 * Verify that the result of converting the newly submitted value is <i>equal</i> to the value property of one of the child SelectItem objects. If this is not true, a validation error is reported.
 * @see javax.faces.component.UIInput#validateValue(javax.faces.context.FacesContext,java.lang.Object)
 */
@Override protected void validateValue(FacesContext context,Object value){
  super.validateValue(context,value);
  if (!isValid() || value == null) {
    return;
  }
  Converter converter=getConverter();
  Collection<SelectItem> items=new ArrayList<SelectItem>();
  for (Iterator<SelectItem> iter=new _SelectItemsIterator(this,context); iter.hasNext(); ) {
    items.add(iter.next());
  }
  if (_SelectItemsUtil.matchValue(context,this,value,items.iterator(),converter)) {
    if (!this.isRequired()) {
      return;
    }
    if (!_SelectItemsUtil.isNoSelectionOption(context,this,value,items.iterator(),converter)) {
      return;
    }
  }
  _MessageUtils.addErrorMessage(context,this,INVALID_MESSAGE_ID,new Object[]{_MessageUtils.getLabel(context,this)});
  setValid(false);
}","/** 
 * Verify that the result of converting the newly submitted value is <i>equal</i> to the value property of one of the child SelectItem objects. If this is not true, a validation error is reported.
 * @see javax.faces.component.UIInput#validateValue(javax.faces.context.FacesContext,java.lang.Object)
 */
@Override protected void validateValue(FacesContext context,Object value){
  super.validateValue(context,value);
  if (!isValid() || value == null) {
    return;
  }
  Converter converter=getConverter();
  Collection<SelectItem> items=new ArrayList<SelectItem>();
  for (Iterator<SelectItem> iter=new _SelectItemsIterator(this,context); iter.hasNext(); ) {
    items.add(iter.next());
  }
  if (_SelectItemsUtil.matchValue(context,this,value,items.iterator(),converter)) {
    if (!this.isRequired()) {
      return;
    }
    if (!_SelectItemsUtil.isNoSelectionOption(context,this,value,items.iterator(),converter)) {
      return;
    }
  }
  if (selectItemValueFound) {
    return;
  }
  _MessageUtils.addErrorMessage(context,this,INVALID_MESSAGE_ID,new Object[]{_MessageUtils.getLabel(context,this)});
  setValid(false);
}"
34865,"@Override @Sensitive public CredentialValidationResult validate(Credential credential){
  if (!validationTypes().contains(ValidationType.VALIDATE)) {
    return CredentialValidationResult.NOT_VALIDATED_RESULT;
  }
  if (!(credential instanceof UsernamePasswordCredential)) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"");
    }
    return CredentialValidationResult.NOT_VALIDATED_RESULT;
  }
  UsernamePasswordCredential cred=(UsernamePasswordCredential)credential;
  String caller=cred.getCaller();
  if (caller == null) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"");
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
  if (cred.getPassword().getValue() == null) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"");
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
  ProtectedString dbPassword=null;
  PreparedStatement prep=null;
  try {
    Connection conn=getConnection(caller);
    try {
      prep=conn.prepareStatement(idStoreDefinition.getCallerQuery());
      prep.setString(1,caller);
      ResultSet result=runQuery(prep,caller);
      if (!result.next()) {
        if (tc.isEventEnabled()) {
          Tr.event(tc,""String_Node_Str"" + caller + ""String_Node_Str""+ idStoreDefinition.getCallerQuery());
        }
        return CredentialValidationResult.INVALID_RESULT;
      }
      dbPassword=new ProtectedString(result.getString(1).toCharArray());
      if (result.next()) {
        result.last();
        if (tc.isEventEnabled()) {
          Tr.event(tc,""String_Node_Str"" + caller,result.getRow());
        }
        return CredentialValidationResult.INVALID_RESULT;
      }
    }
  finally {
      conn.close();
    }
  }
 catch (  NamingException|SQLException e) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"" + caller,e);
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
  if (dbPassword.isEmpty()) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"" + caller);
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
  if (passwordHash.verify(cred.getPassword().getValue(),String.valueOf(dbPassword.getChars()))) {
    Set<String> groups=getCallerGroups(new CredentialValidationResult(null,caller,caller,caller,null));
    return new CredentialValidationResult(storeId,caller,caller,caller,groups);
  }
 else {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"" + caller);
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
}","@Override @Sensitive public CredentialValidationResult validate(Credential credential){
  if (!validationTypes().contains(ValidationType.VALIDATE)) {
    return CredentialValidationResult.NOT_VALIDATED_RESULT;
  }
  if (!(credential instanceof UsernamePasswordCredential)) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"");
    }
    return CredentialValidationResult.NOT_VALIDATED_RESULT;
  }
  UsernamePasswordCredential cred=(UsernamePasswordCredential)credential;
  String caller=cred.getCaller();
  if (caller == null) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"");
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
  if (cred.getPassword().getValue() == null) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"");
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
  ProtectedString dbPassword=null;
  PreparedStatement prep=null;
  try {
    Connection conn=getConnection(caller);
    try {
      prep=conn.prepareStatement(idStoreDefinition.getCallerQuery());
      prep.setString(1,caller);
      ResultSet result=runQuery(prep,caller);
      if (!result.next()) {
        if (tc.isEventEnabled()) {
          Tr.event(tc,""String_Node_Str"" + caller + ""String_Node_Str""+ idStoreDefinition.getCallerQuery());
        }
        return CredentialValidationResult.INVALID_RESULT;
      }
      String dbreturn=result.getString(1);
      if (dbreturn == null) {
        if (tc.isEventEnabled()) {
          Tr.event(tc,""String_Node_Str"" + caller);
        }
        return CredentialValidationResult.INVALID_RESULT;
      }
      dbPassword=new ProtectedString(dbreturn.toCharArray());
      if (result.next()) {
        if (tc.isEventEnabled()) {
          Tr.event(tc,""String_Node_Str"" + caller);
        }
        return CredentialValidationResult.INVALID_RESULT;
      }
    }
  finally {
      conn.close();
    }
  }
 catch (  NamingException|SQLException e) {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"" + caller,e);
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
  if (passwordHash.verify(cred.getPassword().getValue(),String.valueOf(dbPassword.getChars()))) {
    Set<String> groups=getCallerGroups(new CredentialValidationResult(null,caller,caller,caller,null));
    return new CredentialValidationResult(storeId,caller,caller,caller,groups);
  }
 else {
    if (tc.isEventEnabled()) {
      Tr.event(tc,""String_Node_Str"" + caller);
    }
    return CredentialValidationResult.INVALID_RESULT;
  }
}"
34866,"@Test public void testRememberMeHttpNoCookie() throws Exception {
  HttpResponse httpResponse=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,javaeesec_basicRoleUser,javaeesec_basicRolePwd);
  String response=processResponse(httpResponse,HttpServletResponse.SC_OK);
  verifyUserResponse(response,Constants.getUserPrincipalFound + Constants.javaeesec_basicRoleUser,Constants.getRemoteUserFound + Constants.javaeesec_basicRoleUser);
  validateNoCookie(httpResponse,REMEMBERME_COOKIE_NAME);
}","@Test public void testRememberMeHttpNoCookie() throws Exception {
  HttpResponse httpResponse=executeGetRequestBasicAuthCreds(httpclient,urlBase + queryString,Constants.javaeesec_basicRoleUser,Constants.javaeesec_basicRolePwd);
  String response=processResponse(httpResponse,HttpServletResponse.SC_OK);
  verifyUserResponse(response,Constants.getUserPrincipalFound + Constants.javaeesec_basicRoleUser,Constants.getRemoteUserFound + Constants.javaeesec_basicRoleUser);
  validateNoCookie(httpResponse,REMEMBERME_COOKIE_NAME);
}"
34867,"protected AuthenticationStatus gotoLoginPage(Properties props,HttpServletRequest req,HttpServletResponse res,HttpMessageContext httpMessageContext) throws IOException {
  String loginPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE);
  String errorPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE);
  boolean useForwardToLogin=getUseForwardToLogin();
  AuthenticationStatus status=AuthenticationStatus.SEND_CONTINUE;
  MessageInfo msgInfo=httpMessageContext.getMessageInfo();
  WebRequest webRequest=(WebRequest)msgInfo.getMap().get(JaspiConstants.SECURITY_WEB_REQUEST);
  updateFormLoginConfiguration(loginPage,errorPage,webRequest.getSecurityMetadata());
  setCookies(req,res);
  if (useForwardToLogin) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    RequestDispatcher rd=req.getRequestDispatcher(loginPage);
    try {
      rd.forward(req,res);
    }
 catch (    Exception e) {
      status=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    res.setStatus(HttpServletResponse.SC_FOUND);
    String loginUrl=getLoginUrl(req,loginPage);
    res.sendRedirect(res.encodeURL(loginUrl));
  }
  return status;
}","protected AuthenticationStatus gotoLoginPage(Properties props,HttpServletRequest req,HttpServletResponse res,HttpMessageContext httpMessageContext) throws IOException {
  String loginPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE);
  String errorPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE);
  boolean useForwardToLogin=getUseForwardToLogin();
  AuthenticationStatus status=AuthenticationStatus.SEND_CONTINUE;
  MessageInfo msgInfo=httpMessageContext.getMessageInfo();
  WebRequest webRequest=(WebRequest)msgInfo.getMap().get(JaspiConstants.SECURITY_WEB_REQUEST);
  updateFormLoginConfiguration(loginPage,errorPage,webRequest.getSecurityMetadata());
  setCookies(req,res);
  if (useForwardToLogin) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    RequestDispatcher rd=req.getRequestDispatcher(loginPage);
    try {
      rd.forward(req,res);
    }
 catch (    Exception e) {
      status=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    res.setStatus(HttpServletResponse.SC_FOUND);
    String loginUrl=getUrl(req,loginPage);
    res.sendRedirect(res.encodeURL(loginUrl));
  }
  return status;
}"
34868,"@AroundInvoke public Object intercept(InvocationContext ic) throws Exception {
  Object result=null;
  if (isMethodToIntercept(ic)) {
    if (mpp != null) {
      result=ic.proceed();
      Object[] params=ic.getParameters();
      HttpServletRequest req=(HttpServletRequest)params[0];
      HttpServletResponse res=(HttpServletResponse)params[1];
      Class hamClass=getClass(ic);
      if (result.equals(AuthenticationStatus.SEND_CONTINUE)) {
        HttpMessageContext mc=(HttpMessageContext)params[2];
        result=gotoLoginPage(mpp.getAuthMechProperties(hamClass),req,res,mc);
      }
 else       if (result.equals(AuthenticationStatus.SUCCESS)) {
        boolean isCustomForm=isCustomForm(hamClass);
        postLoginProcess(req,res,isCustomForm);
      }
    }
 else {
      Tr.error(tc,""String_Node_Str"");
      result=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    result=ic.proceed();
  }
  return result;
}","@AroundInvoke public Object intercept(InvocationContext ic) throws Exception {
  Object result=null;
  if (isMethodToIntercept(ic)) {
    if (mpp != null) {
      result=ic.proceed();
      Object[] params=ic.getParameters();
      HttpServletRequest req=(HttpServletRequest)params[0];
      HttpServletResponse res=(HttpServletResponse)params[1];
      HttpMessageContext hmc=(HttpMessageContext)params[2];
      AuthenticationParameters authParams=hmc.getAuthParameters();
      Class hamClass=getClass(ic);
      if (!isNewAuth(authParams)) {
        if (result.equals(AuthenticationStatus.SEND_CONTINUE)) {
          result=gotoLoginPage(mpp.getAuthMechProperties(hamClass),req,res,hmc);
        }
 else         if (result.equals(AuthenticationStatus.SUCCESS)) {
          boolean isCustomForm=isCustomForm(hamClass);
          postLoginProcess(req,res,isCustomForm);
        }
 else         if (result.equals(AuthenticationStatus.SEND_FAILURE)) {
          if (isCustomForm(hamClass)) {
            rediectErrorPage(mpp.getAuthMechProperties(hamClass),req,res);
          }
        }
      }
    }
 else {
      Tr.error(tc,""String_Node_Str"");
      result=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    result=ic.proceed();
  }
  return result;
}"
34869,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormDefault() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withForward(LOGIN_PAGE).withNoELP();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormDefault() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withForward(LOGIN_PAGE).withNoELP().withAuthParams();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34870,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormRedirect() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,Boolean.FALSE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE).withNoELP();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormRedirect() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,Boolean.FALSE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE).withNoELP().withAuthParams();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34871,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormForward() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,Boolean.TRUE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withForward(LOGIN_PAGE).withNoELP();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormForward() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,Boolean.TRUE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withForward(LOGIN_PAGE).withNoELP().withAuthParams();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34872,"@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  ici=mockery.mock(InvocationContext.class,""String_Node_Str"");
  icm=mockery.mock(InvocationContext.class,""String_Node_Str"");
  mpp=mockery.mock(ModulePropertiesProvider.class);
  mppi=mockery.mock(Instance.class,""String_Node_Str"");
  wasc=mockery.mock(WebAppSecurityConfig.class);
  ruh=mockery.mock(ReferrerURLCookieHandler.class);
  hmc=mockery.mock(HttpMessageContext.class);
  mi=mockery.mock(MessageInfo.class);
  wr=mockery.mock(WebRequest.class);
  smd=mockery.mock(SecurityMetadata.class);
  rd=mockery.mock(RequestDispatcher.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  elpi=mockery.mock(ELProcessor.class,""String_Node_Str"");
  elpm=mockery.mock(ELProcessor.class,""String_Node_Str"");
  cdi=mockery.mock(CDI.class);
  ltci=new LoginToContinueInterceptor(){
    @Override protected boolean isMethodToIntercept(    InvocationContext ic){
      return isInterceptedMethod;
    }
    @Override protected Class getClass(    InvocationContext ic){
      return hamClass;
    }
    protected Class getTargetClass(    InvocationContext ic){
      return hamClass;
    }
    @Override protected WebAppSecurityConfig getWebSAppSeurityConfig(){
      return wasc;
    }
    @Override protected ELProcessor getELProcessorWithAppModuleBeanManagerELResolver(){
      return elp;
    }
    @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
}","@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  ici=mockery.mock(InvocationContext.class,""String_Node_Str"");
  icm=mockery.mock(InvocationContext.class,""String_Node_Str"");
  mpp=mockery.mock(ModulePropertiesProvider.class);
  mppi=mockery.mock(Instance.class,""String_Node_Str"");
  wasc=mockery.mock(WebAppSecurityConfig.class);
  ruh=mockery.mock(ReferrerURLCookieHandler.class);
  hmc=mockery.mock(HttpMessageContext.class);
  ap=mockery.mock(AuthenticationParameters.class);
  mi=mockery.mock(MessageInfo.class);
  wr=mockery.mock(WebRequest.class);
  smd=mockery.mock(SecurityMetadata.class);
  rd=mockery.mock(RequestDispatcher.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  elpi=mockery.mock(ELProcessor.class,""String_Node_Str"");
  elpm=mockery.mock(ELProcessor.class,""String_Node_Str"");
  cdi=mockery.mock(CDI.class);
  ltci=new LoginToContinueInterceptor(){
    @Override protected boolean isMethodToIntercept(    InvocationContext ic){
      return isInterceptedMethod;
    }
    @Override protected Class getClass(    InvocationContext ic){
      return hamClass;
    }
    protected Class getTargetClass(    InvocationContext ic){
      return hamClass;
    }
    @Override protected WebAppSecurityConfig getWebSAppSeurityConfig(){
      return wasc;
    }
    @Override protected ELProcessor getELProcessorWithAppModuleBeanManagerELResolver(){
      return elp;
    }
    @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
}"
34873,"/** 
 * valid method. valid objects. use deferred EL. Make sure that el resolution happens every interception. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormELDeferred() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  final String elValue=""String_Node_Str"";
  final String elWrapped=""String_Node_Str"" + elValue + ""String_Node_Str"";
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGINEXPRESSION,elWrapped);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE);
  withELP(elpm,elValue,Boolean.FALSE).withNoELP(elpi);
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. use deferred EL. Make sure that el resolution happens every interception. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormELDeferred() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  final String elValue=""String_Node_Str"";
  final String elWrapped=""String_Node_Str"" + elValue + ""String_Node_Str"";
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGINEXPRESSION,elWrapped);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE).withAuthParams();
  withELP(elpm,elValue,Boolean.FALSE).withNoELP(elpi);
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34874,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptSuccessForm() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  Object expect=AuthenticationStatus.SUCCESS;
  Properties props=new Properties();
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withParams().withReferrer().withGetURL(storedReq,requestUrl);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptSuccessForm() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  Object expect=AuthenticationStatus.SUCCESS;
  Properties props=new Properties();
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withParams().withReferrer().withGetURL(storedReq,requestUrl).withAuthParams();
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34875,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptSuccessCustomForm() throws Exception {
  isInterceptedMethod=true;
  hamClass=CUSTOM_FORM_CLASS;
  ltci.setMPP(mpp);
  Object expect=AuthenticationStatus.SUCCESS;
  Properties props=new Properties();
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withParams().withReferrer().withGetURL(storedReq,requestUrl);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptSuccessCustomForm() throws Exception {
  isInterceptedMethod=true;
  hamClass=CUSTOM_FORM_CLASS;
  ltci.setMPP(mpp);
  Object expect=AuthenticationStatus.SUCCESS;
  Properties props=new Properties();
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withParams().withReferrer().withGetURL(storedReq,requestUrl).withAuthParams();
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34876,"/** 
 * valid method. valid objects. use immediate EL. Make sure that el resolution happens during initiallization, and does not happen  while intercepting the request. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormELImmediate() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  final String elValue=""String_Node_Str"";
  final String elWrapped=""String_Node_Str"" + elValue + ""String_Node_Str"";
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGINEXPRESSION,elWrapped);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE);
  withELP(elpi,elValue,Boolean.FALSE).withNoELP(elpm);
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. use immediate EL. Make sure that el resolution happens during initiallization, and does not happen  while intercepting the request. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormELImmediate() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  final String elValue=""String_Node_Str"";
  final String elWrapped=""String_Node_Str"" + elValue + ""String_Node_Str"";
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGINEXPRESSION,elWrapped);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE).withAuthParams();
  withELP(elpi,elValue,Boolean.FALSE).withNoELP(elpm);
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34877,"@Override public boolean authenticate(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  Subject callerSubject=subjectManager.getCallerSubject();
  if (!subjectHelper.isUnauthenticated(callerSubject)) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"");
    return true;
  }
  WebReply webReply=PERMIT_REPLY;
  boolean result=true;
  WebRequest webRequest=new WebRequestImpl(req,resp,getSecurityMetadata(),webAppSecConfig);
  AuthenticationResult authResult=null;
  if (isJaspiEnabled && ((JaspiService)webAuthenticatorRef.getService(""String_Node_Str"")).isAnyProviderRegistered(webRequest)) {
    authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
  }
  if (authResult == null || authResult.getStatus() == AuthResult.CONTINUE) {
    authResult=authenticateRequest(webRequest);
  }
  if (authResult.getStatus() == AuthResult.SUCCESS) {
    getAuthenticateApi().postProgrammaticAuthenticate(req,resp,authResult);
  }
 else {
    String realm=authResult.realm;
    if (realm == null) {
      realm=collabUtils.getUserRegistryRealm(securityServiceRef);
    }
    webReply=createReplyForAuthnFailure(authResult,realm);
    result=false;
  }
  authResult.setTargetRealm(authResult.realm != null ? authResult.realm : collabUtils.getUserRegistryRealm(securityServiceRef));
  webReply.writeResponse(resp);
  Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,Integer.valueOf(webReply.getStatusCode()));
  return result;
}","@Override public boolean authenticate(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  Subject callerSubject=subjectManager.getCallerSubject();
  if (!subjectHelper.isUnauthenticated(callerSubject)) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"");
    return true;
  }
  WebReply webReply=PERMIT_REPLY;
  boolean result=true;
  WebRequest webRequest=new WebRequestImpl(req,resp,getSecurityMetadata(),webAppSecConfig);
  AuthenticationResult authResult=null;
  if (isJaspiEnabled && ((JaspiService)webAuthenticatorRef.getService(""String_Node_Str"")).isAnyProviderRegistered(webRequest)) {
    authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
  }
  if (authResult == null || authResult.getStatus() == AuthResult.CONTINUE) {
    authResult=authenticateRequest(webRequest);
  }
  if (authResult.getStatus() == AuthResult.SUCCESS) {
    getAuthenticateApi().postProgrammaticAuthenticate(req,resp,authResult);
  }
 else {
    String realm=authResult.realm;
    if (realm == null) {
      realm=collabUtils.getUserRegistryRealm(securityServiceRef);
    }
    webReply=createReplyForAuthnFailure(authResult,realm);
    result=false;
  }
  authResult.setTargetRealm(authResult.realm != null ? authResult.realm : collabUtils.getUserRegistryRealm(securityServiceRef));
  if (!resp.isCommitted()) {
    webReply.writeResponse(resp);
  }
  Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,Integer.valueOf(webReply.getStatusCode()));
  return result;
}"
34878,"@Test public void testAuthenticateMethodFailure() throws Exception {
  secColl=new WebAppSecurityCollaboratorImplTestDouble2();
  final WebModuleMetaData wmmd=createWebModuleMetaDataMock();
  setTestWebModuleMetaDataOnThread(wmmd);
  final AuthenticationResult authResult=new AuthenticationResult(AuthResult.FAILURE,(String)null);
  this.authResult=authResult;
  createTestSpecificUserRegistryExpectations(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(commonSecurityMetadata).getLoginConfiguration();
      will(returnValue(commonloginConfiguration));
      allowing(commonloginConfiguration).getAuthenticationMethod();
      will(returnValue(""String_Node_Str""));
      allowing(commonReq).getCookies();
      will(returnValue(null));
      allowing(authenticator).authenticate(commonWebRequest);
      will(returnValue(authResult));
      one(commongResp).sendError(403,""String_Node_Str"");
    }
  }
);
  configProps.put(WebAppSecurityConfigImpl.CFG_KEY_SINGLE_SIGN_ON_ENABLED,false);
  secColl.setAuthenticatorFactory(authenticatorFactory);
  secColl.setSecurityService(securityServiceRef);
  secColl.setTaiService(taiServiceRef);
  secColl.activate(cc,configProps);
  assertFalse(secColl.authenticate(commonReq,commongResp));
}","@Test public void testAuthenticateMethodFailure() throws Exception {
  secColl=new WebAppSecurityCollaboratorImplTestDouble2();
  final WebModuleMetaData wmmd=createWebModuleMetaDataMock();
  setTestWebModuleMetaDataOnThread(wmmd);
  final AuthenticationResult authResult=new AuthenticationResult(AuthResult.FAILURE,(String)null);
  this.authResult=authResult;
  createTestSpecificUserRegistryExpectations(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(commonSecurityMetadata).getLoginConfiguration();
      will(returnValue(commonloginConfiguration));
      allowing(commonloginConfiguration).getAuthenticationMethod();
      will(returnValue(""String_Node_Str""));
      allowing(commonReq).getCookies();
      will(returnValue(null));
      allowing(authenticator).authenticate(commonWebRequest);
      will(returnValue(authResult));
      one(commongResp).isCommitted();
      will(returnValue(false));
      one(commongResp).sendError(403,""String_Node_Str"");
    }
  }
);
  configProps.put(WebAppSecurityConfigImpl.CFG_KEY_SINGLE_SIGN_ON_ENABLED,false);
  secColl.setAuthenticatorFactory(authenticatorFactory);
  secColl.setSecurityService(securityServiceRef);
  secColl.setTaiService(taiServiceRef);
  secColl.activate(cc,configProps);
  assertFalse(secColl.authenticate(commonReq,commongResp));
}"
34879,"@Test public void testAuthenticateMethodSuccess() throws Exception {
  Subject subject=createAuthenticatedSubject();
  secColl=new WebAppSecurityCollaboratorImplTestDouble2();
  final AuthenticationResult authResult=new AuthenticationResult(AuthResult.SUCCESS,subject);
  final WebModuleMetaData wmmd=createWebModuleMetaDataMock();
  setTestWebModuleMetaDataOnThread(wmmd);
  this.authResult=authResult;
  mock.checking(new Expectations(){
{
      allowing(userRegistry).getRealm();
    }
  }
);
  configProps.put(WebAppSecurityConfigImpl.CFG_KEY_SINGLE_SIGN_ON_ENABLED,false);
  secColl.setAuthenticatorFactory(authenticatorFactory);
  secColl.setSecurityService(securityServiceRef);
  secColl.setTaiService(taiServiceRef);
  secColl.activate(cc,configProps);
  secColl.authenticate(commonReq,commongResp);
  assertEquals(subject,subjectManager.getCallerSubject());
  assertEquals(subject,subjectManager.getInvocationSubject());
}","@Test public void testAuthenticateMethodSuccess() throws Exception {
  Subject subject=createAuthenticatedSubject();
  secColl=new WebAppSecurityCollaboratorImplTestDouble2();
  final AuthenticationResult authResult=new AuthenticationResult(AuthResult.SUCCESS,subject);
  final WebModuleMetaData wmmd=createWebModuleMetaDataMock();
  setTestWebModuleMetaDataOnThread(wmmd);
  this.authResult=authResult;
  mock.checking(new Expectations(){
{
      allowing(userRegistry).getRealm();
      one(commongResp).isCommitted();
      will(returnValue(false));
    }
  }
);
  configProps.put(WebAppSecurityConfigImpl.CFG_KEY_SINGLE_SIGN_ON_ENABLED,false);
  secColl.setAuthenticatorFactory(authenticatorFactory);
  secColl.setSecurityService(securityServiceRef);
  secColl.setTaiService(taiServiceRef);
  secColl.activate(cc,configProps);
  secColl.authenticate(commonReq,commongResp);
  assertEquals(subject,subjectManager.getCallerSubject());
  assertEquals(subject,subjectManager.getInvocationSubject());
}"
34880,"@FFDCIgnore({javax.security.auth.message.AuthException.class,com.ibm.websphere.security.auth.WSLoginFailedException.class}) private AuthenticationResult authenticate(Subject clientSubject,String authType,JaspiRequest jaspiRequest,AuthConfigProvider provider) throws AuthenticationException {
  if (tc.isEntryEnabled())   Tr.entry(tc,""String_Node_Str"",new Object[]{clientSubject,authType,jaspiRequest,provider});
  AuthenticationResult authResult=null;
  Subject serviceSubject=null;
  AuthStatus status=null;
  WebSecurityContext webSecurityContext=jaspiRequest.getWebSecurityContext();
  jaspiRequest.getHttpServletRequest().getServletContext().setAttribute(""String_Node_Str"",Boolean.toString(Boolean.TRUE));
  JaspiAuthContext jac=null;
  try {
    ServerAuthContext authContext=getServerAuthContext(jaspiRequest,provider);
    MessageInfo msgInfo=jaspiRequest.getMessageInfo();
    if (msgInfo != null) {
      msgInfo.getMap().put(JaspiConstants.SECURITY_WEB_REQUEST,jaspiRequest.getWebRequest());
    }
 else {
      if (tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"");
      }
    }
    setRequestAuthType(jaspiRequest.getHttpServletRequest(),authType);
    if (webSecurityContext != null) {
      setRunSecureResponse(true,(JaspiAuthContext)webSecurityContext.getJaspiAuthContext());
    }
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"",new Object[]{""String_Node_Str"" + authContext,clientSubject,msgInfo});
    }
    status=authContext.validateRequest(msgInfo,clientSubject,serviceSubject);
    if (tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"" + status);
    if (AuthStatus.SUCCESS == status || AuthStatus.SEND_SUCCESS == status) {
      Map msgInfoMap=msgInfo.getMap();
      if (msgInfoMap != null) {
        String session=(String)msgInfoMap.get(""String_Node_Str"");
        if (Boolean.valueOf(session).booleanValue()) {
          Map<String,Object> props=new HashMap<String,Object>();
          props.put(""String_Node_Str"",session);
          jaspiRequest.getWebRequest().setProperties(props);
        }
      }
      Object request=msgInfo.getRequestMessage();
      if (request != null && request != jaspiRequest.getHttpServletRequest()) {
        jaspiRequest.getHttpServletRequest().setAttribute(""String_Node_Str"",request);
      }
      Object response=msgInfo.getResponseMessage();
      if (response != null && response != jaspiRequest.getHttpServletResponse()) {
        jaspiRequest.getHttpServletRequest().setAttribute(""String_Node_Str"",response);
      }
      Subject callerSubject=doHashTableLogin(clientSubject,jaspiRequest);
      if (callerSubject != null && !callerSubject.getPrincipals().isEmpty()) {
        extraAuditData.put(""String_Node_Str"",callerSubject.getPrincipals().iterator().next().getName());
      }
      authResult=mapToAuthenticationResult(status,jaspiRequest,callerSubject);
      setRequestAuthType(msgInfo,jaspiRequest);
    }
 else {
      authResult=mapToAuthenticationResult(status,jaspiRequest,null);
    }
  }
 catch (  AuthException e) {
    AuthenticationException ex=new AuthenticationException(""String_Node_Str"" + e);
    ex.initCause(e);
    if (webSecurityContext != null) {
      setRunSecureResponse(false,(JaspiAuthContext)webSecurityContext.getJaspiAuthContext());
    }
    throw ex;
  }
catch (  WSLoginFailedException e) {
    AuthenticationException ex=new AuthenticationException(""String_Node_Str"" + e);
    ex.initCause(e);
    throw ex;
  }
  if (tc.isEntryEnabled())   Tr.exit(tc,""String_Node_Str"",status);
  return authResult;
}","@FFDCIgnore({javax.security.auth.message.AuthException.class,com.ibm.websphere.security.auth.WSLoginFailedException.class}) private AuthenticationResult authenticate(Subject clientSubject,String authType,JaspiRequest jaspiRequest,AuthConfigProvider provider) throws AuthenticationException {
  if (tc.isEntryEnabled())   Tr.entry(tc,""String_Node_Str"",new Object[]{clientSubject,authType,jaspiRequest,provider});
  AuthenticationResult authResult=null;
  Subject serviceSubject=null;
  AuthStatus status=null;
  WebSecurityContext webSecurityContext=jaspiRequest.getWebSecurityContext();
  jaspiRequest.getHttpServletRequest().getServletContext().setAttribute(""String_Node_Str"",Boolean.toString(Boolean.TRUE));
  JaspiAuthContext jac=null;
  try {
    ServerAuthContext authContext=getServerAuthContext(jaspiRequest,provider);
    MessageInfo msgInfo=jaspiRequest.getMessageInfo();
    setRequestAuthType(jaspiRequest.getHttpServletRequest(),authType);
    if (webSecurityContext != null) {
      setRunSecureResponse(true,(JaspiAuthContext)webSecurityContext.getJaspiAuthContext());
    }
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"",new Object[]{""String_Node_Str"" + authContext,clientSubject,msgInfo});
    }
    status=authContext.validateRequest(msgInfo,clientSubject,serviceSubject);
    if (tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"" + status);
    if (AuthStatus.SUCCESS == status || AuthStatus.SEND_SUCCESS == status) {
      Map msgInfoMap=msgInfo.getMap();
      if (msgInfoMap != null) {
        String session=(String)msgInfoMap.get(""String_Node_Str"");
        if (Boolean.valueOf(session).booleanValue()) {
          Map<String,Object> props=new HashMap<String,Object>();
          props.put(""String_Node_Str"",session);
          jaspiRequest.getWebRequest().setProperties(props);
        }
      }
      Object request=msgInfo.getRequestMessage();
      if (request != null && request != jaspiRequest.getHttpServletRequest()) {
        jaspiRequest.getHttpServletRequest().setAttribute(""String_Node_Str"",request);
      }
      Object response=msgInfo.getResponseMessage();
      if (response != null && response != jaspiRequest.getHttpServletResponse()) {
        jaspiRequest.getHttpServletRequest().setAttribute(""String_Node_Str"",response);
      }
      Subject callerSubject=doHashTableLogin(clientSubject,jaspiRequest);
      if (callerSubject != null && !callerSubject.getPrincipals().isEmpty()) {
        extraAuditData.put(""String_Node_Str"",callerSubject.getPrincipals().iterator().next().getName());
      }
      authResult=mapToAuthenticationResult(status,jaspiRequest,callerSubject);
      setRequestAuthType(msgInfo,jaspiRequest);
    }
 else {
      authResult=mapToAuthenticationResult(status,jaspiRequest,null);
    }
  }
 catch (  AuthException e) {
    AuthenticationException ex=new AuthenticationException(""String_Node_Str"" + e);
    ex.initCause(e);
    if (webSecurityContext != null) {
      setRunSecureResponse(false,(JaspiAuthContext)webSecurityContext.getJaspiAuthContext());
    }
    throw ex;
  }
catch (  WSLoginFailedException e) {
    AuthenticationException ex=new AuthenticationException(""String_Node_Str"" + e);
    ex.initCause(e);
    throw ex;
  }
  if (tc.isEntryEnabled())   Tr.exit(tc,""String_Node_Str"",status);
  return authResult;
}"
34881,"protected AuthenticationStatus gotoLoginPage(Properties props,HttpServletRequest req,HttpServletResponse res,HttpMessageContext httpMessageContext) throws IOException {
  String loginPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE);
  String errorPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE);
  boolean useForwardToLogin=getUseForwardToLogin();
  AuthenticationStatus status=AuthenticationStatus.SEND_CONTINUE;
  MessageInfo msgInfo=httpMessageContext.getMessageInfo();
  WebRequest webRequest=(WebRequest)msgInfo.getMap().get(JaspiConstants.SECURITY_WEB_REQUEST);
  updateFormLoginConfiguration(loginPage,errorPage,webRequest.getSecurityMetadata());
  setCookies(req,res);
  if (useForwardToLogin) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    RequestDispatcher rd=req.getRequestDispatcher(loginPage);
    try {
      rd.forward(req,res);
    }
 catch (    Exception e) {
      status=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    res.setStatus(HttpServletResponse.SC_FOUND);
    String loginUrl=getUrl(req,loginPage);
    res.sendRedirect(res.encodeURL(loginUrl));
  }
  return status;
}","protected AuthenticationStatus gotoLoginPage(Properties props,HttpServletRequest req,HttpServletResponse res,HttpMessageContext httpMessageContext) throws IOException {
  String loginPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE);
  String errorPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE);
  boolean useForwardToLogin=getUseForwardToLogin();
  AuthenticationStatus status=AuthenticationStatus.SEND_CONTINUE;
  updateFormLoginConfiguration(loginPage,errorPage);
  setCookies(req,res);
  if (useForwardToLogin) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    RequestDispatcher rd=req.getRequestDispatcher(loginPage);
    try {
      rd.forward(req,res);
    }
 catch (    Exception e) {
      status=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    res.setStatus(HttpServletResponse.SC_FOUND);
    String loginUrl=getUrl(req,loginPage);
    res.sendRedirect(res.encodeURL(loginUrl));
  }
  return status;
}"
34882,"private void updateFormLoginConfiguration(String loginPage,String errorPage,SecurityMetadata securityMetadata){
  if (loginPage != null && errorPage != null) {
    FormLoginConfiguration flc=new FormLoginConfigurationImpl(loginPage,errorPage);
    LoginConfiguration lc=new LoginConfigurationImpl(LoginConfiguration.FORM,null,flc);
    securityMetadata.setLoginConfiguration(lc);
    if (tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"" + lc);
  }
}","private void updateFormLoginConfiguration(String loginPage,String errorPage){
  if (loginPage != null && errorPage != null) {
    FormLoginConfiguration flc=new FormLoginConfigurationImpl(loginPage,errorPage);
    LoginConfiguration lc=new LoginConfigurationImpl(LoginConfiguration.FORM,null,flc);
    getSecurityMetadata().setLoginConfiguration(lc);
    if (tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"" + lc);
  }
}"
34883,"@Test public void testGetRunningTaskCount() throws Exception {
  PolicyExecutor executor=provider.create(""String_Node_Str"").maxConcurrency(2);
  CountDownLatch beginLatch1=new CountDownLatch(1);
  CountDownLatch continueLatch1=new CountDownLatch(1);
  CountDownLatch beginLatch2=new CountDownLatch(1);
  CountDownLatch continueLatch2=new CountDownLatch(1);
  assertEquals(0,executor.getRunningTaskCount());
  CountDownTask task1=new CountDownTask(beginLatch1,continueLatch1,TimeUnit.HOURS.toNanos(1));
  Future<Boolean> future1=executor.submit(task1);
  assertTrue(beginLatch1.await(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(1,executor.getRunningTaskCount());
  CountDownTask task2=new CountDownTask(beginLatch2,continueLatch2,TimeUnit.HOURS.toNanos(1));
  Future<Boolean> future2=executor.submit(task2);
  assertTrue(beginLatch2.await(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(2,executor.getRunningTaskCount());
  continueLatch1.countDown();
  assertTrue(future1.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(1,executor.getRunningTaskCount());
  executor.shutdown();
  assertEquals(1,executor.getRunningTaskCount());
  continueLatch2.countDown();
  assertTrue(future2.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(0,executor.getRunningTaskCount());
}","@Test public void testGetRunningTaskCount() throws Exception {
  PolicyExecutor executor=provider.create(""String_Node_Str"").maxConcurrency(2);
  CountDownLatch beginLatch1=new CountDownLatch(1);
  CountDownLatch continueLatch1=new CountDownLatch(1);
  CountDownLatch beginLatch2=new CountDownLatch(1);
  CountDownLatch continueLatch2=new CountDownLatch(1);
  assertEquals(0,executor.getRunningTaskCount());
  CountDownTask task1=new CountDownTask(beginLatch1,continueLatch1,TimeUnit.HOURS.toNanos(1));
  Future<Boolean> future1=executor.submit(task1);
  assertTrue(beginLatch1.await(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(1,executor.getRunningTaskCount());
  CountDownTask task2=new CountDownTask(beginLatch2,continueLatch2,TimeUnit.HOURS.toNanos(1));
  Future<Boolean> future2=executor.submit(task2);
  assertTrue(beginLatch2.await(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertEquals(2,executor.getRunningTaskCount());
  continueLatch1.countDown();
  assertTrue(future1.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  for (long start=System.nanoTime(); executor.getRunningTaskCount() != 1 && System.nanoTime() - start < TIMEOUT_NS; Thread.sleep(200))   ;
  assertEquals(1,executor.getRunningTaskCount());
  executor.shutdown();
  assertEquals(1,executor.getRunningTaskCount());
  continueLatch2.countDown();
  assertTrue(future2.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  for (long start=System.nanoTime(); executor.getRunningTaskCount() != 0 && System.nanoTime() - start < TIMEOUT_NS; Thread.sleep(200))   ;
  assertEquals(0,executor.getRunningTaskCount());
}"
34884,"protected AuthenticationStatus gotoLoginPage(Properties props,HttpServletRequest req,HttpServletResponse res,HttpMessageContext httpMessageContext) throws IOException {
  String loginPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE);
  String errorPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE);
  boolean useForwardToLogin=getUseForwardToLogin();
  AuthenticationStatus status=AuthenticationStatus.SEND_CONTINUE;
  MessageInfo msgInfo=httpMessageContext.getMessageInfo();
  WebRequest webRequest=(WebRequest)msgInfo.getMap().get(JaspiConstants.SECURITY_WEB_REQUEST);
  updateFormLoginConfiguration(loginPage,errorPage,webRequest.getSecurityMetadata());
  setCookies(req,res);
  if (useForwardToLogin) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    RequestDispatcher rd=req.getRequestDispatcher(loginPage);
    try {
      rd.forward(req,res);
    }
 catch (    Exception e) {
      status=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    res.setStatus(HttpServletResponse.SC_FOUND);
    String loginUrl=getLoginUrl(req,loginPage);
    res.sendRedirect(res.encodeURL(loginUrl));
  }
  return status;
}","protected AuthenticationStatus gotoLoginPage(Properties props,HttpServletRequest req,HttpServletResponse res,HttpMessageContext httpMessageContext) throws IOException {
  String loginPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE);
  String errorPage=(String)props.get(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE);
  boolean useForwardToLogin=getUseForwardToLogin();
  AuthenticationStatus status=AuthenticationStatus.SEND_CONTINUE;
  MessageInfo msgInfo=httpMessageContext.getMessageInfo();
  WebRequest webRequest=(WebRequest)msgInfo.getMap().get(JaspiConstants.SECURITY_WEB_REQUEST);
  updateFormLoginConfiguration(loginPage,errorPage,webRequest.getSecurityMetadata());
  setCookies(req,res);
  if (useForwardToLogin) {
    if (tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"");
    }
    RequestDispatcher rd=req.getRequestDispatcher(loginPage);
    try {
      rd.forward(req,res);
    }
 catch (    Exception e) {
      status=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    res.setStatus(HttpServletResponse.SC_FOUND);
    String loginUrl=getUrl(req,loginPage);
    res.sendRedirect(res.encodeURL(loginUrl));
  }
  return status;
}"
34885,"@AroundInvoke public Object intercept(InvocationContext ic) throws Exception {
  Object result=null;
  if (isMethodToIntercept(ic)) {
    if (mpp != null) {
      result=ic.proceed();
      Object[] params=ic.getParameters();
      HttpServletRequest req=(HttpServletRequest)params[0];
      HttpServletResponse res=(HttpServletResponse)params[1];
      Class hamClass=getClass(ic);
      if (result.equals(AuthenticationStatus.SEND_CONTINUE)) {
        HttpMessageContext mc=(HttpMessageContext)params[2];
        result=gotoLoginPage(mpp.getAuthMechProperties(hamClass),req,res,mc);
      }
 else       if (result.equals(AuthenticationStatus.SUCCESS)) {
        boolean isCustomForm=isCustomForm(hamClass);
        postLoginProcess(req,res,isCustomForm);
      }
    }
 else {
      Tr.error(tc,""String_Node_Str"");
      result=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    result=ic.proceed();
  }
  return result;
}","@AroundInvoke public Object intercept(InvocationContext ic) throws Exception {
  Object result=null;
  if (isMethodToIntercept(ic)) {
    if (mpp != null) {
      result=ic.proceed();
      Object[] params=ic.getParameters();
      HttpServletRequest req=(HttpServletRequest)params[0];
      HttpServletResponse res=(HttpServletResponse)params[1];
      HttpMessageContext hmc=(HttpMessageContext)params[2];
      AuthenticationParameters authParams=hmc.getAuthParameters();
      Class hamClass=getClass(ic);
      if (!isNewAuth(authParams)) {
        if (result.equals(AuthenticationStatus.SEND_CONTINUE)) {
          result=gotoLoginPage(mpp.getAuthMechProperties(hamClass),req,res,hmc);
        }
 else         if (result.equals(AuthenticationStatus.SUCCESS)) {
          boolean isCustomForm=isCustomForm(hamClass);
          postLoginProcess(req,res,isCustomForm);
        }
 else         if (result.equals(AuthenticationStatus.SEND_FAILURE)) {
          if (isCustomForm(hamClass)) {
            rediectErrorPage(mpp.getAuthMechProperties(hamClass),req,res);
          }
        }
      }
    }
 else {
      Tr.error(tc,""String_Node_Str"");
      result=AuthenticationStatus.SEND_FAILURE;
    }
  }
 else {
    result=ic.proceed();
  }
  return result;
}"
34886,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormDefault() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withForward(LOGIN_PAGE).withNoELP();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormDefault() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withForward(LOGIN_PAGE).withNoELP().withAuthParams();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34887,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormRedirect() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,Boolean.FALSE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE).withNoELP();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormRedirect() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,Boolean.FALSE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE).withNoELP().withAuthParams();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34888,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormForward() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,Boolean.TRUE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withForward(LOGIN_PAGE).withNoELP();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormForward() throws Exception {
  isInterceptedMethod=true;
  ltci.setMPP(mpp);
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGIN,Boolean.TRUE);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withForward(LOGIN_PAGE).withNoELP().withAuthParams();
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34889,"@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  ici=mockery.mock(InvocationContext.class,""String_Node_Str"");
  icm=mockery.mock(InvocationContext.class,""String_Node_Str"");
  mpp=mockery.mock(ModulePropertiesProvider.class);
  mppi=mockery.mock(Instance.class,""String_Node_Str"");
  wasc=mockery.mock(WebAppSecurityConfig.class);
  ruh=mockery.mock(ReferrerURLCookieHandler.class);
  hmc=mockery.mock(HttpMessageContext.class);
  mi=mockery.mock(MessageInfo.class);
  wr=mockery.mock(WebRequest.class);
  smd=mockery.mock(SecurityMetadata.class);
  rd=mockery.mock(RequestDispatcher.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  elpi=mockery.mock(ELProcessor.class,""String_Node_Str"");
  elpm=mockery.mock(ELProcessor.class,""String_Node_Str"");
  cdi=mockery.mock(CDI.class);
  ltci=new LoginToContinueInterceptor(){
    @Override protected boolean isMethodToIntercept(    InvocationContext ic){
      return isInterceptedMethod;
    }
    @Override protected Class getClass(    InvocationContext ic){
      return hamClass;
    }
    protected Class getTargetClass(    InvocationContext ic){
      return hamClass;
    }
    @Override protected WebAppSecurityConfig getWebSAppSeurityConfig(){
      return wasc;
    }
    @Override protected ELProcessor getELProcessorWithAppModuleBeanManagerELResolver(){
      return elp;
    }
    @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
}","@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  ici=mockery.mock(InvocationContext.class,""String_Node_Str"");
  icm=mockery.mock(InvocationContext.class,""String_Node_Str"");
  mpp=mockery.mock(ModulePropertiesProvider.class);
  mppi=mockery.mock(Instance.class,""String_Node_Str"");
  wasc=mockery.mock(WebAppSecurityConfig.class);
  ruh=mockery.mock(ReferrerURLCookieHandler.class);
  hmc=mockery.mock(HttpMessageContext.class);
  ap=mockery.mock(AuthenticationParameters.class);
  mi=mockery.mock(MessageInfo.class);
  wr=mockery.mock(WebRequest.class);
  smd=mockery.mock(SecurityMetadata.class);
  rd=mockery.mock(RequestDispatcher.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  elpi=mockery.mock(ELProcessor.class,""String_Node_Str"");
  elpm=mockery.mock(ELProcessor.class,""String_Node_Str"");
  cdi=mockery.mock(CDI.class);
  ltci=new LoginToContinueInterceptor(){
    @Override protected boolean isMethodToIntercept(    InvocationContext ic){
      return isInterceptedMethod;
    }
    @Override protected Class getClass(    InvocationContext ic){
      return hamClass;
    }
    protected Class getTargetClass(    InvocationContext ic){
      return hamClass;
    }
    @Override protected WebAppSecurityConfig getWebSAppSeurityConfig(){
      return wasc;
    }
    @Override protected ELProcessor getELProcessorWithAppModuleBeanManagerELResolver(){
      return elp;
    }
    @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
}"
34890,"/** 
 * valid method. valid objects. use deferred EL. Make sure that el resolution happens every interception. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormELDeferred() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  final String elValue=""String_Node_Str"";
  final String elWrapped=""String_Node_Str"" + elValue + ""String_Node_Str"";
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGINEXPRESSION,elWrapped);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE);
  withELP(elpm,elValue,Boolean.FALSE).withNoELP(elpi);
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. use deferred EL. Make sure that el resolution happens every interception. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormELDeferred() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  final String elValue=""String_Node_Str"";
  final String elWrapped=""String_Node_Str"" + elValue + ""String_Node_Str"";
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGINEXPRESSION,elWrapped);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE).withAuthParams();
  withELP(elpm,elValue,Boolean.FALSE).withNoELP(elpi);
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34891,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptSuccessForm() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  Object expect=AuthenticationStatus.SUCCESS;
  Properties props=new Properties();
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withParams().withReferrer().withGetURL(storedReq,requestUrl);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptSuccessForm() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  Object expect=AuthenticationStatus.SUCCESS;
  Properties props=new Properties();
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withParams().withReferrer().withGetURL(storedReq,requestUrl).withAuthParams();
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34892,"/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptSuccessCustomForm() throws Exception {
  isInterceptedMethod=true;
  hamClass=CUSTOM_FORM_CLASS;
  ltci.setMPP(mpp);
  Object expect=AuthenticationStatus.SUCCESS;
  Properties props=new Properties();
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withParams().withReferrer().withGetURL(storedReq,requestUrl);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptSuccessCustomForm() throws Exception {
  isInterceptedMethod=true;
  hamClass=CUSTOM_FORM_CLASS;
  ltci.setMPP(mpp);
  Object expect=AuthenticationStatus.SUCCESS;
  Properties props=new Properties();
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withParams().withReferrer().withGetURL(storedReq,requestUrl).withAuthParams();
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34893,"/** 
 * valid method. valid objects. use immediate EL. Make sure that el resolution happens during initiallization, and does not happen  while intercepting the request. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormELImmediate() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  final String elValue=""String_Node_Str"";
  final String elWrapped=""String_Node_Str"" + elValue + ""String_Node_Str"";
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGINEXPRESSION,elWrapped);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE);
  withELP(elpi,elValue,Boolean.FALSE).withNoELP(elpm);
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}","/** 
 * valid method. valid objects. use immediate EL. Make sure that el resolution happens during initiallization, and does not happen  while intercepting the request. Make sure that AuthenticationStatus.SUCCESS is returned along with redirection to the original url.
 */
@Test public void testInterceptContinueFormELImmediate() throws Exception {
  isInterceptedMethod=true;
  hamClass=FORM_CLASS;
  ltci.setMPP(mpp);
  final String elValue=""String_Node_Str"";
  final String elWrapped=""String_Node_Str"" + elValue + ""String_Node_Str"";
  Properties props=new Properties();
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_LOGINPAGE,LOGIN_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_ERRORPAGE,ERROR_PAGE);
  props.put(JavaEESecConstants.LOGIN_TO_CONTINUE_USEFORWARDTOLOGINEXPRESSION,elWrapped);
  Object expect=AuthenticationStatus.SEND_CONTINUE;
  String storedReq=""String_Node_Str"";
  String requestUrl=""String_Node_Str"";
  withInvocationContext(expect).withProps(props).withParams().withReferrer().withSetCookies().withRedirect(LOGIN_PAGE).withAuthParams();
  withELP(elpi,elValue,Boolean.FALSE).withNoELP(elpm);
  ltci.initialize(ici);
  assertEquals(""String_Node_Str"",expect,ltci.intercept(icm));
}"
34894,"@Override public boolean authenticate(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  Subject callerSubject=subjectManager.getCallerSubject();
  if (!subjectHelper.isUnauthenticated(callerSubject)) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"");
    return true;
  }
  WebReply webReply=PERMIT_REPLY;
  boolean result=true;
  WebRequest webRequest=new WebRequestImpl(req,resp,getSecurityMetadata(),webAppSecConfig);
  AuthenticationResult authResult=null;
  if (isJaspiEnabled && ((JaspiService)webAuthenticatorRef.getService(""String_Node_Str"")).isAnyProviderRegistered(webRequest)) {
    authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
  }
  if (authResult == null || authResult.getStatus() == AuthResult.CONTINUE) {
    authResult=authenticateRequest(webRequest);
  }
  if (authResult.getStatus() == AuthResult.SUCCESS) {
    getAuthenticateApi().postProgrammaticAuthenticate(req,resp,authResult);
  }
 else {
    String realm=authResult.realm;
    if (realm == null) {
      realm=collabUtils.getUserRegistryRealm(securityServiceRef);
    }
    webReply=createReplyForAuthnFailure(authResult,realm);
    result=false;
  }
  authResult.setTargetRealm(authResult.realm != null ? authResult.realm : collabUtils.getUserRegistryRealm(securityServiceRef));
  webReply.writeResponse(resp);
  Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,Integer.valueOf(webReply.getStatusCode()));
  return result;
}","@Override public boolean authenticate(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  Subject callerSubject=subjectManager.getCallerSubject();
  if (!subjectHelper.isUnauthenticated(callerSubject)) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())     Tr.debug(tc,""String_Node_Str"");
    return true;
  }
  WebReply webReply=PERMIT_REPLY;
  boolean result=true;
  WebRequest webRequest=new WebRequestImpl(req,resp,getSecurityMetadata(),webAppSecConfig);
  AuthenticationResult authResult=null;
  if (isJaspiEnabled && ((JaspiService)webAuthenticatorRef.getService(""String_Node_Str"")).isAnyProviderRegistered(webRequest)) {
    authResult=providerAuthenticatorProxy.handleJaspi(webRequest,null);
  }
  if (authResult == null || authResult.getStatus() == AuthResult.CONTINUE) {
    authResult=authenticateRequest(webRequest);
  }
  if (authResult.getStatus() == AuthResult.SUCCESS) {
    getAuthenticateApi().postProgrammaticAuthenticate(req,resp,authResult);
  }
 else {
    String realm=authResult.realm;
    if (realm == null) {
      realm=collabUtils.getUserRegistryRealm(securityServiceRef);
    }
    webReply=createReplyForAuthnFailure(authResult,realm);
    result=false;
  }
  authResult.setTargetRealm(authResult.realm != null ? authResult.realm : collabUtils.getUserRegistryRealm(securityServiceRef));
  if (!resp.isCommitted()) {
    webReply.writeResponse(resp);
  }
  Audit.audit(Audit.EventID.SECURITY_AUTHN_01,webRequest,authResult,Integer.valueOf(webReply.getStatusCode()));
  return result;
}"
34895,"@Test public void testAuthenticateMethodFailure() throws Exception {
  secColl=new WebAppSecurityCollaboratorImplTestDouble2();
  final WebModuleMetaData wmmd=createWebModuleMetaDataMock();
  setTestWebModuleMetaDataOnThread(wmmd);
  final AuthenticationResult authResult=new AuthenticationResult(AuthResult.FAILURE,(String)null);
  this.authResult=authResult;
  createTestSpecificUserRegistryExpectations(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(commonSecurityMetadata).getLoginConfiguration();
      will(returnValue(commonloginConfiguration));
      allowing(commonloginConfiguration).getAuthenticationMethod();
      will(returnValue(""String_Node_Str""));
      allowing(commonReq).getCookies();
      will(returnValue(null));
      allowing(authenticator).authenticate(commonWebRequest);
      will(returnValue(authResult));
      one(commongResp).sendError(403,""String_Node_Str"");
    }
  }
);
  configProps.put(WebAppSecurityConfigImpl.CFG_KEY_SINGLE_SIGN_ON_ENABLED,false);
  secColl.setAuthenticatorFactory(authenticatorFactory);
  secColl.setSecurityService(securityServiceRef);
  secColl.setTaiService(taiServiceRef);
  secColl.activate(cc,configProps);
  assertFalse(secColl.authenticate(commonReq,commongResp));
}","@Test public void testAuthenticateMethodFailure() throws Exception {
  secColl=new WebAppSecurityCollaboratorImplTestDouble2();
  final WebModuleMetaData wmmd=createWebModuleMetaDataMock();
  setTestWebModuleMetaDataOnThread(wmmd);
  final AuthenticationResult authResult=new AuthenticationResult(AuthResult.FAILURE,(String)null);
  this.authResult=authResult;
  createTestSpecificUserRegistryExpectations(""String_Node_Str"");
  mock.checking(new Expectations(){
{
      allowing(commonSecurityMetadata).getLoginConfiguration();
      will(returnValue(commonloginConfiguration));
      allowing(commonloginConfiguration).getAuthenticationMethod();
      will(returnValue(""String_Node_Str""));
      allowing(commonReq).getCookies();
      will(returnValue(null));
      allowing(authenticator).authenticate(commonWebRequest);
      will(returnValue(authResult));
      one(commongResp).isCommitted();
      will(returnValue(false));
      one(commongResp).sendError(403,""String_Node_Str"");
    }
  }
);
  configProps.put(WebAppSecurityConfigImpl.CFG_KEY_SINGLE_SIGN_ON_ENABLED,false);
  secColl.setAuthenticatorFactory(authenticatorFactory);
  secColl.setSecurityService(securityServiceRef);
  secColl.setTaiService(taiServiceRef);
  secColl.activate(cc,configProps);
  assertFalse(secColl.authenticate(commonReq,commongResp));
}"
34896,"@Test public void testAuthenticateMethodSuccess() throws Exception {
  Subject subject=createAuthenticatedSubject();
  secColl=new WebAppSecurityCollaboratorImplTestDouble2();
  final AuthenticationResult authResult=new AuthenticationResult(AuthResult.SUCCESS,subject);
  final WebModuleMetaData wmmd=createWebModuleMetaDataMock();
  setTestWebModuleMetaDataOnThread(wmmd);
  this.authResult=authResult;
  mock.checking(new Expectations(){
{
      allowing(userRegistry).getRealm();
    }
  }
);
  configProps.put(WebAppSecurityConfigImpl.CFG_KEY_SINGLE_SIGN_ON_ENABLED,false);
  secColl.setAuthenticatorFactory(authenticatorFactory);
  secColl.setSecurityService(securityServiceRef);
  secColl.setTaiService(taiServiceRef);
  secColl.activate(cc,configProps);
  secColl.authenticate(commonReq,commongResp);
  assertEquals(subject,subjectManager.getCallerSubject());
  assertEquals(subject,subjectManager.getInvocationSubject());
}","@Test public void testAuthenticateMethodSuccess() throws Exception {
  Subject subject=createAuthenticatedSubject();
  secColl=new WebAppSecurityCollaboratorImplTestDouble2();
  final AuthenticationResult authResult=new AuthenticationResult(AuthResult.SUCCESS,subject);
  final WebModuleMetaData wmmd=createWebModuleMetaDataMock();
  setTestWebModuleMetaDataOnThread(wmmd);
  this.authResult=authResult;
  mock.checking(new Expectations(){
{
      allowing(userRegistry).getRealm();
      one(commongResp).isCommitted();
      will(returnValue(false));
    }
  }
);
  configProps.put(WebAppSecurityConfigImpl.CFG_KEY_SINGLE_SIGN_ON_ENABLED,false);
  secColl.setAuthenticatorFactory(authenticatorFactory);
  secColl.setSecurityService(securityServiceRef);
  secColl.setTaiService(taiServiceRef);
  secColl.activate(cc,configProps);
  secColl.authenticate(commonReq,commongResp);
  assertEquals(subject,subjectManager.getCallerSubject());
  assertEquals(subject,subjectManager.getInvocationSubject());
}"
34897,"private void setRealmName(){
  if (mpp != null) {
    Properties props=mpp.getAuthMechProperties(BasicHttpAuthenticationMechanism.class);
    if (props != null) {
      realmName=(String)props.get(JavaEESecConstants.REALM_NAME);
    }
  }
  if (realmName == null || realmName.trim().isEmpty()) {
    Tr.warning(tc,""String_Node_Str"");
    realmName=DEFAULT_REALM;
  }
}","private void setRealmName(){
  mpp=getModulePropertiesProvider();
  if (mpp != null) {
    Properties props=mpp.getAuthMechProperties(BasicHttpAuthenticationMechanism.class);
    if (props != null) {
      realmName=(String)props.get(JavaEESecConstants.REALM_NAME);
    }
  }
  if (realmName == null || realmName.trim().isEmpty()) {
    Tr.warning(tc,""String_Node_Str"");
    realmName=DEFAULT_REALM;
  }
}"
34898,"@PostConstruct public void initialize(InvocationContext ic){
  if (mpp != null) {
    Class hamClass=getTargetClass(ic);
    initializeUseForwardToLogin(mpp.getAuthMechProperties(hamClass),isCustomHAM(hamClass));
  }
 else {
    Tr.error(tc,""String_Node_Str"");
  }
}","@PostConstruct public void initialize(InvocationContext ic){
  mpp=getModulePropertiesProvider();
  if (mpp != null) {
    Class hamClass=getTargetClass(ic);
    initializeUseForwardToLogin(mpp.getAuthMechProperties(hamClass),isCustomHAM(hamClass));
  }
 else {
    Tr.error(tc,""String_Node_Str"");
  }
}"
34899,"private BasicHttpAuthenticationMechanismTest setModulePropertiesProvider(final String realmName){
  final Properties props=new Properties();
  props.put(JavaEESecConstants.REALM_NAME,realmName);
  mockery.checking(new Expectations(){
{
      one(mpp).getAuthMechProperties(BasicHttpAuthenticationMechanism.class);
      will(returnValue(props));
    }
  }
);
  return this;
}","private BasicHttpAuthenticationMechanismTest setModulePropertiesProvider(final String realmName){
  final Properties props=new Properties();
  props.put(JavaEESecConstants.REALM_NAME,realmName);
  final Instance<ModulePropertiesProvider> mppi=mockery.mock(Instance.class,""String_Node_Str"");
  mockery.checking(new Expectations(){
{
      one(cdi).select(ModulePropertiesProvider.class);
      will(returnValue(mppi));
      one(mppi).get();
      will(returnValue(mpp));
      one(mpp).getAuthMechProperties(BasicHttpAuthenticationMechanism.class);
      will(returnValue(props));
    }
  }
);
  return this;
}"
34900,"@SuppressWarnings(""String_Node_Str"") private LoginToContinueInterceptorTest withProps(final Properties props) throws Exception {
  final HashMap map=new HashMap();
  map.put(JaspiConstants.SECURITY_WEB_REQUEST,wr);
  mockery.checking(new Expectations(){
{
      between(1,3).of(mpp).getAuthMechProperties(with(any(Class.class)));
      will(returnValue(props));
      one(hmc).getMessageInfo();
      will(returnValue(mi));
      one(mi).getMap();
      will(returnValue(map));
      one(wr).getSecurityMetadata();
      will(returnValue(smd));
      one(smd).setLoginConfiguration(with(any(LoginConfiguration.class)));
    }
  }
);
  return this;
}","@SuppressWarnings(""String_Node_Str"") private LoginToContinueInterceptorTest withProps(final Properties props) throws Exception {
  final HashMap map=new HashMap();
  map.put(JaspiConstants.SECURITY_WEB_REQUEST,wr);
  mockery.checking(new Expectations(){
{
      one(cdi).select(ModulePropertiesProvider.class);
      will(returnValue(mppi));
      one(mppi).get();
      will(returnValue(mpp));
      between(1,3).of(mpp).getAuthMechProperties(with(any(Class.class)));
      will(returnValue(props));
      one(hmc).getMessageInfo();
      will(returnValue(mi));
      one(mi).getMap();
      will(returnValue(map));
      one(wr).getSecurityMetadata();
      will(returnValue(smd));
      one(smd).setLoginConfiguration(with(any(LoginConfiguration.class)));
    }
  }
);
  return this;
}"
34901,"@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  ici=mockery.mock(InvocationContext.class,""String_Node_Str"");
  icm=mockery.mock(InvocationContext.class,""String_Node_Str"");
  mpp=mockery.mock(ModulePropertiesProvider.class);
  wasc=mockery.mock(WebAppSecurityConfig.class);
  ruh=mockery.mock(ReferrerURLCookieHandler.class);
  hmc=mockery.mock(HttpMessageContext.class);
  mi=mockery.mock(MessageInfo.class);
  wr=mockery.mock(WebRequest.class);
  smd=mockery.mock(SecurityMetadata.class);
  rd=mockery.mock(RequestDispatcher.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  elpi=mockery.mock(ELProcessor.class,""String_Node_Str"");
  elpm=mockery.mock(ELProcessor.class,""String_Node_Str"");
  ltci=new LoginToContinueInterceptor(){
    @Override protected boolean isMethodToIntercept(    InvocationContext ic){
      return isInterceptedMethod;
    }
    @Override protected Class getClass(    InvocationContext ic){
      return hamClass;
    }
    protected Class getTargetClass(    InvocationContext ic){
      return hamClass;
    }
    @Override protected WebAppSecurityConfig getWebSAppSeurityConfig(){
      return wasc;
    }
    @Override protected ELProcessor getELProcessorWithAppModuleBeanManagerELResolver(){
      return elp;
    }
  }
;
}","@SuppressWarnings(""String_Node_Str"") @Before public void setUp() throws Exception {
  ici=mockery.mock(InvocationContext.class,""String_Node_Str"");
  icm=mockery.mock(InvocationContext.class,""String_Node_Str"");
  mpp=mockery.mock(ModulePropertiesProvider.class);
  mppi=mockery.mock(Instance.class,""String_Node_Str"");
  wasc=mockery.mock(WebAppSecurityConfig.class);
  ruh=mockery.mock(ReferrerURLCookieHandler.class);
  hmc=mockery.mock(HttpMessageContext.class);
  mi=mockery.mock(MessageInfo.class);
  wr=mockery.mock(WebRequest.class);
  smd=mockery.mock(SecurityMetadata.class);
  rd=mockery.mock(RequestDispatcher.class);
  req=mockery.mock(HttpServletRequest.class);
  res=mockery.mock(HttpServletResponse.class);
  elpi=mockery.mock(ELProcessor.class,""String_Node_Str"");
  elpm=mockery.mock(ELProcessor.class,""String_Node_Str"");
  cdi=mockery.mock(CDI.class);
  ltci=new LoginToContinueInterceptor(){
    @Override protected boolean isMethodToIntercept(    InvocationContext ic){
      return isInterceptedMethod;
    }
    @Override protected Class getClass(    InvocationContext ic){
      return hamClass;
    }
    protected Class getTargetClass(    InvocationContext ic){
      return hamClass;
    }
    @Override protected WebAppSecurityConfig getWebSAppSeurityConfig(){
      return wasc;
    }
    @Override protected ELProcessor getELProcessorWithAppModuleBeanManagerELResolver(){
      return elp;
    }
    @Override protected CDI getCDI(){
      return cdi;
    }
  }
;
}"
34902,"@SuppressWarnings(""String_Node_Str"") private LoginToContinueInterceptorTest withInitProps(final Properties props) throws Exception {
  mockery.checking(new Expectations(){
{
      one(mpp).getAuthMechProperties(with(any(Class.class)));
      will(returnValue(props));
    }
  }
);
  return this;
}","@SuppressWarnings(""String_Node_Str"") private LoginToContinueInterceptorTest withInitProps(final Properties props) throws Exception {
  mockery.checking(new Expectations(){
{
      one(cdi).select(ModulePropertiesProvider.class);
      will(returnValue(mppi));
      one(mppi).get();
      will(returnValue(mpp));
      one(mpp).getAuthMechProperties(with(any(Class.class)));
      will(returnValue(props));
    }
  }
);
  return this;
}"
34903,"@Override public String callerNameAttribute(){
  return null;
}","@Override public String callerNameAttribute(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34904,"@Override public String groupMemberAttribute(){
  return null;
}","@Override public String groupMemberAttribute(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34905,"@Override public String priorityExpression(){
  return null;
}","@Override public String priorityExpression(){
  return (overrides != null && overrides.containsKey(JavaEESecConstants.PRIORITY_EXPRESSION)) ? (String)overrides.get(JavaEESecConstants.PRIORITY_EXPRESSION) : ""String_Node_Str"";
}"
34906,"@Override public String callerSearchFilter(){
  return null;
}","@Override public String callerSearchFilter(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34907,"@Override public String readTimeoutExpression(){
  return null;
}","@Override public String readTimeoutExpression(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34908,"@Override public String bindDn(){
  return null;
}","@Override public String bindDn(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34909,"@Override public String groupSearchFilter(){
  return null;
}","@Override public String groupSearchFilter(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34910,"@Override public int maxResults(){
  return 0;
}","@Override public int maxResults(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (Integer)overrides.get(""String_Node_Str"") : 1000;
}"
34911,"@Override public String callerBaseDn(){
  return null;
}","@Override public String callerBaseDn(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34912,"@Override public String groupNameAttribute(){
  return null;
}","@Override public String groupNameAttribute(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34913,"@Override public String maxResultsExpression(){
  return null;
}","@Override public String maxResultsExpression(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34914,"@Override public Class<? extends Annotation> annotationType(){
  return DatabaseIdentityStoreDefinition.class;
}","@Override public Class<? extends Annotation> annotationType(){
  return null;
}"
34915,"@Override public String groupSearchScopeExpression(){
  return null;
}","@Override public String groupSearchScopeExpression(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34916,"@Override public int priority(){
  return 0;
}","@Override public int priority(){
  return (overrides != null && overrides.containsKey(JavaEESecConstants.PRIORITY)) ? (Integer)overrides.get(JavaEESecConstants.PRIORITY) : 80;
}"
34917,"@Override public LdapSearchScope groupSearchScope(){
  return null;
}","@Override public LdapSearchScope groupSearchScope(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (LdapSearchScope)overrides.get(""String_Node_Str"") : LdapSearchScope.SUBTREE;
}"
34918,"@Override public String useForExpression(){
  return null;
}","@Override public String useForExpression(){
  return (overrides != null && overrides.containsKey(JavaEESecConstants.USE_FOR_EXPRESSION)) ? (String)overrides.get(JavaEESecConstants.USE_FOR_EXPRESSION) : ""String_Node_Str"";
}"
34919,"@Override public String callerSearchScopeExpression(){
  return null;
}","@Override public String callerSearchScopeExpression(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34920,"@Override public String callerSearchBase(){
  return null;
}","@Override public String callerSearchBase(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34921,"@Override public String groupMemberOfAttribute(){
  return null;
}","@Override public String groupMemberOfAttribute(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34922,"@Override public ValidationType[] useFor(){
  return null;
}","@Override public ValidationType[] useFor(){
  return (overrides != null && overrides.containsKey(JavaEESecConstants.USE_FOR)) ? (ValidationType[])overrides.get(JavaEESecConstants.USE_FOR) : new ValidationType[]{ValidationType.PROVIDE_GROUPS,ValidationType.VALIDATE};
}"
34923,"@Override public String url(){
  return null;
}","@Override public String url(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34924,"@Override public String groupSearchBase(){
  return null;
}","@Override public String groupSearchBase(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34925,"@Override public int readTimeout(){
  return 0;
}","@Override public int readTimeout(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (Integer)overrides.get(""String_Node_Str"") : 0;
}"
34926,"@Override public LdapSearchScope callerSearchScope(){
  return null;
}","@Override public LdapSearchScope callerSearchScope(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (LdapSearchScope)overrides.get(""String_Node_Str"") : LdapSearchScope.SUBTREE;
}"
34927,"@Override public String bindDnPassword(){
  return null;
}","@Override public String bindDnPassword(){
  return (overrides != null && overrides.containsKey(""String_Node_Str"")) ? (String)overrides.get(""String_Node_Str"") : ""String_Node_Str"";
}"
34928,"@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  AuthStatus status=AuthStatus.SEND_FAILURE;
  try {
    HttpAuthenticationMechanism authMech=mpu.getHttpAuthenticationMechanism(getCDI());
    HttpMessageContext httpMessageContext=createHttpMessageContext(messageInfo,clientSubject);
    AuthenticationStatus authenticationStatus=authMech.validateRequest((HttpServletRequest)messageInfo.getRequestMessage(),(HttpServletResponse)messageInfo.getResponseMessage(),httpMessageContext);
    status=translateValidateRequestStatus(authenticationStatus);
    registerSession(httpMessageContext);
  }
 catch (  AuthException ae) {
    throw ae;
  }
catch (  Exception e) {
    e.printStackTrace();
    AuthException authException=new AuthException();
    authException.initCause(e);
    throw authException;
  }
  return status;
}","@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  AuthStatus status=AuthStatus.SEND_FAILURE;
  try {
    HttpAuthenticationMechanism authMech=mpu.getHttpAuthenticationMechanism(getCDI());
    HttpMessageContext httpMessageContext=createHttpMessageContext(messageInfo,clientSubject);
    AuthenticationStatus authenticationStatus=authMech.validateRequest((HttpServletRequest)messageInfo.getRequestMessage(),(HttpServletResponse)messageInfo.getResponseMessage(),httpMessageContext);
    status=translateValidateRequestStatus(authenticationStatus);
    registerSession(httpMessageContext);
  }
 catch (  Exception e) {
    e.printStackTrace();
    AuthException authException=new AuthException();
    authException.initCause(e);
    throw authException;
  }
  return status;
}"
34929,"@SuppressWarnings(""String_Node_Str"") public <T>ContextResolver<T> createContextResolver(Type contextType,Message m,MediaType type){
  Class<?> contextCls=InjectionUtils.getActualType(contextType);
  if (contextCls == null) {
    return null;
  }
  List<ContextResolver<T>> candidates=new LinkedList<ContextResolver<T>>();
  for (  ProviderInfo<ContextResolver<?>> cr : contextResolvers) {
    Type[] types=cr.getProvider().getClass().getGenericInterfaces();
    for (    Type t : types) {
      if (t instanceof ParameterizedType) {
        ParameterizedType pt=(ParameterizedType)t;
        Type[] args=pt.getActualTypeArguments();
        if (args.length > 0) {
          Class<?> argCls=InjectionUtils.getActualType(args[0]);
          if (argCls != null && argCls.isAssignableFrom(contextCls)) {
            List<MediaType> mTypes=JAXRSUtils.getProduceTypes(cr.getProvider().getClass().getAnnotation(Produces.class));
            if (JAXRSUtils.intersectMimeTypes(mTypes,type).size() > 0) {
              injectContextValues(cr,m);
              candidates.add((ContextResolver<T>)cr.getProvider());
            }
          }
        }
      }
    }
  }
  if (candidates.size() == 0) {
    return null;
  }
 else   if (candidates.size() == 1) {
    return candidates.get(0);
  }
 else {
    Collections.sort(candidates,new ClassComparator());
    return new ContextResolverProxy<T>(candidates);
  }
}","@SuppressWarnings(""String_Node_Str"") public <T>ContextResolver<T> createContextResolver(Type contextType,Message m,MediaType type){
  Class<?> contextCls=InjectionUtils.getActualType(contextType);
  if (contextCls == null) {
    return null;
  }
  List<ContextResolver<T>> candidates=new LinkedList<ContextResolver<T>>();
  for (  ProviderInfo<ContextResolver<?>> cr : contextResolvers) {
    Type[] types=cr.getProvider().getClass().getGenericInterfaces();
    for (    Type t : types) {
      if (t instanceof ParameterizedType) {
        ParameterizedType pt=(ParameterizedType)t;
        Type[] args=pt.getActualTypeArguments();
        if (args.length > 0) {
          Class<?> argCls=InjectionUtils.getActualType(args[0]);
          if (argCls != null && argCls.isAssignableFrom(contextCls)) {
            List<MediaType> mTypes=JAXRSUtils.getProduceTypes(cr.getProvider().getClass().getAnnotation(Produces.class));
            if (JAXRSUtils.intersectMimeTypes(mTypes,type).size() > 0) {
              injectContextValues(cr,m);
              candidates.add((ContextResolver<T>)cr.getProvider());
            }
          }
        }
      }
    }
  }
  if (candidates.size() == 0) {
    return null;
  }
 else   if (candidates.size() == 1) {
    return candidates.get(0);
  }
 else {
    Collections.sort(candidates,new PriorityBasedClassComparator());
    return new ContextResolverProxy<T>(candidates);
  }
}"
34930,"/** 
 * When runIfQueueFull is true, it should be possible to submit maxConcurrency number of tasks, even if the maxQueueSize is less than maxConcurrency because tasks that cannot be enqueued will run on the submitter's thread.
 */
@Test public void testRunWhenQueueFull() throws Exception {
  CountingTask[] tasks=new CountingTask[4];
  for (int i=0; i < 4; i++) {
    TaskListener listener=i == 0 ? null : new TaskListener().doLookup(""String_Node_Str"",STARTING,DONE);
    tasks[i]=new CountingTask(null,listener,null,null);
  }
  CountingTask blockerTask1=new CountingTask(null,null,new CountDownLatch(1),new CountDownLatch(1));
  CountingTask blockerTask2=new CountingTask(null,null,new CountDownLatch(1),new CountDownLatch(1));
  Future<Integer> blockerTask1Future=scheduledExecutor2.submit(blockerTask1);
  cancelAfterTest.add(blockerTask1Future);
  Future<Integer> blockerTask2Future=scheduledExecutor2.submit(blockerTask2);
  cancelAfterTest.add(blockerTask2Future);
  List<Future<Integer>> futures=new ArrayList<Future<Integer>>(4);
  for (int i=0; i < 4; i++) {
    Future<Integer> future=defaultScheduledExecutor.submit(tasks[i]);
    cancelAfterTest.add(future);
    futures.add(future);
  }
  long curThreadId=Thread.currentThread().getId();
  if (((TaskListener)tasks[1].listener).threadId[STARTING] == curThreadId)   assertTrue(futures.get(1).isDone());
  if (((TaskListener)tasks[2].listener).threadId[STARTING] == curThreadId)   assertTrue(futures.get(2).isDone());
  if (((TaskListener)tasks[3].listener).threadId[STARTING] == curThreadId)   assertTrue(futures.get(3).isDone());
  TaskListener listener;
  Future<Integer> future=futures.get(0);
  assertTrue(future.isDone());
  assertFalse(future.isCancelled());
  assertEquals(Integer.valueOf(1),future.get());
  cancelAfterTest.remove(future);
  assertSuccess(defaultScheduledExecutor,future=futures.get(1),tasks[1],listener=(TaskListener)tasks[1].listener,1);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[STARTING]);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[DONE]);
  cancelAfterTest.remove(future);
  assertSuccess(defaultScheduledExecutor,future=futures.get(2),tasks[2],listener=(TaskListener)tasks[2].listener,1);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[STARTING]);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[DONE]);
  cancelAfterTest.remove(future);
  assertSuccess(defaultScheduledExecutor,future=futures.get(3),tasks[3],listener=(TaskListener)tasks[3].listener,1);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[STARTING]);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[DONE]);
  cancelAfterTest.remove(future);
  cancelAfterTest.remove(blockerTask1Future);
  assertTrue(blockerTask1Future.cancel(true));
  cancelAfterTest.remove(blockerTask2Future);
  assertTrue(blockerTask2Future.cancel(true));
}","/** 
 * When runIfQueueFull is true, it should be possible to submit maxConcurrency number of tasks, even if the maxQueueSize is less than maxConcurrency because tasks that cannot be enqueued will run on the submitter's thread.
 */
@Test public void testRunWhenQueueFull() throws Exception {
  CountingTask[] tasks=new CountingTask[4];
  for (int i=0; i < 4; i++) {
    TaskListener listener=i == 0 ? null : new TaskListener().doLookup(""String_Node_Str"",STARTING,DONE);
    tasks[i]=new CountingTask(null,listener,null,null);
  }
  CountingTask blockerTask1=new CountingTask(null,null,new CountDownLatch(1),new CountDownLatch(1));
  CountingTask blockerTask2=new CountingTask(null,null,new CountDownLatch(1),new CountDownLatch(1));
  Future<Integer> blockerTask1Future=scheduledExecutor2.submit(blockerTask1);
  cancelAfterTest.add(blockerTask1Future);
  Future<Integer> blockerTask2Future=scheduledExecutor2.submit(blockerTask2);
  cancelAfterTest.add(blockerTask2Future);
  List<Future<Integer>> futures=new ArrayList<Future<Integer>>(4);
  for (int i=0; i < 4; i++) {
    Future<Integer> future=defaultScheduledExecutor.submit(tasks[i]);
    cancelAfterTest.add(future);
    futures.add(future);
  }
  long curThreadId=Thread.currentThread().getId();
  if (((TaskListener)tasks[1].listener).threadId[STARTING] == curThreadId)   assertTrue(futures.get(1).isDone());
  if (((TaskListener)tasks[2].listener).threadId[STARTING] == curThreadId)   assertTrue(futures.get(2).isDone());
  if (((TaskListener)tasks[3].listener).threadId[STARTING] == curThreadId)   assertTrue(futures.get(3).isDone());
  TaskListener listener;
  Future<Integer> future=futures.get(0);
  assertEquals(Integer.valueOf(1),future.get(TIMEOUT_NS,TimeUnit.NANOSECONDS));
  assertTrue(future.isDone());
  assertFalse(future.isCancelled());
  cancelAfterTest.remove(future);
  assertSuccess(defaultScheduledExecutor,future=futures.get(1),tasks[1],listener=(TaskListener)tasks[1].listener,1);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[STARTING]);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[DONE]);
  cancelAfterTest.remove(future);
  assertSuccess(defaultScheduledExecutor,future=futures.get(2),tasks[2],listener=(TaskListener)tasks[2].listener,1);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[STARTING]);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[DONE]);
  cancelAfterTest.remove(future);
  assertSuccess(defaultScheduledExecutor,future=futures.get(3),tasks[3],listener=(TaskListener)tasks[3].listener,1);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[STARTING]);
  assertEquals(scheduledExecutor2,listener.resultOfLookup[DONE]);
  cancelAfterTest.remove(future);
  cancelAfterTest.remove(blockerTask1Future);
  assertTrue(blockerTask1Future.cancel(true));
  cancelAfterTest.remove(blockerTask2Future);
  assertTrue(blockerTask2Future.cancel(true));
}"
34931,"/** 
 */
@Test public void testValidateRequestInvalidCredential() throws Exception {
  CallerOnlyCredential coc=new CallerOnlyCredential(USER1);
  withMessageContext(ap,ch).withCredential(coc);
  try {
    AuthenticationStatus status=cfam.validateRequest(req,res,hmc);
    fail(""String_Node_Str"");
  }
 catch (  AuthenticationException e) {
    assertTrue(""String_Node_Str"",outputMgr.checkForStandardErr(""String_Node_Str""));
    assertTrue(""String_Node_Str"",e.getMessage().contains(""String_Node_Str""));
  }
}","/** 
 */
@Test public void testValidateRequestInvalidCredential() throws Exception {
  CallerOnlyCredential coc=new CallerOnlyCredential(USER1);
  withMessageContext(ap,ch).withCredential(coc).withBeanInstance(null);
  try {
    AuthenticationStatus status=cfam.validateRequest(req,res,hmc);
    fail(""String_Node_Str"");
  }
 catch (  AuthenticationException e) {
    assertTrue(""String_Node_Str"",outputMgr.checkForStandardErr(""String_Node_Str""));
    assertTrue(""String_Node_Str"",e.getMessage().contains(""String_Node_Str""));
  }
}"
34932,"/** 
 */
@Test public void testValidateRequestAuthReqTrueValidIdAndPWNoIdentityStoreHandlerNoCallbackHandler() throws Exception {
  withMessageContext(null).withUsernamePassword(USER1,PASSWORD1).withAuthenticationRequest(true).withBeanInstance(null);
  try {
    AuthenticationStatus status=fam.validateRequest(req,res,hmc);
    fail(""String_Node_Str"");
  }
 catch (  AuthenticationException e) {
    assertTrue(""String_Node_Str"",outputMgr.checkForStandardOut(""String_Node_Str""));
    assertEquals(""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
}","/** 
 */
@Test public void testValidateRequestAuthReqTrueValidIdAndPWNoIdentityStoreHandlerNoCallbackHandler() throws Exception {
  withMessageContext(null).withUsernamePassword(USER1,PASSWORD1).withAuthenticationRequest(true).withBeanInstance(null).withSetStatusToResponse(HttpServletResponse.SC_FORBIDDEN);
  AuthenticationStatus status=fam.validateRequest(req,res,hmc);
}"
34933,"@Override public Cookie getSSOCookieFromSSOToken(){
  Cookie ssoCookie;
  try {
    ssoCookie=WebSecurityHelper.getSSOCookieFromSSOToken();
  }
 catch (  Exception e) {
    throw new ProcessingException(e);
  }
  return ssoCookie;
}","@Override public Cookie getSSOCookieFromSSOToken(){
  Cookie ssoCookie;
  try {
    ssoCookie=AccessController.doPrivileged(new PrivilegedExceptionAction<Cookie>(){
      @Override public Cookie run() throws Exception {
        return WebSecurityHelper.getSSOCookieFromSSOToken();
      }
    }
);
  }
 catch (  Exception e) {
    throw new ProcessingException(e);
  }
  return ssoCookie;
}"
34934,"@Test public void isApplicationIdentityStoreHanderTrue(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStoreHandler>(){
  }
.getType());
  context.checking(new Expectations(){
{
      one(pb).getBean();
      will(returnValue(bn));
      exactly(2).of(bn).getBeanClass();
      will(returnValue(Object.class));
      one(bn).getTypes();
      will(returnValue(types));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertTrue(""String_Node_Str"",j3ce.isIdentityStoreHandler(pb));
}","@Test public void isApplicationIdentityStoreHanderTrue(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStoreHandler>(){
  }
.getType());
  context.checking(new Expectations(){
{
      one(pb).getBean();
      will(returnValue(bn));
      between(1,2).of(bn).getBeanClass();
      will(returnValue(Object.class));
      one(bn).getTypes();
      will(returnValue(types));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertTrue(""String_Node_Str"",j3ce.isIdentityStoreHandler(pb));
}"
34935,"@Test public void afterBeanDiscoveryCustomIdentityStoreHandlerExists(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStoreHandler>(){
  }
.getType());
  context.checking(new Expectations(){
{
      exactly(2).of(pb).getBean();
      will(returnValue(bn));
      exactly(3).of(bn).getBeanClass();
      will(returnValue(Object.class));
      exactly(2).of(bn).getTypes();
      will(returnValue(types));
      never(abd).addBean(with(any(IdentityStoreHandlerBean.class)));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  j3ce.processBean(pb,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  j3ce.afterBeanDiscovery(abd,bm);
  assertTrue(""String_Node_Str"",j3ce.getBeansToAdd().isEmpty());
}","@Test public void afterBeanDiscoveryCustomIdentityStoreHandlerExists(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStoreHandler>(){
  }
.getType());
  context.checking(new Expectations(){
{
      exactly(2).of(pb).getBean();
      will(returnValue(bn));
      between(2,3).of(bn).getBeanClass();
      will(returnValue(Object.class));
      exactly(2).of(bn).getTypes();
      will(returnValue(types));
      never(abd).addBean(with(any(IdentityStoreHandlerBean.class)));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  j3ce.processBean(pb,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  j3ce.afterBeanDiscovery(abd,bm);
  assertTrue(""String_Node_Str"",j3ce.getBeansToAdd().isEmpty());
}"
34936,"@Test public void processBeanIdentityStoreHandlerStaysTrueIdentityStoreStaysTrue(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStoreHandler>(){
  }
.getType());
  final Set<Type> types2=new HashSet<Type>();
  types2.add(new TypeLiteral<Bean>(){
  }
.getType());
  types2.add(new TypeLiteral<IdentityStore>(){
  }
.getType());
  context.checking(new Expectations(){
{
      exactly(2).of(pb).getBean();
      will(returnValue(bn));
      exactly(3).of(bn).getBeanClass();
      will(returnValue(Object.class));
      exactly(2).of(bn).getTypes();
      will(returnValue(types));
      one(pb2).getBean();
      will(returnValue(bn2));
      exactly(2).of(bn2).getBeanClass();
      will(returnValue(Object.class));
      one(bn2).getTypes();
      will(returnValue(types2));
      never(pb3).getBean();
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  j3ce.processBean(pb,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  j3ce.processBean(pb2,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  j3ce.processBean(pb3,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
}","@Test public void processBeanIdentityStoreHandlerStaysTrueIdentityStoreStaysTrue(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStoreHandler>(){
  }
.getType());
  final Set<Type> types2=new HashSet<Type>();
  types2.add(new TypeLiteral<Bean>(){
  }
.getType());
  types2.add(new TypeLiteral<IdentityStore>(){
  }
.getType());
  context.checking(new Expectations(){
{
      exactly(2).of(pb).getBean();
      will(returnValue(bn));
      between(2,3).of(bn).getBeanClass();
      will(returnValue(Object.class));
      exactly(2).of(bn).getTypes();
      will(returnValue(types));
      one(pb2).getBean();
      will(returnValue(bn2));
      exactly(2).of(bn2).getBeanClass();
      will(returnValue(Object.class));
      one(bn2).getTypes();
      will(returnValue(types2));
      never(pb3).getBean();
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  j3ce.processBean(pb,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  j3ce.processBean(pb2,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  j3ce.processBean(pb3,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
}"
34937,"@Test public void processBeanIdentityStoreHandlerTrueIdentityStoreTrue(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStoreHandler>(){
  }
.getType());
  final Set<Type> types2=new HashSet<Type>();
  types2.add(new TypeLiteral<Bean>(){
  }
.getType());
  types2.add(new TypeLiteral<IdentityStore>(){
  }
.getType());
  context.checking(new Expectations(){
{
      exactly(2).of(pb).getBean();
      will(returnValue(bn));
      exactly(3).of(bn).getBeanClass();
      will(returnValue(Object.class));
      exactly(2).of(bn).getTypes();
      will(returnValue(types));
      one(pb2).getBean();
      will(returnValue(bn2));
      exactly(2).of(bn2).getBeanClass();
      will(returnValue(Object.class));
      one(bn2).getTypes();
      will(returnValue(types2));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  j3ce.processBean(pb,bm);
  j3ce.processBean(pb2,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
}","@Test public void processBeanIdentityStoreHandlerTrueIdentityStoreTrue(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStoreHandler>(){
  }
.getType());
  final Set<Type> types2=new HashSet<Type>();
  types2.add(new TypeLiteral<Bean>(){
  }
.getType());
  types2.add(new TypeLiteral<IdentityStore>(){
  }
.getType());
  context.checking(new Expectations(){
{
      exactly(2).of(pb).getBean();
      will(returnValue(bn));
      between(2,3).of(bn).getBeanClass();
      will(returnValue(Object.class));
      exactly(2).of(bn).getTypes();
      will(returnValue(types));
      one(pb2).getBean();
      will(returnValue(bn2));
      exactly(2).of(bn2).getBeanClass();
      will(returnValue(Object.class));
      one(bn2).getTypes();
      will(returnValue(types2));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  j3ce.processBean(pb,bm);
  j3ce.processBean(pb2,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
}"
34938,"@Test public void isApplicationIdentityStoreTrue(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStore>(){
  }
.getType());
  context.checking(new Expectations(){
{
      one(pb).getBean();
      will(returnValue(bn));
      exactly(2).of(bn).getBeanClass();
      will(returnValue(Object.class));
      one(bn).getTypes();
      will(returnValue(types));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertTrue(""String_Node_Str"",j3ce.isIdentityStore(pb));
}","@Test public void isApplicationIdentityStoreTrue(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStore>(){
  }
.getType());
  context.checking(new Expectations(){
{
      one(pb).getBean();
      will(returnValue(bn));
      between(1,2).of(bn).getBeanClass();
      will(returnValue(Object.class));
      one(bn).getTypes();
      will(returnValue(types));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  assertTrue(""String_Node_Str"",j3ce.isIdentityStore(pb));
}"
34939,"@Test public void afterBeanDiscoveryNoCustomIdentityStoreHandlerOneIdentityStore(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStore>(){
  }
.getType());
  context.checking(new Expectations(){
{
      exactly(2).of(pb).getBean();
      will(returnValue(bn));
      exactly(3).of(bn).getBeanClass();
      will(returnValue(TestIdentityStore.class));
      exactly(2).of(bn).getTypes();
      will(returnValue(types));
      one(abd).addBean(with(any(IdentityStoreHandlerBean.class)));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  j3ce.processBean(pb,bm);
  j3ce.afterBeanDiscovery(abd,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertFalse(""String_Node_Str"",j3ce.getBeansToAdd().isEmpty());
}","@Test public void afterBeanDiscoveryNoCustomIdentityStoreHandlerOneIdentityStore(){
  final Set<Type> types=new HashSet<Type>();
  types.add(new TypeLiteral<Bean>(){
  }
.getType());
  types.add(new TypeLiteral<IdentityStore>(){
  }
.getType());
  context.checking(new Expectations(){
{
      exactly(2).of(pb).getBean();
      will(returnValue(bn));
      between(2,3).of(bn).getBeanClass();
      will(returnValue(TestIdentityStore.class));
      exactly(2).of(bn).getTypes();
      will(returnValue(types));
      one(abd).addBean(with(any(IdentityStoreHandlerBean.class)));
    }
  }
);
  JavaEESecCDIExtension j3ce=new JavaEESecCDIExtension();
  j3ce.processBean(pb,bm);
  j3ce.afterBeanDiscovery(abd,bm);
  assertTrue(""String_Node_Str"",j3ce.getIdentityStoreRegistered());
  assertFalse(""String_Node_Str"",j3ce.getIdentityStoreHandlerRegistered());
  assertFalse(""String_Node_Str"",j3ce.getBeansToAdd().isEmpty());
}"
34940,"@Test public void testMoreThanOneAuthMechDoesNotRegisterProvider() throws Exception {
  Bean<HttpAuthenticationMechanism> httpAuthenticationMechanismBean1=mockery.mock(Bean.class,""String_Node_Str"");
  Bean<HttpAuthenticationMechanism> httpAuthenticationMechanismBean2=mockery.mock(Bean.class,""String_Node_Str"");
  httpAuthMechs.add(httpAuthenticationMechanismBean1);
  httpAuthMechs.add(httpAuthenticationMechanismBean2);
  withNoCachedProvider().withBeanManager().doesNotRegisterProvider();
  bridgeBuilder.buildBridgeIfNeeded(APP_CONTEXT,providerFactory);
}","@Test public void testMoreThanOneAuthMechDoesNotRegisterProvider() throws Exception {
  final Bean<HttpAuthenticationMechanism> httpAuthenticationMechanismBean1=mockery.mock(Bean.class,""String_Node_Str"");
  final Bean<HttpAuthenticationMechanism> httpAuthenticationMechanismBean2=mockery.mock(Bean.class,""String_Node_Str"");
  httpAuthMechs.add(httpAuthenticationMechanismBean1);
  httpAuthMechs.add(httpAuthenticationMechanismBean2);
  withNoCachedProvider().withBeanManager().doesNotRegisterProvider();
  mockery.checking(new Expectations(){
{
      allowing(httpAuthenticationMechanismBean1).getBeanClass();
      will(returnValue(""String_Node_Str""));
      allowing(httpAuthenticationMechanismBean2).getBeanClass();
      will(returnValue(""String_Node_Str""));
    }
  }
);
  bridgeBuilder.buildBridgeIfNeeded(APP_CONTEXT,providerFactory);
}"
34941,"@Override public boolean handleAttribute(DDParser parser,String nsURI,String localName,int index) throws ParseException {
  if (nsURI == null) {
    if (parser.version >= 24 && ""String_Node_Str"".equals(localName)) {
      version=parser.parseTokenAttributeValue(index);
      return true;
    }
    if (parser.version >= 24 && ""String_Node_Str"".equals(localName)) {
      metadata_complete=parser.parseBooleanAttributeValue(index);
      return true;
    }
  }
  return false;
}","@Override public boolean handleAttribute(DDParser parser,String nsURI,String localName,int index) throws ParseException {
  if (nsURI == null || XMLConstants.NULL_NS_URI.equals(nsURI)) {
    if (parser.version >= 24 && ""String_Node_Str"".equals(localName)) {
      version=parser.parseTokenAttributeValue(index);
      return true;
    }
    if (parser.version >= 24 && ""String_Node_Str"".equals(localName)) {
      metadata_complete=parser.parseBooleanAttributeValue(index);
      return true;
    }
  }
  return false;
}"
34942,"@Override public void onPrepareProviderResource(BeanCustomizerContext context){
  EndpointInfo endpointInfo=context.getEndpointInfo();
  Set<ProviderResourceInfo> perRequestProviderAndPathInfos=endpointInfo.getPerRequestProviderAndPathInfos();
  Set<ProviderResourceInfo> singletonProviderAndPathInfos=endpointInfo.getSingletonProviderAndPathInfos();
  Map<Class<?>,ManagedObject<?>> resourcesManagedbyCDI=new HashMap<Class<?>,ManagedObject<?>>();
  CXFJaxRsProviderResourceHolder cxfPRHolder=context.getCxfRPHolder();
  for (  ProviderResourceInfo p : perRequestProviderAndPathInfos) {
    if (p.getRuntimeType() != RuntimeType.POJO)     continue;
    Class<?> clazz=p.getProviderResourceClass();
    if (!hasValidConstructor(clazz,false)) {
      continue;
    }
    Bean<?> bean=null;
    try {
      bean=getBeanFromCDI(clazz);
    }
 catch (    Exception e1) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"",e1);
      }
    }
    if (bean != null) {
      String scopeName=bean.getScope().getName();
      p.setRuntimeType(RuntimeType.CDI);
      resourcesManagedbyCDI.put(p.getProviderResourceClass(),null);
      if (p.isJaxRsProvider()) {
        if (validSingletonScopeList.contains(scopeName)) {
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),scopeName,""String_Node_Str"");
        }
 else {
          p.setRuntimeType(RuntimeType.POJO);
          resourcesManagedbyCDI.remove(p.getProviderResourceClass());
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),scopeName,""String_Node_Str"");
        }
      }
 else {
        if (!validRequestScopeList.contains(scopeName)) {
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),""String_Node_Str"",scopeName,""String_Node_Str"");
        }
      }
    }
 else {
      if (shouldHandle(clazz,false)) {
        p.setRuntimeType(RuntimeType.IMPLICITBEAN);
        resourcesManagedbyCDI.put(clazz,null);
      }
      continue;
    }
  }
  for (  ProviderResourceInfo o : singletonProviderAndPathInfos) {
    if (o.getRuntimeType() != RuntimeType.POJO)     continue;
    Class<?> clazz=o.getProviderResourceClass();
    if (!hasValidConstructor(clazz,true)) {
      continue;
    }
    Bean<?> bean=null;
    try {
      bean=getBeanFromCDI(clazz);
    }
 catch (    Exception e1) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"",e1);
      }
    }
    if (bean != null) {
      String scopeName=bean.getScope().getName();
      o.setRuntimeType(RuntimeType.CDI);
      resourcesManagedbyCDI.put(o.getProviderResourceClass(),null);
      if (o.isJaxRsProvider()) {
        if (validSingletonScopeList.contains(scopeName)) {
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),scopeName,""String_Node_Str"");
        }
 else {
          o.setRuntimeType(RuntimeType.POJO);
          resourcesManagedbyCDI.remove(clazz);
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),scopeName,""String_Node_Str"");
        }
      }
 else {
        if (!validSingletonScopeList.contains(scopeName)) {
          cxfPRHolder.removeResouceProvider(clazz);
          cxfPRHolder.addResouceProvider(clazz,new PerRequestResourceProvider(clazz));
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),""String_Node_Str"",scopeName,""String_Node_Str"");
        }
      }
    }
 else {
      if (shouldHandle(clazz,false)) {
        o.setRuntimeType(RuntimeType.IMPLICITBEAN);
        resourcesManagedbyCDI.put(clazz,null);
      }
      continue;
    }
  }
  context.setContextObject(resourcesManagedbyCDI);
}","@Override public void onPrepareProviderResource(BeanCustomizerContext context){
  EndpointInfo endpointInfo=context.getEndpointInfo();
  Set<ProviderResourceInfo> perRequestProviderAndPathInfos=endpointInfo.getPerRequestProviderAndPathInfos();
  Set<ProviderResourceInfo> singletonProviderAndPathInfos=endpointInfo.getSingletonProviderAndPathInfos();
  Map<Class<?>,ManagedObject<?>> resourcesManagedbyCDI=new ThreadBasedHashMap();
  CXFJaxRsProviderResourceHolder cxfPRHolder=context.getCxfRPHolder();
  for (  ProviderResourceInfo p : perRequestProviderAndPathInfos) {
    if (p.getRuntimeType() != RuntimeType.POJO)     continue;
    Class<?> clazz=p.getProviderResourceClass();
    if (!hasValidConstructor(clazz,false)) {
      continue;
    }
    Bean<?> bean=null;
    try {
      bean=getBeanFromCDI(clazz);
    }
 catch (    Exception e1) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"",e1);
      }
    }
    if (bean != null) {
      String scopeName=bean.getScope().getName();
      p.setRuntimeType(RuntimeType.CDI);
      resourcesManagedbyCDI.put(p.getProviderResourceClass(),null);
      if (p.isJaxRsProvider()) {
        if (validSingletonScopeList.contains(scopeName)) {
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),scopeName,""String_Node_Str"");
        }
 else {
          p.setRuntimeType(RuntimeType.POJO);
          resourcesManagedbyCDI.remove(p.getProviderResourceClass());
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),scopeName,""String_Node_Str"");
        }
      }
 else {
        if (!validRequestScopeList.contains(scopeName)) {
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),""String_Node_Str"",scopeName,""String_Node_Str"");
        }
      }
    }
 else {
      if (shouldHandle(clazz,false)) {
        p.setRuntimeType(RuntimeType.IMPLICITBEAN);
        resourcesManagedbyCDI.put(clazz,null);
      }
      continue;
    }
  }
  for (  ProviderResourceInfo o : singletonProviderAndPathInfos) {
    if (o.getRuntimeType() != RuntimeType.POJO)     continue;
    Class<?> clazz=o.getProviderResourceClass();
    if (!hasValidConstructor(clazz,true)) {
      continue;
    }
    Bean<?> bean=null;
    try {
      bean=getBeanFromCDI(clazz);
    }
 catch (    Exception e1) {
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"",e1);
      }
    }
    if (bean != null) {
      String scopeName=bean.getScope().getName();
      o.setRuntimeType(RuntimeType.CDI);
      resourcesManagedbyCDI.put(o.getProviderResourceClass(),null);
      if (o.isJaxRsProvider()) {
        if (validSingletonScopeList.contains(scopeName)) {
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),scopeName,""String_Node_Str"");
        }
 else {
          o.setRuntimeType(RuntimeType.POJO);
          resourcesManagedbyCDI.remove(clazz);
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),scopeName,""String_Node_Str"");
        }
      }
 else {
        if (!validSingletonScopeList.contains(scopeName)) {
          cxfPRHolder.removeResouceProvider(clazz);
          cxfPRHolder.addResouceProvider(clazz,new PerRequestResourceProvider(clazz));
          Tr.warning(tc,""String_Node_Str"",clazz.getSimpleName(),""String_Node_Str"",scopeName,""String_Node_Str"");
        }
      }
    }
 else {
      if (shouldHandle(clazz,false)) {
        o.setRuntimeType(RuntimeType.IMPLICITBEAN);
        resourcesManagedbyCDI.put(clazz,null);
      }
      continue;
    }
  }
  context.setContextObject(resourcesManagedbyCDI);
}"
34943,"@Override public void destroyApplicationScopeResources(JaxRsModuleMetaData jaxRsModuleMetaData){
  for (  ModuleMetaData mmd : jaxRsModuleMetaData.getEnclosingModuleMetaDatas()) {
    Iterator<ComponentMetaData> iter=beanManagers.keySet().iterator();
    while (iter.hasNext()) {
      ComponentMetaData cmd=iter.next();
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + cmd + ""String_Node_Str""+ mmd+ ""String_Node_Str"");
      }
      if (mmd.equals(cmd.getModuleMetaData())) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        iter.remove();
      }
    }
  }
  Bus bus=jaxRsModuleMetaData.getServerMetaData().getServerBus();
  @SuppressWarnings(""String_Node_Str"") Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizerContexts == null) {
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Map<Class<?>,ManagedObject<?>> newContext=(Map<Class<?>,ManagedObject<?>>)beanCustomizerContexts.get(Integer.toString(hashCode()));
  if (newContext == null) {
    return;
  }
  Collection<ManagedObject<?>> objects=newContext.values();
  for (  ManagedObject<?> mo : objects) {
    if (mo != null) {
      mo.release();
    }
  }
  ManagedObject<?> appObject=(ManagedObject<?>)jaxRsModuleMetaData.getManagedAppRef();
  if (appObject != null) {
    appObject.release();
  }
}","@Override public void destroyApplicationScopeResources(JaxRsModuleMetaData jaxRsModuleMetaData){
  for (  ModuleMetaData mmd : jaxRsModuleMetaData.getEnclosingModuleMetaDatas()) {
    managedObjectFactoryCache.remove(mmd);
    Iterator<ComponentMetaData> iter=beanManagers.keySet().iterator();
    while (iter.hasNext()) {
      ComponentMetaData cmd=iter.next();
      if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
        Tr.debug(tc,""String_Node_Str"" + cmd + ""String_Node_Str""+ mmd+ ""String_Node_Str"");
      }
      if (mmd.equals(cmd.getModuleMetaData())) {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
          Tr.debug(tc,""String_Node_Str"");
        }
        iter.remove();
      }
    }
  }
  Bus bus=jaxRsModuleMetaData.getServerMetaData().getServerBus();
  @SuppressWarnings(""String_Node_Str"") Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizerContexts == null) {
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Map<Class<?>,ManagedObject<?>> newContext=(Map<Class<?>,ManagedObject<?>>)beanCustomizerContexts.get(createCustomizerKey(this));
  if (newContext == null) {
    return;
  }
  Collection<ManagedObject<?>> objects=newContext.values();
  for (  ManagedObject<?> mo : objects) {
    if (mo != null) {
      mo.release();
    }
  }
  ManagedObject<?> appObject=(ManagedObject<?>)jaxRsModuleMetaData.getManagedAppRef();
  if (appObject != null) {
    appObject.release();
  }
}"
34944,"private ManagedObjectFactory<?> getManagedObjectFactory(Class<?> clazz){
  ManagedObjectFactory<?> mof=null;
  try {
    ManagedObjectService mos=managedObjectServiceRef.getServiceWithException();
    if (mos == null) {
      return null;
    }
    ModuleMetaData mmd=ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData().getModuleMetaData();
    mof=mos.createManagedObjectFactory(mmd,clazz,true);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + clazz.getName());
    }
  }
 catch (  ManagedObjectException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ e.toString());
    }
  }
  return mof;
}","private ManagedObjectFactory<?> getManagedObjectFactory(Class<?> clazz){
  ManagedObjectFactory<?> mof=null;
  try {
    ModuleMetaData mmd=ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData().getModuleMetaData();
    Map<Class<?>,ManagedObjectFactory<?>> cache=managedObjectFactoryCache.get(mmd);
    if (cache != null) {
      mof=cache.get(clazz);
    }
 else {
      cache=new ConcurrentHashMap<Class<?>,ManagedObjectFactory<?>>();
      managedObjectFactoryCache.put(mmd,cache);
    }
    if (mof != null) {
      return mof;
    }
    ManagedObjectService mos=managedObjectServiceRef.getServiceWithException();
    if (mos == null) {
      return null;
    }
    mof=mos.createManagedObjectFactory(mmd,clazz,true);
    cache.put(clazz,mof);
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + clazz.getName());
    }
  }
 catch (  ManagedObjectException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ e.toString());
    }
  }
  return mof;
}"
34945,"/** 
 * @param clazz
 * @return
 */
@FFDCIgnore(value={Exception.class}) private ManagedObject<?> getClassFromManagedObject(Class<?> clazz){
  ManagedObjectFactory<?> managedObjectFactory=getManagedObjectFactory(clazz);
  ManagedObject<?> bean=null;
  try {
    bean=managedObjectFactory.createManagedObject();
  }
 catch (  Exception e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ e.toString());
    }
  }
  if (bean == null) {
    return null;
  }
  return bean;
}","/** 
 * @param clazz
 * @return
 */
@FFDCIgnore(value={Exception.class}) private ManagedObject<?> getClassFromManagedObject(Class<?> clazz){
  ManagedObjectFactory<?> managedObjectFactory=getManagedObjectFactory(clazz);
  ManagedObject<?> bean=null;
  try {
    bean=managedObjectFactory.createManagedObject();
  }
 catch (  Exception e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + clazz.getName() + ""String_Node_Str"",e);
    }
  }
  return bean;
}"
34946,"@Override public void afterServiceInvoke(Object serviceObject,boolean isSingleton,Object context){
  @SuppressWarnings(""String_Node_Str"") Map<Class<?>,ManagedObject<?>> newContext=(Map<Class<?>,ManagedObject<?>>)(context);
  ManagedObject<?> mo=newContext.get(serviceObject.getClass());
  if (!isSingleton) {
    if (mo != null) {
      mo.release();
    }
    newContext.put(serviceObject.getClass(),null);
  }
}","@Override public void afterServiceInvoke(Object serviceObject,boolean isSingleton,Object context){
  @SuppressWarnings(""String_Node_Str"") Map<Class<?>,ManagedObject<?>> newContext=(Map<Class<?>,ManagedObject<?>>)(context);
  ManagedObject<?> mo=newContext.get(serviceObject.getClass());
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + mo + ""String_Node_Str""+ isSingleton+ ""String_Node_Str"",newContext);
  }
  if (!isSingleton) {
    if (mo != null) {
      mo.release();
    }
    newContext.put(serviceObject.getClass(),null);
  }
}"
34947,"@SuppressWarnings(""String_Node_Str"") private <T>T getInstanceFromManagedObject(T serviceObject,Object context){
  Class<?> clazz=serviceObject.getClass();
  Object rtn=getClassFromCDI(clazz);
  if (rtn != null) {
    return (T)rtn;
  }
  Map<Class<?>,ManagedObject<?>> newContext=(Map<Class<?>,ManagedObject<?>>)(context);
  ManagedObject<?> newServiceObject=null;
  newServiceObject=getClassFromManagedObject(clazz);
  if (newServiceObject != null) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + clazz.getName());
    }
    newContext.put(clazz,newServiceObject);
    return (T)newServiceObject.getObject();
  }
 else {
    newContext.remove(clazz);
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + clazz.getName());
  }
  return serviceObject;
}","@SuppressWarnings(""String_Node_Str"") private <T>T getInstanceFromManagedObject(T serviceObject,Object context){
  Class<?> clazz=serviceObject.getClass();
  Object rtn=getClassFromCDI(clazz);
  if (rtn != null) {
    return (T)rtn;
  }
  Map<Class<?>,ManagedObject<?>> newContext=(Map<Class<?>,ManagedObject<?>>)(context);
  ManagedObject<?> newServiceObject=null;
  newServiceObject=getClassFromManagedObject(clazz);
  if (newServiceObject != null) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + clazz.getName());
    }
    ManagedObject<?> oldMO=newContext.put(clazz,newServiceObject);
    if (oldMO != null && TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + oldMO + ""String_Node_Str""+ newServiceObject+ ""String_Node_Str""+ clazz+ ""String_Node_Str""+ newContext);
    }
    return (T)newServiceObject.getObject();
  }
 else {
    newContext.remove(clazz);
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    Tr.debug(tc,""String_Node_Str"" + clazz.getName());
  }
  return serviceObject;
}"
34948,"/** 
 * RuntimeContextTLS can init the EJB or CDI provider
 * @param < T >
 * @param < T >
 * @param resource
 * @param message
 */
public static <T>void initSingletonEJBCDIProvider(AbstractResourceInfo resource,Message message,T resourceObject){
  if ((!(resource instanceof ProviderInfo)) || (resource instanceof ApplicationInfo) || resource.getConstructorProxies() != null) {
    return;
  }
  ProviderInfo<T> pi=(ProviderInfo<T>)resource;
  if (pi.isInit()) {
    return;
  }
  Class clz=pi.getProvider().getClass();
  Bus bus=resource.getBus();
  List<JaxRsFactoryBeanCustomizer> beanCustomizers=(List<JaxRsFactoryBeanCustomizer>)bus.getProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER);
  Map<String,Object> beanCustomizerContexts=(Map<String,Object>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizers != null && !beanCustomizers.isEmpty() && beanCustomizerContexts != null) {
    Object newProviderInstance=null;
    for (    JaxRsFactoryBeanCustomizer beanCustomizer : beanCustomizers) {
      if (beanCustomizer.isCustomizableBean(clz,beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())))) {
        newProviderInstance=beanCustomizer.onSingletonProviderInit(pi.getProvider(),beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())),message);
        if (newProviderInstance != null) {
          pi.setProvider(newProviderInstance);
          pi.setIsInit(true);
          return;
        }
      }
    }
  }
  pi.setIsInit(true);
  Method postConstructMethod=ResourceUtils.findPostConstructMethod(clz);
  InjectionUtils.invokeLifeCycleMethod(pi.getProvider(),postConstructMethod);
}","/** 
 * RuntimeContextTLS can init the EJB or CDI provider
 * @param < T >
 * @param < T >
 * @param resource
 * @param message
 */
public static <T>void initSingletonEJBCDIProvider(AbstractResourceInfo resource,Message message,T resourceObject){
  if ((!(resource instanceof ProviderInfo)) || (resource instanceof ApplicationInfo) || resource.getConstructorProxies() != null) {
    return;
  }
  ProviderInfo<T> pi=(ProviderInfo<T>)resource;
  if (pi.isInit()) {
    return;
  }
  Class clz=pi.getProvider().getClass();
  Bus bus=resource.getBus();
  List<JaxRsFactoryBeanCustomizer> beanCustomizers=(List<JaxRsFactoryBeanCustomizer>)bus.getProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER);
  Map<String,Object> beanCustomizerContexts=(Map<String,Object>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizers != null && !beanCustomizers.isEmpty() && beanCustomizerContexts != null) {
    Object newProviderInstance=null;
    for (    JaxRsFactoryBeanCustomizer beanCustomizer : beanCustomizers) {
      if (beanCustomizer.isCustomizableBean(clz,beanCustomizerContexts.get(createCustomizerKey(beanCustomizer)))) {
        newProviderInstance=beanCustomizer.onSingletonProviderInit(pi.getProvider(),beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())),message);
        if (newProviderInstance != null) {
          pi.setProvider(newProviderInstance);
          pi.setIsInit(true);
          return;
        }
      }
    }
  }
  pi.setIsInit(true);
  Method postConstructMethod=ResourceUtils.findPostConstructMethod(clz);
  InjectionUtils.invokeLifeCycleMethod(pi.getProvider(),postConstructMethod);
}"
34949,"public static boolean isEJBCDI(Class<?> c,Bus bus){
  List<JaxRsFactoryBeanCustomizer> beanCustomizers=(List<JaxRsFactoryBeanCustomizer>)bus.getProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER);
  Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizers == null || beanCustomizers.isEmpty() || beanCustomizerContexts == null) {
    return false;
  }
  for (  JaxRsFactoryBeanCustomizer beanCustomizer : beanCustomizers) {
    if (beanCustomizer.isCustomizableBean(c,beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())))) {
      return true;
    }
  }
  return false;
}","public static boolean isEJBCDI(Class<?> c,Bus bus){
  List<JaxRsFactoryBeanCustomizer> beanCustomizers=(List<JaxRsFactoryBeanCustomizer>)bus.getProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER);
  Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizers == null || beanCustomizers.isEmpty() || beanCustomizerContexts == null) {
    return false;
  }
  for (  JaxRsFactoryBeanCustomizer beanCustomizer : beanCustomizers) {
    if (beanCustomizer.isCustomizableBean(c,beanCustomizerContexts.get(createCustomizerKey(beanCustomizer)))) {
      return true;
    }
  }
  return false;
}"
34950,"public static Object getBeanCustomizerContext(JaxRsFactoryBeanCustomizer beanCustomizer,Bus bus){
  Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  return beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode()));
}","public static Object getBeanCustomizerContext(JaxRsFactoryBeanCustomizer beanCustomizer,Bus bus){
  Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  return beanCustomizerContexts.get(createCustomizerKey(beanCustomizer));
}"
34951,"public static JaxRsFactoryBeanCustomizer findBeanCustomizer(Class<?> c,Bus bus){
  List<JaxRsFactoryBeanCustomizer> beanCustomizers=(List<JaxRsFactoryBeanCustomizer>)bus.getProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER);
  Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizers == null || beanCustomizers.isEmpty() || beanCustomizerContexts == null) {
    return null;
  }
  JaxRsFactoryBeanCustomizer rtn=null;
  for (  JaxRsFactoryBeanCustomizer beanCustomizer : beanCustomizers) {
    if (beanCustomizer.isCustomizableBean(c,beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())))) {
      return beanCustomizer;
    }
  }
  return rtn;
}","public static JaxRsFactoryBeanCustomizer findBeanCustomizer(Class<?> c,Bus bus){
  List<JaxRsFactoryBeanCustomizer> beanCustomizers=(List<JaxRsFactoryBeanCustomizer>)bus.getProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER);
  Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizers == null || beanCustomizers.isEmpty() || beanCustomizerContexts == null) {
    return null;
  }
  JaxRsFactoryBeanCustomizer rtn=null;
  for (  JaxRsFactoryBeanCustomizer beanCustomizer : beanCustomizers) {
    if (beanCustomizer.isCustomizableBean(c,beanCustomizerContexts.get(createCustomizerKey(beanCustomizer)))) {
      return beanCustomizer;
    }
  }
  return rtn;
}"
34952,"protected List<ProviderInfo<? extends Object>> prepareProviders(boolean custom,boolean busGlobal,Object[] providers,ProviderInfo<Application> application){
  List<ProviderInfo<? extends Object>> theProviders=new ArrayList<ProviderInfo<? extends Object>>(providers.length);
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> beanCustomizerContexts=(Map<String,Object>)getBus().getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  for (  Object o : providers) {
    if (o == null) {
      continue;
    }
    ProviderInfo<? extends Object> pi=null;
    if (o instanceof Constructor) {
      Map<Class<?>,Object> values=CastUtils.cast(application == null ? null : Collections.singletonMap(Application.class,application.getProvider()));
      pi=createProviderFromConstructor((Constructor<?>)o,values,getBus(),true,custom);
    }
 else     if (o instanceof ProviderInfo) {
      pi=(ProviderInfo<?>)o;
    }
 else {
      pi=new ProviderInfo<Object>(o,getBus(),custom);
      pi.setBusGlobal(busGlobal);
    }
    JaxRsFactoryBeanCustomizer beanCustomizer=InjectionRuntimeContextHelper.findBeanCustomizer(o.getClass(),getBus());
    if (beanCustomizer != null) {
      Object proxyObject=beanCustomizer.onSetupProviderProxy(o,beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())));
      if (proxyObject != null && (proxyObject != o || !proxyObject.equals(o))) {
        pi.setProvider(proxyObject);
      }
    }
    if (beanCustomizer != null && DynamicFeature.class.isAssignableFrom(pi.getProvider().getClass())) {
      Object newProviderInstance=beanCustomizer.onSingletonProviderInit(pi.getProvider(),beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())),null);
      if (newProviderInstance != null) {
        pi.setProvider(newProviderInstance);
      }
    }
    theProviders.add(pi);
  }
  return theProviders;
}","protected List<ProviderInfo<? extends Object>> prepareProviders(boolean custom,boolean busGlobal,Object[] providers,ProviderInfo<Application> application){
  List<ProviderInfo<? extends Object>> theProviders=new ArrayList<ProviderInfo<? extends Object>>(providers.length);
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> beanCustomizerContexts=(Map<String,Object>)getBus().getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  for (  Object o : providers) {
    if (o == null) {
      continue;
    }
    ProviderInfo<? extends Object> pi=null;
    if (o instanceof Constructor) {
      Map<Class<?>,Object> values=CastUtils.cast(application == null ? null : Collections.singletonMap(Application.class,application.getProvider()));
      pi=createProviderFromConstructor((Constructor<?>)o,values,getBus(),true,custom);
    }
 else     if (o instanceof ProviderInfo) {
      pi=(ProviderInfo<?>)o;
    }
 else {
      pi=new ProviderInfo<Object>(o,getBus(),custom);
      pi.setBusGlobal(busGlobal);
    }
    JaxRsFactoryBeanCustomizer beanCustomizer=InjectionRuntimeContextHelper.findBeanCustomizer(o.getClass(),getBus());
    if (beanCustomizer != null) {
      Object proxyObject=beanCustomizer.onSetupProviderProxy(o,beanCustomizerContexts.get(createCustomizerKey(beanCustomizer)));
      if (proxyObject != null && (proxyObject != o || !proxyObject.equals(o))) {
        pi.setProvider(proxyObject);
      }
    }
    if (beanCustomizer != null && DynamicFeature.class.isAssignableFrom(pi.getProvider().getClass())) {
      Object newProviderInstance=beanCustomizer.onSingletonProviderInit(pi.getProvider(),beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())),null);
      if (newProviderInstance != null) {
        pi.setProvider(newProviderInstance);
      }
    }
    theProviders.add(pi);
  }
  return theProviders;
}"
34953,"public Object getBeanCustomizerContext(JaxRsFactoryBeanCustomizer customizer){
  return beanCustomizerContexts.get(Integer.toString(customizer.hashCode()));
}","public Object getBeanCustomizerContext(JaxRsFactoryBeanCustomizer customizer){
  return beanCustomizerContexts.get(createCustomizerKey(customizer));
}"
34954,"protected synchronized void doInit() throws ServletException {
  Bus serverBus=this.moduleMetadata.getServerMetaData().getServerBus();
  this.setBus(serverBus);
  this.setAddress(endpointInfo.getAddress());
  this.setStart(false);
  this.getBus().setProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER,beanCustomizers);
  this.getBus().setProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ,beanCustomizerContexts);
  this.getBus().setProperty(JaxRsConstants.PROVIDER_CACHE_ALLOWED,true);
  this.getBus().setProperty(JaxRsConstants.PROVIDER_CACHE_CHECK_ALL,true);
  this.getBus().getOutInterceptors().add(new LibertyClearInjectRuntimeCtxOutInterceptor<Message>(Phase.MARSHAL));
  CXFJaxRsProviderResourceHolder cxfPRHolder=new CXFJaxRsProviderResourceHolder();
  try {
    this.onApplicationInit(cxfPRHolder);
  }
 catch (  ClassNotFoundException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + e.getMessage());
    }
    throw new ServletException(e.getMessage(),e);
  }
catch (  ServletException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + e.getMessage());
    }
    throw e;
  }
  if (endpointInfo.getPerRequestProviderAndPathInfos().isEmpty() && endpointInfo.getSingletonProviderAndPathInfos().isEmpty() && endpointInfo.getAbstractClassInterfaceList().isEmpty()) {
    throw new ServletException(""String_Node_Str"" + endpointInfo.getAppClassName());
  }
  for (  JaxRsFactoryBeanCustomizer customizer : beanCustomizers) {
    BeanCustomizerContext context=new BeanCustomizerContext(endpointInfo,moduleMetadata,cxfPRHolder);
    customizer.onPrepareProviderResource(context);
    Object customizerContext=context.getContextObject();
    if (customizerContext != null) {
      beanCustomizerContexts.put(Integer.toString(customizer.hashCode()),customizerContext);
    }
  }
  boolean isEnableBeanValidation=JaxRsBeanValidation.enableBeanValidationProviders(cxfPRHolder.getProviders());
  this.setInvoker(new LibertyJaxRsInvoker(this,isEnableBeanValidation));
  boolean clientSide=false;
  providerFactoryService.bindProviders(clientSide,cxfPRHolder.getProviders());
  List<Class<?>> resourceClasses=cxfPRHolder.getResourceClasses();
synchronized (resourceClasses) {
    this.setResourceClasses(resourceClasses);
  }
  List<Object> providersList=cxfPRHolder.getProviders();
synchronized (providersList) {
    this.setProviders(providersList);
  }
  Map<Class<?>,ResourceProvider> resourceProviderMap=cxfPRHolder.getResouceProviderMap();
synchronized (resourceProviderMap) {
    for (    Map.Entry<Class<?>,ResourceProvider> entry : resourceProviderMap.entrySet()) {
      this.setResourceProvider(entry.getKey(),entry.getValue());
    }
  }
  Map<Class<?>,Class<?>> absMap=cxfPRHolder.getAbstractResourceMap();
synchronized (absMap) {
    for (    ClassResourceInfo cri : this.serviceFactory.getClassResourceInfo()) {
      if (absMap.containsKey(cri.getServiceClass())) {
        cri.setResourceClass(absMap.get(cri.getServiceClass()));
      }
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    boolean serviceWasNull=false;
    Service service=this.serviceFactory.getService();
    if (service == null) {
      service=serviceFactory.create();
      serviceWasNull=true;
    }
    List<ClassResourceInfo> resources=((JAXRSServiceImpl)service).getClassResourceInfos();
    StringBuilder stringBuilder=new StringBuilder();
    for (    ClassResourceInfo classResourceInfo : resources) {
      stringBuilder.append(classResourceInfo.getResourceClass());
      stringBuilder.append(""String_Node_Str"");
    }
    String stringClassResourceInfo=stringBuilder.toString();
    if (serviceWasNull) {
      this.serviceFactory.setService(null);
    }
    Tr.debug(tc,""String_Node_Str"" + stringClassResourceInfo);
  }
}","protected synchronized void doInit() throws ServletException {
  Bus serverBus=this.moduleMetadata.getServerMetaData().getServerBus();
  this.setBus(serverBus);
  this.setAddress(endpointInfo.getAddress());
  this.setStart(false);
  this.getBus().setProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER,beanCustomizers);
  this.getBus().setProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ,beanCustomizerContexts);
  this.getBus().setProperty(JaxRsConstants.PROVIDER_CACHE_ALLOWED,true);
  this.getBus().setProperty(JaxRsConstants.PROVIDER_CACHE_CHECK_ALL,true);
  this.getBus().getOutInterceptors().add(new LibertyClearInjectRuntimeCtxOutInterceptor<Message>(Phase.MARSHAL));
  CXFJaxRsProviderResourceHolder cxfPRHolder=new CXFJaxRsProviderResourceHolder();
  try {
    this.onApplicationInit(cxfPRHolder);
  }
 catch (  ClassNotFoundException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + e.getMessage());
    }
    throw new ServletException(e.getMessage(),e);
  }
catch (  ServletException e) {
    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
      Tr.debug(tc,""String_Node_Str"" + e.getMessage());
    }
    throw e;
  }
  if (endpointInfo.getPerRequestProviderAndPathInfos().isEmpty() && endpointInfo.getSingletonProviderAndPathInfos().isEmpty() && endpointInfo.getAbstractClassInterfaceList().isEmpty()) {
    throw new ServletException(""String_Node_Str"" + endpointInfo.getAppClassName());
  }
  for (  JaxRsFactoryBeanCustomizer customizer : beanCustomizers) {
    BeanCustomizerContext context=new BeanCustomizerContext(endpointInfo,moduleMetadata,cxfPRHolder);
    customizer.onPrepareProviderResource(context);
    Object customizerContext=context.getContextObject();
    if (customizerContext != null) {
      beanCustomizerContexts.put(createCustomizerKey(customizer),customizerContext);
    }
  }
  boolean isEnableBeanValidation=JaxRsBeanValidation.enableBeanValidationProviders(cxfPRHolder.getProviders());
  this.setInvoker(new LibertyJaxRsInvoker(this,isEnableBeanValidation));
  boolean clientSide=false;
  providerFactoryService.bindProviders(clientSide,cxfPRHolder.getProviders());
  List<Class<?>> resourceClasses=cxfPRHolder.getResourceClasses();
synchronized (resourceClasses) {
    this.setResourceClasses(resourceClasses);
  }
  List<Object> providersList=cxfPRHolder.getProviders();
synchronized (providersList) {
    this.setProviders(providersList);
  }
  Map<Class<?>,ResourceProvider> resourceProviderMap=cxfPRHolder.getResouceProviderMap();
synchronized (resourceProviderMap) {
    for (    Map.Entry<Class<?>,ResourceProvider> entry : resourceProviderMap.entrySet()) {
      this.setResourceProvider(entry.getKey(),entry.getValue());
    }
  }
  Map<Class<?>,Class<?>> absMap=cxfPRHolder.getAbstractResourceMap();
synchronized (absMap) {
    for (    ClassResourceInfo cri : this.serviceFactory.getClassResourceInfo()) {
      if (absMap.containsKey(cri.getServiceClass())) {
        cri.setResourceClass(absMap.get(cri.getServiceClass()));
      }
    }
  }
  if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
    boolean serviceWasNull=false;
    Service service=this.serviceFactory.getService();
    if (service == null) {
      service=serviceFactory.create();
      serviceWasNull=true;
    }
    List<ClassResourceInfo> resources=((JAXRSServiceImpl)service).getClassResourceInfos();
    StringBuilder stringBuilder=new StringBuilder();
    for (    ClassResourceInfo classResourceInfo : resources) {
      stringBuilder.append(classResourceInfo.getResourceClass());
      stringBuilder.append(""String_Node_Str"");
    }
    String stringClassResourceInfo=stringBuilder.toString();
    if (serviceWasNull) {
      this.serviceFactory.setService(null);
    }
    Tr.debug(tc,""String_Node_Str"" + stringClassResourceInfo);
  }
}"
34955,"public static boolean isEJBCDI(Class<?> c,Bus bus){
  List<JaxRsFactoryBeanCustomizer> beanCustomizers=(List<JaxRsFactoryBeanCustomizer>)bus.getProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER);
  Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizers == null || beanCustomizers.isEmpty() || beanCustomizerContexts == null) {
    return false;
  }
  for (  JaxRsFactoryBeanCustomizer beanCustomizer : beanCustomizers) {
    if (beanCustomizer.isCustomizableBean(c,beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())))) {
      return true;
    }
  }
  return false;
}","public static boolean isEJBCDI(Class<?> c,Bus bus){
  List<JaxRsFactoryBeanCustomizer> beanCustomizers=(List<JaxRsFactoryBeanCustomizer>)bus.getProperty(JaxRsConstants.ENDPOINT_LIST_BEANCUSTOMIZER);
  Map<String,BeanCustomizerContext> beanCustomizerContexts=(Map<String,BeanCustomizerContext>)bus.getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  if (beanCustomizers == null || beanCustomizers.isEmpty() || beanCustomizerContexts == null) {
    return false;
  }
  for (  JaxRsFactoryBeanCustomizer beanCustomizer : beanCustomizers) {
    if (beanCustomizer.isCustomizableBean(c,beanCustomizerContexts.get(CustomizerUtils.createCustomizerKey(beanCustomizer)))) {
      return true;
    }
  }
  return false;
}"
34956,"protected List<ProviderInfo<? extends Object>> prepareProviders(boolean custom,boolean busGlobal,Object[] providers,ProviderInfo<Application> application){
  List<ProviderInfo<? extends Object>> theProviders=new ArrayList<ProviderInfo<? extends Object>>(providers.length);
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> beanCustomizerContexts=(Map<String,Object>)getBus().getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  for (  Object o : providers) {
    if (o == null) {
      continue;
    }
    ProviderInfo<? extends Object> pi=null;
    if (o instanceof Constructor) {
      Map<Class<?>,Object> values=CastUtils.cast(application == null ? null : Collections.singletonMap(Application.class,application.getProvider()));
      pi=createProviderFromConstructor((Constructor<?>)o,values,getBus(),true,custom);
    }
 else     if (o instanceof ProviderInfo) {
      pi=(ProviderInfo<?>)o;
    }
 else {
      pi=new ProviderInfo<Object>(o,getBus(),custom);
      pi.setBusGlobal(busGlobal);
    }
    JaxRsFactoryBeanCustomizer beanCustomizer=InjectionRuntimeContextHelper.findBeanCustomizer(o.getClass(),getBus());
    if (beanCustomizer != null) {
      Object proxyObject=beanCustomizer.onSetupProviderProxy(o,beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())));
      if (proxyObject != null && (proxyObject != o || !proxyObject.equals(o))) {
        pi.setProvider(proxyObject);
      }
    }
    if (beanCustomizer != null && DynamicFeature.class.isAssignableFrom(pi.getProvider().getClass())) {
      Object newProviderInstance=beanCustomizer.onSingletonProviderInit(pi.getProvider(),beanCustomizerContexts.get(Integer.toString(beanCustomizer.hashCode())),null);
      if (newProviderInstance != null) {
        pi.setProvider(newProviderInstance);
      }
    }
    theProviders.add(pi);
  }
  return theProviders;
}","protected List<ProviderInfo<? extends Object>> prepareProviders(boolean custom,boolean busGlobal,Object[] providers,ProviderInfo<Application> application){
  List<ProviderInfo<? extends Object>> theProviders=new ArrayList<ProviderInfo<? extends Object>>(providers.length);
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> beanCustomizerContexts=(Map<String,Object>)getBus().getProperty(JaxRsConstants.ENDPOINT_BEANCUSTOMIZER_CONTEXTOBJ);
  for (  Object o : providers) {
    if (o == null) {
      continue;
    }
    ProviderInfo<? extends Object> pi=null;
    if (o instanceof Constructor) {
      Map<Class<?>,Object> values=CastUtils.cast(application == null ? null : Collections.singletonMap(Application.class,application.getProvider()));
      pi=createProviderFromConstructor((Constructor<?>)o,values,getBus(),true,custom);
    }
 else     if (o instanceof ProviderInfo) {
      pi=(ProviderInfo<?>)o;
    }
 else {
      pi=new ProviderInfo<Object>(o,getBus(),custom);
      pi.setBusGlobal(busGlobal);
    }
    JaxRsFactoryBeanCustomizer beanCustomizer=InjectionRuntimeContextHelper.findBeanCustomizer(o.getClass(),getBus());
    if (beanCustomizer != null) {
      Object proxyObject=beanCustomizer.onSetupProviderProxy(o,beanCustomizerContexts.get(CustomizerUtils.createCustomizerKey(beanCustomizer)));
      if (proxyObject != null && (proxyObject != o || !proxyObject.equals(o))) {
        pi.setProvider(proxyObject);
      }
    }
    if (beanCustomizer != null && DynamicFeature.class.isAssignableFrom(pi.getProvider().getClass())) {
      Object newProviderInstance=beanCustomizer.onSingletonProviderInit(pi.getProvider(),beanCustomizerContexts.get(CustomizerUtils.createCustomizerKey(beanCustomizer)),null);
      if (newProviderInstance != null) {
        pi.setProvider(newProviderInstance);
      }
    }
    theProviders.add(pi);
  }
  return theProviders;
}"
34957,"@Override public boolean handleAttribute(DDParser parser,String nsURI,String localName,int index) throws ParseException {
  if (nsURI == null) {
    if (parser.version >= 24 && ""String_Node_Str"".equals(localName)) {
      version=parser.parseTokenAttributeValue(index);
      return true;
    }
    if (parser.version >= 24 && ""String_Node_Str"".equals(localName)) {
      metadata_complete=parser.parseBooleanAttributeValue(index);
      return true;
    }
  }
  return false;
}","@Override public boolean handleAttribute(DDParser parser,String nsURI,String localName,int index) throws ParseException {
  if (nsURI == null || XMLConstants.NULL_NS_URI.equals(nsURI)) {
    if (parser.version >= 24 && ""String_Node_Str"".equals(localName)) {
      version=parser.parseTokenAttributeValue(index);
      return true;
    }
    if (parser.version >= 24 && ""String_Node_Str"".equals(localName)) {
      metadata_complete=parser.parseBooleanAttributeValue(index);
      return true;
    }
  }
  return false;
}"
34958,"@Test public void testSingleHealthChecks() throws Exception {
  testSingleOutcomeUP();
  testSingleOutcomeDOWN();
  testCheckUPWithData();
  testCheckDOWNWithData();
}","@Test public void testSingleHealthChecks() throws Exception {
  testJsonReceived();
  testSingleOutcomeUP();
  testSingleOutcomeDOWN();
  testCheckUPWithData();
  testCheckDOWNWithData();
}"
34959,"@Test public void testJsonReceived() throws Exception {
  URL healthURL=new URL(""String_Node_Str"" + server1.getHostname() + ""String_Node_Str""+ server1.getHttpDefaultPort()+ ""String_Node_Str"");
  HttpURLConnection con=HttpUtils.getHttpConnection(healthURL,200,10 * 1000);
  assertEquals(""String_Node_Str"",con.getHeaderField(""String_Node_Str""));
  BufferedReader br=HttpUtils.getConnectionStream(con);
  Json.createReader(br);
  JsonObject jsonResponse=Json.createReader(br).readObject();
  br.close();
  log(""String_Node_Str"",""String_Node_Str"" + jsonResponse.toString());
  assertNotNull(""String_Node_Str"",jsonResponse.getString(""String_Node_Str""));
  JsonArray checks=(JsonArray)jsonResponse.get(""String_Node_Str"");
  assertEquals(1,checks.size());
  assertEquals(""String_Node_Str"",((JsonObject)checks.get(0)).getString(""String_Node_Str""));
  assertEquals(jsonResponse.getString(""String_Node_Str""),""String_Node_Str"");
}","public void testJsonReceived() throws Exception {
  URL healthURL=new URL(""String_Node_Str"" + server1.getHostname() + ""String_Node_Str""+ server1.getHttpDefaultPort()+ ""String_Node_Str"");
  HttpURLConnection con=HttpUtils.getHttpConnection(healthURL,200,10 * 1000);
  assertEquals(""String_Node_Str"",con.getHeaderField(""String_Node_Str""));
  BufferedReader br=HttpUtils.getConnectionStream(con);
  Json.createReader(br);
  JsonObject jsonResponse=Json.createReader(br).readObject();
  br.close();
  log(""String_Node_Str"",""String_Node_Str"" + jsonResponse.toString());
  assertNotNull(""String_Node_Str"",jsonResponse.getString(""String_Node_Str""));
  JsonArray checks=(JsonArray)jsonResponse.get(""String_Node_Str"");
  assertEquals(1,checks.size());
  assertEquals(""String_Node_Str"",((JsonObject)checks.get(0)).getString(""String_Node_Str""));
  assertEquals(jsonResponse.getString(""String_Node_Str""),""String_Node_Str"");
}"
34960,"@Override public void handleErrorResponse(HttpServletResponse response,int httpErrorCode){
  if (!response.isCommitted()) {
    response.setStatus(httpErrorCode);
  }
  String errorMessage=getErrorMessage();
  response.setHeader(AUTH_HEADER,errorMessage);
  writeResponseBody(response,httpErrorCode);
}","@Override public void handleErrorResponse(HttpServletResponse response,int httpErrorCode){
  if (!response.isCommitted()) {
    response.setStatus(httpErrorCode);
  }
  String errorMessage=getErrorMessage();
  response.setHeader(AUTH_HEADER,errorMessage);
}"
34961,"private AppModuleName setAppModuleNames(IServletContext isc){
  WebAppConfig webAppConfig=isc.getWebAppConfig();
  if (webAppConfig.isSystemApp())   return null;
  WebModuleMetaData webModuleMetaData=((WebAppConfigExtended)webAppConfig).getMetaData();
  String appName=webModuleMetaData.getApplicationMetaData().getName();
  if (!appName.equals(""String_Node_Str"")) {
    String moduleName=webModuleMetaData.getJ2EEName().toString();
    return addAppModuleNames(appName,moduleName);
  }
 else {
    return null;
  }
}","private AppModuleName setAppModuleNames(IServletContext isc){
  WebAppConfig webAppConfig=isc.getWebAppConfig();
  if (webAppConfig.isSystemApp()) {
    Tr.debug(tc,""String_Node_Str"",webAppConfig.getApplicationName());
    return null;
  }
  if (isOsgiApp(isc)) {
    Tr.debug(tc,""String_Node_Str"",webAppConfig.getApplicationName());
    return null;
  }
  WebModuleMetaData webModuleMetaData=((WebAppConfigExtended)webAppConfig).getMetaData();
  String appName=webModuleMetaData.getApplicationMetaData().getName();
  String moduleName=webModuleMetaData.getJ2EEName().toString();
  return addAppModuleNames(appName,moduleName);
}"
34962,"private OutputWriter getOutputWriter(RESTRequest request,RESTResponse response) throws IOException, HTTPNotAcceptableException, HTTPMethodNotAllowedException {
  String method=request.getMethod();
  String accept=request.getHeader(Constants.ACCEPT_HEADER);
  Writer writer=response.getWriter();
  if (accept == null) {
    accept=Constants.ACCEPT_HEADER_TEXT;
  }
  if (Constants.METHOD_GET.equals(method)) {
    if (accept.contains(Constants.ACCEPT_HEADER_TEXT)) {
      return new PrometheusMetricWriter(writer);
    }
 else     if (accept.contains(Constants.ACCEPT_HEADER_JSON)) {
      return new JSONMetricWriter(writer);
    }
 else {
      Tr.event(tc,""String_Node_Str"");
      return new PrometheusMetricWriter(writer);
    }
  }
 else   if (Constants.METHOD_OPTIONS.equals(method)) {
    if (accept.contains(Constants.ACCEPT_HEADER_TEXT)) {
      throw new HTTPNotAcceptableException();
    }
    if (accept.contains(Constants.ACCEPT_HEADER_JSON)) {
      return new JSONMetadataWriter(writer);
    }
 else {
      throw new HTTPNotAcceptableException();
    }
  }
 else {
    throw new HTTPMethodNotAllowedException();
  }
}","private OutputWriter getOutputWriter(RESTRequest request,RESTResponse response) throws IOException, HTTPNotAcceptableException, HTTPMethodNotAllowedException {
  String method=request.getMethod();
  String accept=request.getHeader(Constants.ACCEPT_HEADER);
  Writer writer=response.getWriter();
  if (accept == null) {
    accept=Constants.ACCEPT_HEADER_TEXT;
  }
  if (Constants.METHOD_GET.equals(method)) {
    if (accept.contains(Constants.ACCEPT_HEADER_TEXT)) {
      return new PrometheusMetricWriter(writer);
    }
 else     if (accept.contains(Constants.ACCEPT_HEADER_JSON)) {
      return new JSONMetricWriter(writer);
    }
 else {
      Tr.event(tc,""String_Node_Str"");
      return new PrometheusMetricWriter(writer);
    }
  }
 else   if (Constants.METHOD_OPTIONS.equals(method)) {
    if (accept.contains(Constants.ACCEPT_HEADER_JSON)) {
      return new JSONMetadataWriter(writer);
    }
 else {
      throw new HTTPNotAcceptableException();
    }
  }
 else {
    throw new HTTPMethodNotAllowedException();
  }
}"
34963,"@NonNull @Override protected HomeActivityComponent createComponent(){
  N26SamplesApplication app=N26SamplesApplication.class.cast(getApplication());
  ActivityModule activityModule=new ActivityModule();
  return app.getComponent().createHomeActivityComponent(activityModule);
}","@NonNull @Override protected HomeActivityComponent createComponent(){
  N26SamplesApplication app=N26SamplesApplication.class.cast(getApplication());
  ActivityModule activityModule=new ActivityModule(this);
  return app.getComponent().createHomeActivityComponent(activityModule);
}"
34964,"@ForActivity @Provides Context provideContext(@NonNull final AppCompatActivity activity){
  return activity;
}","@ForActivity @Provides Context provideContext(){
  return activity;
}"
34965,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getStopAgentFee(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String address) throws NulsException, IOException {
  AssertUtil.canNotEmpty(address,""String_Node_Str"");
  if (!AddressTool.validAddress(address)) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(address));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (a.getDelHeight() > 0) {
      continue;
    }
    if (Arrays.equals(a.getAgentAddress(),stopAgent.getAddress())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(PocConsensusErrorCode.AGENT_NOT_EXIST).toRpcClientResult();
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(KernelErrorCode.DATA_NOT_FOUND).toRpcClientResult();
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.concatenate(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR).toRpcClientResult();
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Na resultFee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  return Result.getSuccess().setData(resultFee).toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getStopAgentFee(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String address) throws NulsException, IOException {
  AssertUtil.canNotEmpty(address,""String_Node_Str"");
  if (!AddressTool.validAddress(address)) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(address));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (a.getDelHeight() > 0) {
      continue;
    }
    if (Arrays.equals(a.getAgentAddress(),stopAgent.getAddress())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(PocConsensusErrorCode.AGENT_NOT_EXIST).toRpcClientResult();
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=ConsensusTool.getStopAgentCoinData(agent,PocConsensusConstant.STOP_AGENT_LOCK_TIME);
  tx.setCoinData(coinData);
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  Na resultFee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  return Result.getSuccess().setData(resultFee).toRpcClientResult();
}"
34966,"/** 
 * 同步网络时间
 */
private void syncWebTime(){
  int count=0;
  long sum=0L;
  for (int i=0; i < urlList.size(); i++) {
    long localBeforeTime=System.currentTimeMillis();
    long netTime=getWebTime(urlList.get(i));
    if (netTime == 0) {
      continue;
    }
    long localEndTime=System.currentTimeMillis();
    long value=(netTime + (localEndTime - localBeforeTime) / 2) - localEndTime;
    if (value > 0) {
      count++;
      sum+=value;
    }
  }
  if (count > 0) {
    netTimeOffset=sum / count;
  }
  lastSyncTime=currentTimeMillis();
}","/** 
 * 同步网络时间
 */
private void syncWebTime(){
  int count=0;
  long sum=0L;
  for (int i=0; i < urlList.size(); i++) {
    long localBeforeTime=System.currentTimeMillis();
    long netTime=getWebTime(urlList.get(i));
    if (netTime == 0) {
      continue;
    }
    long localEndTime=System.currentTimeMillis();
    long value=(netTime + (localEndTime - localBeforeTime) / 2) - localEndTime;
    count++;
    sum+=value;
  }
  if (count > 0) {
    netTimeOffset=sum / count;
  }
  lastSyncTime=currentTimeMillis();
}"
34967,"/** 
 * 同步网络时间
 */
private void syncWebTime(){
  int count=0;
  long sum=0L;
  for (int i=0; i < urlList.size(); i++) {
    long localBeforeTime=System.currentTimeMillis();
    long netTime=getWebTime(urlList.get(i));
    if (netTime == 0) {
      continue;
    }
    long localEndTime=System.currentTimeMillis();
    long value=(netTime + (localEndTime - localBeforeTime) / 2) - localEndTime;
    if (value > 0) {
      count++;
      sum+=value;
    }
  }
  if (count > 0) {
    netTimeOffset=sum / count;
  }
  lastSyncTime=currentTimeMillis();
}","/** 
 * 同步网络时间
 */
private void syncWebTime(){
  int count=0;
  long sum=0L;
  for (int i=0; i < urlList.size(); i++) {
    long localBeforeTime=System.currentTimeMillis();
    long netTime=getWebTime(urlList.get(i));
    if (netTime == 0) {
      continue;
    }
    long localEndTime=System.currentTimeMillis();
    long value=(netTime + (localEndTime - localBeforeTime) / 2) - localEndTime;
    count++;
    sum+=value;
  }
  if (count > 0) {
    netTimeOffset=sum / count;
  }
  lastSyncTime=currentTimeMillis();
}"
34968,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getWithdrawFee(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String depositTxHash) throws NulsException, IOException {
  AssertUtil.canNotEmpty(depositTxHash);
  if (!NulsDigestData.validHash(depositTxHash)) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  AssertUtil.canNotEmpty(address);
  if (!AddressTool.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST).toRpcClientResult();
  }
  CancelDepositTransaction tx=new CancelDepositTransaction();
  CancelDeposit cancelDeposit=new CancelDeposit();
  NulsDigestData hash=NulsDigestData.fromDigestHex(depositTxHash);
  DepositTransaction depositTransaction=(DepositTransaction)ledgerService.getTx(hash);
  if (null == depositTransaction) {
    return Result.getFailed(KernelErrorCode.DATA_NOT_FOUND).toRpcClientResult();
  }
  cancelDeposit.setAddress(AddressTool.getAddress(depositTxHash));
  cancelDeposit.setJoinTxHash(hash);
  tx.setTxData(cancelDeposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(cancelDeposit.getAddress(),depositTransaction.getTxData().getDeposit(),0));
  coinData.setTo(toList);
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < depositTransaction.getCoinData().getTo().size(); index++) {
    Coin coin=depositTransaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(depositTransaction.getTxData().getDeposit())) {
      coin.setOwner(ArraysTool.concatenate(hash.serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR).toRpcClientResult();
  }
  coinData.setFrom(fromList);
  tx.setCoinData(coinData);
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  Na resultFee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  return Result.getSuccess().setData(resultFee).toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getWithdrawFee(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String depositTxHash) throws NulsException, IOException {
  AssertUtil.canNotEmpty(depositTxHash);
  if (!NulsDigestData.validHash(depositTxHash)) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  AssertUtil.canNotEmpty(address);
  if (!AddressTool.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST).toRpcClientResult();
  }
  CancelDepositTransaction tx=new CancelDepositTransaction();
  CancelDeposit cancelDeposit=new CancelDeposit();
  NulsDigestData hash=NulsDigestData.fromDigestHex(depositTxHash);
  DepositTransaction depositTransaction=(DepositTransaction)ledgerService.getTx(hash);
  if (null == depositTransaction) {
    return Result.getFailed(KernelErrorCode.DATA_NOT_FOUND).toRpcClientResult();
  }
  cancelDeposit.setAddress(account.getAddress().getAddressBytes());
  cancelDeposit.setJoinTxHash(hash);
  tx.setTxData(cancelDeposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(cancelDeposit.getAddress(),depositTransaction.getTxData().getDeposit(),0));
  coinData.setTo(toList);
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < depositTransaction.getCoinData().getTo().size(); index++) {
    Coin coin=depositTransaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(depositTransaction.getTxData().getDeposit())) {
      coin.setOwner(ArraysTool.concatenate(hash.serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR).toRpcClientResult();
  }
  coinData.setFrom(fromList);
  tx.setCoinData(coinData);
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  Na resultFee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  return Result.getSuccess().setData(resultFee).toRpcClientResult();
}"
34969,"public static String getPwdOptional(){
  return getPwdOptional(null);
}","/** 
 * 得到用户输入的密码,允许不输入 提示信息为默认
 * @return
 */
public static String getPwdOptional(){
  return getPwdOptional(null);
}"
34970,"private void initHandlers(){
  MessageBusService messageBusService=NulsContext.getServiceBean(MessageBusService.class);
  messageBusService.subscribeMessage(BlockMessage.class,new BlockMessageHandler());
  messageBusService.subscribeMessage(BlocksHashMessage.class,new BlocksHashHandler());
  messageBusService.subscribeMessage(GetBlocksHashMessage.class,new GetBlocksHashHandler());
  messageBusService.subscribeMessage(NotFoundMessage.class,new NotFoundHander());
  messageBusService.subscribeMessage(GetBlockMessage.class,new GetBlockHandler());
  messageBusService.subscribeMessage(GetBlocksByHashMessage.class,new GetBlocksByHashHandler());
  messageBusService.subscribeMessage(GetBlocksByHeightMessage.class,new GetBlocksByHeightHandler());
  messageBusService.subscribeMessage(GetTxGroupRequest.class,new GetTxGroupHandler());
  messageBusService.subscribeMessage(TxGroupMessage.class,new TxGroupHandler());
  messageBusService.subscribeMessage(TransactionMessage.class,new TransactionMessageHandler());
  messageBusService.subscribeMessage(SmallBlockMessage.class,new SmallBlockHandler());
  messageBusService.subscribeMessage(CompleteMessage.class,new CompleteHandler());
  messageBusService.subscribeMessage(ReactMessage.class,new ReactMessageHandler());
  messageBusService.subscribeMessage(ForwardSmallBlockMessage.class,new ForwardSmallBlockHandler());
  messageBusService.subscribeMessage(ForwardTxMessage.class,new ForwardTxMessageHandler());
}","private void initHandlers(){
  MessageBusService messageBusService=NulsContext.getServiceBean(MessageBusService.class);
  messageBusService.subscribeMessage(BlockMessage.class,new BlockMessageHandler());
  messageBusService.subscribeMessage(BlocksHashMessage.class,new BlocksHashHandler());
  messageBusService.subscribeMessage(GetBlocksHashMessage.class,new GetBlocksHashHandler());
  messageBusService.subscribeMessage(NotFoundMessage.class,new NotFoundHander());
  messageBusService.subscribeMessage(GetBlockMessage.class,new GetBlockHandler());
  messageBusService.subscribeMessage(GetBlocksByHashMessage.class,new GetBlocksByHashHandler());
  messageBusService.subscribeMessage(GetBlocksByHeightMessage.class,new GetBlocksByHeightHandler());
  messageBusService.subscribeMessage(GetTxGroupRequest.class,new GetTxGroupHandler());
  messageBusService.subscribeMessage(TxGroupMessage.class,new TxGroupHandler());
  messageBusService.subscribeMessage(TransactionMessage.class,new TransactionMessageHandler());
  messageBusService.subscribeMessage(SmallBlockMessage.class,new SmallBlockHandler());
  messageBusService.subscribeMessage(CompleteMessage.class,new CompleteHandler());
  messageBusService.subscribeMessage(ReactMessage.class,new ReactMessageHandler());
  messageBusService.subscribeMessage(GetTxMessage.class,new GetTxMessageHandler());
  messageBusService.subscribeMessage(GetSmallBlockMessage.class,new GetSmallBlockHandler());
  messageBusService.subscribeMessage(ForwardSmallBlockMessage.class,new ForwardSmallBlockHandler());
  messageBusService.subscribeMessage(ForwardTxMessage.class,new ForwardTxMessageHandler());
}"
34971,"@Override public int compare(Transaction o1,Transaction o2){
  if (o1.getTime() < o2.getTime()) {
    return -1;
  }
 else   if (o1.getTime() > o2.getTime()) {
    return 1;
  }
 else {
    for (    Coin coin : o1.getCoinData().getFrom()) {
      NulsByteBuffer buffer=new NulsByteBuffer(coin.getOwner());
      NulsDigestData hash=null;
      try {
        hash=buffer.readHash();
      }
 catch (      NulsException e) {
        Log.error(e);
      }
      if (o2.getHash().equals(hash)) {
        return 1;
      }
    }
    for (    Coin coin : o2.getCoinData().getFrom()) {
      NulsByteBuffer buffer=new NulsByteBuffer(coin.getOwner());
      NulsDigestData hash=null;
      try {
        hash=buffer.readHash();
      }
 catch (      NulsException e) {
        Log.error(e);
      }
      if (o1.getHash().equals(hash)) {
        return -1;
      }
    }
  }
  return 0;
}","@Override public int compare(Transaction o1,Transaction o2){
  if (o1.getHash().equals(o2.getHash())) {
    return 0;
  }
  if (o1.getTime() < o2.getTime()) {
    return -1;
  }
 else   if (o1.getTime() > o2.getTime()) {
    return 1;
  }
 else {
    for (    Coin coin : o1.getCoinData().getFrom()) {
      NulsByteBuffer buffer=new NulsByteBuffer(coin.getOwner());
      NulsDigestData hash=null;
      try {
        hash=buffer.readHash();
      }
 catch (      NulsException e) {
        Log.error(e);
      }
      if (o2.getHash().equals(hash)) {
        return 1;
      }
    }
    for (    Coin coin : o2.getCoinData().getFrom()) {
      NulsByteBuffer buffer=new NulsByteBuffer(coin.getOwner());
      NulsDigestData hash=null;
      try {
        hash=buffer.readHash();
      }
 catch (      NulsException e) {
        Log.error(e);
      }
      if (o1.getHash().equals(hash)) {
        return -1;
      }
    }
  }
  return 0;
}"
34972,"@Override public CoinDataResult getCoinData(byte[] address,Na amount,int size,Na price) throws NulsException {
  if (null == price) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  lock.lock();
  try {
    CoinDataResult coinDataResult=new CoinDataResult();
    List<Coin> coinList=balanceManager.getCoinListByAddress(address);
    if (coinList.isEmpty()) {
      coinDataResult.setEnough(false);
      return coinDataResult;
    }
    Collections.sort(coinList,CoinComparator.getInstance());
    boolean enough=false;
    List<Coin> coins=new ArrayList<>();
    Na values=Na.ZERO;
    for (int i=0; i < coinList.size(); i++) {
      Coin coin=coinList.get(i);
      if (!coin.usable()) {
        continue;
      }
      if (coin.getNa().equals(Na.ZERO)) {
        continue;
      }
      coins.add(coin);
      size+=coin.size();
      if (i == 127) {
        size+=1;
      }
      Na fee=TransactionFeeCalculator.getFee(size,price);
      values=values.add(coin.getNa());
      if (values.isGreaterOrEquals(amount.add(fee))) {
        Na change=values.subtract(amount.add(fee));
        if (change.isGreaterThan(Na.ZERO)) {
          Coin changeCoin=new Coin();
          changeCoin.setOwner(address);
          changeCoin.setNa(change);
          fee=TransactionFeeCalculator.getFee(size + changeCoin.size(),price);
          if (values.isLessThan(amount.add(fee))) {
            continue;
          }
          coinDataResult.setChange(changeCoin);
        }
        enough=true;
        coinDataResult.setEnough(true);
        coinDataResult.setFee(fee);
        coinDataResult.setCoinList(coins);
        break;
      }
    }
    if (!enough) {
      coinDataResult.setEnough(false);
      return coinDataResult;
    }
    return coinDataResult;
  }
  finally {
    lock.unlock();
  }
}","@Override public CoinDataResult getCoinData(byte[] address,Na amount,int size,Na price) throws NulsException {
  if (null == price) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  lock.lock();
  try {
    CoinDataResult coinDataResult=new CoinDataResult();
    List<Coin> coinList=balanceManager.getCoinListByAddress(address);
    if (coinList.isEmpty()) {
      coinDataResult.setEnough(false);
      return coinDataResult;
    }
    Collections.sort(coinList,CoinComparator.getInstance());
    boolean enough=false;
    List<Coin> coins=new ArrayList<>();
    Na values=Na.ZERO;
    for (int i=0; i < coinList.size(); i++) {
      Coin coin=coinList.get(i);
      if (!coin.usable()) {
        continue;
      }
      if (coin.getNa().equals(Na.ZERO)) {
        continue;
      }
      coins.add(coin);
      size+=coin.size();
      if (i == 127) {
        size+=1;
      }
      Na fee=TransactionFeeCalculator.getFee(size,price);
      values=values.add(coin.getNa());
      if (values.isGreaterThan(amount.add(fee))) {
        Na change=values.subtract(amount.add(fee));
        Coin changeCoin=new Coin();
        changeCoin.setOwner(address);
        changeCoin.setNa(change);
        fee=TransactionFeeCalculator.getFee(size + changeCoin.size(),price);
        if (values.isLessThan(amount.add(fee))) {
          continue;
        }
        coinDataResult.setChange(changeCoin);
      }
      coinDataResult.setFee(fee);
      if (values.isGreaterOrEquals(amount.add(fee))) {
        enough=true;
        coinDataResult.setEnough(true);
        break;
      }
    }
    coinDataResult.setCoinList(coins);
    if (!enough) {
      coinDataResult.setEnough(false);
      return coinDataResult;
    }
    return coinDataResult;
  }
  finally {
    lock.unlock();
  }
}"
34973,"/** 
 * 获取未确认的交易
 */
private Result getUnconfirmedTx(String hash){
  Result result=null;
  try {
    Result<Transaction> txResult=accountLedgerService.getUnconfirmedTransaction(NulsDigestData.fromDigestHex(hash));
    if (txResult.isFailed() || null == txResult.getData()) {
      result=Result.getFailed(LedgerErrorCode.DATA_NOT_FOUND);
    }
 else {
      Transaction tx=txResult.getData();
      tx.setStatus(TxStatusEnum.CONFIRMED);
      TransactionDto txDto=null;
      CoinData coinData=tx.getCoinData();
      if (coinData != null) {
        List<Coin> froms=coinData.getFrom();
        if (froms != null && froms.size() > 0) {
          byte[] fromHash, owner;
          int fromIndex;
          NulsDigestData fromHashObj;
          Transaction fromTx;
          Coin fromUtxo;
          for (          Coin from : froms) {
            owner=from.getOwner();
            fromHash=AccountLegerUtils.getTxHashBytes(owner);
            fromIndex=AccountLegerUtils.getIndex(owner);
            fromHashObj=new NulsDigestData();
            fromHashObj.parse(fromHash,0);
            fromTx=accountLedgerService.getUnconfirmedTransaction(fromHashObj).getData();
            if (null == fromTx) {
              fromTx=ledgerService.getTx(fromHashObj);
            }
            fromUtxo=fromTx.getCoinData().getTo().get(fromIndex);
            from.setFrom(fromUtxo);
          }
        }
        txDto=new TransactionDto(tx);
        List<OutputDto> outputDtoList=new ArrayList<>();
        List<Coin> tos=coinData.getTo();
        if (tos != null && tos.size() > 0) {
          byte[] txHashBytes=tx.getHash().serialize();
          String txHash=hash;
          OutputDto outputDto=null;
          Coin to, temp;
          long bestHeight=NulsContext.getInstance().getBestHeight();
          long currentTime=TimeService.currentTimeMillis();
          long lockTime;
          for (int i=0, length=tos.size(); i < length; i++) {
            to=tos.get(i);
            outputDto=new OutputDto(to);
            outputDto.setTxHash(txHash);
            outputDto.setIndex(i);
            temp=ledgerService.getUtxo(Arrays.concatenate(txHashBytes,new VarInt(i).encode()));
            if (temp == null) {
              outputDto.setStatus(3);
            }
 else {
              lockTime=temp.getLockTime();
              if (lockTime < 0) {
                outputDto.setStatus(2);
              }
 else               if (lockTime == 0) {
                outputDto.setStatus(0);
              }
 else               if (lockTime > NulsConstant.BlOCKHEIGHT_TIME_DIVIDE) {
                if (lockTime > currentTime) {
                  outputDto.setStatus(1);
                }
 else {
                  outputDto.setStatus(0);
                }
              }
 else {
                if (lockTime > bestHeight) {
                  outputDto.setStatus(1);
                }
 else {
                  outputDto.setStatus(0);
                }
              }
            }
            outputDtoList.add(outputDto);
          }
        }
        txDto.setOutputs(outputDtoList);
        calTransactionValue(txDto);
      }
      result=Result.getSuccess();
      result.setData(txDto);
    }
  }
 catch (  NulsRuntimeException re) {
    Log.error(re);
    result=Result.getFailed(re.getErrorCode());
  }
catch (  Exception e) {
    Log.error(e);
    result=Result.getFailed(LedgerErrorCode.SYS_UNKOWN_EXCEPTION);
  }
  return result;
}","/** 
 * 获取未确认的交易
 */
private Result getUnconfirmedTx(String hash){
  Result result=null;
  try {
    Result<Transaction> txResult=accountLedgerService.getUnconfirmedTransaction(NulsDigestData.fromDigestHex(hash));
    if (txResult.isFailed() || null == txResult.getData()) {
      result=Result.getFailed(LedgerErrorCode.DATA_NOT_FOUND);
    }
 else {
      Transaction tx=txResult.getData();
      tx.setStatus(TxStatusEnum.UNCONFIRM);
      TransactionDto txDto=null;
      CoinData coinData=tx.getCoinData();
      if (coinData != null) {
        List<Coin> froms=coinData.getFrom();
        if (froms != null && froms.size() > 0) {
          byte[] fromHash, owner;
          int fromIndex;
          NulsDigestData fromHashObj;
          Transaction fromTx;
          Coin fromUtxo;
          for (          Coin from : froms) {
            owner=from.getOwner();
            fromHash=AccountLegerUtils.getTxHashBytes(owner);
            fromIndex=AccountLegerUtils.getIndex(owner);
            fromHashObj=new NulsDigestData();
            fromHashObj.parse(fromHash,0);
            fromTx=accountLedgerService.getUnconfirmedTransaction(fromHashObj).getData();
            if (null == fromTx) {
              fromTx=ledgerService.getTx(fromHashObj);
            }
            fromUtxo=fromTx.getCoinData().getTo().get(fromIndex);
            from.setFrom(fromUtxo);
          }
        }
        txDto=new TransactionDto(tx);
        List<OutputDto> outputDtoList=new ArrayList<>();
        List<Coin> tos=coinData.getTo();
        if (tos != null && tos.size() > 0) {
          byte[] txHashBytes=tx.getHash().serialize();
          String txHash=hash;
          OutputDto outputDto=null;
          Coin to, temp;
          long bestHeight=NulsContext.getInstance().getBestHeight();
          long currentTime=TimeService.currentTimeMillis();
          long lockTime;
          for (int i=0, length=tos.size(); i < length; i++) {
            to=tos.get(i);
            outputDto=new OutputDto(to);
            outputDto.setTxHash(txHash);
            outputDto.setIndex(i);
            temp=ledgerService.getUtxo(Arrays.concatenate(txHashBytes,new VarInt(i).encode()));
            if (temp == null) {
              outputDto.setStatus(3);
            }
 else {
              lockTime=temp.getLockTime();
              if (lockTime < 0) {
                outputDto.setStatus(2);
              }
 else               if (lockTime == 0) {
                outputDto.setStatus(0);
              }
 else               if (lockTime > NulsConstant.BlOCKHEIGHT_TIME_DIVIDE) {
                if (lockTime > currentTime) {
                  outputDto.setStatus(1);
                }
 else {
                  outputDto.setStatus(0);
                }
              }
 else {
                if (lockTime > bestHeight) {
                  outputDto.setStatus(1);
                }
 else {
                  outputDto.setStatus(0);
                }
              }
            }
            outputDtoList.add(outputDto);
          }
        }
        txDto.setOutputs(outputDtoList);
        calTransactionValue(txDto);
      }
      result=Result.getSuccess();
      result.setData(txDto);
    }
  }
 catch (  NulsRuntimeException re) {
    Log.error(re);
    result=Result.getFailed(re.getErrorCode());
  }
catch (  Exception e) {
    Log.error(e);
    result=Result.getFailed(LedgerErrorCode.SYS_UNKOWN_EXCEPTION);
  }
  return result;
}"
34974,"@Override public Result transferFee(byte[] from,byte[] to,Na values,String remark,Na price){
  Result<Account> accountResult=accountService.getAccount(from);
  if (accountResult.isFailed()) {
    return accountResult;
  }
  TransferTransaction tx=new TransferTransaction();
  try {
    tx.setRemark(remark.getBytes(NulsConfig.DEFAULT_ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    return Result.getFailed(LedgerErrorCode.PARAMETER_ERROR);
  }
  tx.setTime(TimeService.currentTimeMillis());
  CoinData coinData=new CoinData();
  Coin toCoin=new Coin(to,values);
  coinData.getTo().add(toCoin);
  Na fee=getTxFee(from,values,tx.size(),price);
  return Result.getSuccess().setData(fee);
}","@Override public Result transferFee(byte[] from,byte[] to,Na values,String remark,Na price){
  Result<Account> accountResult=accountService.getAccount(from);
  if (accountResult.isFailed()) {
    return accountResult;
  }
  TransferTransaction tx=new TransferTransaction();
  try {
    tx.setRemark(remark.getBytes(NulsConfig.DEFAULT_ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    return Result.getFailed(LedgerErrorCode.PARAMETER_ERROR);
  }
  tx.setTime(TimeService.currentTimeMillis());
  CoinData coinData=new CoinData();
  Coin toCoin=new Coin(to,values);
  coinData.getTo().add(toCoin);
  Na fee=getTxFee(from,values,tx.size(),price);
  Result result=Result.getSuccess().setData(fee);
  return result;
}"
34975,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"")}) public RpcClientResult transferFee(@BeanParam() TransferFeeForm form){
  if (form == null) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  if (!Address.validAddress(form.getToAddress())) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  if (form.getAmount() <= 0) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  if (!validTxRemark(form.getRemark())) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  Na value=Na.valueOf(form.getAmount());
  Result result=accountLedgerService.transferFee(AddressTool.getAddress(form.getAddress()),AddressTool.getAddress(form.getToAddress()),value,form.getRemark(),TransactionFeeCalculator.MIN_PRECE_PRE_1024_BYTES);
  if (result.isSuccess()) {
    Map<String,Object> map=new HashMap<>();
    map.put(""String_Node_Str"",result.getData());
    result.setData(map);
  }
  return result.toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"")}) public RpcClientResult transferFee(@BeanParam() TransferFeeForm form){
  if (form == null) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  if (!Address.validAddress(form.getToAddress())) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  if (form.getAmount() <= 0) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  if (!validTxRemark(form.getRemark())) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  Na value=Na.valueOf(form.getAmount());
  Result result=accountLedgerService.transferFee(AddressTool.getAddress(form.getAddress()),AddressTool.getAddress(form.getToAddress()),value,form.getRemark(),TransactionFeeCalculator.MIN_PRECE_PRE_1024_BYTES);
  return result.toRpcClientResult();
}"
34976,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=RpcClientResult.class)}) public RpcClientResult aliasFee(@BeanParam() AccountAliasFeeForm form){
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  if (StringUtils.isBlank(form.getAlias())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  Result result=accountService.getAliasFee(form.getAddress(),form.getAlias());
  if (result.isSuccess()) {
    Map<String,Object> map=new HashMap<>();
    map.put(""String_Node_Str"",result.getData());
    result.setData(map);
  }
  return result.toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=RpcClientResult.class)}) public RpcClientResult aliasFee(@BeanParam() AccountAliasFeeForm form){
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  if (StringUtils.isBlank(form.getAlias())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  Result result=accountService.getAliasFee(form.getAddress(),form.getAlias());
  return result.toRpcClientResult();
}"
34977,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getWithdrawFee(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String depositTxHash) throws NulsException, IOException {
  AssertUtil.canNotEmpty(depositTxHash);
  if (!NulsDigestData.validHash(depositTxHash)) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  AssertUtil.canNotEmpty(address);
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST).toRpcClientResult();
  }
  CancelDepositTransaction tx=new CancelDepositTransaction();
  CancelDeposit cancelDeposit=new CancelDeposit();
  NulsDigestData hash=NulsDigestData.fromDigestHex(depositTxHash);
  DepositTransaction depositTransaction=(DepositTransaction)ledgerService.getTx(hash);
  if (null == depositTransaction) {
    return Result.getFailed(KernelErrorCode.DATA_NOT_FOUND).toRpcClientResult();
  }
  cancelDeposit.setAddress(AddressTool.getAddress(depositTxHash));
  cancelDeposit.setJoinTxHash(hash);
  tx.setTxData(cancelDeposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(cancelDeposit.getAddress(),depositTransaction.getTxData().getDeposit(),0));
  coinData.setTo(toList);
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < depositTransaction.getCoinData().getTo().size(); index++) {
    Coin coin=depositTransaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(depositTransaction.getTxData().getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(hash.serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR).toRpcClientResult();
  }
  coinData.setFrom(fromList);
  tx.setCoinData(coinData);
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  Na resultFee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Map<String,Object> valueMap=new HashMap<>();
  valueMap.put(""String_Node_Str"",resultFee.getValue());
  return Result.getSuccess().setData(valueMap).toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getWithdrawFee(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String depositTxHash) throws NulsException, IOException {
  AssertUtil.canNotEmpty(depositTxHash);
  if (!NulsDigestData.validHash(depositTxHash)) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  AssertUtil.canNotEmpty(address);
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST).toRpcClientResult();
  }
  CancelDepositTransaction tx=new CancelDepositTransaction();
  CancelDeposit cancelDeposit=new CancelDeposit();
  NulsDigestData hash=NulsDigestData.fromDigestHex(depositTxHash);
  DepositTransaction depositTransaction=(DepositTransaction)ledgerService.getTx(hash);
  if (null == depositTransaction) {
    return Result.getFailed(KernelErrorCode.DATA_NOT_FOUND).toRpcClientResult();
  }
  cancelDeposit.setAddress(AddressTool.getAddress(depositTxHash));
  cancelDeposit.setJoinTxHash(hash);
  tx.setTxData(cancelDeposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(cancelDeposit.getAddress(),depositTransaction.getTxData().getDeposit(),0));
  coinData.setTo(toList);
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < depositTransaction.getCoinData().getTo().size(); index++) {
    Coin coin=depositTransaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(depositTransaction.getTxData().getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(hash.serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR).toRpcClientResult();
  }
  coinData.setFrom(fromList);
  tx.setCoinData(coinData);
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  Na resultFee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  return Result.getSuccess().setData(resultFee).toRpcClientResult();
}"
34978,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getStopAgentFee(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String address) throws NulsException, IOException {
  AssertUtil.canNotEmpty(address,""String_Node_Str"");
  if (!AddressTool.validAddress(address)) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(address));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (a.getDelHeight() > 0) {
      continue;
    }
    if (Arrays.equals(a.getAgentAddress(),stopAgent.getAddress())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(PocConsensusErrorCode.AGENT_NOT_EXIST).toRpcClientResult();
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(KernelErrorCode.DATA_NOT_FOUND).toRpcClientResult();
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR).toRpcClientResult();
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Na resultFee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Map<String,Object> valueMap=new HashMap<>();
  valueMap.put(""String_Node_Str"",resultFee.getValue());
  return Result.getSuccess().setData(valueMap).toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getStopAgentFee(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String address) throws NulsException, IOException {
  AssertUtil.canNotEmpty(address,""String_Node_Str"");
  if (!AddressTool.validAddress(address)) {
    return Result.getFailed(KernelErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(address));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (a.getDelHeight() > 0) {
      continue;
    }
    if (Arrays.equals(a.getAgentAddress(),stopAgent.getAddress())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(PocConsensusErrorCode.AGENT_NOT_EXIST).toRpcClientResult();
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(KernelErrorCode.DATA_NOT_FOUND).toRpcClientResult();
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR).toRpcClientResult();
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Na resultFee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  return Result.getSuccess().setData(resultFee).toRpcClientResult();
}"
34979,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getCreateAgentFee(@BeanParam() GetCreateAgentFeeForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAgentAddress(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getCommissionRate(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getDeposit(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getPackingAddress(),""String_Node_Str"");
  if (StringUtils.isBlank(form.getRewardAddress())) {
    form.setRewardAddress(form.getAgentAddress());
  }
  CreateAgentTransaction tx=new CreateAgentTransaction();
  tx.setTime(TimeService.currentTimeMillis());
  Agent agent=new Agent();
  agent.setAgentAddress(AddressTool.getAddress(form.getAgentAddress()));
  agent.setPackingAddress(AddressTool.getAddress(form.getPackingAddress()));
  if (StringUtils.isBlank(form.getRewardAddress())) {
    agent.setRewardAddress(agent.getAgentAddress());
  }
 else {
    agent.setRewardAddress(AddressTool.getAddress(form.getRewardAddress()));
  }
  agent.setDeposit(Na.valueOf(form.getDeposit()));
  agent.setCommissionRate(form.getCommissionRate());
  tx.setTxData(agent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(agent.getAgentAddress(),agent.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(agent.getAgentAddress(),agent.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH,TransactionFeeCalculator.OTHER_PRECE_PRE_1024_BYTES);
  tx.getCoinData().setFrom(result.getCoinList());
  if (null != result.getChange()) {
    tx.getCoinData().getTo().add(result.getChange());
  }
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Map<String,Object> valueMap=new HashMap<>();
  valueMap.put(""String_Node_Str"",fee.getValue());
  return Result.getSuccess().setData(valueMap).toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getCreateAgentFee(@BeanParam() GetCreateAgentFeeForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAgentAddress(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getCommissionRate(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getDeposit(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getPackingAddress(),""String_Node_Str"");
  if (StringUtils.isBlank(form.getRewardAddress())) {
    form.setRewardAddress(form.getAgentAddress());
  }
  CreateAgentTransaction tx=new CreateAgentTransaction();
  tx.setTime(TimeService.currentTimeMillis());
  Agent agent=new Agent();
  agent.setAgentAddress(AddressTool.getAddress(form.getAgentAddress()));
  agent.setPackingAddress(AddressTool.getAddress(form.getPackingAddress()));
  if (StringUtils.isBlank(form.getRewardAddress())) {
    agent.setRewardAddress(agent.getAgentAddress());
  }
 else {
    agent.setRewardAddress(AddressTool.getAddress(form.getRewardAddress()));
  }
  agent.setDeposit(Na.valueOf(form.getDeposit()));
  agent.setCommissionRate(form.getCommissionRate());
  tx.setTxData(agent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(agent.getAgentAddress(),agent.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(agent.getAgentAddress(),agent.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH,TransactionFeeCalculator.OTHER_PRECE_PRE_1024_BYTES);
  tx.getCoinData().setFrom(result.getCoinList());
  if (null != result.getChange()) {
    tx.getCoinData().getTo().add(result.getChange());
  }
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  return Result.getSuccess().setData(fee).toRpcClientResult();
}"
34980,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getDepositFee(@BeanParam() GetDepositFeeForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getAgentHash(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getDeposit(),""String_Node_Str"");
  DepositTransaction tx=new DepositTransaction();
  Deposit deposit=new Deposit();
  deposit.setAddress(AddressTool.getAddress(form.getAddress()));
  deposit.setAgentHash(NulsDigestData.fromDigestHex(form.getAgentHash()));
  deposit.setDeposit(Na.valueOf(form.getDeposit()));
  tx.setTxData(deposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(deposit.getAddress(),deposit.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(deposit.getAddress(),deposit.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH,TransactionFeeCalculator.OTHER_PRECE_PRE_1024_BYTES);
  tx.getCoinData().setFrom(result.getCoinList());
  if (null != result.getChange()) {
    tx.getCoinData().getTo().add(result.getChange());
  }
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Map<String,Object> valueMap=new HashMap<>();
  valueMap.put(""String_Node_Str"",fee.getValue());
  return Result.getSuccess().setData(valueMap).toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public RpcClientResult getDepositFee(@BeanParam() GetDepositFeeForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getAgentHash(),""String_Node_Str"");
  AssertUtil.canNotEmpty(form.getDeposit(),""String_Node_Str"");
  DepositTransaction tx=new DepositTransaction();
  Deposit deposit=new Deposit();
  deposit.setAddress(AddressTool.getAddress(form.getAddress()));
  deposit.setAgentHash(NulsDigestData.fromDigestHex(form.getAgentHash()));
  deposit.setDeposit(Na.valueOf(form.getDeposit()));
  tx.setTxData(deposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(deposit.getAddress(),deposit.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(deposit.getAddress(),deposit.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH,TransactionFeeCalculator.OTHER_PRECE_PRE_1024_BYTES);
  tx.getCoinData().setFrom(result.getCoinList());
  if (null != result.getChange()) {
    tx.getCoinData().getTo().add(result.getChange());
  }
  Na fee=TransactionFeeCalculator.getMaxFee(tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  return Result.getSuccess().setData(fee).toRpcClientResult();
}"
34981,"public void refreshBalanceIfNesessary(){
  lock.lock();
  try {
    long bestHeight=NulsContext.getInstance().getBestHeight();
    if (balanceMap.isEmpty()) {
      return;
    }
    for (    String address : balanceMap.keySet()) {
      BalanceCacheEntity entity=balanceMap.get(address);
      if (entity == null) {
        balanceMap.remove(address);
        continue;
      }
      if (entity.getEarlistLockTime() == 0L && entity.getLowestLockHeigh() == 0L) {
        continue;
      }
      if (entity.getLowestLockHeigh() > 0L && entity.getLowestLockHeigh() <= bestHeight) {
        balanceMap.remove(address);
        continue;
      }
      if (entity.getEarlistLockTime() > 0L && entity.getEarlistLockTime() <= TimeService.currentTimeMillis()) {
        balanceMap.remove(address);
        continue;
      }
    }
  }
  finally {
    lock.unlock();
  }
}","public void refreshBalanceIfNesessary(){
  lock.lock();
  try {
    long bestHeight=NulsContext.getInstance().getBestHeight();
    Set<String> set=new HashSet<>(balanceMap.keySet());
    for (    String address : set) {
      BalanceCacheEntity entity=balanceMap.get(address);
      if (entity == null) {
        balanceMap.remove(address);
        continue;
      }
      if (entity.getEarlistLockTime() == 0L && entity.getLowestLockHeigh() == 0L) {
        continue;
      }
      if (entity.getLowestLockHeigh() > 0L && entity.getLowestLockHeigh() <= bestHeight) {
        balanceMap.remove(address);
        continue;
      }
      if (entity.getEarlistLockTime() > 0L && entity.getEarlistLockTime() <= TimeService.currentTimeMillis()) {
        balanceMap.remove(address);
        continue;
      }
    }
  }
  finally {
    lock.unlock();
  }
}"
34982,"/** 
 * 获取网络时间 todo 可优化为哪个地址延迟小使用哪个
 */
private long getWebTime(){
  NTPUDPClient client=new NTPUDPClient();
  try {
    client.open();
  }
 catch (  SocketException e) {
    Log.error(e);
    return 0L;
  }
  for (int i=0; i < urlList.size(); i++) {
    client.setDefaultTimeout(1000);
    try {
      InetAddress inetAddress=InetAddress.getByName(urlList.get(i));
      TimeInfo timeInfo=client.getTime(inetAddress);
      return timeInfo.getReturnTime();
    }
 catch (    Exception e) {
      continue;
    }
  }
  return 0L;
}","/** 
 * 获取网络时间 todo 可优化为哪个地址延迟小使用哪个
 */
private long getWebTime(){
  NTPUDPClient client=new NTPUDPClient();
  try {
    client.open();
  }
 catch (  SocketException e) {
    Log.error(e);
    return 0L;
  }
  for (int i=0; i < urlList.size(); i++) {
    client.setDefaultTimeout(1000);
    try {
      InetAddress inetAddress=InetAddress.getByName(urlList.get(i));
      TimeInfo timeInfo=client.getTime(inetAddress);
      return timeInfo.getMessage().getTransmitTimeStamp().getTime();
    }
 catch (    Exception e) {
      continue;
    }
  }
  return 0L;
}"
34983,"public static void main(String[] args){
  List<String> addressList=getAddressList();
  for (  String toAddress : addressList) {
    String address=""String_Node_Str"";
    long amount=2000200000000L;
    String password=""String_Node_Str"";
    String remark=""String_Node_Str"";
    String param=""String_Node_Str"" + address + ""String_Node_Str""+ toAddress+ ""String_Node_Str""+ password+ ""String_Node_Str""+ amount+ ""String_Node_Str""+ remark+ ""String_Node_Str"";
    String url=""String_Node_Str"";
    int successCount=0;
    for (int i=0; i < 1; i++) {
      String res=post(url,param,""String_Node_Str"");
      if (res.indexOf(""String_Node_Str"") != -1) {
        successCount++;
      }
      System.out.println(successCount + ""String_Node_Str"" + res);
    }
  }
}","public static void main(String[] args){
  List<String> addressList=getAddressList();
  for (  String toAddress : addressList) {
    String address=""String_Node_Str"";
    long amount=2018L;
    String password=""String_Node_Str"";
    String remark=""String_Node_Str"";
    String param=""String_Node_Str"" + address + ""String_Node_Str""+ toAddress+ ""String_Node_Str""+ password+ ""String_Node_Str""+ amount+ ""String_Node_Str""+ remark+ ""String_Node_Str"";
    String url=""String_Node_Str"";
    int successCount=0;
    for (int i=0; i < 10000; i++) {
      String res=post(url,param,""String_Node_Str"");
      if (res.indexOf(""String_Node_Str"") != -1) {
        successCount++;
      }
      System.out.println(successCount + ""String_Node_Str"" + res);
      try {
        Thread.sleep(1000L);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}"
34984,"public void refreshBalanceIfNesessary(){
  lock.lock();
  try {
    long bestHeight=NulsContext.getInstance().getBestHeight();
    for (    String address : balanceMap.keySet()) {
      BalanceCacheEntity entity=balanceMap.get(address);
      if (entity == null) {
        balanceMap.remove(address);
        continue;
      }
      if (entity.getEarlistLockTime() == 0L && entity.getLowestLockHeigh() == 0L) {
        continue;
      }
      if (entity.getLowestLockHeigh() > 0L && entity.getLowestLockHeigh() <= bestHeight) {
        balanceMap.remove(address);
        continue;
      }
      if (entity.getEarlistLockTime() > 0L && entity.getEarlistLockTime() <= TimeService.currentTimeMillis()) {
        balanceMap.remove(address);
        continue;
      }
    }
  }
  finally {
    lock.unlock();
  }
}","public void refreshBalanceIfNesessary(){
  lock.lock();
  try {
    long bestHeight=NulsContext.getInstance().getBestHeight();
    if (balanceMap.isEmpty()) {
      return;
    }
    for (    String address : balanceMap.keySet()) {
      BalanceCacheEntity entity=balanceMap.get(address);
      if (entity == null) {
        balanceMap.remove(address);
        continue;
      }
      if (entity.getEarlistLockTime() == 0L && entity.getLowestLockHeigh() == 0L) {
        continue;
      }
      if (entity.getLowestLockHeigh() > 0L && entity.getLowestLockHeigh() <= bestHeight) {
        balanceMap.remove(address);
        continue;
      }
      if (entity.getEarlistLockTime() > 0L && entity.getEarlistLockTime() <= TimeService.currentTimeMillis()) {
        balanceMap.remove(address);
        continue;
      }
    }
  }
  finally {
    lock.unlock();
  }
}"
34985,"/** 
 * 获取账户余额
 * @param address
 * @return
 */
public Result<Balance> getBalance(byte[] address){
  lock.lock();
  try {
    if (address == null || address.length != AddressTool.HASH_LENGTH) {
      return Result.getFailed(AccountLedgerErrorCode.PARAMETER_ERROR);
    }
    String addressKey=Base58.encode(address);
    BalanceCacheEntity entity=balanceMap.get(addressKey);
    Balance balance=null;
    if (entity == null || (entity.getEarlistLockTime() > 0L && entity.getEarlistLockTime() <= TimeService.currentTimeMillis())) {
      try {
        balance=calBalanceByAddress(address);
      }
 catch (      NulsException e) {
        Log.info(""String_Node_Str"" + Base58.encode(address) + ""String_Node_Str"");
      }
    }
 else {
      balance=entity.getBalance();
    }
    return Result.getSuccess().setData(balance);
  }
  finally {
    lock.unlock();
  }
}","/** 
 * 获取账户余额
 */
public Result<Balance> getBalance(byte[] address){
  lock.lock();
  try {
    if (address == null || address.length != AddressTool.HASH_LENGTH) {
      return Result.getFailed(AccountLedgerErrorCode.PARAMETER_ERROR);
    }
    String addressKey=Base58.encode(address);
    BalanceCacheEntity entity=balanceMap.get(addressKey);
    Balance balance=null;
    if (entity == null || (entity.getEarlistLockTime() > 0L && entity.getEarlistLockTime() <= TimeService.currentTimeMillis())) {
      try {
        balance=calBalanceByAddress(address);
      }
 catch (      NulsException e) {
        Log.info(""String_Node_Str"" + Base58.encode(address) + ""String_Node_Str"");
      }
    }
 else {
      balance=entity.getBalance();
    }
    return Result.getSuccess().setData(balance);
  }
  finally {
    lock.unlock();
  }
}"
34986,"/** 
 * 计算账户的余额，这个方法应该和获取余额方法互斥，避免并发导致数据不准确
 * @param address
 * @return
 * @throws NulsException
 */
public Balance calBalanceByAddress(byte[] address) throws NulsException {
  lock.lock();
  try {
    if (accountService.getAccount(address).isFailed()) {
      return null;
    }
    List<Coin> coinList=getCoinListByAddress(address);
    Collections.sort(coinList,CoinComparator.getInstance());
    BalanceCacheEntity balanceCacheEntity=new BalanceCacheEntity();
    Na usable=Na.ZERO;
    Na locked=Na.ZERO;
    for (    Coin coin : coinList) {
      if (coin.usable()) {
        usable=usable.add(coin.getNa());
      }
 else {
        locked=locked.add(coin.getNa());
        long lockTime=coin.getLockTime();
        if (lockTime <= 0L) {
          continue;
        }
        if (balanceCacheEntity.getLowestLockHeigh() == 0L || (lockTime < NulsConstant.BlOCKHEIGHT_TIME_DIVIDE && lockTime < balanceCacheEntity.getLowestLockHeigh())) {
          balanceCacheEntity.setLowestLockHeigh(lockTime);
          continue;
        }
        if (balanceCacheEntity.getEarlistLockTime() == 0L || (lockTime > NulsConstant.BlOCKHEIGHT_TIME_DIVIDE && lockTime < balanceCacheEntity.getEarlistLockTime())) {
          balanceCacheEntity.setEarlistLockTime(lockTime);
          continue;
        }
      }
    }
    Balance balance=new Balance();
    balance.setUsable(usable);
    balance.setLocked(locked);
    balance.setBalance(usable.add(locked));
    balanceCacheEntity.setBalance(balance);
    balanceMap.put(Base58.encode(address),balanceCacheEntity);
    return balance;
  }
  finally {
    lock.unlock();
  }
}","/** 
 * 计算账户的余额，这个方法应该和获取余额方法互斥，避免并发导致数据不准确
 */
public Balance calBalanceByAddress(byte[] address) throws NulsException {
  lock.lock();
  try {
    if (accountService.getAccount(address).isFailed()) {
      return null;
    }
    List<Coin> coinList=getCoinListByAddress(address);
    Collections.sort(coinList,CoinComparator.getInstance());
    BalanceCacheEntity balanceCacheEntity=new BalanceCacheEntity();
    Na usable=Na.ZERO;
    Na locked=Na.ZERO;
    for (    Coin coin : coinList) {
      if (coin.usable()) {
        usable=usable.add(coin.getNa());
      }
 else {
        locked=locked.add(coin.getNa());
        long lockTime=coin.getLockTime();
        if (lockTime <= 0L) {
          continue;
        }
        if (balanceCacheEntity.getLowestLockHeigh() == 0L || (lockTime < NulsConstant.BlOCKHEIGHT_TIME_DIVIDE && lockTime < balanceCacheEntity.getLowestLockHeigh())) {
          balanceCacheEntity.setLowestLockHeigh(lockTime);
          continue;
        }
        if (balanceCacheEntity.getEarlistLockTime() == 0L || (lockTime > NulsConstant.BlOCKHEIGHT_TIME_DIVIDE && lockTime < balanceCacheEntity.getEarlistLockTime())) {
          balanceCacheEntity.setEarlistLockTime(lockTime);
          continue;
        }
      }
    }
    Balance balance=new Balance();
    balance.setUsable(usable);
    balance.setLocked(locked);
    balance.setBalance(usable.add(locked));
    balanceCacheEntity.setBalance(balance);
    balanceMap.put(Base58.encode(address),balanceCacheEntity);
    return balance;
  }
  finally {
    lock.unlock();
  }
}"
34987,"@Override public Result validPassword(Account account,String password){
  if (null == account) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Result result=new Result();
  result.setSuccess(account.validatePassword(password));
  return result;
}","@Override public Result validPassword(Account account,String password){
  if (null == account) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  boolean rs=account.validatePassword(password);
  if (!rs) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  return Result.getSuccess();
}"
34988,"/** 
 * 根据密码加密账户(给账户设置密码) Password-encrypted account (set password for account)
 */
public void encrypt(String password,boolean isForce) throws NulsException {
  if (this.isEncrypted()) {
    if (isForce) {
      if (isLocked()) {
        throw new NulsException(AccountErrorCode.ACCOUNT_IS_ALREADY_ENCRYPTED_AND_LOCKED);
      }
    }
 else {
      throw new NulsException(AccountErrorCode.ACCOUNT_IS_ALREADY_ENCRYPTED);
    }
  }
 else {
    ECKey eckey=this.getEcKey();
    byte[] privKeyBytes=eckey.getPrivKeyBytes();
    EncryptedData encryptedPrivateKey=AESEncrypt.encrypt(privKeyBytes,EncryptedData.DEFAULT_IV,new KeyParameter(Sha256Hash.hash(password.getBytes())));
    eckey.setEncryptedPrivateKey(encryptedPrivateKey);
    ECKey result=ECKey.fromEncrypted(encryptedPrivateKey,getPubKey());
    this.setPriKey(new byte[0]);
    this.setEcKey(result);
    this.setEncryptedPriKey(encryptedPrivateKey.getEncryptedBytes());
  }
}","/** 
 * 根据密码加密账户(给账户设置密码) Password-encrypted account (set password for account)
 */
public void encrypt(String password,boolean isForce) throws NulsException {
  if (this.isEncrypted()) {
    if (isForce) {
      if (isLocked()) {
        throw new NulsException(AccountErrorCode.ACCOUNT_IS_ALREADY_ENCRYPTED_AND_LOCKED);
      }
    }
 else {
      throw new NulsException(AccountErrorCode.ACCOUNT_IS_ALREADY_ENCRYPTED);
    }
  }
  ECKey eckey=this.getEcKey();
  byte[] privKeyBytes=eckey.getPrivKeyBytes();
  EncryptedData encryptedPrivateKey=AESEncrypt.encrypt(privKeyBytes,EncryptedData.DEFAULT_IV,new KeyParameter(Sha256Hash.hash(password.getBytes())));
  eckey.setEncryptedPrivateKey(encryptedPrivateKey);
  ECKey result=ECKey.fromEncrypted(encryptedPrivateKey,getPubKey());
  this.setPriKey(new byte[0]);
  this.setEcKey(result);
  this.setEncryptedPriKey(encryptedPrivateKey.getEncryptedBytes());
}"
34989,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public RpcClientResult validationPassword(@PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  if (StringUtils.isBlank(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  Result<Account> rs=accountService.getAccount(address);
  if (rs.isFailed()) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST).toRpcClientResult();
  }
  Account account=rs.getData();
  boolean res=account.validatePassword(form.getPassword());
  Result result=new Result();
  result.setSuccess(res);
  return result.toRpcClientResult();
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public RpcClientResult validationPassword(@PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR).toRpcClientResult();
  }
  if (StringUtils.isBlank(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  Result<Account> rs=accountService.getAccount(address);
  if (rs.isFailed()) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST).toRpcClientResult();
  }
  Account account=rs.getData();
  if (account.validatePassword(form.getPassword())) {
    return Result.getSuccess().toRpcClientResult();
  }
 else {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG).toRpcClientResult();
  }
}"
34990,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=TransactionDto.class)}) public RpcClientResult getTxByHash(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String hash){
  if (StringUtils.isBlank(hash)) {
    return Result.getFailed(LedgerErrorCode.NULL_PARAMETER).toRpcClientResult();
  }
  if (!NulsDigestData.validHash(hash)) {
    return Result.getFailed(LedgerErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  Result result=null;
  try {
    Transaction tx=ledgerService.getTx(NulsDigestData.fromDigestHex(hash));
    if (tx == null) {
      result=Result.getFailed(LedgerErrorCode.DATA_NOT_FOUND);
    }
 else {
      tx.setStatus(TxStatusEnum.CONFIRMED);
      TransactionDto txDto=null;
      CoinData coinData=tx.getCoinData();
      if (coinData != null) {
        List<Coin> froms=coinData.getFrom();
        if (froms != null && froms.size() > 0) {
          byte[] fromHash, owner;
          int fromIndex;
          NulsDigestData fromHashObj;
          Transaction fromTx;
          Coin fromUtxo;
          for (          Coin from : froms) {
            owner=from.getOwner();
            fromHash=LedgerUtil.getTxHashBytes(owner);
            fromIndex=LedgerUtil.getIndex(owner);
            fromHashObj=new NulsDigestData();
            fromHashObj.parse(fromHash);
            fromTx=ledgerService.getTx(fromHashObj);
            fromUtxo=fromTx.getCoinData().getTo().get(fromIndex);
            from.setFrom(fromUtxo);
          }
        }
        txDto=new TransactionDto(tx);
        List<OutputDto> outputDtoList=new ArrayList<>();
        List<Coin> tos=coinData.getTo();
        if (tos != null && tos.size() > 0) {
          byte[] txHashBytes=tx.getHash().serialize();
          String txHash=hash;
          OutputDto outputDto=null;
          Coin to, temp;
          long bestHeight=NulsContext.getInstance().getBestHeight();
          long currentTime=TimeService.currentTimeMillis();
          long lockTime;
          for (int i=0, length=tos.size(); i < length; i++) {
            to=tos.get(i);
            outputDto=new OutputDto(to);
            outputDto.setTxHash(txHash);
            outputDto.setIndex(i);
            temp=utxoLedgerUtxoStorageService.getUtxo(Arrays.concatenate(txHashBytes,new VarInt(i).encode()));
            if (temp == null) {
              outputDto.setStatus(3);
            }
 else {
              lockTime=temp.getLockTime();
              if (lockTime > NulsConstant.BlOCKHEIGHT_TIME_DIVIDE) {
                if (lockTime > currentTime) {
                  outputDto.setStatus(2);
                }
 else {
                  outputDto.setStatus(0);
                }
              }
 else {
                if (lockTime > bestHeight) {
                  outputDto.setStatus(1);
                }
 else {
                  outputDto.setStatus(0);
                }
              }
            }
            outputDtoList.add(outputDto);
          }
        }
        txDto.setOutputs(outputDtoList);
        calTransactionValue(txDto);
      }
      result=Result.getSuccess();
      result.setData(txDto);
    }
  }
 catch (  NulsRuntimeException re) {
    Log.error(re);
    result=new Result(false,re.getCode(),re.getMessage());
  }
catch (  Exception e) {
    Log.error(e);
    result=Result.getFailed(LedgerErrorCode.SYS_UNKOWN_EXCEPTION);
  }
  return result.toRpcClientResult();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=TransactionDto.class)}) public RpcClientResult getTxByHash(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String hash){
  if (StringUtils.isBlank(hash)) {
    return Result.getFailed(LedgerErrorCode.NULL_PARAMETER).toRpcClientResult();
  }
  if (!NulsDigestData.validHash(hash)) {
    return Result.getFailed(LedgerErrorCode.PARAMETER_ERROR).toRpcClientResult();
  }
  Result result=null;
  try {
    Transaction tx=ledgerService.getTx(NulsDigestData.fromDigestHex(hash));
    if (tx == null) {
      result=Result.getFailed(LedgerErrorCode.DATA_NOT_FOUND);
    }
 else {
      tx.setStatus(TxStatusEnum.CONFIRMED);
      TransactionDto txDto=null;
      CoinData coinData=tx.getCoinData();
      if (coinData != null) {
        List<Coin> froms=coinData.getFrom();
        if (froms != null && froms.size() > 0) {
          byte[] fromHash, owner;
          int fromIndex;
          NulsDigestData fromHashObj;
          Transaction fromTx;
          Coin fromUtxo;
          for (          Coin from : froms) {
            owner=from.getOwner();
            fromHash=LedgerUtil.getTxHashBytes(owner);
            fromIndex=LedgerUtil.getIndex(owner);
            fromHashObj=new NulsDigestData();
            fromHashObj.parse(fromHash);
            fromTx=ledgerService.getTx(fromHashObj);
            fromUtxo=fromTx.getCoinData().getTo().get(fromIndex);
            from.setFrom(fromUtxo);
          }
        }
        txDto=new TransactionDto(tx);
        List<OutputDto> outputDtoList=new ArrayList<>();
        List<Coin> tos=coinData.getTo();
        if (tos != null && tos.size() > 0) {
          byte[] txHashBytes=tx.getHash().serialize();
          String txHash=hash;
          OutputDto outputDto=null;
          Coin to, temp;
          long bestHeight=NulsContext.getInstance().getBestHeight();
          long currentTime=TimeService.currentTimeMillis();
          long lockTime;
          for (int i=0, length=tos.size(); i < length; i++) {
            to=tos.get(i);
            outputDto=new OutputDto(to);
            outputDto.setTxHash(txHash);
            outputDto.setIndex(i);
            temp=utxoLedgerUtxoStorageService.getUtxo(Arrays.concatenate(txHashBytes,new VarInt(i).encode()));
            if (temp == null) {
              outputDto.setStatus(3);
            }
 else {
              lockTime=temp.getLockTime();
              if (lockTime < 0) {
                outputDto.setStatus(2);
              }
 else               if (lockTime == 0) {
                outputDto.setStatus(0);
              }
 else               if (lockTime > NulsConstant.BlOCKHEIGHT_TIME_DIVIDE) {
                if (lockTime > currentTime) {
                  outputDto.setStatus(1);
                }
 else {
                  outputDto.setStatus(0);
                }
              }
 else {
                if (lockTime > bestHeight) {
                  outputDto.setStatus(1);
                }
 else {
                  outputDto.setStatus(0);
                }
              }
            }
            outputDtoList.add(outputDto);
          }
        }
        txDto.setOutputs(outputDtoList);
        calTransactionValue(txDto);
      }
      result=Result.getSuccess();
      result.setData(txDto);
    }
  }
 catch (  NulsRuntimeException re) {
    Log.error(re);
    result=new Result(false,re.getCode(),re.getMessage());
  }
catch (  Exception e) {
    Log.error(e);
    result=Result.getFailed(LedgerErrorCode.SYS_UNKOWN_EXCEPTION);
  }
  return result.toRpcClientResult();
}"
34991,"@Override public CommandResult execute(String[] args){
  String password=CommandHelper.getPwdOptional();
  int count=1;
  if (args.length == 2) {
    count=Integer.parseInt(args[1]);
  }
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",password);
  parameters.put(""String_Node_Str"",count);
  RpcClientResult result=restFul.post(""String_Node_Str"",parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  String password=CommandHelper.getPwdOptional();
  if (StringUtils.isNotBlank(password)) {
    CommandHelper.confirmPwd(password);
  }
  int count=1;
  if (args.length == 2) {
    count=Integer.parseInt(args[1]);
  }
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",password);
  parameters.put(""String_Node_Str"",count);
  RpcClientResult result=restFul.post(""String_Node_Str"",parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  return CommandResult.getResult(result);
}"
34992,"@Override public boolean argsValidate(String[] args){
  boolean result;
  do {
    int length=args.length;
    if (length != 4 && length != 5) {
      result=false;
      break;
    }
    if (!CommandHelper.checkArgsIsNull(args)) {
      result=false;
      break;
    }
    if (!Address.validAddress(args[1]) || !Address.validAddress(args[2])) {
      return false;
    }
    if (!StringUtils.isNumberGtZero(args[3])) {
      result=false;
      break;
    }
    TransferForm form=getTransferForm(args);
    paramsData.set(form);
    result=StringUtils.isNotBlank(form.getToAddress());
    if (!result) {
      break;
    }
    result=form.getAmount() > 0;
  }
 while (false);
  return result;
}","@Override public boolean argsValidate(String[] args){
  boolean result;
  do {
    int length=args.length;
    if (length != 4 && length != 5) {
      result=false;
      break;
    }
    if (!CommandHelper.checkArgsIsNull(args)) {
      result=false;
      break;
    }
    if (!Address.validAddress(args[1]) || !Address.validAddress(args[2])) {
      return false;
    }
    if (!StringUtils.isNuls(args[3])) {
      result=false;
      break;
    }
    TransferForm form=getTransferForm(args);
    paramsData.set(form);
    result=StringUtils.isNotBlank(form.getToAddress());
    if (!result) {
      break;
    }
    result=form.getAmount() > 0;
  }
 while (false);
  return result;
}"
34993,"@Override public ValidateResult validate(AliasTransaction tx){
  Alias alias=tx.getTxData();
  if (aliasService.isAliasExist(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  List<AliasPo> list=aliasStorageService.getAliasList().getData();
  for (  AliasPo aliasPo : list) {
    if (Base58.encode(aliasPo.getAddress()).equals(Base58.encode(alias.getAddress()))) {
      return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
    }
  }
  if (!Address.validAddress(alias.getAddress())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validAlias(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_ERROR);
  }
  AliasPo aliasPo=aliasStorageService.getAlias(alias.getAlias()).getData();
  if (aliasPo != null) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (tx.isFreeOfFee()) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  CoinData coinData=tx.getCoinData();
  if (null == coinData) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(tx.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(tx.getTxData().getAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult validate(AliasTransaction tx){
  Alias alias=tx.getTxData();
  if (aliasService.isAliasExist(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  List<AliasPo> list=aliasStorageService.getAliasList().getData();
  for (  AliasPo aliasPo : list) {
    if (Base58.encode(aliasPo.getAddress()).equals(Base58.encode(alias.getAddress()))) {
      return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
    }
  }
  if (!Address.validAddress(alias.getAddress())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validAlias(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_FORMAT_WRONG);
  }
  AliasPo aliasPo=aliasStorageService.getAlias(alias.getAlias()).getData();
  if (aliasPo != null) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (tx.isFreeOfFee()) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  CoinData coinData=tx.getCoinData();
  if (null == coinData) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(tx.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(tx.getTxData().getAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  return ValidateResult.getSuccessResult();
}"
34994,"@Override public Result<Integer> saveConfirmedTransactionList(List<Transaction> txs){
  List<Transaction> savedTxList=new ArrayList<>();
  Result result;
  for (int i=0; i < txs.size(); i++) {
    result=saveConfirmedTransaction(txs.get(i));
    if (result.isSuccess() && (int)result.getData() == 1) {
      savedTxList.add(txs.get(i));
    }
 else {
      rollbackTransaction(savedTxList,false);
      return result;
    }
  }
  balanceManager.refreshBalance();
  return Result.getSuccess().setData(savedTxList.size());
}","@Override public Result<Integer> saveConfirmedTransactionList(List<Transaction> txs){
  List<Transaction> savedTxList=new ArrayList<>();
  Result result;
  for (int i=0; i < txs.size(); i++) {
    result=saveConfirmedTransaction(txs.get(i));
    if (result.isSuccess() && result.getData() != null && (int)result.getData() == 1) {
      savedTxList.add(txs.get(i));
    }
 else     if (result.isSuccess() && result.getData() != null && (int)result.getData() == 0) {
      continue;
    }
 else {
      rollbackTransaction(savedTxList,false);
      return result;
    }
  }
  balanceManager.refreshBalance();
  return Result.getSuccess().setData(savedTxList.size());
}"
34995,"@Override public boolean argsValidate(String[] args){
  int length=args.length;
  if (length < 7 || length > 8) {
    return false;
  }
  if (!CommandHelper.checkArgsIsNull(args)) {
    return false;
  }
  if (!StringUtils.validAddressSimple(args[1]) || !StringUtils.validAddressSimple(args[2]) || StringUtils.isBlank(args[3])|| StringUtils.isBlank(args[4])|| StringUtils.isBlank(args[5])|| StringUtils.isBlank(args[6])) {
    return false;
  }
  if (!StringUtils.isNumberGtZero(args[3])) {
    return false;
  }
  if (!StringUtils.isNumberGtZero(args[4])) {
    return false;
  }
  if (length == 8 && !StringUtils.validAddressSimple(args[7])) {
    return false;
  }
  return true;
}","@Override public boolean argsValidate(String[] args){
  int length=args.length;
  if (length < 5 || length > 6) {
    return false;
  }
  if (!CommandHelper.checkArgsIsNull(args)) {
    return false;
  }
  if (!StringUtils.validAddressSimple(args[1]) || !StringUtils.validAddressSimple(args[2]) || StringUtils.isBlank(args[3])|| StringUtils.isBlank(args[4])) {
    return false;
  }
  if (!StringUtils.isNumberGtZero(args[3])) {
    return false;
  }
  if (!StringUtils.isNumberGtZero(args[4])) {
    return false;
  }
  if (length == 6 && !StringUtils.validAddressSimple(args[5])) {
    return false;
  }
  return true;
}"
34996,"@Override public CommandResult execute(String[] args){
  String address=args[1];
  RpcClientResult res=CommandHelper.getPassword(address,restFul);
  if (res.isFailed() && !res.getCode().equals(KernelErrorCode.SUCCESS.getCode())) {
    return CommandResult.getFailed(res.getMsg());
  }
  String password=(String)res.getData();
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",address);
  parameters.put(""String_Node_Str"",args[2]);
  parameters.put(""String_Node_Str"",Double.valueOf(args[3]));
  Long deposit=null;
  try {
    Na na=Na.parseNuls(args[4]);
    deposit=na.getValue();
  }
 catch (  Exception e) {
    return CommandResult.getFailed(""String_Node_Str"");
  }
  parameters.put(""String_Node_Str"",deposit);
  parameters.put(""String_Node_Str"",args[5]);
  parameters.put(""String_Node_Str"",args[6]);
  parameters.put(""String_Node_Str"",password);
  if (args.length == 8) {
    parameters.put(""String_Node_Str"",args[7]);
  }
  RpcClientResult result=restFul.post(""String_Node_Str"",parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  String address=args[1];
  RpcClientResult res=CommandHelper.getPassword(address,restFul);
  if (res.isFailed() && !res.getCode().equals(KernelErrorCode.SUCCESS.getCode())) {
    return CommandResult.getFailed(res.getMsg());
  }
  String password=(String)res.getData();
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",address);
  parameters.put(""String_Node_Str"",args[2]);
  parameters.put(""String_Node_Str"",Double.valueOf(args[3]));
  Long deposit=null;
  try {
    Na na=Na.parseNuls(args[4]);
    deposit=na.getValue();
  }
 catch (  Exception e) {
    return CommandResult.getFailed(""String_Node_Str"");
  }
  parameters.put(""String_Node_Str"",deposit);
  parameters.put(""String_Node_Str"",password);
  if (args.length == 6) {
    parameters.put(""String_Node_Str"",args[5]);
  }
  RpcClientResult result=restFul.post(""String_Node_Str"",parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  return CommandResult.getResult(result);
}"
34997,"/** 
 * 别名规则:只允许使用小写字母、数字、下划线（下划线不能在两端）1~30字节
 * @param alias
 * @return
 */
public static boolean validAlias(String alias){
  try {
    if (isBlank(alias)) {
      return false;
    }
    alias=alias.trim();
    byte[] aliasBytes=alias.getBytes(""String_Node_Str"");
    if (aliasBytes.length < 1 || aliasBytes.length > 30) {
      return false;
    }
    if (alias.matches(""String_Node_Str"")) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  UnsupportedEncodingException e) {
    return false;
  }
}","/** 
 * 别名规则:只允许使用小写字母、数字、下划线（下划线不能在两端）1~20字节
 * @param alias
 * @return
 */
public static boolean validAlias(String alias){
  try {
    if (isBlank(alias)) {
      return false;
    }
    alias=alias.trim();
    byte[] aliasBytes=alias.getBytes(""String_Node_Str"");
    if (aliasBytes.length < 1 || aliasBytes.length > 20) {
      return false;
    }
    if (alias.matches(""String_Node_Str"")) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  UnsupportedEncodingException e) {
    return false;
  }
}"
34998,"@Override public Result transfer(byte[] from,byte[] to,Na values,String password,String remark){
  try {
    Result<Account> accountResult=accountService.getAccount(from);
    if (accountResult.isFailed()) {
      return accountResult;
    }
    Account account=accountResult.getData();
    if (accountService.isEncrypted(account).isSuccess() && account.isLocked()) {
      AssertUtil.canNotEmpty(password,""String_Node_Str"");
      Result passwordResult=accountService.validPassword(account,password);
      if (passwordResult.isFailed()) {
        return passwordResult;
      }
    }
    TransferTransaction tx=new TransferTransaction();
    try {
      tx.setRemark(remark.getBytes(NulsConfig.DEFAULT_ENCODING));
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    tx.setTime(TimeService.currentTimeMillis());
    CoinData coinData=new CoinData();
    Coin toCoin=new Coin(to,values);
    coinData.getTo().add(toCoin);
    CoinDataResult coinDataResult=getCoinData(from,values,tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
    if (!coinDataResult.isEnough()) {
      return Result.getFailed(LedgerErrorCode.BALANCE_NOT_ENOUGH);
    }
    coinData.setFrom(coinDataResult.getCoinList());
    if (coinDataResult.getChange() != null) {
      coinData.getTo().add(coinDataResult.getChange());
    }
    tx.setCoinData(coinData);
    tx.setHash(NulsDigestData.calcDigestData(tx.serializeForHash()));
    P2PKHScriptSig sig=new P2PKHScriptSig();
    sig.setPublicKey(account.getPubKey());
    sig.setSignData(accountService.signData(tx.getHash().serialize(),account,password));
    tx.setScriptSig(sig.serialize());
    Result saveResult=verifyAndSaveUnconfirmedTransaction(tx);
    if (saveResult.isFailed()) {
      return saveResult;
    }
    Result sendResult=transactionService.broadcastTx(tx);
    if (sendResult.isFailed()) {
      this.rollbackTransaction(tx);
      return sendResult;
    }
    return Result.getSuccess().setData(tx.getHash().getDigestHex());
  }
 catch (  IOException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(e.getErrorCode());
  }
}","@Override public Result transfer(byte[] from,byte[] to,Na values,String password,String remark){
  try {
    Result<Account> accountResult=accountService.getAccount(from);
    if (accountResult.isFailed()) {
      return accountResult;
    }
    Account account=accountResult.getData();
    if (accountService.isEncrypted(account).isSuccess() && account.isLocked()) {
      AssertUtil.canNotEmpty(password,""String_Node_Str"");
      Result passwordResult=accountService.validPassword(account,password);
      if (passwordResult.isFailed()) {
        return passwordResult;
      }
    }
    TransferTransaction tx=new TransferTransaction();
    if (StringUtils.isNotBlank(remark)) {
      try {
        tx.setRemark(remark.getBytes(NulsConfig.DEFAULT_ENCODING));
      }
 catch (      UnsupportedEncodingException e) {
        Log.error(e);
      }
    }
    tx.setTime(TimeService.currentTimeMillis());
    CoinData coinData=new CoinData();
    Coin toCoin=new Coin(to,values);
    coinData.getTo().add(toCoin);
    CoinDataResult coinDataResult=getCoinData(from,values,tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
    if (!coinDataResult.isEnough()) {
      return Result.getFailed(LedgerErrorCode.BALANCE_NOT_ENOUGH);
    }
    coinData.setFrom(coinDataResult.getCoinList());
    if (coinDataResult.getChange() != null) {
      coinData.getTo().add(coinDataResult.getChange());
    }
    tx.setCoinData(coinData);
    tx.setHash(NulsDigestData.calcDigestData(tx.serializeForHash()));
    P2PKHScriptSig sig=new P2PKHScriptSig();
    sig.setPublicKey(account.getPubKey());
    sig.setSignData(accountService.signData(tx.getHash().serialize(),account,password));
    tx.setScriptSig(sig.serialize());
    Result saveResult=verifyAndSaveUnconfirmedTransaction(tx);
    if (saveResult.isFailed()) {
      return saveResult;
    }
    Result sendResult=transactionService.broadcastTx(tx);
    if (sendResult.isFailed()) {
      this.rollbackTransaction(tx);
      return sendResult;
    }
    return Result.getSuccess().setData(tx.getHash().getDigestHex());
  }
 catch (  IOException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(e.getErrorCode());
  }
}"
34999,"@Override public ValidateResult validate(StopAgentTransaction data) throws NulsException {
  AgentPo agentPo=agentStorageService.get(data.getTxData().getCreateTxHash());
  if (null == agentPo || agentPo.getDelHeight() > 0) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(data.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(agentPo.getAgentAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  if (data.getCoinData().getTo() == null || data.getCoinData().getTo().isEmpty()) {
    return ValidateResult.getFailedResult(this.getClass().getName(),KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  List<DepositPo> allDepositList=depositStorageService.getList();
  Map<NulsDigestData,DepositPo> depositMap=new HashMap<>();
  Na totalNa=agentPo.getDeposit();
  DepositPo ownDeposit=new DepositPo();
  ownDeposit.setDeposit(agentPo.getDeposit());
  ownDeposit.setAddress(agentPo.getAgentAddress());
  depositMap.put(data.getTxData().getCreateTxHash(),ownDeposit);
  for (  DepositPo deposit : allDepositList) {
    if (deposit.getDelHeight() > -1L && (data.getBlockHeight() == -1L || deposit.getDelHeight() < data.getBlockHeight())) {
      continue;
    }
    if (!deposit.getAgentHash().equals(agentPo.getHash())) {
      continue;
    }
    depositMap.put(deposit.getTxHash(),deposit);
    totalNa=totalNa.add(deposit.getDeposit());
  }
  Na fromTotal=Na.ZERO;
  Map<String,Na> verifyToMap=new HashMap<>();
  for (  Coin coin : data.getCoinData().getFrom()) {
    NulsDigestData txHash=new NulsDigestData();
    txHash.parse(coin.getOwner());
    DepositPo deposit=depositMap.remove(txHash);
    if (deposit == null) {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
    if (deposit.getAgentHash() == null && !coin.getNa().equals(agentPo.getDeposit())) {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
 else     if (!deposit.getDeposit().equals(coin.getNa())) {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
    fromTotal=fromTotal.add(coin.getNa());
    if (deposit.getAgentHash() == null) {
      continue;
    }
    String address=Base58.encode(deposit.getAddress());
    Na na=verifyToMap.get(address);
    if (null == na) {
      na=deposit.getDeposit();
    }
 else {
      na=na.add(deposit.getDeposit());
    }
    verifyToMap.put(address,na);
  }
  if (!depositMap.isEmpty()) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  if (!totalNa.equals(fromTotal)) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  Na ownToCoin=ownDeposit.getDeposit().subtract(data.getFee());
  long ownLockTime=0L;
  for (  Coin coin : data.getCoinData().getTo()) {
    String address=Base58.encode(coin.getOwner());
    Na na=verifyToMap.get(address);
    if (null == na) {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
    if (na.equals(coin.getNa())) {
      verifyToMap.remove(address);
      continue;
    }
    if (ownToCoin != null && Arrays.equals(coin.getOwner(),ownDeposit.getAddress()) && coin.getNa().equals(ownToCoin)) {
      ownToCoin=null;
      ownLockTime=coin.getLockTime();
      continue;
    }
 else {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
  }
  if (ownLockTime < (data.getTime() + PocConsensusConstant.STOP_AGENT_LOCK_TIME)) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  if (!verifyToMap.isEmpty()) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult validate(StopAgentTransaction data) throws NulsException {
  AgentPo agentPo=agentStorageService.get(data.getTxData().getCreateTxHash());
  if (null == agentPo || agentPo.getDelHeight() > 0) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(data.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(agentPo.getAgentAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  if (data.getCoinData().getTo() == null || data.getCoinData().getTo().isEmpty()) {
    return ValidateResult.getFailedResult(this.getClass().getName(),KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  List<DepositPo> allDepositList=depositStorageService.getList();
  Map<NulsDigestData,DepositPo> depositMap=new HashMap<>();
  Na totalNa=agentPo.getDeposit();
  DepositPo ownDeposit=new DepositPo();
  ownDeposit.setDeposit(agentPo.getDeposit());
  ownDeposit.setAddress(agentPo.getAgentAddress());
  depositMap.put(data.getTxData().getCreateTxHash(),ownDeposit);
  for (  DepositPo deposit : allDepositList) {
    if (deposit.getDelHeight() > -1L && (data.getBlockHeight() == -1L || deposit.getDelHeight() < data.getBlockHeight())) {
      continue;
    }
    if (!deposit.getAgentHash().equals(agentPo.getHash())) {
      continue;
    }
    depositMap.put(deposit.getTxHash(),deposit);
    totalNa=totalNa.add(deposit.getDeposit());
  }
  Na fromTotal=Na.ZERO;
  Map<String,Na> verifyToMap=new HashMap<>();
  for (  Coin coin : data.getCoinData().getFrom()) {
    NulsDigestData txHash=new NulsDigestData();
    txHash.parse(coin.getOwner());
    DepositPo deposit=depositMap.remove(txHash);
    if (deposit == null) {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
    if (deposit.getAgentHash() == null && !coin.getNa().equals(agentPo.getDeposit())) {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
 else     if (!deposit.getDeposit().equals(coin.getNa())) {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
    fromTotal=fromTotal.add(coin.getNa());
    if (deposit.getAgentHash() == null) {
      continue;
    }
    String address=Base58.encode(deposit.getAddress());
    Na na=verifyToMap.get(address);
    if (null == na) {
      na=deposit.getDeposit();
    }
 else {
      na=na.add(deposit.getDeposit());
    }
    verifyToMap.put(address,na);
  }
  if (!depositMap.isEmpty()) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  if (!totalNa.equals(fromTotal)) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  Na ownToCoin=ownDeposit.getDeposit().subtract(data.getFee());
  long ownLockTime=0L;
  for (  Coin coin : data.getCoinData().getTo()) {
    String address=Base58.encode(coin.getOwner());
    Na na=verifyToMap.get(address);
    if (null != na && na.equals(coin.getNa())) {
      verifyToMap.remove(address);
      continue;
    }
    if (ownToCoin != null && Arrays.equals(coin.getOwner(),ownDeposit.getAddress()) && coin.getNa().equals(ownToCoin)) {
      ownToCoin=null;
      ownLockTime=coin.getLockTime();
      continue;
    }
 else {
      return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    }
  }
  if (ownLockTime < (data.getTime() + PocConsensusConstant.STOP_AGENT_LOCK_TIME)) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  if (!verifyToMap.isEmpty()) {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  return ValidateResult.getSuccessResult();
}"
35000,"@Override public CommandResult execute(String[] args){
  String address=args[1];
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,null);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  String address=args[1];
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,null);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)result.getData();
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}"
