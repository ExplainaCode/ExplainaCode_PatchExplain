record_number,buggy_code,fixed_code
77001,"/** 
 * Returns the tool bar's current UI.
 * @see #setUI
 */
public ToolBarUI getUI(){
  return (ToolBarUI)ui;
}","/** 
 * Returns the tool bar's current UI.
 * @return the tool bar's current UI.
 * @see #setUI
 */
public ToolBarUI getUI(){
  return (ToolBarUI)ui;
}"
77002,"public void inject(@NotNull WSWebServiceContext context,@NotNull Object instance){
  InjectionPlan.buildInjectionPlan(instance.getClass(),WebServiceContext.class,false).inject(instance,context);
}","public void inject(@NotNull WSWebServiceContext context,@NotNull Object instance){
  InjectionPlan.<Object,WebServiceContext>buildInjectionPlan(instance.getClass(),WebServiceContext.class,false).inject(instance,context);
}"
77003,"/** 
 * Fetch the default value for the attribute. If there is no default value (such as for composite attributes), null will be returned.
 */
public String getDefaultValue(){
  return defaultValue;
}","/** 
 * Fetch the default value for the attribute. If there is no default value (such as for composite attributes), null will be returned.
 * @return default value for the attribute
 */
public String getDefaultValue(){
  return defaultValue;
}"
77004,"/** 
 * Indicates if the attribute should be inherited from the parent or not.
 */
public boolean isInherited(){
  return inherited;
}","/** 
 * Indicates if the attribute should be inherited from the parent or not.
 * @return true if the attribute should be inherited from the parent
 */
public boolean isInherited(){
  return inherited;
}"
77005,"/** 
 * Return the set of all possible CSS attribute keys.
 */
public static Attribute[] getAllAttributeKeys(){
  Attribute[] keys=new Attribute[Attribute.allAttributes.length];
  System.arraycopy(Attribute.allAttributes,0,keys,0,Attribute.allAttributes.length);
  return keys;
}","/** 
 * Return the set of all possible CSS attribute keys.
 * @return the set of all possible CSS attribute keys
 */
public static Attribute[] getAllAttributeKeys(){
  Attribute[] keys=new Attribute[Attribute.allAttributes.length];
  System.arraycopy(Attribute.allAttributes,0,keys,0,Attribute.allAttributes.length);
  return keys;
}"
77006,"/** 
 * This method is responsible for submitting the form data. A thread is forked to undertake the submission.
 */
protected void submitData(String data){
  Element form=getFormElement();
  AttributeSet attrs=form.getAttributes();
  HTMLDocument doc=(HTMLDocument)form.getDocument();
  URL base=doc.getBase();
  String target=(String)attrs.getAttribute(HTML.Attribute.TARGET);
  if (target == null) {
    target=""String_Node_Str"";
  }
  String method=(String)attrs.getAttribute(HTML.Attribute.METHOD);
  if (method == null) {
    method=""String_Node_Str"";
  }
  method=method.toLowerCase();
  boolean isPostMethod=method.equals(""String_Node_Str"");
  if (isPostMethod) {
    storePostData(doc,target,data);
  }
  String action=(String)attrs.getAttribute(HTML.Attribute.ACTION);
  URL actionURL;
  try {
    actionURL=(action == null) ? new URL(base.getProtocol(),base.getHost(),base.getPort(),base.getFile()) : new URL(base,action);
    if (!isPostMethod) {
      String query=data.toString();
      actionURL=new URL(actionURL + ""String_Node_Str"" + query);
    }
  }
 catch (  MalformedURLException e) {
    actionURL=null;
  }
  final JEditorPane c=(JEditorPane)getContainer();
  HTMLEditorKit kit=(HTMLEditorKit)c.getEditorKit();
  FormSubmitEvent formEvent=null;
  if (!kit.isAutoFormSubmission() || doc.isFrameDocument()) {
    FormSubmitEvent.MethodType methodType=isPostMethod ? FormSubmitEvent.MethodType.POST : FormSubmitEvent.MethodType.GET;
    formEvent=new FormSubmitEvent(FormView.this,HyperlinkEvent.EventType.ACTIVATED,actionURL,form,target,methodType,data);
  }
  final FormSubmitEvent fse=formEvent;
  final URL url=actionURL;
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (fse != null) {
        c.fireHyperlinkUpdate(fse);
      }
 else {
        try {
          c.setPage(url);
        }
 catch (        IOException e) {
          UIManager.getLookAndFeel().provideErrorFeedback(c);
        }
      }
    }
  }
);
}","/** 
 * This method is responsible for submitting the form data. A thread is forked to undertake the submission.
 * @param data data to submit
 */
protected void submitData(String data){
  Element form=getFormElement();
  AttributeSet attrs=form.getAttributes();
  HTMLDocument doc=(HTMLDocument)form.getDocument();
  URL base=doc.getBase();
  String target=(String)attrs.getAttribute(HTML.Attribute.TARGET);
  if (target == null) {
    target=""String_Node_Str"";
  }
  String method=(String)attrs.getAttribute(HTML.Attribute.METHOD);
  if (method == null) {
    method=""String_Node_Str"";
  }
  method=method.toLowerCase();
  boolean isPostMethod=method.equals(""String_Node_Str"");
  if (isPostMethod) {
    storePostData(doc,target,data);
  }
  String action=(String)attrs.getAttribute(HTML.Attribute.ACTION);
  URL actionURL;
  try {
    actionURL=(action == null) ? new URL(base.getProtocol(),base.getHost(),base.getPort(),base.getFile()) : new URL(base,action);
    if (!isPostMethod) {
      String query=data.toString();
      actionURL=new URL(actionURL + ""String_Node_Str"" + query);
    }
  }
 catch (  MalformedURLException e) {
    actionURL=null;
  }
  final JEditorPane c=(JEditorPane)getContainer();
  HTMLEditorKit kit=(HTMLEditorKit)c.getEditorKit();
  FormSubmitEvent formEvent=null;
  if (!kit.isAutoFormSubmission() || doc.isFrameDocument()) {
    FormSubmitEvent.MethodType methodType=isPostMethod ? FormSubmitEvent.MethodType.POST : FormSubmitEvent.MethodType.GET;
    formEvent=new FormSubmitEvent(FormView.this,HyperlinkEvent.EventType.ACTIVATED,actionURL,form,target,methodType,data);
  }
  final FormSubmitEvent fse=formEvent;
  final URL url=actionURL;
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (fse != null) {
        c.fireHyperlinkUpdate(fse);
      }
 else {
        try {
          c.setPage(url);
        }
 catch (        IOException e) {
          UIManager.getLookAndFeel().provideErrorFeedback(c);
        }
      }
    }
  }
);
}"
77007,"/** 
 * Returns the set of actual HTML tags that are recognized by the default HTML reader. This set does not include tags that are manufactured by the reader.
 */
public static Tag[] getAllTags(){
  Tag[] tags=new Tag[Tag.allTags.length];
  System.arraycopy(Tag.allTags,0,tags,0,Tag.allTags.length);
  return tags;
}","/** 
 * Returns the set of actual HTML tags that are recognized by the default HTML reader. This set does not include tags that are manufactured by the reader.
 * @return the set of actual HTML tags thatare recognized by the default HTML reader
 */
public static Tag[] getAllTags(){
  Tag[] tags=new Tag[Tag.allTags.length];
  System.arraycopy(Tag.allTags,0,tags,0,Tag.allTags.length);
  return tags;
}"
77008,"/** 
 * Fetches an integer attribute value.  Attribute values are stored as a string, and this is a convenience method to convert to an actual integer.
 * @param attr the set of attributes to use to try to fetch a value
 * @param key the key to use to fetch the value
 * @param def the default value to use if the attribute isn'tdefined or there is an error converting to an integer
 */
public static int getIntegerAttributeValue(AttributeSet attr,Attribute key,int def){
  int value=def;
  String istr=(String)attr.getAttribute(key);
  if (istr != null) {
    try {
      value=Integer.valueOf(istr).intValue();
    }
 catch (    NumberFormatException e) {
      value=def;
    }
  }
  return value;
}","/** 
 * Fetches an integer attribute value.  Attribute values are stored as a string, and this is a convenience method to convert to an actual integer.
 * @param attr the set of attributes to use to try to fetch a value
 * @param key the key to use to fetch the value
 * @param def the default value to use if the attribute isn'tdefined or there is an error converting to an integer
 * @return an attribute value
 */
public static int getIntegerAttributeValue(AttributeSet attr,Attribute key,int def){
  int value=def;
  String istr=(String)attr.getAttribute(key);
  if (istr != null) {
    try {
      value=Integer.valueOf(istr).intValue();
    }
 catch (    NumberFormatException e) {
      value=def;
    }
  }
  return value;
}"
77009,"/** 
 * Replaces the given element in the parent with the contents specified as an HTML string. <p>This will be seen as at least two events, n inserts followed by a remove.</p> <p>When replacing a leaf this will attempt to make sure there is a newline present if one is needed. This may result in an additional element being inserted. Consider, if you were to replace a character element that contained a newline with &lt;img&gt; this would create two elements, one for the image, and one for the newline.</p> <p>If you try to replace the element at length you will most likely end up with two elements, eg <code>setOuterHTML(getCharacterElement (getLength()), ""blah"")</code> will result in two leaf elements at the end, one representing 'blah', and the other representing the end element.</p> <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>setOuterHTML(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; | <font style=""color: red;"">&lt;ul&gt;</font> \ <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the element to replace
 * @param htmlText the string to be parsed and inserted in place of <code>elem</code>
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set
 * @since 1.3
 */
public void setOuterHTML(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null && elem.getParentElement() != null && htmlText != null) {
    int start=elem.getStartOffset();
    int end=elem.getEndOffset();
    int startLength=getLength();
    boolean wantsNewline=!elem.isLeaf();
    if (!wantsNewline && (end > startLength || getText(end - 1,1).charAt(0) == NEWLINE[0])) {
      wantsNewline=true;
    }
    Element parent=elem.getParentElement();
    int oldCount=parent.getElementCount();
    insertHTML(parent,start,htmlText,wantsNewline);
    int newLength=getLength();
    if (oldCount != parent.getElementCount()) {
      int removeIndex=parent.getElementIndex(start + newLength - startLength);
      removeElements(parent,removeIndex,1);
    }
  }
}","/** 
 * Replaces the given element in the parent with the contents specified as an HTML string. <p>This will be seen as at least two events, n inserts followed by a remove.</p> <p>When replacing a leaf this will attempt to make sure there is a newline present if one is needed. This may result in an additional element being inserted. Consider, if you were to replace a character element that contained a newline with &lt;img&gt; this would create two elements, one for the image, and one for the newline.</p> <p>If you try to replace the element at length you will most likely end up with two elements, eg <code>setOuterHTML(getCharacterElement (getLength()), ""blah"")</code> will result in two leaf elements at the end, one representing 'blah', and the other representing the end element.</p> <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>setOuterHTML(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; | <font style=""color: red;"">&lt;ul&gt;</font> \ <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an HTMLEditorKit.Parser set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the element to replace
 * @param htmlText the string to be parsed and inserted in place of <code>elem</code>
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set
 * @throws BadLocationException if replacement is impossible because ofa structural issue
 * @throws IOException if an I/O exception occurs
 * @since 1.3
 */
public void setOuterHTML(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null && elem.getParentElement() != null && htmlText != null) {
    int start=elem.getStartOffset();
    int end=elem.getEndOffset();
    int startLength=getLength();
    boolean wantsNewline=!elem.isLeaf();
    if (!wantsNewline && (end > startLength || getText(end - 1,1).charAt(0) == NEWLINE[0])) {
      wantsNewline=true;
    }
    Element parent=elem.getParentElement();
    int oldCount=parent.getElementCount();
    insertHTML(parent,start,htmlText,wantsNewline);
    int newLength=getLength();
    if (oldCount != parent.getElementCount()) {
      int removeIndex=parent.getElementIndex(start + newLength - startLength);
      removeElements(parent,removeIndex,1);
    }
  }
}"
77010,"/** 
 * Registers a handler for the given tag.  By default all of the well-known tags will have been registered. This can be used to change the handling of a particular tag or to add support for custom tags.
 */
protected void registerTag(HTML.Tag t,TagAction a){
  tagMap.put(t,a);
}","/** 
 * Registers a handler for the given tag.  By default all of the well-known tags will have been registered. This can be used to change the handling of a particular tag or to add support for custom tags.
 * @param t an HTML tag
 * @param a tag action handler
 */
protected void registerTag(HTML.Tag t,TagAction a){
  tagMap.put(t,a);
}"
77011,"/** 
 * Adds the given content that was encountered in a PRE element.  This synthesizes lines to hold the runs of text, and makes calls to addContent to actually add the text.
 */
protected void preContent(char[] data){
  int last=0;
  for (int i=0; i < data.length; i++) {
    if (data[i] == '\n') {
      addContent(data,last,i - last + 1);
      blockClose(HTML.Tag.IMPLIED);
      MutableAttributeSet a=new SimpleAttributeSet();
      a.addAttribute(CSS.Attribute.WHITE_SPACE,""String_Node_Str"");
      blockOpen(HTML.Tag.IMPLIED,a);
      last=i + 1;
    }
  }
  if (last < data.length) {
    addContent(data,last,data.length - last);
  }
}","/** 
 * Adds the given content that was encountered in a PRE element.  This synthesizes lines to hold the runs of text, and makes calls to addContent to actually add the text.
 * @param data the given content
 */
protected void preContent(char[] data){
  int last=0;
  for (int i=0; i < data.length; i++) {
    if (data[i] == '\n') {
      addContent(data,last,i - last + 1);
      blockClose(HTML.Tag.IMPLIED);
      MutableAttributeSet a=new SimpleAttributeSet();
      a.addAttribute(CSS.Attribute.WHITE_SPACE,""String_Node_Str"");
      blockOpen(HTML.Tag.IMPLIED,a);
      last=i + 1;
    }
  }
  if (last < data.length) {
    addContent(data,last,data.length - last);
  }
}"
77012,"/** 
 * Inserts the HTML specified as a string at the start of the element. <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>insertAfterStart(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  |  \ <font style=""color: red;"">&lt;ul&gt;</font> &lt;p&gt; &lt;p&gt; / <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>Unlike the <code>insertBeforeStart</code> method, new elements become <em>children</em> of the specified element, not siblings.</p> <p>Parameter <code>elem</code> must not be a leaf element, otherwise an <code>IllegalArgumentException</code> is thrown. If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the branch element to be the root for the new text
 * @param htmlText the string to be parsed and assigned to <code>elem</code>
 * @throws IllegalArgumentException if <code>elem</code> is a leaf
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set on the document
 * @since 1.3
 */
public void insertAfterStart(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem == null || htmlText == null) {
    return;
  }
  if (elem.isLeaf()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  insertHTML(elem,elem.getStartOffset(),htmlText,false);
}","/** 
 * Inserts the HTML specified as a string at the start of the element. <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>insertAfterStart(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  |  \ <font style=""color: red;"">&lt;ul&gt;</font> &lt;p&gt; &lt;p&gt; / <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>Unlike the <code>insertBeforeStart</code> method, new elements become <em>children</em> of the specified element, not siblings.</p> <p>Parameter <code>elem</code> must not be a leaf element, otherwise an <code>IllegalArgumentException</code> is thrown. If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the branch element to be the root for the new text
 * @param htmlText the string to be parsed and assigned to <code>elem</code>
 * @throws IllegalArgumentException if <code>elem</code> is a leaf
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set on the document
 * @throws BadLocationException if insertion is impossible because ofa structural issue
 * @throws IOException if an I/O exception occurs
 * @since 1.3
 */
public void insertAfterStart(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem == null || htmlText == null) {
    return;
  }
  if (elem.isLeaf()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  insertHTML(elem,elem.getStartOffset(),htmlText,false);
}"
77013,"/** 
 * Adds an instruction to the parse buffer to close out a block element of the given type.
 */
protected void blockClose(HTML.Tag t){
  inBlock--;
  if (!foundInsertTag) {
    return;
  }
  if (!lastWasNewline) {
    pushCharacterStyle();
    charAttr.addAttribute(IMPLIED_CR,Boolean.TRUE);
    addContent(NEWLINE,0,1,true);
    popCharacterStyle();
    lastWasNewline=true;
  }
  if (impliedP) {
    impliedP=false;
    inParagraph=false;
    if (t != HTML.Tag.IMPLIED) {
      blockClose(HTML.Tag.IMPLIED);
    }
  }
  ElementSpec prev=(parseBuffer.size() > 0) ? parseBuffer.lastElement() : null;
  if (prev != null && prev.getType() == ElementSpec.StartTagType) {
    char[] one=new char[1];
    one[0]=' ';
    addContent(one,0,1);
  }
  ElementSpec es=new ElementSpec(null,ElementSpec.EndTagType);
  parseBuffer.addElement(es);
}","/** 
 * Adds an instruction to the parse buffer to close out a block element of the given type.
 * @param t the HTML tag
 */
protected void blockClose(HTML.Tag t){
  inBlock--;
  if (!foundInsertTag) {
    return;
  }
  if (!lastWasNewline) {
    pushCharacterStyle();
    charAttr.addAttribute(IMPLIED_CR,Boolean.TRUE);
    addContent(NEWLINE,0,1,true);
    popCharacterStyle();
    lastWasNewline=true;
  }
  if (impliedP) {
    impliedP=false;
    inParagraph=false;
    if (t != HTML.Tag.IMPLIED) {
      blockClose(HTML.Tag.IMPLIED);
    }
  }
  ElementSpec prev=(parseBuffer.size() > 0) ? parseBuffer.lastElement() : null;
  if (prev != null && prev.getType() == ElementSpec.StartTagType) {
    char[] one=new char[1];
    one[0]=' ';
    addContent(one,0,1);
  }
  ElementSpec es=new ElementSpec(null,ElementSpec.EndTagType);
  parseBuffer.addElement(es);
}"
77014,"/** 
 * Inserts the HTML specified as a string at the end of the element. <p> If <code>elem</code>'s children are leaves, and the character at a <code>elem.getEndOffset() - 1</code> is a newline, this will insert before the newline so that there isn't text after the newline.</p> <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>insertBeforeEnd(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  |  \ &lt;p&gt; &lt;p&gt; <font style=""color: red;"">&lt;ul&gt;</font> \ <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>Unlike the <code>insertAfterEnd</code> method, new elements become <em>children</em> of the specified element, not siblings.</p> <p>Parameter <code>elem</code> must not be a leaf element, otherwise an <code>IllegalArgumentException</code> is thrown. If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the element to be the root for the new text
 * @param htmlText the string to be parsed and assigned to <code>elem</code>
 * @throws IllegalArgumentException if <code>elem</code> is a leaf
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set on the document
 * @since 1.3
 */
public void insertBeforeEnd(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null && elem.isLeaf()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (elem != null) {
    int offset=elem.getEndOffset();
    if (elem.getElement(elem.getElementIndex(offset - 1)).isLeaf() && getText(offset - 1,1).charAt(0) == NEWLINE[0]) {
      offset--;
    }
    insertHTML(elem,offset,htmlText,false);
  }
}","/** 
 * Inserts the HTML specified as a string at the end of the element. <p> If <code>elem</code>'s children are leaves, and the character at a <code>elem.getEndOffset() - 1</code> is a newline, this will insert before the newline so that there isn't text after the newline.</p> <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>insertBeforeEnd(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  |  \ &lt;p&gt; &lt;p&gt; <font style=""color: red;"">&lt;ul&gt;</font> \ <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>Unlike the <code>insertAfterEnd</code> method, new elements become <em>children</em> of the specified element, not siblings.</p> <p>Parameter <code>elem</code> must not be a leaf element, otherwise an <code>IllegalArgumentException</code> is thrown. If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the element to be the root for the new text
 * @param htmlText the string to be parsed and assigned to <code>elem</code>
 * @throws IllegalArgumentException if <code>elem</code> is a leaf
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set on the document
 * @throws BadLocationException if insertion is impossible because ofa structural issue
 * @throws IOException if an I/O exception occurs
 * @since 1.3
 */
public void insertBeforeEnd(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null && elem.isLeaf()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (elem != null) {
    int offset=elem.getEndOffset();
    if (elem.getElement(elem.getElementIndex(offset - 1)).isLeaf() && getText(offset - 1,1).charAt(0) == NEWLINE[0]) {
      offset--;
    }
    insertHTML(elem,offset,htmlText,false);
  }
}"
77015,"/** 
 * Adds the given content to the textarea document. This method gets called when we are in a textarea context.  Therefore all text that is seen belongs to the text area and is hence added to the TextAreaDocument associated with the text area.
 */
protected void textAreaContent(char[] data){
  try {
    textAreaDocument.insertString(textAreaDocument.getLength(),new String(data),null);
  }
 catch (  BadLocationException e) {
  }
}","/** 
 * Adds the given content to the textarea document. This method gets called when we are in a textarea context.  Therefore all text that is seen belongs to the text area and is hence added to the TextAreaDocument associated with the text area.
 * @param data the given content
 */
protected void textAreaContent(char[] data){
  try {
    textAreaDocument.insertString(textAreaDocument.getLength(),new String(data),null);
  }
 catch (  BadLocationException e) {
  }
}"
77016,"/** 
 * Inserts the HTML specified as a string before the start of the given element. <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>insertBeforeStart(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; /  \ <font style=""color: red;"">&lt;ul&gt;</font> <b>&lt;div&gt;</b> /    /  \ <font style=""color: red;"">&lt;li&gt;</font> &lt;p&gt;  &lt;p&gt; </pre> <p>Unlike the <code>insertAfterStart</code> method, new elements become <em>siblings</em> of the specified element, not children.</p> <p>If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the element the content is inserted before
 * @param htmlText the string to be parsed and inserted before <code>elem</code>
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set on the document
 * @since 1.3
 */
public void insertBeforeStart(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null) {
    Element parent=elem.getParentElement();
    if (parent != null) {
      insertHTML(parent,elem.getStartOffset(),htmlText,false);
    }
  }
}","/** 
 * Inserts the HTML specified as a string before the start of the given element. <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>insertBeforeStart(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; /  \ <font style=""color: red;"">&lt;ul&gt;</font> <b>&lt;div&gt;</b> /    /  \ <font style=""color: red;"">&lt;li&gt;</font> &lt;p&gt;  &lt;p&gt; </pre> <p>Unlike the <code>insertAfterStart</code> method, new elements become <em>siblings</em> of the specified element, not children.</p> <p>If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the element the content is inserted before
 * @param htmlText the string to be parsed and inserted before <code>elem</code>
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set on the document
 * @throws BadLocationException if insertion is impossible because ofa structural issue
 * @throws IOException if an I/O exception occurs
 * @since 1.3
 */
public void insertBeforeStart(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null) {
    Element parent=elem.getParentElement();
    if (parent != null) {
      insertHTML(parent,elem.getStartOffset(),htmlText,false);
    }
  }
}"
77017,"/** 
 * Adds an instruction to the parse buffer to create a block element with the given attributes.
 */
protected void blockOpen(HTML.Tag t,MutableAttributeSet attr){
  if (impliedP) {
    blockClose(HTML.Tag.IMPLIED);
  }
  inBlock++;
  if (!canInsertTag(t,attr,true)) {
    return;
  }
  if (attr.isDefined(IMPLIED)) {
    attr.removeAttribute(IMPLIED);
  }
  lastWasNewline=false;
  attr.addAttribute(StyleConstants.NameAttribute,t);
  ElementSpec es=new ElementSpec(attr.copyAttributes(),ElementSpec.StartTagType);
  parseBuffer.addElement(es);
}","/** 
 * Adds an instruction to the parse buffer to create a block element with the given attributes.
 * @param t an HTML tag
 * @param attr the attribute set
 */
protected void blockOpen(HTML.Tag t,MutableAttributeSet attr){
  if (impliedP) {
    blockClose(HTML.Tag.IMPLIED);
  }
  inBlock++;
  if (!canInsertTag(t,attr,true)) {
    return;
  }
  if (attr.isDefined(IMPLIED)) {
    attr.removeAttribute(IMPLIED);
  }
  lastWasNewline=false;
  attr.addAttribute(StyleConstants.NameAttribute,t);
  ElementSpec es=new ElementSpec(attr.copyAttributes(),ElementSpec.StartTagType);
  parseBuffer.addElement(es);
}"
77018,"/** 
 * Inserts the HTML specified as a string after the the end of the given element. <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>insertAfterEnd(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; /  \ <b>&lt;div&gt;</b> <font style=""color: red;"">&lt;ul&gt;</font> / \    \ &lt;p&gt; &lt;p&gt;  <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>Unlike the <code>insertBeforeEnd</code> method, new elements become <em>siblings</em> of the specified element, not children.</p> <p>If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the element the content is inserted after
 * @param htmlText the string to be parsed and inserted after <code>elem</code>
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set on the document
 * @since 1.3
 */
public void insertAfterEnd(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null) {
    Element parent=elem.getParentElement();
    if (parent != null) {
      int offset=elem.getEndOffset();
      if (offset > getLength()) {
        offset--;
      }
 else       if (elem.isLeaf() && getText(offset - 1,1).charAt(0) == NEWLINE[0]) {
        offset--;
      }
      insertHTML(parent,offset,htmlText,false);
    }
  }
}","/** 
 * Inserts the HTML specified as a string after the the end of the given element. <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>insertAfterEnd(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; /  \ <b>&lt;div&gt;</b> <font style=""color: red;"">&lt;ul&gt;</font> / \    \ &lt;p&gt; &lt;p&gt;  <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>Unlike the <code>insertBeforeEnd</code> method, new elements become <em>siblings</em> of the specified element, not children.</p> <p>If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the element the content is inserted after
 * @param htmlText the string to be parsed and inserted after <code>elem</code>
 * @throws IllegalStateException if an HTMLEditorKit.Parser has notbeen set on the document
 * @throws BadLocationException if insertion is impossible because ofa structural issue
 * @throws IOException if an I/O exception occurs
 * @since 1.3
 */
public void insertAfterEnd(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null) {
    Element parent=elem.getParentElement();
    if (parent != null) {
      int offset=elem.getEndOffset();
      if (offset > getLength()) {
        offset--;
      }
 else       if (elem.isLeaf() && getText(offset - 1,1).charAt(0) == NEWLINE[0]) {
        offset--;
      }
      insertHTML(parent,offset,htmlText,false);
    }
  }
}"
77019,"/** 
 * Adds content that is basically specified entirely in the attribute set.
 */
protected void addSpecialElement(HTML.Tag t,MutableAttributeSet a){
  if ((t != HTML.Tag.FRAME) && (!inParagraph) && (!inPre)) {
    nextTagAfterPImplied=t;
    blockOpen(HTML.Tag.IMPLIED,new SimpleAttributeSet());
    nextTagAfterPImplied=null;
    inParagraph=true;
    impliedP=true;
  }
  if (!canInsertTag(t,a,t.isBlock())) {
    return;
  }
  if (a.isDefined(IMPLIED)) {
    a.removeAttribute(IMPLIED);
  }
  emptyAnchor=false;
  a.addAttributes(charAttr);
  a.addAttribute(StyleConstants.NameAttribute,t);
  char[] one=new char[1];
  one[0]=' ';
  ElementSpec es=new ElementSpec(a.copyAttributes(),ElementSpec.ContentType,one,0,1);
  parseBuffer.addElement(es);
  if (t == HTML.Tag.FRAME) {
    lastWasNewline=true;
  }
}","/** 
 * Adds content that is basically specified entirely in the attribute set.
 * @param t an HTML tag
 * @param a the attribute set
 */
protected void addSpecialElement(HTML.Tag t,MutableAttributeSet a){
  if ((t != HTML.Tag.FRAME) && (!inParagraph) && (!inPre)) {
    nextTagAfterPImplied=t;
    blockOpen(HTML.Tag.IMPLIED,new SimpleAttributeSet());
    nextTagAfterPImplied=null;
    inParagraph=true;
    impliedP=true;
  }
  if (!canInsertTag(t,a,t.isBlock())) {
    return;
  }
  if (a.isDefined(IMPLIED)) {
    a.removeAttribute(IMPLIED);
  }
  emptyAnchor=false;
  a.addAttributes(charAttr);
  a.addAttribute(StyleConstants.NameAttribute,t);
  char[] one=new char[1];
  one[0]=' ';
  ElementSpec es=new ElementSpec(a.copyAttributes(),ElementSpec.ContentType,one,0,1);
  parseBuffer.addElement(es);
  if (t == HTML.Tag.FRAME) {
    lastWasNewline=true;
  }
}"
77020,"/** 
 * Replaces the children of the given element with the contents specified as an HTML string. <p>This will be seen as at least two events, n inserts followed by a remove.</p> <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>setInnerHTML(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> \ <font style=""color: red;"">&lt;ul&gt;</font> \ <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>Parameter <code>elem</code> must not be a leaf element, otherwise an <code>IllegalArgumentException</code> is thrown. If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the branch element whose children will be replaced
 * @param htmlText the string to be parsed and assigned to <code>elem</code>
 * @throws IllegalArgumentException if <code>elem</code> is a leaf
 * @throws IllegalStateException if an <code>HTMLEditorKit.Parser</code>has not been defined
 * @since 1.3
 */
public void setInnerHTML(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null && elem.isLeaf()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (elem != null && htmlText != null) {
    int oldCount=elem.getElementCount();
    int insertPosition=elem.getStartOffset();
    insertHTML(elem,elem.getStartOffset(),htmlText,true);
    if (elem.getElementCount() > oldCount) {
      removeElements(elem,elem.getElementCount() - oldCount,oldCount);
    }
  }
}","/** 
 * Replaces the children of the given element with the contents specified as an HTML string. <p>This will be seen as at least two events, n inserts followed by a remove.</p> <p>Consider the following structure (the <code>elem</code> parameter is <b>in bold</b>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> /  \ &lt;p&gt;   &lt;p&gt; </pre> <p>Invoking <code>setInnerHTML(elem, ""&lt;ul&gt;&lt;li&gt;"")</code> results in the following structure (new elements are <font style=""color: red;"">in red</font>).</p> <pre> &lt;body&gt; | <b>&lt;div&gt;</b> \ <font style=""color: red;"">&lt;ul&gt;</font> \ <font style=""color: red;"">&lt;li&gt;</font> </pre> <p>Parameter <code>elem</code> must not be a leaf element, otherwise an <code>IllegalArgumentException</code> is thrown. If either <code>elem</code> or <code>htmlText</code> parameter is <code>null</code>, no changes are made to the document.</p> <p>For this to work correctly, the document must have an <code>HTMLEditorKit.Parser</code> set. This will be the case if the document was created from an HTMLEditorKit via the <code>createDefaultDocument</code> method.</p>
 * @param elem the branch element whose children will be replaced
 * @param htmlText the string to be parsed and assigned to <code>elem</code>
 * @throws IllegalArgumentException if <code>elem</code> is a leaf
 * @throws IllegalStateException if an <code>HTMLEditorKit.Parser</code>has not been defined
 * @throws BadLocationException if replacement is impossible because ofa structural issue
 * @throws IOException if an I/O exception occurs
 * @since 1.3
 */
public void setInnerHTML(Element elem,String htmlText) throws BadLocationException, IOException {
  verifyParser();
  if (elem != null && elem.isLeaf()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (elem != null && htmlText != null) {
    int oldCount=elem.getElementCount();
    int insertPosition=elem.getStartOffset();
    insertHTML(elem,elem.getStartOffset(),htmlText,true);
    if (elem.getElementCount() > oldCount) {
      removeElements(elem,elem.getElementCount() - oldCount,oldCount);
    }
  }
}"
77021,"/** 
 * This is invoked after the stream has been parsed, but before <code>flush</code>. <code>eol</code> will be one of \n, \r or \r\n, which ever is encountered the most in parsing the stream.
 * @since 1.3
 */
public void handleEndOfLineString(String eol){
}","/** 
 * This is invoked after the stream has been parsed, but before <code>flush</code>. <code>eol</code> will be one of \n, \r or \r\n, which ever is encountered the most in parsing the stream.
 * @param eol value of eol
 * @since 1.3
 */
public void handleEndOfLineString(String eol){
}"
77022,"/** 
 * Returns number of elements, starting at the deepest leaf, needed to get to an element representing <code>tag</code>. This will return -1 if no elements is found representing <code>tag</code>, or 0 if the parent of the leaf at <code>offset</code> represents <code>tag</code>.
 */
protected int elementCountToTag(HTMLDocument doc,int offset,HTML.Tag tag){
  int depth=-1;
  Element e=doc.getCharacterElement(offset);
  while (e != null && e.getAttributes().getAttribute(StyleConstants.NameAttribute) != tag) {
    e=e.getParentElement();
    depth++;
  }
  if (e == null) {
    return -1;
  }
  return depth;
}","/** 
 * Returns number of elements, starting at the deepest leaf, needed to get to an element representing <code>tag</code>. This will return -1 if no elements is found representing <code>tag</code>, or 0 if the parent of the leaf at <code>offset</code> represents <code>tag</code>.
 * @param doc an instance of HTMLDocument
 * @param offset an offset to start from
 * @param tag tag to represent
 * @return number of elements
 */
protected int elementCountToTag(HTMLDocument doc,int offset,HTML.Tag tag){
  int depth=-1;
  Element e=doc.getCharacterElement(offset);
  while (e != null && e.getAttributes().getAttribute(StyleConstants.NameAttribute) != tag) {
    e=e.getParentElement();
    depth++;
  }
  if (e == null) {
    return -1;
  }
  return depth;
}"
77023,"/** 
 * Parse the given stream and drive the given callback with the results of the parse.  This method should be implemented to be thread-safe.
 */
public abstract void parse(Reader r,ParserCallback cb,boolean ignoreCharSet) throws IOException ;","/** 
 * Parse the given stream and drive the given callback with the results of the parse.  This method should be implemented to be thread-safe.
 * @throws IOException if an I/O exception occurs
 */
public abstract void parse(Reader r,ParserCallback cb,boolean ignoreCharSet) throws IOException ;"
77024,"/** 
 * @return HTMLDocument of <code>e</code>.
 */
protected HTMLDocument getHTMLDocument(JEditorPane e){
  Document d=e.getDocument();
  if (d instanceof HTMLDocument) {
    return (HTMLDocument)d;
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","/** 
 * @param e the JEditorPane
 * @return HTMLDocument of <code>e</code>.
 */
protected HTMLDocument getHTMLDocument(JEditorPane e){
  Document d=e.getDocument();
  if (d instanceof HTMLDocument) {
    return (HTMLDocument)d;
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}"
77025,"/** 
 * returns the target for the link.
 */
public String getTarget(){
  return targetFrame;
}","/** 
 * returns the target for the link.
 * @return the target for the link
 */
public String getTarget(){
  return targetFrame;
}"
77026,"/** 
 * Arguments may only be used as args to the apply. Everything else is disqualified
 * @return true if arguments escape
 */
private boolean argumentsEscape(){
  final Deque<Set<Expression>> stack=new ArrayDeque<>();
  try {
    functionNode=(FunctionNode)functionNode.accept(new NodeVisitor<LexicalContext>(new LexicalContext()){
      private boolean isCurrentArg(      final Expression expr){
        return !stack.isEmpty() && stack.peek().contains(expr);
      }
      private boolean isArguments(      final Expression expr){
        return expr instanceof IdentNode && ARGUMENTS.equals(((IdentNode)expr).getName());
      }
      @Override public Node leaveIdentNode(      final IdentNode identNode){
        if (ARGUMENTS.equals(identNode.getName()) && !isCurrentArg(identNode)) {
          throw new UnsupportedOperationException();
        }
        return identNode;
      }
      @Override public boolean enterCallNode(      final CallNode callNode){
        final Set<Expression> callArgs=new HashSet<>();
        if (isApply(callNode)) {
          final List<Expression> argList=callNode.getArgs();
          if (argList.size() != 2 || !isArguments(argList.get(argList.size() - 1))) {
            throw new UnsupportedOperationException();
          }
          callArgs.addAll(callNode.getArgs());
        }
        stack.push(callArgs);
        return true;
      }
      @Override public Node leaveCallNode(      final CallNode callNode){
        stack.pop();
        return callNode;
      }
    }
);
  }
 catch (  final UnsupportedOperationException e) {
    log.fine(""String_Node_Str"" + functionNode.getName() + ""String_Node_Str"");
    return true;
  }
  return false;
}","/** 
 * Arguments may only be used as args to the apply. Everything else is disqualified We cannot control arguments if they escape from the method and go into an unknown scope, thus we are conservative and treat any access to arguments outside the apply call as a case of ""we cannot apply the optimization"".
 * @return true if arguments escape
 */
private boolean argumentsEscape(){
  final Deque<Set<Expression>> stack=new ArrayDeque<>();
  try {
    functionNode=(FunctionNode)functionNode.accept(new NodeVisitor<LexicalContext>(new LexicalContext()){
      private boolean isCurrentArg(      final Expression expr){
        return !stack.isEmpty() && stack.peek().contains(expr);
      }
      private boolean isArguments(      final Expression expr){
        return expr instanceof IdentNode && ARGUMENTS.equals(((IdentNode)expr).getName());
      }
      private boolean isParam(      final String name){
        for (        final IdentNode param : functionNode.getParameters()) {
          if (param.getName().equals(name)) {
            return true;
          }
        }
        return false;
      }
      @Override public Node leaveIdentNode(      final IdentNode identNode){
        if (isParam(identNode.getName()) || ARGUMENTS.equals(identNode.getName()) && !isCurrentArg(identNode)) {
          throw new UnsupportedOperationException();
        }
        return identNode;
      }
      @Override public boolean enterCallNode(      final CallNode callNode){
        final Set<Expression> callArgs=new HashSet<>();
        if (isApply(callNode)) {
          final List<Expression> argList=callNode.getArgs();
          if (argList.size() != 2 || !isArguments(argList.get(argList.size() - 1))) {
            throw new UnsupportedOperationException();
          }
          callArgs.addAll(callNode.getArgs());
        }
        stack.push(callArgs);
        return true;
      }
      @Override public Node leaveCallNode(      final CallNode callNode){
        stack.pop();
        return callNode;
      }
    }
);
  }
 catch (  final UnsupportedOperationException e) {
    log.fine(""String_Node_Str"" + functionNode.getName() + ""String_Node_Str"");
    return true;
  }
  return false;
}"
77027,"@Override public Node leaveIdentNode(final IdentNode identNode){
  if (ARGUMENTS.equals(identNode.getName()) && !isCurrentArg(identNode)) {
    throw new UnsupportedOperationException();
  }
  return identNode;
}","@Override public Node leaveIdentNode(final IdentNode identNode){
  if (isParam(identNode.getName()) || ARGUMENTS.equals(identNode.getName()) && !isCurrentArg(identNode)) {
    throw new UnsupportedOperationException();
  }
  return identNode;
}"
77028,"@Override public FunctionNode apply(final FunctionNode functionNode){
  this.initialFunctionNode=functionNode;
  if (data.isVariableArity()) {
    final ApplySpecialization spec=new ApplySpecialization(data.context,data,functionNode,actualCallSiteType);
    if (spec.transform()) {
      setTransformedFunctionNode(spec.getFunctionNode());
      return transformedFunctionNode;
    }
  }
  return functionNode;
}","@Override public FunctionNode apply(final FunctionNode functionNode){
  this.initialFunctionNode=functionNode;
  if (data.isVariableArity() && !CompiledFunction.isVarArgsType(actualCallSiteType)) {
    final ApplySpecialization spec=new ApplySpecialization(data.context,data,functionNode,actualCallSiteType);
    if (spec.transform()) {
      setTransformedFunctionNode(spec.getFunctionNode());
      return transformedFunctionNode;
    }
  }
  return functionNode;
}"
77029,"/** 
 * Returns a copy of this duration with the specified duration subtracted. <p> The duration amount is measured in terms of the specified unit. Only a subset of units are accepted by this method. The unit must either have an   {@linkplain TemporalUnit#isDurationEstimated() exact duration} orbe  {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.<p> This instance is immutable and unaffected by this method call.
 * @param amountToSubtract  the amount of the period, measured in terms of the unit, positive or negative
 * @param unit  the unit that the period is measured in, must have an exact duration, not null
 * @return a {@code Duration} based on this duration with the specified duration subtracted, not null
 * @throws ArithmeticException if numeric overflow occurs
 */
public Duration minus(long amountToSubtract,TemporalUnit unit){
  return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE,unit).plus(1,unit) : plus(-amountToSubtract,unit));
}","/** 
 * Returns a copy of this duration with the specified duration subtracted. <p> The duration amount is measured in terms of the specified unit. Only a subset of units are accepted by this method. The unit must either have an   {@linkplain TemporalUnit#isDurationEstimated() exact duration} orbe  {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.<p> This instance is immutable and unaffected by this method call.
 * @param amountToSubtract  the amount to subtract, measured in terms of the unit, positive or negative
 * @param unit  the unit that the amount is measured in, must have an exact duration, not null
 * @return a {@code Duration} based on this duration with the specified duration subtracted, not null
 * @throws ArithmeticException if numeric overflow occurs
 */
public Duration minus(long amountToSubtract,TemporalUnit unit){
  return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE,unit).plus(1,unit) : plus(-amountToSubtract,unit));
}"
77030,"/** 
 * Gets the set of units supported by this duration. <p> The supported units are   {@link ChronoUnit#SECONDS SECONDS}, and   {@link ChronoUnit#NANOS NANOS}. They are returned in the order seconds, nanos. <p> This set can be used in conjunction with   {@link #get(TemporalUnit)}to access the entire state of the period.
 * @return a list containing the seconds and nanos units, not null
 */
@Override public List<TemporalUnit> getUnits(){
  return DurationUnits.UNITS;
}","/** 
 * Gets the set of units supported by this duration. <p> The supported units are   {@link ChronoUnit#SECONDS SECONDS}, and   {@link ChronoUnit#NANOS NANOS}. They are returned in the order seconds, nanos. <p> This set can be used in conjunction with   {@link #get(TemporalUnit)}to access the entire state of the duration.
 * @return a list containing the seconds and nanos units, not null
 */
@Override public List<TemporalUnit> getUnits(){
  return DurationUnits.UNITS;
}"
77031,"/** 
 * Gets the value of the specified field from this instant as an   {@code int}. <p> This queries this instant for the value for the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. <p> If the field is a   {@link ChronoField} then the query is implemented here.The  {@link #isSupported(TemporalField) supported fields} will return validvalues based on this date-time, except  {@code INSTANT_SECONDS} which is toolarge to fit in an  {@code int} and throws a {@code DateTimeException}. All other   {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}. <p> If the field is not a   {@code ChronoField}, then the result of this method is obtained by invoking   {@code TemporalField.getFrom(TemporalAccessor)}passing   {@code this} as the argument. Whether the value can be obtained,and what the value represents, is determined by the field.
 * @param field  the field to get, not null
 * @return the value for the field
 * @throws DateTimeException if a value for the field cannot be obtained orthe value is outside the range of valid values for the field
 * @throws UnsupportedTemporalTypeException if the field is not supported orthe range of values exceeds an  {@code int}
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override public int get(TemporalField field){
}","/** 
 * Gets the value of the specified field from this instant as an   {@code int}. <p> This queries this instant for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. <p> If the field is a   {@link ChronoField} then the query is implemented here.The  {@link #isSupported(TemporalField) supported fields} will return validvalues based on this date-time, except  {@code INSTANT_SECONDS} which is toolarge to fit in an  {@code int} and throws a {@code DateTimeException}. All other   {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}. <p> If the field is not a   {@code ChronoField}, then the result of this method is obtained by invoking   {@code TemporalField.getFrom(TemporalAccessor)}passing   {@code this} as the argument. Whether the value can be obtained,and what the value represents, is determined by the field.
 * @param field  the field to get, not null
 * @return the value for the field
 * @throws DateTimeException if a value for the field cannot be obtained orthe value is outside the range of valid values for the field
 * @throws UnsupportedTemporalTypeException if the field is not supported orthe range of values exceeds an  {@code int}
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override public int get(TemporalField field){
}"
77032,"/** 
 * Gets the value of the specified field from this instant as a   {@code long}. <p> This queries this instant for the value for the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. <p> If the field is a   {@link ChronoField} then the query is implemented here.The  {@link #isSupported(TemporalField) supported fields} will return validvalues based on this date-time. All other  {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}. <p> If the field is not a   {@code ChronoField}, then the result of this method is obtained by invoking   {@code TemporalField.getFrom(TemporalAccessor)}passing   {@code this} as the argument. Whether the value can be obtained,and what the value represents, is determined by the field.
 * @param field  the field to get, not null
 * @return the value for the field
 * @throws DateTimeException if a value for the field cannot be obtained
 * @throws UnsupportedTemporalTypeException if the field is not supported
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override public long getLong(TemporalField field){
}","/** 
 * Gets the value of the specified field from this instant as a   {@code long}. <p> This queries this instant for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. <p> If the field is a   {@link ChronoField} then the query is implemented here.The  {@link #isSupported(TemporalField) supported fields} will return validvalues based on this date-time. All other  {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}. <p> If the field is not a   {@code ChronoField}, then the result of this method is obtained by invoking   {@code TemporalField.getFrom(TemporalAccessor)}passing   {@code this} as the argument. Whether the value can be obtained,and what the value represents, is determined by the field.
 * @param field  the field to get, not null
 * @return the value for the field
 * @throws DateTimeException if a value for the field cannot be obtained
 * @throws UnsupportedTemporalTypeException if the field is not supported
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override public long getLong(TemporalField field){
}"
77033,"/** 
 * Obtains an instance of   {@code LocalDate} from a year and day-of-year.<p> This returns a  {@code LocalDate} with the specified year and day-of-year.The day-of-year must be valid for the year, otherwise an exception will be thrown.
 * @param year  the year to represent, from MIN_YEAR to MAX_YEAR
 * @param dayOfYear  the day-of-year to represent, from 1 to 366
 * @return the local date, not null
 * @throws DateTimeException if the value of any field is out of range,or if the day-of-year is invalid for the month-year
 */
public static LocalDate ofYearDay(int year,int dayOfYear){
  YEAR.checkValidValue(year);
  DAY_OF_YEAR.checkValidValue(dayOfYear);
  boolean leap=IsoChronology.INSTANCE.isLeapYear(year);
  if (dayOfYear == 366 && leap == false) {
    throw new DateTimeException(""String_Node_Str"" + year + ""String_Node_Str"");
  }
  Month moy=Month.of((dayOfYear - 1) / 31 + 1);
  int monthEnd=moy.firstDayOfYear(leap) + moy.length(leap) - 1;
  if (dayOfYear > monthEnd) {
    moy=moy.plus(1);
  }
  int dom=dayOfYear - moy.firstDayOfYear(leap) + 1;
  return new LocalDate(year,moy.getValue(),dom);
}","/** 
 * Obtains an instance of   {@code LocalDate} from a year and day-of-year.<p> This returns a  {@code LocalDate} with the specified year and day-of-year.The day-of-year must be valid for the year, otherwise an exception will be thrown.
 * @param year  the year to represent, from MIN_YEAR to MAX_YEAR
 * @param dayOfYear  the day-of-year to represent, from 1 to 366
 * @return the local date, not null
 * @throws DateTimeException if the value of any field is out of range,or if the day-of-year is invalid for the year
 */
public static LocalDate ofYearDay(int year,int dayOfYear){
  YEAR.checkValidValue(year);
  DAY_OF_YEAR.checkValidValue(dayOfYear);
  boolean leap=IsoChronology.INSTANCE.isLeapYear(year);
  if (dayOfYear == 366 && leap == false) {
    throw new DateTimeException(""String_Node_Str"" + year + ""String_Node_Str"");
  }
  Month moy=Month.of((dayOfYear - 1) / 31 + 1);
  int monthEnd=moy.firstDayOfYear(leap) + moy.length(leap) - 1;
  if (dayOfYear > monthEnd) {
    moy=moy.plus(1);
  }
  int dom=dayOfYear - moy.firstDayOfYear(leap) + 1;
  return new LocalDate(year,moy.getValue(),dom);
}"
77034,"/** 
 * Returns a copy of this   {@code LocalDate} with the specified period in months added.<p> This method adds the specified amount to the months field in three steps: <ol> <li>Add the input months to the month-of-year field</li> <li>Check if the resulting date would be invalid</li> <li>Adjust the day-of-month to the last valid day if necessary</li> </ol> <p> For example, 2007-03-31 plus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. <p> This instance is immutable and unaffected by this method call.
 * @param monthsToAdd  the months to add, may be negative
 * @return a {@code LocalDate} based on this date with the months added, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate plusMonths(long monthsToAdd){
  if (monthsToAdd == 0) {
    return this;
  }
  long monthCount=year * 12L + (month - 1);
  long calcMonths=monthCount + monthsToAdd;
  int newYear=YEAR.checkValidIntValue(Math.floorDiv(calcMonths,12));
  int newMonth=(int)Math.floorMod(calcMonths,12) + 1;
  return resolvePreviousValid(newYear,newMonth,day);
}","/** 
 * Returns a copy of this   {@code LocalDate} with the specified number of months added.<p> This method adds the specified amount to the months field in three steps: <ol> <li>Add the input months to the month-of-year field</li> <li>Check if the resulting date would be invalid</li> <li>Adjust the day-of-month to the last valid day if necessary</li> </ol> <p> For example, 2007-03-31 plus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. <p> This instance is immutable and unaffected by this method call.
 * @param monthsToAdd  the months to add, may be negative
 * @return a {@code LocalDate} based on this date with the months added, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate plusMonths(long monthsToAdd){
  if (monthsToAdd == 0) {
    return this;
  }
  long monthCount=year * 12L + (month - 1);
  long calcMonths=monthCount + monthsToAdd;
  int newYear=YEAR.checkValidIntValue(Math.floorDiv(calcMonths,12));
  int newMonth=(int)Math.floorMod(calcMonths,12) + 1;
  return resolvePreviousValid(newYear,newMonth,day);
}"
77035,"/** 
 * Returns a copy of this   {@code LocalDate} with the specified period in years added.<p> This method adds the specified amount to the years field in three steps: <ol> <li>Add the input years to the year field</li> <li>Check if the resulting date would be invalid</li> <li>Adjust the day-of-month to the last valid day if necessary</li> </ol> <p> For example, 2008-02-29 (leap year) plus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. <p> This instance is immutable and unaffected by this method call.
 * @param yearsToAdd  the years to add, may be negative
 * @return a {@code LocalDate} based on this date with the years added, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate plusYears(long yearsToAdd){
  if (yearsToAdd == 0) {
    return this;
  }
  int newYear=YEAR.checkValidIntValue(year + yearsToAdd);
  return resolvePreviousValid(newYear,month,day);
}","/** 
 * Returns a copy of this   {@code LocalDate} with the specified number of years added.<p> This method adds the specified amount to the years field in three steps: <ol> <li>Add the input years to the year field</li> <li>Check if the resulting date would be invalid</li> <li>Adjust the day-of-month to the last valid day if necessary</li> </ol> <p> For example, 2008-02-29 (leap year) plus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. <p> This instance is immutable and unaffected by this method call.
 * @param yearsToAdd  the years to add, may be negative
 * @return a {@code LocalDate} based on this date with the years added, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate plusYears(long yearsToAdd){
  if (yearsToAdd == 0) {
    return this;
  }
  int newYear=YEAR.checkValidIntValue(year + yearsToAdd);
  return resolvePreviousValid(newYear,month,day);
}"
77036,"/** 
 * Checks if the specified unit is supported. <p> This checks if the specified unit can be added to, or subtracted from, this date-time. If false, then calling the   {@link #plus(long,TemporalUnit)} and{@link #minus(long,TemporalUnit) minus} methods will throw an exception.<p> If the unit is a  {@link ChronoUnit} then the query is implemented here.The supported units are: <ul> <li> {@code DAYS}<li>  {@code WEEKS}<li>  {@code MONTHS}<li>  {@code YEARS}<li>  {@code DECADES}<li>  {@code CENTURIES}<li>  {@code MILLENNIA}<li>  {@code ERAS}</ul> All other   {@code ChronoUnit} instances will return false.<p> If the unit is not a  {@code ChronoUnit}, then the result of this method is obtained by invoking   {@code TemporalUnit.isSupportedBy(Temporal)}passing   {@code this} as the argument.Whether the unit is supported is determined by the unit.
 * @param unit  the unit to check, null returns false
 * @return true if the unit can be added/subtracted, false if not
 */
@Override public boolean isSupported(TemporalUnit unit){
  return ChronoLocalDate.super.isSupported(unit);
}","/** 
 * Checks if the specified unit is supported. <p> This checks if the specified unit can be added to, or subtracted from, this date. If false, then calling the   {@link #plus(long,TemporalUnit)} and{@link #minus(long,TemporalUnit) minus} methods will throw an exception.<p> If the unit is a  {@link ChronoUnit} then the query is implemented here.The supported units are: <ul> <li> {@code DAYS}<li>  {@code WEEKS}<li>  {@code MONTHS}<li>  {@code YEARS}<li>  {@code DECADES}<li>  {@code CENTURIES}<li>  {@code MILLENNIA}<li>  {@code ERAS}</ul> All other   {@code ChronoUnit} instances will return false.<p> If the unit is not a  {@code ChronoUnit}, then the result of this method is obtained by invoking   {@code TemporalUnit.isSupportedBy(Temporal)}passing   {@code this} as the argument.Whether the unit is supported is determined by the unit.
 * @param unit  the unit to check, null returns false
 * @return true if the unit can be added/subtracted, false if not
 */
@Override public boolean isSupported(TemporalUnit unit){
  return ChronoLocalDate.super.isSupported(unit);
}"
77037,"/** 
 * Returns a copy of this date with the day-of-month altered. If the resulting date is invalid, an exception is thrown. <p> This instance is immutable and unaffected by this method call.
 * @param dayOfMonth  the day-of-month to set in the result, from 1 to 28-31
 * @return a {@code LocalDate} based on this date with the requested day, not null
 * @throws DateTimeException if the day-of-month value is invalid,or if the day-of-month is invalid for the month-year
 */
public LocalDate withDayOfMonth(int dayOfMonth){
  if (this.day == dayOfMonth) {
    return this;
  }
  return of(year,month,dayOfMonth);
}","/** 
 * Returns a copy of this   {@code LocalDate} with the day-of-month altered.<p> If the resulting date is invalid, an exception is thrown. <p> This instance is immutable and unaffected by this method call.
 * @param dayOfMonth  the day-of-month to set in the result, from 1 to 28-31
 * @return a {@code LocalDate} based on this date with the requested day, not null
 * @throws DateTimeException if the day-of-month value is invalid,or if the day-of-month is invalid for the month-year
 */
public LocalDate withDayOfMonth(int dayOfMonth){
  if (this.day == dayOfMonth) {
    return this;
  }
  return of(year,month,dayOfMonth);
}"
77038,"/** 
 * Returns a copy of this date with the month-of-year altered. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. <p> This instance is immutable and unaffected by this method call.
 * @param month  the month-of-year to set in the result, from 1 (January) to 12 (December)
 * @return a {@code LocalDate} based on this date with the requested month, not null
 * @throws DateTimeException if the month-of-year value is invalid
 */
public LocalDate withMonth(int month){
  if (this.month == month) {
    return this;
  }
  MONTH_OF_YEAR.checkValidValue(month);
  return resolvePreviousValid(year,month,day);
}","/** 
 * Returns a copy of this   {@code LocalDate} with the month-of-year altered.<p> If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. <p> This instance is immutable and unaffected by this method call.
 * @param month  the month-of-year to set in the result, from 1 (January) to 12 (December)
 * @return a {@code LocalDate} based on this date with the requested month, not null
 * @throws DateTimeException if the month-of-year value is invalid
 */
public LocalDate withMonth(int month){
  if (this.month == month) {
    return this;
  }
  MONTH_OF_YEAR.checkValidValue(month);
  return resolvePreviousValid(year,month,day);
}"
77039,"/** 
 * Returns a copy of this date with the year altered. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. <p> This instance is immutable and unaffected by this method call.
 * @param year  the year to set in the result, from MIN_YEAR to MAX_YEAR
 * @return a {@code LocalDate} based on this date with the requested year, not null
 * @throws DateTimeException if the year value is invalid
 */
public LocalDate withYear(int year){
  if (this.year == year) {
    return this;
  }
  YEAR.checkValidValue(year);
  return resolvePreviousValid(year,month,day);
}","/** 
 * Returns a copy of this   {@code LocalDate} with the year altered.<p> If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. <p> This instance is immutable and unaffected by this method call.
 * @param year  the year to set in the result, from MIN_YEAR to MAX_YEAR
 * @return a {@code LocalDate} based on this date with the requested year, not null
 * @throws DateTimeException if the year value is invalid
 */
public LocalDate withYear(int year){
  if (this.year == year) {
    return this;
  }
  YEAR.checkValidValue(year);
  return resolvePreviousValid(year,month,day);
}"
77040,"/** 
 * Gets the value of the specified field from this date as an   {@code int}. <p> This queries this date for the value for the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. <p> If the field is a   {@link ChronoField} then the query is implemented here.The  {@link #isSupported(TemporalField) supported fields} will return validvalues based on this date, except  {@code EPOCH_DAY} and {@code PROLEPTIC_MONTH}which are too large to fit in an   {@code int} and throw a {@code DateTimeException}. All other   {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}. <p> If the field is not a   {@code ChronoField}, then the result of this method is obtained by invoking   {@code TemporalField.getFrom(TemporalAccessor)}passing   {@code this} as the argument. Whether the value can be obtained,and what the value represents, is determined by the field.
 * @param field  the field to get, not null
 * @return the value for the field
 * @throws DateTimeException if a value for the field cannot be obtained orthe value is outside the range of valid values for the field
 * @throws UnsupportedTemporalTypeException if the field is not supported orthe range of values exceeds an  {@code int}
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override public int get(TemporalField field){
  if (field instanceof ChronoField) {
    return get0(field);
  }
  return ChronoLocalDate.super.get(field);
}","/** 
 * Gets the value of the specified field from this date as an   {@code int}. <p> This queries this date for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. <p> If the field is a   {@link ChronoField} then the query is implemented here.The  {@link #isSupported(TemporalField) supported fields} will return validvalues based on this date, except  {@code EPOCH_DAY} and {@code PROLEPTIC_MONTH}which are too large to fit in an   {@code int} and throw an {@code UnsupportedTemporalTypeException}. All other   {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}. <p> If the field is not a   {@code ChronoField}, then the result of this method is obtained by invoking   {@code TemporalField.getFrom(TemporalAccessor)}passing   {@code this} as the argument. Whether the value can be obtained,and what the value represents, is determined by the field.
 * @param field  the field to get, not null
 * @return the value for the field
 * @throws DateTimeException if a value for the field cannot be obtained orthe value is outside the range of valid values for the field
 * @throws UnsupportedTemporalTypeException if the field is not supported orthe range of values exceeds an  {@code int}
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override public int get(TemporalField field){
  if (field instanceof ChronoField) {
    return get0(field);
  }
  return ChronoLocalDate.super.get(field);
}"
77041,"/** 
 * Returns a copy of this   {@code LocalDate} with the specified period in weeks added.<p> This method adds the specified amount in weeks to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. <p> For example, 2008-12-31 plus one week would result in 2009-01-07. <p> This instance is immutable and unaffected by this method call.
 * @param weeksToAdd  the weeks to add, may be negative
 * @return a {@code LocalDate} based on this date with the weeks added, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate plusWeeks(long weeksToAdd){
  return plusDays(Math.multiplyExact(weeksToAdd,7));
}","/** 
 * Returns a copy of this   {@code LocalDate} with the specified number of weeks added.<p> This method adds the specified amount in weeks to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. <p> For example, 2008-12-31 plus one week would result in 2009-01-07. <p> This instance is immutable and unaffected by this method call.
 * @param weeksToAdd  the weeks to add, may be negative
 * @return a {@code LocalDate} based on this date with the weeks added, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate plusWeeks(long weeksToAdd){
  return plusDays(Math.multiplyExact(weeksToAdd,7));
}"
77042,"/** 
 * Obtains an instance of   {@code LocalDate} from the epoch day count.<p> This returns a  {@code LocalDate} with the specified epoch-day.The  {@link ChronoField#EPOCH_DAY EPOCH_DAY} is a simple incrementing countof days where day 0 is 1970-01-01. Negative numbers represent earlier days.
 * @param epochDay  the Epoch Day to convert, based on the epoch 1970-01-01
 * @return the local date, not null
 * @throws DateTimeException if the epoch days exceeds the supported date range
 */
public static LocalDate ofEpochDay(long epochDay){
  long zeroDay=epochDay + DAYS_0000_TO_1970;
  zeroDay-=60;
  long adjust=0;
  if (zeroDay < 0) {
    long adjustCycles=(zeroDay + 1) / DAYS_PER_CYCLE - 1;
    adjust=adjustCycles * 400;
    zeroDay+=-adjustCycles * DAYS_PER_CYCLE;
  }
  long yearEst=(400 * zeroDay + 591) / DAYS_PER_CYCLE;
  long doyEst=zeroDay - (365 * yearEst + yearEst / 4 - yearEst / 100 + yearEst / 400);
  if (doyEst < 0) {
    yearEst--;
    doyEst=zeroDay - (365 * yearEst + yearEst / 4 - yearEst / 100 + yearEst / 400);
  }
  yearEst+=adjust;
  int marchDoy0=(int)doyEst;
  int marchMonth0=(marchDoy0 * 5 + 2) / 153;
  int month=(marchMonth0 + 2) % 12 + 1;
  int dom=marchDoy0 - (marchMonth0 * 306 + 5) / 10 + 1;
  yearEst+=marchMonth0 / 10;
  int year=YEAR.checkValidIntValue(yearEst);
  return new LocalDate(year,month,dom);
}","/** 
 * Obtains an instance of   {@code LocalDate} from the epoch day count.<p> This returns a  {@code LocalDate} with the specified epoch-day.The  {@link ChronoField#EPOCH_DAY EPOCH_DAY} is a simple incrementing countof days where day 0 is 1970-01-01. Negative numbers represent earlier days.
 * @param epochDay  the Epoch Day to convert, based on the epoch 1970-01-01
 * @return the local date, not null
 * @throws DateTimeException if the epoch day exceeds the supported date range
 */
public static LocalDate ofEpochDay(long epochDay){
  long zeroDay=epochDay + DAYS_0000_TO_1970;
  zeroDay-=60;
  long adjust=0;
  if (zeroDay < 0) {
    long adjustCycles=(zeroDay + 1) / DAYS_PER_CYCLE - 1;
    adjust=adjustCycles * 400;
    zeroDay+=-adjustCycles * DAYS_PER_CYCLE;
  }
  long yearEst=(400 * zeroDay + 591) / DAYS_PER_CYCLE;
  long doyEst=zeroDay - (365 * yearEst + yearEst / 4 - yearEst / 100 + yearEst / 400);
  if (doyEst < 0) {
    yearEst--;
    doyEst=zeroDay - (365 * yearEst + yearEst / 4 - yearEst / 100 + yearEst / 400);
  }
  yearEst+=adjust;
  int marchDoy0=(int)doyEst;
  int marchMonth0=(marchDoy0 * 5 + 2) / 153;
  int month=(marchMonth0 + 2) % 12 + 1;
  int dom=marchDoy0 - (marchMonth0 * 306 + 5) / 10 + 1;
  yearEst+=marchMonth0 / 10;
  int year=YEAR.checkValidIntValue(yearEst);
  return new LocalDate(year,month,dom);
}"
77043,"/** 
 * Returns a copy of this   {@code LocalDate} with the specified period in years subtracted.<p> This method subtracts the specified amount from the years field in three steps: <ol> <li>Subtract the input years to the year field</li> <li>Check if the resulting date would be invalid</li> <li>Adjust the day-of-month to the last valid day if necessary</li> </ol> <p> For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2007-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. <p> This instance is immutable and unaffected by this method call.
 * @param yearsToSubtract  the years to subtract, may be negative
 * @return a {@code LocalDate} based on this date with the years subtracted, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate minusYears(long yearsToSubtract){
  return (yearsToSubtract == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-yearsToSubtract));
}","/** 
 * Returns a copy of this   {@code LocalDate} with the specified number of years subtracted.<p> This method subtracts the specified amount from the years field in three steps: <ol> <li>Subtract the input years from the year field</li> <li>Check if the resulting date would be invalid</li> <li>Adjust the day-of-month to the last valid day if necessary</li> </ol> <p> For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2007-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. <p> This instance is immutable and unaffected by this method call.
 * @param yearsToSubtract  the years to subtract, may be negative
 * @return a {@code LocalDate} based on this date with the years subtracted, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate minusYears(long yearsToSubtract){
  return (yearsToSubtract == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-yearsToSubtract));
}"
77044,"/** 
 * Returns a copy of this   {@code LocalDate} with the specified period in weeks subtracted.<p> This method subtracts the specified amount in weeks from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. <p> For example, 2009-01-07 minus one week would result in 2008-12-31. <p> This instance is immutable and unaffected by this method call.
 * @param weeksToSubtract  the weeks to subtract, may be negative
 * @return a {@code LocalDate} based on this date with the weeks subtracted, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate minusWeeks(long weeksToSubtract){
  return (weeksToSubtract == Long.MIN_VALUE ? plusWeeks(Long.MAX_VALUE).plusWeeks(1) : plusWeeks(-weeksToSubtract));
}","/** 
 * Returns a copy of this   {@code LocalDate} with the specified number of weeks subtracted.<p> This method subtracts the specified amount in weeks from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. <p> For example, 2009-01-07 minus one week would result in 2008-12-31. <p> This instance is immutable and unaffected by this method call.
 * @param weeksToSubtract  the weeks to subtract, may be negative
 * @return a {@code LocalDate} based on this date with the weeks subtracted, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate minusWeeks(long weeksToSubtract){
  return (weeksToSubtract == Long.MIN_VALUE ? plusWeeks(Long.MAX_VALUE).plusWeeks(1) : plusWeeks(-weeksToSubtract));
}"
77045,"/** 
 * Returns a copy of this date with the day-of-year altered. If the resulting date is invalid, an exception is thrown. <p> This instance is immutable and unaffected by this method call.
 * @param dayOfYear  the day-of-year to set in the result, from 1 to 365-366
 * @return a {@code LocalDate} based on this date with the requested day, not null
 * @throws DateTimeException if the day-of-year value is invalid,or if the day-of-year is invalid for the year
 */
public LocalDate withDayOfYear(int dayOfYear){
  if (this.getDayOfYear() == dayOfYear) {
    return this;
  }
  return ofYearDay(year,dayOfYear);
}","/** 
 * Returns a copy of this   {@code LocalDate} with the day-of-year altered.<p> If the resulting date is invalid, an exception is thrown. <p> This instance is immutable and unaffected by this method call.
 * @param dayOfYear  the day-of-year to set in the result, from 1 to 365-366
 * @return a {@code LocalDate} based on this date with the requested day, not null
 * @throws DateTimeException if the day-of-year value is invalid,or if the day-of-year is invalid for the year
 */
public LocalDate withDayOfYear(int dayOfYear){
  if (this.getDayOfYear() == dayOfYear) {
    return this;
  }
  return ofYearDay(year,dayOfYear);
}"
77046,"/** 
 * Gets the value of the specified field from this date as a   {@code long}. <p> This queries this date for the value for the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. <p> If the field is a   {@link ChronoField} then the query is implemented here.The  {@link #isSupported(TemporalField) supported fields} will return validvalues based on this date. All other  {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}. <p> If the field is not a   {@code ChronoField}, then the result of this method is obtained by invoking   {@code TemporalField.getFrom(TemporalAccessor)}passing   {@code this} as the argument. Whether the value can be obtained,and what the value represents, is determined by the field.
 * @param field  the field to get, not null
 * @return the value for the field
 * @throws DateTimeException if a value for the field cannot be obtained
 * @throws UnsupportedTemporalTypeException if the field is not supported
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override public long getLong(TemporalField field){
  if (field instanceof ChronoField) {
    if (field == EPOCH_DAY) {
      return toEpochDay();
    }
    if (field == PROLEPTIC_MONTH) {
      return getProlepticMonth();
    }
    return get0(field);
  }
  return field.getFrom(this);
}","/** 
 * Gets the value of the specified field from this date as a   {@code long}. <p> This queries this date for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. <p> If the field is a   {@link ChronoField} then the query is implemented here.The  {@link #isSupported(TemporalField) supported fields} will return validvalues based on this date. All other  {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}. <p> If the field is not a   {@code ChronoField}, then the result of this method is obtained by invoking   {@code TemporalField.getFrom(TemporalAccessor)}passing   {@code this} as the argument. Whether the value can be obtained,and what the value represents, is determined by the field.
 * @param field  the field to get, not null
 * @return the value for the field
 * @throws DateTimeException if a value for the field cannot be obtained
 * @throws UnsupportedTemporalTypeException if the field is not supported
 * @throws ArithmeticException if numeric overflow occurs
 */
@Override public long getLong(TemporalField field){
  if (field instanceof ChronoField) {
    if (field == EPOCH_DAY) {
      return toEpochDay();
    }
    if (field == PROLEPTIC_MONTH) {
      return getProlepticMonth();
    }
    return get0(field);
  }
  return field.getFrom(this);
}"
77047,"/** 
 * Returns a copy of this   {@code LocalDate} with the specified period in months subtracted.<p> This method subtracts the specified amount from the months field in three steps: <ol> <li>Subtract the input months to the month-of-year field</li> <li>Check if the resulting date would be invalid</li> <li>Adjust the day-of-month to the last valid day if necessary</li> </ol> <p> For example, 2007-03-31 minus one month would result in the invalid date 2007-02-31. Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. <p> This instance is immutable and unaffected by this method call.
 * @param monthsToSubtract  the months to subtract, may be negative
 * @return a {@code LocalDate} based on this date with the months subtracted, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate minusMonths(long monthsToSubtract){
  return (monthsToSubtract == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtract));
}","/** 
 * Returns a copy of this   {@code LocalDate} with the specified number of months subtracted.<p> This method subtracts the specified amount from the months field in three steps: <ol> <li>Subtract the input months from the month-of-year field</li> <li>Check if the resulting date would be invalid</li> <li>Adjust the day-of-month to the last valid day if necessary</li> </ol> <p> For example, 2007-03-31 minus one month would result in the invalid date 2007-02-31. Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. <p> This instance is immutable and unaffected by this method call.
 * @param monthsToSubtract  the months to subtract, may be negative
 * @return a {@code LocalDate} based on this date with the months subtracted, not null
 * @throws DateTimeException if the result exceeds the supported date range
 */
public LocalDate minusMonths(long monthsToSubtract){
  return (monthsToSubtract == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtract));
}"
77048,"public static void main(String[] args) throws Exception {
  ProcessBuilder pb;
  OutputAnalyzer out;
  pb=ProcessTools.createJavaProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  out=new OutputAnalyzer(pb.start());
  out.shouldHaveExitValue(0);
}","public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"");
}"
77049,"/** 
 * Returns a new InputContext instance.
 */
public static InputContext getInstance(){
  return new sun.awt.im.InputMethodContext();
}","/** 
 * Returns a new InputContext instance.
 * @return a new InputContext instance
 */
public static InputContext getInstance(){
  return new sun.awt.im.InputMethodContext();
}"
77050,"/** 
 * Returns the rendering style attributes for the text range, or null.
 * @since 1.3
 */
public Map<TextAttribute,?> getStyle(){
  return style;
}","/** 
 * Returns the rendering style attributes for the text range, or null.
 * @return the rendering style attributes for the text range, or null
 * @since 1.3
 */
public Map<TextAttribute,?> getStyle(){
  return style;
}"
77051,"/** 
 * Returns the variation of the text range.
 */
public int getVariation(){
  return variation;
}","/** 
 * Returns the variation of the text range.
 * @return the variation of the text range
 */
public int getVariation(){
  return variation;
}"
77052,"/** 
 * Returns whether the text range is selected.
 */
public boolean isSelected(){
  return selected;
}","/** 
 * Returns whether the text range is selected.
 * @return whether the text range is selected
 */
public boolean isSelected(){
  return selected;
}"
77053,"/** 
 * Creates an input method event from the arguments given and dispatches it to the client component. For arguments, see   {@link java.awt.event.InputMethodEvent#InputMethodEvent}.
 */
public void dispatchInputMethodEvent(int id,AttributedCharacterIterator text,int committedCharacterCount,TextHitInfo caret,TextHitInfo visiblePosition);","/** 
 * Creates an input method event from the arguments given and dispatches it to the client component. For arguments, see   {@link java.awt.event.InputMethodEvent#InputMethodEvent}.
 * @param id the event type
 * @param text the combined committed and composed text
 * @param committedCharacterCount the number of committed characters in the text
 * @param caret the caret (a.k.a. insertion point); null ifthere's no caret within current composed text
 * @param visiblePosition the position that's most important to bevisible; null if there's no recommendation for a visible position within current composed text
 */
public void dispatchInputMethodEvent(int id,AttributedCharacterIterator text,int committedCharacterCount,TextHitInfo caret,TextHitInfo visiblePosition);"
77054,"/** 
 * Returns whether the list of available locales can change at runtime. This may be the case, for example, for adapters that access real input methods over the network.
 */
boolean hasDynamicLocaleList();","/** 
 * Returns whether the list of available locales can change at runtime. This may be the case, for example, for adapters that access real input methods over the network.
 * @return whether the list of available locales can change atruntime
 */
boolean hasDynamicLocaleList();"
77055,"/** 
 * Returns the user-visible name of the corresponding input method for the given input locale in the language in which the name will be displayed. <p> The inputLocale parameter specifies the locale for which text is input. This parameter can only take values obtained from this descriptor's  {@link #getAvailableLocales} method or null. If it is null, aninput locale independent name for the input method should be returned. <p> If a name for the desired display language is not available, the method may fall back to some other language.
 * @param inputLocale the locale for which text input is supported, or null
 * @param displayLanguage the language in which the name will be displayed
 */
String getInputMethodDisplayName(Locale inputLocale,Locale displayLanguage);","/** 
 * Returns the user-visible name of the corresponding input method for the given input locale in the language in which the name will be displayed. <p> The inputLocale parameter specifies the locale for which text is input. This parameter can only take values obtained from this descriptor's  {@link #getAvailableLocales} method or null. If it is null, aninput locale independent name for the input method should be returned. <p> If a name for the desired display language is not available, the method may fall back to some other language.
 * @param inputLocale the locale for which text input is supported, or null
 * @param displayLanguage the language in which the name will be displayed
 * @return the user-visible name of the corresponding input methodfor the given input locale in the language in which the name will be displayed
 */
String getInputMethodDisplayName(Locale inputLocale,Locale displayLanguage);"
77056,"/** 
 * Requests a GC that best suits this Canvas. The returned GC may differ from the requested GC passed as the argument to this method. This method must return a non-null value (given the argument is non-null as well).
 * @since 1.7
 */
GraphicsConfiguration getAppropriateGraphicsConfiguration(GraphicsConfiguration gc);","/** 
 * Requests a GC that best suits this Canvas. The returned GC may differ from the requested GC passed as the argument to this method. This method must return a non-null value (given the argument is non-null as well).
 * @param gc the requested graphics configuration
 * @return a graphics configuration that best suits this Canvas
 * @since 1.7
 */
GraphicsConfiguration getAppropriateGraphicsConfiguration(GraphicsConfiguration gc);"
77057,"/** 
 * Updates internal data structures related to the component's GC.
 * @return if the peer needs to be recreated for the changes to take effect
 * @since 1.7
 */
boolean updateGraphicsData(GraphicsConfiguration gc);","/** 
 * Updates internal data structures related to the component's GC.
 * @param gc the reference graphics configuration
 * @return if the peer needs to be recreated for the changes to take effect
 * @since 1.7
 */
boolean updateGraphicsData(GraphicsConfiguration gc);"
77058,"/** 
 * Applies the shape to the native component window.
 * @since 1.7
 * @see Component#applyCompoundShape
 */
void applyShape(Region shape);","/** 
 * Applies the shape to the native component window.
 * @param shape the shape to apply
 * @since 1.7
 * @see Component#applyCompoundShape
 */
void applyShape(Region shape);"
77059,"/** 
 * Lowers this component at the bottom of the above HW peer. If the above parameter is null then the method places this component at the top of the Z-order.
 */
void setZOrder(ComponentPeer above);","/** 
 * Lowers this component at the bottom of the above HW peer. If the above parameter is null then the method places this component at the top of the Z-order.
 * @param above the peer to lower this component with respect to
 */
void setZOrder(ComponentPeer above);"
77060,"/** 
 * Returns whether or not the window is located under the mouse pointer. The window is considered to be under the mouse pointer if it is showing on the screen, and the mouse pointer is above the part of the window that is not obscured by any other windows.
 */
boolean isWindowUnderMouse(Window w);","/** 
 * Returns whether or not the window is located under the mouse pointer. The window is considered to be under the mouse pointer if it is showing on the screen, and the mouse pointer is above the part of the window that is not obscured by any other windows.
 * @param w the window to check
 * @return whether or not the window is located under the mousepointer
 */
boolean isWindowUnderMouse(Window w);"
77061,"/** 
 * This method does two things: it fills the point fields with the current coordinates of the mouse cursor and returns the number of the screen device where the pointer is located. The number of the screen device is only returned for independent devices (which are not parts of a virtual screen device). For virtual screen devices, 0 is returned. Mouse coordinates are also calculated depending on whether or not the screen device is virtual. For virtual screen devices, pointer coordinates are calculated in the virtual coordinate system. Otherwise, coordinates are calculated in the coordinate system of the screen device where the pointer is located. See java.awt.GraphicsConfiguration documentation for more details about virtual screen devices.
 */
int fillPointWithCoords(Point point);","/** 
 * This method does two things: it fills the point fields with the current coordinates of the mouse cursor and returns the number of the screen device where the pointer is located. The number of the screen device is only returned for independent devices (which are not parts of a virtual screen device). For virtual screen devices, 0 is returned. Mouse coordinates are also calculated depending on whether or not the screen device is virtual. For virtual screen devices, pointer coordinates are calculated in the virtual coordinate system. Otherwise, coordinates are calculated in the coordinate system of the screen device where the pointer is located. See java.awt.GraphicsConfiguration documentation for more details about virtual screen devices.
 * @param point holder for the current coordinates of the mousecursor
 * @return the number of the screen device where the pointer islocated
 */
int fillPointWithCoords(Point point);"
77062,"/** 
 * Enables the per-pixel alpha support for the window.
 * @see Window#setBackground(Color)
 */
void setOpaque(boolean isOpaque);","/** 
 * Enables the per-pixel alpha support for the window.
 * @param isOpaque whether or not per-pixel alpha support isenabled
 * @see Window#setBackground(Color)
 */
void setOpaque(boolean isOpaque);"
77063,"/** 
 * Sets the level of opacity for the window.
 * @see Window#setOpacity(float)
 */
void setOpacity(float opacity);","/** 
 * Sets the level of opacity for the window.
 * @param opacity the level of opacity
 * @see Window#setOpacity(float)
 */
void setOpacity(float opacity);"
77064,"public native void declareTypes(long[] formats,SunClipboard newOwner);","private native void declareTypes(long[] formats,SunClipboard newOwner);"
77065,"protected void unregisterClipboardViewerChecked(){
}","@Override protected void unregisterClipboardViewerChecked(){
}"
77066,"private void notifyLostOwnership(){
  lostOwnershipImpl();
}","/** 
 * Native Callbacks 
 */
private void notifyLostOwnership(){
  lostOwnershipImpl();
}"
77067,"protected void registerClipboardViewerChecked(){
}","@Override protected void registerClipboardViewerChecked(){
}"
77068,"protected void setContentsNative(Transferable contents){
  DataTransferer dataTransferer=DataTransferer.getInstance();
  long[] formatArray=dataTransferer.getFormatsForTransferableAsArray(contents,flavorMap);
  declareTypes(formatArray,this);
  Map<Long,DataFlavor> formatMap=dataTransferer.getFormatsForTransferable(contents,flavorMap);
  for (  Map.Entry<Long,DataFlavor> entry : formatMap.entrySet()) {
    long format=entry.getKey();
    DataFlavor flavor=entry.getValue();
    try {
      byte[] bytes=DataTransferer.getInstance().translateTransferable(contents,flavor,format);
      setData(bytes,format);
    }
 catch (    IOException e) {
      if (!(flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType) && e instanceof NotSerializableException)) {
        e.printStackTrace();
      }
    }
  }
  notifyChanged();
}","@Override protected void setContentsNative(Transferable contents){
  DataTransferer dataTransferer=DataTransferer.getInstance();
  long[] formatArray=dataTransferer.getFormatsForTransferableAsArray(contents,flavorMap);
  declareTypes(formatArray,this);
  Map<Long,DataFlavor> formatMap=dataTransferer.getFormatsForTransferable(contents,flavorMap);
  for (  Map.Entry<Long,DataFlavor> entry : formatMap.entrySet()) {
    long format=entry.getKey();
    DataFlavor flavor=entry.getValue();
    try {
      byte[] bytes=DataTransferer.getInstance().translateTransferable(contents,flavor,format);
      setData(bytes,format);
    }
 catch (    IOException e) {
      if (!(flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType) && e instanceof NotSerializableException)) {
        e.printStackTrace();
      }
    }
  }
  notifyChanged();
}"
77069,"public native void setData(byte[] data,long format);","private native void setData(byte[] data,long format);"
77070,"/** 
 * Invokes native check whether a change count on the general pasteboard is different than when we set it. The different count value means the current owner lost pasteboard ownership and someone else put data on the clipboard.
 * @since 1.7
 */
public native void checkPasteboard();","/** 
 * Invokes native check whether a change count on the general pasteboard is different than when we set it. The different count value means the current owner lost pasteboard ownership and someone else put data on the clipboard.
 * @since 1.7
 */
native void checkPasteboard();"
77071,"public long getID(){
  return 0;
}","@Override public long getID(){
  return 0;
}"
77072,protected native byte[] getClipboardData(long format) throws IOException ;,@Override protected native byte[] getClipboardData(long format) throws IOException ;
77073,protected native long[] getClipboardFormats();,@Override protected native long[] getClipboardFormats();
77074,"protected void clearNativeContext(){
}","@Override protected void clearNativeContext(){
}"
77075,"/** 
 * Clones the <code>PageFormat</code> argument and alters the clone to describe a default page size and orientation.
 * @param page the <code>PageFormat</code> to be cloned and altered
 * @return clone of <code>page</code>, altered to describe a default<code>PageFormat</code>.
 */
public PageFormat defaultPage(PageFormat page){
  PageFormat newPage=(PageFormat)page.clone();
  getDefaultPage(newPage);
  return newPage;
}","/** 
 * Clones the <code>PageFormat</code> argument and alters the clone to describe a default page size and orientation.
 * @param page the <code>PageFormat</code> to be cloned and altered
 * @return clone of <code>page</code>, altered to describe a default<code>PageFormat</code>.
 */
@Override public PageFormat defaultPage(PageFormat page){
  PageFormat newPage=(PageFormat)page.clone();
  getDefaultPage(newPage);
  return newPage;
}"
77076,"/** 
 * validate the paper size against the current printer.
 */
protected native void validatePaper(Paper origPaper,Paper newPaper);","/** 
 * validate the paper size against the current printer.
 */
@Override protected native void validatePaper(Paper origPaper,Paper newPaper);"
77077,"/** 
 * Called by the print() method at the start of a print job.
 */
protected void startDoc() throws PrinterException {
  throw new PrinterException(sShouldNotReachHere);
}","/** 
 * Called by the print() method at the start of a print job.
 */
@Override protected void startDoc() throws PrinterException {
  throw new PrinterException(sShouldNotReachHere);
}"
77078,"/** 
 * Displays a dialog that allows modification of a <code>PageFormat</code> instance. The <code>page</code> argument is used to initialize controls in the page setup dialog. If the user cancels the dialog then this method returns the original <code>page</code> object unmodified. If the user okays the dialog then this method returns a new <code>PageFormat</code> object with the indicated changes. In either case, the original <code>page</code> object is not modified.
 * @param page the default <code>PageFormat</code> presented to theuser for modification
 * @return    the original <code>page</code> object if the dialogis cancelled; a new <code>PageFormat</code> object containing the format indicated by the user if the dialog is acknowledged.
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.
 * @see java.awt.GraphicsEnvironment#isHeadless
 * @since     1.2
 */
public PageFormat pageDialog(PageFormat page) throws HeadlessException {
  if (GraphicsEnvironment.isHeadless()) {
    throw new HeadlessException();
  }
  if (noDefaultPrinter) {
    return page;
  }
  if (getPrintService() instanceof StreamPrintService) {
    return super.pageDialog(page);
  }
  PageFormat pageClone=(PageFormat)page.clone();
  boolean doIt=pageSetup(pageClone,null);
  return doIt ? pageClone : page;
}","/** 
 * Displays a dialog that allows modification of a <code>PageFormat</code> instance. The <code>page</code> argument is used to initialize controls in the page setup dialog. If the user cancels the dialog then this method returns the original <code>page</code> object unmodified. If the user okays the dialog then this method returns a new <code>PageFormat</code> object with the indicated changes. In either case, the original <code>page</code> object is not modified.
 * @param page the default <code>PageFormat</code> presented to theuser for modification
 * @return    the original <code>page</code> object if the dialogis cancelled; a new <code>PageFormat</code> object containing the format indicated by the user if the dialog is acknowledged.
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.
 * @see java.awt.GraphicsEnvironment#isHeadless
 * @since     1.2
 */
@Override public PageFormat pageDialog(PageFormat page) throws HeadlessException {
  if (GraphicsEnvironment.isHeadless()) {
    throw new HeadlessException();
  }
  if (noDefaultPrinter) {
    return page;
  }
  if (getPrintService() instanceof StreamPrintService) {
    return super.pageDialog(page);
  }
  PageFormat pageClone=(PageFormat)page.clone();
  boolean doIt=pageSetup(pageClone,null);
  return doIt ? pageClone : page;
}"
77079,"protected void setAttributes(PrintRequestAttributeSet attributes) throws PrinterException {
  super.setAttributes(attributes);
  if (attributes == null) {
    return;
  }
  NSPrintInfo nsPrintInfo=(NSPrintInfo)attributes.get(NSPrintInfo.class);
  if (nsPrintInfo != null) {
    fNSPrintInfo=nsPrintInfo.getValue();
  }
  PageRanges pageRangesAttr=(PageRanges)attributes.get(PageRanges.class);
  if (isSupportedValue(pageRangesAttr,attributes)) {
    SunPageSelection rangeSelect=(SunPageSelection)attributes.get(SunPageSelection.class);
    if (rangeSelect == null || rangeSelect == SunPageSelection.RANGE) {
      int[][] range=pageRangesAttr.getMembers();
      setPageRange(range[0][0] - 1,range[0][1] - 1);
    }
  }
}","@Override protected void setAttributes(PrintRequestAttributeSet attributes) throws PrinterException {
  super.setAttributes(attributes);
  if (attributes == null) {
    return;
  }
  NSPrintInfo nsPrintInfo=(NSPrintInfo)attributes.get(NSPrintInfo.class);
  if (nsPrintInfo != null) {
    fNSPrintInfo=nsPrintInfo.getValue();
  }
  PageRanges pageRangesAttr=(PageRanges)attributes.get(PageRanges.class);
  if (isSupportedValue(pageRangesAttr,attributes)) {
    SunPageSelection rangeSelect=(SunPageSelection)attributes.get(SunPageSelection.class);
    if (rangeSelect == null || rangeSelect == SunPageSelection.RANGE) {
      int[][] range=pageRangesAttr.getMembers();
      setPageRange(range[0][0] - 1,range[0][1] - 1);
    }
  }
}"
77080,"/** 
 * Called by the print() method at the end of a print job.
 */
protected void endDoc() throws PrinterException {
  throw new PrinterException(sShouldNotReachHere);
}","/** 
 * Called by the print() method at the end of a print job.
 */
@Override protected void endDoc() throws PrinterException {
  throw new PrinterException(sShouldNotReachHere);
}"
77081,"/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
protected double getPhysicalPageHeight(Paper p){
  return 0;
}","/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
@Override protected double getPhysicalPageHeight(Paper p){
  return 0;
}"
77082,"/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
protected double getPhysicalPrintableY(Paper p){
  return 0;
}","/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
@Override protected double getPhysicalPrintableY(Paper p){
  return 0;
}"
77083,"/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
protected double getPhysicalPrintableX(Paper p){
  return 0;
}","/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
@Override protected double getPhysicalPrintableX(Paper p){
  return 0;
}"
77084,"/** 
 * Returns the resolution in dots per inch down the height of the page.
 */
protected double getYRes(){
  return 0;
}","/** 
 * Returns the resolution in dots per inch down the height of the page.
 */
@Override protected double getYRes(){
  return 0;
}"
77085,"/** 
 * Prints the contents of the array of ints, 'data' to the current page. The band is placed at the location (x, y) in device coordinates on the page. The width and height of the band is specified by the caller.
 */
protected void printBand(byte[] data,int x,int y,int width,int height) throws PrinterException {
  throw new PrinterException(sShouldNotReachHere);
}","/** 
 * Prints the contents of the array of ints, 'data' to the current page. The band is placed at the location (x, y) in device coordinates on the page. The width and height of the band is specified by the caller.
 */
@Override protected void printBand(byte[] data,int x,int y,int width,int height) throws PrinterException {
  throw new PrinterException(sShouldNotReachHere);
}"
77086,"/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
protected double getPhysicalPrintableWidth(Paper p){
  return 0;
}","/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
@Override protected double getPhysicalPrintableWidth(Paper p){
  return 0;
}"
77087,"/** 
 * Presents a dialog to the user for changing the properties of the print job. This method will display a native dialog if a native print service is selected, and user choice of printers will be restricted to these native print services. To present the cross platform print dialog for all services, including native ones instead use <code>printDialog(PrintRequestAttributeSet)</code>. <p> PrinterJob implementations which can use PrintService's will update the PrintService for this PrinterJob to reflect the new service selected by the user.
 * @return <code>true</code> if the user does not cancel the dialog;<code>false</code> otherwise.
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.
 * @see java.awt.GraphicsEnvironment#isHeadless
 */
public boolean printDialog() throws HeadlessException {
  if (GraphicsEnvironment.isHeadless()) {
    throw new HeadlessException();
  }
  if (noDefaultPrinter) {
    return false;
  }
  if (attributes == null) {
    attributes=new HashPrintRequestAttributeSet();
  }
  if (getPrintService() instanceof StreamPrintService) {
    return super.printDialog(attributes);
  }
  return jobSetup(getPageable(),checkAllowedToPrintToFile());
}","/** 
 * Presents a dialog to the user for changing the properties of the print job. This method will display a native dialog if a native print service is selected, and user choice of printers will be restricted to these native print services. To present the cross platform print dialog for all services, including native ones instead use <code>printDialog(PrintRequestAttributeSet)</code>. <p> PrinterJob implementations which can use PrintService's will update the PrintService for this PrinterJob to reflect the new service selected by the user.
 * @return <code>true</code> if the user does not cancel the dialog;<code>false</code> otherwise.
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.
 * @see java.awt.GraphicsEnvironment#isHeadless
 */
@Override public boolean printDialog() throws HeadlessException {
  if (GraphicsEnvironment.isHeadless()) {
    throw new HeadlessException();
  }
  if (noDefaultPrinter) {
    return false;
  }
  if (attributes == null) {
    attributes=new HashPrintRequestAttributeSet();
  }
  if (getPrintService() instanceof StreamPrintService) {
    return super.printDialog(attributes);
  }
  return jobSetup(getPageable(),checkAllowedToPrintToFile());
}"
77088,"public void print(PrintRequestAttributeSet attributes) throws PrinterException {
  PrintService psvc=getPrintService();
  if (psvc instanceof StreamPrintService) {
    spoolToService(psvc,attributes);
    return;
  }
  setAttributes(attributes);
  if (destinationAttr != null) {
    validateDestination(destinationAttr);
  }
  int firstPage=getFirstPage();
  int lastPage=getLastPage();
  if (lastPage == Pageable.UNKNOWN_NUMBER_OF_PAGES) {
    int totalPages=mDocument.getNumberOfPages();
    if (totalPages != Pageable.UNKNOWN_NUMBER_OF_PAGES) {
      lastPage=mDocument.getNumberOfPages() - 1;
    }
  }
  try {
synchronized (this) {
      performingPrinting=true;
      userCancelled=false;
    }
    PageRanges pr=(attributes == null) ? null : (PageRanges)attributes.get(PageRanges.class);
    int[][] prMembers=(pr == null) ? new int[0][0] : pr.getMembers();
    int loopi=0;
    do {
      if (EventQueue.isDispatchThread()) {
        onEventThread=true;
        printingLoop=AccessController.doPrivileged(new PrivilegedAction<SecondaryLoop>(){
          @Override public SecondaryLoop run(){
            return Toolkit.getDefaultToolkit().getSystemEventQueue().createSecondaryLoop();
          }
        }
);
        try {
          if (printLoop(false,firstPage,lastPage)) {
            printingLoop.enter();
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        onEventThread=false;
        try {
          printLoop(true,firstPage,lastPage);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (++loopi < prMembers.length) {
        firstPage=prMembers[loopi][0] - 1;
        lastPage=prMembers[loopi][1] - 1;
      }
    }
 while (loopi < prMembers.length);
  }
  finally {
synchronized (this) {
      performingPrinting=false;
      notify();
    }
    if (printingLoop != null) {
      printingLoop.exit();
    }
  }
}","@Override public void print(PrintRequestAttributeSet attributes) throws PrinterException {
  PrintService psvc=getPrintService();
  if (psvc instanceof StreamPrintService) {
    spoolToService(psvc,attributes);
    return;
  }
  setAttributes(attributes);
  if (destinationAttr != null) {
    validateDestination(destinationAttr);
  }
  int firstPage=getFirstPage();
  int lastPage=getLastPage();
  if (lastPage == Pageable.UNKNOWN_NUMBER_OF_PAGES) {
    int totalPages=mDocument.getNumberOfPages();
    if (totalPages != Pageable.UNKNOWN_NUMBER_OF_PAGES) {
      lastPage=mDocument.getNumberOfPages() - 1;
    }
  }
  try {
synchronized (this) {
      performingPrinting=true;
      userCancelled=false;
    }
    PageRanges pr=(attributes == null) ? null : (PageRanges)attributes.get(PageRanges.class);
    int[][] prMembers=(pr == null) ? new int[0][0] : pr.getMembers();
    int loopi=0;
    do {
      if (EventQueue.isDispatchThread()) {
        onEventThread=true;
        printingLoop=AccessController.doPrivileged(new PrivilegedAction<SecondaryLoop>(){
          @Override public SecondaryLoop run(){
            return Toolkit.getDefaultToolkit().getSystemEventQueue().createSecondaryLoop();
          }
        }
);
        try {
          if (printLoop(false,firstPage,lastPage)) {
            printingLoop.enter();
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        onEventThread=false;
        try {
          printLoop(true,firstPage,lastPage);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (++loopi < prMembers.length) {
        firstPage=prMembers[loopi][0] - 1;
        lastPage=prMembers[loopi][1] - 1;
      }
    }
 while (loopi < prMembers.length);
  }
  finally {
synchronized (this) {
      performingPrinting=false;
      notify();
    }
    if (printingLoop != null) {
      printingLoop.exit();
    }
  }
}"
77089,protected native void abortDoc();,@Override protected native void abortDoc();
77090,"/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
protected double getPhysicalPageWidth(Paper p){
  return 0;
}","/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
@Override protected double getPhysicalPageWidth(Paper p){
  return 0;
}"
77091,"/** 
 * Returns the resolution in dots per inch across the width of the page.
 */
protected double getXRes(){
  return 0;
}","/** 
 * Returns the resolution in dots per inch across the width of the page.
 */
@Override protected double getXRes(){
  return 0;
}"
77092,"protected void finalize(){
  if (fNSPrintInfo != -1) {
    dispose(fNSPrintInfo);
  }
}","@Override protected void finalize(){
  if (fNSPrintInfo != -1) {
    dispose(fNSPrintInfo);
  }
}"
77093,"/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
protected double getPhysicalPrintableHeight(Paper p){
  return 0;
}","/** 
 * Must be obtained from the current printer. Value is in device pixels. Not adjusted for orientation of the paper.
 */
@Override protected double getPhysicalPrintableHeight(Paper p){
  return 0;
}"
77094,"/** 
 * End a page.
 */
protected void endPage(PageFormat format,Printable painter,int index) throws PrinterException {
  throw new PrinterException(sShouldNotReachHere);
}","/** 
 * End a page.
 */
@Override protected void endPage(PageFormat format,Printable painter,int index) throws PrinterException {
  throw new PrinterException(sShouldNotReachHere);
}"
77095,protected native boolean showDialog();,@Override protected native boolean showDialog();
77096,protected native boolean showDialog();,@Override protected native boolean showDialog();
77097,"public static SurfaceData createData(PageFormat pf,long context){
  return new CPrinterSurfaceData(CPrinterGraphicsConfig.getConfig(pf),context);
}","static SurfaceData createData(PageFormat pf,long context){
  return new CPrinterSurfaceData(CPrinterGraphicsConfig.getConfig(pf),context);
}"
77098,"public CPrinterSurfaceData(GraphicsConfiguration gc,long context){
  super(IntRgbPQ,gc.getColorModel(),gc,gc.getBounds());
  initOps(context,this.fGraphicsStates,this.fGraphicsStatesObject,gc.getBounds().width,gc.getBounds().height);
}","private CPrinterSurfaceData(GraphicsConfiguration gc,long context){
  super(IntRgbPQ,gc.getColorModel(),gc,gc.getBounds());
  initOps(context,this.fGraphicsStates,this.fGraphicsStatesObject,gc.getBounds().width,gc.getBounds().height);
}"
77099,"/** 
 * Returns the name of this clipboard object.
 * @see java.awt.Toolkit#getSystemClipboard
 */
public String getName(){
  return name;
}","/** 
 * Returns the name of this clipboard object.
 * @return the name of this clipboard object
 * @see java.awt.Toolkit#getSystemClipboard
 */
public String getName(){
  return name;
}"
77100,"/** 
 * Creates a clipboard object.
 * @see java.awt.Toolkit#getSystemClipboard
 */
public Clipboard(String name){
  this.name=name;
}","/** 
 * Creates a clipboard object.
 * @param name for the clipboard
 * @see java.awt.Toolkit#getSystemClipboard
 */
public Clipboard(String name){
  this.name=name;
}"
77101,"public final Class<?> getDefaultRepresentationClass(){
  return ioInputStreamClass;
}","/** 
 * Returns the default representation class.
 * @return the default representation class
 */
public final Class<?> getDefaultRepresentationClass(){
  return ioInputStreamClass;
}"
77102,"/** 
 * Called on <code>DataFlavor</code> for every MIME Type parameter to allow <code>DataFlavor</code> subclasses to handle special parameters like the text/plain <code>charset</code> parameters, whose values are case insensitive.  (MIME type parameter values are supposed to be case sensitive. <p> This method is called for each parameter name/value pair and should return the normalized representation of the <code>parameterValue</code>. This method is never invoked by this implementation from 1.1 onwards.
 * @deprecated
 */
@Deprecated protected String normalizeMimeTypeParameter(String parameterName,String parameterValue){
  return parameterValue;
}","/** 
 * Called on <code>DataFlavor</code> for every MIME Type parameter to allow <code>DataFlavor</code> subclasses to handle special parameters like the text/plain <code>charset</code> parameters, whose values are case insensitive.  (MIME type parameter values are supposed to be case sensitive. <p> This method is called for each parameter name/value pair and should return the normalized representation of the <code>parameterValue</code>. This method is never invoked by this implementation from 1.1 onwards.
 * @param parameterName the parameter name
 * @param parameterValue the parameter value
 * @return the parameter value
 * @deprecated
 */
@Deprecated protected String normalizeMimeTypeParameter(String parameterName,String parameterValue){
  return parameterValue;
}"
77103,"public final String getDefaultRepresentationClassAsString(){
  return getDefaultRepresentationClass().getName();
}","/** 
 * Returns the name of the default representation class.
 * @return the name of the default representation class
 */
public final String getDefaultRepresentationClassAsString(){
  return getDefaultRepresentationClass().getName();
}"
77104,"/** 
 * Returns whether the representation class for this <code>DataFlavor</code> is <code>java.nio.CharBuffer</code> or a subclass thereof.
 * @since 1.4
 */
public boolean isRepresentationClassCharBuffer(){
  return java.nio.CharBuffer.class.isAssignableFrom(representationClass);
}","/** 
 * Returns whether the representation class for this <code>DataFlavor</code> is <code>java.nio.CharBuffer</code> or a subclass thereof.
 * @return whether or not the representation class for this{@code DataFlavor} is {@code java.nio.CharBuffer} or a subclassthereof
 * @since 1.4
 */
public boolean isRepresentationClassCharBuffer(){
  return java.nio.CharBuffer.class.isAssignableFrom(representationClass);
}"
77105,"/** 
 * Returns whether the representation class for this <code>DataFlavor</code> is <code>java.nio.ByteBuffer</code> or a subclass thereof.
 * @since 1.4
 */
public boolean isRepresentationClassByteBuffer(){
  return java.nio.ByteBuffer.class.isAssignableFrom(representationClass);
}","/** 
 * Returns whether the representation class for this <code>DataFlavor</code> is <code>java.nio.ByteBuffer</code> or a subclass thereof.
 * @return whether or not the representation class for this{@code DataFlavor} is {@code java.nio.ByteBuffer} or a subclassthereof
 * @since 1.4
 */
public boolean isRepresentationClassByteBuffer(){
  return java.nio.ByteBuffer.class.isAssignableFrom(representationClass);
}"
77106,"/** 
 * Called for each MIME type string to give <code>DataFlavor</code> subtypes the opportunity to change how the normalization of MIME types is accomplished.  One possible use would be to add default parameter/value pairs in cases where none are present in the MIME type string passed in. This method is never invoked by this implementation from 1.1 onwards.
 * @deprecated
 */
@Deprecated protected String normalizeMimeType(String mimeType){
  return mimeType;
}","/** 
 * Called for each MIME type string to give <code>DataFlavor</code> subtypes the opportunity to change how the normalization of MIME types is accomplished.  One possible use would be to add default parameter/value pairs in cases where none are present in the MIME type string passed in. This method is never invoked by this implementation from 1.1 onwards.
 * @param mimeType the mime type
 * @return the mime type
 * @deprecated
 */
@Deprecated protected String normalizeMimeType(String mimeType){
  return mimeType;
}"
77107,"/** 
 * Does the <code>DataFlavor</code> represent a serialized object?
 */
public boolean isMimeTypeSerializedObject(){
  return isMimeTypeEqual(javaSerializedObjectMimeType);
}","/** 
 * Does the <code>DataFlavor</code> represent a serialized object?
 * @return whether or not a serialized object is represented
 */
public boolean isMimeTypeSerializedObject(){
  return isMimeTypeEqual(javaSerializedObjectMimeType);
}"
77108,"/** 
 * Does the <code>DataFlavor</code> represent a <code>java.io.InputStream</code>?
 */
public boolean isRepresentationClassInputStream(){
  return ioInputStreamClass.isAssignableFrom(representationClass);
}","/** 
 * Does the <code>DataFlavor</code> represent a <code>java.io.InputStream</code>?
 * @return whether or not this {@code DataFlavor} represent a{@code java.io.InputStream}
 */
public boolean isRepresentationClassInputStream(){
  return ioInputStreamClass.isAssignableFrom(representationClass);
}"
77109,"/** 
 * Returns whether the representation class for this <code>DataFlavor</code> is <code>java.io.Reader</code> or a subclass thereof.
 * @since 1.4
 */
public boolean isRepresentationClassReader(){
  return java.io.Reader.class.isAssignableFrom(representationClass);
}","/** 
 * Returns whether the representation class for this <code>DataFlavor</code> is <code>java.io.Reader</code> or a subclass thereof.
 * @return whether or not the representation class for this{@code DataFlavor} is {@code java.io.Reader} or a subclassthereof
 * @since 1.4
 */
public boolean isRepresentationClassReader(){
  return java.io.Reader.class.isAssignableFrom(representationClass);
}"
77110,"/** 
 * Creates a <code>Transferable</code> capable of transferring the specified <code>String</code>.
 */
public StringSelection(String data){
  this.data=data;
}","/** 
 * Creates a <code>Transferable</code> capable of transferring the specified <code>String</code>.
 * @param data the string to be transferred
 */
public StringSelection(String data){
  this.data=data;
}"
77111,"/** 
 * Returns the default FlavorMap for this thread's ClassLoader.
 */
public static FlavorMap getDefaultFlavorMap(){
  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
  if (contextClassLoader == null) {
    contextClassLoader=ClassLoader.getSystemClassLoader();
  }
  FlavorMap fm;
synchronized (flavorMaps) {
    fm=flavorMaps.get(contextClassLoader);
    if (fm == null) {
      fm=new SystemFlavorMap();
      flavorMaps.put(contextClassLoader,fm);
    }
  }
  return fm;
}","/** 
 * Returns the default FlavorMap for this thread's ClassLoader.
 * @return the default FlavorMap for this thread's ClassLoader
 */
public static FlavorMap getDefaultFlavorMap(){
  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
  if (contextClassLoader == null) {
    contextClassLoader=ClassLoader.getSystemClassLoader();
  }
  FlavorMap fm;
synchronized (flavorMaps) {
    fm=flavorMaps.get(contextClassLoader);
    if (fm == null) {
      fm=new SystemFlavorMap();
      flavorMaps.put(contextClassLoader,fm);
    }
  }
  return fm;
}"
77112,"/** 
 * Decodes a <code>String</code> native for use as a <code>DataFlavor</code>.
 * @param nat the <code>String</code> to decode
 * @return the decoded <code>DataFlavor</code>, or <code>null</code> ifnat is not an encoded <code>String</code> native
 */
public static DataFlavor decodeDataFlavor(String nat) throws ClassNotFoundException {
  String retval_str=SystemFlavorMap.decodeJavaMIMEType(nat);
  return (retval_str != null) ? new DataFlavor(retval_str) : null;
}","/** 
 * Decodes a <code>String</code> native for use as a <code>DataFlavor</code>.
 * @param nat the <code>String</code> to decode
 * @return the decoded <code>DataFlavor</code>, or <code>null</code> ifnat is not an encoded <code>String</code> native
 * @throws ClassNotFoundException if the class of the data flavoris not loaded
 */
public static DataFlavor decodeDataFlavor(String nat) throws ClassNotFoundException {
  String retval_str=SystemFlavorMap.decodeJavaMIMEType(nat);
  return (retval_str != null) ? new DataFlavor(retval_str) : null;
}"
77113,"/** 
 * Returns an object which represents the data to be transferred.  The class of the object returned is defined by the representation class of the flavor.
 * @param flavor the requested flavor for the data
 * @see DataFlavor#getRepresentationClass
 * @exception IOException                if the data is no longer availablein the requested flavor.
 * @exception UnsupportedFlavorException if the requested data flavor isnot supported.
 */
public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException ;","/** 
 * Returns an object which represents the data to be transferred.  The class of the object returned is defined by the representation class of the flavor.
 * @param flavor the requested flavor for the data
 * @return an object which represents the data to be transferred
 * @see DataFlavor#getRepresentationClass
 * @exception IOException                if the data is no longer availablein the requested flavor.
 * @exception UnsupportedFlavorException if the requested data flavor isnot supported.
 */
public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException ;"
77114,"/** 
 * Gets all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>DragSource</code>. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method.
 * @param listenerType the type of listeners requested; this parametershould specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this <code>DragSource</code>, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code>doesn't specify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getDragSourceListeners
 * @see #getDragSourceMotionListeners
 * @since 1.4
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  EventListener l=null;
  if (listenerType == DragSourceListener.class) {
    l=listener;
  }
 else   if (listenerType == DragSourceMotionListener.class) {
    l=motionListener;
  }
  return DnDEventMulticaster.getListeners(l,listenerType);
}","/** 
 * Gets all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>DragSource</code>. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method.
 * @param < T > the type of listener objects
 * @param listenerType the type of listeners requested; this parametershould specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this <code>DragSource</code>, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code>doesn't specify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getDragSourceListeners
 * @see #getDragSourceMotionListeners
 * @since 1.4
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  EventListener l=null;
  if (listenerType == DragSourceListener.class) {
    l=listener;
  }
 else   if (listenerType == DragSourceMotionListener.class) {
    l=motionListener;
  }
  return DnDEventMulticaster.getListeners(l,listenerType);
}"
77115,"/** 
 * Creates a new <code>DragGestureRecognizer</code> that implements the specified abstract subclass of <code>DragGestureRecognizer</code>, and sets the specified <code>Component</code> and <code>DragGestureListener</code> on the newly created object. <P>
 * @param recognizerAbstractClass the requested abstract type
 * @param actions                 the permitted source drag actions
 * @param c                       the <code>Component</code> target
 * @param dgl        the <code>DragGestureListener</code> to notify<P>
 * @return the new <code>DragGestureRecognizer</code> or <code>null</code>if the <code>Toolkit.createDragGestureRecognizer</code> method has no implementation available for the requested <code>DragGestureRecognizer</code> subclass and returns <code>null</code>
 */
public <T extends DragGestureRecognizer>T createDragGestureRecognizer(Class<T> recognizerAbstractClass,Component c,int actions,DragGestureListener dgl){
  return Toolkit.getDefaultToolkit().createDragGestureRecognizer(recognizerAbstractClass,this,c,actions,dgl);
}","/** 
 * Creates a new <code>DragGestureRecognizer</code> that implements the specified abstract subclass of <code>DragGestureRecognizer</code>, and sets the specified <code>Component</code> and <code>DragGestureListener</code> on the newly created object. <P>
 * @param < T > the type of {@code DragGestureRecognizer} to create
 * @param recognizerAbstractClass the requested abstract type
 * @param actions                 the permitted source drag actions
 * @param c                       the <code>Component</code> target
 * @param dgl        the <code>DragGestureListener</code> to notify<P>
 * @return the new <code>DragGestureRecognizer</code> or <code>null</code>if the <code>Toolkit.createDragGestureRecognizer</code> method has no implementation available for the requested <code>DragGestureRecognizer</code> subclass and returns <code>null</code>
 */
public <T extends DragGestureRecognizer>T createDragGestureRecognizer(Class<T> recognizerAbstractClass,Component c,int actions,DragGestureListener dgl){
  return Toolkit.getDefaultToolkit().createDragGestureRecognizer(recognizerAbstractClass,this,c,actions,dgl);
}"
77116,"/** 
 * Creates the DropTargetContext associated with this DropTarget. Subclasses may override this method to instantiate their own DropTargetContext subclass. This call is typically *only* called by the platform's DropTargetContextPeer as a drag operation encounters this DropTarget. Accessing the Context while no Drag is current has undefined results.
 */
protected DropTargetContext createDropTargetContext(){
  return new DropTargetContext(this);
}","/** 
 * Creates the DropTargetContext associated with this DropTarget. Subclasses may override this method to instantiate their own DropTargetContext subclass. This call is typically *only* called by the platform's DropTargetContextPeer as a drag operation encounters this DropTarget. Accessing the Context while no Drag is current has undefined results.
 * @return the DropTargetContext associated with this DropTarget
 */
protected DropTargetContext createDropTargetContext(){
  return new DropTargetContext(this);
}"
77117,"/** 
 * create an embedded autoscroller <P>
 * @param c the <code>Component</code>
 * @param p the <code>Point</code>
 */
protected DropTargetAutoScroller createDropTargetAutoScroller(Component c,Point p){
  return new DropTargetAutoScroller(c,p);
}","/** 
 * create an embedded autoscroller
 * @param c the <code>Component</code>
 * @param p the <code>Point</code>
 * @return an embedded autoscroller
 */
protected DropTargetAutoScroller createDropTargetAutoScroller(Component c,Point p){
  return new DropTargetAutoScroller(c,p);
}"
77118,"/** 
 * return the current drag cursor
 */
Cursor getCursor();","/** 
 * return the current drag cursor
 * @return the current drag cursor
 */
Cursor getCursor();"
77119,"/** 
 * start a drag
 */
void startDrag(DragSourceContext dsc,Cursor c,Image dragImage,Point imageOffset) throws InvalidDnDOperationException ;","/** 
 * start a drag
 * @param dsc the DragSourceContext
 * @param c the cursor
 * @param dragImage the image to be dragged
 * @param imageOffset the offset
 */
void startDrag(DragSourceContext dsc,Cursor c,Image dragImage,Point imageOffset) throws InvalidDnDOperationException ;"
77120,"/** 
 * set the current drag cursor
 */
void setCursor(Cursor c) throws InvalidDnDOperationException ;","/** 
 * set the current drag cursor
 * @param c the cursor
 */
void setCursor(Cursor c) throws InvalidDnDOperationException ;"
77121,"/** 
 * @return if the DragSource Transferable is in the same JVM as the Target
 */
boolean isTransferableJVMLocal();","/** 
 * Return whether or not the DragSource Transferable is in the same JVM as the Target.
 * @return if the DragSource Transferable is in the same JVM as the Target
 */
boolean isTransferableJVMLocal();"
77122,"/** 
 * accept the Drop
 */
void acceptDrop(int dropAction);","/** 
 * accept the Drop
 * @param dropAction the drop action
 */
void acceptDrop(int dropAction);"
77123,"/** 
 * update the peer's notion of the Target's actions
 */
void setTargetActions(int actions);","/** 
 * update the peer's notion of the Target's actions
 * @param actions the actions
 */
void setTargetActions(int actions);"
77124,"/** 
 * get the current Target actions
 */
int getTargetActions();","/** 
 * get the current Target actions
 * @return the current Target actions
 */
int getTargetActions();"
77125,"/** 
 * accept the Drag
 */
void acceptDrag(int dragAction);","/** 
 * accept the Drag
 * @param dragAction the drag action
 */
void acceptDrag(int dragAction);"
77126,"/** 
 * get the DropTarget associated with this peer
 */
DropTarget getDropTarget();","/** 
 * get the DropTarget associated with this peer
 * @return the DropTarget associated with this peer
 */
DropTarget getDropTarget();"
77127,"/** 
 * signal complete
 */
void dropComplete(boolean success);","/** 
 * signal complete
 * @param success the signal
 */
void dropComplete(boolean success);"
77128,"/** 
 * get the (remote) DataFlavors from the peer
 */
DataFlavor[] getTransferDataFlavors();","/** 
 * get the (remote) DataFlavors from the peer
 * @return the (remote) DataFlavors from the peer
 */
DataFlavor[] getTransferDataFlavors();"
77129,"/** 
 * get an input stream to the remote data
 */
Transferable getTransferable() throws InvalidDnDOperationException ;","/** 
 * get an input stream to the remote data
 * @return an input stream to the remote data
 */
Transferable getTransferable() throws InvalidDnDOperationException ;"
77130,"/** 
 * Gets the value of the single specified service attribute. This may be useful to clients which only need the value of one attribute and want to minimize overhead.
 * @param category the category of a PrintServiceAttribute supportedby this service - may not be null.
 * @return the value of the supported attribute or null if theattribute is not supported by this service.
 * @exception NullPointerException if the category is null.
 * @exception IllegalArgumentException (unchecked exception) if <CODE>category</CODE> is not a <code>Class</code> that implements interface {@link javax.print.attribute.PrintServiceAttribute PrintServiceAttribute}.
 */
public <T extends PrintServiceAttribute>T getAttribute(Class<T> category);","/** 
 * Gets the value of the single specified service attribute. This may be useful to clients which only need the value of one attribute and want to minimize overhead.
 * @param < T > the type of the specified service attribute
 * @param category the category of a PrintServiceAttribute supportedby this service - may not be null.
 * @return the value of the supported attribute or null if theattribute is not supported by this service.
 * @exception NullPointerException if the category is null.
 * @exception IllegalArgumentException (unchecked exception) if <CODE>category</CODE> is not a <code>Class</code> that implements interface {@link javax.print.attribute.PrintServiceAttribute PrintServiceAttribute}.
 */
public <T extends PrintServiceAttribute>T getAttribute(Class<T> category);"
77131,"/** 
 * Invoked when an event is dispatched in the AWT.
 */
public void eventDispatched(AWTEvent event);","/** 
 * Invoked when an event is dispatched in the AWT.
 * @param event the event to be processed
 */
public void eventDispatched(AWTEvent event);"
77132,"/** 
 * Invoked when an action occurs.
 */
public void actionPerformed(ActionEvent e);","/** 
 * Invoked when an action occurs.
 * @param e the event to be processed
 */
public void actionPerformed(ActionEvent e);"
77133,"/** 
 * Invoked when the value of the adjustable has changed.
 */
public void adjustmentValueChanged(AdjustmentEvent e);","/** 
 * Invoked when the value of the adjustable has changed.
 * @param e the event to be processed
 */
public void adjustmentValueChanged(AdjustmentEvent e);"
77134,"/** 
 * Invoked when the component has been made invisible.
 */
public void componentHidden(ComponentEvent e);","/** 
 * Invoked when the component has been made invisible.
 * @param e the event to be processed
 */
public void componentHidden(ComponentEvent e);"
77135,"/** 
 * Invoked when the component's size changes.
 */
public void componentResized(ComponentEvent e);","/** 
 * Invoked when the component's size changes.
 * @param e the event to be processed
 */
public void componentResized(ComponentEvent e);"
77136,"/** 
 * Invoked when the component's position changes.
 */
public void componentMoved(ComponentEvent e);","/** 
 * Invoked when the component's position changes.
 * @param e the event to be processed
 */
public void componentMoved(ComponentEvent e);"
77137,"/** 
 * Invoked when the component has been made visible.
 */
public void componentShown(ComponentEvent e);","/** 
 * Invoked when the component has been made visible.
 * @param e the event to be processed
 */
public void componentShown(ComponentEvent e);"
77138,"/** 
 * Invoked when a component has been added to the container.
 */
public void componentAdded(ContainerEvent e);","/** 
 * Invoked when a component has been added to the container.
 * @param e the event to be processed
 */
public void componentAdded(ContainerEvent e);"
77139,"/** 
 * Invoked when a component has been removed from the container.
 */
public void componentRemoved(ContainerEvent e);","/** 
 * Invoked when a component has been removed from the container.
 * @param e the event to be processed
 */
public void componentRemoved(ContainerEvent e);"
77140,"/** 
 * Invoked when a component gains the keyboard focus.
 */
public void focusGained(FocusEvent e);","/** 
 * Invoked when a component gains the keyboard focus.
 * @param e the event to be processed
 */
public void focusGained(FocusEvent e);"
77141,"/** 
 * Invoked when a component loses the keyboard focus.
 */
public void focusLost(FocusEvent e);","/** 
 * Invoked when a component loses the keyboard focus.
 * @param e the event to be processed
 */
public void focusLost(FocusEvent e);"
77142,"/** 
 * Called when an ancestor of the source is moved.
 */
public void ancestorMoved(HierarchyEvent e);","/** 
 * Called when an ancestor of the source is moved.
 * @param e the event to be processed
 */
public void ancestorMoved(HierarchyEvent e);"
77143,"/** 
 * Called when an ancestor of the source is resized.
 */
public void ancestorResized(HierarchyEvent e);","/** 
 * Called when an ancestor of the source is resized.
 * @param e the event to be processed
 */
public void ancestorResized(HierarchyEvent e);"
77144,"/** 
 * Called when the hierarchy has been changed. To discern the actual type of change, call <code>HierarchyEvent.getChangeFlags()</code>.
 * @see HierarchyEvent#getChangeFlags()
 */
public void hierarchyChanged(HierarchyEvent e);","/** 
 * Called when the hierarchy has been changed. To discern the actual type of change, call <code>HierarchyEvent.getChangeFlags()</code>.
 * @param e the event to be processed
 * @see HierarchyEvent#getChangeFlags()
 */
public void hierarchyChanged(HierarchyEvent e);"
77145,"/** 
 * Returns whether or not the Control modifier is down on this event.
 */
public boolean isControlDown(){
  return (modifiers & CTRL_MASK) != 0;
}","/** 
 * Returns whether or not the Control modifier is down on this event.
 * @return whether or not the Control modifier is down on this event
 */
public boolean isControlDown(){
  return (modifiers & CTRL_MASK) != 0;
}"
77146,"/** 
 * Returns whether or not the Meta modifier is down on this event.
 */
public boolean isMetaDown(){
  return (modifiers & META_MASK) != 0;
}","/** 
 * Returns whether or not the Meta modifier is down on this event.
 * @return whether or not the Meta modifier is down on this event
 */
public boolean isMetaDown(){
  return (modifiers & META_MASK) != 0;
}"
77147,"/** 
 * Returns the extended modifier mask for this event. <P> Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix, such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others. <P> Extended modifiers represent the state of all modal keys, such as ALT, CTRL, META, and the mouse buttons just after the event occurred. <P> For example, if the user presses <b>button 1</b> followed by <b>button 2</b>, and then releases them in the same order, the following sequence of events is generated: <PRE> <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK</code> <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK</code> <code>MOUSE_RELEASED</code>: <code>BUTTON2_DOWN_MASK</code> <code>MOUSE_CLICKED</code>:  <code>BUTTON2_DOWN_MASK</code> <code>MOUSE_RELEASED</code>: <code>MOUSE_CLICKED</code>: </PRE> <P> It is not recommended to compare the return value of this method using <code>==</code> because new modifiers can be added in the future. For example, the appropriate way to check that SHIFT and BUTTON1 are down, but CTRL is up is demonstrated by the following code: <PRE> int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK; int offmask = CTRL_DOWN_MASK; if ((event.getModifiersEx() &amp; (onmask | offmask)) == onmask) { ... } </PRE> The above code will work even if new modifiers are added.
 * @since 1.4
 */
public int getModifiersEx(){
  return modifiers & ~JDK_1_3_MODIFIERS;
}","/** 
 * Returns the extended modifier mask for this event. <P> Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix, such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others. <P> Extended modifiers represent the state of all modal keys, such as ALT, CTRL, META, and the mouse buttons just after the event occurred. <P> For example, if the user presses <b>button 1</b> followed by <b>button 2</b>, and then releases them in the same order, the following sequence of events is generated: <PRE> <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK</code> <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK</code> <code>MOUSE_RELEASED</code>: <code>BUTTON2_DOWN_MASK</code> <code>MOUSE_CLICKED</code>:  <code>BUTTON2_DOWN_MASK</code> <code>MOUSE_RELEASED</code>: <code>MOUSE_CLICKED</code>: </PRE> <P> It is not recommended to compare the return value of this method using <code>==</code> because new modifiers can be added in the future. For example, the appropriate way to check that SHIFT and BUTTON1 are down, but CTRL is up is demonstrated by the following code: <PRE> int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK; int offmask = CTRL_DOWN_MASK; if ((event.getModifiersEx() &amp; (onmask | offmask)) == onmask) { ... } </PRE> The above code will work even if new modifiers are added.
 * @return the extended modifier mask for this event
 * @since 1.4
 */
public int getModifiersEx(){
  return modifiers & ~JDK_1_3_MODIFIERS;
}"
77148,"/** 
 * Returns whether or not the Shift modifier is down on this event.
 */
public boolean isShiftDown(){
  return (modifiers & SHIFT_MASK) != 0;
}","/** 
 * Returns whether or not the Shift modifier is down on this event.
 * @return whether or not the Shift modifier is down on this event
 */
public boolean isShiftDown(){
  return (modifiers & SHIFT_MASK) != 0;
}"
77149,"/** 
 * Returns whether or not this event has been consumed.
 * @see #consume
 */
public boolean isConsumed(){
  return consumed;
}","/** 
 * Returns whether or not this event has been consumed.
 * @return whether or not this event has been consumed
 * @see #consume
 */
public boolean isConsumed(){
  return consumed;
}"
77150,"/** 
 * Returns a String describing the extended modifier keys and mouse buttons, such as ""Shift"", ""Button1"", or ""Ctrl+Shift"". These strings can be localized by changing the <code>awt.properties</code> file. <p> Note that passing negative parameter is incorrect, and will cause the returning an unspecified string. Zero parameter means that no modifiers were passed and will cause the returning an empty string.
 * @param modifiers a modifier mask describing the extendedmodifier keys and mouse buttons for the event
 * @return a text description of the combination of extendedmodifier keys and mouse buttons that were held down during the event.
 * @since 1.4
 */
public static String getModifiersExText(int modifiers){
  StringBuilder buf=new StringBuilder();
  if ((modifiers & InputEvent.META_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if ((modifiers & InputEvent.CTRL_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if ((modifiers & InputEvent.ALT_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if ((modifiers & InputEvent.SHIFT_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if ((modifiers & InputEvent.ALT_GRAPH_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  int buttonNumber=1;
  for (  int mask : InputEvent.BUTTON_DOWN_MASK) {
    if ((modifiers & mask) != 0) {
      buf.append(Toolkit.getProperty(""String_Node_Str"" + buttonNumber,""String_Node_Str"" + buttonNumber));
      buf.append(""String_Node_Str"");
    }
    buttonNumber++;
  }
  if (buf.length() > 0) {
    buf.setLength(buf.length() - 1);
  }
  return buf.toString();
}","/** 
 * Returns a String describing the extended modifier keys and mouse buttons, such as ""Shift"", ""Button1"", or ""Ctrl+Shift"". These strings can be localized by changing the <code>awt.properties</code> file. <p> Note that passing negative parameter is incorrect, and will cause the returning an unspecified string. Zero parameter means that no modifiers were passed and will cause the returning an empty string.
 * @return a String describing the extended modifier keys andmouse buttons
 * @param modifiers a modifier mask describing the extendedmodifier keys and mouse buttons for the event
 * @return a text description of the combination of extendedmodifier keys and mouse buttons that were held down during the event.
 * @since 1.4
 */
public static String getModifiersExText(int modifiers){
  StringBuilder buf=new StringBuilder();
  if ((modifiers & InputEvent.META_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if ((modifiers & InputEvent.CTRL_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if ((modifiers & InputEvent.ALT_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if ((modifiers & InputEvent.SHIFT_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if ((modifiers & InputEvent.ALT_GRAPH_DOWN_MASK) != 0) {
    buf.append(Toolkit.getProperty(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  int buttonNumber=1;
  for (  int mask : InputEvent.BUTTON_DOWN_MASK) {
    if ((modifiers & mask) != 0) {
      buf.append(Toolkit.getProperty(""String_Node_Str"" + buttonNumber,""String_Node_Str"" + buttonNumber));
      buf.append(""String_Node_Str"");
    }
    buttonNumber++;
  }
  if (buf.length() > 0) {
    buf.setLength(buf.length() - 1);
  }
  return buf.toString();
}"
77151,"/** 
 * Returns whether or not the AltGraph modifier is down on this event.
 */
public boolean isAltGraphDown(){
  return (modifiers & ALT_GRAPH_MASK) != 0;
}","/** 
 * Returns whether or not the AltGraph modifier is down on this event.
 * @return whether or not the AltGraph modifier is down on this event
 */
public boolean isAltGraphDown(){
  return (modifiers & ALT_GRAPH_MASK) != 0;
}"
77152,"/** 
 * A method to obtain a mask for any existing mouse button. The returned mask may be used for different purposes. Following are some of them: <ul> <li>   {@link java.awt.Robot#mousePress(int) mousePress(buttons)} and{@link java.awt.Robot#mouseRelease(int) mouseRelease(buttons)}<li> as a   {@code modifiers} parameter when creating a new {@link MouseEvent} instance<li> to check  {@link MouseEvent#getModifiersEx() modifiersEx} of existing {@code MouseEvent}</ul>
 * @param button is a number to represent a button starting from 1.For example, <pre> int button = InputEvent.getMaskForButton(1); </pre> will have the same meaning as <pre> int button = InputEvent.getMaskForButton(MouseEvent.BUTTON1); </pre> because  {@link MouseEvent#BUTTON1 MouseEvent.BUTTON1} equals to 1.If a mouse has three enabled buttons(see  {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}) then the values from the left column passed into the method will return corresponding values from the right column: <PRE> <b>button </b>   <b>returned mask</b>  {@link MouseEvent#BUTTON1 BUTTON1}  {@link MouseEvent#BUTTON1_DOWN_MASK BUTTON1_DOWN_MASK}{@link MouseEvent#BUTTON2 BUTTON2}  {@link MouseEvent#BUTTON2_DOWN_MASK BUTTON2_DOWN_MASK}{@link MouseEvent#BUTTON3 BUTTON3}  {@link MouseEvent#BUTTON3_DOWN_MASK BUTTON3_DOWN_MASK}</PRE> If a mouse has more than three enabled buttons then more values are admissible (4, 5, etc.). There is no assigned constants for these extended buttons. The button masks for the extra buttons returned by this method have no assigned names like the first three button masks. <p> This method has the following implementation restriction. It returns masks for a limited number of buttons only. The maximum number is implementation dependent and may vary. This limit is defined by the relevant number of buttons that may hypothetically exist on the mouse but it is greater than the  {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}. <p>
 * @throws IllegalArgumentException if {@code button} is less than zero or greater than the numberof button masks reserved for buttons
 * @since 7.0
 * @see java.awt.MouseInfo#getNumberOfButtons()
 * @see Toolkit#areExtraMouseButtonsEnabled()
 * @see MouseEvent#getModifiers()
 * @see MouseEvent#getModifiersEx()
 */
public static int getMaskForButton(int button){
  if (button <= 0 || button > BUTTON_DOWN_MASK.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + button);
  }
  return BUTTON_DOWN_MASK[button - 1];
}","/** 
 * A method to obtain a mask for any existing mouse button. The returned mask may be used for different purposes. Following are some of them: <ul> <li>   {@link java.awt.Robot#mousePress(int) mousePress(buttons)} and{@link java.awt.Robot#mouseRelease(int) mouseRelease(buttons)}<li> as a   {@code modifiers} parameter when creating a new {@link MouseEvent} instance<li> to check  {@link MouseEvent#getModifiersEx() modifiersEx} of existing {@code MouseEvent}</ul>
 * @param button is a number to represent a button starting from 1.For example, <pre> int button = InputEvent.getMaskForButton(1); </pre> will have the same meaning as <pre> int button = InputEvent.getMaskForButton(MouseEvent.BUTTON1); </pre> because  {@link MouseEvent#BUTTON1 MouseEvent.BUTTON1} equals to 1.If a mouse has three enabled buttons(see  {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}) then the values from the left column passed into the method will return corresponding values from the right column: <PRE> <b>button </b>   <b>returned mask</b>  {@link MouseEvent#BUTTON1 BUTTON1}  {@link MouseEvent#BUTTON1_DOWN_MASK BUTTON1_DOWN_MASK}{@link MouseEvent#BUTTON2 BUTTON2}  {@link MouseEvent#BUTTON2_DOWN_MASK BUTTON2_DOWN_MASK}{@link MouseEvent#BUTTON3 BUTTON3}  {@link MouseEvent#BUTTON3_DOWN_MASK BUTTON3_DOWN_MASK}</PRE> If a mouse has more than three enabled buttons then more values are admissible (4, 5, etc.). There is no assigned constants for these extended buttons. The button masks for the extra buttons returned by this method have no assigned names like the first three button masks. <p> This method has the following implementation restriction. It returns masks for a limited number of buttons only. The maximum number is implementation dependent and may vary. This limit is defined by the relevant number of buttons that may hypothetically exist on the mouse but it is greater than the  {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.
 * @return a mask for an existing mouse button.
 * @throws IllegalArgumentException if {@code button} is less than zero or greater than the numberof button masks reserved for buttons
 * @since 7.0
 * @see java.awt.MouseInfo#getNumberOfButtons()
 * @see Toolkit#areExtraMouseButtonsEnabled()
 * @see MouseEvent#getModifiers()
 * @see MouseEvent#getModifiersEx()
 */
public static int getMaskForButton(int button){
  if (button <= 0 || button > BUTTON_DOWN_MASK.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + button);
  }
  return BUTTON_DOWN_MASK[button - 1];
}"
77153,"/** 
 * Returns the difference in milliseconds between the timestamp of when this event occurred and midnight, January 1, 1970 UTC.
 */
public long getWhen(){
  return when;
}","/** 
 * Returns the difference in milliseconds between the timestamp of when this event occurred and midnight, January 1, 1970 UTC.
 * @return the difference in milliseconds between the timestamp and midnight, January 1, 1970 UTC
 */
public long getWhen(){
  return when;
}"
77154,"/** 
 * Returns the modifier mask for this event.
 */
public int getModifiers(){
  return modifiers & (JDK_1_3_MODIFIERS | HIGH_MODIFIERS);
}","/** 
 * Returns the modifier mask for this event.
 * @return the modifier mask for this event
 */
public int getModifiers(){
  return modifiers & (JDK_1_3_MODIFIERS | HIGH_MODIFIERS);
}"
77155,"/** 
 * Returns whether or not the Alt modifier is down on this event.
 */
public boolean isAltDown(){
  return (modifiers & ALT_MASK) != 0;
}","/** 
 * Returns whether or not the Alt modifier is down on this event.
 * @return whether or not the Alt modifier is down on this event
 */
public boolean isAltDown(){
  return (modifiers & ALT_MASK) != 0;
}"
77156,"/** 
 * Gets the number of committed characters in the text.
 */
public int getCommittedCharacterCount(){
  return committedCharacterCount;
}","/** 
 * Gets the number of committed characters in the text.
 * @return the number of committed characters in the text
 */
public int getCommittedCharacterCount(){
  return committedCharacterCount;
}"
77157,"/** 
 * Invoked when the text entered through an input method has changed.
 */
void inputMethodTextChanged(InputMethodEvent event);","/** 
 * Invoked when the text entered through an input method has changed.
 * @param event the event to be processed
 */
void inputMethodTextChanged(InputMethodEvent event);"
77158,"/** 
 * Invoked when the caret within composed text has changed.
 */
void caretPositionChanged(InputMethodEvent event);","/** 
 * Invoked when the caret within composed text has changed.
 * @param event the event to be processed
 */
void caretPositionChanged(InputMethodEvent event);"
77159,"/** 
 * Invoked when an item has been selected or deselected by the user. The code written for this method performs the operations that need to occur when an item is selected (or deselected).
 */
void itemStateChanged(ItemEvent e);","/** 
 * Invoked when an item has been selected or deselected by the user. The code written for this method performs the operations that need to occur when an item is selected (or deselected).
 * @param e the event to be processed
 */
void itemStateChanged(ItemEvent e);"
77160,"/** 
 * <p> Subclasses can override this method to insert their own subclass of Child without having to override add() or the other Collection methods that add children to the set. </p>
 * @param targetChild the child to create the Child on behalf of
 * @param peer        the peer if the tragetChild and the peer are related by an implementation of BeanContextProxy     * @return Subtype-specific subclass of Child without overriding collection methods
 */
protected BCSChild createBCSChild(Object targetChild,Object peer){
  return new BCSChild(targetChild,peer);
}","/** 
 * <p> Subclasses can override this method to insert their own subclass of Child without having to override add() or the other Collection methods that add children to the set. </p>
 * @param targetChild the child to create the Child on behalf of
 * @param peer        the peer if the tragetChild and the peer are related by an implementation of BeanContextProxy
 * @return Subtype-specific subclass of Child without overriding collection methods
 */
protected BCSChild createBCSChild(Object targetChild,Object peer){
  return new BCSChild(targetChild,peer);
}"
77161,"/** 
 * Move the back buffer to the front buffer.
 * @param x1 the area to be flipped, upper left X coordinate
 * @param y1 the area to be flipped, upper left Y coordinate
 * @param x2 the area to be flipped, lower right X coordinate
 * @param y2 the area to be flipped, lower right Y coordinate
 * @param flipAction the flip action to perform
 * @see Component.FlipBufferStrategy#flip
 */
void flip(int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction);","/** 
 * Move the back buffer to the front buffer.
 * @param x1 the area to be flipped, upper left X coordinate
 * @param y1 the area to be flipped, upper left Y coordinate
 * @param x2 the area to be flipped, lower right X coordinate
 * @param y2 the area to be flipped, lower right Y coordinate
 * @param flipAction the flip action to perform
 */
void flip(int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction);"
77162,"/** 
 * Returns the back buffer as image.
 * @return the back buffer as image
 * @see Component.FlipBufferStrategy#getBackBuffer
 */
Image getBackBuffer();","/** 
 * Returns the back buffer as image.
 * @return the back buffer as image
 */
Image getBackBuffer();"
77163,"/** 
 * Create   {@code numBuffers} flipping buffers with the specifiedbuffer capabilities.
 * @param numBuffers the number of buffers to create
 * @param caps the buffer capabilities
 * @throws AWTException if flip buffering is not supported
 * @see Component.FlipBufferStrategy#createBuffers
 */
void createBuffers(int numBuffers,BufferCapabilities caps) throws AWTException ;","/** 
 * Create   {@code numBuffers} flipping buffers with the specifiedbuffer capabilities.
 * @param numBuffers the number of buffers to create
 * @param caps the buffer capabilities
 * @throws AWTException if flip buffering is not supported
 */
void createBuffers(int numBuffers,BufferCapabilities caps) throws AWTException ;"
77164,"/** 
 * Destroys all created buffers.
 * @see Component.FlipBufferStrategy#destroyBuffers
 */
void destroyBuffers();","/** 
 * Destroys all created buffers.
 */
void destroyBuffers();"
77165,"/** 
 * Block the specified windows. This is used for modal dialogs.
 * @param windows the windows to block
 * @see Dialog#modalShow()
 * @see Dialog#blockWindows()
 */
void blockWindows(java.util.List<Window> windows);","/** 
 * Block the specified windows. This is used for modal dialogs.
 * @param windows the windows to block
 * @see Dialog#modalShow()
 */
void blockWindows(java.util.List<Window> windows);"
77166,"/** 
 * Clears the current global focus owner.
 * @param activeWindow
 * @see KeyboardFocusManager#clearGlobalFocusOwner()
 */
void clearGlobalFocusOwner(Window activeWindow);","/** 
 * Clears the current global focus owner.
 * @param activeWindow the active window
 * @see KeyboardFocusManager#clearGlobalFocusOwner()
 */
void clearGlobalFocusOwner(Window activeWindow);"
77167,"/** 
 * Updates the window's always-on-top state. Sets if the window should always stay on top of all other windows or not.
 * @see Window#getAlwaysOnTop()
 * @see Window#setAlwaysOnTop(boolean)
 */
void updateAlwaysOnTopState();","/** 
 * Updates the window's always-on-top state. Sets if the window should always stay on top of all other windows or not.
 * @see Window#isAlwaysOnTop()
 * @see Window#setAlwaysOnTop(boolean)
 */
void updateAlwaysOnTopState();"
77168,"/** 
 * Reads in a string that has been encoded using a <a href=""../../../java/io/DataInput.html#modified-utf-8"">modified UTF-8</a> format.  The general contract of <code>readUTF</code> is that it reads a representation of a Unicode character string encoded in modified UTF-8 format; this string of characters is then returned as a <code>String</code>. <p> First, two bytes are read and used to construct an unsigned 16-bit integer in the manner of the <code>readUnsignedShort</code> method, using network byte order (regardless of the current byte order setting). This integer value is called the <i>UTF length</i> and specifies the number of additional bytes to be read. These bytes are then converted to characters by considering them in groups. The length of each group is computed from the value of the first byte of the group. The byte following a group, if any, is the first byte of the next group. <p> If the first byte of a group matches the bit pattern <code>0xxxxxxx</code> (where <code>x</code> means ""may be <code>0</code> or <code>1</code>""), then the group consists of just that byte. The byte is zero-extended to form a character. <p> If the first byte of a group matches the bit pattern <code>110xxxxx</code>, then the group consists of that byte <code>a</code> and a second byte <code>b</code>. If there is no byte <code>b</code> (because byte <code>a</code> was the last of the bytes to be read), or if byte <code>b</code> does not match the bit pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, the group is converted to the character: <p> <pre><code> (char)(((a&amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F)) </code></pre> If the first byte of a group matches the bit pattern <code>1110xxxx</code>, then the group consists of that byte <code>a</code> and two more bytes <code>b</code> and <code>c</code>.  If there is no byte <code>c</code> (because byte <code>a</code> was one of the last two of the bytes to be read), or either byte <code>b</code> or byte <code>c</code> does not match the bit pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, the group is converted to the character: <p> <pre><code> (char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F)) </code></pre> If the first byte of a group matches the pattern <code>1111xxxx</code> or the pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown. <p> If end of file is encountered at any time during this entire process, then an <code>java.io.EOFException</code> is thrown. <p> After every group has been converted to a character by this process, the characters are gathered, in the same order in which their corresponding groups were read from the input stream, to form a <code>String</code>, which is returned. <p> The current byte order setting is ignored. <p> The bit offset within the stream is reset to zero before the read occurs. <p><strong>Note:</strong> This method should not be used in the  implementation of image formats that use standard UTF-8, because  the modified UTF-8 used here is incompatible with standard UTF-8.
 * @return a String read from the stream.
 * @exception java.io.EOFException  if this stream reaches the endbefore reading all the bytes.
 * @exception java.io.UTFDataFormatException if the bytes do not representa valid modified UTF-8 encoding of a string.
 * @exception IOException if an I/O error occurs.
 */
String readUTF() throws IOException ;","/** 
 * Reads in a string that has been encoded using a <a href=""../../../java/io/DataInput.html#modified-utf-8"">modified UTF-8</a> format.  The general contract of <code>readUTF</code> is that it reads a representation of a Unicode character string encoded in modified UTF-8 format; this string of characters is then returned as a <code>String</code>. <p> First, two bytes are read and used to construct an unsigned 16-bit integer in the manner of the <code>readUnsignedShort</code> method, using network byte order (regardless of the current byte order setting). This integer value is called the <i>UTF length</i> and specifies the number of additional bytes to be read. These bytes are then converted to characters by considering them in groups. The length of each group is computed from the value of the first byte of the group. The byte following a group, if any, is the first byte of the next group. <p> If the first byte of a group matches the bit pattern <code>0xxxxxxx</code> (where <code>x</code> means ""may be <code>0</code> or <code>1</code>""), then the group consists of just that byte. The byte is zero-extended to form a character. <p> If the first byte of a group matches the bit pattern <code>110xxxxx</code>, then the group consists of that byte <code>a</code> and a second byte <code>b</code>. If there is no byte <code>b</code> (because byte <code>a</code> was the last of the bytes to be read), or if byte <code>b</code> does not match the bit pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, the group is converted to the character: <pre><code> (char)(((a&amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F)) </code></pre> If the first byte of a group matches the bit pattern <code>1110xxxx</code>, then the group consists of that byte <code>a</code> and two more bytes <code>b</code> and <code>c</code>.  If there is no byte <code>c</code> (because byte <code>a</code> was one of the last two of the bytes to be read), or either byte <code>b</code> or byte <code>c</code> does not match the bit pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, the group is converted to the character: <pre><code> (char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F)) </code></pre> If the first byte of a group matches the pattern <code>1111xxxx</code> or the pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown. <p> If end of file is encountered at any time during this entire process, then an <code>java.io.EOFException</code> is thrown. <p> After every group has been converted to a character by this process, the characters are gathered, in the same order in which their corresponding groups were read from the input stream, to form a <code>String</code>, which is returned. <p> The current byte order setting is ignored. <p> The bit offset within the stream is reset to zero before the read occurs. <p><strong>Note:</strong> This method should not be used in the  implementation of image formats that use standard UTF-8, because  the modified UTF-8 used here is incompatible with standard UTF-8.
 * @return a String read from the stream.
 * @exception java.io.EOFException  if this stream reaches the endbefore reading all the bytes.
 * @exception java.io.UTFDataFormatException if the bytes do not representa valid modified UTF-8 encoding of a string.
 * @exception IOException if an I/O error occurs.
 */
String readUTF() throws IOException ;"
77169,"/** 
 * Writes two bytes of length information to the output stream in network byte order, followed by the <a href=""../../../java/io/DataInput.html#modified-utf-8"">modified UTF-8</a> representation of every character in the string <code>s</code>. If <code>s</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.  Each character in the string <code>s</code> is converted to a group of one, two, or three bytes, depending on the value of the character. <p> If a character <code>c</code> is in the range <code>&#92;u0001</code> through <code>&#92;u007f</code>, it is represented by one byte: <p><pre> (byte)c </pre> <p> If a character <code>c</code> is <code>&#92;u0000</code> or is in the range <code>&#92;u0080</code> through <code>&#92;u07ff</code>, then it is represented by two bytes, to be written in the order shown: <p> <pre><code> (byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6))) (byte)(0x80 | (0x3f &amp; c)) </code></pre> <p> If a character <code>c</code> is in the range <code>&#92;u0800</code> through <code>uffff</code>, then it is represented by three bytes, to be written in the order shown: <p> <pre><code> (byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12))) (byte)(0x80 | (0x3f &amp; (c &gt;&gt; 6))) (byte)(0x80 | (0x3f &amp; c)) </code></pre> <p> First, the total number of bytes needed to represent all the characters of <code>s</code> is calculated. If this number is larger than <code>65535</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, this length is written to the output stream in exactly the manner of the <code>writeShort</code> method; after this, the one-, two-, or three-byte representation of each character in the string <code>s</code> is written. <p> The current byte order setting is ignored. <p> If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first.  The bit offset will be 0 after the write. <p><strong>Note:</strong> This method should not be used in the  implementation of image formats that use standard UTF-8, because  the modified UTF-8 used here is incompatible with standard UTF-8.
 * @param s a <code>String</code> containing the value to bewritten.
 * @exception NullPointerException if <code>s</code> is<code>null</code>.
 * @exception java.io.UTFDataFormatException if the modified UTF-8representation of <code>s</code> requires more than 65536 bytes.
 * @exception IOException if an I/O error occurs.
 */
void writeUTF(String s) throws IOException ;","/** 
 * Writes two bytes of length information to the output stream in network byte order, followed by the <a href=""../../../java/io/DataInput.html#modified-utf-8"">modified UTF-8</a> representation of every character in the string <code>s</code>. If <code>s</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.  Each character in the string <code>s</code> is converted to a group of one, two, or three bytes, depending on the value of the character. <p> If a character <code>c</code> is in the range <code>&#92;u0001</code> through <code>&#92;u007f</code>, it is represented by one byte: <pre> (byte)c </pre> <p> If a character <code>c</code> is <code>&#92;u0000</code> or is in the range <code>&#92;u0080</code> through <code>&#92;u07ff</code>, then it is represented by two bytes, to be written in the order shown: <pre><code> (byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6))) (byte)(0x80 | (0x3f &amp; c)) </code></pre> <p> If a character <code>c</code> is in the range <code>&#92;u0800</code> through <code>uffff</code>, then it is represented by three bytes, to be written in the order shown: <pre><code> (byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12))) (byte)(0x80 | (0x3f &amp; (c &gt;&gt; 6))) (byte)(0x80 | (0x3f &amp; c)) </code></pre> <p> First, the total number of bytes needed to represent all the characters of <code>s</code> is calculated. If this number is larger than <code>65535</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, this length is written to the output stream in exactly the manner of the <code>writeShort</code> method; after this, the one-, two-, or three-byte representation of each character in the string <code>s</code> is written. <p> The current byte order setting is ignored. <p> If the bit offset within the stream is non-zero, the remainder of the current byte is padded with 0s and written out first.  The bit offset will be 0 after the write. <p><strong>Note:</strong> This method should not be used in the  implementation of image formats that use standard UTF-8, because  the modified UTF-8 used here is incompatible with standard UTF-8.
 * @param s a <code>String</code> containing the value to bewritten.
 * @exception NullPointerException if <code>s</code> is<code>null</code>.
 * @exception java.io.UTFDataFormatException if the modified UTF-8representation of <code>s</code> requires more than 65536 bytes.
 * @exception IOException if an I/O error occurs.
 */
void writeUTF(String s) throws IOException ;"
77170,"public void run(){
  Invoker.GroupAndInvokeCount myGroupAndInvokeCount=Invoker.getGroupAndInvokeCount();
  final boolean isPooledThread=(myGroupAndInvokeCount != null);
  boolean replaceMe=false;
  Event ev;
  try {
    for (; ; ) {
      if (isPooledThread)       myGroupAndInvokeCount.resetInvokeCount();
      try {
        replaceMe=false;
        ev=queue.take();
        if (ev == NEED_TO_POLL) {
          try {
            ev=poll();
          }
 catch (          IOException x) {
            x.printStackTrace();
            return;
          }
        }
      }
 catch (      InterruptedException x) {
        continue;
      }
      if (ev == EXECUTE_TASK_OR_SHUTDOWN) {
        Runnable task=pollTask();
        if (task == null) {
          return;
        }
        replaceMe=true;
        task.run();
        continue;
      }
      try {
        ev.channel().onEvent(ev.events(),isPooledThread);
      }
 catch (      Error x) {
        replaceMe=true;
        throw x;
      }
catch (      RuntimeException x) {
        replaceMe=true;
        throw x;
      }
    }
  }
  finally {
    int remaining=threadExit(this,replaceMe);
    if (remaining == 0 && isShutdown()) {
      implClose();
    }
  }
}","public void run(){
  Invoker.GroupAndInvokeCount myGroupAndInvokeCount=Invoker.getGroupAndInvokeCount();
  final boolean isPooledThread=(myGroupAndInvokeCount != null);
  boolean replaceMe=false;
  Event ev;
  try {
    for (; ; ) {
      if (isPooledThread)       myGroupAndInvokeCount.resetInvokeCount();
      try {
        replaceMe=false;
        ev=queue.take();
        if (ev == NEED_TO_POLL) {
          try {
            ev=poll();
          }
 catch (          IOException x) {
            x.printStackTrace();
            return;
          }
        }
      }
 catch (      InterruptedException x) {
        continue;
      }
      if (ev == CONTINUE_AFTER_CTL_EVENT) {
        continue;
      }
      if (ev == EXECUTE_TASK_OR_SHUTDOWN) {
        Runnable task=pollTask();
        if (task == null) {
          return;
        }
        replaceMe=true;
        task.run();
        continue;
      }
      try {
        ev.channel().onEvent(ev.events(),isPooledThread);
      }
 catch (      Error x) {
        replaceMe=true;
        throw x;
      }
catch (      RuntimeException x) {
        replaceMe=true;
        throw x;
      }
    }
  }
  finally {
    int remaining=threadExit(this,replaceMe);
    if (remaining == 0 && isShutdown()) {
      implClose();
    }
  }
}"
77171,"private Event poll() throws IOException {
  try {
    for (; ; ) {
      int n;
      controlLock.lock();
      try {
        n=pollsetPoll(pollset,address,MAX_POLL_EVENTS);
      }
  finally {
        controlLock.unlock();
      }
      fdToChannelLock.readLock().lock();
      try {
        while (n-- > 0) {
          long eventAddress=getEvent(address,n);
          int fd=getDescriptor(eventAddress);
          pollsetCtl(pollset,PS_DELETE,fd,0);
          if (fd == sp[0]) {
            if (wakeupCount.decrementAndGet() == 0) {
              drain1(sp[0]);
            }
            pollsetCtl(pollset,PS_ADD,sp[0],Net.POLLIN);
            if (n > 0) {
              queue.offer(EXECUTE_TASK_OR_SHUTDOWN);
              continue;
            }
            return EXECUTE_TASK_OR_SHUTDOWN;
          }
          if (fd == ctlSp[0]) {
synchronized (controlQueue) {
              drain1(ctlSp[0]);
              pollsetCtl(pollset,PS_ADD,ctlSp[0],Net.POLLIN);
              processControlQueue();
            }
            continue;
          }
          PollableChannel channel=fdToChannel.get(fd);
          if (channel != null) {
            int events=getRevents(eventAddress);
            Event ev=new Event(channel,events);
            if (n > 0) {
              queue.offer(ev);
            }
 else {
              return ev;
            }
          }
        }
      }
  finally {
        fdToChannelLock.readLock().unlock();
      }
    }
  }
  finally {
    queue.offer(NEED_TO_POLL);
  }
}","private Event poll() throws IOException {
  try {
    for (; ; ) {
      int n;
      controlLock.lock();
      try {
        n=pollsetPoll(pollset,address,MAX_POLL_EVENTS);
      }
  finally {
        controlLock.unlock();
      }
      fdToChannelLock.readLock().lock();
      try {
        while (n-- > 0) {
          long eventAddress=getEvent(address,n);
          int fd=getDescriptor(eventAddress);
          if (fd != sp[0] && fd != ctlSp[0]) {
synchronized (controlQueue) {
              pollsetCtl(pollset,PS_DELETE,fd,0);
            }
          }
          if (fd == sp[0]) {
            if (wakeupCount.decrementAndGet() == 0) {
              drain1(sp[0]);
            }
            if (n > 0) {
              queue.offer(EXECUTE_TASK_OR_SHUTDOWN);
              continue;
            }
            return EXECUTE_TASK_OR_SHUTDOWN;
          }
          if (fd == ctlSp[0]) {
synchronized (controlQueue) {
              drain1(ctlSp[0]);
              processControlQueue();
            }
            if (n > 0) {
              continue;
            }
            return CONTINUE_AFTER_CTL_EVENT;
          }
          PollableChannel channel=fdToChannel.get(fd);
          if (channel != null) {
            int events=getRevents(eventAddress);
            Event ev=new Event(channel,events);
            if (n > 0) {
              queue.offer(ev);
            }
 else {
              return ev;
            }
          }
        }
      }
  finally {
        fdToChannelLock.readLock().unlock();
      }
    }
  }
  finally {
    queue.offer(NEED_TO_POLL);
  }
}"
77172,"/** 
 * restore the state of this object from stream including the scope information, only if the scoped interface name is valid on this system
 */
private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
  NetworkInterface scope_ifname=null;
  if (getClass().getClassLoader() != null) {
    throw new SecurityException(""String_Node_Str"");
  }
  ObjectInputStream.GetField gf=s.readFields();
  byte[] ipaddress=(byte[])gf.get(""String_Node_Str"",null);
  int scope_id=(int)gf.get(""String_Node_Str"",-1);
  boolean scope_id_set=(boolean)gf.get(""String_Node_Str"",false);
  boolean scope_ifname_set=(boolean)gf.get(""String_Node_Str"",false);
  String ifname=(String)gf.get(""String_Node_Str"",null);
  if (ifname != null && !""String_Node_Str"".equals(ifname)) {
    try {
      scope_ifname=NetworkInterface.getByName(ifname);
      if (scope_ifname == null) {
        scope_id_set=false;
        scope_ifname_set=false;
        scope_id=0;
      }
 else {
        scope_ifname_set=true;
        try {
          scope_id=deriveNumericScope(ipaddress,scope_ifname);
        }
 catch (        UnknownHostException e) {
        }
      }
    }
 catch (    SocketException e) {
    }
  }
  ipaddress=ipaddress.clone();
  if (ipaddress.length != INADDRSZ) {
    throw new InvalidObjectException(""String_Node_Str"" + ipaddress.length);
  }
  if (holder.getFamily() != IPv6) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  Inet6AddressHolder h=new Inet6AddressHolder(ipaddress,scope_id,scope_id_set,scope_ifname,scope_ifname_set);
  UNSAFE.putObject(this,FIELDS_OFFSET,h);
}","/** 
 * restore the state of this object from stream including the scope information, only if the scoped interface name is valid on this system
 */
private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
  NetworkInterface scope_ifname=null;
  if (getClass().getClassLoader() != null) {
    throw new SecurityException(""String_Node_Str"");
  }
  ObjectInputStream.GetField gf=s.readFields();
  byte[] ipaddress=(byte[])gf.get(""String_Node_Str"",null);
  int scope_id=gf.get(""String_Node_Str"",-1);
  boolean scope_id_set=gf.get(""String_Node_Str"",false);
  boolean scope_ifname_set=gf.get(""String_Node_Str"",false);
  String ifname=(String)gf.get(""String_Node_Str"",null);
  if (ifname != null && !""String_Node_Str"".equals(ifname)) {
    try {
      scope_ifname=NetworkInterface.getByName(ifname);
      if (scope_ifname == null) {
        scope_id_set=false;
        scope_ifname_set=false;
        scope_id=0;
      }
 else {
        scope_ifname_set=true;
        try {
          scope_id=deriveNumericScope(ipaddress,scope_ifname);
        }
 catch (        UnknownHostException e) {
        }
      }
    }
 catch (    SocketException e) {
    }
  }
  ipaddress=ipaddress.clone();
  if (ipaddress.length != INADDRSZ) {
    throw new InvalidObjectException(""String_Node_Str"" + ipaddress.length);
  }
  if (holder.getFamily() != IPv6) {
    throw new InvalidObjectException(""String_Node_Str"");
  }
  Inet6AddressHolder h=new Inet6AddressHolder(ipaddress,scope_id,scope_id_set,scope_ifname,scope_ifname_set);
  UNSAFE.putObject(this,FIELDS_OFFSET,h);
}"
77173,"/** 
 * Returns the pre-digested input stream, if <a href=""XMLSignContext.html#Supported Properties"">reference caching</a> is enabled. This is the input to the digest operation during a validation or signing operation.
 * @return an input stream containing the pre-digested input, or<code>null</code> if reference caching is not enabled or this reference has not been generated or validated
 */
InputStream getDigestInputStream();","/** 
 * Returns the pre-digested input stream, if <a href=""XMLSignContext.html#Supported%20Properties"">reference caching</a> is enabled. This is the input to the digest operation during a validation or signing operation.
 * @return an input stream containing the pre-digested input, or<code>null</code> if reference caching is not enabled or this reference has not been generated or validated
 */
InputStream getDigestInputStream();"
77174,"/** 
 * Returns the dereferenced data, if <a href=""XMLSignContext.html#Supported Properties"">reference caching</a> is enabled. This is the result of dereferencing the URI of this reference during a validation or generation operation.
 * @return the dereferenced data, or <code>null</code> if referencecaching is not enabled or this reference has not been generated or validated
 */
Data getDereferencedData();","/** 
 * Returns the dereferenced data, if <a href=""XMLSignContext.html#Supported%20Properties"">reference caching</a> is enabled. This is the result of dereferencing the URI of this reference during a validation or generation operation.
 * @return the dereferenced data, or <code>null</code> if referencecaching is not enabled or this reference has not been generated or validated
 */
Data getDereferencedData();"
77175,"/** 
 * Returns a valid scripting language executable program with given statements. For instance an implementation for a PHP engine might be: <p> <pre>  {@code}public String getProgram(String... statements)  String retval = ""<?\n""; int len = statements.length; for (int i = 0; i < len; i++) { retval += statements[i] + "";\n""; } return retval += ""?>""; } }</pre>
 * @param statements The statements to be executed.  May be return values ofcalls to the <code>getMethodCallSyntax</code> and <code>getOutputStatement</code> methods.
 * @return The Program
 */
public String getProgram(String... statements);","/** 
 * Returns a valid scripting language executable program with given statements. For instance an implementation for a PHP engine might be: <pre>  {@code}public String getProgram(String... statements)  String retval = ""<?\n""; int len = statements.length; for (int i = 0; i < len; i++) { retval += statements[i] + "";\n""; } return retval += ""?>""; } }</pre>
 * @param statements The statements to be executed.  May be return values ofcalls to the <code>getMethodCallSyntax</code> and <code>getOutputStatement</code> methods.
 * @return The Program
 */
public String getProgram(String... statements);"
77176,"/** 
 * Returns a String that can be used as a statement to display the specified String  using the syntax of the supported scripting language.  For instance, the implementation for a Perl engine might be; <p> <pre><code> public String getOutputStatement(String toDisplay) { return ""print("" + toDisplay + "")""; } </code></pre>
 * @param toDisplay The String to be displayed by the returned statement.
 * @return The string used to display the String in the syntax of the scripting language.
 */
public String getOutputStatement(String toDisplay);","/** 
 * Returns a String that can be used as a statement to display the specified String  using the syntax of the supported scripting language.  For instance, the implementation for a Perl engine might be; <pre><code> public String getOutputStatement(String toDisplay) { return ""print("" + toDisplay + "")""; } </code></pre>
 * @param toDisplay The String to be displayed by the returned statement.
 * @return The string used to display the String in the syntax of the scripting language.
 */
public String getOutputStatement(String toDisplay);"
77177,"/** 
 * Returns a String which can be used to invoke a method of a  Java object using the syntax of the supported scripting language.  For instance, an implementation for a Javascript engine might be; <p> <pre>  {@code public String getMethodCallSyntax(String obj,}String m, String... args)  String ret = obj; ret += ""."" + m + ""(""; for (int i = 0; i < args.length; i++) { ret += args[i]; if (i < args.length - 1) { ret += "",""; } } ret += "")""; return ret; } } </pre> <p>
 * @param obj The name representing the object whose method is to be invoked. Thename is the one used to create bindings using the <code>put</code> method of <code>ScriptEngine</code>, the <code>put</code> method of an <code>ENGINE_SCOPE</code> <code>Bindings</code>,or the <code>setAttribute</code> method of <code>ScriptContext</code>.  The identifier used in scripts may be a decorated form of the specified one.
 * @param m The name of the method to invoke.
 * @param args names of the arguments in the method call.
 * @return The String used to invoke the method in the syntax of the scripting language.
 */
public String getMethodCallSyntax(String obj,String m,String... args);","/** 
 * Returns a String which can be used to invoke a method of a  Java object using the syntax of the supported scripting language.  For instance, an implementation for a Javascript engine might be; <pre>  {@code public String getMethodCallSyntax(String obj,}String m, String... args)  String ret = obj; ret += ""."" + m + ""(""; for (int i = 0; i < args.length; i++) { ret += args[i]; if (i < args.length - 1) { ret += "",""; } } ret += "")""; return ret; } } </pre> <p>
 * @param obj The name representing the object whose method is to be invoked. Thename is the one used to create bindings using the <code>put</code> method of <code>ScriptEngine</code>, the <code>put</code> method of an <code>ENGINE_SCOPE</code> <code>Bindings</code>,or the <code>setAttribute</code> method of <code>ScriptContext</code>.  The identifier used in scripts may be a decorated form of the specified one.
 * @param m The name of the method to invoke.
 * @param args names of the arguments in the method call.
 * @return The String used to invoke the method in the syntax of the scripting language.
 */
public String getMethodCallSyntax(String obj,String m,String... args);"
77178,"/** 
 * Overwrites the Transform in the <code>Graphics2D</code> context. WARNING: This method should <b>never</b> be used to apply a new coordinate transform on top of an existing transform because the <code>Graphics2D</code> might already have a transform that is needed for other purposes, such as rendering Swing components or applying a scaling transformation to adjust for the resolution of a printer. <p>To add a coordinate transform, use the <code>transform</code>, <code>rotate</code>, <code>scale</code>, or <code>shear</code> methods.  The <code>setTransform</code> method is intended only for restoring the original <code>Graphics2D</code> transform after rendering, as shown in this example: <pre><blockquote> // Get the current transform AffineTransform saveAT = g2.getTransform(); // Perform transformation g2d.transform(...); // Render g2d.draw(...); // Restore original transform g2d.setTransform(saveAT); </blockquote></pre>
 * @param Tx the <code>AffineTransform</code> that was retrievedfrom the <code>getTransform</code> method
 * @see #transform
 * @see #getTransform
 * @see AffineTransform
 */
public abstract void setTransform(AffineTransform Tx);","/** 
 * Overwrites the Transform in the <code>Graphics2D</code> context. WARNING: This method should <b>never</b> be used to apply a new coordinate transform on top of an existing transform because the <code>Graphics2D</code> might already have a transform that is needed for other purposes, such as rendering Swing components or applying a scaling transformation to adjust for the resolution of a printer. <p>To add a coordinate transform, use the <code>transform</code>, <code>rotate</code>, <code>scale</code>, or <code>shear</code> methods.  The <code>setTransform</code> method is intended only for restoring the original <code>Graphics2D</code> transform after rendering, as shown in this example: <pre> // Get the current transform AffineTransform saveAT = g2.getTransform(); // Perform transformation g2d.transform(...); // Render g2d.draw(...); // Restore original transform g2d.setTransform(saveAT); </pre>
 * @param Tx the <code>AffineTransform</code> that was retrievedfrom the <code>getTransform</code> method
 * @see #transform
 * @see #getTransform
 * @see AffineTransform
 */
public abstract void setTransform(AffineTransform Tx);"
77179,"/** 
 * Gets a property of this image by name. <p> Individual property names are defined by the various image formats. If a property is not defined for a particular image, this method returns the <code>UndefinedProperty</code> object. <p> If the properties for this image are not yet known, this method returns <code>null</code>, and the <code>ImageObserver</code> object is notified later. <p> The property name <code>""comment""</code> should be used to store an optional comment which can be presented to the application as a description of the image, its source, or its author.
 * @param name   a property name.
 * @param observer   an object waiting for this image to be loaded.
 * @return      the value of the named property.
 * @throws      <code>NullPointerException</code> if the property name is null.
 * @see java.awt.image.ImageObserver
 * @see java.awt.Image#UndefinedProperty
 */
public abstract Object getProperty(String name,ImageObserver observer);","/** 
 * Gets a property of this image by name. <p> Individual property names are defined by the various image formats. If a property is not defined for a particular image, this method returns the <code>UndefinedProperty</code> object. <p> If the properties for this image are not yet known, this method returns <code>null</code>, and the <code>ImageObserver</code> object is notified later. <p> The property name <code>""comment""</code> should be used to store an optional comment which can be presented to the application as a description of the image, its source, or its author.
 * @param name   a property name.
 * @param observer   an object waiting for this image to be loaded.
 * @return      the value of the named property.
 * @throws NullPointerException if the property name is null.
 * @see java.awt.image.ImageObserver
 * @see java.awt.Image#UndefinedProperty
 */
public abstract Object getProperty(String name,ImageObserver observer);"
77180,"/** 
 * Returns <code>true</code> if this <code>RenderingHints</code> contains a mapping for the specified key.
 * @param key key whose presence in this<code>RenderingHints</code> is to be tested.
 * @return <code>true</code> if this <code>RenderingHints</code>contains a mapping for the specified key.
 * @exception <code>ClassCastException</code> if the key can notbe cast to <code>RenderingHints.Key</code>
 */
public boolean containsKey(Object key){
  return hintmap.containsKey((Key)key);
}","/** 
 * Returns   {@code true} if this {@code RenderingHints}contains a mapping for the specified key.
 * @param key key whose presence in this{@code RenderingHints} is to be tested.
 * @return {@code true} if this {@code RenderingHints}contains a mapping for the specified key.
 * @exception ClassCastException if the key can notbe cast to  {@code RenderingHints.Key}
 */
public boolean containsKey(Object key){
  return hintmap.containsKey((Key)key);
}"
77181,"/** 
 * Maps the specified <code>key</code> to the specified <code>value</code> in this <code>RenderingHints</code> object. Neither the key nor the value can be <code>null</code>. The value can be retrieved by calling the <code>get</code> method with a key that is equal to the original key.
 * @param key     the rendering hint key.
 * @param value   the rendering hint value.
 * @return     the previous value of the specified key in this objector <code>null</code> if it did not have one.
 * @exception <code>NullPointerException</code> if the key is<code>null</code>.
 * @exception <code>ClassCastException</code> if the key can notbe cast to <code>RenderingHints.Key</code>
 * @exception <code>IllegalArgumentException</code> if the{@link Key#isCompatibleValue(java.lang.Object) Key.isCompatibleValue()}method of the specified key returns false for the specified value
 * @see #get(Object)
 */
public Object put(Object key,Object value){
  if (!((Key)key).isCompatibleValue(value)) {
    throw new IllegalArgumentException(value + ""String_Node_Str"" + key);
  }
  return hintmap.put((Key)key,value);
}","/** 
 * Maps the specified   {@code key} to the specified{@code value} in this {@code RenderingHints} object.Neither the key nor the value can be  {@code null}. The value can be retrieved by calling the   {@code get} methodwith a key that is equal to the original key.
 * @param key     the rendering hint key.
 * @param value   the rendering hint value.
 * @return     the previous value of the specified key in this objector  {@code null} if it did not have one.
 * @exception NullPointerException if the key is{@code null}.
 * @exception ClassCastException if the key can notbe cast to  {@code RenderingHints.Key}
 * @exception IllegalArgumentException if the{@link Key#isCompatibleValue(java.lang.Object) Key.isCompatibleValue()}method of the specified key returns false for the specified value
 * @see #get(Object)
 */
public Object put(Object key,Object value){
  if (!((Key)key).isCompatibleValue(value)) {
    throw new IllegalArgumentException(value + ""String_Node_Str"" + key);
  }
  return hintmap.put((Key)key,value);
}"
77182,"/** 
 * Removes the key and its corresponding value from this <code>RenderingHints</code> object. This method does nothing if the key is not in this <code>RenderingHints</code> object.
 * @param key   the rendering hints key that needs to be removed
 * @exception <code>ClassCastException</code> if the key can notbe cast to <code>RenderingHints.Key</code>
 * @return  the value to which the key had previously been mapped in this<code>RenderingHints</code> object, or <code>null</code> if the key did not have a mapping.
 */
public Object remove(Object key){
  return hintmap.remove((Key)key);
}","/** 
 * Removes the key and its corresponding value from this  {@code RenderingHints} object. This method does nothing if thekey is not in this  {@code RenderingHints} object.
 * @param key   the rendering hints key that needs to be removed
 * @exception ClassCastException if the key can notbe cast to  {@code RenderingHints.Key}
 * @return  the value to which the key had previously been mapped in this{@code RenderingHints} object, or {@code null}if the key did not have a mapping.
 */
public Object remove(Object key){
  return hintmap.remove((Key)key);
}"
77183,"/** 
 * Returns the value to which the specified key is mapped.
 * @param key   a rendering hint key
 * @return  the value to which the key is mapped in this object or<code>null</code> if the key is not mapped to any value in this object.
 * @exception <code>ClassCastException</code> if the key can notbe cast to <code>RenderingHints.Key</code>
 * @see #put(Object,Object)
 */
public Object get(Object key){
  return hintmap.get((Key)key);
}","/** 
 * Returns the value to which the specified key is mapped.
 * @param key   a rendering hint key
 * @return  the value to which the key is mapped in this object or{@code null} if the key is not mapped to any value inthis object.
 * @exception ClassCastException if the key can notbe cast to  {@code RenderingHints.Key}
 * @see #put(Object,Object)
 */
public Object get(Object key){
  return hintmap.get((Key)key);
}"
77184,"/** 
 * Copies all of the mappings from the specified <code>Map</code> to this <code>RenderingHints</code>.  These mappings replace any mappings that this <code>RenderingHints</code> had for any of the keys currently in the specified <code>Map</code>.
 * @param m the specified <code>Map</code>
 * @exception <code>ClassCastException</code> class of a key or valuein the specified <code>Map</code> prevents it from being stored in this <code>RenderingHints</code>.
 * @exception <code>IllegalArgumentException</code> some aspectof a key or value in the specified <code>Map</code> prevents it from being stored in this <code>RenderingHints</code>.
 */
public void putAll(Map<?,?> m){
  if (RenderingHints.class.isInstance(m)) {
    for (    Map.Entry<?,?> entry : m.entrySet())     hintmap.put(entry.getKey(),entry.getValue());
  }
 else {
    for (    Map.Entry<?,?> entry : m.entrySet())     put(entry.getKey(),entry.getValue());
  }
}","/** 
 * Copies all of the mappings from the specified   {@code Map}to this   {@code RenderingHints}.  These mappings replace any mappings that this   {@code RenderingHints} had for anyof the keys currently in the specified  {@code Map}.
 * @param m the specified {@code Map}
 * @exception ClassCastException class of a key or valuein the specified  {@code Map} prevents it from beingstored in this  {@code RenderingHints}.
 * @exception IllegalArgumentException some aspectof a key or value in the specified  {@code Map}prevents it from being stored in this   {@code RenderingHints}.
 */
public void putAll(Map<?,?> m){
  if (RenderingHints.class.isInstance(m)) {
    for (    Map.Entry<?,?> entry : m.entrySet())     hintmap.put(entry.getKey(),entry.getValue());
  }
 else {
    for (    Map.Entry<?,?> entry : m.entrySet())     put(entry.getKey(),entry.getValue());
  }
}"
77185,"/** 
 * Returns an <code>int</code> that ORs together the values for all the ranges that will be shaped. <p> For example, to check if a shaper shapes to Arabic, you would use the following: <blockquote> <code>if ((shaper.getRanges() &amp; shaper.ARABIC) != 0) { ... </code> </blockquote> <p>Note that this method supports only the bit mask-based ranges. Call   {@link #getRangeSet()} for the enum-based ranges.
 * @return the values for all the ranges to be shaped.
 */
public int getRanges(){
  return mask & ~CONTEXTUAL_MASK;
}","/** 
 * Returns an <code>int</code> that ORs together the values for all the ranges that will be shaped. <p> For example, to check if a shaper shapes to Arabic, you would use the following: <blockquote>  {@code if ((shaper.getRanges() & shaper.ARABIC) != 0) &#123; ... }</blockquote> <p>Note that this method supports only the bit mask-based ranges. Call   {@link #getRangeSet()} for the enum-based ranges.
 * @return the values for all the ranges to be shaped.
 */
public int getRanges(){
  return mask & ~CONTEXTUAL_MASK;
}"
77186,"/** 
 * Constructs a new <code>FlatteningPathIterator</code> object that flattens a path as it iterates over it. The <code>limit</code> parameter allows you to control the maximum number of recursive subdivisions that the iterator can make before it assumes that the curve is flat enough without measuring against the <code>flatness</code> parameter. The flattened iteration therefore never generates more than a maximum of <code>(2^limit)</code> line segments per curve.
 * @param src the original unflattened path being iterated over
 * @param flatness the maximum allowable distance between thecontrol points and the flattened curve
 * @param limit the maximum number of recursive subdivisionsallowed for any curved segment
 * @exception <code>IllegalArgumentException</code> if<code>flatness</code> or <code>limit</code> is less than zero
 */
public FlatteningPathIterator(PathIterator src,double flatness,int limit){
  if (flatness < 0.0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (limit < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.src=src;
  this.squareflat=flatness * flatness;
  this.limit=limit;
  this.levels=new int[limit + 1];
  next(false);
}","/** 
 * Constructs a new <code>FlatteningPathIterator</code> object that flattens a path as it iterates over it. The <code>limit</code> parameter allows you to control the maximum number of recursive subdivisions that the iterator can make before it assumes that the curve is flat enough without measuring against the <code>flatness</code> parameter. The flattened iteration therefore never generates more than a maximum of <code>(2^limit)</code> line segments per curve.
 * @param src the original unflattened path being iterated over
 * @param flatness the maximum allowable distance between thecontrol points and the flattened curve
 * @param limit the maximum number of recursive subdivisionsallowed for any curved segment
 * @exception IllegalArgumentException if<code>flatness</code> or <code>limit</code> is less than zero
 */
public FlatteningPathIterator(PathIterator src,double flatness,int limit){
  if (flatness < 0.0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (limit < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.src=src;
  this.squareflat=flatness * flatness;
  this.limit=limit;
  this.levels=new int[limit + 1];
  next(false);
}"
77187,"/** 
 * Returns the coordinates and type of the current path segment in the iteration. The return value is the path segment type: SEG_MOVETO, SEG_LINETO, or SEG_CLOSE. A double array of length 6 must be passed in and can be used to store the coordinates of the point(s). Each point is stored as a pair of double x,y coordinates. SEG_MOVETO and SEG_LINETO types return one point, and SEG_CLOSE does not return any points.
 * @param coords an array that holds the data returned fromthis method
 * @return the path segment type of the current path segment.
 * @exception <code>NoSuchElementException</code> if thereare no more elements in the flattening path to be returned.
 * @see PathIterator#SEG_MOVETO
 * @see PathIterator#SEG_LINETO
 * @see PathIterator#SEG_CLOSE
 */
public int currentSegment(double[] coords){
  if (isDone()) {
    throw new NoSuchElementException(""String_Node_Str"");
  }
  int type=holdType;
  if (type != SEG_CLOSE) {
    coords[0]=hold[holdIndex + 0];
    coords[1]=hold[holdIndex + 1];
    if (type != SEG_MOVETO) {
      type=SEG_LINETO;
    }
  }
  return type;
}","/** 
 * Returns the coordinates and type of the current path segment in the iteration. The return value is the path segment type: SEG_MOVETO, SEG_LINETO, or SEG_CLOSE. A double array of length 6 must be passed in and can be used to store the coordinates of the point(s). Each point is stored as a pair of double x,y coordinates. SEG_MOVETO and SEG_LINETO types return one point, and SEG_CLOSE does not return any points.
 * @param coords an array that holds the data returned fromthis method
 * @return the path segment type of the current path segment.
 * @exception NoSuchElementException if thereare no more elements in the flattening path to be returned.
 * @see PathIterator#SEG_MOVETO
 * @see PathIterator#SEG_LINETO
 * @see PathIterator#SEG_CLOSE
 */
public int currentSegment(double[] coords){
  if (isDone()) {
    throw new NoSuchElementException(""String_Node_Str"");
  }
  int type=holdType;
  if (type != SEG_CLOSE) {
    coords[0]=hold[holdIndex + 0];
    coords[1]=hold[holdIndex + 1];
    if (type != SEG_MOVETO) {
      type=SEG_LINETO;
    }
  }
  return type;
}"
77188,"/** 
 * Returns the String before a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text >= 0
 * @return the letter, word, or sentence, null for an invalid indexor part
 * @since 1.3
 */
public String getBeforeIndex(int part,int index){
  if (index < 0 || index > getCharCount() - 1) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    if (index == 0) {
      return null;
    }
  try {
    return getText(index - 1,1);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.WORD:
try {
  String s=getText(0,getCharCount());
  BreakIterator words=BreakIterator.getWordInstance(getLocale());
  words.setText(s);
  int end=words.following(index);
  end=words.previous();
  int start=words.previous();
  if (start == BreakIterator.DONE) {
    return null;
  }
  return s.substring(start,end);
}
 catch (BadLocationException e) {
  return null;
}
case AccessibleText.SENTENCE:
try {
String s=getText(0,getCharCount());
BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
sentence.setText(s);
int end=sentence.following(index);
end=sentence.previous();
int start=sentence.previous();
if (start == BreakIterator.DONE) {
  return null;
}
return s.substring(start,end);
}
 catch (BadLocationException e) {
return null;
}
default :
return null;
}
}","/** 
 * Returns the String before a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text &gt;= 0
 * @return the letter, word, or sentence, null for an invalid indexor part
 * @since 1.3
 */
public String getBeforeIndex(int part,int index){
  if (index < 0 || index > getCharCount() - 1) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    if (index == 0) {
      return null;
    }
  try {
    return getText(index - 1,1);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.WORD:
try {
  String s=getText(0,getCharCount());
  BreakIterator words=BreakIterator.getWordInstance(getLocale());
  words.setText(s);
  int end=words.following(index);
  end=words.previous();
  int start=words.previous();
  if (start == BreakIterator.DONE) {
    return null;
  }
  return s.substring(start,end);
}
 catch (BadLocationException e) {
  return null;
}
case AccessibleText.SENTENCE:
try {
String s=getText(0,getCharCount());
BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
sentence.setText(s);
int end=sentence.following(index);
end=sentence.previous();
int start=sentence.previous();
if (start == BreakIterator.DONE) {
  return null;
}
return s.substring(start,end);
}
 catch (BadLocationException e) {
return null;
}
default :
return null;
}
}"
77189,"/** 
 * Returns the String at a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text >= 0
 * @return the letter, word, or sentence,null for an invalid index or part
 * @since 1.3
 */
public String getAtIndex(int part,int index){
  if (index < 0 || index >= getCharCount()) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    try {
      return getText(index,1);
    }
 catch (    BadLocationException e) {
      return null;
    }
case AccessibleText.WORD:
  try {
    String s=getText(0,getCharCount());
    BreakIterator words=BreakIterator.getWordInstance(getLocale());
    words.setText(s);
    int end=words.following(index);
    return s.substring(words.previous(),end);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.SENTENCE:
try {
  String s=getText(0,getCharCount());
  BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
  sentence.setText(s);
  int end=sentence.following(index);
  return s.substring(sentence.previous(),end);
}
 catch (BadLocationException e) {
  return null;
}
default :
return null;
}
}","/** 
 * Returns the String at a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text &gt;= 0
 * @return the letter, word, or sentence,null for an invalid index or part
 * @since 1.3
 */
public String getAtIndex(int part,int index){
  if (index < 0 || index >= getCharCount()) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    try {
      return getText(index,1);
    }
 catch (    BadLocationException e) {
      return null;
    }
case AccessibleText.WORD:
  try {
    String s=getText(0,getCharCount());
    BreakIterator words=BreakIterator.getWordInstance(getLocale());
    words.setText(s);
    int end=words.following(index);
    return s.substring(words.previous(),end);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.SENTENCE:
try {
  String s=getText(0,getCharCount());
  BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
  sentence.setText(s);
  int end=sentence.following(index);
  return s.substring(sentence.previous(),end);
}
 catch (BadLocationException e) {
  return null;
}
default :
return null;
}
}"
77190,"/** 
 * Sets the <code>contentAreaFilled</code> property. If <code>true</code> the button will paint the content area.  If you wish to have a transparent button, such as an icon only button, for example, then you should set this to <code>false</code>. Do not call <code>setOpaque(false)</code>. The default value for the the <code>contentAreaFilled</code> property is <code>true</code>. <p> This function may cause the component's opaque property to change. <p> The exact behavior of calling this function varies on a component-by-component and L&F-by-L&F basis.
 * @param b if true, the content should be filled; if falsethe content area is not filled
 * @see #isContentAreaFilled
 * @see #setOpaque
 * @beaninfo bound: true attribute: visualUpdate true description: Whether the button should paint the content area or leave it transparent.
 */
public void setContentAreaFilled(boolean b){
  boolean oldValue=contentAreaFilled;
  contentAreaFilled=b;
  contentAreaFilledSet=true;
  firePropertyChange(CONTENT_AREA_FILLED_CHANGED_PROPERTY,oldValue,contentAreaFilled);
  if (b != oldValue) {
    repaint();
  }
}","/** 
 * Sets the <code>contentAreaFilled</code> property. If <code>true</code> the button will paint the content area.  If you wish to have a transparent button, such as an icon only button, for example, then you should set this to <code>false</code>. Do not call <code>setOpaque(false)</code>. The default value for the the <code>contentAreaFilled</code> property is <code>true</code>. <p> This function may cause the component's opaque property to change. <p> The exact behavior of calling this function varies on a component-by-component and L&amp;F-by-L&amp;F basis.
 * @param b if true, the content should be filled; if falsethe content area is not filled
 * @see #isContentAreaFilled
 * @see #setOpaque
 * @beaninfo bound: true attribute: visualUpdate true description: Whether the button should paint the content area or leave it transparent.
 */
public void setContentAreaFilled(boolean b){
  boolean oldValue=contentAreaFilled;
  contentAreaFilled=b;
  contentAreaFilledSet=true;
  firePropertyChange(CONTENT_AREA_FILLED_CHANGED_PROPERTY,oldValue,contentAreaFilled);
  if (b != oldValue) {
    repaint();
  }
}"
77191,"/** 
 * Returns the L&F object that renders this component.
 * @return the ButtonUI object
 * @see #setUI
 */
public ButtonUI getUI(){
  return (ButtonUI)ui;
}","/** 
 * Returns the L&amp;F object that renders this component.
 * @return the ButtonUI object
 * @see #setUI
 */
public ButtonUI getUI(){
  return (ButtonUI)ui;
}"
77192,"/** 
 * Returns the String after a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text >= 0
 * @return the letter, word, or sentence, null for an invalidindex or part
 * @since 1.3
 */
public String getAfterIndex(int part,int index){
  if (index < 0 || index >= getCharCount()) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    if (index + 1 >= getCharCount()) {
      return null;
    }
  try {
    return getText(index + 1,1);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.WORD:
try {
  String s=getText(0,getCharCount());
  BreakIterator words=BreakIterator.getWordInstance(getLocale());
  words.setText(s);
  int start=words.following(index);
  if (start == BreakIterator.DONE || start >= s.length()) {
    return null;
  }
  int end=words.following(start);
  if (end == BreakIterator.DONE || end >= s.length()) {
    return null;
  }
  return s.substring(start,end);
}
 catch (BadLocationException e) {
  return null;
}
case AccessibleText.SENTENCE:
try {
String s=getText(0,getCharCount());
BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
sentence.setText(s);
int start=sentence.following(index);
if (start == BreakIterator.DONE || start > s.length()) {
  return null;
}
int end=sentence.following(start);
if (end == BreakIterator.DONE || end > s.length()) {
  return null;
}
return s.substring(start,end);
}
 catch (BadLocationException e) {
return null;
}
default :
return null;
}
}","/** 
 * Returns the String after a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text &gt;= 0
 * @return the letter, word, or sentence, null for an invalidindex or part
 * @since 1.3
 */
public String getAfterIndex(int part,int index){
  if (index < 0 || index >= getCharCount()) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    if (index + 1 >= getCharCount()) {
      return null;
    }
  try {
    return getText(index + 1,1);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.WORD:
try {
  String s=getText(0,getCharCount());
  BreakIterator words=BreakIterator.getWordInstance(getLocale());
  words.setText(s);
  int start=words.following(index);
  if (start == BreakIterator.DONE || start >= s.length()) {
    return null;
  }
  int end=words.following(start);
  if (end == BreakIterator.DONE || end >= s.length()) {
    return null;
  }
  return s.substring(start,end);
}
 catch (BadLocationException e) {
  return null;
}
case AccessibleText.SENTENCE:
try {
String s=getText(0,getCharCount());
BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
sentence.setText(s);
int start=sentence.following(index);
if (start == BreakIterator.DONE || start > s.length()) {
  return null;
}
int end=sentence.following(start);
if (end == BreakIterator.DONE || end > s.length()) {
  return null;
}
return s.substring(start,end);
}
 catch (BadLocationException e) {
return null;
}
default :
return null;
}
}"
77193,"/** 
 * Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.  After the initial mouse press occurs (and action event generated) any subsequent mouse press events which occur on intervals less than the threshhold will be ignored and no corresponding action event generated.  By default the threshhold is 0, which means that for each mouse press, an action event will be fired, no matter how quickly the mouse clicks occur.  In buttons where this behavior is not desirable (for example, the ""OK"" button in a dialog), this threshhold should be set to an appropriate positive value.
 * @see #getMultiClickThreshhold
 * @param threshhold the amount of time required between mousepress events to generate corresponding action events
 * @exception IllegalArgumentException if threshhold < 0
 * @since 1.4
 */
public void setMultiClickThreshhold(long threshhold){
  if (threshhold < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.multiClickThreshhold=threshhold;
}","/** 
 * Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.  After the initial mouse press occurs (and action event generated) any subsequent mouse press events which occur on intervals less than the threshhold will be ignored and no corresponding action event generated.  By default the threshhold is 0, which means that for each mouse press, an action event will be fired, no matter how quickly the mouse clicks occur.  In buttons where this behavior is not desirable (for example, the ""OK"" button in a dialog), this threshhold should be set to an appropriate positive value.
 * @see #getMultiClickThreshhold
 * @param threshhold the amount of time required between mousepress events to generate corresponding action events
 * @exception IllegalArgumentException if threshhold &lt; 0
 * @since 1.4
 */
public void setMultiClickThreshhold(long threshhold){
  if (threshhold < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.multiClickThreshhold=threshhold;
}"
77194,"/** 
 * Sets the <code>borderPainted</code> property. If <code>true</code> and the button has a border, the border is painted. The default value for the <code>borderPainted</code> property is <code>true</code>. <p/> Some look and feels might not support the <code>borderPainted</code> property, in which case they ignore this.
 * @param b if true and border property is not <code>null</code>,the border is painted
 * @see #isBorderPainted
 * @beaninfo bound: true attribute: visualUpdate true description: Whether the border should be painted.
 */
public void setBorderPainted(boolean b){
  boolean oldValue=paintBorder;
  paintBorder=b;
  borderPaintedSet=true;
  firePropertyChange(BORDER_PAINTED_CHANGED_PROPERTY,oldValue,paintBorder);
  if (b != oldValue) {
    revalidate();
    repaint();
  }
}","/** 
 * Sets the <code>borderPainted</code> property. If <code>true</code> and the button has a border, the border is painted. The default value for the <code>borderPainted</code> property is <code>true</code>. <p> Some look and feels might not support the <code>borderPainted</code> property, in which case they ignore this.
 * @param b if true and border property is not <code>null</code>,the border is painted
 * @see #isBorderPainted
 * @beaninfo bound: true attribute: visualUpdate true description: Whether the border should be painted.
 */
public void setBorderPainted(boolean b){
  boolean oldValue=paintBorder;
  paintBorder=b;
  borderPaintedSet=true;
  firePropertyChange(BORDER_PAINTED_CHANGED_PROPERTY,oldValue,paintBorder);
  if (b != oldValue) {
    revalidate();
    repaint();
  }
}"
77195,"/** 
 * Sets the L&F object that renders this component.
 * @param ui the <code>ButtonUI</code> L&F object
 * @see #getUI
 * @beaninfo bound: true hidden: true attribute: visualUpdate true description: The UI object that implements the LookAndFeel.
 */
public void setUI(ButtonUI ui){
  super.setUI(ui);
  if (disabledIcon instanceof UIResource) {
    setDisabledIcon(null);
  }
  if (disabledSelectedIcon instanceof UIResource) {
    setDisabledSelectedIcon(null);
  }
}","/** 
 * Sets the L&amp;F object that renders this component.
 * @param ui the <code>ButtonUI</code> L&amp;F object
 * @see #getUI
 * @beaninfo bound: true hidden: true attribute: visualUpdate true description: The UI object that implements the LookAndFeel.
 */
public void setUI(ButtonUI ui){
  super.setUI(ui);
  if (disabledIcon instanceof UIResource) {
    setDisabledIcon(null);
  }
  if (disabledSelectedIcon instanceof UIResource) {
    setDisabledSelectedIcon(null);
  }
}"
77196,"/** 
 * Creates an invisible, fixed-height component. In a vertical box, you typically use this method to force a certain amount of space between two components. In a horizontal box, you might use this method to force the box to be at least the specified height. The invisible component has no width unless excess space is available, in which case it takes its share of available space, just like any other component that has no maximum width.
 * @param height the height of the invisible component, in pixels >= 0
 * @return the component
 * @see #createHorizontalStrut
 * @see #createGlue
 * @see #createRigidArea
 */
public static Component createVerticalStrut(int height){
  return new Filler(new Dimension(0,height),new Dimension(0,height),new Dimension(Short.MAX_VALUE,height));
}","/** 
 * Creates an invisible, fixed-height component. In a vertical box, you typically use this method to force a certain amount of space between two components. In a horizontal box, you might use this method to force the box to be at least the specified height. The invisible component has no width unless excess space is available, in which case it takes its share of available space, just like any other component that has no maximum width.
 * @param height the height of the invisible component, in pixels &gt;= 0
 * @return the component
 * @see #createHorizontalStrut
 * @see #createGlue
 * @see #createRigidArea
 */
public static Component createVerticalStrut(int height){
  return new Filler(new Dimension(0,height),new Dimension(0,height),new Dimension(Short.MAX_VALUE,height));
}"
77197,"/** 
 * Creates an invisible, fixed-width component. In a horizontal box, you typically use this method to force a certain amount of space between two components. In a vertical box, you might use this method to force the box to be at least the specified width. The invisible component has no height unless excess space is available, in which case it takes its share of available space, just like any other component that has no maximum height.
 * @param width the width of the invisible component, in pixels >= 0
 * @return the component
 * @see #createVerticalStrut
 * @see #createGlue
 * @see #createRigidArea
 */
public static Component createHorizontalStrut(int width){
  return new Filler(new Dimension(width,0),new Dimension(width,0),new Dimension(width,Short.MAX_VALUE));
}","/** 
 * Creates an invisible, fixed-width component. In a horizontal box, you typically use this method to force a certain amount of space between two components. In a vertical box, you might use this method to force the box to be at least the specified width. The invisible component has no height unless excess space is available, in which case it takes its share of available space, just like any other component that has no maximum height.
 * @param width the width of the invisible component, in pixels &gt;= 0
 * @return the component
 * @see #createVerticalStrut
 * @see #createGlue
 * @see #createRigidArea
 */
public static Component createHorizontalStrut(int width){
  return new Filler(new Dimension(width,0),new Dimension(width,0),new Dimension(width,Short.MAX_VALUE));
}"
77198,"/** 
 * Returns the preferred dimensions for this layout, given the components in the specified target container.
 * @param target  the container that needs to be laid out
 * @return the dimensions >= 0 && <= Integer.MAX_VALUE
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 * @see Container
 * @see #minimumLayoutSize
 * @see #maximumLayoutSize
 */
public Dimension preferredLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.preferred,yTotal.preferred);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}","/** 
 * Returns the preferred dimensions for this layout, given the components in the specified target container.
 * @param target  the container that needs to be laid out
 * @return the dimensions &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 * @see Container
 * @see #minimumLayoutSize
 * @see #maximumLayoutSize
 */
public Dimension preferredLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.preferred,yTotal.preferred);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}"
77199,"/** 
 * Returns the alignment along the X axis for the container. If the box is horizontal, the default alignment will be returned. Otherwise, the alignment needed to place the children along the X axis will be returned.
 * @param target  the container
 * @return the alignment >= 0.0f && <= 1.0f
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 */
public synchronized float getLayoutAlignmentX(Container target){
  checkContainer(target);
  checkRequests();
  return xTotal.alignment;
}","/** 
 * Returns the alignment along the X axis for the container. If the box is horizontal, the default alignment will be returned. Otherwise, the alignment needed to place the children along the X axis will be returned.
 * @param target  the container
 * @return the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 */
public synchronized float getLayoutAlignmentX(Container target){
  checkContainer(target);
  checkRequests();
  return xTotal.alignment;
}"
77200,"/** 
 * Returns the minimum dimensions needed to lay out the components contained in the specified target container.
 * @param target  the container that needs to be laid out
 * @return the dimensions >= 0 && <= Integer.MAX_VALUE
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 * @see #preferredLayoutSize
 * @see #maximumLayoutSize
 */
public Dimension minimumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}","/** 
 * Returns the minimum dimensions needed to lay out the components contained in the specified target container.
 * @param target  the container that needs to be laid out
 * @return the dimensions &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 * @see #preferredLayoutSize
 * @see #maximumLayoutSize
 */
public Dimension minimumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}"
77201,"/** 
 * Returns the alignment along the Y axis for the container. If the box is vertical, the default alignment will be returned. Otherwise, the alignment needed to place the children along the Y axis will be returned.
 * @param target  the container
 * @return the alignment >= 0.0f && <= 1.0f
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 */
public synchronized float getLayoutAlignmentY(Container target){
  checkContainer(target);
  checkRequests();
  return yTotal.alignment;
}","/** 
 * Returns the alignment along the Y axis for the container. If the box is vertical, the default alignment will be returned. Otherwise, the alignment needed to place the children along the Y axis will be returned.
 * @param target  the container
 * @return the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 */
public synchronized float getLayoutAlignmentY(Container target){
  checkContainer(target);
  checkRequests();
  return yTotal.alignment;
}"
77202,"/** 
 * Returns the maximum dimensions the target container can use to lay out the components it contains.
 * @param target  the container that needs to be laid out
 * @return the dimensions >= 0 && <= Integer.MAX_VALUE
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 * @see #preferredLayoutSize
 * @see #minimumLayoutSize
 */
public Dimension maximumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.maximum,yTotal.maximum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}","/** 
 * Returns the maximum dimensions the target container can use to lay out the components it contains.
 * @param target  the container that needs to be laid out
 * @return the dimensions &gt;= 0 &amp;&amp; &lt;= Integer.MAX_VALUE
 * @exception AWTError  if the target isn't the container specified to theBoxLayout constructor
 * @see #preferredLayoutSize
 * @see #minimumLayoutSize
 */
public Dimension maximumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.maximum,yTotal.maximum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}"
77203,"/** 
 * If the specified component is already a child of this then we don't bother doing anything - stacking order doesn't matter for cell renderer components (CellRendererPane doesn't paint anyway).<
 */
protected void addImpl(Component x,Object constraints,int index){
  if (x.getParent() == this) {
    return;
  }
 else {
    super.addImpl(x,constraints,index);
  }
}","/** 
 * If the specified component is already a child of this then we don't bother doing anything - stacking order doesn't matter for cell renderer components (CellRendererPane doesn't paint anyway).
 */
protected void addImpl(Component x,Object constraints,int index){
  if (x.getParent() == this) {
    return;
  }
 else {
    super.addImpl(x,constraints,index);
  }
}"
77204,"/** 
 * Remove the indices in the interval index0,index1 (inclusive) from the selection model.  This is typically called to sync the selection model width a corresponding change in the data model.  Note that (as always) index0 need not be <= index1.
 */
public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}","/** 
 * Remove the indices in the interval index0,index1 (inclusive) from the selection model.  This is typically called to sync the selection model width a corresponding change in the data model.  Note that (as always) index0 need not be &lt;= index1.
 */
public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}"
77205,"/** 
 * Returns   {@code true} if a paint triggered on a child component should causepainting to originate from this Component, or one of its ancestors. <p/> Calling  {@link #repaint} or {@link #paintImmediately(int,int,int,int)}on a Swing component will result in calling the   {@link JComponent#paintImmediately(int,int,int,int)} method ofthe first ancestor which  {@code isPaintingOrigin()} returns {@code true}, if there are any. <p/>  {@code JComponent} subclasses that need to be painted when any of theirchildren are repainted should override this method to return  {@code true}.
 * @return always returns {@code false}
 * @see #paintImmediately(int,int,int,int)
 */
protected boolean isPaintingOrigin(){
  return false;
}","/** 
 * Returns   {@code true} if a paint triggered on a child component should causepainting to originate from this Component, or one of its ancestors. <p> Calling  {@link #repaint} or {@link #paintImmediately(int,int,int,int)}on a Swing component will result in calling the   {@link JComponent#paintImmediately(int,int,int,int)} method ofthe first ancestor which  {@code isPaintingOrigin()} returns {@code true}, if there are any. <p>  {@code JComponent} subclasses that need to be painted when any of theirchildren are repainted should override this method to return  {@code true}.
 * @return always returns {@code false}
 * @see #paintImmediately(int,int,int,int)
 */
protected boolean isPaintingOrigin(){
  return false;
}"
77206,"/** 
 * Pops up an ""Open File"" file chooser dialog. Note that the text that appears in the approve button is determined by the L&F.
 * @param parent  the parent component of the dialog,can be <code>null</code>; see <code>showDialog</code> for details
 * @return   the return state of the file chooser on popdown:<ul> <li>JFileChooser.CANCEL_OPTION <li>JFileChooser.APPROVE_OPTION <li>JFileChooser.ERROR_OPTION if an error occurs or the dialog is dismissed </ul>
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.
 * @see java.awt.GraphicsEnvironment#isHeadless
 * @see #showDialog
 */
public int showOpenDialog(Component parent) throws HeadlessException {
  setDialogType(OPEN_DIALOG);
  return showDialog(parent,null);
}","/** 
 * Pops up an ""Open File"" file chooser dialog. Note that the text that appears in the approve button is determined by the L&amp;F.
 * @param parent  the parent component of the dialog,can be <code>null</code>; see <code>showDialog</code> for details
 * @return   the return state of the file chooser on popdown:<ul> <li>JFileChooser.CANCEL_OPTION <li>JFileChooser.APPROVE_OPTION <li>JFileChooser.ERROR_OPTION if an error occurs or the dialog is dismissed </ul>
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.
 * @see java.awt.GraphicsEnvironment#isHeadless
 * @see #showDialog
 */
public int showOpenDialog(Component parent) throws HeadlessException {
  setDialogType(OPEN_DIALOG);
  return showDialog(parent,null);
}"
77207,"/** 
 * Pops up a ""Save File"" file chooser dialog. Note that the text that appears in the approve button is determined by the L&F.
 * @param parent  the parent component of the dialog,can be <code>null</code>; see <code>showDialog</code> for details
 * @return   the return state of the file chooser on popdown:<ul> <li>JFileChooser.CANCEL_OPTION <li>JFileChooser.APPROVE_OPTION <li>JFileChooser.ERROR_OPTION if an error occurs or the dialog is dismissed </ul>
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.
 * @see java.awt.GraphicsEnvironment#isHeadless
 * @see #showDialog
 */
public int showSaveDialog(Component parent) throws HeadlessException {
  setDialogType(SAVE_DIALOG);
  return showDialog(parent,null);
}","/** 
 * Pops up a ""Save File"" file chooser dialog. Note that the text that appears in the approve button is determined by the L&amp;F.
 * @param parent  the parent component of the dialog,can be <code>null</code>; see <code>showDialog</code> for details
 * @return   the return state of the file chooser on popdown:<ul> <li>JFileChooser.CANCEL_OPTION <li>JFileChooser.APPROVE_OPTION <li>JFileChooser.ERROR_OPTION if an error occurs or the dialog is dismissed </ul>
 * @exception HeadlessException if GraphicsEnvironment.isHeadless()returns true.
 * @see java.awt.GraphicsEnvironment#isHeadless
 * @see #showDialog
 */
public int showSaveDialog(Component parent) throws HeadlessException {
  setDialogType(SAVE_DIALOG);
  return showDialog(parent,null);
}"
77208,"/** 
 * Sets the property that indicates whether the <i>approve</i> and <i>cancel</i> buttons are shown in the file chooser.  This property is <code>true</code> by default.  Look and feels that always show these buttons will ignore the value of this property. This method fires a property-changed event, using the string value of <code>CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY</code> as the name of the property.
 * @param b <code>false</code> if control buttons should not beshown; otherwise, <code>true</code>
 * @beaninfo preferred: true bound: true description: Sets whether the approve & cancel buttons are shown.
 * @see #getControlButtonsAreShown
 * @see #CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
 * @since 1.3
 */
public void setControlButtonsAreShown(boolean b){
  if (controlsShown == b) {
    return;
  }
  boolean oldValue=controlsShown;
  controlsShown=b;
  firePropertyChange(CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY,oldValue,controlsShown);
}","/** 
 * Sets the property that indicates whether the <i>approve</i> and <i>cancel</i> buttons are shown in the file chooser.  This property is <code>true</code> by default.  Look and feels that always show these buttons will ignore the value of this property. This method fires a property-changed event, using the string value of <code>CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY</code> as the name of the property.
 * @param b <code>false</code> if control buttons should not beshown; otherwise, <code>true</code>
 * @beaninfo preferred: true bound: true description: Sets whether the approve &amp; cancel buttons are shown.
 * @see #getControlButtonsAreShown
 * @see #CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
 * @since 1.3
 */
public void setControlButtonsAreShown(boolean b){
  if (controlsShown == b) {
    return;
  }
  boolean oldValue=controlsShown;
  controlsShown=b;
  firePropertyChange(CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY,oldValue,controlsShown);
}"
77209,"/** 
 * Gets the UI object which implements the L&F for this component.
 * @return the FileChooserUI object that implements the FileChooserUI L&F
 */
public FileChooserUI getUI(){
  return (FileChooserUI)ui;
}","/** 
 * Gets the UI object which implements the L&amp;F for this component.
 * @return the FileChooserUI object that implements the FileChooserUI L&amp;F
 */
public FileChooserUI getUI(){
  return (FileChooserUI)ui;
}"
77210,"/** 
 * Returns a string that specifies the name of the L&F class that renders this component.
 * @return the string ""FileChooserUI""
 * @see JComponent#getUIClassID
 * @see UIDefaults#getUI
 * @beaninfo expert: true description: A string that specifies the name of the L&F class.
 */
public String getUIClassID(){
  return uiClassID;
}","/** 
 * Returns a string that specifies the name of the L&amp;F class that renders this component.
 * @return the string ""FileChooserUI""
 * @see JComponent#getUIClassID
 * @see UIDefaults#getUI
 * @beaninfo expert: true description: A string that specifies the name of the L&amp;F class.
 */
public String getUIClassID(){
  return uiClassID;
}"
77211,"/** 
 * Returns the String before a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text >= 0
 * @return the letter, word, or sentence, null for an invalid indexor part
 * @since 1.3
 */
public String getBeforeIndex(int part,int index){
  if (index < 0 || index > getCharCount() - 1) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    if (index == 0) {
      return null;
    }
  try {
    return getText(index - 1,1);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.WORD:
try {
  String s=getText(0,getCharCount());
  BreakIterator words=BreakIterator.getWordInstance(getLocale());
  words.setText(s);
  int end=words.following(index);
  end=words.previous();
  int start=words.previous();
  if (start == BreakIterator.DONE) {
    return null;
  }
  return s.substring(start,end);
}
 catch (BadLocationException e) {
  return null;
}
case AccessibleText.SENTENCE:
try {
String s=getText(0,getCharCount());
BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
sentence.setText(s);
int end=sentence.following(index);
end=sentence.previous();
int start=sentence.previous();
if (start == BreakIterator.DONE) {
  return null;
}
return s.substring(start,end);
}
 catch (BadLocationException e) {
return null;
}
default :
return null;
}
}","/** 
 * Returns the String before a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text &gt;= 0
 * @return the letter, word, or sentence, null for an invalid indexor part
 * @since 1.3
 */
public String getBeforeIndex(int part,int index){
  if (index < 0 || index > getCharCount() - 1) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    if (index == 0) {
      return null;
    }
  try {
    return getText(index - 1,1);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.WORD:
try {
  String s=getText(0,getCharCount());
  BreakIterator words=BreakIterator.getWordInstance(getLocale());
  words.setText(s);
  int end=words.following(index);
  end=words.previous();
  int start=words.previous();
  if (start == BreakIterator.DONE) {
    return null;
  }
  return s.substring(start,end);
}
 catch (BadLocationException e) {
  return null;
}
case AccessibleText.SENTENCE:
try {
String s=getText(0,getCharCount());
BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
sentence.setText(s);
int end=sentence.following(index);
end=sentence.previous();
int start=sentence.previous();
if (start == BreakIterator.DONE) {
  return null;
}
return s.substring(start,end);
}
 catch (BadLocationException e) {
return null;
}
default :
return null;
}
}"
77212,"/** 
 * Returns the String at a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text >= 0
 * @return the letter, word, or sentence,null for an invalid index or part
 * @since 1.3
 */
public String getAtIndex(int part,int index){
  if (index < 0 || index >= getCharCount()) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    try {
      return getText(index,1);
    }
 catch (    BadLocationException e) {
      return null;
    }
case AccessibleText.WORD:
  try {
    String s=getText(0,getCharCount());
    BreakIterator words=BreakIterator.getWordInstance(getLocale());
    words.setText(s);
    int end=words.following(index);
    return s.substring(words.previous(),end);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.SENTENCE:
try {
  String s=getText(0,getCharCount());
  BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
  sentence.setText(s);
  int end=sentence.following(index);
  return s.substring(sentence.previous(),end);
}
 catch (BadLocationException e) {
  return null;
}
default :
return null;
}
}","/** 
 * Returns the String at a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text &gt;= 0
 * @return the letter, word, or sentence,null for an invalid index or part
 * @since 1.3
 */
public String getAtIndex(int part,int index){
  if (index < 0 || index >= getCharCount()) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    try {
      return getText(index,1);
    }
 catch (    BadLocationException e) {
      return null;
    }
case AccessibleText.WORD:
  try {
    String s=getText(0,getCharCount());
    BreakIterator words=BreakIterator.getWordInstance(getLocale());
    words.setText(s);
    int end=words.following(index);
    return s.substring(words.previous(),end);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.SENTENCE:
try {
  String s=getText(0,getCharCount());
  BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
  sentence.setText(s);
  int end=sentence.following(index);
  return s.substring(sentence.previous(),end);
}
 catch (BadLocationException e) {
  return null;
}
default :
return null;
}
}"
77213,"/** 
 * Returns the L&F object that renders this component.
 * @return LabelUI object
 */
public LabelUI getUI(){
  return (LabelUI)ui;
}","/** 
 * Returns the L&amp;F object that renders this component.
 * @return LabelUI object
 */
public LabelUI getUI(){
  return (LabelUI)ui;
}"
77214,"/** 
 * Returns the String after a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text >= 0
 * @return the letter, word, or sentence, null for an invalidindex or part
 * @since 1.3
 */
public String getAfterIndex(int part,int index){
  if (index < 0 || index >= getCharCount()) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    if (index + 1 >= getCharCount()) {
      return null;
    }
  try {
    return getText(index + 1,1);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.WORD:
try {
  String s=getText(0,getCharCount());
  BreakIterator words=BreakIterator.getWordInstance(getLocale());
  words.setText(s);
  int start=words.following(index);
  if (start == BreakIterator.DONE || start >= s.length()) {
    return null;
  }
  int end=words.following(start);
  if (end == BreakIterator.DONE || end >= s.length()) {
    return null;
  }
  return s.substring(start,end);
}
 catch (BadLocationException e) {
  return null;
}
case AccessibleText.SENTENCE:
try {
String s=getText(0,getCharCount());
BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
sentence.setText(s);
int start=sentence.following(index);
if (start == BreakIterator.DONE || start > s.length()) {
  return null;
}
int end=sentence.following(start);
if (end == BreakIterator.DONE || end > s.length()) {
  return null;
}
return s.substring(start,end);
}
 catch (BadLocationException e) {
return null;
}
default :
return null;
}
}","/** 
 * Returns the String after a given index.
 * @param part the AccessibleText.CHARACTER, AccessibleText.WORD,or AccessibleText.SENTENCE to retrieve
 * @param index an index within the text &gt;= 0
 * @return the letter, word, or sentence, null for an invalidindex or part
 * @since 1.3
 */
public String getAfterIndex(int part,int index){
  if (index < 0 || index >= getCharCount()) {
    return null;
  }
switch (part) {
case AccessibleText.CHARACTER:
    if (index + 1 >= getCharCount()) {
      return null;
    }
  try {
    return getText(index + 1,1);
  }
 catch (  BadLocationException e) {
    return null;
  }
case AccessibleText.WORD:
try {
  String s=getText(0,getCharCount());
  BreakIterator words=BreakIterator.getWordInstance(getLocale());
  words.setText(s);
  int start=words.following(index);
  if (start == BreakIterator.DONE || start >= s.length()) {
    return null;
  }
  int end=words.following(start);
  if (end == BreakIterator.DONE || end >= s.length()) {
    return null;
  }
  return s.substring(start,end);
}
 catch (BadLocationException e) {
  return null;
}
case AccessibleText.SENTENCE:
try {
String s=getText(0,getCharCount());
BreakIterator sentence=BreakIterator.getSentenceInstance(getLocale());
sentence.setText(s);
int start=sentence.following(index);
if (start == BreakIterator.DONE || start > s.length()) {
  return null;
}
int end=sentence.following(start);
if (end == BreakIterator.DONE || end > s.length()) {
  return null;
}
return s.substring(start,end);
}
 catch (BadLocationException e) {
return null;
}
default :
return null;
}
}"
77215,"/** 
 * Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic. Not all look and feels may support this. A value of -1 indicates either there is no mnemonic, the mnemonic character is not contained in the string, or the developer does not wish the mnemonic to be displayed. <p> The value of this is updated as the properties relating to the mnemonic change (such as the mnemonic itself, the text...). You should only ever have to call this if you do not wish the default character to be underlined. For example, if the text was 'Save As', with a mnemonic of 'a', and you wanted the 'A' to be decorated, as 'Save <u>A</u>s', you would have to invoke <code>setDisplayedMnemonicIndex(5)</code> after invoking <code>setDisplayedMnemonic(KeyEvent.VK_A)</code>.
 * @since 1.4
 * @param index Index into the String to underline
 * @exception IllegalArgumentException will be thrown if <code>index</codeis >= length of the text, or < -1
 * @beaninfo bound: true attribute: visualUpdate true description: the index into the String to draw the keyboard character mnemonic at
 */
public void setDisplayedMnemonicIndex(int index) throws IllegalArgumentException {
  int oldValue=mnemonicIndex;
  if (index == -1) {
    mnemonicIndex=-1;
  }
 else {
    String text=getText();
    int textLength=(text == null) ? 0 : text.length();
    if (index < -1 || index >= textLength) {
      throw new IllegalArgumentException(""String_Node_Str"" + index);
    }
  }
  mnemonicIndex=index;
  firePropertyChange(""String_Node_Str"",oldValue,index);
  if (index != oldValue) {
    revalidate();
    repaint();
  }
}","/** 
 * Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic. Not all look and feels may support this. A value of -1 indicates either there is no mnemonic, the mnemonic character is not contained in the string, or the developer does not wish the mnemonic to be displayed. <p> The value of this is updated as the properties relating to the mnemonic change (such as the mnemonic itself, the text...). You should only ever have to call this if you do not wish the default character to be underlined. For example, if the text was 'Save As', with a mnemonic of 'a', and you wanted the 'A' to be decorated, as 'Save <u>A</u>s', you would have to invoke <code>setDisplayedMnemonicIndex(5)</code> after invoking <code>setDisplayedMnemonic(KeyEvent.VK_A)</code>.
 * @since 1.4
 * @param index Index into the String to underline
 * @exception IllegalArgumentException will be thrown if <code>index</code>is &gt;= length of the text, or &lt; -1
 * @beaninfo bound: true attribute: visualUpdate true description: the index into the String to draw the keyboard character mnemonic at
 */
public void setDisplayedMnemonicIndex(int index) throws IllegalArgumentException {
  int oldValue=mnemonicIndex;
  if (index == -1) {
    mnemonicIndex=-1;
  }
 else {
    String text=getText();
    int textLength=(text == null) ? 0 : text.length();
    if (index < -1 || index >= textLength) {
      throw new IllegalArgumentException(""String_Node_Str"" + index);
    }
  }
  mnemonicIndex=index;
  firePropertyChange(""String_Node_Str"",oldValue,index);
  if (index != oldValue) {
    revalidate();
    repaint();
  }
}"
77216,"/** 
 * Returns a string that specifies the name of the l&f class that renders this component.
 * @return String ""LabelUI""
 * @see JComponent#getUIClassID
 * @see UIDefaults#getUI
 */
public String getUIClassID(){
  return uiClassID;
}","/** 
 * Returns a string that specifies the name of the l&amp;f class that renders this component.
 * @return String ""LabelUI""
 * @see JComponent#getUIClassID
 * @see UIDefaults#getUI
 */
public String getUIClassID(){
  return uiClassID;
}"
77217,"/** 
 * Sets the L&F object that renders this component.
 * @param ui  the LabelUI L&F object
 * @see UIDefaults#getUI
 * @beaninfo bound: true hidden: true attribute: visualUpdate true description: The UI object that implements the Component's LookAndFeel.
 */
public void setUI(LabelUI ui){
  super.setUI(ui);
  if (!disabledIconSet && disabledIcon != null) {
    setDisabledIcon(null);
  }
}","/** 
 * Sets the L&amp;F object that renders this component.
 * @param ui  the LabelUI L&amp;F object
 * @see UIDefaults#getUI
 * @beaninfo bound: true hidden: true attribute: visualUpdate true description: The UI object that implements the Component's LookAndFeel.
 */
public void setUI(LabelUI ui){
  super.setUI(ui);
  if (!disabledIconSet && disabledIcon != null) {
    setDisabledIcon(null);
  }
}"
77218,"/** 
 * Generate an indy method call to the meta factory
 */
private JCExpression makeMetafactoryIndyCall(TranslationContext<?> context,int refKind,Symbol refSym,List<JCExpression> indy_args){
  JCFunctionalExpression tree=context.tree;
  MethodSymbol samSym=(MethodSymbol)types.findDescriptorSymbol(tree.type.tsym);
  List<Object> staticArgs=List.<Object>of(typeToMethodType(samSym.type),new Pool.MethodHandle(refKind,refSym,types),typeToMethodType(tree.getDescriptorType(types)));
  ListBuffer<Type> indy_args_types=new ListBuffer<>();
  for (  JCExpression arg : indy_args) {
    indy_args_types.append(arg.type);
  }
  MethodType indyType=new MethodType(indy_args_types.toList(),tree.type,List.<Type>nil(),syms.methodClass);
  Name metafactoryName=context.needsAltMetafactory() ? names.altMetafactory : names.metafactory;
  if (context.needsAltMetafactory()) {
    ListBuffer<Object> markers=new ListBuffer<>();
    for (    Type t : tree.targets.tail) {
      if (t.tsym != syms.serializableType.tsym) {
        markers.append(t.tsym);
      }
    }
    int flags=context.isSerializable() ? FLAG_SERIALIZABLE : 0;
    boolean hasMarkers=markers.nonEmpty();
    boolean hasBridges=context.bridges.nonEmpty();
    if (hasMarkers) {
      flags|=FLAG_MARKERS;
    }
    if (hasBridges) {
      flags|=FLAG_BRIDGES;
    }
    staticArgs=staticArgs.append(flags);
    if (hasMarkers) {
      staticArgs=staticArgs.append(markers.length());
      staticArgs=staticArgs.appendList(markers.toList());
    }
    if (hasBridges) {
      staticArgs=staticArgs.append(context.bridges.length() - 1);
      for (      Symbol s : context.bridges) {
        Type s_erasure=s.erasure(types);
        if (!types.isSameType(s_erasure,samSym.erasure(types))) {
          staticArgs=staticArgs.append(s.erasure(types));
        }
      }
    }
    if (context.isSerializable()) {
      int prevPos=make.pos;
      try {
        make.at(kInfo.clazz);
        addDeserializationCase(refKind,refSym,tree.type,samSym,tree,staticArgs,indyType);
      }
  finally {
        make.at(prevPos);
      }
    }
  }
  return makeIndyCall(tree,syms.lambdaMetafactory,metafactoryName,staticArgs,indyType,indy_args,samSym.name);
}","/** 
 * Generate an indy method call to the meta factory
 */
private JCExpression makeMetafactoryIndyCall(TranslationContext<?> context,int refKind,Symbol refSym,List<JCExpression> indy_args){
  JCFunctionalExpression tree=context.tree;
  MethodSymbol samSym=(MethodSymbol)types.findDescriptorSymbol(tree.type.tsym);
  List<Object> staticArgs=List.<Object>of(typeToMethodType(samSym.type),new Pool.MethodHandle(refKind,refSym,types),typeToMethodType(tree.getDescriptorType(types)));
  ListBuffer<Type> indy_args_types=new ListBuffer<>();
  for (  JCExpression arg : indy_args) {
    indy_args_types.append(arg.type);
  }
  MethodType indyType=new MethodType(indy_args_types.toList(),tree.type,List.<Type>nil(),syms.methodClass);
  Name metafactoryName=context.needsAltMetafactory() ? names.altMetafactory : names.metafactory;
  if (context.needsAltMetafactory()) {
    ListBuffer<Object> markers=new ListBuffer<>();
    for (    Type t : tree.targets.tail) {
      if (t.tsym != syms.serializableType.tsym) {
        markers.append(t.tsym);
      }
    }
    int flags=context.isSerializable() ? FLAG_SERIALIZABLE : 0;
    boolean hasMarkers=markers.nonEmpty();
    boolean hasBridges=context.bridges.nonEmpty();
    if (hasMarkers) {
      flags|=FLAG_MARKERS;
    }
    if (hasBridges) {
      flags|=FLAG_BRIDGES;
    }
    staticArgs=staticArgs.append(flags);
    if (hasMarkers) {
      staticArgs=staticArgs.append(markers.length());
      staticArgs=staticArgs.appendList(markers.toList());
    }
    if (hasBridges) {
      staticArgs=staticArgs.append(context.bridges.length() - 1);
      for (      Symbol s : context.bridges) {
        Type s_erasure=s.erasure(types);
        if (!types.isSameType(s_erasure,samSym.erasure(types))) {
          staticArgs=staticArgs.append(s.erasure(types));
        }
      }
    }
    if (context.isSerializable()) {
      addDeserializationCase(refKind,refSym,tree.type,samSym,tree,staticArgs,indyType);
    }
  }
  return makeIndyCall(tree,syms.lambdaMetafactory,metafactoryName,staticArgs,indyType,indy_args,samSym.name);
}"
77219,"private JCBlock makeLambdaExpressionBody(JCExpression expr,JCMethodDecl lambdaMethodDecl){
  Type restype=lambdaMethodDecl.type.getReturnType();
  boolean isLambda_void=expr.type.hasTag(VOID);
  boolean isTarget_void=restype.hasTag(VOID);
  boolean isTarget_Void=types.isSameType(restype,types.boxedClass(syms.voidType).type);
  int prevPos=make.pos;
  try {
    if (isTarget_void) {
      JCStatement stat=make.at(expr).Exec(expr);
      return make.Block(0,List.<JCStatement>of(stat));
    }
 else     if (isLambda_void && isTarget_Void) {
      ListBuffer<JCStatement> stats=new ListBuffer<>();
      stats.append(make.at(expr).Exec(expr));
      stats.append(make.Return(make.Literal(BOT,null).setType(syms.botType)));
      return make.Block(0,stats.toList());
    }
 else {
      JCExpression retExpr=transTypes.coerce(attrEnv,expr,restype);
      return make.at(retExpr).Block(0,List.<JCStatement>of(make.Return(retExpr)));
    }
  }
  finally {
    make.at(prevPos);
  }
}","private JCBlock makeLambdaExpressionBody(JCExpression expr,JCMethodDecl lambdaMethodDecl){
  Type restype=lambdaMethodDecl.type.getReturnType();
  boolean isLambda_void=expr.type.hasTag(VOID);
  boolean isTarget_void=restype.hasTag(VOID);
  boolean isTarget_Void=types.isSameType(restype,types.boxedClass(syms.voidType).type);
  if (isTarget_void) {
    JCStatement stat=make.Exec(expr);
    return make.Block(0,List.<JCStatement>of(stat));
  }
 else   if (isLambda_void && isTarget_Void) {
    ListBuffer<JCStatement> stats=new ListBuffer<>();
    stats.append(make.Exec(expr));
    stats.append(make.Return(make.Literal(BOT,null).setType(syms.botType)));
    return make.Block(0,stats.toList());
  }
 else {
    JCExpression retExpr=transTypes.coerce(attrEnv,expr,restype);
    return make.at(retExpr).Block(0,List.<JCStatement>of(make.Return(retExpr)));
  }
}"
77220,"private KlassInfo(JCClassDecl clazz){
  this.clazz=clazz;
  appendedMethodList=new ListBuffer<>();
  deserializeCases=new HashMap<String,ListBuffer<JCStatement>>();
  MethodType type=new MethodType(List.of(syms.serializedLambdaType),syms.objectType,List.<Type>nil(),syms.methodClass);
  deserMethodSym=makePrivateSyntheticMethod(STATIC,names.deserializeLambda,type,clazz.sym);
  deserParamSym=new VarSymbol(FINAL,names.fromString(""String_Node_Str""),syms.serializedLambdaType,deserMethodSym);
}","private KlassInfo(Symbol kSym){
  appendedMethodList=new ListBuffer<>();
  deserializeCases=new HashMap<String,ListBuffer<JCStatement>>();
  MethodType type=new MethodType(List.of(syms.serializedLambdaType),syms.objectType,List.<Type>nil(),syms.methodClass);
  deserMethodSym=makePrivateSyntheticMethod(STATIC,names.deserializeLambda,type,kSym);
  deserParamSym=new VarSymbol(FINAL,names.fromString(""String_Node_Str""),syms.serializedLambdaType,deserMethodSym);
}"
77221,"/** 
 * Returns the names of the annotation types supported by this processor.  An element of the result may be the canonical (fully qualified) name of a supported annotation type. Alternately it may be of the form &quot;<tt><i>name</i>.*</tt>&quot; representing the set of all annotation types with canonical names beginning with &quot;<tt><i>name.</i></tt>&quot;.  Finally,   {@code ""*""} by itself represents the set of all annotation types,including the empty set.  Note that a processor should not claim  {@code ""*""} unless it is actually processing all files;claiming unnecessary annotations may cause a performance slowdown in some environments. <p>Each string returned in the set must be accepted by the following grammar: <blockquote> <dl> <dt><i>SupportedAnnotationTypeString:</i> <dd><i>TypeName</i> <i>DotStar</i><sub><i>opt</i></sub> <dd><tt>*</tt> <p> <dt><i>DotStar:</i> <dd><tt>.</tt> <tt>*</tt> </dl> </blockquote> where <i>TypeName</i> is as defined in <cite>The Java&trade; Language Specification</cite>.
 * @return the names of the annotation types supported by this processor
 * @see javax.annotation.processing.SupportedAnnotationTypes
 * @jls 3.8 Identifiers
 * @jls 6.5.5 Meaning of Type Names
 */
Set<String> getSupportedAnnotationTypes();","/** 
 * Returns the names of the annotation types supported by this processor.  An element of the result may be the canonical (fully qualified) name of a supported annotation type. Alternately it may be of the form &quot;<tt><i>name</i>.*</tt>&quot; representing the set of all annotation types with canonical names beginning with &quot;<tt><i>name.</i></tt>&quot;.  Finally,   {@code ""*""} by itself represents the set of all annotation types,including the empty set.  Note that a processor should not claim  {@code ""*""} unless it is actually processing all files;claiming unnecessary annotations may cause a performance slowdown in some environments. <p>Each string returned in the set must be accepted by the following grammar: <blockquote> <dl> <dt><i>SupportedAnnotationTypeString:</i> <dd><i>TypeName</i> <i>DotStar</i><sub><i>opt</i></sub> <dd><tt>*</tt> <dt><i>DotStar:</i> <dd><tt>.</tt> <tt>*</tt> </dl> </blockquote> where <i>TypeName</i> is as defined in <cite>The Java&trade; Language Specification</cite>.
 * @return the names of the annotation types supported by this processor
 * @see javax.annotation.processing.SupportedAnnotationTypes
 * @jls 3.8 Identifiers
 * @jls 6.5.5 Meaning of Type Names
 */
Set<String> getSupportedAnnotationTypes();"
77222,"/** 
 * Returns the options recognized by this processor.  An implementation of the processing tool must provide a way to pass processor-specific options distinctly from options passed to the tool itself, see   {@link ProcessingEnvironment#getOptions getOptions}. <p>Each string returned in the set must be a period separated sequence of   {@linkplain javax.lang.model.SourceVersion#isIdentifier identifiers}: <blockquote> <dl> <dt><i>SupportedOptionString:</i> <dd><i>Identifiers</i> <p> <dt><i>Identifiers:</i> <dd> <i>Identifier</i> <dd> <i>Identifier</i>   {@code .} <i>Identifiers</i><p> <dt><i>Identifier:</i> <dd>Syntactic identifier, including keywords and literals </dl> </blockquote> <p> A tool might use this information to determine if any options provided by a user are unrecognized by any processor, in which case it may wish to report a warning.
 * @return the options recognized by this processor or anempty collection if none
 * @see javax.annotation.processing.SupportedOptions
 */
Set<String> getSupportedOptions();","/** 
 * Returns the options recognized by this processor.  An implementation of the processing tool must provide a way to pass processor-specific options distinctly from options passed to the tool itself, see   {@link ProcessingEnvironment#getOptions getOptions}. <p>Each string returned in the set must be a period separated sequence of   {@linkplain javax.lang.model.SourceVersion#isIdentifier identifiers}: <blockquote> <dl> <dt><i>SupportedOptionString:</i> <dd><i>Identifiers</i> <dt><i>Identifiers:</i> <dd> <i>Identifier</i> <dd> <i>Identifier</i>   {@code .} <i>Identifiers</i><dt><i>Identifier:</i> <dd>Syntactic identifier, including keywords and literals </dl> </blockquote> <p> A tool might use this information to determine if any options provided by a user are unrecognized by any processor, in which case it may wish to report a warning.
 * @return the options recognized by this processor or anempty collection if none
 * @see javax.annotation.processing.SupportedOptions
 */
Set<String> getSupportedOptions();"
77223,"/** 
 * Retrieves a context for resolving <code>name</code>. If the first component of <code>name</code> name is a URL string, then attempt to find a URL context for it. If none is found, or if the first component of <code>name</code> is not a URL string, then return <code>getDefaultInitCtx()</code>. <p> When creating a subclass of InitialContext, use this method as follows. Define a new method that uses this method to get an initial context of the desired subclass. <p><blockquote><pre> protected XXXContext getURLOrDefaultInitXXXCtx(Name name) throws NamingException { Context answer = getURLOrDefaultInitCtx(name); if (!(answer instanceof XXXContext)) { if (answer == null) { throw new NoInitialContextException(); } else { throw new NotContextException(""Not an XXXContext""); } } return (XXXContext)answer; } </pre></blockquote> When providing implementations for the new methods in the subclass, use this newly defined method to get the initial context. <p><blockquote><pre> public Object XXXMethod1(Name name, ...) { throws NamingException { return getURLOrDefaultInitXXXCtx(name).XXXMethod1(name, ...); } </pre></blockquote>
 * @param name The non-null name for which to get the context.
 * @return A URL context for <code>name</code> or the cachedinitial context. The result cannot be null.
 * @exception NoInitialContextException If cannot find an initial context.
 * @exception NamingException In a naming exception is encountered.
 * @see javax.naming.spi.NamingManager#getURLContext
 */
protected Context getURLOrDefaultInitCtx(Name name) throws NamingException {
  if (NamingManager.hasInitialContextFactoryBuilder()) {
    return getDefaultInitCtx();
  }
  if (name.size() > 0) {
    String first=name.get(0);
    String scheme=getURLScheme(first);
    if (scheme != null) {
      Context ctx=NamingManager.getURLContext(scheme,myProps);
      if (ctx != null) {
        return ctx;
      }
    }
  }
  return getDefaultInitCtx();
}","/** 
 * Retrieves a context for resolving <code>name</code>. If the first component of <code>name</code> name is a URL string, then attempt to find a URL context for it. If none is found, or if the first component of <code>name</code> is not a URL string, then return <code>getDefaultInitCtx()</code>. <p> When creating a subclass of InitialContext, use this method as follows. Define a new method that uses this method to get an initial context of the desired subclass. <blockquote><pre> protected XXXContext getURLOrDefaultInitXXXCtx(Name name) throws NamingException { Context answer = getURLOrDefaultInitCtx(name); if (!(answer instanceof XXXContext)) { if (answer == null) { throw new NoInitialContextException(); } else { throw new NotContextException(""Not an XXXContext""); } } return (XXXContext)answer; } </pre></blockquote> When providing implementations for the new methods in the subclass, use this newly defined method to get the initial context. <blockquote><pre> public Object XXXMethod1(Name name, ...) { throws NamingException { return getURLOrDefaultInitXXXCtx(name).XXXMethod1(name, ...); } </pre></blockquote>
 * @param name The non-null name for which to get the context.
 * @return A URL context for <code>name</code> or the cachedinitial context. The result cannot be null.
 * @exception NoInitialContextException If cannot find an initial context.
 * @exception NamingException In a naming exception is encountered.
 * @see javax.naming.spi.NamingManager#getURLContext
 */
protected Context getURLOrDefaultInitCtx(Name name) throws NamingException {
  if (NamingManager.hasInitialContextFactoryBuilder()) {
    return getDefaultInitCtx();
  }
  if (name.size() > 0) {
    String first=name.get(0);
    String scheme=getURLScheme(first);
    if (scheme != null) {
      Context ctx=NamingManager.getURLContext(scheme,myProps);
      if (ctx != null) {
        return ctx;
      }
    }
  }
  return getDefaultInitCtx();
}"
77224,"/** 
 * Discards the referral about to be processed. A call to this method should be followed by a call to <code>getReferralContext</code> to allow the processing of other referrals to continue. The following code fragment shows a typical usage pattern. <p><blockquote><pre> } catch (ReferralException e) { if (!shallIFollow(e.getReferralInfo())) { if (!e.skipReferral()) { return; } } ctx = e.getReferralContext(); } </pre></blockquote>
 * @return true If more referral processing is pending; false otherwise.
 */
public abstract boolean skipReferral();","/** 
 * Discards the referral about to be processed. A call to this method should be followed by a call to <code>getReferralContext</code> to allow the processing of other referrals to continue. The following code fragment shows a typical usage pattern. <blockquote><pre> } catch (ReferralException e) { if (!shallIFollow(e.getReferralInfo())) { if (!e.skipReferral()) { return; } } ctx = e.getReferralContext(); } </pre></blockquote>
 * @return true If more referral processing is pending; false otherwise.
 */
public abstract boolean skipReferral();"
77225,"/** 
 * Retries the referral currently being processed. A call to this method should be followed by a call to <code>getReferralContext</code> to allow the current referral to be retried. The following code fragment shows a typical usage pattern. <p><blockquote><pre> } catch (ReferralException e) { while (true) { try { ctx = e.getReferralContext(env); break; } catch (NamingException ne) { if (! shallIRetry()) { return; } // modify environment properties (env), if necessary e.retryReferral(); } } } </pre></blockquote>
 */
public abstract void retryReferral();","/** 
 * Retries the referral currently being processed. A call to this method should be followed by a call to <code>getReferralContext</code> to allow the current referral to be retried. The following code fragment shows a typical usage pattern. <blockquote><pre> } catch (ReferralException e) { while (true) { try { ctx = e.getReferralContext(env); break; } catch (NamingException ne) { if (! shallIRetry()) { return; } // modify environment properties (env), if necessary e.retryReferral(); } } } </pre></blockquote>
 */
public abstract void retryReferral();"
77226,"private void checkPackageAccess(Class<?> cls,ProtectionDomain pd){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    if (ReflectUtil.isNonPublicProxyClass(cls)) {
      for (      Class intf : cls.getInterfaces()) {
        checkPackageAccess(intf,pd);
      }
      return;
    }
    final String name=cls.getName();
    final int i=name.lastIndexOf('.');
    if (i != -1) {
      AccessController.doPrivileged(new PrivilegedAction<Void>(){
        public Void run(){
          sm.checkPackageAccess(name.substring(0,i));
          return null;
        }
      }
,new AccessControlContext(new ProtectionDomain[]{pd}));
    }
  }
  domains.add(pd);
}","private void checkPackageAccess(Class<?> cls,ProtectionDomain pd){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    if (ReflectUtil.isNonPublicProxyClass(cls)) {
      for (      Class<?> intf : cls.getInterfaces()) {
        checkPackageAccess(intf,pd);
      }
      return;
    }
    final String name=cls.getName();
    final int i=name.lastIndexOf('.');
    if (i != -1) {
      AccessController.doPrivileged(new PrivilegedAction<Void>(){
        public Void run(){
          sm.checkPackageAccess(name.substring(0,i));
          return null;
        }
      }
,new AccessControlContext(new ProtectionDomain[]{pd}));
    }
  }
  domains.add(pd);
}"
77227,"/** 
 * Loads the class with the specified <a href=""#name"">binary name</a>.  The default implementation of this method searches for classes in the following order: <p><ol> <li><p> Invoke   {@link #findLoadedClass(String)} to check if the classhas already been loaded.  </p></li> <li><p> Invoke the  {@link #loadClass(String) <tt>loadClass</tt>} methodon the parent class loader.  If the parent is <tt>null</tt> the class loader built-in to the virtual machine is used, instead.  </p></li> <li><p> Invoke the  {@link #findClass(String)} method to find theclass.  </p></li> </ol> <p> If the class was found using the above steps, and the <tt>resolve</tt> flag is true, this method will then invoke the  {@link #resolveClass(Class)} method on the resulting <tt>Class</tt> object.<p> Subclasses of <tt>ClassLoader</tt> are encouraged to override  {@link #findClass(String)}, rather than this method.  </p> <p> Unless overridden, this method synchronizes on the result of  {@link #getClassLoadingLock <tt>getClassLoadingLock</tt>} methodduring the entire class loading process.
 * @param name The <a href=""#name"">binary name</a> of the class
 * @param resolve If <tt>true</tt> then resolve the class
 * @return  The resulting <tt>Class</tt> object
 * @throws ClassNotFoundException If the class could not be found
 */
protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
synchronized (getClassLoadingLock(name)) {
    Class<?> c=findLoadedClass(name);
    if (c == null) {
      long t0=System.nanoTime();
      try {
        if (parent != null) {
          c=parent.loadClass(name,false);
        }
 else {
          c=findBootstrapClassOrNull(name);
        }
      }
 catch (      ClassNotFoundException e) {
      }
      if (c == null) {
        long t1=System.nanoTime();
        c=findClass(name);
        sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
        sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
        sun.misc.PerfCounter.getFindClasses().increment();
      }
    }
    if (resolve) {
      resolveClass(c);
    }
    return c;
  }
}","/** 
 * Loads the class with the specified <a href=""#name"">binary name</a>.  The default implementation of this method searches for classes in the following order: <ol> <li><p> Invoke   {@link #findLoadedClass(String)} to check if the classhas already been loaded.  </p></li> <li><p> Invoke the  {@link #loadClass(String) <tt>loadClass</tt>} methodon the parent class loader.  If the parent is <tt>null</tt> the class loader built-in to the virtual machine is used, instead.  </p></li> <li><p> Invoke the  {@link #findClass(String)} method to find theclass.  </p></li> </ol> <p> If the class was found using the above steps, and the <tt>resolve</tt> flag is true, this method will then invoke the  {@link #resolveClass(Class)} method on the resulting <tt>Class</tt> object.<p> Subclasses of <tt>ClassLoader</tt> are encouraged to override  {@link #findClass(String)}, rather than this method.  </p> <p> Unless overridden, this method synchronizes on the result of  {@link #getClassLoadingLock <tt>getClassLoadingLock</tt>} methodduring the entire class loading process.
 * @param name The <a href=""#name"">binary name</a> of the class
 * @param resolve If <tt>true</tt> then resolve the class
 * @return  The resulting <tt>Class</tt> object
 * @throws ClassNotFoundException If the class could not be found
 */
protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
synchronized (getClassLoadingLock(name)) {
    Class<?> c=findLoadedClass(name);
    if (c == null) {
      long t0=System.nanoTime();
      try {
        if (parent != null) {
          c=parent.loadClass(name,false);
        }
 else {
          c=findBootstrapClassOrNull(name);
        }
      }
 catch (      ClassNotFoundException e) {
      }
      if (c == null) {
        long t1=System.nanoTime();
        c=findClass(name);
        sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
        sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
        sun.misc.PerfCounter.getFindClasses().increment();
      }
    }
    if (resolve) {
      resolveClass(c);
    }
    return c;
  }
}"
77228,"/** 
 * Remove all stale entries, everywhere. 
 */
private void removeStaleEntries(){
  Entry[] cache=getCache();
  removeStaleEntries(cache,0,cache.length + PROBE_LIMIT - 1);
}","/** 
 * Remove all stale entries, everywhere. 
 */
private void removeStaleEntries(){
  Entry<?>[] cache=getCache();
  removeStaleEntries(cache,0,cache.length + PROBE_LIMIT - 1);
}"
77229,"/** 
 * Returns the stack depth of the most recently executing method from a class defined using a non-system class loader.  A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by   {@link ClassLoader#getSystemClassLoader}) or one of its ancestors. <p> This method will return -1 in the following three cases:<p> <ol> <li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors. <li>All methods on the execution stack up to the first ""privileged"" caller (see   {@link java.security.AccessController#doPrivileged}) are from classes defined using the system class loader or one of its ancestors. <li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException. </ol>
 * @return the depth on the stack frame of the most recent occurrence ofa method from a class defined using a non-system class loader.
 * @deprecated This type of security checking is not recommended.It is recommended that the <code>checkPermission</code> call be used instead.
 * @see java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
 * @see #checkPermission(java.security.Permission) checkPermission
 */
@Deprecated protected int classLoaderDepth(){
  int depth=classLoaderDepth0();
  if (depth != -1) {
    if (hasAllPermission())     depth=-1;
 else     depth--;
  }
  return depth;
}","/** 
 * Returns the stack depth of the most recently executing method from a class defined using a non-system class loader.  A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by   {@link ClassLoader#getSystemClassLoader}) or one of its ancestors. <p> This method will return -1 in the following three cases: <ol> <li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors. <li>All methods on the execution stack up to the first ""privileged"" caller (see   {@link java.security.AccessController#doPrivileged}) are from classes defined using the system class loader or one of its ancestors. <li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException. </ol>
 * @return the depth on the stack frame of the most recent occurrence ofa method from a class defined using a non-system class loader.
 * @deprecated This type of security checking is not recommended.It is recommended that the <code>checkPermission</code> call be used instead.
 * @see java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
 * @see #checkPermission(java.security.Permission) checkPermission
 */
@Deprecated protected int classLoaderDepth(){
  int depth=classLoaderDepth0();
  if (depth != -1) {
    if (hasAllPermission())     depth=-1;
 else     depth--;
  }
  return depth;
}"
77230,"/** 
 * Throws a <code>SecurityException</code> if the calling thread is not allowed to access members. <p> The default policy is to allow access to PUBLIC members, as well as access to classes that have the same class loader as the caller. In all other cases, this method calls <code>checkPermission</code> with the <code>RuntimePermission(""accessDeclaredMembers"") </code> permission. <p> If this method is overridden, then a call to <code>super.checkMemberAccess</code> cannot be made, as the default implementation of <code>checkMemberAccess</code> relies on the code being checked being at a stack depth of 4.
 * @param clazz the class that reflection is to be performed on.
 * @param which type of access, PUBLIC or DECLARED.
 * @exception SecurityException if the caller does not havepermission to access members.
 * @exception NullPointerException if the <code>clazz</code> argument is<code>null</code>.
 * @deprecated This method relies on the caller being at a stack depthof 4 which is error-prone and cannot be enforced by the runtime. Users of this method should instead invoke  {@link #checkPermission}directly.  This method will be changed in a future release to check the permission   {@code java.security.AllPermission}.
 * @see java.lang.reflect.Member
 * @since JDK1.1
 * @see #checkPermission(java.security.Permission) checkPermission
 */
@Deprecated @CallerSensitive public void checkMemberAccess(Class<?> clazz,int which){
  if (clazz == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (which != Member.PUBLIC) {
    Class stack[]=getClassContext();
    if ((stack.length < 4) || (stack[3].getClassLoader() != clazz.getClassLoader())) {
      checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);
    }
  }
}","/** 
 * Throws a <code>SecurityException</code> if the calling thread is not allowed to access members. <p> The default policy is to allow access to PUBLIC members, as well as access to classes that have the same class loader as the caller. In all other cases, this method calls <code>checkPermission</code> with the <code>RuntimePermission(""accessDeclaredMembers"") </code> permission. <p> If this method is overridden, then a call to <code>super.checkMemberAccess</code> cannot be made, as the default implementation of <code>checkMemberAccess</code> relies on the code being checked being at a stack depth of 4.
 * @param clazz the class that reflection is to be performed on.
 * @param which type of access, PUBLIC or DECLARED.
 * @exception SecurityException if the caller does not havepermission to access members.
 * @exception NullPointerException if the <code>clazz</code> argument is<code>null</code>.
 * @deprecated This method relies on the caller being at a stack depthof 4 which is error-prone and cannot be enforced by the runtime. Users of this method should instead invoke  {@link #checkPermission}directly.  This method will be changed in a future release to check the permission   {@code java.security.AllPermission}.
 * @see java.lang.reflect.Member
 * @since JDK1.1
 * @see #checkPermission(java.security.Permission) checkPermission
 */
@Deprecated @CallerSensitive public void checkMemberAccess(Class<?> clazz,int which){
  if (clazz == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (which != Member.PUBLIC) {
    Class<?> stack[]=getClassContext();
    if ((stack.length < 4) || (stack[3].getClassLoader() != clazz.getClassLoader())) {
      checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);
    }
  }
}"
77231,"/** 
 * Throws a <code>SecurityException</code> if the calling thread is not allowed to access the system property with the specified <code>key</code> name. <p> This method is used by the <code>getProperty</code> method of class <code>System</code>. <p> This method calls <code>checkPermission</code> with the <code>PropertyPermission(key, ""read"")</code> permission. <p> <p> If you override this method, then you should make a call to <code>super.checkPropertyAccess</code> at the point the overridden method would normally throw an exception.
 * @param key   a system property key.
 * @exception SecurityException  if the calling thread does not havepermission to access the specified system property.
 * @exception NullPointerException if the <code>key</code> argument is<code>null</code>.
 * @exception IllegalArgumentException if <code>key</code> is empty.
 * @see java.lang.System#getProperty(java.lang.String)
 * @see #checkPermission(java.security.Permission) checkPermission
 */
public void checkPropertyAccess(String key){
  checkPermission(new PropertyPermission(key,SecurityConstants.PROPERTY_READ_ACTION));
}","/** 
 * Throws a <code>SecurityException</code> if the calling thread is not allowed to access the system property with the specified <code>key</code> name. <p> This method is used by the <code>getProperty</code> method of class <code>System</code>. <p> This method calls <code>checkPermission</code> with the <code>PropertyPermission(key, ""read"")</code> permission. <p> If you override this method, then you should make a call to <code>super.checkPropertyAccess</code> at the point the overridden method would normally throw an exception.
 * @param key   a system property key.
 * @exception SecurityException  if the calling thread does not havepermission to access the specified system property.
 * @exception NullPointerException if the <code>key</code> argument is<code>null</code>.
 * @exception IllegalArgumentException if <code>key</code> is empty.
 * @see java.lang.System#getProperty(java.lang.String)
 * @see #checkPermission(java.security.Permission) checkPermission
 */
public void checkPropertyAccess(String key){
  checkPermission(new PropertyPermission(key,SecurityConstants.PROPERTY_READ_ACTION));
}"
77232,"/** 
 * Returns the class loader of the most recently executing method from a class defined using a non-system class loader. A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by   {@link ClassLoader#getSystemClassLoader}) or one of its ancestors. <p> This method will return <code>null</code> in the following three cases:<p> <ol> <li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors. <li>All methods on the execution stack up to the first ""privileged"" caller (see   {@link java.security.AccessController#doPrivileged}) are from classes defined using the system class loader or one of its ancestors. <li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException. </ol>
 * @return  the class loader of the most recent occurrence on the stackof a method from a class defined using a non-system class loader.
 * @deprecated This type of security checking is not recommended.It is recommended that the <code>checkPermission</code> call be used instead.
 * @see java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
 * @see #checkPermission(java.security.Permission) checkPermission
 */
@Deprecated protected ClassLoader currentClassLoader(){
  ClassLoader cl=currentClassLoader0();
  if ((cl != null) && hasAllPermission())   cl=null;
  return cl;
}","/** 
 * Returns the class loader of the most recently executing method from a class defined using a non-system class loader. A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by   {@link ClassLoader#getSystemClassLoader}) or one of its ancestors. <p> This method will return <code>null</code> in the following three cases: <ol> <li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors. <li>All methods on the execution stack up to the first ""privileged"" caller (see   {@link java.security.AccessController#doPrivileged}) are from classes defined using the system class loader or one of its ancestors. <li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException. </ol>
 * @return  the class loader of the most recent occurrence on the stackof a method from a class defined using a non-system class loader.
 * @deprecated This type of security checking is not recommended.It is recommended that the <code>checkPermission</code> call be used instead.
 * @see java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
 * @see #checkPermission(java.security.Permission) checkPermission
 */
@Deprecated protected ClassLoader currentClassLoader(){
  ClassLoader cl=currentClassLoader0();
  if ((cl != null) && hasAllPermission())   cl=null;
  return cl;
}"
77233,"/** 
 * Returns the class of the most recently executing method from a class defined using a non-system class loader. A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by   {@link ClassLoader#getSystemClassLoader}) or one of its ancestors. <p> This method will return <code>null</code> in the following three cases:<p> <ol> <li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors. <li>All methods on the execution stack up to the first ""privileged"" caller (see   {@link java.security.AccessController#doPrivileged}) are from classes defined using the system class loader or one of its ancestors. <li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException. </ol>
 * @return  the class  of the most recent occurrence on the stackof a method from a class defined using a non-system class loader.
 * @deprecated This type of security checking is not recommended.It is recommended that the <code>checkPermission</code> call be used instead.
 * @see java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
 * @see #checkPermission(java.security.Permission) checkPermission
 */
@Deprecated protected Class<?> currentLoadedClass(){
  Class<?> c=currentLoadedClass0();
  if ((c != null) && hasAllPermission())   c=null;
  return c;
}","/** 
 * Returns the class of the most recently executing method from a class defined using a non-system class loader. A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by   {@link ClassLoader#getSystemClassLoader}) or one of its ancestors. <p> This method will return <code>null</code> in the following three cases: <ol> <li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors. <li>All methods on the execution stack up to the first ""privileged"" caller (see   {@link java.security.AccessController#doPrivileged}) are from classes defined using the system class loader or one of its ancestors. <li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException. </ol>
 * @return  the class  of the most recent occurrence on the stackof a method from a class defined using a non-system class loader.
 * @deprecated This type of security checking is not recommended.It is recommended that the <code>checkPermission</code> call be used instead.
 * @see java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
 * @see #checkPermission(java.security.Permission) checkPermission
 */
@Deprecated protected Class<?> currentLoadedClass(){
  Class<?> c=currentLoadedClass0();
  if ((c != null) && hasAllPermission())   c=null;
  return c;
}"
77234,"/** 
 * Call a JavaScript function member of this object.
 * @param name name of the member function to call
 * @param args arguments to be passed to the member function
 * @return result of call
 */
public Object callMember(String name,Object... args){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Call a JavaScript function member of this object.
 * @param name name of the member function to call
 * @param args arguments to be passed to the member function
 * @return result of call
 */
public Object callMember(final String name,final Object... args){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
77235,"/** 
 * Does this object have a named member?
 * @param name name of member
 * @return true if this object has a member of the given name
 */
public boolean hasMember(String name){
  return false;
}","/** 
 * Does this object have a named member?
 * @param name name of member
 * @return true if this object has a member of the given name
 */
public boolean hasMember(final String name){
  return false;
}"
77236,"/** 
 * Retrieves a named member of this JavaScript object.
 * @param name of member
 * @return member
 */
public Object getMember(String name){
  return null;
}","/** 
 * Retrieves a named member of this JavaScript object.
 * @param name of member
 * @return member
 */
public Object getMember(final String name){
  return null;
}"
77237,"/** 
 * Call this object as a JavaScript function. This is equivalent to 'func.apply(thiz, args)' in JavaScript.
 * @param thiz 'this' object to be passed to the function
 * @param args arguments to method
 * @return result of call
 */
public Object call(Object thiz,Object... args){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Call this object as a JavaScript function. This is equivalent to 'func.apply(thiz, args)' in JavaScript.
 * @param thiz 'this' object to be passed to the function
 * @param args arguments to method
 * @return result of call
 */
public Object call(final Object thiz,final Object... args){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
77238,"/** 
 * Remove a named member from this JavaScript object
 * @param name name of the member
 */
public void removeMember(String name){
}","/** 
 * Remove a named member from this JavaScript object
 * @param name name of the member
 */
public void removeMember(final String name){
}"
77239,"/** 
 * Set an indexed member in this JavaScript object
 * @param index index of the member slot
 * @param value value of the member
 */
public void setSlot(int index,Object value){
}","/** 
 * Set an indexed member in this JavaScript object
 * @param index index of the member slot
 * @param value value of the member
 */
public void setSlot(final int index,final Object value){
}"
77240,"/** 
 * Retrieves an indexed member of this JavaScript object.
 * @param index index slot to retrieve
 * @return member
 */
public Object getSlot(int index){
  return null;
}","/** 
 * Retrieves an indexed member of this JavaScript object.
 * @param index index slot to retrieve
 * @return member
 */
public Object getSlot(final int index){
  return null;
}"
77241,"/** 
 * Does this object have a indexed property?
 * @param slot index to check
 * @return true if this object has a slot
 */
public boolean hasSlot(int slot){
  return false;
}","/** 
 * Does this object have a indexed property?
 * @param slot index to check
 * @return true if this object has a slot
 */
public boolean hasSlot(final int slot){
  return false;
}"
77242,"/** 
 * Set a named member in this JavaScript object
 * @param name  name of the member
 * @param value value of the member
 */
public void setMember(String name,Object value){
}","/** 
 * Set a named member in this JavaScript object
 * @param name  name of the member
 * @param value value of the member
 */
public void setMember(final String name,final Object value){
}"
77243,"/** 
 * Evaluate a JavaScript expression.
 * @param s JavaScript expression to evaluate
 * @return evaluation result
 */
public Object eval(String s){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Evaluate a JavaScript expression.
 * @param s JavaScript expression to evaluate
 * @return evaluation result
 */
public Object eval(final String s){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
77244,"/** 
 * Call this 'constructor' JavaScript function to create a new object. This is equivalent to 'new func(arg1, arg2...)' in JavaScript.
 * @param args arguments to method
 * @return result of constructor call
 */
public Object newObject(Object... args){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Call this 'constructor' JavaScript function to create a new object. This is equivalent to 'new func(arg1, arg2...)' in JavaScript.
 * @param args arguments to method
 * @return result of constructor call
 */
public Object newObject(final Object... args){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
77245,"@Override public Object eval(final ScriptContext ctxt) throws ScriptException {
  final ScriptObject global=getNashornGlobalFrom(ctxt);
  if (func.getScope() == global) {
    return evalImpl(func,ctxt,global);
  }
 else {
    return evalImpl(compileImpl(source,ctxt),ctxt,global);
  }
}","@Override public Object eval(final ScriptContext ctxt) throws ScriptException {
  final ScriptObject globalObject=getNashornGlobalFrom(ctxt);
  if (func.getScope() == globalObject) {
    return evalImpl(func,ctxt,globalObject);
  }
  return evalImpl(compileImpl(source,ctxt),ctxt,globalObject);
}"
77246,"private CompiledScript asCompiledScript(final Source source) throws ScriptException {
  final ScriptFunction func=compileImpl(source,context);
  return new CompiledScript(){
    @Override public Object eval(    final ScriptContext ctxt) throws ScriptException {
      final ScriptObject global=getNashornGlobalFrom(ctxt);
      if (func.getScope() == global) {
        return evalImpl(func,ctxt,global);
      }
 else {
        return evalImpl(compileImpl(source,ctxt),ctxt,global);
      }
    }
    @Override public ScriptEngine getEngine(){
      return NashornScriptEngine.this;
    }
  }
;
}","private CompiledScript asCompiledScript(final Source source) throws ScriptException {
  final ScriptFunction func=compileImpl(source,context);
  return new CompiledScript(){
    @Override public Object eval(    final ScriptContext ctxt) throws ScriptException {
      final ScriptObject globalObject=getNashornGlobalFrom(ctxt);
      if (func.getScope() == globalObject) {
        return evalImpl(func,ctxt,globalObject);
      }
      return evalImpl(compileImpl(source,ctxt),ctxt,globalObject);
    }
    @Override public ScriptEngine getEngine(){
      return NashornScriptEngine.this;
    }
  }
;
}"
77247,"public ArrayType getArrayType(){
  if (elementType.isInteger()) {
    return Type.INT_ARRAY;
  }
 else   if (elementType.isLong()) {
    return Type.LONG_ARRAY;
  }
 else   if (elementType.isNumeric()) {
    return Type.NUMBER_ARRAY;
  }
 else {
    return Type.OBJECT_ARRAY;
  }
}","/** 
 * Get the array element type as Java format, e.g. [I
 * @return array element type
 */
public ArrayType getArrayType(){
  if (elementType.isInteger()) {
    return Type.INT_ARRAY;
  }
 else   if (elementType.isLong()) {
    return Type.LONG_ARRAY;
  }
 else   if (elementType.isNumeric()) {
    return Type.NUMBER_ARRAY;
  }
 else {
    return Type.OBJECT_ARRAY;
  }
}"
77248,"@Override public boolean isOfContext(final Context context){
  return this.context == context;
}","@Override public boolean isOfContext(final Context ctxt){
  return this.context == ctxt;
}"
77249,"/** 
 * Nashorn extension: Error.captureStackTrace. Capture stack trace at the point of call into the Error object provided.
 * @param self self reference
 * @param errorObj the error object
 * @return undefined
 */
@Function(attributes=Attribute.NOT_ENUMERABLE,where=Where.CONSTRUCTOR) public static Object captureStackTrace(final Object self,final Object errorObj){
  Global.checkObject(errorObj);
  final ScriptObject sobj=(ScriptObject)errorObj;
  final ECMAException exp=new ECMAException(sobj,null);
  sobj.delete(""String_Node_Str"",false);
  final ScriptFunction getStack=ScriptFunctionImpl.makeFunction(""String_Node_Str"",GET_STACK);
  final ScriptFunction setStack=ScriptFunctionImpl.makeFunction(""String_Node_Str"",SET_STACK);
  sobj.addOwnProperty(""String_Node_Str"",Attribute.NOT_ENUMERABLE,getStack,setStack);
  return UNDEFINED;
}","/** 
 * Nashorn extension: Error.captureStackTrace. Capture stack trace at the point of call into the Error object provided.
 * @param self self reference
 * @param errorObj the error object
 * @return undefined
 */
@SuppressWarnings(""String_Node_Str"") @Function(attributes=Attribute.NOT_ENUMERABLE,where=Where.CONSTRUCTOR) public static Object captureStackTrace(final Object self,final Object errorObj){
  Global.checkObject(errorObj);
  final ScriptObject sobj=(ScriptObject)errorObj;
  new ECMAException(sobj,null);
  sobj.delete(""String_Node_Str"",false);
  final ScriptFunction getStack=ScriptFunctionImpl.makeFunction(""String_Node_Str"",GET_STACK);
  final ScriptFunction setStack=ScriptFunctionImpl.makeFunction(""String_Node_Str"",SET_STACK);
  sobj.addOwnProperty(""String_Node_Str"",Attribute.NOT_ENUMERABLE,getStack,setStack);
  return UNDEFINED;
}"
77250,"ClassLoader getSharedLoader(){
  return sharedLoader;
}","@SuppressWarnings(""String_Node_Str"") ClassLoader getSharedLoader(){
  return sharedLoader;
}"
77251,"/** 
 * Constructor A logger can be paired with a property, e.g.   {@code --log:codegen:info} is equivalent to {@code -Dnashorn.codegen.log}
 * @param loggerName name of logger - this is the unique key with which it can be identified
 * @param property   system property activating the logger on {@code info} level
 */
public DebugLogger(final String loggerName,final String property){
  if (property != null && Options.getBooleanProperty(property)) {
    this.logger=Logging.getOrCreateLogger(loggerName,Level.INFO);
  }
 else {
    this.logger=Logging.getLogger(loggerName);
  }
  this.isEnabled=logger.getLevel() != Level.OFF;
}","/** 
 * Constructor A logger can be paired with a property, e.g.   {@code --log:codegen:info} is equivalent to {@code -Dnashorn.codegen.log}
 * @param loggerName name of logger - this is the unique key with which it can be identified
 * @param property   system property activating the logger on {@code info} level
 */
public DebugLogger(final String loggerName,final String property){
}"
77252,"/** 
 * Check if the logger is above of the level of detail given
 * @see java.util.logging.Level
 * @param level logging level
 * @return true if level is above the given one
 */
public boolean levelAbove(final Level level){
  return logger.getLevel().intValue() > level.intValue();
}","/** 
 * Check if the logger is above of the level of detail given
 * @see java.util.logging.Level
 * @param level logging level
 * @return true if level is above the given one
 */
public boolean levelAbove(final Level level){
  return getLevel().intValue() > level.intValue();
}"
77253,"/** 
 * Is this global of the given Context?
 * @return true if this global belongs to the given Context
 */
public boolean isOfContext(Context context);","/** 
 * Is this global of the given Context?
 * @param ctxt the context
 * @return true if this global belongs to the given Context
 */
public boolean isOfContext(final Context ctxt);"
77254,"/** 
 * Returns the identification string associated with this <code>GraphicsDevice</code>. <p> A particular program might use more than one <code>GraphicsDevice</code> in a <code>GraphicsEnvironment</code>. This method returns a <code>String</code> identifying a particular <code>GraphicsDevice</code> in the local <code>GraphicsEnvironment</code>.  Although there is no public method to set this <code>String</code>, a programmer can use the <code>String</code> for debugging purposes.  Vendors of the Java<sup><font size=-2>TM</font></sup> Runtime Environment can format the return value of the <code>String</code>.  To determine how to interpret the value of the <code>String</code>, contact the vendor of your Java Runtime.  To find out who the vendor is, from your program, call the  {@link System#getProperty(String) getProperty} method of theSystem class with ""java.vendor"".
 * @return a <code>String</code> that is the identificationof this <code>GraphicsDevice</code>.
 */
public abstract String getIDstring();","/** 
 * Returns the identification string associated with this <code>GraphicsDevice</code>. <p> A particular program might use more than one <code>GraphicsDevice</code> in a <code>GraphicsEnvironment</code>. This method returns a <code>String</code> identifying a particular <code>GraphicsDevice</code> in the local <code>GraphicsEnvironment</code>.  Although there is no public method to set this <code>String</code>, a programmer can use the <code>String</code> for debugging purposes.  Vendors of the Java&trade; Runtime Environment can format the return value of the <code>String</code>.  To determine how to interpret the value of the <code>String</code>, contact the vendor of your Java Runtime.  To find out who the vendor is, from your program, call the  {@link System#getProperty(String) getProperty} method of theSystem class with ""java.vendor"".
 * @return a <code>String</code> that is the identificationof this <code>GraphicsDevice</code>.
 */
public abstract String getIDstring();"
77255,"/** 
 * Returns an array of design limits interleaved in the form [from->to] for each axis.  For example, design limits for weight could be from 0.1 to 1.0. The values are returned in the same order returned by <code>getDesignAxisNames</code>.
 * @return an array of design limits for each axis.
 */
public float[] getDesignAxisRanges();","/** 
 * Returns an array of design limits interleaved in the form [from&rarr;to] for each axis.  For example, design limits for weight could be from 0.1 to 1.0. The values are returned in the same order returned by <code>getDesignAxisNames</code>.
 * @return an array of design limits for each axis.
 */
public float[] getDesignAxisRanges();"
77256,"/** 
 * Returns an <code>int</code> that ORs together the values for all the ranges that will be shaped. <p> For example, to check if a shaper shapes to Arabic, you would use the following: <blockquote> <code>if ((shaper.getRanges() & shaper.ARABIC) != 0) { ... </code> </blockquote> <p>Note that this method supports only the bit mask-based ranges. Call   {@link #getRangeSet()} for the enum-based ranges.
 * @return the values for all the ranges to be shaped.
 */
public int getRanges(){
  return mask & ~CONTEXTUAL_MASK;
}","/** 
 * Returns an <code>int</code> that ORs together the values for all the ranges that will be shaped. <p> For example, to check if a shaper shapes to Arabic, you would use the following: <blockquote> <code>if ((shaper.getRanges() &amp; shaper.ARABIC) != 0) { ... </code> </blockquote> <p>Note that this method supports only the bit mask-based ranges. Call   {@link #getRangeSet()} for the enum-based ranges.
 * @return the values for all the ranges to be shaped.
 */
public int getRanges(){
  return mask & ~CONTEXTUAL_MASK;
}"
77257,"/** 
 * Attempts to select an input method or keyboard layout that supports the given locale, and returns a value indicating whether such an input method or keyboard layout has been successfully selected. The following steps are taken until an input method has been selected: <p> <ul> <li> If the currently selected input method or keyboard layout supports the requested locale, it remains selected.</li> <li> If there is no input method or keyboard layout available that supports the requested locale, the current input method or keyboard layout remains selected.</li> <li> If the user has previously selected an input method or keyboard layout for the requested locale from the user interface, then the most recently selected such input method or keyboard layout is reselected.</li> <li> Otherwise, an input method or keyboard layout that supports the requested locale is selected in an implementation dependent way.</li> </ul> Before switching away from an input method, any currently uncommitted text is committed. If no input method or keyboard layout supporting the requested locale is available, then false is returned. <p> Not all host operating systems provide API to determine the locale of the currently selected native input method or keyboard layout, and to select a native input method or keyboard layout by locale. For host operating systems that don't provide such API, <code>selectInputMethod</code> assumes that native input methods or keyboard layouts provided by the host operating system support only the system's default locale. <p> A text editing component may call this method, for example, when the user changes the insertion point, so that the user can immediately continue typing in the language of the surrounding text.
 * @param locale The desired new locale.
 * @return true if the input method or keyboard layout that's active afterthis call supports the desired locale.
 * @exception NullPointerException if <code>locale</code> is null
 */
public boolean selectInputMethod(Locale locale){
  return false;
}","/** 
 * Attempts to select an input method or keyboard layout that supports the given locale, and returns a value indicating whether such an input method or keyboard layout has been successfully selected. The following steps are taken until an input method has been selected: <ul> <li> If the currently selected input method or keyboard layout supports the requested locale, it remains selected.</li> <li> If there is no input method or keyboard layout available that supports the requested locale, the current input method or keyboard layout remains selected.</li> <li> If the user has previously selected an input method or keyboard layout for the requested locale from the user interface, then the most recently selected such input method or keyboard layout is reselected.</li> <li> Otherwise, an input method or keyboard layout that supports the requested locale is selected in an implementation dependent way.</li> </ul> Before switching away from an input method, any currently uncommitted text is committed. If no input method or keyboard layout supporting the requested locale is available, then false is returned. <p> Not all host operating systems provide API to determine the locale of the currently selected native input method or keyboard layout, and to select a native input method or keyboard layout by locale. For host operating systems that don't provide such API, <code>selectInputMethod</code> assumes that native input methods or keyboard layouts provided by the host operating system support only the system's default locale. <p> A text editing component may call this method, for example, when the user changes the insertion point, so that the user can immediately continue typing in the language of the surrounding text.
 * @param locale The desired new locale.
 * @return true if the input method or keyboard layout that's active afterthis call supports the desired locale.
 * @exception NullPointerException if <code>locale</code> is null
 */
public boolean selectInputMethod(Locale locale){
  return false;
}"
77258,"/** 
 * Returns the start offset within the selected text. If there is no selection, but there is a caret, the start and end offsets will be the same. Return 0 if the text is empty, or the caret position if no selection.
 * @return the index into the text of the start of the selection >= 0
 */
public int getSelectionStart(){
  return JTextComponent.this.getSelectionStart();
}","/** 
 * Returns the start offset within the selected text. If there is no selection, but there is a caret, the start and end offsets will be the same. Return 0 if the text is empty, or the caret position if no selection.
 * @return the index into the text of the start of the selection &ge; 0
 */
public int getSelectionStart(){
  return JTextComponent.this.getSelectionStart();
}"
77259,"/** 
 * Sets the selection end to the specified position.  The new end point is constrained to be at or after the current selection start. <p> This is available for backward compatibility to code that called this method on <code>java.awt.TextComponent</code>. This is implemented to forward to the <code>Caret</code> implementation which is where the actual selection is maintained.
 * @param selectionEnd the end position of the text >= 0
 * @beaninfo description: ending location of the selection.
 */
public void setSelectionEnd(int selectionEnd){
  select(getSelectionStart(),selectionEnd);
}","/** 
 * Sets the selection end to the specified position.  The new end point is constrained to be at or after the current selection start. <p> This is available for backward compatibility to code that called this method on <code>java.awt.TextComponent</code>. This is implemented to forward to the <code>Caret</code> implementation which is where the actual selection is maintained.
 * @param selectionEnd the end position of the text &ge; 0
 * @beaninfo description: ending location of the selection.
 */
public void setSelectionEnd(int selectionEnd){
  select(getSelectionStart(),selectionEnd);
}"
77260,"/** 
 * Sets the selection start to the specified position.  The new starting point is constrained to be before or at the current selection end. <p> This is available for backward compatibility to code that called this method on <code>java.awt.TextComponent</code>. This is implemented to forward to the <code>Caret</code> implementation which is where the actual selection is maintained.
 * @param selectionStart the start position of the text >= 0
 * @beaninfo description: starting location of the selection.
 */
public void setSelectionStart(int selectionStart){
  select(selectionStart,getSelectionEnd());
}","/** 
 * Sets the selection start to the specified position.  The new starting point is constrained to be before or at the current selection end. <p> This is available for backward compatibility to code that called this method on <code>java.awt.TextComponent</code>. This is implemented to forward to the <code>Caret</code> implementation which is where the actual selection is maintained.
 * @param selectionStart the start position of the text &ge; 0
 * @beaninfo description: starting location of the selection.
 */
public void setSelectionStart(int selectionStart){
  select(selectionStart,getSelectionEnd());
}"
77261,"/** 
 * Determines the bounding box of the character at the given index into the string.  The bounds are returned in local coordinates.  If the index is invalid a null rectangle is returned. The screen coordinates returned are ""unscrolled coordinates"" if the JTextComponent is contained in a JScrollPane in which case the resulting rectangle should be composed with the parent coordinates.  A good algorithm to use is: <nf> Accessible a: AccessibleText at = a.getAccessibleText(); AccessibleComponent ac = a.getAccessibleComponent(); Rectangle r = at.getCharacterBounds(); Point p = ac.getLocation(); r.x += p.x; r.y += p.y; </nf> Note: the JTextComponent must have a valid size (e.g. have been added to a parent container whose ancestor container is a valid top-level window) for this method to be able to return a meaningful (non-null) value.
 * @param i the index into the String >= 0
 * @return the screen coordinates of the character's bounding box
 */
public Rectangle getCharacterBounds(int i){
  if (i < 0 || i > model.getLength() - 1) {
    return null;
  }
  TextUI ui=getUI();
  if (ui == null) {
    return null;
  }
  Rectangle rect=null;
  Rectangle alloc=getRootEditorRect();
  if (alloc == null) {
    return null;
  }
  if (model instanceof AbstractDocument) {
    ((AbstractDocument)model).readLock();
  }
  try {
    View rootView=ui.getRootView(JTextComponent.this);
    if (rootView != null) {
      rootView.setSize(alloc.width,alloc.height);
      Shape bounds=rootView.modelToView(i,Position.Bias.Forward,i + 1,Position.Bias.Backward,alloc);
      rect=(bounds instanceof Rectangle) ? (Rectangle)bounds : bounds.getBounds();
    }
  }
 catch (  BadLocationException e) {
  }
 finally {
    if (model instanceof AbstractDocument) {
      ((AbstractDocument)model).readUnlock();
    }
  }
  return rect;
}","/** 
 * Determines the bounding box of the character at the given index into the string.  The bounds are returned in local coordinates.  If the index is invalid a null rectangle is returned. The screen coordinates returned are ""unscrolled coordinates"" if the JTextComponent is contained in a JScrollPane in which case the resulting rectangle should be composed with the parent coordinates.  A good algorithm to use is: <pre> Accessible a: AccessibleText at = a.getAccessibleText(); AccessibleComponent ac = a.getAccessibleComponent(); Rectangle r = at.getCharacterBounds(); Point p = ac.getLocation(); r.x += p.x; r.y += p.y; </pre> Note: the JTextComponent must have a valid size (e.g. have been added to a parent container whose ancestor container is a valid top-level window) for this method to be able to return a meaningful (non-null) value.
 * @param i the index into the String &ge; 0
 * @return the screen coordinates of the character's bounding box
 */
public Rectangle getCharacterBounds(int i){
  if (i < 0 || i > model.getLength() - 1) {
    return null;
  }
  TextUI ui=getUI();
  if (ui == null) {
    return null;
  }
  Rectangle rect=null;
  Rectangle alloc=getRootEditorRect();
  if (alloc == null) {
    return null;
  }
  if (model instanceof AbstractDocument) {
    ((AbstractDocument)model).readLock();
  }
  try {
    View rootView=ui.getRootView(JTextComponent.this);
    if (rootView != null) {
      rootView.setSize(alloc.width,alloc.height);
      Shape bounds=rootView.modelToView(i,Position.Bias.Forward,i + 1,Position.Bias.Backward,alloc);
      rect=(bounds instanceof Rectangle) ? (Rectangle)bounds : bounds.getBounds();
    }
  }
 catch (  BadLocationException e) {
  }
 finally {
    if (model instanceof AbstractDocument) {
      ((AbstractDocument)model).readUnlock();
    }
  }
  return rect;
}"
77262,"/** 
 * Converts the given place in the view coordinate system to the nearest representative location in the model. The component must have a positive size for this translation to be computed (i.e. layout cannot be computed until the component has been sized).  The component does not have to be visible or painted.
 * @param pt the location in the view to translate
 * @return the offset >= 0 from the start of the document,or -1 if the component does not yet have a positive size.
 * @see TextUI#viewToModel
 */
public int viewToModel(Point pt){
  return getUI().viewToModel(this,pt);
}","/** 
 * Converts the given place in the view coordinate system to the nearest representative location in the model. The component must have a positive size for this translation to be computed (i.e. layout cannot be computed until the component has been sized).  The component does not have to be visible or painted.
 * @param pt the location in the view to translate
 * @return the offset &ge; 0 from the start of the document,or -1 if the component does not yet have a positive size.
 * @see TextUI#viewToModel
 */
public int viewToModel(Point pt){
  return getUI().viewToModel(this,pt);
}"
77263,"/** 
 * Returns the number of characters (valid indices)
 * @return the number of characters >= 0
 */
public int getCharCount(){
  return model.getLength();
}","/** 
 * Returns the number of characters (valid indices)
 * @return the number of characters &ge; 0
 */
public int getCharCount(){
  return model.getLength();
}"
77264,"/** 
 * Converts the given location in the model to a place in the view coordinate system. The component must have a positive size for this translation to be computed (i.e. layout cannot be computed until the component has been sized).  The component does not have to be visible or painted.
 * @param pos the position >= 0
 * @return the coordinates as a rectangle, with (r.x, r.y) as the locationin the coordinate system, or null if the component does not yet have a positive size.
 * @exception BadLocationException if the given position does notrepresent a valid location in the associated document
 * @see TextUI#modelToView
 */
public Rectangle modelToView(int pos) throws BadLocationException {
  return getUI().modelToView(this,pos);
}","/** 
 * Converts the given location in the model to a place in the view coordinate system. The component must have a positive size for this translation to be computed (i.e. layout cannot be computed until the component has been sized).  The component does not have to be visible or painted.
 * @param pos the position &ge; 0
 * @return the coordinates as a rectangle, with (r.x, r.y) as the locationin the coordinate system, or null if the component does not yet have a positive size.
 * @exception BadLocationException if the given position does notrepresent a valid location in the associated document
 * @see TextUI#modelToView
 */
public Rectangle modelToView(int pos) throws BadLocationException {
  return getUI().modelToView(this,pos);
}"
77265,"/** 
 * Returns the end offset within the selected text. If there is no selection, but there is a caret, the start and end offsets will be the same. Return 0 if the text is empty, or the caret position if no selection.
 * @return the index into teh text of the end of the selection >= 0
 */
public int getSelectionEnd(){
  return JTextComponent.this.getSelectionEnd();
}","/** 
 * Returns the end offset within the selected text. If there is no selection, but there is a caret, the start and end offsets will be the same. Return 0 if the text is empty, or the caret position if no selection.
 * @return the index into teh text of the end of the selection &ge; 0
 */
public int getSelectionEnd(){
  return JTextComponent.this.getSelectionEnd();
}"
77266,"private Node leaveCmp(final BinaryNode binaryNode){
  ensureTypeNotUnknown(binaryNode.lhs());
  ensureTypeNotUnknown(binaryNode.rhs());
  return end(ensureSymbol(Type.BOOLEAN,binaryNode));
}","private Node leaveCmp(final BinaryNode binaryNode){
  ensureTypeNotUnknown(binaryNode.lhs());
  ensureTypeNotUnknown(binaryNode.rhs());
  Type widest=Type.widest(binaryNode.lhs().getType(),binaryNode.rhs().getType());
  ensureSymbol(widest,binaryNode.lhs());
  ensureSymbol(widest,binaryNode.rhs());
  return end(ensureSymbol(Type.BOOLEAN,binaryNode));
}"
77267,"@Override public Node leaveNEW(final UnaryNode unaryNode){
  return end(ensureSymbol(Type.OBJECT,unaryNode));
}","@Override public Node leaveNEW(final UnaryNode unaryNode){
  return end(ensureSymbol(Type.OBJECT,unaryNode.setRHS(((CallNode)unaryNode.rhs()).setIsNew())));
}"
77268,"/** 
 * Eg. var d = 17; var e; e = d; //initially typed as int for node type, should retype as double e = object; var d = 17; var e; e -= d; //initially type number, should number remain with a final conversion supplied by Store. ugly, but the computation result of the sub is numeric e = object;
 */
@SuppressWarnings(""String_Node_Str"") @Override public Node leaveBinaryNode(final BinaryNode binaryNode){
  final Type widest=Type.widest(binaryNode.lhs().getType(),binaryNode.rhs().getType());
  BinaryNode newBinaryNode=binaryNode;
switch (binaryNode.tokenType()) {
default :
    if (!binaryNode.isAssignment() || binaryNode.isSelfModifying()) {
      break;
    }
  newBinaryNode=newBinaryNode.setLHS(widen(newBinaryNode.lhs(),widest));
case ADD:
newBinaryNode=(BinaryNode)widen(newBinaryNode,widest);
}
return newBinaryNode;
}","@SuppressWarnings(""String_Node_Str"") @Override public Node leaveBinaryNode(final BinaryNode binaryNode){
  final Type widest=Type.widest(binaryNode.lhs().getType(),binaryNode.rhs().getType());
  BinaryNode newBinaryNode=binaryNode;
  if (isAdd(binaryNode)) {
    newBinaryNode=(BinaryNode)widen(newBinaryNode,widest);
    if (newBinaryNode.getType().isObject() && !isAddString(newBinaryNode)) {
      return new RuntimeNode(newBinaryNode,Request.ADD);
    }
  }
 else   if (binaryNode.isComparison()) {
    final Expression lhs=newBinaryNode.lhs();
    final Expression rhs=newBinaryNode.rhs();
    Type cmpWidest=Type.widest(lhs.getType(),rhs.getType());
    boolean newRuntimeNode=false, finalized=false;
switch (newBinaryNode.tokenType()) {
case EQ_STRICT:
case NE_STRICT:
      if (lhs.getType().isBoolean() != rhs.getType().isBoolean()) {
        newRuntimeNode=true;
        cmpWidest=Type.OBJECT;
        finalized=true;
      }
default :
    if (newRuntimeNode || cmpWidest.isObject()) {
      return new RuntimeNode(newBinaryNode,Request.requestFor(binaryNode)).setIsFinal(finalized);
    }
  break;
}
return newBinaryNode;
}
 else {
if (!binaryNode.isAssignment() || binaryNode.isSelfModifying()) {
return newBinaryNode;
}
checkThisAssignment(binaryNode);
newBinaryNode=newBinaryNode.setLHS(widen(newBinaryNode.lhs(),widest));
newBinaryNode=(BinaryNode)widen(newBinaryNode,widest);
}
return newBinaryNode;
}"
77269,"/** 
 * If types have changed, we can have failed to update vars. For example var x = 17; //x is int x = ""apa"";  //x is object. This will be converted fine
 * @param functionNode
 */
private FunctionNode finalizeTypes(final FunctionNode functionNode){
  final Set<Node> changed=new HashSet<>();
  FunctionNode currentFunctionNode=functionNode;
  do {
    changed.clear();
    final FunctionNode newFunctionNode=(FunctionNode)currentFunctionNode.accept(new NodeVisitor<LexicalContext>(new LexicalContext()){
      private Expression widen(      final Expression node,      final Type to){
        if (node instanceof LiteralNode) {
          return node;
        }
        Type from=node.getType();
        if (!Type.areEquivalent(from,to) && Type.widest(from,to) == to) {
          LOG.fine(""String_Node_Str"",node,""String_Node_Str"",Debug.id(node),""String_Node_Str"",node.getType(),""String_Node_Str"",to);
          Symbol symbol=node.getSymbol();
          if (symbol.isShared() && symbol.wouldChangeType(to)) {
            symbol=temporarySymbols.getTypedTemporarySymbol(to);
          }
          newType(symbol,to);
          final Expression newNode=node.setSymbol(lc,symbol);
          changed.add(newNode);
          return newNode;
        }
        return node;
      }
      @Override public boolean enterFunctionNode(      final FunctionNode node){
        return !node.isLazy();
      }
      /** 
 * Eg. var d = 17; var e; e = d; //initially typed as int for node type, should retype as double e = object; var d = 17; var e; e -= d; //initially type number, should number remain with a final conversion supplied by Store. ugly, but the computation result of the sub is numeric e = object;
 */
      @SuppressWarnings(""String_Node_Str"") @Override public Node leaveBinaryNode(      final BinaryNode binaryNode){
        final Type widest=Type.widest(binaryNode.lhs().getType(),binaryNode.rhs().getType());
        BinaryNode newBinaryNode=binaryNode;
switch (binaryNode.tokenType()) {
default :
          if (!binaryNode.isAssignment() || binaryNode.isSelfModifying()) {
            break;
          }
        newBinaryNode=newBinaryNode.setLHS(widen(newBinaryNode.lhs(),widest));
case ADD:
      newBinaryNode=(BinaryNode)widen(newBinaryNode,widest);
  }
  return newBinaryNode;
}
}
);
lc.replace(currentFunctionNode,newFunctionNode);
currentFunctionNode=newFunctionNode;
}
 while (!changed.isEmpty());
return currentFunctionNode;
}","/** 
 * If types have changed, we can have failed to update vars. For example var x = 17; //x is int x = ""apa"";  //x is object. This will be converted fine
 * @param functionNode
 */
private FunctionNode finalizeTypes(final FunctionNode functionNode){
  final Set<Node> changed=new HashSet<>();
  FunctionNode currentFunctionNode=functionNode;
  do {
    changed.clear();
    final FunctionNode newFunctionNode=(FunctionNode)currentFunctionNode.accept(new NodeVisitor<LexicalContext>(new LexicalContext()){
      private Expression widen(      final Expression node,      final Type to){
        if (node instanceof LiteralNode) {
          return node;
        }
        Type from=node.getType();
        if (!Type.areEquivalent(from,to) && Type.widest(from,to) == to) {
          LOG.fine(""String_Node_Str"",node,""String_Node_Str"",Debug.id(node),""String_Node_Str"",node.getType(),""String_Node_Str"",to);
          Symbol symbol=node.getSymbol();
          if (symbol.isShared() && symbol.wouldChangeType(to)) {
            symbol=temporarySymbols.getTypedTemporarySymbol(to);
          }
          newType(symbol,to);
          final Expression newNode=node.setSymbol(lc,symbol);
          changed.add(newNode);
          return newNode;
        }
        return node;
      }
      @Override public boolean enterFunctionNode(      final FunctionNode node){
        return !node.isLazy();
      }
      @SuppressWarnings(""String_Node_Str"") @Override public Node leaveBinaryNode(      final BinaryNode binaryNode){
        final Type widest=Type.widest(binaryNode.lhs().getType(),binaryNode.rhs().getType());
        BinaryNode newBinaryNode=binaryNode;
        if (isAdd(binaryNode)) {
          newBinaryNode=(BinaryNode)widen(newBinaryNode,widest);
          if (newBinaryNode.getType().isObject() && !isAddString(newBinaryNode)) {
            return new RuntimeNode(newBinaryNode,Request.ADD);
          }
        }
 else         if (binaryNode.isComparison()) {
          final Expression lhs=newBinaryNode.lhs();
          final Expression rhs=newBinaryNode.rhs();
          Type cmpWidest=Type.widest(lhs.getType(),rhs.getType());
          boolean newRuntimeNode=false, finalized=false;
switch (newBinaryNode.tokenType()) {
case EQ_STRICT:
case NE_STRICT:
            if (lhs.getType().isBoolean() != rhs.getType().isBoolean()) {
              newRuntimeNode=true;
              cmpWidest=Type.OBJECT;
              finalized=true;
            }
default :
          if (newRuntimeNode || cmpWidest.isObject()) {
            return new RuntimeNode(newBinaryNode,Request.requestFor(binaryNode)).setIsFinal(finalized);
          }
        break;
    }
    return newBinaryNode;
  }
 else {
    if (!binaryNode.isAssignment() || binaryNode.isSelfModifying()) {
      return newBinaryNode;
    }
    checkThisAssignment(binaryNode);
    newBinaryNode=newBinaryNode.setLHS(widen(newBinaryNode.lhs(),widest));
    newBinaryNode=(BinaryNode)widen(newBinaryNode,widest);
  }
  return newBinaryNode;
}
private boolean isAdd(final Node node){
  return node.isTokenType(TokenType.ADD);
}
/** 
 * Determine if the outcome of + operator is a string.
 * @param node  Node to test.
 * @return true if a string result.
 */
private boolean isAddString(final Node node){
  if (node instanceof BinaryNode && isAdd(node)) {
    final BinaryNode binaryNode=(BinaryNode)node;
    final Node lhs=binaryNode.lhs();
    final Node rhs=binaryNode.rhs();
    return isAddString(lhs) || isAddString(rhs);
  }
  return node instanceof LiteralNode<?> && ((LiteralNode<?>)node).isString();
}
private void checkThisAssignment(final BinaryNode binaryNode){
  if (binaryNode.isAssignment()) {
    if (binaryNode.lhs() instanceof AccessNode) {
      final AccessNode accessNode=(AccessNode)binaryNode.lhs();
      if (accessNode.getBase().getSymbol().isThis()) {
        lc.getCurrentFunction().addThisProperty(accessNode.getProperty().getName());
      }
    }
  }
}
}
);
lc.replace(currentFunctionNode,newFunctionNode);
currentFunctionNode=newFunctionNode;
}
 while (!changed.isEmpty());
return currentFunctionNode;
}"
77270,"private void branchOptimizer(final Expression node,final Label label,final boolean state){
  if (!(node instanceof TernaryNode)) {
    if (node instanceof BinaryNode) {
      branchOptimizer((BinaryNode)node,label,state);
      return;
    }
    if (node instanceof UnaryNode) {
      branchOptimizer((UnaryNode)node,label,state);
      return;
    }
  }
  load(node);
  method.convert(Type.BOOLEAN);
  if (state) {
    method.ifne(label);
  }
 else {
    method.ifeq(label);
  }
}","private void branchOptimizer(final Expression node,final Label label,final boolean state){
  if (!(node instanceof TernaryNode)) {
    if (node instanceof BinaryNode) {
      branchOptimizer((BinaryNode)node,label,state);
      return;
    }
    if (node instanceof UnaryNode) {
      branchOptimizer((UnaryNode)node,label,state);
      return;
    }
  }
  codegen.load(node);
  method.convert(Type.BOOLEAN);
  if (state) {
    method.ifne(label);
  }
 else {
    method.ifeq(label);
  }
}"
77271,"/** 
 * Returns the extended modifier mask for this event. <P> Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix, such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others. <P> Extended modifiers represent the state of all modal keys, such as ALT, CTRL, META, and the mouse buttons just after the event occurred. <P> For example, if the user presses <b>button 1</b> followed by <b>button 2</b>, and then releases them in the same order, the following sequence of events is generated: <PRE> <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK</code> <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK</code> <code>MOUSE_RELEASED</code>: <code>BUTTON2_DOWN_MASK</code> <code>MOUSE_CLICKED</code>:  <code>BUTTON2_DOWN_MASK</code> <code>MOUSE_RELEASED</code>: <code>MOUSE_CLICKED</code>: </PRE> <P> It is not recommended to compare the return value of this method using <code>==</code> because new modifiers can be added in the future. For example, the appropriate way to check that SHIFT and BUTTON1 are down, but CTRL is up is demonstrated by the following code: <PRE> int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK; int offmask = CTRL_DOWN_MASK; if ((event.getModifiersEx() & (onmask | offmask)) == onmask) { ... } </PRE> The above code will work even if new modifiers are added.
 * @since 1.4
 */
public int getModifiersEx(){
  return modifiers & ~JDK_1_3_MODIFIERS;
}","/** 
 * Returns the extended modifier mask for this event. <P> Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix, such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others. <P> Extended modifiers represent the state of all modal keys, such as ALT, CTRL, META, and the mouse buttons just after the event occurred. <P> For example, if the user presses <b>button 1</b> followed by <b>button 2</b>, and then releases them in the same order, the following sequence of events is generated: <PRE> <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK</code> <code>MOUSE_PRESSED</code>:  <code>BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK</code> <code>MOUSE_RELEASED</code>: <code>BUTTON2_DOWN_MASK</code> <code>MOUSE_CLICKED</code>:  <code>BUTTON2_DOWN_MASK</code> <code>MOUSE_RELEASED</code>: <code>MOUSE_CLICKED</code>: </PRE> <P> It is not recommended to compare the return value of this method using <code>==</code> because new modifiers can be added in the future. For example, the appropriate way to check that SHIFT and BUTTON1 are down, but CTRL is up is demonstrated by the following code: <PRE> int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK; int offmask = CTRL_DOWN_MASK; if ((event.getModifiersEx() &amp; (onmask | offmask)) == onmask) { ... } </PRE> The above code will work even if new modifiers are added.
 * @since 1.4
 */
public int getModifiersEx(){
  return modifiers & ~JDK_1_3_MODIFIERS;
}"
77272,"/** 
 * Attempts to select an input method or keyboard layout that supports the given locale, and returns a value indicating whether such an input method or keyboard layout has been successfully selected. The following steps are taken until an input method has been selected: <p> <ul> <li> If the currently selected input method or keyboard layout supports the requested locale, it remains selected.</li> <li> If there is no input method or keyboard layout available that supports the requested locale, the current input method or keyboard layout remains selected.</li> <li> If the user has previously selected an input method or keyboard layout for the requested locale from the user interface, then the most recently selected such input method or keyboard layout is reselected.</li> <li> Otherwise, an input method or keyboard layout that supports the requested locale is selected in an implementation dependent way.</li> <p> </ul> Before switching away from an input method, any currently uncommitted text is committed. If no input method or keyboard layout supporting the requested locale is available, then false is returned. <p> Not all host operating systems provide API to determine the locale of the currently selected native input method or keyboard layout, and to select a native input method or keyboard layout by locale. For host operating systems that don't provide such API, <code>selectInputMethod</code> assumes that native input methods or keyboard layouts provided by the host operating system support only the system's default locale. <p> A text editing component may call this method, for example, when the user changes the insertion point, so that the user can immediately continue typing in the language of the surrounding text.
 * @param locale The desired new locale.
 * @return true if the input method or keyboard layout that's active afterthis call supports the desired locale.
 * @exception NullPointerException if <code>locale</code> is null
 */
public boolean selectInputMethod(Locale locale){
  return false;
}","/** 
 * Attempts to select an input method or keyboard layout that supports the given locale, and returns a value indicating whether such an input method or keyboard layout has been successfully selected. The following steps are taken until an input method has been selected: <p> <ul> <li> If the currently selected input method or keyboard layout supports the requested locale, it remains selected.</li> <li> If there is no input method or keyboard layout available that supports the requested locale, the current input method or keyboard layout remains selected.</li> <li> If the user has previously selected an input method or keyboard layout for the requested locale from the user interface, then the most recently selected such input method or keyboard layout is reselected.</li> <li> Otherwise, an input method or keyboard layout that supports the requested locale is selected in an implementation dependent way.</li> </ul> Before switching away from an input method, any currently uncommitted text is committed. If no input method or keyboard layout supporting the requested locale is available, then false is returned. <p> Not all host operating systems provide API to determine the locale of the currently selected native input method or keyboard layout, and to select a native input method or keyboard layout by locale. For host operating systems that don't provide such API, <code>selectInputMethod</code> assumes that native input methods or keyboard layouts provided by the host operating system support only the system's default locale. <p> A text editing component may call this method, for example, when the user changes the insertion point, so that the user can immediately continue typing in the language of the surrounding text.
 * @param locale The desired new locale.
 * @return true if the input method or keyboard layout that's active afterthis call supports the desired locale.
 * @exception NullPointerException if <code>locale</code> is null
 */
public boolean selectInputMethod(Locale locale){
  return false;
}"
77273,"/** 
 * Converts the components of a color, as specified by the HSB model, to an equivalent set of values for the default RGB model. <p> The <code>saturation</code> and <code>brightness</code> components should be floating-point values between zero and one (numbers in the range 0.0-1.0).  The <code>hue</code> component can be any floating-point number.  The floor of this number is subtracted from it to create a fraction between 0 and 1.  This fractional number is then multiplied by 360 to produce the hue angle in the HSB color model. <p> The integer that is returned by <code>HSBtoRGB</code> encodes the value of a color in bits 0-23 of an integer value that is the same format used by the method   {@link #getRGB() <code>getRGB</code>}. This integer can be supplied as an argument to the <code>Color</code> constructor that takes a single integer argument.
 * @param hue   the hue component of the color
 * @param saturation   the saturation of the color
 * @param brightness   the brightness of the color
 * @return    the RGB value of the color with the indicated hue,saturation, and brightness.
 * @see java.awt.Color#getRGB()
 * @see java.awt.Color#Color(int)
 * @see java.awt.image.ColorModel#getRGBdefault()
 * @since     JDK1.0
 */
public static int HSBtoRGB(float hue,float saturation,float brightness){
  int r=0, g=0, b=0;
  if (saturation == 0) {
    r=g=b=(int)(brightness * 255.0f + 0.5f);
  }
 else {
    float h=(hue - (float)Math.floor(hue)) * 6.0f;
    float f=h - (float)java.lang.Math.floor(h);
    float p=brightness * (1.0f - saturation);
    float q=brightness * (1.0f - saturation * f);
    float t=brightness * (1.0f - (saturation * (1.0f - f)));
switch ((int)h) {
case 0:
      r=(int)(brightness * 255.0f + 0.5f);
    g=(int)(t * 255.0f + 0.5f);
  b=(int)(p * 255.0f + 0.5f);
break;
case 1:
r=(int)(q * 255.0f + 0.5f);
g=(int)(brightness * 255.0f + 0.5f);
b=(int)(p * 255.0f + 0.5f);
break;
case 2:
r=(int)(p * 255.0f + 0.5f);
g=(int)(brightness * 255.0f + 0.5f);
b=(int)(t * 255.0f + 0.5f);
break;
case 3:
r=(int)(p * 255.0f + 0.5f);
g=(int)(q * 255.0f + 0.5f);
b=(int)(brightness * 255.0f + 0.5f);
break;
case 4:
r=(int)(t * 255.0f + 0.5f);
g=(int)(p * 255.0f + 0.5f);
b=(int)(brightness * 255.0f + 0.5f);
break;
case 5:
r=(int)(brightness * 255.0f + 0.5f);
g=(int)(p * 255.0f + 0.5f);
b=(int)(q * 255.0f + 0.5f);
break;
}
}
return 0xff000000 | (r << 16) | (g << 8)| (b << 0);
}","/** 
 * Converts the components of a color, as specified by the HSB model, to an equivalent set of values for the default RGB model. <p> The <code>saturation</code> and <code>brightness</code> components should be floating-point values between zero and one (numbers in the range 0.0-1.0).  The <code>hue</code> component can be any floating-point number.  The floor of this number is subtracted from it to create a fraction between 0 and 1.  This fractional number is then multiplied by 360 to produce the hue angle in the HSB color model. <p> The integer that is returned by <code>HSBtoRGB</code> encodes the value of a color in bits 0-23 of an integer value that is the same format used by the method   {@link #getRGB() getRGB}. This integer can be supplied as an argument to the <code>Color</code> constructor that takes a single integer argument.
 * @param hue   the hue component of the color
 * @param saturation   the saturation of the color
 * @param brightness   the brightness of the color
 * @return    the RGB value of the color with the indicated hue,saturation, and brightness.
 * @see java.awt.Color#getRGB()
 * @see java.awt.Color#Color(int)
 * @see java.awt.image.ColorModel#getRGBdefault()
 * @since     JDK1.0
 */
public static int HSBtoRGB(float hue,float saturation,float brightness){
  int r=0, g=0, b=0;
  if (saturation == 0) {
    r=g=b=(int)(brightness * 255.0f + 0.5f);
  }
 else {
    float h=(hue - (float)Math.floor(hue)) * 6.0f;
    float f=h - (float)java.lang.Math.floor(h);
    float p=brightness * (1.0f - saturation);
    float q=brightness * (1.0f - saturation * f);
    float t=brightness * (1.0f - (saturation * (1.0f - f)));
switch ((int)h) {
case 0:
      r=(int)(brightness * 255.0f + 0.5f);
    g=(int)(t * 255.0f + 0.5f);
  b=(int)(p * 255.0f + 0.5f);
break;
case 1:
r=(int)(q * 255.0f + 0.5f);
g=(int)(brightness * 255.0f + 0.5f);
b=(int)(p * 255.0f + 0.5f);
break;
case 2:
r=(int)(p * 255.0f + 0.5f);
g=(int)(brightness * 255.0f + 0.5f);
b=(int)(t * 255.0f + 0.5f);
break;
case 3:
r=(int)(p * 255.0f + 0.5f);
g=(int)(q * 255.0f + 0.5f);
b=(int)(brightness * 255.0f + 0.5f);
break;
case 4:
r=(int)(t * 255.0f + 0.5f);
g=(int)(p * 255.0f + 0.5f);
b=(int)(brightness * 255.0f + 0.5f);
break;
case 5:
r=(int)(brightness * 255.0f + 0.5f);
g=(int)(p * 255.0f + 0.5f);
b=(int)(q * 255.0f + 0.5f);
break;
}
}
return 0xff000000 | (r << 16) | (g << 8)| (b << 0);
}"
77274,"/** 
 * Dispatches an event. The manner in which the event is dispatched depends upon the type of the event and the type of the event's source object: <p> </p> <table border=1 summary=""Event types, source types, and dispatch methods""> <tr> <th>Event Type</th> <th>Source Type</th> <th>Dispatched To</th> </tr> <tr> <td>ActiveEvent</td> <td>Any</td> <td>event.dispatch()</td> </tr> <tr> <td>Other</td> <td>Component</td> <td>source.dispatchEvent(AWTEvent)</td> </tr> <tr> <td>Other</td> <td>MenuComponent</td> <td>source.dispatchEvent(AWTEvent)</td> </tr> <tr> <td>Other</td> <td>Other</td> <td>No action (ignored)</td> </tr> </table> <p> </p>
 * @param event an instance of <code>java.awt.AWTEvent</code>,or a subclass of it
 * @throws NullPointerException if <code>event</code> is <code>null</code>
 * @since           1.2
 */
protected void dispatchEvent(final AWTEvent event){
  final Object src=event.getSource();
  final PrivilegedAction<Void> action=new PrivilegedAction<Void>(){
    public Void run(){
      if (fwDispatcher == null || isDispatchThreadImpl()) {
        dispatchEventImpl(event,src);
      }
 else {
        fwDispatcher.scheduleDispatch(new Runnable(){
          @Override public void run(){
            dispatchEventImpl(event,src);
          }
        }
);
      }
      return null;
    }
  }
;
  final AccessControlContext stack=AccessController.getContext();
  final AccessControlContext srcAcc=getAccessControlContextFrom(src);
  final AccessControlContext eventAcc=event.getAccessControlContext();
  if (srcAcc == null) {
    javaSecurityAccess.doIntersectionPrivilege(action,stack,eventAcc);
  }
 else {
    javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<Void>(){
      public Void run(){
        javaSecurityAccess.doIntersectionPrivilege(action,eventAcc);
        return null;
      }
    }
,stack,srcAcc);
  }
}","/** 
 * Dispatches an event. The manner in which the event is dispatched depends upon the type of the event and the type of the event's source object: <p> <table border=1 summary=""Event types, source types, and dispatch methods""> <tr> <th>Event Type</th> <th>Source Type</th> <th>Dispatched To</th> </tr> <tr> <td>ActiveEvent</td> <td>Any</td> <td>event.dispatch()</td> </tr> <tr> <td>Other</td> <td>Component</td> <td>source.dispatchEvent(AWTEvent)</td> </tr> <tr> <td>Other</td> <td>MenuComponent</td> <td>source.dispatchEvent(AWTEvent)</td> </tr> <tr> <td>Other</td> <td>Other</td> <td>No action (ignored)</td> </tr> </table> <p>
 * @param event an instance of <code>java.awt.AWTEvent</code>,or a subclass of it
 * @throws NullPointerException if <code>event</code> is <code>null</code>
 * @since           1.2
 */
protected void dispatchEvent(final AWTEvent event){
  final Object src=event.getSource();
  final PrivilegedAction<Void> action=new PrivilegedAction<Void>(){
    public Void run(){
      if (fwDispatcher == null || isDispatchThreadImpl()) {
        dispatchEventImpl(event,src);
      }
 else {
        fwDispatcher.scheduleDispatch(new Runnable(){
          @Override public void run(){
            dispatchEventImpl(event,src);
          }
        }
);
      }
      return null;
    }
  }
;
  final AccessControlContext stack=AccessController.getContext();
  final AccessControlContext srcAcc=getAccessControlContextFrom(src);
  final AccessControlContext eventAcc=event.getAccessControlContext();
  if (srcAcc == null) {
    javaSecurityAccess.doIntersectionPrivilege(action,stack,eventAcc);
  }
 else {
    javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<Void>(){
      public Void run(){
        javaSecurityAccess.doIntersectionPrivilege(action,eventAcc);
        return null;
      }
    }
,stack,srcAcc);
  }
}"
77275,"/** 
 * Adds a   {@code PropertyChangeListener} to the list of listeners for thespecific property. The following properties are currently supported: <p> </p> <table border=1 summary=""SystemTray properties""> <tr> <th>Property</th> <th>Description</th> </tr> <tr> <td> {@code trayIcons}</td> <td>The   {@code SystemTray}'s array of   {@code TrayIcon} objects.The array is accessed via the  {@link #getTrayIcons} method.<br>This property is changed when a tray icon is added to (or removed from) the system tray.<br> For example, this property is changed when the system tray becomes unavailable on the desktop<br> and the tray icons are automatically removed.</td> </tr> <tr> <td> {@code systemTray}</td> <td>This property contains   {@code SystemTray} instance when the system trayis available or <code>null</code> otherwise.<br> This property is changed when the system tray becomes available or unavailable on the desktop.<br> The property is accessed by the  {@link #getSystemTray} method.</td></tr> </table> <p> </p> The  {@code listener} listens to property changes only in this context.<p> If  {@code listener} is {@code null}, no exception is thrown and no action is performed.
 * @param propertyName the specified property
 * @param listener the property change listener to be added
 * @see #removePropertyChangeListener
 * @see #getPropertyChangeListeners
 */
public synchronized void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){
  if (listener == null) {
    return;
  }
  getCurrentChangeSupport().addPropertyChangeListener(propertyName,listener);
}","/** 
 * Adds a   {@code PropertyChangeListener} to the list of listeners for thespecific property. The following properties are currently supported: <p> <table border=1 summary=""SystemTray properties""> <tr> <th>Property</th> <th>Description</th> </tr> <tr> <td> {@code trayIcons}</td> <td>The   {@code SystemTray}'s array of   {@code TrayIcon} objects.The array is accessed via the  {@link #getTrayIcons} method.<br>This property is changed when a tray icon is added to (or removed from) the system tray.<br> For example, this property is changed when the system tray becomes unavailable on the desktop<br> and the tray icons are automatically removed.</td> </tr> <tr> <td> {@code systemTray}</td> <td>This property contains   {@code SystemTray} instance when the system trayis available or <code>null</code> otherwise.<br> This property is changed when the system tray becomes available or unavailable on the desktop.<br> The property is accessed by the  {@link #getSystemTray} method.</td></tr> </table> <p> The  {@code listener} listens to property changes only in this context.<p> If  {@code listener} is {@code null}, no exception is thrown and no action is performed.
 * @param propertyName the specified property
 * @param listener the property change listener to be added
 * @see #removePropertyChangeListener
 * @see #getPropertyChangeListeners
 */
public synchronized void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){
  if (listener == null) {
    return;
  }
  getCurrentChangeSupport().addPropertyChangeListener(propertyName,listener);
}"
77276,"/** 
 * Provides a hint to the look and feel as to the <code>KeyEvent.VK</code> constant that can be used as a mnemonic to access the panel. A return value <= 0 indicates there is no mnemonic. <p> The return value here is a hint, it is ultimately up to the look and feel to honor the return value in some meaningful way. <p> This implementation returns 0, indicating the <code>AbstractColorChooserPanel</code> does not support a mnemonic, subclasses wishing a mnemonic will need to override this.
 * @return KeyEvent.VK constant identifying the mnemonic; <= 0 for nomnemonic
 * @see #getDisplayedMnemonicIndex
 * @since 1.4
 */
public int getMnemonic(){
  return 0;
}","/** 
 * Provides a hint to the look and feel as to the <code>KeyEvent.VK</code> constant that can be used as a mnemonic to access the panel. A return value &lt;= 0 indicates there is no mnemonic. <p> The return value here is a hint, it is ultimately up to the look and feel to honor the return value in some meaningful way. <p> This implementation returns 0, indicating the <code>AbstractColorChooserPanel</code> does not support a mnemonic, subclasses wishing a mnemonic will need to override this.
 * @return KeyEvent.VK constant identifying the mnemonic; &lt;= 0 for nomnemonic
 * @see #getDisplayedMnemonicIndex
 * @since 1.4
 */
public int getMnemonic(){
  return 0;
}"
77277,"/** 
 * Provides a hint to the look and feel as to the index of the character in <code>getDisplayName</code> that should be visually identified as the mnemonic. The look and feel should only use this if <code>getMnemonic</code> returns a value > 0. <p> The return value here is a hint, it is ultimately up to the look and feel to honor the return value in some meaningful way. For example, a look and feel may wish to render each <code>AbstractColorChooserPanel</code> in a <code>JTabbedPane</code>, and further use this return value to underline a character in the <code>getDisplayName</code>. <p> This implementation returns -1, indicating the <code>AbstractColorChooserPanel</code> does not support a mnemonic, subclasses wishing a mnemonic will need to override this.
 * @return Character index to render mnemonic for; -1 to provide novisual identifier for this panel.
 * @see #getMnemonic
 * @since 1.4
 */
public int getDisplayedMnemonicIndex(){
  return -1;
}","/** 
 * Provides a hint to the look and feel as to the index of the character in <code>getDisplayName</code> that should be visually identified as the mnemonic. The look and feel should only use this if <code>getMnemonic</code> returns a value &gt; 0. <p> The return value here is a hint, it is ultimately up to the look and feel to honor the return value in some meaningful way. For example, a look and feel may wish to render each <code>AbstractColorChooserPanel</code> in a <code>JTabbedPane</code>, and further use this return value to underline a character in the <code>getDisplayName</code>. <p> This implementation returns -1, indicating the <code>AbstractColorChooserPanel</code> does not support a mnemonic, subclasses wishing a mnemonic will need to override this.
 * @return Character index to render mnemonic for; -1 to provide novisual identifier for this panel.
 * @see #getMnemonic
 * @since 1.4
 */
public int getDisplayedMnemonicIndex(){
  return -1;
}"
77278,"/** 
 * Fetches the location of other end of a logical selection.  If there is no selection, this will be the same as dot.
 * @return the mark >= 0
 */
public abstract int getMark();","/** 
 * Fetches the location of other end of a logical selection.  If there is no selection, this will be the same as dot.
 * @return the mark &gt;= 0
 */
public abstract int getMark();"
77279,"/** 
 * Fetches the location of the caret.
 * @return the dot >= 0
 */
public abstract int getDot();","/** 
 * Fetches the location of the caret.
 * @return the dot &gt;= 0
 */
public abstract int getDot();"
77280,"/** 
 * Fetches the index within the element represented. This is the location that children were added and/or removed.
 * @return the index >= 0
 */
public int getIndex();","/** 
 * Fetches the index within the element represented. This is the location that children were added and/or removed.
 * @return the index &gt;= 0
 */
public int getIndex();"
77281,"/** 
 * Returns the offset within the document of the start of the change.
 * @return the offset >= 0
 */
public int getOffset();","/** 
 * Returns the offset within the document of the start of the change.
 * @return the offset &gt;= 0
 */
public int getOffset();"
77282,"/** 
 * Returns the length of the change.
 * @return the length >= 0
 */
public int getLength();","/** 
 * Returns the length of the change.
 * @return the length &gt;= 0
 */
public int getLength();"
77283,"/** 
 * Constructs a ListDataEvent object. If index0 is > index1, index0 and index1 will be swapped such that index0 will always be <= index1.
 * @param source  the source Object (typically <code>this</code>)
 * @param type    an int specifying {@link #CONTENTS_CHANGED},  {@link #INTERVAL_ADDED}, or   {@link #INTERVAL_REMOVED}
 * @param index0  one end of the new interval
 * @param index1  the other end of the new interval
 */
public ListDataEvent(Object source,int type,int index0,int index1){
  super(source);
  this.type=type;
  this.index0=Math.min(index0,index1);
  this.index1=Math.max(index0,index1);
}","/** 
 * Constructs a ListDataEvent object. If index0 is &gt; index1, index0 and index1 will be swapped such that index0 will always be &lt;= index1.
 * @param source  the source Object (typically <code>this</code>)
 * @param type    an int specifying {@link #CONTENTS_CHANGED},  {@link #INTERVAL_ADDED}, or   {@link #INTERVAL_REMOVED}
 * @param index0  one end of the new interval
 * @param index1  the other end of the new interval
 */
public ListDataEvent(Object source,int type,int index0,int index1){
  super(source);
  this.type=type;
  this.index0=Math.min(index0,index1);
  this.index1=Math.max(index0,index1);
}"
77284,"/** 
 * Notification from the <code>UIManager</code> that the look and feel [L&F] has changed. Replaces the current UI object with the latest version from the <code>UIManager</code>.
 * @see JComponent#updateUI
 */
public void updateUI(){
  super.updateUI();
  setForeground(null);
  setBackground(null);
}","/** 
 * Notification from the <code>UIManager</code> that the look and feel [L&amp;F] has changed. Replaces the current UI object with the latest version from the <code>UIManager</code>.
 * @see JComponent#updateUI
 */
public void updateUI(){
  super.updateUI();
  setForeground(null);
  setBackground(null);
}"
77285,"/** 
 * Moves one or more rows from the inclusive range <code>start</code> to <code>end</code> to the <code>to</code> position in the model. After the move, the row that was at index <code>start</code> will be at index <code>to</code>. This method will send a <code>tableChanged</code> notification message to all the listeners. <p> <pre> Examples of moves: <p> 1. moveRow(1,3,5); a|B|C|D|e|f|g|h|i|j|k   - before a|e|f|g|h|B|C|D|i|j|k   - after <p> 2. moveRow(6,7,1); a|b|c|d|e|f|G|H|i|j|k   - before a|G|H|b|c|d|e|f|i|j|k   - after <p> </pre>
 * @param start       the starting row index to be moved
 * @param end         the ending row index to be moved
 * @param to          the destination of the rows to be moved
 * @exception ArrayIndexOutOfBoundsException  if any of the elementswould be moved out of the table's range
 */
public void moveRow(int start,int end,int to){
  int shift=to - start;
  int first, last;
  if (shift < 0) {
    first=to;
    last=end;
  }
 else {
    first=start;
    last=to + end - start;
  }
  rotate(dataVector,first,last + 1,shift);
  fireTableRowsUpdated(first,last);
}","/** 
 * Moves one or more rows from the inclusive range <code>start</code> to <code>end</code> to the <code>to</code> position in the model. After the move, the row that was at index <code>start</code> will be at index <code>to</code>. This method will send a <code>tableChanged</code> notification message to all the listeners. <p> <pre> Examples of moves: 1. moveRow(1,3,5); a|B|C|D|e|f|g|h|i|j|k   - before a|e|f|g|h|B|C|D|i|j|k   - after 2. moveRow(6,7,1); a|b|c|d|e|f|G|H|i|j|k   - before a|G|H|b|c|d|e|f|i|j|k   - after </pre>
 * @param start       the starting row index to be moved
 * @param end         the ending row index to be moved
 * @param to          the destination of the rows to be moved
 * @exception ArrayIndexOutOfBoundsException  if any of the elementswould be moved out of the table's range
 */
public void moveRow(int start,int end,int to){
  int shift=to - start;
  int first, last;
  if (shift < 0) {
    first=to;
    last=end;
  }
 else {
    first=start;
    last=to + end - start;
  }
  rotate(dataVector,first,last + 1,shift);
  fireTableRowsUpdated(first,last);
}"
77286,"/** 
 * Returns the look and feel (L&F) object that renders this component.
 * @return the <code>TableHeaderUI</code> object that renders this component
 */
public TableHeaderUI getUI(){
  return (TableHeaderUI)ui;
}","/** 
 * Returns the look and feel (L&amp;F) object that renders this component.
 * @return the <code>TableHeaderUI</code> object that renders this component
 */
public TableHeaderUI getUI(){
  return (TableHeaderUI)ui;
}"
77287,"/** 
 * Notification from the <code>UIManager</code> that the look and feel (L&F) has changed. Replaces the current UI object with the latest version from the <code>UIManager</code>.
 * @see JComponent#updateUI
 */
public void updateUI(){
  setUI((TableHeaderUI)UIManager.getUI(this));
  TableCellRenderer renderer=getDefaultRenderer();
  if (renderer instanceof Component) {
    SwingUtilities.updateComponentTreeUI((Component)renderer);
  }
}","/** 
 * Notification from the <code>UIManager</code> that the look and feel (L&amp;F) has changed. Replaces the current UI object with the latest version from the <code>UIManager</code>.
 * @see JComponent#updateUI
 */
public void updateUI(){
  setUI((TableHeaderUI)UIManager.getUI(this));
  TableCellRenderer renderer=getDefaultRenderer();
  if (renderer instanceof Component) {
    SwingUtilities.updateComponentTreeUI((Component)renderer);
  }
}"
77288,"/** 
 * Returns the suffix used to construct the name of the look and feel (L&F) class used to render this component.
 * @return the string ""TableHeaderUI""
 * @return ""TableHeaderUI""
 * @see JComponent#getUIClassID
 * @see UIDefaults#getUI
 */
public String getUIClassID(){
  return uiClassID;
}","/** 
 * Returns the suffix used to construct the name of the look and feel (L&amp;F) class used to render this component.
 * @return the string ""TableHeaderUI""
 * @return ""TableHeaderUI""
 * @see JComponent#getUIClassID
 * @see UIDefaults#getUI
 */
public String getUIClassID(){
  return uiClassID;
}"
77289,"/** 
 * Sets the look and feel (L&F) object that renders this component.
 * @param ui  the <code>TableHeaderUI</code> L&F object
 * @see UIDefaults#getUI
 */
public void setUI(TableHeaderUI ui){
  if (this.ui != ui) {
    super.setUI(ui);
    repaint();
  }
}","/** 
 * Sets the look and feel (L&amp;F) object that renders this component.
 * @param ui  the <code>TableHeaderUI</code> L&amp;F object
 * @see UIDefaults#getUI
 */
public void setUI(TableHeaderUI ui){
  if (this.ui != ui) {
    super.setUI(ui);
    repaint();
  }
}"
77290,"/** 
 * Returns the component used for drawing the cell.  This method is used to configure the renderer appropriately before drawing. <p> The <code>TableCellRenderer</code> is also responsible for rendering the the cell representing the table's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the table directly to see if the given row and column represent the drop location: <pre> JTable.DropLocation dropLocation = table.getDropLocation(); if (dropLocation != null && !dropLocation.isInsertRow() && !dropLocation.isInsertColumn() && dropLocation.getRow() == row && dropLocation.getColumn() == column) { // this cell represents the current drop location // so render it specially, perhaps with a different color } </pre> <p> During a printing operation, this method will be called with <code>isSelected</code> and <code>hasFocus</code> values of <code>false</code> to prevent selection and focus from appearing in the printed output. To do other customization based on whether or not the table is being printed, check the return value from  {@link javax.swing.JComponent#isPaintingForPrint()}.
 * @param table           the <code>JTable</code> that is asking therenderer to draw; can be <code>null</code>
 * @param value           the value of the cell to be rendered.  It isup to the specific renderer to interpret and draw the value.  For example, if <code>value</code> is the string ""true"", it could be rendered as a string or it could be rendered as a check box that is checked.  <code>null</code> is a valid value
 * @param isSelected      true if the cell is to be rendered with theselection highlighted; otherwise false
 * @param hasFocus        if true, render cell appropriately.  Forexample, put a special border on the cell, if the cell can be edited, render in the color used to indicate editing
 * @param row             the row index of the cell being drawn.  Whendrawing the header, the value of <code>row</code> is -1
 * @param column          the column index of the cell being drawn
 * @see javax.swing.JComponent#isPaintingForPrint()
 */
Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column);","/** 
 * Returns the component used for drawing the cell.  This method is used to configure the renderer appropriately before drawing. <p> The <code>TableCellRenderer</code> is also responsible for rendering the the cell representing the table's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the table directly to see if the given row and column represent the drop location: <pre> JTable.DropLocation dropLocation = table.getDropLocation(); if (dropLocation != null &amp;&amp; !dropLocation.isInsertRow() &amp;&amp; !dropLocation.isInsertColumn() &amp;&amp; dropLocation.getRow() == row &amp;&amp; dropLocation.getColumn() == column) { // this cell represents the current drop location // so render it specially, perhaps with a different color } </pre> <p> During a printing operation, this method will be called with <code>isSelected</code> and <code>hasFocus</code> values of <code>false</code> to prevent selection and focus from appearing in the printed output. To do other customization based on whether or not the table is being printed, check the return value from  {@link javax.swing.JComponent#isPaintingForPrint()}.
 * @param table           the <code>JTable</code> that is asking therenderer to draw; can be <code>null</code>
 * @param value           the value of the cell to be rendered.  It isup to the specific renderer to interpret and draw the value.  For example, if <code>value</code> is the string ""true"", it could be rendered as a string or it could be rendered as a check box that is checked.  <code>null</code> is a valid value
 * @param isSelected      true if the cell is to be rendered with theselection highlighted; otherwise false
 * @param hasFocus        if true, render cell appropriately.  Forexample, put a special border on the cell, if the cell can be edited, render in the color used to indicate editing
 * @param row             the row index of the cell being drawn.  Whendrawing the header, the value of <code>row</code> is -1
 * @param column          the column index of the cell being drawn
 * @see javax.swing.JComponent#isPaintingForPrint()
 */
Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column);"
77291,"/** 
 * @inheritDoc
 */
@Override public Dimension getMaximumSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getMaximumSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}","/** 
 * {@inheritDoc}
 */
@Override public Dimension getMaximumSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getMaximumSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}"
77292,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintButtonBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintButtonBorder(context,g,x,y,w,h);
}"
77293,"/** 
 * @inheritDoc
 */
@Override protected void installListeners(AbstractButton b){
  super.installListeners(b);
  b.addPropertyChangeListener(this);
}","/** 
 * {@inheritDoc}
 */
@Override protected void installListeners(AbstractButton b){
  super.installListeners(b);
  b.addPropertyChangeListener(this);
}"
77294,"/** 
 * @inheritDoc
 */
@Override public Dimension getMinimumSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getMinimumSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}","/** 
 * {@inheritDoc}
 */
@Override public Dimension getMinimumSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getMinimumSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}"
77295,"/** 
 * @inheritDoc
 */
@Override public void propertyChange(PropertyChangeEvent e){
  if (SynthLookAndFeel.shouldUpdateStyle(e)) {
    updateStyle((AbstractButton)e.getSource());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void propertyChange(PropertyChangeEvent e){
  if (SynthLookAndFeel.shouldUpdateStyle(e)) {
    updateStyle((AbstractButton)e.getSource());
  }
}"
77296,"/** 
 * @inheritDoc
 */
@Override protected void installDefaults(AbstractButton b){
  updateStyle(b);
  LookAndFeel.installProperty(b,""String_Node_Str"",Boolean.TRUE);
}","/** 
 * {@inheritDoc}
 */
@Override protected void installDefaults(AbstractButton b){
  updateStyle(b);
  LookAndFeel.installProperty(b,""String_Node_Str"",Boolean.TRUE);
}"
77297,"/** 
 * @inheritDoc
 */
@Override protected void uninstallListeners(AbstractButton b){
  super.uninstallListeners(b);
  b.removePropertyChangeListener(this);
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallListeners(AbstractButton b){
  super.uninstallListeners(b);
  b.removePropertyChangeListener(this);
}"
77298,"/** 
 * @inheritDoc
 */
@Override protected void uninstallDefaults(AbstractButton b){
  SynthContext context=getContext(b,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallDefaults(AbstractButton b){
  SynthContext context=getContext(b,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
}"
77299,"/** 
 * @inheritDoc
 */
@Override public int getBaseline(JComponent c,int width,int height){
  if (c == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (width < 0 || height < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AbstractButton b=(AbstractButton)c;
  String text=b.getText();
  if (text == null || ""String_Node_Str"".equals(text)) {
    return -1;
  }
  Insets i=b.getInsets();
  Rectangle viewRect=new Rectangle();
  Rectangle textRect=new Rectangle();
  Rectangle iconRect=new Rectangle();
  viewRect.x=i.left;
  viewRect.y=i.top;
  viewRect.width=width - (i.right + viewRect.x);
  viewRect.height=height - (i.bottom + viewRect.y);
  SynthContext context=getContext(b);
  FontMetrics fm=context.getComponent().getFontMetrics(context.getStyle().getFont(context));
  context.getStyle().getGraphicsUtils(context).layoutText(context,fm,b.getText(),b.getIcon(),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),viewRect,iconRect,textRect,b.getIconTextGap());
  View view=(View)b.getClientProperty(BasicHTML.propertyKey);
  int baseline;
  if (view != null) {
    baseline=BasicHTML.getHTMLBaseline(view,textRect.width,textRect.height);
    if (baseline >= 0) {
      baseline+=textRect.y;
    }
  }
 else {
    baseline=textRect.y + fm.getAscent();
  }
  context.dispose();
  return baseline;
}","/** 
 * {@inheritDoc}
 */
@Override public int getBaseline(JComponent c,int width,int height){
  if (c == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (width < 0 || height < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AbstractButton b=(AbstractButton)c;
  String text=b.getText();
  if (text == null || ""String_Node_Str"".equals(text)) {
    return -1;
  }
  Insets i=b.getInsets();
  Rectangle viewRect=new Rectangle();
  Rectangle textRect=new Rectangle();
  Rectangle iconRect=new Rectangle();
  viewRect.x=i.left;
  viewRect.y=i.top;
  viewRect.width=width - (i.right + viewRect.x);
  viewRect.height=height - (i.bottom + viewRect.y);
  SynthContext context=getContext(b);
  FontMetrics fm=context.getComponent().getFontMetrics(context.getStyle().getFont(context));
  context.getStyle().getGraphicsUtils(context).layoutText(context,fm,b.getText(),b.getIcon(),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),viewRect,iconRect,textRect,b.getIconTextGap());
  View view=(View)b.getClientProperty(BasicHTML.propertyKey);
  int baseline;
  if (view != null) {
    baseline=BasicHTML.getHTMLBaseline(view,textRect.width,textRect.height);
    if (baseline >= 0) {
      baseline+=textRect.y;
    }
  }
 else {
    baseline=textRect.y + fm.getAscent();
  }
  context.dispose();
  return baseline;
}"
77300,"/** 
 * @inheritDoc
 */
@Override public Dimension getPreferredSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getPreferredSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}","/** 
 * {@inheritDoc}
 */
@Override public Dimension getPreferredSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getPreferredSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}"
77301,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintCheckBoxMenuItemBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintCheckBoxMenuItemBorder(context,g,x,y,w,h);
}"
77302,"/** 
 * @inheritDoc
 */
@Override protected String getPropertyPrefix(){
  return ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
@Override protected String getPropertyPrefix(){
  return ""String_Node_Str"";
}"
77303,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintCheckBoxBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintCheckBoxBorder(context,g,x,y,w,h);
}"
77304,"/** 
 * @inheritDoc
 */
@Override protected String getPropertyPrefix(){
  return ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
@Override protected String getPropertyPrefix(){
  return ""String_Node_Str"";
}"
77305,"/** 
 * @inheritDoc
 */
@Override protected void installDefaults(){
  super.installDefaults();
  updateStyle(chooser);
}","/** 
 * {@inheritDoc}
 */
@Override protected void installDefaults(){
  super.installDefaults();
  updateStyle(chooser);
}"
77306,"/** 
 * @inheritDoc
 */
@Override protected void uninstallListeners(){
  chooser.removePropertyChangeListener(this);
  super.uninstallListeners();
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallListeners(){
  chooser.removePropertyChangeListener(this);
  super.uninstallListeners();
}"
77307,"/** 
 * @inheritDoc
 */
@Override protected void uninstallDefaults(){
  SynthContext context=getContext(chooser,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
  super.uninstallDefaults();
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallDefaults(){
  SynthContext context=getContext(chooser,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
  super.uninstallDefaults();
}"
77308,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintColorChooserBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintColorChooserBorder(context,g,x,y,w,h);
}"
77309,"/** 
 * @inheritDoc
 */
@Override protected void installListeners(){
  super.installListeners();
  chooser.addPropertyChangeListener(this);
}","/** 
 * {@inheritDoc}
 */
@Override protected void installListeners(){
  super.installListeners();
  chooser.addPropertyChangeListener(this);
}"
77310,"/** 
 * @inheritDoc
 */
@Override public void propertyChange(PropertyChangeEvent e){
  if (SynthLookAndFeel.shouldUpdateStyle(e)) {
    updateStyle((JColorChooser)e.getSource());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void propertyChange(PropertyChangeEvent e){
  if (SynthLookAndFeel.shouldUpdateStyle(e)) {
    updateStyle((JColorChooser)e.getSource());
  }
}"
77311,"/** 
 * @inheritDoc
 */
@Override protected AbstractColorChooserPanel[] createDefaultChoosers(){
  SynthContext context=getContext(chooser,ENABLED);
  AbstractColorChooserPanel[] panels=(AbstractColorChooserPanel[])context.getStyle().get(context,""String_Node_Str"");
  context.dispose();
  if (panels == null) {
    panels=ColorChooserComponentFactory.getDefaultChooserPanels();
  }
  return panels;
}","/** 
 * {@inheritDoc}
 */
@Override protected AbstractColorChooserPanel[] createDefaultChoosers(){
  SynthContext context=getContext(chooser,ENABLED);
  AbstractColorChooserPanel[] panels=(AbstractColorChooserPanel[])context.getStyle().get(context,""String_Node_Str"");
  context.dispose();
  if (panels == null) {
    panels=ColorChooserComponentFactory.getDefaultChooserPanels();
  }
  return panels;
}"
77312,"/** 
 * @inheritDoc
 */
@Override protected ComboBoxEditor createEditor(){
  return new SynthComboBoxEditor();
}","/** 
 * {@inheritDoc}
 */
@Override protected ComboBoxEditor createEditor(){
  return new SynthComboBoxEditor();
}"
77313,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintComboBoxBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintComboBoxBorder(context,g,x,y,w,h);
}"
77314,"/** 
 * @inheritDoc Overridden to ensure that ButtonHandler is created prior to any of the other installXXX methods, since several of them reference buttonHandler.
 */
@Override public void installUI(JComponent c){
  buttonHandler=new ButtonHandler();
  super.installUI(c);
}","/** 
 * {@inheritDoc}Overridden to ensure that ButtonHandler is created prior to any of the other installXXX methods, since several of them reference buttonHandler.
 */
@Override public void installUI(JComponent c){
  buttonHandler=new ButtonHandler();
  super.installUI(c);
}"
77315,"/** 
 * @inheritDoc
 */
@Override protected void installListeners(){
  comboBox.addPropertyChangeListener(this);
  comboBox.addMouseListener(buttonHandler);
  editorFocusHandler=new EditorFocusHandler(comboBox);
  super.installListeners();
}","/** 
 * {@inheritDoc}
 */
@Override protected void installListeners(){
  comboBox.addPropertyChangeListener(this);
  comboBox.addMouseListener(buttonHandler);
  editorFocusHandler=new EditorFocusHandler(comboBox);
  super.installListeners();
}"
77316,"/** 
 * @inheritDoc
 */
@Override protected JButton createArrowButton(){
  SynthArrowButton button=new SynthArrowButton(SwingConstants.SOUTH);
  button.setName(""String_Node_Str"");
  button.setModel(buttonHandler);
  return button;
}","/** 
 * {@inheritDoc}
 */
@Override protected JButton createArrowButton(){
  SynthArrowButton button=new SynthArrowButton(SwingConstants.SOUTH);
  button.setName(""String_Node_Str"");
  button.setModel(buttonHandler);
  return button;
}"
77317,"/** 
 * @inheritDoc
 */
@Override protected ListCellRenderer createRenderer(){
  return new SynthComboBoxRenderer();
}","/** 
 * {@inheritDoc}
 */
@Override protected ListCellRenderer createRenderer(){
  return new SynthComboBoxRenderer();
}"
77318,"/** 
 * @inheritDoc
 */
@Override protected void uninstallListeners(){
  editorFocusHandler.unregister();
  comboBox.removePropertyChangeListener(this);
  comboBox.removeMouseListener(buttonHandler);
  buttonHandler.pressed=false;
  buttonHandler.over=false;
  super.uninstallListeners();
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallListeners(){
  editorFocusHandler.unregister();
  comboBox.removePropertyChangeListener(this);
  comboBox.removeMouseListener(buttonHandler);
  buttonHandler.pressed=false;
  buttonHandler.over=false;
  super.uninstallListeners();
}"
77319,"/** 
 * @inheritDoc
 */
@Override protected void uninstallDefaults(){
  SynthContext context=getContext(comboBox,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallDefaults(){
  SynthContext context=getContext(comboBox,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
}"
77320,"/** 
 * @inheritDoc
 */
@Override protected ComboPopup createPopup(){
  SynthComboPopup p=new SynthComboPopup(comboBox);
  p.addPopupMenuListener(buttonHandler);
  return p;
}","/** 
 * {@inheritDoc}
 */
@Override protected ComboPopup createPopup(){
  SynthComboPopup p=new SynthComboPopup(comboBox);
  p.addPopupMenuListener(buttonHandler);
  return p;
}"
77321,"/** 
 * @inheritDoc
 */
@Override public void uninstallUI(JComponent c){
  if (popup instanceof SynthComboPopup) {
    ((SynthComboPopup)popup).removePopupMenuListener(buttonHandler);
  }
  super.uninstallUI(c);
  buttonHandler=null;
}","/** 
 * {@inheritDoc}
 */
@Override public void uninstallUI(JComponent c){
  if (popup instanceof SynthComboPopup) {
    ((SynthComboPopup)popup).removePopupMenuListener(buttonHandler);
  }
  super.uninstallUI(c);
  buttonHandler=null;
}"
77322,"/** 
 * Initializes a new instance of this class.
 */
protected Association(int associationID,int maxInStreams,int maxOutStreams){
  this.associationID=associationID;
  this.maxInStreams=maxInStreams;
  this.maxOutStreams=maxOutStreams;
}","/** 
 * Initializes a new instance of this class.
 * @param associationID The association ID
 * @param maxInStreams The maximum number of inbound streams
 * @param maxOutStreams The maximum number of outbound streams
 */
protected Association(int associationID,int maxInStreams,int maxOutStreams){
  this.associationID=associationID;
  this.maxInStreams=maxInStreams;
  this.maxOutStreams=maxOutStreams;
}"
77323,"/** 
 * Constructs an instance of this class with the specified message.
 */
public IllegalReceiveException(String msg){
  super(msg);
}","/** 
 * Constructs an instance of this class with the specified message.
 * @param msg The String that contains a detailed message
 */
public IllegalReceiveException(String msg){
  super(msg);
}"
77324,"/** 
 * Constructs an instance of this class with the specified detailed message.
 */
public IllegalUnbindException(String msg){
  super(msg);
}","/** 
 * Constructs an instance of this class with the specified detailed message.
 * @param msg The String that contains a detailed message
 */
public IllegalUnbindException(String msg){
  super(msg);
}"
77325,"/** 
 * Constructs an instance of this class with the specified detailed message.
 */
public InvalidStreamException(String msg){
  super(msg);
}","/** 
 * Constructs an instance of this class with the specified detailed message.
 * @param msg The String that contains a detailed message
 */
public InvalidStreamException(String msg){
  super(msg);
}"
77326,"/** 
 * Returns the association that this notification is applicable to.
 */
public Association association();","/** 
 * Returns the association that this notification is applicable to.
 * @return  The association
 */
public Association association();"
77327,"/** 
 * Sets the value of a socket option.
 * @param name The socket option
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpChannel setOption(SctpSocketOption<T> name,T value) throws IOException ;","/** 
 * Sets the value of a socket option.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpChannel setOption(SctpSocketOption<T> name,T value) throws IOException ;"
77328,"/** 
 * Receives a message into the given buffer and/or handles a notification. <P> If a message or notification is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the message or notification is returned or handled, respectively. If this channel is in non-blocking mode and a message or notification is not immediately available then this method immediately returns   {@code null}. <P> If this method receives a message it is copied into the given byte buffer. The message is transferred into the given byte buffer starting at its current position and the buffers position is incremented by the number of bytes read. If there are fewer bytes remaining in the buffer than are required to hold the message, or the underlying input buffer does not contain the complete message, then an invocation of   {@link MessageInfo#isComplete isComplete} on the returned {@code MessageInfo} will return {@code false}, and more invocations of this method will be necessary to completely consume the messgae. Only one message at a time will be partially delivered in any stream. The socket option   {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVE SCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing ofmessages occurs. <P> If this method receives a notification then the appropriate method of the given handler, if there is one, is invoked. If the handler returns {@link HandlerResult#CONTINUE CONTINUE} then this method will try toreceive another message/notification, otherwise, if  {@link HandlerResult#RETURN RETURN} is returned this method will return {@code null}. If an uncaught exception is thrown by the handler it will be propagated up the stack through this method. <P> This method may be invoked at any time. If another thread has already initiated a receive operation upon this channel, then an invocation of this method will block until the first operation is complete. The given handler is invoked without holding any locks used to enforce the above synchronization policy, that way handlers will not stall other threads from receiving. A handler should not invoke the   {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.
 * @param dst The buffer into which message bytes are to be transferred
 * @param attachment The object to attach to the receive operation; can be {@code null}
 * @param handler A handler to handle notifications from the SCTP stack, or  {@code null} to ignore any notifications.
 * @return  The {@code MessageInfo},   {@code null} if this channel is innon-blocking mode and no messages are immediately available or the notification handler returns  {@link HandlerResult#RETURN RETURN} after handling a notification
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws java.nio.channels.NotYetConnectedException If this channel is not yet connected
 * @throws IllegalReceiveException If the given handler invokes the  {@code receive} method of thischannel
 * @throws IOException If some other I/O error occurs
 */
public abstract <T>MessageInfo receive(ByteBuffer dst,T attachment,NotificationHandler<T> handler) throws IOException ;","/** 
 * Receives a message into the given buffer and/or handles a notification. <P> If a message or notification is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the message or notification is returned or handled, respectively. If this channel is in non-blocking mode and a message or notification is not immediately available then this method immediately returns   {@code null}. <P> If this method receives a message it is copied into the given byte buffer. The message is transferred into the given byte buffer starting at its current position and the buffers position is incremented by the number of bytes read. If there are fewer bytes remaining in the buffer than are required to hold the message, or the underlying input buffer does not contain the complete message, then an invocation of   {@link MessageInfo#isComplete isComplete} on the returned {@code MessageInfo} will return {@code false}, and more invocations of this method will be necessary to completely consume the messgae. Only one message at a time will be partially delivered in any stream. The socket option   {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVE SCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing ofmessages occurs. <P> If this method receives a notification then the appropriate method of the given handler, if there is one, is invoked. If the handler returns {@link HandlerResult#CONTINUE CONTINUE} then this method will try toreceive another message/notification, otherwise, if  {@link HandlerResult#RETURN RETURN} is returned this method will return {@code null}. If an uncaught exception is thrown by the handler it will be propagated up the stack through this method. <P> This method may be invoked at any time. If another thread has already initiated a receive operation upon this channel, then an invocation of this method will block until the first operation is complete. The given handler is invoked without holding any locks used to enforce the above synchronization policy, that way handlers will not stall other threads from receiving. A handler should not invoke the   {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.
 * @param < T > The type of the attachment
 * @param dst The buffer into which message bytes are to be transferred
 * @param attachment The object to attach to the receive operation; can be {@code null}
 * @param handler A handler to handle notifications from the SCTP stack, or  {@code null} to ignore any notifications.
 * @return  The {@code MessageInfo},   {@code null} if this channel is innon-blocking mode and no messages are immediately available or the notification handler returns  {@link HandlerResult#RETURN RETURN} after handling a notification
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws java.nio.channels.NotYetConnectedException If this channel is not yet connected
 * @throws IllegalReceiveException If the given handler invokes the  {@code receive} method of thischannel
 * @throws IOException If some other I/O error occurs
 */
public abstract <T>MessageInfo receive(ByteBuffer dst,T attachment,NotificationHandler<T> handler) throws IOException ;"
77329,"/** 
 * Returns the value of a socket option.
 * @param name The socket option
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name) throws IOException ;","/** 
 * Returns the value of a socket option.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name) throws IOException ;"
77330,"/** 
 * Sends a message via this channel. <P> If this channel is in non-blocking mode and there is sufficient room in the underlying output buffer, or if this channel is in blocking mode and sufficient room becomes available, then the remaining bytes in the given byte buffer are transmitted as a single message. Sending a message is atomic unless explicit message completion   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel's socket. <P> The message is transferred from the byte buffer as if by a regular  {@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer) write} operation.<P> The bytes will be written to the stream number that is specified by {@link MessageInfo#streamNumber streamNumber} in the given {@code messageInfo}. <P> This method may be invoked at any time. If another thread has already initiated a send operation upon this channel, then an invocation of this method will block until the first operation is complete.
 * @param src The buffer containing the message to be sent
 * @param messageInfo Ancillary data about the message to be sent
 * @return  The number of bytes sent, which will be either the number ofbytes that were remaining in the messages buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the message in the underlying output buffer
 * @throws InvalidStreamExcepton If  {@code streamNumner} is negative or greater than or equal tothe maximum number of outgoing streams
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws java.nio.channels.NotYetConnectedException If this channel is not yet connected
 * @throws IOException If some other I/O error occurs
 */
public abstract int send(ByteBuffer src,MessageInfo messageInfo) throws IOException ;","/** 
 * Sends a message via this channel. <P> If this channel is in non-blocking mode and there is sufficient room in the underlying output buffer, or if this channel is in blocking mode and sufficient room becomes available, then the remaining bytes in the given byte buffer are transmitted as a single message. Sending a message is atomic unless explicit message completion   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel's socket. <P> The message is transferred from the byte buffer as if by a regular  {@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer) write} operation.<P> The bytes will be written to the stream number that is specified by {@link MessageInfo#streamNumber streamNumber} in the given {@code messageInfo}. <P> This method may be invoked at any time. If another thread has already initiated a send operation upon this channel, then an invocation of this method will block until the first operation is complete.
 * @param src The buffer containing the message to be sent
 * @param messageInfo Ancillary data about the message to be sent
 * @return  The number of bytes sent, which will be either the number ofbytes that were remaining in the messages buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the message in the underlying output buffer
 * @throws InvalidStreamException If  {@code streamNumner} is negative or greater than or equal tothe maximum number of outgoing streams
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws java.nio.channels.NotYetConnectedException If this channel is not yet connected
 * @throws IOException If some other I/O error occurs
 */
public abstract int send(ByteBuffer src,MessageInfo messageInfo) throws IOException ;"
77331,"/** 
 * Sets the value of a socket option. <P> Note that some options are retrieved on the channel's socket, therefore the   {@code association} parameter is not applicable and will beignored if given. However, if the option is association specific then the association must be given.
 * @param name The socket option
 * @param association The association whose option should be set, or  {@code null}if this option should be set at the channel's socket level.
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpMultiChannel setOption(SctpSocketOption<T> name,T value,Association association) throws IOException ;","/** 
 * Sets the value of a socket option. <P> Note that some options are retrieved on the channel's socket, therefore the   {@code association} parameter is not applicable and will beignored if given. However, if the option is association specific then the association must be given.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @param association The association whose option should be set, or  {@code null}if this option should be set at the channel's socket level.
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpMultiChannel setOption(SctpSocketOption<T> name,T value,Association association) throws IOException ;"
77332,"/** 
 * Receives a message and/or handles a notification via this channel. <P> If a message or notification is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the message or notification is returned or handled, respectively. If this channel is in non-blocking mode and a message or notification is not immediately available then this method immediately returns   {@code null}. <P> If this method receives a message it is copied into the given byte buffer and an   {@link MessageInfo} is returned.The message is transferred into the given byte buffer starting at its current position and the buffers position is incremented by the number of bytes read. If there are fewer bytes remaining in the buffer than are required to hold the message, or the underlying input buffer does not contain the complete message, then an invocation of  {@link MessageInfo#isComplete isComplete} on the returned {@code MessageInfo} will return {@code false}, and more invocations of this method will be necessary to completely consume the messgae. Only one message at a time will be partially delivered in any stream. The socket option   {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVE SCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing ofmessages occurs. <P> If this method receives a notification then the appropriate method of the given handler, if there is one, is invoked. If the handler returns  {@link HandlerResult#CONTINUE CONTINUE} then this method will try to receive anothermessage/notification, otherwise, if  {@link HandlerResult#RETURN RETURN} is returnedthis method will return  {@code null}. If an uncaught exception is thrown by the handler it will be propagated up the stack through this method. <P> If a security manager has been installed then for each new association setup this method verifies that the associations source address and port number are permitted by the security manager's   {@link java.lang.SecurityManager#checkAccept(String,int) checkAccept} method.<P> This method may be invoked at any time. If another thread has already initiated a receive operation upon this channel, then an invocation of this method will block until the first operation is complete. The given handler is invoked without holding any locks used to enforce the above synchronization policy, that way handlers will not stall other threads from receiving. A handler should not invoke the  {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.
 * @param buffer The buffer into which bytes are to be transferred
 * @param attachment The object to attach to the receive operation; can be {@code null}
 * @param handler A handler to handle notifications from the SCTP stack, or {@code null} to ignore any notifications.
 * @return  The {@code MessageInfo},   {@code null} if this channel is innon-blocking mode and no messages are immediately available or the notification handler returns  {@code RETURN} after handlinga notification
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws NotYetBoundException If this channel is not yet bound
 * @throws IllegalReceiveException If the given handler invokes the  {@code receive} method of thischannel
 * @throws SecurityException If a security manager has been installed and it does not permit new associations to be accepted from the message's sender
 * @throws IOException If some other I/O error occurs
 */
public abstract <T>MessageInfo receive(ByteBuffer buffer,T attachment,NotificationHandler<T> handler) throws IOException ;","/** 
 * Receives a message and/or handles a notification via this channel. <P> If a message or notification is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the message or notification is returned or handled, respectively. If this channel is in non-blocking mode and a message or notification is not immediately available then this method immediately returns   {@code null}. <P> If this method receives a message it is copied into the given byte buffer and an   {@link MessageInfo} is returned.The message is transferred into the given byte buffer starting at its current position and the buffers position is incremented by the number of bytes read. If there are fewer bytes remaining in the buffer than are required to hold the message, or the underlying input buffer does not contain the complete message, then an invocation of  {@link MessageInfo#isComplete isComplete} on the returned {@code MessageInfo} will return {@code false}, and more invocations of this method will be necessary to completely consume the messgae. Only one message at a time will be partially delivered in any stream. The socket option   {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVE SCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing ofmessages occurs. <P> If this method receives a notification then the appropriate method of the given handler, if there is one, is invoked. If the handler returns  {@link HandlerResult#CONTINUE CONTINUE} then this method will try to receive anothermessage/notification, otherwise, if  {@link HandlerResult#RETURN RETURN} is returnedthis method will return  {@code null}. If an uncaught exception is thrown by the handler it will be propagated up the stack through this method. <P> If a security manager has been installed then for each new association setup this method verifies that the associations source address and port number are permitted by the security manager's   {@link java.lang.SecurityManager#checkAccept(String,int) checkAccept} method.<P> This method may be invoked at any time. If another thread has already initiated a receive operation upon this channel, then an invocation of this method will block until the first operation is complete. The given handler is invoked without holding any locks used to enforce the above synchronization policy, that way handlers will not stall other threads from receiving. A handler should not invoke the  {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.
 * @param < T > The type of the attachment
 * @param buffer The buffer into which bytes are to be transferred
 * @param attachment The object to attach to the receive operation; can be {@code null}
 * @param handler A handler to handle notifications from the SCTP stack, or {@code null} to ignore any notifications.
 * @return  The {@code MessageInfo},   {@code null} if this channel is innon-blocking mode and no messages are immediately available or the notification handler returns  {@code RETURN} after handlinga notification
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws NotYetBoundException If this channel is not yet bound
 * @throws IllegalReceiveException If the given handler invokes the  {@code receive} method of thischannel
 * @throws SecurityException If a security manager has been installed and it does not permit new associations to be accepted from the message's sender
 * @throws IOException If some other I/O error occurs
 */
public abstract <T>MessageInfo receive(ByteBuffer buffer,T attachment,NotificationHandler<T> handler) throws IOException ;"
77333,"/** 
 * Returns the value of a socket option. <P> Note that some options are retrieved on the channel's socket, therefore the   {@code association} parameter is not applicable and will beignored if given. However, if the option is association specific then the association must be given.
 * @param name The socket option
 * @param association The association whose option should be retrieved, or  {@code null}if this option should be retrieved at the channel's socket level.
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name,Association association) throws IOException ;","/** 
 * Returns the value of a socket option. <P> Note that some options are retrieved on the channel's socket, therefore the   {@code association} parameter is not applicable and will beignored if given. However, if the option is association specific then the association must be given.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @param association The association whose option should be retrieved, or  {@code null}if this option should be retrieved at the channel's socket level.
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name,Association association) throws IOException ;"
77334,"/** 
 * Returns all of the remote addresses to which the given association on this channel's socket is connected.
 * @return  All of the remote addresses for the given association, oran empty  {@code Set} if the association has been shutdown
 * @throws ClosedChannelException If the channel is closed
 * @throws IOException If an I/O error occurs
 */
public abstract Set<SocketAddress> getRemoteAddresses(Association association) throws IOException ;","/** 
 * Returns all of the remote addresses to which the given association on this channel's socket is connected.
 * @param association The association
 * @return  All of the remote addresses for the given association, oran empty  {@code Set} if the association has been shutdown
 * @throws ClosedChannelException If the channel is closed
 * @throws IOException If an I/O error occurs
 */
public abstract Set<SocketAddress> getRemoteAddresses(Association association) throws IOException ;"
77335,"/** 
 * Sends a message via this channel. <P> If this channel is unbound then this method will invoke   {@link #bind(SocketAddress,int) bind(null, 0)} before sending any data.<P> If there is no association existing between this channel's socket and the intended receiver, identified by the address in the given messageInfo, then one will be automatically setup to the intended receiver. This is considered to be Implicit Association Setup. Upon successful association setup, an {@link AssociationChangeNotification association changed}notification will be put to the SCTP stack with its   {@code event} parameter setto  {@link AssociationChangeNotification.AssocChangeEvent#COMM_UP COMM_UP}. This notification can be received by invoking   {@link #receive receive}. <P> If this channel is in blocking mode, there is sufficient room in the underlying output buffer, then the remaining bytes in the given byte buffer are transmitted as a single message. Sending a message is atomic unless explicit message completion   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel's socket. <P> If this channel is in non-blocking mode, there is sufficient room in the underlying output buffer, and an implicit association setup is required, then the remaining bytes in the given byte buffer are transmitted as a single message, subject to   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}. If for any reason the message cannot be delivered an   {@link AssociationChangeNotification associationchanged} notification is put on the SCTP stack with its {@code event} parameter setto  {@link AssociationChangeNotification.AssocChangeEvent#CANT_START CANT_START}. <P> The message is transferred from the byte buffer as if by a regular  {@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer) write} operation.<P> If a security manager has been installed then for each new association setup this method verifies that the given remote peers address and port number are permitted by the security manager's  {@link java.lang.SecurityManager#checkConnect(String,int) checkConnect} method.<P> This method may be invoked at any time. If another thread has already initiated a send operation upon this channel, then an invocation of this method will block until the first operation is complete.
 * @param buffer The buffer containing the message to be sent
 * @param messageInfo Ancillary data about the message to be sent
 * @return  The number of bytes sent, which will be either the number ofbytes that were remaining in the messages buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the message in the underlying output buffer
 * @throws InvalidStreamExcepton If  {@code streamNumber} is negative, or if an association alreadyexists and  {@code streamNumber} is greater than the maximum numberof outgoing streams
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws SecurityException If a security manager has been installed and it does not permit new associations to be setup with the the messages's address
 * @throws IOException If some other I/O error occurs
 */
public abstract int send(ByteBuffer buffer,MessageInfo messageInfo) throws IOException ;","/** 
 * Sends a message via this channel. <P> If this channel is unbound then this method will invoke   {@link #bind(SocketAddress,int) bind(null, 0)} before sending any data.<P> If there is no association existing between this channel's socket and the intended receiver, identified by the address in the given messageInfo, then one will be automatically setup to the intended receiver. This is considered to be Implicit Association Setup. Upon successful association setup, an {@link AssociationChangeNotification association changed}notification will be put to the SCTP stack with its   {@code event} parameter setto  {@link AssociationChangeNotification.AssocChangeEvent#COMM_UP COMM_UP}. This notification can be received by invoking   {@link #receive receive}. <P> If this channel is in blocking mode, there is sufficient room in the underlying output buffer, then the remaining bytes in the given byte buffer are transmitted as a single message. Sending a message is atomic unless explicit message completion   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel's socket. <P> If this channel is in non-blocking mode, there is sufficient room in the underlying output buffer, and an implicit association setup is required, then the remaining bytes in the given byte buffer are transmitted as a single message, subject to   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}. If for any reason the message cannot be delivered an   {@link AssociationChangeNotification associationchanged} notification is put on the SCTP stack with its {@code event} parameter setto  {@link AssociationChangeNotification.AssocChangeEvent#CANT_START CANT_START}. <P> The message is transferred from the byte buffer as if by a regular  {@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer) write} operation.<P> If a security manager has been installed then for each new association setup this method verifies that the given remote peers address and port number are permitted by the security manager's  {@link java.lang.SecurityManager#checkConnect(String,int) checkConnect} method.<P> This method may be invoked at any time. If another thread has already initiated a send operation upon this channel, then an invocation of this method will block until the first operation is complete.
 * @param buffer The buffer containing the message to be sent
 * @param messageInfo Ancillary data about the message to be sent
 * @return  The number of bytes sent, which will be either the number ofbytes that were remaining in the messages buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the message in the underlying output buffer
 * @throws InvalidStreamException If  {@code streamNumber} is negative, or if an association alreadyexists and  {@code streamNumber} is greater than the maximum numberof outgoing streams
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws SecurityException If a security manager has been installed and it does not permit new associations to be setup with the the messages's address
 * @throws IOException If some other I/O error occurs
 */
public abstract int send(ByteBuffer buffer,MessageInfo messageInfo) throws IOException ;"
77336,"/** 
 * Sets the value of a socket option.
 * @param name The socket option
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ;","/** 
 * Sets the value of a socket option.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ;"
77337,"/** 
 * Returns the value of a socket option.
 * @param name The socket option
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name) throws IOException ;","/** 
 * Returns the value of a socket option.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name) throws IOException ;"
77338,"/** 
 * Performs the specified   {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited byspecified  {@code Permission} arguments.The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified {@code AccessControlContext}. <p> If the action's   {@code run} method throws an (unchecked) exception,it will propagate through this method. <p> This method preserves the current AccessControlContext's DomainCombiner (which may be null) while the action is performed.
 * @param action the action to be performed.
 * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.
 * @param perms the {@code Permission} arguments which limit thescope of the caller's privileges. The number of arguments is variable.
 * @return the value returned by the action's {@code run} method.
 * @throws PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception
 * @throws NullPointerException if action or perms or any element ofperms is  {@code null}
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedAction,AccessControlContext)
 * @see java.security.DomainCombiner
 * @since 1.8
 */
@CallerSensitive public static <T>T doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action,AccessControlContext context,Permission... perms) throws PrivilegedActionException {
  AccessControlContext parent=getContext();
  DomainCombiner dc=parent.getCombiner();
  if (dc == null && context != null) {
    dc=context.getCombiner();
  }
  if (perms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<?> caller=Reflection.getCallerClass();
  return AccessController.doPrivileged(action,createWrapper(dc,caller,parent,context,perms));
}","/** 
 * Performs the specified   {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited byspecified  {@code Permission} arguments.The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified {@code AccessControlContext}. <p> If the action's   {@code run} method throws an (unchecked) exception,it will propagate through this method. <p> This method preserves the current AccessControlContext's DomainCombiner (which may be null) while the action is performed.
 * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.
 * @param action the action to be performed.
 * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.
 * @param perms the {@code Permission} arguments which limit thescope of the caller's privileges. The number of arguments is variable.
 * @return the value returned by the action's {@code run} method.
 * @throws PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception
 * @throws NullPointerException if action or perms or any element ofperms is  {@code null}
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedAction,AccessControlContext)
 * @see java.security.DomainCombiner
 * @since 1.8
 */
@CallerSensitive public static <T>T doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action,AccessControlContext context,Permission... perms) throws PrivilegedActionException {
  AccessControlContext parent=getContext();
  DomainCombiner dc=parent.getCombiner();
  if (dc == null && context != null) {
    dc=context.getCombiner();
  }
  if (perms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<?> caller=Reflection.getCallerClass();
  return AccessController.doPrivileged(action,createWrapper(dc,caller,parent,context,perms));
}"
77339,"/** 
 * Performs the specified   {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited byspecified  {@code Permission} arguments.The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified {@code AccessControlContext}. <p> If the action's   {@code run} method throws an (unchecked) exception,it will propagate through this method.
 * @param action the action to be performed.
 * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.
 * @param perms the {@code Permission} arguments which limit thescope of the caller's privileges. The number of arguments is variable.
 * @return the value returned by the action's {@code run} method.
 * @throws PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception
 * @throws NullPointerException if action or perms or any element ofperms is  {@code null}
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedAction,AccessControlContext)
 * @since 1.8
 */
@CallerSensitive public static <T>T doPrivileged(PrivilegedExceptionAction<T> action,AccessControlContext context,Permission... perms) throws PrivilegedActionException {
  AccessControlContext parent=getContext();
  if (perms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<?> caller=Reflection.getCallerClass();
  return AccessController.doPrivileged(action,createWrapper(null,caller,parent,context,perms));
}","/** 
 * Performs the specified   {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited byspecified  {@code Permission} arguments.The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified {@code AccessControlContext}. <p> If the action's   {@code run} method throws an (unchecked) exception,it will propagate through this method.
 * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.
 * @param action the action to be performed.
 * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.
 * @param perms the {@code Permission} arguments which limit thescope of the caller's privileges. The number of arguments is variable.
 * @return the value returned by the action's {@code run} method.
 * @throws PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception
 * @throws NullPointerException if action or perms or any element ofperms is  {@code null}
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedAction,AccessControlContext)
 * @since 1.8
 */
@CallerSensitive public static <T>T doPrivileged(PrivilegedExceptionAction<T> action,AccessControlContext context,Permission... perms) throws PrivilegedActionException {
  AccessControlContext parent=getContext();
  if (perms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<?> caller=Reflection.getCallerClass();
  return AccessController.doPrivileged(action,createWrapper(null,caller,parent,context,perms));
}"
77340,"/** 
 * Returns a (transparent) specification of this parameter object.  {@code paramSpec} identifies the specification class in whichthe parameters should be returned. It could, for example, be {@code DSAParameterSpec.class}, to indicate that the parameters should be returned in an instance of the  {@code DSAParameterSpec} class.
 * @param paramSpec the specification class in whichthe parameters should be returned.
 * @return the parameter specification.
 * @exception InvalidParameterSpecException if the requested parameterspecification is inappropriate for this parameter object, or if this parameter object has not been initialized.
 */
public final <T extends AlgorithmParameterSpec>T getParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException {
  if (this.initialized == false) {
    throw new InvalidParameterSpecException(""String_Node_Str"");
  }
  return paramSpi.engineGetParameterSpec(paramSpec);
}","/** 
 * Returns a (transparent) specification of this parameter object.  {@code paramSpec} identifies the specification class in whichthe parameters should be returned. It could, for example, be {@code DSAParameterSpec.class}, to indicate that the parameters should be returned in an instance of the  {@code DSAParameterSpec} class.
 * @param < T > the type of the parameter specification to be returrned
 * @param paramSpec the specification class in whichthe parameters should be returned.
 * @return the parameter specification.
 * @exception InvalidParameterSpecException if the requested parameterspecification is inappropriate for this parameter object, or if this parameter object has not been initialized.
 */
public final <T extends AlgorithmParameterSpec>T getParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException {
  if (this.initialized == false) {
    throw new InvalidParameterSpecException(""String_Node_Str"");
  }
  return paramSpi.engineGetParameterSpec(paramSpec);
}"
77341,"/** 
 * Returns a (transparent) specification of this parameters object.  {@code paramSpec} identifies the specification class in whichthe parameters should be returned. It could, for example, be {@code DSAParameterSpec.class}, to indicate that the parameters should be returned in an instance of the  {@code DSAParameterSpec} class.
 * @param paramSpec the specification class in whichthe parameters should be returned.
 * @return the parameter specification.
 * @exception InvalidParameterSpecException if the requested parameterspecification is inappropriate for this parameter object.
 */
protected abstract <T extends AlgorithmParameterSpec>T engineGetParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException ;","/** 
 * Returns a (transparent) specification of this parameters object.  {@code paramSpec} identifies the specification class in whichthe parameters should be returned. It could, for example, be {@code DSAParameterSpec.class}, to indicate that the parameters should be returned in an instance of the  {@code DSAParameterSpec} class.
 * @param < T > the type of the parameter specification to be returned
 * @param paramSpec the specification class in whichthe parameters should be returned.
 * @return the parameter specification.
 * @exception InvalidParameterSpecException if the requested parameterspecification is inappropriate for this parameter object.
 */
protected abstract <T extends AlgorithmParameterSpec>T engineGetParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException ;"
77342,"/** 
 * Returns a specification (key material) of the given key object.  {@code keySpec} identifies the specification class in whichthe key material should be returned. It could, for example, be {@code DSAPublicKeySpec.class}, to indicate that the key material should be returned in an instance of the  {@code DSAPublicKeySpec} class.
 * @param key the key.
 * @param keySpec the specification class in whichthe key material should be returned.
 * @return the underlying key specification (key material) in an instanceof the requested specification class.
 * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key, or the given key cannot be processed (e.g., the given key has an unrecognized algorithm or format).
 */
public final <T extends KeySpec>T getKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {
  if (serviceIterator == null) {
    return spi.engineGetKeySpec(key,keySpec);
  }
  Exception failure=null;
  KeyFactorySpi mySpi=spi;
  do {
    try {
      return mySpi.engineGetKeySpec(key,keySpec);
    }
 catch (    Exception e) {
      if (failure == null) {
        failure=e;
      }
      mySpi=nextSpi(mySpi);
    }
  }
 while (mySpi != null);
  if (failure instanceof RuntimeException) {
    throw (RuntimeException)failure;
  }
  if (failure instanceof InvalidKeySpecException) {
    throw (InvalidKeySpecException)failure;
  }
  throw new InvalidKeySpecException(""String_Node_Str"",failure);
}","/** 
 * Returns a specification (key material) of the given key object.  {@code keySpec} identifies the specification class in whichthe key material should be returned. It could, for example, be {@code DSAPublicKeySpec.class}, to indicate that the key material should be returned in an instance of the  {@code DSAPublicKeySpec} class.
 * @param < T > the type of the key specification to be returned
 * @param key the key.
 * @param keySpec the specification class in whichthe key material should be returned.
 * @return the underlying key specification (key material) in an instanceof the requested specification class.
 * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key, or the given key cannot be processed (e.g., the given key has an unrecognized algorithm or format).
 */
public final <T extends KeySpec>T getKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {
  if (serviceIterator == null) {
    return spi.engineGetKeySpec(key,keySpec);
  }
  Exception failure=null;
  KeyFactorySpi mySpi=spi;
  do {
    try {
      return mySpi.engineGetKeySpec(key,keySpec);
    }
 catch (    Exception e) {
      if (failure == null) {
        failure=e;
      }
      mySpi=nextSpi(mySpi);
    }
  }
 while (mySpi != null);
  if (failure instanceof RuntimeException) {
    throw (RuntimeException)failure;
  }
  if (failure instanceof InvalidKeySpecException) {
    throw (InvalidKeySpecException)failure;
  }
  throw new InvalidKeySpecException(""String_Node_Str"",failure);
}"
77343,"/** 
 * Returns a specification (key material) of the given key object.  {@code keySpec} identifies the specification class in whichthe key material should be returned. It could, for example, be {@code DSAPublicKeySpec.class}, to indicate that the key material should be returned in an instance of the  {@code DSAPublicKeySpec} class.
 * @param key the key.
 * @param keySpec the specification class in whichthe key material should be returned.
 * @return the underlying key specification (key material) in an instanceof the requested specification class.
 * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key, or the given key cannot be dealt with (e.g., the given key has an unrecognized format).
 */
protected abstract <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException ;","/** 
 * Returns a specification (key material) of the given key object.  {@code keySpec} identifies the specification class in whichthe key material should be returned. It could, for example, be {@code DSAPublicKeySpec.class}, to indicate that the key material should be returned in an instance of the  {@code DSAPublicKeySpec} class.
 * @param < T > the type of the key specification to be returned
 * @param key the key.
 * @param keySpec the specification class in whichthe key material should be returned.
 * @return the underlying key specification (key material) in an instanceof the requested specification class.
 * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key, or the given key cannot be dealt with (e.g., the given key has an unrecognized format).
 */
protected abstract <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException ;"
77344,"/** 
 * Returns true if the specified subject is implied by this principal. <p>The default implementation of this method returns true if  {@code subject} is non-null and contains at least one principal thatis equal to this principal. <p>Subclasses may override this with a different implementation, if necessary.
 * @return true if {@code subject} is non-null and isimplied by this principal, or false otherwise.
 * @since 1.8
 */
public default boolean implies(Subject subject){
  if (subject == null)   return false;
  return subject.getPrincipals().contains(this);
}","/** 
 * Returns true if the specified subject is implied by this principal. <p>The default implementation of this method returns true if  {@code subject} is non-null and contains at least one principal thatis equal to this principal. <p>Subclasses may override this with a different implementation, if necessary.
 * @param subject the {@code Subject}
 * @return true if {@code subject} is non-null and isimplied by this principal, or false otherwise.
 * @since 1.8
 */
public default boolean implies(Subject subject){
  if (subject == null)   return false;
  return subject.getPrincipals().contains(this);
}"
77345,"/** 
 * Returns a   {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates. A PKIX implementation returns objects of type  {@code PKIXRevocationChecker}. <p>The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of   {@code CertPathBuilder} for an example.<p>This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an  {@code UnsupportedOperationException}.
 * @throws UnsupportedOperationException if this method is not supported
 * @since 1.8
 */
public CertPathChecker engineGetRevocationChecker(){
  throw new UnsupportedOperationException();
}","/** 
 * Returns a   {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates. A PKIX implementation returns objects of type  {@code PKIXRevocationChecker}. <p>The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of   {@code CertPathBuilder} for an example.<p>This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an  {@code UnsupportedOperationException}.
 * @return a {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates
 * @throws UnsupportedOperationException if this method is not supported
 * @since 1.8
 */
public CertPathChecker engineGetRevocationChecker(){
  throw new UnsupportedOperationException();
}"
77346,"/** 
 * Returns a   {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates. A PKIX implementation returns objects of type  {@code PKIXRevocationChecker}. <p>The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of   {@code CertPathValidator} for an example.<p>This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an  {@code UnsupportedOperationException}.
 * @throws UnsupportedOperationException if this method is not supported
 * @since 1.8
 */
public CertPathChecker engineGetRevocationChecker(){
  throw new UnsupportedOperationException();
}","/** 
 * Returns a   {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates. A PKIX implementation returns objects of type  {@code PKIXRevocationChecker}. <p>The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of   {@code CertPathValidator} for an example.<p>This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an  {@code UnsupportedOperationException}.
 * @return a {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates
 * @throws UnsupportedOperationException if this method is not supported
 * @since 1.8
 */
public CertPathChecker engineGetRevocationChecker(){
  throw new UnsupportedOperationException();
}"
77347,"protected PKIXRevocationChecker(){
}","/** 
 * Default constructor.
 */
protected PKIXRevocationChecker(){
}"
77348,"/** 
 * Creates an   {@link SNIMatcher} object for {@code SNIHostName}s. <P> This method can be used by a server to verify the acceptable  {@code SNIHostName}s.  For example, <pre> SNIMatcher matcher = SNIHostName.createSNIMatcher(""www\\.example\\.com""); </pre> will accept the hostname ""www.example.com"". <pre> SNIMatcher matcher = SNIHostName.createSNIMatcher(""www\\.example\\.(com|org)""); </pre> will accept hostnames ""www.example.com"" and ""www.example.org"".
 * @param regex the <a href="" {@docRoot}/java/util/regex/Pattern.html#sum""> regular expression pattern</a> representing the hostname(s) to match
 * @throws NullPointerException if {@code regex} is{@code null}
 * @throws java.util.regex.PatternSyntaxException if the regular expression'ssyntax is invalid
 */
public static SNIMatcher createSNIMatcher(String regex){
  if (regex == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return new SNIHostNameMatcher(regex);
}","/** 
 * Creates an   {@link SNIMatcher} object for {@code SNIHostName}s. <P> This method can be used by a server to verify the acceptable  {@code SNIHostName}s.  For example, <pre> SNIMatcher matcher = SNIHostName.createSNIMatcher(""www\\.example\\.com""); </pre> will accept the hostname ""www.example.com"". <pre> SNIMatcher matcher = SNIHostName.createSNIMatcher(""www\\.example\\.(com|org)""); </pre> will accept hostnames ""www.example.com"" and ""www.example.org"".
 * @param regex the <a href="" {@docRoot}/java/util/regex/Pattern.html#sum""> regular expression pattern</a> representing the hostname(s) to match
 * @return a {@code SNIMatcher} object for {@code SNIHostName}s
 * @throws NullPointerException if {@code regex} is{@code null}
 * @throws java.util.regex.PatternSyntaxException if the regular expression'ssyntax is invalid
 */
public static SNIMatcher createSNIMatcher(String regex){
  if (regex == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return new SNIHostNameMatcher(regex);
}"
77349,"/** 
 * Returns the last access time of the entry. <p> The last access time is from the extended timestamp fields of entry's   {@code optional extra data} when read from a ZIP fileor ZIP file formatted stream.
 * @return The last access time of the entry, null if not specified
 * @see #setLastAccessTime(long)
 * @since 1.8
 */
public FileTime getLastAccessTime(){
  return atime;
}","/** 
 * Returns the last access time of the entry. <p> The last access time is from the extended timestamp fields of entry's   {@code optional extra data} when read from a ZIP fileor ZIP file formatted stream.
 * @return The last access time of the entry, null if not specified
 * @see #setLastAccessTime(FileTime)
 * @since 1.8
 */
public FileTime getLastAccessTime(){
  return atime;
}"
77350,"/** 
 * Returns the AccessibleContext associated with this object.  In most cases, the return value should not be null if the object implements interface Accessible.  If a component developer creates a subclass of an object that implements Accessible, and that subclass is not Accessible, the developer should override the getAccessibleContext method to return null.
 */
public AccessibleContext getAccessibleContext();","/** 
 * Returns the AccessibleContext associated with this object.  In most cases, the return value should not be null if the object implements interface Accessible.  If a component developer creates a subclass of an object that implements Accessible, and that subclass is not Accessible, the developer should override the getAccessibleContext method to return null.
 * @return the AccessibleContext associated with this object
 */
public AccessibleContext getAccessibleContext();"
77351,"public AccessibleBundle(){
}","/** 
 * Construct an   {@code AccessibleBundle}.
 */
public AccessibleBundle(){
}"
77352,"public int getAccessibleIndex(int r,int c);","/** 
 * Returns the index at a row and column in the table.
 * @param r zero-based row of the table
 * @param c zero-based column of the table
 * @return the zero-based index in the table if one exists;otherwise -1.  The index is  the table cell offset from row == 0 and column == 0.
 */
public int getAccessibleIndex(int r,int c);"
77353,"/** 
 * Returns the number of relations in the relation set.
 */
public int size(){
  if (relations == null) {
    return 0;
  }
 else {
    return relations.size();
  }
}","/** 
 * Returns the number of relations in the relation set.
 * @return the number of relations in the relation set
 */
public int size(){
  if (relations == null) {
    return 0;
  }
 else {
    return relations.size();
  }
}"
77354,"/** 
 * Returns the number of rows occupied by the Accessible at a specified row and column in the table.
 * @return the number of rows occupied by the Accessible at agiven specified (row, column)
 */
public int getAccessibleRowExtentAt(int r,int c);","/** 
 * Returns the number of rows occupied by the Accessible at a specified row and column in the table.
 * @param r zero-based row of the table
 * @param c zero-based column of the table
 * @return the number of rows occupied by the Accessible at agiven specified (row, column)
 */
public int getAccessibleRowExtentAt(int r,int c);"
77355,"/** 
 * Returns the number of columns occupied by the Accessible at a specified row and column in the table.
 * @return the number of columns occupied by the Accessible at agiven specified row and column
 */
public int getAccessibleColumnExtentAt(int r,int c);","/** 
 * Returns the number of columns occupied by the Accessible at a specified row and column in the table.
 * @param r zero-based row of the table
 * @param c zero-based column of the table
 * @return the number of columns occupied by the Accessible at agiven specified row and column
 */
public int getAccessibleColumnExtentAt(int r,int c);"
77356,"/** 
 * Returns the last row that changed.
 */
public int getLastRow();","/** 
 * Returns the last row that changed.
 * @return the last row that changed
 */
public int getLastRow();"
77357,"/** 
 * Returns the first row that changed.
 */
public int getFirstRow();","/** 
 * Returns the first row that changed.
 * @return the first row that changed
 */
public int getFirstRow();"
77358,"/** 
 * Returns the type of event
 * @see #INSERT
 * @see #UPDATE
 * @see #DELETE
 */
public int getType();","/** 
 * Returns the type of event.
 * @return the type of event
 * @see #INSERT
 * @see #UPDATE
 * @see #DELETE
 */
public int getType();"
77359,"/** 
 * Returns the last column that changed.
 */
public int getLastColumn();","/** 
 * Returns the last column that changed.
 * @return the last column that changed
 */
public int getLastColumn();"
77360,"/** 
 * Returns the first column that changed.
 */
public int getFirstColumn();","/** 
 * Returns the first column that changed.
 * @return the first column that changed
 */
public int getFirstColumn();"
77361,"/** 
 * Set the value of this object as a Number.
 * @return True if the value was set; else False
 * @see #getCurrentAccessibleValue
 */
public boolean setCurrentAccessibleValue(Number n);","/** 
 * Set the value of this object as a Number.
 * @param n the number to use for the value
 * @return True if the value was set; else False
 * @see #getCurrentAccessibleValue
 */
public boolean setCurrentAccessibleValue(Number n);"
77362,"public MalformedInputException(int inputLength){
  this.inputLength=inputLength;
}","/** 
 * Constructs an   {@code MalformedInputException} with the givenlength.
 * @param inputLength the length of the input
 */
public MalformedInputException(int inputLength){
  this.inputLength=inputLength;
}"
77363,"public int getInputLength(){
  return inputLength;
}","/** 
 * Returns the length of the input.
 * @return the length of the input
 */
public int getInputLength(){
  return inputLength;
}"
77364,"public String getMessage(){
  return ""String_Node_Str"" + inputLength;
}","/** 
 * Returns the message.
 * @return the message
 */
public String getMessage(){
  return ""String_Node_Str"" + inputLength;
}"
77365,"public UnmappableCharacterException(int inputLength){
  this.inputLength=inputLength;
}","/** 
 * Constructs an   {@code UnmappableCharacterException} with thegiven length.
 * @param inputLength the length of the input
 */
public UnmappableCharacterException(int inputLength){
  this.inputLength=inputLength;
}"
77366,"public int getInputLength(){
  return inputLength;
}","/** 
 * Returns the length of the input.
 * @return the length of the input
 */
public int getInputLength(){
  return inputLength;
}"
77367,"public String getMessage(){
  return ""String_Node_Str"" + inputLength;
}","/** 
 * Returns the message.
 * @return the message
 */
public String getMessage(){
  return ""String_Node_Str"" + inputLength;
}"
77368,"/** 
 * Provide a way for subclasses that are completely reimplementing ObjectInputStream to not have to allocate private data just used by this implementation of ObjectInputStream. <p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with the <code>SerializablePermission(""enableSubclassImplementation"")</code> permission to ensure it's ok to enable subclassing.
 * @throws SecurityException if a security manager exists and its<code>checkPermission</code> method denies enabling subclassing.
 * @see SecurityManager#checkPermission
 * @see java.io.SerializablePermission
 */
protected ObjectInputStream() throws IOException, SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
  }
  bin=null;
  handles=null;
  vlist=null;
  enableOverride=true;
}","/** 
 * Provide a way for subclasses that are completely reimplementing ObjectInputStream to not have to allocate private data just used by this implementation of ObjectInputStream. <p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with the <code>SerializablePermission(""enableSubclassImplementation"")</code> permission to ensure it's ok to enable subclassing.
 * @throws SecurityException if a security manager exists and its<code>checkPermission</code> method denies enabling subclassing.
 * @throws IOException if an I/O error occurs while creating this stream
 * @see SecurityManager#checkPermission
 * @see java.io.SerializablePermission
 */
protected ObjectInputStream() throws IOException, SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
  }
  bin=null;
  handles=null;
  vlist=null;
  enableOverride=true;
}"
77369,"/** 
 * Provide a way for subclasses that are completely reimplementing ObjectOutputStream to not have to allocate private data just used by this implementation of ObjectOutputStream. <p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with a <code>SerializablePermission(""enableSubclassImplementation"")</code> permission to ensure it's ok to enable subclassing.
 * @throws SecurityException if a security manager exists and its<code>checkPermission</code> method denies enabling subclassing.
 * @see SecurityManager#checkPermission
 * @see java.io.SerializablePermission
 */
protected ObjectOutputStream() throws IOException, SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
  }
  bout=null;
  handles=null;
  subs=null;
  enableOverride=true;
  debugInfoStack=null;
}","/** 
 * Provide a way for subclasses that are completely reimplementing ObjectOutputStream to not have to allocate private data just used by this implementation of ObjectOutputStream. <p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with a <code>SerializablePermission(""enableSubclassImplementation"")</code> permission to ensure it's ok to enable subclassing.
 * @throws SecurityException if a security manager exists and its<code>checkPermission</code> method denies enabling subclassing.
 * @throws IOException if an I/O error occurs while creating this stream
 * @see SecurityManager#checkPermission
 * @see java.io.SerializablePermission
 */
protected ObjectOutputStream() throws IOException, SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
  }
  bout=null;
  handles=null;
  subs=null;
  enableOverride=true;
  debugInfoStack=null;
}"
77370,"/** 
 * Returns the <code>Manifest</code> <code>Attributes</code> for this entry, or <code>null</code> if none.
 * @return the <code>Manifest</code> <code>Attributes</code> for thisentry, or <code>null</code> if none
 */
public Attributes getAttributes() throws IOException {
  return attr;
}","/** 
 * Returns the <code>Manifest</code> <code>Attributes</code> for this entry, or <code>null</code> if none.
 * @return the <code>Manifest</code> <code>Attributes</code> for thisentry, or <code>null</code> if none
 * @throws IOException  if an I/O error has occurred
 */
public Attributes getAttributes() throws IOException {
  return attr;
}"
77371,"/** 
 * Returns the jar file manifest, or <code>null</code> if none.
 * @return the jar file manifest, or <code>null</code> if none
 * @throws IllegalStateException may be thrown if the jar file has been closed
 */
public Manifest getManifest() throws IOException {
  return getManifestFromReference();
}","/** 
 * Returns the jar file manifest, or <code>null</code> if none.
 * @return the jar file manifest, or <code>null</code> if none
 * @throws IllegalStateException may be thrown if the jar file has been closed
 * @throws IOException  if an I/O error has occurred
 */
public Manifest getManifest() throws IOException {
  return getManifestFromReference();
}"
77372,"/** 
 * Creates a new sequential or parallel   {@code Stream} from a{@code Supplier} of {@code Spliterator}. <p>The   {@link Supplier#get()} method will be invoked on the supplier nomore than once, and after the terminal operation of the stream pipeline commences. <p>For spliterators that report a characteristic of  {@code IMMUTABLE}or   {@code CONCURRENT}, or that are <a href=""../Spliterator.html#binding"">late-binding</a>, it is likely more efficient to use   {@link #stream(java.util.Spliterator,boolean)}instead. The use of a   {@code Supplier} in this form provides a level ofindirection that reduces the scope of potential interference with the source.  Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result.  See <a href=""package-summary.html#Non-Interference"">Non-Interference</a> for more details.
 * @param supplier a {@code Supplier} of a {@code Spliterator}
 * @param characteristics Spliterator characteristics of the supplied{@code Spliterator}.  The characteristics must be equal to  {@code supplier.get().characteristics()}.
 * @param parallel if {@code true} then the returned stream is a parallelstream; if  {@code false} the returned stream is a sequentialstream.
 * @return a new sequential or parallel {@code Stream}
 * @see #stream(java.util.Spliterator,boolean)
 */
public static <T>Stream<T> stream(Supplier<? extends Spliterator<T>> supplier,int characteristics,boolean parallel){
  Objects.requireNonNull(supplier);
  return new ReferencePipeline.Head<>(supplier,StreamOpFlag.fromCharacteristics(characteristics),parallel);
}","/** 
 * Creates a new sequential or parallel   {@code Stream} from a{@code Supplier} of {@code Spliterator}. <p>The   {@link Supplier#get()} method will be invoked on the supplier nomore than once, and after the terminal operation of the stream pipeline commences. <p>For spliterators that report a characteristic of  {@code IMMUTABLE}or   {@code CONCURRENT}, or that are <a href=""../Spliterator.html#binding"">late-binding</a>, it is likely more efficient to use   {@link #stream(java.util.Spliterator,boolean)}instead. The use of a   {@code Supplier} in this form provides a level ofindirection that reduces the scope of potential interference with the source.  Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result.  See <a href=""package-summary.html#Non-Interference"">Non-Interference</a> for more details.
 * @param < T > the type of stream elements
 * @param supplier a {@code Supplier} of a {@code Spliterator}
 * @param characteristics Spliterator characteristics of the supplied{@code Spliterator}.  The characteristics must be equal to  {@code supplier.get().characteristics()}.
 * @param parallel if {@code true} then the returned stream is a parallelstream; if  {@code false} the returned stream is a sequentialstream.
 * @return a new sequential or parallel {@code Stream}
 * @see #stream(java.util.Spliterator,boolean)
 */
public static <T>Stream<T> stream(Supplier<? extends Spliterator<T>> supplier,int characteristics,boolean parallel){
  Objects.requireNonNull(supplier);
  return new ReferencePipeline.Head<>(supplier,StreamOpFlag.fromCharacteristics(characteristics),parallel);
}"
77373,"/** 
 * Returns a   {@code RunnableFuture} for the given callable task.
 * @param callable the callable task being wrapped
 * @return a {@code RunnableFuture} which, when run, will call theunderlying callable and which, as a  {@code Future}, will yield the callable's result as its result and provide for cancellation of the underlying task
 * @since 1.6
 */
protected <T>RunnableFuture<T> newTaskFor(Callable<T> callable){
  return new FutureTask<T>(callable);
}","/** 
 * Returns a   {@code RunnableFuture} for the given callable task.
 * @param callable the callable task being wrapped
 * @param < T > the type of the callable's result
 * @return a {@code RunnableFuture} which, when run, will call theunderlying callable and which, as a  {@code Future}, will yield the callable's result as its result and provide for cancellation of the underlying task
 * @since 1.6
 */
protected <T>RunnableFuture<T> newTaskFor(Callable<T> callable){
  return new FutureTask<T>(callable);
}"
77374,"/** 
 * Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.  {@link Future#isDone} is {@code true} for eachelement of the returned list. Upon return, tasks that have not completed are cancelled. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.
 * @param tasks the collection of tasks
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @return a list of Futures representing the tasks, in the samesequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed.
 * @throws InterruptedException if interrupted while waiting, inwhich case unfinished tasks are cancelled
 * @throws NullPointerException if tasks, any of its elements, orunit are  {@code null}
 * @throws RejectedExecutionException if any task cannot be scheduledfor execution
 */
<T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException ;","/** 
 * Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.  {@link Future#isDone} is {@code true} for eachelement of the returned list. Upon return, tasks that have not completed are cancelled. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.
 * @param tasks the collection of tasks
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @param < T > the type of the values returned from the tasks
 * @return a list of Futures representing the tasks, in the samesequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed.
 * @throws InterruptedException if interrupted while waiting, inwhich case unfinished tasks are cancelled
 * @throws NullPointerException if tasks, any of its elements, orunit are  {@code null}
 * @throws RejectedExecutionException if any task cannot be scheduledfor execution
 */
<T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException ;"
77375,"/** 
 * Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.
 * @param tasks the collection of tasks
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @return the result returned by one of the tasks
 * @throws InterruptedException if interrupted while waiting
 * @throws NullPointerException if tasks, or unit, or any elementtask subject to execution is  {@code null}
 * @throws TimeoutException if the given timeout elapses beforeany task successfully completes
 * @throws ExecutionException if no task successfully completes
 * @throws RejectedExecutionException if tasks cannot be scheduledfor execution
 */
<T>T invokeAny(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException ;","/** 
 * Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.
 * @param tasks the collection of tasks
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @param < T > the type of the values returned from the tasks
 * @return the result returned by one of the tasks
 * @throws InterruptedException if interrupted while waiting
 * @throws NullPointerException if tasks, or unit, or any elementtask subject to execution is  {@code null}
 * @throws TimeoutException if the given timeout elapses beforeany task successfully completes
 * @throws ExecutionException if no task successfully completes
 * @throws RejectedExecutionException if tasks cannot be scheduledfor execution
 */
<T>T invokeAny(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException ;"
77376,"/** 
 * Returns a   {@link Callable} object that will, when called,execute the given  {@code callable} under the current accesscontrol context, with the current context class loader as the context class loader. This method should normally be invoked within an {@link AccessController#doPrivileged AccessController.doPrivileged}action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated   {@link AccessControlException}.
 * @param callable the underlying task
 * @return a callable object
 * @throws NullPointerException if callable null
 * @throws AccessControlException if the current access controlcontext does not have permission to both set and get context class loader
 */
public static <T>Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable){
  if (callable == null)   throw new NullPointerException();
  return new PrivilegedCallableUsingCurrentClassLoader<T>(callable);
}","/** 
 * Returns a   {@link Callable} object that will, when called,execute the given  {@code callable} under the current accesscontrol context, with the current context class loader as the context class loader. This method should normally be invoked within an {@link AccessController#doPrivileged AccessController.doPrivileged}action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated   {@link AccessControlException}.
 * @param callable the underlying task
 * @param < T > the type of the callable's result
 * @return a callable object
 * @throws NullPointerException if callable null
 * @throws AccessControlException if the current access controlcontext does not have permission to both set and get context class loader
 */
public static <T>Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable){
  if (callable == null)   throw new NullPointerException();
  return new PrivilegedCallableUsingCurrentClassLoader<T>(callable);
}"
77377,"/** 
 * Returns a   {@link Callable} object that will, when called,execute the given  {@code callable} under the current accesscontrol context. This method should normally be invoked within an  {@link AccessController#doPrivileged AccessController.doPrivileged}action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated   {@link AccessControlException}.
 * @param callable the underlying task
 * @return a callable object
 * @throws NullPointerException if callable null
 */
public static <T>Callable<T> privilegedCallable(Callable<T> callable){
  if (callable == null)   throw new NullPointerException();
  return new PrivilegedCallable<T>(callable);
}","/** 
 * Returns a   {@link Callable} object that will, when called,execute the given  {@code callable} under the current accesscontrol context. This method should normally be invoked within an  {@link AccessController#doPrivileged AccessController.doPrivileged}action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated   {@link AccessControlException}.
 * @param callable the underlying task
 * @param < T > the type of the callable's result
 * @return a callable object
 * @throws NullPointerException if callable null
 */
public static <T>Callable<T> privilegedCallable(Callable<T> callable){
  if (callable == null)   throw new NullPointerException();
  return new PrivilegedCallable<T>(callable);
}"
77378,"/** 
 * Performs the given task, returning its result upon completion. If the computation encounters an unchecked Exception or Error, it is rethrown as the outcome of this invocation.  Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using   {@code ex.printStackTrace()}) of both the current thread as well as the thread actually encountering the exception; minimally only the latter.
 * @param task the task
 * @return the task's result
 * @throws NullPointerException if the task is null
 * @throws RejectedExecutionException if the task cannot bescheduled for execution
 */
public <T>T invoke(ForkJoinTask<T> task){
  if (task == null)   throw new NullPointerException();
  externalPush(task);
  return task.join();
}","/** 
 * Performs the given task, returning its result upon completion. If the computation encounters an unchecked Exception or Error, it is rethrown as the outcome of this invocation.  Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using   {@code ex.printStackTrace()}) of both the current thread as well as the thread actually encountering the exception; minimally only the latter.
 * @param task the task
 * @param < T > the type of the task's result
 * @return the task's result
 * @throws NullPointerException if the task is null
 * @throws RejectedExecutionException if the task cannot bescheduled for execution
 */
public <T>T invoke(ForkJoinTask<T> task){
  if (task == null)   throw new NullPointerException();
  externalPush(task);
  return task.join();
}"
77379,"/** 
 * Saves this task to a stream (that is, serializes it).
 * @serialData the current run status and the exception thrownduring execution, or  {@code null} if none
 */
private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeObject(getException());
}","/** 
 * Saves this task to a stream (that is, serializes it).
 * @param s the stream
 * @throws java.io.IOException if an I/O error occurs
 * @serialData the current run status and the exception thrownduring execution, or  {@code null} if none
 */
private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeObject(getException());
}"
77380,"/** 
 * Returns a new   {@code ForkJoinTask} that performs the {@code call}method of the given   {@code Callable} as its action, and returnsits result upon  {@link #join}, translating any checked exceptions encountered into   {@code RuntimeException}.
 * @param callable the callable action
 * @return the task
 */
public static <T>ForkJoinTask<T> adapt(Callable<? extends T> callable){
  return new AdaptedCallable<T>(callable);
}","/** 
 * Returns a new   {@code ForkJoinTask} that performs the {@code call}method of the given   {@code Callable} as its action, and returnsits result upon  {@link #join}, translating any checked exceptions encountered into   {@code RuntimeException}.
 * @param callable the callable action
 * @param < T > the type of the callable's result
 * @return the task
 */
public static <T>ForkJoinTask<T> adapt(Callable<? extends T> callable){
  return new AdaptedCallable<T>(callable);
}"
77381,"/** 
 * Reconstitutes this task from a stream (that is, deserializes it).
 */
private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  Object ex=s.readObject();
  if (ex != null)   setExceptionalCompletion((Throwable)ex);
}","/** 
 * Reconstitutes this task from a stream (that is, deserializes it).
 * @param s the stream
 * @throws ClassNotFoundException if the class of a serialized objectcould not be found
 * @throws java.io.IOException if an I/O error occurs
 */
private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  Object ex=s.readObject();
  if (ex != null)   setExceptionalCompletion((Throwable)ex);
}"
77382,"/** 
 * Forks all tasks in the specified collection, returning when  {@code isDone} holds for each task or an (unchecked) exceptionis encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using  {@link #getException()} and related methods to check if they have beencancelled, completed normally or exceptionally, or left unprocessed.
 * @param tasks the collection of tasks
 * @return the tasks argument, to simplify usage
 * @throws NullPointerException if tasks or any element are null
 */
public static <T extends ForkJoinTask<?>>Collection<T> invokeAll(Collection<T> tasks){
  if (!(tasks instanceof RandomAccess) || !(tasks instanceof List<?>)) {
    invokeAll(tasks.toArray(new ForkJoinTask<?>[tasks.size()]));
    return tasks;
  }
  @SuppressWarnings(""String_Node_Str"") List<? extends ForkJoinTask<?>> ts=(List<? extends ForkJoinTask<?>>)tasks;
  Throwable ex=null;
  int last=ts.size() - 1;
  for (int i=last; i >= 0; --i) {
    ForkJoinTask<?> t=ts.get(i);
    if (t == null) {
      if (ex == null)       ex=new NullPointerException();
    }
 else     if (i != 0)     t.fork();
 else     if (t.doInvoke() < NORMAL && ex == null)     ex=t.getException();
  }
  for (int i=1; i <= last; ++i) {
    ForkJoinTask<?> t=ts.get(i);
    if (t != null) {
      if (ex != null)       t.cancel(false);
 else       if (t.doJoin() < NORMAL)       ex=t.getException();
    }
  }
  if (ex != null)   rethrow(ex);
  return tasks;
}","/** 
 * Forks all tasks in the specified collection, returning when  {@code isDone} holds for each task or an (unchecked) exceptionis encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using  {@link #getException()} and related methods to check if they have beencancelled, completed normally or exceptionally, or left unprocessed.
 * @param tasks the collection of tasks
 * @param < T > the type of the values returned from the tasks
 * @return the tasks argument, to simplify usage
 * @throws NullPointerException if tasks or any element are null
 */
public static <T extends ForkJoinTask<?>>Collection<T> invokeAll(Collection<T> tasks){
  if (!(tasks instanceof RandomAccess) || !(tasks instanceof List<?>)) {
    invokeAll(tasks.toArray(new ForkJoinTask<?>[tasks.size()]));
    return tasks;
  }
  @SuppressWarnings(""String_Node_Str"") List<? extends ForkJoinTask<?>> ts=(List<? extends ForkJoinTask<?>>)tasks;
  Throwable ex=null;
  int last=ts.size() - 1;
  for (int i=last; i >= 0; --i) {
    ForkJoinTask<?> t=ts.get(i);
    if (t == null) {
      if (ex == null)       ex=new NullPointerException();
    }
 else     if (i != 0)     t.fork();
 else     if (t.doInvoke() < NORMAL && ex == null)     ex=t.getException();
  }
  for (int i=1; i <= last; ++i) {
    ForkJoinTask<?> t=ts.get(i);
    if (t != null) {
      if (ex != null)       t.cancel(false);
 else       if (t.doJoin() < NORMAL)       ex=t.getException();
    }
  }
  if (ex != null)   rethrow(ex);
  return tasks;
}"
77383,"/** 
 * Creates and executes a ScheduledFuture that becomes enabled after the given delay.
 * @param callable the function to execute
 * @param delay the time from now to delay execution
 * @param unit the time unit of the delay parameter
 * @return a ScheduledFuture that can be used to extract result or cancel
 * @throws RejectedExecutionException if the task cannot bescheduled for execution
 * @throws NullPointerException if callable is null
 */
public <V>ScheduledFuture<V> schedule(Callable<V> callable,long delay,TimeUnit unit);","/** 
 * Creates and executes a ScheduledFuture that becomes enabled after the given delay.
 * @param callable the function to execute
 * @param delay the time from now to delay execution
 * @param unit the time unit of the delay parameter
 * @param < V > the type of the callable's result
 * @return a ScheduledFuture that can be used to extract result or cancel
 * @throws RejectedExecutionException if the task cannot bescheduled for execution
 * @throws NullPointerException if callable is null
 */
public <V>ScheduledFuture<V> schedule(Callable<V> callable,long delay,TimeUnit unit);"
77384,"/** 
 * Modifies or replaces the task used to execute a callable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.
 * @param callable the submitted Callable
 * @param task the task created to execute the callable
 * @return a task that can execute the callable
 * @since 1.6
 */
protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){
  return task;
}","/** 
 * Modifies or replaces the task used to execute a callable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.
 * @param callable the submitted Callable
 * @param task the task created to execute the callable
 * @param < V > the type of the task's result
 * @return a task that can execute the callable
 * @since 1.6
 */
protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){
  return task;
}"
77385,"/** 
 * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param fieldName the name of the field to be updated
 * @return the updater
 * @throws IllegalArgumentException if the field is not avolatile integer type
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U>AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  return new AtomicIntegerFieldUpdaterImpl<U>(tclass,fieldName,Reflection.getCallerClass());
}","/** 
 * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param fieldName the name of the field to be updated
 * @param < U > the type of instances of tclass
 * @return the updater
 * @throws IllegalArgumentException if the field is not avolatile integer type
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U>AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  return new AtomicIntegerFieldUpdaterImpl<U>(tclass,fieldName,Reflection.getCallerClass());
}"
77386,"/** 
 * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param fieldName the name of the field to be updated
 * @return the updater
 * @throws IllegalArgumentException if the field is not avolatile long type
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U>AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  Class<?> caller=Reflection.getCallerClass();
  if (AtomicLong.VM_SUPPORTS_LONG_CAS)   return new CASUpdater<U>(tclass,fieldName,caller);
 else   return new LockedUpdater<U>(tclass,fieldName,caller);
}","/** 
 * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param fieldName the name of the field to be updated
 * @param < U > the type of instances of tclass
 * @return the updater
 * @throws IllegalArgumentException if the field is not avolatile long type
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U>AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  Class<?> caller=Reflection.getCallerClass();
  if (AtomicLong.VM_SUPPORTS_LONG_CAS)   return new CASUpdater<U>(tclass,fieldName,caller);
 else   return new LockedUpdater<U>(tclass,fieldName,caller);
}"
77387,"/** 
 * Creates and returns an updater for objects with the given field. The Class arguments are needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param vclass the class of the field
 * @param fieldName the name of the field to be updated
 * @return the updater
 * @throws ClassCastException if the field is of the wrong type
 * @throws IllegalArgumentException if the field is not volatile
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U,W>AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,Class<W> vclass,String fieldName){
  return new AtomicReferenceFieldUpdaterImpl<U,W>(tclass,vclass,fieldName,Reflection.getCallerClass());
}","/** 
 * Creates and returns an updater for objects with the given field. The Class arguments are needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param vclass the class of the field
 * @param fieldName the name of the field to be updated
 * @param < U > the type of instances of tclass
 * @param < W > the type of instances of vclass
 * @return the updater
 * @throws ClassCastException if the field is of the wrong type
 * @throws IllegalArgumentException if the field is not volatile
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U,W>AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,Class<W> vclass,String fieldName){
  return new AtomicReferenceFieldUpdaterImpl<U,W>(tclass,vclass,fieldName,Reflection.getCallerClass());
}"
77388,"/** 
 * Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.
 * @since 1.4
 */
public boolean isUnshared(){
  return unshared;
}","/** 
 * Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.
 * @return {@code true} if this field is unshared
 * @since 1.4
 */
public boolean isUnshared(){
  return unshared;
}"
77389,"/** 
 * Creates a random access file stream to read from, and optionally to write to, the file specified by the   {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.<p>The <a name=""mode""><tt>mode</tt></a> argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: <table summary=""Access mode permitted values and meanings""> <tr><th><p align=""left"">Value</p></th><th><p align=""left"">Meaning</p></th></tr> <tr><td valign=""top""><tt>""r""</tt></td> <td> Open for reading only.  Invoking any of the <tt>write</tt> methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. </td></tr><tr><td valign=""top""><tt>""rw""</tt></td> <td> Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. </td></tr> <tr><td valign=""top""><tt>""rws""</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device.  </td></tr> <tr><td valign=""top""><tt>""rwd""&nbsp;&nbsp;</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content be written synchronously to the underlying storage device. </td></tr> </table> The <tt>""rws""</tt> and <tt>""rwd""</tt> modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of<tt>true</tt> and <tt>false</tt>, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. <p>The <tt>""rwd""</tt> mode can be used to reduce the number of I/O operations performed.  Using <tt>""rwd""</tt> only requires updates to the file's content to be written to storage; using <tt>""rws""</tt> requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. <p>If there is a security manager, its  {@code checkRead} method iscalled with the pathname of the  {@code file} argument as itsargument to see if read access to the file is allowed.  If the mode allows writing, the security manager's  {@code checkWrite} method isalso called with the path argument to see if write access to the file is allowed.
 * @param file   the file object
 * @param mode   the access mode, as described<a href=""#mode"">above</a>
 * @exception IllegalArgumentException  if the mode argument is not equalto one of <tt>""r""</tt>, <tt>""rw""</tt>, <tt>""rws""</tt>, or <tt>""rwd""</tt>
 * @exception FileNotFoundException if the mode is <tt>""r""</tt> but the given file object does not denote an existing regular file, or if the mode begins with <tt>""rw""</tt> but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
 * @exception SecurityException         if a security manager exists and its{@code checkRead} method denies read access to the fileor the mode is ""rw"" and the security manager's {@code checkWrite} method denies write access to the file
 * @see java.lang.SecurityManager#checkRead(java.lang.String)
 * @see java.lang.SecurityManager#checkWrite(java.lang.String)
 * @see java.nio.channels.FileChannel#force(boolean)
 * @revised 1.4
 * @spec JSR-51
 */
public RandomAccessFile(File file,String mode) throws FileNotFoundException {
  String name=(file != null ? file.getPath() : null);
  int imode=-1;
  if (mode.equals(""String_Node_Str""))   imode=O_RDONLY;
 else   if (mode.startsWith(""String_Node_Str"")) {
    imode=O_RDWR;
    rw=true;
    if (mode.length() > 2) {
      if (mode.equals(""String_Node_Str""))       imode|=O_SYNC;
 else       if (mode.equals(""String_Node_Str""))       imode|=O_DSYNC;
 else       imode=-1;
    }
  }
  if (imode < 0)   throw new IllegalArgumentException(""String_Node_Str"" + mode + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  SecurityManager security=System.getSecurityManager();
  if (security != null) {
    security.checkRead(name);
    if (rw) {
      security.checkWrite(name);
    }
  }
  if (name == null) {
    throw new NullPointerException();
  }
  if (file.isInvalid()) {
    throw new FileNotFoundException(""String_Node_Str"");
  }
  fd=new FileDescriptor();
  fd.attach(this);
  open(name,imode);
}","/** 
 * Creates a random access file stream to read from, and optionally to write to, the file specified by the   {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.<p>The <a name=""mode""><tt>mode</tt></a> argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: <table summary=""Access mode permitted values and meanings""> <tr><th align=""left"">Value</th><th align=""left"">Meaning</th></tr> <tr><td valign=""top""><tt>""r""</tt></td> <td> Open for reading only.  Invoking any of the <tt>write</tt> methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. </td></tr><tr><td valign=""top""><tt>""rw""</tt></td> <td> Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. </td></tr> <tr><td valign=""top""><tt>""rws""</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device.  </td></tr> <tr><td valign=""top""><tt>""rwd""&nbsp;&nbsp;</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content be written synchronously to the underlying storage device. </td></tr> </table> The <tt>""rws""</tt> and <tt>""rwd""</tt> modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of<tt>true</tt> and <tt>false</tt>, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. <p>The <tt>""rwd""</tt> mode can be used to reduce the number of I/O operations performed.  Using <tt>""rwd""</tt> only requires updates to the file's content to be written to storage; using <tt>""rws""</tt> requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. <p>If there is a security manager, its  {@code checkRead} method iscalled with the pathname of the  {@code file} argument as itsargument to see if read access to the file is allowed.  If the mode allows writing, the security manager's  {@code checkWrite} method isalso called with the path argument to see if write access to the file is allowed.
 * @param file   the file object
 * @param mode   the access mode, as described<a href=""#mode"">above</a>
 * @exception IllegalArgumentException  if the mode argument is not equalto one of <tt>""r""</tt>, <tt>""rw""</tt>, <tt>""rws""</tt>, or <tt>""rwd""</tt>
 * @exception FileNotFoundException if the mode is <tt>""r""</tt> but the given file object does not denote an existing regular file, or if the mode begins with <tt>""rw""</tt> but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
 * @exception SecurityException         if a security manager exists and its{@code checkRead} method denies read access to the fileor the mode is ""rw"" and the security manager's {@code checkWrite} method denies write access to the file
 * @see java.lang.SecurityManager#checkRead(java.lang.String)
 * @see java.lang.SecurityManager#checkWrite(java.lang.String)
 * @see java.nio.channels.FileChannel#force(boolean)
 * @revised 1.4
 * @spec JSR-51
 */
public RandomAccessFile(File file,String mode) throws FileNotFoundException {
  String name=(file != null ? file.getPath() : null);
  int imode=-1;
  if (mode.equals(""String_Node_Str""))   imode=O_RDONLY;
 else   if (mode.startsWith(""String_Node_Str"")) {
    imode=O_RDWR;
    rw=true;
    if (mode.length() > 2) {
      if (mode.equals(""String_Node_Str""))       imode|=O_SYNC;
 else       if (mode.equals(""String_Node_Str""))       imode|=O_DSYNC;
 else       imode=-1;
    }
  }
  if (imode < 0)   throw new IllegalArgumentException(""String_Node_Str"" + mode + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  SecurityManager security=System.getSecurityManager();
  if (security != null) {
    security.checkRead(name);
    if (rw) {
      security.checkWrite(name);
    }
  }
  if (name == null) {
    throw new NullPointerException();
  }
  if (file.isInvalid()) {
    throw new FileNotFoundException(""String_Node_Str"");
  }
  fd=new FileDescriptor();
  fd.attach(this);
  open(name,imode);
}"
77390,"/** 
 * Returns   {@code true} if this Spliterator's {@link #characteristics} contain all of the given characteristics.
 * @implSpec The default implementation returns true if the corresponding bits of the given characteristics are set.
 * @return {@code true} if all the specified characteristics are present,else  {@code false}
 */
default boolean hasCharacteristics(int characteristics){
  return (characteristics() & characteristics) == characteristics;
}","/** 
 * Returns   {@code true} if this Spliterator's {@link #characteristics} contain all of the given characteristics.
 * @implSpec The default implementation returns true if the corresponding bits of the given characteristics are set.
 * @param characteristics the characteristics to check for
 * @return {@code true} if all the specified characteristics are present,else  {@code false}
 */
default boolean hasCharacteristics(int characteristics){
  return (characteristics() & characteristics) == characteristics;
}"
77391,"/** 
 * Returns a   {@code LockInfo} object represented by thegiven  {@code CompositeData}. The given   {@code CompositeData} must contain the following attributes:<blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>className</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>identityHashCode</td> <td><tt>java.lang.Integer</tt></td> </tr> </table> </blockquote>
 * @param cd {@code CompositeData} representing a {@code LockInfo}
 * @throws IllegalArgumentException if {@code cd} does notrepresent a  {@code LockInfo} with the attributes describedabove.
 * @return a {@code LockInfo} object representedby  {@code cd} if {@code cd} is not {@code null};  {@code null} otherwise.
 * @since 1.8
 */
public static LockInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof LockInfoCompositeData) {
    return ((LockInfoCompositeData)cd).getLockInfo();
  }
 else {
    return LockInfoCompositeData.toLockInfo(cd);
  }
}","/** 
 * Returns a   {@code LockInfo} object represented by thegiven  {@code CompositeData}. The given   {@code CompositeData} must contain the following attributes:<blockquote> <table border summary=""The attributes and the types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>className</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>identityHashCode</td> <td><tt>java.lang.Integer</tt></td> </tr> </table> </blockquote>
 * @param cd {@code CompositeData} representing a {@code LockInfo}
 * @throws IllegalArgumentException if {@code cd} does notrepresent a  {@code LockInfo} with the attributes describedabove.
 * @return a {@code LockInfo} object representedby  {@code cd} if {@code cd} is not {@code null};  {@code null} otherwise.
 * @since 1.8
 */
public static LockInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof LockInfoCompositeData) {
    return ((LockInfoCompositeData)cd).getLockInfo();
  }
 else {
    return LockInfoCompositeData.toLockInfo(cd);
  }
}"
77392,"/** 
 * Returns the list of the platform MXBean proxies for forwarding the method calls of the   {@code mxbeanInterface}through the given   {@code MBeanServerConnection}. The returned list may contain zero, one, or more instances. The number of instances in the returned list is defined in the specification of the given management interface. The order is undefined and there is no guarantee that the list returned is in the same order as previous invocations.
 * @param connection the {@code MBeanServerConnection} to forward to.
 * @param mxbeanInterface a management interface for a platformMXBean
 * @return the list of platform MXBean proxies forforwarding the method calls of the  {@code mxbeanInterface}through the given   {@code MBeanServerConnection}.
 * @throws IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface.
 * @throws java.io.IOException if a communication problemoccurred when accessing the  {@code MBeanServerConnection}.
 * @see #newPlatformMXBeanProxy
 * @since 1.7
 */
public static <T extends PlatformManagedObject>List<T> getPlatformMXBeans(MBeanServerConnection connection,Class<T> mxbeanInterface) throws java.io.IOException {
  PlatformComponent pc=PlatformComponent.getPlatformComponent(mxbeanInterface);
  if (pc == null) {
    throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  }
  return Collections.unmodifiableList(pc.getMXBeans(connection,mxbeanInterface));
}","/** 
 * Returns the list of the platform MXBean proxies for forwarding the method calls of the   {@code mxbeanInterface}through the given   {@code MBeanServerConnection}. The returned list may contain zero, one, or more instances. The number of instances in the returned list is defined in the specification of the given management interface. The order is undefined and there is no guarantee that the list returned is in the same order as previous invocations.
 * @param connection the {@code MBeanServerConnection} to forward to.
 * @param mxbeanInterface a management interface for a platformMXBean
 * @param < T > an {@code mxbeanInterface} type parameter
 * @return the list of platform MXBean proxies forforwarding the method calls of the  {@code mxbeanInterface}through the given   {@code MBeanServerConnection}.
 * @throws IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface.
 * @throws java.io.IOException if a communication problemoccurred when accessing the  {@code MBeanServerConnection}.
 * @see #newPlatformMXBeanProxy
 * @since 1.7
 */
public static <T extends PlatformManagedObject>List<T> getPlatformMXBeans(MBeanServerConnection connection,Class<T> mxbeanInterface) throws java.io.IOException {
  PlatformComponent pc=PlatformComponent.getPlatformComponent(mxbeanInterface);
  if (pc == null) {
    throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  }
  return Collections.unmodifiableList(pc.getMXBeans(connection,mxbeanInterface));
}"
77393,"/** 
 * Returns a proxy for a platform MXBean interface of a given <a href=""#MXBeanNames"">MXBean name</a> that forwards its method calls through the given <tt>MBeanServerConnection</tt>. <p>This method is equivalent to: <blockquote>  {@link java.lang.reflect.Proxy#newProxyInstance Proxy.newProxyInstance}<tt>(mxbeanInterface.getClassLoader(), new Class[] { mxbeanInterface }, handler)</tt> </blockquote> where <tt>handler</tt> is an   {@link java.lang.reflect.InvocationHandler InvocationHandler} to which method invocations to the MXBean interfaceare dispatched. This <tt>handler</tt> converts an input parameter from an MXBean data type to its mapped open type before forwarding to the <tt>MBeanServer</tt> and converts a return value from an MXBean method call through the <tt>MBeanServer</tt> from an open type to the corresponding return type declared in the MXBean interface. <p> If the MXBean is a notification emitter (i.e., it implements {@link javax.management.NotificationEmitter NotificationEmitter}), both the <tt>mxbeanInterface</tt> and <tt>NotificationEmitter</tt> will be implemented by this proxy. <p> <b>Notes:</b> <ol> <li>Using an MXBean proxy is a convenience remote access to a platform MXBean of a running virtual machine.  All method calls to the MXBean proxy are forwarded to an <tt>MBeanServerConnection</tt> where  {@link java.io.IOException IOException} may be thrownwhen the communication problem occurs with the connector server. An application remotely accesses the platform MXBeans using proxy should prepare to catch <tt>IOException</tt> as if accessing with the <tt>MBeanServerConnector</tt> interface.</li> <li>When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch {@link java.io.InvalidObjectException InvalidObjectException}which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application. </li> <li>  {@link javax.management.MBeanServerInvocationHandler MBeanServerInvocationHandler} or its{@link javax.management.MBeanServerInvocationHandler#newProxyInstance newProxyInstance} method cannot be used to createa proxy for a platform MXBean. The proxy object created by <tt>MBeanServerInvocationHandler</tt> does not handle the properties of the platform MXBeans described in the <a href=""#MXBean"">class specification</a>. </li> </ol>
 * @param connection the <tt>MBeanServerConnection</tt> to forward to.
 * @param mxbeanName the name of a platform MXBean within<tt>connection</tt> to forward to. <tt>mxbeanName</tt> must be in the format of  {@link ObjectName ObjectName}.
 * @param mxbeanInterface the MXBean interface to be implementedby the proxy.
 * @throws IllegalArgumentException if<ul> <li><tt>mxbeanName</tt> is not with a valid {@link ObjectName ObjectName} format, or</li><li>the named MXBean in the <tt>connection</tt> is not a MXBean provided by the platform, or</li> <li>the named MXBean is not registered in the <tt>MBeanServerConnection</tt>, or</li> <li>the named MXBean is not an instance of the given <tt>mxbeanInterface</tt></li> </ul>
 * @throws java.io.IOException if a communication problemoccurred when accessing the <tt>MBeanServerConnection</tt>.
 */
public static <T>T newPlatformMXBeanProxy(MBeanServerConnection connection,String mxbeanName,Class<T> mxbeanInterface) throws java.io.IOException {
  final Class<?> cls=mxbeanInterface;
  ClassLoader loader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
    public ClassLoader run(){
      return cls.getClassLoader();
    }
  }
);
  if (!sun.misc.VM.isSystemDomainLoader(loader)) {
    throw new IllegalArgumentException(mxbeanName + ""String_Node_Str"");
  }
  try {
    final ObjectName objName=new ObjectName(mxbeanName);
    String intfName=mxbeanInterface.getName();
    if (!connection.isInstanceOf(objName,intfName)) {
      throw new IllegalArgumentException(mxbeanName + ""String_Node_Str"" + mxbeanInterface);
    }
    final Class[] interfaces;
    boolean emitter=connection.isInstanceOf(objName,NOTIF_EMITTER);
    return JMX.newMXBeanProxy(connection,objName,mxbeanInterface,emitter);
  }
 catch (  InstanceNotFoundException|MalformedObjectNameException e) {
    throw new IllegalArgumentException(e);
  }
}","/** 
 * Returns a proxy for a platform MXBean interface of a given <a href=""#MXBeanNames"">MXBean name</a> that forwards its method calls through the given <tt>MBeanServerConnection</tt>. <p>This method is equivalent to: <blockquote>  {@link java.lang.reflect.Proxy#newProxyInstance Proxy.newProxyInstance}<tt>(mxbeanInterface.getClassLoader(), new Class[] { mxbeanInterface }, handler)</tt> </blockquote> where <tt>handler</tt> is an   {@link java.lang.reflect.InvocationHandler InvocationHandler} to which method invocations to the MXBean interfaceare dispatched. This <tt>handler</tt> converts an input parameter from an MXBean data type to its mapped open type before forwarding to the <tt>MBeanServer</tt> and converts a return value from an MXBean method call through the <tt>MBeanServer</tt> from an open type to the corresponding return type declared in the MXBean interface. <p> If the MXBean is a notification emitter (i.e., it implements {@link javax.management.NotificationEmitter NotificationEmitter}), both the <tt>mxbeanInterface</tt> and <tt>NotificationEmitter</tt> will be implemented by this proxy. <p> <b>Notes:</b> <ol> <li>Using an MXBean proxy is a convenience remote access to a platform MXBean of a running virtual machine.  All method calls to the MXBean proxy are forwarded to an <tt>MBeanServerConnection</tt> where  {@link java.io.IOException IOException} may be thrownwhen the communication problem occurs with the connector server. An application remotely accesses the platform MXBeans using proxy should prepare to catch <tt>IOException</tt> as if accessing with the <tt>MBeanServerConnector</tt> interface.</li> <li>When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch {@link java.io.InvalidObjectException InvalidObjectException}which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application. </li> <li>  {@link javax.management.MBeanServerInvocationHandler MBeanServerInvocationHandler} or its{@link javax.management.MBeanServerInvocationHandler#newProxyInstance newProxyInstance} method cannot be used to createa proxy for a platform MXBean. The proxy object created by <tt>MBeanServerInvocationHandler</tt> does not handle the properties of the platform MXBeans described in the <a href=""#MXBean"">class specification</a>. </li> </ol>
 * @param connection the <tt>MBeanServerConnection</tt> to forward to.
 * @param mxbeanName the name of a platform MXBean within<tt>connection</tt> to forward to. <tt>mxbeanName</tt> must be in the format of  {@link ObjectName ObjectName}.
 * @param mxbeanInterface the MXBean interface to be implementedby the proxy.
 * @param < T > an {@code mxbeanInterface} type parameter
 * @return a proxy for a platform MXBean interface of agiven <a href=""#MXBeanNames"">MXBean name</a> that forwards its method calls through the given <tt>MBeanServerConnection</tt>, or  {@code null} if not exist.
 * @throws IllegalArgumentException if<ul> <li><tt>mxbeanName</tt> is not with a valid {@link ObjectName ObjectName} format, or</li><li>the named MXBean in the <tt>connection</tt> is not a MXBean provided by the platform, or</li> <li>the named MXBean is not registered in the <tt>MBeanServerConnection</tt>, or</li> <li>the named MXBean is not an instance of the given <tt>mxbeanInterface</tt></li> </ul>
 * @throws java.io.IOException if a communication problemoccurred when accessing the <tt>MBeanServerConnection</tt>.
 */
public static <T>T newPlatformMXBeanProxy(MBeanServerConnection connection,String mxbeanName,Class<T> mxbeanInterface) throws java.io.IOException {
  final Class<?> cls=mxbeanInterface;
  ClassLoader loader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
    public ClassLoader run(){
      return cls.getClassLoader();
    }
  }
);
  if (!sun.misc.VM.isSystemDomainLoader(loader)) {
    throw new IllegalArgumentException(mxbeanName + ""String_Node_Str"");
  }
  try {
    final ObjectName objName=new ObjectName(mxbeanName);
    String intfName=mxbeanInterface.getName();
    if (!connection.isInstanceOf(objName,intfName)) {
      throw new IllegalArgumentException(mxbeanName + ""String_Node_Str"" + mxbeanInterface);
    }
    final Class[] interfaces;
    boolean emitter=connection.isInstanceOf(objName,NOTIF_EMITTER);
    return JMX.newMXBeanProxy(connection,objName,mxbeanInterface,emitter);
  }
 catch (  InstanceNotFoundException|MalformedObjectNameException e) {
    throw new IllegalArgumentException(e);
  }
}"
77394,"/** 
 * Returns the platform MXBean proxy for  {@code mxbeanInterface} which is specified to have one singleinstance in a Java virtual machine and the proxy will forward the method calls through the given  {@code MBeanServerConnection}. This method may return   {@code null} if the management interfaceis not implemented in the Java virtual machine being monitored (for example, a Java virtual machine with no compilation system does not implement  {@link CompilationMXBean}); otherwise, this method is equivalent to calling: <pre>  {@link #getPlatformMXBeans(MBeanServerConnection,Class) getPlatformMXBeans(connection, mxbeanInterface)}.get(0); </pre>
 * @param connection the {@code MBeanServerConnection} to forward to.
 * @param mxbeanInterface a management interface for a platformMXBean with one single instance in the Java virtual machine being monitored, if implemented.
 * @return the platform MXBean proxy forforwarding the method calls of the  {@code mxbeanInterface}through the given   {@code MBeanServerConnection}, or   {@code null} if not exist.
 * @throws IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface or not a singleton platform MXBean.
 * @throws java.io.IOException if a communication problemoccurred when accessing the  {@code MBeanServerConnection}.
 * @see #newPlatformMXBeanProxy
 * @since 1.7
 */
public static <T extends PlatformManagedObject>T getPlatformMXBean(MBeanServerConnection connection,Class<T> mxbeanInterface) throws java.io.IOException {
  PlatformComponent pc=PlatformComponent.getPlatformComponent(mxbeanInterface);
  if (pc == null)   throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  if (!pc.isSingleton())   throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  return pc.getSingletonMXBean(connection,mxbeanInterface);
}","/** 
 * Returns the platform MXBean proxy for  {@code mxbeanInterface} which is specified to have one singleinstance in a Java virtual machine and the proxy will forward the method calls through the given  {@code MBeanServerConnection}. This method may return   {@code null} if the management interfaceis not implemented in the Java virtual machine being monitored (for example, a Java virtual machine with no compilation system does not implement  {@link CompilationMXBean}); otherwise, this method is equivalent to calling: <pre>  {@link #getPlatformMXBeans(MBeanServerConnection,Class) getPlatformMXBeans(connection, mxbeanInterface)}.get(0); </pre>
 * @param connection the {@code MBeanServerConnection} to forward to.
 * @param mxbeanInterface a management interface for a platformMXBean with one single instance in the Java virtual machine being monitored, if implemented.
 * @param < T > an {@code mxbeanInterface} type parameter
 * @return the platform MXBean proxy forforwarding the method calls of the  {@code mxbeanInterface}through the given   {@code MBeanServerConnection}, or   {@code null} if not exist.
 * @throws IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface or not a singleton platform MXBean.
 * @throws java.io.IOException if a communication problemoccurred when accessing the  {@code MBeanServerConnection}.
 * @see #newPlatformMXBeanProxy
 * @since 1.7
 */
public static <T extends PlatformManagedObject>T getPlatformMXBean(MBeanServerConnection connection,Class<T> mxbeanInterface) throws java.io.IOException {
  PlatformComponent pc=PlatformComponent.getPlatformComponent(mxbeanInterface);
  if (pc == null)   throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  if (!pc.isSingleton())   throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  return pc.getSingletonMXBean(connection,mxbeanInterface);
}"
77395,"/** 
 * Returns a <tt>MemoryNotificationInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>poolName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>usage</td> <td><tt>javax.management.openmbean.CompositeData</tt></td> </tr> <tr> <td>count</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a<tt>MemoryNotificationInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MemoryNotificationInfo</tt> object.
 * @return a <tt>MemoryNotificationInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MemoryNotificationInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MemoryNotifInfoCompositeData) {
    return ((MemoryNotifInfoCompositeData)cd).getMemoryNotifInfo();
  }
 else {
    return new MemoryNotificationInfo(cd);
  }
}","/** 
 * Returns a <tt>MemoryNotificationInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <blockquote> <table border summary=""The attributes and the types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>poolName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>usage</td> <td><tt>javax.management.openmbean.CompositeData</tt></td> </tr> <tr> <td>count</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a<tt>MemoryNotificationInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MemoryNotificationInfo</tt> object.
 * @return a <tt>MemoryNotificationInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MemoryNotificationInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MemoryNotifInfoCompositeData) {
    return ((MemoryNotifInfoCompositeData)cd).getMemoryNotifInfo();
  }
 else {
    return new MemoryNotificationInfo(cd);
  }
}"
77396,"/** 
 * Returns a <tt>MemoryUsage</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <p> <blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>init</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>used</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>committed</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>max</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>MemoryUsage</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MemoryUsage</tt> with the attributes described above.
 * @return a <tt>MemoryUsage</tt> object represented by <tt>cd</tt>if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MemoryUsage from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MemoryUsageCompositeData) {
    return ((MemoryUsageCompositeData)cd).getMemoryUsage();
  }
 else {
    return new MemoryUsage(cd);
  }
}","/** 
 * Returns a <tt>MemoryUsage</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <p> <blockquote> <table border summary=""The attributes and the types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>init</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>used</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>committed</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>max</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>MemoryUsage</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MemoryUsage</tt> with the attributes described above.
 * @return a <tt>MemoryUsage</tt> object represented by <tt>cd</tt>if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MemoryUsage from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MemoryUsageCompositeData) {
    return ((MemoryUsageCompositeData)cd).getMemoryUsage();
  }
 else {
    return new MemoryUsage(cd);
  }
}"
77397,"/** 
 * Returns a <tt>MonitorInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes as well as the attributes specified in the <a href=""LockInfo.html#MappedType""> mapped type</a> for the   {@link LockInfo} class:<blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>lockedStackFrame</td> <td><tt>CompositeData as specified in the <a href=""ThreadInfo.html#StackTrace"">stackTrace</a> attribute defined in the  {@link ThreadInfo#from ThreadInfo.from} method.</tt></td> </tr> <tr> <td>lockedStackDepth</td> <td><tt>java.lang.Integer</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>MonitorInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MonitorInfo</tt> with the attributes described above.
 * @return a <tt>MonitorInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MonitorInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MonitorInfoCompositeData) {
    return ((MonitorInfoCompositeData)cd).getMonitorInfo();
  }
 else {
    MonitorInfoCompositeData.validateCompositeData(cd);
    String className=MonitorInfoCompositeData.getClassName(cd);
    int identityHashCode=MonitorInfoCompositeData.getIdentityHashCode(cd);
    int stackDepth=MonitorInfoCompositeData.getLockedStackDepth(cd);
    StackTraceElement stackFrame=MonitorInfoCompositeData.getLockedStackFrame(cd);
    return new MonitorInfo(className,identityHashCode,stackDepth,stackFrame);
  }
}","/** 
 * Returns a <tt>MonitorInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes as well as the attributes specified in the <a href=""LockInfo.html#MappedType""> mapped type</a> for the   {@link LockInfo} class:<blockquote> <table border summary=""The attributes and their types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>lockedStackFrame</td> <td><tt>CompositeData as specified in the <a href=""ThreadInfo.html#StackTrace"">stackTrace</a> attribute defined in the  {@link ThreadInfo#from ThreadInfo.from} method.</tt></td> </tr> <tr> <td>lockedStackDepth</td> <td><tt>java.lang.Integer</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>MonitorInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MonitorInfo</tt> with the attributes described above.
 * @return a <tt>MonitorInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MonitorInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MonitorInfoCompositeData) {
    return ((MonitorInfoCompositeData)cd).getMonitorInfo();
  }
 else {
    MonitorInfoCompositeData.validateCompositeData(cd);
    String className=MonitorInfoCompositeData.getClassName(cd);
    int identityHashCode=MonitorInfoCompositeData.getIdentityHashCode(cd);
    int stackDepth=MonitorInfoCompositeData.getLockedStackDepth(cd);
    StackTraceElement stackFrame=MonitorInfoCompositeData.getLockedStackFrame(cd);
    return new MonitorInfo(className,identityHashCode,stackDepth,stackFrame);
  }
}"
77398,"/** 
 * Returns the input arguments passed to the Java virtual machine which does not include the arguments to the <tt>main</tt> method. This method returns an empty list if there is no input argument to the Java virtual machine. <p> Some Java virtual machine implementations may take input arguments from multiple different sources: for examples, arguments passed from the application that launches the Java virtual machine such as the 'java' command, environment variables, configuration files, etc. <p> Typically, not all command-line options to the 'java' command are passed to the Java virtual machine. Thus, the returned input arguments may not include all command-line options. <p> <b>MBeanServer access</b>:<br> The mapped type of <tt>List<String></tt> is <tt>String[]</tt>.
 * @return a list of <tt>String</tt> objects; each elementis an argument passed to the Java virtual machine.
 * @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(""monitor"").
 */
public java.util.List<String> getInputArguments();","/** 
 * Returns the input arguments passed to the Java virtual machine which does not include the arguments to the <tt>main</tt> method. This method returns an empty list if there is no input argument to the Java virtual machine. <p> Some Java virtual machine implementations may take input arguments from multiple different sources: for examples, arguments passed from the application that launches the Java virtual machine such as the 'java' command, environment variables, configuration files, etc. <p> Typically, not all command-line options to the 'java' command are passed to the Java virtual machine. Thus, the returned input arguments may not include all command-line options. <p> <b>MBeanServer access</b>:<br> The mapped type of   {@code List<String>} is <tt>String[]</tt>.
 * @return a list of <tt>String</tt> objects; each elementis an argument passed to the Java virtual machine.
 * @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(""monitor"").
 */
public java.util.List<String> getInputArguments();"
77399,"/** 
 * Returns a map of names and values of all system properties. This method calls   {@link System#getProperties} to get allsystem properties.  Properties whose name or value is not a <tt>String</tt> are omitted. <p> <b>MBeanServer access</b>:<br> The mapped type of  {@code Map<String,String>} is{@link javax.management.openmbean.TabularData TabularData}with two items in each row as follows: <blockquote> <table border> <tr> <th>Item Name</th> <th>Item Type</th> </tr> <tr> <td><tt>key</tt></td> <td><tt>String</tt></td> </tr> <tr> <td><tt>value</tt></td> <td><tt>String</tt></td> </tr> </table> </blockquote>
 * @return a map of names and values of all system properties.
 * @throws java.lang.SecurityException if a security manager exists and its <code>checkPropertiesAccess</code> method doesn't allow access to the system properties.
 */
public java.util.Map<String,String> getSystemProperties();","/** 
 * Returns a map of names and values of all system properties. This method calls   {@link System#getProperties} to get allsystem properties.  Properties whose name or value is not a <tt>String</tt> are omitted. <p> <b>MBeanServer access</b>:<br> The mapped type of  {@code Map<String,String>} is{@link javax.management.openmbean.TabularData TabularData}with two items in each row as follows: <blockquote> <table border summary=""Name and Type for each item""> <tr> <th>Item Name</th> <th>Item Type</th> </tr> <tr> <td><tt>key</tt></td> <td><tt>String</tt></td> </tr> <tr> <td><tt>value</tt></td> <td><tt>String</tt></td> </tr> </table> </blockquote>
 * @return a map of names and values of all system properties.
 * @throws java.lang.SecurityException if a security manager exists and its <code>checkPropertiesAccess</code> method doesn't allow access to the system properties.
 */
public java.util.Map<String,String> getSystemProperties();"
77400,"/** 
 * Returns a <tt>ThreadInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes unless otherwise specified below: <blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>threadId</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>threadName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>threadState</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>suspended</td> <td><tt>java.lang.Boolean</tt></td> </tr> <tr> <td>inNative</td> <td><tt>java.lang.Boolean</tt></td> </tr> <tr> <td>blockedCount</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>blockedTime</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>waitedCount</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>waitedTime</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>lockInfo</td> <td><tt>javax.management.openmbean.CompositeData</tt> - the mapped type for   {@link LockInfo} as specified in the{@link LockInfo#from} method.<p> If <tt>cd</tt> does not contain this attribute, the <tt>LockInfo</tt> object will be constructed from the value of the <tt>lockName</tt> attribute. </td> </tr> <tr> <td>lockName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>lockOwnerId</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>lockOwnerName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td><a name=""StackTrace"">stackTrace</a></td> <td><tt>javax.management.openmbean.CompositeData[]</tt> <p> Each element is a <tt>CompositeData</tt> representing StackTraceElement containing the following attributes: <blockquote> <table cellspacing=1 cellpadding=0> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>className</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>methodName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>fileName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>lineNumber</td> <td><tt>java.lang.Integer</tt></td> </tr> <tr> <td>nativeMethod</td> <td><tt>java.lang.Boolean</tt></td> </tr> </table> </blockquote> </td> </tr> <tr> <td>lockedMonitors</td> <td><tt>javax.management.openmbean.CompositeData[]</tt> whose element type is the mapped type for {@link MonitorInfo} as specified in the{@link MonitorInfo#from Monitor.from} method.<p> If <tt>cd</tt> does not contain this attribute, this attribute will be set to an empty array. </td> </tr> <tr> <td>lockedSynchronizers</td> <td><tt>javax.management.openmbean.CompositeData[]</tt> whose element type is the mapped type for {@link LockInfo} as specified in the {@link LockInfo#from} method.<p> If <tt>cd</tt> does not contain this attribute, this attribute will be set to an empty array. </td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>ThreadInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>ThreadInfo</tt> with the attributes described above.
 * @return a <tt>ThreadInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static ThreadInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof ThreadInfoCompositeData) {
    return ((ThreadInfoCompositeData)cd).getThreadInfo();
  }
 else {
    return new ThreadInfo(cd);
  }
}","/** 
 * Returns a <tt>ThreadInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes unless otherwise specified below: <blockquote> <table border summary=""The attributes and their types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>threadId</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>threadName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>threadState</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>suspended</td> <td><tt>java.lang.Boolean</tt></td> </tr> <tr> <td>inNative</td> <td><tt>java.lang.Boolean</tt></td> </tr> <tr> <td>blockedCount</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>blockedTime</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>waitedCount</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>waitedTime</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>lockInfo</td> <td><tt>javax.management.openmbean.CompositeData</tt> - the mapped type for   {@link LockInfo} as specified in the{@link LockInfo#from} method.<p> If <tt>cd</tt> does not contain this attribute, the <tt>LockInfo</tt> object will be constructed from the value of the <tt>lockName</tt> attribute. </td> </tr> <tr> <td>lockName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>lockOwnerId</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>lockOwnerName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td><a name=""StackTrace"">stackTrace</a></td> <td><tt>javax.management.openmbean.CompositeData[]</tt> <p> Each element is a <tt>CompositeData</tt> representing StackTraceElement containing the following attributes: <blockquote> <table cellspacing=1 cellpadding=0 summary=""The attributes and their types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>className</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>methodName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>fileName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>lineNumber</td> <td><tt>java.lang.Integer</tt></td> </tr> <tr> <td>nativeMethod</td> <td><tt>java.lang.Boolean</tt></td> </tr> </table> </blockquote> </td> </tr> <tr> <td>lockedMonitors</td> <td><tt>javax.management.openmbean.CompositeData[]</tt> whose element type is the mapped type for {@link MonitorInfo} as specified in the{@link MonitorInfo#from Monitor.from} method.<p> If <tt>cd</tt> does not contain this attribute, this attribute will be set to an empty array. </td> </tr> <tr> <td>lockedSynchronizers</td> <td><tt>javax.management.openmbean.CompositeData[]</tt> whose element type is the mapped type for {@link LockInfo} as specified in the {@link LockInfo#from} method.<p> If <tt>cd</tt> does not contain this attribute, this attribute will be set to an empty array. </td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>ThreadInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>ThreadInfo</tt> with the attributes described above.
 * @return a <tt>ThreadInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static ThreadInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof ThreadInfoCompositeData) {
    return ((ThreadInfoCompositeData)cd).getThreadInfo();
  }
 else {
    return new ThreadInfo(cd);
  }
}"
77401,"/** 
 * Returns the unique   {@link java.nio.channels.FileChannel FileChannel}object associated with this file input stream. <p> The initial   {@link java.nio.channels.FileChannel#position() </code>position<code>} of the returned channel will be equal to thenumber of bytes read from the file so far.  Reading bytes from this stream will increment the channel's position.  Changing the channel's position, either explicitly or by reading, will change this stream's file position.
 * @return  the file channel associated with this file input stream
 * @since 1.4
 * @spec JSR-51
 */
public FileChannel getChannel(){
synchronized (this) {
    if (channel == null) {
      channel=FileChannelImpl.open(fd,true,false,this);
    }
    return channel;
  }
}","/** 
 * Returns the unique   {@link java.nio.channels.FileChannel FileChannel}object associated with this file input stream. <p> The initial   {@link java.nio.channels.FileChannel#position() position} of the returned channel will be equal to thenumber of bytes read from the file so far.  Reading bytes from this stream will increment the channel's position.  Changing the channel's position, either explicitly or by reading, will change this stream's file position.
 * @return  the file channel associated with this file input stream
 * @since 1.4
 * @spec JSR-51
 */
public FileChannel getChannel(){
synchronized (this) {
    if (channel == null) {
      channel=FileChannelImpl.open(fd,true,false,this);
    }
    return channel;
  }
}"
77402,"/** 
 * Returns the unique   {@link java.nio.channels.FileChannel FileChannel}object associated with this file output stream. </p> <p> The initial   {@link java.nio.channels.FileChannel#position() </code>position<code>} of the returned channel will be equal to thenumber of bytes written to the file so far unless this stream is in append mode, in which case it will be equal to the size of the file. Writing bytes to this stream will increment the channel's position accordingly.  Changing the channel's position, either explicitly or by writing, will change this stream's file position.
 * @return  the file channel associated with this file output stream
 * @since 1.4
 * @spec JSR-51
 */
public FileChannel getChannel(){
synchronized (this) {
    if (channel == null) {
      channel=FileChannelImpl.open(fd,false,true,append,this);
    }
    return channel;
  }
}","/** 
 * Returns the unique   {@link java.nio.channels.FileChannel FileChannel}object associated with this file output stream. <p> The initial   {@link java.nio.channels.FileChannel#position() position} of the returned channel will be equal to thenumber of bytes written to the file so far unless this stream is in append mode, in which case it will be equal to the size of the file. Writing bytes to this stream will increment the channel's position accordingly.  Changing the channel's position, either explicitly or by writing, will change this stream's file position.
 * @return  the file channel associated with this file output stream
 * @since 1.4
 * @spec JSR-51
 */
public FileChannel getChannel(){
synchronized (this) {
    if (channel == null) {
      channel=FileChannelImpl.open(fd,false,true,append,this);
    }
    return channel;
  }
}"
77403,"/** 
 * Creates an InputStreamReader that uses the given charset decoder.  </p>
 * @param in       An InputStream
 * @param dec      A charset decoder
 * @since 1.4
 * @spec JSR-51
 */
public InputStreamReader(InputStream in,CharsetDecoder dec){
  super(in);
  if (dec == null)   throw new NullPointerException(""String_Node_Str"");
  sd=StreamDecoder.forInputStreamReader(in,this,dec);
}","/** 
 * Creates an InputStreamReader that uses the given charset decoder.
 * @param in       An InputStream
 * @param dec      A charset decoder
 * @since 1.4
 * @spec JSR-51
 */
public InputStreamReader(InputStream in,CharsetDecoder dec){
  super(in);
  if (dec == null)   throw new NullPointerException(""String_Node_Str"");
  sd=StreamDecoder.forInputStreamReader(in,this,dec);
}"
77404,"/** 
 * Creates an OutputStreamWriter that uses the given charset encoder.  </p>
 * @param out An OutputStream
 * @param enc A charset encoder
 * @since 1.4
 * @spec JSR-51
 */
public OutputStreamWriter(OutputStream out,CharsetEncoder enc){
  super(out);
  if (enc == null)   throw new NullPointerException(""String_Node_Str"");
  se=StreamEncoder.forOutputStreamWriter(out,this,enc);
}","/** 
 * Creates an OutputStreamWriter that uses the given charset encoder.
 * @param out An OutputStream
 * @param enc A charset encoder
 * @since 1.4
 * @spec JSR-51
 */
public OutputStreamWriter(OutputStream out,CharsetEncoder enc){
  super(out);
  if (enc == null)   throw new NullPointerException(""String_Node_Str"");
  se=StreamEncoder.forOutputStreamWriter(out,this,enc);
}"
77405,"/** 
 * Receives data into an array of bytes.  This method will block until some input is available.
 * @param b the buffer into which the data is received
 * @param off the start offset of the data
 * @param len the maximum number of bytes received
 * @exception IOException If the pipe is <a href=#BROKEN> broken</a>,{@link #connect(java.io.PipedOutputStream) unconnected}, closed,or if an I/O error occurs.
 */
synchronized void receive(byte b[],int off,int len) throws IOException {
  checkStateForReceive();
  writeSide=Thread.currentThread();
  int bytesToTransfer=len;
  while (bytesToTransfer > 0) {
    if (in == out)     awaitSpace();
    int nextTransferAmount=0;
    if (out < in) {
      nextTransferAmount=buffer.length - in;
    }
 else     if (in < out) {
      if (in == -1) {
        in=out=0;
        nextTransferAmount=buffer.length - in;
      }
 else {
        nextTransferAmount=out - in;
      }
    }
    if (nextTransferAmount > bytesToTransfer)     nextTransferAmount=bytesToTransfer;
    assert(nextTransferAmount > 0);
    System.arraycopy(b,off,buffer,in,nextTransferAmount);
    bytesToTransfer-=nextTransferAmount;
    off+=nextTransferAmount;
    in+=nextTransferAmount;
    if (in >= buffer.length) {
      in=0;
    }
  }
}","/** 
 * Receives data into an array of bytes.  This method will block until some input is available.
 * @param b the buffer into which the data is received
 * @param off the start offset of the data
 * @param len the maximum number of bytes received
 * @exception IOException If the pipe is <a href=""#BROKEN""> broken</a>,{@link #connect(java.io.PipedOutputStream) unconnected}, closed,or if an I/O error occurs.
 */
synchronized void receive(byte b[],int off,int len) throws IOException {
  checkStateForReceive();
  writeSide=Thread.currentThread();
  int bytesToTransfer=len;
  while (bytesToTransfer > 0) {
    if (in == out)     awaitSpace();
    int nextTransferAmount=0;
    if (out < in) {
      nextTransferAmount=buffer.length - in;
    }
 else     if (in < out) {
      if (in == -1) {
        in=out=0;
        nextTransferAmount=buffer.length - in;
      }
 else {
        nextTransferAmount=out - in;
      }
    }
    if (nextTransferAmount > bytesToTransfer)     nextTransferAmount=bytesToTransfer;
    assert(nextTransferAmount > 0);
    System.arraycopy(b,off,buffer,in,nextTransferAmount);
    bytesToTransfer-=nextTransferAmount;
    off+=nextTransferAmount;
    in+=nextTransferAmount;
    if (in >= buffer.length) {
      in=0;
    }
  }
}"
77406,"/** 
 * Reads up to <code>len</code> bytes of data from this piped input stream into an array of bytes. Less than <code>len</code> bytes will be read if the end of the data stream is reached or if <code>len</code> exceeds the pipe's buffer size. If <code>len </code> is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.
 * @param b     the buffer into which the data is read.
 * @param off   the start offset in the destination array <code>b</code>
 * @param len   the maximum number of bytes read.
 * @return     the total number of bytes read into the buffer, or<code>-1</code> if there is no more data because the end of the stream has been reached.
 * @exception NullPointerException If <code>b</code> is <code>null</code>.
 * @exception IndexOutOfBoundsException If <code>off</code> is negative,<code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code>
 * @exception IOException if the pipe is <a href=#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedOutputStream) unconnected}, closed, or if an I/O error occurs.
 */
public synchronized int read(byte b[],int off,int len) throws IOException {
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  int c=read();
  if (c < 0) {
    return -1;
  }
  b[off]=(byte)c;
  int rlen=1;
  while ((in >= 0) && (len > 1)) {
    int available;
    if (in > out) {
      available=Math.min((buffer.length - out),(in - out));
    }
 else {
      available=buffer.length - out;
    }
    if (available > (len - 1)) {
      available=len - 1;
    }
    System.arraycopy(buffer,out,b,off + rlen,available);
    out+=available;
    rlen+=available;
    len-=available;
    if (out >= buffer.length) {
      out=0;
    }
    if (in == out) {
      in=-1;
    }
  }
  return rlen;
}","/** 
 * Reads up to <code>len</code> bytes of data from this piped input stream into an array of bytes. Less than <code>len</code> bytes will be read if the end of the data stream is reached or if <code>len</code> exceeds the pipe's buffer size. If <code>len </code> is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.
 * @param b     the buffer into which the data is read.
 * @param off   the start offset in the destination array <code>b</code>
 * @param len   the maximum number of bytes read.
 * @return     the total number of bytes read into the buffer, or<code>-1</code> if there is no more data because the end of the stream has been reached.
 * @exception NullPointerException If <code>b</code> is <code>null</code>.
 * @exception IndexOutOfBoundsException If <code>off</code> is negative,<code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code>
 * @exception IOException if the pipe is <a href=""#BROKEN""> <code>broken</code></a>,{@link #connect(java.io.PipedOutputStream) unconnected}, closed, or if an I/O error occurs.
 */
public synchronized int read(byte b[],int off,int len) throws IOException {
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  int c=read();
  if (c < 0) {
    return -1;
  }
  b[off]=(byte)c;
  int rlen=1;
  while ((in >= 0) && (len > 1)) {
    int available;
    if (in > out) {
      available=Math.min((buffer.length - out),(in - out));
    }
 else {
      available=buffer.length - out;
    }
    if (available > (len - 1)) {
      available=len - 1;
    }
    System.arraycopy(buffer,out,b,off + rlen,available);
    out+=available;
    rlen+=available;
    len-=available;
    if (out >= buffer.length) {
      out=0;
    }
    if (in == out) {
      in=-1;
    }
  }
  return rlen;
}"
77407,"/** 
 * Returns the number of bytes that can be read from this input stream without blocking.
 * @return the number of bytes that can be read from this input streamwithout blocking, or  {@code 0} if this input stream has beenclosed by invoking its  {@link #close()} method, or if the pipeis  {@link #connect(java.io.PipedOutputStream) unconnected}, or <a href=#BROKEN> <code>broken</code></a>.
 * @exception IOException  if an I/O error occurs.
 * @since   JDK1.0.2
 */
public synchronized int available() throws IOException {
  if (in < 0)   return 0;
 else   if (in == out)   return buffer.length;
 else   if (in > out)   return in - out;
 else   return in + buffer.length - out;
}","/** 
 * Returns the number of bytes that can be read from this input stream without blocking.
 * @return the number of bytes that can be read from this input streamwithout blocking, or  {@code 0} if this input stream has beenclosed by invoking its  {@link #close()} method, or if the pipeis  {@link #connect(java.io.PipedOutputStream) unconnected}, or <a href=""#BROKEN""> <code>broken</code></a>.
 * @exception IOException  if an I/O error occurs.
 * @since   JDK1.0.2
 */
public synchronized int available() throws IOException {
  if (in < 0)   return 0;
 else   if (in == out)   return buffer.length;
 else   if (in > out)   return in - out;
 else   return in + buffer.length - out;
}"
77408,"/** 
 * Returns the opaque file descriptor object associated with this stream. </p>
 * @return     the file descriptor object associated with this stream.
 * @exception IOException  if an I/O error occurs.
 * @see java.io.FileDescriptor
 */
public final FileDescriptor getFD() throws IOException {
  if (fd != null) {
    return fd;
  }
  throw new IOException();
}","/** 
 * Returns the opaque file descriptor object associated with this stream.
 * @return     the file descriptor object associated with this stream.
 * @exception IOException  if an I/O error occurs.
 * @see java.io.FileDescriptor
 */
public final FileDescriptor getFD() throws IOException {
  if (fd != null) {
    return fd;
  }
  throw new IOException();
}"
77409,"/** 
 * Creates a random access file stream to read from, and optionally to write to, the file specified by the   {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.<a name=""mode""><p> The <tt>mode</tt> argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: <blockquote><table summary=""Access mode permitted values and meanings""> <tr><th><p align=""left"">Value</p></th><th><p align=""left"">Meaning</p></th></tr> <tr><td valign=""top""><tt>""r""</tt></td> <td> Open for reading only.  Invoking any of the <tt>write</tt> methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. </td></tr><tr><td valign=""top""><tt>""rw""</tt></td> <td> Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. </td></tr> <tr><td valign=""top""><tt>""rws""</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device.  </td></tr> <tr><td valign=""top""><tt>""rwd""&nbsp;&nbsp;</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content be written synchronously to the underlying storage device. </td></tr> </table></blockquote> The <tt>""rws""</tt> and <tt>""rwd""</tt> modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of<tt>true</tt> and <tt>false</tt>, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. <p> The <tt>""rwd""</tt> mode can be used to reduce the number of I/O operations performed.  Using <tt>""rwd""</tt> only requires updates to the file's content to be written to storage; using <tt>""rws""</tt> requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. <p> If there is a security manager, its  {@code checkRead} method iscalled with the pathname of the  {@code file} argument as itsargument to see if read access to the file is allowed.  If the mode allows writing, the security manager's  {@code checkWrite} method isalso called with the path argument to see if write access to the file is allowed.
 * @param file   the file object
 * @param mode   the access mode, as described<a href=""#mode"">above</a>
 * @exception IllegalArgumentException  if the mode argument is not equalto one of <tt>""r""</tt>, <tt>""rw""</tt>, <tt>""rws""</tt>, or <tt>""rwd""</tt>
 * @exception FileNotFoundException if the mode is <tt>""r""</tt> but the given file object does not denote an existing regular file, or if the mode begins with <tt>""rw""</tt> but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
 * @exception SecurityException         if a security manager exists and its{@code checkRead} method denies read access to the fileor the mode is ""rw"" and the security manager's {@code checkWrite} method denies write access to the file
 * @see java.lang.SecurityManager#checkRead(java.lang.String)
 * @see java.lang.SecurityManager#checkWrite(java.lang.String)
 * @see java.nio.channels.FileChannel#force(boolean)
 * @revised 1.4
 * @spec JSR-51
 */
public RandomAccessFile(File file,String mode) throws FileNotFoundException {
  String name=(file != null ? file.getPath() : null);
  int imode=-1;
  if (mode.equals(""String_Node_Str""))   imode=O_RDONLY;
 else   if (mode.startsWith(""String_Node_Str"")) {
    imode=O_RDWR;
    rw=true;
    if (mode.length() > 2) {
      if (mode.equals(""String_Node_Str""))       imode|=O_SYNC;
 else       if (mode.equals(""String_Node_Str""))       imode|=O_DSYNC;
 else       imode=-1;
    }
  }
  if (imode < 0)   throw new IllegalArgumentException(""String_Node_Str"" + mode + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  SecurityManager security=System.getSecurityManager();
  if (security != null) {
    security.checkRead(name);
    if (rw) {
      security.checkWrite(name);
    }
  }
  if (name == null) {
    throw new NullPointerException();
  }
  if (file.isInvalid()) {
    throw new FileNotFoundException(""String_Node_Str"");
  }
  fd=new FileDescriptor();
  fd.attach(this);
  open(name,imode);
}","/** 
 * Creates a random access file stream to read from, and optionally to write to, the file specified by the   {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.<p>The <a name=""mode""><tt>mode</tt></a> argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: <table summary=""Access mode permitted values and meanings""> <tr><th><p align=""left"">Value</p></th><th><p align=""left"">Meaning</p></th></tr> <tr><td valign=""top""><tt>""r""</tt></td> <td> Open for reading only.  Invoking any of the <tt>write</tt> methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. </td></tr><tr><td valign=""top""><tt>""rw""</tt></td> <td> Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. </td></tr> <tr><td valign=""top""><tt>""rws""</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device.  </td></tr> <tr><td valign=""top""><tt>""rwd""&nbsp;&nbsp;</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content be written synchronously to the underlying storage device. </td></tr> </table> The <tt>""rws""</tt> and <tt>""rwd""</tt> modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of<tt>true</tt> and <tt>false</tt>, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. <p>The <tt>""rwd""</tt> mode can be used to reduce the number of I/O operations performed.  Using <tt>""rwd""</tt> only requires updates to the file's content to be written to storage; using <tt>""rws""</tt> requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. <p>If there is a security manager, its  {@code checkRead} method iscalled with the pathname of the  {@code file} argument as itsargument to see if read access to the file is allowed.  If the mode allows writing, the security manager's  {@code checkWrite} method isalso called with the path argument to see if write access to the file is allowed.
 * @param file   the file object
 * @param mode   the access mode, as described<a href=""#mode"">above</a>
 * @exception IllegalArgumentException  if the mode argument is not equalto one of <tt>""r""</tt>, <tt>""rw""</tt>, <tt>""rws""</tt>, or <tt>""rwd""</tt>
 * @exception FileNotFoundException if the mode is <tt>""r""</tt> but the given file object does not denote an existing regular file, or if the mode begins with <tt>""rw""</tt> but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
 * @exception SecurityException         if a security manager exists and its{@code checkRead} method denies read access to the fileor the mode is ""rw"" and the security manager's {@code checkWrite} method denies write access to the file
 * @see java.lang.SecurityManager#checkRead(java.lang.String)
 * @see java.lang.SecurityManager#checkWrite(java.lang.String)
 * @see java.nio.channels.FileChannel#force(boolean)
 * @revised 1.4
 * @spec JSR-51
 */
public RandomAccessFile(File file,String mode) throws FileNotFoundException {
  String name=(file != null ? file.getPath() : null);
  int imode=-1;
  if (mode.equals(""String_Node_Str""))   imode=O_RDONLY;
 else   if (mode.startsWith(""String_Node_Str"")) {
    imode=O_RDWR;
    rw=true;
    if (mode.length() > 2) {
      if (mode.equals(""String_Node_Str""))       imode|=O_SYNC;
 else       if (mode.equals(""String_Node_Str""))       imode|=O_DSYNC;
 else       imode=-1;
    }
  }
  if (imode < 0)   throw new IllegalArgumentException(""String_Node_Str"" + mode + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  SecurityManager security=System.getSecurityManager();
  if (security != null) {
    security.checkRead(name);
    if (rw) {
      security.checkWrite(name);
    }
  }
  if (name == null) {
    throw new NullPointerException();
  }
  if (file.isInvalid()) {
    throw new FileNotFoundException(""String_Node_Str"");
  }
  fd=new FileDescriptor();
  fd.attach(this);
  open(name,imode);
}"
77410,"/** 
 * Retrieve cookies associated with given URI, or whose domain matches the given URI. Only cookies that have not expired are returned. This is called for every outgoing HTTP request.
 * @return          an immutable list of HttpCookie,return empty list if no cookies match the given URI
 * @throws NullPointerException if <tt>uri</tt> is <tt>null</tt>
 * @see #add
 */
public List<HttpCookie> get(URI uri);","/** 
 * Retrieve cookies associated with given URI, or whose domain matches the given URI. Only cookies that have not expired are returned. This is called for every outgoing HTTP request.
 * @return          an immutable list of HttpCookie,return empty list if no cookies match the given URI
 * @param uri       the uri associated with the cookies to be returned
 * @throws NullPointerException if <tt>uri</tt> is <tt>null</tt>
 * @see #add
 */
public List<HttpCookie> get(URI uri);"
77411,"/** 
 * Checks if this HttpURLPermission implies the given permission. Specifically, the following checks are done as if in the following sequence: <p><ul> <li>if 'p' is not an instance of HttpURLPermission return false</li> <li>if any of p's methods are not in this's method list, and if this's method list is not equal to ""*"", then return false.</li> <li>if any of p's headers are not in this's request header list, and if this's request header list is not equal to ""*"", then return false.</li> <li>if this's url is equal to p's url , then return true</li> <li>if this's url scheme is not equal to p's url scheme return false</li> <li>if the scheme specific part of this's url is '*' return true</li> <li>if this's url authority is not equal to p's url authority return false</li> <li>if the path or paths specified by p's url are contained in the set of paths specified by this's url, then return true <li>otherwise, return false</li> </ol> <p> Some examples of how paths are matched are shown below: <p> <table border> <tr><th>this's path</th><th>p's path</th><th>match</th></tr> <tr><td>/a/b</td><td>/a/b</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c/d</td><td>no</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/d</td><td>yes</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/d/e</td><td>yes</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/*</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c/-</td><td>no</td></tr> </table>
 */
public boolean implies(Permission p){
  if (!(p instanceof HttpURLPermission)) {
    return false;
  }
  HttpURLPermission that=(HttpURLPermission)p;
  if (!this.methods.get(0).equals(""String_Node_Str"") && Collections.indexOfSubList(this.methods,that.methods) == -1) {
    return false;
  }
  if (this.requestHeaders.isEmpty() && !that.requestHeaders.isEmpty()) {
    return false;
  }
  if (!this.requestHeaders.isEmpty() && !this.requestHeaders.get(0).equals(""String_Node_Str"") && Collections.indexOfSubList(this.requestHeaders,that.requestHeaders) == -1) {
    return false;
  }
  if (this.uri.equals(that.uri)) {
    return true;
  }
  if (!this.uri.getScheme().equals(that.uri.getScheme())) {
    return false;
  }
  if (this.uri.getSchemeSpecificPart().equals(""String_Node_Str"")) {
    return true;
  }
  String thisAuthority=this.uri.getAuthority();
  if (thisAuthority != null && !thisAuthority.equals(that.uri.getAuthority())) {
    return false;
  }
  String thispath=this.uri.getPath();
  String thatpath=that.uri.getPath();
  if (thispath.endsWith(""String_Node_Str"")) {
    String thisprefix=thispath.substring(0,thispath.length() - 1);
    return thatpath.startsWith(thisprefix);
  }
  if (thispath.endsWith(""String_Node_Str"")) {
    String thisprefix=thispath.substring(0,thispath.length() - 1);
    if (!thatpath.startsWith(thisprefix)) {
      return false;
    }
    String thatsuffix=thatpath.substring(thisprefix.length());
    if (thatsuffix.indexOf('/') != -1) {
      return false;
    }
    if (thatsuffix.equals(""String_Node_Str"")) {
      return false;
    }
    return true;
  }
  return false;
}","/** 
 * Checks if this HttpURLPermission implies the given permission. Specifically, the following checks are done as if in the following sequence: <p><ul> <li>if 'p' is not an instance of HttpURLPermission return false</li> <li>if any of p's methods are not in this's method list, and if this's method list is not equal to ""*"", then return false.</li> <li>if any of p's headers are not in this's request header list, and if this's request header list is not equal to ""*"", then return false.</li> <li>if this's url is equal to p's url , then return true</li> <li>if this's url scheme is not equal to p's url scheme return false</li> <li>if the scheme specific part of this's url is '*' return true</li> <li>if this's url authority is not equal to p's url authority return false</li> <li>if the path or paths specified by p's url are contained in the set of paths specified by this's url, then return true <li>otherwise, return false</li> </ul> <p>Some examples of how paths are matched are shown below: <p><table border> <caption>Examples of Path Matching</caption> <tr><th>this's path</th><th>p's path</th><th>match</th></tr> <tr><td>/a/b</td><td>/a/b</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c/d</td><td>no</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/d</td><td>yes</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/d/e</td><td>yes</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/*</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c/-</td><td>no</td></tr> </table>
 */
public boolean implies(Permission p){
  if (!(p instanceof HttpURLPermission)) {
    return false;
  }
  HttpURLPermission that=(HttpURLPermission)p;
  if (!this.methods.get(0).equals(""String_Node_Str"") && Collections.indexOfSubList(this.methods,that.methods) == -1) {
    return false;
  }
  if (this.requestHeaders.isEmpty() && !that.requestHeaders.isEmpty()) {
    return false;
  }
  if (!this.requestHeaders.isEmpty() && !this.requestHeaders.get(0).equals(""String_Node_Str"") && Collections.indexOfSubList(this.requestHeaders,that.requestHeaders) == -1) {
    return false;
  }
  if (this.uri.equals(that.uri)) {
    return true;
  }
  if (!this.uri.getScheme().equals(that.uri.getScheme())) {
    return false;
  }
  if (this.uri.getSchemeSpecificPart().equals(""String_Node_Str"")) {
    return true;
  }
  String thisAuthority=this.uri.getAuthority();
  if (thisAuthority != null && !thisAuthority.equals(that.uri.getAuthority())) {
    return false;
  }
  String thispath=this.uri.getPath();
  String thatpath=that.uri.getPath();
  if (thispath.endsWith(""String_Node_Str"")) {
    String thisprefix=thispath.substring(0,thispath.length() - 1);
    return thatpath.startsWith(thisprefix);
  }
  if (thispath.endsWith(""String_Node_Str"")) {
    String thisprefix=thispath.substring(0,thispath.length() - 1);
    if (!thatpath.startsWith(thisprefix)) {
      return false;
    }
    String thatsuffix=thatpath.substring(thisprefix.length());
    if (thatsuffix.indexOf('/') != -1) {
      return false;
    }
    if (thatsuffix.equals(""String_Node_Str"")) {
      return false;
    }
    return true;
  }
  return false;
}"
77412,"/** 
 * Creates a HttpURLPermission with the given url string and unrestricted methods and request headers by invoking the two argument constructor as follows: HttpURLPermission(url, ""*:*"")
 * @throws IllegalArgumentException if url does not result in a valid {@link URI}
 */
public HttpURLPermission(String url){
  this(url,""String_Node_Str"");
}","/** 
 * Creates a HttpURLPermission with the given url string and unrestricted methods and request headers by invoking the two argument constructor as follows: HttpURLPermission(url, ""*:*"")
 * @param url the url string
 * @throws IllegalArgumentException if url does not result in a valid {@link URI}
 */
public HttpURLPermission(String url){
  this(url,""String_Node_Str"");
}"
77413,"/** 
 * Returns the name of the protocol family.
 */
String name();","/** 
 * Returns the name of the protocol family.
 * @return the name of the protocol family
 */
String name();"
77414,"/** 
 * Returns the name of the socket option.
 */
String name();","/** 
 * Returns the name of the socket option.
 * @return the name of the socket option
 */
String name();"
77415,"/** 
 * Returns the type of the socket option value.
 */
Class<T> type();","/** 
 * Returns the type of the socket option value.
 * @return the type of the socket option value
 */
Class<T> type();"
77416,"/** 
 * Returns the length of this character sequence.  The length is the number of 16-bit <code>char</code>s in the sequence.</p>
 * @return  the number of <code>char</code>s in this sequence
 */
int length();","/** 
 * Returns the length of this character sequence.  The length is the number of 16-bit <code>char</code>s in the sequence.
 * @return  the number of <code>char</code>s in this sequence
 */
int length();"
77417,"/** 
 * Returns a string containing the characters in this sequence in the same order as this sequence.  The length of the string will be the length of this sequence. </p>
 * @return  a string consisting of exactly this sequence of characters
 */
public String toString();","/** 
 * Returns a string containing the characters in this sequence in the same order as this sequence.  The length of the string will be the length of this sequence.
 * @return  a string consisting of exactly this sequence of characters
 */
public String toString();"
77418,"/** 
 * Returns a new <code>CharSequence</code> that is a subsequence of this sequence. The subsequence starts with the <code>char</code> value at the specified index and ends with the <code>char</code> value at index <tt>end - 1</tt>.  The length (in <code>char</code>s) of the returned sequence is <tt>end - start</tt>, so if <tt>start == end</tt> then an empty sequence is returned. </p>
 * @param start   the start index, inclusive
 * @param end     the end index, exclusive
 * @return  the specified subsequence
 * @throws IndexOutOfBoundsException if <tt>start</tt> or <tt>end</tt> are negative, if <tt>end</tt> is greater than <tt>length()</tt>, or if <tt>start</tt> is greater than <tt>end</tt>
 */
CharSequence subSequence(int start,int end);","/** 
 * Returns a new <code>CharSequence</code> that is a subsequence of this sequence. The subsequence starts with the <code>char</code> value at the specified index and ends with the <code>char</code> value at index <tt>end - 1</tt>.  The length (in <code>char</code>s) of the returned sequence is <tt>end - start</tt>, so if <tt>start == end</tt> then an empty sequence is returned.
 * @param start   the start index, inclusive
 * @param end     the end index, exclusive
 * @return  the specified subsequence
 * @throws IndexOutOfBoundsException if <tt>start</tt> or <tt>end</tt> are negative, if <tt>end</tt> is greater than <tt>length()</tt>, or if <tt>start</tt> is greater than <tt>end</tt>
 */
CharSequence subSequence(int start,int end);"
77419,"/** 
 * Returns the <code>char</code> value at the specified index.  An index ranges from zero to <tt>length() - 1</tt>.  The first <code>char</code> value of the sequence is at index zero, the next at index one, and so on, as for array indexing. </p> <p>If the <code>char</code> value specified by the index is a <a href=""  {@docRoot}/java/lang/Character.html#unicode"">surrogate</a>, the surrogate value is returned.
 * @param index   the index of the <code>char</code> value to be returned
 * @return  the specified <code>char</code> value
 * @throws IndexOutOfBoundsException if the <tt>index</tt> argument is negative or not less than <tt>length()</tt>
 */
char charAt(int index);","/** 
 * Returns the <code>char</code> value at the specified index.  An index ranges from zero to <tt>length() - 1</tt>.  The first <code>char</code> value of the sequence is at index zero, the next at index one, and so on, as for array indexing. <p>If the <code>char</code> value specified by the index is a <a href=""  {@docRoot}/java/lang/Character.html#unicode"">surrogate</a>, the surrogate value is returned.
 * @param index   the index of the <code>char</code> value to be returned
 * @return  the specified <code>char</code> value
 * @throws IndexOutOfBoundsException if the <tt>index</tt> argument is negative or not less than <tt>length()</tt>
 */
char charAt(int index);"
77420,"/** 
 * Determines if the specified character is ISO-LATIN-1 white space. This method returns   {@code true} for the following fivecharacters only: <table> <tr><td> {@code '\t'}</td>            <td>  {@code U+0009}</td> <td>  {@code HORIZONTAL TABULATION}</td></tr> <tr><td>  {@code '\n'}</td>            <td>  {@code U+000A}</td> <td>  {@code NEW LINE}</td></tr> <tr><td>  {@code '\f'}</td>            <td>  {@code U+000C}</td> <td>  {@code FORM FEED}</td></tr> <tr><td>  {@code '\r'}</td>            <td>  {@code U+000D}</td> <td>  {@code CARRIAGE RETURN}</td></tr> <tr><td>  {@code '&nbsp;'}</td>  <td>  {@code U+0020}</td> <td>  {@code SPACE}</td></tr> </table>
 * @param ch   the character to be tested.
 * @return     {@code true} if the character is ISO-LATIN-1 whitespace;  {@code false} otherwise.
 * @see Character#isSpaceChar(char)
 * @see Character#isWhitespace(char)
 * @deprecated Replaced by isWhitespace(char).
 */
@Deprecated public static boolean isSpace(char ch){
  return (ch <= 0x0020) && (((((1L << 0x0009) | (1L << 0x000A) | (1L << 0x000C)| (1L << 0x000D)| (1L << 0x0020)) >> ch) & 1L) != 0);
}","/** 
 * Determines if the specified character is ISO-LATIN-1 white space. This method returns   {@code true} for the following fivecharacters only: <table summary=""truechars""> <tr><td> {@code '\t'}</td>            <td>  {@code U+0009}</td> <td>  {@code HORIZONTAL TABULATION}</td></tr> <tr><td>  {@code '\n'}</td>            <td>  {@code U+000A}</td> <td>  {@code NEW LINE}</td></tr> <tr><td>  {@code '\f'}</td>            <td>  {@code U+000C}</td> <td>  {@code FORM FEED}</td></tr> <tr><td>  {@code '\r'}</td>            <td>  {@code U+000D}</td> <td>  {@code CARRIAGE RETURN}</td></tr> <tr><td>  {@code '&nbsp;'}</td>  <td>  {@code U+0020}</td> <td>  {@code SPACE}</td></tr> </table>
 * @param ch   the character to be tested.
 * @return     {@code true} if the character is ISO-LATIN-1 whitespace;  {@code false} otherwise.
 * @see Character#isSpaceChar(char)
 * @see Character#isWhitespace(char)
 * @deprecated Replaced by isWhitespace(char).
 */
@Deprecated public static boolean isSpace(char ch){
  return (ch <= 0x0020) && (((((1L << 0x0009) | (1L << 0x000A) | (1L << 0x000C)| (1L << 0x000D)| (1L << 0x0020)) >> ch) & 1L) != 0);
}"
77421,"/** 
 * Returns the value obtained by reversing the order of the bytes in the specified <tt>char</tt> value.
 * @return the value obtained by reversing (or, equivalently, swapping)the bytes in the specified <tt>char</tt> value.
 * @since 1.5
 */
public static char reverseBytes(char ch){
  return (char)(((ch & 0xFF00) >> 8) | (ch << 8));
}","/** 
 * Returns the value obtained by reversing the order of the bytes in the specified <tt>char</tt> value.
 * @param ch The {@code char} of which to reverse the byte order.
 * @return the value obtained by reversing (or, equivalently, swapping)the bytes in the specified <tt>char</tt> value.
 * @since 1.5
 */
public static char reverseBytes(char ch){
  return (char)(((ch & 0xFF00) >> 8) | (ch << 8));
}"
77422,"/** 
 * Returns a hash code for a   {@code char} value; compatible with{@code Character.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code char} value.
 */
public static int hashCode(char value){
  return (int)value;
}","/** 
 * Returns a hash code for a   {@code char} value; compatible with{@code Character.hashCode()}.
 * @since 1.8
 * @param value The {@code char} for which to return a hash code.
 * @return a hash code value for a {@code char} value.
 */
public static int hashCode(char value){
  return (int)value;
}"
77423,"/** 
 * Finds the resource with the given name. Class loader implementations should override this method to specify where to find resources.  </p>
 * @param name The resource name
 * @return  A <tt>URL</tt> object for reading the resource, or<tt>null</tt> if the resource could not be found
 * @since  1.2
 */
protected URL findResource(String name){
  return null;
}","/** 
 * Finds the resource with the given name. Class loader implementations should override this method to specify where to find resources.
 * @param name The resource name
 * @return  A <tt>URL</tt> object for reading the resource, or<tt>null</tt> if the resource could not be found
 * @since  1.2
 */
protected URL findResource(String name){
  return null;
}"
77424,"/** 
 * Sets the default assertion status for this class loader to <tt>false</tt> and discards any package defaults or class assertion status settings associated with the class loader.  This method is provided so that class loaders can be made to ignore any command line or persistent assertion status settings and ""start with a clean slate."" </p>
 * @since  1.4
 */
public void clearAssertionStatus(){
synchronized (assertionLock) {
    classAssertionStatus=new HashMap<>();
    packageAssertionStatus=new HashMap<>();
    defaultAssertionStatus=false;
  }
}","/** 
 * Sets the default assertion status for this class loader to <tt>false</tt> and discards any package defaults or class assertion status settings associated with the class loader.  This method is provided so that class loaders can be made to ignore any command line or persistent assertion status settings and ""start with a clean slate.""
 * @since  1.4
 */
public void clearAssertionStatus(){
synchronized (assertionLock) {
    classAssertionStatus=new HashMap<>();
    packageAssertionStatus=new HashMap<>();
    defaultAssertionStatus=false;
  }
}"
77425,"/** 
 * Registers the caller as parallel capable.</p> The registration succeeds if and only if all of the following conditions are met: <br> 1. no instance of the caller has been created</p> 2. all of the super classes (except class Object) of the caller are registered as parallel capable</p> Note that once a class loader is registered as parallel capable, there is no way to change it back. </p>
 * @return  true if the caller is successfully registered asparallel capable and false if otherwise.
 * @since   1.7
 */
@CallerSensitive protected static boolean registerAsParallelCapable(){
  Class<? extends ClassLoader> callerClass=Reflection.getCallerClass().asSubclass(ClassLoader.class);
  return ParallelLoaders.register(callerClass);
}","/** 
 * Registers the caller as parallel capable. The registration succeeds if and only if all of the following conditions are met: <ol> <li> no instance of the caller has been created</li> <li> all of the super classes (except class Object) of the caller are registered as parallel capable</li> </ol> <p>Note that once a class loader is registered as parallel capable, there is no way to change it back.</p>
 * @return  true if the caller is successfully registered asparallel capable and false if otherwise.
 * @since   1.7
 */
@CallerSensitive protected static boolean registerAsParallelCapable(){
  Class<? extends ClassLoader> callerClass=Reflection.getCallerClass().asSubclass(ClassLoader.class);
  return ParallelLoaders.register(callerClass);
}"
77426,"/** 
 * Returns a <tt>Package</tt> that has been defined by this class loader or any of its ancestors.  </p>
 * @param name The package name
 * @return  The <tt>Package</tt> corresponding to the given name, or<tt>null</tt> if not found
 * @since  1.2
 */
protected Package getPackage(String name){
  Package pkg;
synchronized (packages) {
    pkg=packages.get(name);
  }
  if (pkg == null) {
    if (parent != null) {
      pkg=parent.getPackage(name);
    }
 else {
      pkg=Package.getSystemPackage(name);
    }
    if (pkg != null) {
synchronized (packages) {
        Package pkg2=packages.get(name);
        if (pkg2 == null) {
          packages.put(name,pkg);
        }
 else {
          pkg=pkg2;
        }
      }
    }
  }
  return pkg;
}","/** 
 * Returns a <tt>Package</tt> that has been defined by this class loader or any of its ancestors.
 * @param name The package name
 * @return  The <tt>Package</tt> corresponding to the given name, or<tt>null</tt> if not found
 * @since  1.2
 */
protected Package getPackage(String name){
  Package pkg;
synchronized (packages) {
    pkg=packages.get(name);
  }
  if (pkg == null) {
    if (parent != null) {
      pkg=parent.getPackage(name);
    }
 else {
      pkg=Package.getSystemPackage(name);
    }
    if (pkg != null) {
synchronized (packages) {
        Package pkg2=packages.get(name);
        if (pkg2 == null) {
          packages.put(name,pkg);
        }
 else {
          pkg=pkg2;
        }
      }
    }
  }
  return pkg;
}"
77427,"/** 
 * Returns an enumeration of   {@link java.net.URL <tt>URL</tt>} objectsrepresenting all the resources with the given name. Class loader implementations should override this method to specify where to load resources from.  </p>
 * @param name The resource name
 * @return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects forthe resources
 * @throws IOException If I/O errors occur
 * @since  1.2
 */
protected Enumeration<URL> findResources(String name) throws IOException {
  return java.util.Collections.emptyEnumeration();
}","/** 
 * Returns an enumeration of   {@link java.net.URL <tt>URL</tt>} objectsrepresenting all the resources with the given name. Class loader implementations should override this method to specify where to load resources from.
 * @param name The resource name
 * @return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects forthe resources
 * @throws IOException If I/O errors occur
 * @since  1.2
 */
protected Enumeration<URL> findResources(String name) throws IOException {
  return java.util.Collections.emptyEnumeration();
}"
77428,"/** 
 * Finds the class with the specified <a href=""#name"">binary name</a>. This method should be overridden by class loader implementations that follow the delegation model for loading classes, and will be invoked by the   {@link #loadClass <tt>loadClass</tt>} method after checking theparent class loader for the requested class.  The default implementation throws a <tt>ClassNotFoundException</tt>.  </p>
 * @param name The <a href=""#name"">binary name</a> of the class
 * @return  The resulting <tt>Class</tt> object
 * @throws ClassNotFoundException If the class could not be found
 * @since  1.2
 */
protected Class<?> findClass(String name) throws ClassNotFoundException {
  throw new ClassNotFoundException(name);
}","/** 
 * Finds the class with the specified <a href=""#name"">binary name</a>. This method should be overridden by class loader implementations that follow the delegation model for loading classes, and will be invoked by the   {@link #loadClass <tt>loadClass</tt>} method after checking theparent class loader for the requested class.  The default implementation throws a <tt>ClassNotFoundException</tt>.
 * @param name The <a href=""#name"">binary name</a> of the class
 * @return  The resulting <tt>Class</tt> object
 * @throws ClassNotFoundException If the class could not be found
 * @since  1.2
 */
protected Class<?> findClass(String name) throws ClassNotFoundException {
  throw new ClassNotFoundException(name);
}"
77429,"/** 
 * Open for reading, a resource of the specified name from the search path used to load classes.  This method locates the resource through the system class loader (see   {@link #getSystemClassLoader()}).  </p>
 * @param name The resource name
 * @return  An input stream for reading the resource, or <tt>null</tt>if the resource could not be found
 * @since  1.1
 */
public static InputStream getSystemResourceAsStream(String name){
  URL url=getSystemResource(name);
  try {
    return url != null ? url.openStream() : null;
  }
 catch (  IOException e) {
    return null;
  }
}","/** 
 * Open for reading, a resource of the specified name from the search path used to load classes.  This method locates the resource through the system class loader (see   {@link #getSystemClassLoader()}).
 * @param name The resource name
 * @return  An input stream for reading the resource, or <tt>null</tt>if the resource could not be found
 * @since  1.1
 */
public static InputStream getSystemResourceAsStream(String name){
  URL url=getSystemResource(name);
  try {
    return url != null ? url.openStream() : null;
  }
 catch (  IOException e) {
    return null;
  }
}"
77430,"/** 
 * Links the specified class.  This (misleadingly named) method may be used by a class loader to link a class.  If the class <tt>c</tt> has already been linked, then this method simply returns. Otherwise, the class is linked as described in the ""Execution"" chapter of <cite>The Java&trade; Language Specification</cite>. </p>
 * @param c The class to link
 * @throws NullPointerException If <tt>c</tt> is <tt>null</tt>.
 * @see #defineClass(String,byte[],int,int)
 */
protected final void resolveClass(Class<?> c){
  resolveClass0(c);
}","/** 
 * Links the specified class.  This (misleadingly named) method may be used by a class loader to link a class.  If the class <tt>c</tt> has already been linked, then this method simply returns. Otherwise, the class is linked as described in the ""Execution"" chapter of <cite>The Java&trade; Language Specification</cite>.
 * @param c The class to link
 * @throws NullPointerException If <tt>c</tt> is <tt>null</tt>.
 * @see #defineClass(String,byte[],int,int)
 */
protected final void resolveClass(Class<?> c){
  resolveClass0(c);
}"
77431,"/** 
 * Sets the default assertion status for this class loader.  This setting determines whether classes loaded by this class loader and initialized in the future will have assertions enabled or disabled by default. This setting may be overridden on a per-package or per-class basis by invoking   {@link #setPackageAssertionStatus(String,boolean)} or {@link #setClassAssertionStatus(String,boolean)}.  </p>
 * @param enabled <tt>true</tt> if classes loaded by this class loader will henceforth have assertions enabled by default, <tt>false</tt> if they will have assertions disabled by default.
 * @since  1.4
 */
public void setDefaultAssertionStatus(boolean enabled){
synchronized (assertionLock) {
    if (classAssertionStatus == null)     initializeJavaAssertionMaps();
    defaultAssertionStatus=enabled;
  }
}","/** 
 * Sets the default assertion status for this class loader.  This setting determines whether classes loaded by this class loader and initialized in the future will have assertions enabled or disabled by default. This setting may be overridden on a per-package or per-class basis by invoking   {@link #setPackageAssertionStatus(String,boolean)} or {@link #setClassAssertionStatus(String,boolean)}.
 * @param enabled <tt>true</tt> if classes loaded by this class loader will henceforth have assertions enabled by default, <tt>false</tt> if they will have assertions disabled by default.
 * @since  1.4
 */
public void setDefaultAssertionStatus(boolean enabled){
synchronized (assertionLock) {
    if (classAssertionStatus == null)     initializeJavaAssertionMaps();
    defaultAssertionStatus=enabled;
  }
}"
77432,"/** 
 * Defines a package by name in this <tt>ClassLoader</tt>.  This allows class loaders to define the packages for their classes. Packages must be created before the class is defined, and package names must be unique within a class loader and cannot be redefined or changed once created.  </p>
 * @param name The package name
 * @param specTitle The specification title
 * @param specVersion The specification version
 * @param specVendor The specification vendor
 * @param implTitle The implementation title
 * @param implVersion The implementation version
 * @param implVendor The implementation vendor
 * @param sealBase If not <tt>null</tt>, then this package is sealed with respect to the given code source  {@link java.net.URL <tt>URL</tt>}  object.  Otherwise, the package is not sealed.
 * @return  The newly defined <tt>Package</tt> object
 * @throws IllegalArgumentException If package name duplicates an existing package either in this class loader or one of its ancestors
 * @since  1.2
 */
protected Package definePackage(String name,String specTitle,String specVersion,String specVendor,String implTitle,String implVersion,String implVendor,URL sealBase) throws IllegalArgumentException {
synchronized (packages) {
    Package pkg=getPackage(name);
    if (pkg != null) {
      throw new IllegalArgumentException(name);
    }
    pkg=new Package(name,specTitle,specVersion,specVendor,implTitle,implVersion,implVendor,sealBase,this);
    packages.put(name,pkg);
    return pkg;
  }
}","/** 
 * Defines a package by name in this <tt>ClassLoader</tt>.  This allows class loaders to define the packages for their classes. Packages must be created before the class is defined, and package names must be unique within a class loader and cannot be redefined or changed once created.
 * @param name The package name
 * @param specTitle The specification title
 * @param specVersion The specification version
 * @param specVendor The specification vendor
 * @param implTitle The implementation title
 * @param implVersion The implementation version
 * @param implVendor The implementation vendor
 * @param sealBase If not <tt>null</tt>, then this package is sealed with respect to the given code source  {@link java.net.URL <tt>URL</tt>}  object.  Otherwise, the package is not sealed.
 * @return  The newly defined <tt>Package</tt> object
 * @throws IllegalArgumentException If package name duplicates an existing package either in this class loader or one of its ancestors
 * @since  1.2
 */
protected Package definePackage(String name,String specTitle,String specVersion,String specVendor,String implTitle,String implVersion,String implVendor,URL sealBase) throws IllegalArgumentException {
synchronized (packages) {
    Package pkg=getPackage(name);
    if (pkg != null) {
      throw new IllegalArgumentException(name);
    }
    pkg=new Package(name,specTitle,specVersion,specVendor,implTitle,implVersion,implVendor,sealBase,this);
    packages.put(name,pkg);
    return pkg;
  }
}"
77433,"/** 
 * Converts a   {@link java.nio.ByteBuffer <tt>ByteBuffer</tt>}into an instance of class <tt>Class</tt>, with an optional <tt>ProtectionDomain</tt>.  If the domain is <tt>null</tt>, then a default domain will be assigned to the class as specified in the documentation for   {@link #defineClass(String,byte[],int,int)}.  Before the class can be used it must be resolved. <p>The rules about the first class defined in a package determining the set of certificates for the package, and the restrictions on class names are identical to those specified in the documentation for   {@link #defineClass(String,byte[],int,int,ProtectionDomain)}. <p> An invocation of this method of the form <i>cl</i><tt>.defineClass(</tt><i>name</i><tt>,</tt> <i>bBuffer</i><tt>,</tt> <i>pd</i><tt>)</tt> yields exactly the same result as the statements <blockquote><tt> ...<br> byte[] temp = new byte[</tt><i>bBuffer</i><tt>.  {@link java.nio.ByteBuffer#remaining remaining}()];<br> </tt><i>bBuffer</i><tt>.  {@link java.nio.ByteBuffer#get(byte[]) get}(temp);<br> return   {@link #defineClass(String,byte[],int,int,ProtectionDomain) </tt><i>cl</i><tt>.defineClass}(</tt><i>name</i><tt>, temp, 0, temp.length, </tt><i>pd</i><tt>);<br> </tt></blockquote>
 * @param name The expected <a href=""#name"">binary name</a>. of the class, or <tt>null</tt> if not known
 * @param b The bytes that make up the class data. The bytes from positions <tt>b.position()</tt> through <tt>b.position() + b.limit() -1 </tt> should have the format of a valid class file as defined by <cite>The Java&trade; Virtual Machine Specification</cite>.
 * @param protectionDomain The ProtectionDomain of the class, or <tt>null</tt>.
 * @return  The <tt>Class</tt> object created from the data,and optional <tt>ProtectionDomain</tt>.
 * @throws ClassFormatError If the data did not contain a valid class.
 * @throws NoClassDefFoundError If <tt>name</tt> is not equal to the <a href=""#name"">binary name</a> of the class specified by <tt>b</tt>
 * @throws SecurityException If an attempt is made to add this class to a package that contains classes that were signed by a different set of certificates than this class, or if <tt>name</tt> begins with ""<tt>java.</tt>"".
 * @see #defineClass(String,byte[],int,int,ProtectionDomain)
 * @since  1.5
 */
protected final Class<?> defineClass(String name,java.nio.ByteBuffer b,ProtectionDomain protectionDomain) throws ClassFormatError {
  int len=b.remaining();
  if (!b.isDirect()) {
    if (b.hasArray()) {
      return defineClass(name,b.array(),b.position() + b.arrayOffset(),len,protectionDomain);
    }
 else {
      byte[] tb=new byte[len];
      b.get(tb);
      return defineClass(name,tb,0,len,protectionDomain);
    }
  }
  protectionDomain=preDefineClass(name,protectionDomain);
  String source=defineClassSourceLocation(protectionDomain);
  Class<?> c=defineClass2(name,b,b.position(),len,protectionDomain,source);
  postDefineClass(c,protectionDomain);
  return c;
}","/** 
 * Converts a   {@link java.nio.ByteBuffer <tt>ByteBuffer</tt>}into an instance of class <tt>Class</tt>, with an optional <tt>ProtectionDomain</tt>.  If the domain is <tt>null</tt>, then a default domain will be assigned to the class as specified in the documentation for   {@link #defineClass(String,byte[],int,int)}.  Before the class can be used it must be resolved. <p>The rules about the first class defined in a package determining the set of certificates for the package, and the restrictions on class names are identical to those specified in the documentation for   {@link #defineClass(String,byte[],int,int,ProtectionDomain)}. <p> An invocation of this method of the form <i>cl</i><tt>.defineClass(</tt><i>name</i><tt>,</tt> <i>bBuffer</i><tt>,</tt> <i>pd</i><tt>)</tt> yields exactly the same result as the statements <p> <tt> ...<br> byte[] temp = new byte[bBuffer.  {@link java.nio.ByteBuffer#remaining remaining}()];<br> bBuffer.  {@link java.nio.ByteBuffer#get(byte[]) get}(temp);<br> return   {@link #defineClass(String,byte[],int,int,ProtectionDomain) cl.defineClass}(name, temp, 0, temp.length, pd);<br> </tt></p>
 * @param name The expected <a href=""#name"">binary name</a>. of the class, or <tt>null</tt> if not known
 * @param b The bytes that make up the class data. The bytes from positions <tt>b.position()</tt> through <tt>b.position() + b.limit() -1 </tt> should have the format of a valid class file as defined by <cite>The Java&trade; Virtual Machine Specification</cite>.
 * @param protectionDomain The ProtectionDomain of the class, or <tt>null</tt>.
 * @return  The <tt>Class</tt> object created from the data,and optional <tt>ProtectionDomain</tt>.
 * @throws ClassFormatError If the data did not contain a valid class.
 * @throws NoClassDefFoundError If <tt>name</tt> is not equal to the <a href=""#name"">binary name</a> of the class specified by <tt>b</tt>
 * @throws SecurityException If an attempt is made to add this class to a package that contains classes that were signed by a different set of certificates than this class, or if <tt>name</tt> begins with ""<tt>java.</tt>"".
 * @see #defineClass(String,byte[],int,int,ProtectionDomain)
 * @since  1.5
 */
protected final Class<?> defineClass(String name,java.nio.ByteBuffer b,ProtectionDomain protectionDomain) throws ClassFormatError {
  int len=b.remaining();
  if (!b.isDirect()) {
    if (b.hasArray()) {
      return defineClass(name,b.array(),b.position() + b.arrayOffset(),len,protectionDomain);
    }
 else {
      byte[] tb=new byte[len];
      b.get(tb);
      return defineClass(name,tb,0,len,protectionDomain);
    }
  }
  protectionDomain=preDefineClass(name,protectionDomain);
  String source=defineClassSourceLocation(protectionDomain);
  Class<?> c=defineClass2(name,b,b.position(),len,protectionDomain,source);
  postDefineClass(c,protectionDomain);
  return c;
}"
77434,"/** 
 * Returns the class with the given <a href=""#name"">binary name</a> if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that <a href=""#name"">binary name</a>.  Otherwise <tt>null</tt> is returned.  </p>
 * @param name The <a href=""#name"">binary name</a> of the class
 * @return  The <tt>Class</tt> object, or <tt>null</tt> if the class hasnot been loaded
 * @since  1.1
 */
protected final Class<?> findLoadedClass(String name){
  if (!checkName(name))   return null;
  return findLoadedClass0(name);
}","/** 
 * Returns the class with the given <a href=""#name"">binary name</a> if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that <a href=""#name"">binary name</a>.  Otherwise <tt>null</tt> is returned.
 * @param name The <a href=""#name"">binary name</a> of the class
 * @return  The <tt>Class</tt> object, or <tt>null</tt> if the class hasnot been loaded
 * @since  1.1
 */
protected final Class<?> findLoadedClass(String name){
  if (!checkName(name))   return null;
  return findLoadedClass0(name);
}"
77435,"/** 
 * Find a resource of the specified name from the search path used to load classes.  This method locates the resource through the system class loader (see   {@link #getSystemClassLoader()}).  </p>
 * @param name The resource name
 * @return  A {@link java.net.URL <tt>URL</tt>} object for reading theresource, or <tt>null</tt> if the resource could not be found
 * @since  1.1
 */
public static URL getSystemResource(String name){
  ClassLoader system=getSystemClassLoader();
  if (system == null) {
    return getBootstrapResource(name);
  }
  return system.getResource(name);
}","/** 
 * Find a resource of the specified name from the search path used to load classes.  This method locates the resource through the system class loader (see   {@link #getSystemClassLoader()}).
 * @param name The resource name
 * @return  A {@link java.net.URL <tt>URL</tt>} object for reading theresource, or <tt>null</tt> if the resource could not be found
 * @since  1.1
 */
public static URL getSystemResource(String name){
  ClassLoader system=getSystemClassLoader();
  if (system == null) {
    return getBootstrapResource(name);
  }
  return system.getResource(name);
}"
77436,"/** 
 * Sets the signers of a class.  This should be invoked after defining a class.  </p>
 * @param c The <tt>Class</tt> object
 * @param signers The signers for the class
 * @since  1.1
 */
protected final void setSigners(Class<?> c,Object[] signers){
  c.setSigners(signers);
}","/** 
 * Sets the signers of a class.  This should be invoked after defining a class.
 * @param c The <tt>Class</tt> object
 * @param signers The signers for the class
 * @since  1.1
 */
protected final void setSigners(Class<?> c,Object[] signers){
  c.setSigners(signers);
}"
77437,"/** 
 * Returns all of the <tt>Packages</tt> defined by this class loader and its ancestors.  </p>
 * @return  The array of <tt>Package</tt> objects defined by this<tt>ClassLoader</tt>
 * @since  1.2
 */
protected Package[] getPackages(){
  Map<String,Package> map;
synchronized (packages) {
    map=new HashMap<>(packages);
  }
  Package[] pkgs;
  if (parent != null) {
    pkgs=parent.getPackages();
  }
 else {
    pkgs=Package.getSystemPackages();
  }
  if (pkgs != null) {
    for (int i=0; i < pkgs.length; i++) {
      String pkgName=pkgs[i].getName();
      if (map.get(pkgName) == null) {
        map.put(pkgName,pkgs[i]);
      }
    }
  }
  return map.values().toArray(new Package[map.size()]);
}","/** 
 * Returns all of the <tt>Packages</tt> defined by this class loader and its ancestors.
 * @return  The array of <tt>Package</tt> objects defined by this<tt>ClassLoader</tt>
 * @since  1.2
 */
protected Package[] getPackages(){
  Map<String,Package> map;
synchronized (packages) {
    map=new HashMap<>(packages);
  }
  Package[] pkgs;
  if (parent != null) {
    pkgs=parent.getPackages();
  }
 else {
    pkgs=Package.getSystemPackages();
  }
  if (pkgs != null) {
    for (int i=0; i < pkgs.length; i++) {
      String pkgName=pkgs[i].getName();
      if (map.get(pkgName) == null) {
        map.put(pkgName,pkgs[i]);
      }
    }
  }
  return map.values().toArray(new Package[map.size()]);
}"
77438,"/** 
 * Returns the lock object for class loading operations. For backward compatibility, the default implementation of this method behaves as follows. If this ClassLoader object is registered as parallel capable, the method returns a dedicated object associated with the specified class name. Otherwise, the method returns this ClassLoader object. </p>
 * @param className The name of the to-be-loaded class
 * @return the lock for class loading operations
 * @throws NullPointerException If registered as parallel capable and <tt>className</tt> is null
 * @see #loadClass(String,boolean)
 * @since  1.7
 */
protected Object getClassLoadingLock(String className){
  Object lock=this;
  if (parallelLockMap != null) {
    Object newLock=new Object();
    lock=parallelLockMap.putIfAbsent(className,newLock);
    if (lock == null) {
      lock=newLock;
    }
  }
  return lock;
}","/** 
 * Returns the lock object for class loading operations. For backward compatibility, the default implementation of this method behaves as follows. If this ClassLoader object is registered as parallel capable, the method returns a dedicated object associated with the specified class name. Otherwise, the method returns this ClassLoader object.
 * @param className The name of the to-be-loaded class
 * @return the lock for class loading operations
 * @throws NullPointerException If registered as parallel capable and <tt>className</tt> is null
 * @see #loadClass(String,boolean)
 * @since  1.7
 */
protected Object getClassLoadingLock(String className){
  Object lock=this;
  if (parallelLockMap != null) {
    Object newLock=new Object();
    lock=parallelLockMap.putIfAbsent(className,newLock);
    if (lock == null) {
      lock=newLock;
    }
  }
  return lock;
}"
77439,"/** 
 * Returns the absolute path name of a native library.  The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. If this method returns <tt>null</tt>, the VM searches the library along the path specified as the ""<tt>java.library.path</tt>"" property.  </p>
 * @param libname The library name
 * @return  The absolute path of the native library
 * @see System#loadLibrary(String)
 * @see System#mapLibraryName(String)
 * @since  1.2
 */
protected String findLibrary(String libname){
  return null;
}","/** 
 * Returns the absolute path name of a native library.  The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. If this method returns <tt>null</tt>, the VM searches the library along the path specified as the ""<tt>java.library.path</tt>"" property.
 * @param libname The library name
 * @return  The absolute path of the native library
 * @see System#loadLibrary(String)
 * @see System#mapLibraryName(String)
 * @since  1.2
 */
protected String findLibrary(String libname){
  return null;
}"
77440,"/** 
 * Returns a hexadecimal string representation of the  {@code double} argument. All characters mentioned beloware ASCII characters. <ul> <li>If the argument is NaN, the result is the string "" {@code NaN}"". <li>Otherwise, the result is a string that represents the sign and magnitude of the argument. If the sign is negative, the first character of the result is '  {@code -}' (  {@code '\u005Cu002D'}); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>: <ul> <li>If <i>m</i> is infinity, it is represented by the string  {@code ""Infinity""}; thus, positive infinity produces the result   {@code ""Infinity""} and negative infinity producesthe result  {@code ""-Infinity""}. <li>If <i>m</i> is zero, it is represented by the string  {@code ""0x0.0p0""}; thus, negative zero produces the result  {@code ""-0x0.0p0""} and positive zero produces the result{@code ""0x0.0p0""}. <li>If <i>m</i> is a   {@code double} value with anormalized representation, substrings are used to represent the significand and exponent fields.  The significand is represented by the characters  {@code ""0x1.""}followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by   {@code ""p""} followedby a decimal string of the unbiased exponent as if produced by a call to  {@link Integer#toString(int) Integer.toString} on theexponent value. <li>If <i>m</i> is a  {@code double} value with a subnormalrepresentation, the significand is represented by the characters  {@code ""0x0.""} followed by ahexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by {@code ""p-1022""}.  Note that there must be at least one nonzero digit in a subnormal significand. </ul> </ul> <table border> <caption><h3>Examples</h3></caption> <tr><th>Floating-point Value</th><th>Hexadecimal String</th> <tr><td>  {@code 1.0}</td> <td>  {@code 0x1.0p0}</td> <tr><td>  {@code -1.0}</td>        <td>  {@code -0x1.0p0}</td> <tr><td>  {@code 2.0}</td> <td>  {@code 0x1.0p1}</td> <tr><td>  {@code 3.0}</td> <td>  {@code 0x1.8p1}</td> <tr><td>  {@code 0.5}</td> <td>  {@code 0x1.0p-1}</td> <tr><td>  {@code 0.25}</td>        <td>  {@code 0x1.0p-2}</td> <tr><td>  {@code Double.MAX_VALUE}</td> <td>  {@code 0x1.fffffffffffffp1023}</td> <tr><td>  {@code Minimum Normal Value}</td> <td>  {@code 0x1.0p-1022}</td> <tr><td>  {@code Maximum Subnormal Value}</td> <td>  {@code 0x0.fffffffffffffp-1022}</td> <tr><td>  {@code Double.MIN_VALUE}</td> <td>  {@code 0x0.0000000000001p-1022}</td> </table>
 * @param d   the {@code double} to be converted.
 * @return a hex string representation of the argument.
 * @since 1.5
 * @author Joseph D. Darcy
 */
public static String toHexString(double d){
  if (!isFinite(d))   return Double.toString(d);
 else {
    StringBuilder answer=new StringBuilder(24);
    if (Math.copySign(1.0,d) == -1.0)     answer.append(""String_Node_Str"");
    answer.append(""String_Node_Str"");
    d=Math.abs(d);
    if (d == 0.0) {
      answer.append(""String_Node_Str"");
    }
 else {
      boolean subnormal=(d < DoubleConsts.MIN_NORMAL);
      long signifBits=(Double.doubleToLongBits(d) & DoubleConsts.SIGNIF_BIT_MASK) | 0x1000000000000000L;
      answer.append(subnormal ? ""String_Node_Str"" : ""String_Node_Str"");
      String signif=Long.toHexString(signifBits).substring(3,16);
      answer.append(signif.equals(""String_Node_Str"") ? ""String_Node_Str"" : signif.replaceFirst(""String_Node_Str"",""String_Node_Str""));
      answer.append('p');
      answer.append(subnormal ? DoubleConsts.MIN_EXPONENT : Math.getExponent(d));
    }
    return answer.toString();
  }
}","/** 
 * Returns a hexadecimal string representation of the  {@code double} argument. All characters mentioned beloware ASCII characters. <ul> <li>If the argument is NaN, the result is the string "" {@code NaN}"". <li>Otherwise, the result is a string that represents the sign and magnitude of the argument. If the sign is negative, the first character of the result is '  {@code -}' (  {@code '\u005Cu002D'}); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>: <ul> <li>If <i>m</i> is infinity, it is represented by the string  {@code ""Infinity""}; thus, positive infinity produces the result   {@code ""Infinity""} and negative infinity producesthe result  {@code ""-Infinity""}. <li>If <i>m</i> is zero, it is represented by the string  {@code ""0x0.0p0""}; thus, negative zero produces the result  {@code ""-0x0.0p0""} and positive zero produces the result{@code ""0x0.0p0""}. <li>If <i>m</i> is a   {@code double} value with anormalized representation, substrings are used to represent the significand and exponent fields.  The significand is represented by the characters  {@code ""0x1.""}followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by   {@code ""p""} followedby a decimal string of the unbiased exponent as if produced by a call to  {@link Integer#toString(int) Integer.toString} on theexponent value. <li>If <i>m</i> is a  {@code double} value with a subnormalrepresentation, the significand is represented by the characters  {@code ""0x0.""} followed by ahexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by {@code ""p-1022""}.  Note that there must be at least one nonzero digit in a subnormal significand. </ul> </ul> <table border> <caption>Examples</caption> <tr><th>Floating-point Value</th><th>Hexadecimal String</th> <tr><td>  {@code 1.0}</td> <td>  {@code 0x1.0p0}</td> <tr><td>  {@code -1.0}</td>        <td>  {@code -0x1.0p0}</td> <tr><td>  {@code 2.0}</td> <td>  {@code 0x1.0p1}</td> <tr><td>  {@code 3.0}</td> <td>  {@code 0x1.8p1}</td> <tr><td>  {@code 0.5}</td> <td>  {@code 0x1.0p-1}</td> <tr><td>  {@code 0.25}</td>        <td>  {@code 0x1.0p-2}</td> <tr><td>  {@code Double.MAX_VALUE}</td> <td>  {@code 0x1.fffffffffffffp1023}</td> <tr><td>  {@code Minimum Normal Value}</td> <td>  {@code 0x1.0p-1022}</td> <tr><td>  {@code Maximum Subnormal Value}</td> <td>  {@code 0x0.fffffffffffffp-1022}</td> <tr><td>  {@code Double.MIN_VALUE}</td> <td>  {@code 0x0.0000000000001p-1022}</td> </table>
 * @param d   the {@code double} to be converted.
 * @return a hex string representation of the argument.
 * @since 1.5
 * @author Joseph D. Darcy
 */
public static String toHexString(double d){
  if (!isFinite(d))   return Double.toString(d);
 else {
    StringBuilder answer=new StringBuilder(24);
    if (Math.copySign(1.0,d) == -1.0)     answer.append(""String_Node_Str"");
    answer.append(""String_Node_Str"");
    d=Math.abs(d);
    if (d == 0.0) {
      answer.append(""String_Node_Str"");
    }
 else {
      boolean subnormal=(d < DoubleConsts.MIN_NORMAL);
      long signifBits=(Double.doubleToLongBits(d) & DoubleConsts.SIGNIF_BIT_MASK) | 0x1000000000000000L;
      answer.append(subnormal ? ""String_Node_Str"" : ""String_Node_Str"");
      String signif=Long.toHexString(signifBits).substring(3,16);
      answer.append(signif.equals(""String_Node_Str"") ? ""String_Node_Str"" : signif.replaceFirst(""String_Node_Str"",""String_Node_Str""));
      answer.append('p');
      answer.append(subnormal ? DoubleConsts.MIN_EXPONENT : Math.getExponent(d));
    }
    return answer.toString();
  }
}"
77441,"/** 
 * Returns a hexadecimal string representation of the  {@code float} argument. All characters mentioned below areASCII characters. <ul> <li>If the argument is NaN, the result is the string "" {@code NaN}"". <li>Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '  {@code -}' (  {@code '\u005Cu002D'}); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>: <ul> <li>If <i>m</i> is infinity, it is represented by the string  {@code ""Infinity""}; thus, positive infinity produces the result   {@code ""Infinity""} and negative infinity producesthe result  {@code ""-Infinity""}. <li>If <i>m</i> is zero, it is represented by the string  {@code ""0x0.0p0""}; thus, negative zero produces the result  {@code ""-0x0.0p0""} and positive zero produces the result{@code ""0x0.0p0""}. <li>If <i>m</i> is a   {@code float} value with anormalized representation, substrings are used to represent the significand and exponent fields.  The significand is represented by the characters  {@code ""0x1.""}followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by   {@code ""p""} followedby a decimal string of the unbiased exponent as if produced by a call to  {@link Integer#toString(int) Integer.toString} on theexponent value. <li>If <i>m</i> is a  {@code float} value with a subnormalrepresentation, the significand is represented by the characters  {@code ""0x0.""} followed by ahexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by {@code ""p-126""}.  Note that there must be at least one nonzero digit in a subnormal significand. </ul> </ul> <table border> <caption><h3>Examples</h3></caption> <tr><th>Floating-point Value</th><th>Hexadecimal String</th> <tr><td>  {@code 1.0}</td> <td>  {@code 0x1.0p0}</td> <tr><td>  {@code -1.0}</td>        <td>  {@code -0x1.0p0}</td> <tr><td>  {@code 2.0}</td> <td>  {@code 0x1.0p1}</td> <tr><td>  {@code 3.0}</td> <td>  {@code 0x1.8p1}</td> <tr><td>  {@code 0.5}</td> <td>  {@code 0x1.0p-1}</td> <tr><td>  {@code 0.25}</td>        <td>  {@code 0x1.0p-2}</td> <tr><td>  {@code Float.MAX_VALUE}</td> <td>  {@code 0x1.fffffep127}</td> <tr><td>  {@code Minimum Normal Value}</td> <td>  {@code 0x1.0p-126}</td> <tr><td>  {@code Maximum Subnormal Value}</td> <td>  {@code 0x0.fffffep-126}</td> <tr><td>  {@code Float.MIN_VALUE}</td> <td>  {@code 0x0.000002p-126}</td> </table>
 * @param f   the {@code float} to be converted.
 * @return a hex string representation of the argument.
 * @since 1.5
 * @author Joseph D. Darcy
 */
public static String toHexString(float f){
  if (Math.abs(f) < FloatConsts.MIN_NORMAL && f != 0.0f) {
    String s=Double.toHexString(Math.scalb((double)f,DoubleConsts.MIN_EXPONENT - FloatConsts.MIN_EXPONENT));
    return s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else   return Double.toHexString(f);
}","/** 
 * Returns a hexadecimal string representation of the  {@code float} argument. All characters mentioned below areASCII characters. <ul> <li>If the argument is NaN, the result is the string "" {@code NaN}"". <li>Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '  {@code -}' (  {@code '\u005Cu002D'}); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>: <ul> <li>If <i>m</i> is infinity, it is represented by the string  {@code ""Infinity""}; thus, positive infinity produces the result   {@code ""Infinity""} and negative infinity producesthe result  {@code ""-Infinity""}. <li>If <i>m</i> is zero, it is represented by the string  {@code ""0x0.0p0""}; thus, negative zero produces the result  {@code ""-0x0.0p0""} and positive zero produces the result{@code ""0x0.0p0""}. <li>If <i>m</i> is a   {@code float} value with anormalized representation, substrings are used to represent the significand and exponent fields.  The significand is represented by the characters  {@code ""0x1.""}followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by   {@code ""p""} followedby a decimal string of the unbiased exponent as if produced by a call to  {@link Integer#toString(int) Integer.toString} on theexponent value. <li>If <i>m</i> is a  {@code float} value with a subnormalrepresentation, the significand is represented by the characters  {@code ""0x0.""} followed by ahexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by {@code ""p-126""}.  Note that there must be at least one nonzero digit in a subnormal significand. </ul> </ul> <table border> <caption>Examples</caption> <tr><th>Floating-point Value</th><th>Hexadecimal String</th> <tr><td>  {@code 1.0}</td> <td>  {@code 0x1.0p0}</td> <tr><td>  {@code -1.0}</td>        <td>  {@code -0x1.0p0}</td> <tr><td>  {@code 2.0}</td> <td>  {@code 0x1.0p1}</td> <tr><td>  {@code 3.0}</td> <td>  {@code 0x1.8p1}</td> <tr><td>  {@code 0.5}</td> <td>  {@code 0x1.0p-1}</td> <tr><td>  {@code 0.25}</td>        <td>  {@code 0x1.0p-2}</td> <tr><td>  {@code Float.MAX_VALUE}</td> <td>  {@code 0x1.fffffep127}</td> <tr><td>  {@code Minimum Normal Value}</td> <td>  {@code 0x1.0p-126}</td> <tr><td>  {@code Maximum Subnormal Value}</td> <td>  {@code 0x0.fffffep-126}</td> <tr><td>  {@code Float.MIN_VALUE}</td> <td>  {@code 0x0.000002p-126}</td> </table>
 * @param f   the {@code float} to be converted.
 * @return a hex string representation of the argument.
 * @since 1.5
 * @author Joseph D. Darcy
 */
public static String toHexString(float f){
  if (Math.abs(f) < FloatConsts.MIN_NORMAL && f != 0.0f) {
    String s=Double.toHexString(Math.scalb((double)f,DoubleConsts.MIN_EXPONENT - FloatConsts.MIN_EXPONENT));
    return s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else   return Double.toHexString(f);
}"
77442,"/** 
 * Returns a redirect to append to the specified file. Each write operation first advances the position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. <p>It will always be true that <pre>   {@code Redirect.appendTo(file).file() == file && Redirect.appendTo(file).type() == Redirect.Type.APPEND}</pre>
 * @throws NullPointerException if the specified file is null
 * @return a redirect to append to the specified file
 */
public static Redirect appendTo(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.APPEND;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
    boolean append(){
      return true;
    }
  }
;
}","/** 
 * Returns a redirect to append to the specified file. Each write operation first advances the position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. <p>It will always be true that <pre>   {@code Redirect.appendTo(file).file() == file && Redirect.appendTo(file).type() == Redirect.Type.APPEND}</pre>
 * @param file The {@code File} for the {@code Redirect}.
 * @throws NullPointerException if the specified file is null
 * @return a redirect to append to the specified file
 */
public static Redirect appendTo(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.APPEND;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
    boolean append(){
      return true;
    }
  }
;
}"
77443,"/** 
 * Returns a redirect to read from the specified file. <p>It will always be true that <pre>   {@code Redirect.from(file).file() == file && Redirect.from(file).type() == Redirect.Type.READ}</pre>
 * @throws NullPointerException if the specified file is null
 * @return a redirect to read from the specified file
 */
public static Redirect from(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.READ;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
  }
;
}","/** 
 * Returns a redirect to read from the specified file. <p>It will always be true that <pre>   {@code Redirect.from(file).file() == file && Redirect.from(file).type() == Redirect.Type.READ}</pre>
 * @param file The {@code File} for the {@code Redirect}.
 * @throws NullPointerException if the specified file is null
 * @return a redirect to read from the specified file
 */
public static Redirect from(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.READ;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
  }
;
}"
77444,"/** 
 * Returns a redirect to write to the specified file. If the specified file exists when the subprocess is started, its previous contents will be discarded. <p>It will always be true that <pre>   {@code Redirect.to(file).file() == file && Redirect.to(file).type() == Redirect.Type.WRITE}</pre>
 * @throws NullPointerException if the specified file is null
 * @return a redirect to write to the specified file
 */
public static Redirect to(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.WRITE;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
    boolean append(){
      return false;
    }
  }
;
}","/** 
 * Returns a redirect to write to the specified file. If the specified file exists when the subprocess is started, its previous contents will be discarded. <p>It will always be true that <pre>   {@code Redirect.to(file).file() == file && Redirect.to(file).type() == Redirect.Type.WRITE}</pre>
 * @param file The {@code File} for the {@code Redirect}.
 * @throws NullPointerException if the specified file is null
 * @return a redirect to write to the specified file
 */
public static Redirect to(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.WRITE;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
    boolean append(){
      return false;
    }
  }
;
}"
77445,"/** 
 * Returns the maximum amount of memory that the Java virtual machine will attempt to use.  If there is no inherent limit then the value   {@link java.lang.Long#MAX_VALUE} will be returned. </p>
 * @return  the maximum amount of memory that the virtual machine willattempt to use, measured in bytes
 * @since 1.4
 */
public native long maxMemory();","/** 
 * Returns the maximum amount of memory that the Java virtual machine will attempt to use.  If there is no inherent limit then the value   {@link java.lang.Long#MAX_VALUE} will be returned.
 * @return  the maximum amount of memory that the virtual machine willattempt to use, measured in bytes
 * @since 1.4
 */
public native long maxMemory();"
77446,"/** 
 * Interrupts this thread. <p> Unless the current thread is interrupting itself, which is always permitted, the   {@link #checkAccess() checkAccess} methodof this thread is invoked, which may cause a  {@link SecurityException} to be thrown.<p> If this thread is blocked in an invocation of the  {@link Object#wait() wait()},   {@link Object#wait(long) wait(long)}, or   {@link Object#wait(long,int) wait(long, int)} methods of the {@link Object}class, or of the   {@link #join()},   {@link #join(long)},   {@link #join(long,int)},   {@link #sleep(long)}, or   {@link #sleep(long,int)}, methods of this class, then its interrupt status will be cleared and it will receive an   {@link InterruptedException}. <p> If this thread is blocked in an I/O operation upon an   {@link java.nio.channels.InterruptibleChannel </code>interruptiblechannel<code>} then the channel will be closed, the thread's interruptstatus will be set, and the thread will receive a  {@link java.nio.channels.ClosedByInterruptException}. <p> If this thread is blocked in a   {@link java.nio.channels.Selector}then the thread's interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector's   {@link java.nio.channels.Selector#wakeup wakeup} method were invoked.<p> If none of the previous conditions hold then this thread's interrupt status will be set. </p> <p> Interrupting a thread that is not alive need not have any effect.
 * @throws SecurityException if the current thread cannot modify this thread
 * @revised 6.0
 * @spec JSR-51
 */
public void interrupt(){
  if (this != Thread.currentThread())   checkAccess();
synchronized (blockerLock) {
    Interruptible b=blocker;
    if (b != null) {
      interrupt0();
      b.interrupt(this);
      return;
    }
  }
  interrupt0();
}","/** 
 * Interrupts this thread. <p> Unless the current thread is interrupting itself, which is always permitted, the   {@link #checkAccess() checkAccess} methodof this thread is invoked, which may cause a  {@link SecurityException} to be thrown.<p> If this thread is blocked in an invocation of the  {@link Object#wait() wait()},   {@link Object#wait(long) wait(long)}, or   {@link Object#wait(long,int) wait(long, int)} methods of the {@link Object}class, or of the   {@link #join()},   {@link #join(long)},   {@link #join(long,int)},   {@link #sleep(long)}, or   {@link #sleep(long,int)}, methods of this class, then its interrupt status will be cleared and it will receive an   {@link InterruptedException}. <p> If this thread is blocked in an I/O operation upon an   {@link java.nio.channels.InterruptibleChannel InterruptibleChannel}then the channel will be closed, the thread's interrupt status will be set, and the thread will receive a   {@link java.nio.channels.ClosedByInterruptException}. <p> If this thread is blocked in a   {@link java.nio.channels.Selector}then the thread's interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector's   {@link java.nio.channels.Selector#wakeup wakeup} method were invoked.<p> If none of the previous conditions hold then this thread's interrupt status will be set. </p> <p> Interrupting a thread that is not alive need not have any effect.
 * @throws SecurityException if the current thread cannot modify this thread
 * @revised 6.0
 * @spec JSR-51
 */
public void interrupt(){
  if (this != Thread.currentThread())   checkAccess();
synchronized (blockerLock) {
    Interruptible b=blocker;
    if (b != null) {
      interrupt0();
      b.interrupt(this);
      return;
    }
  }
  interrupt0();
}"
77447,"/** 
 * Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception. If the returned value is <tt>null</tt>, there is no default.
 * @since 1.5
 * @see #setDefaultUncaughtExceptionHandler
 */
public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler(){
  return defaultUncaughtExceptionHandler;
}","/** 
 * Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception. If the returned value is <tt>null</tt>, there is no default.
 * @since 1.5
 * @see #setDefaultUncaughtExceptionHandler
 * @return the default uncaught exception handler for all threads
 */
public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler(){
  return defaultUncaughtExceptionHandler;
}"
77448,"/** 
 * Returns the handler invoked when this thread abruptly terminates due to an uncaught exception. If this thread has not had an uncaught exception handler explicitly set then this thread's <tt>ThreadGroup</tt> object is returned, unless this thread has terminated, in which case <tt>null</tt> is returned.
 * @since 1.5
 */
public UncaughtExceptionHandler getUncaughtExceptionHandler(){
  return uncaughtExceptionHandler != null ? uncaughtExceptionHandler : group;
}","/** 
 * Returns the handler invoked when this thread abruptly terminates due to an uncaught exception. If this thread has not had an uncaught exception handler explicitly set then this thread's <tt>ThreadGroup</tt> object is returned, unless this thread has terminated, in which case <tt>null</tt> is returned.
 * @since 1.5
 * @return the uncaught exception handler for this thread
 */
public UncaughtExceptionHandler getUncaughtExceptionHandler(){
  return uncaughtExceptionHandler != null ? uncaughtExceptionHandler : group;
}"
77449,"/** 
 * Creates a thread local variable. The initial value of the variable is determined by invoking the   {@code get} method on the {@code Supplier}.
 * @param supplier the supplier to be used to determine the initial value
 * @return a new thread local variable
 * @throws NullPointerException if the specified supplier is null
 * @since 1.8
 */
public static <T>ThreadLocal<T> withInitial(Supplier<? extends T> supplier){
  return new SuppliedThreadLocal<>(supplier);
}","/** 
 * Creates a thread local variable. The initial value of the variable is determined by invoking the   {@code get} method on the {@code Supplier}.
 * @param < S > the type of the thread local's value
 * @param supplier the supplier to be used to determine the initial value
 * @return a new thread local variable
 * @throws NullPointerException if the specified supplier is null
 * @since 1.8
 */
public static <S>ThreadLocal<S> withInitial(Supplier<? extends S> supplier){
  return new SuppliedThreadLocal<>(supplier);
}"
77450,"/** 
 * Skips <code>n</code> bytes of input from the bytes that can be read from this input stream without blocking. <p>Fewer bytes than requested might be skipped. The actual number of bytes skipped is equal to <code>n</code> or the result of a call to  {@link #available() <code>available</code>}, whichever is smaller. If <code>n</code> is less than zero, no bytes are skipped. <p>The actual number of bytes skipped is returned.
 * @param n the number of bytes to be skipped.
 * @return     the actual number of bytes skipped.
 * @exception IOException  if an I/O error occurs.
 * @since JCE1.2
 */
public long skip(long n) throws IOException {
  int available=ofinish - ostart;
  if (n > available) {
    n=available;
  }
  if (n < 0) {
    return 0;
  }
  ostart+=n;
  return n;
}","/** 
 * Skips <code>n</code> bytes of input from the bytes that can be read from this input stream without blocking. <p>Fewer bytes than requested might be skipped. The actual number of bytes skipped is equal to <code>n</code> or the result of a call to  {@link #available() available}, whichever is smaller. If <code>n</code> is less than zero, no bytes are skipped. <p>The actual number of bytes skipped is returned.
 * @param n the number of bytes to be skipped.
 * @return     the actual number of bytes skipped.
 * @exception IOException  if an I/O error occurs.
 * @since JCE1.2
 */
public long skip(long n) throws IOException {
  int available=ofinish - ostart;
  if (n > available) {
    n=available;
  }
  if (n < 0) {
    return 0;
  }
  ostart+=n;
  return n;
}"
77451,"/** 
 * Returns an <code>ExemptionMechanism</code> object that implements the specified exemption mechanism algorithm. <p> A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param algorithm the standard name of the requested exemption mechanism.See the ExemptionMechanism section in the <a href= ""{docRoot}/../technotes/guides/security/StandardNames.html#Exemption""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard exemption mechanism names.
 * @param provider the provider.
 * @return the new <code>ExemptionMechanism</code> object.
 * @exception NullPointerException if <code>algorithm</code>is null.
 * @exception NoSuchAlgorithmException if an ExemptionMechanismSpiimplementation for the specified algorithm is not available from the specified Provider object.
 * @exception IllegalArgumentException if the <code>provider</code>is null.
 * @see java.security.Provider
 */
public static final ExemptionMechanism getInstance(String algorithm,Provider provider) throws NoSuchAlgorithmException {
  Instance instance=JceSecurity.getInstance(""String_Node_Str"",ExemptionMechanismSpi.class,algorithm,provider);
  return new ExemptionMechanism((ExemptionMechanismSpi)instance.impl,instance.provider,algorithm);
}","/** 
 * Returns an <code>ExemptionMechanism</code> object that implements the specified exemption mechanism algorithm. <p> A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param algorithm the standard name of the requested exemption mechanism.See the ExemptionMechanism section in the <a href= "" {@docRoot}/../technotes/guides/security/StandardNames.html#Exemption""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard exemption mechanism names.
 * @param provider the provider.
 * @return the new <code>ExemptionMechanism</code> object.
 * @exception NullPointerException if <code>algorithm</code>is null.
 * @exception NoSuchAlgorithmException if an ExemptionMechanismSpiimplementation for the specified algorithm is not available from the specified Provider object.
 * @exception IllegalArgumentException if the <code>provider</code>is null.
 * @see java.security.Provider
 */
public static final ExemptionMechanism getInstance(String algorithm,Provider provider) throws NoSuchAlgorithmException {
  Instance instance=JceSecurity.getInstance(""String_Node_Str"",ExemptionMechanismSpi.class,algorithm,provider);
  return new ExemptionMechanism((ExemptionMechanismSpi)instance.impl,instance.provider,algorithm);
}"
77452,"/** 
 * Returns a <code>KeyAgreement</code> object that implements the specified key agreement algorithm. <p> A new KeyAgreement object encapsulating the KeyAgreementSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param algorithm the standard name of the requested key agreementalgorithm. See the KeyAgreement section in the <a href= "" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement""> Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names.
 * @param provider the provider.
 * @return the new <code>KeyAgreement</code> object.
 * @exception NullPointerException if the specified algorithmis null.
 * @exception NoSuchAlgorithmException if a KeyAgreementSpiimplementation for the specified algorithm is not available from the specified Provider object.
 * @exception IllegalArgumentException if the <code>provider</code>is null.
 * @see java.security.Provider
 */
public static final KeyAgreement getInstance(String algorithm,Provider provider) throws NoSuchAlgorithmException {
  Instance instance=JceSecurity.getInstance(""String_Node_Str"",KeyAgreementSpi.class,algorithm,provider);
  return new KeyAgreement((KeyAgreementSpi)instance.impl,instance.provider,algorithm);
}","/** 
 * Returns a <code>KeyAgreement</code> object that implements the specified key agreement algorithm. <p> A new KeyAgreement object encapsulating the KeyAgreementSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param algorithm the standard name of the requested key agreementalgorithm. See the KeyAgreement section in the <a href= "" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard algorithm names.
 * @param provider the provider.
 * @return the new <code>KeyAgreement</code> object.
 * @exception NullPointerException if the specified algorithmis null.
 * @exception NoSuchAlgorithmException if a KeyAgreementSpiimplementation for the specified algorithm is not available from the specified Provider object.
 * @exception IllegalArgumentException if the <code>provider</code>is null.
 * @see java.security.Provider
 */
public static final KeyAgreement getInstance(String algorithm,Provider provider) throws NoSuchAlgorithmException {
  Instance instance=JceSecurity.getInstance(""String_Node_Str"",KeyAgreementSpi.class,algorithm,provider);
  return new KeyAgreement((KeyAgreementSpi)instance.impl,instance.provider,algorithm);
}"
77453,"public NullCipher(){
  super(new NullCipherSpi(),null);
}","/** 
 * Creates a NullCipher object.
 */
public NullCipher(){
  super(new NullCipherSpi(),null);
}"
77454,"/** 
 * Return a <code>Set</code> of private credentials associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The caller must have permission to access all of the requested Credentials, or a <code>SecurityException</code> will be thrown. <p> The returned <code>Set</code> is not backed by this Subject's internal private Credential <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal private Credential <code>Set</code>. <p>
 * @param c the returned <code>Set</code> of private credentials will all beinstances of this class.
 * @return a <code>Set</code> of private credentials that are instancesof the  specified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T>Set<T> getPrivateCredentials(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PRIV_CREDENTIAL_SET,c);
}","/** 
 * Return a <code>Set</code> of private credentials associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The caller must have permission to access all of the requested Credentials, or a <code>SecurityException</code> will be thrown. <p> The returned <code>Set</code> is not backed by this Subject's internal private Credential <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal private Credential <code>Set</code>. <p>
 * @param < T > the type of the class modeled by {@code c}
 * @param c the returned <code>Set</code> of private credentials will all beinstances of this class.
 * @return a <code>Set</code> of private credentials that are instancesof the  specified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T>Set<T> getPrivateCredentials(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PRIV_CREDENTIAL_SET,c);
}"
77455,"/** 
 * Return a <code>Set</code> of public credentials associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The returned <code>Set</code> is not backed by this Subject's internal public Credential <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal public Credential <code>Set</code>. <p>
 * @param c the returned <code>Set</code> of public credentials will all beinstances of this class.
 * @return a <code>Set</code> of public credentials that are instancesof the  specified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T>Set<T> getPublicCredentials(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PUB_CREDENTIAL_SET,c);
}","/** 
 * Return a <code>Set</code> of public credentials associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The returned <code>Set</code> is not backed by this Subject's internal public Credential <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal public Credential <code>Set</code>. <p>
 * @param < T > the type of the class modeled by {@code c}
 * @param c the returned <code>Set</code> of public credentials will all beinstances of this class.
 * @return a <code>Set</code> of public credentials that are instancesof the  specified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T>Set<T> getPublicCredentials(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PUB_CREDENTIAL_SET,c);
}"
77456,"/** 
 * Return a <code>Set</code> of Principals associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The returned <code>Set</code> is not backed by this Subject's internal <code>Principal</code> <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal <code>Principal</code> <code>Set</code>. <p>
 * @param c the returned <code>Set</code> of Principals will all beinstances of this class.
 * @return a <code>Set</code> of Principals that are instances of thespecified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T extends Principal>Set<T> getPrincipals(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PRINCIPAL_SET,c);
}","/** 
 * Return a <code>Set</code> of Principals associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The returned <code>Set</code> is not backed by this Subject's internal <code>Principal</code> <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal <code>Principal</code> <code>Set</code>. <p>
 * @param < T > the type of the class modeled by {@code c}
 * @param c the returned <code>Set</code> of Principals will all beinstances of this class.
 * @return a <code>Set</code> of Principals that are instances of thespecified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T extends Principal>Set<T> getPrincipals(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PRINCIPAL_SET,c);
}"
77457,"/** 
 * Perform privileged work as a particular <code>Subject</code>. <p> This method behaves exactly as <code>Subject.doAs</code>, except that instead of retrieving the current Thread's <code>AccessControlContext</code>, it uses the provided <code>AccessControlContext</code>.  If the provided <code>AccessControlContext</code> is <code>null</code>, this method instantiates a new <code>AccessControlContext</code> with an empty collection of ProtectionDomains. <p>
 * @param subject the <code>Subject</code> that the specified<code>action</code> will run as.  This parameter may be <code>null</code>. <p>
 * @param action the code to be run as the specified<code>Subject</code>. <p>
 * @param acc the <code>AccessControlContext</code> to be tied to thespecified <i>subject</i> and <i>action</i>. <p>
 * @return the value returned by thePrivilegedExceptionAction's <code>run</code> method.
 * @exception PrivilegedActionException if the<code>PrivilegedExceptionAction.run</code> method throws a checked exception. <p>
 * @exception NullPointerException if the specified<code>PrivilegedExceptionAction</code> is <code>null</code>. <p>
 * @exception SecurityException if the caller does not have permissionto invoke this method.
 */
public static <T>T doAsPrivileged(final Subject subject,final java.security.PrivilegedExceptionAction<T> action,final java.security.AccessControlContext acc) throws java.security.PrivilegedActionException {
  java.lang.SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(AuthPermissionHolder.DO_AS_PRIVILEGED_PERMISSION);
  }
  if (action == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  final AccessControlContext callerAcc=(acc == null ? new AccessControlContext(NULL_PD_ARRAY) : acc);
  return java.security.AccessController.doPrivileged(action,createContext(subject,callerAcc));
}","/** 
 * Perform privileged work as a particular <code>Subject</code>. <p> This method behaves exactly as <code>Subject.doAs</code>, except that instead of retrieving the current Thread's <code>AccessControlContext</code>, it uses the provided <code>AccessControlContext</code>.  If the provided <code>AccessControlContext</code> is <code>null</code>, this method instantiates a new <code>AccessControlContext</code> with an empty collection of ProtectionDomains. <p>
 * @param subject the <code>Subject</code> that the specified<code>action</code> will run as.  This parameter may be <code>null</code>. <p>
 * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.
 * @param action the code to be run as the specified<code>Subject</code>. <p>
 * @param acc the <code>AccessControlContext</code> to be tied to thespecified <i>subject</i> and <i>action</i>. <p>
 * @return the value returned by thePrivilegedExceptionAction's <code>run</code> method.
 * @exception PrivilegedActionException if the<code>PrivilegedExceptionAction.run</code> method throws a checked exception. <p>
 * @exception NullPointerException if the specified<code>PrivilegedExceptionAction</code> is <code>null</code>. <p>
 * @exception SecurityException if the caller does not have permissionto invoke this method.
 */
public static <T>T doAsPrivileged(final Subject subject,final java.security.PrivilegedExceptionAction<T> action,final java.security.AccessControlContext acc) throws java.security.PrivilegedActionException {
  java.lang.SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(AuthPermissionHolder.DO_AS_PRIVILEGED_PERMISSION);
  }
  if (action == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  final AccessControlContext callerAcc=(acc == null ? new AccessControlContext(NULL_PD_ARRAY) : acc);
  return java.security.AccessController.doPrivileged(action,createContext(subject,callerAcc));
}"
77458,"/** 
 * Perform work as a particular <code>Subject</code>. <p> This method first retrieves the current Thread's <code>AccessControlContext</code> via <code>AccessController.getContext</code>, and then instantiates a new <code>AccessControlContext</code> using the retrieved context along with a new <code>SubjectDomainCombiner</code> (constructed using the provided <code>Subject</code>). Finally, this method invokes <code>AccessController.doPrivileged</code>, passing it the provided <code>PrivilegedExceptionAction</code>, as well as the newly constructed <code>AccessControlContext</code>. <p>
 * @param subject the <code>Subject</code> that the specified<code>action</code> will run as.  This parameter may be <code>null</code>. <p>
 * @param action the code to be run as the specified<code>Subject</code>. <p>
 * @return the value returned by thePrivilegedExceptionAction's <code>run</code> method.
 * @exception PrivilegedActionException if the<code>PrivilegedExceptionAction.run</code> method throws a checked exception. <p>
 * @exception NullPointerException if the specified<code>PrivilegedExceptionAction</code> is <code>null</code>. <p>
 * @exception SecurityException if the caller does not have permissionto invoke this method.
 */
public static <T>T doAs(final Subject subject,final java.security.PrivilegedExceptionAction<T> action) throws java.security.PrivilegedActionException {
  java.lang.SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(AuthPermissionHolder.DO_AS_PERMISSION);
  }
  if (action == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  final AccessControlContext currentAcc=AccessController.getContext();
  return java.security.AccessController.doPrivileged(action,createContext(subject,currentAcc));
}","/** 
 * Perform work as a particular <code>Subject</code>. <p> This method first retrieves the current Thread's <code>AccessControlContext</code> via <code>AccessController.getContext</code>, and then instantiates a new <code>AccessControlContext</code> using the retrieved context along with a new <code>SubjectDomainCombiner</code> (constructed using the provided <code>Subject</code>). Finally, this method invokes <code>AccessController.doPrivileged</code>, passing it the provided <code>PrivilegedExceptionAction</code>, as well as the newly constructed <code>AccessControlContext</code>. <p>
 * @param subject the <code>Subject</code> that the specified<code>action</code> will run as.  This parameter may be <code>null</code>. <p>
 * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.
 * @param action the code to be run as the specified<code>Subject</code>. <p>
 * @return the value returned by thePrivilegedExceptionAction's <code>run</code> method.
 * @exception PrivilegedActionException if the<code>PrivilegedExceptionAction.run</code> method throws a checked exception. <p>
 * @exception NullPointerException if the specified<code>PrivilegedExceptionAction</code> is <code>null</code>. <p>
 * @exception SecurityException if the caller does not have permissionto invoke this method.
 */
public static <T>T doAs(final Subject subject,final java.security.PrivilegedExceptionAction<T> action) throws java.security.PrivilegedActionException {
  java.lang.SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(AuthPermissionHolder.DO_AS_PERMISSION);
  }
  if (action == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  final AccessControlContext currentAcc=AccessController.getContext();
  return java.security.AccessController.doPrivileged(action,createContext(subject,currentAcc));
}"
77459,"/** 
 * Gets the <code>version</code> (version number) value from the certificate. The ASN.1 definition for this is: <pre> version         [0]  EXPLICIT Version DEFAULT v1<p> Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } </pre>
 * @return the version number from the ASN.1 encoding, i.e. 0, 1 or 2.
 */
public abstract int getVersion();","/** 
 * Gets the <code>version</code> (version number) value from the certificate. The ASN.1 definition for this is: <pre> version         [0]  EXPLICIT Version DEFAULT v1 Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } </pre>
 * @return the version number from the ASN.1 encoding, i.e. 0, 1 or 2.
 */
public abstract int getVersion();"
77460,"/** 
 * Gets the <code>serialNumber</code> value from the certificate. The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is: <pre> serialNumber     CertificateSerialNumber<p> CertificateSerialNumber  ::=  INTEGER </pre>
 * @return the serial number.
 */
public abstract BigInteger getSerialNumber();","/** 
 * Gets the <code>serialNumber</code> value from the certificate. The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is: <pre> serialNumber     CertificateSerialNumber CertificateSerialNumber  ::=  INTEGER </pre>
 * @return the serial number.
 */
public abstract BigInteger getSerialNumber();"
77461,"/** 
 * Gets the <code>issuer</code> (issuer distinguished name) value from the certificate. The issuer name identifies the entity that signed (and issued) the certificate. <p>The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: <pre> issuer    Name<p> Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF RelativeDistinguishedName RelativeDistinguishedName ::= SET OF AttributeValueAssertion AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY </pre> The <code>Name</code> describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the <code>AttributeValue</code> component is determined by the <code>AttributeType</code>; in general it will be a <code>directoryString</code>. A <code>directoryString</code> is usually one of <code>PrintableString</code>, <code>TeletexString</code> or <code>UniversalString</code>.
 * @return a Principal whose name is the issuer distinguished name.
 */
public abstract Principal getIssuerDN();","/** 
 * Gets the <code>issuer</code> (issuer distinguished name) value from the certificate. The issuer name identifies the entity that signed (and issued) the certificate. <p>The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: <pre> issuer    Name Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF RelativeDistinguishedName RelativeDistinguishedName ::= SET OF AttributeValueAssertion AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY </pre> The <code>Name</code> describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the <code>AttributeValue</code> component is determined by the <code>AttributeType</code>; in general it will be a <code>directoryString</code>. A <code>directoryString</code> is usually one of <code>PrintableString</code>, <code>TeletexString</code> or <code>UniversalString</code>.
 * @return a Principal whose name is the issuer distinguished name.
 */
public abstract Principal getIssuerDN();"
77462,"/** 
 * Gets the <code>notBefore</code> date from the validity period of the certificate. The relevant ASN.1 definitions are: <pre> validity             Validity<p> Validity ::= SEQUENCE { notBefore      CertificateValidityDate, notAfter       CertificateValidityDate }<p> CertificateValidityDate ::= CHOICE { utcTime        UTCTime, generalTime    GeneralizedTime } </pre>
 * @return the start date of the validity period.
 * @see #checkValidity()
 */
public abstract Date getNotBefore();","/** 
 * Gets the <code>notBefore</code> date from the validity period of the certificate. The relevant ASN.1 definitions are: <pre> validity             Validity Validity ::= SEQUENCE { notBefore      CertificateValidityDate, notAfter       CertificateValidityDate } CertificateValidityDate ::= CHOICE { utcTime        UTCTime, generalTime    GeneralizedTime } </pre>
 * @return the start date of the validity period.
 * @see #checkValidity()
 */
public abstract Date getNotBefore();"
77463,"/** 
 * Gets the signature algorithm name for the certificate signature algorithm. An example is the string ""SHA-1/DSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier<p> AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the <code>algorithm</code> OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();","/** 
 * Gets the signature algorithm name for the certificate signature algorithm. An example is the string ""SHA-1/DSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the <code>algorithm</code> OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();"
77464,"/** 
 * Instantiates an X509Certificate object, and initializes it with the specified byte array. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the  {@code cert.provider.x509v1} security property.<p>Note: All X509Certificate subclasses must provide a constructor of the form: <code><pre> public &lt;subClass&gt;(InputStream inStream) ... </pre></code>
 * @param certData a byte array containing the DER-encodedcertificate.
 * @return an X509Certificate object initialized with the datafrom <code>certData</code>.
 * @exception CertificateException if a class initializationor certificate parsing error occurs.
 */
public static final X509Certificate getInstance(byte[] certData) throws CertificateException {
  return getInst((Object)certData);
}","/** 
 * Instantiates an X509Certificate object, and initializes it with the specified byte array. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the  {@code cert.provider.x509v1} security property.<p>Note: All X509Certificate subclasses must provide a constructor of the form: <pre> {@code public <subClass>(InputStream inStream) ...}</pre>
 * @param certData a byte array containing the DER-encodedcertificate.
 * @return an X509Certificate object initialized with the datafrom <code>certData</code>.
 * @exception CertificateException if a class initializationor certificate parsing error occurs.
 */
public static final X509Certificate getInstance(byte[] certData) throws CertificateException {
  return getInst((Object)certData);
}"
77465,"/** 
 * Returns   {@code true} if the given {@code locale} is supported bythis locale service provider. The given  {@code locale} may contain<a href=""../Locale.html#def_extensions"">extensions<a/> that should be taken into account for the support determination. <p>The default implementation returns  {@code true} if the given {@code locale}is equal to any of the available   {@code Locale}s returned by  {@link #getAvailableLocales()} with ignoring any extensions in both thegiven  {@code locale} and the available locales. Concrete locale serviceprovider implementations should override this method if those implementations are  {@code Locale} extensions-aware. For example,{@code DecimalFormatSymbolsProvider} implementations will need to checkextensions in the given  {@code locale} to see if any numbering system isspecified and can be supported. However,  {@code CollatorProvider}implementations may not be affected by any particular numbering systems, and in that case, extensions for numbering systems should be ignored.
 * @param locale a {@code Locale} to be tested
 * @return {@code true} if the given {@code locale} is supported by thisprovider;  {@code false} otherwise.
 * @throws NullPointerException if the given  {@code locale} is {@code null}
 * @see Locale#hasExtensions()
 * @see Locale#stripExtensions()
 * @since 1.8
 */
public boolean isSupportedLocale(Locale locale){
  locale=locale.stripExtensions();
  for (  Locale available : getAvailableLocales()) {
    if (locale.equals(available.stripExtensions())) {
      return true;
    }
  }
  return false;
}","/** 
 * Returns   {@code true} if the given {@code locale} is supported bythis locale service provider. The given  {@code locale} may contain<a href=""../Locale.html#def_extensions"">extensions</a> that should be taken into account for the support determination. <p>The default implementation returns  {@code true} if the given {@code locale}is equal to any of the available   {@code Locale}s returned by  {@link #getAvailableLocales()} with ignoring any extensions in both thegiven  {@code locale} and the available locales. Concrete locale serviceprovider implementations should override this method if those implementations are  {@code Locale} extensions-aware. For example,{@code DecimalFormatSymbolsProvider} implementations will need to checkextensions in the given  {@code locale} to see if any numbering system isspecified and can be supported. However,  {@code CollatorProvider}implementations may not be affected by any particular numbering systems, and in that case, extensions for numbering systems should be ignored.
 * @param locale a {@code Locale} to be tested
 * @return {@code true} if the given {@code locale} is supported by thisprovider;  {@code false} otherwise.
 * @throws NullPointerException if the given  {@code locale} is {@code null}
 * @see Locale#hasExtensions()
 * @see Locale#stripExtensions()
 * @since 1.8
 */
public boolean isSupportedLocale(Locale locale){
  locale=locale.stripExtensions();
  for (  Locale available : getAvailableLocales()) {
    if (locale.equals(available.stripExtensions())) {
      return true;
    }
  }
  return false;
}"
77466,"/** 
 * A query that provides access to whether a leap-second was parsed. <p> This returns a singleton   {@linkplain TemporalQuery query} that providesaccess to additional information from the parse. The query always returns a non-null boolean, true if parsing saw a leap-second, false if not. <p> Instant parsing handles the special ""leap second"" time of '23:59:60'. Leap seconds occur at '23:59:60' in the UTC time-zone, but at other local times in different time-zones. To avoid this potential ambiguity, the handling of leap-seconds is limited to {@link DateTimeFormatterBuilder#appendInstant()}, as that method always parses the instant with the UTC zone offset. <p> If the time '23:59:60' is received, then a simple conversion is applied, replacing the second-of-minute of 60 with 59. This query can be used on the parse result to determine if the leap-second adjustment was made. The query will return one second of excess if it did adjust to remove the leap-second, and zero if not. Note that applying a leap-second smoothing mechanism, such as UTC-SLS, is the responsibility of the application, as follows: <pre> TemporalAccessor parsed = formatter.parse(str); Instant instant = parsed.query(Instant::from); if (parsed.query(DateTimeFormatter.parsedLeapSecond())) { // validate leap-second is correct and apply correct smoothing } </pre>
 */
public static final TemporalQuery<Boolean> parsedLeapSecond(){
  return PARSED_LEAP_SECOND;
}","/** 
 * A query that provides access to whether a leap-second was parsed. <p> This returns a singleton   {@linkplain TemporalQuery query} that providesaccess to additional information from the parse. The query always returns a non-null boolean, true if parsing saw a leap-second, false if not. <p> Instant parsing handles the special ""leap second"" time of '23:59:60'. Leap seconds occur at '23:59:60' in the UTC time-zone, but at other local times in different time-zones. To avoid this potential ambiguity, the handling of leap-seconds is limited to {@link DateTimeFormatterBuilder#appendInstant()}, as that method always parses the instant with the UTC zone offset. <p> If the time '23:59:60' is received, then a simple conversion is applied, replacing the second-of-minute of 60 with 59. This query can be used on the parse result to determine if the leap-second adjustment was made. The query will return one second of excess if it did adjust to remove the leap-second, and zero if not. Note that applying a leap-second smoothing mechanism, such as UTC-SLS, is the responsibility of the application, as follows: <pre> TemporalAccessor parsed = formatter.parse(str); Instant instant = parsed.query(Instant::from); if (parsed.query(DateTimeFormatter.parsedLeapSecond())) { // validate leap-second is correct and apply correct smoothing } </pre>
 * @return a query that provides access to whether a leap-second was parsed
 */
public static final TemporalQuery<Boolean> parsedLeapSecond(){
  return PARSED_LEAP_SECOND;
}"
77467,"/** 
 * A query that provides access to the excess days that were parsed. <p> This returns a singleton   {@linkplain TemporalQuery query} that providesaccess to additional information from the parse. The query always returns a non-null period, with a zero period returned instead of null. <p> There are two situations where this query may return a non-zero period. <p><ul> <li>If the  {@code ResolverStyle} is {@code LENIENT} and a time is parsedwithout a date, then the complete result of the parse consists of a {@code LocalTime} and an excess {@code Period} in days.<p> <li>If the  {@code ResolverStyle} is {@code SMART} and a time is parsedwithout a date where the time is 24:00:00, then the complete result of the parse consists of a  {@code LocalTime} of 00:00:00 and an excess{@code Period} of one day.</ul> <p> In both cases, if a complete  {@code ChronoLocalDateTime} or {@code Instant}is parsed, then the excess days are added to the date part. As a result, this query will return a zero period. <p> The   {@code SMART} behaviour handles the common ""end of day"" 24:00 value.Processing in  {@code LENIENT} mode also produces the same result:<pre> Text to parse        Parsed object                         Excess days ""2012-12-03T00:00""   LocalDateTime.of(2012, 12, 3, 0, 0)   ZERO ""2012-12-03T24:00""   LocalDateTime.of(2012, 12, 4, 0, 0)   ZERO ""00:00""              LocalTime.of(0, 0)                    ZERO ""24:00""              LocalTime.of(0, 0)                    Period.ofDays(1) </pre> The query can be used as follows: <pre> TemporalAccessor parsed = formatter.parse(str); LocalTime time = parsed.query(LocalTime::from); Period extraDays = parsed.query(DateTimeFormatter.parsedExcessDays()); </pre>
 */
public static final TemporalQuery<Period> parsedExcessDays(){
  return PARSED_EXCESS_DAYS;
}","/** 
 * A query that provides access to the excess days that were parsed. <p> This returns a singleton   {@linkplain TemporalQuery query} that providesaccess to additional information from the parse. The query always returns a non-null period, with a zero period returned instead of null. <p> There are two situations where this query may return a non-zero period. <p><ul> <li>If the  {@code ResolverStyle} is {@code LENIENT} and a time is parsedwithout a date, then the complete result of the parse consists of a {@code LocalTime} and an excess {@code Period} in days.<p> <li>If the  {@code ResolverStyle} is {@code SMART} and a time is parsedwithout a date where the time is 24:00:00, then the complete result of the parse consists of a  {@code LocalTime} of 00:00:00 and an excess{@code Period} of one day.</ul> <p> In both cases, if a complete  {@code ChronoLocalDateTime} or {@code Instant}is parsed, then the excess days are added to the date part. As a result, this query will return a zero period. <p> The   {@code SMART} behaviour handles the common ""end of day"" 24:00 value.Processing in  {@code LENIENT} mode also produces the same result:<pre> Text to parse        Parsed object                         Excess days ""2012-12-03T00:00""   LocalDateTime.of(2012, 12, 3, 0, 0)   ZERO ""2012-12-03T24:00""   LocalDateTime.of(2012, 12, 4, 0, 0)   ZERO ""00:00""              LocalTime.of(0, 0)                    ZERO ""24:00""              LocalTime.of(0, 0)                    Period.ofDays(1) </pre> The query can be used as follows: <pre> TemporalAccessor parsed = formatter.parse(str); LocalTime time = parsed.query(LocalTime::from); Period extraDays = parsed.query(DateTimeFormatter.parsedExcessDays()); </pre>
 * @return a query that provides access to the excess days that were parsed
 */
public static final TemporalQuery<Period> parsedExcessDays(){
  return PARSED_EXCESS_DAYS;
}"
77468,"/** 
 * Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed. The returned providers are ordered according to their <a href= ""#insertProviderAt(java.security.Provider, int)"">preference order</a>. <p>The selection criteria are represented by a map. Each map entry represents a selection criterion. A provider is selected iff it satisfies all selection criteria. The key for any entry in such a map must be in one of the following two formats: <ul> <li> <i>&lt;crypto_service>.&lt;algorithm_or_type></i> <p> The cryptographic service name must not contain any dots. <p> The value associated with the key must be an empty string. <p> A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service. <li>  <i>&lt;crypto_service>.&lt;algorithm_or_type> &lt;attribute_name></i> <p> The cryptographic service name must not contain any dots. There must be one or more space charaters between the <i>&lt;algorithm_or_type></i> and the <i>&lt;attribute_name></i>. <p> The value associated with the key must be a non-empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service and its implementation meets the constraint expressed by the specified attribute name/value pair. </ul> <p> See the <a href= ""../../../technotes/guides/security/StandardNames.html""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard cryptographic service names, standard algorithm names and standard attribute names.
 * @param filter the criteria for selectingproviders. The filter is case-insensitive.
 * @return all the installed providers that satisfy the selectioncriteria, or null if no such providers have been installed.
 * @throws InvalidParameterException if the filter is not in the required format
 * @throws NullPointerException if filter is null
 * @see #getProviders(java.lang.String)
 * @since 1.3
 */
public static Provider[] getProviders(Map<String,String> filter){
  Provider[] allProviders=Security.getProviders();
  Set<String> keySet=filter.keySet();
  LinkedHashSet<Provider> candidates=new LinkedHashSet<>(5);
  if ((keySet == null) || (allProviders == null)) {
    return allProviders;
  }
  boolean firstSearch=true;
  for (Iterator<String> ite=keySet.iterator(); ite.hasNext(); ) {
    String key=ite.next();
    String value=filter.get(key);
    LinkedHashSet<Provider> newCandidates=getAllQualifyingCandidates(key,value,allProviders);
    if (firstSearch) {
      candidates=newCandidates;
      firstSearch=false;
    }
    if ((newCandidates != null) && !newCandidates.isEmpty()) {
      for (Iterator<Provider> cansIte=candidates.iterator(); cansIte.hasNext(); ) {
        Provider prov=cansIte.next();
        if (!newCandidates.contains(prov)) {
          cansIte.remove();
        }
      }
    }
 else {
      candidates=null;
      break;
    }
  }
  if ((candidates == null) || (candidates.isEmpty()))   return null;
  Object[] candidatesArray=candidates.toArray();
  Provider[] result=new Provider[candidatesArray.length];
  for (int i=0; i < result.length; i++) {
    result[i]=(Provider)candidatesArray[i];
  }
  return result;
}","/** 
 * Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed. The returned providers are ordered according to their  {@linkplain #insertProviderAt(java.security.Provider,int) preference order}. <p>The selection criteria are represented by a map. Each map entry represents a selection criterion. A provider is selected iff it satisfies all selection criteria. The key for any entry in such a map must be in one of the following two formats: <ul> <li> <i>  {@literal <crypto_service>.<algorithm_or_type>}</i> <p> The cryptographic service name must not contain any dots. <p> The value associated with the key must be an empty string. <p> A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service. <li>  <i>  {@literal <crypto_service>}.  {@literal <algorithm_or_type> <attribute_name>}</i> <p> The cryptographic service name must not contain any dots. There must be one or more space charaters between the <i>  {@literal <algorithm_or_type>}</i> and the <i>  {@literal <attribute_name>}</i>. <p> The value associated with the key must be a non-empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service and its implementation meets the constraint expressed by the specified attribute name/value pair. </ul> <p> See the <a href= ""../../../technotes/guides/security/StandardNames.html""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard cryptographic service names, standard algorithm names and standard attribute names.
 * @param filter the criteria for selectingproviders. The filter is case-insensitive.
 * @return all the installed providers that satisfy the selectioncriteria, or null if no such providers have been installed.
 * @throws InvalidParameterException if the filter is not in the required format
 * @throws NullPointerException if filter is null
 * @see #getProviders(java.lang.String)
 * @since 1.3
 */
public static Provider[] getProviders(Map<String,String> filter){
  Provider[] allProviders=Security.getProviders();
  Set<String> keySet=filter.keySet();
  LinkedHashSet<Provider> candidates=new LinkedHashSet<>(5);
  if ((keySet == null) || (allProviders == null)) {
    return allProviders;
  }
  boolean firstSearch=true;
  for (Iterator<String> ite=keySet.iterator(); ite.hasNext(); ) {
    String key=ite.next();
    String value=filter.get(key);
    LinkedHashSet<Provider> newCandidates=getAllQualifyingCandidates(key,value,allProviders);
    if (firstSearch) {
      candidates=newCandidates;
      firstSearch=false;
    }
    if ((newCandidates != null) && !newCandidates.isEmpty()) {
      for (Iterator<Provider> cansIte=candidates.iterator(); cansIte.hasNext(); ) {
        Provider prov=cansIte.next();
        if (!newCandidates.contains(prov)) {
          cansIte.remove();
        }
      }
    }
 else {
      candidates=null;
      break;
    }
  }
  if ((candidates == null) || (candidates.isEmpty()))   return null;
  Object[] candidatesArray=candidates.toArray();
  Provider[] result=new Provider[candidatesArray.length];
  for (int i=0; i < result.length; i++) {
    result[i]=(Provider)candidatesArray[i];
  }
  return result;
}"
77469,"/** 
 * Gets the   {@code version} (version number) value from the CRL.The ASN.1 definition for this is: <pre> version    Version OPTIONAL, -- if present, must be v2<p> Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } -- v3 does not apply to CRLs but appears for consistency -- with definition of Version for certs </pre>
 * @return the version number, i.e. 1 or 2.
 */
public abstract int getVersion();","/** 
 * Gets the   {@code version} (version number) value from the CRL.The ASN.1 definition for this is: <pre> version    Version OPTIONAL, -- if present, must be v2 Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } -- v3 does not apply to CRLs but appears for consistency -- with definition of Version for certs </pre>
 * @return the version number, i.e. 1 or 2.
 */
public abstract int getVersion();"
77470,"/** 
 * Gets the signature algorithm name for the CRL signature algorithm. An example is the string ""SHA256withRSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier<p> AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the   {@code algorithm}OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();","/** 
 * Gets the signature algorithm name for the CRL signature algorithm. An example is the string ""SHA256withRSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the   {@code algorithm}OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();"
77471,"/** 
 * Gets the   {@code version} (version number) value from thecertificate. The ASN.1 definition for this is: <pre> version  [0] EXPLICIT Version DEFAULT v1<p> Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  } </pre>
 * @return the version number, i.e. 1, 2 or 3.
 */
public abstract int getVersion();","/** 
 * Gets the   {@code version} (version number) value from thecertificate. The ASN.1 definition for this is: <pre> version  [0] EXPLICIT Version DEFAULT v1 Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  } </pre>
 * @return the version number, i.e. 1, 2 or 3.
 */
public abstract int getVersion();"
77472,"/** 
 * Gets the   {@code serialNumber} value from the certificate.The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is: <pre> serialNumber     CertificateSerialNumber<p> CertificateSerialNumber  ::=  INTEGER </pre>
 * @return the serial number.
 */
public abstract BigInteger getSerialNumber();","/** 
 * Gets the   {@code serialNumber} value from the certificate.The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is: <pre> serialNumber     CertificateSerialNumber CertificateSerialNumber  ::=  INTEGER </pre>
 * @return the serial number.
 */
public abstract BigInteger getSerialNumber();"
77473,"/** 
 * Gets the   {@code issuerUniqueID} value from the certificate.The issuer unique identifier is present in the certificate to handle the possibility of reuse of issuer names over time. RFC 3280 recommends that names not be reused and that conforming certificates not make use of unique identifiers. Applications conforming to that profile should be capable of parsing unique identifiers and making comparisons. <p>The ASN.1 definition for this is: <pre> issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL<p> UniqueIdentifier  ::=  BIT STRING </pre>
 * @return the issuer unique identifier or null if it is notpresent in the certificate.
 */
public abstract boolean[] getIssuerUniqueID();","/** 
 * Gets the   {@code issuerUniqueID} value from the certificate.The issuer unique identifier is present in the certificate to handle the possibility of reuse of issuer names over time. RFC 3280 recommends that names not be reused and that conforming certificates not make use of unique identifiers. Applications conforming to that profile should be capable of parsing unique identifiers and making comparisons. <p>The ASN.1 definition for this is: <pre> issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL UniqueIdentifier  ::=  BIT STRING </pre>
 * @return the issuer unique identifier or null if it is notpresent in the certificate.
 */
public abstract boolean[] getIssuerUniqueID();"
77474,"/** 
 * <strong>Denigrated</strong>, replaced by   {@linkplain #getIssuerX500Principal()}. This method returns the   {@code issuer}as an implementation specific Principal object, which should not be relied upon by portable code. <p> Gets the   {@code issuer} (issuer distinguished name) value fromthe certificate. The issuer name identifies the entity that signed (and issued) the certificate. <p>The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: <pre> issuer    Name<p> Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF RelativeDistinguishedName RelativeDistinguishedName ::= SET OF AttributeValueAssertion AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY </pre> The  {@code Name} describes a hierarchical name composed ofattributes, such as country name, and corresponding values, such as US. The type of the  {@code AttributeValue} component is determined bythe  {@code AttributeType}; in general it will be a  {@code directoryString}. A   {@code directoryString} is usuallyone of  {@code PrintableString},  {@code TeletexString} or {@code UniversalString}.
 * @return a Principal whose name is the issuer distinguished name.
 */
public abstract Principal getIssuerDN();","/** 
 * <strong>Denigrated</strong>, replaced by   {@linkplain #getIssuerX500Principal()}. This method returns the   {@code issuer}as an implementation specific Principal object, which should not be relied upon by portable code. <p> Gets the   {@code issuer} (issuer distinguished name) value fromthe certificate. The issuer name identifies the entity that signed (and issued) the certificate. <p>The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: <pre> issuer    Name Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF RelativeDistinguishedName RelativeDistinguishedName ::= SET OF AttributeValueAssertion AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY </pre> The  {@code Name} describes a hierarchical name composed ofattributes, such as country name, and corresponding values, such as US. The type of the  {@code AttributeValue} component is determined bythe  {@code AttributeType}; in general it will be a  {@code directoryString}. A   {@code directoryString} is usuallyone of  {@code PrintableString},  {@code TeletexString} or {@code UniversalString}.
 * @return a Principal whose name is the issuer distinguished name.
 */
public abstract Principal getIssuerDN();"
77475,"/** 
 * Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the   {@code ExtKeyUsageSyntax} field of theextended key usage extension, (OID = 2.5.29.37).  It indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field.  The ASN.1 definition for this is: <pre> ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId<p> KeyPurposeId ::= OBJECT IDENTIFIER<p> </pre> Key purposes may be defined by any organization with a need. Object identifiers used to identify key purposes shall be assigned in accordance with IANA or ITU-T Rec. X.660 | ISO/IEC/ITU 9834-1. <p> This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not  {@code abstract}and it provides a default implementation. Subclasses should override this method with a correct implementation.
 * @return the ExtendedKeyUsage extension of this certificate,as an unmodifiable list of object identifiers represented as Strings. Returns null if this certificate does not contain an ExtendedKeyUsage extension.
 * @throws CertificateParsingException if the extension cannot be decoded
 * @since 1.4
 */
public List<String> getExtendedKeyUsage() throws CertificateParsingException {
  return X509CertImpl.getExtendedKeyUsage(this);
}","/** 
 * Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the   {@code ExtKeyUsageSyntax} field of theextended key usage extension, (OID = 2.5.29.37).  It indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field.  The ASN.1 definition for this is: <pre> ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId KeyPurposeId ::= OBJECT IDENTIFIER </pre> Key purposes may be defined by any organization with a need. Object identifiers used to identify key purposes shall be assigned in accordance with IANA or ITU-T Rec. X.660 | ISO/IEC/ITU 9834-1. <p> This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not  {@code abstract}and it provides a default implementation. Subclasses should override this method with a correct implementation.
 * @return the ExtendedKeyUsage extension of this certificate,as an unmodifiable list of object identifiers represented as Strings. Returns null if this certificate does not contain an ExtendedKeyUsage extension.
 * @throws CertificateParsingException if the extension cannot be decoded
 * @since 1.4
 */
public List<String> getExtendedKeyUsage() throws CertificateParsingException {
  return X509CertImpl.getExtendedKeyUsage(this);
}"
77476,"/** 
 * Gets the   {@code notBefore} date from the validity period ofthe certificate. The relevant ASN.1 definitions are: <pre> validity             Validity<p> Validity ::= SEQUENCE { notBefore      CertificateValidityDate, notAfter       CertificateValidityDate }<p> CertificateValidityDate ::= CHOICE { utcTime        UTCTime, generalTime    GeneralizedTime } </pre>
 * @return the start date of the validity period.
 * @see #checkValidity
 */
public abstract Date getNotBefore();","/** 
 * Gets the   {@code notBefore} date from the validity period ofthe certificate. The relevant ASN.1 definitions are: <pre> validity             Validity Validity ::= SEQUENCE { notBefore      CertificateValidityDate, notAfter       CertificateValidityDate } CertificateValidityDate ::= CHOICE { utcTime        UTCTime, generalTime    GeneralizedTime } </pre>
 * @return the start date of the validity period.
 * @see #checkValidity
 */
public abstract Date getNotBefore();"
77477,"/** 
 * Gets the signature algorithm name for the certificate signature algorithm. An example is the string ""SHA256withRSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier<p> AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the   {@code algorithm}OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();","/** 
 * Gets the signature algorithm name for the certificate signature algorithm. An example is the string ""SHA256withRSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the   {@code algorithm}OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();"
77478,"/** 
 * Gets the   {@code subjectUniqueID} value from the certificate.<p>The ASN.1 definition for this is: <pre> subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL<p> UniqueIdentifier  ::=  BIT STRING </pre>
 * @return the subject unique identifier or null if it is notpresent in the certificate.
 */
public abstract boolean[] getSubjectUniqueID();","/** 
 * Gets the   {@code subjectUniqueID} value from the certificate.<p>The ASN.1 definition for this is: <pre> subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL UniqueIdentifier  ::=  BIT STRING </pre>
 * @return the subject unique identifier or null if it is notpresent in the certificate.
 */
public abstract boolean[] getSubjectUniqueID();"
77479,"/** 
 * This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name. When used with the  {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer}, it enables native methods to be instrumented. <p/> Since native methods cannot be directly instrumented (they have no bytecodes), they must be wrapped with a non-native method which can be instrumented. For example, if we had: <pre> native boolean foo(int x);</pre> <p/> We could transform the class file (with the ClassFileTransformer during the initial definition of the class) so that this becomes: <pre> boolean foo(int x) { <i>... record entry to foo ...</i> return wrapped_foo(x); } native boolean wrapped_foo(int x);</pre> <p/> Where <code>foo</code> becomes a wrapper for the actual native method with the appended prefix ""wrapped_"".  Note that ""wrapped_"" would be a poor choice of prefix since it might conceivably form the name of an existing method thus something like ""$$$MyAgentWrapped$$$_"" would be better but would make these examples less readable. <p/> The wrapper will allow data to be collected on the native method call, but now the problem becomes linking up the wrapped method with the native implementation. That is, the method <code>wrapped_foo</code> needs to be resolved to the native implementation of <code>foo</code>, which might be: <pre> Java_somePackage_someClass_foo(JNIEnv* env, jint x)</pre> <p/> This function allows the prefix to be specified and the proper resolution to occur. Specifically, when the standard resolution fails, the resolution is retried taking the prefix into consideration. There are two ways that resolution occurs, explicit resolution with the JNI function <code>RegisterNatives</code> and the normal automatic resolution.  For <code>RegisterNatives</code>, the JVM will attempt this association: <pre>  {@code method(foo) -> nativeImplementation(foo)}</pre> <p/> When this fails, the resolution will be retried with the specified prefix prepended to the method name, yielding the correct resolution: <pre>  {@code method(wrapped_foo) -> nativeImplementation(foo)}</pre> <p/> For automatic resolution, the JVM will attempt: <pre>  {@code method(wrapped_foo) -> nativeImplementation(wrapped_foo)}</pre> <p/> When this fails, the resolution will be retried with the specified prefix deleted from the implementation name, yielding the correct resolution: <pre>  {@code method(wrapped_foo) -> nativeImplementation(foo)}</pre> <p/> Note that since the prefix is only used when standard resolution fails, native methods can be wrapped selectively. <p/> Since each <code>ClassFileTransformer</code> can do its own transformation of the bytecodes, more than one layer of wrappers may be applied. Thus each transformer needs its own prefix.  Since transformations are applied in order, the prefixes, if applied, will be applied in the same order (see   {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}). Thus if three transformers applied wrappers, <code>foo</code> might become <code>$trans3_$trans2_$trans1_foo</code>.  But if, say, the second transformer did not apply a wrapper to <code>foo</code> it would be just <code>$trans3_$trans1_foo</code>.  To be able to efficiently determine the sequence of prefixes, an intermediate prefix is only applied if its non-native wrapper exists.  Thus, in the last example, even though <code>$trans1_foo</code> is not a native method, the <code>$trans1_</code> prefix is applied since <code>$trans1_foo</code> exists.
 * @param transformer The ClassFileTransformer which wraps using this prefix.
 * @param prefix The prefix to apply to wrapped native methods when retrying a failed native method resolution. If prefix is either <code>null</code> or the empty string, then failed native method resolutions are not retried for this transformer.
 * @throws java.lang.NullPointerException if passed a <code>null</code> transformer.
 * @throws java.lang.UnsupportedOperationException if the current configuration ofthe JVM does not allow setting a native method prefix ( {@link #isNativeMethodPrefixSupported} is false).
 * @throws java.lang.IllegalArgumentException if the transformer is not registered(see  {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}).
 * @since 1.6
 */
void setNativeMethodPrefix(ClassFileTransformer transformer,String prefix);","/** 
 * This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name. When used with the  {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer}, it enables native methods to be instrumented. <p> Since native methods cannot be directly instrumented (they have no bytecodes), they must be wrapped with a non-native method which can be instrumented. For example, if we had: <pre> native boolean foo(int x);</pre> <p> We could transform the class file (with the ClassFileTransformer during the initial definition of the class) so that this becomes: <pre> boolean foo(int x) { <i>... record entry to foo ...</i> return wrapped_foo(x); } native boolean wrapped_foo(int x);</pre> <p> Where <code>foo</code> becomes a wrapper for the actual native method with the appended prefix ""wrapped_"".  Note that ""wrapped_"" would be a poor choice of prefix since it might conceivably form the name of an existing method thus something like ""$$$MyAgentWrapped$$$_"" would be better but would make these examples less readable. <p> The wrapper will allow data to be collected on the native method call, but now the problem becomes linking up the wrapped method with the native implementation. That is, the method <code>wrapped_foo</code> needs to be resolved to the native implementation of <code>foo</code>, which might be: <pre> Java_somePackage_someClass_foo(JNIEnv* env, jint x)</pre> <p> This function allows the prefix to be specified and the proper resolution to occur. Specifically, when the standard resolution fails, the resolution is retried taking the prefix into consideration. There are two ways that resolution occurs, explicit resolution with the JNI function <code>RegisterNatives</code> and the normal automatic resolution.  For <code>RegisterNatives</code>, the JVM will attempt this association: <pre>  {@code method(foo) -> nativeImplementation(foo)}</pre> <p> When this fails, the resolution will be retried with the specified prefix prepended to the method name, yielding the correct resolution: <pre>  {@code method(wrapped_foo) -> nativeImplementation(foo)}</pre> <p> For automatic resolution, the JVM will attempt: <pre>  {@code method(wrapped_foo) -> nativeImplementation(wrapped_foo)}</pre> <p> When this fails, the resolution will be retried with the specified prefix deleted from the implementation name, yielding the correct resolution: <pre>  {@code method(wrapped_foo) -> nativeImplementation(foo)}</pre> <p> Note that since the prefix is only used when standard resolution fails, native methods can be wrapped selectively. <p> Since each <code>ClassFileTransformer</code> can do its own transformation of the bytecodes, more than one layer of wrappers may be applied. Thus each transformer needs its own prefix.  Since transformations are applied in order, the prefixes, if applied, will be applied in the same order (see   {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}). Thus if three transformers applied wrappers, <code>foo</code> might become <code>$trans3_$trans2_$trans1_foo</code>.  But if, say, the second transformer did not apply a wrapper to <code>foo</code> it would be just <code>$trans3_$trans1_foo</code>.  To be able to efficiently determine the sequence of prefixes, an intermediate prefix is only applied if its non-native wrapper exists.  Thus, in the last example, even though <code>$trans1_foo</code> is not a native method, the <code>$trans1_</code> prefix is applied since <code>$trans1_foo</code> exists.
 * @param transformer The ClassFileTransformer which wraps using this prefix.
 * @param prefix The prefix to apply to wrapped native methods when retrying a failed native method resolution. If prefix is either <code>null</code> or the empty string, then failed native method resolutions are not retried for this transformer.
 * @throws java.lang.NullPointerException if passed a <code>null</code> transformer.
 * @throws java.lang.UnsupportedOperationException if the current configuration ofthe JVM does not allow setting a native method prefix ( {@link #isNativeMethodPrefixSupported} is false).
 * @throws java.lang.IllegalArgumentException if the transformer is not registered(see  {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}).
 * @since 1.6
 */
void setNativeMethodPrefix(ClassFileTransformer transformer,String prefix);"
77480,"/** 
 * Determines whether a class is modifiable by  {@linkplain #retransformClasses retransformation}or   {@linkplain #redefineClasses redefinition}. If a class is modifiable then this method returns <code>true</code>. If a class is not modifiable then this method returns <code>false</code>. <P> For a class to be retransformed,   {@link #isRetransformClassesSupported} must also be true.But the value of <code>isRetransformClassesSupported()</code> does not influence the value returned by this function. For a class to be redefined,  {@link #isRedefineClassesSupported} must also be true.But the value of <code>isRedefineClassesSupported()</code> does not influence the value returned by this function. <P> Primitive classes (for example, <code>java.lang.Integer.TYPE</code>) and array classes are never modifiable.
 * @throws java.lang.NullPointerException if the specified class is <code>null</code>.
 * @see #retransformClasses
 * @see #isRetransformClassesSupported
 * @see #redefineClasses
 * @see #isRedefineClassesSupported
 * @since 1.6
 */
boolean isModifiableClass(Class<?> theClass);","/** 
 * Determines whether a class is modifiable by  {@linkplain #retransformClasses retransformation}or   {@linkplain #redefineClasses redefinition}. If a class is modifiable then this method returns <code>true</code>. If a class is not modifiable then this method returns <code>false</code>. <P> For a class to be retransformed,   {@link #isRetransformClassesSupported} must also be true.But the value of <code>isRetransformClassesSupported()</code> does not influence the value returned by this function. For a class to be redefined,  {@link #isRedefineClassesSupported} must also be true.But the value of <code>isRedefineClassesSupported()</code> does not influence the value returned by this function. <P> Primitive classes (for example, <code>java.lang.Integer.TYPE</code>) and array classes are never modifiable.
 * @param theClass the class to check for being modifiable
 * @return whether or not the argument class is modifiable
 * @throws java.lang.NullPointerException if the specified class is <code>null</code>.
 * @see #retransformClasses
 * @see #isRetransformClassesSupported
 * @see #redefineClasses
 * @see #isRedefineClassesSupported
 * @since 1.6
 */
boolean isModifiableClass(Class<?> theClass);"
77481,"/** 
 * Returns a   {@link BinaryOperator} which returns the greater of two elementsaccording to the specified  {@code Comparator}
 * @param comparator a {@code Comparator} for comparing the two values
 * @return a {@code BinaryOperator} which returns the greater of its operands,according to the supplied  {@code Comparator}
 * @throws NullPointerException if the argument is null
 */
public static <T>BinaryOperator<T> maxBy(Comparator<? super T> comparator){
  Objects.requireNonNull(comparator);
  return (a,b) -> comparator.compare(a,b) >= 0 ? a : b;
}","/** 
 * Returns a   {@link BinaryOperator} which returns the greater of two elementsaccording to the specified  {@code Comparator}
 * @param < T > the type of values to be compared and returned
 * @param comparator a {@code Comparator} for comparing the two values
 * @return a {@code BinaryOperator} which returns the greater of its operands,according to the supplied  {@code Comparator}
 * @throws NullPointerException if the argument is null
 */
public static <T>BinaryOperator<T> maxBy(Comparator<? super T> comparator){
  Objects.requireNonNull(comparator);
  return (a,b) -> comparator.compare(a,b) >= 0 ? a : b;
}"
77482,"/** 
 * Returns a   {@link BinaryOperator} which returns the lesser of two elementsaccording to the specified  {@code Comparator}
 * @param comparator a {@code Comparator} for comparing the two values
 * @return a {@code BinaryOperator} which returns the lesser of its operands,according to the supplied  {@code Comparator}
 * @throws NullPointerException if the argument is null
 */
public static <T>BinaryOperator<T> minBy(Comparator<? super T> comparator){
  Objects.requireNonNull(comparator);
  return (a,b) -> comparator.compare(a,b) <= 0 ? a : b;
}","/** 
 * Returns a   {@link BinaryOperator} which returns the lesser of two elementsaccording to the specified  {@code Comparator}
 * @param < T > the type of values to be compared and returned
 * @param comparator a {@code Comparator} for comparing the two values
 * @return a {@code BinaryOperator} which returns the lesser of its operands,according to the supplied  {@code Comparator}
 * @throws NullPointerException if the argument is null
 */
public static <T>BinaryOperator<T> minBy(Comparator<? super T> comparator){
  Objects.requireNonNull(comparator);
  return (a,b) -> comparator.compare(a,b) <= 0 ? a : b;
}"
77483,"/** 
 * Returns a   {@code Function} whose {@code apply} method returns its input.
 * @param < T > the type of the input and output objects to the function
 */
static <T>Function<T,T> identity(){
  return t -> t;
}","/** 
 * Returns a   {@code Function} whose {@code apply} method returns its input.
 * @param < T > the type of the input and output objects to the function
 * @return a {@code Function} whose {@code apply} method returns its input
 */
static <T>Function<T,T> identity(){
  return t -> t;
}"
77484,"/** 
 * Returns a unary operator that provides its input value as the result.
 * @return a unary operator that provides its input value as the result
 */
static <T>UnaryOperator<T> identity(){
  return t -> t;
}","/** 
 * Returns a unary operator that provides its input value as the result.
 * @param < T > the type of the input and output objects to the function
 * @return a unary operator that provides its input value as the result
 */
static <T>UnaryOperator<T> identity(){
  return t -> t;
}"
77485,"/** 
 * Obtain new instance of a class that implements Packer. <li><p>If the system property <tt>java.util.jar.Pack200.Packer</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Packer. This class is loaded and instantiated.  If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li> <p>Note:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple packer engines, or else serialize use of one engine with a lock.
 * @return  A newly allocated Packer engine.
 */
public synchronized static Packer newPacker(){
  return (Packer)newInstance(PACK_PROVIDER);
}","/** 
 * Obtain new instance of a class that implements Packer. <ul> <li><p>If the system property <tt>java.util.jar.Pack200.Packer</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Packer. This class is loaded and instantiated.  If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li> </ul> <p>Note:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple packer engines, or else serialize use of one engine with a lock.
 * @return  A newly allocated Packer engine.
 */
public synchronized static Packer newPacker(){
  return (Packer)newInstance(PACK_PROVIDER);
}"
77486,"/** 
 * Obtain new instance of a class that implements Unpacker. <li><p>If the system property <tt>java.util.jar.Pack200.Unpacker</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker. The class is loaded and instantiated.  If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li> <p>Note:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple unpacker engines, or else serialize use of one engine with a lock.
 * @return  A newly allocated Unpacker engine.
 */
public static Unpacker newUnpacker(){
  return (Unpacker)newInstance(UNPACK_PROVIDER);
}","/** 
 * Obtain new instance of a class that implements Unpacker. <ul> <li><p>If the system property <tt>java.util.jar.Pack200.Unpacker</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker. The class is loaded and instantiated.  If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li> </ul> <p>Note:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple unpacker engines, or else serialize use of one engine with a lock.
 * @return  A newly allocated Unpacker engine.
 */
public static Unpacker newUnpacker(){
  return (Unpacker)newInstance(UNPACK_PROVIDER);
}"
77487,"/** 
 * <p> If passed to the appropriate variant of java.beans.Beans.instantiate this method will be called in order to associate the newly instantiated Applet (JavaBean) with its AppletContext, AppletStub, and Container. </p> <p> Conformant implementations shall: <ol> <li> Associate the newly instantiated Applet with the appropriate AppletContext. <li> Instantiate an AppletStub() and associate that AppletStub with the Applet via an invocation of setStub(). <li> If BeanContext parameter is null, then it shall associate the Applet with its appropriate Container by adding that Applet to its Container via an invocation of add(). If the BeanContext parameter is non-null, then it is the responsibility of the BeanContext to associate the Applet with its Container during the subsequent invocation of its addChildren() method. </ol> </p>
 * @param newAppletBean  The newly instantiated JavaBean
 * @param bCtxt          The BeanContext intended for this Applet, ornull.
 */
void initialize(Applet newAppletBean,BeanContext bCtxt);","/** 
 * <p> If passed to the appropriate variant of java.beans.Beans.instantiate this method will be called in order to associate the newly instantiated Applet (JavaBean) with its AppletContext, AppletStub, and Container. </p> <p> Conformant implementations shall: <ol> <li> Associate the newly instantiated Applet with the appropriate AppletContext. <li> Instantiate an AppletStub() and associate that AppletStub with the Applet via an invocation of setStub(). <li> If BeanContext parameter is null, then it shall associate the Applet with its appropriate Container by adding that Applet to its Container via an invocation of add(). If the BeanContext parameter is non-null, then it is the responsibility of the BeanContext to associate the Applet with its Container during the subsequent invocation of its addChildren() method. </ol>
 * @param newAppletBean  The newly instantiated JavaBean
 * @param bCtxt          The BeanContext intended for this Applet, ornull.
 */
void initialize(Applet newAppletBean,BeanContext bCtxt);"
77488,"/** 
 * From a given bean, obtain an object representing a specified type view of that source object. <p> The result may be the same object or a different object.  If the requested target view isn't available then the given bean is returned. <p> This method is provided in Beans 1.0 as a hook to allow the addition of more flexible bean behaviour in the future.
 * @param bean        Object from which we want to obtain a view.
 * @param targetType  The type of view we'd like to get.
 */
public static Object getInstanceOf(Object bean,Class<?> targetType){
  return bean;
}","/** 
 * From a given bean, obtain an object representing a specified type view of that source object. <p> The result may be the same object or a different object.  If the requested target view isn't available then the given bean is returned. <p> This method is provided in Beans 1.0 as a hook to allow the addition of more flexible bean behaviour in the future.
 * @return an object representing a specified type view of thesource object
 * @param bean        Object from which we want to obtain a view.
 * @param targetType  The type of view we'd like to get.
 */
public static Object getInstanceOf(Object bean,Class<?> targetType){
  return bean;
}"
77489,"/** 
 * Instantiate a bean. <p> The bean is created based on a name relative to a class-loader. This name should be a dot-separated name such as ""a.b.c"". <p> In Beans 1.0 the given name can indicate either a serialized object or a class.  Other mechanisms may be added in the future.  In beans 1.0 we first try to treat the beanName as a serialized object name then as a class name. <p> When using the beanName as a serialized object name we convert the given beanName to a resource pathname and add a trailing "".ser"" suffix. We then try to load a serialized object from that resource. <p> For example, given a beanName of ""x.y"", Beans.instantiate would first try to read a serialized object from the resource ""x/y.ser"" and if that failed it would try to load the class ""x.y"" and create an instance of that class. <p> If the bean is a subtype of java.applet.Applet, then it is given some special initialization.  First, it is supplied with a default AppletStub and AppletContext.  Second, if it was instantiated from a classname the applet's ""init"" method is called.  (If the bean was deserialized this step is skipped.) <p> Note that for beans which are applets, it is the caller's responsiblity to call ""start"" on the applet.  For correct behaviour, this should be done after the applet has been added into a visible AWT container. <p> Note that applets created via beans.instantiate run in a slightly different environment than applets running inside browsers.  In particular, bean applets have no access to ""parameters"", so they may wish to provide property get/set methods to set parameter values.  We advise bean-applet developers to test their bean-applets against both the JDK appletviewer (for a reference browser environment) and the BDK BeanBox (for a reference bean container).
 * @param cls         the class-loader from which we should createthe bean.  If this is null, then the system class-loader is used.
 * @param beanName    the name of the bean within the class-loader.For example ""sun.beanbox.foobah""
 * @param beanContext The BeanContext in which to nest the new bean
 * @param initializer The AppletInitializer for the new bean
 * @exception ClassNotFoundException if the class of a serializedobject could not be found.
 * @exception IOException if an I/O error occurs.
 */
public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext,AppletInitializer initializer) throws IOException, ClassNotFoundException {
  InputStream ins;
  ObjectInputStream oins=null;
  Object result=null;
  boolean serialized=false;
  IOException serex=null;
  if (cls == null) {
    try {
      cls=ClassLoader.getSystemClassLoader();
    }
 catch (    SecurityException ex) {
    }
  }
  final String serName=beanName.replace('.','/').concat(""String_Node_Str"");
  final ClassLoader loader=cls;
  ins=AccessController.doPrivileged(new PrivilegedAction<InputStream>(){
    public InputStream run(){
      if (loader == null)       return ClassLoader.getSystemResourceAsStream(serName);
 else       return loader.getResourceAsStream(serName);
    }
  }
);
  if (ins != null) {
    try {
      if (cls == null) {
        oins=new ObjectInputStream(ins);
      }
 else {
        oins=new ObjectInputStreamWithLoader(ins,cls);
      }
      result=oins.readObject();
      serialized=true;
      oins.close();
    }
 catch (    IOException ex) {
      ins.close();
      serex=ex;
    }
catch (    ClassNotFoundException ex) {
      ins.close();
      throw ex;
    }
  }
  if (result == null) {
    Class<?> cl;
    try {
      cl=ClassFinder.findClass(beanName,cls);
    }
 catch (    ClassNotFoundException ex) {
      if (serex != null) {
        throw serex;
      }
      throw ex;
    }
    try {
      result=cl.newInstance();
    }
 catch (    Exception ex) {
      throw new ClassNotFoundException(""String_Node_Str"" + cl + ""String_Node_Str""+ ex,ex);
    }
  }
  if (result != null) {
    AppletStub stub=null;
    if (result instanceof Applet) {
      Applet applet=(Applet)result;
      boolean needDummies=initializer == null;
      if (needDummies) {
        final String resourceName;
        if (serialized) {
          resourceName=beanName.replace('.','/').concat(""String_Node_Str"");
        }
 else {
          resourceName=beanName.replace('.','/').concat(""String_Node_Str"");
        }
        URL objectUrl=null;
        URL codeBase=null;
        URL docBase=null;
        final ClassLoader cloader=cls;
        objectUrl=AccessController.doPrivileged(new PrivilegedAction<URL>(){
          public URL run(){
            if (cloader == null)             return ClassLoader.getSystemResource(resourceName);
 else             return cloader.getResource(resourceName);
          }
        }
);
        if (objectUrl != null) {
          String s=objectUrl.toExternalForm();
          if (s.endsWith(resourceName)) {
            int ix=s.length() - resourceName.length();
            codeBase=new URL(s.substring(0,ix));
            docBase=codeBase;
            ix=s.lastIndexOf('/');
            if (ix >= 0) {
              docBase=new URL(s.substring(0,ix + 1));
            }
          }
        }
        BeansAppletContext context=new BeansAppletContext(applet);
        stub=(AppletStub)new BeansAppletStub(applet,context,codeBase,docBase);
        applet.setStub(stub);
      }
 else {
        initializer.initialize(applet,beanContext);
      }
      if (beanContext != null) {
        unsafeBeanContextAdd(beanContext,result);
      }
      if (!serialized) {
        applet.setSize(100,100);
        applet.init();
      }
      if (needDummies) {
        ((BeansAppletStub)stub).active=true;
      }
 else       initializer.activate(applet);
    }
 else     if (beanContext != null)     unsafeBeanContextAdd(beanContext,result);
  }
  return result;
}","/** 
 * Instantiate a bean. <p> The bean is created based on a name relative to a class-loader. This name should be a dot-separated name such as ""a.b.c"". <p> In Beans 1.0 the given name can indicate either a serialized object or a class.  Other mechanisms may be added in the future.  In beans 1.0 we first try to treat the beanName as a serialized object name then as a class name. <p> When using the beanName as a serialized object name we convert the given beanName to a resource pathname and add a trailing "".ser"" suffix. We then try to load a serialized object from that resource. <p> For example, given a beanName of ""x.y"", Beans.instantiate would first try to read a serialized object from the resource ""x/y.ser"" and if that failed it would try to load the class ""x.y"" and create an instance of that class. <p> If the bean is a subtype of java.applet.Applet, then it is given some special initialization.  First, it is supplied with a default AppletStub and AppletContext.  Second, if it was instantiated from a classname the applet's ""init"" method is called.  (If the bean was deserialized this step is skipped.) <p> Note that for beans which are applets, it is the caller's responsiblity to call ""start"" on the applet.  For correct behaviour, this should be done after the applet has been added into a visible AWT container. <p> Note that applets created via beans.instantiate run in a slightly different environment than applets running inside browsers.  In particular, bean applets have no access to ""parameters"", so they may wish to provide property get/set methods to set parameter values.  We advise bean-applet developers to test their bean-applets against both the JDK appletviewer (for a reference browser environment) and the BDK BeanBox (for a reference bean container).
 * @return a JavaBean
 * @param cls         the class-loader from which we should createthe bean.  If this is null, then the system class-loader is used.
 * @param beanName    the name of the bean within the class-loader.For example ""sun.beanbox.foobah""
 * @param beanContext The BeanContext in which to nest the new bean
 * @param initializer The AppletInitializer for the new bean
 * @exception ClassNotFoundException if the class of a serializedobject could not be found.
 * @exception IOException if an I/O error occurs.
 */
public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext,AppletInitializer initializer) throws IOException, ClassNotFoundException {
  InputStream ins;
  ObjectInputStream oins=null;
  Object result=null;
  boolean serialized=false;
  IOException serex=null;
  if (cls == null) {
    try {
      cls=ClassLoader.getSystemClassLoader();
    }
 catch (    SecurityException ex) {
    }
  }
  final String serName=beanName.replace('.','/').concat(""String_Node_Str"");
  final ClassLoader loader=cls;
  ins=AccessController.doPrivileged(new PrivilegedAction<InputStream>(){
    public InputStream run(){
      if (loader == null)       return ClassLoader.getSystemResourceAsStream(serName);
 else       return loader.getResourceAsStream(serName);
    }
  }
);
  if (ins != null) {
    try {
      if (cls == null) {
        oins=new ObjectInputStream(ins);
      }
 else {
        oins=new ObjectInputStreamWithLoader(ins,cls);
      }
      result=oins.readObject();
      serialized=true;
      oins.close();
    }
 catch (    IOException ex) {
      ins.close();
      serex=ex;
    }
catch (    ClassNotFoundException ex) {
      ins.close();
      throw ex;
    }
  }
  if (result == null) {
    Class<?> cl;
    try {
      cl=ClassFinder.findClass(beanName,cls);
    }
 catch (    ClassNotFoundException ex) {
      if (serex != null) {
        throw serex;
      }
      throw ex;
    }
    try {
      result=cl.newInstance();
    }
 catch (    Exception ex) {
      throw new ClassNotFoundException(""String_Node_Str"" + cl + ""String_Node_Str""+ ex,ex);
    }
  }
  if (result != null) {
    AppletStub stub=null;
    if (result instanceof Applet) {
      Applet applet=(Applet)result;
      boolean needDummies=initializer == null;
      if (needDummies) {
        final String resourceName;
        if (serialized) {
          resourceName=beanName.replace('.','/').concat(""String_Node_Str"");
        }
 else {
          resourceName=beanName.replace('.','/').concat(""String_Node_Str"");
        }
        URL objectUrl=null;
        URL codeBase=null;
        URL docBase=null;
        final ClassLoader cloader=cls;
        objectUrl=AccessController.doPrivileged(new PrivilegedAction<URL>(){
          public URL run(){
            if (cloader == null)             return ClassLoader.getSystemResource(resourceName);
 else             return cloader.getResource(resourceName);
          }
        }
);
        if (objectUrl != null) {
          String s=objectUrl.toExternalForm();
          if (s.endsWith(resourceName)) {
            int ix=s.length() - resourceName.length();
            codeBase=new URL(s.substring(0,ix));
            docBase=codeBase;
            ix=s.lastIndexOf('/');
            if (ix >= 0) {
              docBase=new URL(s.substring(0,ix + 1));
            }
          }
        }
        BeansAppletContext context=new BeansAppletContext(applet);
        stub=(AppletStub)new BeansAppletStub(applet,context,codeBase,docBase);
        applet.setStub(stub);
      }
 else {
        initializer.initialize(applet,beanContext);
      }
      if (beanContext != null) {
        unsafeBeanContextAdd(beanContext,result);
      }
      if (!serialized) {
        applet.setSize(100,100);
        applet.init();
      }
      if (needDummies) {
        ((BeansAppletStub)stub).active=true;
      }
 else       initializer.activate(applet);
    }
 else     if (beanContext != null)     unsafeBeanContextAdd(beanContext,result);
  }
  return result;
}"
77490,"/** 
 * This default implementation of the <code>initialize</code> method assumes all state held in objects of this type is exposed via the matching pairs of ""setter"" and ""getter"" methods in the order they are returned by the Introspector. If a property descriptor defines a ""transient"" attribute with a value equal to <code>Boolean.TRUE</code> the property is ignored by this default implementation. Note that this use of the word ""transient"" is quite independent of the field modifier that is used by the <code>ObjectOutputStream</code>. <p> For each non-transient property, an expression is created in which the nullary ""getter"" method is applied to the <code>oldInstance</code>. The value of this expression is the value of the property in the instance that is being serialized. If the value of this expression in the cloned environment <code>mutatesTo</code> the target value, the new value is initialized to make it equivalent to the old value. In this case, because the property value has not changed there is no need to call the corresponding ""setter"" method and no statement is emitted. If not however, the expression for this value is replaced with another expression (normally a constructor) and the corresponding ""setter"" method is called to install the new property value in the object. This scheme removes default information from the output produced by streams using this delegate. <p> In passing these statements to the output stream, where they will be executed, side effects are made to the <code>newInstance</code>. In most cases this allows the problem of properties whose values depend on each other to actually help the serialization process by making the number of statements that need to be written to the output smaller. In general, the problem of handling interdependent properties is reduced to that of finding an order for the properties in a class such that no property value depends on the value of a subsequent property.
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @param out The stream to which any initialization statements should be written.
 * @throws NullPointerException if {@code out} is {@code null}
 * @see java.beans.Introspector#getBeanInfo
 * @see java.beans.PropertyDescriptor
 */
protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder out){
  super.initialize(type,oldInstance,newInstance,out);
  if (oldInstance.getClass() == type) {
    initBean(type,oldInstance,newInstance,out);
  }
}","/** 
 * This default implementation of the <code>initialize</code> method assumes all state held in objects of this type is exposed via the matching pairs of ""setter"" and ""getter"" methods in the order they are returned by the Introspector. If a property descriptor defines a ""transient"" attribute with a value equal to <code>Boolean.TRUE</code> the property is ignored by this default implementation. Note that this use of the word ""transient"" is quite independent of the field modifier that is used by the <code>ObjectOutputStream</code>. <p> For each non-transient property, an expression is created in which the nullary ""getter"" method is applied to the <code>oldInstance</code>. The value of this expression is the value of the property in the instance that is being serialized. If the value of this expression in the cloned environment <code>mutatesTo</code> the target value, the new value is initialized to make it equivalent to the old value. In this case, because the property value has not changed there is no need to call the corresponding ""setter"" method and no statement is emitted. If not however, the expression for this value is replaced with another expression (normally a constructor) and the corresponding ""setter"" method is called to install the new property value in the object. This scheme removes default information from the output produced by streams using this delegate. <p> In passing these statements to the output stream, where they will be executed, side effects are made to the <code>newInstance</code>. In most cases this allows the problem of properties whose values depend on each other to actually help the serialization process by making the number of statements that need to be written to the output smaller. In general, the problem of handling interdependent properties is reduced to that of finding an order for the properties in a class such that no property value depends on the value of a subsequent property.
 * @param type the type of the instances
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @param out The stream to which any initialization statements should be written.
 * @throws NullPointerException if {@code out} is {@code null}
 * @see java.beans.Introspector#getBeanInfo
 * @see java.beans.PropertyDescriptor
 */
protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder out){
  super.initialize(type,oldInstance,newInstance,out);
  if (oldInstance.getClass() == type) {
    initBean(type,oldInstance,newInstance,out);
  }
}"
77491,"/** 
 * Creates an implementation of <code>listenerInterface</code> in which the method named <code>listenerMethodName</code> passes the value of the event expression, <code>eventPropertyName</code>, to the final method in the statement, <code>action</code>, which is applied to the <code>target</code>. All of the other listener methods do nothing. <p> The <code>eventPropertyName</code> string is used to extract a value from the incoming event object that is passed to the target method.  The common case is the target method takes no arguments, in which case a value of null should be used for the <code>eventPropertyName</code>.  Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the <code>eventPropertyName</code> string is a sequence of methods or properties where each method or property is applied to the value returned by the preceeding method starting from the incoming event object. The syntax is: <code>propertyName{.propertyName}*</code> where <code>propertyName</code> matches a method or property.  For example, to extract the <code>point</code> property from a <code>MouseEvent</code>, you could use either <code>""point""</code> or <code>""getPoint""</code> as the <code>eventPropertyName</code>.  To extract the ""text"" property from a <code>MouseEvent</code> with a <code>JLabel</code> source use any of the following as <code>eventPropertyName</code>: <code>""source.text""</code>, <code>""getSource.text""</code> <code>""getSource.getText""</code> or <code>""source.getText""</code>.  If a method can not be found, or an exception is generated as part of invoking a method a <code>RuntimeException</code> will be thrown at dispatch time.  For example, if the incoming event object is null, and <code>eventPropertyName</code> is non-null and not empty, a <code>RuntimeException</code> will be thrown. <p> The <code>action</code> argument is of the same format as the <code>eventPropertyName</code> argument where the last property name identifies either a method name or writable property. <p> If the <code>listenerMethodName</code> is <code>null</code> <em>all</em> methods in the interface trigger the <code>action</code> to be executed on the <code>target</code>. <p> For example, to create a <code>MouseListener</code> that sets the target object's <code>origin</code> property to the incoming <code>MouseEvent</code>'s location (that's the value of <code>mouseEvent.getPoint()</code>) each time a mouse button is pressed, one would write: <blockquote> <pre> EventHandler.create(MouseListener.class, target, ""origin"", ""point"", ""mousePressed""); </pre> </blockquote> This is comparable to writing a <code>MouseListener</code> in which all of the methods except <code>mousePressed</code> are no-ops: <blockquote> <pre> //Equivalent code using an inner class instead of EventHandler. new MouseAdapter() { public void mousePressed(MouseEvent e) { target.setOrigin(e.getPoint()); } }; </pre> </blockquote>
 * @param listenerInterface the listener interface to create a proxy for
 * @param target the object that will perform the action
 * @param action the name of a (possibly qualified) property or method onthe target
 * @param eventPropertyName the (possibly qualified) name of a readable property of the incoming event
 * @param listenerMethodName the name of the method in the listener interface that should trigger the action
 * @return an object that implements <code>listenerInterface</code>
 * @throws NullPointerException if <code>listenerInterface</code> is null
 * @throws NullPointerException if <code>target</code> is null
 * @throws NullPointerException if <code>action</code> is null
 * @see EventHandler
 */
@SuppressWarnings(""String_Node_Str"") public static <T>T create(Class<T> listenerInterface,Object target,String action,String eventPropertyName,String listenerMethodName){
  EventHandler eventHandler=new EventHandler(target,action,eventPropertyName,listenerMethodName);
  if (listenerInterface == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return (T)Proxy.newProxyInstance(target.getClass().getClassLoader(),new Class<?>[]{listenerInterface},eventHandler);
}","/** 
 * Creates an implementation of <code>listenerInterface</code> in which the method named <code>listenerMethodName</code> passes the value of the event expression, <code>eventPropertyName</code>, to the final method in the statement, <code>action</code>, which is applied to the <code>target</code>. All of the other listener methods do nothing. <p> The <code>eventPropertyName</code> string is used to extract a value from the incoming event object that is passed to the target method.  The common case is the target method takes no arguments, in which case a value of null should be used for the <code>eventPropertyName</code>.  Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the <code>eventPropertyName</code> string is a sequence of methods or properties where each method or property is applied to the value returned by the preceeding method starting from the incoming event object. The syntax is: <code>propertyName{.propertyName}*</code> where <code>propertyName</code> matches a method or property.  For example, to extract the <code>point</code> property from a <code>MouseEvent</code>, you could use either <code>""point""</code> or <code>""getPoint""</code> as the <code>eventPropertyName</code>.  To extract the ""text"" property from a <code>MouseEvent</code> with a <code>JLabel</code> source use any of the following as <code>eventPropertyName</code>: <code>""source.text""</code>, <code>""getSource.text""</code> <code>""getSource.getText""</code> or <code>""source.getText""</code>.  If a method can not be found, or an exception is generated as part of invoking a method a <code>RuntimeException</code> will be thrown at dispatch time.  For example, if the incoming event object is null, and <code>eventPropertyName</code> is non-null and not empty, a <code>RuntimeException</code> will be thrown. <p> The <code>action</code> argument is of the same format as the <code>eventPropertyName</code> argument where the last property name identifies either a method name or writable property. <p> If the <code>listenerMethodName</code> is <code>null</code> <em>all</em> methods in the interface trigger the <code>action</code> to be executed on the <code>target</code>. <p> For example, to create a <code>MouseListener</code> that sets the target object's <code>origin</code> property to the incoming <code>MouseEvent</code>'s location (that's the value of <code>mouseEvent.getPoint()</code>) each time a mouse button is pressed, one would write: <blockquote> <pre> EventHandler.create(MouseListener.class, target, ""origin"", ""point"", ""mousePressed""); </pre> </blockquote> This is comparable to writing a <code>MouseListener</code> in which all of the methods except <code>mousePressed</code> are no-ops: <blockquote> <pre> //Equivalent code using an inner class instead of EventHandler. new MouseAdapter() { public void mousePressed(MouseEvent e) { target.setOrigin(e.getPoint()); } }; </pre> </blockquote>
 * @param < T > the type to create
 * @param listenerInterface the listener interface to create a proxy for
 * @param target the object that will perform the action
 * @param action the name of a (possibly qualified) property or method onthe target
 * @param eventPropertyName the (possibly qualified) name of a readable property of the incoming event
 * @param listenerMethodName the name of the method in the listener interface that should trigger the action
 * @return an object that implements <code>listenerInterface</code>
 * @throws NullPointerException if <code>listenerInterface</code> is null
 * @throws NullPointerException if <code>target</code> is null
 * @throws NullPointerException if <code>action</code> is null
 * @see EventHandler
 */
@SuppressWarnings(""String_Node_Str"") public static <T>T create(Class<T> listenerInterface,Object target,String action,String eventPropertyName,String listenerMethodName){
  EventHandler eventHandler=new EventHandler(target,action,eventPropertyName,listenerMethodName);
  if (listenerInterface == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return (T)Proxy.newProxyInstance(target.getClass().getClassLoader(),new Class<?>[]{listenerInterface},eventHandler);
}"
77492,"/** 
 * If the value property of this instance is not already set, this method dynamically finds the method with the specified methodName on this target with these arguments and calls it. The result of the method invocation is first copied into the value property of this expression and then returned as the result of <code>getValue</code>. If the value property was already set, either by a call to <code>setValue</code> or a previous call to <code>getValue</code> then the value property is returned without either looking up or calling the method. <p> The value property of an <code>Expression</code> is set to a unique private (non-<code>null</code>) value by default and this value is used as an internal indication that the method has not yet been called. A return value of <code>null</code> replaces this default value in the same way that any other value would, ensuring that expressions are never evaluated more than once. <p> See the <code>excecute</code> method for details on how methods are chosen using the dynamic types of the target and arguments.
 * @see Statement#execute
 * @see #setValue
 * @return The result of applying this method to these arguments.
 */
public Object getValue() throws Exception {
  if (value == unbound) {
    setValue(invoke());
  }
  return value;
}","/** 
 * If the value property of this instance is not already set, this method dynamically finds the method with the specified methodName on this target with these arguments and calls it. The result of the method invocation is first copied into the value property of this expression and then returned as the result of <code>getValue</code>. If the value property was already set, either by a call to <code>setValue</code> or a previous call to <code>getValue</code> then the value property is returned without either looking up or calling the method. <p> The value property of an <code>Expression</code> is set to a unique private (non-<code>null</code>) value by default and this value is used as an internal indication that the method has not yet been called. A return value of <code>null</code> replaces this default value in the same way that any other value would, ensuring that expressions are never evaluated more than once. <p> See the <code>execute</code> method for details on how methods are chosen using the dynamic types of the target and arguments.
 * @see Statement#execute
 * @see #setValue
 * @return The result of applying this method to these arguments.
 * @throws Exception if the method with the specified methodNamethrows an exception
 */
public Object getValue() throws Exception {
  if (value == unbound) {
    setValue(invoke());
  }
  return value;
}"
77493,"/** 
 * Sets the method that should be used to read an indexed property value.
 * @param readMethod The new indexed read method.
 */
public synchronized void setIndexedReadMethod(Method readMethod) throws IntrospectionException {
  setIndexedPropertyType(findIndexedPropertyType(readMethod,getIndexedWriteMethod0()));
  setIndexedReadMethod0(readMethod);
}","/** 
 * Sets the method that should be used to read an indexed property value.
 * @param readMethod The new indexed read method.
 * @throws IntrospectionException if an exception occurs duringintrospection.
 */
public synchronized void setIndexedReadMethod(Method readMethod) throws IntrospectionException {
  setIndexedPropertyType(findIndexedPropertyType(readMethod,getIndexedWriteMethod0()));
  setIndexedReadMethod0(readMethod);
}"
77494,"/** 
 * Sets the method that should be used to write an indexed property value.
 * @param writeMethod The new indexed write method.
 */
public synchronized void setIndexedWriteMethod(Method writeMethod) throws IntrospectionException {
  Class<?> type=findIndexedPropertyType(getIndexedReadMethod(),writeMethod);
  setIndexedPropertyType(type);
  setIndexedWriteMethod0(writeMethod);
}","/** 
 * Sets the method that should be used to write an indexed property value.
 * @param writeMethod The new indexed write method.
 * @throws IntrospectionException if an exception occurs duringintrospection.
 */
public synchronized void setIndexedWriteMethod(Method writeMethod) throws IntrospectionException {
  Class<?> type=findIndexedPropertyType(getIndexedReadMethod(),writeMethod);
  setIndexedPropertyType(type);
  setIndexedWriteMethod0(writeMethod);
}"
77495,"/** 
 * Produce a series of statements with side effects on <code>newInstance</code> so that the new instance becomes <em>equivalent</em> to <code>oldInstance</code>. In the specification of this method, we mean by equivalent that, after the method returns, the modified instance is indistinguishable from <code>newInstance</code> in the behavior of all methods in its public API. <p> The implementation typically achieves this goal by producing a series of ""what happened"" statements involving the <code>oldInstance</code> and its publicly available state. These statements are sent to the output stream using its <code>writeExpression</code> method which returns an expression involving elements in a cloned environment simulating the state of an input stream during reading. Each statement returned will have had all instances the old environment replaced with objects which exist in the new one. In particular, references to the target of these statements, which start out as references to <code>oldInstance</code> are returned as references to the <code>newInstance</code> instead. Executing these statements effects an incremental alignment of the state of the two objects as a series of modifications to the objects in the new environment. By the time the initialize method returns it should be impossible to tell the two instances apart by using their public APIs. Most importantly, the sequence of steps that were used to make these objects appear equivalent will have been recorded by the output stream and will form the actual output when the stream is flushed. <p> The default implementation, calls the <code>initialize</code> method of the type's superclass.
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @param out The stream to which any initialization statements should be written.
 * @throws NullPointerException if {@code out} is {@code null}
 */
protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder out){
  Class<?> superType=type.getSuperclass();
  PersistenceDelegate info=out.getPersistenceDelegate(superType);
  info.initialize(superType,oldInstance,newInstance,out);
}","/** 
 * Produce a series of statements with side effects on <code>newInstance</code> so that the new instance becomes <em>equivalent</em> to <code>oldInstance</code>. In the specification of this method, we mean by equivalent that, after the method returns, the modified instance is indistinguishable from <code>newInstance</code> in the behavior of all methods in its public API. <p> The implementation typically achieves this goal by producing a series of ""what happened"" statements involving the <code>oldInstance</code> and its publicly available state. These statements are sent to the output stream using its <code>writeExpression</code> method which returns an expression involving elements in a cloned environment simulating the state of an input stream during reading. Each statement returned will have had all instances the old environment replaced with objects which exist in the new one. In particular, references to the target of these statements, which start out as references to <code>oldInstance</code> are returned as references to the <code>newInstance</code> instead. Executing these statements effects an incremental alignment of the state of the two objects as a series of modifications to the objects in the new environment. By the time the initialize method returns it should be impossible to tell the two instances apart by using their public APIs. Most importantly, the sequence of steps that were used to make these objects appear equivalent will have been recorded by the output stream and will form the actual output when the stream is flushed. <p> The default implementation, calls the <code>initialize</code> method of the type's superclass.
 * @param type the type of the instances
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @param out The stream to which any initialization statements should be written.
 * @throws NullPointerException if {@code out} is {@code null}
 */
protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder out){
  Class<?> superType=type.getSuperclass();
  PersistenceDelegate info=out.getPersistenceDelegate(superType);
  info.initialize(superType,oldInstance,newInstance,out);
}"
77496,"/** 
 * Sets the method that should be used to write the property value.
 * @param writeMethod The new write method.
 */
public synchronized void setWriteMethod(Method writeMethod) throws IntrospectionException {
  if (writeMethod == null) {
    writeMethodName=null;
    writeMethodRef=null;
    return;
  }
  setPropertyType(findPropertyType(getReadMethod(),writeMethod));
  setClass0(writeMethod.getDeclaringClass());
  writeMethodName=writeMethod.getName();
  this.writeMethodRef=getSoftReference(writeMethod);
  setTransient(writeMethod.getAnnotation(Transient.class));
}","/** 
 * Sets the method that should be used to write the property value.
 * @param writeMethod The new write method.
 * @throws IntrospectionException if the write method is invalid
 */
public synchronized void setWriteMethod(Method writeMethod) throws IntrospectionException {
  if (writeMethod == null) {
    writeMethodName=null;
    writeMethodRef=null;
    return;
  }
  setPropertyType(findPropertyType(getReadMethod(),writeMethod));
  setClass0(writeMethod.getDeclaringClass());
  writeMethodName=writeMethod.getName();
  this.writeMethodRef=getSoftReference(writeMethod);
  setTransient(writeMethod.getAnnotation(Transient.class));
}"
77497,"/** 
 * Sets the method that should be used to read the property value.
 * @param readMethod The new read method.
 */
public synchronized void setReadMethod(Method readMethod) throws IntrospectionException {
  if (readMethod == null) {
    readMethodName=null;
    readMethodRef=null;
    return;
  }
  setPropertyType(findPropertyType(readMethod,getWriteMethod0()));
  setClass0(readMethod.getDeclaringClass());
  readMethodName=readMethod.getName();
  this.readMethodRef=getSoftReference(readMethod);
  setTransient(readMethod.getAnnotation(Transient.class));
}","/** 
 * Sets the method that should be used to read the property value.
 * @param readMethod The new read method.
 * @throws IntrospectionException if the read method is invalid
 */
public synchronized void setReadMethod(Method readMethod) throws IntrospectionException {
  if (readMethod == null) {
    readMethodName=null;
    readMethodRef=null;
    return;
  }
  setPropertyType(findPropertyType(readMethod,getWriteMethod0()));
  setClass0(readMethod.getDeclaringClass());
  readMethodName=readMethod.getName();
  this.readMethodRef=getSoftReference(readMethod);
  setTransient(readMethod.getAnnotation(Transient.class));
}"
77498,"/** 
 * Analagous to <code>java.lang.ClassLoader.getResource()</code>, this method allows a <code>BeanContext</code> implementation to interpose behavior between the child <code>Component</code> and underlying <code>ClassLoader</code>.
 * @param name the resource name
 * @param bcc the specified child
 * @return a <code>URL</code> for the namedresource for the specified child
 * @throws <code>IllegalArgumentException</code>if the resource is not valid
 */
URL getResource(String name,BeanContextChild bcc) throws IllegalArgumentException ;","/** 
 * Analagous to <code>java.lang.ClassLoader.getResource()</code>, this method allows a <code>BeanContext</code> implementation to interpose behavior between the child <code>Component</code> and underlying <code>ClassLoader</code>.
 * @param name the resource name
 * @param bcc the specified child
 * @return a <code>URL</code> for the namedresource for the specified child
 * @throws IllegalArgumentException if the resource is not valid
 */
URL getResource(String name,BeanContextChild bcc) throws IllegalArgumentException ;"
77499,"/** 
 * Adds the specified <code>BeanContextMembershipListener</code> to receive <code>BeanContextMembershipEvents</code> from this <code>BeanContext</code> whenever it adds or removes a child <code>Component</code>(s).
 * @param bcml the <code>BeanContextMembershipListener</code> to be added
 */
void addBeanContextMembershipListener(BeanContextMembershipListener bcml);","/** 
 * Adds the specified <code>BeanContextMembershipListener</code> to receive <code>BeanContextMembershipEvents</code> from this <code>BeanContext</code> whenever it adds or removes a child <code>Component</code>(s).
 * @param bcml the BeanContextMembershipListener to be added
 */
void addBeanContextMembershipListener(BeanContextMembershipListener bcml);"
77500,"/** 
 * Analagous to <code>java.lang.ClassLoader.getResourceAsStream()</code>, this method allows a <code>BeanContext</code> implementation to interpose behavior between the child <code>Component</code> and underlying <code>ClassLoader</code>.
 * @param name the resource name
 * @param bcc the specified child
 * @return an <code>InputStream</code> for reading the resource,or <code>null</code> if the resource could not be found.
 * @throws <code>IllegalArgumentException</code> ifthe resource is not valid
 */
InputStream getResourceAsStream(String name,BeanContextChild bcc) throws IllegalArgumentException ;","/** 
 * Analagous to <code>java.lang.ClassLoader.getResourceAsStream()</code>, this method allows a <code>BeanContext</code> implementation to interpose behavior between the child <code>Component</code> and underlying <code>ClassLoader</code>.
 * @param name the resource name
 * @param bcc the specified child
 * @return an <code>InputStream</code> for reading the resource,or <code>null</code> if the resource could not be found.
 * @throws IllegalArgumentException ifthe resource is not valid
 */
InputStream getResourceAsStream(String name,BeanContextChild bcc) throws IllegalArgumentException ;"
77501,"/** 
 * Instantiate the javaBean named as a child of this <code>BeanContext</code>. The implementation of the JavaBean is derived from the value of the beanName parameter, and is defined by the <code>java.beans.Beans.instantiate()</code> method.
 * @param beanName The name of the JavaBean to instantiateas a child of this <code>BeanContext</code>
 * @throws <code>IOException</code>
 * @throws <code>ClassNotFoundException</code> if the class identifiedby the beanName parameter is not found
 */
Object instantiateChild(String beanName) throws IOException, ClassNotFoundException ;","/** 
 * Instantiate the javaBean named as a child of this <code>BeanContext</code>. The implementation of the JavaBean is derived from the value of the beanName parameter, and is defined by the <code>java.beans.Beans.instantiate()</code> method.
 * @return a javaBean named as a child of this<code>BeanContext</code>
 * @param beanName The name of the JavaBean to instantiateas a child of this <code>BeanContext</code>
 * @throws IOException if an IO problem occurs
 * @throws ClassNotFoundException if the class identifiedby the beanName parameter is not found
 */
Object instantiateChild(String beanName) throws IOException, ClassNotFoundException ;"
77502,"/** 
 * A static method to retrieve the named object. See   {@link #doLookup(Name)} for details.
 * @param name the name of the object to look up
 * @return  the object bound to <tt>name</tt>
 * @throws NamingException if a naming exception is encountered
 * @since 1.6
 */
@SuppressWarnings(""String_Node_Str"") public static <T>T doLookup(String name) throws NamingException {
  return (T)(new InitialContext()).lookup(name);
}","/** 
 * A static method to retrieve the named object. See   {@link #doLookup(Name)} for details.
 * @param < T > the type of the returned object
 * @param name the name of the object to look up
 * @return  the object bound to <tt>name</tt>
 * @throws NamingException if a naming exception is encountered
 * @since 1.6
 */
@SuppressWarnings(""String_Node_Str"") public static <T>T doLookup(String name) throws NamingException {
  return (T)(new InitialContext()).lookup(name);
}"
77503,"/** 
 * Determines whether obj is equal to this RefAddr. <p> obj is equal to this RefAddr all of these conditions are true <ul> non-null <li> instance of RefAddr <li> obj has the same address type as this RefAddr (using String.compareTo()) <li> both obj and this RefAddr's contents are null or they are equal (using the equals() test). </ul>
 * @param obj possibly null obj to check.
 * @return true if obj is equal to this refaddr; false otherwise.
 * @see #getContent
 * @see #getType
 */
public boolean equals(Object obj){
  if ((obj != null) && (obj instanceof RefAddr)) {
    RefAddr target=(RefAddr)obj;
    if (addrType.compareTo(target.addrType) == 0) {
      Object thisobj=this.getContent();
      Object thatobj=target.getContent();
      if (thisobj == thatobj)       return true;
      if (thisobj != null)       return thisobj.equals(thatobj);
    }
  }
  return false;
}","/** 
 * Determines whether obj is equal to this RefAddr. <p> obj is equal to this RefAddr all of these conditions are true <ul> <li> non-null <li> instance of RefAddr <li> obj has the same address type as this RefAddr (using String.compareTo()) <li> both obj and this RefAddr's contents are null or they are equal (using the equals() test). </ul>
 * @param obj possibly null obj to check.
 * @return true if obj is equal to this refaddr; false otherwise.
 * @see #getContent
 * @see #getType
 */
public boolean equals(Object obj){
  if ((obj != null) && (obj instanceof RefAddr)) {
    RefAddr target=(RefAddr)obj;
    if (addrType.compareTo(target.addrType) == 0) {
      Object thisobj=this.getContent();
      Object thatobj=target.getContent();
      if (thisobj == thatobj)       return true;
      if (thisobj != null)       return thisobj.equals(thatobj);
    }
  }
  return false;
}"
77504,"protected ControlFactory(){
}","/** 
 * Creates a new instance of a control factory.
 */
protected ControlFactory(){
}"
77505,"/** 
 * Inserts the specified element at the front of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #addFirst} method,which can fail to insert an element only by throwing an exception.
 * @param e the element to add
 * @return <tt>true</tt> if the element was added to this deque, else<tt>false</tt>
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offerFirst(E e);","/** 
 * Inserts the specified element at the front of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #addFirst} method,which can fail to insert an element only by throwing an exception.
 * @param e the element to add
 * @return {@code true} if the element was added to this deque, else{@code false}
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offerFirst(E e);"
77506,"/** 
 * Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns <tt>null</tt> if this deque is empty. <p>This method is equivalent to   {@link #pollFirst()}.
 * @return the first element of this deque, or <tt>null</tt> ifthis deque is empty
 */
E poll();","/** 
 * Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns  {@code null} if this deque is empty.<p>This method is equivalent to  {@link #pollFirst()}.
 * @return the first element of this deque, or {@code null} ifthis deque is empty
 */
E poll();"
77507,"/** 
 * Retrieves and removes the last element of this deque, or returns <tt>null</tt> if this deque is empty.
 * @return the tail of this deque, or <tt>null</tt> if this deque is empty
 */
E pollLast();","/** 
 * Retrieves and removes the last element of this deque, or returns   {@code null} if this deque is empty.
 * @return the tail of this deque, or {@code null} if this deque is empty
 */
E pollLast();"
77508,"/** 
 * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). <p>This method is equivalent to   {@link #removeFirstOccurrence}.
 * @param o element to be removed from this deque, if present
 * @return <tt>true</tt> if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean remove(Object o);","/** 
 * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element   {@code e} such that<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns  {@code true} if this deque contained the specified element(or equivalently, if this deque changed as a result of the call). <p>This method is equivalent to  {@link #removeFirstOccurrence(Object)}.
 * @param o element to be removed from this deque, if present
 * @return {@code true} if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean remove(Object o);"
77509,"/** 
 * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning <tt>true</tt> upon success and <tt>false</tt> if no space is currently available.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #add} method, which can fail toinsert an element only by throwing an exception. <p>This method is equivalent to  {@link #offerLast}.
 * @param e the element to add
 * @return <tt>true</tt> if the element was added to this deque, else<tt>false</tt>
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offer(E e);","/** 
 * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning  {@code true} upon success and {@code false} if no space is currentlyavailable.  When using a capacity-restricted deque, this method is generally preferable to the  {@link #add} method, which can fail toinsert an element only by throwing an exception. <p>This method is equivalent to  {@link #offerLast}.
 * @param e the element to add
 * @return {@code true} if the element was added to this deque, else{@code false}
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offer(E e);"
77510,"/** 
 * Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions. When using a capacity-restricted deque, it is generally preferable to use method   {@link #offerLast}. <p>This method is equivalent to   {@link #add}.
 * @param e the element to add
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void addLast(E e);","/** 
 * Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an   {@code IllegalStateException} if no space is currentlyavailable.  When using a capacity-restricted deque, it is generally preferable to use method  {@link #offerLast}. <p>This method is equivalent to   {@link #add}.
 * @param e the element to add
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void addLast(E e);"
77511,"/** 
 * Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).
 * @param o element to be removed from this deque, if present
 * @return <tt>true</tt> if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean removeLastOccurrence(Object o);","/** 
 * Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element   {@code e} such that<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns  {@code true} if this deque contained the specified element(or equivalently, if this deque changed as a result of the call).
 * @param o element to be removed from this deque, if present
 * @return {@code true} if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean removeLastOccurrence(Object o);"
77512,"/** 
 * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt> if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use   {@link #offer(Object) offer}. <p>This method is equivalent to   {@link #addLast}.
 * @param e the element to add
 * @return <tt>true</tt> (as specified by {@link Collection#add})
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean add(E e);","/** 
 * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning  {@code true} upon success and throwing an{@code IllegalStateException} if no space is currently available.When using a capacity-restricted deque, it is generally preferable to use  {@link #offer(Object) offer}. <p>This method is equivalent to   {@link #addLast}.
 * @param e the element to add
 * @return {@code true} (as specified by {@link Collection#add})
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean add(E e);"
77513,"/** 
 * Retrieves, but does not remove, the first element of this deque, or returns <tt>null</tt> if this deque is empty.
 * @return the head of this deque, or <tt>null</tt> if this deque is empty
 */
E peekFirst();","/** 
 * Retrieves, but does not remove, the first element of this deque, or returns   {@code null} if this deque is empty.
 * @return the head of this deque, or {@code null} if this deque is empty
 */
E peekFirst();"
77514,"/** 
 * Retrieves, but does not remove, the last element of this deque, or returns <tt>null</tt> if this deque is empty.
 * @return the tail of this deque, or <tt>null</tt> if this deque is empty
 */
E peekLast();","/** 
 * Retrieves, but does not remove, the last element of this deque, or returns   {@code null} if this deque is empty.
 * @return the tail of this deque, or {@code null} if this deque is empty
 */
E peekLast();"
77515,"/** 
 * Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, returning <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt> if no space is currently available. <p>This method is equivalent to   {@link #addFirst}.
 * @param e the element to push
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void push(E e);","/** 
 * Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an  {@code IllegalStateException} if no space is currently available.<p>This method is equivalent to  {@link #addFirst}.
 * @param e the element to push
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void push(E e);"
77516,"/** 
 * Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns <tt>null</tt> if this deque is empty. <p>This method is equivalent to   {@link #peekFirst()}.
 * @return the head of the queue represented by this deque, or<tt>null</tt> if this deque is empty
 */
E peek();","/** 
 * Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns   {@code null} if this deque is empty.<p>This method is equivalent to  {@link #peekFirst()}.
 * @return the head of the queue represented by this deque, or{@code null} if this deque is empty
 */
E peek();"
77517,"/** 
 * Inserts the specified element at the end of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #addLast} method,which can fail to insert an element only by throwing an exception.
 * @param e the element to add
 * @return <tt>true</tt> if the element was added to this deque, else<tt>false</tt>
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offerLast(E e);","/** 
 * Inserts the specified element at the end of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #addLast} method,which can fail to insert an element only by throwing an exception.
 * @param e the element to add
 * @return {@code true} if the element was added to this deque, else{@code false}
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offerLast(E e);"
77518,"/** 
 * Returns <tt>true</tt> if this deque contains the specified element. More formally, returns <tt>true</tt> if and only if this deque contains at least one element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
 * @param o element whose presence in this deque is to be tested
 * @return <tt>true</tt> if this deque contains the specified element
 * @throws ClassCastException if the type of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean contains(Object o);","/** 
 * Returns   {@code true} if this deque contains the specified element.More formally, returns  {@code true} if and only if this deque containsat least one element  {@code e} such that<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
 * @param o element whose presence in this deque is to be tested
 * @return {@code true} if this deque contains the specified element
 * @throws ClassCastException if the type of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean contains(Object o);"
77519,"/** 
 * Retrieves and removes the first element of this deque, or returns <tt>null</tt> if this deque is empty.
 * @return the head of this deque, or <tt>null</tt> if this deque is empty
 */
E pollFirst();","/** 
 * Retrieves and removes the first element of this deque, or returns   {@code null} if this deque is empty.
 * @return the head of this deque, or {@code null} if this deque is empty
 */
E pollFirst();"
77520,"/** 
 * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).
 * @param o element to be removed from this deque, if present
 * @return <tt>true</tt> if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean removeFirstOccurrence(Object o);","/** 
 * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element   {@code e} such that<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns  {@code true} if this deque contained the specified element(or equivalently, if this deque changed as a result of the call).
 * @param o element to be removed from this deque, if present
 * @return {@code true} if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean removeFirstOccurrence(Object o);"
77521,"/** 
 * Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions. When using a capacity-restricted deque, it is generally preferable to use method   {@link #offerFirst}.
 * @param e the element to add
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void addFirst(E e);","/** 
 * Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an   {@code IllegalStateException} if no space is currentlyavailable.  When using a capacity-restricted deque, it is generally preferable to use method  {@link #offerFirst}.
 * @param e the element to add
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void addFirst(E e);"
77522,"/** 
 * <p>Returns an object representing the value of OUT parameter  {@code parameterName} and will convert from theSQL type of the parameter to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements  {@code SQLData}, or   {@code Struct}. Additional conversions may be supported and are vendor defined.
 * @param parameterName the name of the parameter
 * @param type Class representing the Java data type to convertthe designated parameter to.
 * @return an instance of {@code type} holding the OUT parametervalue
 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs
 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.7
 */
public <T>T getObject(String parameterName,Class<T> type) throws SQLException ;","/** 
 * <p>Returns an object representing the value of OUT parameter  {@code parameterName} and will convert from theSQL type of the parameter to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements  {@code SQLData}, or   {@code Struct}. Additional conversions may be supported and are vendor defined.
 * @param parameterName the name of the parameter
 * @param type Class representing the Java data type to convertthe designated parameter to.
 * @param < T > the type of the class modeled by this Class object
 * @return an instance of {@code type} holding the OUT parametervalue
 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs
 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.7
 */
public <T>T getObject(String parameterName,Class<T> type) throws SQLException ;"
77523,"/** 
 * Retrieves whether this database supports the given result set holdability.
 * @param holdability one of the following constants:<code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or <code>ResultSet.CLOSE_CURSORS_AT_COMMIT<code>
 * @return <code>true</code> if so; <code>false</code> otherwise
 * @exception SQLException if a database access error occurs
 * @see Connection
 * @since 1.4
 */
boolean supportsResultSetHoldability(int holdability) throws SQLException ;","/** 
 * Retrieves whether this database supports the given result set holdability.
 * @param holdability one of the following constants:<code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
 * @return <code>true</code> if so; <code>false</code> otherwise
 * @exception SQLException if a database access error occurs
 * @see Connection
 * @since 1.4
 */
boolean supportsResultSetHoldability(int holdability) throws SQLException ;"
77524,"/** 
 * Return the parent Logger of all the Loggers used by this driver. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this driver. Configuring this Logger will affect all of the log messages generated by the driver. In the worst case, this may be the root Logger.
 * @return the parent Logger for this driver
 * @throws SQLFeatureNotSupportedException if the driver does not use <code>java.util.logging<code>.
 * @since 1.7
 */
public Logger getParentLogger() throws SQLFeatureNotSupportedException ;","/** 
 * Return the parent Logger of all the Loggers used by this driver. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this driver. Configuring this Logger will affect all of the log messages generated by the driver. In the worst case, this may be the root Logger.
 * @return the parent Logger for this driver
 * @throws SQLFeatureNotSupportedException if the driver does not use{@code java.util.logging}.
 * @since 1.7
 */
public Logger getParentLogger() throws SQLFeatureNotSupportedException ;"
77525,"/** 
 * Reports whether this driver is a genuine JDBC Compliant<sup><font size=-2>TM</font></sup> driver. A driver may only report <code>true</code> here if it passes the JDBC compliance tests; otherwise it is required to return <code>false</code>. <P> JDBC compliance requires full support for the JDBC API and full support for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will be available for all the major commercial databases. <P> This method is not intended to encourage the development of non-JDBC compliant drivers, but is a recognition of the fact that some vendors are interested in using the JDBC API and framework for lightweight databases that do not support full database functionality, or for special databases such as document information retrieval where a SQL implementation may not be feasible.
 * @return <code>true</code> if this driver is JDBC Compliant; <code>false</code>otherwise
 */
boolean jdbcCompliant();","/** 
 * Reports whether this driver is a genuine JDBC Compliant&trade; driver. A driver may only report <code>true</code> here if it passes the JDBC compliance tests; otherwise it is required to return <code>false</code>. <P> JDBC compliance requires full support for the JDBC API and full support for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will be available for all the major commercial databases. <P> This method is not intended to encourage the development of non-JDBC compliant drivers, but is a recognition of the fact that some vendors are interested in using the JDBC API and framework for lightweight databases that do not support full database functionality, or for special databases such as document information retrieval where a SQL implementation may not be feasible.
 * @return <code>true</code> if this driver is JDBC Compliant; <code>false</code>otherwise
 */
boolean jdbcCompliant();"
77526,"/** 
 * <p>Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements   {@code SQLData}, or   {@code Struct}. Additional conversions may be supported and are vendor defined.
 * @param columnLabel the label for the column specified with the SQL AS clause.If the SQL AS clause was not specified, then the label is the name of the column
 * @param type Class representing the Java data type to convert the designatedcolumn to.
 * @return an instance of {@code type} holding the column value
 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs
 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.7
 */
public <T>T getObject(String columnLabel,Class<T> type) throws SQLException ;","/** 
 * <p>Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements   {@code SQLData}, or   {@code Struct}. Additional conversions may be supported and are vendor defined.
 * @param columnLabel the label for the column specified with the SQL AS clause.If the SQL AS clause was not specified, then the label is the name of the column
 * @param type Class representing the Java data type to convert the designatedcolumn to.
 * @param < T > the type of the class modeled by this Class object
 * @return an instance of {@code type} holding the column value
 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs
 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.7
 */
public <T>T getObject(String columnLabel,Class<T> type) throws SQLException ;"
77527,"/** 
 * Reads the next attribute in the stream and returns it as an  {@code Object} in the Java programming language. Theactual type of the object returned is determined by the specified Java data type, and any customizations present in this stream's type map. <P>A type map is registered with the stream by the JDBC driver before the stream is passed to the application. <P>When the attribute at the head of the stream is an SQL  {@code NULL}the method returns   {@code null}. If the attribute is an SQL structured or distinct type, it determines the SQL type of the attribute at the head of the stream. If the stream's type map has an entry for that SQL type, the driver constructs an object of the appropriate class and calls the method  {@code SQLData.readSQL} on that object, which reads additional data from thestream, using the protocol described for that method. <p> The default implementation will throw  {@code SQLFeatureNotSupportedException}
 * @param type Class representing the Java data type to convert the attribute to.
 * @return the attribute at the head of the stream as an {@code Object} in theJava programming language; {@code null} if the attribute is SQL {@code NULL}
 * @exception SQLException if a database access error occurs
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.8
 */
default <T>T readObject(Class<T> type) throws SQLException {
  throw new SQLFeatureNotSupportedException();
}","/** 
 * Reads the next attribute in the stream and returns it as an  {@code Object} in the Java programming language. Theactual type of the object returned is determined by the specified Java data type, and any customizations present in this stream's type map. <P>A type map is registered with the stream by the JDBC driver before the stream is passed to the application. <P>When the attribute at the head of the stream is an SQL  {@code NULL}the method returns   {@code null}. If the attribute is an SQL structured or distinct type, it determines the SQL type of the attribute at the head of the stream. If the stream's type map has an entry for that SQL type, the driver constructs an object of the appropriate class and calls the method  {@code SQLData.readSQL} on that object, which reads additional data from thestream, using the protocol described for that method. <p> The default implementation will throw  {@code SQLFeatureNotSupportedException}
 * @param < T > the type of the class modeled by this Class object
 * @param type Class representing the Java data type to convert the attribute to.
 * @return the attribute at the head of the stream as an {@code Object} in theJava programming language; {@code null} if the attribute is SQL {@code NULL}
 * @exception SQLException if a database access error occurs
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.8
 */
default <T>T readObject(Class<T> type) throws SQLException {
  throw new SQLFeatureNotSupportedException();
}"
77528,"/** 
 * Returns a Result for setting the XML value designated by this SQLXML instance. <p> The systemID of the Result is implementation dependent. <p> The SQL XML object becomes not writeable when this method is called and may also become not readable depending on implementation. <p> Note that SAX is a callback architecture and the returned SAXResult has a content handler assigned that will receive the SAX events based on the contents of the XML.  Call the content handler with the contents of the XML document to assign the values. <pre> SAXResult saxResult = sqlxml.setResult(SAXResult.class); ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler(); contentHandler.startDocument(); // set the XML elements and attributes into the result contentHandler.endDocument(); </pre>
 * @param resultClass The class of the result, or null.If resultClass is null, a vendor specific Result implementation will be returned. The following classes are supported at a minimum: <pre> javax.xml.transform.dom.DOMResult - returns a DOMResult javax.xml.transform.sax.SAXResult - returns a SAXResult javax.xml.transform.stax.StAXResult - returns a StAXResult javax.xml.transform.stream.StreamResult - returns a StreamResult </pre>
 * @return Returns a Result for setting the XML value.
 * @throws SQLException if there is an error processing the XML valueor if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not writable.
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.6
 */
<T extends Result>T setResult(Class<T> resultClass) throws SQLException ;","/** 
 * Returns a Result for setting the XML value designated by this SQLXML instance. <p> The systemID of the Result is implementation dependent. <p> The SQL XML object becomes not writeable when this method is called and may also become not readable depending on implementation. <p> Note that SAX is a callback architecture and the returned SAXResult has a content handler assigned that will receive the SAX events based on the contents of the XML.  Call the content handler with the contents of the XML document to assign the values. <pre> SAXResult saxResult = sqlxml.setResult(SAXResult.class); ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler(); contentHandler.startDocument(); // set the XML elements and attributes into the result contentHandler.endDocument(); </pre>
 * @param < T > the type of the class modeled by this Class object
 * @param resultClass The class of the result, or null.If resultClass is null, a vendor specific Result implementation will be returned. The following classes are supported at a minimum: <pre> javax.xml.transform.dom.DOMResult - returns a DOMResult javax.xml.transform.sax.SAXResult - returns a SAXResult javax.xml.transform.stax.StAXResult - returns a StAXResult javax.xml.transform.stream.StreamResult - returns a StreamResult </pre>
 * @return Returns a Result for setting the XML value.
 * @throws SQLException if there is an error processing the XML valueor if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not writable.
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.6
 */
<T extends Result>T setResult(Class<T> resultClass) throws SQLException ;"
77529,"/** 
 * Returns a Source for reading the XML value designated by this SQLXML instance. Sources are used as inputs to XML parsers and XSLT transformers. <p> Sources for XML parsers will have namespace processing on by default. The systemID of the Source is implementation dependent. <p> The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation. <p> Note that SAX is a callback architecture, so a returned SAXSource should then be set with a content handler that will receive the SAX events from parsing.  The content handler will receive callbacks based on the contents of the XML. <pre> SAXSource saxSource = sqlxml.getSource(SAXSource.class); XMLReader xmlReader = saxSource.getXMLReader(); xmlReader.setContentHandler(myHandler); xmlReader.parse(saxSource.getInputSource()); </pre>
 * @param sourceClass The class of the source, or null.If the class is null, a vendor specifc Source implementation will be returned. The following classes are supported at a minimum: <pre> javax.xml.transform.dom.DOMSource - returns a DOMSource javax.xml.transform.sax.SAXSource - returns a SAXSource javax.xml.transform.stax.StAXSource - returns a StAXSource javax.xml.transform.stream.StreamSource - returns a StreamSource </pre>
 * @return a Source for reading the XML value.
 * @throws SQLException if there is an error processing the XML valueor if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not readable.
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.6
 */
<T extends Source>T getSource(Class<T> sourceClass) throws SQLException ;","/** 
 * Returns a Source for reading the XML value designated by this SQLXML instance. Sources are used as inputs to XML parsers and XSLT transformers. <p> Sources for XML parsers will have namespace processing on by default. The systemID of the Source is implementation dependent. <p> The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation. <p> Note that SAX is a callback architecture, so a returned SAXSource should then be set with a content handler that will receive the SAX events from parsing.  The content handler will receive callbacks based on the contents of the XML. <pre> SAXSource saxSource = sqlxml.getSource(SAXSource.class); XMLReader xmlReader = saxSource.getXMLReader(); xmlReader.setContentHandler(myHandler); xmlReader.parse(saxSource.getInputSource()); </pre>
 * @param < T > the type of the class modeled by this Class object
 * @param sourceClass The class of the source, or null.If the class is null, a vendor specifc Source implementation will be returned. The following classes are supported at a minimum: <pre> javax.xml.transform.dom.DOMSource - returns a DOMSource javax.xml.transform.sax.SAXSource - returns a SAXSource javax.xml.transform.stax.StAXSource - returns a StAXSource javax.xml.transform.stream.StreamSource - returns a StreamSource </pre>
 * @return a Source for reading the XML value.
 * @throws SQLException if there is an error processing the XML valueor if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not readable.
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.6
 */
<T extends Source>T getSource(Class<T> sourceClass) throws SQLException ;"
77530,"/** 
 * Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy. If the receiver implements the interface then the result is the receiver or a proxy for the receiver. If the receiver is a wrapper and the wrapped object implements the interface then the result is the wrapped object or a proxy for the wrapped object. Otherwise return the the result of calling <code>unwrap</code> recursively on the wrapped object or a proxy for that result. If the receiver is not a wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
 * @param iface A Class defining an interface that the result must implement.
 * @return an object that implements the interface. May be a proxy for the actual implementing object.
 * @throws java.sql.SQLException If no object found that implements the interface
 * @since 1.6
 */
<T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException ;","/** 
 * Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy. If the receiver implements the interface then the result is the receiver or a proxy for the receiver. If the receiver is a wrapper and the wrapped object implements the interface then the result is the wrapped object or a proxy for the wrapped object. Otherwise return the the result of calling <code>unwrap</code> recursively on the wrapped object or a proxy for that result. If the receiver is not a wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
 * @param < T > the type of the class modeled by this Class object
 * @param iface A Class defining an interface that the result must implement.
 * @return an object that implements the interface. May be a proxy for the actual implementing object.
 * @throws java.sql.SQLException If no object found that implements the interface
 * @since 1.6
 */
<T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException ;"
77531,"/** 
 * Return the parent Logger of all the Loggers used by this data source. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this data source. Configuring this Logger will affect all of the log messages generated by the data source. In the worst case, this may be the root Logger.
 * @return the parent Logger for this data source
 * @throws SQLFeatureNotSupportedException if the data source does not use <code>java.util.logging<code>.
 * @since 1.7
 */
public Logger getParentLogger() throws SQLFeatureNotSupportedException ;","/** 
 * Return the parent Logger of all the Loggers used by this data source. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this data source. Configuring this Logger will affect all of the log messages generated by the data source. In the worst case, this may be the root Logger.
 * @return the parent Logger for this data source
 * @throws SQLFeatureNotSupportedException if the data source does not use{@code java.util.logging}
 * @since 1.7
 */
public Logger getParentLogger() throws SQLFeatureNotSupportedException ;"
77532,"/** 
 * Notifies registered listeners that a RowSet object in the given RowSetEvent object has populated a number of additional rows. The <code>numRows</code> parameter ensures that this event will only be fired every <code>numRow</code>. <p> The source of the event can be retrieved with the method event.getSource.
 * @param event a <code>RowSetEvent</code> object that contains the<code>RowSet</code> object that is the source of the events
 * @param numRows when populating, the number of rows interval on which the<code>CachedRowSet</code> populated should fire; the default value is zero; cannot be less than <code>fetchSize</code> or zero
 */
public void rowSetPopulated(RowSetEvent event,int numRows) throws SQLException ;","/** 
 * Notifies registered listeners that a RowSet object in the given RowSetEvent object has populated a number of additional rows. The <code>numRows</code> parameter ensures that this event will only be fired every <code>numRow</code>. <p> The source of the event can be retrieved with the method event.getSource.
 * @param event a <code>RowSetEvent</code> object that contains the<code>RowSet</code> object that is the source of the events
 * @param numRows when populating, the number of rows interval on which the<code>CachedRowSet</code> populated should fire; the default value is zero; cannot be less than <code>fetchSize</code> or zero
 * @throws SQLException {@code numRows < 0 or numRows < getFetchSize() }
 */
public void rowSetPopulated(RowSetEvent event,int numRows) throws SQLException ;"
77533,"/** 
 * Propagates all row update, insert and delete changes to the data source backing this <code>CachedRowSet</code> object using the specified <code>Connection</code> object to establish a connection to the data source. <P> The other version of the <code>acceptChanges</code> method is not passed a connection because it uses the <code>Connection</code> object already defined within the <code>RowSet</code> object, which is the connection used for populating it initially. <P> This form of the method <code>acceptChanges</code> is similar to the form that takes no arguments; however, unlike the other form, this form can be used only when the underlying data source is a JDBC data source. The updated <code>Connection</code> properties must be used by the <code>SyncProvider</code> to reset the <code>RowSetWriter</code> configuration to ensure that the contents of the <code>CachedRowSet</code> object are synchronized correctly. <P> When the method <code>acceptChanges</code> executes successfully, in addition to writing changes to the data source, it makes the values in the current row be the values in the original row. <P> Depending on the synchronization level of the <code>SyncProvider</code> implementation being used, the writer will compare the original values with those in the data source to check for conflicts. When there is a conflict, the <code>RIOptimisticProvider</code> implementation, for example, throws a <code>SyncProviderException</code> and does not write anything to the data source. <P> An application may choose to catch the <code>SyncProviderException</code> object and retrieve the <code>SyncResolver</code> object it contains. The <code>SyncResolver</code> object lists the conflicts row by row and sets a lock on the data source to avoid further conflicts while the current conflicts are being resolved. Further, for each conflict, it provides methods for examining the conflict and setting the value that should be persisted in the data source. After all conflicts have been resolved, an application must call the <code>acceptChanges</code> method again to write resolved values to the data source.  If all of the values in the data source are already the values to be persisted, the method <code>acceptChanges</code> does nothing. <P> Some provider implementations may use locks to ensure that there are no conflicts.  In such cases, it is guaranteed that the writer will succeed in writing changes to the data source when the method <code>acceptChanges</code> is called.  This method may be called immediately after the methods <code>updateRow</code>, <code>insertRow</code>, or <code>deleteRow</code> have been called, but it is more efficient to call it only once after all changes have been made so that only one connection needs to be established. <P> Note: The <code>acceptChanges()</code> method will determine if the <code>COMMIT_ON_ACCEPT_CHANGES</code> is set to true or not. If it is set to true, all updates in the synchronization are committed to the data source. Otherwise, the application <b>must</b> explicity call the <code>commit</code> or <code>rollback</code> methods as appropriate.
 * @param con a standard JDBC <code>Connection</code> object
 * @throws SQLException if the cursor is on the insert row
 * @throws SyncProviderException if the underlyingsynchronization provider's writer fails to write the updates back to the data source
 * @see #acceptChanges()
 * @see javax.sql.RowSetWriter
 * @see javax.sql.rowset.spi.SyncFactory
 * @see javax.sql.rowset.spi.SyncProvider
 * @see javax.sql.rowset.spi.SyncProviderException
 * @see javax.sql.rowset.spi.SyncResolver
 */
public void acceptChanges(Connection con) throws SyncProviderException ;","/** 
 * Propagates all row update, insert and delete changes to the data source backing this <code>CachedRowSet</code> object using the specified <code>Connection</code> object to establish a connection to the data source. <P> The other version of the <code>acceptChanges</code> method is not passed a connection because it uses the <code>Connection</code> object already defined within the <code>RowSet</code> object, which is the connection used for populating it initially. <P> This form of the method <code>acceptChanges</code> is similar to the form that takes no arguments; however, unlike the other form, this form can be used only when the underlying data source is a JDBC data source. The updated <code>Connection</code> properties must be used by the <code>SyncProvider</code> to reset the <code>RowSetWriter</code> configuration to ensure that the contents of the <code>CachedRowSet</code> object are synchronized correctly. <P> When the method <code>acceptChanges</code> executes successfully, in addition to writing changes to the data source, it makes the values in the current row be the values in the original row. <P> Depending on the synchronization level of the <code>SyncProvider</code> implementation being used, the writer will compare the original values with those in the data source to check for conflicts. When there is a conflict, the <code>RIOptimisticProvider</code> implementation, for example, throws a <code>SyncProviderException</code> and does not write anything to the data source. <P> An application may choose to catch the <code>SyncProviderException</code> object and retrieve the <code>SyncResolver</code> object it contains. The <code>SyncResolver</code> object lists the conflicts row by row and sets a lock on the data source to avoid further conflicts while the current conflicts are being resolved. Further, for each conflict, it provides methods for examining the conflict and setting the value that should be persisted in the data source. After all conflicts have been resolved, an application must call the <code>acceptChanges</code> method again to write resolved values to the data source.  If all of the values in the data source are already the values to be persisted, the method <code>acceptChanges</code> does nothing. <P> Some provider implementations may use locks to ensure that there are no conflicts.  In such cases, it is guaranteed that the writer will succeed in writing changes to the data source when the method <code>acceptChanges</code> is called.  This method may be called immediately after the methods <code>updateRow</code>, <code>insertRow</code>, or <code>deleteRow</code> have been called, but it is more efficient to call it only once after all changes have been made so that only one connection needs to be established. <P> Note: The <code>acceptChanges()</code> method will determine if the <code>COMMIT_ON_ACCEPT_CHANGES</code> is set to true or not. If it is set to true, all updates in the synchronization are committed to the data source. Otherwise, the application <b>must</b> explicity call the <code>commit</code> or <code>rollback</code> methods as appropriate.
 * @param con a standard JDBC <code>Connection</code> object
 * @throws SyncProviderException if the underlyingsynchronization provider's writer fails to write the updates back to the data source
 * @see #acceptChanges()
 * @see javax.sql.RowSetWriter
 * @see javax.sql.rowset.spi.SyncFactory
 * @see javax.sql.rowset.spi.SyncProvider
 * @see javax.sql.rowset.spi.SyncProviderException
 * @see javax.sql.rowset.spi.SyncResolver
 */
public void acceptChanges(Connection con) throws SyncProviderException ;"
77534,"/** 
 * Creates a <code>CachedRowSet</code> object that is an empty copy of this <code>CachedRowSet</code> object.  The copy must not contain any contents but only represent the table structure of the original <code>CachedRowSet</code> object. In addition, primary or foreign key constraints set in the originating <code>CachedRowSet</code> object must be equally enforced in the new empty <code>CachedRowSet</code> object. In contrast to the <code>RowSet</code> object generated from a <code>createShared</code> method call, updates made to a copy of this <code>CachedRowSet</code> object with the <code>createCopySchema</code> method must not be visible to it. <P> Applications can form a <code>WebRowSet</code> object from the <code>CachedRowSet</code> object returned by this method in order to export the <code>RowSet</code> schema definition to XML for future use.
 * @throws SQLException if an error occurs in cloning the structure of this<code>CachedRowSet</code> object
 * @see #createShared
 * @see #createCopySchema
 * @see #createCopyNoConstraints
 * @see javax.sql.RowSetEvent
 * @see javax.sql.RowSetListener
 */
public CachedRowSet createCopySchema() throws SQLException ;","/** 
 * Creates a <code>CachedRowSet</code> object that is an empty copy of this <code>CachedRowSet</code> object.  The copy must not contain any contents but only represent the table structure of the original <code>CachedRowSet</code> object. In addition, primary or foreign key constraints set in the originating <code>CachedRowSet</code> object must be equally enforced in the new empty <code>CachedRowSet</code> object. In contrast to the <code>RowSet</code> object generated from a <code>createShared</code> method call, updates made to a copy of this <code>CachedRowSet</code> object with the <code>createCopySchema</code> method must not be visible to it. <P> Applications can form a <code>WebRowSet</code> object from the <code>CachedRowSet</code> object returned by this method in order to export the <code>RowSet</code> schema definition to XML for future use.
 * @return An empty copy of this {@code CachedRowSet} object
 * @throws SQLException if an error occurs in cloning the structure of this<code>CachedRowSet</code> object
 * @see #createShared
 * @see #createCopySchema
 * @see #createCopyNoConstraints
 * @see javax.sql.RowSetEvent
 * @see javax.sql.RowSetListener
 */
public CachedRowSet createCopySchema() throws SQLException ;"
77535,"/** 
 * Returns an implementation of an interface using member functions of a scripting object compiled in the interpreter. The methods of the interface may be implemented using the <code>invokeMethod</code> method.
 * @param thiz The scripting object whose member functions are used to implement the methods of the interface.
 * @param clasz The <code>Class</code> object of the interface to return.
 * @return An instance of requested interface - null if the requested interface is unavailable,i. e. if compiled methods in the <code>ScriptEngine</code> cannot be found matching the ones in the requested interface.
 * @throws IllegalArgumentException if the specified <code>Class</code> objectis null or is not an interface, or if the specified Object is null or does not represent a scripting object.
 */
public <T>T getInterface(Object thiz,Class<T> clasz);","/** 
 * Returns an implementation of an interface using member functions of a scripting object compiled in the interpreter. The methods of the interface may be implemented using the <code>invokeMethod</code> method.
 * @param < T > the type of the interface to return
 * @param thiz The scripting object whose member functions are used to implement the methods of the interface.
 * @param clasz The <code>Class</code> object of the interface to return.
 * @return An instance of requested interface - null if the requested interface is unavailable,i. e. if compiled methods in the <code>ScriptEngine</code> cannot be found matching the ones in the requested interface.
 * @throws IllegalArgumentException if the specified <code>Class</code> objectis null or is not an interface, or if the specified Object is null or does not represent a scripting object.
 */
public <T>T getInterface(Object thiz,Class<T> clasz);"
77536,"/** 
 * Used to call top-level procedures and functions defined in scripts.
 * @param args Arguments to pass to the procedure or function
 * @return The value returned by the procedure or function
 * @throws ScriptException if an error occurrs during invocation of the method.
 * @throws NoSuchMethodException if method with given name or matching argument types cannot be found.
 * @throws NullPointerException if method name is null.
 */
public Object invokeFunction(String name,Object... args) throws ScriptException, NoSuchMethodException ;","/** 
 * Used to call top-level procedures and functions defined in scripts.
 * @param name of the procedure or function to call
 * @param args Arguments to pass to the procedure or function
 * @return The value returned by the procedure or function
 * @throws ScriptException if an error occurrs during invocation of the method.
 * @throws NoSuchMethodException if method with given name or matching argument types cannot be found.
 * @throws NullPointerException if method name is null.
 */
public Object invokeFunction(String name,Object... args) throws ScriptException, NoSuchMethodException ;"
77537,"/** 
 * Gets the <code>Bindings</code>  associated with the given scope in this <code>ScriptContext</code>.
 * @return The associated <code>Bindings</code>.  Returns <code>null</code> if it has notbeen set.
 * @throws IllegalArgumentException If no <code>Bindings</code> is defined for thespecified scope value in <code>ScriptContext</code> of this type.
 */
public Bindings getBindings(int scope);","/** 
 * Gets the <code>Bindings</code>  associated with the given scope in this <code>ScriptContext</code>.
 * @return The associated <code>Bindings</code>.  Returns <code>null</code> if it has notbeen set.
 * @param scope The scope
 * @throws IllegalArgumentException If no <code>Bindings</code> is defined for thespecified scope value in <code>ScriptContext</code> of this type.
 */
public Bindings getBindings(int scope);"
77538,"/** 
 * Returns an immutable list of  short names for the <code>ScriptEngine</code>, which may be used to identify the <code>ScriptEngine</code> by the <code>ScriptEngineManager</code>. For instance, an implementation based on the Mozilla Rhino Javascript engine might return list containing {&quot;javascript&quot;, &quot;rhino&quot;}.
 */
public List<String> getNames();","/** 
 * Returns an immutable list of  short names for the <code>ScriptEngine</code>, which may be used to identify the <code>ScriptEngine</code> by the <code>ScriptEngineManager</code>. For instance, an implementation based on the Mozilla Rhino Javascript engine might return list containing {&quot;javascript&quot;, &quot;rhino&quot;}.
 * @return an immutable list of short names
 */
public List<String> getNames();"
77539,"public SimpleScriptContext(){
  engineScope=new SimpleBindings();
  globalScope=null;
  reader=new InputStreamReader(System.in);
  writer=new PrintWriter(System.out,true);
  errorWriter=new PrintWriter(System.err,true);
}","/** 
 * Create a   {@code SimpleScriptContext}.
 */
public SimpleScriptContext(){
  engineScope=new SimpleBindings();
  globalScope=null;
  reader=new InputStreamReader(System.in);
  writer=new PrintWriter(System.out,true);
  errorWriter=new PrintWriter(System.err,true);
}"
77540,"/** 
 * Put the given key-value association into this preference node.  It is guaranteed that <tt>key</tt> and <tt>value</tt> are non-null and of legal length.  Also, it is guaranteed that this node has not been removed.  (The implementor needn't check for any of these things.) <p>This method is invoked with the lock on this node held.
 */
protected abstract void putSpi(String key,String value);","/** 
 * Put the given key-value association into this preference node.  It is guaranteed that <tt>key</tt> and <tt>value</tt> are non-null and of legal length.  Also, it is guaranteed that this node has not been removed.  (The implementor needn't check for any of these things.) <p>This method is invoked with the lock on this node held.
 * @param key the key
 * @param value the value
 */
protected abstract void putSpi(String key,String value);"
77541,"/** 
 * Remove the association (if any) for the specified key at this preference node.  It is guaranteed that <tt>key</tt> is non-null. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for either of these things.) <p>This method is invoked with the lock on this node held.
 */
protected abstract void removeSpi(String key);","/** 
 * Remove the association (if any) for the specified key at this preference node.  It is guaranteed that <tt>key</tt> is non-null. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for either of these things.) <p>This method is invoked with the lock on this node held.
 * @param key the key
 */
protected abstract void removeSpi(String key);"
77542,"/** 
 * Return the value associated with the specified key at this preference node, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time.  It is guaranteed that <tt>key</tt> is non-null.  Also, it is guaranteed that this node has not been removed.  (The implementor needn't check for either of these things.) <p> Generally speaking, this method should not throw an exception under any circumstances.  If, however, if it does throw an exception, the exception will be intercepted and treated as a <tt>null</tt> return value. <p>This method is invoked with the lock on this node held.
 * @return the value associated with the specified key at this preferencenode, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time.
 */
protected abstract String getSpi(String key);","/** 
 * Return the value associated with the specified key at this preference node, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time.  It is guaranteed that <tt>key</tt> is non-null.  Also, it is guaranteed that this node has not been removed.  (The implementor needn't check for either of these things.) <p> Generally speaking, this method should not throw an exception under any circumstances.  If, however, if it does throw an exception, the exception will be intercepted and treated as a <tt>null</tt> return value. <p>This method is invoked with the lock on this node held.
 * @param key the key
 * @return the value associated with the specified key at this preferencenode, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time.
 */
protected abstract String getSpi(String key);"
77543,"/** 
 * Returns the user root preference node corresponding to the calling user.  In a server, the returned value will typically depend on some implicit client-context.
 */
Preferences userRoot();","/** 
 * Returns the user root preference node corresponding to the calling user.  In a server, the returned value will typically depend on some implicit client-context.
 * @return the user root preference node corresponding to the callinguser
 */
Preferences userRoot();"
77544,"/** 
 * Returns the system root preference node.  (Multiple calls on this method will return the same object reference.)
 */
Preferences systemRoot();","/** 
 * Returns the system root preference node.  (Multiple calls on this method will return the same object reference.)
 * @return the system root preference node
 */
Preferences systemRoot();"
77545,"/** 
 * Returns the total number of compressed bytes output so far.</p>
 * @return the total (non-negative) number of compressed bytes output so far
 * @since 1.5
 */
public long getBytesWritten(){
synchronized (zsRef) {
    ensureOpen();
    return bytesWritten;
  }
}","/** 
 * Returns the total number of compressed bytes output so far.
 * @return the total (non-negative) number of compressed bytes output so far
 * @since 1.5
 */
public long getBytesWritten(){
synchronized (zsRef) {
    ensureOpen();
    return bytesWritten;
  }
}"
77546,"/** 
 * Returns the total number of uncompressed bytes input so far.</p>
 * @return the total (non-negative) number of uncompressed bytes input so far
 * @since 1.5
 */
public long getBytesRead(){
synchronized (zsRef) {
    ensureOpen();
    return bytesRead;
  }
}","/** 
 * Returns the total number of uncompressed bytes input so far.
 * @return the total (non-negative) number of uncompressed bytes input so far
 * @since 1.5
 */
public long getBytesRead(){
synchronized (zsRef) {
    ensureOpen();
    return bytesRead;
  }
}"
77547,"/** 
 * Returns the total number of uncompressed bytes output so far.</p>
 * @return the total (non-negative) number of uncompressed bytes output so far
 * @since 1.5
 */
public long getBytesWritten(){
synchronized (zsRef) {
    ensureOpen();
    return bytesWritten;
  }
}","/** 
 * Returns the total number of uncompressed bytes output so far.
 * @return the total (non-negative) number of uncompressed bytes output so far
 * @since 1.5
 */
public long getBytesWritten(){
synchronized (zsRef) {
    ensureOpen();
    return bytesWritten;
  }
}"
77548,"/** 
 * Returns the total number of compressed bytes input so far.</p>
 * @return the total (non-negative) number of compressed bytes input so far
 * @since 1.5
 */
public long getBytesRead(){
synchronized (zsRef) {
    ensureOpen();
    return bytesRead;
  }
}","/** 
 * Returns the total number of compressed bytes input so far.
 * @return the total (non-negative) number of compressed bytes input so far
 * @since 1.5
 */
public long getBytesRead(){
synchronized (zsRef) {
    ensureOpen();
    return bytesRead;
  }
}"
77549,"/** 
 * Retrieves the ErrorManager for this Handler.
 * @exception SecurityException  if a security manager exists and ifthe caller does not have <tt>LoggingPermission(""control"")</tt>.
 */
public ErrorManager getErrorManager(){
  checkPermission();
  return errorManager;
}","/** 
 * Retrieves the ErrorManager for this Handler.
 * @return the ErrorManager for this Handler
 * @exception SecurityException  if a security manager exists and ifthe caller does not have <tt>LoggingPermission(""control"")</tt>.
 */
public ErrorManager getErrorManager(){
  checkPermission();
  return errorManager;
}"
77550,"/** 
 * Return the global LogManager object.
 */
public static LogManager getLogManager(){
  if (manager != null) {
    manager.readPrimordialConfiguration();
  }
  return manager;
}","/** 
 * Returns the global LogManager object.
 * @return the global LogManager object
 */
public static LogManager getLogManager(){
  if (manager != null) {
    manager.readPrimordialConfiguration();
  }
  return manager;
}"
77551,"/** 
 * Get the localization resource bundle name <p> This is the name for the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable.
 */
public String getResourceBundleName(){
  return resourceBundleName;
}","/** 
 * Get the localization resource bundle name <p> This is the name for the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable.
 * @return the localization resource bundle name
 */
public String getResourceBundleName(){
  return resourceBundleName;
}"
77552,"/** 
 * Get the localization resource bundle <p> This is the ResourceBundle that should be used to localize the message string before formatting it.  The result may be null if the message is not localizable, or if no suitable ResourceBundle is available.
 */
public ResourceBundle getResourceBundle(){
  return resourceBundle;
}","/** 
 * Get the localization resource bundle <p> This is the ResourceBundle that should be used to localize the message string before formatting it.  The result may be null if the message is not localizable, or if no suitable ResourceBundle is available.
 * @return the localization resource bundle
 */
public ResourceBundle getResourceBundle(){
  return resourceBundle;
}"
77553,"/** 
 * Set the sequence number. <p> Sequence numbers are normally assigned in the LogRecord constructor, so it should not normally be necessary to use this method.
 */
public void setSequenceNumber(long seq){
  sequenceNumber=seq;
}","/** 
 * Set the sequence number. <p> Sequence numbers are normally assigned in the LogRecord constructor, so it should not normally be necessary to use this method.
 * @param seq the sequence number
 */
public void setSequenceNumber(long seq){
  sequenceNumber=seq;
}"
77554,"/** 
 * Returns a hash code for a   {@code boolean} value; compatible with{@code Boolean.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code boolean} value.
 */
public static int hashCode(boolean value){
  return value ? 1231 : 1237;
}","/** 
 * Returns a hash code for a   {@code boolean} value; compatible with{@code Boolean.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code boolean} value.
 * @since 1.8
 */
public static int hashCode(boolean value){
  return value ? 1231 : 1237;
}"
77555,"/** 
 * Returns a hash code for a   {@code byte} value; compatible with{@code Byte.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code byte} value.
 */
public static int hashCode(byte value){
  return (int)value;
}","/** 
 * Returns a hash code for a   {@code byte} value; compatible with{@code Byte.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code byte} value.
 * @since 1.8
 */
public static int hashCode(byte value){
  return (int)value;
}"
77556,"/** 
 * Casts this   {@code Class} object to represent a subclass of the classrepresented by the specified class object.  Checks that the cast is valid, and throws a  {@code ClassCastException} if it is not.  Ifthis method succeeds, it always returns a reference to this class object. <p>This method is useful when a client needs to ""narrow"" the type of a  {@code Class} object to pass it to an API that restricts the{@code Class} objects that it is willing to accept.  A cast wouldgenerate a compile-time warning, as the correctness of the cast could not be checked at runtime (because generic types are implemented by erasure).
 * @return this {@code Class} object, cast to represent a subclass ofthe specified class object.
 * @throws ClassCastException if this {@code Class} object does notrepresent a subclass of the specified class (here ""subclass"" includes the class itself).
 * @since 1.5
 */
@SuppressWarnings(""String_Node_Str"") public <U>Class<? extends U> asSubclass(Class<U> clazz){
  if (clazz.isAssignableFrom(this))   return (Class<? extends U>)this;
 else   throw new ClassCastException(this.toString());
}","/** 
 * Casts this   {@code Class} object to represent a subclass of the classrepresented by the specified class object.  Checks that the cast is valid, and throws a  {@code ClassCastException} if it is not.  Ifthis method succeeds, it always returns a reference to this class object. <p>This method is useful when a client needs to ""narrow"" the type of a  {@code Class} object to pass it to an API that restricts the{@code Class} objects that it is willing to accept.  A cast wouldgenerate a compile-time warning, as the correctness of the cast could not be checked at runtime (because generic types are implemented by erasure).
 * @param < U > the type to cast this class object to
 * @param clazz the class of the type to cast this class object to
 * @return this {@code Class} object, cast to represent a subclass ofthe specified class object.
 * @throws ClassCastException if this {@code Class} object does notrepresent a subclass of the specified class (here ""subclass"" includes the class itself).
 * @since 1.5
 */
@SuppressWarnings(""String_Node_Str"") public <U>Class<? extends U> asSubclass(Class<U> clazz){
  if (clazz.isAssignableFrom(this))   return (Class<? extends U>)this;
 else   throw new ClassCastException(this.toString());
}"
77557,"/** 
 * Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class. (The <em>use</em> of type Foo to specify a superinterface in '... implements Foo' is distinct from the <em>declaration</em> of type Foo.) If this Class represents a class, the return value is an array containing objects representing the uses of interface types to specify interfaces implemented by the class. The order of the objects in the array corresponds to the order of the interface types used in the 'implements' clause of the declaration of this Class. If this Class represents an interface, the return value is an array containing objects representing the uses of interface types to specify interfaces directly extended by the interface. The order of the objects in the array corresponds to the order of the interface types used in the 'extends' clause of the declaration of this Class. If this Class represents a class or interface whose declaration does not explicitly indicate any annotated superinterfaces, the return value is an array of length 0. If this Class represents either the Object class, an array type, a primitive type, or void, the return value is an array of length 0.
 * @since 1.8
 */
public AnnotatedType[] getAnnotatedInterfaces(){
  return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(),getConstantPool(),this);
}","/** 
 * Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class. (The <em>use</em> of type Foo to specify a superinterface in '... implements Foo' is distinct from the <em>declaration</em> of type Foo.) If this Class represents a class, the return value is an array containing objects representing the uses of interface types to specify interfaces implemented by the class. The order of the objects in the array corresponds to the order of the interface types used in the 'implements' clause of the declaration of this Class. If this Class represents an interface, the return value is an array containing objects representing the uses of interface types to specify interfaces directly extended by the interface. The order of the objects in the array corresponds to the order of the interface types used in the 'extends' clause of the declaration of this Class. If this Class represents a class or interface whose declaration does not explicitly indicate any annotated superinterfaces, the return value is an array of length 0. If this Class represents either the Object class, an array type, a primitive type, or void, the return value is an array of length 0.
 * @return an array representing the superinterfaces
 * @since 1.8
 */
public AnnotatedType[] getAnnotatedInterfaces(){
  return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(),getConstantPool(),this);
}"
77558,"/** 
 * Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class. (The <em>use</em> of type Foo to specify the superclass in '... extends Foo' is distinct from the <em>declaration</em> of type Foo.) If this Class represents a class type whose declaration does not explicitly indicate an annotated superclass, the return value is null. If this Class represents either the Object class, an interface type, an array type, a primitive type, or void, the return value is null.
 * @since 1.8
 */
public AnnotatedType getAnnotatedSuperclass(){
  return TypeAnnotationParser.buildAnnotatedSuperclass(getRawTypeAnnotations(),getConstantPool(),this);
}","/** 
 * Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class. (The <em>use</em> of type Foo to specify the superclass in '... extends Foo' is distinct from the <em>declaration</em> of type Foo.) If this Class represents a class type whose declaration does not explicitly indicate an annotated superclass, the return value is null. If this Class represents either the Object class, an interface type, an array type, a primitive type, or void, the return value is null.
 * @return an object representing the superclass
 * @since 1.8
 */
public AnnotatedType getAnnotatedSuperclass(){
  return TypeAnnotationParser.buildAnnotatedSuperclass(getRawTypeAnnotations(),getConstantPool(),this);
}"
77559,"/** 
 * Returns a hash code for a   {@code double} value; compatible with{@code Double.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code double} value.
 */
public static int hashCode(double value){
  long bits=doubleToLongBits(value);
  return (int)(bits ^ (bits >>> 32));
}","/** 
 * Returns a hash code for a   {@code double} value; compatible with{@code Double.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code double} value.
 * @since 1.8
 */
public static int hashCode(double value){
  long bits=doubleToLongBits(value);
  return (int)(bits ^ (bits >>> 32));
}"
77560,"/** 
 * Returns a hash code for a   {@code float} value; compatible with{@code Float.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code float} value.
 */
public static int hashCode(float value){
  return floatToIntBits(value);
}","/** 
 * Returns a hash code for a   {@code float} value; compatible with{@code Float.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code float} value.
 * @since 1.8
 */
public static int hashCode(float value){
  return floatToIntBits(value);
}"
77561,"/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code int} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) <p>Note that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) == rotateRight(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateLeft(val,distance) == rotateLeft(val, distance & 0x1F)}.
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code int} value left by thespecified number of bits.
 * @since 1.5
 */
public static int rotateLeft(int i,int distance){
  return (i << distance) | (i >>> -distance);
}","/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code int} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) <p>Note that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) == rotateRight(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateLeft(val,distance) == rotateLeft(val, distance & 0x1F)}.
 * @param i the value whose bits are to be rotated left
 * @param distance the number of bit positions to rotate left
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code int} value left by thespecified number of bits.
 * @since 1.5
 */
public static int rotateLeft(int i,int distance){
  return (i << distance) | (i >>> -distance);
}"
77562,"/** 
 * Returns a hash code for a   {@code int} value; compatible with{@code Integer.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code int} value.
 */
public static int hashCode(int value){
  return value;
}","/** 
 * Returns a hash code for a   {@code int} value; compatible with{@code Integer.hashCode()}.
 * @param value the value to hash
 * @since 1.8
 * @return a hash code value for a {@code int} value.
 */
public static int hashCode(int value){
  return value;
}"
77563,"/** 
 * Returns an   {@code int} value with at most a single one-bit, in theposition of the lowest-order (""rightmost"") one-bit in the specified {@code int} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @return an {@code int} value with a single one-bit, in the positionof the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static int lowestOneBit(int i){
  return i & -i;
}","/** 
 * Returns an   {@code int} value with at most a single one-bit, in theposition of the lowest-order (""rightmost"") one-bit in the specified {@code int} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @param i the value whose lowest one bit is to be computed
 * @return an {@code int} value with a single one-bit, in the positionof the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static int lowestOneBit(int i){
  return i & -i;
}"
77564,"/** 
 * Returns the signum function of the specified   {@code int} value.  (Thereturn value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)
 * @return the signum function of the specified {@code int} value.
 * @since 1.5
 */
public static int signum(int i){
  return (i >> 31) | (-i >>> 31);
}","/** 
 * Returns the signum function of the specified   {@code int} value.  (Thereturn value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)
 * @param i the value whose signum is to be computed
 * @return the signum function of the specified {@code int} value.
 * @since 1.5
 */
public static int signum(int i){
  return (i >> 31) | (-i >>> 31);
}"
77565,"/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code int} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) <p>Note that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) == rotateLeft(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateRight(val,distance) == rotateRight(val, distance & 0x1F)}.
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code int} value right by thespecified number of bits.
 * @since 1.5
 */
public static int rotateRight(int i,int distance){
  return (i >>> distance) | (i << -distance);
}","/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code int} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) <p>Note that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) == rotateLeft(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateRight(val,distance) == rotateRight(val, distance & 0x1F)}.
 * @param i the value whose bits are to be rotated right
 * @param distance the number of bit positions to rotate right
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code int} value right by thespecified number of bits.
 * @since 1.5
 */
public static int rotateRight(int i,int distance){
  return (i >>> distance) | (i << -distance);
}"
77566,"/** 
 * Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified   {@code int}value.
 * @return the value obtained by reversing order of the bits in thespecified  {@code int} value.
 * @since 1.5
 */
public static int reverse(int i){
  i=(i & 0x55555555) << 1 | (i >>> 1) & 0x55555555;
  i=(i & 0x33333333) << 2 | (i >>> 2) & 0x33333333;
  i=(i & 0x0f0f0f0f) << 4 | (i >>> 4) & 0x0f0f0f0f;
  i=(i << 24) | ((i & 0xff00) << 8) | ((i >>> 8) & 0xff00)| (i >>> 24);
  return i;
}","/** 
 * Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified   {@code int}value.
 * @param i the value to be reversed
 * @return the value obtained by reversing order of the bits in thespecified  {@code int} value.
 * @since 1.5
 */
public static int reverse(int i){
  i=(i & 0x55555555) << 1 | (i >>> 1) & 0x55555555;
  i=(i & 0x33333333) << 2 | (i >>> 2) & 0x33333333;
  i=(i & 0x0f0f0f0f) << 4 | (i >>> 4) & 0x0f0f0f0f;
  i=(i << 24) | ((i & 0xff00) << 8) | ((i >>> 8) & 0xff00)| (i >>> 24);
  return i;
}"
77567,"/** 
 * Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified   {@code int} value.  Returns 32 if thespecified value has no one-bits in its two's complement representation, in other words if it is equal to zero. <p>Note that this method is closely related to the logarithm base 2. For all positive  {@code int} values x:<ul> <li>floor(log<sub>2</sub>(x)) =  {@code 31 - numberOfLeadingZeros(x)}<li>ceil(log<sub>2</sub>(x)) =   {@code 32 - numberOfLeadingZeros(x - 1)}</ul>
 * @return the number of zero bits preceding the highest-order(""leftmost"") one-bit in the two's complement binary representation of the specified  {@code int} value, or 32 if the valueis equal to zero.
 * @since 1.5
 */
public static int numberOfLeadingZeros(int i){
  if (i == 0)   return 32;
  int n=1;
  if (i >>> 16 == 0) {
    n+=16;
    i<<=16;
  }
  if (i >>> 24 == 0) {
    n+=8;
    i<<=8;
  }
  if (i >>> 28 == 0) {
    n+=4;
    i<<=4;
  }
  if (i >>> 30 == 0) {
    n+=2;
    i<<=2;
  }
  n-=i >>> 31;
  return n;
}","/** 
 * Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified   {@code int} value.  Returns 32 if thespecified value has no one-bits in its two's complement representation, in other words if it is equal to zero. <p>Note that this method is closely related to the logarithm base 2. For all positive  {@code int} values x:<ul> <li>floor(log<sub>2</sub>(x)) =  {@code 31 - numberOfLeadingZeros(x)}<li>ceil(log<sub>2</sub>(x)) =   {@code 32 - numberOfLeadingZeros(x - 1)}</ul>
 * @param i the value whose number of leading zeros is to be computed
 * @return the number of zero bits preceding the highest-order(""leftmost"") one-bit in the two's complement binary representation of the specified  {@code int} value, or 32 if the valueis equal to zero.
 * @since 1.5
 */
public static int numberOfLeadingZeros(int i){
  if (i == 0)   return 32;
  int n=1;
  if (i >>> 16 == 0) {
    n+=16;
    i<<=16;
  }
  if (i >>> 24 == 0) {
    n+=8;
    i<<=8;
  }
  if (i >>> 28 == 0) {
    n+=4;
    i<<=4;
  }
  if (i >>> 30 == 0) {
    n+=2;
    i<<=2;
  }
  n-=i >>> 31;
  return n;
}"
77568,"/** 
 * Returns the number of one-bits in the two's complement binary representation of the specified   {@code int} value.  This function issometimes referred to as the <i>population count</i>.
 * @return the number of one-bits in the two's complement binaryrepresentation of the specified  {@code int} value.
 * @since 1.5
 */
public static int bitCount(int i){
  i=i - ((i >>> 1) & 0x55555555);
  i=(i & 0x33333333) + ((i >>> 2) & 0x33333333);
  i=(i + (i >>> 4)) & 0x0f0f0f0f;
  i=i + (i >>> 8);
  i=i + (i >>> 16);
  return i & 0x3f;
}","/** 
 * Returns the number of one-bits in the two's complement binary representation of the specified   {@code int} value.  This function issometimes referred to as the <i>population count</i>.
 * @param i the value whose bits are to be counted
 * @return the number of one-bits in the two's complement binaryrepresentation of the specified  {@code int} value.
 * @since 1.5
 */
public static int bitCount(int i){
  i=i - ((i >>> 1) & 0x55555555);
  i=(i & 0x33333333) + ((i >>> 2) & 0x33333333);
  i=(i + (i >>> 4)) & 0x0f0f0f0f;
  i=i + (i >>> 8);
  i=i + (i >>> 16);
  return i & 0x3f;
}"
77569,"/** 
 * Returns an   {@code int} value with at most a single one-bit, in theposition of the highest-order (""leftmost"") one-bit in the specified {@code int} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @return an {@code int} value with a single one-bit, in the positionof the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static int highestOneBit(int i){
  i|=(i >> 1);
  i|=(i >> 2);
  i|=(i >> 4);
  i|=(i >> 8);
  i|=(i >> 16);
  return i - (i >>> 1);
}","/** 
 * Returns an   {@code int} value with at most a single one-bit, in theposition of the highest-order (""leftmost"") one-bit in the specified {@code int} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @param i the value whose highest one bit is to be computed
 * @return an {@code int} value with a single one-bit, in the positionof the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static int highestOneBit(int i){
  i|=(i >> 1);
  i|=(i >> 2);
  i|=(i >> 4);
  i|=(i >> 8);
  i|=(i >> 16);
  return i - (i >>> 1);
}"
77570,"/** 
 * Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified  {@code int} value.  Returns 32 if the specified value has noone-bits in its two's complement representation, in other words if it is equal to zero.
 * @return the number of zero bits following the lowest-order (""rightmost"")one-bit in the two's complement binary representation of the specified  {@code int} value, or 32 if the value is equalto zero.
 * @since 1.5
 */
public static int numberOfTrailingZeros(int i){
  int y;
  if (i == 0)   return 32;
  int n=31;
  y=i << 16;
  if (y != 0) {
    n=n - 16;
    i=y;
  }
  y=i << 8;
  if (y != 0) {
    n=n - 8;
    i=y;
  }
  y=i << 4;
  if (y != 0) {
    n=n - 4;
    i=y;
  }
  y=i << 2;
  if (y != 0) {
    n=n - 2;
    i=y;
  }
  return n - ((i << 1) >>> 31);
}","/** 
 * Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified  {@code int} value.  Returns 32 if the specified value has noone-bits in its two's complement representation, in other words if it is equal to zero.
 * @param i the value whose number of trailing zeros is to be computed
 * @return the number of zero bits following the lowest-order (""rightmost"")one-bit in the two's complement binary representation of the specified  {@code int} value, or 32 if the value is equalto zero.
 * @since 1.5
 */
public static int numberOfTrailingZeros(int i){
  int y;
  if (i == 0)   return 32;
  int n=31;
  y=i << 16;
  if (y != 0) {
    n=n - 16;
    i=y;
  }
  y=i << 8;
  if (y != 0) {
    n=n - 8;
    i=y;
  }
  y=i << 4;
  if (y != 0) {
    n=n - 4;
    i=y;
  }
  y=i << 2;
  if (y != 0) {
    n=n - 2;
    i=y;
  }
  return n - ((i << 1) >>> 31);
}"
77571,"/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code int} value.
 * @return the value obtained by reversing the bytes in the specified{@code int} value.
 * @since 1.5
 */
public static int reverseBytes(int i){
  return ((i >>> 24)) | ((i >> 8) & 0xFF00) | ((i << 8) & 0xFF0000)| ((i << 24));
}","/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code int} value.
 * @param i the value whose bytes are to be reversed
 * @return the value obtained by reversing the bytes in the specified{@code int} value.
 * @since 1.5
 */
public static int reverseBytes(int i){
  return ((i >>> 24)) | ((i >> 8) & 0xFF00) | ((i << 8) & 0xFF0000)| ((i << 24));
}"
77572,"/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code long} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) <p>Note that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) == rotateRight(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateLeft(val,distance) == rotateLeft(val, distance & 0x3F)}.
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code long} value left by thespecified number of bits.
 * @since 1.5
 */
public static long rotateLeft(long i,int distance){
  return (i << distance) | (i >>> -distance);
}","/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code long} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) <p>Note that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) == rotateRight(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateLeft(val,distance) == rotateLeft(val, distance & 0x3F)}.
 * @param i the value whose bits are to be rotated left
 * @param distance the number of bit positions to rotate left
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code long} value left by thespecified number of bits.
 * @since 1.5
 */
public static long rotateLeft(long i,int distance){
  return (i << distance) | (i >>> -distance);
}"
77573,"/** 
 * Returns a hash code for a   {@code long} value; compatible with{@code Long.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code long} value.
 */
public static int hashCode(long value){
  return (int)(value ^ (value >>> 32));
}","/** 
 * Returns a hash code for a   {@code long} value; compatible with{@code Long.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code long} value.
 * @since 1.8
 */
public static int hashCode(long value){
  return (int)(value ^ (value >>> 32));
}"
77574,"/** 
 * Returns a   {@code long} value with at most a single one-bit, in theposition of the lowest-order (""rightmost"") one-bit in the specified {@code long} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @return a {@code long} value with a single one-bit, in the positionof the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static long lowestOneBit(long i){
  return i & -i;
}","/** 
 * Returns a   {@code long} value with at most a single one-bit, in theposition of the lowest-order (""rightmost"") one-bit in the specified {@code long} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @param i the value whose lowest one bit is to be computed
 * @return a {@code long} value with a single one-bit, in the positionof the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static long lowestOneBit(long i){
  return i & -i;
}"
77575,"/** 
 * Returns the signum function of the specified   {@code long} value.  (Thereturn value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)
 * @return the signum function of the specified {@code long} value.
 * @since 1.5
 */
public static int signum(long i){
  return (int)((i >> 63) | (-i >>> 63));
}","/** 
 * Returns the signum function of the specified   {@code long} value.  (Thereturn value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)
 * @param i the value whose signum is to be computed
 * @return the signum function of the specified {@code long} value.
 * @since 1.5
 */
public static int signum(long i){
  return (int)((i >> 63) | (-i >>> 63));
}"
77576,"/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code long} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) <p>Note that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) == rotateLeft(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateRight(val,distance) == rotateRight(val, distance & 0x3F)}.
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code long} value right by thespecified number of bits.
 * @since 1.5
 */
public static long rotateRight(long i,int distance){
  return (i >>> distance) | (i << -distance);
}","/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code long} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) <p>Note that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) == rotateLeft(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateRight(val,distance) == rotateRight(val, distance & 0x3F)}.
 * @param i the value whose bits are to be rotated right
 * @param distance the number of bit positions to rotate right
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code long} value right by thespecified number of bits.
 * @since 1.5
 */
public static long rotateRight(long i,int distance){
  return (i >>> distance) | (i << -distance);
}"
77577,"/** 
 * Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified   {@code long}value.
 * @return the value obtained by reversing order of the bits in thespecified  {@code long} value.
 * @since 1.5
 */
public static long reverse(long i){
  i=(i & 0x5555555555555555L) << 1 | (i >>> 1) & 0x5555555555555555L;
  i=(i & 0x3333333333333333L) << 2 | (i >>> 2) & 0x3333333333333333L;
  i=(i & 0x0f0f0f0f0f0f0f0fL) << 4 | (i >>> 4) & 0x0f0f0f0f0f0f0f0fL;
  i=(i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
  i=(i << 48) | ((i & 0xffff0000L) << 16) | ((i >>> 16) & 0xffff0000L)| (i >>> 48);
  return i;
}","/** 
 * Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified   {@code long}value.
 * @param i the value to be reversed
 * @return the value obtained by reversing order of the bits in thespecified  {@code long} value.
 * @since 1.5
 */
public static long reverse(long i){
  i=(i & 0x5555555555555555L) << 1 | (i >>> 1) & 0x5555555555555555L;
  i=(i & 0x3333333333333333L) << 2 | (i >>> 2) & 0x3333333333333333L;
  i=(i & 0x0f0f0f0f0f0f0f0fL) << 4 | (i >>> 4) & 0x0f0f0f0f0f0f0f0fL;
  i=(i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
  i=(i << 48) | ((i & 0xffff0000L) << 16) | ((i >>> 16) & 0xffff0000L)| (i >>> 48);
  return i;
}"
77578,"/** 
 * Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified   {@code long} value.  Returns 64 if thespecified value has no one-bits in its two's complement representation, in other words if it is equal to zero. <p>Note that this method is closely related to the logarithm base 2. For all positive  {@code long} values x:<ul> <li>floor(log<sub>2</sub>(x)) =  {@code 63 - numberOfLeadingZeros(x)}<li>ceil(log<sub>2</sub>(x)) =   {@code 64 - numberOfLeadingZeros(x - 1)}</ul>
 * @return the number of zero bits preceding the highest-order(""leftmost"") one-bit in the two's complement binary representation of the specified  {@code long} value, or 64 if the valueis equal to zero.
 * @since 1.5
 */
public static int numberOfLeadingZeros(long i){
  if (i == 0)   return 64;
  int n=1;
  int x=(int)(i >>> 32);
  if (x == 0) {
    n+=32;
    x=(int)i;
  }
  if (x >>> 16 == 0) {
    n+=16;
    x<<=16;
  }
  if (x >>> 24 == 0) {
    n+=8;
    x<<=8;
  }
  if (x >>> 28 == 0) {
    n+=4;
    x<<=4;
  }
  if (x >>> 30 == 0) {
    n+=2;
    x<<=2;
  }
  n-=x >>> 31;
  return n;
}","/** 
 * Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified   {@code long} value.  Returns 64 if thespecified value has no one-bits in its two's complement representation, in other words if it is equal to zero. <p>Note that this method is closely related to the logarithm base 2. For all positive  {@code long} values x:<ul> <li>floor(log<sub>2</sub>(x)) =  {@code 63 - numberOfLeadingZeros(x)}<li>ceil(log<sub>2</sub>(x)) =   {@code 64 - numberOfLeadingZeros(x - 1)}</ul>
 * @param i the value whose number of leading zeros is to be computed
 * @return the number of zero bits preceding the highest-order(""leftmost"") one-bit in the two's complement binary representation of the specified  {@code long} value, or 64 if the valueis equal to zero.
 * @since 1.5
 */
public static int numberOfLeadingZeros(long i){
  if (i == 0)   return 64;
  int n=1;
  int x=(int)(i >>> 32);
  if (x == 0) {
    n+=32;
    x=(int)i;
  }
  if (x >>> 16 == 0) {
    n+=16;
    x<<=16;
  }
  if (x >>> 24 == 0) {
    n+=8;
    x<<=8;
  }
  if (x >>> 28 == 0) {
    n+=4;
    x<<=4;
  }
  if (x >>> 30 == 0) {
    n+=2;
    x<<=2;
  }
  n-=x >>> 31;
  return n;
}"
77579,"/** 
 * Returns the number of one-bits in the two's complement binary representation of the specified   {@code long} value.  This function issometimes referred to as the <i>population count</i>.
 * @return the number of one-bits in the two's complement binaryrepresentation of the specified  {@code long} value.
 * @since 1.5
 */
public static int bitCount(long i){
  i=i - ((i >>> 1) & 0x5555555555555555L);
  i=(i & 0x3333333333333333L) + ((i >>> 2) & 0x3333333333333333L);
  i=(i + (i >>> 4)) & 0x0f0f0f0f0f0f0f0fL;
  i=i + (i >>> 8);
  i=i + (i >>> 16);
  i=i + (i >>> 32);
  return (int)i & 0x7f;
}","/** 
 * Returns the number of one-bits in the two's complement binary representation of the specified   {@code long} value.  This function issometimes referred to as the <i>population count</i>.
 * @param i the value whose bits are to be counted
 * @return the number of one-bits in the two's complement binaryrepresentation of the specified  {@code long} value.
 * @since 1.5
 */
public static int bitCount(long i){
  i=i - ((i >>> 1) & 0x5555555555555555L);
  i=(i & 0x3333333333333333L) + ((i >>> 2) & 0x3333333333333333L);
  i=(i + (i >>> 4)) & 0x0f0f0f0f0f0f0f0fL;
  i=i + (i >>> 8);
  i=i + (i >>> 16);
  i=i + (i >>> 32);
  return (int)i & 0x7f;
}"
77580,"/** 
 * Returns a   {@code long} value with at most a single one-bit, in theposition of the highest-order (""leftmost"") one-bit in the specified {@code long} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @return a {@code long} value with a single one-bit, in the positionof the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static long highestOneBit(long i){
  i|=(i >> 1);
  i|=(i >> 2);
  i|=(i >> 4);
  i|=(i >> 8);
  i|=(i >> 16);
  i|=(i >> 32);
  return i - (i >>> 1);
}","/** 
 * Returns a   {@code long} value with at most a single one-bit, in theposition of the highest-order (""leftmost"") one-bit in the specified {@code long} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @param i the value whose highest one bit is to be computed
 * @return a {@code long} value with a single one-bit, in the positionof the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static long highestOneBit(long i){
  i|=(i >> 1);
  i|=(i >> 2);
  i|=(i >> 4);
  i|=(i >> 8);
  i|=(i >> 16);
  i|=(i >> 32);
  return i - (i >>> 1);
}"
77581,"/** 
 * Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified  {@code long} value.  Returns 64 if the specified value has noone-bits in its two's complement representation, in other words if it is equal to zero.
 * @return the number of zero bits following the lowest-order (""rightmost"")one-bit in the two's complement binary representation of the specified  {@code long} value, or 64 if the value is equalto zero.
 * @since 1.5
 */
public static int numberOfTrailingZeros(long i){
  int x, y;
  if (i == 0)   return 64;
  int n=63;
  y=(int)i;
  if (y != 0) {
    n=n - 32;
    x=y;
  }
 else   x=(int)(i >>> 32);
  y=x << 16;
  if (y != 0) {
    n=n - 16;
    x=y;
  }
  y=x << 8;
  if (y != 0) {
    n=n - 8;
    x=y;
  }
  y=x << 4;
  if (y != 0) {
    n=n - 4;
    x=y;
  }
  y=x << 2;
  if (y != 0) {
    n=n - 2;
    x=y;
  }
  return n - ((x << 1) >>> 31);
}","/** 
 * Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified  {@code long} value.  Returns 64 if the specified value has noone-bits in its two's complement representation, in other words if it is equal to zero.
 * @param i the value whose number of trailing zeros is to be computed
 * @return the number of zero bits following the lowest-order (""rightmost"")one-bit in the two's complement binary representation of the specified  {@code long} value, or 64 if the value is equalto zero.
 * @since 1.5
 */
public static int numberOfTrailingZeros(long i){
  int x, y;
  if (i == 0)   return 64;
  int n=63;
  y=(int)i;
  if (y != 0) {
    n=n - 32;
    x=y;
  }
 else   x=(int)(i >>> 32);
  y=x << 16;
  if (y != 0) {
    n=n - 16;
    x=y;
  }
  y=x << 8;
  if (y != 0) {
    n=n - 8;
    x=y;
  }
  y=x << 4;
  if (y != 0) {
    n=n - 4;
    x=y;
  }
  y=x << 2;
  if (y != 0) {
    n=n - 2;
    x=y;
  }
  return n - ((x << 1) >>> 31);
}"
77582,"/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code long} value.
 * @return the value obtained by reversing the bytes in the specified{@code long} value.
 * @since 1.5
 */
public static long reverseBytes(long i){
  i=(i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
  return (i << 48) | ((i & 0xffff0000L) << 16) | ((i >>> 16) & 0xffff0000L)| (i >>> 48);
}","/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code long} value.
 * @param i the value whose bytes are to be reversed
 * @return the value obtained by reversing the bytes in the specified{@code long} value.
 * @since 1.5
 */
public static long reverseBytes(long i){
  i=(i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
  return (i << 48) | ((i & 0xffff0000L) << 16) | ((i >>> 16) & 0xffff0000L)| (i >>> 48);
}"
77583,"/** 
 * Registers a new virtual-machine shutdown hook. <p> The Java virtual machine <i>shuts down</i> in response to two kinds of events: <ul> <p> <li> The program <i>exits</i> normally, when the last non-daemon thread exits or when the <tt>  {@link #exit exit}</tt> (equivalently, <tt>  {@link System#exit(int) System.exit}</tt>) method is invoked, or <p> <li> The virtual machine is <i>terminated</i> in response to a user interrupt, such as typing <tt>^C</tt>, or a system-wide event, such as user logoff or system shutdown. </ul> <p> A <i>shutdown hook</i> is simply an initialized but unstarted thread.  When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently.  When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt.  Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the <tt>  {@link #exit exit}</tt> method. <p> Once the shutdown sequence has begun it can be stopped only by invoking the <tt>  {@link #halt halt}</tt> method, which forcibly terminates the virtual machine. <p> Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an <tt>  {@link IllegalStateException}</tt> to be thrown. <p> Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively.  They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible.  They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down.  Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks. <p> Shutdown hooks should also finish their work quickly.  When a program invokes <tt>  {@link #exit exit}</tt> the expectation is that the virtual machine will promptly shut down and exit.  When the virtual machine is terminated due to user logoff or system shutdown the underlying operating system may only allow a fixed amount of time in which to shut down and exit.  It is therefore inadvisable to attempt any user interaction or to perform a long-running computation in a shutdown hook. <p> Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the <tt>  {@link ThreadGroup#uncaughtException uncaughtException}</tt> method of the thread's <tt>  {@link ThreadGroup}</tt> object.  The default implementation of this method prints the exception's stack trace to <tt>  {@link System#err}</tt> and terminates the thread; it does not cause the virtual machine to exit or halt. <p> In rare circumstances the virtual machine may <i>abort</i>, that is, stop running without shutting down cleanly.  This occurs when the virtual machine is terminated externally, for example with the <tt>SIGKILL</tt> signal on Unix or the <tt>TerminateProcess</tt> call on Microsoft Windows.  The virtual machine may also abort if a native method goes awry by, for example, corrupting internal data structures or attempting to access nonexistent memory.  If the virtual machine aborts then no guarantee can be made about whether or not any shutdown hooks will be run. <p>
 * @param hook An initialized but unstarted <tt> {@link Thread}</tt> object
 * @throws IllegalArgumentException If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run
 * @throws IllegalStateException If the virtual machine is already in the process of shutting down
 * @throws SecurityException If a security manager is present and it denies <tt> {@link RuntimePermission}(""shutdownHooks"")</tt>
 * @see #removeShutdownHook
 * @see #halt(int)
 * @see #exit(int)
 * @since 1.3
 */
public void addShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new RuntimePermission(""String_Node_Str""));
  }
  ApplicationShutdownHooks.add(hook);
}","/** 
 * Registers a new virtual-machine shutdown hook. <p> The Java virtual machine <i>shuts down</i> in response to two kinds of events: <ul> <li> The program <i>exits</i> normally, when the last non-daemon thread exits or when the <tt>  {@link #exit exit}</tt> (equivalently,  {@link System#exit(int) System.exit}) method is invoked, or <li> The virtual machine is <i>terminated</i> in response to a user interrupt, such as typing <tt>^C</tt>, or a system-wide event, such as user logoff or system shutdown. </ul> <p> A <i>shutdown hook</i> is simply an initialized but unstarted thread.  When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently.  When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt.  Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the <tt>  {@link #exit exit}</tt> method. <p> Once the shutdown sequence has begun it can be stopped only by invoking the <tt>  {@link #halt halt}</tt> method, which forcibly terminates the virtual machine. <p> Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an <tt>  {@link IllegalStateException}</tt> to be thrown. <p> Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively.  They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible.  They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down.  Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks. <p> Shutdown hooks should also finish their work quickly.  When a program invokes <tt>  {@link #exit exit}</tt> the expectation is that the virtual machine will promptly shut down and exit.  When the virtual machine is terminated due to user logoff or system shutdown the underlying operating system may only allow a fixed amount of time in which to shut down and exit.  It is therefore inadvisable to attempt any user interaction or to perform a long-running computation in a shutdown hook. <p> Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the <tt>  {@link ThreadGroup#uncaughtException uncaughtException}</tt> method of the thread's <tt>  {@link ThreadGroup}</tt> object.  The default implementation of this method prints the exception's stack trace to <tt>  {@link System#err}</tt> and terminates the thread; it does not cause the virtual machine to exit or halt. <p> In rare circumstances the virtual machine may <i>abort</i>, that is, stop running without shutting down cleanly.  This occurs when the virtual machine is terminated externally, for example with the <tt>SIGKILL</tt> signal on Unix or the <tt>TerminateProcess</tt> call on Microsoft Windows.  The virtual machine may also abort if a native method goes awry by, for example, corrupting internal data structures or attempting to access nonexistent memory.  If the virtual machine aborts then no guarantee can be made about whether or not any shutdown hooks will be run. <p>
 * @param hook An initialized but unstarted <tt> {@link Thread}</tt> object
 * @throws IllegalArgumentException If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run
 * @throws IllegalStateException If the virtual machine is already in the process of shutting down
 * @throws SecurityException If a security manager is present and it denies <tt> {@link RuntimePermission}(""shutdownHooks"")</tt>
 * @see #removeShutdownHook
 * @see #halt(int)
 * @see #exit(int)
 * @since 1.3
 */
public void addShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new RuntimePermission(""String_Node_Str""));
  }
  ApplicationShutdownHooks.add(hook);
}"
77584,"/** 
 * Returns a hash code for a   {@code short} value; compatible with{@code Short.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code short} value.
 */
public static int hashCode(short value){
  return (int)value;
}","/** 
 * Returns a hash code for a   {@code short} value; compatible with{@code Short.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code short} value.
 * @since 1.8
 */
public static int hashCode(short value){
  return (int)value;
}"
77585,"/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code short} value.
 * @return the value obtained by reversing (or, equivalently, swapping)the bytes in the specified  {@code short} value.
 * @since 1.5
 */
public static short reverseBytes(short i){
  return (short)(((i & 0xFF00) >> 8) | (i << 8));
}","/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code short} value.
 * @param i the value whose bytes are to be reversed
 * @return the value obtained by reversing (or, equivalently, swapping)the bytes in the specified  {@code short} value.
 * @since 1.5
 */
public static short reverseBytes(short i){
  return (short)(((i & 0xFF00) >> 8) | (i << 8));
}"
77586,"/** 
 * Returns the unbiased exponent used in the representation of a  {@code double}.  Special cases: <ul> <li>If the argument is NaN or infinite, then the result is  {@link Double#MAX_EXPONENT} + 1.<li>If the argument is zero or subnormal, then the result is {@link Double#MIN_EXPONENT} -1.</ul>
 * @param d a {@code double} value
 * @since 1.6
 */
public static int getExponent(double d){
  return Math.getExponent(d);
}","/** 
 * Returns the unbiased exponent used in the representation of a  {@code double}.  Special cases: <ul> <li>If the argument is NaN or infinite, then the result is  {@link Double#MAX_EXPONENT} + 1.<li>If the argument is zero or subnormal, then the result is {@link Double#MIN_EXPONENT} -1.</ul>
 * @param d a {@code double} value
 * @return the unbiased exponent of the argument
 * @since 1.6
 */
public static int getExponent(double d){
  return Math.getExponent(d);
}"
77587,"/** 
 * Returns a BigDecimal whose numerical value is equal to (  {@code this} * 10<sup>n</sup>).  The scale ofthe result is  {@code (this.scale() - n)}.
 * @throws ArithmeticException if the scale would beoutside the range of a 32-bit integer.
 * @since 1.5
 */
public BigDecimal scaleByPowerOfTen(int n){
  return new BigDecimal(intVal,intCompact,checkScale((long)scale - n),precision);
}","/** 
 * Returns a BigDecimal whose numerical value is equal to (  {@code this} * 10<sup>n</sup>).  The scale ofthe result is  {@code (this.scale() - n)}.
 * @param n the exponent power of ten to scale by
 * @return a BigDecimal whose numerical value is equal to( {@code this} * 10<sup>n</sup>)
 * @throws ArithmeticException if the scale would beoutside the range of a 32-bit integer.
 * @since 1.5
 */
public BigDecimal scaleByPowerOfTen(int n){
  return new BigDecimal(intVal,intCompact,checkScale((long)scale - n),precision);
}"
77588,"/** 
 * Return the kind of this tag. similar or synonymous tags.  For most tags, <code>kind()&nbsp;==&nbsp;name()</code>; the following table lists those cases where there is more than one tag of a given kind: <p> <table border=""1"" cellpadding=""4"" cellspacing=""0""> <tr><th><tt> kind()  </tt></th>  <th><tt> name()      </tt></th></tr> <tr><td><tt> @throws </tt></td>  <td><tt> @throws     </tt></td></tr> <tr><td><tt> @throws </tt></td>  <td><tt> @exception  </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @see        </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @link       </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @linkplain  </tt></td></tr> <tr><td><tt> @serial </tt></td>  <td><tt> @serial     </tt></td></tr> <tr><td><tt> @serial </tt></td>  <td><tt> @serialData </tt></td></tr> </table>
 */
String kind();","/** 
 * Return the kind of this tag. For most tags, <code>kind()&nbsp;==&nbsp;name()</code>; the following table lists those cases where there is more than one tag of a given kind: <p> <table border=""1"" cellpadding=""4"" cellspacing=""0"" summary=""related tags""> <tr><th>  {@code kind()  }</th>  <th>  {@code name()      }</th></tr> <tr><td>  {@code @throws }</td>  <td>  {@code @throws     }</td></tr> <tr><td>  {@code @throws }</td>  <td>  {@code @exception  }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @see        }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @link       }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @linkplain  }</td></tr> <tr><td>  {@code @serial }</td>  <td>  {@code @serial     }</td></tr> <tr><td>  {@code @serial }</td>  <td>  {@code @serialData }</td></tr> </table>
 * @return the kind of this tag.
 */
String kind();"
77589,"/** 
 * Return the name of this tag.  The name is the string starting with ""@"" that is used in a doc comment, such as <code>@return</code>.  For inline tags, such as <code>{&#064;link}</code>, the curly brackets are not part of the name, so in this example the name would be simply <code>@link</code>.
 */
String name();","/** 
 * Return the name of this tag.  The name is the string starting with ""@"" that is used in a doc comment, such as <code>@return</code>.  For inline tags, such as <code>{&#064;link}</code>, the curly brackets are not part of the name, so in this example the name would be simply <code>@link</code>.
 * @return the name of this tag
 */
String name();"
77590,"/** 
 * Return the containing   {@link Doc} of this Tag element.
 */
Doc holder();","/** 
 * Return the containing   {@link Doc} of this Tag element.
 * @return the containing {@link Doc} of this Tag element
 */
Doc holder();"
77591,"/** 
 * Return the text of this tag, that is, portion beyond tag name.
 */
String text();","/** 
 * Return the text of this tag, that is, the portion beyond tag name.
 * @return the text of this tag
 */
String text();"
77592,"BasicLookupHelper(Name name,Type site,List<Type> argtypes,List<Type> typeargtypes){
  super(name,site,argtypes,typeargtypes,MethodResolutionPhase.VARARITY);
}","BasicLookupHelper(Name name,Type site,List<Type> argtypes,List<Type> typeargtypes,MethodResolutionPhase maxPhase){
  super(name,site,argtypes,typeargtypes,maxPhase);
}"
77593,"/** 
 * Select the best method for a call site among two choices.
 * @param env              The current environment.
 * @param site             The original type from where theselection takes place.
 * @param argtypes         The invocation's value arguments,
 * @param typeargtypes     The invocation's type arguments,
 * @param sym              Proposed new best match.
 * @param bestSoFar        Previously found best match.
 * @param allowBoxing Allow boxing conversions of arguments.
 * @param useVarargs Box trailing arguments into an array for varargs.
 */
@SuppressWarnings(""String_Node_Str"") Symbol selectBest(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,Symbol sym,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){
  if (sym.kind == ERR || !sym.isInheritedIn(site.tsym,types)) {
    return bestSoFar;
  }
 else   if (useVarargs && (sym.flags() & VARARGS) == 0) {
    return bestSoFar.kind >= ERRONEOUS ? new BadVarargsMethod((ResolveError)bestSoFar) : bestSoFar;
  }
  Assert.check(sym.kind < AMBIGUOUS);
  try {
    Type mt=rawInstantiate(env,site,sym,null,argtypes,typeargtypes,allowBoxing,useVarargs,types.noWarnings);
    if (!operator)     currentResolutionContext.addApplicableCandidate(sym,mt);
  }
 catch (  InapplicableMethodException ex) {
    if (!operator)     currentResolutionContext.addInapplicableCandidate(sym,ex.getDiagnostic());
switch (bestSoFar.kind) {
case ABSENT_MTH:
      return new InapplicableSymbolError(currentResolutionContext);
case WRONG_MTH:
    if (operator)     return bestSoFar;
  bestSoFar=new InapplicableSymbolsError(currentResolutionContext);
default :
return bestSoFar;
}
}
if (!isAccessible(env,site,sym)) {
return (bestSoFar.kind == ABSENT_MTH) ? new AccessError(env,site,sym) : bestSoFar;
}
return (bestSoFar.kind > AMBIGUOUS) ? sym : mostSpecific(argtypes,sym,bestSoFar,env,site,allowBoxing && operator,useVarargs);
}","/** 
 * Select the best method for a call site among two choices.
 * @param env              The current environment.
 * @param site             The original type from where theselection takes place.
 * @param argtypes         The invocation's value arguments,
 * @param typeargtypes     The invocation's type arguments,
 * @param sym              Proposed new best match.
 * @param bestSoFar        Previously found best match.
 * @param allowBoxing Allow boxing conversions of arguments.
 * @param useVarargs Box trailing arguments into an array for varargs.
 */
@SuppressWarnings(""String_Node_Str"") Symbol selectBest(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,Symbol sym,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){
  if (sym.kind == ERR || !sym.isInheritedIn(site.tsym,types)) {
    return bestSoFar;
  }
 else   if (useVarargs && (sym.flags() & VARARGS) == 0) {
    return bestSoFar.kind >= ERRONEOUS ? new BadVarargsMethod((ResolveError)bestSoFar) : bestSoFar;
  }
  Assert.check(sym.kind < AMBIGUOUS);
  try {
    Type mt=rawInstantiate(env,site,sym,null,argtypes,typeargtypes,allowBoxing,useVarargs,types.noWarnings);
    if (!operator || verboseResolutionMode.contains(VerboseResolutionMode.PREDEF))     currentResolutionContext.addApplicableCandidate(sym,mt);
  }
 catch (  InapplicableMethodException ex) {
    if (!operator)     currentResolutionContext.addInapplicableCandidate(sym,ex.getDiagnostic());
switch (bestSoFar.kind) {
case ABSENT_MTH:
      return new InapplicableSymbolError(currentResolutionContext);
case WRONG_MTH:
    if (operator)     return bestSoFar;
  bestSoFar=new InapplicableSymbolsError(currentResolutionContext);
default :
return bestSoFar;
}
}
if (!isAccessible(env,site,sym)) {
return (bestSoFar.kind == ABSENT_MTH) ? new AccessError(env,site,sym) : bestSoFar;
}
return (bestSoFar.kind > AMBIGUOUS) ? sym : mostSpecific(argtypes,sym,bestSoFar,env,site,allowBoxing && operator,useVarargs);
}"
77594,"/** 
 * Resolve operator.
 * @param pos       The position to use for error reporting.
 * @param optag     The tag of the operation tree.
 * @param env       The environment current at the operation.
 * @param argtypes  The types of the operands.
 */
Symbol resolveOperator(DiagnosticPosition pos,JCTree.Tag optag,Env<AttrContext> env,List<Type> argtypes){
  MethodResolutionContext prevResolutionContext=currentResolutionContext;
  try {
    currentResolutionContext=new MethodResolutionContext();
    Name name=treeinfo.operatorName(optag);
    env.info.pendingResolutionPhase=currentResolutionContext.step=BASIC;
    Symbol sym=findMethod(env,syms.predefClass.type,name,argtypes,null,false,false,true);
    if (boxingEnabled && sym.kind >= WRONG_MTHS)     env.info.pendingResolutionPhase=currentResolutionContext.step=BOX;
    sym=findMethod(env,syms.predefClass.type,name,argtypes,null,true,false,true);
    return accessMethod(sym,pos,env.enclClass.sym.type,name,false,argtypes,null);
  }
  finally {
    currentResolutionContext=prevResolutionContext;
  }
}","/** 
 * Resolve operator.
 * @param pos       The position to use for error reporting.
 * @param optag     The tag of the operation tree.
 * @param env       The environment current at the operation.
 * @param argtypes  The types of the operands.
 */
Symbol resolveOperator(DiagnosticPosition pos,JCTree.Tag optag,Env<AttrContext> env,List<Type> argtypes){
  MethodResolutionContext prevResolutionContext=currentResolutionContext;
  try {
    currentResolutionContext=new MethodResolutionContext();
    Name name=treeinfo.operatorName(optag);
    return lookupMethod(env,pos,syms.predefClass,currentResolutionContext,new BasicLookupHelper(name,syms.predefClass.type,argtypes,null,BOX){
      @Override Symbol lookup(      Env<AttrContext> env,      MethodResolutionPhase phase){
        return findMethod(env,site,name,argtypes,typeargtypes,phase.isBoxingRequired(),phase.isVarargsRequired(),true);
      }
      @Override Symbol access(      Env<AttrContext> env,      DiagnosticPosition pos,      Symbol location,      Symbol sym){
        return accessMethod(sym,pos,env.enclClass.sym.type,name,false,argtypes,null);
      }
    }
);
  }
  finally {
    currentResolutionContext=prevResolutionContext;
  }
}"
77595,"String computeKey(Element e){
  StringBuilder buf=new StringBuilder();
  while (e != null) {
    buf.append(e.toString());
    e=e.getEnclosingElement();
  }
  buf.append(jfo.getName());
  return buf.toString();
}","String computeKey(Element e){
  StringBuilder buf=new StringBuilder();
  if (predefTranslationMap.containsKey(e.getSimpleName().toString())) {
    buf.append(""String_Node_Str"");
    String replacedName=predefTranslationMap.get(e.getSimpleName().toString());
    buf.append(e.toString().replace(e.getSimpleName().toString(),replacedName));
  }
 else   if (e.getSimpleName().toString().startsWith(""String_Node_Str"")) {
    buf.append(""String_Node_Str"");
    buf.append(e.toString());
  }
 else {
    while (e != null) {
      buf.append(e.toString());
      e=e.getEnclosingElement();
    }
    buf.append(jfo.getName());
  }
  return buf.toString();
}"
77596,"protected ResolveHarness(JavaFileObject jfo){
  this.jfo=jfo;
  this.diagProcessors=new DiagnosticProcessor[]{new VerboseResolutionNoteProcessor(),new VerboseDeferredInferenceNoteProcessor(),new ErrorProcessor()};
}","protected ResolveHarness(JavaFileObject jfo){
  this.jfo=jfo;
  this.diagProcessors=new DiagnosticProcessor[]{new VerboseResolutionNoteProcessor(),new VerboseDeferredInferenceNoteProcessor(),new ErrorProcessor()};
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
}"
77597,"/** 
 * Convenience method equivalent to   {@code v.scan(e, null)}.
 * @return the result of scanning {@code e}.
 */
public final R scan(Element e){
  return scan(e,null);
}","/** 
 * Convenience method equivalent to   {@code v.scan(e, null)}.
 * @param e the element to scan
 * @return the result of scanning {@code e}.
 */
public final R scan(Element e){
  return scan(e,null);
}"
77598,"/** 
 * Return a name with the same sequence of characters as the argument.
 * @param cs the character sequence to return as a name
 */
Name getName(CharSequence cs);","/** 
 * Return a name with the same sequence of characters as the argument.
 * @param cs the character sequence to return as a name
 * @return a name with the same sequence of characters as the argument
 */
Name getName(CharSequence cs);"
77599,"/** 
 * Returns the element corresponding to a type. The type may be a   {@code DeclaredType} or {@code TypeVariable}. Returns   {@code null} if the type is not one with acorresponding element.
 * @return the element corresponding to the given type
 */
Element asElement(TypeMirror t);","/** 
 * Returns the element corresponding to a type. The type may be a   {@code DeclaredType} or {@code TypeVariable}. Returns   {@code null} if the type is not one with acorresponding element.
 * @param t the type to map to an element
 * @return the element corresponding to the given type
 */
Element asElement(TypeMirror t);"
77600,"private static List<Archive> init(){
  List<Archive> result=new ArrayList<Archive>();
  String javaHome=System.getProperty(""String_Node_Str"");
  List<File> files=new ArrayList<File>();
  File jre=new File(javaHome,""String_Node_Str"");
  File lib=new File(javaHome,""String_Node_Str"");
  try {
    if (jre.exists() && jre.isDirectory()) {
      result.addAll(addJarFiles(new File(jre,""String_Node_Str"")));
      result.addAll(addJarFiles(lib));
    }
 else     if (lib.exists() && lib.isDirectory()) {
      File classes=new File(javaHome,""String_Node_Str"");
      if (classes.exists() && classes.isDirectory()) {
        result.add(new Archive(classes,ClassFileReader.newInstance(classes)));
      }
      result.addAll(addJarFiles(lib));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + javaHome + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return result;
}","private static List<Archive> init(){
  List<Archive> result=new ArrayList<Archive>();
  String javaHome=System.getProperty(""String_Node_Str"");
  File jre=new File(javaHome,""String_Node_Str"");
  File lib=new File(javaHome,""String_Node_Str"");
  try {
    if (jre.exists() && jre.isDirectory()) {
      result.addAll(addJarFiles(new File(jre,""String_Node_Str"")));
      result.addAll(addJarFiles(lib));
    }
 else     if (lib.exists() && lib.isDirectory()) {
      File classes=new File(javaHome,""String_Node_Str"");
      if (classes.exists() && classes.isDirectory()) {
        result.add(new Archive(classes,ClassFileReader.newInstance(classes)));
      }
      result.addAll(addJarFiles(lib));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + javaHome + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return result;
}"
77601,"/** 
 * Scan the arguments for -i -x -xf -if followed by the option -src, -sourcepath, -modulepath or -classpath and produce a map of all the files to referenced for that particular option. Store the found sources and the found modules in the supplied maps.
 */
private boolean findFiles(String[] args,String option,Set<String> suffixes,Map<String,Source> found_files,Map<String,Module> found_modules,Module current_module,boolean inLinksrc) throws ProblemException, ProblemException {
  Set<File> roots=new HashSet<File>();
  List<String> includes=new LinkedList<String>();
  List<String> excludes=new LinkedList<String>();
  List<String> excludefiles=new LinkedList<String>();
  List<String> includefiles=new LinkedList<String>();
  List<String> moduleinfo=new LinkedList<String>();
  moduleinfo.add(""String_Node_Str"");
  for (int i=0; i < args.length; ++i) {
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String incl=args[i + 1];
      checkPattern(incl);
      includes.add(incl);
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String excl=args[i + 1];
      checkPattern(excl);
      excludes.add(excl);
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String exclf=args[i + 1];
      checkFilePattern(exclf);
      exclf=Util.normalizeDriveLetter(exclf);
      excludefiles.add(fixupSeparator(exclf));
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String inclf=args[i + 1];
      checkFilePattern(inclf);
      inclf=Util.normalizeDriveLetter(inclf);
      includefiles.add(fixupSeparator(inclf));
    }
    if (args[i].equals(option)) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"" + option);
      }
      String[] root_dirs=args[i + 1].split(File.pathSeparator);
      for (      String r : root_dirs) {
        File root=new File(r);
        if (!root.isDirectory()) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str"");
        }
        try {
          root=root.getCanonicalFile();
        }
 catch (        IOException e) {
          throw new ProblemException(""String_Node_Str"" + e);
        }
        if (roots.contains(root)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option);
        }
        if (roots.equals(bin_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        if (roots.equals(gensrc_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        if (roots.equals(header_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        roots.add(root);
        Source.scanRoot(root,suffixes,excludes,includes,excludefiles,includefiles,found_files,found_modules,current_module,findBooleanOption(args,""String_Node_Str""),false,inLinksrc);
      }
    }
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")|| args[i].equals(""String_Node_Str"")|| args[i].equals(""String_Node_Str"")) {
      includes=new LinkedList<String>();
      excludes=new LinkedList<String>();
      excludefiles=new LinkedList<String>();
      includefiles=new LinkedList<String>();
    }
  }
  return true;
}","/** 
 * Scan the arguments for -i -x -xf -if followed by the option -src, -sourcepath, -modulepath or -classpath and produce a map of all the files to referenced for that particular option. Store the found sources and the found modules in the supplied maps.
 */
private boolean findFiles(String[] args,String option,Set<String> suffixes,Map<String,Source> found_files,Map<String,Module> found_modules,Module current_module,boolean inLinksrc) throws ProblemException, ProblemException {
  Set<File> roots=new HashSet<File>();
  List<String> includes=new LinkedList<String>();
  List<String> excludes=new LinkedList<String>();
  List<String> excludefiles=new LinkedList<String>();
  List<String> includefiles=new LinkedList<String>();
  List<String> moduleinfo=new LinkedList<String>();
  moduleinfo.add(""String_Node_Str"");
  for (int i=0; i < args.length; ++i) {
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String incl=args[i + 1];
      checkPattern(incl);
      includes.add(incl);
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String excl=args[i + 1];
      checkPattern(excl);
      excludes.add(excl);
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String exclf=args[i + 1];
      checkFilePattern(exclf);
      exclf=Util.normalizeDriveLetter(exclf);
      excludefiles.add(fixupSeparator(exclf));
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String inclf=args[i + 1];
      checkFilePattern(inclf);
      inclf=Util.normalizeDriveLetter(inclf);
      includefiles.add(fixupSeparator(inclf));
    }
    if (args[i].equals(option)) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"" + option);
      }
      String[] root_dirs=args[i + 1].split(File.pathSeparator);
      for (      String r : root_dirs) {
        File root=new File(r);
        if (!root.isDirectory()) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str"");
        }
        try {
          root=root.getCanonicalFile();
        }
 catch (        IOException e) {
          throw new ProblemException(""String_Node_Str"" + e);
        }
        if (roots.contains(root)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option);
        }
        if (root.equals(bin_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        if (root.equals(gensrc_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        if (root.equals(header_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        roots.add(root);
        Source.scanRoot(root,suffixes,excludes,includes,excludefiles,includefiles,found_files,found_modules,current_module,findBooleanOption(args,""String_Node_Str""),false,inLinksrc);
      }
    }
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")|| args[i].equals(""String_Node_Str"")|| args[i].equals(""String_Node_Str"")) {
      includes=new LinkedList<String>();
      excludes=new LinkedList<String>();
      excludefiles=new LinkedList<String>();
      includefiles=new LinkedList<String>();
    }
  }
  return true;
}"
77602,"public int go(String[] args,PrintStream out,PrintStream err){
  try {
    if (args.length == 0 || findJavaSourceFiles(args) || findAtFile(args) || null == Util.findServerSettings(args)) {
      printHelp();
      return 0;
    }
    Log.setLogLevel(findLogLevel(args),out,err);
    String server_settings=Util.findServerSettings(args);
    args=verifyImplicitOption(args);
    args=addSrcBeforeDirectories(args);
    checkSrcOption(args);
    bin_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",true,false,true);
    gensrc_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",false,false,true);
    header_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",false,false,true);
    makefile_source_list=findFileOption(args,""String_Node_Str"",""String_Node_Str"",false);
    javac_state=JavacState.load(args,bin_dir,gensrc_dir,header_dir,findBooleanOption(args,""String_Node_Str""),out,err);
    suffix_rules=javac_state.getJavaSuffixRule();
    findTranslateOptions(args,suffix_rules);
    if (suffix_rules.keySet().size() > 1 && gensrc_dir == null) {
      Log.error(""String_Node_Str"");
      return -1;
    }
    findCopyOptions(args,suffix_rules);
    Map<String,Module> modules=new HashMap<String,Module>();
    Module current_module=new Module(""String_Node_Str"",""String_Node_Str"");
    modules.put(""String_Node_Str"",current_module);
    Map<String,Source> sources=new HashMap<String,Source>();
    findFiles(args,""String_Node_Str"",suffix_rules.keySet(),sources,modules,current_module,false);
    if (sources.isEmpty()) {
      Log.error(""String_Node_Str"");
      return -1;
    }
    Map<String,Source> sources_to_link_to=new HashMap<String,Source>();
    rewriteOptions(args,""String_Node_Str"",""String_Node_Str"");
    findFiles(args,""String_Node_Str"",Util.set(""String_Node_Str""),sources_to_link_to,modules,current_module,true);
    Map<String,Source> classes_to_link_to=new HashMap<String,Source>();
    Map<String,Source> modules_to_link_to=new HashMap<String,Source>();
    javac_state.now().collectPackagesSourcesAndArtifacts(modules);
    javac_state.now().checkInternalState(""String_Node_Str"",false,sources);
    javac_state.now().checkInternalState(""String_Node_Str"",true,sources_to_link_to);
    javac_state.setVisibleSources(sources_to_link_to);
    javac_state.checkSourceStatus(false);
    javac_state.findAllArtifacts();
    if (!findBooleanOption(args,""String_Node_Str"")) {
      javac_state.removeUnidentifiedArtifacts();
    }
    javac_state.taintPackagesThatMissArtifacts();
    javac_state.deleteClassArtifactsInTaintedPackages();
    javac_state.performCopying(bin_dir,suffix_rules);
    javac_state.performTranslation(gensrc_dir,suffix_rules);
    Map<String,Source> generated_sources=new HashMap<String,Source>();
    Source.scanRoot(gensrc_dir,Util.set(""String_Node_Str""),null,null,null,null,generated_sources,modules,current_module,false,true,false);
    javac_state.now().collectPackagesSourcesAndArtifacts(modules);
    javac_state.checkSourceStatus(true);
    javac_state.compareWithMakefileList(makefile_source_list);
    boolean again;
    Set<String> recently_compiled=new HashSet<String>();
    boolean[] rc=new boolean[1];
    do {
      javac_state.deleteClassArtifactsInTaintedPackages();
      again=javac_state.performJavaCompilations(bin_dir,server_settings,args,recently_compiled,rc);
      if (!rc[0])       break;
    }
 while (again);
    if (rc[0]) {
      javac_state.save();
      javac_state.now().collectArtifacts(modules);
      javac_state.removeSuperfluousArtifacts(recently_compiled);
    }
    return rc[0] ? 0 : -1;
  }
 catch (  ProblemException e) {
    Log.error(e.getMessage());
    return -1;
  }
catch (  Exception e) {
    e.printStackTrace(err);
    return -1;
  }
}","public int go(String[] args,PrintStream out,PrintStream err){
  try {
    if (args.length == 0 || findJavaSourceFiles(args) || findAtFile(args) || null == Util.findServerSettings(args)) {
      printHelp();
      return 0;
    }
    Log.setLogLevel(findLogLevel(args),out,err);
    String server_settings=Util.findServerSettings(args);
    args=verifyImplicitOption(args);
    args=addSrcBeforeDirectories(args);
    checkSrcOption(args);
    bin_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",true,false,true);
    gensrc_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",false,false,true);
    header_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",false,false,true);
    makefile_source_list=findFileOption(args,""String_Node_Str"",""String_Node_Str"",false);
    javac_state=JavacState.load(args,bin_dir,gensrc_dir,header_dir,findBooleanOption(args,""String_Node_Str""),out,err);
    suffix_rules=javac_state.getJavaSuffixRule();
    findTranslateOptions(args,suffix_rules);
    if (suffix_rules.keySet().size() > 1 && gensrc_dir == null) {
      Log.error(""String_Node_Str"");
      return -1;
    }
    findCopyOptions(args,suffix_rules);
    Map<String,Module> modules=new HashMap<String,Module>();
    Module current_module=new Module(""String_Node_Str"",""String_Node_Str"");
    modules.put(""String_Node_Str"",current_module);
    Map<String,Source> sources=new HashMap<String,Source>();
    findFiles(args,""String_Node_Str"",suffix_rules.keySet(),sources,modules,current_module,false);
    if (sources.isEmpty()) {
      Log.error(""String_Node_Str"");
      return -1;
    }
    Map<String,Source> sources_to_link_to=new HashMap<String,Source>();
    rewriteOptions(args,""String_Node_Str"",""String_Node_Str"");
    findFiles(args,""String_Node_Str"",Util.set(""String_Node_Str""),sources_to_link_to,modules,current_module,true);
    javac_state.now().collectPackagesSourcesAndArtifacts(modules);
    javac_state.now().checkInternalState(""String_Node_Str"",false,sources);
    javac_state.now().checkInternalState(""String_Node_Str"",true,sources_to_link_to);
    javac_state.setVisibleSources(sources_to_link_to);
    javac_state.checkSourceStatus(false);
    javac_state.findAllArtifacts();
    if (!findBooleanOption(args,""String_Node_Str"")) {
      javac_state.removeUnidentifiedArtifacts();
    }
    javac_state.taintPackagesThatMissArtifacts();
    javac_state.deleteClassArtifactsInTaintedPackages();
    javac_state.performCopying(bin_dir,suffix_rules);
    javac_state.performTranslation(gensrc_dir,suffix_rules);
    Map<String,Source> generated_sources=new HashMap<String,Source>();
    Source.scanRoot(gensrc_dir,Util.set(""String_Node_Str""),null,null,null,null,generated_sources,modules,current_module,false,true,false);
    javac_state.now().collectPackagesSourcesAndArtifacts(modules);
    javac_state.checkSourceStatus(true);
    javac_state.compareWithMakefileList(makefile_source_list);
    boolean again;
    Set<String> recently_compiled=new HashSet<String>();
    boolean[] rc=new boolean[1];
    do {
      javac_state.deleteClassArtifactsInTaintedPackages();
      again=javac_state.performJavaCompilations(bin_dir,server_settings,args,recently_compiled,rc);
      if (!rc[0])       break;
    }
 while (again);
    if (rc[0]) {
      javac_state.save();
      javac_state.now().collectArtifacts(modules);
      javac_state.removeSuperfluousArtifacts(recently_compiled);
    }
    return rc[0] ? 0 : -1;
  }
 catch (  ProblemException e) {
    Log.error(e.getMessage());
    return -1;
  }
catch (  Exception e) {
    e.printStackTrace(err);
    return -1;
  }
}"
77603,"private void checkConfigPermission(){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new RuntimePermission(""String_Node_Str""));
  }
}","private static void checkConfigPermission(){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new RuntimePermission(""String_Node_Str""));
  }
}"
77604,"@Override protected void makeObject(final MethodEmitter m){
  final String className=SCRIPTFUNCTION_IMPL_OBJECT;
  m._new(className).dup();
  loadConstant(new RecompilableScriptFunctionData(functionNode,compiler.getCodeInstaller(),Compiler.binaryName(getClassName()),makeMap()));
  if (isLazy || functionNode.needsParentScope()) {
    m.loadScope();
  }
 else {
    m.loadNull();
  }
  m.invoke(constructorNoLookup(className,cparams));
}","@Override protected void makeObject(final MethodEmitter m){
  final String className=SCRIPTFUNCTION_IMPL_OBJECT;
  m._new(className).dup();
  loadConstant(new RecompilableScriptFunctionData(functionNode,compiler.getCodeInstaller(),Compiler.binaryName(getClassName()),makeMap()));
  if (isLazy || functionNode.needsParentScope()) {
    m.loadScope();
  }
 else {
    m.loadNull();
  }
  m.invoke(constructorNoLookup(className,RecompilableScriptFunctionData.class,ScriptObject.class));
}"
77605,"private void newFunctionObject(final FunctionNode functionNode){
  final boolean isLazy=functionNode.isLazy();
  final Class<?>[] cparams=new Class<?>[]{RecompilableScriptFunctionData.class,ScriptObject.class};
  new ObjectCreator(this,new ArrayList<String>(),new ArrayList<Symbol>(),false,false){
    @Override protected void makeObject(    final MethodEmitter m){
      final String className=SCRIPTFUNCTION_IMPL_OBJECT;
      m._new(className).dup();
      loadConstant(new RecompilableScriptFunctionData(functionNode,compiler.getCodeInstaller(),Compiler.binaryName(getClassName()),makeMap()));
      if (isLazy || functionNode.needsParentScope()) {
        m.loadScope();
      }
 else {
        m.loadNull();
      }
      m.invoke(constructorNoLookup(className,cparams));
    }
  }
.makeObject(method);
}","private void newFunctionObject(final FunctionNode functionNode){
  final boolean isLazy=functionNode.isLazy();
  new ObjectCreator(this,new ArrayList<String>(),new ArrayList<Symbol>(),false,false){
    @Override protected void makeObject(    final MethodEmitter m){
      final String className=SCRIPTFUNCTION_IMPL_OBJECT;
      m._new(className).dup();
      loadConstant(new RecompilableScriptFunctionData(functionNode,compiler.getCodeInstaller(),Compiler.binaryName(getClassName()),makeMap()));
      if (isLazy || functionNode.needsParentScope()) {
        m.loadScope();
      }
 else {
        m.loadNull();
      }
      m.invoke(constructorNoLookup(className,RecompilableScriptFunctionData.class,ScriptObject.class));
    }
  }
.makeObject(method);
}"
77606,"/** 
 * Check if this function's generated Java method needs a   {@code callee} parameter. Functions that need access totheir parent scope, functions that reference themselves, and non-strict functions that need an Arguments object (since it exposes  {@code arguments.callee} property) will need to have a callee parameter.We also conservatively need a callee if we have lazy children, i.e. nested function nodes that have not yet been evaluated. _They_ may need the callee and we don't know it
 * @return true if the function's generated Java method needs a {@code callee} parameter.
 */
public boolean needsCallee(){
  return hasLazyChildren() || needsParentScope() || needsSelfSymbol()|| (needsArguments() && !isStrictMode());
}","/** 
 * Check if this function's generated Java method needs a   {@code callee} parameter. Functions that need access totheir parent scope, functions that reference themselves, and non-strict functions that need an Arguments object (since it exposes  {@code arguments.callee} property) will need to have a callee parameter.
 * @return true if the function's generated Java method needs a {@code callee} parameter.
 */
public boolean needsCallee(){
  return needsParentScope() || needsSelfSymbol() || (needsArguments() && !isStrictMode());
}"
77607,"private void copyOptions(final ScriptObject options,final ScriptEnvironment scriptEnv){
  AccessController.doPrivileged(new PrivilegedAction<Void>(){
    public Void run(){
      for (      Field f : scriptEnv.getClass().getFields()) {
        try {
          options.set(f.getName(),f.get(scriptEnv),false);
        }
 catch (        final IllegalArgumentException|IllegalAccessException exp) {
          throw new RuntimeException(exp);
        }
      }
      return null;
    }
  }
);
}","private static void copyOptions(final ScriptObject options,final ScriptEnvironment scriptEnv){
  AccessController.doPrivileged(new PrivilegedAction<Void>(){
    @Override public Void run(){
      for (      Field f : scriptEnv.getClass().getFields()) {
        try {
          options.set(f.getName(),f.get(scriptEnv),false);
        }
 catch (        final IllegalArgumentException|IllegalAccessException exp) {
          throw new RuntimeException(exp);
        }
      }
      return null;
    }
  }
);
}"
77608,"public Void run(){
  for (  Field f : scriptEnv.getClass().getFields()) {
    try {
      options.set(f.getName(),f.get(scriptEnv),false);
    }
 catch (    final IllegalArgumentException|IllegalAccessException exp) {
      throw new RuntimeException(exp);
    }
  }
  return null;
}","@Override public Void run(){
  for (  Field f : scriptEnv.getClass().getFields()) {
    try {
      options.set(f.getName(),f.get(scriptEnv),false);
    }
 catch (    final IllegalArgumentException|IllegalAccessException exp) {
      throw new RuntimeException(exp);
    }
  }
  return null;
}"
77609,"private synchronized Class<?> compile(final Source source,final ErrorManager errMan,final boolean strict){
  errMan.reset();
  GlobalObject global=null;
  Class<?> script;
  if (env._class_cache_size > 0) {
    global=(GlobalObject)Context.getGlobalTrusted();
    script=global.findCachedClass(source);
    if (script != null) {
      return script;
    }
  }
  final FunctionNode functionNode=new Parser(env,source,errMan,strict).parse();
  if (errors.hasErrors() || env._parse_only) {
    return null;
  }
  if (env._print_ast) {
    getErr().println(new ASTWriter(functionNode));
  }
  if (env._print_parse) {
    getErr().println(new PrintVisitor(functionNode));
  }
  final URL url=source.getURL();
  final ScriptLoader loader=env._loader_per_compile ? createNewLoader() : scriptLoader;
  final CodeSource cs=url == null ? null : new CodeSource(url,(CodeSigner[])null);
  final CodeInstaller<ScriptEnvironment> installer=new ContextCodeInstaller(this,loader,cs);
  final Compiler compiler=new Compiler(installer,functionNode,strict);
  compiler.compile();
  script=compiler.install();
  if (global != null) {
    global.cacheClass(source,script);
  }
  return script;
}","private synchronized Class<?> compile(final Source source,final ErrorManager errMan,final boolean strict){
  errMan.reset();
  GlobalObject global=null;
  Class<?> script;
  if (env._class_cache_size > 0) {
    global=(GlobalObject)Context.getGlobalTrusted();
    script=global.findCachedClass(source);
    if (script != null) {
      Compiler.LOG.fine(""String_Node_Str"" + source + ""String_Node_Str"");
      return script;
    }
  }
  final FunctionNode functionNode=new Parser(env,source,errMan,strict).parse();
  if (errors.hasErrors() || env._parse_only) {
    return null;
  }
  if (env._print_ast) {
    getErr().println(new ASTWriter(functionNode));
  }
  if (env._print_parse) {
    getErr().println(new PrintVisitor(functionNode));
  }
  final URL url=source.getURL();
  final ScriptLoader loader=env._loader_per_compile ? createNewLoader() : scriptLoader;
  final CodeSource cs=url == null ? null : new CodeSource(url,(CodeSigner[])null);
  final CodeInstaller<ScriptEnvironment> installer=new ContextCodeInstaller(this,loader,cs);
  final Compiler compiler=new Compiler(installer,functionNode,strict);
  compiler.compile();
  script=compiler.install();
  if (global != null) {
    global.cacheClass(source,script);
  }
  return script;
}"
77610,"/** 
 * Install a class for use by the Nashorn runtime
 * @param name Binary name of class.
 * @param data Class data bytes.
 * @param cs CodeSource code source of the class bytes.
 * @return Installed class.
 */
synchronized Class<?> installClass(final String name,final byte[] data,final CodeSource cs){
  if (cs == null) {
    return defineClass(name,data,0,data.length,new ProtectionDomain(null,getPermissions(null)));
  }
 else {
    return defineClass(name,data,0,data.length,cs);
  }
}","/** 
 * Install a class for use by the Nashorn runtime
 * @param name Binary name of class.
 * @param data Class data bytes.
 * @param cs CodeSource code source of the class bytes.
 * @return Installed class.
 */
synchronized Class<?> installClass(final String name,final byte[] data,final CodeSource cs){
  if (cs == null) {
    return defineClass(name,data,0,data.length,new ProtectionDomain(null,getPermissions(null)));
  }
  return defineClass(name,data,0,data.length,cs);
}"
77611,"/** 
 * Returns a method handle representing a constructor that takes a single argument of the source type (which, really, should be one of   {@link ScriptObject},   {@link ScriptFunction}, or   {@link Object}, and returns an instance of the adapter for the target type. Used to implement the function autoconverters as well as the Nashorn's JSR-223 script engine's   {@code getInterface()} method.
 * @param sourceType the source type; should be either {@link ScriptObject},   {@link ScriptFunction}, or  {@link Object}. In case of   {@code Object}, it will return a method handle that dispatches to either the script object or function constructor at invocation based on the actual argument.
 * @param targetType the target type, for which adapter instances will be created
 * @return the constructor method handle.
 * @throws Exception if anything goes wrong
 */
public static MethodHandle getConstructor(final Class<?> sourceType,final Class<?> targetType) throws Exception {
  final StaticClass adapterClass=getAdapterClassFor(new Class<?>[]{targetType});
  return AccessController.doPrivileged(new PrivilegedExceptionAction<MethodHandle>(){
    public MethodHandle run() throws Exception {
      return MH.bindTo(Bootstrap.getLinkerServices().getGuardedInvocation(new LinkRequestImpl(NashornCallSiteDescriptor.get(""String_Node_Str"",MethodType.methodType(targetType,StaticClass.class,sourceType),0),false,adapterClass,null)).getInvocation(),adapterClass);
    }
  }
);
}","/** 
 * Returns a method handle representing a constructor that takes a single argument of the source type (which, really, should be one of   {@link ScriptObject},   {@link ScriptFunction}, or   {@link Object}, and returns an instance of the adapter for the target type. Used to implement the function autoconverters as well as the Nashorn's JSR-223 script engine's   {@code getInterface()} method.
 * @param sourceType the source type; should be either {@link ScriptObject},   {@link ScriptFunction}, or  {@link Object}. In case of   {@code Object}, it will return a method handle that dispatches to either the script object or function constructor at invocation based on the actual argument.
 * @param targetType the target type, for which adapter instances will be created
 * @return the constructor method handle.
 * @throws Exception if anything goes wrong
 */
public static MethodHandle getConstructor(final Class<?> sourceType,final Class<?> targetType) throws Exception {
  final StaticClass adapterClass=getAdapterClassFor(new Class<?>[]{targetType});
  return AccessController.doPrivileged(new PrivilegedExceptionAction<MethodHandle>(){
    @Override public MethodHandle run() throws Exception {
      return MH.bindTo(Bootstrap.getLinkerServices().getGuardedInvocation(new LinkRequestImpl(NashornCallSiteDescriptor.get(""String_Node_Str"",MethodType.methodType(targetType,StaticClass.class,sourceType),0),false,adapterClass,null)).getInvocation(),adapterClass);
    }
  }
);
}"
77612,"@Override public RegExpMatcher match(final String str){
  if (pattern == null) {
    return null;
  }
  RegExpMatcher matcher=this.matcher;
  if (matcher == null || matcher.getInput() != str) {
    matcher=new DefaultMatcher(str);
    this.matcher=matcher;
  }
  return matcher;
}","@Override public RegExpMatcher match(final String str){
  if (pattern == null) {
    return null;
  }
  RegExpMatcher currentMatcher=this.matcher;
  if (currentMatcher == null || matcher.getInput() != str) {
    currentMatcher=new DefaultMatcher(str);
    this.matcher=currentMatcher;
  }
  return currentMatcher;
}"
77613,"@Override public RegExpMatcher match(final String input){
  if (regex == null) {
    return null;
  }
  RegExpMatcher matcher=this.matcher;
  if (matcher == null || input != matcher.getInput()) {
    matcher=new JoniMatcher(input);
    this.matcher=matcher;
  }
  return matcher;
}","@Override public RegExpMatcher match(final String input){
  if (regex == null) {
    return null;
  }
  RegExpMatcher currentMatcher=this.matcher;
  if (currentMatcher == null || input != currentMatcher.getInput()) {
    currentMatcher=new JoniMatcher(input);
    this.matcher=currentMatcher;
  }
  return currentMatcher;
}"
77614,"/** 
 * Throw a regexp parser exception.
 * @param key the message key
 * @param str string argument
 * @throws jdk.nashorn.internal.runtime.ParserException
 */
protected static void throwParserException(final String key,final String str) throws ParserException {
  throw new ParserException(ECMAErrors.getMessage(""String_Node_Str"" + key,str));
}","/** 
 * Throw a regexp parser exception.
 * @param key the message key
 * @param str string argument
 * @throws jdk.nashorn.internal.runtime.ParserException unconditionally
 */
protected static void throwParserException(final String key,final String str) throws ParserException {
  throw new ParserException(ECMAErrors.getMessage(""String_Node_Str"" + key,str));
}"
77615,"/** 
 * Creates a Regular expression from the given   {@code pattern} and {@code flags} strings.
 * @param pattern RegExp pattern string
 * @param flags RegExp flags string
 * @throws ParserException if flags is invalid or pattern string has syntax error.
 */
protected RegExp compile(final String pattern,final String flags) throws ParserException {
  return new DefaultRegExp(pattern,flags);
}","/** 
 * Creates a Regular expression from the given   {@code pattern} and {@code flags} strings.
 * @param pattern RegExp pattern string
 * @param flags   RegExp flags string
 * @return new RegExp
 * @throws ParserException if flags is invalid or pattern string has syntax error.
 */
protected RegExp compile(final String pattern,final String flags) throws ParserException {
  return new DefaultRegExp(pattern,flags);
}"
77616,"/** 
 * Compile a regexp with the given   {@code source} and {@code flags}.
 * @param pattern RegExp pattern string
 * @param flags  flag string
 * @throws ParserException if invalid source or flags
 */
public static RegExp create(final String pattern,final String flags){
  return instance.compile(pattern,flags);
}","/** 
 * Compile a regexp with the given   {@code source} and {@code flags}.
 * @param pattern RegExp pattern string
 * @param flags   flag string
 * @return new RegExp
 * @throws ParserException if invalid source or flags
 */
public static RegExp create(final String pattern,final String flags){
  return instance.compile(pattern,flags);
}"
77617,"/** 
 * Get the group with the given index or the empty string if group index is not valid.
 * @param index the group index
 * @return the group or """"
 */
public Object getGroup(int index){
  return index >= 0 && index < groups.length ? groups[index] : ""String_Node_Str"";
}","/** 
 * Get the group with the given index or the empty string if group index is not valid.
 * @param groupIndex the group index
 * @return the group or """"
 */
public Object getGroup(final int groupIndex){
  return groupIndex >= 0 && groupIndex < groups.length ? groups[groupIndex] : ""String_Node_Str"";
}"
77618,"public static boolean isDynamicMethod(final Object obj){
  return obj instanceof DynamicMethod;
}","/** 
 * Returns true if the object is a Dynalink Java dynamic method.
 * @param obj the object we want to test for being a dynamic method
 * @return true if it is a dynamic method, false otherwise.
 */
public static boolean isDynamicMethod(final Object obj){
  return obj instanceof DynamicMethod;
}"
77619,"public static final Attribute readAttribute(DataInputStream file,ConstantPool constant_pool) throws IOException, ClassFormatException {
  ConstantUtf8 c;
  String name;
  int name_index;
  int length;
  byte tag=Constants.ATTR_UNKNOWN;
  name_index=(int)file.readUnsignedShort();
  c=(ConstantUtf8)constant_pool.getConstant(name_index,Constants.CONSTANT_Utf8);
  name=c.getBytes();
  length=file.readInt();
  for (byte i=0; i < Constants.KNOWN_ATTRIBUTES; i++) {
    if (name.equals(Constants.ATTRIBUTE_NAMES[i])) {
      tag=i;
      break;
    }
  }
switch (tag) {
case Constants.ATTR_UNKNOWN:
    AttributeReader r=(AttributeReader)readers.get(name);
  if (r != null)   return r.createAttribute(name_index,length,file,constant_pool);
 else   return new Unknown(name_index,length,file,constant_pool);
case Constants.ATTR_CONSTANT_VALUE:
return new ConstantValue(name_index,length,file,constant_pool);
case Constants.ATTR_SOURCE_FILE:
return new SourceFile(name_index,length,file,constant_pool);
case Constants.ATTR_CODE:
return new Code(name_index,length,file,constant_pool);
case Constants.ATTR_EXCEPTIONS:
return new ExceptionTable(name_index,length,file,constant_pool);
case Constants.ATTR_LINE_NUMBER_TABLE:
return new LineNumberTable(name_index,length,file,constant_pool);
case Constants.ATTR_LOCAL_VARIABLE_TABLE:
return new LocalVariableTable(name_index,length,file,constant_pool);
case Constants.ATTR_INNER_CLASSES:
return new InnerClasses(name_index,length,file,constant_pool);
case Constants.ATTR_SYNTHETIC:
return new Synthetic(name_index,length,file,constant_pool);
case Constants.ATTR_DEPRECATED:
return new Deprecated(name_index,length,file,constant_pool);
case Constants.ATTR_PMG:
return new PMGClass(name_index,length,file,constant_pool);
case Constants.ATTR_SIGNATURE:
return new Signature(name_index,length,file,constant_pool);
case Constants.ATTR_STACK_MAP:
return new StackMap(name_index,length,file,constant_pool);
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","public static final Attribute readAttribute(DataInputStream file,ConstantPool constant_pool) throws IOException, ClassFormatException {
  ConstantUtf8 c;
  String name;
  int name_index;
  int length;
  byte tag=Constants.ATTR_UNKNOWN;
  name_index=(int)file.readUnsignedShort();
  c=(ConstantUtf8)constant_pool.getConstant(name_index,Constants.CONSTANT_Utf8);
  name=c.getBytes();
  length=file.readInt();
  for (byte i=0; i < Constants.KNOWN_ATTRIBUTES; i++) {
    if (name.equals(Constants.ATTRIBUTE_NAMES[i])) {
      tag=i;
      break;
    }
  }
switch (tag) {
case Constants.ATTR_UNKNOWN:
    AttributeReader r=(AttributeReader)readers.get(name);
  if (r != null)   return r.createAttribute(name_index,length,file,constant_pool);
 else   return new Unknown(name_index,length,file,constant_pool);
case Constants.ATTR_CONSTANT_VALUE:
return new ConstantValue(name_index,length,file,constant_pool);
case Constants.ATTR_SOURCE_FILE:
return new SourceFile(name_index,length,file,constant_pool);
case Constants.ATTR_CODE:
return new Code(name_index,length,file,constant_pool);
case Constants.ATTR_EXCEPTIONS:
return new ExceptionTable(name_index,length,file,constant_pool);
case Constants.ATTR_LINE_NUMBER_TABLE:
return new LineNumberTable(name_index,length,file,constant_pool);
case Constants.ATTR_LOCAL_VARIABLE_TABLE:
return new LocalVariableTable(name_index,length,file,constant_pool);
case Constants.ATTR_LOCAL_VARIABLE_TYPE_TABLE:
return new LocalVariableTypeTable(name_index,length,file,constant_pool);
case Constants.ATTR_INNER_CLASSES:
return new InnerClasses(name_index,length,file,constant_pool);
case Constants.ATTR_SYNTHETIC:
return new Synthetic(name_index,length,file,constant_pool);
case Constants.ATTR_DEPRECATED:
return new Deprecated(name_index,length,file,constant_pool);
case Constants.ATTR_PMG:
return new PMGClass(name_index,length,file,constant_pool);
case Constants.ATTR_SIGNATURE:
return new Signature(name_index,length,file,constant_pool);
case Constants.ATTR_STACK_MAP:
return new StackMap(name_index,length,file,constant_pool);
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
77620,"/** 
 * Instantiate from existing method.
 * @param m method
 * @param class_name class name containing this method
 * @param cp constant pool
 */
public MethodGen(Method m,String class_name,ConstantPoolGen cp){
  this(m.getAccessFlags(),Type.getReturnType(m.getSignature()),Type.getArgumentTypes(m.getSignature()),null,m.getName(),class_name,((m.getAccessFlags() & (Constants.ACC_ABSTRACT | Constants.ACC_NATIVE)) == 0) ? new InstructionList(m.getCode().getCode()) : null,cp);
  Attribute[] attributes=m.getAttributes();
  for (int i=0; i < attributes.length; i++) {
    Attribute a=attributes[i];
    if (a instanceof Code) {
      Code c=(Code)a;
      setMaxStack(c.getMaxStack());
      setMaxLocals(c.getMaxLocals());
      CodeException[] ces=c.getExceptionTable();
      if (ces != null) {
        for (int j=0; j < ces.length; j++) {
          CodeException ce=ces[j];
          int type=ce.getCatchType();
          ObjectType c_type=null;
          if (type > 0) {
            String cen=m.getConstantPool().getConstantString(type,Constants.CONSTANT_Class);
            c_type=new ObjectType(cen);
          }
          int end_pc=ce.getEndPC();
          int length=m.getCode().getCode().length;
          InstructionHandle end;
          if (length == end_pc) {
            end=il.getEnd();
          }
 else {
            end=il.findHandle(end_pc);
            end=end.getPrev();
          }
          addExceptionHandler(il.findHandle(ce.getStartPC()),end,il.findHandle(ce.getHandlerPC()),c_type);
        }
      }
      Attribute[] c_attributes=c.getAttributes();
      for (int j=0; j < c_attributes.length; j++) {
        a=c_attributes[j];
        if (a instanceof LineNumberTable) {
          LineNumber[] ln=((LineNumberTable)a).getLineNumberTable();
          for (int k=0; k < ln.length; k++) {
            LineNumber l=ln[k];
            addLineNumber(il.findHandle(l.getStartPC()),l.getLineNumber());
          }
        }
 else         if (a instanceof LocalVariableTable) {
          LocalVariable[] lv=((LocalVariableTable)a).getLocalVariableTable();
          removeLocalVariables();
          for (int k=0; k < lv.length; k++) {
            LocalVariable l=lv[k];
            InstructionHandle start=il.findHandle(l.getStartPC());
            InstructionHandle end=il.findHandle(l.getStartPC() + l.getLength());
            if (null == start) {
              start=il.getStart();
            }
            if (null == end) {
              end=il.getEnd();
            }
            addLocalVariable(l.getName(),Type.getType(l.getSignature()),l.getIndex(),start,end);
          }
        }
 else         addCodeAttribute(a);
      }
    }
 else     if (a instanceof ExceptionTable) {
      String[] names=((ExceptionTable)a).getExceptionNames();
      for (int j=0; j < names.length; j++)       addException(names[j]);
    }
 else     addAttribute(a);
  }
}","/** 
 * Instantiate from existing method.
 * @param m method
 * @param class_name class name containing this method
 * @param cp constant pool
 */
public MethodGen(Method m,String class_name,ConstantPoolGen cp){
  this(m.getAccessFlags(),Type.getReturnType(m.getSignature()),Type.getArgumentTypes(m.getSignature()),null,m.getName(),class_name,((m.getAccessFlags() & (Constants.ACC_ABSTRACT | Constants.ACC_NATIVE)) == 0) ? new InstructionList(m.getCode().getCode()) : null,cp);
  Attribute[] attributes=m.getAttributes();
  for (int i=0; i < attributes.length; i++) {
    Attribute a=attributes[i];
    if (a instanceof Code) {
      Code c=(Code)a;
      setMaxStack(c.getMaxStack());
      setMaxLocals(c.getMaxLocals());
      CodeException[] ces=c.getExceptionTable();
      if (ces != null) {
        for (int j=0; j < ces.length; j++) {
          CodeException ce=ces[j];
          int type=ce.getCatchType();
          ObjectType c_type=null;
          if (type > 0) {
            String cen=m.getConstantPool().getConstantString(type,Constants.CONSTANT_Class);
            c_type=new ObjectType(cen);
          }
          int end_pc=ce.getEndPC();
          int length=m.getCode().getCode().length;
          InstructionHandle end;
          if (length == end_pc) {
            end=il.getEnd();
          }
 else {
            end=il.findHandle(end_pc);
            end=end.getPrev();
          }
          addExceptionHandler(il.findHandle(ce.getStartPC()),end,il.findHandle(ce.getHandlerPC()),c_type);
        }
      }
      Attribute[] c_attributes=c.getAttributes();
      for (int j=0; j < c_attributes.length; j++) {
        a=c_attributes[j];
        if (a instanceof LineNumberTable) {
          LineNumber[] ln=((LineNumberTable)a).getLineNumberTable();
          for (int k=0; k < ln.length; k++) {
            LineNumber l=ln[k];
            addLineNumber(il.findHandle(l.getStartPC()),l.getLineNumber());
          }
        }
 else         if (a instanceof LocalVariableTable) {
          LocalVariable[] lv=((LocalVariableTable)a).getLocalVariableTable();
          removeLocalVariables();
          for (int k=0; k < lv.length; k++) {
            LocalVariable l=lv[k];
            InstructionHandle start=il.findHandle(l.getStartPC());
            InstructionHandle end=il.findHandle(l.getStartPC() + l.getLength());
            if (null == start) {
              start=il.getStart();
            }
            if (null == end) {
              end=il.getEnd();
            }
            addLocalVariable(l.getName(),Type.getType(l.getSignature()),l.getIndex(),start,end);
          }
        }
 else         if (a instanceof LocalVariableTypeTable) {
          LocalVariable[] lv=((LocalVariableTypeTable)a).getLocalVariableTypeTable();
          removeLocalVariables();
          for (int k=0; k < lv.length; k++) {
            LocalVariable l=lv[k];
            InstructionHandle start=il.findHandle(l.getStartPC());
            InstructionHandle end=il.findHandle(l.getStartPC() + l.getLength());
            if (null == start) {
              start=il.getStart();
            }
            if (null == end) {
              end=il.getEnd();
            }
            addLocalVariable(l.getName(),Type.getType(l.getSignature()),l.getIndex(),start,end);
          }
        }
 else         addCodeAttribute(a);
      }
    }
 else     if (a instanceof ExceptionTable) {
      String[] names=((ExceptionTable)a).getExceptionNames();
      for (int j=0; j < names.length; j++)       addException(names[j]);
    }
 else     addAttribute(a);
  }
}"
77621,"@Override public Symbol access(Name name,TypeSymbol location){
  return types.createErrorType(name,location,syms.errSymbol.type).tsym;
}","@Override protected Symbol access(Name name,TypeSymbol location){
  return ambiguousSyms.last();
}"
77622,"Symbol mostSpecific(List<Type> argtypes,Symbol m1,Symbol m2,Env<AttrContext> env,final Type site,boolean allowBoxing,boolean useVarargs){
switch (m2.kind) {
case MTH:
    if (m1 == m2)     return m1;
  boolean m1SignatureMoreSpecific=signatureMoreSpecific(argtypes,env,site,m1,m2,allowBoxing,useVarargs);
boolean m2SignatureMoreSpecific=signatureMoreSpecific(argtypes,env,site,m2,m1,allowBoxing,useVarargs);
if (m1SignatureMoreSpecific && m2SignatureMoreSpecific) {
Type mt1=types.memberType(site,m1);
Type mt2=types.memberType(site,m2);
if (!types.overrideEquivalent(mt1,mt2)) return ambiguityError(m1,m2);
if ((m1.flags() & BRIDGE) != (m2.flags() & BRIDGE)) return ((m1.flags() & BRIDGE) != 0) ? m2 : m1;
TypeSymbol m1Owner=(TypeSymbol)m1.owner;
TypeSymbol m2Owner=(TypeSymbol)m2.owner;
if (types.asSuper(m1Owner.type,m2Owner) != null && ((m1.owner.flags_field & INTERFACE) == 0 || (m2.owner.flags_field & INTERFACE) != 0) && m1.overrides(m2,m1Owner,types,false)) return m1;
if (types.asSuper(m2Owner.type,m1Owner) != null && ((m2.owner.flags_field & INTERFACE) == 0 || (m1.owner.flags_field & INTERFACE) != 0) && m2.overrides(m1,m2Owner,types,false)) return m2;
boolean m1Abstract=(m1.flags() & ABSTRACT) != 0;
boolean m2Abstract=(m2.flags() & ABSTRACT) != 0;
if (m1Abstract && !m2Abstract) return m2;
if (m2Abstract && !m1Abstract) return m1;
if (!m1Abstract && !m2Abstract) return ambiguityError(m1,m2);
if (!types.isSameTypes(m1.erasure(types).getParameterTypes(),m2.erasure(types).getParameterTypes())) return ambiguityError(m1,m2);
Type mst=mostSpecificReturnType(mt1,mt2);
if (mst == null) {
  return ambiguityError(m1,m2);
}
Symbol mostSpecific=mst == mt1 ? m1 : m2;
List<Type> allThrown=chk.intersect(mt1.getThrownTypes(),mt2.getThrownTypes());
Type newSig=types.createMethodTypeWithThrown(mostSpecific.type,allThrown);
MethodSymbol result=new MethodSymbol(mostSpecific.flags(),mostSpecific.name,newSig,mostSpecific.owner){
  @Override public MethodSymbol implementation(  TypeSymbol origin,  Types types,  boolean checkResult){
    if (origin == site.tsym)     return this;
 else     return super.implementation(origin,types,checkResult);
  }
}
;
return result;
}
if (m1SignatureMoreSpecific) return m1;
if (m2SignatureMoreSpecific) return m2;
return ambiguityError(m1,m2);
case AMBIGUOUS:
AmbiguityError e=(AmbiguityError)m2;
Symbol err1=mostSpecific(argtypes,m1,e.sym,env,site,allowBoxing,useVarargs);
Symbol err2=mostSpecific(argtypes,m1,e.sym2,env,site,allowBoxing,useVarargs);
if (err1 == err2) return err1;
if (err1 == e.sym && err2 == e.sym2) return m2;
if (err1 instanceof AmbiguityError && err2 instanceof AmbiguityError && ((AmbiguityError)err1).sym == ((AmbiguityError)err2).sym) return ambiguityError(m1,m2);
 else return ambiguityError(err1,err2);
default :
throw new AssertionError();
}
}","Symbol mostSpecific(List<Type> argtypes,Symbol m1,Symbol m2,Env<AttrContext> env,final Type site,boolean allowBoxing,boolean useVarargs){
switch (m2.kind) {
case MTH:
    if (m1 == m2)     return m1;
  boolean m1SignatureMoreSpecific=signatureMoreSpecific(argtypes,env,site,m1,m2,allowBoxing,useVarargs);
boolean m2SignatureMoreSpecific=signatureMoreSpecific(argtypes,env,site,m2,m1,allowBoxing,useVarargs);
if (m1SignatureMoreSpecific && m2SignatureMoreSpecific) {
Type mt1=types.memberType(site,m1);
Type mt2=types.memberType(site,m2);
if (!types.overrideEquivalent(mt1,mt2)) return ambiguityError(m1,m2);
if ((m1.flags() & BRIDGE) != (m2.flags() & BRIDGE)) return ((m1.flags() & BRIDGE) != 0) ? m2 : m1;
TypeSymbol m1Owner=(TypeSymbol)m1.owner;
TypeSymbol m2Owner=(TypeSymbol)m2.owner;
if (types.asSuper(m1Owner.type,m2Owner) != null && ((m1.owner.flags_field & INTERFACE) == 0 || (m2.owner.flags_field & INTERFACE) != 0) && m1.overrides(m2,m1Owner,types,false)) return m1;
if (types.asSuper(m2Owner.type,m1Owner) != null && ((m2.owner.flags_field & INTERFACE) == 0 || (m1.owner.flags_field & INTERFACE) != 0) && m2.overrides(m1,m2Owner,types,false)) return m2;
boolean m1Abstract=(m1.flags() & ABSTRACT) != 0;
boolean m2Abstract=(m2.flags() & ABSTRACT) != 0;
if (m1Abstract && !m2Abstract) return m2;
if (m2Abstract && !m1Abstract) return m1;
return ambiguityError(m1,m2);
}
if (m1SignatureMoreSpecific) return m1;
if (m2SignatureMoreSpecific) return m2;
return ambiguityError(m1,m2);
case AMBIGUOUS:
AmbiguityError e=(AmbiguityError)m2;
for (Symbol s : e.ambiguousSyms) {
if (mostSpecific(argtypes,m1,s,env,site,allowBoxing,useVarargs) != m1) {
return e.addAmbiguousSymbol(m1);
}
}
return m1;
default :
throw new AssertionError();
}
}"
77623,"AmbiguityError(Symbol sym1,Symbol sym2){
  super(AMBIGUOUS,sym1,""String_Node_Str"");
  this.sym2=sym2;
}","AmbiguityError(Symbol sym1,Symbol sym2){
  super(AMBIGUOUS,""String_Node_Str"");
  ambiguousSyms=flatten(sym2).appendList(flatten(sym1));
}"
77624,"@Override JCDiagnostic getDiagnostic(JCDiagnostic.DiagnosticType dkind,DiagnosticPosition pos,Symbol location,Type site,Name name,List<Type> argtypes,List<Type> typeargtypes){
  AmbiguityError pair=this;
  while (true) {
    if (pair.sym.kind == AMBIGUOUS)     pair=(AmbiguityError)pair.sym;
 else     if (pair.sym2.kind == AMBIGUOUS)     pair=(AmbiguityError)pair.sym2;
 else     break;
  }
  Name sname=pair.sym.name;
  if (sname == names.init)   sname=pair.sym.owner.name;
  return diags.create(dkind,log.currentSource(),pos,""String_Node_Str"",sname,kindName(pair.sym),pair.sym,pair.sym.location(site,types),kindName(pair.sym2),pair.sym2,pair.sym2.location(site,types));
}","@Override JCDiagnostic getDiagnostic(JCDiagnostic.DiagnosticType dkind,DiagnosticPosition pos,Symbol location,Type site,Name name,List<Type> argtypes,List<Type> typeargtypes){
  List<Symbol> diagSyms=ambiguousSyms.reverse();
  Symbol s1=diagSyms.head;
  Symbol s2=diagSyms.tail.head;
  Name sname=s1.name;
  if (sname == names.init)   sname=s1.owner.name;
  return diags.create(dkind,log.currentSource(),pos,""String_Node_Str"",sname,kindName(s1),s1,s1.location(site,types),kindName(s2),s2,s2.location(site,types));
}"
77625,"@Override public boolean exists(){
  return false;
}","@Override public boolean exists(){
  return true;
}"
77626,"/** 
 * Construct the SplitIndexWriter. Uses path to this file and relative path from this file.
 * @param path       Path to the file which is getting generated.
 * @param filename   Name of the file which is getting genrated.
 * @param relpath    Relative path from this file to the current directory.
 * @param indexbuilder Unicode based Index from {@link IndexBuilder}
 */
public SplitIndexWriter(ConfigurationImpl configuration,DocPath path,IndexBuilder indexbuilder,int prev,int next) throws IOException {
  super(configuration,path,indexbuilder);
  this.prev=prev;
  this.next=next;
}","/** 
 * Construct the SplitIndexWriter. Uses path to this file and relative path from this file.
 * @param path       Path to the file which is getting generated.
 * @param indexbuilder Unicode based Index from {@link IndexBuilder}
 */
public SplitIndexWriter(ConfigurationImpl configuration,DocPath path,IndexBuilder indexbuilder,int prev,int next) throws IOException {
  super(configuration,path,indexbuilder);
  this.prev=prev;
  this.next=next;
}"
77627,"/** 
 * Constructor.
 * @param path The directory path to be created for this fileor null if none to be created.
 * @param filename File Name to which the PrintWriter willdo the Output.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 */
public HtmlWriter(Configuration configuration,DocPath path) throws IOException, UnsupportedEncodingException {
  writer=Util.genWriter(configuration,path);
  this.configuration=configuration;
  this.memberDetailsListPrinted=false;
  packageTableHeader=new String[]{configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str"")};
  useTableSummary=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""));
  modifierTypeHeader=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str""));
  overviewLabel=getResource(""String_Node_Str"");
  defaultPackageLabel=new RawHtml(DocletConstants.DEFAULT_PACKAGE_NAME);
  packageLabel=getResource(""String_Node_Str"");
  useLabel=getResource(""String_Node_Str"");
  prevLabel=getResource(""String_Node_Str"");
  nextLabel=getResource(""String_Node_Str"");
  prevclassLabel=getResource(""String_Node_Str"");
  nextclassLabel=getResource(""String_Node_Str"");
  summaryLabel=getResource(""String_Node_Str"");
  detailLabel=getResource(""String_Node_Str"");
  framesLabel=getResource(""String_Node_Str"");
  noframesLabel=getResource(""String_Node_Str"");
  treeLabel=getResource(""String_Node_Str"");
  classLabel=getResource(""String_Node_Str"");
  deprecatedLabel=getResource(""String_Node_Str"");
  deprecatedPhrase=getResource(""String_Node_Str"");
  allclassesLabel=getResource(""String_Node_Str"");
  indexLabel=getResource(""String_Node_Str"");
  helpLabel=getResource(""String_Node_Str"");
  seeLabel=getResource(""String_Node_Str"");
  descriptionLabel=getResource(""String_Node_Str"");
  prevpackageLabel=getResource(""String_Node_Str"");
  nextpackageLabel=getResource(""String_Node_Str"");
  packagesLabel=getResource(""String_Node_Str"");
  methodDetailsLabel=getResource(""String_Node_Str"");
  annotationTypeDetailsLabel=getResource(""String_Node_Str"");
  fieldDetailsLabel=getResource(""String_Node_Str"");
  constructorDetailsLabel=getResource(""String_Node_Str"");
  enumConstantsDetailsLabel=getResource(""String_Node_Str"");
  specifiedByLabel=getResource(""String_Node_Str"");
  overridesLabel=getResource(""String_Node_Str"");
  descfrmClassLabel=getResource(""String_Node_Str"");
  descfrmInterfaceLabel=getResource(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param path The directory path to be created for this fileor null if none to be created.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 */
public HtmlWriter(Configuration configuration,DocPath path) throws IOException, UnsupportedEncodingException {
  writer=Util.genWriter(configuration,path);
  this.configuration=configuration;
  this.memberDetailsListPrinted=false;
  packageTableHeader=new String[]{configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str"")};
  useTableSummary=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""));
  modifierTypeHeader=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str""));
  overviewLabel=getResource(""String_Node_Str"");
  defaultPackageLabel=new RawHtml(DocletConstants.DEFAULT_PACKAGE_NAME);
  packageLabel=getResource(""String_Node_Str"");
  useLabel=getResource(""String_Node_Str"");
  prevLabel=getResource(""String_Node_Str"");
  nextLabel=getResource(""String_Node_Str"");
  prevclassLabel=getResource(""String_Node_Str"");
  nextclassLabel=getResource(""String_Node_Str"");
  summaryLabel=getResource(""String_Node_Str"");
  detailLabel=getResource(""String_Node_Str"");
  framesLabel=getResource(""String_Node_Str"");
  noframesLabel=getResource(""String_Node_Str"");
  treeLabel=getResource(""String_Node_Str"");
  classLabel=getResource(""String_Node_Str"");
  deprecatedLabel=getResource(""String_Node_Str"");
  deprecatedPhrase=getResource(""String_Node_Str"");
  allclassesLabel=getResource(""String_Node_Str"");
  indexLabel=getResource(""String_Node_Str"");
  helpLabel=getResource(""String_Node_Str"");
  seeLabel=getResource(""String_Node_Str"");
  descriptionLabel=getResource(""String_Node_Str"");
  prevpackageLabel=getResource(""String_Node_Str"");
  nextpackageLabel=getResource(""String_Node_Str"");
  packagesLabel=getResource(""String_Node_Str"");
  methodDetailsLabel=getResource(""String_Node_Str"");
  annotationTypeDetailsLabel=getResource(""String_Node_Str"");
  fieldDetailsLabel=getResource(""String_Node_Str"");
  constructorDetailsLabel=getResource(""String_Node_Str"");
  enumConstantsDetailsLabel=getResource(""String_Node_Str"");
  specifiedByLabel=getResource(""String_Node_Str"");
  overridesLabel=getResource(""String_Node_Str"");
  descfrmClassLabel=getResource(""String_Node_Str"");
  descfrmInterfaceLabel=getResource(""String_Node_Str"");
}"
77628,"/** 
 * @inheritDoc 
 */
@Override public int hashCode(){
  return path.hashCode();
}","/** 
 * {@inheritDoc} 
 */
@Override public int hashCode(){
  return path.hashCode();
}"
77629,"/** 
 * @inheritDoc 
 */
@Override public boolean equals(Object other){
  return (other instanceof DocPath) && path.equals(((DocPath)other).path);
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean equals(Object other){
  return (other instanceof DocPath) && path.equals(((DocPath)other).path);
}"
77630,"/** 
 * Find the specified directory in the source path.
 * @param name Name of the directory to be searched for in the source path.
 * @return File Return the directory if found else return null.
 */
public File getDirectory(DocPath p){
  for (int i=0; i < sourcePath.length; i++) {
    File directoryNeeded=new File(sourcePath[i],p.getPath());
    if (directoryNeeded.isDirectory()) {
      return directoryNeeded;
    }
  }
  return null;
}","/** 
 * Find the specified directory in the source path.
 * @param p Name of the directory to be searched for in the source path.
 * @return File Return the directory if found else return null.
 */
public File getDirectory(DocPath p){
  for (int i=0; i < sourcePath.length; i++) {
    File directoryNeeded=new File(sourcePath[i],p.getPath());
    if (directoryNeeded.isDirectory()) {
      return directoryNeeded;
    }
  }
  return null;
}"
77631,"/** 
 * Create the directory path for the file to be generated, construct FileOutputStream and OutputStreamWriter depending upon docencoding.
 * @param path The directory path to be created for this file.
 * @param filename File Name to which the PrintWriter will do the Output.
 * @param docencoding Encoding to be used for this file.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 * @return Writer Writer for the file getting generated.
 * @see java.io.FileOutputStream
 * @see java.io.OutputStreamWriter
 */
public static Writer genWriter(Configuration configuration,DocPath path) throws IOException, UnsupportedEncodingException {
  File file=path.resolveAgainst(configuration.destDirName);
  createDirectory(configuration,file.getParentFile());
  FileOutputStream fos=new FileOutputStream(file);
  if (configuration.docencoding == null) {
    return new BufferedWriter(new OutputStreamWriter(fos));
  }
 else {
    return new BufferedWriter(new OutputStreamWriter(fos,configuration.docencoding));
  }
}","/** 
 * Create the directory path for the file to be generated, construct FileOutputStream and OutputStreamWriter depending upon docencoding.
 * @param path The directory path to be created for this file.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 * @return Writer Writer for the file getting generated.
 * @see java.io.FileOutputStream
 * @see java.io.OutputStreamWriter
 */
public static Writer genWriter(Configuration configuration,DocPath path) throws IOException, UnsupportedEncodingException {
  File file=path.resolveAgainst(configuration.destDirName);
  createDirectory(configuration,file.getParentFile());
  FileOutputStream fos=new FileOutputStream(file);
  if (configuration.docencoding == null) {
    return new BufferedWriter(new OutputStreamWriter(fos));
  }
 else {
    return new BufferedWriter(new OutputStreamWriter(fos,configuration.docencoding));
  }
}"
77632,"/** 
 * Given a path string create all the directories in the path. For example, if the path string is ""java/applet"", the method will create directory ""java"" and then ""java/applet"" if they don't exist. The file separator string ""/"" is platform dependent system property.
 * @param path Directory path string.
 */
public static void createDirectory(Configuration configuration,File dir){
  if (dir == null) {
    return;
  }
  if (dir.exists()) {
    return;
  }
 else {
    if (dir.mkdirs()) {
      return;
    }
 else {
      configuration.message.error(""String_Node_Str"",dir.getPath());
      throw new DocletAbortException();
    }
  }
}","/** 
 * Given a path string create all the directories in the path. For example, if the path string is ""java/applet"", the method will create directory ""java"" and then ""java/applet"" if they don't exist. The file separator string ""/"" is platform dependent system property.
 * @param dir Directory path string.
 */
public static void createDirectory(Configuration configuration,File dir){
  if (dir == null) {
    return;
  }
  if (dir.exists()) {
    return;
  }
 else {
    if (dir.mkdirs()) {
      return;
    }
 else {
      configuration.message.error(""String_Node_Str"",dir.getPath());
      throw new DocletAbortException();
    }
  }
}"
77633,"/** 
 * Return the kind of this tag. similar or synonymous tags.  For most tags, <code>kind()&nbsp;==&nbsp;name()</code>; the following table lists those cases where there is more than one tag of a given kind: <p> <table border=""1"" cellpadding=""4"" cellspacing=""0""> <tr><th><tt> kind()  </th>  <th><tt> name()      </th></tr> <tr><td><tt> @throws </td>  <td><tt> @throws     </td></tr> <tr><td><tt> @throws </td>  <td><tt> @exception  </td></tr> <tr><td><tt> @see    </td>  <td><tt> @see        </td></tr> <tr><td><tt> @see    </td>  <td><tt> @link       </td></tr> <tr><td><tt> @see    </td>  <td><tt> @linkplain  </td></tr> <tr><td><tt> @serial </td>  <td><tt> @serial     </td></tr> <tr><td><tt> @serial </td>  <td><tt> @serialData </td></tr> </table>
 */
String kind();","/** 
 * Return the kind of this tag. similar or synonymous tags.  For most tags, <code>kind()&nbsp;==&nbsp;name()</code>; the following table lists those cases where there is more than one tag of a given kind: <p> <table border=""1"" cellpadding=""4"" cellspacing=""0""> <tr><th><tt> kind()  </tt></th>  <th><tt> name()      </tt></th></tr> <tr><td><tt> @throws </tt></td>  <td><tt> @throws     </tt></td></tr> <tr><td><tt> @throws </tt></td>  <td><tt> @exception  </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @see        </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @link       </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @linkplain  </tt></td></tr> <tr><td><tt> @serial </tt></td>  <td><tt> @serial     </tt></td></tr> <tr><td><tt> @serial </tt></td>  <td><tt> @serialData </tt></td></tr> </table>
 */
String kind();"
77634,"/** 
 * Get the ClassFile object for a specified class.
 * @param className the name of the class to be returned.
 * @return the ClassFile for the given class
 * @throws Dependencies #ClassFileNotFoundException if the classfile cannot be found
 */
public ClassFile getClassFile(String className) throws ClassFileNotFoundException ;","/** 
 * Get the ClassFile object for a specified class.
 * @param className the name of the class to be returned.
 * @return the ClassFile for the given class
 * @throws Dependencies.ClassFileNotFoundException if the classfile cannot befound
 */
public ClassFile getClassFile(String className) throws ClassFileNotFoundException ;"
77635,"/** 
 * See   {@link Kind#LOCAL_UBYTE}. 
 */
R visitLocalAndValue(Instruction instr,int index,int value,P p);","/** 
 * See   {@link Kind#LOCAL_BYTE}. 
 */
R visitLocalAndValue(Instruction instr,int index,int value,P p);"
77636,"/** 
 * Add all the parameters for the executable member.
 * @param member the member to write parameters for.
 * @param includeAnnotations true if annotation information needs to be added.
 * @param tree the content tree to which the parameters information will be added.
 */
protected void addParameters(ExecutableMemberDoc member,boolean includeAnnotations,Content htmltree){
  htmltree.addContent(""String_Node_Str"");
  Parameter[] params=member.parameters();
  String indent=makeSpace(writer.displayLength);
  if (configuration().linksource) {
    indent+=makeSpace(member.name().length());
  }
  int paramstart;
  for (paramstart=0; paramstart < params.length; paramstart++) {
    Parameter param=params[paramstart];
    if (!param.name().startsWith(""String_Node_Str"")) {
      if (includeAnnotations) {
        boolean foundAnnotations=writer.addAnnotationInfo(indent.length(),member,param,htmltree);
        if (foundAnnotations) {
          htmltree.addContent(DocletConstants.NL);
          htmltree.addContent(indent);
        }
      }
      addParam(member,param,(paramstart == params.length - 1) && member.isVarArgs(),htmltree);
      break;
    }
  }
  for (int i=paramstart + 1; i < params.length; i++) {
    htmltree.addContent(""String_Node_Str"");
    htmltree.addContent(DocletConstants.NL);
    htmltree.addContent(indent);
    if (includeAnnotations) {
      boolean foundAnnotations=writer.addAnnotationInfo(indent.length(),member,params[i],htmltree);
      if (foundAnnotations) {
        htmltree.addContent(DocletConstants.NL);
        htmltree.addContent(indent);
      }
    }
    addParam(member,params[i],(i == params.length - 1) && member.isVarArgs(),htmltree);
  }
  htmltree.addContent(""String_Node_Str"");
}","/** 
 * Add all the parameters for the executable member.
 * @param member the member to write parameters for.
 * @param includeAnnotations true if annotation information needs to be added.
 * @param htmltree the content tree to which the parameters information will be added.
 */
protected void addParameters(ExecutableMemberDoc member,boolean includeAnnotations,Content htmltree){
  htmltree.addContent(""String_Node_Str"");
  Parameter[] params=member.parameters();
  String indent=makeSpace(writer.displayLength);
  if (configuration().linksource) {
    indent+=makeSpace(member.name().length());
  }
  int paramstart;
  for (paramstart=0; paramstart < params.length; paramstart++) {
    Parameter param=params[paramstart];
    if (!param.name().startsWith(""String_Node_Str"")) {
      if (includeAnnotations) {
        boolean foundAnnotations=writer.addAnnotationInfo(indent.length(),member,param,htmltree);
        if (foundAnnotations) {
          htmltree.addContent(DocletConstants.NL);
          htmltree.addContent(indent);
        }
      }
      addParam(member,param,(paramstart == params.length - 1) && member.isVarArgs(),htmltree);
      break;
    }
  }
  for (int i=paramstart + 1; i < params.length; i++) {
    htmltree.addContent(""String_Node_Str"");
    htmltree.addContent(DocletConstants.NL);
    htmltree.addContent(indent);
    if (includeAnnotations) {
      boolean foundAnnotations=writer.addAnnotationInfo(indent.length(),member,params[i],htmltree);
      if (foundAnnotations) {
        htmltree.addContent(DocletConstants.NL);
        htmltree.addContent(indent);
      }
    }
    addParam(member,params[i],(i == params.length - 1) && member.isVarArgs(),htmltree);
  }
  htmltree.addContent(""String_Node_Str"");
}"
77637,"/** 
 * Add the inherited summary link for the member.
 * @param classDoc the classDoc that we should link to
 * @param member the member being linked to
 * @param linksTree the content tree to which the link will be added
 */
protected void addInheritedSummaryLink(ClassDoc cd,ProgramElementDoc member,Content linksTree){
  linksTree.addContent(new RawHtml(writer.getDocLink(LinkInfoImpl.CONTEXT_MEMBER,cd,(MemberDoc)member,member.name(),false)));
}","/** 
 * Add the inherited summary link for the member.
 * @param cd the classDoc that we should link to
 * @param member the member being linked to
 * @param linksTree the content tree to which the link will be added
 */
protected void addInheritedSummaryLink(ClassDoc cd,ProgramElementDoc member,Content linksTree){
  linksTree.addContent(new RawHtml(writer.getDocLink(LinkInfoImpl.CONTEXT_MEMBER,cd,(MemberDoc)member,member.name(),false)));
}"
77638,"/** 
 * Add the summary link for the member.
 * @param context the id of the context where the link will be printed
 * @param classDoc the classDoc that we should link to
 * @param member the member being linked to
 * @param tdSummary the content tree to which the link will be added
 */
protected void addSummaryLink(int context,ClassDoc cd,ProgramElementDoc member,Content tdSummary){
  ExecutableMemberDoc emd=(ExecutableMemberDoc)member;
  String name=emd.name();
  Content strong=HtmlTree.STRONG(new RawHtml(writer.getDocLink(context,cd,(MemberDoc)emd,name,false)));
  Content code=HtmlTree.CODE(strong);
  writer.displayLength=name.length();
  addParameters(emd,false,code);
  tdSummary.addContent(code);
}","/** 
 * Add the summary link for the member.
 * @param context the id of the context where the link will be printed
 * @param cd the classDoc that we should link to
 * @param member the member being linked to
 * @param tdSummary the content tree to which the link will be added
 */
protected void addSummaryLink(int context,ClassDoc cd,ProgramElementDoc member,Content tdSummary){
  ExecutableMemberDoc emd=(ExecutableMemberDoc)member;
  String name=emd.name();
  Content strong=HtmlTree.STRONG(new RawHtml(writer.getDocLink(context,cd,(MemberDoc)emd,name,false)));
  Content code=HtmlTree.CODE(strong);
  writer.displayLength=name.length();
  addParameters(emd,false,code);
  tdSummary.addContent(code);
}"
77639,"/** 
 * Add the comment for the given member.
 * @param member the member being documented.
 * @param contentTree the content tree to which the comment will be added.
 */
protected void addComment(ProgramElementDoc member,Content htmltree){
  if (member.inlineTags().length > 0) {
    writer.addInlineComment(member,htmltree);
  }
}","/** 
 * Add the comment for the given member.
 * @param member the member being documented.
 * @param htmltree the content tree to which the comment will be added.
 */
protected void addComment(ProgramElementDoc member,Content htmltree){
  if (member.inlineTags().length > 0) {
    writer.addInlineComment(member,htmltree);
  }
}"
77640,"/** 
 * Constructor. Initialises resource for the  {@link com.sun.tools.doclets.MessageRetriever}.
 */
private ConfigurationImpl(){
  standardmessage=new MessageRetriever(this,""String_Node_Str"");
}","/** 
 * Constructor. Initializes resource for the  {@link com.sun.tools.doclets.internal.toolkit.util.MessageRetriever MessageRetriever}.
 */
private ConfigurationImpl(){
  standardmessage=new MessageRetriever(this,""String_Node_Str"");
}"
77641,"/** 
 * Add the anchor.
 * @param builder the deprecated list builder
 * @param type the type of list being documented
 * @param contentTree the content tree to which the anchor will be added
 */
private void addAnchor(DeprecatedAPIListBuilder builder,int type,Content htmlTree){
  if (builder.hasDocumentation(type)) {
    htmlTree.addContent(getMarkerAnchor(ANCHORS[type]));
  }
}","/** 
 * Add the anchor.
 * @param builder the deprecated list builder
 * @param type the type of list being documented
 * @param htmlTree the content tree to which the anchor will be added
 */
private void addAnchor(DeprecatedAPIListBuilder builder,int type,Content htmlTree){
  if (builder.hasDocumentation(type)) {
    htmlTree.addContent(getMarkerAnchor(ANCHORS[type]));
  }
}"
77642,"/** 
 * Returns a package name label.
 * @param parsedName the package name
 * @return the package name content
 */
public Content getPackageLabel(String packageName){
  return new StringContent(packageName);
}","/** 
 * Returns a package name label.
 * @param packageName the package name
 * @return the package name content
 */
public Content getPackageLabel(String packageName){
  return new StringContent(packageName);
}"
77643,"/** 
 * Add the member header.
 * @param fieldsType the class document to be listed
 * @param fieldTypeStr the string for the filed type to be documented
 * @param fieldDimensions the dimensions of the field string to be added
 * @param firldName name of the field to be added
 * @param contentTree the content tree to which the member header will be added
 */
public void addMemberHeader(ClassDoc fieldType,String fieldTypeStr,String fieldDimensions,String fieldName,Content contentTree){
  Content nameContent=new RawHtml(fieldName);
  Content heading=HtmlTree.HEADING(HtmlConstants.MEMBER_HEADING,nameContent);
  contentTree.addContent(heading);
  Content pre=new HtmlTree(HtmlTag.PRE);
  if (fieldType == null) {
    pre.addContent(fieldTypeStr);
  }
 else {
    Content fieldContent=new RawHtml(writer.getLink(new LinkInfoImpl(LinkInfoImpl.CONTEXT_SERIAL_MEMBER,fieldType)));
    pre.addContent(fieldContent);
  }
  pre.addContent(fieldDimensions + ""String_Node_Str"");
  pre.addContent(fieldName);
  contentTree.addContent(pre);
}","/** 
 * Add the member header.
 * @param fieldType the class document to be listed
 * @param fieldTypeStr the string for the field type to be documented
 * @param fieldDimensions the dimensions of the field string to be added
 * @param fieldName name of the field to be added
 * @param contentTree the content tree to which the member header will be added
 */
public void addMemberHeader(ClassDoc fieldType,String fieldTypeStr,String fieldDimensions,String fieldName,Content contentTree){
  Content nameContent=new RawHtml(fieldName);
  Content heading=HtmlTree.HEADING(HtmlConstants.MEMBER_HEADING,nameContent);
  contentTree.addContent(heading);
  Content pre=new HtmlTree(HtmlTag.PRE);
  if (fieldType == null) {
    pre.addContent(fieldTypeStr);
  }
 else {
    Content fieldContent=new RawHtml(writer.getLink(new LinkInfoImpl(LinkInfoImpl.CONTEXT_SERIAL_MEMBER,fieldType)));
    pre.addContent(fieldContent);
  }
  pre.addContent(fieldDimensions + ""String_Node_Str"");
  pre.addContent(fieldName);
  contentTree.addContent(pre);
}"
77644,"/** 
 * Return path to the given file name in the given package. So if the name passed is ""Object.html"" and the name of the package is ""java.lang"", and if the relative path is ""../.."" then returned string will be ""../../java/lang/Object.html""
 * @param linkInfo the information about the link.
 * @param fileName the file name, to which path string is.
 */
private String pathString(LinkInfoImpl linkInfo){
  if (linkInfo.context == LinkInfoImpl.PACKAGE_FRAME) {
    return linkInfo.classDoc.name() + ""String_Node_Str"";
  }
  StringBuffer buf=new StringBuffer(m_writer.relativePath);
  buf.append(DirectoryManager.getPathToPackage(linkInfo.classDoc.containingPackage(),linkInfo.classDoc.name() + ""String_Node_Str""));
  return buf.toString();
}","/** 
 * Return path to the given file name in the given package. So if the name passed is ""Object.html"" and the name of the package is ""java.lang"", and if the relative path is ""../.."" then returned string will be ""../../java/lang/Object.html""
 * @param linkInfo the information about the link.
 */
private String pathString(LinkInfoImpl linkInfo){
  if (linkInfo.context == LinkInfoImpl.PACKAGE_FRAME) {
    return linkInfo.classDoc.name() + ""String_Node_Str"";
  }
  StringBuffer buf=new StringBuffer(m_writer.relativePath);
  buf.append(DirectoryManager.getPathToPackage(linkInfo.classDoc.containingPackage(),linkInfo.classDoc.name() + ""String_Node_Str""));
  return buf.toString();
}"
77645,"/** 
 * Adds the lower navigation bar and the bottom text (from the -bottom option) at the bottom of page.
 * @param the documentation tree to which the navigation bar footer will be added
 */
protected void addNavigationBarFooter(Content body){
  addNavLinks(false,body);
  addBottom(body);
}","/** 
 * Adds the lower navigation bar and the bottom text (from the -bottom option) at the bottom of page.
 * @param body the documentation tree to which the navigation bar footer will be added
 */
protected void addNavigationBarFooter(Content body){
  addNavLinks(false,body);
  addBottom(body);
}"
77646,"/** 
 * Constructor.
 * @param path The directory path to be created for this fileor null if none to be created.
 * @param filename File Name to which the PrintWriter willdo the Output.
 * @param docencoding Encoding to be used for this file.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnSupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 */
public HtmlWriter(Configuration configuration,String path,String filename,String docencoding) throws IOException, UnsupportedEncodingException {
  super(Util.genWriter(configuration,path,filename,docencoding));
  this.configuration=configuration;
  htmlFilename=filename;
  this.memberDetailsListPrinted=false;
  packageTableHeader=new String[]{configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str"")};
  useTableSummary=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""));
  modifierTypeHeader=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str""));
  overviewLabel=getResource(""String_Node_Str"");
  defaultPackageLabel=new RawHtml(DocletConstants.DEFAULT_PACKAGE_NAME);
  packageLabel=getResource(""String_Node_Str"");
  useLabel=getResource(""String_Node_Str"");
  prevLabel=getResource(""String_Node_Str"");
  nextLabel=getResource(""String_Node_Str"");
  prevclassLabel=getResource(""String_Node_Str"");
  nextclassLabel=getResource(""String_Node_Str"");
  summaryLabel=getResource(""String_Node_Str"");
  detailLabel=getResource(""String_Node_Str"");
  framesLabel=getResource(""String_Node_Str"");
  noframesLabel=getResource(""String_Node_Str"");
  treeLabel=getResource(""String_Node_Str"");
  classLabel=getResource(""String_Node_Str"");
  deprecatedLabel=getResource(""String_Node_Str"");
  deprecatedPhrase=getResource(""String_Node_Str"");
  allclassesLabel=getResource(""String_Node_Str"");
  indexLabel=getResource(""String_Node_Str"");
  helpLabel=getResource(""String_Node_Str"");
  seeLabel=getResource(""String_Node_Str"");
  descriptionLabel=getResource(""String_Node_Str"");
  prevpackageLabel=getResource(""String_Node_Str"");
  nextpackageLabel=getResource(""String_Node_Str"");
  packagesLabel=getResource(""String_Node_Str"");
  methodDetailsLabel=getResource(""String_Node_Str"");
  annotationTypeDetailsLabel=getResource(""String_Node_Str"");
  fieldDetailsLabel=getResource(""String_Node_Str"");
  constructorDetailsLabel=getResource(""String_Node_Str"");
  enumConstantsDetailsLabel=getResource(""String_Node_Str"");
  specifiedByLabel=getResource(""String_Node_Str"");
  overridesLabel=getResource(""String_Node_Str"");
  descfrmClassLabel=getResource(""String_Node_Str"");
  descfrmInterfaceLabel=getResource(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param path The directory path to be created for this fileor null if none to be created.
 * @param filename File Name to which the PrintWriter willdo the Output.
 * @param docencoding Encoding to be used for this file.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 */
public HtmlWriter(Configuration configuration,String path,String filename,String docencoding) throws IOException, UnsupportedEncodingException {
  super(Util.genWriter(configuration,path,filename,docencoding));
  this.configuration=configuration;
  htmlFilename=filename;
  this.memberDetailsListPrinted=false;
  packageTableHeader=new String[]{configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str"")};
  useTableSummary=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""));
  modifierTypeHeader=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str""));
  overviewLabel=getResource(""String_Node_Str"");
  defaultPackageLabel=new RawHtml(DocletConstants.DEFAULT_PACKAGE_NAME);
  packageLabel=getResource(""String_Node_Str"");
  useLabel=getResource(""String_Node_Str"");
  prevLabel=getResource(""String_Node_Str"");
  nextLabel=getResource(""String_Node_Str"");
  prevclassLabel=getResource(""String_Node_Str"");
  nextclassLabel=getResource(""String_Node_Str"");
  summaryLabel=getResource(""String_Node_Str"");
  detailLabel=getResource(""String_Node_Str"");
  framesLabel=getResource(""String_Node_Str"");
  noframesLabel=getResource(""String_Node_Str"");
  treeLabel=getResource(""String_Node_Str"");
  classLabel=getResource(""String_Node_Str"");
  deprecatedLabel=getResource(""String_Node_Str"");
  deprecatedPhrase=getResource(""String_Node_Str"");
  allclassesLabel=getResource(""String_Node_Str"");
  indexLabel=getResource(""String_Node_Str"");
  helpLabel=getResource(""String_Node_Str"");
  seeLabel=getResource(""String_Node_Str"");
  descriptionLabel=getResource(""String_Node_Str"");
  prevpackageLabel=getResource(""String_Node_Str"");
  nextpackageLabel=getResource(""String_Node_Str"");
  packagesLabel=getResource(""String_Node_Str"");
  methodDetailsLabel=getResource(""String_Node_Str"");
  annotationTypeDetailsLabel=getResource(""String_Node_Str"");
  fieldDetailsLabel=getResource(""String_Node_Str"");
  constructorDetailsLabel=getResource(""String_Node_Str"");
  enumConstantsDetailsLabel=getResource(""String_Node_Str"");
  specifiedByLabel=getResource(""String_Node_Str"");
  overridesLabel=getResource(""String_Node_Str"");
  descfrmClassLabel=getResource(""String_Node_Str"");
  descfrmInterfaceLabel=getResource(""String_Node_Str"");
}"
77647,"/** 
 * Get the enum constants documentation tree header.
 * @param enumConstant the enum constant being documented
 * @param enumConstantDetailsTree the content tree representing enum constant details
 * @return content tree for the enum constant documentation header
 */
public Content getEnumConstantsTreeHeader(FieldDoc enumConstant,Content enumConstantsDetailsTree);","/** 
 * Get the enum constants documentation tree header.
 * @param enumConstant the enum constant being documented
 * @param enumConstantsDetailsTree the content tree representing enum constant details
 * @return content tree for the enum constant documentation header
 */
public Content getEnumConstantsTreeHeader(FieldDoc enumConstant,Content enumConstantsDetailsTree);"
77648,"/** 
 * Return the list of visible constant fields for the given classdoc.
 * @param cd the classdoc to examine.
 * @return the list of visible constant fields for the given classdoc.
 */
protected List<FieldDoc> members(){
  List<ProgramElementDoc> l=visibleMemberMapFields.getLeafClassMembers(configuration);
  l.addAll(visibleMemberMapEnumConst.getLeafClassMembers(configuration));
  Iterator<ProgramElementDoc> iter;
  if (l != null) {
    iter=l.iterator();
  }
 else {
    return null;
  }
  List<FieldDoc> inclList=new LinkedList<FieldDoc>();
  FieldDoc member;
  while (iter.hasNext()) {
    member=(FieldDoc)iter.next();
    if (member.constantValue() != null) {
      inclList.add(member);
    }
  }
  return inclList;
}","/** 
 * Return the list of visible constant fields for the given classdoc.
 * @return the list of visible constant fields for the given classdoc.
 */
protected List<FieldDoc> members(){
  List<ProgramElementDoc> l=visibleMemberMapFields.getLeafClassMembers(configuration);
  l.addAll(visibleMemberMapEnumConst.getLeafClassMembers(configuration));
  Iterator<ProgramElementDoc> iter;
  if (l != null) {
    iter=l.iterator();
  }
 else {
    return null;
  }
  List<FieldDoc> inclList=new LinkedList<FieldDoc>();
  FieldDoc member;
  while (iter.hasNext()) {
    member=(FieldDoc)iter.next();
    if (member.constantValue() != null) {
      inclList.add(member);
    }
  }
  return inclList;
}"
77649,"/** 
 * Returns a list of methods that will be documented for the given class. This information can be used for doclet specific documentation generation.
 * @param classDoc the {@link ClassDoc} we want to check.
 * @param type the type of members to return.
 * @return a list of methods that will be documented.
 * @see VisibleMemberMap
 */
public List<ProgramElementDoc> members(int type){
  return visibleMemberMaps[type].getLeafClassMembers(configuration);
}","/** 
 * Returns a list of methods that will be documented for the given class. This information can be used for doclet specific documentation generation.
 * @param type the type of members to return.
 * @return a list of methods that will be documented.
 * @see VisibleMemberMap
 */
public List<ProgramElementDoc> members(int type){
  return visibleMemberMaps[type].getLeafClassMembers(configuration);
}"
77650,"/** 
 * Given an array of <code>Tag</code>s representing this custom tag, return its string representation.  Print a warning for param tags that do not map to parameters.  Print a warning for param tags that are duplicated.
 * @param paramTags the array of <code>ParamTag</code>s to convert.
 * @param writer the TagletWriter that will write this tag.
 * @param alreadyDocumented the set of exceptions that have alreadybeen documented.
 * @param rankMap a {@link java.util.Map} which holds orderinginformation about the parameters.
 * @param nameMap a {@link java.util.Map} which holds a mappingof a rank of a parameter to its name.  This is used to ensure that the right name is used when parameter documentation is inherited.
 * @return the TagletOutput representation of this <code>Tag</code>.
 */
private TagletOutput processParamTags(boolean isNonTypeParams,ParamTag[] paramTags,Map<String,String> rankMap,TagletWriter writer,Set<String> alreadyDocumented){
  TagletOutput result=writer.getOutputInstance();
  if (paramTags.length > 0) {
    for (int i=0; i < paramTags.length; ++i) {
      ParamTag pt=paramTags[i];
      String paramName=isNonTypeParams ? pt.parameterName() : ""String_Node_Str"" + pt.parameterName() + ""String_Node_Str"";
      if (!rankMap.containsKey(pt.parameterName())) {
        writer.getMsgRetriever().warning(pt.position(),isNonTypeParams ? ""String_Node_Str"" : ""String_Node_Str"",paramName);
      }
      String rank=rankMap.get(pt.parameterName());
      if (rank != null && alreadyDocumented.contains(rank)) {
        writer.getMsgRetriever().warning(pt.position(),isNonTypeParams ? ""String_Node_Str"" : ""String_Node_Str"",paramName);
      }
      result.appendOutput(processParamTag(isNonTypeParams,writer,pt,pt.parameterName(),alreadyDocumented.size() == 0));
      alreadyDocumented.add(rank);
    }
  }
  return result;
}","/** 
 * Given an array of <code>Tag</code>s representing this custom tag, return its string representation.  Print a warning for param tags that do not map to parameters.  Print a warning for param tags that are duplicated.
 * @param paramTags the array of <code>ParamTag</code>s to convert.
 * @param writer the TagletWriter that will write this tag.
 * @param alreadyDocumented the set of exceptions that have alreadybeen documented.
 * @param rankMap a {@link java.util.Map} which holds orderinginformation about the parameters.
 * @param rankMap a {@link java.util.Map} which holds a mappingof a rank of a parameter to its name.  This is used to ensure that the right name is used when parameter documentation is inherited.
 * @return the TagletOutput representation of this <code>Tag</code>.
 */
private TagletOutput processParamTags(boolean isNonTypeParams,ParamTag[] paramTags,Map<String,String> rankMap,TagletWriter writer,Set<String> alreadyDocumented){
  TagletOutput result=writer.getOutputInstance();
  if (paramTags.length > 0) {
    for (int i=0; i < paramTags.length; ++i) {
      ParamTag pt=paramTags[i];
      String paramName=isNonTypeParams ? pt.parameterName() : ""String_Node_Str"" + pt.parameterName() + ""String_Node_Str"";
      if (!rankMap.containsKey(pt.parameterName())) {
        writer.getMsgRetriever().warning(pt.position(),isNonTypeParams ? ""String_Node_Str"" : ""String_Node_Str"",paramName);
      }
      String rank=rankMap.get(pt.parameterName());
      if (rank != null && alreadyDocumented.contains(rank)) {
        writer.getMsgRetriever().warning(pt.position(),isNonTypeParams ? ""String_Node_Str"" : ""String_Node_Str"",paramName);
      }
      result.appendOutput(processParamTag(isNonTypeParams,writer,pt,pt.parameterName(),alreadyDocumented.size() == 0));
      alreadyDocumented.add(rank);
    }
  }
  return result;
}"
77651,"/** 
 * Given an array of <code>ParamTag</code>s,return its string representation. Try to inherit the param tags that are missing.
 * @param doc               the doc that holds the param tags.
 * @param writer            the TagletWriter that will write this tag.
 * @param formalParameters  The array of parmeters (from type or executablemember) to check.
 * @return the TagletOutput representation of these <code>ParamTag</code>s.
 */
private TagletOutput getTagletOutput(boolean isNonTypeParams,Doc holder,TagletWriter writer,Object[] formalParameters,ParamTag[] paramTags){
  TagletOutput result=writer.getOutputInstance();
  Set<String> alreadyDocumented=new HashSet<String>();
  if (paramTags.length > 0) {
    result.appendOutput(processParamTags(isNonTypeParams,paramTags,getRankMap(formalParameters),writer,alreadyDocumented));
  }
  if (alreadyDocumented.size() != formalParameters.length) {
    result.appendOutput(getInheritedTagletOutput(isNonTypeParams,holder,writer,formalParameters,alreadyDocumented));
  }
  return result;
}","/** 
 * Given an array of <code>ParamTag</code>s,return its string representation. Try to inherit the param tags that are missing.
 * @param holder            the doc that holds the param tags.
 * @param writer            the TagletWriter that will write this tag.
 * @param formalParameters  The array of parmeters (from type or executablemember) to check.
 * @return the TagletOutput representation of these <code>ParamTag</code>s.
 */
private TagletOutput getTagletOutput(boolean isNonTypeParams,Doc holder,TagletWriter writer,Object[] formalParameters,ParamTag[] paramTags){
  TagletOutput result=writer.getOutputInstance();
  Set<String> alreadyDocumented=new HashSet<String>();
  if (paramTags.length > 0) {
    result.appendOutput(processParamTags(isNonTypeParams,paramTags,getRankMap(formalParameters),writer,alreadyDocumented));
  }
  if (alreadyDocumented.size() != formalParameters.length) {
    result.appendOutput(getInheritedTagletOutput(isNonTypeParams,holder,writer,formalParameters,alreadyDocumented));
  }
  return result;
}"
77652,"/** 
 * Given the name of the field, return the corresponding FieldDoc.
 * @param config the current configuration of the doclet.
 * @param tag the value tag.
 * @param name the name of the field to search for.  The name should be in<qualified class name>#<field name> format. If the class name is omitted, it is assumed that the field is in the current class.
 * @return the corresponding FieldDoc. If the name is null or empty string,return field that the value tag was used in.
 * @throws DocletAbortException if the value tag does not specify a name toa value field and it is not used within the comments of a valid field.
 */
private FieldDoc getFieldDoc(Configuration config,Tag tag,String name){
  if (name == null || name.length() == 0) {
    if (tag.holder() instanceof FieldDoc) {
      return (FieldDoc)tag.holder();
    }
 else {
      throw new DocletAbortException();
    }
  }
  StringTokenizer st=new StringTokenizer(name,""String_Node_Str"");
  String memberName=null;
  ClassDoc cd=null;
  if (st.countTokens() == 1) {
    Doc holder=tag.holder();
    if (holder instanceof MemberDoc) {
      cd=((MemberDoc)holder).containingClass();
    }
 else     if (holder instanceof ClassDoc) {
      cd=(ClassDoc)holder;
    }
    memberName=st.nextToken();
  }
 else {
    cd=config.root.classNamed(st.nextToken());
    memberName=st.nextToken();
  }
  if (cd == null) {
    return null;
  }
  FieldDoc[] fields=cd.fields();
  for (int i=0; i < fields.length; i++) {
    if (fields[i].name().equals(memberName)) {
      return fields[i];
    }
  }
  return null;
}","/** 
 * Given the name of the field, return the corresponding FieldDoc.
 * @param config the current configuration of the doclet.
 * @param tag the value tag.
 * @param name the name of the field to search for.  The name should be in{@code <qualified class name>#<field name>} format. If the class name is omitted,it is assumed that the field is in the current class.
 * @return the corresponding FieldDoc. If the name is null or empty string,return field that the value tag was used in.
 * @throws DocletAbortException if the value tag does not specify a name toa value field and it is not used within the comments of a valid field.
 */
private FieldDoc getFieldDoc(Configuration config,Tag tag,String name){
  if (name == null || name.length() == 0) {
    if (tag.holder() instanceof FieldDoc) {
      return (FieldDoc)tag.holder();
    }
 else {
      throw new DocletAbortException();
    }
  }
  StringTokenizer st=new StringTokenizer(name,""String_Node_Str"");
  String memberName=null;
  ClassDoc cd=null;
  if (st.countTokens() == 1) {
    Doc holder=tag.holder();
    if (holder instanceof MemberDoc) {
      cd=((MemberDoc)holder).containingClass();
    }
 else     if (holder instanceof ClassDoc) {
      cd=(ClassDoc)holder;
    }
    memberName=st.nextToken();
  }
 else {
    cd=config.root.classNamed(st.nextToken());
    memberName=st.nextToken();
  }
  if (cd == null) {
    return null;
  }
  FieldDoc[] fields=cd.fields();
  for (int i=0; i < fields.length; i++) {
    if (fields[i].name().equals(memberName)) {
      return fields[i];
    }
  }
  return null;
}"
77653,"/** 
 * Return the list of deprecated Doc objects of a given type.
 * @param the constant representing the type of list being returned.
 */
public List<Doc> getList(int type){
  return deprecatedLists.get(type);
}","/** 
 * Return the list of deprecated Doc objects of a given type.
 * @param type the constant representing the type of list being returned.
 */
public List<Doc> getList(int type){
  return deprecatedLists.get(type);
}"
77654,"/** 
 * Get the Extern Item object associated with this package name.
 * @param pkgname Package name.
 */
private Item findPackageItem(String pkgName){
  if (packageToItemMap == null) {
    return null;
  }
  return packageToItemMap.get(pkgName);
}","/** 
 * Get the Extern Item object associated with this package name.
 * @param pkgName Package name.
 */
private Item findPackageItem(String pkgName){
  if (packageToItemMap == null) {
    return null;
  }
  return packageToItemMap.get(pkgName);
}"
77655,"/** 
 * Constructor to build a Extern Item object and map it with the package name. If the same package name is found in the map, then the first mapped Item object or offline location will be retained.
 * @param packagename Package name found in the ""package-list"" file.
 * @param path        URL or Directory path from where the ""package-list""file is picked.
 * @param relative    True if path is URL, false if directory path.
 */
Item(String packageName,String path,boolean relative){
  this.packageName=packageName;
  this.path=path;
  this.relative=relative;
  if (packageToItemMap == null) {
    packageToItemMap=new HashMap<String,Item>();
  }
  if (!packageToItemMap.containsKey(packageName)) {
    packageToItemMap.put(packageName,this);
  }
}","/** 
 * Constructor to build a Extern Item object and map it with the package name. If the same package name is found in the map, then the first mapped Item object or offline location will be retained.
 * @param packageName Package name found in the ""package-list"" file.
 * @param path        URL or Directory path from where the ""package-list""file is picked.
 * @param relative    True if path is URL, false if directory path.
 */
Item(String packageName,String path,boolean relative){
  this.packageName=packageName;
  this.path=path;
  this.relative=relative;
  if (packageToItemMap == null) {
    packageToItemMap=new HashMap<String,Item>();
  }
  if (!packageToItemMap.containsKey(packageName)) {
    packageToItemMap.put(packageName,this);
  }
}"
77656,"/** 
 * Return the package private members inherited by the class.  Only return if parent is package private and not documented.
 * @param configuation the current configuration of the doclet.
 * @return the package private members inherited by the class.
 */
private List<ProgramElementDoc> getInheritedPackagePrivateMethods(Configuration configuration){
  List<ProgramElementDoc> results=new ArrayList<ProgramElementDoc>();
  for (Iterator<ClassDoc> iter=visibleClasses.iterator(); iter.hasNext(); ) {
    ClassDoc currentClass=iter.next();
    if (currentClass != classdoc && currentClass.isPackagePrivate() && !Util.isLinkable(currentClass,configuration)) {
      results.addAll(getMembersFor(currentClass));
    }
  }
  return results;
}","/** 
 * Return the package private members inherited by the class.  Only return if parent is package private and not documented.
 * @param configuration the current configuration of the doclet.
 * @return the package private members inherited by the class.
 */
private List<ProgramElementDoc> getInheritedPackagePrivateMethods(Configuration configuration){
  List<ProgramElementDoc> results=new ArrayList<ProgramElementDoc>();
  for (Iterator<ClassDoc> iter=visibleClasses.iterator(); iter.hasNext(); ) {
    ClassDoc currentClass=iter.next();
    if (currentClass != classdoc && currentClass.isPackagePrivate() && !Util.isLinkable(currentClass,configuration)) {
      results.addAll(getMembersFor(currentClass));
    }
  }
  return results;
}"
77657,"/** 
 * Return the visible members of the class being mapped.  Also append at the end of the list members that are inherited by inaccessible parents. We document these members in the child because the parent is not documented.
 * @param configuation the current configuration of the doclet.
 */
public List<ProgramElementDoc> getLeafClassMembers(Configuration configuration){
  List<ProgramElementDoc> result=getMembersFor(classdoc);
  result.addAll(getInheritedPackagePrivateMethods(configuration));
  return result;
}","/** 
 * Return the visible members of the class being mapped.  Also append at the end of the list members that are inherited by inaccessible parents. We document these members in the child because the parent is not documented.
 * @param configuration the current configuration of the doclet.
 */
public List<ProgramElementDoc> getLeafClassMembers(Configuration configuration){
  List<ProgramElementDoc> result=getMembersFor(classdoc);
  result.addAll(getInheritedPackagePrivateMethods(configuration));
  return result;
}"
77658,"/** 
 * Configure the set of diagnostic parts that should be displayed by the formatter.
 * @param options options to set
 */
public void setVisible(Set<DiagnosticPart> visibleParts);","/** 
 * Configure the set of diagnostic parts that should be displayed by the formatter.
 * @param visibleParts the parts to be set
 */
public void setVisible(Set<DiagnosticPart> visibleParts);"
77659,"/** 
 * Constructor used by service provider mechanism.  The recommended way to obtain an instance of this class is by using   {@link #create} or theservice provider mechanism.
 * @see javax.tools.JavaCompilerTool
 * @see javax.tools.ToolProvider
 * @see #create
 */
@Deprecated public JavacTool(){
}","/** 
 * Constructor used by service provider mechanism.  The recommended way to obtain an instance of this class is by using   {@link #create} or theservice provider mechanism.
 * @see javax.tools.JavaCompiler
 * @see javax.tools.ToolProvider
 * @see #create
 */
@Deprecated public JavacTool(){
}"
77660,"public Iterator<TypeSymbol> iterator(){
  return new Iterator<TypeSymbol>(){
    List<TypeSymbol> seen=List.nil();
    TypeSymbol currentSym=getSymbol(intype);
    public boolean hasNext(){
      return currentSym != null;
    }
    public TypeSymbol next(){
      TypeSymbol prevSym=currentSym;
      currentSym=getSymbol(types.supertype(currentSym.type));
      return prevSym;
    }
    public void remove(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    TypeSymbol getSymbol(    Type intype){
      if (intype.tag != CLASS && intype.tag != TYPEVAR) {
        return null;
      }
      while (intype.tag == TYPEVAR)       intype=intype.getUpperBound();
      if (seen.contains(intype.tsym)) {
        return null;
      }
      seen=seen.prepend(intype.tsym);
      return intype.tsym;
    }
  }
;
}","public Iterator<TypeSymbol> iterator(){
  return new Iterator<TypeSymbol>(){
    List<TypeSymbol> seen=List.nil();
    TypeSymbol currentSym=symbolFor(intype);
    TypeSymbol prevSym=null;
    public boolean hasNext(){
      if (currentSym == syms.noSymbol) {
        currentSym=symbolFor(types.supertype(prevSym.type));
      }
      return currentSym != null;
    }
    public TypeSymbol next(){
      prevSym=currentSym;
      currentSym=syms.noSymbol;
      Assert.check(prevSym != null || prevSym != syms.noSymbol);
      return prevSym;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
    TypeSymbol symbolFor(    Type t){
      if (t.tag != CLASS && t.tag != TYPEVAR) {
        return null;
      }
      while (t.tag == TYPEVAR)       t=t.getUpperBound();
      if (seen.contains(t.tsym)) {
        return null;
      }
      seen=seen.prepend(t.tsym);
      return t.tsym;
    }
  }
;
}"
77661,"public boolean hasNext(){
  return currentSym != null;
}","public boolean hasNext(){
  if (currentSym == syms.noSymbol) {
    currentSym=symbolFor(types.supertype(prevSym.type));
  }
  return currentSym != null;
}"
77662,"public TypeSymbol next(){
  TypeSymbol prevSym=currentSym;
  currentSym=getSymbol(types.supertype(currentSym.type));
  return prevSym;
}","public TypeSymbol next(){
  prevSym=currentSym;
  currentSym=syms.noSymbol;
  Assert.check(prevSym != null || prevSym != syms.noSymbol);
  return prevSym;
}"
77663,"public void remove(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void remove(){
  throw new UnsupportedOperationException();
}"
77664,"/** 
 * Return an Iterable object to scan the superclasses of a given type. It's crucial that the scan is done lazily, as we don't want to accidentally access more supertypes than strictly needed (as this could trigger completion errors if some of the not-needed supertypes are missing/ill-formed).
 */
Iterable<TypeSymbol> superclasses(final Type intype){
  return new Iterable<TypeSymbol>(){
    public Iterator<TypeSymbol> iterator(){
      return new Iterator<TypeSymbol>(){
        List<TypeSymbol> seen=List.nil();
        TypeSymbol currentSym=getSymbol(intype);
        public boolean hasNext(){
          return currentSym != null;
        }
        public TypeSymbol next(){
          TypeSymbol prevSym=currentSym;
          currentSym=getSymbol(types.supertype(currentSym.type));
          return prevSym;
        }
        public void remove(){
          throw new UnsupportedOperationException(""String_Node_Str"");
        }
        TypeSymbol getSymbol(        Type intype){
          if (intype.tag != CLASS && intype.tag != TYPEVAR) {
            return null;
          }
          while (intype.tag == TYPEVAR)           intype=intype.getUpperBound();
          if (seen.contains(intype.tsym)) {
            return null;
          }
          seen=seen.prepend(intype.tsym);
          return intype.tsym;
        }
      }
;
    }
  }
;
}","/** 
 * Return an Iterable object to scan the superclasses of a given type. It's crucial that the scan is done lazily, as we don't want to accidentally access more supertypes than strictly needed (as this could trigger completion errors if some of the not-needed supertypes are missing/ill-formed).
 */
Iterable<TypeSymbol> superclasses(final Type intype){
  return new Iterable<TypeSymbol>(){
    public Iterator<TypeSymbol> iterator(){
      return new Iterator<TypeSymbol>(){
        List<TypeSymbol> seen=List.nil();
        TypeSymbol currentSym=symbolFor(intype);
        TypeSymbol prevSym=null;
        public boolean hasNext(){
          if (currentSym == syms.noSymbol) {
            currentSym=symbolFor(types.supertype(prevSym.type));
          }
          return currentSym != null;
        }
        public TypeSymbol next(){
          prevSym=currentSym;
          currentSym=syms.noSymbol;
          Assert.check(prevSym != null || prevSym != syms.noSymbol);
          return prevSym;
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
        TypeSymbol symbolFor(        Type t){
          if (t.tag != CLASS && t.tag != TYPEVAR) {
            return null;
          }
          while (t.tag == TYPEVAR)           t=t.getUpperBound();
          if (seen.contains(t.tsym)) {
            return null;
          }
          seen=seen.prepend(t.tsym);
          return t.tsym;
        }
      }
;
    }
  }
;
}"
77665,"private Symbol findMethod(Env<AttrContext> env,Type site,Name name,List<Type> argtypes,List<Type> typeargtypes,Type intype,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){
  boolean abstractOk=true;
  List<Type> itypes=List.nil();
  for (  TypeSymbol s : superclasses(intype)) {
    bestSoFar=lookupMethod(env,site,name,argtypes,typeargtypes,s.members(),bestSoFar,allowBoxing,useVarargs,operator,true);
    abstractOk&=excludeAbstractsFilter.accepts(s);
    if (abstractOk) {
      for (      Type itype : types.interfaces(s.type)) {
        itypes=types.union(types.closure(itype),itypes);
      }
    }
    if (name == names.init)     break;
  }
  Symbol concrete=bestSoFar.kind < ERR && (bestSoFar.flags() & ABSTRACT) == 0 ? bestSoFar : methodNotFound;
  if (name != names.init) {
    for (    Type itype : itypes) {
      if (!itype.isInterface())       continue;
      bestSoFar=lookupMethod(env,site,name,argtypes,typeargtypes,itype.tsym.members(),bestSoFar,allowBoxing,useVarargs,operator,true);
      if (concrete != bestSoFar && concrete.kind < ERR && bestSoFar.kind < ERR && types.isSubSignature(concrete.type,bestSoFar.type)) {
        bestSoFar=concrete;
      }
    }
  }
  return bestSoFar;
}","private Symbol findMethod(Env<AttrContext> env,Type site,Name name,List<Type> argtypes,List<Type> typeargtypes,Type intype,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){
  boolean abstractOk=true;
  List<Type> itypes=List.nil();
  for (  TypeSymbol s : superclasses(intype)) {
    bestSoFar=lookupMethod(env,site,name,argtypes,typeargtypes,s.members(),bestSoFar,allowBoxing,useVarargs,operator,true);
    abstractOk&=(s.flags() & (ABSTRACT | INTERFACE | ENUM)) != 0;
    if (abstractOk) {
      for (      Type itype : types.interfaces(s.type)) {
        itypes=types.union(types.closure(itype),itypes);
      }
    }
    if (name == names.init)     break;
  }
  Symbol concrete=bestSoFar.kind < ERR && (bestSoFar.flags() & ABSTRACT) == 0 ? bestSoFar : methodNotFound;
  if (name != names.init) {
    for (    Type itype : itypes) {
      if (!itype.isInterface())       continue;
      bestSoFar=lookupMethod(env,site,name,argtypes,typeargtypes,itype.tsym.members(),bestSoFar,allowBoxing,useVarargs,operator,true);
      if (concrete != bestSoFar && concrete.kind < ERR && bestSoFar.kind < ERR && types.isSubSignature(concrete.type,bestSoFar.type)) {
        bestSoFar=concrete;
      }
    }
  }
  return bestSoFar;
}"
77666,"public boolean accepts(Name n){
  return n == names.init;
}","public boolean accepts(Name n){
  return n == n.table.names.init;
}"
77667,"public MethodHandle(int refKind,Symbol refSym,Names names){
  this.refKind=refKind;
  this.refSym=refSym;
  this.names=names;
  checkConsistent();
}","public MethodHandle(int refKind,Symbol refSym){
  this.refKind=refKind;
  this.refSym=refSym;
  checkConsistent();
}"
77668,"public Names(Context context){
  Options options=Options.instance(context);
  table=createTable(options);
  asterisk=fromString(""String_Node_Str"");
  comma=fromString(""String_Node_Str"");
  empty=fromString(""String_Node_Str"");
  hyphen=fromString(""String_Node_Str"");
  one=fromString(""String_Node_Str"");
  period=fromString(""String_Node_Str"");
  semicolon=fromString(""String_Node_Str"");
  slash=fromString(""String_Node_Str"");
  slashequals=fromString(""String_Node_Str"");
  _class=fromString(""String_Node_Str"");
  _default=fromString(""String_Node_Str"");
  _super=fromString(""String_Node_Str"");
  _this=fromString(""String_Node_Str"");
  _name=fromString(""String_Node_Str"");
  addSuppressed=fromString(""String_Node_Str"");
  any=fromString(""String_Node_Str"");
  append=fromString(""String_Node_Str"");
  clinit=fromString(""String_Node_Str"");
  clone=fromString(""String_Node_Str"");
  close=fromString(""String_Node_Str"");
  compareTo=fromString(""String_Node_Str"");
  desiredAssertionStatus=fromString(""String_Node_Str"");
  equals=fromString(""String_Node_Str"");
  error=fromString(""String_Node_Str"");
  family=fromString(""String_Node_Str"");
  finalize=fromString(""String_Node_Str"");
  forName=fromString(""String_Node_Str"");
  getClass=fromString(""String_Node_Str"");
  getClassLoader=fromString(""String_Node_Str"");
  getComponentType=fromString(""String_Node_Str"");
  getDeclaringClass=fromString(""String_Node_Str"");
  getMessage=fromString(""String_Node_Str"");
  hasNext=fromString(""String_Node_Str"");
  hashCode=fromString(""String_Node_Str"");
  init=fromString(""String_Node_Str"");
  initCause=fromString(""String_Node_Str"");
  iterator=fromString(""String_Node_Str"");
  length=fromString(""String_Node_Str"");
  next=fromString(""String_Node_Str"");
  ordinal=fromString(""String_Node_Str"");
  serialVersionUID=fromString(""String_Node_Str"");
  toString=fromString(""String_Node_Str"");
  value=fromString(""String_Node_Str"");
  valueOf=fromString(""String_Node_Str"");
  values=fromString(""String_Node_Str"");
  java_io_Serializable=fromString(""String_Node_Str"");
  java_lang_AutoCloseable=fromString(""String_Node_Str"");
  java_lang_Class=fromString(""String_Node_Str"");
  java_lang_Cloneable=fromString(""String_Node_Str"");
  java_lang_Enum=fromString(""String_Node_Str"");
  java_lang_Object=fromString(""String_Node_Str"");
  java_lang_invoke_MethodHandle=fromString(""String_Node_Str"");
  Array=fromString(""String_Node_Str"");
  Bound=fromString(""String_Node_Str"");
  Method=fromString(""String_Node_Str"");
  java_lang=fromString(""String_Node_Str"");
  Annotation=fromString(""String_Node_Str"");
  AnnotationDefault=fromString(""String_Node_Str"");
  Bridge=fromString(""String_Node_Str"");
  CharacterRangeTable=fromString(""String_Node_Str"");
  Code=fromString(""String_Node_Str"");
  CompilationID=fromString(""String_Node_Str"");
  ConstantValue=fromString(""String_Node_Str"");
  Deprecated=fromString(""String_Node_Str"");
  EnclosingMethod=fromString(""String_Node_Str"");
  Enum=fromString(""String_Node_Str"");
  Exceptions=fromString(""String_Node_Str"");
  InnerClasses=fromString(""String_Node_Str"");
  LineNumberTable=fromString(""String_Node_Str"");
  LocalVariableTable=fromString(""String_Node_Str"");
  LocalVariableTypeTable=fromString(""String_Node_Str"");
  RuntimeInvisibleAnnotations=fromString(""String_Node_Str"");
  RuntimeInvisibleParameterAnnotations=fromString(""String_Node_Str"");
  RuntimeInvisibleTypeAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleParameterAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleTypeAnnotations=fromString(""String_Node_Str"");
  Signature=fromString(""String_Node_Str"");
  SourceFile=fromString(""String_Node_Str"");
  SourceID=fromString(""String_Node_Str"");
  StackMap=fromString(""String_Node_Str"");
  StackMapTable=fromString(""String_Node_Str"");
  Synthetic=fromString(""String_Node_Str"");
  Value=fromString(""String_Node_Str"");
  Varargs=fromString(""String_Node_Str"");
  ANNOTATION_TYPE=fromString(""String_Node_Str"");
  CONSTRUCTOR=fromString(""String_Node_Str"");
  FIELD=fromString(""String_Node_Str"");
  LOCAL_VARIABLE=fromString(""String_Node_Str"");
  METHOD=fromString(""String_Node_Str"");
  PACKAGE=fromString(""String_Node_Str"");
  PARAMETER=fromString(""String_Node_Str"");
  TYPE=fromString(""String_Node_Str"");
  TYPE_PARAMETER=fromString(""String_Node_Str"");
  TYPE_USE=fromString(""String_Node_Str"");
  CLASS=fromString(""String_Node_Str"");
  RUNTIME=fromString(""String_Node_Str"");
  SOURCE=fromString(""String_Node_Str"");
  T=fromString(""String_Node_Str"");
  deprecated=fromString(""String_Node_Str"");
  ex=fromString(""String_Node_Str"");
  package_info=fromString(""String_Node_Str"");
  BootstrapMethods=fromString(""String_Node_Str"");
}","public Names(Context context){
  Options options=Options.instance(context);
  table=createTable(options);
  asterisk=fromString(""String_Node_Str"");
  comma=fromString(""String_Node_Str"");
  empty=fromString(""String_Node_Str"");
  hyphen=fromString(""String_Node_Str"");
  one=fromString(""String_Node_Str"");
  period=fromString(""String_Node_Str"");
  semicolon=fromString(""String_Node_Str"");
  slash=fromString(""String_Node_Str"");
  slashequals=fromString(""String_Node_Str"");
  _class=fromString(""String_Node_Str"");
  _default=fromString(""String_Node_Str"");
  _super=fromString(""String_Node_Str"");
  _this=fromString(""String_Node_Str"");
  _name=fromString(""String_Node_Str"");
  addSuppressed=fromString(""String_Node_Str"");
  any=fromString(""String_Node_Str"");
  append=fromString(""String_Node_Str"");
  clinit=fromString(""String_Node_Str"");
  clone=fromString(""String_Node_Str"");
  close=fromString(""String_Node_Str"");
  compareTo=fromString(""String_Node_Str"");
  desiredAssertionStatus=fromString(""String_Node_Str"");
  equals=fromString(""String_Node_Str"");
  error=fromString(""String_Node_Str"");
  family=fromString(""String_Node_Str"");
  finalize=fromString(""String_Node_Str"");
  forName=fromString(""String_Node_Str"");
  getClass=fromString(""String_Node_Str"");
  getClassLoader=fromString(""String_Node_Str"");
  getComponentType=fromString(""String_Node_Str"");
  getDeclaringClass=fromString(""String_Node_Str"");
  getMessage=fromString(""String_Node_Str"");
  hasNext=fromString(""String_Node_Str"");
  hashCode=fromString(""String_Node_Str"");
  init=fromString(""String_Node_Str"");
  initCause=fromString(""String_Node_Str"");
  iterator=fromString(""String_Node_Str"");
  length=fromString(""String_Node_Str"");
  next=fromString(""String_Node_Str"");
  ordinal=fromString(""String_Node_Str"");
  serialVersionUID=fromString(""String_Node_Str"");
  toString=fromString(""String_Node_Str"");
  value=fromString(""String_Node_Str"");
  valueOf=fromString(""String_Node_Str"");
  values=fromString(""String_Node_Str"");
  java_io_Serializable=fromString(""String_Node_Str"");
  java_lang_AutoCloseable=fromString(""String_Node_Str"");
  java_lang_Class=fromString(""String_Node_Str"");
  java_lang_Cloneable=fromString(""String_Node_Str"");
  java_lang_Enum=fromString(""String_Node_Str"");
  java_lang_Object=fromString(""String_Node_Str"");
  java_lang_invoke_MethodHandle=fromString(""String_Node_Str"");
  Array=fromString(""String_Node_Str"");
  Bound=fromString(""String_Node_Str"");
  Method=fromString(""String_Node_Str"");
  java_lang=fromString(""String_Node_Str"");
  Annotation=fromString(""String_Node_Str"");
  AnnotationDefault=fromString(""String_Node_Str"");
  BootstrapMethods=fromString(""String_Node_Str"");
  Bridge=fromString(""String_Node_Str"");
  CharacterRangeTable=fromString(""String_Node_Str"");
  Code=fromString(""String_Node_Str"");
  CompilationID=fromString(""String_Node_Str"");
  ConstantValue=fromString(""String_Node_Str"");
  Deprecated=fromString(""String_Node_Str"");
  EnclosingMethod=fromString(""String_Node_Str"");
  Enum=fromString(""String_Node_Str"");
  Exceptions=fromString(""String_Node_Str"");
  InnerClasses=fromString(""String_Node_Str"");
  LineNumberTable=fromString(""String_Node_Str"");
  LocalVariableTable=fromString(""String_Node_Str"");
  LocalVariableTypeTable=fromString(""String_Node_Str"");
  RuntimeInvisibleAnnotations=fromString(""String_Node_Str"");
  RuntimeInvisibleParameterAnnotations=fromString(""String_Node_Str"");
  RuntimeInvisibleTypeAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleParameterAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleTypeAnnotations=fromString(""String_Node_Str"");
  Signature=fromString(""String_Node_Str"");
  SourceFile=fromString(""String_Node_Str"");
  SourceID=fromString(""String_Node_Str"");
  StackMap=fromString(""String_Node_Str"");
  StackMapTable=fromString(""String_Node_Str"");
  Synthetic=fromString(""String_Node_Str"");
  Value=fromString(""String_Node_Str"");
  Varargs=fromString(""String_Node_Str"");
  ANNOTATION_TYPE=fromString(""String_Node_Str"");
  CONSTRUCTOR=fromString(""String_Node_Str"");
  FIELD=fromString(""String_Node_Str"");
  LOCAL_VARIABLE=fromString(""String_Node_Str"");
  METHOD=fromString(""String_Node_Str"");
  PACKAGE=fromString(""String_Node_Str"");
  PARAMETER=fromString(""String_Node_Str"");
  TYPE=fromString(""String_Node_Str"");
  TYPE_PARAMETER=fromString(""String_Node_Str"");
  TYPE_USE=fromString(""String_Node_Str"");
  CLASS=fromString(""String_Node_Str"");
  RUNTIME=fromString(""String_Node_Str"");
  SOURCE=fromString(""String_Node_Str"");
  T=fromString(""String_Node_Str"");
  deprecated=fromString(""String_Node_Str"");
  ex=fromString(""String_Node_Str"");
  package_info=fromString(""String_Node_Str"");
}"
77669,"/** 
 * Return the first sentence of the comment as an array of tags. Includes inline tags (i.e. {&#64link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of   {@linkplain Tag#kind() kind} ""Text"".Inline tags are represented as a  {@link SeeTag} of kind ""@see""and name ""@link"". <p> If the locale is English language, the first sentence is determined by the rules described in the Java Language Specification (first version): &quot;This sentence ends at the first period that is followed by a blank, tab, or line terminator or at the first tagline.&quot;, in addition a line will be terminated by block HTML tags: &lt;p&gt;  &lt;/p&gt;  &lt;h1&gt; &lt;h2&gt;  &lt;h3&gt; &lt;h4&gt;  &lt;h5&gt;  &lt;h6&gt; &lt;hr&gt;  &lt;pre&gt;  or &lt;/pre&gt;. If the locale is not English, the sentence end will be determined by {@link BreakIterator#getSentenceInstance(Locale)}.
 * @return an array of {@link Tag}s representing the first sentence of the comment
 */
Tag[] firstSentenceTags();","/** 
 * Return the first sentence of the comment as an array of tags. Includes inline tags (i.e. {&#64;link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of   {@linkplain Tag#kind() kind} ""Text"".Inline tags are represented as a  {@link SeeTag} of kind ""@see""and name ""@link"". <p> If the locale is English language, the first sentence is determined by the rules described in the Java Language Specification (first version): &quot;This sentence ends at the first period that is followed by a blank, tab, or line terminator or at the first tagline.&quot;, in addition a line will be terminated by block HTML tags: &lt;p&gt;  &lt;/p&gt;  &lt;h1&gt; &lt;h2&gt;  &lt;h3&gt; &lt;h4&gt;  &lt;h5&gt;  &lt;h6&gt; &lt;hr&gt;  &lt;pre&gt;  or &lt;/pre&gt;. If the locale is not English, the sentence end will be determined by {@link BreakIterator#getSentenceInstance(Locale)}.
 * @return an array of {@link Tag}s representing the first sentence of the comment
 */
Tag[] firstSentenceTags();"
77670,"/** 
 * Return comment as an array of tags. Includes inline tags (i.e. {&#64link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of   {@linkplain Tag#kind() kind} ""Text"".Inline tags are represented as a  {@link SeeTag} of kind ""@see""and name ""@link"".
 * @return an array of {@link Tag}s representing the comment
 */
Tag[] inlineTags();","/** 
 * Return comment as an array of tags. Includes inline tags (i.e. {&#64;link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of   {@linkplain Tag#kind() kind} ""Text"".Inline tags are represented as a  {@link SeeTag} of kind ""@see""and name ""@link"".
 * @return an array of {@link Tag}s representing the comment
 */
Tag[] inlineTags();"
77671,"/** 
 * Return the param tags in this method, excluding the type parameter tags.
 * @return an array of ParamTag containing all <code>&#64param</code> tagscorresponding to the parameters of this method.
 */
ParamTag[] paramTags();","/** 
 * Return the param tags in this method, excluding the type parameter tags.
 * @return an array of ParamTag containing all <code>&#64;param</code> tagscorresponding to the parameters of this method.
 */
ParamTag[] paramTags();"
77672,"/** 
 * Return the type parameter tags in this method.
 * @return an array of ParamTag containing all <code>&#64param</code> tagscorresponding to the type parameters of this method.
 * @since 1.5
 */
ParamTag[] typeParamTags();","/** 
 * Return the type parameter tags in this method.
 * @return an array of ParamTag containing all <code>&#64;param</code> tagscorresponding to the type parameters of this method.
 * @since 1.5
 */
ParamTag[] typeParamTags();"
77673,"/** 
 * Return the throws tags in this method.
 * @return an array of ThrowTag containing all <code>&#64exception</code>and <code>&#64throws</code> tags.
 */
ThrowsTag[] throwsTags();","/** 
 * Return the throws tags in this method.
 * @return an array of ThrowTag containing all <code>&#64;exception</code>and <code>&#64;throws</code> tags.
 */
ThrowsTag[] throwsTags();"
77674,"/** 
 * Return the first sentence of the comment as an array of tags. Includes inline tags (i.e. {&#64link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of kind ""Text"". Inline tags are represented as a   {@link SeeTag} of kind ""@link"".If the locale is English language, the first sentence is determined by the rules described in the Java Language Specification (first version): &quot;This sentence ends at the first period that is followed by a blank, tab, or line terminator or at the first tagline.&quot;, in addition a line will be terminated by paragraph and section terminating HTML tags: &lt;p&gt;  &lt;/p&gt;  &lt;h1&gt; &lt;h2&gt;  &lt;h3&gt; &lt;h4&gt;  &lt;h5&gt;  &lt;h6&gt; &lt;hr&gt;  &lt;pre&gt;  or &lt;/pre&gt;. If the locale is not English, the sentence end will be determined by {@link BreakIterator#getSentenceInstance(Locale)}.
 * @return an array of {@link Tag} objects representing thefirst sentence of the comment
 */
Tag[] firstSentenceTags();","/** 
 * Return the first sentence of the comment as an array of tags. Includes inline tags (i.e. {&#64;link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of kind ""Text"". Inline tags are represented as a   {@link SeeTag} of kind ""@link"".If the locale is English language, the first sentence is determined by the rules described in the Java Language Specification (first version): &quot;This sentence ends at the first period that is followed by a blank, tab, or line terminator or at the first tagline.&quot;, in addition a line will be terminated by paragraph and section terminating HTML tags: &lt;p&gt;  &lt;/p&gt;  &lt;h1&gt; &lt;h2&gt;  &lt;h3&gt; &lt;h4&gt;  &lt;h5&gt;  &lt;h6&gt; &lt;hr&gt;  &lt;pre&gt;  or &lt;/pre&gt;. If the locale is not English, the sentence end will be determined by {@link BreakIterator#getSentenceInstance(Locale)}.
 * @return an array of {@link Tag} objects representing thefirst sentence of the comment
 */
Tag[] firstSentenceTags();"
77675,"/** 
 * Find the start position of a line.
 * @param line line number (beginning at 1)
 * @return     position of first character in line
 * @throws IndexOutOfBoundsException if <tt>lineNumber < 1</tt> if <tt>lineNumber > no. of lines</tt>
 */
long getStartPosition(long line);","/** 
 * Find the start position of a line.
 * @param line line number (beginning at 1)
 * @return     position of first character in line
 * @throws IndexOutOfBoundsException if  {@code lineNumber < 1}if   {@code lineNumber > no. of lines}
 */
long getStartPosition(long line);"
77676,"/** 
 * Print the heading in Html &lt;H2> format.
 * @param str The Header string.
 */
public void printIndexHeading(String str){
  h2();
  print(str);
  h2End();
}","/** 
 * Print the heading in Html   {@literal <H2>} format.
 * @param str The Header string.
 */
public void printIndexHeading(String str){
  h2();
  print(str);
  h2End();
}"
77677,"/** 
 * Suppose a piece of documentation has a relative link.  When you copy that documetation to another place such as the index or class-use page, that relative link will no longer work.  We should redirect those links so that they will work again. <p> Here is the algorithm used to fix the link: <p> &lt;relative link&gt; => docRoot + &lt;relative path to file&gt; + &lt;relative link&gt; <p> For example, suppose com.sun.javadoc.RootDoc has this link: &lt;a href=""package-summary.html""&gt;The package Page&lt;/a&gt; <p> If this link appeared in the index, we would redirect the link like this: &lt;a href=""./com/sun/javadoc/package-summary.html""&gt;The package Page&lt;/a&gt;
 * @param doc the Doc object whose documentation is being written.
 * @param text the text being written.
 * @return the text, with all the relative links redirected to work.
 */
private String redirectRelativeLinks(Doc doc,String text){
  if (doc == null || shouldNotRedirectRelativeLinks()) {
    return text;
  }
  String redirectPathFromRoot;
  if (doc instanceof ClassDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath(((ClassDoc)doc).containingPackage());
  }
 else   if (doc instanceof MemberDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath(((MemberDoc)doc).containingPackage());
  }
 else   if (doc instanceof PackageDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath((PackageDoc)doc);
  }
 else {
    return text;
  }
  if (!redirectPathFromRoot.endsWith(DirectoryManager.URL_FILE_SEPARATOR)) {
    redirectPathFromRoot+=DirectoryManager.URL_FILE_SEPARATOR;
  }
  int end, begin=text.toLowerCase().indexOf(""String_Node_Str"");
  if (begin >= 0) {
    StringBuffer textBuff=new StringBuffer(text);
    while (begin >= 0) {
      if (textBuff.length() > begin + 2 && !Character.isWhitespace(textBuff.charAt(begin + 2))) {
        begin=textBuff.toString().toLowerCase().indexOf(""String_Node_Str"",begin + 1);
        continue;
      }
      begin=textBuff.indexOf(""String_Node_Str"",begin) + 1;
      end=textBuff.indexOf(""String_Node_Str"",begin + 1);
      if (begin == 0) {
        configuration.root.printWarning(doc.position(),configuration.getText(""String_Node_Str"",text));
        break;
      }
      if (end == -1) {
        break;
      }
      if (textBuff.substring(begin,end).indexOf(""String_Node_Str"") != -1) {
        begin=textBuff.indexOf(""String_Node_Str"",begin) + 1;
        end=textBuff.indexOf(""String_Node_Str"",begin + 1);
        if (begin == 0 || end == -1) {
          break;
        }
      }
      String relativeLink=textBuff.substring(begin,end);
      if (!(relativeLink.toLowerCase().startsWith(""String_Node_Str"") || relativeLink.toLowerCase().startsWith(""String_Node_Str"") || relativeLink.toLowerCase().startsWith(""String_Node_Str"")|| relativeLink.toLowerCase().startsWith(""String_Node_Str""))) {
        relativeLink=""String_Node_Str"" + (new DocRootTaglet()).getName() + ""String_Node_Str""+ redirectPathFromRoot+ relativeLink;
        textBuff.replace(begin,end,relativeLink);
      }
      begin=textBuff.toString().toLowerCase().indexOf(""String_Node_Str"",begin + 1);
    }
    return textBuff.toString();
  }
  return text;
}","/** 
 * Suppose a piece of documentation has a relative link.  When you copy that documetation to another place such as the index or class-use page, that relative link will no longer work.  We should redirect those links so that they will work again. <p> Here is the algorithm used to fix the link: <p>  {@literal <relative link> => docRoot + <relative path to file> + <relative link> }<p> For example, suppose com.sun.javadoc.RootDoc has this link:  {@literal <a href=""package-summary.html"">The package Page</a> }<p> If this link appeared in the index, we would redirect the link like this:  {@literal <a href=""./com/sun/javadoc/package-summary.html"">The package Page</a>}
 * @param doc the Doc object whose documentation is being written.
 * @param text the text being written.
 * @return the text, with all the relative links redirected to work.
 */
private String redirectRelativeLinks(Doc doc,String text){
  if (doc == null || shouldNotRedirectRelativeLinks()) {
    return text;
  }
  String redirectPathFromRoot;
  if (doc instanceof ClassDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath(((ClassDoc)doc).containingPackage());
  }
 else   if (doc instanceof MemberDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath(((MemberDoc)doc).containingPackage());
  }
 else   if (doc instanceof PackageDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath((PackageDoc)doc);
  }
 else {
    return text;
  }
  if (!redirectPathFromRoot.endsWith(DirectoryManager.URL_FILE_SEPARATOR)) {
    redirectPathFromRoot+=DirectoryManager.URL_FILE_SEPARATOR;
  }
  int end, begin=text.toLowerCase().indexOf(""String_Node_Str"");
  if (begin >= 0) {
    StringBuffer textBuff=new StringBuffer(text);
    while (begin >= 0) {
      if (textBuff.length() > begin + 2 && !Character.isWhitespace(textBuff.charAt(begin + 2))) {
        begin=textBuff.toString().toLowerCase().indexOf(""String_Node_Str"",begin + 1);
        continue;
      }
      begin=textBuff.indexOf(""String_Node_Str"",begin) + 1;
      end=textBuff.indexOf(""String_Node_Str"",begin + 1);
      if (begin == 0) {
        configuration.root.printWarning(doc.position(),configuration.getText(""String_Node_Str"",text));
        break;
      }
      if (end == -1) {
        break;
      }
      if (textBuff.substring(begin,end).indexOf(""String_Node_Str"") != -1) {
        begin=textBuff.indexOf(""String_Node_Str"",begin) + 1;
        end=textBuff.indexOf(""String_Node_Str"",begin + 1);
        if (begin == 0 || end == -1) {
          break;
        }
      }
      String relativeLink=textBuff.substring(begin,end);
      if (!(relativeLink.toLowerCase().startsWith(""String_Node_Str"") || relativeLink.toLowerCase().startsWith(""String_Node_Str"") || relativeLink.toLowerCase().startsWith(""String_Node_Str"")|| relativeLink.toLowerCase().startsWith(""String_Node_Str""))) {
        relativeLink=""String_Node_Str"" + (new DocRootTaglet()).getName() + ""String_Node_Str""+ redirectPathFromRoot+ relativeLink;
        textBuff.replace(begin,end,relativeLink);
      }
      begin=textBuff.toString().toLowerCase().indexOf(""String_Node_Str"",begin + 1);
    }
    return textBuff.toString();
  }
  return text;
}"
77678,"/** 
 * Handles the &lt;ClassDoc> tag.
 * @param node the XML element that specifies which components to document
 * @param contentTree the content tree to which the documentation will be added
 */
public void buildClassDoc(XMLNode node,Content contentTree) throws Exception {
  String key;
  if (isInterface) {
    key=""String_Node_Str"";
  }
 else   if (isEnum) {
    key=""String_Node_Str"";
  }
 else {
    key=""String_Node_Str"";
  }
  contentTree=writer.getHeader(configuration.getText(key) + ""String_Node_Str"" + classDoc.name());
  Content classContentTree=writer.getClassContentHeader();
  buildChildren(node,classContentTree);
  contentTree.addContent(classContentTree);
  writer.addFooter(contentTree);
  writer.printDocument(contentTree);
  writer.close();
  copyDocFiles();
}","/** 
 * Handles the   {@literal <ClassDoc>} tag.
 * @param node the XML element that specifies which components to document
 * @param contentTree the content tree to which the documentation will be added
 */
public void buildClassDoc(XMLNode node,Content contentTree) throws Exception {
  String key;
  if (isInterface) {
    key=""String_Node_Str"";
  }
 else   if (isEnum) {
    key=""String_Node_Str"";
  }
 else {
    key=""String_Node_Str"";
  }
  contentTree=writer.getHeader(configuration.getText(key) + ""String_Node_Str"" + classDoc.name());
  Content classContentTree=writer.getClassContentHeader();
  buildChildren(node,classContentTree);
  contentTree.addContent(classContentTree);
  writer.addFooter(contentTree);
  writer.printDocument(contentTree);
  writer.close();
  copyDocFiles();
}"
77679,"/** 
 * Enter a binary operation, as above but with two opcodes, which get encoded as (opcode1 << ByteCodeTags.preShift) + opcode2.
 * @param opcode1     First opcode.
 * @param opcode2     Second opcode.
 */
private void enterBinop(String name,Type left,Type right,Type res,int opcode1,int opcode2){
  enterBinop(name,left,right,res,(opcode1 << ByteCodes.preShift) | opcode2);
}","/** 
 * Enter a binary operation, as above but with two opcodes, which get encoded as  {@code (opcode1 << ByteCodeTags.preShift) + opcode2 }.
 * @param opcode1     First opcode.
 * @param opcode2     Second opcode.
 */
private void enterBinop(String name,Type left,Type right,Type res,int opcode1,int opcode2){
  enterBinop(name,left,right,res,(opcode1 << ByteCodes.preShift) | opcode2);
}"
77680,"/** 
 * A statement of the form <pre> for ( T v : arrayexpr ) stmt; </pre> (where arrayexpr is of an array type) gets translated to <pre> for ( { arraytype #arr = arrayexpr; int #len = array.length; int #i = 0; }; #i < #len; i$++ ) { T v = arr$[#i]; stmt; } </pre> where #arr, #len, and #i are freshly named synthetic local variables.
 */
private void visitArrayForeachLoop(JCEnhancedForLoop tree){
  make_at(tree.expr.pos());
  VarSymbol arraycache=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),tree.expr.type,currentMethodSym);
  JCStatement arraycachedef=make.VarDef(arraycache,tree.expr);
  VarSymbol lencache=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),syms.intType,currentMethodSym);
  JCStatement lencachedef=make.VarDef(lencache,make.Select(make.Ident(arraycache),syms.lengthVar));
  VarSymbol index=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),syms.intType,currentMethodSym);
  JCVariableDecl indexdef=make.VarDef(index,make.Literal(INT,0));
  indexdef.init.type=indexdef.type=syms.intType.constType(0);
  List<JCStatement> loopinit=List.of(arraycachedef,lencachedef,indexdef);
  JCBinary cond=makeBinary(LT,make.Ident(index),make.Ident(lencache));
  JCExpressionStatement step=make.Exec(makeUnary(PREINC,make.Ident(index)));
  Type elemtype=types.elemtype(tree.expr.type);
  JCExpression loopvarinit=make.Indexed(make.Ident(arraycache),make.Ident(index)).setType(elemtype);
  JCVariableDecl loopvardef=(JCVariableDecl)make.VarDef(tree.var.mods,tree.var.name,tree.var.vartype,loopvarinit).setType(tree.var.type);
  loopvardef.sym=tree.var.sym;
  JCBlock body=make.Block(0,List.of(loopvardef,tree.body));
  result=translate(make.ForLoop(loopinit,cond,List.of(step),body));
  patchTargets(body,tree,result);
}","/** 
 * A statement of the form <pre> for ( T v : arrayexpr ) stmt; </pre> (where arrayexpr is of an array type) gets translated to <pre>  {@code}for (  arraytype #arr = arrayexpr; int #len = array.length; int #i = 0; }; #i < #len; i$++ ) { T v = arr$[#i]; stmt; } }</pre> where #arr, #len, and #i are freshly named synthetic local variables.
 */
private void visitArrayForeachLoop(JCEnhancedForLoop tree){
  make_at(tree.expr.pos());
  VarSymbol arraycache=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),tree.expr.type,currentMethodSym);
  JCStatement arraycachedef=make.VarDef(arraycache,tree.expr);
  VarSymbol lencache=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),syms.intType,currentMethodSym);
  JCStatement lencachedef=make.VarDef(lencache,make.Select(make.Ident(arraycache),syms.lengthVar));
  VarSymbol index=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),syms.intType,currentMethodSym);
  JCVariableDecl indexdef=make.VarDef(index,make.Literal(INT,0));
  indexdef.init.type=indexdef.type=syms.intType.constType(0);
  List<JCStatement> loopinit=List.of(arraycachedef,lencachedef,indexdef);
  JCBinary cond=makeBinary(LT,make.Ident(index),make.Ident(lencache));
  JCExpressionStatement step=make.Exec(makeUnary(PREINC,make.Ident(index)));
  Type elemtype=types.elemtype(tree.expr.type);
  JCExpression loopvarinit=make.Indexed(make.Ident(arraycache),make.Ident(index)).setType(elemtype);
  JCVariableDecl loopvardef=(JCVariableDecl)make.VarDef(tree.var.mods,tree.var.name,tree.var.vartype,loopvarinit).setType(tree.var.type);
  loopvardef.sym=tree.var.sym;
  JCBlock body=make.Block(0,List.of(loopvardef,tree.body));
  result=translate(make.ForLoop(loopinit,cond,List.of(step),body));
  patchTargets(body,tree,result);
}"
77681,"/** 
 * Construct a tree that represents the closest outer instance <C.this> such that the given symbol is a member of C.
 * @param pos           The source code position to be used for the tree.
 * @param sym           The accessed symbol.
 * @param preciseMatch  should we accept a type that is a subtype ofsym's owner, even if it doesn't contain sym due to hiding, overriding, or non-inheritance due to protection?
 */
JCExpression makeOwnerThis(DiagnosticPosition pos,Symbol sym,boolean preciseMatch){
  Symbol c=sym.owner;
  if (preciseMatch ? sym.isMemberOf(currentClass,types) : currentClass.isSubClass(sym.owner,types)) {
    return make.at(pos).This(c.erasure(types));
  }
 else {
    return makeOwnerThisN(pos,sym,preciseMatch);
  }
}","/** 
 * Construct a tree that represents the closest outer instance  {@code C.this} such that the given symbol is a member of C.
 * @param pos           The source code position to be used for the tree.
 * @param sym           The accessed symbol.
 * @param preciseMatch  should we accept a type that is a subtype ofsym's owner, even if it doesn't contain sym due to hiding, overriding, or non-inheritance due to protection?
 */
JCExpression makeOwnerThis(DiagnosticPosition pos,Symbol sym,boolean preciseMatch){
  Symbol c=sym.owner;
  if (preciseMatch ? sym.isMemberOf(currentClass,types) : currentClass.isSubClass(sym.owner,types)) {
    return make.at(pos).This(c.erasure(types));
  }
 else {
    return makeOwnerThisN(pos,sym,preciseMatch);
  }
}"
77682,"/** 
 * Construct a tree that represents the outer instance <C.this>. Never pick the current `this'.
 * @param pos           The source code position to be used for the tree.
 * @param c             The qualifier class.
 */
JCExpression makeOuterThis(DiagnosticPosition pos,TypeSymbol c){
  List<VarSymbol> ots=outerThisStack;
  if (ots.isEmpty()) {
    log.error(pos,""String_Node_Str"",c);
    Assert.error();
    return makeNull();
  }
  VarSymbol ot=ots.head;
  JCExpression tree=access(make.at(pos).Ident(ot));
  TypeSymbol otc=ot.type.tsym;
  while (otc != c) {
    do {
      ots=ots.tail;
      if (ots.isEmpty()) {
        log.error(pos,""String_Node_Str"",c);
        Assert.error();
        return tree;
      }
      ot=ots.head;
    }
 while (ot.owner != otc);
    if (otc.owner.kind != PCK && !otc.hasOuterInstance()) {
      chk.earlyRefError(pos,c);
      Assert.error();
      return makeNull();
    }
    tree=access(make.at(pos).Select(tree,ot));
    otc=ot.type.tsym;
  }
  return tree;
}","/** 
 * Construct a tree that represents the outer instance  {@code C.this}. Never pick the current `this'.
 * @param pos           The source code position to be used for the tree.
 * @param c             The qualifier class.
 */
JCExpression makeOuterThis(DiagnosticPosition pos,TypeSymbol c){
  List<VarSymbol> ots=outerThisStack;
  if (ots.isEmpty()) {
    log.error(pos,""String_Node_Str"",c);
    Assert.error();
    return makeNull();
  }
  VarSymbol ot=ots.head;
  JCExpression tree=access(make.at(pos).Ident(ot));
  TypeSymbol otc=ot.type.tsym;
  while (otc != c) {
    do {
      ots=ots.tail;
      if (ots.isEmpty()) {
        log.error(pos,""String_Node_Str"",c);
        Assert.error();
        return tree;
      }
      ot=ots.head;
    }
 while (ot.owner != otc);
    if (otc.owner.kind != PCK && !otc.hasOuterInstance()) {
      chk.earlyRefError(pos,c);
      Assert.error();
      return makeNull();
    }
    tree=access(make.at(pos).Select(tree,ot));
    otc=ot.type.tsym;
  }
  return tree;
}"
77683,"/** 
 * Return tree simulating the assignment <this.this$n = this$n>.
 */
JCStatement initOuterThis(int pos){
  VarSymbol rhs=outerThisStack.head;
  Assert.check(rhs.owner.kind == MTH);
  VarSymbol lhs=outerThisStack.tail.head;
  Assert.check(rhs.owner.owner == lhs.owner);
  make.at(pos);
  return make.Exec(make.Assign(make.Select(make.This(lhs.owner.erasure(types)),lhs),make.Ident(rhs)).setType(lhs.erasure(types)));
}","/** 
 * Return tree simulating the assignment   {@code this.this$n = this$n}.
 */
JCStatement initOuterThis(int pos){
  VarSymbol rhs=outerThisStack.head;
  Assert.check(rhs.owner.kind == MTH);
  VarSymbol lhs=outerThisStack.tail.head;
  Assert.check(rhs.owner.owner == lhs.owner);
  make.at(pos);
  return make.Exec(make.Assign(make.Select(make.This(lhs.owner.erasure(types)),lhs),make.Ident(rhs)).setType(lhs.erasure(types)));
}"
77684,"/** 
 * Construct a tree simulating the expression <C.this>.
 * @param pos           The source code position to be used for the tree.
 * @param c             The qualifier class.
 */
JCExpression makeThis(DiagnosticPosition pos,TypeSymbol c){
  if (currentClass == c) {
    return make.at(pos).This(c.erasure(types));
  }
 else {
    return makeOuterThis(pos,c);
  }
}","/** 
 * Construct a tree simulating the expression   {@code C.this}.
 * @param pos           The source code position to be used for the tree.
 * @param c             The qualifier class.
 */
JCExpression makeThis(DiagnosticPosition pos,TypeSymbol c){
  if (currentClass == c) {
    return make.at(pos).This(c.erasure(types));
  }
 else {
    return makeOuterThis(pos,c);
  }
}"
77685,"/** 
 * A statement of the form <pre> for ( T v : coll ) stmt ; </pre> (where coll implements Iterable<? extends T>) gets translated to <pre> for ( Iterator<? extends T> #i = coll.iterator(); #i.hasNext(); ) { T v = (T) #i.next(); stmt; } </pre> where #i is a freshly named synthetic local variable.
 */
private void visitIterableForeachLoop(JCEnhancedForLoop tree){
  make_at(tree.expr.pos());
  Type iteratorTarget=syms.objectType;
  Type iterableType=types.asSuper(types.upperBound(tree.expr.type),syms.iterableType.tsym);
  if (iterableType.getTypeArguments().nonEmpty())   iteratorTarget=types.erasure(iterableType.getTypeArguments().head);
  Type eType=tree.expr.type;
  tree.expr.type=types.erasure(eType);
  if (eType.tag == TYPEVAR && eType.getUpperBound().isCompound())   tree.expr=make.TypeCast(types.erasure(iterableType),tree.expr);
  Symbol iterator=lookupMethod(tree.expr.pos(),names.iterator,types.erasure(syms.iterableType),List.<Type>nil());
  VarSymbol itvar=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),types.erasure(iterator.type.getReturnType()),currentMethodSym);
  JCStatement init=make.VarDef(itvar,make.App(make.Select(tree.expr,iterator)));
  Symbol hasNext=lookupMethod(tree.expr.pos(),names.hasNext,itvar.type,List.<Type>nil());
  JCMethodInvocation cond=make.App(make.Select(make.Ident(itvar),hasNext));
  Symbol next=lookupMethod(tree.expr.pos(),names.next,itvar.type,List.<Type>nil());
  JCExpression vardefinit=make.App(make.Select(make.Ident(itvar),next));
  if (tree.var.type.isPrimitive())   vardefinit=make.TypeCast(types.upperBound(iteratorTarget),vardefinit);
 else   vardefinit=make.TypeCast(tree.var.type,vardefinit);
  JCVariableDecl indexDef=(JCVariableDecl)make.VarDef(tree.var.mods,tree.var.name,tree.var.vartype,vardefinit).setType(tree.var.type);
  indexDef.sym=tree.var.sym;
  JCBlock body=make.Block(0,List.of(indexDef,tree.body));
  body.endpos=TreeInfo.endPos(tree.body);
  result=translate(make.ForLoop(List.of(init),cond,List.<JCExpressionStatement>nil(),body));
  patchTargets(body,tree,result);
}","/** 
 * A statement of the form <pre> for ( T v : coll ) stmt ; </pre> (where coll implements   {@code Iterable<? extends T>}) gets translated to <pre>  {@code}for ( Iterator<? extends T> #i = coll.iterator(); #i.hasNext(); )  T v = (T) #i.next(); stmt; } }</pre> where #i is a freshly named synthetic local variable.
 */
private void visitIterableForeachLoop(JCEnhancedForLoop tree){
  make_at(tree.expr.pos());
  Type iteratorTarget=syms.objectType;
  Type iterableType=types.asSuper(types.upperBound(tree.expr.type),syms.iterableType.tsym);
  if (iterableType.getTypeArguments().nonEmpty())   iteratorTarget=types.erasure(iterableType.getTypeArguments().head);
  Type eType=tree.expr.type;
  tree.expr.type=types.erasure(eType);
  if (eType.tag == TYPEVAR && eType.getUpperBound().isCompound())   tree.expr=make.TypeCast(types.erasure(iterableType),tree.expr);
  Symbol iterator=lookupMethod(tree.expr.pos(),names.iterator,types.erasure(syms.iterableType),List.<Type>nil());
  VarSymbol itvar=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),types.erasure(iterator.type.getReturnType()),currentMethodSym);
  JCStatement init=make.VarDef(itvar,make.App(make.Select(tree.expr,iterator)));
  Symbol hasNext=lookupMethod(tree.expr.pos(),names.hasNext,itvar.type,List.<Type>nil());
  JCMethodInvocation cond=make.App(make.Select(make.Ident(itvar),hasNext));
  Symbol next=lookupMethod(tree.expr.pos(),names.next,itvar.type,List.<Type>nil());
  JCExpression vardefinit=make.App(make.Select(make.Ident(itvar),next));
  if (tree.var.type.isPrimitive())   vardefinit=make.TypeCast(types.upperBound(iteratorTarget),vardefinit);
 else   vardefinit=make.TypeCast(tree.var.type,vardefinit);
  JCVariableDecl indexDef=(JCVariableDecl)make.VarDef(tree.var.mods,tree.var.name,tree.var.vartype,vardefinit).setType(tree.var.type);
  indexDef.sym=tree.var.sym;
  JCBlock body=make.Block(0,List.of(indexDef,tree.body));
  body.endpos=TreeInfo.endPos(tree.body);
  result=translate(make.ForLoop(List.of(init),cond,List.<JCExpressionStatement>nil(),body));
  patchTargets(body,tree,result);
}"
77686,"/** 
 * Return tree simulating the assignment <this.name = name>, where name is the name of a free variable.
 */
JCStatement initField(int pos,Name name){
  Scope.Entry e=proxies.lookup(name);
  Symbol rhs=e.sym;
  Assert.check(rhs.owner.kind == MTH);
  Symbol lhs=e.next().sym;
  Assert.check(rhs.owner.owner == lhs.owner);
  make.at(pos);
  return make.Exec(make.Assign(make.Select(make.This(lhs.owner.erasure(types)),lhs),make.Ident(rhs)).setType(lhs.erasure(types)));
}","/** 
 * Return tree simulating the assignment   {@code this.name = name}, where name is the name of a free variable.
 */
JCStatement initField(int pos,Name name){
  Scope.Entry e=proxies.lookup(name);
  Symbol rhs=e.sym;
  Assert.check(rhs.owner.kind == MTH);
  Symbol lhs=e.next().sym;
  Assert.check(rhs.owner.owner == lhs.owner);
  make.at(pos);
  return make.Exec(make.Assign(make.Select(make.This(lhs.owner.erasure(types)),lhs),make.Ident(rhs)).setType(lhs.erasure(types)));
}"
77687,"/** 
 * A name designates an operator if it consists of a non-empty sequence of operator symbols +-~!/*%&|^<>=
 */
boolean isOperator(Name name){
  int i=0;
  while (i < name.getByteLength() && ""String_Node_Str"".indexOf(name.getByteAt(i)) >= 0)   i++;
  return i > 0 && i == name.getByteLength();
}","/** 
 * A name designates an operator if it consists of a non-empty sequence of operator symbols   {@literal +-~!/*%&|^<>= }
 */
boolean isOperator(Name name){
  int i=0;
  while (i < name.getByteLength() && ""String_Node_Str"".indexOf(name.getByteAt(i)) >= 0)   i++;
  return i > 0 && i == name.getByteLength();
}"
77688,"/** 
 * This method scans all the constructor symbol in a given class scope - assuming that the original scope contains a constructor of the kind: Foo(X x, Y y), where X,Y are class type-variables declared in Foo, a method check is executed against the modified constructor type: <X,Y>Foo<X,Y>(X x, Y y). This is crucial in order to enable diamond inference. The inferred return type of the synthetic constructor IS the inferred type for the diamond operator.
 */
private Symbol findDiamond(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,boolean allowBoxing,boolean useVarargs){
  Symbol bestSoFar=methodNotFound;
  for (Scope.Entry e=site.tsym.members().lookup(names.init); e.scope != null; e=e.next()) {
    if (e.sym.kind == MTH && (e.sym.flags_field & SYNTHETIC) == 0) {
      List<Type> oldParams=e.sym.type.tag == FORALL ? ((ForAll)e.sym.type).tvars : List.<Type>nil();
      Type constrType=new ForAll(site.tsym.type.getTypeArguments().appendList(oldParams),types.createMethodTypeWithReturn(e.sym.type.asMethodType(),site));
      bestSoFar=selectBest(env,site,argtypes,typeargtypes,new MethodSymbol(e.sym.flags(),names.init,constrType,site.tsym),bestSoFar,allowBoxing,useVarargs,false);
    }
  }
  return bestSoFar;
}","/** 
 * This method scans all the constructor symbol in a given class scope - assuming that the original scope contains a constructor of the kind:  {@code Foo(X x, Y y)}, where X,Y are class type-variables declared in Foo, a method check is executed against the modified constructor type:  {@code <X,Y>Foo<X,Y>(X x, Y y)}. This is crucial in order to enable diamond inference. The inferred return type of the synthetic constructor IS the inferred type for the diamond operator.
 */
private Symbol findDiamond(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,boolean allowBoxing,boolean useVarargs){
  Symbol bestSoFar=methodNotFound;
  for (Scope.Entry e=site.tsym.members().lookup(names.init); e.scope != null; e=e.next()) {
    if (e.sym.kind == MTH && (e.sym.flags_field & SYNTHETIC) == 0) {
      List<Type> oldParams=e.sym.type.tag == FORALL ? ((ForAll)e.sym.type).tvars : List.<Type>nil();
      Type constrType=new ForAll(site.tsym.type.getTypeArguments().appendList(oldParams),types.createMethodTypeWithReturn(e.sym.type.asMethodType(),site));
      bestSoFar=selectBest(env,site,argtypes,typeargtypes,new MethodSymbol(e.sym.flags(),names.init,constrType,site.tsym),bestSoFar,allowBoxing,useVarargs,false);
    }
  }
  return bestSoFar;
}"
77689,"/** 
 * Source file positions in CRT are integers in the format: line-number << LINESHIFT + column-number
 */
private int encodePosition(int pos,Position.LineMap lineMap,Log log){
  int line=lineMap.getLineNumber(pos);
  int col=lineMap.getColumnNumber(pos);
  int new_pos=Position.encodePosition(line,col);
  if (crtDebug) {
    System.out.println(""String_Node_Str"" + line + ""String_Node_Str""+ col+ ""String_Node_Str""+ new_pos);
  }
  if (new_pos == Position.NOPOS)   log.warning(pos,""String_Node_Str"",line);
  return new_pos;
}","/** 
 * Source file positions in CRT are integers in the format:  {@literal line-number << LINESHIFT + column-number }
 */
private int encodePosition(int pos,Position.LineMap lineMap,Log log){
  int line=lineMap.getLineNumber(pos);
  int col=lineMap.getColumnNumber(pos);
  int new_pos=Position.encodePosition(line,col);
  if (crtDebug) {
    System.out.println(""String_Node_Str"" + line + ""String_Node_Str""+ col+ ""String_Node_Str""+ new_pos);
  }
  if (new_pos == Position.NOPOS)   log.warning(pos,""String_Node_Str"",line);
  return new_pos;
}"
77690,"public synchronized int getNumDeactivated() throws RemoteException {
  return (num_deactivated);
}","public synchronized int getNumDeactivated() throws RemoteException {
  return num_deactivated;
}"
77691,"public static void main(String[] args){
  Registry registry;
  System.err.println(""String_Node_Str"");
  TestLibrary.suggestSecurityManager(""String_Node_Str"");
  RMID rmid=null;
  try {
    RMID.removeLog();
    rmid=RMID.createRMID();
    rmid.start();
    final Properties p=new Properties();
    p.put(""String_Node_Str"",TestParams.defaultGroupPolicy);
    p.put(""String_Node_Str"",TestParams.defaultSecurityManager);
    Thread t=new Thread(){
      public void run(){
        try {
          System.err.println(""String_Node_Str"");
          ActivationGroupDesc groupDesc=new ActivationGroupDesc(p,null);
          ActivationSystem system=ActivationGroup.getSystem();
          ActivationGroupID groupID=system.registerGroup(groupDesc);
          ActivateMe[] obj=new ActivateMe[NUM_OBJECTS];
          for (int i=0; i < NUM_OBJECTS; i++) {
            System.err.println(""String_Node_Str"" + i);
            ActivationDesc desc=new ActivationDesc(groupID,""String_Node_Str"",null,null);
            System.err.println(""String_Node_Str"" + i);
            obj[i]=(ActivateMe)Activatable.register(desc);
            System.err.println(""String_Node_Str"" + i);
            obj[i].ping();
          }
          lastResortExitObj=obj[0];
          System.err.println(""String_Node_Str"");
          system.unregisterGroup(groupID);
          try {
            System.err.println(""String_Node_Str"");
            system.getActivationGroupDesc(groupID);
            error=""String_Node_Str"";
          }
 catch (          UnknownGroupException e) {
            System.err.println(""String_Node_Str"" + ""String_Node_Str"");
          }
          for (int i=0; i < NUM_OBJECTS; i++) {
            System.err.println(""String_Node_Str"" + i);
            obj[i].shutdown();
            obj[i]=null;
          }
          lastResortExitObj=null;
        }
 catch (        Exception e) {
          exception=e;
        }
        done=true;
      }
    }
;
    t.start();
    t.join(120000);
    if (exception != null) {
      TestLibrary.bomb(""String_Node_Str"",exception);
    }
 else     if (error != null) {
      TestLibrary.bomb(error,null);
    }
 else     if (!done) {
      TestLibrary.bomb(""String_Node_Str"",null);
    }
 else {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    TestLibrary.bomb(""String_Node_Str"",e);
  }
 finally {
    if (lastResortExitObj != null) {
      try {
        lastResortExitObj.justGoAway();
      }
 catch (      Exception munch) {
      }
    }
    try {
      registry=TestLibrary.createRegistryOnUnusedPort();
      registryPort=TestLibrary.getRegistryPort(registry);
      Callback robj=new Callback();
      registry.bind(""String_Node_Str"",robj);
      int maxwait=30;
      int nd=robj.getNumDeactivated();
      while ((nd < NUM_OBJECTS) && (maxwait > 0)) {
        System.err.println(""String_Node_Str"" + nd);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ie) {
        }
        maxwait--;
        nd=robj.getNumDeactivated();
      }
    }
 catch (    Exception ce) {
      System.err.println(""String_Node_Str"" + ce);
      ce.printStackTrace();
    }
    ActivationLibrary.rmidCleanup(rmid);
  }
}","public static void main(String[] args) throws RemoteException {
  System.err.println(""String_Node_Str"");
  TestLibrary.suggestSecurityManager(""String_Node_Str"");
  RMID rmid=null;
  Registry registry=TestLibrary.createRegistryOnUnusedPort();
  registryPort=TestLibrary.getRegistryPort(registry);
  Callback robj=new Callback();
  registry.rebind(""String_Node_Str"",robj);
  try {
    RMID.removeLog();
    rmid=RMID.createRMID();
    rmid.start();
    final Properties p=new Properties();
    p.put(""String_Node_Str"",TestParams.defaultGroupPolicy);
    p.put(""String_Node_Str"",TestParams.defaultSecurityManager);
    p.put(""String_Node_Str"",Integer.toString(registryPort));
    Thread t=new Thread(){
      public void run(){
        try {
          System.err.println(""String_Node_Str"");
          ActivationGroupDesc groupDesc=new ActivationGroupDesc(p,null);
          ActivationSystem system=ActivationGroup.getSystem();
          ActivationGroupID groupID=system.registerGroup(groupDesc);
          ActivateMe[] obj=new ActivateMe[NUM_OBJECTS];
          for (int i=0; i < NUM_OBJECTS; i++) {
            System.err.println(""String_Node_Str"" + i);
            ActivationDesc desc=new ActivationDesc(groupID,""String_Node_Str"",null,null);
            System.err.println(""String_Node_Str"" + i);
            obj[i]=(ActivateMe)Activatable.register(desc);
            System.err.println(""String_Node_Str"" + i);
            obj[i].ping();
          }
          lastResortExitObj=obj[0];
          System.err.println(""String_Node_Str"");
          system.unregisterGroup(groupID);
          try {
            System.err.println(""String_Node_Str"");
            system.getActivationGroupDesc(groupID);
            error=""String_Node_Str"";
          }
 catch (          UnknownGroupException e) {
            System.err.println(""String_Node_Str"" + ""String_Node_Str"");
          }
          for (int i=0; i < NUM_OBJECTS; i++) {
            System.err.println(""String_Node_Str"" + i);
            obj[i].shutdown();
            obj[i]=null;
          }
          lastResortExitObj=null;
        }
 catch (        Exception e) {
          exception=e;
        }
        done=true;
      }
    }
;
    t.start();
    t.join(120000);
    if (exception != null) {
      TestLibrary.bomb(""String_Node_Str"",exception);
    }
 else     if (error != null) {
      TestLibrary.bomb(error,null);
    }
 else     if (!done) {
      TestLibrary.bomb(""String_Node_Str"",null);
    }
 else {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    TestLibrary.bomb(""String_Node_Str"",e);
  }
 finally {
    if (lastResortExitObj != null) {
      try {
        lastResortExitObj.justGoAway();
      }
 catch (      Exception munch) {
      }
    }
    try {
      int maxwait=30;
      int nd=robj.getNumDeactivated();
      while ((nd < NUM_OBJECTS) && (maxwait > 0)) {
        System.err.println(""String_Node_Str"" + nd);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ie) {
        }
        maxwait--;
        nd=robj.getNumDeactivated();
      }
    }
 catch (    Exception ce) {
      System.err.println(""String_Node_Str"" + ce);
      ce.printStackTrace();
    }
    ActivationLibrary.rmidCleanup(rmid);
  }
}"
77692,"public void inc() throws RemoteException {
  incNumDeactivated();
}","public synchronized void inc() throws RemoteException {
  num_deactivated++;
}"
77693,"public String[] bases(String repId){
  String[] results=null;
  if (bases == null)   bases=new Hashtable();
 else   results=(String[])bases.get(repId);
  if (results == null && connectedCodeBase()) {
    results=delegate.bases(repId);
    if (results != null)     bases.put(repId,results);
  }
  return results;
}","public synchronized String[] bases(String repId){
  String[] results=null;
  if (bases == null)   bases=new Hashtable();
 else   results=(String[])bases.get(repId);
  if (results == null && connectedCodeBase()) {
    results=delegate.bases(repId);
    if (results != null)     bases.put(repId,results);
  }
  return results;
}"
77694,"public FullValueDescription[] metas(String[] repIds){
  FullValueDescription[] results=new FullValueDescription[repIds.length];
  for (int i=0; i < results.length; i++)   results[i]=meta(repIds[i]);
  return results;
}","public synchronized FullValueDescription[] metas(String[] repIds){
  FullValueDescription[] results=new FullValueDescription[repIds.length];
  for (int i=0; i < results.length; i++)   results[i]=meta(repIds[i]);
  return results;
}"
77695,"private boolean connectedCodeBase(){
  if (delegate != null)   return true;
  if (conn.getCodeBaseIOR() == null) {
    if (conn.getBroker().transportDebugFlag)     conn.dprint(""String_Node_Str"" + conn);
    return false;
  }
synchronized (this) {
    if (delegate != null)     return true;
    delegate=(CodeBase)CachedCodeBase.iorToCodeBaseObjMap.get(conn.getCodeBaseIOR());
    if (delegate != null)     return true;
    delegate=CodeBaseHelper.narrow(getObjectFromIOR());
    CachedCodeBase.iorToCodeBaseObjMap.put(conn.getCodeBaseIOR(),delegate);
  }
  return true;
}","private synchronized boolean connectedCodeBase(){
  if (delegate != null)   return true;
  if (conn.getCodeBaseIOR() == null) {
    if (conn.getBroker().transportDebugFlag)     conn.dprint(""String_Node_Str"" + conn);
    return false;
  }
synchronized (iorMapLock) {
    if (delegate != null)     return true;
    delegate=CachedCodeBase.iorMap.get(conn.getCodeBaseIOR());
    if (delegate != null)     return true;
    delegate=CodeBaseHelper.narrow(getObjectFromIOR());
    CachedCodeBase.iorMap.put(conn.getCodeBaseIOR(),delegate);
  }
  return true;
}"
77696,"public FullValueDescription meta(String repId){
  FullValueDescription result=null;
  if (fvds == null)   fvds=new Hashtable();
 else   result=(FullValueDescription)fvds.get(repId);
  if (result == null && connectedCodeBase()) {
    result=delegate.meta(repId);
    if (result != null)     fvds.put(repId,result);
  }
  return result;
}","public synchronized FullValueDescription meta(String repId){
  FullValueDescription result=null;
  if (fvds == null)   fvds=new Hashtable();
 else   result=(FullValueDescription)fvds.get(repId);
  if (result == null && connectedCodeBase()) {
    result=delegate.meta(repId);
    if (result != null)     fvds.put(repId,result);
  }
  return result;
}"
77697,"public String implementation(String repId){
  String urlResult=null;
  if (implementations == null)   implementations=new Hashtable();
 else   urlResult=(String)implementations.get(repId);
  if (urlResult == null && connectedCodeBase()) {
    urlResult=delegate.implementation(repId);
    if (urlResult != null)     implementations.put(repId,urlResult);
  }
  return urlResult;
}","public synchronized String implementation(String repId){
  String urlResult=null;
  if (implementations == null)   implementations=new Hashtable();
 else   urlResult=(String)implementations.get(repId);
  if (urlResult == null && connectedCodeBase()) {
    urlResult=delegate.implementation(repId);
    if (urlResult != null)     implementations.put(repId,urlResult);
  }
  return urlResult;
}"
77698,"public String[] implementations(String[] repIds){
  String[] urlResults=new String[repIds.length];
  for (int i=0; i < urlResults.length; i++)   urlResults[i]=implementation(repIds[i]);
  return urlResults;
}","public synchronized String[] implementations(String[] repIds){
  String[] urlResults=new String[repIds.length];
  for (int i=0; i < urlResults.length; i++)   urlResults[i]=implementation(repIds[i]);
  return urlResults;
}"
77699,"private static void executeCommandForPid(String pid,String command) throws AttachNotSupportedException, IOException, UnsupportedEncodingException {
  VirtualMachine vm=VirtualMachine.attach(pid);
  HotSpotVirtualMachine hvm=(HotSpotVirtualMachine)vm;
  try (InputStream in=hvm.executeJCmd(command)){
    byte b[]=new byte[256];
    int n;
    do {
      n=in.read(b);
      if (n > 0) {
        String s=new String(b,0,n,""String_Node_Str"");
        System.out.print(s);
      }
    }
 while (n > 0);
  }
   vm.detach();
}","private static void executeCommandForPid(String pid,String command) throws AttachNotSupportedException, IOException, UnsupportedEncodingException {
  VirtualMachine vm=VirtualMachine.attach(pid);
  HotSpotVirtualMachine hvm=(HotSpotVirtualMachine)vm;
  String lines[]=command.split(""String_Node_Str"");
  for (  String line : lines) {
    try (InputStream in=hvm.executeJCmd(line)){
      byte b[]=new byte[256];
      int n;
      do {
        n=in.read(b);
        if (n > 0) {
          String s=new String(b,0,n,""String_Node_Str"");
          System.out.print(s);
        }
      }
 while (n > 0);
    }
   }
  vm.detach();
}"
77700,"protected void close(){
  if (fd != null || fd1 != null) {
    datagramSocketClose();
    fd=null;
    fd1=null;
  }
}","protected void close(){
  if (fd != null || fd1 != null) {
    datagramSocketClose();
    ResourceManager.afterUdpClose();
    fd=null;
    fd1=null;
  }
}"
77701,"public Log make(){
  return Bark.instance(context);
}","public Log make(Context c){
  return Bark.instance(c);
}"
77702,"/** 
 * Preregisters factories to create and use a Bark object for use as both a Log and a Bark.
 */
public static void preRegister(final Context context){
  context.put(barkKey,new Context.Factory<Bark>(){
    public Bark make(){
      return new Bark(context);
    }
  }
);
  context.put(Log.logKey,new Context.Factory<Log>(){
    public Log make(){
      return Bark.instance(context);
    }
  }
);
}","/** 
 * Preregisters factories to create and use a Bark object for use as both a Log and a Bark.
 */
public static void preRegister(Context context){
  context.put(barkKey,new Context.Factory<Bark>(){
    public Bark make(    Context c){
      return new Bark(c);
    }
  }
);
  context.put(Log.logKey,new Context.Factory<Log>(){
    public Log make(    Context c){
      return Bark.instance(c);
    }
  }
);
}"
77703,"/** 
 * Register that a compilation is about to start.
 */
void beginContext(final Context context){
  if (compilationInProgress)   throw new IllegalStateException(""String_Node_Str"");
  compilationInProgress=true;
  final JavaFileManager givenFileManager=context.get(JavaFileManager.class);
  context.put(JavaFileManager.class,(JavaFileManager)null);
  context.put(JavaFileManager.class,new Context.Factory<JavaFileManager>(){
    public JavaFileManager make(){
      if (givenFileManager != null) {
        context.put(JavaFileManager.class,givenFileManager);
        return givenFileManager;
      }
 else {
        return new JavacFileManager(context,true,null);
      }
    }
  }
);
}","/** 
 * Register that a compilation is about to start.
 */
void beginContext(Context context){
  if (compilationInProgress)   throw new IllegalStateException(""String_Node_Str"");
  compilationInProgress=true;
  final JavaFileManager givenFileManager=context.get(JavaFileManager.class);
  context.put(JavaFileManager.class,(JavaFileManager)null);
  context.put(JavaFileManager.class,new Context.Factory<JavaFileManager>(){
    public JavaFileManager make(    Context c){
      if (givenFileManager != null) {
        c.put(JavaFileManager.class,givenFileManager);
        return givenFileManager;
      }
 else {
        return new JavacFileManager(c,true,null);
      }
    }
  }
);
}"
77704,"public JavaFileManager make(){
  if (givenFileManager != null) {
    context.put(JavaFileManager.class,givenFileManager);
    return givenFileManager;
  }
 else {
    return new JavacFileManager(context,true,null);
  }
}","public JavaFileManager make(Context c){
  if (givenFileManager != null) {
    c.put(JavaFileManager.class,givenFileManager);
    return givenFileManager;
  }
 else {
    return new JavacFileManager(c,true,null);
  }
}"
77705,"public FSInfo make(){
  FSInfo instance=new CacheFSInfo();
  context.put(FSInfo.class,instance);
  return instance;
}","public FSInfo make(Context c){
  FSInfo instance=new CacheFSInfo();
  c.put(FSInfo.class,instance);
  return instance;
}"
77706,"/** 
 * Register a Context.Factory to create a singleton CacheFSInfo.
 */
public static void preRegister(final Context context){
  context.put(FSInfo.class,new Context.Factory<FSInfo>(){
    public FSInfo make(){
      FSInfo instance=new CacheFSInfo();
      context.put(FSInfo.class,instance);
      return instance;
    }
  }
);
}","/** 
 * Register a Context.Factory to create a CacheFSInfo.
 */
public static void preRegister(Context context){
  context.put(FSInfo.class,new Context.Factory<FSInfo>(){
    public FSInfo make(    Context c){
      FSInfo instance=new CacheFSInfo();
      c.put(FSInfo.class,instance);
      return instance;
    }
  }
);
}"
77707,"/** 
 * Register a Context.Factory to create a JavacFileManager.
 */
public static void preRegister(final Context context){
  context.put(JavaFileManager.class,new Context.Factory<JavaFileManager>(){
    public JavaFileManager make(){
      return new JavacFileManager(context,true,null);
    }
  }
);
}","/** 
 * Register a Context.Factory to create a JavacFileManager.
 */
public static void preRegister(Context context){
  context.put(JavaFileManager.class,new Context.Factory<JavaFileManager>(){
    public JavaFileManager make(    Context c){
      return new JavacFileManager(c,true,null);
    }
  }
);
}"
77708,"public JavaFileManager make(){
  return new JavacFileManager(context,true,null);
}","public JavaFileManager make(Context c){
  return new JavacFileManager(c,true,null);
}"
77709,"/** 
 * Construct a new compiler using a shared context.
 */
public JavaCompiler(final Context context){
  this.context=context;
  context.put(compilerKey,this);
  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);
  names=Names.instance(context);
  log=Log.instance(context);
  diagFactory=JCDiagnostic.Factory.instance(context);
  reader=ClassReader.instance(context);
  make=TreeMaker.instance(context);
  writer=ClassWriter.instance(context);
  enter=Enter.instance(context);
  todo=Todo.instance(context);
  fileManager=context.get(JavaFileManager.class);
  parserFactory=ParserFactory.instance(context);
  try {
    syms=Symtab.instance(context);
  }
 catch (  CompletionFailure ex) {
    log.error(""String_Node_Str"",ex.sym,ex.getDetailValue());
    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();
  }
  source=Source.instance(context);
  attr=Attr.instance(context);
  chk=Check.instance(context);
  gen=Gen.instance(context);
  flow=Flow.instance(context);
  transTypes=TransTypes.instance(context);
  lower=Lower.instance(context);
  annotate=Annotate.instance(context);
  types=Types.instance(context);
  taskListener=context.get(TaskListener.class);
  reader.sourceCompleter=this;
  Options options=Options.instance(context);
  verbose=options.isSet(VERBOSE);
  sourceOutput=options.isSet(PRINTSOURCE);
  stubOutput=options.isSet(""String_Node_Str"");
  relax=options.isSet(""String_Node_Str"");
  printFlat=options.isSet(""String_Node_Str"");
  attrParseOnly=options.isSet(""String_Node_Str"");
  encoding=options.get(ENCODING);
  lineDebugInfo=options.isUnset(G_CUSTOM) || options.isSet(G_CUSTOM,""String_Node_Str"");
  genEndPos=options.isSet(XJCOV) || context.get(DiagnosticListener.class) != null;
  devVerbose=options.isSet(""String_Node_Str"");
  processPcks=options.isSet(""String_Node_Str"");
  werror=options.isSet(WERROR);
  if (source.compareTo(Source.DEFAULT) < 0) {
    if (options.isUnset(XLINT_CUSTOM,""String_Node_Str"" + LintCategory.OPTIONS.option)) {
      if (fileManager instanceof BaseFileManager) {
        if (((BaseFileManager)fileManager).isDefaultBootClassPath())         log.warning(LintCategory.OPTIONS,""String_Node_Str"",source.name);
      }
    }
  }
  verboseCompilePolicy=options.isSet(""String_Node_Str"");
  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY;
 else   compilePolicy=CompilePolicy.decode(options.get(""String_Node_Str""));
  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get(""String_Node_Str""));
  completionFailureName=options.isSet(""String_Node_Str"") ? names.fromString(options.get(""String_Node_Str"")) : null;
  shouldStopPolicy=options.isSet(""String_Node_Str"") ? CompileState.valueOf(options.get(""String_Node_Str"")) : null;
  if (options.isUnset(""String_Node_Str""))   log.setDiagnosticFormatter(RichDiagnosticFormatter.instance(context));
}","/** 
 * Construct a new compiler using a shared context.
 */
public JavaCompiler(Context context){
  this.context=context;
  context.put(compilerKey,this);
  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);
  names=Names.instance(context);
  log=Log.instance(context);
  diagFactory=JCDiagnostic.Factory.instance(context);
  reader=ClassReader.instance(context);
  make=TreeMaker.instance(context);
  writer=ClassWriter.instance(context);
  enter=Enter.instance(context);
  todo=Todo.instance(context);
  fileManager=context.get(JavaFileManager.class);
  parserFactory=ParserFactory.instance(context);
  try {
    syms=Symtab.instance(context);
  }
 catch (  CompletionFailure ex) {
    log.error(""String_Node_Str"",ex.sym,ex.getDetailValue());
    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();
  }
  source=Source.instance(context);
  attr=Attr.instance(context);
  chk=Check.instance(context);
  gen=Gen.instance(context);
  flow=Flow.instance(context);
  transTypes=TransTypes.instance(context);
  lower=Lower.instance(context);
  annotate=Annotate.instance(context);
  types=Types.instance(context);
  taskListener=context.get(TaskListener.class);
  reader.sourceCompleter=this;
  Options options=Options.instance(context);
  verbose=options.isSet(VERBOSE);
  sourceOutput=options.isSet(PRINTSOURCE);
  stubOutput=options.isSet(""String_Node_Str"");
  relax=options.isSet(""String_Node_Str"");
  printFlat=options.isSet(""String_Node_Str"");
  attrParseOnly=options.isSet(""String_Node_Str"");
  encoding=options.get(ENCODING);
  lineDebugInfo=options.isUnset(G_CUSTOM) || options.isSet(G_CUSTOM,""String_Node_Str"");
  genEndPos=options.isSet(XJCOV) || context.get(DiagnosticListener.class) != null;
  devVerbose=options.isSet(""String_Node_Str"");
  processPcks=options.isSet(""String_Node_Str"");
  werror=options.isSet(WERROR);
  if (source.compareTo(Source.DEFAULT) < 0) {
    if (options.isUnset(XLINT_CUSTOM,""String_Node_Str"" + LintCategory.OPTIONS.option)) {
      if (fileManager instanceof BaseFileManager) {
        if (((BaseFileManager)fileManager).isDefaultBootClassPath())         log.warning(LintCategory.OPTIONS,""String_Node_Str"",source.name);
      }
    }
  }
  verboseCompilePolicy=options.isSet(""String_Node_Str"");
  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY;
 else   compilePolicy=CompilePolicy.decode(options.get(""String_Node_Str""));
  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get(""String_Node_Str""));
  completionFailureName=options.isSet(""String_Node_Str"") ? names.fromString(options.get(""String_Node_Str"")) : null;
  shouldStopPolicy=options.isSet(""String_Node_Str"") ? CompileState.valueOf(options.get(""String_Node_Str"")) : null;
  if (options.isUnset(""String_Node_Str""))   log.setDiagnosticFormatter(RichDiagnosticFormatter.instance(context));
}"
77710,"/** 
 * Get the context for the next round of processing. Important values are propogated from round to round; other values are implicitly reset.
 */
private Context nextContext(){
  Context next=new Context();
  Options options=Options.instance(context);
  Assert.checkNonNull(options);
  next.put(Options.optionsKey,options);
  PrintWriter out=context.get(Log.outKey);
  Assert.checkNonNull(out);
  next.put(Log.outKey,out);
  final boolean shareNames=true;
  if (shareNames) {
    Names names=Names.instance(context);
    Assert.checkNonNull(names);
    next.put(Names.namesKey,names);
  }
  DiagnosticListener<?> dl=context.get(DiagnosticListener.class);
  if (dl != null)   next.put(DiagnosticListener.class,dl);
  TaskListener tl=context.get(TaskListener.class);
  if (tl != null)   next.put(TaskListener.class,tl);
  FSInfo fsInfo=context.get(FSInfo.class);
  if (fsInfo != null)   next.put(FSInfo.class,fsInfo);
  JavaFileManager jfm=context.get(JavaFileManager.class);
  Assert.checkNonNull(jfm);
  next.put(JavaFileManager.class,jfm);
  if (jfm instanceof JavacFileManager) {
    ((JavacFileManager)jfm).setContext(next);
  }
  Names names=Names.instance(context);
  Assert.checkNonNull(names);
  next.put(Names.namesKey,names);
  Keywords keywords=Keywords.instance(context);
  Assert.checkNonNull(keywords);
  next.put(Keywords.keywordsKey,keywords);
  JavaCompiler oldCompiler=JavaCompiler.instance(context);
  JavaCompiler nextCompiler=JavaCompiler.instance(next);
  nextCompiler.initRound(oldCompiler);
  filer.newRound(next);
  messager.newRound(next);
  elementUtils.setContext(next);
  typeUtils.setContext(next);
  JavacTaskImpl task=context.get(JavacTaskImpl.class);
  if (task != null) {
    next.put(JavacTaskImpl.class,task);
    task.updateContext(next);
  }
  JavacTrees trees=context.get(JavacTrees.class);
  if (trees != null) {
    next.put(JavacTrees.class,trees);
    trees.updateContext(next);
  }
  context.clear();
  return next;
}","/** 
 * Get the context for the next round of processing. Important values are propogated from round to round; other values are implicitly reset.
 */
private Context nextContext(){
  Context next=new Context(context);
  Options options=Options.instance(context);
  Assert.checkNonNull(options);
  next.put(Options.optionsKey,options);
  PrintWriter out=context.get(Log.outKey);
  Assert.checkNonNull(out);
  next.put(Log.outKey,out);
  final boolean shareNames=true;
  if (shareNames) {
    Names names=Names.instance(context);
    Assert.checkNonNull(names);
    next.put(Names.namesKey,names);
  }
  DiagnosticListener<?> dl=context.get(DiagnosticListener.class);
  if (dl != null)   next.put(DiagnosticListener.class,dl);
  TaskListener tl=context.get(TaskListener.class);
  if (tl != null)   next.put(TaskListener.class,tl);
  FSInfo fsInfo=context.get(FSInfo.class);
  if (fsInfo != null)   next.put(FSInfo.class,fsInfo);
  JavaFileManager jfm=context.get(JavaFileManager.class);
  Assert.checkNonNull(jfm);
  next.put(JavaFileManager.class,jfm);
  if (jfm instanceof JavacFileManager) {
    ((JavacFileManager)jfm).setContext(next);
  }
  Names names=Names.instance(context);
  Assert.checkNonNull(names);
  next.put(Names.namesKey,names);
  Keywords keywords=Keywords.instance(context);
  Assert.checkNonNull(keywords);
  next.put(Keywords.keywordsKey,keywords);
  JavaCompiler oldCompiler=JavaCompiler.instance(context);
  JavaCompiler nextCompiler=JavaCompiler.instance(next);
  nextCompiler.initRound(oldCompiler);
  filer.newRound(next);
  messager.newRound(next);
  elementUtils.setContext(next);
  typeUtils.setContext(next);
  JavacTaskImpl task=context.get(JavacTaskImpl.class);
  if (task != null) {
    next.put(JavacTaskImpl.class,task);
    task.updateContext(next);
  }
  JavacTrees trees=context.get(JavacTrees.class);
  if (trees != null) {
    next.put(JavacTrees.class,trees);
    trees.updateContext(next);
  }
  context.clear();
  return next;
}"
77711,"public Context(){
}","public Context(Context prev){
  kt.putAll(prev.kt);
  ft.putAll(prev.ft);
  ht.putAll(prev.ft);
}"
77712,"public void clear(){
  ht=null;
  kt=null;
}","public void clear(){
  ht=null;
  kt=null;
  ft=null;
}"
77713,T make();,T make(Context c);
77714,"public ClassReader make(){
  return new JavadocClassReader(context);
}","public ClassReader make(Context c){
  return new JavadocClassReader(c);
}"
77715,"public static void preRegister(final Context context){
  context.put(classReaderKey,new Context.Factory<ClassReader>(){
    public ClassReader make(){
      return new JavadocClassReader(context);
    }
  }
);
}","public static void preRegister(Context context){
  context.put(classReaderKey,new Context.Factory<ClassReader>(){
    public ClassReader make(    Context c){
      return new JavadocClassReader(c);
    }
  }
);
}"
77716,"public Enter make(){
  return new JavadocEnter(context);
}","public Enter make(Context c){
  return new JavadocEnter(c);
}"
77717,"public static void preRegister(final Context context){
  context.put(enterKey,new Context.Factory<Enter>(){
    public Enter make(){
      return new JavadocEnter(context);
    }
  }
);
}","public static void preRegister(Context context){
  context.put(enterKey,new Context.Factory<Enter>(){
    public Enter make(    Context c){
      return new JavadocEnter(c);
    }
  }
);
}"
77718,"public MemberEnter make(){
  return new JavadocMemberEnter(context);
}","public MemberEnter make(Context c){
  return new JavadocMemberEnter(c);
}"
77719,"public static void preRegister(final Context context){
  context.put(memberEnterKey,new Context.Factory<MemberEnter>(){
    public MemberEnter make(){
      return new JavadocMemberEnter(context);
    }
  }
);
}","public static void preRegister(Context context){
  context.put(memberEnterKey,new Context.Factory<MemberEnter>(){
    public MemberEnter make(    Context c){
      return new JavadocMemberEnter(c);
    }
  }
);
}"
77720,"public Todo make(){
  return new JavadocTodo(context);
}","public Todo make(Context c){
  return new JavadocTodo(c);
}"
77721,"public static void preRegister(final Context context){
  context.put(todoKey,new Context.Factory<Todo>(){
    public Todo make(){
      return new JavadocTodo(context);
    }
  }
);
}","public static void preRegister(Context context){
  context.put(todoKey,new Context.Factory<Todo>(){
    public Todo make(    Context c){
      return new JavadocTodo(c);
    }
  }
);
}"
77722,"public Log make(){
  return new Messager(context,programName,errWriter,warnWriter,noticeWriter);
}","public Log make(Context c){
  return new Messager(c,programName,errWriter,warnWriter,noticeWriter);
}"
77723,"public static void preRegister(final Context context,final String programName,final PrintWriter errWriter,final PrintWriter warnWriter,final PrintWriter noticeWriter){
  context.put(logKey,new Context.Factory<Log>(){
    public Log make(){
      return new Messager(context,programName,errWriter,warnWriter,noticeWriter);
    }
  }
);
}","public static void preRegister(Context context,final String programName,final PrintWriter errWriter,final PrintWriter warnWriter,final PrintWriter noticeWriter){
  context.put(logKey,new Context.Factory<Log>(){
    public Log make(    Context c){
      return new Messager(c,programName,errWriter,warnWriter,noticeWriter);
    }
  }
);
}"
77724,"public JavacMessages make(){
  return new ArgTypeMessages(c){
    @Override public String getLocalizedString(    Locale l,    String key,    Object... args){
      return getKeyArgsString(key,args);
    }
  }
;
}","public JavacMessages make(Context c){
  return new ArgTypeMessages(c){
    @Override public String getLocalizedString(    Locale l,    String key,    Object... args){
      return getKeyArgsString(key,args);
    }
  }
;
}"
77725,"static void preRegister(final Context c){
  c.put(JavacMessages.messagesKey,new Context.Factory<JavacMessages>(){
    public JavacMessages make(){
      return new ArgTypeMessages(c){
        @Override public String getLocalizedString(        Locale l,        String key,        Object... args){
          return getKeyArgsString(key,args);
        }
      }
;
    }
  }
);
}","static void preRegister(Context context){
  context.put(JavacMessages.messagesKey,new Context.Factory<JavacMessages>(){
    public JavacMessages make(    Context c){
      return new ArgTypeMessages(c){
        @Override public String getLocalizedString(        Locale l,        String key,        Object... args){
          return getKeyArgsString(key,args);
        }
      }
;
    }
  }
);
}"
77726,"public JavacMessages make(){
  return new MessageTracker(c){
    @Override public String getLocalizedString(    Locale l,    String key,    Object... args){
      keys.add(key);
      return super.getLocalizedString(l,key,args);
    }
  }
;
}","public JavacMessages make(Context c){
  return new MessageTracker(c){
    @Override public String getLocalizedString(    Locale l,    String key,    Object... args){
      keys.add(key);
      return super.getLocalizedString(l,key,args);
    }
  }
;
}"
77727,"static void preRegister(final Context c,final Set<String> keys){
  if (keys != null) {
    c.put(JavacMessages.messagesKey,new Context.Factory<JavacMessages>(){
      public JavacMessages make(){
        return new MessageTracker(c){
          @Override public String getLocalizedString(          Locale l,          String key,          Object... args){
            keys.add(key);
            return super.getLocalizedString(l,key,args);
          }
        }
;
      }
    }
);
  }
}","static void preRegister(Context c,final Set<String> keys){
  if (keys != null) {
    c.put(JavacMessages.messagesKey,new Context.Factory<JavacMessages>(){
      public JavacMessages make(      Context c){
        return new MessageTracker(c){
          @Override public String getLocalizedString(          Locale l,          String key,          Object... args){
            keys.add(key);
            return super.getLocalizedString(l,key,args);
          }
        }
;
      }
    }
);
  }
}"
77728,"public Entry next(){
  Entry e=super.shadowed;
  while (e.scope != null && (e.sym.name != sym.name || e.sym.owner != e.scope.owner))   e=e.shadowed;
  return e;
}","public Entry next(){
  Entry e=super.shadowed;
  while (isBogus())   e=e.shadowed;
  return e;
}"
77729,"protected Scope(Symbol owner,ScopeCounter scopeCounter){
  this(null,owner,new Entry[INITIAL_SIZE],scopeCounter);
  for (int i=0; i < INITIAL_SIZE; i++)   table[i]=sentinel;
}","protected Scope(Symbol owner,ScopeCounter scopeCounter){
  this(null,owner,new Entry[INITIAL_SIZE],scopeCounter);
}"
77730,"protected Scope(Symbol owner,ScopeCounter scopeCounter){
  this(null,owner,new Entry[INITIAL_SIZE],scopeCounter);
}","protected Scope(Symbol owner,ScopeCounter scopeCounter){
  this(null,owner,new Entry[INITIAL_SIZE],scopeCounter);
  for (int i=0; i < INITIAL_SIZE; i++)   table[i]=sentinel;
}"
77731,"@Override public void write(int b) throws IOException {
  size++;
}","@Override public void write(int b){
  size++;
}"
77732,"public int byteLength(){
class SizeOutputStream extends OutputStream {
    @Override public void write(    int b) throws IOException {
      size++;
    }
    int size;
  }
  SizeOutputStream sizeOut=new SizeOutputStream();
  DataOutputStream out=new DataOutputStream(sizeOut);
  try {
    out.writeUTF(value);
  }
 catch (  IOException ignore) {
  }
  return 1 + sizeOut.size;
}","public int byteLength(){
class SizeOutputStream extends OutputStream {
    @Override public void write(    int b){
      size++;
    }
    int size;
  }
  SizeOutputStream sizeOut=new SizeOutputStream();
  DataOutputStream out=new DataOutputStream(sizeOut);
  try {
    out.writeUTF(value);
  }
 catch (  IOException ignore) {
  }
  return 1 + sizeOut.size;
}"
77733,"/** 
 * Constructor
 * @param context      Context for this javadoc instance.
 */
private DocEnv(Context context){
  context.put(docEnvKey,this);
  messager=Messager.instance0(context);
  syms=Symtab.instance(context);
  reader=JavadocClassReader.instance0(context);
  enter=JavadocEnter.instance0(context);
  attr=Attr.instance(context);
  names=Names.instance(context);
  externalizableSym=reader.enterClass(names.fromString(""String_Node_Str""));
  chk=Check.instance(context);
  types=Types.instance(context);
  fileManager=context.get(JavaFileManager.class);
  this.doclocale=new DocLocale(this,""String_Node_Str"",breakiterator);
}","/** 
 * Constructor
 * @param context      Context for this javadoc instance.
 */
private DocEnv(Context context){
  context.put(docEnvKey,this);
  messager=Messager.instance0(context);
  syms=Symtab.instance(context);
  reader=JavadocClassReader.instance0(context);
  enter=JavadocEnter.instance0(context);
  names=Names.instance(context);
  externalizableSym=reader.enterClass(names.fromString(""String_Node_Str""));
  chk=Check.instance(context);
  types=Types.instance(context);
  fileManager=context.get(JavaFileManager.class);
  this.doclocale=new DocLocale(this,""String_Node_Str"",breakiterator);
}"
77734,"/** 
 * Default class enter visitor method: do nothing.
 */
public void visitTree(JCTree tree){
  result=null;
}","/** 
 * Default class enter visitor method: do nothing.
 */
@Override public void visitTree(JCTree tree){
  result=null;
}"
77735,"public void visitClassDef(JCClassDecl tree){
  Symbol owner=env.info.scope.owner;
  Scope enclScope=enterScope(env);
  ClassSymbol c;
  if (owner.kind == PCK) {
    PackageSymbol packge=(PackageSymbol)owner;
    for (Symbol q=packge; q != null && q.kind == PCK; q=q.owner)     q.flags_field|=EXISTS;
    c=reader.enterClass(tree.name,packge);
    packge.members().enterIfAbsent(c);
    if ((tree.mods.flags & PUBLIC) != 0 && !classNameMatchesFileName(c,env)) {
      log.error(tree.pos(),""String_Node_Str"",tree.name);
    }
  }
 else {
    if (!tree.name.isEmpty() && !chk.checkUniqueClassName(tree.pos(),tree.name,enclScope)) {
      result=null;
      return;
    }
    if (owner.kind == TYP) {
      c=reader.enterClass(tree.name,(TypeSymbol)owner);
      if ((owner.flags_field & INTERFACE) != 0) {
        tree.mods.flags|=PUBLIC | STATIC;
      }
    }
 else {
      c=reader.defineClass(tree.name,owner);
      c.flatname=chk.localClassName(c);
      if (!c.name.isEmpty())       chk.checkTransparentClass(tree.pos(),c,env.info.scope);
    }
  }
  tree.sym=c;
  if (chk.compiled.get(c.flatname) != null) {
    duplicateClass(tree.pos(),c);
    result=types.createErrorType(tree.name,(TypeSymbol)owner,Type.noType);
    tree.sym=(ClassSymbol)result.tsym;
    return;
  }
  chk.compiled.put(c.flatname,c);
  enclScope.enter(c);
  Env<AttrContext> localEnv=classEnv(tree,env);
  typeEnvs.put(c,localEnv);
  c.completer=memberEnter;
  c.flags_field=chk.checkFlags(tree.pos(),tree.mods.flags,c,tree);
  c.sourcefile=env.toplevel.sourcefile;
  c.members_field=new Scope(c);
  ClassType ct=(ClassType)c.type;
  if (owner.kind != PCK && (c.flags_field & STATIC) == 0) {
    Symbol owner1=owner;
    while ((owner1.kind & (VAR | MTH)) != 0 && (owner1.flags_field & STATIC) == 0) {
      owner1=owner1.owner;
    }
    if (owner1.kind == TYP) {
      ct.setEnclosingType(owner1.type);
    }
  }
  ct.typarams_field=classEnter(tree.typarams,localEnv);
  if (!c.isLocal() && uncompleted != null)   uncompleted.append(c);
  classEnter(tree.defs,localEnv);
  result=c.type;
}","@Override public void visitClassDef(JCClassDecl tree){
  Symbol owner=env.info.scope.owner;
  Scope enclScope=enterScope(env);
  ClassSymbol c;
  if (owner.kind == PCK) {
    PackageSymbol packge=(PackageSymbol)owner;
    for (Symbol q=packge; q != null && q.kind == PCK; q=q.owner)     q.flags_field|=EXISTS;
    c=reader.enterClass(tree.name,packge);
    packge.members().enterIfAbsent(c);
    if ((tree.mods.flags & PUBLIC) != 0 && !classNameMatchesFileName(c,env)) {
      log.error(tree.pos(),""String_Node_Str"",tree.name);
    }
  }
 else {
    if (!tree.name.isEmpty() && !chk.checkUniqueClassName(tree.pos(),tree.name,enclScope)) {
      result=null;
      return;
    }
    if (owner.kind == TYP) {
      c=reader.enterClass(tree.name,(TypeSymbol)owner);
      if ((owner.flags_field & INTERFACE) != 0) {
        tree.mods.flags|=PUBLIC | STATIC;
      }
    }
 else {
      c=reader.defineClass(tree.name,owner);
      c.flatname=chk.localClassName(c);
      if (!c.name.isEmpty())       chk.checkTransparentClass(tree.pos(),c,env.info.scope);
    }
  }
  tree.sym=c;
  if (chk.compiled.get(c.flatname) != null) {
    duplicateClass(tree.pos(),c);
    result=types.createErrorType(tree.name,(TypeSymbol)owner,Type.noType);
    tree.sym=(ClassSymbol)result.tsym;
    return;
  }
  chk.compiled.put(c.flatname,c);
  enclScope.enter(c);
  Env<AttrContext> localEnv=classEnv(tree,env);
  typeEnvs.put(c,localEnv);
  c.completer=memberEnter;
  c.flags_field=chk.checkFlags(tree.pos(),tree.mods.flags,c,tree);
  c.sourcefile=env.toplevel.sourcefile;
  c.members_field=new Scope(c);
  ClassType ct=(ClassType)c.type;
  if (owner.kind != PCK && (c.flags_field & STATIC) == 0) {
    Symbol owner1=owner;
    while ((owner1.kind & (VAR | MTH)) != 0 && (owner1.flags_field & STATIC) == 0) {
      owner1=owner1.owner;
    }
    if (owner1.kind == TYP) {
      ct.setEnclosingType(owner1.type);
    }
  }
  ct.typarams_field=classEnter(tree.typarams,localEnv);
  if (!c.isLocal() && uncompleted != null)   uncompleted.append(c);
  classEnter(tree.defs,localEnv);
  result=c.type;
}"
77736,"public void visitTopLevel(JCCompilationUnit tree){
  JavaFileObject prev=log.useSource(tree.sourcefile);
  boolean addEnv=false;
  boolean isPkgInfo=tree.sourcefile.isNameCompatible(""String_Node_Str"",JavaFileObject.Kind.SOURCE);
  if (tree.pid != null) {
    tree.packge=reader.enterPackage(TreeInfo.fullName(tree.pid));
    if (tree.packageAnnotations.nonEmpty()) {
      if (isPkgInfo) {
        addEnv=true;
      }
 else {
        log.error(tree.packageAnnotations.head.pos(),""String_Node_Str"");
      }
    }
  }
 else {
    tree.packge=syms.unnamedPackage;
  }
  tree.packge.complete();
  Env<AttrContext> env=topLevelEnv(tree);
  if (isPkgInfo) {
    Env<AttrContext> env0=typeEnvs.get(tree.packge);
    if (env0 == null) {
      typeEnvs.put(tree.packge,env);
    }
 else {
      JCCompilationUnit tree0=env0.toplevel;
      if (!fileManager.isSameFile(tree.sourcefile,tree0.sourcefile)) {
        log.warning(tree.pid != null ? tree.pid.pos() : null,""String_Node_Str"",tree.packge);
        if (addEnv || (tree0.packageAnnotations.isEmpty() && tree.docComments != null && tree.docComments.get(tree) != null)) {
          typeEnvs.put(tree.packge,env);
        }
      }
    }
    for (Symbol q=tree.packge; q != null && q.kind == PCK; q=q.owner)     q.flags_field|=EXISTS;
    Name name=names.package_info;
    ClassSymbol c=reader.enterClass(name,tree.packge);
    c.flatname=names.fromString(tree.packge + ""String_Node_Str"" + name);
    c.sourcefile=tree.sourcefile;
    c.completer=null;
    c.members_field=new Scope(c);
    tree.packge.package_info=c;
  }
  classEnter(tree.defs,env);
  if (addEnv) {
    todo.append(env);
  }
  log.useSource(prev);
  result=null;
}","@Override public void visitTopLevel(JCCompilationUnit tree){
  JavaFileObject prev=log.useSource(tree.sourcefile);
  boolean addEnv=false;
  boolean isPkgInfo=tree.sourcefile.isNameCompatible(""String_Node_Str"",JavaFileObject.Kind.SOURCE);
  if (tree.pid != null) {
    tree.packge=reader.enterPackage(TreeInfo.fullName(tree.pid));
    if (tree.packageAnnotations.nonEmpty()) {
      if (isPkgInfo) {
        addEnv=true;
      }
 else {
        log.error(tree.packageAnnotations.head.pos(),""String_Node_Str"");
      }
    }
  }
 else {
    tree.packge=syms.unnamedPackage;
  }
  tree.packge.complete();
  Env<AttrContext> topEnv=topLevelEnv(tree);
  if (isPkgInfo) {
    Env<AttrContext> env0=typeEnvs.get(tree.packge);
    if (env0 == null) {
      typeEnvs.put(tree.packge,topEnv);
    }
 else {
      JCCompilationUnit tree0=env0.toplevel;
      if (!fileManager.isSameFile(tree.sourcefile,tree0.sourcefile)) {
        log.warning(tree.pid != null ? tree.pid.pos() : null,""String_Node_Str"",tree.packge);
        if (addEnv || (tree0.packageAnnotations.isEmpty() && tree.docComments != null && tree.docComments.get(tree) != null)) {
          typeEnvs.put(tree.packge,topEnv);
        }
      }
    }
    for (Symbol q=tree.packge; q != null && q.kind == PCK; q=q.owner)     q.flags_field|=EXISTS;
    Name name=names.package_info;
    ClassSymbol c=reader.enterClass(name,tree.packge);
    c.flatname=names.fromString(tree.packge + ""String_Node_Str"" + name);
    c.sourcefile=tree.sourcefile;
    c.completer=null;
    c.members_field=new Scope(c);
    tree.packge.package_info=c;
  }
  classEnter(tree.defs,topEnv);
  if (addEnv) {
    todo.append(topEnv);
  }
  log.useSource(prev);
  result=null;
}"
77737,"/** 
 * Class enter visitor method for type parameters. Enter a symbol for type parameter in local scope, after checking that it is unique.
 */
public void visitTypeParameter(JCTypeParameter tree){
  TypeVar a=(tree.type != null) ? (TypeVar)tree.type : new TypeVar(tree.name,env.info.scope.owner,syms.botType);
  tree.type=a;
  if (chk.checkUnique(tree.pos(),a.tsym,env.info.scope)) {
    env.info.scope.enter(a.tsym);
  }
  result=a;
}","/** 
 * Class enter visitor method for type parameters. Enter a symbol for type parameter in local scope, after checking that it is unique.
 */
@Override public void visitTypeParameter(JCTypeParameter tree){
  TypeVar a=(tree.type != null) ? (TypeVar)tree.type : new TypeVar(tree.name,env.info.scope.owner,syms.botType);
  tree.type=a;
  if (chk.checkUnique(tree.pos(),a.tsym,env.info.scope)) {
    env.info.scope.enter(a.tsym);
  }
  result=a;
}"
77738,"/** 
 * Main method: enter one class from a list of toplevel trees and place the rest on uncompleted for later processing.
 * @param trees      The list of trees to be processed.
 * @param c          The class symbol to be processed.
 */
public void complete(List<JCCompilationUnit> trees,ClassSymbol c){
  annotate.enterStart();
  ListBuffer<ClassSymbol> prevUncompleted=uncompleted;
  if (memberEnter.completionEnabled)   uncompleted=new ListBuffer<ClassSymbol>();
  try {
    classEnter(trees,null);
    if (memberEnter.completionEnabled) {
      while (uncompleted.nonEmpty()) {
        ClassSymbol clazz=uncompleted.next();
        if (c == null || c == clazz || prevUncompleted == null)         clazz.complete();
 else         prevUncompleted.append(clazz);
      }
      for (      JCCompilationUnit tree : trees) {
        if (tree.starImportScope.elems == null) {
          JavaFileObject prev=log.useSource(tree.sourcefile);
          Env<AttrContext> env=typeEnvs.get(tree);
          if (env == null)           env=topLevelEnv(tree);
          memberEnter.memberEnter(tree,env);
          log.useSource(prev);
        }
      }
    }
  }
  finally {
    uncompleted=prevUncompleted;
    annotate.enterDone();
  }
}","/** 
 * Main method: enter one class from a list of toplevel trees and place the rest on uncompleted for later processing.
 * @param trees      The list of trees to be processed.
 * @param c          The class symbol to be processed.
 */
public void complete(List<JCCompilationUnit> trees,ClassSymbol c){
  annotate.enterStart();
  ListBuffer<ClassSymbol> prevUncompleted=uncompleted;
  if (memberEnter.completionEnabled)   uncompleted=new ListBuffer<ClassSymbol>();
  try {
    classEnter(trees,null);
    if (memberEnter.completionEnabled) {
      while (uncompleted.nonEmpty()) {
        ClassSymbol clazz=uncompleted.next();
        if (c == null || c == clazz || prevUncompleted == null)         clazz.complete();
 else         prevUncompleted.append(clazz);
      }
      for (      JCCompilationUnit tree : trees) {
        if (tree.starImportScope.elems == null) {
          JavaFileObject prev=log.useSource(tree.sourcefile);
          Env<AttrContext> topEnv=topLevelEnv(tree);
          memberEnter.memberEnter(tree,topEnv);
          log.useSource(prev);
        }
      }
    }
  }
  finally {
    uncompleted=prevUncompleted;
    annotate.enterDone();
  }
}"
77739,"public void visitNewArray(JCNewArray tree){
  tree.elemtype=translate(tree.elemtype,null);
  translate(tree.dims,syms.intType);
  tree.elems=translate(tree.elems,(tree.type == null) ? null : erasure(types.elemtype(tree.type)));
  tree.type=erasure(tree.type);
  result=tree;
}","public void visitNewArray(JCNewArray tree){
  tree.elemtype=translate(tree.elemtype,null);
  translate(tree.dims,syms.intType);
  if (tree.type != null) {
    tree.elems=translate(tree.elems,erasure(types.elemtype(tree.type)));
    tree.type=erasure(tree.type);
  }
 else {
    tree.elems=translate(tree.elems,null);
  }
  result=tree;
}"
77740,"/** 
 * A KindName representing a given symbol
 */
public static KindName kindName(Symbol sym){
switch (sym.getKind()) {
case PACKAGE:
    return KindName.PACKAGE;
case ENUM:
case ANNOTATION_TYPE:
case INTERFACE:
case CLASS:
  return KindName.CLASS;
case TYPE_PARAMETER:
return KindName.TYPEVAR;
case ENUM_CONSTANT:
case FIELD:
case PARAMETER:
case LOCAL_VARIABLE:
case EXCEPTION_PARAMETER:
return KindName.VAR;
case METHOD:
case CONSTRUCTOR:
case STATIC_INIT:
case INSTANCE_INIT:
return KindName.METHOD;
default :
if (sym.kind == VAL) return KindName.VAL;
 else throw new AssertionError(""String_Node_Str"" + sym.getKind());
}
}","/** 
 * A KindName representing a given symbol
 */
public static KindName kindName(Symbol sym){
switch (sym.getKind()) {
case PACKAGE:
    return KindName.PACKAGE;
case ENUM:
  return KindName.ENUM;
case ANNOTATION_TYPE:
case CLASS:
return KindName.CLASS;
case INTERFACE:
return KindName.INTERFACE;
case TYPE_PARAMETER:
return KindName.TYPEVAR;
case ENUM_CONSTANT:
case FIELD:
case PARAMETER:
case LOCAL_VARIABLE:
case EXCEPTION_PARAMETER:
return KindName.VAR;
case CONSTRUCTOR:
return KindName.CONSTRUCTOR;
case METHOD:
case STATIC_INIT:
case INSTANCE_INIT:
return KindName.METHOD;
default :
if (sym.kind == VAL) return KindName.VAL;
 else throw new AssertionError(""String_Node_Str"" + sym.getKind());
}
}"
77741,"/** 
 * The number of errors reported so far.
 */
public int errorCount(){
  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.errorCount();
 else   return log.nerrors;
}","/** 
 * The number of errors reported so far.
 */
public int errorCount(){
  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.errorCount();
 else {
    if (werror && log.nerrors == 0 && log.nwarnings > 0) {
      log.error(""String_Node_Str"");
    }
  }
  return log.nerrors;
}"
77742,"/** 
 * Construct a new compiler using a shared context.
 */
public JavaCompiler(final Context context){
  this.context=context;
  context.put(compilerKey,this);
  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);
  names=Names.instance(context);
  log=Log.instance(context);
  diagFactory=JCDiagnostic.Factory.instance(context);
  reader=ClassReader.instance(context);
  make=TreeMaker.instance(context);
  writer=ClassWriter.instance(context);
  enter=Enter.instance(context);
  todo=Todo.instance(context);
  fileManager=context.get(JavaFileManager.class);
  parserFactory=ParserFactory.instance(context);
  try {
    syms=Symtab.instance(context);
  }
 catch (  CompletionFailure ex) {
    log.error(""String_Node_Str"",ex.sym,ex.getDetailValue());
    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();
  }
  source=Source.instance(context);
  attr=Attr.instance(context);
  chk=Check.instance(context);
  gen=Gen.instance(context);
  flow=Flow.instance(context);
  transTypes=TransTypes.instance(context);
  lower=Lower.instance(context);
  annotate=Annotate.instance(context);
  types=Types.instance(context);
  taskListener=context.get(TaskListener.class);
  reader.sourceCompleter=this;
  Options options=Options.instance(context);
  verbose=options.get(""String_Node_Str"") != null;
  sourceOutput=options.get(""String_Node_Str"") != null;
  stubOutput=options.get(""String_Node_Str"") != null;
  relax=options.get(""String_Node_Str"") != null;
  printFlat=options.get(""String_Node_Str"") != null;
  attrParseOnly=options.get(""String_Node_Str"") != null;
  encoding=options.get(""String_Node_Str"");
  lineDebugInfo=options.get(""String_Node_Str"") == null || options.get(""String_Node_Str"") != null;
  genEndPos=options.get(""String_Node_Str"") != null || context.get(DiagnosticListener.class) != null;
  devVerbose=options.get(""String_Node_Str"") != null;
  processPcks=options.get(""String_Node_Str"") != null;
  verboseCompilePolicy=options.get(""String_Node_Str"") != null;
  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY;
 else   compilePolicy=CompilePolicy.decode(options.get(""String_Node_Str""));
  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get(""String_Node_Str""));
  completionFailureName=(options.get(""String_Node_Str"") != null) ? names.fromString(options.get(""String_Node_Str"")) : null;
}","/** 
 * Construct a new compiler using a shared context.
 */
public JavaCompiler(final Context context){
  this.context=context;
  context.put(compilerKey,this);
  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);
  names=Names.instance(context);
  log=Log.instance(context);
  diagFactory=JCDiagnostic.Factory.instance(context);
  reader=ClassReader.instance(context);
  make=TreeMaker.instance(context);
  writer=ClassWriter.instance(context);
  enter=Enter.instance(context);
  todo=Todo.instance(context);
  fileManager=context.get(JavaFileManager.class);
  parserFactory=ParserFactory.instance(context);
  try {
    syms=Symtab.instance(context);
  }
 catch (  CompletionFailure ex) {
    log.error(""String_Node_Str"",ex.sym,ex.getDetailValue());
    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();
  }
  source=Source.instance(context);
  attr=Attr.instance(context);
  chk=Check.instance(context);
  gen=Gen.instance(context);
  flow=Flow.instance(context);
  transTypes=TransTypes.instance(context);
  lower=Lower.instance(context);
  annotate=Annotate.instance(context);
  types=Types.instance(context);
  taskListener=context.get(TaskListener.class);
  reader.sourceCompleter=this;
  Options options=Options.instance(context);
  verbose=options.get(""String_Node_Str"") != null;
  sourceOutput=options.get(""String_Node_Str"") != null;
  stubOutput=options.get(""String_Node_Str"") != null;
  relax=options.get(""String_Node_Str"") != null;
  printFlat=options.get(""String_Node_Str"") != null;
  attrParseOnly=options.get(""String_Node_Str"") != null;
  encoding=options.get(""String_Node_Str"");
  lineDebugInfo=options.get(""String_Node_Str"") == null || options.get(""String_Node_Str"") != null;
  genEndPos=options.get(""String_Node_Str"") != null || context.get(DiagnosticListener.class) != null;
  devVerbose=options.get(""String_Node_Str"") != null;
  processPcks=options.get(""String_Node_Str"") != null;
  werror=options.get(""String_Node_Str"") != null;
  verboseCompilePolicy=options.get(""String_Node_Str"") != null;
  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY;
 else   compilePolicy=CompilePolicy.decode(options.get(""String_Node_Str""));
  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get(""String_Node_Str""));
  completionFailureName=(options.get(""String_Node_Str"") != null) ? names.fromString(options.get(""String_Node_Str"")) : null;
}"
77743,"/** 
 * Programmatic interface for main function.
 * @param args    The command line parameters.
 */
public int compile(String[] args,Context context,List<JavaFileObject> fileObjects,Iterable<? extends Processor> processors){
  if (options == null)   options=Options.instance(context);
  filenames=new ListBuffer<File>();
  classnames=new ListBuffer<String>();
  JavaCompiler comp=null;
  try {
    if (args.length == 0 && fileObjects.isEmpty()) {
      help();
      return EXIT_CMDERR;
    }
    List<File> files;
    try {
      files=processArgs(CommandLine.parse(args));
      if (files == null) {
        return EXIT_CMDERR;
      }
 else       if (files.isEmpty() && fileObjects.isEmpty() && classnames.isEmpty()) {
        if (options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null)         return EXIT_OK;
        error(""String_Node_Str"");
        return EXIT_CMDERR;
      }
    }
 catch (    java.io.FileNotFoundException e) {
      Log.printLines(out,ownName + ""String_Node_Str"" + getLocalizedString(""String_Node_Str"",e.getMessage()));
      return EXIT_SYSERR;
    }
    boolean forceStdOut=options.get(""String_Node_Str"") != null;
    if (forceStdOut) {
      out.flush();
      out=new PrintWriter(System.out,true);
    }
    context.put(Log.outKey,out);
    boolean batchMode=(options.get(""String_Node_Str"") == null && System.getProperty(""String_Node_Str"") == null);
    if (batchMode)     CacheFSInfo.preRegister(context);
    fileManager=context.get(JavaFileManager.class);
    comp=JavaCompiler.instance(context);
    if (comp == null)     return EXIT_SYSERR;
    Log log=Log.instance(context);
    if (!files.isEmpty()) {
      comp=JavaCompiler.instance(context);
      List<JavaFileObject> otherFiles=List.nil();
      JavacFileManager dfm=(JavacFileManager)fileManager;
      for (      JavaFileObject fo : dfm.getJavaFileObjectsFromFiles(files))       otherFiles=otherFiles.prepend(fo);
      for (      JavaFileObject fo : otherFiles)       fileObjects=fileObjects.prepend(fo);
    }
    comp.compile(fileObjects,classnames.toList(),processors);
    if (log.expectDiagKeys != null) {
      if (log.expectDiagKeys.size() == 0) {
        Log.printLines(log.noticeWriter,""String_Node_Str"");
        return EXIT_OK;
      }
 else {
        Log.printLines(log.noticeWriter,""String_Node_Str"" + log.expectDiagKeys);
        return EXIT_ERROR;
      }
    }
    if (comp.errorCount() != 0 || options.get(""String_Node_Str"") != null && comp.warningCount() != 0)     return EXIT_ERROR;
  }
 catch (  IOException ex) {
    ioMessage(ex);
    return EXIT_SYSERR;
  }
catch (  OutOfMemoryError ex) {
    resourceMessage(ex);
    return EXIT_SYSERR;
  }
catch (  StackOverflowError ex) {
    resourceMessage(ex);
    return EXIT_SYSERR;
  }
catch (  FatalError ex) {
    feMessage(ex);
    return EXIT_SYSERR;
  }
catch (  AnnotationProcessingError ex) {
    apMessage(ex);
    return EXIT_SYSERR;
  }
catch (  ClientCodeException ex) {
    throw new RuntimeException(ex.getCause());
  }
catch (  PropagatedException ex) {
    throw ex.getCause();
  }
catch (  Throwable ex) {
    if (comp == null || comp.errorCount() == 0 || options == null || options.get(""String_Node_Str"") != null)     bugMessage(ex);
    return EXIT_ABNORMAL;
  }
 finally {
    if (comp != null)     comp.close();
    filenames=null;
    options=null;
  }
  return EXIT_OK;
}","/** 
 * Programmatic interface for main function.
 * @param args    The command line parameters.
 */
public int compile(String[] args,Context context,List<JavaFileObject> fileObjects,Iterable<? extends Processor> processors){
  if (options == null)   options=Options.instance(context);
  filenames=new ListBuffer<File>();
  classnames=new ListBuffer<String>();
  JavaCompiler comp=null;
  try {
    if (args.length == 0 && fileObjects.isEmpty()) {
      help();
      return EXIT_CMDERR;
    }
    List<File> files;
    try {
      files=processArgs(CommandLine.parse(args));
      if (files == null) {
        return EXIT_CMDERR;
      }
 else       if (files.isEmpty() && fileObjects.isEmpty() && classnames.isEmpty()) {
        if (options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null)         return EXIT_OK;
        error(""String_Node_Str"");
        return EXIT_CMDERR;
      }
    }
 catch (    java.io.FileNotFoundException e) {
      Log.printLines(out,ownName + ""String_Node_Str"" + getLocalizedString(""String_Node_Str"",e.getMessage()));
      return EXIT_SYSERR;
    }
    boolean forceStdOut=options.get(""String_Node_Str"") != null;
    if (forceStdOut) {
      out.flush();
      out=new PrintWriter(System.out,true);
    }
    context.put(Log.outKey,out);
    boolean batchMode=(options.get(""String_Node_Str"") == null && System.getProperty(""String_Node_Str"") == null);
    if (batchMode)     CacheFSInfo.preRegister(context);
    fileManager=context.get(JavaFileManager.class);
    comp=JavaCompiler.instance(context);
    if (comp == null)     return EXIT_SYSERR;
    Log log=Log.instance(context);
    if (!files.isEmpty()) {
      comp=JavaCompiler.instance(context);
      List<JavaFileObject> otherFiles=List.nil();
      JavacFileManager dfm=(JavacFileManager)fileManager;
      for (      JavaFileObject fo : dfm.getJavaFileObjectsFromFiles(files))       otherFiles=otherFiles.prepend(fo);
      for (      JavaFileObject fo : otherFiles)       fileObjects=fileObjects.prepend(fo);
    }
    comp.compile(fileObjects,classnames.toList(),processors);
    if (log.expectDiagKeys != null) {
      if (log.expectDiagKeys.size() == 0) {
        Log.printLines(log.noticeWriter,""String_Node_Str"");
        return EXIT_OK;
      }
 else {
        Log.printLines(log.noticeWriter,""String_Node_Str"" + log.expectDiagKeys);
        return EXIT_ERROR;
      }
    }
    if (comp.errorCount() != 0)     return EXIT_ERROR;
  }
 catch (  IOException ex) {
    ioMessage(ex);
    return EXIT_SYSERR;
  }
catch (  OutOfMemoryError ex) {
    resourceMessage(ex);
    return EXIT_SYSERR;
  }
catch (  StackOverflowError ex) {
    resourceMessage(ex);
    return EXIT_SYSERR;
  }
catch (  FatalError ex) {
    feMessage(ex);
    return EXIT_SYSERR;
  }
catch (  AnnotationProcessingError ex) {
    apMessage(ex);
    return EXIT_SYSERR;
  }
catch (  ClientCodeException ex) {
    throw new RuntimeException(ex.getCause());
  }
catch (  PropagatedException ex) {
    throw ex.getCause();
  }
catch (  Throwable ex) {
    if (comp == null || comp.errorCount() == 0 || options == null || options.get(""String_Node_Str"") != null)     bugMessage(ex);
    return EXIT_ABNORMAL;
  }
 finally {
    if (comp != null)     comp.close();
    filenames=null;
    options=null;
  }
  return EXIT_OK;
}"
77744,"/** 
 * Get all the recognized options.
 * @param helper an {@code OptionHelper} to help when processing options
 * @return an array of options
 */
public static Option[] getAll(final OptionHelper helper){
  return new Option[]{new Option(G,""String_Node_Str""),new Option(G_NONE,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
  }
,new Option(G_CUSTOM,""String_Node_Str"",Option.ChoiceKind.ANYOF,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new XOption(XLINT,""String_Node_Str""),new XOption(XLINT_CUSTOM,""String_Node_Str"",Option.ChoiceKind.ANYOF,getXLintChoices()),new Option(NOWARN,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new Option(VERBOSE,""String_Node_Str""),new Option(DEPRECATION,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new Option(CLASSPATH,""String_Node_Str"",""String_Node_Str""),new Option(CP,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(SOURCEPATH,""String_Node_Str"",""String_Node_Str""),new Option(BOOTCLASSPATH,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      return super.process(options,option,arg);
    }
  }
,new XOption(XBOOTCLASSPATH_PREPEND,""String_Node_Str"",""String_Node_Str""),new XOption(XBOOTCLASSPATH_APPEND,""String_Node_Str"",""String_Node_Str""),new XOption(XBOOTCLASSPATH,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(EXTDIRS,""String_Node_Str"",""String_Node_Str""),new XOption(DJAVA_EXT_DIRS,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(ENDORSEDDIRS,""String_Node_Str"",""String_Node_Str""),new XOption(DJAVA_ENDORSED_DIRS,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(PROC,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new Option(PROCESSOR,""String_Node_Str"",""String_Node_Str""),new Option(PROCESSORPATH,""String_Node_Str"",""String_Node_Str""),new Option(D,""String_Node_Str"",""String_Node_Str""),new Option(S,""String_Node_Str"",""String_Node_Str""),new Option(IMPLICIT,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new Option(ENCODING,""String_Node_Str"",""String_Node_Str""),new Option(SOURCE,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String operand){
      Source source=Source.lookup(operand);
      if (source == null) {
        helper.error(""String_Node_Str"",operand);
        return true;
      }
      return super.process(options,option,operand);
    }
  }
,new Option(TARGET,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String operand){
      Target target=Target.lookup(operand);
      if (target == null) {
        helper.error(""String_Node_Str"",operand);
        return true;
      }
      return super.process(options,option,operand);
    }
  }
,new Option(VERSION,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printVersion();
      return super.process(options,option);
    }
  }
,new HiddenOption(FULLVERSION){
    @Override public boolean process(    Options options,    String option){
      helper.printFullVersion();
      return super.process(options,option);
    }
  }
,new Option(HELP,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printHelp();
      return super.process(options,option);
    }
  }
,new Option(A,""String_Node_Str"",""String_Node_Str""){
    @Override String helpSynopsis(){
      hasSuffix=true;
      return super.helpSynopsis();
    }
    @Override public boolean matches(    String arg){
      return arg.startsWith(""String_Node_Str"");
    }
    @Override public boolean hasArg(){
      return false;
    }
    @Override public boolean process(    Options options,    String option){
      int argLength=option.length();
      if (argLength == 2) {
        helper.error(""String_Node_Str"");
        return true;
      }
      int sepIndex=option.indexOf('=');
      String key=option.substring(2,(sepIndex != -1 ? sepIndex : argLength));
      if (!JavacProcessingEnvironment.isValidOptionName(key)) {
        helper.error(""String_Node_Str"",option);
        return true;
      }
      return process(options,option,option);
    }
  }
,new Option(X,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printXhelp();
      return super.process(options,option);
    }
  }
,new Option(J,""String_Node_Str"",""String_Node_Str""){
    @Override String helpSynopsis(){
      hasSuffix=true;
      return super.helpSynopsis();
    }
    @Override public boolean process(    Options options,    String option){
      throw new AssertionError(""String_Node_Str"");
    }
  }
,new HiddenOption(MOREINFO){
    @Override public boolean process(    Options options,    String option){
      Type.moreInfo=true;
      return super.process(options,option);
    }
  }
,new HiddenOption(WERROR),new HiddenOption(COMPLEXINFERENCE),new HiddenOption(PROMPT),new HiddenOption(DOE),new HiddenOption(PRINTSOURCE),new HiddenOption(WARNUNCHECKED){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new XOption(XMAXERRS,""String_Node_Str"",""String_Node_Str""),new XOption(XMAXWARNS,""String_Node_Str"",""String_Node_Str""),new XOption(XSTDOUT,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      try {
        helper.setOut(new PrintWriter(new FileWriter(arg),true));
      }
 catch (      java.io.IOException e) {
        helper.error(""String_Node_Str"",arg,e);
        return true;
      }
      return super.process(options,option,arg);
    }
  }
,new XOption(XPRINT,""String_Node_Str""),new XOption(XPRINTROUNDS,""String_Node_Str""),new XOption(XPRINTPROCESSORINFO,""String_Node_Str""),new XOption(XPREFER,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new HiddenOption(O),new HiddenOption(XJCOV),new HiddenOption(XD){
    String s;
    @Override public boolean matches(    String s){
      this.s=s;
      return s.startsWith(name.optionName);
    }
    @Override public boolean process(    Options options,    String option){
      s=s.substring(name.optionName.length());
      int eq=s.indexOf('=');
      String key=(eq < 0) ? s : s.substring(0,eq);
      String value=(eq < 0) ? s : s.substring(eq + 1);
      options.put(key,value);
      return false;
    }
  }
,new HiddenOption(SOURCEFILE){
    String s;
    @Override public boolean matches(    String s){
      this.s=s;
      return s.endsWith(""String_Node_Str"") || SourceVersion.isName(s);
    }
    @Override public boolean process(    Options options,    String option){
      if (s.endsWith(""String_Node_Str"")) {
        File f=new File(s);
        if (!f.exists()) {
          helper.error(""String_Node_Str"",f);
          return true;
        }
        if (!f.isFile()) {
          helper.error(""String_Node_Str"",f);
          return true;
        }
        helper.addFile(f);
      }
 else       helper.addClassName(s);
      return false;
    }
  }
};
}","/** 
 * Get all the recognized options.
 * @param helper an {@code OptionHelper} to help when processing options
 * @return an array of options
 */
public static Option[] getAll(final OptionHelper helper){
  return new Option[]{new Option(G,""String_Node_Str""),new Option(G_NONE,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
  }
,new Option(G_CUSTOM,""String_Node_Str"",Option.ChoiceKind.ANYOF,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new XOption(XLINT,""String_Node_Str""),new XOption(XLINT_CUSTOM,""String_Node_Str"",Option.ChoiceKind.ANYOF,getXLintChoices()),new Option(NOWARN,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new Option(VERBOSE,""String_Node_Str""),new Option(DEPRECATION,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new Option(CLASSPATH,""String_Node_Str"",""String_Node_Str""),new Option(CP,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(SOURCEPATH,""String_Node_Str"",""String_Node_Str""),new Option(BOOTCLASSPATH,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      return super.process(options,option,arg);
    }
  }
,new XOption(XBOOTCLASSPATH_PREPEND,""String_Node_Str"",""String_Node_Str""),new XOption(XBOOTCLASSPATH_APPEND,""String_Node_Str"",""String_Node_Str""),new XOption(XBOOTCLASSPATH,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(EXTDIRS,""String_Node_Str"",""String_Node_Str""),new XOption(DJAVA_EXT_DIRS,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(ENDORSEDDIRS,""String_Node_Str"",""String_Node_Str""),new XOption(DJAVA_ENDORSED_DIRS,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(PROC,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new Option(PROCESSOR,""String_Node_Str"",""String_Node_Str""),new Option(PROCESSORPATH,""String_Node_Str"",""String_Node_Str""),new Option(D,""String_Node_Str"",""String_Node_Str""),new Option(S,""String_Node_Str"",""String_Node_Str""),new Option(IMPLICIT,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new Option(ENCODING,""String_Node_Str"",""String_Node_Str""),new Option(SOURCE,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String operand){
      Source source=Source.lookup(operand);
      if (source == null) {
        helper.error(""String_Node_Str"",operand);
        return true;
      }
      return super.process(options,option,operand);
    }
  }
,new Option(TARGET,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String operand){
      Target target=Target.lookup(operand);
      if (target == null) {
        helper.error(""String_Node_Str"",operand);
        return true;
      }
      return super.process(options,option,operand);
    }
  }
,new Option(VERSION,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printVersion();
      return super.process(options,option);
    }
  }
,new HiddenOption(FULLVERSION){
    @Override public boolean process(    Options options,    String option){
      helper.printFullVersion();
      return super.process(options,option);
    }
  }
,new Option(HELP,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printHelp();
      return super.process(options,option);
    }
  }
,new Option(A,""String_Node_Str"",""String_Node_Str""){
    @Override String helpSynopsis(){
      hasSuffix=true;
      return super.helpSynopsis();
    }
    @Override public boolean matches(    String arg){
      return arg.startsWith(""String_Node_Str"");
    }
    @Override public boolean hasArg(){
      return false;
    }
    @Override public boolean process(    Options options,    String option){
      int argLength=option.length();
      if (argLength == 2) {
        helper.error(""String_Node_Str"");
        return true;
      }
      int sepIndex=option.indexOf('=');
      String key=option.substring(2,(sepIndex != -1 ? sepIndex : argLength));
      if (!JavacProcessingEnvironment.isValidOptionName(key)) {
        helper.error(""String_Node_Str"",option);
        return true;
      }
      return process(options,option,option);
    }
  }
,new Option(X,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printXhelp();
      return super.process(options,option);
    }
  }
,new Option(J,""String_Node_Str"",""String_Node_Str""){
    @Override String helpSynopsis(){
      hasSuffix=true;
      return super.helpSynopsis();
    }
    @Override public boolean process(    Options options,    String option){
      throw new AssertionError(""String_Node_Str"");
    }
  }
,new HiddenOption(MOREINFO){
    @Override public boolean process(    Options options,    String option){
      Type.moreInfo=true;
      return super.process(options,option);
    }
  }
,new Option(WERROR,""String_Node_Str""),new HiddenOption(COMPLEXINFERENCE),new HiddenOption(PROMPT),new HiddenOption(DOE),new HiddenOption(PRINTSOURCE),new HiddenOption(WARNUNCHECKED){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new XOption(XMAXERRS,""String_Node_Str"",""String_Node_Str""),new XOption(XMAXWARNS,""String_Node_Str"",""String_Node_Str""),new XOption(XSTDOUT,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      try {
        helper.setOut(new PrintWriter(new FileWriter(arg),true));
      }
 catch (      java.io.IOException e) {
        helper.error(""String_Node_Str"",arg,e);
        return true;
      }
      return super.process(options,option,arg);
    }
  }
,new XOption(XPRINT,""String_Node_Str""),new XOption(XPRINTROUNDS,""String_Node_Str""),new XOption(XPRINTPROCESSORINFO,""String_Node_Str""),new XOption(XPREFER,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new HiddenOption(O),new HiddenOption(XJCOV),new HiddenOption(XD){
    String s;
    @Override public boolean matches(    String s){
      this.s=s;
      return s.startsWith(name.optionName);
    }
    @Override public boolean process(    Options options,    String option){
      s=s.substring(name.optionName.length());
      int eq=s.indexOf('=');
      String key=(eq < 0) ? s : s.substring(0,eq);
      String value=(eq < 0) ? s : s.substring(eq + 1);
      options.put(key,value);
      return false;
    }
  }
,new HiddenOption(SOURCEFILE){
    String s;
    @Override public boolean matches(    String s){
      this.s=s;
      return s.endsWith(""String_Node_Str"") || SourceVersion.isName(s);
    }
    @Override public boolean process(    Options options,    String option){
      if (s.endsWith(""String_Node_Str"")) {
        File f=new File(s);
        if (!f.exists()) {
          helper.error(""String_Node_Str"",f);
          return true;
        }
        if (!f.isFile()) {
          helper.error(""String_Node_Str"",f);
          return true;
        }
        helper.addFile(f);
      }
 else       helper.addClassName(s);
      return false;
    }
  }
};
}"
77745,"/** 
 * Initializes an APRep object.
 * @param encoding a single DER-encoded value.
 * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.
 * @exception IOException if an I/O error occurs while reading encoded data.
 * @exception KrbApErrException if the value read from the DER-encoded datastream does not match the pre-defined value.
 */
private void init(DerValue encoding) throws Asn1Exception, KrbApErrException, IOException {
  if (((encoding.getTag() & (byte)(0x1F)) != Krb5.KRB_AP_REP) || (encoding.isApplication() != true) || (encoding.isConstructed() != true))   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  DerValue der=encoding.getData().getDerValue();
  if (der.getTag() != DerValue.tag_Sequence)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  DerValue subDer=der.getData().getDerValue();
  if ((subDer.getTag() & (byte)0x1F) != (byte)0x00)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  pvno=subDer.getData().getBigInteger().intValue();
  if (pvno != Krb5.PVNO)   throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);
  subDer=der.getData().getDerValue();
  if ((subDer.getTag() & (byte)0x1F) != (byte)0x01)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  msgType=subDer.getData().getBigInteger().intValue();
  if (msgType != Krb5.KRB_AP_REP)   throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);
  encPart=EncryptedData.parse(der.getData(),(byte)0x02,false);
  if (der.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
}","/** 
 * Initializes an APRep object.
 * @param encoding a single DER-encoded value.
 * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.
 * @exception IOException if an I/O error occurs while reading encoded data.
 * @exception KrbApErrException if the value read from the DER-encoded datastream does not match the pre-defined value.
 */
private void init(DerValue encoding) throws Asn1Exception, KrbApErrException, IOException {
  if (((encoding.getTag() & (byte)(0x1F)) != Krb5.KRB_AP_REP) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
  DerValue der=encoding.getData().getDerValue();
  if (der.getTag() != DerValue.tag_Sequence) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
  DerValue subDer=der.getData().getDerValue();
  if ((subDer.getTag() & (byte)0x1F) != (byte)0x00) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
  pvno=subDer.getData().getBigInteger().intValue();
  if (pvno != Krb5.PVNO) {
    throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);
  }
  subDer=der.getData().getDerValue();
  if ((subDer.getTag() & (byte)0x1F) != (byte)0x01) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
  msgType=subDer.getData().getBigInteger().intValue();
  if (msgType != Krb5.KRB_AP_REP) {
    throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);
  }
  encPart=EncryptedData.parse(der.getData(),(byte)0x02,false);
  if (der.getData().available() > 0) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
}"
77746,"@PostConstruct @Override public List<Camera> getCameras() throws CameraException, ServiceException {
  if (isInitialized) {
    for (    CameraGphoto camera : cameraGphotoList) {
      if (!camera.isInitialized()) {
        camera.initialize();
      }
    }
    return cameraList;
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera newCamera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      newCamera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
      Camera storedCamera=cameraService.loadCameraAndStoreIfNotExists(newCamera);
      cameraService.setCameraActive(storedCamera.getId());
      cameraList.add(storedCamera);
      LOGGER.info(""String_Node_Str"",storedCamera);
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  isInitialized=true;
  return cameraList;
}","@PostConstruct @Override public List<Camera> getCameras() throws CameraException {
  if (isInitialized) {
    for (    CameraGphoto camera : cameraGphotoList) {
      if (!camera.isInitialized()) {
        camera.initialize();
      }
    }
    return cameraList;
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera newCamera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      newCamera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
      Camera storedCamera=cameraService.loadCameraAndStoreIfNotExists(newCamera);
      cameraService.setCameraActive(storedCamera.getId());
      cameraList.add(storedCamera);
      LOGGER.info(""String_Node_Str"",storedCamera);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    CameraUtils.closeQuietly(cl);
  }
  isInitialized=true;
  return cameraList;
}"
77747,"@Override public Camera getCameraIfExists(Camera camera) throws PersistenceException {
  try (PreparedStatement stmt=con.prepareStatement(READ_CAMERA_WITH_MODEL_STATEMENT)){
    stmt.setString(1,camera.getModel());
    try (ResultSet rs=stmt.executeQuery()){
      if (rs.next()) {
        Camera storedCamera=readCameraFromResultSet(rs);
        LOGGER.trace(""String_Node_Str"",storedCamera);
        return storedCamera;
      }
 else {
        LOGGER.trace(""String_Node_Str"",camera.getModel());
        return null;
      }
    }
   }
 catch (  SQLException e) {
    throw new PersistenceException(e.getMessage());
  }
}","@Override public Camera getCameraIfExists(Camera camera) throws PersistenceException {
  try (PreparedStatement stmt=con.prepareStatement(READ_CAMERA_WITH_MODEL_STATEMENT)){
    stmt.setString(1,camera.getModel());
    try (ResultSet rs=stmt.executeQuery()){
      if (rs.next()) {
        Camera storedCamera=readCameraFromResultSet(rs);
        LOGGER.trace(""String_Node_Str"",storedCamera);
        return storedCamera;
      }
 else {
        LOGGER.trace(""String_Node_Str"",camera.getModel());
        return null;
      }
    }
   }
 catch (  SQLException e) {
    throw new PersistenceException(e);
  }
}"
77748,"@Override public void setAllInactive() throws PersistenceException {
  try (PreparedStatement stmt=con.prepareStatement(SET_ALL_INACTIVE_STATEMENT)){
    stmt.execute();
    LOGGER.trace(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new PersistenceException(e.getMessage());
  }
}","@Override public void setAllInactive() throws PersistenceException {
  try (PreparedStatement stmt=con.prepareStatement(SET_ALL_INACTIVE_STATEMENT)){
    stmt.setBoolean(1,false);
    stmt.execute();
    LOGGER.trace(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new PersistenceException(e);
  }
}"
77749,"@FXML public void shotFrameClicked(){
  Screen screen=getScreenOfWindow();
  Rectangle2D bounds=screen.getVisualBounds();
  primaryStage.setX(bounds.getMinX());
  primaryStage.setY(bounds.getMinY());
  primaryStage.setWidth(bounds.getWidth());
  primaryStage.setHeight(bounds.getHeight());
  StackPane root=(StackPane)primaryStage.getScene().getRoot();
  Node child=root.getChildren().get(0);
  ImageView iv;
  if (child instanceof ImageView) {
    iv=(ImageView)child;
  }
 else {
    iv=(ImageView)root.getChildren().get(1);
  }
  iv.setFitHeight(bounds.getHeight());
  iv.setFitWidth(bounds.getWidth());
  primaryStage.setFullScreen(true);
}","@FXML public void shotFrameClicked(){
  Screen screen=getScreenOfWindow();
  Rectangle2D visualBounds=screen.getVisualBounds();
  Rectangle2D fullBounds=screen.getBounds();
  primaryStage.setX(visualBounds.getMinX());
  primaryStage.setY(visualBounds.getMinY());
  primaryStage.setWidth(visualBounds.getWidth());
  primaryStage.setHeight(visualBounds.getHeight());
  StackPane root=(StackPane)primaryStage.getScene().getRoot();
  Node child=root.getChildren().get(0);
  ImageView iv;
  if (child instanceof ImageView) {
    iv=(ImageView)child;
  }
 else {
    iv=(ImageView)root.getChildren().get(1);
  }
  iv.setFitHeight(fullBounds.getHeight());
  iv.setFitWidth(fullBounds.getWidth());
  primaryStage.setFullScreen(true);
}"
77750,"private BufferedImage saveUnfilterdImageAndApplyFilter(String originalImgPath) throws ServiceException {
  BufferedImage shot;
  boolean logosEnabled=!profileService.getAllPairLogoRelativeRectangle().isEmpty();
  shot=openImageThrowException(originalImgPath);
  shot=mirrorImage(shot);
  if (logosEnabled) {
    logoWatermarkService.addLogosToImage(shot);
    saveImageThrowException(shot,originalImgPath);
    LOGGER.debug(""String_Node_Str"",originalImgPath);
  }
  String filterName=pairCameraPosition.getFilterName();
  shot=filterService.filter(filterName,originalImgPath);
  LOGGER.debug(""String_Node_Str"",filterName,position);
  return shot;
}","private BufferedImage saveUnfilterdImageAndApplyFilter(String originalImgPath) throws ServiceException {
  BufferedImage shot;
  boolean logosEnabled=!profileService.getAllPairLogoRelativeRectangle().isEmpty();
  shot=openImageThrowException(originalImgPath);
  shot=mirrorImage(shot);
  if (logosEnabled) {
    logoWatermarkService.addLogosToImage(shot);
    saveImageThrowException(shot,originalImgPath);
    LOGGER.debug(""String_Node_Str"",originalImgPath);
  }
  String filterName=pairCameraPosition.getFilterName();
  shot=filterService.filter(filterName,originalImgPath);
  LOGGER.debug(""String_Node_Str"",filterName,position);
  if (logosEnabled) {
    logoWatermarkService.addLogosToImage(shot);
  }
  return shot;
}"
77751,"private BufferedImage saveUnfilterdImageAndApplyFilter(String originalImgPath) throws ServiceException {
  BufferedImage shot;
  boolean logosEnabled=profileService.getAllPairLogoRelativeRectangle().isEmpty();
  shot=openImageThrowException(originalImgPath);
  shot=mirrorImage(shot);
  if (logosEnabled) {
    logoWatermarkService.addLogosToImage(shot);
    saveImageThrowException(shot,originalImgPath);
    LOGGER.debug(""String_Node_Str"");
  }
  String filterName=pairCameraPosition.getFilterName();
  shot=filterService.filter(filterName,originalImgPath);
  LOGGER.debug(""String_Node_Str"",filterName,position);
  return shot;
}","private BufferedImage saveUnfilterdImageAndApplyFilter(String originalImgPath) throws ServiceException {
  BufferedImage shot;
  boolean logosEnabled=!profileService.getAllPairLogoRelativeRectangle().isEmpty();
  shot=openImageThrowException(originalImgPath);
  shot=mirrorImage(shot);
  if (logosEnabled) {
    logoWatermarkService.addLogosToImage(shot);
    saveImageThrowException(shot,originalImgPath);
    LOGGER.debug(""String_Node_Str"",originalImgPath);
  }
  String filterName=pairCameraPosition.getFilterName();
  shot=filterService.filter(filterName,originalImgPath);
  LOGGER.debug(""String_Node_Str"",filterName,position);
  return shot;
}"
77752,"/** 
 * Saves image in images folder and in database. Also tells the Shot monitor to refresh the image.
 * @throws CameraException if something goes wrong during the detecting of the cameras
 */
List<Camera> getCameras() throws CameraException ;","/** 
 * Detects all connected cameras and stores all new ones.
 * @throws CameraException if something goes wrong during the detecting of the cameras
 * @throws ServiceException If an error during querying cameras or storing cameras in the service occurs
 */
List<Camera> getCameras() throws CameraException, ServiceException ;"
77753,"/** 
 * Removes a camera that is connected but cannot be assigned to a position from the list.
 * @param camera the camera that shall be removed.
 */
void removeCameraFromList(Camera camera);","/** 
 * Removes a simcam that is connected but cannot be assigned to a position from the list.
 * @param camera the simcam that shall be removed.
 */
void removeCameraFromList(Camera camera);"
77754,"/** 
 * Sets the countdown flag in the CameraThread
 * @param camera camera that shall be configured
 * @param countdown number of seconds a countdown should be displayed
 */
void setCountdown(Camera camera,int countdown);","/** 
 * Sets the countdown flag in the CameraThread
 * @param camera simcam that shall be configured
 * @param countdown number of seconds a countdown should be displayed
 */
void setCountdown(Camera camera,int countdown);"
77755,"/** 
 * Sets the captureImage flag in the CameraThread
 * @param camera camera that shall capture a image
 */
void captureImage(Camera camera);","/** 
 * Sets the captureImage flag in the CameraThread
 * @param camera simcam that shall capture a image
 */
void captureImage(Camera camera);"
77756,"/** 
 * Sets the serieShot flag in the CameraThread
 * @param camera camera that shall be configured
 * @param serieShot whether multiple shots should be taken or not
 */
void setSerieShot(Camera camera,boolean serieShot);","/** 
 * Sets the serieShot flag in the CameraThread
 * @param camera simcam that shall be configured
 * @param serieShot whether multiple shots should be taken or not
 */
void setSerieShot(Camera camera,boolean serieShot);"
77757,"@PostConstruct @Override public List<Camera> getCameras() throws CameraException {
  if (isInitialized) {
    for (    CameraGphoto camera : cameraGphotoList) {
      if (!camera.isInitialized()) {
        camera.initialize();
      }
    }
    return cameraList;
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
        LOGGER.info(""String_Node_Str"",camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  isInitialized=true;
  return cameraList;
}","@PostConstruct @Override public List<Camera> getCameras() throws CameraException, ServiceException {
  if (isInitialized) {
    for (    CameraGphoto camera : cameraGphotoList) {
      if (!camera.isInitialized()) {
        camera.initialize();
      }
    }
    return cameraList;
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera newCamera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      newCamera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
      Camera storedCamera=cameraService.cameraExists(newCamera);
      if (storedCamera == null) {
        storedCamera=cameraService.createCamera(newCamera);
      }
      cameraService.setCameraActive(storedCamera.getId());
      cameraList.add(storedCamera);
      LOGGER.info(""String_Node_Str"",storedCamera);
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  isInitialized=true;
  return cameraList;
}"
77758,"@Override public List<Camera> getCameras() throws CameraException {
  throw new UnsupportedOperationException();
}","@Override public List<Camera> getCameras(){
  return simulatedCameraList;
}"
77759,"@Override public void closeCameras(){
  throw new UnsupportedOperationException();
}","@Override public void closeCameras(){
}"
77760,"public SimCameraHandler(){
  simulatedCameraList=new ArrayList<>();
  simulatedCameraList.add(new Camera(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
}","public SimCameraHandler(ApplicationContext applicationContext,CameraService cameraService) throws ServiceException {
  this.applicationContext=applicationContext;
  Camera newCamera=new Camera(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Camera storedCamera=cameraService.cameraExists(newCamera);
  if (storedCamera == null)   storedCamera=cameraService.createCamera(newCamera);
  cameraService.setCameraActive(storedCamera.getId());
  simulatedCameraList.add(storedCamera);
}"
77761,"@Override public void setCountdown(Camera camera,int countdown){
  throw new UnsupportedOperationException();
}","@Override public void setCountdown(Camera camera,int countdown){
  for (  SimCameraThread cameraThread : simulatedCameraThreadList) {
    if (cameraThread.getCamera().getId() == camera.getId()) {
      cameraThread.setCountdown(countdown);
    }
  }
}"
77762,"@Override public List<CameraThread> createThreads(List<Camera> cameraList) throws CameraException {
  throw new UnsupportedOperationException();
}","@Override public List<CameraThread> createThreads(List<Camera> cameraList){
  List<CameraThread> cameraThreadList=new ArrayList<>();
  for (  Camera camera : simulatedCameraList) {
    SimCameraThread cameraThread=applicationContext.getBean(SimCameraThread.class);
    cameraThread.setCamera(camera);
    cameraThreadList.add(cameraThread);
    simulatedCameraThreadList.add(cameraThread);
  }
  return cameraThreadList;
}"
77763,"@Override public void captureImage(Camera camera){
  throw new UnsupportedOperationException();
}","@Override public void captureImage(Camera camera){
  for (  SimCameraThread cameraThread : simulatedCameraThreadList) {
    if (cameraThread.getCamera().getId() == camera.getId()) {
      cameraThread.setTakeImage(true);
    }
  }
}"
77764,"@Override public void setSerieShot(Camera camera,boolean serieShot){
  throw new UnsupportedOperationException();
}","@Override public void setSerieShot(Camera camera,boolean serieShot){
  for (  SimCameraThread cameraThread : simulatedCameraThreadList) {
    if (cameraThread.getCamera().getId() == camera.getId()) {
      cameraThread.setSerieShot(true);
    }
  }
}"
77765,"/** 
 * Saves the file from the camera to the local file system.
 * @param filename OS-dependent path on the local file system.
 */
public void save(String filename){
  CameraUtils.check(GPhoto2Native.INSTANCE.gp_file_save(cf,filename),""String_Node_Str"");
}","/** 
 * Saves the file from the simcam to the local file system.
 * @param filename OS-dependent path on the local file system.
 */
public void save(String filename){
  CameraUtils.check(GPhoto2Native.INSTANCE.gp_file_save(cf,filename),""String_Node_Str"");
}"
77766,"/** 
 * Returns a referenced camera file.
 * @param cam the camera handle.
 * @return camera file.
 */
CameraFile newFile(Pointer cam){
  boolean returnedOk=false;
  final CameraFile cf=new CameraFile();
  try {
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_file_get(cam,path,filename,GPhoto2Native.GP_FILE_TYPE_NORMAL,cf.cf,CameraList.CONTEXT),""String_Node_Str"");
    returnedOk=true;
    return cf;
  }
  finally {
    if (!returnedOk) {
      CameraUtils.closeQuietly(cf);
    }
  }
}","/** 
 * Returns a referenced simcam file.
 * @param cam the simcam handle.
 * @return simcam file.
 */
CameraFile newFile(Pointer cam){
  boolean returnedOk=false;
  final CameraFile cf=new CameraFile();
  try {
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_file_get(cam,path,filename,GPhoto2Native.GP_FILE_TYPE_NORMAL,cf.cf,CameraList.CONTEXT),""String_Node_Str"");
    returnedOk=true;
    return cf;
  }
  finally {
    if (!returnedOk) {
      CameraUtils.closeQuietly(cf);
    }
  }
}"
77767,"/** 
 * Creates a new file link. The file is not yet linked to any particular camera file - the link is performed later on, by invoking gphoto functions.
 */
CameraFile(){
  final PointerByReference p=new PointerByReference();
  CameraUtils.check(GPhoto2Native.INSTANCE.gp_file_new(p),""String_Node_Str"");
  cf=p.getValue();
}","/** 
 * Creates a new file link. The file is not yet linked to any particular simcam file - the link is performed later on, by invoking gphoto functions.
 */
CameraFile(){
  final PointerByReference p=new PointerByReference();
  CameraUtils.check(GPhoto2Native.INSTANCE.gp_file_new(p),""String_Node_Str"");
  cf=p.getValue();
}"
77768,"/** 
 * Creates a reference to the first connected camera.
 */
public CameraGphoto(){
  final PointerByReference ref=new PointerByReference();
  CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_new(ref),""String_Node_Str"");
  camera=ref.getValue();
}","/** 
 * Creates a reference to the first connected simcam.
 */
public CameraGphoto(){
  final PointerByReference ref=new PointerByReference();
  CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_new(ref),""String_Node_Str"");
  camera=ref.getValue();
}"
77769,"/** 
 * Captures a quick preview image on the camera.
 * @return camera file, never null. Must be closed afterwards.
 */
public CameraFile capturePreview(){
  checkNotClosed();
  boolean returnedOk=false;
  final CameraFile cfile=new CameraFile();
  try {
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_capture_preview(camera,cfile.cf,CameraList.CONTEXT),""String_Node_Str"");
    returnedOk=true;
    return cfile;
  }
  finally {
    if (!returnedOk) {
      CameraUtils.closeQuietly(cfile);
    }
  }
}","/** 
 * Captures a quick preview image on the simcam.
 * @return simcam file, never null. Must be closed afterwards.
 */
public CameraFile capturePreview(){
  checkNotClosed();
  boolean returnedOk=false;
  final CameraFile cfile=new CameraFile();
  try {
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_capture_preview(camera,cfile.cf,CameraList.CONTEXT),""String_Node_Str"");
    returnedOk=true;
    return cfile;
  }
  finally {
    if (!returnedOk) {
      CameraUtils.closeQuietly(cfile);
    }
  }
}"
77770,"/** 
 * Captures a full-quality image image on the camera.
 * @return camera file, never null. Must be closed afterwards.
 */
public CameraFile captureImage(){
  checkNotClosed();
  final CameraFilePath path=new CameraFilePath.ByReference();
  CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_capture(camera,GPhoto2Native.GP_CAPTURE_IMAGE,path,CameraList.CONTEXT),""String_Node_Str"");
  final CameraFile.Path p=new CameraFile.Path(path);
  return p.newFile(camera);
}","/** 
 * Captures a full-quality image image on the simcam.
 * @return simcam file, never null. Must be closed afterwards.
 */
public CameraFile captureImage(){
  checkNotClosed();
  final CameraFilePath path=new CameraFilePath.ByReference();
  CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_capture(camera,GPhoto2Native.GP_CAPTURE_IMAGE,path,CameraList.CONTEXT),""String_Node_Str"");
  final CameraFile.Path p=new CameraFile.Path(path);
  return p.newFile(camera);
}"
77771,"/** 
 * Initializes the camera.
 */
public void initialize(){
  checkNotClosed();
  if (!isInitialized) {
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_init(camera,CameraList.CONTEXT),""String_Node_Str"");
    isInitialized=true;
  }
}","/** 
 * Initializes the simcam.
 */
public void initialize(){
  checkNotClosed();
  if (!isInitialized) {
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_init(camera,CameraList.CONTEXT),""String_Node_Str"");
    isInitialized=true;
  }
}"
77772,"/** 
 * De-initializes the camera.
 */
public void deinitialize() throws IOException {
  checkNotClosed();
  if (isInitialized) {
    isInitialized=false;
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_exit(camera,CameraList.CONTEXT),""String_Node_Str"");
  }
}","/** 
 * De-initializes the simcam.
 */
public void deinitialize() throws IOException {
  checkNotClosed();
  if (isInitialized) {
    isInitialized=false;
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_exit(camera,CameraList.CONTEXT),""String_Node_Str"");
  }
}"
77773,"/** 
 * De-initializes the camera and frees all resources. Further invocations to this method do nothing. Any camera method will fail from now on with   {@link java.lang.IllegalStateException}.
 */
public void close() throws IOException {
  if (!closed) {
    deinitialize();
    closed=true;
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_free(camera),""String_Node_Str"");
  }
}","/** 
 * De-initializes the simcam and frees all resources. Further invocations to this method do nothing. Any simcam method will fail from now on with   {@link java.lang.IllegalStateException}.
 */
public void close() throws IOException {
  if (!closed) {
    deinitialize();
    closed=true;
    CameraUtils.check(GPhoto2Native.INSTANCE.gp_camera_free(camera),""String_Node_Str"");
  }
}"
77774,"/** 
 * Returns new configuration for the camera.e
 * @return the configuration, never null. Must be closed afterwards.
 */
public CameraWidgets newConfiguration(){
  checkNotClosed();
  return new CameraWidgets(this);
}","/** 
 * Returns new configuration for the simcam.e
 * @return the configuration, never null. Must be closed afterwards.
 */
public CameraWidgets newConfiguration(){
  checkNotClosed();
  return new CameraWidgets(this);
}"
77775,"@Override public boolean equals(Object object){
  if (object instanceof Camera && ((Camera)object).getId() == this.getId() && ((Camera)object).getLable() == this.getLable() && ((Camera)object).getPort() == this.getPort() && ((Camera)object).getModel() == this.getModel() && ((Camera)object).getSerialnumber() == this.getSerialnumber()) {
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean equals(Object object){
  if (object instanceof Camera && ((Camera)object).getId() == this.getId() && ((Camera)object).getPort() == this.getPort() && ((Camera)object).getModel() == this.getModel() && ((Camera)object).getSerialnumber() == this.getSerialnumber()) {
    return true;
  }
 else {
    return false;
  }
}"
77776,"public void setSerieShot(boolean serieShot){
  this.serieShot=serieShot;
}","public void setSerieShot(boolean serieShot){
  this.serieShot=serieShot;
  this.countdown=0;
}"
77777,"public void setCountdown(int countdown){
  this.countdown=countdown;
}","public void setCountdown(int countdown){
  this.countdown=countdown;
  this.serieShot=false;
}"
77778,"public void triggerShot(KeyEvent keyEvent){
  String keystoke=keyEvent.getText();
  int index=-1;
  String messageString=""String_Node_Str"";
switch (keystoke) {
case ""String_Node_Str"":
    index=0;
  break;
case ""String_Node_Str"":
index=1;
break;
case ""String_Node_Str"":
index=2;
break;
case ""String_Node_Str"":
index=3;
break;
case ""String_Node_Str"":
index=4;
break;
case ""String_Node_Str"":
index=5;
break;
case ""String_Node_Str"":
index=6;
break;
case ""String_Node_Str"":
index=7;
break;
case ""String_Node_Str"":
index=8;
break;
default :
index=-1;
return;
}
LOGGER.debug(""String_Node_Str"" + keystoke);
int numberOfPositions=0;
int numberOfCameras=0;
Profile.PairCameraPosition pairCameraPosition=null;
Profile activeProfile=null;
List<Camera> cameras=new ArrayList<>();
try {
if (profileservice != null) {
activeProfile=profileservice.getActiveProfile();
numberOfPositions=activeProfile.getPairCameraPositions().size();
}
}
 catch (ServiceException e) {
activeProfile=null;
LOGGER.error(""String_Node_Str"",e);
}
String os=System.getProperty(""String_Node_Str"");
try {
if (cameraHandler != null && !os.startsWith(""String_Node_Str"")) {
cameras=cameraHandler.getCameras();
numberOfCameras=cameras.size();
}
}
 catch (CameraException e) {
cameras=new ArrayList<>();
LOGGER.error(""String_Node_Str"",e);
}
if (index >= 0) {
messageString=""String_Node_Str"" + index + ""String_Node_Str"";
}
 else {
messageString=""String_Node_Str"";
}
LOGGER.debug(messageString,keystoke);
if (numberOfPositions > index && index >= 0) {
messageString=""String_Node_Str"";
pairCameraPosition=activeProfile.getPairCameraPositions().get(index);
int shotType=pairCameraPosition.getShotType();
Camera camera=pairCameraPosition.getCamera();
if (shotType == Profile.PairCameraPosition.SHOT_TYPE_MULTIPLE) {
if (cameras.contains(camera)) {
cameraHandler.setSerieShot(camera,true);
LOGGER.debug(""String_Node_Str"");
}
 else {
LOGGER.debug(""String_Node_Str"");
}
}
 else if (shotType == Profile.PairCameraPosition.SHOT_TYPE_TIMED) {
if (cameras.contains(camera)) {
cameraHandler.setCountdown(camera,5);
LOGGER.debug(""String_Node_Str"");
}
 else LOGGER.debug(""String_Node_Str"");
}
 else {
LOGGER.debug(""String_Node_Str"");
}
if (cameras.contains(camera)) {
cameraHandler.captureImage(camera);
return;
}
 else {
LOGGER.debug(""String_Node_Str"");
return;
}
}
 else if (index >= 0) {
messageString=""String_Node_Str"";
}
 else {
messageString=""String_Node_Str"";
}
LOGGER.debug(messageString);
}","public void triggerShot(KeyEvent keyEvent){
  String keystoke=keyEvent.getText();
  int index=-1;
  String messageString=""String_Node_Str"";
switch (keystoke) {
case ""String_Node_Str"":
    index=0;
  break;
case ""String_Node_Str"":
index=1;
break;
case ""String_Node_Str"":
index=2;
break;
case ""String_Node_Str"":
index=3;
break;
case ""String_Node_Str"":
index=4;
break;
case ""String_Node_Str"":
index=5;
break;
case ""String_Node_Str"":
index=6;
break;
case ""String_Node_Str"":
index=7;
break;
case ""String_Node_Str"":
index=8;
break;
default :
index=-1;
return;
}
LOGGER.debug(""String_Node_Str"" + keystoke);
int numberOfPositions=0;
int numberOfCameras=0;
Profile.PairCameraPosition pairCameraPosition=null;
Profile activeProfile=null;
List<Camera> cameras=new ArrayList<>();
try {
if (profileservice != null) {
activeProfile=profileservice.getActiveProfile();
numberOfPositions=activeProfile.getPairCameraPositions().size();
}
}
 catch (ServiceException e) {
activeProfile=null;
LOGGER.error(""String_Node_Str"",e);
}
String os=System.getProperty(""String_Node_Str"");
try {
if (cameraHandler != null && !os.startsWith(""String_Node_Str"")) {
cameras=cameraHandler.getCameras();
numberOfCameras=cameras.size();
}
}
 catch (CameraException e) {
cameras=new ArrayList<>();
LOGGER.error(""String_Node_Str"",e);
}
if (index >= 0) {
messageString=""String_Node_Str"" + index + ""String_Node_Str"";
}
 else {
messageString=""String_Node_Str"";
}
LOGGER.debug(messageString,keystoke);
if (numberOfPositions > index && index >= 0) {
messageString=""String_Node_Str"";
pairCameraPosition=activeProfile.getPairCameraPositions().get(index);
int shotType=pairCameraPosition.getShotType();
Camera camera=pairCameraPosition.getCamera();
if (shotType == Profile.PairCameraPosition.SHOT_TYPE_MULTIPLE) {
if (cameras.contains(camera)) {
cameraHandler.setSerieShot(camera,true);
LOGGER.debug(""String_Node_Str"");
}
 else {
LOGGER.debug(""String_Node_Str"");
}
}
 else if (shotType == Profile.PairCameraPosition.SHOT_TYPE_TIMED) {
if (cameras.contains(camera)) {
cameraHandler.setCountdown(camera,8);
LOGGER.debug(""String_Node_Str"");
}
 else {
LOGGER.debug(""String_Node_Str"");
}
}
 else {
cameraHandler.setCountdown(camera,0);
cameraHandler.setSerieShot(camera,false);
LOGGER.debug(""String_Node_Str"");
}
if (cameras.contains(camera)) {
cameraHandler.captureImage(camera);
return;
}
 else {
LOGGER.debug(""String_Node_Str"");
return;
}
}
 else if (index >= 0) {
messageString=""String_Node_Str"";
}
 else {
messageString=""String_Node_Str"";
}
LOGGER.debug(messageString);
}"
77779,"public void notifyOfNewImage(at.ac.tuwien.sepm.ws16.qse01.entities.Image image,int index){
  if (index == -1)   listOfImages.add(image);
 else   listOfImages.add(index,image);
  prepareHBox(image,index);
}","public void notifyOfNewImage(at.ac.tuwien.sepm.ws16.qse01.entities.Image image,int index){
  if (index == -1) {
    listOfImages.add(image);
    newImages.offer(image);
  }
 else {
    listOfImages.add(index,image);
    prepareHBox(image,index);
  }
}"
77780,"/** 
 * Notifies the ShotFrameManager and the MiniatureFrameController of a newly shot image.
 * @param image the Image-Object representing the new image.
 */
public synchronized void refreshFrames(Image image){
  miniaturFrameController.notifyOfNewImage(image,-1);
}","/** 
 * Notifies the MiniatureFrameController of a newly shot image.
 * @param image the Image-Object representing the new image.
 */
public synchronized void refreshFrames(Image image){
  miniaturFrameController.notifyOfNewImage(image,-1);
}"
77781,"@Override public void handle(ActionEvent event){
  startTimeSec[0]--;
  if (startTimeSec[0] == 0) {
    timeline.stop();
    countdownLabel.setVisible(false);
  }
  countdownLabel.setText(String.valueOf(startTimeSec[0]));
}","@Override public void handle(ActionEvent event){
  startTimeSec[0]--;
  if (startTimeSec[0] == 0) {
    timeline.stop();
    countdownLabel.setVisible(false);
  }
 else {
    countdownLabel.setText(String.valueOf(startTimeSec[0]));
    countdownLabel.setVisible(true);
  }
}"
77782,"public void showCountdown(int countdown){
  countdownLabel.setText(String.valueOf(countdown));
  countdownLabel.setVisible(true);
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight() - 100;
  countdownLabel.setPrefHeight(screenHeight / 2);
  int paddingBottom=-((Double)(screenHeight / 2)).intValue();
  countdownLabel.setPadding(new Insets(0,0,paddingBottom,0));
  createCounter(countdown).play();
}","public void showCountdown(int countdown){
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight() - 100;
  countdownLabel.setPrefHeight(screenHeight / 2);
  int paddingBottom=-((Double)(screenHeight / 2)).intValue();
  countdownLabel.setPadding(new Insets(0,0,paddingBottom,0));
  createCounter(countdown).play();
}"
77783,"public Timeline createCounter(int countdown){
  Timeline timeline=new Timeline();
  startTimeSec[0]=countdown;
  KeyFrame keyframe=new KeyFrame(Duration.seconds(1),new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent event){
      startTimeSec[0]--;
      if (startTimeSec[0] == 0) {
        timeline.stop();
        countdownLabel.setVisible(false);
      }
      countdownLabel.setText(String.valueOf(startTimeSec[0]));
    }
  }
);
  timeline.setCycleCount(Timeline.INDEFINITE);
  timeline.getKeyFrames().add(keyframe);
  return timeline;
}","public Timeline createCounter(int countdown){
  Timeline timeline=new Timeline();
  startTimeSec[0]=countdown;
  KeyFrame keyframe=new KeyFrame(Duration.seconds(1),new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent event){
      startTimeSec[0]--;
      if (startTimeSec[0] == 0) {
        timeline.stop();
        countdownLabel.setVisible(false);
      }
 else {
        countdownLabel.setText(String.valueOf(startTimeSec[0]));
        countdownLabel.setVisible(true);
      }
    }
  }
);
  timeline.setCycleCount(Timeline.INDEFINITE);
  timeline.getKeyFrames().add(keyframe);
  return timeline;
}"
77784,"/** 
 * Sets the scene specified by the given integer. For use in combination with static integers provided by WindowManager for identification of the scenes. If a number is given that is not assigned as number for a scene the mainScene will be set.
 * @param sceneToShow the number of the scene that shall be set.
 */
public void showScene(int sceneToShow){
  if (sceneToShow == SHOW_CUSTOMERSCENE) {
    customerFrameController.refresh();
  }
  if (sceneToShow == SHOW_SHOOTINGSCENE) {
    shootingAdminController.inactivemode();
  }
switch (sceneToShow) {
case END_APPLICATION:
    closeStages();
  break;
case SHOW_SHOOTINGSCENE:
mainStage.setScene(shootingScene);
break;
case SHOW_MINIATURESCENE:
mainStage.setScene(miniaturScene);
break;
case SHOW_CUSTOMERSCENE:
mainStage.setScene(customerScene);
break;
case SHOW_SETTINGSCENE:
mainStage.setScene(settingScene);
break;
case SHOW_RECOVERYSCENE:
mainStage.setScene(recoveryScene);
break;
default :
mainStage.setScene(mainScene);
break;
}
mainStage.setFullScreen(true);
}","/** 
 * Sets the scene specified by the given integer. For use in combination with static integers provided by WindowManager for identification of the scenes. If a number is given that is not assigned as number for a scene the mainScene will be set.
 * @param sceneToShow the number of the scene that shall be set.
 */
public void showScene(int sceneToShow){
switch (sceneToShow) {
case END_APPLICATION:
    closeStages();
  break;
case SHOW_SHOOTINGSCENE:
shootingAdminController.inactivemode();
mainStage.setScene(shootingScene);
break;
case SHOW_MINIATURESCENE:
miniaturFrameController.addNewHBoxes();
mainStage.setScene(miniaturScene);
break;
case SHOW_CUSTOMERSCENE:
customerFrameController.refresh();
mainStage.setScene(customerScene);
break;
case SHOW_SETTINGSCENE:
mainStage.setScene(settingScene);
break;
case SHOW_RECOVERYSCENE:
mainStage.setScene(recoveryScene);
break;
default :
mainStage.setScene(mainScene);
break;
}
mainStage.setFullScreen(true);
}"
77785,"@Override public void handle(MouseEvent event){
  Profile.PairCameraPosition currentCamPos=(Profile.PairCameraPosition)CamPosCheckbox.this.getTableView().getItems().get(CamPosCheckbox.this.getIndex());
  try {
    if (cellCheckbox.isSelected()) {
      if (checkboxTyp.equals(""String_Node_Str"")) {
        if (currentCamPos.getPosition() != null)         pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
 else {
          cellCheckbox.setSelected(false);
          Alert alert=new Alert(Alert.AlertType.ERROR);
          alert.setTitle(""String_Node_Str"");
          alert.setHeaderText(""String_Node_Str"");
          alert.setContentText(""String_Node_Str"");
          alert.initOwner(primaryStage);
          alert.show();
        }
      }
 else {
        int posID;
        if (currentCamPos.getPosition() != null)         posID=currentCamPos.getPosition().getId();
 else         posID=pservice.getAllPositions().get(0).getId();
        currentCamPos=pservice.addPairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera().getId(),posID,false);
        kamposList.clear();
        kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
        getTableView().setItems(kamposList);
      }
    }
 else {
      if (checkboxTyp.equals(""String_Node_Str"")) {
        pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),false);
      }
 else {
        pservice.erasePairCameraPosition(currentCamPos);
        currentCamPos=new Profile.PairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera(),null,false);
        kamposList.clear();
        kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
        getTableView().setItems(kamposList);
      }
    }
    LOGGER.debug(""String_Node_Str"" + checkboxTyp + ""String_Node_Str""+ currentCamPos.getId()+ ""String_Node_Str""+ cellCheckbox.isSelected()+ ""String_Node_Str""+ selectedProfile.get(0).getId());
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"" + selectedProfile.get(0).getId(),e);
  }
}","@Override public void handle(MouseEvent event){
  Profile.PairCameraPosition currentCamPos=(Profile.PairCameraPosition)CamPosCheckbox.this.getTableView().getItems().get(CamPosCheckbox.this.getIndex());
  try {
    if (cellCheckbox.isSelected()) {
      if (checkboxTyp.equals(""String_Node_Str"")) {
        if (currentCamPos.getPosition() != null)         pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
 else {
          cellCheckbox.setSelected(false);
          Alert alert=new Alert(Alert.AlertType.ERROR);
          alert.setTitle(""String_Node_Str"");
          alert.setHeaderText(""String_Node_Str"");
          alert.setContentText(""String_Node_Str"");
          alert.initOwner(primaryStage);
          alert.show();
        }
      }
 else {
        int posID;
        if (currentCamPos.getPosition() != null)         posID=currentCamPos.getPosition().getId();
 else         posID=pservice.getAllPositions().get(0).getId();
        currentCamPos=pservice.addPairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera().getId(),posID,false);
        kamposList.clear();
        kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
        getTableView().setItems(kamposList);
      }
    }
 else {
      if (checkboxTyp.equals(""String_Node_Str"")) {
        pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
      }
 else {
        pservice.erasePairCameraPosition(currentCamPos);
        currentCamPos=new Profile.PairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera(),null,false);
        kamposList.clear();
        kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
        getTableView().setItems(kamposList);
      }
    }
    LOGGER.debug(""String_Node_Str"" + checkboxTyp + ""String_Node_Str""+ currentCamPos.getId()+ ""String_Node_Str""+ cellCheckbox.isSelected()+ ""String_Node_Str""+ selectedProfile.get(0).getId());
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"" + selectedProfile.get(0).getId(),e);
  }
}"
77786,"public CamPosCheckbox(ObservableList<Profile.PairCameraPosition> kamposList,ProfileService pservice,ObservableList<Profile> selectedProfile,String checkboxTyp,Stage primaryStage){
  this.checkboxTyp=checkboxTyp;
  cellCheckbox.setOnMouseClicked(new EventHandler<MouseEvent>(){
    @Override public void handle(    MouseEvent event){
      Profile.PairCameraPosition currentCamPos=(Profile.PairCameraPosition)CamPosCheckbox.this.getTableView().getItems().get(CamPosCheckbox.this.getIndex());
      try {
        if (cellCheckbox.isSelected()) {
          if (checkboxTyp.equals(""String_Node_Str"")) {
            if (currentCamPos.getPosition() != null)             pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
 else {
              cellCheckbox.setSelected(false);
              Alert alert=new Alert(Alert.AlertType.ERROR);
              alert.setTitle(""String_Node_Str"");
              alert.setHeaderText(""String_Node_Str"");
              alert.setContentText(""String_Node_Str"");
              alert.initOwner(primaryStage);
              alert.show();
            }
          }
 else {
            int posID;
            if (currentCamPos.getPosition() != null)             posID=currentCamPos.getPosition().getId();
 else             posID=pservice.getAllPositions().get(0).getId();
            currentCamPos=pservice.addPairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera().getId(),posID,false);
            kamposList.clear();
            kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
            getTableView().setItems(kamposList);
          }
        }
 else {
          if (checkboxTyp.equals(""String_Node_Str"")) {
            pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),false);
          }
 else {
            pservice.erasePairCameraPosition(currentCamPos);
            currentCamPos=new Profile.PairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera(),null,false);
            kamposList.clear();
            kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
            getTableView().setItems(kamposList);
          }
        }
        LOGGER.debug(""String_Node_Str"" + checkboxTyp + ""String_Node_Str""+ currentCamPos.getId()+ ""String_Node_Str""+ cellCheckbox.isSelected()+ ""String_Node_Str""+ selectedProfile.get(0).getId());
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"" + selectedProfile.get(0).getId(),e);
      }
    }
  }
);
}","public CamPosCheckbox(ObservableList<Profile.PairCameraPosition> kamposList,ProfileService pservice,ObservableList<Profile> selectedProfile,String checkboxTyp,Stage primaryStage){
  this.checkboxTyp=checkboxTyp;
  cellCheckbox.setOnMouseClicked(new EventHandler<MouseEvent>(){
    @Override public void handle(    MouseEvent event){
      Profile.PairCameraPosition currentCamPos=(Profile.PairCameraPosition)CamPosCheckbox.this.getTableView().getItems().get(CamPosCheckbox.this.getIndex());
      try {
        if (cellCheckbox.isSelected()) {
          if (checkboxTyp.equals(""String_Node_Str"")) {
            if (currentCamPos.getPosition() != null)             pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
 else {
              cellCheckbox.setSelected(false);
              Alert alert=new Alert(Alert.AlertType.ERROR);
              alert.setTitle(""String_Node_Str"");
              alert.setHeaderText(""String_Node_Str"");
              alert.setContentText(""String_Node_Str"");
              alert.initOwner(primaryStage);
              alert.show();
            }
          }
 else {
            int posID;
            if (currentCamPos.getPosition() != null)             posID=currentCamPos.getPosition().getId();
 else             posID=pservice.getAllPositions().get(0).getId();
            currentCamPos=pservice.addPairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera().getId(),posID,false);
            kamposList.clear();
            kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
            getTableView().setItems(kamposList);
          }
        }
 else {
          if (checkboxTyp.equals(""String_Node_Str"")) {
            pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
          }
 else {
            pservice.erasePairCameraPosition(currentCamPos);
            currentCamPos=new Profile.PairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera(),null,false);
            kamposList.clear();
            kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
            getTableView().setItems(kamposList);
          }
        }
        LOGGER.debug(""String_Node_Str"" + checkboxTyp + ""String_Node_Str""+ currentCamPos.getId()+ ""String_Node_Str""+ cellCheckbox.isSelected()+ ""String_Node_Str""+ selectedProfile.get(0).getId());
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"" + selectedProfile.get(0).getId(),e);
      }
    }
  }
);
}"
77787,"/** 
 * Saves image in images folder and in database. Also tells the Shot monitor to refresh the image.
 */
@Override public List<CameraThread> createThreads() throws CameraException {
  threadList=new ArrayList<>();
  for (  Camera camera : cameraList) {
    int index=cameraList.indexOf(camera);
    CameraThread cameraThread=new CameraThread();
    cameraThread.setCameraGphoto(cameraGphotoList.get(index));
    cameraThread.setCamera(camera);
    threadList.add(cameraThread);
  }
  return threadList;
}","/** 
 * Saves image in images folder and in database. Also tells the Shot monitor to refresh the image.
 */
@Override public List<CameraThread> createThreads(List<Camera> cameraList) throws CameraException {
  threadList=new ArrayList<>();
  for (  Camera camera : cameraList) {
    int index=cameraList.indexOf(camera);
    CameraThread cameraThread=new CameraThread();
    cameraThread.setCameraGphoto(cameraGphotoList.get(index));
    cameraThread.setCamera(camera);
    threadList.add(cameraThread);
  }
  return threadList;
}"
77788,"@FXML private void initialize(){
  tableLogo.setEditable(true);
  colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
  colLogoID.setCellFactory(tc -> {
    TableCell<Profile.PairLogoRelativeRectangle,Integer> cell=new TableCell<Profile.PairLogoRelativeRectangle,Integer>(){
      @Override protected void updateItem(      Integer item,      boolean empty){
        super.updateItem(item,empty);
        setText(empty ? null : String.valueOf(item));
      }
    }
;
    cell.setOnMouseClicked(e -> {
      if (!cell.isEmpty() && selectedLogo != null) {
        if (selectedLogo.getLogo().getId() == cell.getItem()) {
          LOGGER.debug(""String_Node_Str"" + selectedLogo.getLogo().getId());
          tableLogo.getSelectionModel().clearSelection();
          selectedLogo=null;
          try {
            previewLogo.setImage(SwingFXUtils.toFXImage(logoService.getPreviewForMultipleLogos(logoList,Integer.valueOf(txPreviewWidth.getText()),Integer.valueOf(txPreviewHeight.getText())),null));
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    return cell;
  }
);
  colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String newLabel=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       newLabel=p.getValue().getLogo().getLabel();
      return new ReadOnlyObjectWrapper(newLabel);
    }
  }
);
  colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
  colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
      try {
        Profile.PairLogoRelativeRectangle p=(t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          if (p.getLogo() == null) {
            Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
            p.setLogo(newLogo);
          }
 else {
            if (pservice.getNumberOfUsing(p.getLogo().getId()) == 1) {
              txLogoName.getEntries().remove(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().remove(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              p.getLogo().setLabel(t.getNewValue());
              ImageView imgView=new ImageView(new Image(""String_Node_Str"" + p.getLogo().getPath(),30,30,true,true));
              imgView.setId((p.getLogo().getPath()));
              txLogoName.getEntries().add(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().put(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId(),imgView);
            }
 else {
              int index=logoList.indexOf(p);
              logoList.remove(p);
              p.getLogo().setId(Integer.MIN_VALUE);
              p.getLogo().setLabel(t.getNewValue());
              Logo newLogo=pservice.addLogo(p.getLogo());
              p.setLogo(newLogo);
              logoList.add(index,p);
              ImageView imgView=new ImageView(new Image(""String_Node_Str"" + p.getLogo().getPath(),30,30,true,true));
              imgView.setId((p.getLogo().getPath()));
              txLogoName.getEntries().add(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().put(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId(),imgView);
              pservice.editPairLogoRelativeRectangle(p);
            }
          }
          LOGGER.debug(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
          pservice.editLogo(p.getLogo());
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
    }
  }
);
  colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setX(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
    }
  }
);
  colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setY(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper<>(p.getValue().getRelativeRectangle().getWidth());
    }
  }
);
  colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setWidth(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
    }
  }
);
  colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setHeight(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoLogo.setStyle(""String_Node_Str"");
  colLogoLogo.setSortable(false);
  colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String logoPath=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       logoPath=p.getValue().getLogo().getPath();
      return new ReadOnlyObjectWrapper(logoPath);
    }
  }
);
  colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new LogoImgCell(logoList,pservice,imageHandler,windowManager.getStage(),txLogoName);
    }
  }
);
  colLogoAktion.setStyle(""String_Node_Str"");
  colLogoAktion.setSortable(false);
  colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
    @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(    TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new LogoButtonCell(imageHandler,logoList,pservice,windowManager.getStage(),selectedProfile,previewLogo,txLogoName);
    }
  }
);
  tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
    if (newSelection != null) {
      Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
      LOGGER.debug(""String_Node_Str"" + selectedLogo.getId());
      this.selectedLogo=selectedLogo;
      if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
        try {
          int width=Integer.parseInt(txPreviewWidth.getText());
          int height=Integer.parseInt(txPreviewHeight.getText());
          Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
 else       LOGGER.debug(""String_Node_Str"");
    }
  }
);
  txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,0);
  }
);
  txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,1);
  }
);
  txLogoUpload.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  txLogoUpload.setPrefWidth(50);
  txLogoUpload.setPrefHeight(50);
  txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  txLogoAdd.setPrefWidth(50);
  txLogoAdd.setPrefHeight(50);
  txLogoName.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
  txLogoX.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoName.getText().isEmpty() && !txLogoY.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
  txLogoY.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoName.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
  txLogoBreite.textProperty().addListener((observable,oldValue,newValue) -> {
    if ((!newValue.isEmpty() || !txLogoHoehe.getText().isEmpty()) && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && !txLogoName.getText().isEmpty()) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
  txLogoHoehe.textProperty().addListener((observable,oldValue,newValue) -> {
    if ((!newValue.isEmpty() || !txLogoBreite.getText().isEmpty()) && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && !txLogoName.getText().isEmpty()) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
}","@FXML private void initialize(){
  tableLogo.setEditable(true);
  colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
  colLogoID.setCellFactory(tc -> {
    TableCell<Profile.PairLogoRelativeRectangle,Integer> cell=new TableCell<Profile.PairLogoRelativeRectangle,Integer>(){
      @Override protected void updateItem(      Integer item,      boolean empty){
        super.updateItem(item,empty);
        setText(empty ? null : String.valueOf(item));
      }
    }
;
    cell.setOnMouseClicked(e -> {
      if (!cell.isEmpty() && selectedLogo != null) {
        if (selectedLogo.getId() == cell.getItem()) {
          LOGGER.debug(""String_Node_Str"" + selectedLogo.getId());
          tableLogo.getSelectionModel().clearSelection();
          selectedLogo=null;
          try {
            previewLogo.setImage(SwingFXUtils.toFXImage(logoService.getPreviewForMultipleLogos(logoList,Integer.valueOf(txPreviewWidth.getText()),Integer.valueOf(txPreviewHeight.getText())),null));
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    return cell;
  }
);
  colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String newLabel=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       newLabel=p.getValue().getLogo().getLabel();
      return new ReadOnlyObjectWrapper(newLabel);
    }
  }
);
  colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
  colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
      try {
        Profile.PairLogoRelativeRectangle p=(t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          if (p.getLogo() == null) {
            Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
            p.setLogo(newLogo);
          }
 else {
            if (pservice.getNumberOfUsing(p.getLogo().getId()) == 1) {
              txLogoName.getEntries().remove(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().remove(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              p.getLogo().setLabel(t.getNewValue());
              ImageView imgView=new ImageView(new Image(""String_Node_Str"" + p.getLogo().getPath(),30,30,true,true));
              imgView.setId((p.getLogo().getPath()));
              txLogoName.getEntries().add(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().put(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId(),imgView);
            }
 else {
              int index=logoList.indexOf(p);
              logoList.remove(p);
              p.getLogo().setId(Integer.MIN_VALUE);
              p.getLogo().setLabel(t.getNewValue());
              Logo newLogo=pservice.addLogo(p.getLogo());
              p.setLogo(newLogo);
              logoList.add(index,p);
              ImageView imgView=new ImageView(new Image(""String_Node_Str"" + p.getLogo().getPath(),30,30,true,true));
              imgView.setId((p.getLogo().getPath()));
              txLogoName.getEntries().add(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().put(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId(),imgView);
              pservice.editPairLogoRelativeRectangle(p);
            }
          }
          LOGGER.debug(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
          pservice.editLogo(p.getLogo());
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
    }
  }
);
  colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setX(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
    }
  }
);
  colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setY(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper<>(p.getValue().getRelativeRectangle().getWidth());
    }
  }
);
  colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setWidth(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
    }
  }
);
  colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setHeight(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.get(0).getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoLogo.setStyle(""String_Node_Str"");
  colLogoLogo.setSortable(false);
  colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String logoPath=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       logoPath=p.getValue().getLogo().getPath();
      return new ReadOnlyObjectWrapper(logoPath);
    }
  }
);
  colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new LogoImgCell(logoList,pservice,imageHandler,windowManager.getStage(),txLogoName);
    }
  }
);
  colLogoAktion.setStyle(""String_Node_Str"");
  colLogoAktion.setSortable(false);
  colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
    @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(    TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new LogoButtonCell(imageHandler,logoList,pservice,windowManager.getStage(),selectedProfile,previewLogo,txLogoName);
    }
  }
);
  tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
    if (newSelection != null) {
      Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
      LOGGER.debug(""String_Node_Str"" + selectedLogo.getId());
      this.selectedLogo=selectedLogo;
      if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
        try {
          int width=Integer.parseInt(txPreviewWidth.getText());
          int height=Integer.parseInt(txPreviewHeight.getText());
          Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
 else       LOGGER.debug(""String_Node_Str"");
    }
  }
);
  txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,0);
  }
);
  txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,1);
  }
);
  txLogoUpload.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  txLogoUpload.setPrefWidth(50);
  txLogoUpload.setPrefHeight(50);
  txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  txLogoAdd.setPrefWidth(50);
  txLogoAdd.setPrefHeight(50);
  txLogoName.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
  txLogoX.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoName.getText().isEmpty() && !txLogoY.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
  txLogoY.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoName.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
  txLogoBreite.textProperty().addListener((observable,oldValue,newValue) -> {
    if ((!newValue.isEmpty() || !txLogoHoehe.getText().isEmpty()) && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && !txLogoName.getText().isEmpty()) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
  txLogoHoehe.textProperty().addListener((observable,oldValue,newValue) -> {
    if ((!newValue.isEmpty() || !txLogoBreite.getText().isEmpty()) && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && !txLogoName.getText().isEmpty()) {
      txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getButtonBackground(""String_Node_Str"",50,50));
  }
);
}"
77789,"@Override public Profile read(int id) throws PersistenceException {
  LOGGER.debug(""String_Node_Str"" + id);
  ResultSet rs;
  String sqlString;
  PreparedStatement stmt=null;
  sqlString=""String_Node_Str"";
  try {
    stmt=this.con.prepareStatement(sqlString);
    stmt.setInt(1,id);
    rs=stmt.executeQuery();
    if (rs.next()) {
      Profile profile=new Profile(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),pairCameraPositionDAO.readAllWithProfileID(id),pairLogoRelativeRectangleDAO.readAllWithProfileID(id),new ArrayList<>(),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getBoolean(""String_Node_Str""));
      if (profile.getWatermark() == null) {
        profile.setWatermark(""String_Node_Str"");
      }
      sqlString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
      stmt=this.con.prepareStatement(sqlString);
      stmt.setInt(1,profile.getId());
      rs=stmt.executeQuery();
      if (rs.next()) {
        profile.getBackgroundCategories().add(backgroundCategoryDAO.read(rs.getInt(""String_Node_Str"")));
      }
      return profile;
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      return null;
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
 finally {
    try {
      if (stmt != null)       stmt.close();
    }
 catch (    SQLException e) {
      throw new PersistenceException(""String_Node_Str"" + e);
    }
  }
}","@Override public Profile read(int id) throws PersistenceException {
  LOGGER.debug(""String_Node_Str"" + id);
  ResultSet rs;
  String sqlString;
  PreparedStatement stmt=null;
  sqlString=""String_Node_Str"";
  try {
    stmt=this.con.prepareStatement(sqlString);
    stmt.setInt(1,id);
    rs=stmt.executeQuery();
    if (rs.next()) {
      Profile profile=new Profile(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),pairCameraPositionDAO.readAllWithProfileID(id),pairLogoRelativeRectangleDAO.readAllWithProfileID(id),new ArrayList<>(),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getBoolean(""String_Node_Str""));
      if (profile.getWatermark() == null) {
        profile.setWatermark(""String_Node_Str"");
      }
      sqlString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
      stmt=this.con.prepareStatement(sqlString);
      stmt.setInt(1,profile.getId());
      rs=stmt.executeQuery();
      while (rs.next()) {
        profile.getBackgroundCategories().add(backgroundCategoryDAO.read(rs.getInt(""String_Node_Str"")));
      }
      return profile;
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      return null;
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
 finally {
    try {
      if (stmt != null)       stmt.close();
    }
 catch (    SQLException e) {
      throw new PersistenceException(""String_Node_Str"" + e);
    }
  }
}"
77790,"@Autowired public ProfileServiceImpl(ProfileDAO profileDAO,PositionDAO positionDAO,LogoDAO logoDAO,CameraDAO cameraDAO,ShootingService shootingService,CameraService cameraService) throws ServiceException {
  this.profileDAO=profileDAO;
  this.positionDAO=positionDAO;
  this.logoDAO=logoDAO;
  this.cameraDAO=cameraDAO;
  this.shootingService=shootingService;
  this.cameraService=cameraService;
  this.setActiveProfile(1);
  try {
    profileList.addAll(profileDAO.readAll());
    positionList.addAll(positionDAO.readAll());
    logoList.addAll(logoDAO.readAll());
    cameraList.addAll(cameraDAO.readActive());
  }
 catch (  PersistenceException e) {
    throw new ServiceException(""String_Node_Str"" + e);
  }
}","@Autowired public ProfileServiceImpl(ProfileDAO profileDAO,PositionDAO positionDAO,LogoDAO logoDAO,CameraDAO cameraDAO,ShootingService shootingService,CameraService cameraService,BackgroundService backgroundService) throws ServiceException {
  this.profileDAO=profileDAO;
  this.positionDAO=positionDAO;
  this.logoDAO=logoDAO;
  this.cameraDAO=cameraDAO;
  this.shootingService=shootingService;
  this.cameraService=cameraService;
  this.backgroundService=backgroundService;
  this.setActiveProfile(1);
  try {
    profileList.addAll(profileDAO.readAll());
    positionList.addAll(positionDAO.readAll());
    logoList.addAll(logoDAO.readAll());
    cameraList.addAll(cameraDAO.readActive());
  }
 catch (  PersistenceException e) {
    throw new ServiceException(""String_Node_Str"" + e);
  }
}"
77791,"@Before public void setUp() throws Exception {
  this.con=H2EmbeddedHandler.getInstance().getTestConnection();
  when(mockH2Handler.getConnection()).thenReturn(mockConnection);
  when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
  when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
  when(mockStatement.executeUpdate(anyString())).thenReturn(1);
  when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
  when(mockConnection.prepareStatement(anyString(),anyInt())).thenReturn(mockPreparedStatement);
  when(mockConnection.createStatement()).thenReturn(mockStatement);
  when(mockPreparedStatement.getGeneratedKeys()).thenReturn(mockResultSet);
  when(mockResultSet.next()).thenReturn(Boolean.TRUE,Boolean.FALSE);
  mockLogoDAO=new JDBCLogoDAO(mockH2Handler);
  mockCameraDAO=new JDBCCameraDAO(mockH2Handler);
  mockPositionDAO=new JDBCPositionDAO(mockH2Handler);
  mockPairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(mockH2Handler);
  mockPairCameraPositionDAO=new JDCBPairCameraPositionDAO(mockH2Handler);
  mockProfileDAO=new JDBCProfileDAO(mockH2Handler);
  mockImageDAO=new JDBCImageDAO(mockH2Handler);
  mockShootingDAO=new JDBCShootingDAO(mockH2Handler);
  mockbackgroundCategoryDAO=new JDBCBackgroundCategoryDAO(mockH2Handler);
  logoDAO=new JDBCLogoDAO(H2EmbeddedHandler.getInstance());
  cameraDAO=new JDBCCameraDAO(H2EmbeddedHandler.getInstance());
  positionDAO=new JDBCPositionDAO(H2EmbeddedHandler.getInstance());
  pairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(H2EmbeddedHandler.getInstance());
  pairCameraPositionDAO=new JDCBPairCameraPositionDAO(H2EmbeddedHandler.getInstance());
  profileDAO=new JDBCProfileDAO(H2EmbeddedHandler.getInstance());
  imageDAO=new JDBCImageDAO(H2EmbeddedHandler.getInstance());
  shootingDAO=new JDBCShootingDAO(H2EmbeddedHandler.getInstance());
  adminUserDAO=new JDBCAdminUserDAO(H2EmbeddedHandler.getInstance());
  backgroundCategoryDAO=new JDBCBackgroundCategoryDAO(H2EmbeddedHandler.getInstance());
  profileService=new ProfileServiceImpl(new JDBCProfileDAO(H2EmbeddedHandler.getInstance()),new JDBCPositionDAO(H2EmbeddedHandler.getInstance()),new JDBCLogoDAO(H2EmbeddedHandler.getInstance()),new JDBCCameraDAO(H2EmbeddedHandler.getInstance()),new ShootingServiceImpl(shootingDAO),new CameraServiceImpl(cameraDAO));
  try {
    con.setAutoCommit(false);
    LOGGER.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
  String deletePath=this.getClass().getResource(""String_Node_Str"").getPath();
  String insertPath=this.getClass().getResource(""String_Node_Str"").getPath();
  ResultSet rs=RunScript.execute(con,new FileReader(deletePath));
  if (rs != null && !rs.isClosed())   rs.close();
  rs=RunScript.execute(con,new FileReader(insertPath));
  if (rs != null && !rs.isClosed())   rs.close();
  cameraA=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cameraB=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cameraC=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  camera1000000=new Camera(1000000,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  positionA=new Position(""String_Node_Str"",""String_Node_Str"");
  positionB=new Position(""String_Node_Str"",""String_Node_Str"");
  positionC=new Position(""String_Node_Str"",""String_Node_Str"");
  position1000000=new Position(1000000,""String_Node_Str"",""String_Node_Str"",false);
  logoA=new Logo(""String_Node_Str"",""String_Node_Str"");
  logoB=new Logo(""String_Node_Str"",""String_Node_Str"");
  logoC=new Logo(""String_Node_Str"",""String_Node_Str"");
  logo1000000=new Logo(1000000,""String_Node_Str"",""String_Node_Str"",false);
  camera1=cameraDAO.read(1);
  camera2=cameraDAO.read(2);
  position1=positionDAO.read(1);
  position2=positionDAO.read(2);
  logo1=logoDAO.read(1);
  logo2=logoDAO.read(2);
  relativeRectangleA=new RelativeRectangle(10.1,10.2,30.3,30.4);
  relativeRectangleB=new RelativeRectangle(80.1,80.2,10.3,10.4);
  relativeRectangleC=new RelativeRectangle(1,2,3,4);
  relativeRectangleD=new RelativeRectangle(20,21,22,23);
  pairCameraPositions=new ArrayList<>();
  pairCameraPositionA=new Profile.PairCameraPosition(camera1,position1,true);
  pairCameraPositionB=new Profile.PairCameraPosition(camera2,position2,false);
  pairCameraPositionC=new Profile.PairCameraPosition(cameraA,positionA,true);
  pairCameraPosition1000000=new Profile.PairCameraPosition(1000000,3,camera1,position1,false);
  pairCameraPositions.add(pairCameraPositionA);
  pairCameraPositions.add(pairCameraPositionB);
  pairLogoRelativeRectangles=new ArrayList<>();
  pairLogoRelativeRectangleA=new Profile.PairLogoRelativeRectangle(logo1,relativeRectangleA);
  pairLogoRelativeRectangleB=new Profile.PairLogoRelativeRectangle(logo2,relativeRectangleB);
  pairLogoRelativeRectangleC=new Profile.PairLogoRelativeRectangle(logoA,relativeRectangleC);
  pairLogoRelativeRectangle1000000=new Profile.PairLogoRelativeRectangle(1000000,2,logo1,relativeRectangleD);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleA);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleB);
  profileA=new Profile(""String_Node_Str"");
  profileB=new Profile(""String_Node_Str"",true,true,true,true,""String_Node_Str"");
  profileC=new Profile(20,""String_Node_Str"",pairCameraPositions,pairLogoRelativeRectangles,new ArrayList<>(),true,true,true,true,""String_Node_Str"",false);
  backgroundCategoryA=new Background.Category(""String_Node_Str"");
  backgroundCategoryB=new Background.Category(""String_Node_Str"");
  backgroundCategory10=new Background.Category(10,""String_Node_Str"",false);
}","@Before public void setUp() throws Exception {
  this.con=H2EmbeddedHandler.getInstance().getTestConnection();
  when(mockH2Handler.getConnection()).thenReturn(mockConnection);
  when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
  when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
  when(mockStatement.executeUpdate(anyString())).thenReturn(1);
  when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
  when(mockConnection.prepareStatement(anyString(),anyInt())).thenReturn(mockPreparedStatement);
  when(mockConnection.createStatement()).thenReturn(mockStatement);
  when(mockPreparedStatement.getGeneratedKeys()).thenReturn(mockResultSet);
  when(mockResultSet.next()).thenReturn(Boolean.TRUE,Boolean.FALSE);
  mockLogoDAO=new JDBCLogoDAO(mockH2Handler);
  mockCameraDAO=new JDBCCameraDAO(mockH2Handler);
  mockPositionDAO=new JDBCPositionDAO(mockH2Handler);
  mockPairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(mockH2Handler);
  mockPairCameraPositionDAO=new JDCBPairCameraPositionDAO(mockH2Handler);
  mockProfileDAO=new JDBCProfileDAO(mockH2Handler);
  mockImageDAO=new JDBCImageDAO(mockH2Handler);
  mockShootingDAO=new JDBCShootingDAO(mockH2Handler);
  mockbackgroundCategoryDAO=new JDBCBackgroundCategoryDAO(mockH2Handler);
  logoDAO=new JDBCLogoDAO(H2EmbeddedHandler.getInstance());
  cameraDAO=new JDBCCameraDAO(H2EmbeddedHandler.getInstance());
  positionDAO=new JDBCPositionDAO(H2EmbeddedHandler.getInstance());
  pairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(H2EmbeddedHandler.getInstance());
  pairCameraPositionDAO=new JDCBPairCameraPositionDAO(H2EmbeddedHandler.getInstance());
  profileDAO=new JDBCProfileDAO(H2EmbeddedHandler.getInstance());
  imageDAO=new JDBCImageDAO(H2EmbeddedHandler.getInstance());
  shootingDAO=new JDBCShootingDAO(H2EmbeddedHandler.getInstance());
  adminUserDAO=new JDBCAdminUserDAO(H2EmbeddedHandler.getInstance());
  backgroundCategoryDAO=new JDBCBackgroundCategoryDAO(H2EmbeddedHandler.getInstance());
  backgroundDAO=new JDBCBackgroundDAO(H2EmbeddedHandler.getInstance());
  profileService=new ProfileServiceImpl(new JDBCProfileDAO(H2EmbeddedHandler.getInstance()),new JDBCPositionDAO(H2EmbeddedHandler.getInstance()),new JDBCLogoDAO(H2EmbeddedHandler.getInstance()),new JDBCCameraDAO(H2EmbeddedHandler.getInstance()),new ShootingServiceImpl(shootingDAO),new CameraServiceImpl(cameraDAO),new BackgroundServiceImpl(backgroundDAO,backgroundCategoryDAO));
  try {
    con.setAutoCommit(false);
    LOGGER.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
  String deletePath=this.getClass().getResource(""String_Node_Str"").getPath();
  String insertPath=this.getClass().getResource(""String_Node_Str"").getPath();
  ResultSet rs=RunScript.execute(con,new FileReader(deletePath));
  if (rs != null && !rs.isClosed())   rs.close();
  rs=RunScript.execute(con,new FileReader(insertPath));
  if (rs != null && !rs.isClosed())   rs.close();
  cameraA=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cameraB=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cameraC=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  camera1000000=new Camera(1000000,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  positionA=new Position(""String_Node_Str"",""String_Node_Str"");
  positionB=new Position(""String_Node_Str"",""String_Node_Str"");
  positionC=new Position(""String_Node_Str"",""String_Node_Str"");
  position1000000=new Position(1000000,""String_Node_Str"",""String_Node_Str"",false);
  logoA=new Logo(""String_Node_Str"",""String_Node_Str"");
  logoB=new Logo(""String_Node_Str"",""String_Node_Str"");
  logoC=new Logo(""String_Node_Str"",""String_Node_Str"");
  logo1000000=new Logo(1000000,""String_Node_Str"",""String_Node_Str"",false);
  camera1=cameraDAO.read(1);
  camera2=cameraDAO.read(2);
  position1=positionDAO.read(1);
  position2=positionDAO.read(2);
  logo1=logoDAO.read(1);
  logo2=logoDAO.read(2);
  relativeRectangleA=new RelativeRectangle(10.1,10.2,30.3,30.4);
  relativeRectangleB=new RelativeRectangle(80.1,80.2,10.3,10.4);
  relativeRectangleC=new RelativeRectangle(1,2,3,4);
  relativeRectangleD=new RelativeRectangle(20,21,22,23);
  pairCameraPositions=new ArrayList<>();
  pairCameraPositionA=new Profile.PairCameraPosition(camera1,position1,true);
  pairCameraPositionB=new Profile.PairCameraPosition(camera2,position2,false);
  pairCameraPositionC=new Profile.PairCameraPosition(cameraA,positionA,true);
  pairCameraPosition1000000=new Profile.PairCameraPosition(1000000,3,camera1,position1,false);
  pairCameraPositions.add(pairCameraPositionA);
  pairCameraPositions.add(pairCameraPositionB);
  pairLogoRelativeRectangles=new ArrayList<>();
  pairLogoRelativeRectangleA=new Profile.PairLogoRelativeRectangle(logo1,relativeRectangleA);
  pairLogoRelativeRectangleB=new Profile.PairLogoRelativeRectangle(logo2,relativeRectangleB);
  pairLogoRelativeRectangleC=new Profile.PairLogoRelativeRectangle(logoA,relativeRectangleC);
  pairLogoRelativeRectangle1000000=new Profile.PairLogoRelativeRectangle(1000000,2,logo1,relativeRectangleD);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleA);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleB);
  categories=new ArrayList<>();
  backgroundCategory1=backgroundCategoryDAO.read(1);
  backgroundCategory2=backgroundCategoryDAO.read(2);
  backgroundCategory3=backgroundCategoryDAO.read(3);
  backgroundCategory4=backgroundCategoryDAO.read(4);
  backgroundCategoryA=new Background.Category(""String_Node_Str"");
  backgroundCategoryB=new Background.Category(""String_Node_Str"");
  categories.add(backgroundCategory1);
  categories.add(backgroundCategory2);
  categories.add(backgroundCategory3);
  categories.add(backgroundCategory4);
  backgroundCategory10=new Background.Category(10,""String_Node_Str"",false);
  profile1=profileService.get(1);
  profileA=new Profile(""String_Node_Str"");
  profileB=new Profile(""String_Node_Str"",true,true,true,true,""String_Node_Str"");
  profileC=new Profile(20,""String_Node_Str"",pairCameraPositions,pairLogoRelativeRectangles,new ArrayList<>(),true,true,true,true,""String_Node_Str"",false);
}"
77792,"@Override public void stop() throws Exception {
  LOGGER.info(""String_Node_Str"");
  DBHandler dbHandler=applicationContext.getBean(DBHandler.class);
  if (dbHandler != null) {
    dbHandler.closeConnection();
  }
  ImageProcessingManager imageProcessingManager=applicationContext.getBean(ImageProcessingManager.class);
  imageProcessingManager.stopImageProcessing();
  if (this.applicationContext != null && applicationContext.isRunning()) {
    this.applicationContext.close();
  }
  super.stop();
}","@Override public void stop() throws Exception {
  LOGGER.info(""String_Node_Str"");
  ImageProcessingManager imageProcessingManager=applicationContext.getBean(ImageProcessingManager.class);
  imageProcessingManager.stopImageProcessing();
  DBHandler dbHandler=applicationContext.getBean(DBHandler.class);
  if (dbHandler != null) {
    dbHandler.closeConnection();
  }
  if (this.applicationContext != null && applicationContext.isRunning()) {
    this.applicationContext.close();
  }
  super.stop();
}"
77793,"private void capturePreview(){
  final CameraFile cf;
  try {
    cf=cameraGphoto.capturePreview();
  }
 catch (  CameraException e) {
    LOGGER.error(""String_Node_Str"",e);
    setStop(true);
    return;
  }
  if (cf == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  String imagePath=tempStorage + ""String_Node_Str"" + +camera.getId()+ ""String_Node_Str"";
  try {
    cf.save(new File(imagePath).getAbsolutePath());
  }
 catch (  CameraException e) {
    LOGGER.error(""String_Node_Str"",imagePath,e);
    setStop(true);
  }
 finally {
    CameraUtils.closeQuietly(cf);
  }
  try {
    imageProcessor.processPreview(imagePath);
  }
 catch (  ServiceException e) {
    if (!shouldStop) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","private void capturePreview(){
  final CameraFile cf;
  try {
    cf=cameraGphoto.capturePreview();
  }
 catch (  CameraException e) {
    LOGGER.error(""String_Node_Str"",e);
    setStop(true);
    return;
  }
  if (cf == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  String imagePath=tempStoragePath + ""String_Node_Str"" + +camera.getId()+ ""String_Node_Str"";
  try {
    cf.save(new File(imagePath).getAbsolutePath());
  }
 catch (  CameraException e) {
    LOGGER.error(""String_Node_Str"",imagePath,e);
    setStop(true);
  }
 finally {
    CameraUtils.closeQuietly(cf);
  }
  try {
    imageProcessor.processPreview(imagePath);
  }
 catch (  ServiceException|NullPointerException e) {
    if (!shouldStop) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}"
77794,"@Override public void run(){
  createTempDir();
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
        while (!shotFrameController.isExpired()) {
          capturePreview();
        }
      }
      captureImage();
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      try {
        cameraGphoto.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      LOGGER.debug(""String_Node_Str"",camera);
    }
  }
}","@Override public void run(){
  if (!checkInitialized()) {
    LOGGER.error(""String_Node_Str"");
    shouldStop=true;
  }
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
        while (!shotFrameController.isExpired()) {
          capturePreview();
        }
      }
      captureImage();
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      try {
        cameraGphoto.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      LOGGER.debug(""String_Node_Str"",camera);
    }
  }
}"
77795,"/** 
 * deleting created mini preview images in filesystem
 * @param imgPath imagepath to delete
 */
public void deletePreviews(String imgPath){
  LOGGER.debug(""String_Node_Str"" + imgPath);
  String[] parts=imgPath.split(""String_Node_Str"");
  String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"");
  File previewFile=new File(activeShooting.getStorageDir() + imgFilterName);
  if (previewFile.isFile())   previewFile.delete();
}","/** 
 * deleting created mini preview images in filesystem
 * @param imgPath imagepath to delete
 */
public void deletePreviews(String imgPath){
  LOGGER.debug(""String_Node_Str"" + imgPath);
  String[] parts=imgPath.split(""String_Node_Str"");
  String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"");
  File previewFile=new File(tempStorageDir + imgFilterName);
  if (previewFile.isFile())   previewFile.delete();
}"
77796,"@Autowired public FullScreenImageController(WindowManager windowManager,ShootingService shootingService,FilterService filterService,ImageService imageService,ImagePrinter imagePrinter,ImageHandler imageHandler,RefreshManager refreshManager) throws ServiceException {
  this.filterService=filterService;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.windowManager=windowManager;
  this.imagePrinter=imagePrinter;
  this.refreshManager=refreshManager;
  this.imageHandler=imageHandler;
  this.activeShooting=shootingService.searchIsActive();
}","@Autowired public FullScreenImageController(WindowManager windowManager,ShootingService shootingService,FilterService filterService,ImageService imageService,ImagePrinter imagePrinter,ImageHandler imageHandler,RefreshManager refreshManager,TempStorageHandler tempStorageHandler) throws ServiceException {
  this.filterService=filterService;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.windowManager=windowManager;
  this.imagePrinter=imagePrinter;
  this.refreshManager=refreshManager;
  this.imageHandler=imageHandler;
  this.tempStorageDir=tempStorageHandler.getTempStoragePath();
}"
77797,"/** 
 * saves the filtered image in database...
 */
@FXML public void saveFilteredImg(){
  if (cropping) {
    onCheckPressed();
  }
 else {
    LOGGER.debug(""String_Node_Str"" + filteredImgPath);
    try {
      activeFilterImageView.setFitHeight(80);
      activeFilterImageView.setPreserveRatio(false);
      saveFilteredButton.setVisible(false);
      String[] parts=ivfullscreenImage.getId().split(""String_Node_Str"");
      String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"" + activeFilterImageView.getId() + ""String_Node_Str"");
      String destPath=activeShooting.getStorageDir() + imgFilterName;
      imageHandler.saveImage(filterService.filter(activeFilterImageView.getId(),ivfullscreenImage.getId()),destPath);
      activeFilterImageView=null;
      at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.create(new at.ac.tuwien.sepm.ws16.qse01.entities.Image(destPath,activeShooting.getId()));
      if ((currentIndex + 1) >= imageList.size()) {
        imageList.add(newImage);
        refreshManager.notifyMiniatureFrameOfAdd(newImage,-1);
      }
 else {
        imageList.add(currentIndex + 1,newImage);
        refreshManager.notifyMiniatureFrameOfAdd(newImage,currentIndex + 1);
      }
      currentIndex=currentIndex + 1;
      button4.setVisible(true);
      LOGGER.debug(""String_Node_Str"");
    }
 catch (    ImageHandlingException|ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * saves the filtered image in database...
 */
@FXML public void saveFilteredImg(){
  if (cropping) {
    onCheckPressed();
  }
 else {
    LOGGER.debug(""String_Node_Str"" + filteredImgPath);
    try {
      activeFilterImageView.setFitHeight(80);
      activeFilterImageView.setPreserveRatio(false);
      saveFilteredButton.setVisible(false);
      String[] parts=ivfullscreenImage.getId().split(""String_Node_Str"");
      String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"" + activeFilterImageView.getId() + ""String_Node_Str"");
      String destPath=shootingService.searchIsActive().getStorageDir() + imgFilterName;
      imageHandler.saveImage(filterService.filter(activeFilterImageView.getId(),ivfullscreenImage.getId()),destPath);
      activeFilterImageView=null;
      int shootingID=shootingService.searchIsActive().getId();
      at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.create(new at.ac.tuwien.sepm.ws16.qse01.entities.Image(destPath,shootingID));
      if ((currentIndex + 1) >= imageList.size()) {
        imageList.add(newImage);
        refreshManager.notifyMiniatureFrameOfAdd(newImage,-1);
      }
 else {
        imageList.add(currentIndex + 1,newImage);
        refreshManager.notifyMiniatureFrameOfAdd(newImage,currentIndex + 1);
      }
      currentIndex=currentIndex + 1;
      button4.setVisible(true);
      LOGGER.debug(""String_Node_Str"");
    }
 catch (    ImageHandlingException|ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}"
77798,"private void initCameraThreads(Map<Position,ShotFrameController> positionShotFrameMap) throws ServiceException {
  for (  CameraThread cameraThread : cameraThreadList) {
    if (cameraThread.getCamera() == null) {
      LOGGER.error(""String_Node_Str"",cameraThread);
    }
    Position position=profileService.getPositionOfCameraOfProfile(cameraThread.getCamera());
    if (position == null) {
      LOGGER.error(""String_Node_Str"",cameraThread.getCamera());
      throw new ServiceException(""String_Node_Str"");
    }
    ShotFrameController shotFrameController=positionShotFrameMap.get(position);
    if (shotFrameController == null) {
      LOGGER.error(""String_Node_Str"",position);
      throw new ServiceException(""String_Node_Str"");
    }
    ImageHandler imageHandler;
    try {
      imageHandler=new ImageHandler(openCVLoader);
    }
 catch (    LibraryLoadingException e) {
      shotFrameManager.closeFrames();
      throw new ServiceException(e);
    }
    LogoWatermarkService logoWatermarkService=new LogoWatermarkServiceImpl(profileService,imageHandler);
    FilterService filterService=new FilterServiceImpl(shootingService,openCVLoader,imageHandler);
    GreenscreenService greenscreenService=new GreenscreenServiceImpl(openCVLoader,imageHandler);
    ImageProcessor imageProcessor=new ImageProcessorImpl(shotFrameController,shootingService,profileService,imageService,logoWatermarkService,filterService,greenscreenService,position,imageHandler,refreshManager);
    cameraThread.setImageService(imageService);
    cameraThread.setShootingService(shootingService);
    cameraThread.setShotFrameController(shotFrameController);
    cameraThread.setImageProcessor(imageProcessor);
  }
}","private void initCameraThreads(Map<Position,ShotFrameController> positionShotFrameMap) throws ServiceException {
  for (  CameraThread cameraThread : cameraThreadList) {
    if (cameraThread.getCamera() == null) {
      LOGGER.error(""String_Node_Str"",cameraThread);
    }
    Position position=profileService.getPositionOfCameraOfProfile(cameraThread.getCamera());
    if (position == null) {
      LOGGER.error(""String_Node_Str"",cameraThread.getCamera());
      throw new ServiceException(""String_Node_Str"");
    }
    ShotFrameController shotFrameController=positionShotFrameMap.get(position);
    if (shotFrameController == null) {
      LOGGER.error(""String_Node_Str"",position);
      throw new ServiceException(""String_Node_Str"");
    }
    ImageHandler imageHandler;
    try {
      imageHandler=new ImageHandler(openCVLoader);
    }
 catch (    LibraryLoadingException e) {
      shotFrameManager.closeFrames();
      throw new ServiceException(e);
    }
    LogoWatermarkService logoWatermarkService=new LogoWatermarkServiceImpl(profileService,imageHandler);
    FilterService filterService=new FilterServiceImpl(openCVLoader,imageHandler,tempStorageHandler);
    GreenscreenService greenscreenService=new GreenscreenServiceImpl(openCVLoader,imageHandler);
    ImageProcessor imageProcessor=new ImageProcessorImpl(shotFrameController,shootingService,profileService,imageService,logoWatermarkService,filterService,greenscreenService,position,imageHandler,refreshManager);
    cameraThread.setImageService(imageService);
    cameraThread.setShootingService(shootingService);
    cameraThread.setTempStoragePath(tempStorageHandler.getTempStoragePath());
    cameraThread.setShotFrameController(shotFrameController);
    cameraThread.setImageProcessor(imageProcessor);
  }
}"
77799,"@Autowired public ImageProcessingManagerImpl(CameraHandler cameraHandler,ShotFrameManager shotFrameManager,RefreshManager refreshManager,ShootingService shootingService,ProfileService profileService,ImageService imageService,RemoteService remoteService,OpenCVLoader openCVLoader){
  this.cameraHandler=cameraHandler;
  this.shotFrameManager=shotFrameManager;
  this.refreshManager=refreshManager;
  this.shootingService=shootingService;
  this.profileService=profileService;
  this.imageService=imageService;
  this.remoteService=remoteService;
  this.openCVLoader=openCVLoader;
}","@Autowired public ImageProcessingManagerImpl(CameraHandler cameraHandler,ShotFrameManager shotFrameManager,RefreshManager refreshManager,ShootingService shootingService,ProfileService profileService,ImageService imageService,RemoteService remoteService,OpenCVLoader openCVLoader,TempStorageHandler tempStorageHandler){
  this.cameraHandler=cameraHandler;
  this.shotFrameManager=shotFrameManager;
  this.refreshManager=refreshManager;
  this.shootingService=shootingService;
  this.profileService=profileService;
  this.imageService=imageService;
  this.remoteService=remoteService;
  this.openCVLoader=openCVLoader;
  this.tempStorageHandler=tempStorageHandler;
}"
77800,"@Override public String resize(String imgPath,int width,int height){
  LOGGER.debug(""String_Node_Str"" + imgPath);
  Mat source=Imgcodecs.imread(imgPath,Imgcodecs.CV_LOAD_IMAGE_COLOR);
  Mat resizeimage=new Mat();
  Size sz=new Size(width,height);
  Imgproc.resize(source,resizeimage,sz);
  source.release();
  String[] parts=imgPath.split(""String_Node_Str"");
  String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"");
  Imgcodecs.imwrite(storageDir + imgFilterName,resizeimage);
  resizeimage.release();
  return storageDir + imgFilterName;
}","@Override public String resize(String imgPath,int width,int height) throws ServiceException {
  LOGGER.debug(""String_Node_Str"" + imgPath);
  Mat source=Imgcodecs.imread(imgPath,Imgcodecs.CV_LOAD_IMAGE_COLOR);
  Mat resizeimage=new Mat();
  Size sz=new Size(width,height);
  Imgproc.resize(source,resizeimage,sz);
  source.release();
  String[] parts=imgPath.split(""String_Node_Str"");
  String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"");
  Imgcodecs.imwrite(storageDir + imgFilterName,resizeimage);
  resizeimage.release();
  return storageDir + imgFilterName;
}"
77801,"@Autowired public FilterServiceImpl(ShootingService shootingService,OpenCVLoader openCVLoader,ImageHandler imageHandler) throws ServiceException {
  filterList=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  activeShooting=shootingService.searchIsActive();
  try {
    openCVLoader.loadLibrary();
  }
 catch (  LibraryLoadingException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServiceException(""String_Node_Str"",e);
  }
  this.imageHandler=imageHandler;
  storageDir=activeShooting.getStorageDir() + ""String_Node_Str"";
}","@Autowired public FilterServiceImpl(OpenCVLoader openCVLoader,ImageHandler imageHandler,TempStorageHandler tempStorageHandler) throws ServiceException {
  filterList=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  try {
    openCVLoader.loadLibrary();
  }
 catch (  LibraryLoadingException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServiceException(""String_Node_Str"",e);
  }
  storageDir=tempStorageHandler.getTempStoragePath();
  this.imageHandler=imageHandler;
}"
77802,"@Override public void stop() throws Exception {
  LOGGER.info(""String_Node_Str"");
  ImageProcessingManager imageProcessingManager=applicationContext.getBean(ImageProcessingManager.class);
  imageProcessingManager.stopImageProcessing();
  DBHandler dbHandler=applicationContext.getBean(DBHandler.class);
  if (dbHandler != null) {
    dbHandler.closeConnection();
  }
  if (this.applicationContext != null && applicationContext.isRunning()) {
    this.applicationContext.close();
  }
  super.stop();
}","@Override public void stop() throws Exception {
  LOGGER.info(""String_Node_Str"");
  ImageProcessingManager imageProcessingManager=applicationContext.getBean(ImageProcessingManager.class);
  imageProcessingManager.stopImageProcessing();
  CameraHandler cameraHandler=applicationContext.getBean(CameraHandler.class);
  cameraHandler.closeCameras();
  DBHandler dbHandler=applicationContext.getBean(DBHandler.class);
  if (dbHandler != null) {
    dbHandler.closeConnection();
  }
  if (this.applicationContext != null && applicationContext.isRunning()) {
    this.applicationContext.close();
  }
  super.stop();
}"
77803,"/** 
 * Sets the countdown flag in the CameraThread
 * @param camera camera that shall be configured
 * @param countdown number of seconds a countdown should be displayed
 */
public void setCountdown(Camera camera,int countdown);","/** 
 * Sets the countdown flag in the CameraThread
 * @param camera camera that shall be configured
 * @param countdown number of seconds a countdown should be displayed
 */
void setCountdown(Camera camera,int countdown);"
77804,"/** 
 * Sets the serieShot flag in the CameraThread
 * @param camera camera that shall be configured
 * @param serieShot whether multiple shots should be taken or not
 */
public void setSerieShot(Camera camera,boolean serieShot);","/** 
 * Sets the serieShot flag in the CameraThread
 * @param camera camera that shall be configured
 * @param serieShot whether multiple shots should be taken or not
 */
void setSerieShot(Camera camera,boolean serieShot);"
77805,"@Override public List<Camera> getCameras() throws CameraException {
  if (!cameraList.isEmpty()) {
    for (    CameraGphoto camera : cameraGphotoList) {
      if (!camera.isInitialized()) {
        camera.initialize();
      }
    }
    return cameraList;
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  return cameraList;
}","@Override public List<Camera> getCameras() throws CameraException {
  if (isInitialized) {
    for (    CameraGphoto camera : cameraGphotoList) {
      if (!camera.isInitialized()) {
        camera.initialize();
      }
    }
    return cameraList;
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  isInitialized=true;
  return cameraList;
}"
77806,"@Override public void run(){
  if (!checkInitialized()) {
    LOGGER.error(""String_Node_Str"");
    shouldStop=true;
  }
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
        while (!shotFrameController.isExpired()) {
          capturePreview();
        }
      }
      captureImage();
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      try {
        cameraGphoto.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      LOGGER.debug(""String_Node_Str"",camera);
    }
  }
}","@Override public void run(){
  if (!checkInitialized()) {
    LOGGER.error(""String_Node_Str"");
    shouldStop=true;
  }
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
        while (!shotFrameController.isExpired()) {
          capturePreview();
        }
      }
      captureImage();
      takeImage=false;
    }
 else {
      capturePreview();
    }
  }
  LOGGER.debug(""String_Node_Str"",camera);
}"
77807,"/** 
 * Shooting ends to do so the service methode endShooting gets called and main frame gets called catches ServiceException caused by Service methodes
 */
@FXML public void onStopShootingPressed(){
  try {
    profileService.resetActiveProfileNonPersistentAttributes();
    shootingService.endShooting();
    inactivemode();
    imageProcessingManager.stopImageProcessing();
    windowManager.showScene(WindowManager.SHOW_MAINSCENE);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * Shooting ends to do so the service methode endShooting gets called and main frame gets called catches ServiceException caused by Service methodes
 */
@FXML public void onStopShootingPressed(){
  try {
    imageProcessingManager.stopImageProcessing();
    profileService.resetActiveProfileNonPersistentAttributes();
    shootingService.endShooting();
    inactivemode();
    windowManager.showScene(WindowManager.SHOW_MAINSCENE);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}"
77808,"@Autowired public ImageProcessingManagerImpl(CameraHandler cameraHandler,ShotFrameManager shotFrameManager,RefreshManager refreshManager,ShootingService shootingService,ProfileService profileService,ImageService imageService,RemoteService remoteService,OpenCVLoader openCVLoader,TempStorageHandler tempStorageHandler){
  this.cameraHandler=cameraHandler;
  this.shotFrameManager=shotFrameManager;
  this.refreshManager=refreshManager;
  this.shootingService=shootingService;
  this.profileService=profileService;
  this.imageService=imageService;
  this.remoteService=remoteService;
  this.openCVLoader=openCVLoader;
  this.tempStorageHandler=tempStorageHandler;
}","@Autowired public ImageProcessingManagerImpl(CameraHandler cameraHandler,ShotFrameManager shotFrameManager,RefreshManager refreshManager,ShootingService shootingService,ProfileService profileService,ImageService imageService,OpenCVLoader openCVLoader,TempStorageHandler tempStorageHandler){
  this.cameraHandler=cameraHandler;
  this.shotFrameManager=shotFrameManager;
  this.refreshManager=refreshManager;
  this.shootingService=shootingService;
  this.profileService=profileService;
  this.imageService=imageService;
  this.openCVLoader=openCVLoader;
  this.tempStorageHandler=tempStorageHandler;
}"
77809,"private Map<Position,ShotFrameController> initShotFrameManager(List<Camera> cameraList) throws ServiceException {
  List<Position> positionList=new ArrayList<>();
  for (  Camera c : cameraList) {
    Position p=profileService.getPositionOfCameraOfProfile(c);
    if (p != null) {
      LOGGER.debug(""String_Node_Str"");
      positionList.add(p);
    }
 else {
      LOGGER.info(""String_Node_Str"" + c.getId());
      cameraHandler.removeCameraFromList(c);
    }
  }
  int positionNumber=profileService.getAllPairCameraPositionOfProfile().size();
  if (positionList.size() != positionNumber) {
    LOGGER.info(""String_Node_Str"" + positionList.size() + ""String_Node_Str""+ positionNumber);
    throw new ServiceException(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"" + positionList.size() + ""String_Node_Str""+ positionNumber);
  if (positionList.isEmpty()) {
    LOGGER.debug(""String_Node_Str"");
    return null;
  }
  Map<Position,ShotFrameController> positionShotFrameMap=shotFrameManager.init(positionList);
  if (positionShotFrameMap == null || positionShotFrameMap.isEmpty()) {
    LOGGER.error(""String_Node_Str"");
    throw new ServiceException(""String_Node_Str"");
  }
  return positionShotFrameMap;
}","private Map<Position,ShotFrameController> initShotFrameManager(List<Camera> cameraList) throws ServiceException {
  List<Position> positionList=new ArrayList<>();
  for (int i=0; i < cameraList.size(); i++) {
    Camera c=cameraList.get(i);
    Position p=profileService.getPositionOfCameraOfProfile(c);
    if (p != null) {
      LOGGER.debug(""String_Node_Str"");
      positionList.add(p);
    }
 else {
      LOGGER.info(""String_Node_Str"",c);
      cameraHandler.removeCameraFromList(c);
    }
  }
  int positionNumber=profileService.getAllPairCameraPositionOfProfile().size();
  if (positionList.size() != positionNumber) {
    LOGGER.info(""String_Node_Str"" + positionList.size() + ""String_Node_Str""+ positionNumber);
    throw new ServiceException(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"" + positionList.size() + ""String_Node_Str""+ positionNumber);
  if (positionList.isEmpty()) {
    LOGGER.debug(""String_Node_Str"");
    return null;
  }
  Map<Position,ShotFrameController> positionShotFrameMap=shotFrameManager.init(positionList);
  if (positionShotFrameMap == null || positionShotFrameMap.isEmpty()) {
    LOGGER.error(""String_Node_Str"");
    throw new ServiceException(""String_Node_Str"");
  }
  return positionShotFrameMap;
}"
77810,"@Override public TableCell<Profile.PairCameraPosition,Boolean> call(TableColumn<Profile.PairCameraPosition,Boolean> p){
  return new CamPosCheckbox(kamPosList,pservice,kamList,selectedProfile,""String_Node_Str"",windowManager.getStage());
}","@Override public TableCell<Profile.PairCameraPosition,Boolean> call(TableColumn<Profile.PairCameraPosition,Boolean> p){
  return new CamPosCheckbox(kamPosList,pservice,selectedProfile,""String_Node_Str"",windowManager.getStage());
}"
77811,"public void refreshTableKameraPosition(List<Profile.PairCameraPosition> camposList,ObservableList<Position> posList,ObservableList<Profile> selectedID){
  LOGGER.debug(""String_Node_Str"" + posList.size() + posList.toString());
  selectedProfile=selectedID;
  this.posList.clear();
  this.posList.addAll(posList);
  this.kamPosList.clear();
  this.kamPosList.addAll(camposList);
  tableKamPos.setItems(this.kamPosList);
}","public void refreshTableKameraPosition(List<Profile.PairCameraPosition> camposList,ObservableList<Position> posList,ObservableList<Profile> selectedID){
  LOGGER.debug(""String_Node_Str"" + posList.size() + posList.toString());
  kamPosController=this;
  selectedProfile=selectedID;
  this.posList.clear();
  this.posList.addAll(posList);
  this.kamPosList.clear();
  this.kamPosList.addAll(camposList);
  tableKamPos.setItems(this.kamPosList);
}"
77812,"@Override public void handle(TableColumn.CellEditEvent<Profile.PairCameraPosition,String> t){
  try {
    Profile.PairCameraPosition p=((Profile.PairCameraPosition)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
      kamPosList.remove(p);
      p.getCamera().setLable(t.getNewValue());
      cameraService.editCamera(p.getCamera());
      kamPosList.add(t.getTablePosition().getRow(),p);
    }
 else {
      refreshTablePosition(pservice.getAllPositionsOfProfile(pservice.get(selectedProfile.get(0).getId())));
    }
  }
 catch (  ServiceException e) {
    try {
      refreshTableProfiles(pservice.getAllProfiles());
    }
 catch (    ServiceException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
}","@Override public void handle(TableColumn.CellEditEvent<Profile.PairCameraPosition,String> t){
  try {
    Profile.PairCameraPosition p=((Profile.PairCameraPosition)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
      kamPosList.remove(p);
      p.getCamera().setLable(t.getNewValue());
      cameraService.editCamera(p.getCamera());
      kamPosList.add(t.getTablePosition().getRow(),p);
      tableKamPos.getSelectionModel().select(t.getTablePosition().getRow());
    }
 else {
      refreshTablePosition(pservice.getAllPositionsOfProfile(pservice.get(selectedProfile.get(0).getId())));
    }
  }
 catch (  ServiceException e) {
    try {
      refreshTableProfiles(pservice.getAllProfiles());
    }
 catch (    ServiceException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
}"
77813,"@FXML private void initialize(){
  tableKamPos.setEditable(true);
  colKamPosKamera.setCellValueFactory(new PropertyValueFactory<Profile.PairCameraPosition,String>(""String_Node_Str""));
  colKamPosKamera.setCellFactory(TextFieldTableCell.forTableColumn());
  colKamPosKamera.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairCameraPosition,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairCameraPosition,String> t){
      try {
        Profile.PairCameraPosition p=((Profile.PairCameraPosition)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          kamPosList.remove(p);
          p.getCamera().setLable(t.getNewValue());
          cameraService.editCamera(p.getCamera());
          kamPosList.add(t.getTablePosition().getRow(),p);
        }
 else {
          refreshTablePosition(pservice.getAllPositionsOfProfile(pservice.get(selectedProfile.get(0).getId())));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colKamPosActivated.setStyle(""String_Node_Str"");
  colKamPosActivated.setSortable(false);
  colKamPosActivated.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colKamPosActivated.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
    @Override public TableCell<Profile.PairCameraPosition,Boolean> call(    TableColumn<Profile.PairCameraPosition,Boolean> p){
      return new CamPosCheckbox(kamPosList,pservice,kamList,selectedProfile,""String_Node_Str"",windowManager.getStage());
    }
  }
);
  colKamPosPosition.setStyle(""String_Node_Str"");
  colKamPosPosition.setSortable(false);
  colKamPosPosition.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colKamPosPosition.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
    @Override public TableCell<Profile.PairCameraPosition,Boolean> call(    TableColumn<Profile.PairCameraPosition,Boolean> p){
      return new CamPosComboBoxCell(colKamPosPosition,kamPosList,pservice,posList,selectedProfile,windowManager.getStage());
    }
  }
);
  colKamPosGreenscreen.setStyle(""String_Node_Str"");
  colKamPosGreenscreen.setSortable(false);
  colKamPosGreenscreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colKamPosGreenscreen.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
    @Override public TableCell<Profile.PairCameraPosition,Boolean> call(    TableColumn<Profile.PairCameraPosition,Boolean> p){
      return new CamPosCheckbox(kamPosList,pservice,kamList,selectedProfile,""String_Node_Str"",windowManager.getStage());
    }
  }
);
}","@FXML private void initialize(){
  tableKamPos.setEditable(true);
  colKamPosKamera.setCellValueFactory(new PropertyValueFactory<Profile.PairCameraPosition,String>(""String_Node_Str""));
  colKamPosKamera.setCellFactory(TextFieldTableCell.forTableColumn());
  colKamPosKamera.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairCameraPosition,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairCameraPosition,String> t){
      try {
        Profile.PairCameraPosition p=((Profile.PairCameraPosition)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          kamPosList.remove(p);
          p.getCamera().setLable(t.getNewValue());
          cameraService.editCamera(p.getCamera());
          kamPosList.add(t.getTablePosition().getRow(),p);
          tableKamPos.getSelectionModel().select(t.getTablePosition().getRow());
        }
 else {
          refreshTablePosition(pservice.getAllPositionsOfProfile(pservice.get(selectedProfile.get(0).getId())));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colKamPosActivated.setStyle(""String_Node_Str"");
  colKamPosActivated.setSortable(false);
  colKamPosActivated.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colKamPosActivated.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
    @Override public TableCell<Profile.PairCameraPosition,Boolean> call(    TableColumn<Profile.PairCameraPosition,Boolean> p){
      return new CamPosCheckbox(kamPosList,pservice,selectedProfile,""String_Node_Str"",windowManager.getStage());
    }
  }
);
  colKamPosPosition.setStyle(""String_Node_Str"");
  colKamPosPosition.setSortable(false);
  colKamPosPosition.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colKamPosPosition.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
    @Override public TableCell<Profile.PairCameraPosition,Boolean> call(    TableColumn<Profile.PairCameraPosition,Boolean> p){
      return new CamPosComboBoxCell(colKamPosPosition,kamPosList,pservice,posList,selectedProfile,windowManager.getStage());
    }
  }
);
  colKamPosGreenscreen.setStyle(""String_Node_Str"");
  colKamPosGreenscreen.setSortable(false);
  colKamPosGreenscreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colKamPosGreenscreen.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
    @Override public TableCell<Profile.PairCameraPosition,Boolean> call(    TableColumn<Profile.PairCameraPosition,Boolean> p){
      return new CamPosCheckbox(kamPosList,pservice,selectedProfile,""String_Node_Str"",windowManager.getStage());
    }
  }
);
}"
77814,"@Override public void handle(MouseEvent event){
  Profile.PairCameraPosition currentCamPos=(Profile.PairCameraPosition)CamPosCheckbox.this.getTableView().getItems().get(CamPosCheckbox.this.getIndex());
  try {
    if (cellCheckbox.isSelected()) {
      if (checkboxTyp.equals(""String_Node_Str"")) {
        if (currentCamPos.getPosition() != null)         pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
 else {
          cellCheckbox.setSelected(false);
          Alert alert=new Alert(Alert.AlertType.ERROR);
          alert.setTitle(""String_Node_Str"");
          alert.setHeaderText(""String_Node_Str"");
          alert.setContentText(""String_Node_Str"");
          alert.initOwner(primaryStage);
          alert.show();
        }
      }
 else {
        int posID;
        if (currentCamPos.getPosition() != null)         posID=currentCamPos.getPosition().getId();
 else         posID=pservice.getAllPositions().get(0).getId();
        kamposList.remove(currentCamPos);
        currentCamPos=pservice.addPairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera().getId(),posID,false);
        kamposList.add(currentCamPos);
      }
    }
 else {
      if (checkboxTyp.equals(""String_Node_Str"")) {
        pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),false);
      }
 else {
        pservice.erasePairCameraPosition(currentCamPos);
        kamposList.remove(currentCamPos);
        currentCamPos=new Profile.PairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera(),null,false);
        kamposList.add(currentCamPos);
      }
    }
    LOGGER.debug(""String_Node_Str"" + checkboxTyp + ""String_Node_Str""+ currentCamPos.getId()+ ""String_Node_Str""+ cellCheckbox.isSelected()+ ""String_Node_Str""+ selectedProfile.get(0).getId());
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"" + selectedProfile.get(0).getId(),e);
  }
}","@Override public void handle(MouseEvent event){
  Profile.PairCameraPosition currentCamPos=(Profile.PairCameraPosition)CamPosCheckbox.this.getTableView().getItems().get(CamPosCheckbox.this.getIndex());
  try {
    if (cellCheckbox.isSelected()) {
      if (checkboxTyp.equals(""String_Node_Str"")) {
        if (currentCamPos.getPosition() != null)         pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
 else {
          cellCheckbox.setSelected(false);
          Alert alert=new Alert(Alert.AlertType.ERROR);
          alert.setTitle(""String_Node_Str"");
          alert.setHeaderText(""String_Node_Str"");
          alert.setContentText(""String_Node_Str"");
          alert.initOwner(primaryStage);
          alert.show();
        }
      }
 else {
        int posID;
        if (currentCamPos.getPosition() != null)         posID=currentCamPos.getPosition().getId();
 else         posID=pservice.getAllPositions().get(0).getId();
        currentCamPos=pservice.addPairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera().getId(),posID,false);
        kamposList.clear();
        kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
        getTableView().setItems(kamposList);
      }
    }
 else {
      if (checkboxTyp.equals(""String_Node_Str"")) {
        pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),false);
      }
 else {
        pservice.erasePairCameraPosition(currentCamPos);
        currentCamPos=new Profile.PairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera(),null,false);
        kamposList.clear();
        kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
        getTableView().setItems(kamposList);
      }
    }
    LOGGER.debug(""String_Node_Str"" + checkboxTyp + ""String_Node_Str""+ currentCamPos.getId()+ ""String_Node_Str""+ cellCheckbox.isSelected()+ ""String_Node_Str""+ selectedProfile.get(0).getId());
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"" + selectedProfile.get(0).getId(),e);
  }
}"
77815,"public CamPosCheckbox(ObservableList<Profile.PairCameraPosition> kamposList,ProfileService pservice,ObservableList<Camera> kamList,ObservableList<Profile> selectedProfile,String checkboxTyp,Stage primaryStage){
  this.checkboxTyp=checkboxTyp;
  cellCheckbox.setOnMouseClicked(new EventHandler<MouseEvent>(){
    @Override public void handle(    MouseEvent event){
      Profile.PairCameraPosition currentCamPos=(Profile.PairCameraPosition)CamPosCheckbox.this.getTableView().getItems().get(CamPosCheckbox.this.getIndex());
      try {
        if (cellCheckbox.isSelected()) {
          if (checkboxTyp.equals(""String_Node_Str"")) {
            if (currentCamPos.getPosition() != null)             pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
 else {
              cellCheckbox.setSelected(false);
              Alert alert=new Alert(Alert.AlertType.ERROR);
              alert.setTitle(""String_Node_Str"");
              alert.setHeaderText(""String_Node_Str"");
              alert.setContentText(""String_Node_Str"");
              alert.initOwner(primaryStage);
              alert.show();
            }
          }
 else {
            int posID;
            if (currentCamPos.getPosition() != null)             posID=currentCamPos.getPosition().getId();
 else             posID=pservice.getAllPositions().get(0).getId();
            kamposList.remove(currentCamPos);
            currentCamPos=pservice.addPairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera().getId(),posID,false);
            kamposList.add(currentCamPos);
          }
        }
 else {
          if (checkboxTyp.equals(""String_Node_Str"")) {
            pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),false);
          }
 else {
            pservice.erasePairCameraPosition(currentCamPos);
            kamposList.remove(currentCamPos);
            currentCamPos=new Profile.PairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera(),null,false);
            kamposList.add(currentCamPos);
          }
        }
        LOGGER.debug(""String_Node_Str"" + checkboxTyp + ""String_Node_Str""+ currentCamPos.getId()+ ""String_Node_Str""+ cellCheckbox.isSelected()+ ""String_Node_Str""+ selectedProfile.get(0).getId());
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"" + selectedProfile.get(0).getId(),e);
      }
    }
  }
);
}","public CamPosCheckbox(ObservableList<Profile.PairCameraPosition> kamposList,ProfileService pservice,ObservableList<Profile> selectedProfile,String checkboxTyp,Stage primaryStage){
  this.checkboxTyp=checkboxTyp;
  cellCheckbox.setOnMouseClicked(new EventHandler<MouseEvent>(){
    @Override public void handle(    MouseEvent event){
      Profile.PairCameraPosition currentCamPos=(Profile.PairCameraPosition)CamPosCheckbox.this.getTableView().getItems().get(CamPosCheckbox.this.getIndex());
      try {
        if (cellCheckbox.isSelected()) {
          if (checkboxTyp.equals(""String_Node_Str"")) {
            if (currentCamPos.getPosition() != null)             pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),true);
 else {
              cellCheckbox.setSelected(false);
              Alert alert=new Alert(Alert.AlertType.ERROR);
              alert.setTitle(""String_Node_Str"");
              alert.setHeaderText(""String_Node_Str"");
              alert.setContentText(""String_Node_Str"");
              alert.initOwner(primaryStage);
              alert.show();
            }
          }
 else {
            int posID;
            if (currentCamPos.getPosition() != null)             posID=currentCamPos.getPosition().getId();
 else             posID=pservice.getAllPositions().get(0).getId();
            currentCamPos=pservice.addPairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera().getId(),posID,false);
            kamposList.clear();
            kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
            getTableView().setItems(kamposList);
          }
        }
 else {
          if (checkboxTyp.equals(""String_Node_Str"")) {
            pservice.editPairCameraPosition(currentCamPos,currentCamPos.getCamera().getId(),currentCamPos.getPosition().getId(),false);
          }
 else {
            pservice.erasePairCameraPosition(currentCamPos);
            currentCamPos=new Profile.PairCameraPosition(selectedProfile.get(0).getId(),currentCamPos.getCamera(),null,false);
            kamposList.clear();
            kamposList.addAll(pservice.getAllPairCamerasWithPositionByProfile(selectedProfile.get(0).getId()));
            getTableView().setItems(kamposList);
          }
        }
        LOGGER.debug(""String_Node_Str"" + checkboxTyp + ""String_Node_Str""+ currentCamPos.getId()+ ""String_Node_Str""+ cellCheckbox.isSelected()+ ""String_Node_Str""+ selectedProfile.get(0).getId());
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"" + selectedProfile.get(0).getId(),e);
      }
    }
  }
);
}"
77816,"@Override public List<Profile.PairCameraPosition> getAllPairCamerasWithPositionByProfile(int profileID) throws ServiceException {
  List<Profile.PairCameraPosition> allCameras=getAllPairCameraPositionOfProfile(profileID);
  for (  Camera c : cameraService.getAllCameras()) {
    boolean exist=false;
    for (    Profile.PairCameraPosition p : allCameras) {
      if (c.getId() == p.getCamera().getId())       exist=true;
    }
    if (!exist)     allCameras.add(new Profile.PairCameraPosition(profileID,c,null,false));
  }
  return allCameras;
}","@Override public List<Profile.PairCameraPosition> getAllPairCamerasWithPositionByProfile(int profileID) throws ServiceException {
  List<Profile.PairCameraPosition> allCameras=getAllPairCameraPositionOfProfile(profileID);
  for (  Camera c : cameraService.getAllCameras()) {
    boolean exist=false;
    for (    Profile.PairCameraPosition p : allCameras) {
      if (c.getId() == p.getCamera().getId())       exist=true;
    }
    if (!exist)     allCameras.add(new Profile.PairCameraPosition(profileID,c,null,false));
  }
  Collections.sort(allCameras,new Comparator<Profile.PairCameraPosition>(){
    @Override public int compare(    Profile.PairCameraPosition pair1,    Profile.PairCameraPosition pair2){
      return pair1.getCamera().getLable().compareTo(pair2.getCamera().getLable());
    }
  }
);
  return allCameras;
}"
77817,"/** 
 * Lets an AdminUserService instance check if the values given in the adminname- and password-TextField correspond to a saved admin-user.
 */
@FXML public void checkLogin(){
  String adminName=adminField.getText();
  String password=passwordField.getText();
  try {
    boolean correctLogin=adminUserService.checkLogin(adminName,password);
    if (correctLogin) {
      if (firstLogin) {
        Shooting activeShooting=shootingService.searchIsActive();
        if (activeShooting.getActive()) {
          firstLogin=false;
          windowManager.showScene(WindowManager.SHOW_RECOVERYSCENE);
        }
 else {
          windowManager.showScene(WindowManager.SHOW_MAINSCENE);
        }
      }
 else {
        firstLogin=false;
        windowManager.showScene(loginRedirectorModel.getNextScene());
      }
      resetValues();
    }
 else {
      wrongCredentialsLabel.setVisible(true);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","/** 
 * Lets an AdminUserService instance check if the values given in the adminname- and password-TextField correspond to a saved admin-user.
 */
@FXML public void checkLogin(){
  String adminName=adminField.getText();
  String password=passwordField.getText();
  try {
    boolean correctLogin=adminUserService.checkLogin(adminName,password);
    if (correctLogin) {
      if (firstLogin) {
        Shooting activeShooting=shootingService.searchIsActive();
        if (activeShooting.getActive()) {
          firstLogin=false;
          windowManager.showScene(WindowManager.SHOW_RECOVERYSCENE);
        }
 else {
          firstLogin=false;
          windowManager.showScene(WindowManager.SHOW_MAINSCENE);
        }
      }
 else {
        firstLogin=false;
        windowManager.showScene(loginRedirectorModel.getNextScene());
      }
      resetValues();
    }
 else {
      wrongCredentialsLabel.setVisible(true);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77818,"private void capturePreview(){
  final CameraFile cf;
  try {
    cf=cameraGphoto.capturePreview();
  }
 catch (  CameraException e) {
    LOGGER.error(""String_Node_Str"",e);
    setStop(true);
    return;
  }
  if (cf == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  String imagePath=tempStorage + ""String_Node_Str"" + +camera.getId()+ ""String_Node_Str"";
  try {
    cf.save(new File(imagePath).getAbsolutePath());
  }
 catch (  CameraException e) {
    LOGGER.error(""String_Node_Str"",imagePath,e);
    setStop(true);
  }
 finally {
    CameraUtils.closeQuietly(cf);
  }
  try {
    imageProcessor.processPreview(imagePath);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","private void capturePreview(){
  final CameraFile cf;
  try {
    cf=cameraGphoto.capturePreview();
  }
 catch (  CameraException e) {
    LOGGER.error(""String_Node_Str"",e);
    setStop(true);
    return;
  }
  if (cf == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  String imagePath=tempStorage + ""String_Node_Str"" + +camera.getId()+ ""String_Node_Str"";
  try {
    cf.save(new File(imagePath).getAbsolutePath());
  }
 catch (  CameraException e) {
    LOGGER.error(""String_Node_Str"",imagePath,e);
    setStop(true);
  }
 finally {
    CameraUtils.closeQuietly(cf);
  }
  try {
    imageProcessor.processPreview(imagePath);
  }
 catch (  ServiceException e) {
    if (!shouldStop) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}"
77819,"private void captureImage(){
  Shooting activeShooting;
  try {
    activeShooting=shootingService.searchIsActive();
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    return;
  }
  if (activeShooting == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  Image image;
  int anz=1;
  List<Image> imageList=new ArrayList<>();
  if (serieShot) {
    anz=5;
  }
  for (int i=0; i < anz; i++) {
    CameraFile cf;
    try {
      cf=cameraGphoto.captureImage();
    }
 catch (    CameraException ex) {
      LOGGER.error(""String_Node_Str"",ex);
      setStop(true);
      return;
    }
    if (cf == null) {
      LOGGER.error(""String_Node_Str"");
      return;
    }
    String directoryPath=activeShooting.getStorageDir();
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date date=new Date();
    String imagePath=directoryPath + ""String_Node_Str"" + camera.getId()+ ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
    try {
      cf.save(new File(imagePath).getAbsolutePath());
    }
 catch (    CameraException e) {
      LOGGER.error(""String_Node_Str"",imagePath,e);
      setStop(true);
    }
 finally {
      CameraUtils.closeQuietly(cf);
    }
    try {
      image=new Image(imagePath,activeShooting.getId());
      image=imageService.create(image);
      imageList.add(image);
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  for (  Image shot : imageList) {
    try {
      imageProcessor.processShot(shot);
      sleep(5000);
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      LOGGER.error(""String_Node_Str"",e);
      return;
    }
  }
}","private void captureImage(){
  Shooting activeShooting;
  try {
    activeShooting=shootingService.searchIsActive();
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    return;
  }
  if (activeShooting == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  Image image;
  int anz=1;
  List<Image> imageList=new ArrayList<>();
  if (serieShot) {
    anz=5;
  }
  for (int i=0; i < anz; i++) {
    CameraFile cf;
    try {
      cf=cameraGphoto.captureImage();
    }
 catch (    CameraException ex) {
      LOGGER.error(""String_Node_Str"",ex);
      setStop(true);
      return;
    }
    if (cf == null) {
      LOGGER.error(""String_Node_Str"");
      return;
    }
    String directoryPath=activeShooting.getStorageDir();
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date date=new Date();
    String imagePath=directoryPath + ""String_Node_Str"" + camera.getId()+ ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
    try {
      cf.save(new File(imagePath).getAbsolutePath());
    }
 catch (    CameraException e) {
      LOGGER.error(""String_Node_Str"",imagePath,e);
      setStop(true);
      return;
    }
 finally {
      CameraUtils.closeQuietly(cf);
    }
    try {
      image=new Image(imagePath,activeShooting.getId());
      image=imageService.create(image);
      imageList.add(image);
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  for (  Image shot : imageList) {
    try {
      imageProcessor.processShot(shot);
      sleep(5000);
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      LOGGER.error(""String_Node_Str"",e);
      return;
    }
  }
}"
77820,"@Override public void processPreview(String imgPath) throws ServiceException {
  Camera camera=profileService.getCameraOfPositionOfProfile(position);
  pairCameraPosition=profileService.getPairCameraPosition(camera);
  LOGGER.debug(""String_Node_Str"",position);
  BufferedImage preview;
  boolean isGreenscreen=pairCameraPosition.isGreenScreenReady();
  boolean isFilter=!""String_Node_Str"".equals(pairCameraPosition.getFilterName());
  if (isGreenscreen) {
    Background background=pairCameraPosition.getBackground();
    preview=openImageThrowException(imgPath);
    if (background == null) {
      LOGGER.debug(""String_Node_Str"",position);
    }
 else {
      preview=greenscreenService.applyGreenscreen(preview,background);
      LOGGER.debug(""String_Node_Str"",background,position);
    }
  }
 else   if (isFilter) {
    String filterName=pairCameraPosition.getFilterName();
    preview=filterService.filter(filterName,imgPath);
    LOGGER.debug(""String_Node_Str"",filterName,position);
  }
 else {
    preview=openImageThrowException(imgPath);
    LOGGER.debug(""String_Node_Str"",position);
  }
  shotFrameController.refreshShot(preview);
}","@Override public void processPreview(String imgPath) throws ServiceException {
  Camera camera=profileService.getCameraOfPositionOfProfile(position);
  pairCameraPosition=profileService.getPairCameraPosition(camera);
  LOGGER.debug(""String_Node_Str"",position);
  BufferedImage preview;
  String filterName=pairCameraPosition.getFilterName();
  boolean isGreenscreen=pairCameraPosition.isGreenScreenReady();
  boolean isFilter=!""String_Node_Str"".equals(filterName) && !""String_Node_Str"".equals(filterName);
  if (isGreenscreen) {
    Background background=pairCameraPosition.getBackground();
    preview=openImageThrowException(imgPath);
    if (background == null) {
      LOGGER.debug(""String_Node_Str"",position);
    }
 else {
      preview=greenscreenService.applyGreenscreen(preview,background);
      LOGGER.debug(""String_Node_Str"",background,position);
    }
  }
 else   if (isFilter) {
    preview=filterService.filter(filterName,imgPath);
    LOGGER.debug(""String_Node_Str"",filterName,position);
  }
 else {
    preview=openImageThrowException(imgPath);
    LOGGER.debug(""String_Node_Str"",position);
  }
  shotFrameController.refreshShot(preview);
}"
77821,"@Override public void processShot(Image image) throws ServiceException {
  String imgPath=image.getImagepath();
  Camera camera=profileService.getCameraOfPositionOfProfile(position);
  pairCameraPosition=profileService.getPairCameraPosition(camera);
  LOGGER.debug(""String_Node_Str"",position);
  BufferedImage shot;
  boolean isGreenscreen=pairCameraPosition.isGreenScreenReady();
  boolean isFilter=!""String_Node_Str"".equals(pairCameraPosition.getFilterName());
  if (isGreenscreen) {
    Background background=pairCameraPosition.getBackground();
    shot=openImageThrowException(imgPath);
    if (background == null) {
      LOGGER.debug(""String_Node_Str"",position);
    }
 else {
      shot=greenscreenService.applyGreenscreen(shot,background);
      LOGGER.debug(""String_Node_Str"",background,position);
    }
  }
 else   if (isFilter) {
    shot=saveUnfilterdImageAndApplyFilter(imgPath);
  }
 else {
    shot=openImageThrowException(imgPath);
  }
  logoWatermarkService.addLogosToImage(shot);
  shotFrameController.refreshShot(shot);
  Image filteredImage=null;
  if (isFilter) {
    filteredImage=persistFilteredImage(imgPath,shot);
  }
 else {
    saveImageThrowException(shot,imgPath);
    LOGGER.debug(""String_Node_Str"");
  }
  refreshManager.refreshFrames(image);
  if (isFilter) {
    refreshManager.refreshFrames(filteredImage);
  }
}","@Override public void processShot(Image image) throws ServiceException {
  String imgPath=image.getImagepath();
  Camera camera=profileService.getCameraOfPositionOfProfile(position);
  pairCameraPosition=profileService.getPairCameraPosition(camera);
  LOGGER.debug(""String_Node_Str"",position);
  BufferedImage shot;
  String filterName=pairCameraPosition.getFilterName();
  boolean isGreenscreen=pairCameraPosition.isGreenScreenReady();
  boolean isFilter=!""String_Node_Str"".equals(filterName) && !""String_Node_Str"".equals(filterName);
  if (isGreenscreen) {
    Background background=pairCameraPosition.getBackground();
    shot=openImageThrowException(imgPath);
    if (background == null) {
      LOGGER.debug(""String_Node_Str"",position);
    }
 else {
      shot=greenscreenService.applyGreenscreen(shot,background);
      LOGGER.debug(""String_Node_Str"",background,position);
    }
  }
 else   if (isFilter) {
    shot=saveUnfilterdImageAndApplyFilter(imgPath);
  }
 else {
    shot=openImageThrowException(imgPath);
  }
  logoWatermarkService.addLogosToImage(shot);
  shotFrameController.refreshShot(shot);
  Image filteredImage=null;
  if (isFilter) {
    filteredImage=persistFilteredImage(imgPath,shot);
  }
 else {
    saveImageThrowException(shot,imgPath);
    LOGGER.debug(""String_Node_Str"");
  }
  refreshManager.refreshFrames(image);
  if (isFilter) {
    refreshManager.refreshFrames(filteredImage);
  }
  LOGGER.info(""String_Node_Str"",image);
}"
77822,"/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @throws IOException if an error occurs while loading the FXML-files defining the scenes.
 */
public void start(Stage mainStage) throws IOException {
  this.mainStage=mainStage;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + css);
  int sice=(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssett);
  parentsett.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsett.getStylesheets().add(csssett.toExternalForm());
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL cssmin=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssmin);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(cssmin.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  this.miniaturFrameController=miniWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CustomerFrameController> customerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CustomerFrameController.class);
  Parent parentcos=(Parent)customerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  customerFrameController=customerWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CameraFilterController.class);
  Parent parentkaf=(Parent)kameraFilterFXMLWrapper.getLoadedObject();
  URL csskaf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csskaf);
  parentkaf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentkaf.getStylesheets().add(csskaf.toExternalForm());
  this.kamerafilterScene=new Scene(parentkaf,screenWidth,screenHeight);
  cameraFilterController=kameraFilterFXMLWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,RecoveryController> recoveryControllerFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",RecoveryController.class);
  Parent parentrec=(Parent)recoveryControllerFXMLWrapper.getLoadedObject();
  URL cssrec=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssrec);
  parentrec.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentrec.getStylesheets().add(cssrec.toExternalForm());
  this.recoveryScene=new Scene(parentrec,screenWidth,screenHeight);
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  SpringFXMLLoader.FXMLWrapper<Object,DeleteImageController> deleteWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",DeleteImageController.class);
  Parent parentdel=(Parent)deleteWrapper.getLoadedObject();
  URL cssd=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssd);
  parentdel.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentdel.getStylesheets().add(cssd.toExternalForm());
  this.deleteScene=new Scene(parentdel,screenWidth,screenHeight);
  this.deleteImageController=deleteWrapper.getController();
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}","/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @throws IOException if an error occurs while loading the FXML-files defining the scenes.
 */
public void start(Stage mainStage) throws IOException {
  this.mainStage=mainStage;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + css);
  int sice=(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssett);
  parentsett.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsett.getStylesheets().add(csssett.toExternalForm());
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL cssmin=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssmin);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(cssmin.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  this.miniaturFrameController=miniWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CustomerFrameController> customerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CustomerFrameController.class);
  Parent parentcos=(Parent)customerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  customerFrameController=customerWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CameraFilterController.class);
  Parent parentkaf=(Parent)kameraFilterFXMLWrapper.getLoadedObject();
  URL csskaf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csskaf);
  parentkaf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentkaf.getStylesheets().add(csskaf.toExternalForm());
  this.kamerafilterScene=new Scene(parentkaf,screenWidth,screenHeight);
  cameraFilterController=kameraFilterFXMLWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,RecoveryController> recoveryControllerFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",RecoveryController.class);
  Parent parentrec=(Parent)recoveryControllerFXMLWrapper.getLoadedObject();
  URL cssrec=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssrec);
  parentrec.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentrec.getStylesheets().add(cssrec.toExternalForm());
  this.recoveryScene=new Scene(parentrec,screenWidth,screenHeight);
  miniWrapper.getController().init(mainStage);
  SpringFXMLLoader.FXMLWrapper<Object,DeleteImageController> deleteWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",DeleteImageController.class);
  Parent parentdel=(Parent)deleteWrapper.getLoadedObject();
  URL cssd=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssd);
  parentdel.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentdel.getStylesheets().add(cssd.toExternalForm());
  this.deleteScene=new Scene(parentdel,screenWidth,screenHeight);
  this.deleteImageController=deleteWrapper.getController();
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}"
77823,"public Map<Position,ShotFrameController> init(List<Position> positionList){
  Set<Position> oldPositions=positonShotFrameMap.keySet();
  int numberOfPosition=1;
  numberOfPosition+=positionList.size();
  int x=200;
  for (int i=1; i < numberOfPosition; i++) {
    Position position=positionList.get(i - 1);
    if (!oldPositions.contains(position)) {
      Stage stage=new Stage();
      stage.setTitle(""String_Node_Str"" + position.getName());
      try {
        FXMLLoader loader=new FXMLLoader(getClass().getResource(""String_Node_Str""));
        Parent root=loader.load();
        ShotFrameController shotFrameController=loader.getController();
        shotFrameController.initShotFrame(position.getId());
        positonShotFrameMap.put(position,shotFrameController);
        stage.setScene(new Scene(root,400,400));
      }
 catch (      IOException e) {
        LOGGER.debug(""String_Node_Str"" + e.getMessage());
      }
      stage.setFullScreen(false);
      stage.setX(x);
      stage.show();
      shotStages.add(stage);
      x+=200;
    }
  }
  return positonShotFrameMap;
}","public Map<Position,ShotFrameController> init(List<Position> positionList){
  Set<Position> oldPositions=positonShotFrameMap.keySet();
  int numberOfPosition=1;
  numberOfPosition+=positionList.size();
  int x=200;
  for (int i=1; i < numberOfPosition; i++) {
    Position position=positionList.get(i - 1);
    if (!oldPositions.contains(position)) {
      Stage stage=new Stage();
      stage.setTitle(""String_Node_Str"" + position.getName());
      try {
        FXMLLoader loader=new FXMLLoader(getClass().getResource(""String_Node_Str""));
        Parent root=loader.load();
        ShotFrameController shotFrameController=loader.getController();
        shotFrameController.initShotFrame(position.getId(),stage);
        positonShotFrameMap.put(position,shotFrameController);
        stage.setScene(new Scene(root,400,400));
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      stage.setFullScreen(false);
      stage.setX(x);
      stage.show();
      shotStages.add(stage);
      x+=200;
    }
  }
  return positonShotFrameMap;
}"
77824,"/** 
 * defines the first image and initialises the image list
 * @param imgID image id given from miniaturframe
 */
public void changeImage(int imgID){
  activ=-1;
  FileInputStream fips=null;
  try {
    if (shootingService.searchIsActive().getActive()) {
      activ=shootingService.searchIsActive().getId();
      imageList=imageService.getAllImages(activ);
    }
    if (imageList != null) {
      for (int i=0; i < imageList.size(); i++) {
        if (imageList.get(i).getImageID() == imgID) {
          currentIndex=i;
        }
      }
      if (currentIndex == 0) {
        button4.setVisible(false);
      }
      if (currentIndex == (imageList.size() - 1)) {
        button3.setVisible(false);
      }
      at.ac.tuwien.sepm.ws16.qse01.entities.Image img=imageService.read(imgID);
      fips=new FileInputStream(img.getImagepath());
      ivfullscreenImage.setImage(new Image(fips,base.getWidth(),base.getHeight(),true,true));
      ivfullscreenImage.setId(img.getImagepath());
      makePreviewFilter(img.getImagepath());
    }
 else {
      windowManager.showScene(WindowManager.SHOW_MINIATURESCENE);
    }
  }
 catch (  ServiceException e) {
    informationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  FileNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
    informationDialog(""String_Node_Str"");
  }
catch (  NullPointerException e) {
    LOGGER.error(""String_Node_Str"",e);
    informationDialog(""String_Node_Str"");
  }
 finally {
    if (fips != null) {
      try {
        fips.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * defines the first image and initialises the image list
 * @param imgID image id given from miniaturframe
 */
public void changeImage(int imgID){
  LOGGER.info(""String_Node_Str"" + imgID);
  activ=-1;
  FileInputStream fips=null;
  try {
    if (shootingService.searchIsActive().getActive()) {
      activ=shootingService.searchIsActive().getId();
      this.imageList=imageService.getAllImages(activ);
    }
    System.out.println(""String_Node_Str"" + imageList.size() + ""String_Node_Str""+ activ);
    if (imageList != null) {
      LOGGER.debug(""String_Node_Str"" + imageList.size());
      for (int i=0; i < imageList.size(); i++) {
        if (imageList.get(i).getImageID() == imgID) {
          currentIndex=i;
        }
      }
      if (currentIndex == 0) {
        button4.setVisible(false);
      }
      if (currentIndex == (imageList.size() - 1)) {
        button3.setVisible(false);
      }
      at.ac.tuwien.sepm.ws16.qse01.entities.Image img=imageService.read(imgID);
      fips=new FileInputStream(img.getImagepath());
      ivfullscreenImage.setImage(new Image(fips,base.getWidth(),base.getHeight(),true,true));
      ivfullscreenImage.setId(img.getImagepath());
      makePreviewFilter(img.getImagepath());
    }
 else {
      windowManager.showScene(WindowManager.SHOW_MINIATURESCENE);
    }
  }
 catch (  ServiceException e) {
    informationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  FileNotFoundException e) {
    LOGGER.error(""String_Node_Str"",e);
    informationDialog(""String_Node_Str"");
  }
catch (  NullPointerException e) {
    LOGGER.error(""String_Node_Str"",e);
    informationDialog(""String_Node_Str"");
  }
 finally {
    if (fips != null) {
      try {
        fips.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
}"
77825,"private void onCheckPressed(){
  cropping=false;
  cropRectangle.setVisible(false);
  resizeHandleNW.setVisible(false);
  resizeHandleSE.setVisible(false);
  saveFilteredButton.setVisible(false);
  int x=(int)cropRectangle.localToScene(cropRectangle.getBoundsInLocal()).getMinX() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinX();
  int y=(int)cropRectangle.localToScene(cropRectangle.getBoundsInLocal()).getMinY() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinY();
  int maxX=(int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMaxX() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinX();
  int maxY=(int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMaxY() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinY();
  try {
    at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.crop(imageList.get(currentIndex),activeFilterImageView.getId(),x,x + (int)cropRectangle.getWidth(),y,y + (int)cropRectangle.getHeight(),maxX,maxY);
    if ((currentIndex + 1) >= imageList.size()) {
      imageList.add(newImage);
      refreshManager.notifyMiniatureFrameOfAdd(newImage,-1);
    }
 else {
      imageList.add(currentIndex + 1,newImage);
      refreshManager.notifyMiniatureFrameOfAdd(newImage,currentIndex + 1);
    }
    currentIndex=currentIndex + 1;
    button4.setVisible(true);
    System.out.println(""String_Node_Str"" + newImage.getImagepath());
    ivfullscreenImage.setImage(new Image(""String_Node_Str"" + newImage.getImagepath(),base.getWidth(),base.getHeight(),true,true));
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","private void onCheckPressed(){
  cropping=false;
  cropRectangle.setVisible(false);
  resizeHandleNW.setVisible(false);
  resizeHandleSE.setVisible(false);
  saveFilteredButton.setVisible(false);
  int x=(int)cropRectangle.localToScene(cropRectangle.getBoundsInLocal()).getMinX() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinX();
  int y=(int)cropRectangle.localToScene(cropRectangle.getBoundsInLocal()).getMinY() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinY();
  int maxX=(int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMaxX() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinX();
  int maxY=(int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMaxY() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinY();
  try {
    System.out.println(currentIndex + ""String_Node_Str"" + imageList.size());
    at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.crop(imageList.get(currentIndex),activeFilterImageView.getId(),x,x + (int)cropRectangle.getWidth(),y,y + (int)cropRectangle.getHeight(),maxX,maxY);
    if ((currentIndex + 1) >= imageList.size()) {
      imageList.add(newImage);
      refreshManager.notifyMiniatureFrameOfAdd(newImage,-1);
    }
 else {
      imageList.add(currentIndex + 1,newImage);
      refreshManager.notifyMiniatureFrameOfAdd(newImage,currentIndex + 1);
    }
    currentIndex=currentIndex + 1;
    button4.setVisible(true);
    System.out.println(""String_Node_Str"" + newImage.getImagepath());
    ivfullscreenImage.setImage(new Image(""String_Node_Str"" + newImage.getImagepath(),base.getWidth(),base.getHeight(),true,true));
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77826,"public void init(Stage stage) throws ServiceException {
  this.stage=stage;
  scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
  scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  tile.setMinWidth(screenWidth);
  tile.setMinHeight(screenHeight - 60);
  tile.setPadding(new Insets(20,20,20,20));
  tile.setHgap(20);
  tile.setVgap(20);
  if (shootingService.searchIsActive().getActive()) {
    LOGGER.debug(""String_Node_Str"" + shootingService.searchIsActive().getId());
    listOfImages=imageService.getAllImages(shootingService.searchIsActive().getId());
  }
 else {
    listOfImages=new ArrayList<>();
    return;
  }
  for (  final at.ac.tuwien.sepm.ws16.qse01.entities.Image img : listOfImages) {
    prepareHBox(img,-1);
  }
}","public void init(Stage stage){
  this.stage=stage;
  scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
  scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  tile.getChildren().clear();
  tile.setMinWidth(screenWidth);
  tile.setMinHeight(screenHeight - 60);
  tile.setPadding(new Insets(20,20,20,20));
  tile.setHgap(20);
  tile.setVgap(20);
  try {
    if (shootingService.searchIsActive().getActive()) {
      LOGGER.info(""String_Node_Str"" + shootingService.searchIsActive().getId());
      listOfImages=imageService.getAllImages(shootingService.searchIsActive().getId());
    }
 else {
      listOfImages=new ArrayList<>();
      return;
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  for (  final at.ac.tuwien.sepm.ws16.qse01.entities.Image img : listOfImages) {
    prepareHBox(img,-1);
  }
}"
77827,"public void initShotFrame(int cameraID){
  this.frameID=cameraID;
}","public void initShotFrame(int cameraID,Stage primaryStage){
  this.frameID=cameraID;
  this.primaryStage=primaryStage;
}"
77828,"/** 
 * on time image pressed
 */
public void onTimerPressed(){
  unmark();
  profile.getPairCameraPositions().get(index).setShotType(Profile.PairCameraPosition.SHOT_TYPE_TIMED);
  ontime.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(3))));
  currentMode=2;
}","/** 
 * on time image pressed
 */
public void onTimerPressed(){
  try {
    unmark();
    profileservice.getActiveProfile().getPairCameraPositions().get(index).setShotType(Profile.PairCameraPosition.SHOT_TYPE_TIMED);
    ontime.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(3))));
    currentMode=2;
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77829,"/** 
 * on serien pictures pressed
 */
public void onSerialPressed(){
  unmark();
  profile.getPairCameraPositions().get(index).setShotType(Profile.PairCameraPosition.SHOT_TYPE_MULTIPLE);
  serien.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(3))));
  currentMode=1;
}","/** 
 * on serien pictures pressed
 */
public void onSerialPressed(){
  try {
    unmark();
    profileservice.getActiveProfile().getPairCameraPositions().get(index).setShotType(Profile.PairCameraPosition.SHOT_TYPE_MULTIPLE);
    serien.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(3))));
    currentMode=1;
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77830,"/** 
 * creats the filter selection for all kameras marks the chousen filter
 */
private void creatButtons(){
  try {
    filtergrid=new GridPane();
    filtergrid.prefWidth(Screen.getPrimary().getBounds().getWidth());
    filterscrollplanel=new ScrollPane();
    filtergrid.setStyle(""String_Node_Str"");
    filterscrollplanel.setStyle(""String_Node_Str"");
    filterscrollplanel.setFitToWidth(true);
    filterscrollplanel.setFitToHeight(false);
    filterscrollplanel.prefWidth(Screen.getPrimary().getBounds().getWidth());
    filtergrid.getColumnConstraints().add(0,new ColumnConstraints());
    filtergrid.getRowConstraints().add(0,new RowConstraints());
    filtergrid.getColumnConstraints().add(1,new ColumnConstraints());
    filtergrid.getRowConstraints().add(1,new RowConstraints());
    filtergrid.getColumnConstraints().add(2,new ColumnConstraints());
    filtergrid.getRowConstraints().add(2,new RowConstraints());
    filtergrid.getColumnConstraints().add(3,new ColumnConstraints());
    filtergrid.getRowConstraints().add(3,new RowConstraints());
    filtergrid.getColumnConstraints().add(4,new ColumnConstraints());
    filtergrid.getRowConstraints().add(4,new RowConstraints());
    filtergrid.getColumnConstraints().add(5,new ColumnConstraints());
    filtergrid.getRowConstraints().add(5,new RowConstraints());
    filtergrid.getColumnConstraints().get(0).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(0).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(1).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(1).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(2).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(2).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(3).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(3).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(4).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(4).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(5).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(5).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    int columcount=0;
    int rowcount=0;
    if (profileservice.getActiveProfile().getId() != profile.getId()) {
      profile=profileservice.getActiveProfile();
      filtermap.clear();
    }
    if (filtermap == null || filtermap.isEmpty()) {
      try {
        String filterPreviewImagePath=wm.copyResource(""String_Node_Str"");
        filtermap=filterService.getAllFilteredImages(filterPreviewImagePath);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    for (    Map.Entry<String,BufferedImage> filterentety : filtermap.entrySet()) {
      if (columcount == 6) {
        rowcount++;
        columcount=0;
      }
      if (rowcount >= 6) {
        filtergrid.getRowConstraints().add(rowcount,new RowConstraints());
        filtergrid.getRowConstraints().get(rowcount).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
      }
      ImageView iv=new ImageView();
      iv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 6 - 10);
      iv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 6 - 10);
      iv.setStyle(""String_Node_Str"");
      iv.setStyle(""String_Node_Str"");
      iv.setImage(SwingFXUtils.toFXImage(filterentety.getValue(),null));
      if (profile.getPairCameraPositions().get(index).getFilterName() != null) {
        if (filterentety.getKey().equals(profile.getPairCameraPositions().get(index).getFilterName())) {
          activiv=iv;
          activiv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 6 - 40);
          activiv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 6 - 40);
        }
      }
      iv.setOnMouseClicked((      MouseEvent mouseEvent) -> {
        if (activiv != null) {
          activiv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 6 - 10);
          activiv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 6 - 10);
        }
        activiv=iv;
        iv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 6 - 40);
        iv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 6 - 40);
        profile.getPairCameraPositions().get(index).setFilterName(filterentety.getKey());
      }
);
      filtergrid.add(iv,columcount,rowcount);
      columcount++;
    }
    filtergrid.setVisible(true);
    filterscrollplanel.setVisible(true);
    filterscrollplanel.setContent(filtergrid);
    root.add(filterscrollplanel,0,1);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * creats the filter selection for all kameras marks the chousen filter
 */
private void creatButtons(){
  try {
    filtergrid=new GridPane();
    filtergrid.prefWidth(Screen.getPrimary().getBounds().getWidth());
    filterscrollplanel=new ScrollPane();
    filtergrid.setStyle(""String_Node_Str"");
    filterscrollplanel.setStyle(""String_Node_Str"");
    filterscrollplanel.setFitToWidth(true);
    filterscrollplanel.setFitToHeight(false);
    filterscrollplanel.prefWidth(Screen.getPrimary().getBounds().getWidth());
    filtergrid.getColumnConstraints().add(0,new ColumnConstraints());
    filtergrid.getRowConstraints().add(0,new RowConstraints());
    filtergrid.getColumnConstraints().add(1,new ColumnConstraints());
    filtergrid.getRowConstraints().add(1,new RowConstraints());
    filtergrid.getColumnConstraints().add(2,new ColumnConstraints());
    filtergrid.getRowConstraints().add(2,new RowConstraints());
    filtergrid.getColumnConstraints().add(3,new ColumnConstraints());
    filtergrid.getRowConstraints().add(3,new RowConstraints());
    filtergrid.getColumnConstraints().add(4,new ColumnConstraints());
    filtergrid.getRowConstraints().add(4,new RowConstraints());
    filtergrid.getColumnConstraints().add(5,new ColumnConstraints());
    filtergrid.getRowConstraints().add(5,new RowConstraints());
    filtergrid.getColumnConstraints().get(0).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(0).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(1).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(1).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(2).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(2).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(3).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(3).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(4).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(4).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getColumnConstraints().get(5).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 6);
    filtergrid.getRowConstraints().get(5).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    int columcount=0;
    int rowcount=0;
    if (filtermap == null || filtermap.isEmpty()) {
      try {
        String filterPreviewImagePath=wm.copyResource(""String_Node_Str"");
        filtermap=filterService.getAllFilteredImages(filterPreviewImagePath);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    for (    Map.Entry<String,BufferedImage> filterentety : filtermap.entrySet()) {
      if (columcount == 6) {
        rowcount++;
        columcount=0;
      }
      if (rowcount >= 6) {
        filtergrid.getRowConstraints().add(rowcount,new RowConstraints());
        filtergrid.getRowConstraints().get(rowcount).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
      }
      ImageView iv=new ImageView();
      iv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 6 - 10);
      iv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 6 - 10);
      iv.setStyle(""String_Node_Str"");
      iv.setStyle(""String_Node_Str"");
      iv.setImage(SwingFXUtils.toFXImage(filterentety.getValue(),null));
      if (profileservice.getActiveProfile().getPairCameraPositions().get(index).getFilterName() != null) {
        if (filterentety.getKey().equals(profileservice.getActiveProfile().getPairCameraPositions().get(index).getFilterName())) {
          activiv=iv;
          activiv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 6 - 40);
          activiv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 6 - 40);
        }
      }
      iv.setOnMouseClicked((      MouseEvent mouseEvent) -> {
        if (activiv != null) {
          activiv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 6 - 10);
          activiv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 6 - 10);
        }
        activiv=iv;
        iv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 6 - 40);
        iv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 6 - 40);
        try {
          profileservice.getActiveProfile().getPairCameraPositions().get(index).setFilterName(filterentety.getKey());
        }
 catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
);
      filtergrid.add(iv,columcount,rowcount);
      columcount++;
    }
    filtergrid.setVisible(true);
    filterscrollplanel.setVisible(true);
    filterscrollplanel.setContent(filtergrid);
    root.add(filterscrollplanel,0,1);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}"
77831,"/** 
 * decides whether an new filter image is chosen or green screen
 * @param index current mode
 * @param idFilter current filter id
 * @param greenscreen boolean green screen or not
 */
public void currentlyChosen(int index,int idFilter,boolean greenscreen){
  try {
    this.index=index;
    titel.setText(""String_Node_Str"");
    greengrid=new GridPane();
    if (filtergrid == null) {
      filtergrid=new GridPane();
    }
    if (index > -1) {
      profile=profileservice.getActiveProfile();
      if (profile.getId() != profileservice.getActiveProfile().getId()) {
      }
      currentMode=profile.getPairCameraPositions().get(index).getShotType();
      markfirst();
      if (greenscreen) {
        filtergrid.setVisible(false);
        greengrid.setVisible(true);
        titel.setText(""String_Node_Str"" + profile.getPairCameraPositions().get(index).getPosition().getName() + ""String_Node_Str"");
        titel.setVisible(true);
        createGreenscreenButton();
      }
 else {
        greengrid.setVisible(false);
        filtergrid.setVisible(true);
        titel.setText(""String_Node_Str"" + profile.getPairCameraPositions().get(index).getPosition().getName() + ""String_Node_Str"");
        titel.setVisible(true);
        creatButtons();
      }
    }
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * decides whether an new filter image is chosen or green screen
 * @param index current mode
 * @param idFilter current filter id
 * @param greenscreen boolean green screen or not
 */
public void currentlyChosen(int index,int idFilter,boolean greenscreen){
  try {
    this.index=index;
    titel.setText(""String_Node_Str"");
    greengrid=new GridPane();
    if (filtergrid == null) {
      filtergrid=new GridPane();
    }
    if (index > -1) {
      currentMode=profileservice.getActiveProfile().getPairCameraPositions().get(index).getShotType();
      markfirst();
      if (greenscreen) {
        filtergrid.setVisible(false);
        greengrid.setVisible(true);
        titel.setText(""String_Node_Str"" + profileservice.getActiveProfile().getPairCameraPositions().get(index).getPosition().getName() + ""String_Node_Str"");
        titel.setVisible(true);
        createGreenscreenButton();
      }
 else {
        greengrid.setVisible(false);
        filtergrid.setVisible(true);
        titel.setText(""String_Node_Str"" + profileservice.getActiveProfile().getPairCameraPositions().get(index).getPosition().getName() + ""String_Node_Str"");
        titel.setVisible(true);
        creatButtons();
      }
    }
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}"
77832,"/** 
 * creats image buttons for green screen image and marks chousen one
 */
private void createGreenscreenButton(){
  FileInputStream fips=null;
  try {
    greengrid=new GridPane();
    greengrid.prefWidth(Screen.getPrimary().getBounds().getWidth());
    filterscrollplanel=new ScrollPane();
    greengrid.setStyle(""String_Node_Str"");
    filterscrollplanel.setStyle(""String_Node_Str"");
    filterscrollplanel.setFitToWidth(true);
    filterscrollplanel.setFitToHeight(false);
    filterscrollplanel.prefWidth(Screen.getPrimary().getBounds().getWidth());
    greengrid.getColumnConstraints().add(0,new ColumnConstraints());
    greengrid.getRowConstraints().add(0,new RowConstraints());
    greengrid.getColumnConstraints().add(1,new ColumnConstraints());
    greengrid.getRowConstraints().add(1,new RowConstraints());
    greengrid.getColumnConstraints().add(2,new ColumnConstraints());
    greengrid.getRowConstraints().add(2,new RowConstraints());
    greengrid.getColumnConstraints().add(3,new ColumnConstraints());
    greengrid.getRowConstraints().add(3,new RowConstraints());
    greengrid.getColumnConstraints().add(4,new ColumnConstraints());
    greengrid.getRowConstraints().add(4,new RowConstraints());
    greengrid.getRowConstraints().add(5,new RowConstraints());
    greengrid.getColumnConstraints().get(0).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(0).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getColumnConstraints().get(1).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(1).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getColumnConstraints().get(2).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(2).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getColumnConstraints().get(3).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(3).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getColumnConstraints().get(4).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(4).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getRowConstraints().get(5).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    int columcount=0;
    int rowcount=0;
    List<Background> greenList=profileservice.getAllBackgroundOfProfile();
    shootingService.addUserDefinedBackgrounds(greenList);
    for (    Background backround : greenList) {
      if (columcount == 5) {
        rowcount++;
        columcount=0;
        if (rowcount >= 6) {
          greengrid.getRowConstraints().add(rowcount,new RowConstraints());
          greengrid.getRowConstraints().get(rowcount).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
        }
      }
      ImageView iv=new ImageView();
      iv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 5 - 10);
      iv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 5 - 10);
      iv.setStyle(""String_Node_Str"");
      fips=new FileInputStream(backround.getPath());
      iv.setImage(new javafx.scene.image.Image(fips,iv.getFitHeight(),iv.getFitWidth(),true,true));
      fips.close();
      if (profile.getPairCameraPositions().get(index).getBackground() != null) {
        if (backround.getId() == profile.getPairCameraPositions().get(index).getBackground().getId()) {
          activiv=iv;
          activiv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 5 - 40);
          activiv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 5 - 40);
        }
      }
      iv.setOnMouseClicked((      MouseEvent mouseEvent) -> {
        if (activiv != null) {
          activiv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 5 - 10);
          activiv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 5 - 10);
        }
        activiv=iv;
        iv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 5 - 40);
        iv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 5 - 40);
        profile.getPairCameraPositions().get(index).setBackground(backround);
      }
);
      greengrid.add(iv,columcount,rowcount);
      columcount++;
    }
    greengrid.setVisible(true);
    filterscrollplanel.setVisible(true);
    filterscrollplanel.setContent(greengrid);
    root.add(filterscrollplanel,0,1);
  }
 catch (  ServiceException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (fips != null) {
      try {
        fips.close();
      }
 catch (      IOException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * creats image buttons for green screen image and marks chousen one
 */
private void createGreenscreenButton(){
  FileInputStream fips=null;
  try {
    greengrid=new GridPane();
    greengrid.prefWidth(Screen.getPrimary().getBounds().getWidth());
    filterscrollplanel=new ScrollPane();
    greengrid.setStyle(""String_Node_Str"");
    filterscrollplanel.setStyle(""String_Node_Str"");
    filterscrollplanel.setFitToWidth(true);
    filterscrollplanel.setFitToHeight(false);
    filterscrollplanel.prefWidth(Screen.getPrimary().getBounds().getWidth());
    greengrid.getColumnConstraints().add(0,new ColumnConstraints());
    greengrid.getRowConstraints().add(0,new RowConstraints());
    greengrid.getColumnConstraints().add(1,new ColumnConstraints());
    greengrid.getRowConstraints().add(1,new RowConstraints());
    greengrid.getColumnConstraints().add(2,new ColumnConstraints());
    greengrid.getRowConstraints().add(2,new RowConstraints());
    greengrid.getColumnConstraints().add(3,new ColumnConstraints());
    greengrid.getRowConstraints().add(3,new RowConstraints());
    greengrid.getColumnConstraints().add(4,new ColumnConstraints());
    greengrid.getRowConstraints().add(4,new RowConstraints());
    greengrid.getRowConstraints().add(5,new RowConstraints());
    greengrid.getColumnConstraints().get(0).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(0).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getColumnConstraints().get(1).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(1).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getColumnConstraints().get(2).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(2).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getColumnConstraints().get(3).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(3).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getColumnConstraints().get(4).setPrefWidth(Screen.getPrimary().getBounds().getWidth() / 4);
    greengrid.getRowConstraints().get(4).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    greengrid.getRowConstraints().get(5).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
    int columcount=0;
    int rowcount=0;
    List<Background> greenList=profileservice.getAllBackgroundOfProfile();
    shootingService.addUserDefinedBackgrounds(greenList);
    for (    Background backround : greenList) {
      if (columcount == 5) {
        rowcount++;
        columcount=0;
        if (rowcount >= 6) {
          greengrid.getRowConstraints().add(rowcount,new RowConstraints());
          greengrid.getRowConstraints().get(rowcount).setPrefHeight(Screen.getPrimary().getBounds().getWidth() / 6);
        }
      }
      ImageView iv=new ImageView();
      iv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 5 - 10);
      iv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 5 - 10);
      iv.setStyle(""String_Node_Str"");
      fips=new FileInputStream(backround.getPath());
      iv.setImage(new javafx.scene.image.Image(fips,iv.getFitHeight(),iv.getFitWidth(),true,true));
      fips.close();
      if (profileservice.getActiveProfile().getPairCameraPositions().get(index).getBackground() != null) {
        if (backround.getId() == profileservice.getActiveProfile().getPairCameraPositions().get(index).getBackground().getId()) {
          activiv=iv;
          activiv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 5 - 40);
          activiv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 5 - 40);
        }
      }
      iv.setOnMouseClicked((      MouseEvent mouseEvent) -> {
        if (activiv != null) {
          activiv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 5 - 10);
          activiv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 5 - 10);
        }
        activiv=iv;
        iv.setFitHeight(Screen.getPrimary().getBounds().getWidth() / 5 - 40);
        iv.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 5 - 40);
        try {
          profileservice.getActiveProfile().getPairCameraPositions().get(index).setBackground(backround);
        }
 catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
);
      greengrid.add(iv,columcount,rowcount);
      columcount++;
    }
    greengrid.setVisible(true);
    filterscrollplanel.setVisible(true);
    filterscrollplanel.setContent(greengrid);
    root.add(filterscrollplanel,0,1);
  }
 catch (  ServiceException|IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (fips != null) {
      try {
        fips.close();
      }
 catch (      IOException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
    }
  }
}"
77833,"/** 
 * on single image pressed
 */
public void onSinglePressed(){
  unmark();
  profile.getPairCameraPositions().get(index).setShotType(Profile.PairCameraPosition.SHOT_TYPE_SINGLE);
  singel.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(3))));
  currentMode=0;
}","/** 
 * on single image pressed
 */
public void onSinglePressed(){
  try {
    unmark();
    profileservice.getActiveProfile().getPairCameraPositions().get(index).setShotType(Profile.PairCameraPosition.SHOT_TYPE_SINGLE);
    singel.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(3))));
    currentMode=0;
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77834,"/** 
 * inizialises chousenimage and buttonList and findes aktuell profile
 */
@FXML private void initialize(){
  try {
    if (shootingService.searchIsActive().getActive()) {
      profile=profileservice.get(shootingService.searchIsActive().getProfileid());
    }
    filtermap=new HashMap<>();
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}","/** 
 * inizialises chousenimage and buttonList and findes aktuell profile
 */
@FXML private void initialize(){
  filtermap=new HashMap<>();
}"
77835,"/** 
 * switch to login when pressed
 */
public void switchToLogin(){
  try {
    windowmanager.showAdminLogin(WindowManager.SHOW_SHOOTINGSCENE,WindowManager.SHOW_CUSTOMERSCENE);
    rightbutton.setVisible(true);
    if (!allpicturesview.isVisible()) {
      if (shootingservice.searchIsActive().getActive()) {
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
      }
      List<Profile.PairCameraPosition> pairList=profile.getPairCameraPositions();
      if (pairList.isEmpty() || pairList.size() == 0) {
        rightbutton.setVisible(false);
      }
      allpicturesview.setVisible(true);
      gridpanel.setVisible(true);
      leftbutton.setVisible(false);
      setInvisible();
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","/** 
 * switch to login when pressed
 */
public void switchToLogin(){
  try {
    windowmanager.showAdminLogin(WindowManager.SHOW_SHOOTINGSCENE,WindowManager.SHOW_CUSTOMERSCENE);
    rightbutton.setVisible(true);
    if (!allpicturesview.isVisible()) {
      if (shootingservice.searchIsActive().getActive()) {
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
      }
      List<Profile.PairCameraPosition> pairList=profileservice.getAllPairCameraPositionOfProfile();
      if (pairList.isEmpty() || pairList.size() == 0) {
        rightbutton.setVisible(false);
      }
      allpicturesview.setVisible(true);
      gridpanel.setVisible(true);
      leftbutton.setVisible(false);
      setInvisible();
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77836,"/** 
 * if right button gets pressed the controller loads the filter buttons and there  pictures
 */
public void switchToFilter(){
  try {
    if (shootingservice.searchIsActive().getActive()) {
      if (profile != null) {
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
          isButtoncreated=false;
          filterList.clear();
        }
      }
 else {
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        isButtoncreated=false;
        filterList.clear();
      }
    }
    if (filterList.isEmpty()) {
      try {
        String filterPreviewImagePath=windowmanager.copyResource(""String_Node_Str"");
        filterList=filterservice.getAllFilteredImages(filterPreviewImagePath);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    if (profile.isFilerEnabled() || profile.isGreenscreenEnabled()) {
      rightbutton.setVisible(false);
      allpicturesview.setVisible(false);
      gridpanel.setVisible(false);
      leftbutton.setVisible(true);
      if (!isRefreshed && profileold != null && isButtoncreated && profileold.getId() == shootingservice.searchIsActive().getProfileid()) {
        loadButton();
      }
 else {
        isRefreshed=false;
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        }
        profileold=profile;
        creatButtons();
      }
    }
 else {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  NullPointerException n) {
    LOGGER.error(""String_Node_Str"",n);
  }
}","/** 
 * if right button gets pressed the controller loads the filter buttons and there  pictures
 */
public void switchToFilter(){
  try {
    if (shootingservice.searchIsActive().getActive()) {
      if (profile != null) {
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
          isButtoncreated=false;
          filterList.clear();
        }
      }
 else {
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        isButtoncreated=false;
        filterList.clear();
      }
    }
    if (filterList.isEmpty()) {
      try {
        String filterPreviewImagePath=windowmanager.copyResource(""String_Node_Str"");
        filterList=filterservice.getAllFilteredImages(filterPreviewImagePath);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
    if (profileservice.getActiveProfile().isFilerEnabled() || profileservice.getActiveProfile().isGreenscreenEnabled()) {
      rightbutton.setVisible(false);
      allpicturesview.setVisible(false);
      gridpanel.setVisible(false);
      leftbutton.setVisible(true);
      if (!isRefreshed && profileold != null && isButtoncreated && profileold.getId() == shootingservice.searchIsActive().getProfileid()) {
        loadButton();
      }
 else {
        isRefreshed=false;
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        }
        profileold=profile;
        creatButtons();
      }
    }
 else {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  NullPointerException n) {
    LOGGER.error(""String_Node_Str"",n);
  }
}"
77837,"@FXML private void initialize(){
  try {
    leftbutton.setVisible(false);
    if (shootingservice.searchIsActive().getActive()) {
      profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
    }
    if (profile != null && !profile.isGreenscreenEnabled() && !profile.isFilerEnabled()) {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
}","@FXML private void initialize(){
  leftbutton.setVisible(false);
}"
77838,"/** 
 * if the customer wants to continue the shooting, he gets linked to the customer page of the active shooting
 */
public void onRecoveryPressed(){
  try {
    windowmanager.notifyActiveShootingAvailable();
    Profile profile=profileService.get(shootingService.searchIsActive().getProfileid());
    boolean camerasFitPosition=imageProcessingManager.checkImageProcessing(profile);
    if (camerasFitPosition) {
      imageProcessingManager.initImageProcessing();
      windowmanager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
    }
 else {
      showInformationDialog(""String_Node_Str"");
      onEndShootingPressed();
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    onEndShootingPressed();
  }
}","/** 
 * if the customer wants to continue the shooting, he gets linked to the customer page of the active shooting
 */
public void onRecoveryPressed(){
  try {
    windowmanager.notifyActiveShootingAvailable();
    profileService.setActiveProfile(shootingService.searchIsActive().getProfileid());
    boolean camerasFitPosition=imageProcessingManager.checkImageProcessing(profileService.getActiveProfile());
    if (camerasFitPosition) {
      imageProcessingManager.initImageProcessing();
      windowmanager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
    }
 else {
      showInformationDialog(""String_Node_Str"");
      onEndShootingPressed();
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    onEndShootingPressed();
  }
}"
77839,"/** 
 * when pressed a new shooting starts to successfully start a new shooting a storage path gets selected and a profile must be selected
 */
@FXML public void onStartShootingPressed(){
  LOGGER.info(""String_Node_Str"" + path);
  if (profileChoiceBox.getValue() != null) {
    try {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (path == null) {
        path=shootingService.createPath();
      }
      profileService.setActiveProfile(profile.getId());
      Shooting shouting=new Shooting(0,profile.getId(),path,bgPath,true);
      path=""String_Node_Str"";
      shootingService.addShooting(shouting);
      boolean test=true;
      try {
        boolean camerasFitPosition=imageProcessingManager.checkImageProcessing(profile);
        if (camerasFitPosition) {
          imageProcessingManager.initImageProcessing();
          test=false;
        }
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
 finally {
        if (test) {
          showInformationDialog(""String_Node_Str"");
        }
        windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
      }
    }
 catch (    ServiceException serviceExeption) {
      LOGGER.error(""String_Node_Str"",serviceExeption);
      showInformationDialog(""String_Node_Str"");
    }
  }
 else {
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * when pressed a new shooting starts to successfully start a new shooting a storage path gets selected and a profile must be selected
 */
@FXML public void onStartShootingPressed(){
  LOGGER.info(""String_Node_Str"" + path);
  if (profileChoiceBox.getValue() != null) {
    try {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (path == null) {
        path=shootingService.createPath();
      }
      Shooting shouting=new Shooting(0,profile.getId(),path,bgPath,true);
      path=""String_Node_Str"";
      shootingService.addShooting(shouting);
      profileService.setActiveProfile(profile.getId());
      boolean test=true;
      try {
        boolean camerasFitPosition=imageProcessingManager.checkImageProcessing(profile);
        if (camerasFitPosition) {
          imageProcessingManager.initImageProcessing();
          test=false;
        }
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
 finally {
        if (test) {
          showInformationDialog(""String_Node_Str"");
        }
        windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
      }
    }
 catch (    ServiceException serviceExeption) {
      LOGGER.error(""String_Node_Str"",serviceExeption);
      showInformationDialog(""String_Node_Str"");
    }
  }
 else {
    showInformationDialog(""String_Node_Str"");
  }
}"
77840,"/** 
 * Opens Mainframe again
 */
@FXML public void onDemolitionPressed(){
  try {
    if (shootingService.searchIsActive().getActive()) {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (shootingService.searchIsActive().getProfileid() == profile.getId()) {
        Shooting shooting=new Shooting(shootingService.searchIsActive().getId(),profile.getId(),""String_Node_Str"",bgPath,true);
        LOGGER.debug(""String_Node_Str"" + shooting.getId() + ""String_Node_Str""+ shooting.getBgPictureFolder());
        profileService.setActiveProfile(profile.getId());
        shootingService.update(shooting);
      }
      windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
    }
 else {
      windowManager.showScene(WindowManager.SHOW_MAINSCENE);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * Opens Mainframe again
 */
@FXML public void onDemolitionPressed(){
  try {
    if (shootingService.searchIsActive().getActive()) {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (shootingService.searchIsActive().getProfileid() == profile.getId()) {
        Shooting shooting=new Shooting(shootingService.searchIsActive().getId(),profile.getId(),""String_Node_Str"",bgPath,true);
        LOGGER.debug(""String_Node_Str"" + shooting.getId() + ""String_Node_Str""+ shooting.getBgPictureFolder());
        profileService.setActiveProfile(profile.getId());
        profileService.resetActiveProfileNonPersistentAttributes();
        shootingService.update(shooting);
      }
      windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
    }
 else {
      windowManager.showScene(WindowManager.SHOW_MAINSCENE);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}"
77841,"/** 
 * Shooting ends to do so the service methode endShooting gets called and main frame gets called catches ServiceException caused by Service methodes
 */
@FXML public void onStopShootingPressed(){
  try {
    shootingService.endShooting();
    inactivemode();
    imageProcessingManager.stopImageProcessing();
    windowManager.showScene(WindowManager.SHOW_MAINSCENE);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * Shooting ends to do so the service methode endShooting gets called and main frame gets called catches ServiceException caused by Service methodes
 */
@FXML public void onStopShootingPressed(){
  try {
    profileService.resetActiveProfileNonPersistentAttributes();
    shootingService.endShooting();
    inactivemode();
    imageProcessingManager.stopImageProcessing();
    windowManager.showScene(WindowManager.SHOW_MAINSCENE);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}"
77842,"/** 
 * if right button gets pressed the controller loads the filter buttons and there  pictures
 */
public void switchToFilter(){
  try {
    if (shootingservice.searchIsActive().getActive()) {
      if (profile != null) {
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
          isButtoncreated=false;
          filterList.clear();
        }
      }
 else {
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        isButtoncreated=false;
        filterList.clear();
      }
    }
    if (filterList.isEmpty()) {
      filterList=filterservice.getAllFilteredImages(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    }
    if (profile.isFilerEnabled() || profile.isGreenscreenEnabled()) {
      rightbutton.setVisible(false);
      allpicturesview.setVisible(false);
      gridpanel.setVisible(false);
      leftbutton.setVisible(true);
      if (!isRefreshed && profileold != null && isButtoncreated && profileold.getId() == shootingservice.searchIsActive().getProfileid()) {
        loadButton();
      }
 else {
        isRefreshed=false;
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        }
        profileold=profile;
        creatButtons();
      }
    }
 else {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  NullPointerException n) {
    LOGGER.error(""String_Node_Str"",n);
  }
}","/** 
 * if right button gets pressed the controller loads the filter buttons and there  pictures
 */
public void switchToFilter(){
  try {
    if (shootingservice.searchIsActive().getActive()) {
      if (profile != null) {
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profileservice.setActiveProfile(shootingservice.searchIsActive().getProfileid());
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
          isButtoncreated=false;
          filterList.clear();
        }
      }
 else {
        profileservice.setActiveProfile(shootingservice.searchIsActive().getProfileid());
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        isButtoncreated=false;
        filterList.clear();
      }
    }
    if (filterList.isEmpty()) {
      filterList=filterservice.getAllFilteredImages(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    }
    if (profile.isFilerEnabled() || profile.isGreenscreenEnabled()) {
      rightbutton.setVisible(false);
      allpicturesview.setVisible(false);
      gridpanel.setVisible(false);
      leftbutton.setVisible(true);
      if (!isRefreshed && profileold != null && isButtoncreated && profileold.getId() == shootingservice.searchIsActive().getProfileid()) {
        loadButton();
      }
 else {
        isRefreshed=false;
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        }
        profileold=profile;
        creatButtons();
      }
    }
 else {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  NullPointerException n) {
    LOGGER.error(""String_Node_Str"",n);
  }
}"
77843,"/** 
 * when pressed a new shooting starts to successfully start a new shooting a storage path gets selected and a profile must be selected
 */
@FXML public void onStartShootingPressed(){
  LOGGER.info(""String_Node_Str"" + path);
  if (profileChoiceBox.getValue() != null) {
    try {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (path == null) {
        path=shootingService.createPath();
      }
      Shooting shouting=new Shooting(0,profile.getId(),path,bgPath,true);
      path=""String_Node_Str"";
      shootingService.addShooting(shouting);
      boolean test=true;
      try {
        boolean camerasFitPosition=imageProcessingManager.checkImageProcessing(profile);
        if (camerasFitPosition) {
          imageProcessingManager.initImageProcessing();
          test=false;
        }
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
 finally {
        if (test) {
          showInformationDialog(""String_Node_Str"");
        }
        windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
      }
    }
 catch (    ServiceException serviceExeption) {
      LOGGER.error(""String_Node_Str"",serviceExeption);
      showInformationDialog(""String_Node_Str"");
    }
  }
 else {
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * when pressed a new shooting starts to successfully start a new shooting a storage path gets selected and a profile must be selected
 */
@FXML public void onStartShootingPressed(){
  LOGGER.info(""String_Node_Str"" + path);
  if (profileChoiceBox.getValue() != null) {
    try {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (path == null) {
        path=shootingService.createPath();
      }
      profileService.setActiveProfile(profile.getId());
      Shooting shouting=new Shooting(0,profile.getId(),path,bgPath,true);
      path=""String_Node_Str"";
      shootingService.addShooting(shouting);
      boolean test=true;
      try {
        boolean camerasFitPosition=imageProcessingManager.checkImageProcessing(profile);
        if (camerasFitPosition) {
          imageProcessingManager.initImageProcessing();
          test=false;
        }
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
 finally {
        if (test) {
          showInformationDialog(""String_Node_Str"");
        }
        windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
      }
    }
 catch (    ServiceException serviceExeption) {
      LOGGER.error(""String_Node_Str"",serviceExeption);
      showInformationDialog(""String_Node_Str"");
    }
  }
 else {
    showInformationDialog(""String_Node_Str"");
  }
}"
77844,"/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.info(""String_Node_Str"");
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String dest=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + lib;
      FileTransfer ft=new FileTransfer();
      try {
        ft.transfer(""String_Node_Str"" + lib,dest,false);
      }
 catch (      IOException e1) {
        LOGGER.error(""String_Node_Str"",e1);
        throw new LibraryLoadingException(e1);
      }
      System.load(dest);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,dest);
    }
  }
}","/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.info(""String_Node_Str"");
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String dest=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + lib;
      FileTransfer ft=new FileTransfer();
      try {
        ft.transfer(""String_Node_Str"" + lib,dest,false);
      }
 catch (      IOException e1) {
        LOGGER.error(""String_Node_Str"",e1);
        throw new LibraryLoadingException(e1);
      }
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,dest);
    }
  }
}"
77845,"@Override public Camera exists(Camera camera) throws PersistenceException {
  PreparedStatement stmt=null;
  String query=""String_Node_Str"";
  Camera ret=null;
  try {
    stmt=con.prepareStatement(query);
    stmt.setString(2,camera.getModel());
    ResultSet rs=stmt.executeQuery();
    if (rs.next()) {
      ret=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
    }
  }
  return ret;
}","@Override public Camera exists(Camera camera) throws PersistenceException {
  PreparedStatement stmt=null;
  String query=""String_Node_Str"";
  Camera ret=null;
  try {
    stmt=con.prepareStatement(query);
    stmt.setString(1,camera.getModel());
    ResultSet rs=stmt.executeQuery();
    if (rs.next()) {
      ret=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
    }
  }
  return ret;
}"
77846,"/** 
 * sets the delete desicion scene
 * @param imageView image view of the image that should be deleted
 */
public void showDeleteScene(boolean scene,javafx.scene.image.Image imageView){
  if (scene) {
    deleteImageController.setdeleteImage(true,imageView);
  }
 else {
    deleteImageController.setdeleteImage(false,imageView);
  }
  mainStage.setScene(deleteScene);
  mainStage.setFullScreen(true);
}","/** 
 * sets the delete desicion scene todo 
 * @param imageView image view of the image that should be deleted
 */
public void showDeleteScene(boolean scene,javafx.scene.image.Image imageView){
  if (scene) {
    deleteImageController.setdeleteImage(true,imageView);
  }
 else {
    deleteImageController.setdeleteImage(false,imageView);
  }
  mainStage.setScene(deleteScene);
  mainStage.setFullScreen(true);
}"
77847,"/** 
 * to be called from delete scene
 */
public void showFullscreenImage(boolean decison){
  mainStage.setScene(pictureFullScene);
  mainStage.setFullScreen(true);
  pictureController.shouldBeDeleted(decison);
}","/** 
 * to be called from delete scene TODO
 */
public void showFullscreenImage(boolean decison){
  mainStage.setScene(pictureFullScene);
  mainStage.setFullScreen(true);
  pictureController.shouldBeDeleted(decison);
}"
77848,"/** 
 * if cropping then stop cropping else closes full screen and opens miniatur sceen again before doing so it sets currentIndex to -1 to overcome possible null pointer exeptions
 */
@FXML public void onClosePressed(){
  if (cropping) {
    cropping=false;
    cropRectangle.setVisible(false);
    resizeHandleNW.setVisible(false);
    resizeHandleSE.setVisible(false);
    cropRectangle=null;
    resizeHandleSE=null;
    resizeHandleNW=null;
  }
  windowManager.showScene(WindowManager.SHOW_MINIATURESCENE);
}","/** 
 * if cropping then stop cropping else closes full screen and opens miniatur sceen again before doing so it sets currentIndex to -1 to overcome possible null pointer exeptions
 */
@FXML public void onClosePressed(){
  if (cropping == true) {
    cropping=false;
    cropRectangle.setVisible(false);
    resizeHandleNW.setVisible(false);
    resizeHandleSE.setVisible(false);
    cropRectangle=null;
    resizeHandleSE=null;
    resizeHandleNW=null;
  }
  windowManager.showScene(WindowManager.SHOW_MINIATURESCENE);
}"
77849,"/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.error(""String_Node_Str"");
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String dest=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + lib;
      FileTransfer ft=new FileTransfer();
      try {
        ft.transfer(""String_Node_Str"" + lib,dest,false);
      }
 catch (      IOException e1) {
        LOGGER.error(""String_Node_Str"",e1);
        throw new LibraryLoadingException(e1);
      }
      System.load(dest);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,dest);
    }
  }
}","/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.info(""String_Node_Str"");
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String dest=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + lib;
      FileTransfer ft=new FileTransfer();
      try {
        ft.transfer(""String_Node_Str"" + lib,dest,false);
      }
 catch (      IOException e1) {
        LOGGER.error(""String_Node_Str"",e1);
        throw new LibraryLoadingException(e1);
      }
      System.load(dest);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,dest);
    }
  }
}"
77850,"/** 
 * goes back to costumer frame
 */
public void onBackbuttonpressed(){
  wm.showScene(WindowManager.SHOW_CUSTOMERSCENE);
}","/** 
 * goes back to customer frame
 */
public void onBackbuttonpressed(){
  wm.showScene(WindowManager.SHOW_CUSTOMERSCENE);
}"
77851,"/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @throws IOException if an error occurs while loading the FXML-files defining the scenes.
 */
public void start(Stage mainStage) throws IOException {
  this.mainStage=mainStage;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + css);
  int sice=(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssett);
  parentsett.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsett.getStylesheets().add(csssett.toExternalForm());
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL cssmin=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssmin);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(cssmin.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  this.miniaturFrameController=miniWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CustomerFrameController> costumerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CustomerFrameController.class);
  Parent parentcos=(Parent)costumerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  customerFrameController=costumerWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CameraFilterController.class);
  Parent parentkaf=(Parent)kameraFilterFXMLWrapper.getLoadedObject();
  URL csskaf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csskaf);
  parentkaf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentkaf.getStylesheets().add(csskaf.toExternalForm());
  this.kamerafilterScene=new Scene(parentkaf,screenWidth,screenHeight);
  cameraFilterController=kameraFilterFXMLWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,RecoveryController> recoveryControllerFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",RecoveryController.class);
  Parent parentrec=(Parent)recoveryControllerFXMLWrapper.getLoadedObject();
  URL cssrec=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssrec);
  parentrec.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentrec.getStylesheets().add(cssrec.toExternalForm());
  this.recoveryScene=new Scene(parentrec,screenWidth,screenHeight);
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  SpringFXMLLoader.FXMLWrapper<Object,DeleteImageController> deleteWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",DeleteImageController.class);
  Parent parentdel=(Parent)deleteWrapper.getLoadedObject();
  URL cssd=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssd);
  parentdel.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentdel.getStylesheets().add(cssd.toExternalForm());
  this.deleteScene=new Scene(parentdel,screenWidth,screenHeight);
  this.deleteImageController=deleteWrapper.getController();
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}","/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @throws IOException if an error occurs while loading the FXML-files defining the scenes.
 */
public void start(Stage mainStage) throws IOException {
  this.mainStage=mainStage;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + css);
  int sice=(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssett);
  parentsett.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsett.getStylesheets().add(csssett.toExternalForm());
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL cssmin=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssmin);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(cssmin.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  this.miniaturFrameController=miniWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CustomerFrameController> customerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CustomerFrameController.class);
  Parent parentcos=(Parent)customerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  customerFrameController=customerWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CameraFilterController.class);
  Parent parentkaf=(Parent)kameraFilterFXMLWrapper.getLoadedObject();
  URL csskaf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csskaf);
  parentkaf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentkaf.getStylesheets().add(csskaf.toExternalForm());
  this.kamerafilterScene=new Scene(parentkaf,screenWidth,screenHeight);
  cameraFilterController=kameraFilterFXMLWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,RecoveryController> recoveryControllerFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",RecoveryController.class);
  Parent parentrec=(Parent)recoveryControllerFXMLWrapper.getLoadedObject();
  URL cssrec=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssrec);
  parentrec.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentrec.getStylesheets().add(cssrec.toExternalForm());
  this.recoveryScene=new Scene(parentrec,screenWidth,screenHeight);
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  SpringFXMLLoader.FXMLWrapper<Object,DeleteImageController> deleteWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",DeleteImageController.class);
  Parent parentdel=(Parent)deleteWrapper.getLoadedObject();
  URL cssd=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssd);
  parentdel.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentdel.getStylesheets().add(cssd.toExternalForm());
  this.deleteScene=new Scene(parentdel,screenWidth,screenHeight);
  this.deleteImageController=deleteWrapper.getController();
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}"
77852,"@Override public void run(){
  createTempDir();
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
      }
      captureImage();
      if (serieShot) {
        for (int i=0; i < 5; i++) {
          captureImage();
        }
      }
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      try {
        cameraGphoto.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      LOGGER.debug(""String_Node_Str"",camera);
    }
  }
}","@Override public void run(){
  createTempDir();
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
      }
      captureImage();
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      try {
        cameraGphoto.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      LOGGER.debug(""String_Node_Str"",camera);
    }
  }
}"
77853,"/** 
 * if cropping then stop cropping else closes full screen and opens miniatur sceen again before doing so it sets currentIndex to -1 to overcome possible null pointer exeptions
 */
@FXML public void onClosePressed(){
  if (cropping) {
    cropping=false;
    image3.setVisible(true);
    image4.setVisible(true);
    button1.setVisible(true);
    button11.setVisible(true);
    button12.setVisible(true);
    button5.setCancelButton(true);
    button6.setCancelButton(true);
    button7.setCancelButton(true);
    button8.setCancelButton(true);
    button9.setCancelButton(true);
    button13.setVisible(false);
    cropRectangle.setVisible(false);
    resizeHandleNW.setVisible(false);
    resizeHandleSE.setVisible(false);
  }
 else {
    windowManager.showScene(WindowManager.SHOW_MINIATURESCENE);
  }
}","/** 
 * if cropping then stop cropping else closes full screen and opens miniatur sceen again before doing so it sets currentIndex to -1 to overcome possible null pointer exeptions
 */
@FXML public void onClosePressed(){
  if (cropping) {
    cropping=false;
    cropRectangle.setVisible(false);
    resizeHandleNW.setVisible(false);
    resizeHandleSE.setVisible(false);
    cropRectangle=null;
    resizeHandleSE=null;
    resizeHandleNW=null;
  }
  windowManager.showScene(WindowManager.SHOW_MINIATURESCENE);
}"
77854,"private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setOpacity(0.1);
  rect.setVisible(true);
  resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  resizeHandleNW.setVisible(true);
  resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  resizeHandleSE.setVisible(true);
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}","private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setOpacity(0.1);
  rect.setVisible(true);
  resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  resizeHandleNW.setVisible(true);
  resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  resizeHandleSE.setVisible(true);
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnDragDetected(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}"
77855,"/** 
 * if right button gets pressed the controller loads the filter buttons and there  pictures
 */
public void switchToFilter(){
  try {
    if (shootingservice.searchIsActive().getActive()) {
      if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        isButtoncreated=false;
        filterList.clear();
      }
    }
    if (filterList.isEmpty()) {
      filterList=filterservice.getAllFilteredImages(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    }
    if (profile.isFilerEnabled() || profile.isGreenscreenEnabled()) {
      rightbutton.setVisible(false);
      allpicturesview.setVisible(false);
      gridpanel.setVisible(false);
      leftbutton.setVisible(true);
      if (!isRefreshed && profileold != null && isButtoncreated && profileold.getId() == shootingservice.searchIsActive().getProfileid()) {
        loadButton();
      }
 else {
        isRefreshed=false;
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        }
        profileold=profile;
        creatButtons();
      }
    }
 else {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  NullPointerException n) {
    LOGGER.error(""String_Node_Str"",n);
  }
}","/** 
 * if right button gets pressed the controller loads the filter buttons and there  pictures
 */
public void switchToFilter(){
  try {
    if (shootingservice.searchIsActive().getActive()) {
      if (profile != null) {
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
          isButtoncreated=false;
          filterList.clear();
        }
      }
 else {
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        isButtoncreated=false;
        filterList.clear();
      }
    }
    if (filterList.isEmpty()) {
      filterList=filterservice.getAllFilteredImages(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    }
    if (profile.isFilerEnabled() || profile.isGreenscreenEnabled()) {
      rightbutton.setVisible(false);
      allpicturesview.setVisible(false);
      gridpanel.setVisible(false);
      leftbutton.setVisible(true);
      if (!isRefreshed && profileold != null && isButtoncreated && profileold.getId() == shootingservice.searchIsActive().getProfileid()) {
        loadButton();
      }
 else {
        isRefreshed=false;
        if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
          profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
        }
        profileold=profile;
        creatButtons();
      }
    }
 else {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  NullPointerException n) {
    LOGGER.error(""String_Node_Str"",n);
  }
}"
77856,"/** 
 * decides if something has chanced and adapts chances
 */
public void refresh(){
  try {
    if (!miniLastVisit) {
      isRefreshed=true;
      if (filterChouseside) {
        basicpane.getChildren().remove(grid);
        grid=new GridPane();
        gridpanel=new GridPane();
        creatButtons();
      }
      filterChouseside=false;
    }
    if (profileservice.getActiveProfile().getPairCameraPositions().isEmpty() || profileservice.getActiveProfile().getPairCameraPositions().size() == 0) {
      rightbutton.setVisible(false);
    }
    miniLastVisit=false;
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","/** 
 * decides if something has chanced and adapts chances
 */
public void refresh(){
  try {
    if (!miniLastVisit) {
      isRefreshed=true;
      if (filterChouseside) {
        basicpane.getChildren().remove(grid);
        grid=new GridPane();
        creatButtons();
      }
      filterChouseside=false;
    }
    if (profileservice.getActiveProfile().getPairCameraPositions().isEmpty() || profileservice.getActiveProfile().getPairCameraPositions().size() == 0) {
      rightbutton.setVisible(false);
    }
    miniLastVisit=false;
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77857,"/** 
 * if a change oared or a new profile got installed the filter buttons get created
 */
private void creatButtons(){
  try {
    if (shootingservice.searchIsActive().getActive()) {
      profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
    }
    List<Profile.PairCameraPosition> pairList=profile.getPairCameraPositions();
    if (pairList == null || pairList.isEmpty()) {
      rightbutton.setVisible(false);
    }
 else {
      int column=(int)((float)pairList.size() / 3.0f);
      int width;
      if (pairList.size() > 3) {
        width=(int)((float)gridpanel.getWidth() / 3) - 10;
      }
 else       if (pairList.size() > 2) {
        width=(int)((float)gridpanel.getWidth() / 2) - 10;
      }
 else {
        width=(int)((float)gridpanel.getWidth()) - 10;
      }
      int high=(int)((float)gridpanel.getHeight() / 3) - 7;
      int countrow=1;
      int countcolumn=0;
      grid=new GridPane();
      for (int i=0; i < pairList.size(); i++) {
        GridPane gp=new GridPane();
        String name=""String_Node_Str"" + pairList.get(i).getCamera().getId() + ""String_Node_Str""+ pairList.get(i).getPosition().getName();
        int shot=profileservice.getActiveProfile().getPairCameraPositions().get(i).getShotType();
        ImageView imageView=new ImageView();
        imageView.setVisible(true);
        imageView.prefHeight(high);
        imageView.prefWidth(20);
        if (!pairList.get(i).isGreenScreenReady()) {
          if (profileservice.getActiveProfile().getPairCameraPositions().get(i).getFilterName() == null || profileservice.getActiveProfile().getPairCameraPositions().get(i).getFilterName().equals(""String_Node_Str"")) {
            imageView.setImage(new Image(""String_Node_Str"",imageView.getFitHeight(),imageView.getFitWidth(),true,true));
          }
 else {
            imageView.setImage(SwingFXUtils.toFXImage(filterList.get(profileservice.getActiveProfile().getPairCameraPositions().get(i).getFilterName()),null));
          }
        }
 else {
          if (profileservice.getActiveProfile().getPairCameraPositions().get(i).getBackground() != null) {
            if (profileservice.getActiveProfile().getPairCameraPositions().get(i).getBackground().getPath() != null) {
              FileInputStream file=new FileInputStream(profileservice.getActiveProfile().getPairCameraPositions().get(i).getBackground().getPath());
              Image ima=new Image(file,imageView.getFitHeight(),imageView.getFitWidth(),true,true);
              file.close();
              imageView.setImage(ima);
            }
 else {
              imageView.setImage(new Image(""String_Node_Str"",imageView.getFitHeight(),imageView.getFitWidth(),true,true));
            }
          }
 else {
            imageView.setImage(new Image(""String_Node_Str"",imageView.getFitHeight(),imageView.getFitWidth(),true,true));
          }
        }
        Image i2;
        if (shot == 0) {
          i2=new Image(""String_Node_Str"");
        }
 else         if (shot == 1) {
          i2=new Image(""String_Node_Str"");
        }
 else {
          i2=new Image(""String_Node_Str"");
        }
        ImageView iv2=new ImageView();
        iv2.setImage(i2);
        iv2.setFitHeight(high / 4);
        iv2.setFitWidth(high / 4);
        imageView.setFitHeight(high / 2);
        imageView.setFitWidth(high / 2);
        Group blend=new Group(imageView,iv2);
        if (pairList.size() <= 3) {
          if (countrow == 1) {
            GridPane top=new GridPane();
            top.setPrefHeight(high / 2);
            top.setStyle(""String_Node_Str"");
            grid.add(top,countcolumn,0);
          }
          countrow=countrow + 2;
        }
 else {
          if (countcolumn < 2) {
            countcolumn=+2;
            if (countrow == 1) {
              GridPane top=new GridPane();
              top.setPrefHeight(high / 4);
              top.setStyle(""String_Node_Str"");
              grid.add(top,countcolumn,0);
            }
          }
 else {
            countrow++;
            countcolumn=+2;
          }
        }
        Button filter=new Button();
        filter.setText(name);
        filter.setStyle(""String_Node_Str"");
        filter.setVisible(true);
        filter.setPrefWidth(width - 20);
        filter.setPrefHeight(high / 2);
        String url=pairList.get(i).getCameraLable();
        LOGGER.debug(""String_Node_Str"" + url);
        filter.setStyle(""String_Node_Str"" + url + ""String_Node_Str"");
        filter.setStyle(""String_Node_Str"");
        filter.setStyle(""String_Node_Str"");
        double size;
        if (column == 0) {
          size=allpicturesview.getFont().getSize();
        }
 else {
          size=(int)(allpicturesview.getFont().getSize() / column);
        }
        filter.setStyle(""String_Node_Str"" + size + ""String_Node_Str"");
        final int index=i;
        filter.setOnMouseClicked((        MouseEvent mouseEvent) -> {
          filterChouseside=true;
          windowmanager.showKameraFilterSceen(index,1,pairList.get(index).isGreenScreenReady());
        }
);
        gp.prefWidth(width);
        gp.prefHeight(high);
        gp.add(filter,0,0);
        gp.add(blend,1,0);
        grid.add(gp,countcolumn,countrow);
        GridPane fill=new GridPane();
        fill.setPrefHeight(high / 2);
        fill.setStyle(""String_Node_Str"");
        if (pairList.size() > 3) {
          GridPane fillside=new GridPane();
          fill.setPrefWidth(20);
          fill.setStyle(""String_Node_Str"");
          grid.add(fillside,countcolumn + 1,countrow);
        }
        grid.add(fill,countcolumn,countrow + 1);
      }
      basicpane.add(grid,1,0);
      isButtoncreated=true;
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(e.getMessage());
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","/** 
 * if a change oared or a new profile got installed the filter buttons get created
 */
private void creatButtons(){
  try {
    if (shootingservice.searchIsActive().getActive()) {
      profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
    }
    List<Profile.PairCameraPosition> pairList=profile.getPairCameraPositions();
    if (pairList == null || pairList.isEmpty()) {
      rightbutton.setVisible(false);
    }
 else {
      int column=(int)((float)pairList.size() / 3.0f);
      int width;
      if (pairList.size() > 3) {
        width=(int)((float)gridpanel.getWidth() / 6) - 10;
      }
 else       if (pairList.size() > 2) {
        width=(int)((float)gridpanel.getWidth() / 5) - 10;
      }
 else {
        width=(int)((float)gridpanel.getWidth()) - 10;
      }
      int high=(int)((float)gridpanel.getWidth() / 6) - 7;
      int countrow=1;
      int countcolumn=0;
      grid=new GridPane();
      for (int i=0; i < pairList.size(); i++) {
        GridPane gp=new GridPane();
        String name=""String_Node_Str"" + pairList.get(i).getCamera().getId() + ""String_Node_Str""+ pairList.get(i).getPosition().getName();
        int shot=profileservice.getActiveProfile().getPairCameraPositions().get(i).getShotType();
        ImageView imageView=new ImageView();
        imageView.setVisible(true);
        imageView.prefHeight(high);
        imageView.prefWidth(20);
        if (!pairList.get(i).isGreenScreenReady()) {
          if (profileservice.getActiveProfile().getPairCameraPositions().get(i).getFilterName() == null || profileservice.getActiveProfile().getPairCameraPositions().get(i).getFilterName().equals(""String_Node_Str"")) {
            imageView.setImage(new Image(""String_Node_Str"",imageView.getFitHeight(),imageView.getFitWidth(),true,true));
          }
 else {
            imageView.setImage(SwingFXUtils.toFXImage(filterList.get(profileservice.getActiveProfile().getPairCameraPositions().get(i).getFilterName()),null));
          }
        }
 else {
          if (profileservice.getActiveProfile().getPairCameraPositions().get(i).getBackground() != null) {
            if (profileservice.getActiveProfile().getPairCameraPositions().get(i).getBackground().getPath() != null) {
              FileInputStream file=new FileInputStream(profileservice.getActiveProfile().getPairCameraPositions().get(i).getBackground().getPath());
              Image ima=new Image(file,imageView.getFitHeight(),imageView.getFitWidth(),true,true);
              file.close();
              imageView.setImage(ima);
            }
 else {
              imageView.setImage(new Image(""String_Node_Str"",imageView.getFitHeight(),imageView.getFitWidth(),true,true));
            }
          }
 else {
            imageView.setImage(new Image(""String_Node_Str"",imageView.getFitHeight(),imageView.getFitWidth(),true,true));
          }
        }
        Image i2;
        if (shot == 0) {
          i2=new Image(""String_Node_Str"");
        }
 else         if (shot == 1) {
          i2=new Image(""String_Node_Str"");
        }
 else {
          i2=new Image(""String_Node_Str"");
        }
        ImageView iv2=new ImageView();
        iv2.setImage(i2);
        if (pairList.size() <= 3) {
          if (countrow == 1) {
            GridPane top=new GridPane();
            top.setPrefHeight(high / 2);
            top.setStyle(""String_Node_Str"");
            grid.add(top,countcolumn,0);
          }
          countrow=countrow + 2;
        }
 else {
          if (countcolumn < 2) {
            countcolumn=+2;
            if (countrow == 1) {
              GridPane top=new GridPane();
              top.setPrefHeight(high / 4);
              top.setStyle(""String_Node_Str"");
              grid.add(top,countcolumn,0);
            }
          }
 else {
            countrow++;
            countcolumn=+2;
          }
        }
        Button filter=new Button();
        filter.setText(name);
        filter.setStyle(""String_Node_Str"");
        filter.setVisible(true);
        filter.setPrefWidth(width - high / 2);
        filter.setPrefHeight(high / 2);
        String url=pairList.get(i).getCameraLable();
        LOGGER.debug(""String_Node_Str"" + url);
        filter.setStyle(""String_Node_Str"" + url + ""String_Node_Str"");
        filter.setStyle(""String_Node_Str"");
        filter.setStyle(""String_Node_Str"");
        double size;
        if (column == 0) {
          size=allpicturesview.getFont().getSize();
        }
 else {
          size=(int)(allpicturesview.getFont().getSize() / column);
        }
        filter.setStyle(""String_Node_Str"" + size + ""String_Node_Str"");
        final int index=i;
        filter.setOnMouseClicked((        MouseEvent mouseEvent) -> {
          filterChouseside=true;
          windowmanager.showKameraFilterSceen(index,1,pairList.get(index).isGreenScreenReady());
        }
);
        iv2.setFitWidth(high / 4);
        iv2.setFitHeight(high / 4);
        imageView.setFitWidth(high / 1.5);
        imageView.setFitHeight(high / 1.5);
        Group blend=new Group(imageView,iv2);
        gp.prefWidth(width);
        gp.prefHeight(high);
        gp.add(filter,0,0);
        gp.add(blend,1,0);
        grid.add(gp,countcolumn,countrow);
        GridPane fill=new GridPane();
        fill.setPrefHeight(high / 2);
        fill.setStyle(""String_Node_Str"");
        if (pairList.size() > 3) {
          GridPane fillside=new GridPane();
          fill.setPrefWidth(20);
          fill.setStyle(""String_Node_Str"");
          grid.add(fillside,countcolumn + 1,countrow);
        }
        grid.add(fill,countcolumn,countrow + 1);
      }
      basicpane.add(grid,1,0);
      isButtoncreated=true;
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(e.getMessage());
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77858,"/** 
 * if cropping then stop cropping else closes full screen and opens miniatur sceen again before doing so it sets currentIndex to -1 to overcome possible null pointer exeptions
 */
@FXML public void onClosePressed(){
  if (cropping == true) {
    cropping=false;
    cropRectangle.setVisible(false);
    resizeHandleNW.setVisible(false);
    resizeHandleSE.setVisible(false);
    cropRectangle=null;
    resizeHandleSE=null;
    resizeHandleNW=null;
  }
  windowManager.showScene(WindowManager.SHOW_MINIATURESCENE);
}","/** 
 * if cropping then stop cropping else closes full screen and opens miniatur sceen again before doing so it sets currentIndex to -1 to overcome possible null pointer exeptions
 */
@FXML public void onClosePressed(){
  if (cropping) {
    cropping=false;
    cropRectangle.setVisible(false);
    resizeHandleNW.setVisible(false);
    resizeHandleSE.setVisible(false);
    cropRectangle=null;
    resizeHandleSE=null;
    resizeHandleNW=null;
  }
  windowManager.showScene(WindowManager.SHOW_MINIATURESCENE);
}"
77859,"private void captureImage(){
  Image image;
  try {
    final CameraFile cf=cameraGphoto.captureImage();
    if (cf != null) {
      Shooting activeShooting=shootingService.searchIsActive();
      if (activeShooting != null) {
        int imageID=imageService.getNextImageID();
        String directoryPath=activeShooting.getStorageDir() + ""String_Node_Str"";
        DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
        Date date=new Date();
        String imagePath=directoryPath + ""String_Node_Str"" + camera.getId()+ ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
        image=new Image(imageID,imagePath,activeShooting.getId(),new Date());
        image=imageService.create(image);
        cf.save(new File(imagePath).getAbsolutePath());
        imageProcessor.processShot(image);
        LOGGER.debug(imageService.getLastImgPath(activeShooting.getId()));
      }
 else {
        LOGGER.error(""String_Node_Str"");
      }
      cf.close();
    }
  }
 catch (  CameraException ex) {
    LOGGER.error(""String_Node_Str"",ex);
    setStop(true);
  }
catch (  ServiceException ex) {
    LOGGER.error(""String_Node_Str"",ex);
  }
}","private void captureImage(){
  Image image;
  int anz=1;
  List<Image> imageList=new ArrayList<>();
  if (serieShot) {
    anz=5;
  }
  try {
    final CameraFile cf=cameraGphoto.captureImage();
    if (cf != null) {
      Shooting activeShooting=shootingService.searchIsActive();
      if (activeShooting != null) {
        for (int i=0; i < anz; i++) {
          int imageID=imageService.getNextImageID();
          String directoryPath=activeShooting.getStorageDir() + ""String_Node_Str"";
          DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
          Date date=new Date();
          String imagePath=directoryPath + ""String_Node_Str"" + camera.getId()+ ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
          image=new Image(imageID,imagePath,activeShooting.getId(),new Date());
          image=imageService.create(image);
          cf.save(new File(imagePath).getAbsolutePath());
          imageList.add(image);
          LOGGER.debug(imageService.getLastImgPath(activeShooting.getId()));
        }
        for (        Image shot : imageList) {
          imageProcessor.processShot(shot);
          sleep(5000);
        }
      }
 else {
        LOGGER.error(""String_Node_Str"");
      }
      cf.close();
    }
  }
 catch (  CameraException ex) {
    LOGGER.error(""String_Node_Str"",ex);
    setStop(true);
  }
catch (  ServiceException|InterruptedException ex) {
    LOGGER.error(""String_Node_Str"",ex);
  }
}"
77860,"public void onCropPressed(){
  cropping=true;
  saveFilteredButton.setVisible(true);
  LOGGER.debug(""String_Node_Str"");
  if (cropRectangle == null) {
    cropRectangle=createDraggableRectangle(forCropping.getWidth() - 400,forCropping.getHeight() - 400,100,100);
    forCropping.getChildren().add(cropRectangle);
  }
 else {
    cropRectangle.setVisible(true);
    resizeHandleNW.setVisible(true);
    resizeHandleSE.setVisible(true);
  }
}","public void onCropPressed(){
  cropping=true;
  saveFilteredButton.setVisible(true);
  LOGGER.debug(""String_Node_Str"");
  if (cropRectangle == null) {
    cropRectangle=createDraggableRectangle((forCropping.getWidth() / 2) - 200,(forCropping.getHeight() / 2) - 300,400,600);
    forCropping.getChildren().add(cropRectangle);
  }
 else   if (cropRectangle.isVisible()) {
    cropRectangle.setVisible(false);
    resizeHandleNW.setVisible(false);
    resizeHandleSE.setVisible(false);
    saveFilteredButton.setVisible(false);
  }
 else {
    cropRectangle.setVisible(true);
    resizeHandleNW.setVisible(true);
    resizeHandleSE.setVisible(true);
  }
}"
77861,"@Override public Image crop(Image original,int x1,int x2,int y1,int y2,int maxX,int maxY) throws ServiceException {
  try {
    BufferedImage bufOriginal=ImageIO.read(new File(original.getImagepath()));
    int width=bufOriginal.getWidth();
    int height=bufOriginal.getHeight();
    double ratioX=width / (double)maxX;
    double ratioY=height / (double)maxY;
    int newX1=(int)(x1 * ratioX);
    int newX2=(int)(x2 * ratioX);
    int newY1=(int)(y1 * ratioY);
    int newY2=(int)(y2 * ratioY);
    BufferedImage bufCropped=bufOriginal.getSubimage(newX1,newY1,newX2 - newX1,newY2 - newY1);
    Image img=new Image(-1,original.getImagepath().substring(0,original.getImagepath().length() - 4) + ""String_Node_Str"",original.getShootingid(),original.getDate());
    return dao.createAndSave(img,bufCropped);
  }
 catch (  IOException|PersistenceException e) {
    LOGGER.debug(""String_Node_Str"",e);
    throw new ServiceException(e.getMessage());
  }
}","@Override public Image crop(Image original,int x1,int x2,int y1,int y2,int maxX,int maxY) throws ServiceException {
  try {
    BufferedImage bufOriginal=ImageIO.read(new File(original.getImagepath()));
    int width=bufOriginal.getWidth();
    int height=bufOriginal.getHeight();
    double ratioX=width / (double)maxX;
    double ratioY=height / (double)maxY;
    int newX1=(int)(x1 * ratioX);
    int newX2=(int)(x2 * ratioX);
    int newY1=(int)(y1 * ratioY);
    int newY2=(int)(y2 * ratioY);
    BufferedImage bufCropped=bufOriginal.getSubimage(newX1,newY1,newX2 - newX1,newY2 - newY1);
    Image img=new Image(-1,original.getImagepath().substring(0,original.getImagepath().length() - 4) + ""String_Node_Str"",original.getShootingid(),original.getDate());
    return dao.createAndSave(img,bufCropped);
  }
 catch (  IOException|PersistenceException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServiceException(e.getMessage());
  }
}"
77862,"/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.error(""String_Node_Str"",e);
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String dest=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + lib;
      FileTransfer ft=new FileTransfer();
      try {
        ft.transfer(""String_Node_Str"" + lib,dest,false);
      }
 catch (      IOException e1) {
        LOGGER.error(""String_Node_Str"",e1);
        throw new LibraryLoadingException(e1);
      }
      System.load(dest);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,dest);
    }
  }
}","/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.error(""String_Node_Str"",e);
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String dest=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + lib;
      FileTransfer ft=new FileTransfer();
      try {
        ft.transfer(""String_Node_Str"" + lib,dest,false);
      }
 catch (      IOException e1) {
        LOGGER.error(""String_Node_Str"",e1);
        throw new LibraryLoadingException(e1);
      }
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,dest);
    }
  }
}"
77863,"public List<Camera> getCameras() throws CameraException {
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  return cameraList;
}","public List<Camera> getCameras() throws CameraException {
  if (!cameraGphotoList.isEmpty()) {
    for (    CameraGphoto camera : cameraGphotoList) {
      if (camera.isInitialized()) {
        try {
          camera.close();
        }
 catch (        IOException e) {
          LOGGER.error(""String_Node_Str"",e);
          throw new CameraException(e.getMessage(),-1);
        }
      }
    }
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  return cameraList;
}"
77864,"@FXML private void initialize(){
  try {
    leftbutton.setVisible(false);
    if (shootingservice.searchIsActive().getActive()) {
      profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
    }
    if (profile != null && !profile.isGreenscreenEnabled() && !profile.isFilerEnabled()) {
      rightbutton.setVisible(false);
      filterList=filterservice.getAllFilteredImages(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
}","@FXML private void initialize(){
  try {
    leftbutton.setVisible(false);
    if (shootingservice.searchIsActive().getActive()) {
      profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
    }
    if (profile != null && !profile.isGreenscreenEnabled() && !profile.isFilerEnabled()) {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77865,"/** 
 * on time image pressed
 */
public void onTimerPressed(){
  unmark();
  profile.getPairCameraPositions().get(index).setShotType(Profile.PairCameraPosition.SHOT_TYPE_TIMED);
  ontime.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
  singel.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
  currentMode=2;
}","/** 
 * on time image pressed
 */
public void onTimerPressed(){
  unmark();
  profile.getPairCameraPositions().get(index).setShotType(Profile.PairCameraPosition.SHOT_TYPE_TIMED);
  ontime.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
  currentMode=2;
}"
77866,"/** 
 * unmarks the old model so the new model can be marked
 */
private void unmark(){
  try {
    int i=currentMode;
switch (i) {
case 0:
      singel.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
    break;
case 1:
  serien.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
break;
case 2:
ontime.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
singel.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
break;
}
}
 catch (NullPointerException n) {
LOGGER.error(""String_Node_Str"",n);
}
}","/** 
 * unmarks the old model so the new model can be marked
 */
private void unmark(){
  try {
    int i=currentMode;
switch (i) {
case 0:
      singel.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
    break;
case 1:
  serien.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
break;
case 2:
ontime.setBorder(new Border(new BorderStroke(javafx.scene.paint.Paint.valueOf(""String_Node_Str""),BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(1))));
break;
}
}
 catch (NullPointerException n) {
LOGGER.error(""String_Node_Str"",n);
}
}"
77867,"/** 
 * Checks if there is an active shooting and sets visibility and contents of buttons and labels accordingly.
 * @throws ServiceException if an error occurs while retrieving the active shooting from the service layer.
 */
private void setButtons() throws ServiceException {
  Shooting activeShooting=shootingService.searchIsActive();
  if (activeShooting != null && activeShooting.getActive()) {
    startButton.setVisible(false);
    stopButton.setVisible(true);
    storage.setVisible(false);
    canclebutton.setText(""String_Node_Str"");
    storageDirLabel.setVisible(false);
    gridSave.setVisible(false);
    finallsavingplace.setText(activeShooting.getStorageDir());
    finallsavingplace.setVisible(true);
    save1.setVisible(true);
    saveing.setVisible(false);
    if (activeShooting.getBgPictureFolder() != null && !activeShooting.getBgPictureFolder().isEmpty()) {
      bgStorageDirLabel.setText(activeShooting.getBgPictureFolder());
    }
  }
 else {
    stopButton.setVisible(false);
    startButton.setVisible(true);
    storage.setVisible(true);
    storageDirLabel.setVisible(true);
    gridSave.setVisible(true);
    canclebutton.setText(""String_Node_Str"");
    finallsavingplace.setVisible(false);
    save1.setVisible(false);
    saveing.setVisible(true);
  }
}","/** 
 * Checks if there is an active shooting and sets visibility and contents of buttons and labels accordingly.
 * @throws ServiceException if an error occurs while retrieving the active shooting from the service layer.
 */
private void setButtons() throws ServiceException {
  Shooting activeShooting=shootingService.searchIsActive();
  if (activeShooting != null && activeShooting.getActive()) {
    startButton.setVisible(false);
    stopButton.setVisible(true);
    storage.setVisible(false);
    canclebutton.setText(""String_Node_Str"");
    storageDirLabel.setVisible(true);
    storageDirLabel.setText(""String_Node_Str"" + activeShooting.getStorageDir());
    gridSave.setVisible(false);
    finallsavingplace.setText(activeShooting.getStorageDir());
    finallsavingplace.setVisible(true);
    save1.setVisible(true);
    saveing.setVisible(false);
    if (activeShooting.getBgPictureFolder() != null && !activeShooting.getBgPictureFolder().isEmpty()) {
      bgStorageDirLabel.setText(activeShooting.getBgPictureFolder());
    }
  }
 else {
    stopButton.setVisible(false);
    startButton.setVisible(true);
    storage.setVisible(true);
    storageDirLabel.setVisible(true);
    String userHome=System.getProperty(""String_Node_Str"");
    Path storagepath=Paths.get(userHome + ""String_Node_Str"");
    storageDirLabel.setText(storagepath.toString());
    gridSave.setVisible(true);
    canclebutton.setText(""String_Node_Str"");
    finallsavingplace.setVisible(false);
    save1.setVisible(false);
    saveing.setVisible(true);
  }
}"
77868,"@Override public Camera read(int id) throws PersistenceException {
  LOGGER.debug(""String_Node_Str"" + id);
  ResultSet rs;
  String sqlString;
  PreparedStatement stmt=null;
  sqlString=""String_Node_Str"";
  try {
    stmt=this.con.prepareStatement(sqlString);
    stmt.setInt(1,id);
    rs=stmt.executeQuery();
    if (rs.next()) {
      Camera camera=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      LOGGER.debug(""String_Node_Str"" + camera);
      return camera;
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      return null;
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
 finally {
    try {
      if (stmt != null)       stmt.close();
    }
 catch (    SQLException e) {
      throw new PersistenceException(""String_Node_Str"" + e);
    }
  }
}","@Override public Camera read(int id) throws PersistenceException {
  LOGGER.debug(""String_Node_Str"" + id);
  ResultSet rs;
  String sqlString;
  PreparedStatement stmt=null;
  sqlString=""String_Node_Str"";
  try {
    stmt=this.con.prepareStatement(sqlString);
    stmt.setInt(1,id);
    rs=stmt.executeQuery();
    if (rs.next()) {
      Camera camera=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      LOGGER.debug(""String_Node_Str"" + camera);
      return camera;
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      return null;
    }
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(""String_Node_Str"" + e);
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new PersistenceException(""String_Node_Str"" + e);
    }
  }
}"
77869,"@Override public List<Camera> getAll() throws PersistenceException {
  List<Camera> cameraList=new ArrayList<>();
  PreparedStatement stmt=null;
  String query=""String_Node_Str"";
  try {
    stmt=con.prepareStatement(query);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      Camera c=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      cameraList.add(c);
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.debug(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  return cameraList;
}","@Override public List<Camera> getAll() throws PersistenceException {
  List<Camera> cameraList=new ArrayList<>();
  PreparedStatement stmt=null;
  String query=""String_Node_Str"";
  try {
    stmt=con.prepareStatement(query);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      Camera c=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      cameraList.add(c);
    }
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"" + e);
      }
    }
  }
  return cameraList;
}"
77870,"@Override public void setActive(int cameraID) throws PersistenceException {
  PreparedStatement stmt=null;
  try {
    String prepered=""String_Node_Str"";
    stmt=con.prepareStatement(prepered);
    stmt.setInt(1,cameraID);
    stmt.execute();
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e.getMessage());
    throw new PersistenceException(e.getMessage());
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(e.getMessage());
      }
    }
  }
}","@Override public void setActive(int cameraID) throws PersistenceException {
  PreparedStatement stmt=null;
  try {
    String prepered=""String_Node_Str"";
    stmt=con.prepareStatement(prepered);
    stmt.setInt(1,cameraID);
    stmt.execute();
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
}"
77871,"@Override public List<Camera> readActive() throws PersistenceException {
  List<Camera> cameraList=new ArrayList<>();
  PreparedStatement stmt=null;
  String query=""String_Node_Str"";
  try {
    stmt=con.prepareStatement(query);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      Camera c=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      cameraList.add(c);
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.debug(""String_Node_Str"" + e.getMessage());
      }
    }
  }
  return cameraList;
}","@Override public List<Camera> readActive() throws PersistenceException {
  List<Camera> cameraList=new ArrayList<>();
  PreparedStatement stmt=null;
  String query=""String_Node_Str"";
  try {
    stmt=con.prepareStatement(query);
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      Camera c=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      cameraList.add(c);
    }
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.debug(""String_Node_Str"" + e);
      }
    }
  }
  return cameraList;
}"
77872,"@Override public void setInactive(int cameraID) throws PersistenceException {
  PreparedStatement stmt=null;
  try {
    String prepered=""String_Node_Str"";
    stmt=con.prepareStatement(prepered);
    stmt.setInt(1,cameraID);
    stmt.execute();
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e.getMessage());
    throw new PersistenceException(e.getMessage());
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(e.getMessage());
      }
    }
  }
}","@Override public void setInactive(int cameraID) throws PersistenceException {
  PreparedStatement stmt=null;
  try {
    String prepered=""String_Node_Str"";
    stmt=con.prepareStatement(prepered);
    stmt.setInt(1,cameraID);
    stmt.execute();
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
}"
77873,"@Override public Camera exists(Camera camera) throws PersistenceException {
  PreparedStatement stmt=null;
  String query=""String_Node_Str"";
  Camera ret=null;
  try {
    stmt=con.prepareStatement(query);
    stmt.setString(1,camera.getPort());
    stmt.setString(2,camera.getModel());
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      ret=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
    }
  }
  return ret;
}","@Override public Camera exists(Camera camera) throws PersistenceException {
  PreparedStatement stmt=null;
  String query=""String_Node_Str"";
  Camera ret=null;
  try {
    stmt=con.prepareStatement(query);
    stmt.setString(1,camera.getPort());
    stmt.setString(2,camera.getModel());
    ResultSet rs=stmt.executeQuery();
    while (rs.next()) {
      ret=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
    }
  }
  return ret;
}"
77874,"@Override public void setAllInactive() throws PersistenceException {
  PreparedStatement stmt=null;
  try {
    String prepered=""String_Node_Str"";
    stmt=con.prepareStatement(prepered);
    stmt.execute();
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e.getMessage());
    throw new PersistenceException(e.getMessage());
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(e.getMessage());
      }
    }
  }
}","@Override public void setAllInactive() throws PersistenceException {
  PreparedStatement stmt=null;
  try {
    String prepered=""String_Node_Str"";
    stmt=con.prepareStatement(prepered);
    stmt.execute();
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
}"
77875,"public List<Camera> getCameras() throws CameraException {
  if (!cameraGphotoList.isEmpty()) {
    for (    CameraGphoto camera : cameraGphotoList) {
      if (camera.isInitialized()) {
        try {
          camera.close();
        }
 catch (        IOException e) {
          LOGGER.error(""String_Node_Str"",e);
          throw new CameraException(e.getMessage(),-1);
        }
      }
    }
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  return cameraList;
}","public List<Camera> getCameras() throws CameraException {
  if (!cameraList.isEmpty()) {
    return cameraList;
  }
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  return cameraList;
}"
77876,"private void capturePreview(){
  try {
    final CameraFile cf=cameraGphoto.capturePreview();
    if (cf != null) {
      Shooting activeShooting=shootingService.searchIsActive();
      if (activeShooting != null) {
        String imagePath=activeShooting.getStorageDir() + ""String_Node_Str"" + +camera.getId()+ ""String_Node_Str"";
        if (!new File(imagePath).exists()) {
          File file=new File(imagePath);
          file.mkdir();
        }
        cf.save(new File(imagePath).getAbsolutePath());
        imageProcessor.processPreview(imagePath);
        LOGGER.debug(imageService.getLastImgPath(activeShooting.getId()));
      }
 else {
        LOGGER.error(""String_Node_Str"");
      }
      cf.close();
    }
  }
 catch (  CameraException ex) {
    LOGGER.error(""String_Node_Str"",ex);
    setStop(true);
  }
catch (  ServiceException ex) {
    LOGGER.error(""String_Node_Str"",ex);
  }
}","private void capturePreview(){
  try {
    final CameraFile cf=cameraGphoto.capturePreview();
    if (cf != null) {
      String imagePath=tempStorage + ""String_Node_Str"" + +camera.getId()+ ""String_Node_Str"";
      cf.save(new File(imagePath).getAbsolutePath());
      imageProcessor.processPreview(imagePath);
    }
    cf.close();
  }
 catch (  CameraException ex) {
    LOGGER.error(""String_Node_Str"",ex);
    setStop(true);
  }
catch (  ServiceException ex) {
    LOGGER.error(""String_Node_Str"",ex);
  }
}"
77877,"@Override public void run(){
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
      }
      captureImage();
      if (serieShot) {
        for (int i=0; i < 5; i++) {
          captureImage();
        }
      }
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      try {
        cameraGphoto.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      LOGGER.debug(""String_Node_Str"",camera);
    }
  }
}","@Override public void run(){
  createTempDir();
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
      }
      captureImage();
      if (serieShot) {
        for (int i=0; i < 5; i++) {
          captureImage();
        }
      }
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      try {
        cameraGphoto.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      LOGGER.debug(""String_Node_Str"",camera);
    }
  }
}"
77878,"public void init(Stage stage) throws ServiceException {
  this.stage=stage;
  scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
  scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  tile.setMinWidth(screenWidth);
  tile.setMinHeight(screenHeight - 60);
  tile.setPadding(new Insets(20,20,20,20));
  tile.setHgap(20);
  tile.setVgap(20);
  if (shootingService.searchIsActive().getActive()) {
    LOGGER.debug(""String_Node_Str"" + shootingService.searchIsActive().getId());
    listOfImages=imageService.getAllImages(shootingService.searchIsActive().getId());
  }
 else {
    return;
  }
  for (  final at.ac.tuwien.sepm.ws16.qse01.entities.Image img : listOfImages) {
    prepareHBox(img);
  }
}","public void init(Stage stage) throws ServiceException {
  this.stage=stage;
  scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
  scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  tile.setMinWidth(screenWidth);
  tile.setMinHeight(screenHeight - 60);
  tile.setPadding(new Insets(20,20,20,20));
  tile.setHgap(20);
  tile.setVgap(20);
  if (shootingService.searchIsActive().getActive()) {
    LOGGER.debug(""String_Node_Str"" + shootingService.searchIsActive().getId());
    listOfImages=imageService.getAllImages(shootingService.searchIsActive().getId());
  }
 else {
    listOfImages=new ArrayList<>();
    return;
  }
  for (  final at.ac.tuwien.sepm.ws16.qse01.entities.Image img : listOfImages) {
    prepareHBox(img);
  }
}"
77879,"@Override public void run(){
  while (true) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
      }
      captureImage();
      if (serieShot) {
        for (int i=0; i < 5; i++) {
          captureImage();
        }
      }
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      LOGGER.debug(""String_Node_Str"",camera);
      return;
    }
  }
}","@Override public void run(){
  while (!shouldStop) {
    if (takeImage) {
      if (countdown != 0) {
        shotFrameController.showCountdown(countdown);
      }
      captureImage();
      if (serieShot) {
        for (int i=0; i < 5; i++) {
          captureImage();
        }
      }
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      try {
        cameraGphoto.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      LOGGER.debug(""String_Node_Str"",camera);
    }
  }
}"
77880,"private void captureImage(){
  Image image;
  try {
    final CameraFile cf=cameraGphoto.captureImage();
    if (cf != null) {
      Shooting activeShooting=shootingService.searchIsActive();
      if (activeShooting != null) {
        int imageID=imageService.getNextImageID();
        String directoryPath=activeShooting.getStorageDir() + ""String_Node_Str"";
        DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
        Date date=new Date();
        String imagePath=directoryPath + ""String_Node_Str"" + camera.getId()+ ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
        image=new Image(imageID,imagePath,activeShooting.getId(),new Date());
        image=imageService.create(image);
        cf.save(new File(imagePath).getAbsolutePath());
        imageProcessor.processShot(image);
        LOGGER.debug(imageService.getLastImgPath(activeShooting.getId()));
      }
 else {
        LOGGER.error(""String_Node_Str"");
      }
      cf.close();
    }
  }
 catch (  CameraException ex) {
    LOGGER.debug(""String_Node_Str"",ex);
    setStop(true);
  }
catch (  ServiceException ex) {
    LOGGER.debug(""String_Node_Str"",ex);
  }
}","private void captureImage(){
  Image image;
  try {
    final CameraFile cf=cameraGphoto.captureImage();
    if (cf != null) {
      Shooting activeShooting=shootingService.searchIsActive();
      if (activeShooting != null) {
        int imageID=imageService.getNextImageID();
        String directoryPath=activeShooting.getStorageDir() + ""String_Node_Str"";
        DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
        Date date=new Date();
        String imagePath=directoryPath + ""String_Node_Str"" + camera.getId()+ ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
        image=new Image(imageID,imagePath,activeShooting.getId(),new Date());
        image=imageService.create(image);
        cf.save(new File(imagePath).getAbsolutePath());
        imageProcessor.processShot(image);
        LOGGER.debug(imageService.getLastImgPath(activeShooting.getId()));
      }
 else {
        LOGGER.error(""String_Node_Str"");
      }
      cf.close();
    }
  }
 catch (  CameraException ex) {
    LOGGER.error(""String_Node_Str"",ex);
    setStop(true);
  }
catch (  ServiceException ex) {
    LOGGER.error(""String_Node_Str"",ex);
  }
}"
77881,"/** 
 * when pressed a new shooting starts to successfully start a new shooting a storage path gets selected and a profile must be selected
 */
@FXML public void onStartShootingPressed(){
  LOGGER.info(""String_Node_Str"" + path);
  if (profileChoiceBox.getValue() != null) {
    try {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (path == null) {
        path=shootingService.createPath();
      }
      Shooting shouting=new Shooting(0,profile.getId(),path,bgPath,true);
      path=""String_Node_Str"";
      shootingService.addShooting(shouting);
      boolean test=true;
      try {
        boolean camerasFitPosition=imageProcessingManager.checkImageProcessing(profile);
        if (!camerasFitPosition) {
          imageProcessingManager.initImageProcessing();
          test=false;
        }
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
 finally {
        if (test) {
          showInformationDialog(""String_Node_Str"");
        }
        windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
      }
    }
 catch (    ServiceException serviceExeption) {
      LOGGER.error(""String_Node_Str"",serviceExeption);
      showInformationDialog(""String_Node_Str"");
    }
  }
 else {
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * when pressed a new shooting starts to successfully start a new shooting a storage path gets selected and a profile must be selected
 */
@FXML public void onStartShootingPressed(){
  LOGGER.info(""String_Node_Str"" + path);
  if (profileChoiceBox.getValue() != null) {
    try {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (path == null) {
        path=shootingService.createPath();
      }
      Shooting shouting=new Shooting(0,profile.getId(),path,bgPath,true);
      path=""String_Node_Str"";
      shootingService.addShooting(shouting);
      boolean test=true;
      try {
        boolean camerasFitPosition=imageProcessingManager.checkImageProcessing(profile);
        if (camerasFitPosition) {
          imageProcessingManager.initImageProcessing();
          test=false;
        }
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"",e);
      }
 finally {
        if (test) {
          showInformationDialog(""String_Node_Str"");
        }
        windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
      }
    }
 catch (    ServiceException serviceExeption) {
      LOGGER.error(""String_Node_Str"",serviceExeption);
      showInformationDialog(""String_Node_Str"");
    }
  }
 else {
    showInformationDialog(""String_Node_Str"");
  }
}"
77882,"@Override public void initImageProcessing() throws ServiceException {
  LOGGER.debug(""String_Node_Str"");
  List<Camera> cameraList=cameraHandler.getCameras();
  Map<Position,ShotFrameController> positionShotFrameMap=initShotFrameManager(cameraList);
  if (positionShotFrameMap == null)   return;
  cameraThreadList=cameraHandler.createThreads();
  initCameraThreads(positionShotFrameMap);
  for (  CameraThread cameraThread : cameraThreadList) {
    cameraThread.start();
  }
  LOGGER.debug(""String_Node_Str"");
}","@Override public void initImageProcessing() throws ServiceException {
  LOGGER.debug(""String_Node_Str"");
  List<Camera> cameraList=cameraHandler.getCameras();
  Map<Position,ShotFrameController> positionShotFrameMap=initShotFrameManager(cameraList);
  if (positionShotFrameMap == null)   return;
  cameraThreadList=cameraHandler.createThreads();
  initCameraThreads(positionShotFrameMap);
  for (  CameraThread cameraThread : cameraThreadList) {
    cameraThread.start();
  }
  remoteService.start();
  LOGGER.info(""String_Node_Str"");
}"
77883,"public ImageProcessingManagerImpl(CameraHandler cameraHandler,ShotFrameManager shotFrameManager,RefreshManager refreshManager,ShootingService shootingService,ProfileService profileService,ImageService imageService,OpenCVLoader openCVLoader){
  this.cameraHandler=cameraHandler;
  this.shotFrameManager=shotFrameManager;
  this.refreshManager=refreshManager;
  this.shootingService=shootingService;
  this.profileService=profileService;
  this.imageService=imageService;
  this.openCVLoader=openCVLoader;
}","public ImageProcessingManagerImpl(CameraHandler cameraHandler,ShotFrameManager shotFrameManager,RefreshManager refreshManager,ShootingService shootingService,ProfileService profileService,ImageService imageService,RemoteService remoteService,OpenCVLoader openCVLoader){
  this.cameraHandler=cameraHandler;
  this.shotFrameManager=shotFrameManager;
  this.refreshManager=refreshManager;
  this.shootingService=shootingService;
  this.profileService=profileService;
  this.imageService=imageService;
  this.remoteService=remoteService;
  this.openCVLoader=openCVLoader;
}"
77884,"@Override public void stopImageProcessing(){
  if (cameraThreadList == null) {
    LOGGER.debug(""String_Node_Str"");
  }
 else {
    for (    CameraThread cameraThread : cameraThreadList) {
      cameraThread.setStop(true);
    }
  }
}","@Override public void stopImageProcessing(){
  if (cameraThreadList == null) {
    LOGGER.debug(""String_Node_Str"");
  }
 else {
    for (    CameraThread cameraThread : cameraThreadList) {
      cameraThread.setStop(true);
    }
  }
  if (!remoteService.isRunning()) {
    LOGGER.debug(""String_Node_Str"");
  }
 else {
    remoteService.stop();
  }
}"
77885,"@Override public BufferedImage applyGreenscreen(BufferedImage srcImg,Background background) throws ServiceException {
  LOGGER.debug(""String_Node_Str"");
  if (srcImg == null || background == null) {
    LOGGER.error(""String_Node_Str"",srcImg,background);
    throw new ServiceException(""String_Node_Str"");
  }
  Mat srcImgMat;
  try {
    srcImgMat=imageHandler.convertBufferedImgToMat(srcImg);
  }
 catch (  ImageHandlingException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServiceException(""String_Node_Str"");
  }
  Mat backgroundMat=getCachedBackground(srcImg,background);
  Mat yccFGMat=new Mat(srcImgMat.rows(),srcImgMat.cols(),CvType.CV_8UC3);
  Imgproc.cvtColor(srcImgMat,yccFGMat,Imgproc.COLOR_RGB2YCrCb);
  double[] rgbKeyColor=srcImgMat.get(0,800);
  double[] yccKeyColor=yccFGMat.get(0,800);
  double[] tolerances=calcTolerances(yccFGMat,yccKeyColor);
  LOGGER.debug(""String_Node_Str"",tolerances);
  Mat resultMat=new Mat(srcImgMat.rows(),srcImgMat.cols(),CvType.CV_8UC3);
  for (int x=0; x < srcImgMat.rows(); x++) {
    for (int y=0; y < srcImgMat.cols(); y++) {
      double[] yccFGColor=yccFGMat.get(x,y);
      double[] rgbFGColor=srcImgMat.get(x,y);
      double mask=calculateMask(yccFGColor,yccKeyColor,tolerances);
      mask=1 - mask;
      double[] rgbBGColor=backgroundMat.get(x,y);
      double[] rgbNewColor=new double[3];
      double[] greenScreenColor=(int)mask == 1 ? rgbFGColor : rgbKeyColor;
      for (int i=0; i < 3; i++) {
        rgbNewColor[i]=max(rgbFGColor[i] - mask * greenScreenColor[i],0) + mask * rgbBGColor[i];
      }
      resultMat.put(x,y,rgbNewColor);
    }
  }
  BufferedImage newImage;
  try {
    newImage=imageHandler.convertMatToBufferedImg(resultMat);
  }
 catch (  ImageHandlingException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServiceException(""String_Node_Str"");
  }
  return newImage;
}","@Override public BufferedImage applyGreenscreen(BufferedImage srcImg,Background background) throws ServiceException {
  LOGGER.debug(""String_Node_Str"");
  if (srcImg == null || background == null) {
    LOGGER.error(""String_Node_Str"",srcImg,background);
    throw new ServiceException(""String_Node_Str"");
  }
  Mat srcImgMat;
  try {
    srcImgMat=imageHandler.convertBufferedImgToMat(srcImg);
  }
 catch (  ImageHandlingException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServiceException(""String_Node_Str"");
  }
  Mat backgroundMat=getCachedBackground(srcImg,background);
  Mat yccFGMat=new Mat(srcImgMat.rows(),srcImgMat.cols(),CvType.CV_8UC3);
  Imgproc.cvtColor(srcImgMat,yccFGMat,Imgproc.COLOR_RGB2YCrCb);
  double[] rgbKeyColor=srcImgMat.get(0,0);
  double[] yccKeyColor=yccFGMat.get(0,0);
  double[] tolerances=calcTolerances(yccFGMat,yccKeyColor);
  LOGGER.debug(""String_Node_Str"",tolerances);
  Mat resultMat=new Mat(srcImgMat.rows(),srcImgMat.cols(),CvType.CV_8UC3);
  for (int x=0; x < srcImgMat.rows(); x++) {
    for (int y=0; y < srcImgMat.cols(); y++) {
      double[] yccFGColor=yccFGMat.get(x,y);
      double[] rgbFGColor=srcImgMat.get(x,y);
      double mask=calculateMask(yccFGColor,yccKeyColor,tolerances);
      mask=1 - mask;
      double[] rgbBGColor=backgroundMat.get(x,y);
      double[] rgbNewColor=new double[3];
      double[] greenScreenColor=(int)mask == 1 ? rgbFGColor : rgbKeyColor;
      for (int i=0; i < 3; i++) {
        rgbNewColor[i]=max(rgbFGColor[i] - mask * greenScreenColor[i],0) + mask * rgbBGColor[i];
      }
      resultMat.put(x,y,rgbNewColor);
    }
  }
  BufferedImage newImage;
  try {
    newImage=imageHandler.convertMatToBufferedImg(resultMat);
  }
 catch (  ImageHandlingException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new ServiceException(""String_Node_Str"");
  }
  return newImage;
}"
77886,"@Override public Camera read(int id) throws PersistenceException {
  LOGGER.debug(""String_Node_Str"" + id);
  ResultSet rs;
  String sqlString;
  PreparedStatement stmt=null;
  sqlString=""String_Node_Str"";
  try {
    stmt=this.con.prepareStatement(sqlString);
    stmt.setInt(1,id);
    rs=stmt.executeQuery();
    if (rs.next()) {
      Camera camera=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      LOGGER.debug(""String_Node_Str"" + camera);
      return camera;
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      return null;
    }
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(""String_Node_Str"" + e);
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new PersistenceException(""String_Node_Str"" + e);
    }
  }
}","@Override public Camera read(int id) throws PersistenceException {
  LOGGER.debug(""String_Node_Str"" + id);
  ResultSet rs;
  String sqlString;
  PreparedStatement stmt=null;
  sqlString=""String_Node_Str"";
  try {
    stmt=this.con.prepareStatement(sqlString);
    stmt.setInt(1,id);
    rs=stmt.executeQuery();
    if (rs.next()) {
      Camera camera=new Camera(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
      LOGGER.debug(""String_Node_Str"" + camera);
      return camera;
    }
 else {
      LOGGER.error(""String_Node_Str"");
      return null;
    }
  }
 catch (  SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(""String_Node_Str"" + e);
  }
 finally {
    try {
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new PersistenceException(""String_Node_Str"" + e);
    }
  }
}"
77887,"@Override public void delete(int cameraID) throws PersistenceException {
  String sql=""String_Node_Str"";
  PreparedStatement stmt=null;
  try {
    stmt=con.prepareStatement(sql);
    stmt.setInt(1,cameraID);
    stmt.execute();
  }
 catch (  SQLException e) {
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.debug(""String_Node_Str"" + e.getMessage());
      }
    }
  }
}","@Override public void delete(int cameraID) throws PersistenceException {
  String sql=""String_Node_Str"";
  PreparedStatement stmt=null;
  try {
    stmt=con.prepareStatement(sql);
    stmt.setInt(1,cameraID);
    stmt.execute();
  }
 catch (  SQLException e) {
    throw new PersistenceException(e.getMessage());
  }
catch (  NullPointerException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new IllegalArgumentException();
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"" + e);
      }
    }
  }
}"
77888,"/** 
 * sets the initial font size depending on the screen Width and high using percentages of screen differences to the initial screen size (1280x800)
 * @param screenWidth the width bound of the current monitor
 * @param screenHeight the height bound of the current monitor
 */
public void setFontSize(double screenWidth,double screenHeight){
  int initialsize=16;
  if (screenWidth >= 1920.0 && screenHeight >= 1080.0) {
    fontSize=(int)(initialsize * 1.29);
  }
 else   if (screenWidth >= 1366.0 && screenHeight >= 768.0) {
    fontSize=(int)(initialsize * 1.07);
  }
 else   if (screenWidth >= 1280.0 && screenHeight >= 800.0) {
    fontSize=initialsize;
  }
}","/** 
 * sets the initial font size depending on the screen Width and high using percentages of screen differences to the initial screen size (1280x800)
 * @param screenWidth the width bound of the current monitor
 * @param screenHeight the height bound of the current monitor
 */
public void setFontSize(double screenWidth,double screenHeight){
  int initialsize=16;
  if (screenWidth >= 2160.0 && screenHeight >= 1440) {
    fontSize=(int)(initialsize * 1.37);
  }
 else   if (screenWidth >= 1920.0 && screenHeight >= 1080.0) {
    fontSize=(int)(initialsize * 1.29);
  }
 else   if (screenWidth >= 1366.0 && screenHeight >= 768.0) {
    fontSize=(int)(initialsize * 1.07);
  }
 else   if (screenWidth >= 1280.0 && screenHeight >= 800.0) {
    fontSize=initialsize;
  }
}"
77889,"private void onCheckPressed(){
  cropping=false;
  cropRectangle.setVisible(false);
  resizeHandleNW.setVisible(false);
  resizeHandleSE.setVisible(false);
  int x=(int)cropRectangle.localToScene(cropRectangle.getBoundsInLocal()).getMinX() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinX();
  int y=(int)cropRectangle.localToScene(cropRectangle.getBoundsInLocal()).getMinY() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinY();
  int maxX=(int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMaxX() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinX();
  int maxY=(int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMaxY() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinY();
  try {
    imageService.crop(imageList.get(currentIndex),x,x + (int)cropRectangle.getWidth(),y,y + (int)cropRectangle.getHeight(),maxX,maxY);
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
}","private void onCheckPressed(){
  cropping=false;
  cropRectangle.setVisible(false);
  resizeHandleNW.setVisible(false);
  resizeHandleSE.setVisible(false);
  saveFilteredButton.setVisible(false);
  int x=(int)cropRectangle.localToScene(cropRectangle.getBoundsInLocal()).getMinX() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinX();
  int y=(int)cropRectangle.localToScene(cropRectangle.getBoundsInLocal()).getMinY() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinY();
  int maxX=(int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMaxX() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinX();
  int maxY=(int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMaxY() - (int)ivfullscreenImage.localToScene(ivfullscreenImage.getBoundsInLocal()).getMinY();
  try {
    at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.crop(imageList.get(currentIndex),x,x + (int)cropRectangle.getWidth(),y,y + (int)cropRectangle.getHeight(),maxX,maxY);
    refreshManager.notifyMiniatureFrameOfAdd(newImage);
    if ((currentIndex + 1) >= imageList.size())     imageList.add(newImage);
 else {
      imageList.add(currentIndex + 1,newImage);
    }
    currentIndex=currentIndex + 1;
    button4.setVisible(true);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77890,"public void onCropPressed(){
  cropping=true;
  saveFilteredButton.setVisible(true);
  LOGGER.debug(""String_Node_Str"");
  if (cropRectangle == null) {
    cropRectangle=createDraggableRectangle(wholePane.getWidth() - 250,wholePane.getHeight() - 250,500,500);
    forCropping.getChildren().add(cropRectangle);
  }
 else {
    cropRectangle.setVisible(true);
    resizeHandleNW.setVisible(true);
    resizeHandleSE.setVisible(true);
  }
}","public void onCropPressed(){
  cropping=true;
  saveFilteredButton.setVisible(true);
  LOGGER.debug(""String_Node_Str"");
  if (cropRectangle == null) {
    cropRectangle=createDraggableRectangle(forCropping.getWidth() - 400,forCropping.getHeight() - 400,100,100);
    forCropping.getChildren().add(cropRectangle);
  }
 else {
    cropRectangle.setVisible(true);
    resizeHandleNW.setVisible(true);
    resizeHandleSE.setVisible(true);
  }
}"
77891,"private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setOpacity(0.1);
  resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}","private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setOpacity(0.1);
  rect.setVisible(true);
  resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  resizeHandleNW.setVisible(true);
  resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  resizeHandleSE.setVisible(true);
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}"
77892,"/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @throws IOException
 */
public void start(Stage mainStage) throws IOException {
  this.mainStage=mainStage;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + css);
  int sice=(int)(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csssett);
  parentsett.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsett.getStylesheets().add(csssett.toExternalForm());
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL cssmin=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssmin);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(cssmin.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,CustomerFrameController> costumerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CustomerFrameController.class);
  Parent parentcos=(Parent)costumerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,CameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CameraFilterController.class);
  Parent parentkaf=(Parent)kameraFilterFXMLWrapper.getLoadedObject();
  URL csskaf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csskaf);
  parentkaf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentkaf.getStylesheets().add(csskaf.toExternalForm());
  this.kamerafilterScene=new Scene(parentkaf,screenWidth,screenHeight);
  cameraFilterController=kameraFilterFXMLWrapper.getController();
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}","/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @throws IOException
 */
public void start(Stage mainStage) throws IOException {
  this.mainStage=mainStage;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + css);
  int sice=(int)(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csssett);
  parentsett.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsett.getStylesheets().add(csssett.toExternalForm());
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL cssmin=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssmin);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(cssmin.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,CustomerFrameController> costumerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CustomerFrameController.class);
  Parent parentcos=(Parent)costumerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,CameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CameraFilterController.class);
  Parent parentkaf=(Parent)kameraFilterFXMLWrapper.getLoadedObject();
  URL csskaf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csskaf);
  parentkaf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentkaf.getStylesheets().add(csskaf.toExternalForm());
  this.kamerafilterScene=new Scene(parentkaf,screenWidth,screenHeight);
  cameraFilterController=kameraFilterFXMLWrapper.getController();
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
  this.mainStage.show();
}"
77893,"@Override public TableCell<Background,Boolean> call(TableColumn<Background,Boolean> p){
  return new BackgroundButtonCell(backgroundList,bservice,windowManager.getStage());
}","@Override public TableCell<Background,Boolean> call(TableColumn<Background,Boolean> p){
  return new BackgroundButtonCell(imageHandler,backgroundList,bservice,windowManager.getStage());
}"
77894,"@FXML private void backgroundUpload(){
  fileChooser.setTitle(""String_Node_Str"");
  fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
  fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""),new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  File file=fileChooser.showOpenDialog(new Stage());
  if (file != null) {
    txBackgroundPath.setText(file.getAbsolutePath());
  }
}","@FXML private void backgroundUpload(){
  fileChooser.setTitle(""String_Node_Str"");
  fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
  fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""),new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  File file=fileChooser.showOpenDialog(new Stage());
  if (file != null) {
    txBackgroundPath.setText(file.getAbsolutePath());
    txBackgroundUpload.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    if (!txBackgroundName.getText().isEmpty() && selectedCategory != null && selectedProfile != null && txBackgroundPath.getText().compareTo(""String_Node_Str"") != 0) {
      txBackgroundAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txBackgroundAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
}"
77895,"@FXML private void saveBackground(){
  LOGGER.error(""String_Node_Str"");
  String name=txBackgroundName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0 || txBackgroundPath.getText().compareTo(""String_Node_Str"") == 0) {
    showError(""String_Node_Str"");
  }
 else {
    Background p=new Background(name,txBackgroundPath.getText(),selectedCategory);
    try {
      LOGGER.debug(""String_Node_Str"");
      bservice.add(p);
      backgroundList.add(p);
      txBackgroundPath.setText(""String_Node_Str"");
      txBackgroundName.clear();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","@FXML private void saveBackground(){
  LOGGER.error(""String_Node_Str"");
  String name=txBackgroundName.getText();
  if (selectedCategory == null || name.trim().compareTo(""String_Node_Str"") == 0 || txBackgroundPath.getText().compareTo(""String_Node_Str"") == 0) {
    showError(""String_Node_Str"");
  }
 else {
    Background p=new Background(name,txBackgroundPath.getText(),selectedCategory);
    try {
      LOGGER.debug(""String_Node_Str"");
      bservice.add(p);
      backgroundList.add(p);
      txBackgroundPath.setText(""String_Node_Str"");
      txBackgroundName.clear();
      txBackgroundUpload.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}"
77896,"public void refreshTableBackground(List<Background> backgroundList,Profile selProfile,Background.Category selCategory){
  LOGGER.debug(""String_Node_Str"" + backgroundList.size());
  selectedProfile=selProfile;
  selectedCategory=selCategory;
  this.backgroundList.clear();
  this.backgroundList.addAll(backgroundList);
  tableBackground.setItems(this.backgroundList);
}","public void refreshTableBackground(List<Background> backgroundList,Profile selProfile,Background.Category selCategory){
  LOGGER.debug(""String_Node_Str"" + backgroundList.size());
  selectedProfile=selProfile;
  selectedCategory=selCategory;
  this.backgroundList.clear();
  this.backgroundList.addAll(backgroundList);
  tableBackground.setItems(this.backgroundList);
  if (!txBackgroundName.getText().isEmpty() && selectedCategory != null && selectedProfile != null && txBackgroundPath.getText().compareTo(""String_Node_Str"") != 0) {
    txBackgroundAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
 else   txBackgroundAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
}"
77897,"@FXML private void initialize(){
  tableBackground.setEditable(true);
  colBackgroundID.setCellValueFactory(new PropertyValueFactory<Background,Integer>(""String_Node_Str""));
  colBackgroundName.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
  colBackgroundName.setCellFactory(TextFieldTableCell.forTableColumn());
  colBackgroundName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background,String> t){
      try {
        Background p=((Background)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.edit(p);
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colBackgroundPath.setStyle(""String_Node_Str"");
  colBackgroundPath.setSortable(false);
  colBackgroundPath.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
  colBackgroundPath.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new BackgroundImgCell(backgroundList,bservice,imageHandler,windowManager.getStage());
    }
  }
);
  colBackgroundAction.setStyle(""String_Node_Str"");
  colBackgroundAction.setSortable(false);
  colBackgroundAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colBackgroundAction.setCellFactory(new Callback<TableColumn<Background,Boolean>,TableCell<Background,Boolean>>(){
    @Override public TableCell<Background,Boolean> call(    TableColumn<Background,Boolean> p){
      return new BackgroundButtonCell(backgroundList,bservice,windowManager.getStage());
    }
  }
);
}","@FXML private void initialize(){
  tableBackground.setEditable(true);
  colBackgroundID.setCellValueFactory(new PropertyValueFactory<Background,Integer>(""String_Node_Str""));
  colBackgroundName.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
  colBackgroundName.setCellFactory(TextFieldTableCell.forTableColumn());
  colBackgroundName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background,String> t){
      try {
        Background p=((Background)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.edit(p);
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colBackgroundPath.setStyle(""String_Node_Str"");
  colBackgroundPath.setSortable(false);
  colBackgroundPath.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
  colBackgroundPath.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new BackgroundImgCell(backgroundList,bservice,imageHandler,windowManager.getStage());
    }
  }
);
  colBackgroundAction.setStyle(""String_Node_Str"");
  colBackgroundAction.setSortable(false);
  colBackgroundAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colBackgroundAction.setCellFactory(new Callback<TableColumn<Background,Boolean>,TableCell<Background,Boolean>>(){
    @Override public TableCell<Background,Boolean> call(    TableColumn<Background,Boolean> p){
      return new BackgroundButtonCell(imageHandler,backgroundList,bservice,windowManager.getStage());
    }
  }
);
  txBackgroundUpload.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  txBackgroundUpload.setPrefHeight(50);
  txBackgroundUpload.setPrefWidth(50);
  txBackgroundAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  txBackgroundAdd.setPrefHeight(50);
  txBackgroundAdd.setPrefWidth(50);
  txBackgroundName.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedCategory != null && selectedProfile != null && txBackgroundPath.getText().compareTo(""String_Node_Str"") != 0) {
      txBackgroundAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txBackgroundAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
);
}"
77898,"@Override public TableCell<Background.Category,Boolean> call(TableColumn<Background.Category,Boolean> p){
  return new CategoryButtonCell(categoryListOfProfile,selectedProfile,categoryList,bservice,windowManager.getStage());
}","@Override public TableCell<Background.Category,Boolean> call(TableColumn<Background.Category,Boolean> p){
  return new CategoryButtonCell(imageHandler,categoryListOfProfile,selectedProfile,categoryList,bservice,windowManager.getStage());
}"
77899,"@FXML private void saveCategory(){
  LOGGER.error(""String_Node_Str"");
  String name=txCategoryName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0) {
    showError(""String_Node_Str"");
  }
 else {
    Background.Category p=new Background.Category(name);
    try {
      LOGGER.debug(""String_Node_Str"");
      p=bservice.addCategory(p);
      categoryList.add(p);
      if (txCategoryActivated.isSelected()) {
        bservice.createPairProfileCategory(selectedProfile.getId(),p.getId());
        categoryListOfProfile.add(p);
      }
      refreshCategoryComboBox(categoryList);
      txCategoryName.clear();
      txCategoryActivated.setSelected(false);
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","@FXML private void saveCategory(){
  LOGGER.error(""String_Node_Str"");
  String name=txCategoryName.getText();
  if (selectedProfile == null || name.trim().compareTo(""String_Node_Str"") == 0) {
    showError(""String_Node_Str"");
  }
 else {
    Background.Category p=new Background.Category(name);
    try {
      LOGGER.debug(""String_Node_Str"");
      p=bservice.addCategory(p);
      categoryList.add(p);
      if (txCategoryActivated.isSelected()) {
        bservice.createPairProfileCategory(selectedProfile.getId(),p.getId());
        categoryListOfProfile.add(p);
      }
      refreshCategoryComboBox(categoryList);
      txCategoryName.clear();
      txCategoryActivated.setSelected(false);
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}"
77900,"@FXML private void initialize(){
  tableCategory.setEditable(true);
  colCategoryID.setCellValueFactory(new PropertyValueFactory<Background.Category,Integer>(""String_Node_Str""));
  colCategoryName.setCellValueFactory(new PropertyValueFactory<Background.Category,String>(""String_Node_Str""));
  colCategoryName.setCellFactory(TextFieldTableCell.forTableColumn());
  colCategoryName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background.Category,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background.Category,String> t){
      try {
        Background.Category p=((Background.Category)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.editCategory(p);
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTableCategory(pservice.getAllCategoryOfProfile(selectedProfile.getId()),bservice.getAllCategories());
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
  colCategoryActivated.setStyle(""String_Node_Str"");
  colCategoryActivated.setSortable(false);
  colCategoryActivated.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryActivated.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryCheckboxCell(categoryListOfProfile,bservice,categoryList,selectedProfile);
    }
  }
);
  colCategoryAction.setStyle(""String_Node_Str"");
  colCategoryAction.setSortable(false);
  colCategoryAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryAction.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryButtonCell(categoryListOfProfile,selectedProfile,categoryList,bservice,windowManager.getStage());
    }
  }
);
  tableCategory.getSelectionModel().selectedItemProperty().addListener((  ObservableValue obs,  Object oldSelection,  Object newSelection) -> {
    if (newSelection != null) {
      selectedCategory=(Background.Category)newSelection;
      LOGGER.debug(""String_Node_Str"" + selectedCategory.getId());
      try {
        greenscreenBackgroundController.refreshTableBackground(bservice.getAllWithCategory(selectedCategory.getId()),selectedProfile,selectedCategory);
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"" + selectedCategory.getId(),e);
      }
    }
  }
);
}","@FXML private void initialize(){
  tableCategory.setEditable(true);
  colCategoryID.setCellValueFactory(new PropertyValueFactory<Background.Category,Integer>(""String_Node_Str""));
  colCategoryName.setCellValueFactory(new PropertyValueFactory<Background.Category,String>(""String_Node_Str""));
  colCategoryName.setCellFactory(TextFieldTableCell.forTableColumn());
  colCategoryName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background.Category,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background.Category,String> t){
      try {
        Background.Category p=((Background.Category)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.editCategory(p);
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTableCategory(pservice.getAllCategoryOfProfile(selectedProfile.getId()),bservice.getAllCategories());
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
  colCategoryActivated.setStyle(""String_Node_Str"");
  colCategoryActivated.setSortable(false);
  colCategoryActivated.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryActivated.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryCheckboxCell(categoryListOfProfile,bservice,categoryList,selectedProfile);
    }
  }
);
  colCategoryAction.setStyle(""String_Node_Str"");
  colCategoryAction.setSortable(false);
  colCategoryAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryAction.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryButtonCell(imageHandler,categoryListOfProfile,selectedProfile,categoryList,bservice,windowManager.getStage());
    }
  }
);
  tableCategory.getSelectionModel().selectedItemProperty().addListener((  ObservableValue obs,  Object oldSelection,  Object newSelection) -> {
    if (newSelection != null) {
      selectedCategory=(Background.Category)newSelection;
      LOGGER.debug(""String_Node_Str"" + selectedCategory.getId());
      try {
        greenscreenBackgroundController.refreshTableBackground(bservice.getAllWithCategory(selectedCategory.getId()),selectedProfile,selectedCategory);
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"" + selectedCategory.getId(),e);
      }
    }
  }
);
  txCategoryAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  txCategoryAdd.setPrefHeight(50);
  txCategoryAdd.setPrefWidth(50);
  txCategoryName.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null) {
      txCategoryAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txCategoryAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
);
}"
77901,"@Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
  return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId(),previewLogo);
}","@Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
  return new LogoButtonCell(imageHandler,logoList,pservice,windowManager.getStage(),selectedProfile.getId(),previewLogo,txLogoName);
}"
77902,"@FXML private void logoUpload(){
  fileChooser.setTitle(""String_Node_Str"");
  fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
  fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""),new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  File file=fileChooser.showOpenDialog(new Stage());
  if (file != null) {
    txLogoLogo.setText(file.getAbsolutePath());
    txLogoLogo.setId(""String_Node_Str"");
  }
}","@FXML private void logoUpload(){
  fileChooser.setTitle(""String_Node_Str"");
  fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
  fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""),new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  File file=fileChooser.showOpenDialog(new Stage());
  if (file != null) {
    txLogoLogo.setText(file.getAbsolutePath());
    txLogoLogo.setId(""String_Node_Str"");
    txLogoUpload.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    if (selectedProfile == null || txLogoName.getText().isEmpty() || txLogoLogo.getText().compareTo(""String_Node_Str"") == 0 || txLogoX.getText().isEmpty() || txLogoY.getText().isEmpty() || (txLogoBreite.getText().isEmpty() && txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
}"
77903,"@FXML private void saveLogo(){
  LOGGER.error(""String_Node_Str"");
  String name=txLogoName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0 || txLogoLogo.getText().compareTo(""String_Node_Str"") == 0) {
    LOGGER.error(""String_Node_Str"");
    showError(""String_Node_Str"");
  }
 else {
    try {
      Logo newLogo=new Logo(name,txLogoLogo.getText());
      double width=0.0;
      double height=0.0;
      if (txLogoHoehe.getText().isEmpty() && !txLogoBreite.getText().isEmpty()) {
        width=Double.valueOf(txLogoBreite.getText());
        height=logoService.calculateRelativeHeight(width,newLogo,Double.valueOf(txPreviewWidth.getText()),Double.valueOf(txPreviewHeight.getText()));
      }
 else       if (!txLogoHoehe.getText().isEmpty() && txLogoBreite.getText().isEmpty()) {
        height=Double.valueOf(txLogoHoehe.getText());
        width=logoService.calculateRelativeWidth(height,newLogo,Double.valueOf(txPreviewWidth.getText()),Double.valueOf(txPreviewHeight.getText()));
      }
 else       if (txLogoHoehe.getText().isEmpty() && txLogoBreite.getText().isEmpty()) {
        throw new NumberFormatException();
      }
 else {
        width=Double.valueOf(txLogoBreite.getText());
        height=Double.valueOf(txLogoHoehe.getText());
      }
      RelativeRectangle newPosition=new RelativeRectangle(Double.valueOf(txLogoX.getText()),Double.valueOf(txLogoY.getText()),width,height);
      LOGGER.info(""String_Node_Str"");
      if (txLogoLogo.getId().isEmpty())       newLogo=pservice.addLogo(newLogo);
 else       newLogo=pservice.getLogo(Integer.valueOf(txLogoLogo.getId()));
      Profile.PairLogoRelativeRectangle p=pservice.addPairLogoRelativeRectangle(selectedProfile.getId(),newLogo.getId(),newPosition);
      logoList.add(p);
      txLogoName.getEntries().add(newLogo.getLabel() + ""String_Node_Str"" + newLogo.getId());
      ImageView imgView=new ImageView(new Image(""String_Node_Str"" + newLogo.getPath(),30,30,true,true));
      imgView.setId(newLogo.getPath());
      txLogoName.getImgViews().put(newLogo.getLabel().toLowerCase() + ""String_Node_Str"" + newLogo.getId(),imgView);
      txLogoName.clear();
      txLogoBreite.clear();
      txLogoHoehe.clear();
      txLogoX.clear();
      txLogoY.clear();
      txLogoLogo.setText(""String_Node_Str"");
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
catch (    NumberFormatException e) {
      showError(""String_Node_Str"");
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
  }
}","@FXML private void saveLogo(){
  LOGGER.error(""String_Node_Str"");
  String name=txLogoName.getText();
  if (selectedProfile == null || name.trim().compareTo(""String_Node_Str"") == 0 || txLogoLogo.getText().compareTo(""String_Node_Str"") == 0 || txLogoX.getText().isEmpty() || txLogoY.getText().isEmpty() || (txLogoBreite.getText().isEmpty() && txLogoHoehe.getText().isEmpty())) {
    LOGGER.error(""String_Node_Str"");
    showError(""String_Node_Str"");
  }
 else {
    try {
      Logo newLogo=new Logo(name,txLogoLogo.getText());
      double width=0.0;
      double height=0.0;
      if (txLogoHoehe.getText().isEmpty() && !txLogoBreite.getText().isEmpty()) {
        width=Double.valueOf(txLogoBreite.getText());
        height=logoService.calculateRelativeHeight(width,newLogo,Double.valueOf(txPreviewWidth.getText()),Double.valueOf(txPreviewHeight.getText()));
      }
 else       if (!txLogoHoehe.getText().isEmpty() && txLogoBreite.getText().isEmpty()) {
        height=Double.valueOf(txLogoHoehe.getText());
        width=logoService.calculateRelativeWidth(height,newLogo,Double.valueOf(txPreviewWidth.getText()),Double.valueOf(txPreviewHeight.getText()));
      }
 else       if (txLogoHoehe.getText().isEmpty() && txLogoBreite.getText().isEmpty()) {
        throw new NumberFormatException();
      }
 else {
        width=Double.valueOf(txLogoBreite.getText());
        height=Double.valueOf(txLogoHoehe.getText());
      }
      RelativeRectangle newPosition=new RelativeRectangle(Double.valueOf(txLogoX.getText()),Double.valueOf(txLogoY.getText()),width,height);
      LOGGER.info(""String_Node_Str"");
      if (txLogoLogo.getId().isEmpty())       newLogo=pservice.addLogo(newLogo);
 else       newLogo=pservice.getLogo(Integer.valueOf(txLogoLogo.getId()));
      Profile.PairLogoRelativeRectangle p=pservice.addPairLogoRelativeRectangle(selectedProfile.getId(),newLogo.getId(),newPosition);
      logoList.add(p);
      txLogoName.getEntries().add(newLogo.getLabel().toLowerCase() + ""String_Node_Str"" + newLogo.getId());
      ImageView imgView=new ImageView(new Image(""String_Node_Str"" + newLogo.getPath(),30,30,true,true));
      imgView.setId(newLogo.getPath());
      txLogoName.getImgViews().put(newLogo.getLabel().toLowerCase() + ""String_Node_Str"" + newLogo.getId(),imgView);
      txLogoName.clear();
      txLogoBreite.clear();
      txLogoHoehe.clear();
      txLogoX.clear();
      txLogoY.clear();
      txLogoLogo.setText(""String_Node_Str"");
      txLogoUpload.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
catch (    NumberFormatException e) {
      showError(""String_Node_Str"");
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
  }
}"
77904,"@FXML private void initialize(){
  tableLogo.setEditable(true);
  colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
  colLogoID.setCellFactory(tc -> {
    TableCell<Profile.PairLogoRelativeRectangle,Integer> cell=new TableCell<Profile.PairLogoRelativeRectangle,Integer>(){
      @Override protected void updateItem(      Integer item,      boolean empty){
        super.updateItem(item,empty);
        setText(empty ? null : String.valueOf(item));
      }
    }
;
    cell.setOnMouseClicked(e -> {
      if (!cell.isEmpty() && selectedLogo != null) {
        if (selectedLogo.getLogo().getId() == cell.getItem()) {
          LOGGER.info(""String_Node_Str"" + selectedLogo.getLogo().getId());
          tableLogo.getSelectionModel().clearSelection();
          selectedLogo=null;
          try {
            previewLogo.setImage(SwingFXUtils.toFXImage(logoService.getPreviewForMultipleLogos(logoList,Integer.valueOf(txPreviewWidth.getText()),Integer.valueOf(txPreviewHeight.getText())),null));
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    return cell;
  }
);
  colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String newLabel=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       newLabel=p.getValue().getLogo().getLabel();
      return new ReadOnlyObjectWrapper(newLabel);
    }
  }
);
  colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
  colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          if (p.getLogo() == null) {
            Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
            p.setLogo(newLogo);
          }
 else           p.getLogo().setLabel(t.getNewValue());
          LOGGER.info(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
          pservice.editLogo(p.getLogo());
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
    }
  }
);
  colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setX(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
    }
  }
);
  colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setY(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getWidth());
    }
  }
);
  colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setWidth(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
    }
  }
);
  colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setHeight(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoLogo.setStyle(""String_Node_Str"");
  colLogoLogo.setSortable(false);
  colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String logoPath=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       logoPath=p.getValue().getLogo().getPath();
      return new ReadOnlyObjectWrapper(logoPath);
    }
  }
);
  colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new LogoImgCell(logoList,pservice,imageHandler,windowManager.getStage());
    }
  }
);
  colLogoAktion.setStyle(""String_Node_Str"");
  colLogoAktion.setSortable(false);
  colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
    @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(    TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId(),previewLogo);
    }
  }
);
  tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
    if (newSelection != null) {
      Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
      LOGGER.info(""String_Node_Str"" + selectedLogo.getId());
      this.selectedLogo=selectedLogo;
      if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
        try {
          int width=Integer.parseInt(txPreviewWidth.getText());
          int height=Integer.parseInt(txPreviewHeight.getText());
          Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
 else       LOGGER.info(""String_Node_Str"");
    }
  }
);
  txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,0);
  }
);
  txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,1);
  }
);
}","@FXML private void initialize(){
  tableLogo.setEditable(true);
  colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
  colLogoID.setCellFactory(tc -> {
    TableCell<Profile.PairLogoRelativeRectangle,Integer> cell=new TableCell<Profile.PairLogoRelativeRectangle,Integer>(){
      @Override protected void updateItem(      Integer item,      boolean empty){
        super.updateItem(item,empty);
        setText(empty ? null : String.valueOf(item));
      }
    }
;
    cell.setOnMouseClicked(e -> {
      if (!cell.isEmpty() && selectedLogo != null) {
        if (selectedLogo.getLogo().getId() == cell.getItem()) {
          LOGGER.info(""String_Node_Str"" + selectedLogo.getLogo().getId());
          tableLogo.getSelectionModel().clearSelection();
          selectedLogo=null;
          try {
            previewLogo.setImage(SwingFXUtils.toFXImage(logoService.getPreviewForMultipleLogos(logoList,Integer.valueOf(txPreviewWidth.getText()),Integer.valueOf(txPreviewHeight.getText())),null));
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    return cell;
  }
);
  colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String newLabel=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       newLabel=p.getValue().getLogo().getLabel();
      return new ReadOnlyObjectWrapper(newLabel);
    }
  }
);
  colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
  colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          if (p.getLogo() == null) {
            Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
            p.setLogo(newLogo);
          }
 else {
            if (pservice.getNumberOfUsing(p.getLogo().getId()) == 1) {
              txLogoName.getEntries().remove(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().remove(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              p.getLogo().setLabel(t.getNewValue());
              ImageView imgView=new ImageView(new Image(""String_Node_Str"" + p.getLogo().getPath(),30,30,true,true));
              imgView.setId((p.getLogo().getPath()));
              txLogoName.getEntries().add(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().put(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId(),imgView);
            }
 else {
              int index=logoList.indexOf(p);
              logoList.remove(p);
              p.getLogo().setId(Integer.MIN_VALUE);
              p.getLogo().setLabel(t.getNewValue());
              Logo newLogo=pservice.addLogo(p.getLogo());
              p.setLogo(newLogo);
              logoList.add(index,p);
              ImageView imgView=new ImageView(new Image(""String_Node_Str"" + p.getLogo().getPath(),30,30,true,true));
              imgView.setId((p.getLogo().getPath()));
              txLogoName.getEntries().add(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId());
              txLogoName.getImgViews().put(p.getLogo().getLabel().toLowerCase() + ""String_Node_Str"" + p.getLogo().getId(),imgView);
              pservice.editPairLogoRelativeRectangle(p);
            }
          }
          LOGGER.info(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
          pservice.editLogo(p.getLogo());
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
    }
  }
);
  colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setX(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
    }
  }
);
  colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setY(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getWidth());
    }
  }
);
  colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setWidth(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
    }
  }
);
  colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setHeight(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoLogo.setStyle(""String_Node_Str"");
  colLogoLogo.setSortable(false);
  colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String logoPath=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       logoPath=p.getValue().getLogo().getPath();
      return new ReadOnlyObjectWrapper(logoPath);
    }
  }
);
  colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new LogoImgCell(logoList,pservice,imageHandler,windowManager.getStage(),txLogoName);
    }
  }
);
  colLogoAktion.setStyle(""String_Node_Str"");
  colLogoAktion.setSortable(false);
  colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
    @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(    TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new LogoButtonCell(imageHandler,logoList,pservice,windowManager.getStage(),selectedProfile.getId(),previewLogo,txLogoName);
    }
  }
);
  tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
    if (newSelection != null) {
      Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
      LOGGER.info(""String_Node_Str"" + selectedLogo.getId());
      this.selectedLogo=selectedLogo;
      if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
        try {
          int width=Integer.parseInt(txPreviewWidth.getText());
          int height=Integer.parseInt(txPreviewHeight.getText());
          Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
 else       LOGGER.info(""String_Node_Str"");
    }
  }
);
  txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,0);
  }
);
  txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,1);
  }
);
  txLogoUpload.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  txLogoUpload.setPrefWidth(50);
  txLogoUpload.setPrefHeight(50);
  txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  txLogoAdd.setPrefWidth(50);
  txLogoAdd.setPrefHeight(50);
  txLogoName.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
);
  txLogoX.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoName.getText().isEmpty() && !txLogoY.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
);
  txLogoY.textProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue.isEmpty() && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoName.getText().isEmpty() && (!txLogoBreite.getText().isEmpty() || !txLogoHoehe.getText().isEmpty())) {
      txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
);
  txLogoBreite.textProperty().addListener((observable,oldValue,newValue) -> {
    if ((!newValue.isEmpty() || !txLogoHoehe.getText().isEmpty()) && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && !txLogoName.getText().isEmpty()) {
      txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
);
  txLogoHoehe.textProperty().addListener((observable,oldValue,newValue) -> {
    if ((!newValue.isEmpty() || !txLogoBreite.getText().isEmpty()) && selectedProfile != null && txLogoLogo.getText().compareTo(""String_Node_Str"") != 0 && !txLogoX.getText().isEmpty() && !txLogoY.getText().isEmpty() && !txLogoName.getText().isEmpty()) {
      txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
    }
 else     txLogoAdd.setBackground(imageHandler.getBackground(""String_Node_Str"",50,50));
  }
);
}"
77905,"protected void refreshLogoAutoComplete(Profile selected) throws ServiceException {
  selectedProfile=selected;
  txLogoName.getEntries().addAll(logo2StringArray(pservice.getAllLogosOfProfile(selectedProfile)));
  txLogoName.getImgViews().putAll(logo2imgViews(pservice.getAllLogosOfProfile(selectedProfile)));
  txLogoName.setTxLogoPath(txLogoLogo);
}","protected void refreshLogoAutoComplete(Profile selected) throws ServiceException {
  selectedProfile=selected;
  txLogoName.getEntries().addAll(logo2StringArray(pservice.getAllLogosOfProfile(selectedProfile)));
  txLogoName.getImgViews().putAll(logo2imgViews(pservice.getAllLogosOfProfile(selectedProfile)));
  txLogoName.setTxLogoPath(txLogoLogo);
  txLogoName.setTxLogoUpload(txLogoUpload);
  txLogoName.setImageHandler(imageHandler);
}"
77906,"@Autowired public LoginFrameController(ShootingService shootingService,AdminUserService adminUserService,WindowManager windowManager,LoginRedirectorModel loginRedirectorModel) throws ServiceException {
  this.adminUserService=adminUserService;
  this.windowManager=windowManager;
  this.loginRedirectorModel=loginRedirectorModel;
  this.shootingService=shootingService;
}","@Autowired public LoginFrameController(ShootingService shootingService,AdminUserService adminUserService,WindowManager windowManager,LoginRedirectorModel loginRedirectorModel) throws ServiceException {
  this.adminUserService=adminUserService;
  this.windowManager=windowManager;
  this.loginRedirectorModel=loginRedirectorModel;
  this.shootingService=shootingService;
  firstLogin=true;
}"
77907,"/** 
 * Lets an AdminUserService instance check if the values given in the adminname- and password-TextField correspond to a saved admin-user.
 */
@FXML public void checkLogin(){
  String adminName=adminField.getText();
  String password=passwordField.getText();
  try {
    boolean correctLogin=adminUserService.checkLogin(adminName,password);
    if (correctLogin) {
      Shooting activeShooting=shootingService.searchIsActive();
      if (activeShooting.getActive()) {
        windowManager.showScene(WindowManager.SHOW_RECOVERYSCENE);
      }
 else {
        windowManager.showScene(loginRedirectorModel.getNextScene());
      }
      resetValues();
    }
 else {
      wrongCredentialsLabel.setVisible(true);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","/** 
 * Lets an AdminUserService instance check if the values given in the adminname- and password-TextField correspond to a saved admin-user.
 */
@FXML public void checkLogin(){
  String adminName=adminField.getText();
  String password=passwordField.getText();
  try {
    boolean correctLogin=adminUserService.checkLogin(adminName,password);
    if (correctLogin) {
      Shooting activeShooting=shootingService.searchIsActive();
      if (activeShooting.getActive() && firstLogin) {
        firstLogin=false;
        windowManager.showScene(WindowManager.SHOW_RECOVERYSCENE);
      }
 else {
        windowManager.showScene(loginRedirectorModel.getNextScene());
      }
      resetValues();
    }
 else {
      wrongCredentialsLabel.setVisible(true);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77908,"/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @throws IOException
 */
public void start(Stage mainStage) throws IOException {
  this.mainStage=mainStage;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + css);
  int sice=(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssett);
  parentsett.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsett.getStylesheets().add(csssett.toExternalForm());
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL cssmin=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssmin);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(cssmin.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,CustomerFrameController> costumerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CustomerFrameController.class);
  Parent parentcos=(Parent)costumerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  customerFrameController=costumerWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CameraFilterController.class);
  Parent parentkaf=(Parent)kameraFilterFXMLWrapper.getLoadedObject();
  URL csskaf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csskaf);
  parentkaf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentkaf.getStylesheets().add(csskaf.toExternalForm());
  this.kamerafilterScene=new Scene(parentkaf,screenWidth,screenHeight);
  cameraFilterController=kameraFilterFXMLWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,RecoveryController> recoveryControllerFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",RecoveryController.class);
  Parent parentrec=(Parent)recoveryControllerFXMLWrapper.getLoadedObject();
  URL cssrec=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssrec);
  parentrec.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentrec.getStylesheets().add(cssrec.toExternalForm());
  this.recoveryScene=new Scene(parentrec,screenWidth,screenHeight);
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}","/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @throws IOException
 */
public void start(Stage mainStage) throws IOException {
  this.mainStage=mainStage;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + css);
  int sice=(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csssett);
  parentsett.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsett.getStylesheets().add(csssett.toExternalForm());
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL cssmin=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssmin);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(cssmin.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,CustomerFrameController> costumerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CustomerFrameController.class);
  Parent parentcos=(Parent)costumerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  customerFrameController=costumerWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,CameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CameraFilterController.class);
  Parent parentkaf=(Parent)kameraFilterFXMLWrapper.getLoadedObject();
  URL csskaf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + csskaf);
  parentkaf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentkaf.getStylesheets().add(csskaf.toExternalForm());
  this.kamerafilterScene=new Scene(parentkaf,screenWidth,screenHeight);
  cameraFilterController=kameraFilterFXMLWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,RecoveryController> recoveryControllerFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",RecoveryController.class);
  Parent parentrec=(Parent)recoveryControllerFXMLWrapper.getLoadedObject();
  URL cssrec=this.getClass().getResource(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + cssrec);
  parentrec.setStyle(""String_Node_Str"" + fontSize * 1.5 + ""String_Node_Str"");
  parentrec.getStylesheets().add(cssrec.toExternalForm());
  this.recoveryScene=new Scene(parentrec,screenWidth,screenHeight);
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}"
77909,"@FXML private void initialize(){
  try {
    buttonList=new ArrayList<>();
    leftbutton.setVisible(false);
    if (shootingservice.searchIsActive().getActive()) {
      profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
    }
    if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
      if (profile.getId() != shootingservice.searchIsActive().getProfileid()) {
        profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
      }
    }
    if (!profile.isGreenscreenEnabled() && !profile.isFilerEnabled()) {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  NullPointerException n) {
    LOGGER.error(""String_Node_Str"",n);
  }
}","@FXML private void initialize(){
  try {
    buttonList=new ArrayList<>();
    leftbutton.setVisible(false);
    if (shootingservice.searchIsActive().getActive()) {
      profile=profileservice.get(shootingservice.searchIsActive().getProfileid());
    }
    if (profile != null && !profile.isGreenscreenEnabled() && !profile.isFilerEnabled()) {
      rightbutton.setVisible(false);
    }
  }
 catch (  ServiceException e) {
    showInformationDialog(""String_Node_Str"");
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77910,"/** 
 * information dialog to show user error messages
 * @param info String that gives the usere an error message
 */
public void showInformationDialog(String info){
  try {
    Alert information=new Alert(Alert.AlertType.INFORMATION,info);
    information.setHeaderText(""String_Node_Str"");
    information.initOwner(windowManager.getStage());
    information.show();
  }
 catch (  NullPointerException nu) {
    LOGGER.error(""String_Node_Str"",nu);
  }
}","/** 
 * information dialog to show user error messages
 * @param info String that gives the usere an error message
 */
public void showInformationDialog(String info){
  Alert information=new Alert(Alert.AlertType.INFORMATION,info);
  information.setHeaderText(""String_Node_Str"");
  information.showAndWait();
}"
77911,"/** 
 * in case of a breakdown the Recovery Dialog will tell the user about an still active shooting and gives them the option to continue to ether close or reloade this shooting in case of reload the user gets directly to the costumer interface caches ServiceException eventualy caused by endShooting
 */
public void showRecoveryDialog(){
  Alert alert=new Alert(Alert.AlertType.CONFIRMATION,""String_Node_Str"");
  alert.setHeaderText(""String_Node_Str"");
  Optional<ButtonType> result=alert.showAndWait();
  if (result.isPresent() && result.get() == ButtonType.OK) {
    windowManager.notifyActiveShootingAvailable();
  }
 else {
    try {
      shootingService.endShooting();
      LOGGER.info(""String_Node_Str"");
      showInformationDialog(""String_Node_Str"");
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
      showInformationDialog(""String_Node_Str"");
    }
  }
}","/** 
 * in case of a breakdown the Recovery Dialog will tell the user about an still active shooting and gives them the option to continue to ether close or reloade this shooting in case of reload the user gets directly to the costumer interface caches ServiceException eventualy caused by endShooting
 */
public void showRecoveryDialog(){
  Alert alert=new Alert(Alert.AlertType.CONFIRMATION,""String_Node_Str"");
  alert.setHeaderText(""String_Node_Str"");
  Optional<ButtonType> result=alert.showAndWait();
  if (result.isPresent() && result.get() == ButtonType.OK) {
    windowManager.notifyActiveShootingAvailable();
  }
 else {
    try {
      shootingService.endShooting();
      LOGGER.info(""String_Node_Str"");
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
      showInformationDialog(""String_Node_Str"");
    }
  }
}"
77912,"private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setVisible(true);
  rect.setFill(Color.BLACK);
  rect.setOpacity(0.1);
  resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  rect.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      double newMaxX=newX + rect.getWidth();
      if (newX >= handleRadius && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setX(newX);
      }
      double newY=rect.getY() + deltaY;
      double newMaxY=newY + rect.getHeight();
      if (newY >= handleRadius && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setY(newY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}","private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setOpacity(0.1);
  Circle resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  Circle resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}"
77913,"/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.error(""String_Node_Str"",e);
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String libPath=this.getClass().getResource(lib).getPath();
      System.load(libPath);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,libPath);
    }
  }
}","/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.error(""String_Node_Str"",e);
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String libPath=this.getClass().getResource(lib).getPath();
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,libPath);
    }
  }
}"
77914,"/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.error(""String_Node_Str"",e);
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String libPath=this.getClass().getResource(lib).getPath();
      System.load(libPath);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,libPath);
    }
  }
}","/** 
 * This method loads the OpenCVLibrary from the Ressource Lib folder
 * @throws LibraryLoadingException if the operating System is not supported
 */
public void loadLibrary() throws LibraryLoadingException {
  if (!isLoaded) {
    try {
      System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",Core.NATIVE_LIBRARY_NAME);
    }
 catch (    UnsatisfiedLinkError e) {
      LOGGER.error(""String_Node_Str"",e);
      String lib;
      String operatingSystem=System.getProperty(""String_Node_Str"").toLowerCase();
      if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else       if (operatingSystem.contains(""String_Node_Str"")) {
        lib=""String_Node_Str"";
      }
 else {
        LOGGER.error(""String_Node_Str"",operatingSystem);
        throw new LibraryLoadingException(""String_Node_Str"");
      }
      String libPath=this.getClass().getResource(lib).getPath();
      System.load(libPath);
      isLoaded=true;
      LOGGER.info(""String_Node_Str"",operatingSystem,libPath);
    }
  }
}"
77915,"@Override public List<Camera> getCameras() throws CameraException {
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  return cameraList;
}","@PostConstruct public List<Camera> getCameras() throws CameraException {
  try {
    cameraService.setAllCamerasInactive();
  }
 catch (  ServiceException e) {
    LOGGER.debug(""String_Node_Str"",e);
  }
  cameraGphotoList=new ArrayList<>();
  cameraModelList=new ArrayList<>();
  cameraPortList=new ArrayList<>();
  cameraList=new ArrayList<>();
  int count=0;
  final CameraList cl=new CameraList();
  try {
    LOGGER.debug(""String_Node_Str"" + cl);
    count=cl.getCount();
    Camera camera;
    for (int i=0; i < count; i++) {
      cameraGphotoList.add(new CameraGphoto());
      Pointer pInfo=cl.getPortInfo(i);
      cameraPortList.add(cl.getPort(i));
      cameraModelList.add(cl.getModel(i));
      LOGGER.debug(""String_Node_Str"" + pInfo.toString());
      cameraGphotoList.get(i).setPortInfo(cl.getPortPath(cl.getPort(i,true)));
      cameraGphotoList.get(i).initialize();
      cameraGphotoList.get(i).ref();
      try {
        camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
        camera=cameraService.cameraExists(camera);
        if (camera == null) {
          camera=new Camera(-1,""String_Node_Str"" + i,cameraPortList.get(i),cameraModelList.get(i),""String_Node_Str"" + i);
          cameraService.createCamera(camera);
        }
        cameraService.setCameraActive(camera.getId());
        cameraList.add(camera);
      }
 catch (      ServiceException ex) {
        LOGGER.error(""String_Node_Str"",ex);
        throw new CameraException(ex.getMessage(),-1);
      }
    }
  }
  finally {
    CameraUtils.closeQuietly(cl);
  }
  return cameraList;
}"
77916,"public void run(){
  LOGGER.info(""String_Node_Str"",camera);
  int i=1;
  boolean imageSaved=false;
  while (i == 1) {
    Image image=null;
    try {
      final CameraFile cf=cameraGphoto.waitForImage();
      if (cf != null) {
        Shooting activeShooting=shootingService.searchIsActive();
        if (activeShooting != null) {
          int imageID=imageService.getNextImageID();
          String directoryPath=activeShooting.getStorageDir() + ""String_Node_Str"";
          DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
          Date date=new Date();
          String imagePath=directoryPath + ""String_Node_Str"" + camera.getId()+ ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
          image=new Image(imageID,imagePath,activeShooting.getId(),new Date());
          image=imageService.create(image);
          cf.save(new File(imagePath).getAbsolutePath());
          imageSaved=true;
          LOGGER.debug(imageService.getLastImgPath(activeShooting.getId()));
        }
 else {
          LOGGER.error(""String_Node_Str"");
        }
        cf.close();
      }
    }
 catch (    CameraException ex) {
      LOGGER.debug(""String_Node_Str"" + ex);
      return;
    }
catch (    ServiceException ex) {
      LOGGER.debug(""String_Node_Str"",ex);
    }
    if (shouldStop) {
      LOGGER.debug(""String_Node_Str"",camera);
      return;
    }
    if (imageSaved) {
      try {
        imageProcessor.processShot(image);
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
      imageSaved=false;
    }
  }
  CameraUtils.closeQuietly(cameraGphoto);
}","@Override public void run(){
  while (true) {
    if (takeImage) {
      captureImage();
      takeImage=false;
    }
 else {
      capturePreview();
    }
    if (shouldStop) {
      LOGGER.debug(""String_Node_Str"",camera);
      return;
    }
  }
}"
77917,"@Autowired public FullScreenImageController(WindowManager windowManager,ShootingService shootingService,FilterService filterService,ImageService imageService,ImagePrinter imagePrinter,ImageHandler imageHandler,RefreshManager refreshManager) throws ServiceException {
  this.filterService=filterService;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.windowManager=windowManager;
  this.imagePrinter=imagePrinter;
  this.refreshManager=refreshManager;
  this.imageHandler=imageHandler;
  this.activeShooting=shootingService.searchIsActive();
}","@Autowired public FullScreenImageController(WindowManager windowManager,ShootingService shootingService,FilterService filterService,ImageService imageService,ImagePrinter imagePrinter,ImageHandler imageHandler,RefreshManager refreshManager,ThreadCommunicator threadCommunicator) throws ServiceException {
  this.filterService=filterService;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.windowManager=windowManager;
  this.imagePrinter=imagePrinter;
  this.refreshManager=refreshManager;
  this.imageHandler=imageHandler;
  this.activeShooting=shootingService.searchIsActive();
}"
77918,"public void onCropPressed(){
  cropping=true;
  saveFilteredButton.setVisible(true);
  LOGGER.info(""String_Node_Str"");
  if (cropRectangle == null) {
    cropRectangle=createDraggableRectangle(200,200,500,500);
    wholePane.getChildren().add(cropRectangle);
  }
 else {
    cropRectangle.setVisible(true);
    resizeHandleNW.setVisible(true);
    resizeHandleSE.setVisible(true);
  }
}","public void onCropPressed(){
  cropping=true;
  saveFilteredButton.setVisible(true);
  LOGGER.info(""String_Node_Str"");
  if (cropRectangle == null) {
    cropRectangle=createDraggableRectangle(wholePane.getWidth() - 250,wholePane.getHeight() - 250,500,500);
    wholePane.getChildren().add(cropRectangle);
  }
 else {
    cropRectangle.setVisible(true);
    resizeHandleNW.setVisible(true);
    resizeHandleSE.setVisible(true);
  }
}"
77919,"private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setOpacity(0.1);
  Circle resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  Circle resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}","private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setOpacity(0.1);
  resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}"
77920,"public void init(Stage stage) throws ServiceException {
  this.stage=stage;
  scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
  scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  System.out.println(screenWidth + ""String_Node_Str"" + screenHeight);
  tile.setMinWidth(screenWidth);
  tile.setMinHeight(screenHeight - 65);
  tile.setPadding(new Insets(20,20,20,20));
  tile.setHgap(20);
  tile.setVgap(20);
  if (shootingService.searchIsActive().getActive()) {
    LOGGER.info(""String_Node_Str"" + shootingService.searchIsActive().getId());
    listOfImages=imageService.getAllImages(shootingService.searchIsActive().getId());
  }
 else {
    return;
  }
  for (  final at.ac.tuwien.sepm.ws16.qse01.entities.Image img : listOfImages) {
    prepareHBox(img);
  }
}","public void init(Stage stage) throws ServiceException {
  this.stage=stage;
  scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
  scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  System.out.println(screenWidth + ""String_Node_Str"" + screenHeight);
  tile.setMinWidth(screenWidth);
  tile.setMinHeight(screenHeight - 60);
  tile.setPadding(new Insets(20,20,20,20));
  tile.setHgap(20);
  tile.setVgap(20);
  if (shootingService.searchIsActive().getActive()) {
    LOGGER.info(""String_Node_Str"" + shootingService.searchIsActive().getId());
    listOfImages=imageService.getAllImages(shootingService.searchIsActive().getId());
  }
 else {
    return;
  }
  for (  final at.ac.tuwien.sepm.ws16.qse01.entities.Image img : listOfImages) {
    prepareHBox(img);
  }
}"
77921,"public void initShotFrame(int cameraID){
  this.frameID=cameraID;
}","public void initShotFrame(int cameraID){
  this.frameID=cameraID;
  showCountdown(10);
}"
77922,"@FXML private void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice,imageHandler,windowManager.getStage());
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedProfile.getName() + ""String_Node_Str""+ selectedProfile.getId());
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          refreshLogoAutoComplete(selectedProfile);
          refreshTableCategory(bservice.getAllCategories());
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","@FXML private void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice,imageHandler,windowManager.getStage());
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedProfile.getName() + ""String_Node_Str""+ selectedProfile.getId());
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          refreshLogoAutoComplete(selectedProfile);
          refreshTableCategory(bservice.getAllCategories());
          refreshCategoryComboBox(bservice.getAllCategories());
        }
 catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77923,"@Override public TableCell<Background.Category,Boolean> call(TableColumn<Background.Category,Boolean> p){
  return new CategoryButtonCell(categoryList,bservice,windowManager.getStage());
}","@Override public TableCell<Background.Category,Boolean> call(TableColumn<Background.Category,Boolean> p){
  return new CategoryButtonCell(categoryListOfProfile,selectedProfile,categoryList,bservice,windowManager.getStage());
}"
77924,"@FXML private void initialize(){
  tableCategory.setEditable(true);
  colCategoryID.setCellValueFactory(new PropertyValueFactory<Background.Category,Integer>(""String_Node_Str""));
  colCategoryName.setCellValueFactory(new PropertyValueFactory<Background.Category,String>(""String_Node_Str""));
  colCategoryName.setCellFactory(TextFieldTableCell.forTableColumn());
  colCategoryName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background.Category,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background.Category,String> t){
      try {
        Background.Category p=((Background.Category)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.editCategory(p);
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTableCategory(pservice.getAllCategoryOfProfile(selectedProfile.getId()),bservice.getAllCategories());
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
  colCategoryActivated.setStyle(""String_Node_Str"");
  colCategoryActivated.setSortable(false);
  colCategoryActivated.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryActivated.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryCheckboxCell(categoryListOfProfile,bservice,categoryList,selectedProfile);
    }
  }
);
  colCategoryAction.setStyle(""String_Node_Str"");
  colCategoryAction.setSortable(false);
  colCategoryAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryAction.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryButtonCell(categoryList,bservice,windowManager.getStage());
    }
  }
);
  tableCategory.getSelectionModel().selectedItemProperty().addListener((  ObservableValue obs,  Object oldSelection,  Object newSelection) -> {
    if (newSelection != null) {
      selectedCategory=(Background.Category)newSelection;
      LOGGER.info(""String_Node_Str"" + selectedCategory.getId());
      try {
        greenscreenBackgroundController.refreshTableBackground(bservice.getAllWithCategory(selectedCategory.getId()),selectedProfile,selectedCategory);
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"" + selectedCategory.getId(),e);
      }
    }
  }
);
}","@FXML private void initialize(){
  tableCategory.setEditable(true);
  colCategoryID.setCellValueFactory(new PropertyValueFactory<Background.Category,Integer>(""String_Node_Str""));
  colCategoryName.setCellValueFactory(new PropertyValueFactory<Background.Category,String>(""String_Node_Str""));
  colCategoryName.setCellFactory(TextFieldTableCell.forTableColumn());
  colCategoryName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background.Category,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background.Category,String> t){
      try {
        Background.Category p=((Background.Category)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.editCategory(p);
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTableCategory(pservice.getAllCategoryOfProfile(selectedProfile.getId()),bservice.getAllCategories());
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
  colCategoryActivated.setStyle(""String_Node_Str"");
  colCategoryActivated.setSortable(false);
  colCategoryActivated.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryActivated.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryCheckboxCell(categoryListOfProfile,bservice,categoryList,selectedProfile);
    }
  }
);
  colCategoryAction.setStyle(""String_Node_Str"");
  colCategoryAction.setSortable(false);
  colCategoryAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryAction.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryButtonCell(categoryListOfProfile,selectedProfile,categoryList,bservice,windowManager.getStage());
    }
  }
);
  tableCategory.getSelectionModel().selectedItemProperty().addListener((  ObservableValue obs,  Object oldSelection,  Object newSelection) -> {
    if (newSelection != null) {
      selectedCategory=(Background.Category)newSelection;
      LOGGER.info(""String_Node_Str"" + selectedCategory.getId());
      try {
        greenscreenBackgroundController.refreshTableBackground(bservice.getAllWithCategory(selectedCategory.getId()),selectedProfile,selectedCategory);
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"" + selectedCategory.getId(),e);
      }
    }
  }
);
}"
77925,"@FXML private void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice);
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedProfile.getName() + ""String_Node_Str""+ selectedProfile.getId());
        System.out.println(""String_Node_Str"");
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          refreshLogoAutoComplete(selectedProfile);
          refreshTableCategory(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}","@FXML private void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice);
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedProfile.getName() + ""String_Node_Str""+ selectedProfile.getId());
        System.out.println(""String_Node_Str"");
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          refreshLogoAutoComplete(selectedProfile);
          refreshTableCategory(bservice.getAllCategories());
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}"
77926,"@Override public TableCell<Profile.PairCameraPosition,Boolean> call(TableColumn<Profile.PairCameraPosition,Boolean> p){
  System.out.println(""String_Node_Str"");
  return new CamPosComboBoxCell(kamPosList,pservice,posList);
}","@Override public TableCell<Profile.PairCameraPosition,Boolean> call(TableColumn<Profile.PairCameraPosition,Boolean> p){
  return new CamPosComboBoxCell(kamPosList,pservice,posList);
}"
77927,"@FXML private void initialize(){
  tableKamPos.setEditable(true);
  colKamPosKamera.setCellValueFactory(new PropertyValueFactory<Profile.PairCameraPosition,String>(""String_Node_Str""));
  colKamPosPosition.setStyle(""String_Node_Str"");
  colKamPosPosition.setSortable(false);
  colKamPosPosition.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colKamPosPosition.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
    @Override public TableCell<Profile.PairCameraPosition,Boolean> call(    TableColumn<Profile.PairCameraPosition,Boolean> p){
      System.out.println(""String_Node_Str"");
      return new CamPosComboBoxCell(kamPosList,pservice,posList);
    }
  }
);
}","@FXML private void initialize(){
  tableKamPos.setEditable(true);
  colKamPosKamera.setCellValueFactory(new PropertyValueFactory<Profile.PairCameraPosition,String>(""String_Node_Str""));
  colKamPosPosition.setStyle(""String_Node_Str"");
  colKamPosPosition.setSortable(false);
  colKamPosPosition.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colKamPosPosition.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
    @Override public TableCell<Profile.PairCameraPosition,Boolean> call(    TableColumn<Profile.PairCameraPosition,Boolean> p){
      return new CamPosComboBoxCell(kamPosList,pservice,posList);
    }
  }
);
}"
77928,"@FXML private void saveCategory(){
  LOGGER.error(""String_Node_Str"");
  String name=txCategoryName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0) {
    showError(""String_Node_Str"");
  }
 else {
    Background.Category p=new Background.Category(name);
    try {
      LOGGER.info(""String_Node_Str"");
      bservice.addCategory(p);
      categoryList.add(p);
      refreshCategoryComboBox(categoryList);
      txCategoryName.clear();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
  }
}","@FXML private void saveCategory(){
  LOGGER.error(""String_Node_Str"");
  String name=txCategoryName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0) {
    showError(""String_Node_Str"");
  }
 else {
    Background.Category p=new Background.Category(name);
    try {
      LOGGER.info(""String_Node_Str"");
      bservice.addCategory(p);
      categoryList.add(p);
      refreshCategoryComboBox(categoryList);
      txCategoryName.clear();
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}"
77929,"@FXML private void logoUpload(){
  fileChooser.setTitle(""String_Node_Str"");
  fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
  fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""),new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  File file=fileChooser.showOpenDialog(new Stage());
  if (file != null) {
    txLogoLogo.setText(file.getAbsolutePath());
  }
}","@FXML private void logoUpload(){
  fileChooser.setTitle(""String_Node_Str"");
  fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
  fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""),new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  File file=fileChooser.showOpenDialog(new Stage());
  if (file != null) {
    txLogoLogo.setText(file.getAbsolutePath());
    txLogoLogo.setId(""String_Node_Str"");
  }
}"
77930,"@Override public void handle(TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
  try {
    Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (!t.getNewValue().isNaN()) {
      p.getRelativeRectangle().setHeight(t.getNewValue());
      pservice.editPairLogoRelativeRectangle(p);
    }
 else {
      refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
    }
  }
 catch (  ServiceException e) {
    try {
      refreshTableProfiles(pservice.getAllProfiles());
    }
 catch (    ServiceException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
}","@Override public void handle(TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
  try {
    Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (!t.getNewValue().isNaN()) {
      p.getRelativeRectangle().setHeight(t.getNewValue());
      pservice.editPairLogoRelativeRectangle(p);
      changePreviewSize(txPreviewHeight.getText(),0);
    }
 else {
      refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
    }
  }
 catch (  ServiceException e) {
    try {
      refreshTableProfiles(pservice.getAllProfiles());
    }
 catch (    ServiceException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
}"
77931,"@FXML private void saveLogo(){
  LOGGER.error(""String_Node_Str"");
  String name=txLogoName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0 || txLogoLogo.getText().compareTo(""String_Node_Str"") == 0) {
    LOGGER.error(""String_Node_Str"");
    showError(""String_Node_Str"");
  }
 else {
    try {
      Logo newLogo=new Logo(name,txLogoLogo.getText());
      double width=0.0;
      double height=0.0;
      if (txLogoHoehe.getText().isEmpty() && !txLogoBreite.getText().isEmpty()) {
        width=Double.valueOf(txLogoBreite.getText());
        height=(((width * 100) / Double.valueOf(txPreviewWidth.getText())) * Double.valueOf(txPreviewHeight.getText())) / 100;
      }
 else       if (!txLogoHoehe.getText().isEmpty() && txLogoBreite.getText().isEmpty()) {
        height=Double.valueOf(txLogoHoehe.getText());
        width=(((height * 100) / Double.valueOf(txPreviewHeight.getText())) * Double.valueOf(txPreviewWidth.getText())) / 100;
      }
 else       if (txLogoHoehe.getText().isEmpty() && txLogoBreite.getText().isEmpty()) {
        showError(""String_Node_Str"");
        throw new NumberFormatException();
      }
 else {
        width=Double.valueOf(txLogoBreite.getText());
        height=Double.valueOf(txLogoHoehe.getText());
      }
      RelativeRectangle newPosition=new RelativeRectangle(Double.valueOf(txLogoX.getText()),Double.valueOf(txLogoY.getText()),width,height);
      LOGGER.info(""String_Node_Str"");
      newLogo=pservice.addLogo(newLogo);
      Profile.PairLogoRelativeRectangle p=pservice.addPairLogoRelativeRectangle(selectedProfile.getId(),newLogo.getId(),newPosition);
      logoList.add(p);
      txLogoName.getEntries().add(newLogo.getLabel() + ""String_Node_Str"" + newLogo.getId());
      ImageView imgView=new ImageView(new Image(""String_Node_Str"" + newLogo.getPath(),30,30,true,true));
      imgView.setId(newLogo.getPath());
      txLogoName.getImgViews().put(newLogo.getLabel().toLowerCase() + ""String_Node_Str"" + newLogo.getId(),imgView);
      txLogoName.clear();
      txLogoBreite.clear();
      txLogoHoehe.clear();
      txLogoX.clear();
      txLogoY.clear();
      txLogoLogo.setText(""String_Node_Str"");
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
catch (    NumberFormatException e) {
      showError(""String_Node_Str"");
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
  }
}","@FXML private void saveLogo(){
  LOGGER.error(""String_Node_Str"");
  String name=txLogoName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0 || txLogoLogo.getText().compareTo(""String_Node_Str"") == 0) {
    LOGGER.error(""String_Node_Str"");
    showError(""String_Node_Str"");
  }
 else {
    try {
      Logo newLogo=new Logo(name,txLogoLogo.getText());
      double width=0.0;
      double height=0.0;
      if (txLogoHoehe.getText().isEmpty() && !txLogoBreite.getText().isEmpty()) {
        width=Double.valueOf(txLogoBreite.getText());
        height=(((width * 100) / Double.valueOf(txPreviewWidth.getText())) * Double.valueOf(txPreviewHeight.getText())) / 100;
      }
 else       if (!txLogoHoehe.getText().isEmpty() && txLogoBreite.getText().isEmpty()) {
        height=Double.valueOf(txLogoHoehe.getText());
        width=(((height * 100) / Double.valueOf(txPreviewHeight.getText())) * Double.valueOf(txPreviewWidth.getText())) / 100;
      }
 else       if (txLogoHoehe.getText().isEmpty() && txLogoBreite.getText().isEmpty()) {
        showError(""String_Node_Str"");
        throw new NumberFormatException();
      }
 else {
        width=Double.valueOf(txLogoBreite.getText());
        height=Double.valueOf(txLogoHoehe.getText());
      }
      RelativeRectangle newPosition=new RelativeRectangle(Double.valueOf(txLogoX.getText()),Double.valueOf(txLogoY.getText()),width,height);
      LOGGER.info(""String_Node_Str"");
      if (txLogoLogo.getId().isEmpty())       newLogo=pservice.addLogo(newLogo);
 else       newLogo=pservice.getLogo(Integer.valueOf(txLogoLogo.getId()));
      Profile.PairLogoRelativeRectangle p=pservice.addPairLogoRelativeRectangle(selectedProfile.getId(),newLogo.getId(),newPosition);
      logoList.add(p);
      txLogoName.getEntries().add(newLogo.getLabel() + ""String_Node_Str"" + newLogo.getId());
      ImageView imgView=new ImageView(new Image(""String_Node_Str"" + newLogo.getPath(),30,30,true,true));
      imgView.setId(newLogo.getPath());
      txLogoName.getImgViews().put(newLogo.getLabel().toLowerCase() + ""String_Node_Str"" + newLogo.getId(),imgView);
      txLogoName.clear();
      txLogoBreite.clear();
      txLogoHoehe.clear();
      txLogoX.clear();
      txLogoY.clear();
      txLogoLogo.setText(""String_Node_Str"");
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
catch (    NumberFormatException e) {
      showError(""String_Node_Str"");
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
  }
}"
77932,"@FXML private void initialize(){
  tableLogo.setEditable(true);
  colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String newLabel=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       newLabel=p.getValue().getLogo().getLabel();
      return new ReadOnlyObjectWrapper(newLabel);
    }
  }
);
  colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
  colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          if (p.getLogo() == null) {
            Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
            p.setLogo(newLogo);
          }
 else           p.getLogo().setLabel(t.getNewValue());
          LOGGER.info(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
          pservice.editLogo(p.getLogo());
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
    }
  }
);
  colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setX(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
    }
  }
);
  colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setY(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getWidth());
    }
  }
);
  colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setWidth(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
    }
  }
);
  colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setHeight(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoLogo.setStyle(""String_Node_Str"");
  colLogoLogo.setSortable(false);
  colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String logoPath=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       logoPath=p.getValue().getLogo().getPath();
      return new ReadOnlyObjectWrapper(logoPath);
    }
  }
);
  colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new LogoImgCell(logoList,pservice,imageHandler,windowManager.getStage());
    }
  }
);
  colLogoAktion.setStyle(""String_Node_Str"");
  colLogoAktion.setSortable(false);
  colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
    @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(    TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId());
    }
  }
);
  tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
    if (newSelection != null) {
      Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
      LOGGER.info(""String_Node_Str"" + selectedLogo.getLogo().getPath());
      this.selectedLogo=selectedLogo;
      if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
        try {
          int width=Integer.parseInt(txPreviewWidth.getText());
          int height=Integer.parseInt(txPreviewHeight.getText());
          Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
 else       LOGGER.info(""String_Node_Str"");
    }
  }
);
  txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,0);
  }
);
  txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,1);
  }
);
}","@FXML private void initialize(){
  tableLogo.setEditable(true);
  colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String newLabel=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       newLabel=p.getValue().getLogo().getLabel();
      return new ReadOnlyObjectWrapper(newLabel);
    }
  }
);
  colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
  colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          if (p.getLogo() == null) {
            Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
            p.setLogo(newLogo);
          }
 else           p.getLogo().setLabel(t.getNewValue());
          LOGGER.info(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
          pservice.editLogo(p.getLogo());
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
    }
  }
);
  colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setX(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
    }
  }
);
  colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setY(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getWidth());
    }
  }
);
  colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setWidth(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
    }
  }
);
  colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setHeight(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
          changePreviewSize(txPreviewHeight.getText(),0);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoLogo.setStyle(""String_Node_Str"");
  colLogoLogo.setSortable(false);
  colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String logoPath=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       logoPath=p.getValue().getLogo().getPath();
      return new ReadOnlyObjectWrapper(logoPath);
    }
  }
);
  colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new LogoImgCell(logoList,pservice,imageHandler,windowManager.getStage());
    }
  }
);
  colLogoAktion.setStyle(""String_Node_Str"");
  colLogoAktion.setSortable(false);
  colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
    @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(    TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId());
    }
  }
);
  tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
    if (newSelection != null) {
      Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
      LOGGER.info(""String_Node_Str"" + selectedLogo.getLogo().getPath());
      this.selectedLogo=selectedLogo;
      if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
        try {
          int width=Integer.parseInt(txPreviewWidth.getText());
          int height=Integer.parseInt(txPreviewHeight.getText());
          Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
 else       LOGGER.info(""String_Node_Str"");
    }
  }
);
  txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,0);
  }
);
  txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,1);
  }
);
}"
77933,"@Override public TableCell<Position,Boolean> call(TableColumn<Position,Boolean> p){
  System.out.println(""String_Node_Str"" + selectedProfile.getId());
  return new PositionButtonCell(posList,kamPosList,selectedProfile.getId(),pservice,windowManager.getStage());
}","@Override public TableCell<Position,Boolean> call(TableColumn<Position,Boolean> p){
  return new PositionButtonCell(posList,kamPosList,selectedProfile.getId(),pservice,windowManager.getStage());
}"
77934,"@FXML private void initialize(){
  tablePosition.setEditable(true);
  colPositionID.setCellValueFactory(new PropertyValueFactory<Position,Integer>(""String_Node_Str""));
  colPositionName.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
  colPositionName.setCellFactory(TextFieldTableCell.forTableColumn());
  colPositionName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Position,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Position,String> t){
      try {
        Position p=((Position)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          pservice.editPosition(p);
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTablePosition(pservice.getAllPositionsOfProfile(selectedProfile));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colPositionBild.setStyle(""String_Node_Str"");
  colPositionBild.setSortable(false);
  colPositionBild.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
  colPositionBild.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new PositionImgCell(posList,pservice,imageHandler,windowManager.getStage());
    }
  }
);
  colPositionAktion.setStyle(""String_Node_Str"");
  colPositionAktion.setSortable(false);
  colPositionAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Position,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Position,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colPositionAktion.setCellFactory(new Callback<TableColumn<Position,Boolean>,TableCell<Position,Boolean>>(){
    @Override public TableCell<Position,Boolean> call(    TableColumn<Position,Boolean> p){
      System.out.println(""String_Node_Str"" + selectedProfile.getId());
      return new PositionButtonCell(posList,kamPosList,selectedProfile.getId(),pservice,windowManager.getStage());
    }
  }
);
  System.out.println(""String_Node_Str"");
}","@FXML private void initialize(){
  tablePosition.setEditable(true);
  colPositionID.setCellValueFactory(new PropertyValueFactory<Position,Integer>(""String_Node_Str""));
  colPositionName.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
  colPositionName.setCellFactory(TextFieldTableCell.forTableColumn());
  colPositionName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Position,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Position,String> t){
      try {
        Position p=((Position)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          pservice.editPosition(p);
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTablePosition(pservice.getAllPositionsOfProfile(selectedProfile));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colPositionBild.setStyle(""String_Node_Str"");
  colPositionBild.setSortable(false);
  colPositionBild.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
  colPositionBild.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new PositionImgCell(posList,pservice,imageHandler,windowManager.getStage());
    }
  }
);
  colPositionAktion.setStyle(""String_Node_Str"");
  colPositionAktion.setSortable(false);
  colPositionAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Position,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Position,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colPositionAktion.setCellFactory(new Callback<TableColumn<Position,Boolean>,TableCell<Position,Boolean>>(){
    @Override public TableCell<Position,Boolean> call(    TableColumn<Position,Boolean> p){
      return new PositionButtonCell(posList,kamPosList,selectedProfile.getId(),pservice,windowManager.getStage());
    }
  }
);
}"
77935,"@FXML protected void saveProfil(){
  LOGGER.error(""String_Node_Str"");
  String name=txProfilName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0) {
    LOGGER.error(""String_Node_Str"");
    showError(""String_Node_Str"");
  }
 else {
    Profile p=new Profile(name,txProfilDrucken.isSelected(),txProfilFilter.isSelected(),txProfilGreen.isSelected(),txProfilMobil.isSelected(),txProfilWatermark.getText());
    if (txProfilWatermark.getText().compareTo(""String_Node_Str"") != 0)     p.setWatermark(txProfilWatermark.getText());
    try {
      LOGGER.info(""String_Node_Str"");
      pservice.add(p);
      profList.add(p);
      txProfilDrucken.setSelected(false);
      txProfilFilter.setSelected(false);
      txProfilGreen.setSelected(false);
      txProfilMobil.setSelected(false);
      txProfilName.clear();
      txProfilWatermark.setText(""String_Node_Str"");
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"" + e.getMessage());
    }
  }
}","@FXML protected void saveProfil(){
  LOGGER.error(""String_Node_Str"");
  String name=txProfilName.getText();
  if (name.trim().compareTo(""String_Node_Str"") == 0) {
    LOGGER.error(""String_Node_Str"");
    showError(""String_Node_Str"");
  }
 else {
    Profile p=new Profile(name,txProfilDrucken.isSelected(),txProfilFilter.isSelected(),txProfilGreen.isSelected(),txProfilMobil.isSelected(),txProfilWatermark.getText());
    if (txProfilWatermark.getText().compareTo(""String_Node_Str"") != 0)     p.setWatermark(txProfilWatermark.getText());
    try {
      LOGGER.info(""String_Node_Str"");
      pservice.add(p);
      profList.add(p);
      txProfilDrucken.setSelected(false);
      txProfilFilter.setSelected(false);
      txProfilGreen.setSelected(false);
      txProfilMobil.setSelected(false);
      txProfilName.clear();
      txProfilWatermark.setText(""String_Node_Str"");
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}"
77936,"@FXML private void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice,imageHandler,windowManager.getStage());
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedProfile.getName() + ""String_Node_Str""+ selectedProfile.getId());
        System.out.println(""String_Node_Str"");
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          refreshLogoAutoComplete(selectedProfile);
          refreshTableCategory(bservice.getAllCategories());
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}","@FXML private void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice,imageHandler,windowManager.getStage());
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedProfile.getName() + ""String_Node_Str""+ selectedProfile.getId());
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          refreshLogoAutoComplete(selectedProfile);
          refreshTableCategory(bservice.getAllCategories());
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77937,"/** 
 * Construct a new AutoCompleteTextField. 
 */
public AutoCompleteTextField(){
  super();
  entries=new TreeSet<>();
  imgViews=new HashMap<>();
  entriesPopup=new ContextMenu();
  textProperty().addListener((observableValue,s,s2) -> {
    if (getText().length() == 0) {
      entriesPopup.hide();
    }
 else {
      LinkedList<String> searchResult=new LinkedList<>();
      System.out.println(getText().toLowerCase() + ""String_Node_Str"" + getText().toLowerCase()+ Character.MAX_VALUE);
      searchResult.addAll(entries.subSet(getText().toLowerCase(),getText().toLowerCase() + Character.MAX_VALUE));
      if (entries.size() > 0) {
        populatePopup(searchResult);
        if (!entriesPopup.isShowing()) {
          entriesPopup.show(AutoCompleteTextField.this,Side.BOTTOM,0,0);
        }
      }
 else {
        entriesPopup.hide();
      }
    }
  }
);
  focusedProperty().addListener(new ChangeListener<Boolean>(){
    @Override public void changed(    ObservableValue<? extends Boolean> observableValue,    Boolean aBoolean,    Boolean aBoolean2){
      entriesPopup.hide();
    }
  }
);
}","/** 
 * Construct a new AutoCompleteTextField. 
 */
public AutoCompleteTextField(){
  super();
  entries=new TreeSet<>();
  imgViews=new HashMap<>();
  entriesPopup=new ContextMenu();
  textProperty().addListener((observableValue,s,s2) -> {
    if (getText().length() == 0) {
      entriesPopup.hide();
    }
 else {
      LinkedList<String> searchResult=new LinkedList<>();
      searchResult.addAll(entries.subSet(getText().toLowerCase(),getText().toLowerCase() + Character.MAX_VALUE));
      if (entries.size() > 0) {
        populatePopup(searchResult);
        if (!entriesPopup.isShowing()) {
          entriesPopup.show(AutoCompleteTextField.this,Side.BOTTOM,0,0);
        }
      }
 else {
        entriesPopup.hide();
      }
    }
  }
);
  focusedProperty().addListener(new ChangeListener<Boolean>(){
    @Override public void changed(    ObservableValue<? extends Boolean> observableValue,    Boolean aBoolean,    Boolean aBoolean2){
      entriesPopup.hide();
    }
  }
);
}"
77938,"/** 
 * Populate the entry set with the given search results.  Display is limited to 10 entries, for performance.
 * @param searchResult The set of matching strings.
 */
private void populatePopup(List<String> searchResult){
  List<CustomMenuItem> menuItems=new LinkedList<>();
  int maxEntries=10;
  int count=Math.min(searchResult.size(),maxEntries);
  for (int i=0; i < count; i++) {
    final String result=searchResult.get(i);
    Label entryLabel=new Label(result);
    final ImageView logo=imgViews.get(result);
    GridPane box=new GridPane();
    box.add(entryLabel,0,0);
    ColumnConstraints con=new ColumnConstraints();
    con.setPrefWidth(200);
    box.getColumnConstraints().add(con);
    box.add(logo,1,0);
    ColumnConstraints con2=new ColumnConstraints();
    con2.setPrefWidth(40);
    box.getColumnConstraints().add(con2);
    CustomMenuItem item=new CustomMenuItem(box,true);
    item.setOnAction(new EventHandler<ActionEvent>(){
      @Override public void handle(      ActionEvent actionEvent){
        setText(result.substring(0,result.lastIndexOf(""String_Node_Str"")));
        txLogoPath.setText(logo.getId());
        entriesPopup.hide();
      }
    }
);
    menuItems.add(item);
  }
  entriesPopup.getItems().clear();
  entriesPopup.getItems().addAll(menuItems);
}","/** 
 * Populate the entry set with the given search results.  Display is limited to 10 entries, for performance.
 * @param searchResult The set of matching strings.
 */
private void populatePopup(List<String> searchResult){
  List<CustomMenuItem> menuItems=new LinkedList<>();
  int maxEntries=10;
  int count=Math.min(searchResult.size(),maxEntries);
  for (int i=0; i < count; i++) {
    final String result=searchResult.get(i);
    Label entryLabel=new Label(result);
    final ImageView logo=imgViews.get(result);
    GridPane box=new GridPane();
    box.add(entryLabel,0,0);
    ColumnConstraints con=new ColumnConstraints();
    con.setPrefWidth(200);
    box.getColumnConstraints().add(con);
    box.add(logo,1,0);
    ColumnConstraints con2=new ColumnConstraints();
    con2.setPrefWidth(40);
    box.getColumnConstraints().add(con2);
    CustomMenuItem item=new CustomMenuItem(box,true);
    item.setOnAction(new EventHandler<ActionEvent>(){
      @Override public void handle(      ActionEvent actionEvent){
        String[] parts=result.split(""String_Node_Str"");
        setText(parts[0]);
        txLogoPath.setText(logo.getId());
        txLogoPath.setId(parts[1]);
        entriesPopup.hide();
      }
    }
);
    menuItems.add(item);
  }
  entriesPopup.getItems().clear();
  entriesPopup.getItems().addAll(menuItems);
}"
77939,"@Override public void handle(ActionEvent actionEvent){
  setText(result.substring(0,result.lastIndexOf(""String_Node_Str"")));
  txLogoPath.setText(logo.getId());
  entriesPopup.hide();
}","@Override public void handle(ActionEvent actionEvent){
  String[] parts=result.split(""String_Node_Str"");
  setText(parts[0]);
  txLogoPath.setText(logo.getId());
  txLogoPath.setId(parts[1]);
  entriesPopup.hide();
}"
77940,"@Override public TableCell<Background,Boolean> call(TableColumn<Background,Boolean> p){
  return new BackgroundButtonCell(backgroundList,pservice,windowManager.getStage());
}","@Override public TableCell<Background,Boolean> call(TableColumn<Background,Boolean> p){
  return new BackgroundButtonCell(backgroundList,bservice,windowManager.getStage());
}"
77941,"@Override public void handle(TableColumn.CellEditEvent<Background,String> t){
  try {
    Background p=((Background)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
      p.setName(t.getNewValue());
      bservice.edit(p);
    }
 else {
      refreshTablePosition(pservice.getAllPositionsOfProfile(selectedProfile));
    }
  }
 catch (  ServiceException e) {
  }
}","@Override public void handle(TableColumn.CellEditEvent<Background,String> t){
  try {
    Background p=((Background)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
      p.setName(t.getNewValue());
      bservice.edit(p);
      refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
    }
 else {
      refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
    }
  }
 catch (  ServiceException e) {
    try {
      refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
    }
 catch (    ServiceException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
}"
77942,"@FXML private void initialize(){
  tableBackground.setEditable(true);
  colBackgroundID.setCellValueFactory(new PropertyValueFactory<Background,Integer>(""String_Node_Str""));
  colBackgroundName.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
  colBackgroundName.setCellFactory(TextFieldTableCell.forTableColumn());
  colBackgroundName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background,String> t){
      try {
        Background p=((Background)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.edit(p);
        }
 else {
          refreshTablePosition(pservice.getAllPositionsOfProfile(selectedProfile));
        }
      }
 catch (      ServiceException e) {
      }
    }
  }
);
  colBackgroundPath.setStyle(""String_Node_Str"");
  colBackgroundPath.setSortable(false);
  colBackgroundPath.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
  colBackgroundPath.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new BackgroundImgCell(backgroundList,pservice);
    }
  }
);
  colBackgroundAction.setStyle(""String_Node_Str"");
  colBackgroundAction.setSortable(false);
  colBackgroundAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colBackgroundAction.setCellFactory(new Callback<TableColumn<Background,Boolean>,TableCell<Background,Boolean>>(){
    @Override public TableCell<Background,Boolean> call(    TableColumn<Background,Boolean> p){
      return new BackgroundButtonCell(backgroundList,pservice,windowManager.getStage());
    }
  }
);
  categoryCombo.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Background.Category>(){
    @Override public void changed(    ObservableValue selected,    Background.Category oldCat,    Background.Category newCat){
      LOGGER.info(""String_Node_Str"" + newCat);
      selectedCategory=newCat;
      try {
        refreshTableBackground(bservice.getAllWithCategory(newCat.getId()));
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"" + newCat.getId(),e);
      }
    }
  }
);
}","@FXML private void initialize(){
  tableBackground.setEditable(true);
  colBackgroundID.setCellValueFactory(new PropertyValueFactory<Background,Integer>(""String_Node_Str""));
  colBackgroundName.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
  colBackgroundName.setCellFactory(TextFieldTableCell.forTableColumn());
  colBackgroundName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background,String> t){
      try {
        Background p=((Background)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.edit(p);
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfile.getId()));
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colBackgroundPath.setStyle(""String_Node_Str"");
  colBackgroundPath.setSortable(false);
  colBackgroundPath.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
  colBackgroundPath.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new BackgroundImgCell(backgroundList,bservice);
    }
  }
);
  colBackgroundAction.setStyle(""String_Node_Str"");
  colBackgroundAction.setSortable(false);
  colBackgroundAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colBackgroundAction.setCellFactory(new Callback<TableColumn<Background,Boolean>,TableCell<Background,Boolean>>(){
    @Override public TableCell<Background,Boolean> call(    TableColumn<Background,Boolean> p){
      return new BackgroundButtonCell(backgroundList,bservice,windowManager.getStage());
    }
  }
);
  categoryCombo.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Background.Category>(){
    @Override public void changed(    ObservableValue selected,    Background.Category oldCat,    Background.Category newCat){
      LOGGER.info(""String_Node_Str"" + newCat);
      selectedCategory=newCat;
      try {
        refreshTableBackground(bservice.getAllWithCategory(newCat.getId()));
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"" + newCat.getId(),e);
      }
    }
  }
);
}"
77943,"@Override public TableCell<Background.Category,Boolean> call(TableColumn<Background.Category,Boolean> p){
  return new CategoryButtonCell(categoryList,pservice,windowManager.getStage());
}","@Override public TableCell<Background.Category,Boolean> call(TableColumn<Background.Category,Boolean> p){
  return new CategoryButtonCell(categoryList,bservice,windowManager.getStage());
}"
77944,"@Override public void handle(TableColumn.CellEditEvent<Background.Category,String> t){
  try {
    Background.Category p=((Background.Category)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
      p.setName(t.getNewValue());
      bservice.editCategory(p);
    }
 else {
      refreshTablePosition(pservice.getAllPositionsOfProfile(selectedProfile));
    }
  }
 catch (  ServiceException e) {
  }
}","@Override public void handle(TableColumn.CellEditEvent<Background.Category,String> t){
  try {
    Background.Category p=((Background.Category)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
      p.setName(t.getNewValue());
      bservice.editCategory(p);
      refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
    }
 else {
      refreshTableCategory(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77945,"@FXML private void initialize(){
  tableCategory.setEditable(true);
  colCategoryID.setCellValueFactory(new PropertyValueFactory<Background.Category,Integer>(""String_Node_Str""));
  colCategoryName.setCellValueFactory(new PropertyValueFactory<Background.Category,String>(""String_Node_Str""));
  colCategoryName.setCellFactory(TextFieldTableCell.forTableColumn());
  colCategoryName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background.Category,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background.Category,String> t){
      try {
        Background.Category p=((Background.Category)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.editCategory(p);
        }
 else {
          refreshTablePosition(pservice.getAllPositionsOfProfile(selectedProfile));
        }
      }
 catch (      ServiceException e) {
      }
    }
  }
);
  colCategoryAction.setStyle(""String_Node_Str"");
  colCategoryAction.setSortable(false);
  colCategoryAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryAction.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryButtonCell(categoryList,pservice,windowManager.getStage());
    }
  }
);
}","@FXML private void initialize(){
  tableCategory.setEditable(true);
  colCategoryID.setCellValueFactory(new PropertyValueFactory<Background.Category,Integer>(""String_Node_Str""));
  colCategoryName.setCellValueFactory(new PropertyValueFactory<Background.Category,String>(""String_Node_Str""));
  colCategoryName.setCellFactory(TextFieldTableCell.forTableColumn());
  colCategoryName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background.Category,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Background.Category,String> t){
      try {
        Background.Category p=((Background.Category)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          bservice.editCategory(p);
          refreshCategoryComboBox(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTableCategory(pservice.getAllCategoryOfProfile(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
);
  colCategoryAction.setStyle(""String_Node_Str"");
  colCategoryAction.setSortable(false);
  colCategoryAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background.Category,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Background.Category,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colCategoryAction.setCellFactory(new Callback<TableColumn<Background.Category,Boolean>,TableCell<Background.Category,Boolean>>(){
    @Override public TableCell<Background.Category,Boolean> call(    TableColumn<Background.Category,Boolean> p){
      return new CategoryButtonCell(categoryList,bservice,windowManager.getStage());
    }
  }
);
}"
77946,"public BackgroundButtonCell(ObservableList<Background> backgroundList,ProfileService pservice,Stage primaryStage){
  this.backgroundList=backgroundList;
  this.pservice=pservice;
  cellButton.setOnAction(new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent t){
      Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
      alert.setTitle(""String_Node_Str"");
      alert.setHeaderText(""String_Node_Str"");
      alert.setContentText(""String_Node_Str"");
      alert.initOwner(primaryStage);
      ButtonType butJa=new ButtonType(""String_Node_Str"");
      ButtonType butNein=new ButtonType(""String_Node_Str"");
      alert.getButtonTypes().setAll(butJa,butNein);
      Optional<ButtonType> result=alert.showAndWait();
      if (result.get() == butJa) {
        Background currentBackground=(Background)BackgroundButtonCell.this.getTableView().getItems().get(BackgroundButtonCell.this.getIndex());
        backgroundList.remove(currentBackground);
        setGraphic(null);
      }
    }
  }
);
}","public BackgroundButtonCell(ObservableList<Background> backgroundList,BackgroundService bservice,Stage primaryStage){
  this.backgroundList=backgroundList;
  this.bservice=bservice;
  cellButton.setOnAction(new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent t){
      Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
      alert.setTitle(""String_Node_Str"");
      alert.setHeaderText(""String_Node_Str"");
      alert.setContentText(""String_Node_Str"");
      alert.initOwner(primaryStage);
      ButtonType butJa=new ButtonType(""String_Node_Str"");
      ButtonType butNein=new ButtonType(""String_Node_Str"");
      alert.getButtonTypes().setAll(butJa,butNein);
      Optional<ButtonType> result=alert.showAndWait();
      if (result.get() == butJa) {
        Background currentBackground=(Background)BackgroundButtonCell.this.getTableView().getItems().get(BackgroundButtonCell.this.getIndex());
        backgroundList.remove(currentBackground);
        try {
          bservice.erase(currentBackground);
        }
 catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
        setGraphic(null);
      }
    }
  }
);
}"
77947,"@Override public void handle(ActionEvent t){
  Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
  alert.setTitle(""String_Node_Str"");
  alert.setHeaderText(""String_Node_Str"");
  alert.setContentText(""String_Node_Str"");
  alert.initOwner(primaryStage);
  ButtonType butJa=new ButtonType(""String_Node_Str"");
  ButtonType butNein=new ButtonType(""String_Node_Str"");
  alert.getButtonTypes().setAll(butJa,butNein);
  Optional<ButtonType> result=alert.showAndWait();
  if (result.get() == butJa) {
    Background currentBackground=(Background)BackgroundButtonCell.this.getTableView().getItems().get(BackgroundButtonCell.this.getIndex());
    backgroundList.remove(currentBackground);
    setGraphic(null);
  }
}","@Override public void handle(ActionEvent t){
  Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
  alert.setTitle(""String_Node_Str"");
  alert.setHeaderText(""String_Node_Str"");
  alert.setContentText(""String_Node_Str"");
  alert.initOwner(primaryStage);
  ButtonType butJa=new ButtonType(""String_Node_Str"");
  ButtonType butNein=new ButtonType(""String_Node_Str"");
  alert.getButtonTypes().setAll(butJa,butNein);
  Optional<ButtonType> result=alert.showAndWait();
  if (result.get() == butJa) {
    Background currentBackground=(Background)BackgroundButtonCell.this.getTableView().getItems().get(BackgroundButtonCell.this.getIndex());
    backgroundList.remove(currentBackground);
    try {
      bservice.erase(currentBackground);
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    setGraphic(null);
  }
}"
77948,"public BackgroundImgCell(ObservableList<Background> backgroundList,ProfileService pservice){
  this.backgroundList=backgroundList;
  this.pservice=pservice;
  img.setFitHeight(35);
  img.setFitWidth(35);
  cellButton.setOnAction(new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent t){
      FileChooser fileChooser=new FileChooser();
      fileChooser.setTitle(""String_Node_Str"");
      fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
      fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""),new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      File file=fileChooser.showOpenDialog(new Stage());
      if (file != null) {
        Background p=backgroundList.get(getIndex());
        p.setPath(file.getAbsolutePath());
        backgroundList.remove(getIndex());
        backgroundList.add(getIndex(),p);
        img.setImage(getImage(p.getPath()));
        HBox hb=new HBox(img,cellButton);
        hb.setSpacing(10);
        hb.setAlignment(Pos.CENTER);
        setGraphic(hb);
      }
    }
  }
);
  img.addEventHandler(MouseEvent.MOUSE_CLICKED,new EventHandler<MouseEvent>(){
    @Override public void handle(    MouseEvent event){
      try {
        if (backgroundList.get(getIndex()).getPath() == null)         desktop.getDesktop().open(new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str""));
 else         desktop.getDesktop().open(new File(backgroundList.get(getIndex()).getPath()));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
}","public BackgroundImgCell(ObservableList<Background> backgroundList,BackgroundService bservice){
  this.backgroundList=backgroundList;
  this.bservice=bservice;
  img.setFitHeight(35);
  img.setFitWidth(35);
  cellButton.setOnAction(new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent t){
      FileChooser fileChooser=new FileChooser();
      fileChooser.setTitle(""String_Node_Str"");
      fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
      fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""),new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      File file=fileChooser.showOpenDialog(new Stage());
      if (file != null) {
        try {
          Background p=backgroundList.get(getIndex());
          p.setPath(file.getAbsolutePath());
          backgroundList.remove(getIndex());
          backgroundList.add(getIndex(),p);
          img.setImage(getImage(p.getPath()));
          HBox hb=new HBox(img,cellButton);
          hb.setSpacing(10);
          hb.setAlignment(Pos.CENTER);
          setGraphic(hb);
          bservice.edit(p);
        }
 catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
  }
);
  img.addEventHandler(MouseEvent.MOUSE_CLICKED,new EventHandler<MouseEvent>(){
    @Override public void handle(    MouseEvent event){
      try {
        if (backgroundList.get(getIndex()).getPath() == null)         desktop.getDesktop().open(new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str""));
 else         desktop.getDesktop().open(new File(backgroundList.get(getIndex()).getPath()));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
}"
77949,"@Override public void handle(ActionEvent t){
  Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
  alert.setTitle(""String_Node_Str"");
  alert.setHeaderText(""String_Node_Str"");
  alert.setContentText(""String_Node_Str"");
  alert.initOwner(primaryStage);
  ButtonType butJa=new ButtonType(""String_Node_Str"");
  ButtonType butNein=new ButtonType(""String_Node_Str"");
  alert.getButtonTypes().setAll(butJa,butNein);
  Optional<ButtonType> result=alert.showAndWait();
  if (result.get() == butJa) {
    Background.Category currentCategory=(Background.Category)CategoryButtonCell.this.getTableView().getItems().get(CategoryButtonCell.this.getIndex());
    categories.remove(currentCategory);
    setGraphic(null);
  }
}","@Override public void handle(ActionEvent t){
  Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
  alert.setTitle(""String_Node_Str"");
  alert.setHeaderText(""String_Node_Str"");
  alert.setContentText(""String_Node_Str"");
  alert.initOwner(primaryStage);
  ButtonType butJa=new ButtonType(""String_Node_Str"");
  ButtonType butNein=new ButtonType(""String_Node_Str"");
  alert.getButtonTypes().setAll(butJa,butNein);
  Optional<ButtonType> result=alert.showAndWait();
  if (result.get() == butJa) {
    Background.Category currentCategory=(Background.Category)CategoryButtonCell.this.getTableView().getItems().get(CategoryButtonCell.this.getIndex());
    categories.remove(currentCategory);
    try {
      bservice.eraseCategory(currentCategory);
    }
 catch (    ServiceException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    setGraphic(null);
  }
}"
77950,"public CategoryButtonCell(ObservableList<Background.Category> categories,ProfileService pservice,Stage primaryStage){
  this.categories=categories;
  this.pservice=pservice;
  cellButton.setOnAction(new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent t){
      Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
      alert.setTitle(""String_Node_Str"");
      alert.setHeaderText(""String_Node_Str"");
      alert.setContentText(""String_Node_Str"");
      alert.initOwner(primaryStage);
      ButtonType butJa=new ButtonType(""String_Node_Str"");
      ButtonType butNein=new ButtonType(""String_Node_Str"");
      alert.getButtonTypes().setAll(butJa,butNein);
      Optional<ButtonType> result=alert.showAndWait();
      if (result.get() == butJa) {
        Background.Category currentCategory=(Background.Category)CategoryButtonCell.this.getTableView().getItems().get(CategoryButtonCell.this.getIndex());
        categories.remove(currentCategory);
        setGraphic(null);
      }
    }
  }
);
}","public CategoryButtonCell(ObservableList<Background.Category> categories,BackgroundService bservice,Stage primaryStage){
  this.categories=categories;
  this.bservice=bservice;
  cellButton.setOnAction(new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent t){
      Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
      alert.setTitle(""String_Node_Str"");
      alert.setHeaderText(""String_Node_Str"");
      alert.setContentText(""String_Node_Str"");
      alert.initOwner(primaryStage);
      ButtonType butJa=new ButtonType(""String_Node_Str"");
      ButtonType butNein=new ButtonType(""String_Node_Str"");
      alert.getButtonTypes().setAll(butJa,butNein);
      Optional<ButtonType> result=alert.showAndWait();
      if (result.get() == butJa) {
        Background.Category currentCategory=(Background.Category)CategoryButtonCell.this.getTableView().getItems().get(CategoryButtonCell.this.getIndex());
        categories.remove(currentCategory);
        try {
          bservice.eraseCategory(currentCategory);
        }
 catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"",e);
        }
        setGraphic(null);
      }
    }
  }
);
}"
77951,"@Override public Image crop(Image original,int x1,int x2,int y1,int y2,int maxX,int maxY) throws ServiceException {
  try {
    BufferedImage bufOriginal=ImageIO.read(new File(original.getImagepath()));
    int width=bufOriginal.getWidth();
    int height=bufOriginal.getHeight();
    double ratioX=width / (double)maxX;
    double ratioY=height / (double)maxY;
    int newX1=(int)(x1 * ratioX);
    int newX2=(int)(x2 * ratioX);
    int newY1=(int)(y1 * ratioY);
    int newY2=(int)(y2 * ratioY);
    BufferedImage bufCropped=bufOriginal.getSubimage(newX1,newY1,newX2 - newX1,newY2 - newY1);
    Image img=new Image(-1,original.getImagepath().substring(0,original.getImagepath().length() - 4) + ""String_Node_Str"",original.getShootingid(),original.getDate());
    return imageDAO.createAndSave(img,bufCropped);
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"" + e);
    throw new ServiceException(e.getMessage());
  }
catch (  PersistenceException e) {
    LOGGER.debug(""String_Node_Str"" + e);
    throw new ServiceException(e.getMessage());
  }
}","@Override public Image crop(Image original,int x1,int x2,int y1,int y2,int maxX,int maxY) throws ServiceException {
  try {
    BufferedImage bufOriginal=ImageIO.read(new File(original.getImagepath()));
    int width=bufOriginal.getWidth();
    int height=bufOriginal.getHeight();
    double ratioX=width / (double)maxX;
    double ratioY=height / (double)maxY;
    int newX1=(int)(x1 * ratioX);
    int newX2=(int)(x2 * ratioX);
    int newY1=(int)(y1 * ratioY);
    int newY2=(int)(y2 * ratioY);
    BufferedImage bufCropped=bufOriginal.getSubimage(newX1,newY1,newX2 - newX1,newY2 - newY1);
    Image img=new Image(-1,original.getImagepath().substring(0,original.getImagepath().length() - 4) + ""String_Node_Str"",original.getShootingid(),original.getDate());
    return imageDAO.createAndSave(img,bufCropped);
  }
 catch (  IOException|PersistenceException e) {
    LOGGER.debug(""String_Node_Str"",e);
    throw new ServiceException(e.getMessage());
  }
}"
77952,"/** 
 * Opens Mainframe again
 */
@FXML public void onDemolitionPressed(){
  try {
    if (shootingService.searchIsActive().getActive()) {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (shootingService.searchIsActive().getProfileid() != profile.getId()) {
        Shooting shooting=new Shooting(shootingService.searchIsActive().getId(),profile.getId(),""String_Node_Str"",bgPath,true);
        shootingService.update(shooting);
      }
      windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
    }
 else {
      windowManager.showScene(WindowManager.SHOW_MAINSCENE);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}","/** 
 * Opens Mainframe again
 */
@FXML public void onDemolitionPressed(){
  try {
    if (shootingService.searchIsActive().getActive()) {
      Profile profile=profileChoiceBox.getSelectionModel().getSelectedItem();
      if (shootingService.searchIsActive().getProfileid() == profile.getId()) {
        Shooting shooting=new Shooting(shootingService.searchIsActive().getId(),profile.getId(),""String_Node_Str"",bgPath,true);
        LOGGER.debug(""String_Node_Str"" + shooting.getId() + ""String_Node_Str""+ shooting.getBgPictureFolder());
        shootingService.update(shooting);
      }
      windowManager.showScene(WindowManager.SHOW_CUSTOMERSCENE);
    }
 else {
      windowManager.showScene(WindowManager.SHOW_MAINSCENE);
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
    showInformationDialog(""String_Node_Str"");
  }
}"
77953,"/** 
 * Checks if there is an active shooting and sets visibility and contents of buttons and labels accordingly.
 * @throws ServiceException if an error occurs while retrieving the active shooting from the service layer.
 */
private void setButtons() throws ServiceException {
  if (shootingService.searchIsActive().getActive()) {
    startButton.setVisible(false);
    stopButton.setVisible(true);
    storage.setVisible(false);
    canclebutton.setText(""String_Node_Str"");
    storageDirLabel.setVisible(false);
    gridSave.setVisible(false);
    finallsavingplace.setText(shootingService.searchIsActive().getStorageDir());
    finallsavingplace.setVisible(true);
    save1.setVisible(true);
    saveing.setVisible(false);
    String bgPathAcitveShooting=shootingService.searchIsActive().getBgPictureFolder();
    if (bgPathAcitveShooting != null && !bgPathAcitveShooting.isEmpty()) {
      bgStorageDirLabel.setText(bgPathAcitveShooting);
    }
  }
 else {
    stopButton.setVisible(false);
    startButton.setVisible(true);
    storage.setVisible(true);
    storageDirLabel.setVisible(true);
    gridSave.setVisible(true);
    canclebutton.setText(""String_Node_Str"");
    finallsavingplace.setVisible(false);
    save1.setVisible(false);
    saveing.setVisible(true);
  }
}","/** 
 * Checks if there is an active shooting and sets visibility and contents of buttons and labels accordingly.
 * @throws ServiceException if an error occurs while retrieving the active shooting from the service layer.
 */
private void setButtons() throws ServiceException {
  Shooting activeShooting=shootingService.searchIsActive();
  if (activeShooting != null && activeShooting.getActive()) {
    startButton.setVisible(false);
    stopButton.setVisible(true);
    storage.setVisible(false);
    canclebutton.setText(""String_Node_Str"");
    storageDirLabel.setVisible(false);
    gridSave.setVisible(false);
    finallsavingplace.setText(activeShooting.getStorageDir());
    finallsavingplace.setVisible(true);
    save1.setVisible(true);
    saveing.setVisible(false);
    if (activeShooting.getBgPictureFolder() != null && !activeShooting.getBgPictureFolder().isEmpty()) {
      bgStorageDirLabel.setText(activeShooting.getBgPictureFolder());
    }
  }
 else {
    stopButton.setVisible(false);
    startButton.setVisible(true);
    storage.setVisible(true);
    storageDirLabel.setVisible(true);
    gridSave.setVisible(true);
    canclebutton.setText(""String_Node_Str"");
    finallsavingplace.setVisible(false);
    save1.setVisible(false);
    saveing.setVisible(true);
  }
}"
77954,"@Override public Image createAndSave(Image image,BufferedImage bufferedImage) throws PersistenceException {
  Image ret=create(image);
  File outputfile=new File(image.getImagepath());
  try {
    ImageIO.write(bufferedImage,""String_Node_Str"",outputfile);
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"" + e);
    throw new PersistenceException(e.getMessage());
  }
  return ret;
}","@Override public Image createAndSave(Image image,BufferedImage bufferedImage) throws PersistenceException {
  Image ret=create(image);
  File outputfile=new File(image.getImagepath());
  try {
    ImageIO.write(bufferedImage,""String_Node_Str"",outputfile);
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"",e);
    throw new PersistenceException(e.getMessage());
  }
  return ret;
}"
77955,"public void onCropPressed(){
  LOGGER.info(""String_Node_Str"");
  if (cropRectangle == null) {
    cropRectangle=createDraggableRectangle(100,100,100,100);
    anchorPane.getChildren().add(cropRectangle);
  }
 else {
    cropRectangle.setVisible(true);
  }
}","public void onCropPressed(){
  cropping=true;
  image3.setVisible(false);
  image4.setVisible(false);
  deleteButton.setVisible(false);
  printButton.setVisible(false);
  cropButton.setVisible(false);
  button5.setCancelButton(false);
  button6.setCancelButton(false);
  button7.setCancelButton(false);
  button8.setCancelButton(false);
  button9.setCancelButton(false);
  button13.setVisible(true);
  LOGGER.info(""String_Node_Str"");
  if (cropRectangle == null) {
    cropRectangle=createDraggableRectangle(200,200,500,500);
    anchorPane.getChildren().add(cropRectangle);
  }
 else {
    cropRectangle.setVisible(true);
    resizeHandleNW.setVisible(true);
    resizeHandleSE.setVisible(true);
  }
}"
77956,"private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setVisible(true);
  rect.setFill(Color.BLACK);
  rect.setOpacity(0.2);
  Circle resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  Circle resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  rect.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      double newMaxX=newX + rect.getWidth();
      if (newX >= handleRadius && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setX(newX);
      }
      double newY=rect.getY() + deltaY;
      double newMaxY=newY + rect.getHeight();
      if (newY >= handleRadius && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setY(newY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}","private Rectangle createDraggableRectangle(double x,double y,double width,double height){
  final double handleRadius=10;
  Rectangle rect=new Rectangle(x,y,width,height);
  rect.setVisible(true);
  rect.setFill(Color.BLACK);
  rect.setOpacity(0.2);
  resizeHandleNW=new Circle(handleRadius,Color.BLACK);
  resizeHandleNW.centerXProperty().bind(rect.xProperty());
  resizeHandleNW.centerYProperty().bind(rect.yProperty());
  resizeHandleSE=new Circle(handleRadius,Color.BLACK);
  resizeHandleSE.centerXProperty().bind(rect.xProperty().add(rect.widthProperty()));
  resizeHandleSE.centerYProperty().bind(rect.yProperty().add(rect.heightProperty()));
  rect.parentProperty().addListener((obs,oldParent,newParent) -> {
    for (    Circle c : Arrays.asList(resizeHandleNW,resizeHandleSE)) {
      Pane currentParent=(Pane)c.getParent();
      if (currentParent != null) {
        currentParent.getChildren().remove(c);
      }
      ((Pane)newParent).getChildren().add(c);
    }
  }
);
  Wrapper<Point2D> mouseLocation=new Wrapper<>();
  setUpDragging(resizeHandleNW,mouseLocation);
  setUpDragging(resizeHandleSE,mouseLocation);
  resizeHandleNW.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      if (newX >= handleRadius && newX <= rect.getX() + rect.getWidth() - handleRadius) {
        rect.setX(newX);
        rect.setWidth(rect.getWidth() - deltaX);
      }
      double newY=rect.getY() + deltaY;
      if (newY >= handleRadius && newY <= rect.getY() + rect.getHeight() - handleRadius) {
        rect.setY(newY);
        rect.setHeight(rect.getHeight() - deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  resizeHandleSE.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newMaxX=rect.getX() + rect.getWidth() + deltaX;
      if (newMaxX >= rect.getX() && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setWidth(rect.getWidth() + deltaX);
      }
      double newMaxY=rect.getY() + rect.getHeight() + deltaY;
      if (newMaxY >= rect.getY() && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setHeight(rect.getHeight() + deltaY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  rect.setOnMouseDragged(event -> {
    if (mouseLocation.value != null) {
      double deltaX=event.getSceneX() - mouseLocation.value.getX();
      double deltaY=event.getSceneY() - mouseLocation.value.getY();
      double newX=rect.getX() + deltaX;
      double newMaxX=newX + rect.getWidth();
      if (newX >= handleRadius && newMaxX <= rect.getParent().getBoundsInLocal().getWidth() - handleRadius) {
        rect.setX(newX);
      }
      double newY=rect.getY() + deltaY;
      double newMaxY=newY + rect.getHeight();
      if (newY >= handleRadius && newMaxY <= rect.getParent().getBoundsInLocal().getHeight() - handleRadius) {
        rect.setY(newY);
      }
      mouseLocation.value=new Point2D(event.getSceneX(),event.getSceneY());
    }
  }
);
  return rect;
}"
77957,"/** 
 * crops the given image and saves it as new file
 * @param original image to be cropped
 * @param x1 start point on x axis
 * @param x2 stop point on x axis
 * @param y1 start point on y axis
 * @param y2 stop point on y axis
 * @return reference to the cropped image
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public Image crop(Image original,int x1,int x2,int y1,int y2) throws ServiceException ;","/** 
 * crops the given image and saves it as new file
 * @param original image to be cropped
 * @param x1 start point on x axis
 * @param x2 stop point on x axis
 * @param y1 start point on y axis
 * @param y2 stop point on y axis
 * @param maxX x resolution of the displayed image
 * @param maxY y resolution of the displayed image
 * @return reference to the cropped image
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public Image crop(Image original,int x1,int x2,int y1,int y2,int maxX,int maxY) throws ServiceException ;"
77958,"@Override public Image crop(Image original,int x1,int x2,int y1,int y2) throws ServiceException {
  try {
    BufferedImage bufOriginal=ImageIO.read(new File(original.getImagepath()));
    BufferedImage bufCropped=bufOriginal.getSubimage(x1,y1,x2 - x1,y2 - y1);
    Image img=new Image(-1,original.getImagepath().substring(0,original.getImagepath().length() - 4) + ""String_Node_Str"",original.getShootingid(),original.getDate());
    return imageDAO.createAndSave(img,bufCropped);
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"" + e);
    throw new ServiceException(e.getMessage());
  }
catch (  PersistenceException e) {
    LOGGER.debug(""String_Node_Str"" + e);
    throw new ServiceException(e.getMessage());
  }
}","@Override public Image crop(Image original,int x1,int x2,int y1,int y2,int maxX,int maxY) throws ServiceException {
  try {
    BufferedImage bufOriginal=ImageIO.read(new File(original.getImagepath()));
    int width=bufOriginal.getWidth();
    int height=bufOriginal.getHeight();
    double ratioX=width / (double)maxX;
    double ratioY=height / (double)maxY;
    int newX1=(int)(x1 * ratioX);
    int newX2=(int)(x2 * ratioX);
    int newY1=(int)(y1 * ratioY);
    int newY2=(int)(y2 * ratioY);
    BufferedImage bufCropped=bufOriginal.getSubimage(newX1,newY1,newX2 - newX1,newY2 - newY1);
    Image img=new Image(-1,original.getImagepath().substring(0,original.getImagepath().length() - 4) + ""String_Node_Str"",original.getShootingid(),original.getDate());
    return imageDAO.createAndSave(img,bufCropped);
  }
 catch (  IOException e) {
    LOGGER.debug(""String_Node_Str"" + e);
    throw new ServiceException(e.getMessage());
  }
catch (  PersistenceException e) {
    LOGGER.debug(""String_Node_Str"" + e);
    throw new ServiceException(e.getMessage());
  }
}"
77959,"@Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
  return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId());
}","@Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
  return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfileID);
}"
77960,"@Override protected void initialize(){
  tableLogo.setEditable(true);
  colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String newLabel=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       newLabel=p.getValue().getLogo().getLabel();
      return new ReadOnlyObjectWrapper(newLabel);
    }
  }
);
  colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
  colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          if (p.getLogo() == null) {
            Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
            p.setLogo(newLogo);
          }
 else           p.getLogo().setLabel(t.getNewValue());
          LOGGER.info(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
          pservice.editLogo(p.getLogo());
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
    }
  }
);
  colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setX(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
    }
  }
);
  colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setY(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getWidth());
    }
  }
);
  colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setWidth(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
    }
  }
);
  colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setHeight(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoLogo.setStyle(""String_Node_Str"");
  colLogoLogo.setSortable(false);
  colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String logoPath=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       logoPath=p.getValue().getLogo().getPath();
      return new ReadOnlyObjectWrapper(logoPath);
    }
  }
);
  colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new LogoImgCell(logoList,pservice);
    }
  }
);
  colLogoAktion.setStyle(""String_Node_Str"");
  colLogoAktion.setSortable(false);
  colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
    @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(    TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId());
    }
  }
);
  tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
    if (newSelection != null) {
      Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
      LOGGER.info(""String_Node_Str"" + selectedLogo.getLogo().getPath());
      this.selectedLogo=selectedLogo;
      if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
        try {
          int width=Integer.parseInt(txPreviewWidth.getText());
          int height=Integer.parseInt(txPreviewHeight.getText());
          Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
 else       LOGGER.info(""String_Node_Str"");
    }
  }
);
  txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,0);
  }
);
  txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,1);
  }
);
}","@Override protected void initialize(){
  tableLogo.setEditable(true);
  colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
  colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String newLabel=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       newLabel=p.getValue().getLogo().getLabel();
      return new ReadOnlyObjectWrapper(newLabel);
    }
  }
);
  colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
  colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          if (p.getLogo() == null) {
            Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
            p.setLogo(newLogo);
          }
 else           p.getLogo().setLabel(t.getNewValue());
          LOGGER.info(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
          pservice.editLogo(p.getLogo());
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
    }
  }
);
  colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setX(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
    }
  }
);
  colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setY(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getWidth());
    }
  }
);
  colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setWidth(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
    public ObservableValue<Double> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
      return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
    }
  }
);
  colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
  colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
      try {
        Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (!t.getNewValue().isNaN()) {
          p.getRelativeRectangle().setHeight(t.getNewValue());
          pservice.editPairLogoRelativeRectangle(p);
        }
 else {
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colLogoLogo.setStyle(""String_Node_Str"");
  colLogoLogo.setSortable(false);
  colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
    public ObservableValue<String> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
      String logoPath=""String_Node_Str"";
      if (p.getValue().getLogo() != null)       logoPath=p.getValue().getLogo().getPath();
      return new ReadOnlyObjectWrapper(logoPath);
    }
  }
);
  colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new LogoImgCell(logoList,pservice);
    }
  }
);
  colLogoAktion.setStyle(""String_Node_Str"");
  colLogoAktion.setSortable(false);
  colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
    @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(    TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
      return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfileID);
    }
  }
);
  tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
    if (newSelection != null) {
      Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
      LOGGER.info(""String_Node_Str"" + selectedLogo.getLogo().getPath());
      this.selectedLogo=selectedLogo;
      if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
        try {
          int width=Integer.parseInt(txPreviewWidth.getText());
          int height=Integer.parseInt(txPreviewHeight.getText());
          Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          LOGGER.error(""String_Node_Str"");
        }
      }
 else       LOGGER.info(""String_Node_Str"");
    }
  }
);
  txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,0);
  }
);
  txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
    changePreviewSize(newValue,1);
  }
);
}"
77961,"@Override public TableCell<Position,Boolean> call(TableColumn<Position,Boolean> p){
  return new PositionButtonCell(posList,kamPosList,selectedProfile.getId(),pservice,windowManager.getStage());
}","@Override public TableCell<Position,Boolean> call(TableColumn<Position,Boolean> p){
  System.out.println(""String_Node_Str"" + selectedProfileID);
  return new PositionButtonCell(posList,kamPosList,selectedProfileID,pservice,windowManager.getStage());
}"
77962,"public PositionFrameController(){
  super();
}","@Autowired public PositionFrameController(ProfileService pservice,LogoWatermarkService logoService,BackgroundService bservice,WindowManager windowmanager) throws ServiceException {
  super(pservice,logoService,bservice,windowmanager);
  System.out.println(""String_Node_Str"");
}"
77963,"@FXML protected void initialize(){
  tablePosition.setEditable(true);
  colPositionID.setCellValueFactory(new PropertyValueFactory<Position,Integer>(""String_Node_Str""));
  colPositionName.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
  colPositionName.setCellFactory(TextFieldTableCell.forTableColumn());
  colPositionName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Position,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Position,String> t){
      try {
        Position p=((Position)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          pservice.editPosition(p);
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTablePosition(pservice.getAllPositionsOfProfile(selectedProfile));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colPositionBild.setStyle(""String_Node_Str"");
  colPositionBild.setSortable(false);
  colPositionBild.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
  colPositionBild.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new PositionImgCell(posList,pservice);
    }
  }
);
  colPositionAktion.setStyle(""String_Node_Str"");
  colPositionAktion.setSortable(false);
  colPositionAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Position,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Position,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colPositionAktion.setCellFactory(new Callback<TableColumn<Position,Boolean>,TableCell<Position,Boolean>>(){
    @Override public TableCell<Position,Boolean> call(    TableColumn<Position,Boolean> p){
      return new PositionButtonCell(posList,kamPosList,selectedProfile.getId(),pservice,windowManager.getStage());
    }
  }
);
}","@FXML protected void initialize(){
  tablePosition.setEditable(true);
  colPositionID.setCellValueFactory(new PropertyValueFactory<Position,Integer>(""String_Node_Str""));
  colPositionName.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
  colPositionName.setCellFactory(TextFieldTableCell.forTableColumn());
  colPositionName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Position,String>>(){
    @Override public void handle(    TableColumn.CellEditEvent<Position,String> t){
      try {
        Position p=((Position)t.getTableView().getItems().get(t.getTablePosition().getRow()));
        if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
          p.setName(t.getNewValue());
          pservice.editPosition(p);
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
        }
 else {
          refreshTablePosition(pservice.getAllPositionsOfProfile(selectedProfile));
        }
      }
 catch (      ServiceException e) {
        try {
          refreshTableProfiles(pservice.getAllProfiles());
        }
 catch (        ServiceException e1) {
          LOGGER.error(""String_Node_Str"",e1);
        }
      }
    }
  }
);
  colPositionBild.setStyle(""String_Node_Str"");
  colPositionBild.setSortable(false);
  colPositionBild.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
  colPositionBild.setCellFactory(new Callback<TableColumn,TableCell>(){
    @Override public TableCell call(    TableColumn p){
      return new PositionImgCell(posList,pservice);
    }
  }
);
  colPositionAktion.setStyle(""String_Node_Str"");
  colPositionAktion.setSortable(false);
  colPositionAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Position,Boolean>,ObservableValue<Boolean>>(){
    @Override public ObservableValue<Boolean> call(    TableColumn.CellDataFeatures<Position,Boolean> p){
      return new SimpleBooleanProperty(p.getValue() != null);
    }
  }
);
  colPositionAktion.setCellFactory(new Callback<TableColumn<Position,Boolean>,TableCell<Position,Boolean>>(){
    @Override public TableCell<Position,Boolean> call(    TableColumn<Position,Boolean> p){
      System.out.println(""String_Node_Str"" + selectedProfileID);
      return new PositionButtonCell(posList,kamPosList,selectedProfileID,pservice,windowManager.getStage());
    }
  }
);
}"
77964,"public ProfileFrameController(){
  super();
}","@Autowired public ProfileFrameController(ProfileService pservice,LogoWatermarkService logoService,BackgroundService bservice,WindowManager windowmanager) throws ServiceException {
  super(pservice,logoService,bservice,windowmanager);
}"
77965,"@FXML protected void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice);
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedProfile.getName() + ""String_Node_Str""+ selectedProfile.getId());
        System.out.println(""String_Node_Str"");
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          refreshLogoAutoComplete(selectedProfile);
        }
 catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}","@FXML protected void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.error(""String_Node_Str"",e1);
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice);
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        selectedProfileID=selectedProfile.getId();
        LOGGER.info(""String_Node_Str"" + selectedProfile.getName() + ""String_Node_Str""+ selectedProfile.getId());
        System.out.println(""String_Node_Str"");
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          refreshLogoAutoComplete(selectedProfile);
          refreshTableBackground(pservice.getAllBackgroundOfProfile(selectedProfileID));
        }
 catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}"
77966,"@Override public Profile read(int id) throws PersistenceException {
  LOGGER.debug(""String_Node_Str"" + id);
  ResultSet rs;
  String sqlString;
  PreparedStatement stmt=null;
  sqlString=""String_Node_Str"";
  try {
    stmt=this.con.prepareStatement(sqlString);
    stmt.setInt(1,id);
    rs=stmt.executeQuery();
    if (rs.next()) {
      Profile profile=new Profile(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),pairCameraPositionDAO.readAllWithProfileID(id),pairLogoRelativeRectangleDAO.readAllWithProfileID(id),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getBoolean(""String_Node_Str""));
      if (profile.getWatermark() == null) {
        profile.setWatermark(""String_Node_Str"");
      }
      return profile;
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      return null;
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
 finally {
    try {
      if (stmt != null)       stmt.close();
    }
 catch (    SQLException e) {
      throw new PersistenceException(""String_Node_Str"" + e);
    }
  }
}","@Override public Profile read(int id) throws PersistenceException {
  LOGGER.debug(""String_Node_Str"" + id);
  ResultSet rs;
  String sqlString;
  PreparedStatement stmt=null;
  sqlString=""String_Node_Str"";
  try {
    stmt=this.con.prepareStatement(sqlString);
    stmt.setInt(1,id);
    rs=stmt.executeQuery();
    if (rs.next()) {
      Profile profile=new Profile(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),pairCameraPositionDAO.readAllWithProfileID(id),pairLogoRelativeRectangleDAO.readAllWithProfileID(id),new ArrayList<>(),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getBoolean(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getBoolean(""String_Node_Str""));
      if (profile.getWatermark() == null) {
        profile.setWatermark(""String_Node_Str"");
      }
      return profile;
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      return null;
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
 finally {
    try {
      if (stmt != null)       stmt.close();
    }
 catch (    SQLException e) {
      throw new PersistenceException(""String_Node_Str"" + e);
    }
  }
}"
77967,"/** 
 * Constructor with unknown id will set id to Integer.MIN_VALUE and persistence layer has to provide a valid id
 * @param name - no empty profile name
 */
public Profile(String name){
  this(Integer.MIN_VALUE,name,new ArrayList<PairCameraPosition>(),new ArrayList<PairLogoRelativeRectangle>(),false,false,false,false,""String_Node_Str"",false);
}","/** 
 * Constructor with unknown id will set id to Integer.MIN_VALUE and persistence layer has to provide a valid id
 * @param name - no empty profile name
 */
public Profile(String name){
  this(Integer.MIN_VALUE,name,new ArrayList<>(),new ArrayList<>(),new ArrayList<>(),false,false,false,false,""String_Node_Str"",false);
}"
77968,"public void setFilterName(String filteName){
  this.filterName=filterName;
}","public void setFilterName(String filterName){
  this.filterName=filterName;
}"
77969,"@Before public void setUp() throws Exception {
  this.con=H2EmbeddedHandler.getInstance().getTestConnection();
  when(mockH2Handler.getConnection()).thenReturn(mockConnection);
  when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
  when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
  when(mockStatement.executeUpdate(anyString())).thenReturn(1);
  when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
  when(mockConnection.prepareStatement(anyString(),anyInt())).thenReturn(mockPreparedStatement);
  when(mockConnection.createStatement()).thenReturn(mockStatement);
  when(mockPreparedStatement.getGeneratedKeys()).thenReturn(mockResultSet);
  when(mockResultSet.next()).thenReturn(Boolean.TRUE,Boolean.FALSE);
  mockLogoDAO=new JDBCLogoDAO(mockH2Handler);
  mockCameraDAO=new JDBCCameraDAO(mockH2Handler);
  mockPositionDAO=new JDBCPositionDAO(mockH2Handler);
  mockPairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(mockH2Handler);
  mockPairCameraPositionDAO=new JDCBPairCameraPositionDAO(mockH2Handler);
  mockProfileDAO=new JDBCProfileDAO(mockH2Handler);
  mockImageDAO=new JDBCImageDAO(mockH2Handler);
  mockShootingDAO=new JDBCShootingDAO(mockH2Handler);
  mockbackgroundCategoryDAO=new JDBCBackgroundCategoryDAO(mockH2Handler);
  logoDAO=new JDBCLogoDAO(H2EmbeddedHandler.getInstance());
  cameraDAO=new JDBCCameraDAO(H2EmbeddedHandler.getInstance());
  positionDAO=new JDBCPositionDAO(H2EmbeddedHandler.getInstance());
  pairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(H2EmbeddedHandler.getInstance());
  pairCameraPositionDAO=new JDCBPairCameraPositionDAO(H2EmbeddedHandler.getInstance());
  profileDAO=new JDBCProfileDAO(H2EmbeddedHandler.getInstance());
  imageDAO=new JDBCImageDAO(H2EmbeddedHandler.getInstance());
  shootingDAO=new JDBCShootingDAO(H2EmbeddedHandler.getInstance());
  adminUserDAO=new JDBCAdminUserDAO(H2EmbeddedHandler.getInstance());
  backgroundCategoryDAO=new JDBCBackgroundCategoryDAO(H2EmbeddedHandler.getInstance());
  profileService=new ProfileServiceImpl(new JDBCProfileDAO(H2EmbeddedHandler.getInstance()),new JDBCPositionDAO(H2EmbeddedHandler.getInstance()),new JDBCLogoDAO(H2EmbeddedHandler.getInstance()),new JDBCCameraDAO(H2EmbeddedHandler.getInstance()),new ShootingServiceImpl());
  try {
    con.setAutoCommit(false);
    LOGGER.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
  String deletePath=this.getClass().getResource(""String_Node_Str"").getPath();
  String insertPath=this.getClass().getResource(""String_Node_Str"").getPath();
  ResultSet rs=RunScript.execute(con,new FileReader(deletePath));
  if (rs != null && !rs.isClosed())   rs.close();
  rs=RunScript.execute(con,new FileReader(insertPath));
  if (rs != null && !rs.isClosed())   rs.close();
  cameraA=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  positionA=new Position(""String_Node_Str"",""String_Node_Str"");
  logoA=new Logo(""String_Node_Str"",""String_Node_Str"");
  camera1=cameraDAO.read(1);
  camera2=cameraDAO.read(2);
  position1=positionDAO.read(1);
  position2=positionDAO.read(2);
  logo1=logoDAO.read(1);
  logo2=logoDAO.read(2);
  relativeRectangleA=new RelativeRectangle(10.1,10.2,30.3,30.4);
  relativeRectangleB=new RelativeRectangle(80.1,80.2,10.3,10.4);
  relativeRectangleC=new RelativeRectangle(1,2,3,4);
  pairCameraPositions=new ArrayList<>();
  pairCameraPositionA=new Profile.PairCameraPosition(camera1,position1,true);
  pairCameraPositionB=new Profile.PairCameraPosition(camera2,position2,false);
  pairCameraPositionC=new Profile.PairCameraPosition(cameraA,positionA,true);
  pairCameraPositions.add(pairCameraPositionA);
  pairCameraPositions.add(pairCameraPositionB);
  pairLogoRelativeRectangles=new ArrayList<>();
  pairLogoRelativeRectangleA=new Profile.PairLogoRelativeRectangle(logo1,relativeRectangleA);
  pairLogoRelativeRectangleB=new Profile.PairLogoRelativeRectangle(logo2,relativeRectangleB);
  pairLogoRelativeRectangleC=new Profile.PairLogoRelativeRectangle(logoA,relativeRectangleC);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleA);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleB);
  profileA=new Profile(""String_Node_Str"");
  profileB=new Profile(""String_Node_Str"",true,true,true,true,""String_Node_Str"");
  profileC=new Profile(20,""String_Node_Str"",pairCameraPositions,pairLogoRelativeRectangles,true,true,true,true,""String_Node_Str"",false);
  backgroundCategoryA=new Background.Category(""String_Node_Str"");
  backgroundCategoryB=new Background.Category(""String_Node_Str"");
  backgroundCategory10=new Background.Category(10,""String_Node_Str"",false);
}","@Before public void setUp() throws Exception {
  this.con=H2EmbeddedHandler.getInstance().getTestConnection();
  when(mockH2Handler.getConnection()).thenReturn(mockConnection);
  when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
  when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
  when(mockStatement.executeUpdate(anyString())).thenReturn(1);
  when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
  when(mockConnection.prepareStatement(anyString(),anyInt())).thenReturn(mockPreparedStatement);
  when(mockConnection.createStatement()).thenReturn(mockStatement);
  when(mockPreparedStatement.getGeneratedKeys()).thenReturn(mockResultSet);
  when(mockResultSet.next()).thenReturn(Boolean.TRUE,Boolean.FALSE);
  mockLogoDAO=new JDBCLogoDAO(mockH2Handler);
  mockCameraDAO=new JDBCCameraDAO(mockH2Handler);
  mockPositionDAO=new JDBCPositionDAO(mockH2Handler);
  mockPairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(mockH2Handler);
  mockPairCameraPositionDAO=new JDCBPairCameraPositionDAO(mockH2Handler);
  mockProfileDAO=new JDBCProfileDAO(mockH2Handler);
  mockImageDAO=new JDBCImageDAO(mockH2Handler);
  mockShootingDAO=new JDBCShootingDAO(mockH2Handler);
  mockbackgroundCategoryDAO=new JDBCBackgroundCategoryDAO(mockH2Handler);
  logoDAO=new JDBCLogoDAO(H2EmbeddedHandler.getInstance());
  cameraDAO=new JDBCCameraDAO(H2EmbeddedHandler.getInstance());
  positionDAO=new JDBCPositionDAO(H2EmbeddedHandler.getInstance());
  pairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(H2EmbeddedHandler.getInstance());
  pairCameraPositionDAO=new JDCBPairCameraPositionDAO(H2EmbeddedHandler.getInstance());
  profileDAO=new JDBCProfileDAO(H2EmbeddedHandler.getInstance());
  imageDAO=new JDBCImageDAO(H2EmbeddedHandler.getInstance());
  shootingDAO=new JDBCShootingDAO(H2EmbeddedHandler.getInstance());
  adminUserDAO=new JDBCAdminUserDAO(H2EmbeddedHandler.getInstance());
  backgroundCategoryDAO=new JDBCBackgroundCategoryDAO(H2EmbeddedHandler.getInstance());
  profileService=new ProfileServiceImpl(new JDBCProfileDAO(H2EmbeddedHandler.getInstance()),new JDBCPositionDAO(H2EmbeddedHandler.getInstance()),new JDBCLogoDAO(H2EmbeddedHandler.getInstance()),new JDBCCameraDAO(H2EmbeddedHandler.getInstance()),new ShootingServiceImpl());
  try {
    con.setAutoCommit(false);
    LOGGER.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
  String deletePath=this.getClass().getResource(""String_Node_Str"").getPath();
  String insertPath=this.getClass().getResource(""String_Node_Str"").getPath();
  ResultSet rs=RunScript.execute(con,new FileReader(deletePath));
  if (rs != null && !rs.isClosed())   rs.close();
  rs=RunScript.execute(con,new FileReader(insertPath));
  if (rs != null && !rs.isClosed())   rs.close();
  cameraA=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  positionA=new Position(""String_Node_Str"",""String_Node_Str"");
  logoA=new Logo(""String_Node_Str"",""String_Node_Str"");
  camera1=cameraDAO.read(1);
  camera2=cameraDAO.read(2);
  position1=positionDAO.read(1);
  position2=positionDAO.read(2);
  logo1=logoDAO.read(1);
  logo2=logoDAO.read(2);
  relativeRectangleA=new RelativeRectangle(10.1,10.2,30.3,30.4);
  relativeRectangleB=new RelativeRectangle(80.1,80.2,10.3,10.4);
  relativeRectangleC=new RelativeRectangle(1,2,3,4);
  pairCameraPositions=new ArrayList<>();
  pairCameraPositionA=new Profile.PairCameraPosition(camera1,position1,true);
  pairCameraPositionB=new Profile.PairCameraPosition(camera2,position2,false);
  pairCameraPositionC=new Profile.PairCameraPosition(cameraA,positionA,true);
  pairCameraPositions.add(pairCameraPositionA);
  pairCameraPositions.add(pairCameraPositionB);
  pairLogoRelativeRectangles=new ArrayList<>();
  pairLogoRelativeRectangleA=new Profile.PairLogoRelativeRectangle(logo1,relativeRectangleA);
  pairLogoRelativeRectangleB=new Profile.PairLogoRelativeRectangle(logo2,relativeRectangleB);
  pairLogoRelativeRectangleC=new Profile.PairLogoRelativeRectangle(logoA,relativeRectangleC);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleA);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleB);
  profileA=new Profile(""String_Node_Str"");
  profileB=new Profile(""String_Node_Str"",true,true,true,true,""String_Node_Str"");
  profileC=new Profile(20,""String_Node_Str"",pairCameraPositions,pairLogoRelativeRectangles,new ArrayList<>(),true,true,true,true,""String_Node_Str"",false);
  backgroundCategoryA=new Background.Category(""String_Node_Str"");
  backgroundCategoryB=new Background.Category(""String_Node_Str"");
  backgroundCategory10=new Background.Category(10,""String_Node_Str"",false);
}"
77970,"/** 
 * on time image pressed
 */
public void ontimerPressed(){
  unmark();
  ontime.setStyle(""String_Node_Str"");
  currentMode[index]=2;
}","/** 
 * on time image pressed
 */
public void ontimerPressed(){
  unmark();
  ontime.setStyle(""String_Node_Str"");
  singel.setStyle(""String_Node_Str"");
  currentMode=2;
  kameraFilterService.setcurrent(index,currentMode);
}"
77971,"/** 
 * on single image pressed
 */
public void onsingelPressed(){
  unmark();
  singel.setStyle(""String_Node_Str"");
  currentMode[index]=0;
}","/** 
 * on single image pressed
 */
public void onsingelPressed(){
  unmark();
  singel.setStyle(""String_Node_Str"");
  currentMode=0;
  kameraFilterService.setcurrent(index,currentMode);
}"
77972,"@Autowired public KameraFilterController(FilterService filterService,ProfileService profileService,WindowManager wm,ImageService imageService,ShootingService shootingService){
  this.profileservice=profileService;
  this.wm=wm;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.filterService=filterService;
  try {
    profile=profileService.get(shootingService.searchIsActive().getProfileid());
    currentMode=new Integer[profile.getPairCameraPositions().size()];
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}","@Autowired public KameraFilterController(KameraFilterService kameraFilterService,FilterService filterService,ProfileService profileService,WindowManager wm,ImageService imageService,ShootingService shootingService){
  this.profileservice=profileService;
  this.wm=wm;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.filterService=filterService;
  this.kameraFilterService=kameraFilterService;
}"
77973,"/** 
 * on serien pictures pressed
 */
public void onserienPressed(){
  unmark();
  serien.setStyle(""String_Node_Str"");
  currentMode[index]=1;
}","/** 
 * on serien pictures pressed
 */
public void onserienPressed(){
  unmark();
  serien.setStyle(""String_Node_Str"");
  currentMode=1;
  kameraFilterService.setcurrent(index,currentMode);
}"
77974,"/** 
 * desides whether an new fiter imge is chousen or green screen
 * @param index current mode
 * @param idFilter current filter id
 * @param greenscreen boolean green screen or not
 */
public void currentlychousen(int index,int idFilter,boolean greenscreen){
  this.index=index;
  fId=idFilter;
  titel.setText(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + index + ""String_Node_Str""+ currentMode.length);
  try {
    if (index > -1) {
      if (profile == null) {
        profile=profileservice.get(shootingService.searchIsActive().getProfileid());
      }
      if (!first) {
        firstVisit();
        currentMode[this.index]=1;
        singel.setStyle(""String_Node_Str"");
      }
      if (profile != profileservice.get(shootingService.searchIsActive().getProfileid())) {
        profile=profileservice.get(shootingService.searchIsActive().getProfileid());
        currentMode=new Integer[profile.getPairCameraPositions().size()];
        currentMode[this.index]=1;
      }
switch (currentMode[this.index]) {
case 0:
        singel.setStyle(""String_Node_Str"");
      break;
case 1:
    serien.setStyle(""String_Node_Str"");
  break;
case 2:
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
break;
}
if (greenscreen) {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
creatGreenscreenButton();
}
 else {
if (buttonList.isEmpty()) {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
creatButtons();
}
 else {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
loadButton();
}
}
}
}
 catch (ServiceException e) {
LOGGER.debug(""String_Node_Str"",e);
}
}","/** 
 * desides whether an new fiter imge is chousen or green screen
 * @param index current mode
 * @param idFilter current filter id
 * @param greenscreen boolean green screen or not
 */
public void currentlychousen(int index,int idFilter,boolean greenscreen){
  this.index=index;
  currentMode=kameraFilterService.getcurrent(index);
  fId=idFilter;
  titel.setText(""String_Node_Str"");
  try {
    if (index > -1) {
      if (profile != profileservice.get(shootingService.searchIsActive().getProfileid())) {
        profile=profileservice.get(shootingService.searchIsActive().getProfileid());
      }
switch (currentMode) {
case 0:
        singel.setStyle(""String_Node_Str"");
      ontime.setStyle(""String_Node_Str"");
    serien.setStyle(""String_Node_Str"");
  break;
case 1:
serien.setStyle(""String_Node_Str"");
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
break;
case 2:
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
serien.setStyle(""String_Node_Str"");
break;
}
if (greenscreen) {
titel.setText(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
titel.setVisible(true);
creatGreenscreenButton();
}
 else {
if (buttonList.isEmpty()) {
titel.setText(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
titel.setVisible(true);
creatButtons();
}
 else {
titel.setText(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
titel.setVisible(true);
loadButton();
}
}
}
}
 catch (ServiceException e) {
LOGGER.debug(""String_Node_Str"",e);
}
}"
77975,"private void unmark(){
  try {
    int i=currentMode[index];
switch (i) {
case 0:
      singel.setStyle(""String_Node_Str"");
    break;
case 1:
  serien.setStyle(""String_Node_Str"");
break;
case 2:
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
break;
}
}
 catch (NullPointerException n) {
LOGGER.error(""String_Node_Str"",n);
}
}","private void unmark(){
  try {
    int i=currentMode;
switch (i) {
case 0:
      singel.setStyle(""String_Node_Str"");
    break;
case 1:
  serien.setStyle(""String_Node_Str"");
break;
case 2:
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
break;
}
}
 catch (NullPointerException n) {
LOGGER.error(""String_Node_Str"",n);
}
}"
77976,"/** 
 * gives currentMode
 * @return current mode (on time, single, serien)
 */
public int getCurrentMode(){
  return currentMode[index];
}","/** 
 * gives currentMode
 * @return current mode (on time, single, serien)
 */
public int getCurrentMode(){
  return currentMode;
}"
77977,"/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @param applicationContext the applicationContext generated in the MainApplication
 * @throws IOException
 */
public void start(Stage mainStage,ApplicationContext applicationContext) throws IOException {
  this.mainStage=mainStage;
  this.applicationContext=applicationContext;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + css);
  int sice=(int)(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,ProfileFrameController> profileWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ProfileFrameController.class);
  this.profileScene=new Scene((Parent)profileWrapper.getLoadedObject(),screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csssett);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(csssett.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,CostumerFrameController> costumerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CostumerFrameController.class);
  Parent parentcos=(Parent)costumerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,KameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",KameraFilterController.class);
  this.kamerafilterScene=new Scene((Parent)kameraFilterFXMLWrapper.getLoadedObject(),screenWidth,screenHeight);
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}","/** 
 * Starts the WindowManager instance, which will open the stages and prepare all necessary scenes.
 * @param mainStage the MainStage, which will be used to show the Scenes that the users directly interact with.
 * @param applicationContext the applicationContext generated in the MainApplication
 * @throws IOException
 */
public void start(Stage mainStage,ApplicationContext applicationContext) throws IOException {
  this.mainStage=mainStage;
  this.applicationContext=applicationContext;
  double screenWidth=Screen.getPrimary().getBounds().getWidth();
  double screenHeight=Screen.getPrimary().getBounds().getHeight();
  LOGGER.info(""String_Node_Str"" + screenWidth + ""String_Node_Str""+ screenHeight);
  setFontSize(screenWidth,screenHeight);
  if (fontSize == 0) {
    LOGGER.debug(""String_Node_Str"");
    fontSize=16;
  }
  SpringFXMLLoader.FXMLWrapper<Object,FullScreenImageController> pictureWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",FullScreenImageController.class);
  Parent root=(Parent)pictureWrapper.getLoadedObject();
  URL cssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssf);
  root.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  root.getStylesheets().add(cssf.toExternalForm());
  this.pictureFullScene=new Scene(root,screenWidth,screenHeight);
  this.pictureController=pictureWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,MainFrameController> mfWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MainFrameController.class);
  Parent parentmain=(Parent)mfWrapper.getLoadedObject();
  URL css=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + css);
  int sice=(int)(fontSize * 3);
  parentmain.setStyle(""String_Node_Str"" + sice + ""String_Node_Str"");
  parentmain.getStylesheets().add(css.toExternalForm());
  this.mainScene=new Scene(parentmain,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,ShootingAdminController> shootingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ShootingAdminController.class);
  Parent parentsf=(Parent)shootingWrapper.getLoadedObject();
  URL csssf=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csssf);
  parentsf.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentsf.getStylesheets().add(csssf.toExternalForm());
  this.shootingScene=new Scene(parentsf,screenWidth,screenHeight);
  this.shootingAdminController=shootingWrapper.getController();
  SpringFXMLLoader.FXMLWrapper<Object,ProfileFrameController> profileWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",ProfileFrameController.class);
  this.profileScene=new Scene((Parent)profileWrapper.getLoadedObject(),screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,SettingFrameController> settingWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",SettingFrameController.class);
  Parent parentsett=(Parent)settingWrapper.getLoadedObject();
  this.settingScene=new Scene(parentsett,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,LoginFrameController> adminLoginWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",LoginFrameController.class);
  Parent parentad=(Parent)adminLoginWrapper.getLoadedObject();
  URL cssad=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + cssad);
  parentad.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentad.getStylesheets().add(cssad.toExternalForm());
  this.adminLoginScene=new Scene(parentad,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,MiniaturFrameController> miniWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",MiniaturFrameController.class);
  Parent parentmin=(Parent)miniWrapper.getLoadedObject();
  URL csssett=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csssett);
  parentmin.setStyle(""String_Node_Str"" + fontSize + ""String_Node_Str"");
  parentmin.getStylesheets().add(csssett.toExternalForm());
  this.miniaturScene=new Scene(parentmin,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,CostumerFrameController> costumerWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",CostumerFrameController.class);
  Parent parentcos=(Parent)costumerWrapper.getLoadedObject();
  URL csscos=this.getClass().getResource(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"" + csscos);
  parentcos.setStyle(""String_Node_Str"" + fontSize * 3 + ""String_Node_Str"");
  parentcos.getStylesheets().add(csscos.toExternalForm());
  this.customerScene=new Scene(parentcos,screenWidth,screenHeight);
  SpringFXMLLoader.FXMLWrapper<Object,KameraFilterController> kameraFilterFXMLWrapper=springFXMLLoader.loadAndWrap(""String_Node_Str"",KameraFilterController.class);
  this.kamerafilterScene=new Scene((Parent)kameraFilterFXMLWrapper.getLoadedObject(),screenWidth,screenHeight);
  kameraFilterController=kameraFilterFXMLWrapper.getController();
  try {
    miniWrapper.getController().init(mainStage);
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  this.mainStage.setTitle(""String_Node_Str"");
  if (activeShootingAvailable) {
    showAdminLogin(SHOW_CUSTOMERSCENE,END_APPLICATION);
  }
 else {
    showAdminLogin(SHOW_MAINSCENE,END_APPLICATION);
  }
  this.mainStage.setFullScreen(true);
  this.mainStage.show();
  this.mainStage.setFullScreenExitHint(""String_Node_Str"");
}"
77978,"@Autowired public KameraFilterController(FilterService filterService,ProfileService profileService,WindowManager wm,ImageService imageService,ShootingService shootingService){
  this.profileservice=profileService;
  this.wm=wm;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.filterService=filterService;
}","@Autowired public KameraFilterController(FilterService filterService,ProfileService profileService,WindowManager wm,ImageService imageService,ShootingService shootingService){
  this.profileservice=profileService;
  this.wm=wm;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.filterService=filterService;
  try {
    profile=profileService.get(shootingService.searchIsActive().getProfileid());
    currentMode=new Integer[profile.getPairCameraPositions().size()];
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}"
77979,"/** 
 * desides whether an new fiter imge is chousen or green screen
 * @param index current mode
 * @param idFilter current filter id
 * @param greenscreen boolean green screen or not
 */
public void currentlychousen(int index,int idFilter,boolean greenscreen){
  this.index=index;
  LOGGER.debug(""String_Node_Str"" + index);
  fId=idFilter;
  titel.setText(""String_Node_Str"");
  try {
    if (profile == null) {
      profile=profileservice.get(shootingService.searchIsActive().getProfileid());
    }
    if (profile != profileservice.get(shootingService.searchIsActive().getProfileid())) {
      profile=profileservice.get(shootingService.searchIsActive().getProfileid());
      currentMode=new Integer[profile.getPairCameraPositions().size()];
    }
    if (!first) {
      firstVisit();
    }
    if (currentMode[this.index] == null) {
      currentMode[this.index]=1;
    }
switch (currentMode[this.index]) {
case 0:
      singel.setStyle(""String_Node_Str"");
    break;
case 1:
  serien.setStyle(""String_Node_Str"");
break;
case 2:
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
break;
}
if (greenscreen) {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
creatGreenscreenButton();
}
 else {
if (buttonList.isEmpty()) {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
creatButtons();
}
 else {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
loadButton();
}
}
}
 catch (ServiceException e) {
LOGGER.debug(""String_Node_Str"",e);
}
}","/** 
 * desides whether an new fiter imge is chousen or green screen
 * @param index current mode
 * @param idFilter current filter id
 * @param greenscreen boolean green screen or not
 */
public void currentlychousen(int index,int idFilter,boolean greenscreen){
  this.index=index;
  fId=idFilter;
  titel.setText(""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + index + ""String_Node_Str""+ currentMode.length);
  try {
    if (index > -1) {
      if (profile == null) {
        profile=profileservice.get(shootingService.searchIsActive().getProfileid());
      }
      if (!first) {
        firstVisit();
        currentMode[this.index]=1;
        singel.setStyle(""String_Node_Str"");
      }
      if (profile != profileservice.get(shootingService.searchIsActive().getProfileid())) {
        profile=profileservice.get(shootingService.searchIsActive().getProfileid());
        currentMode=new Integer[profile.getPairCameraPositions().size()];
        currentMode[this.index]=1;
      }
switch (currentMode[this.index]) {
case 0:
        singel.setStyle(""String_Node_Str"");
      break;
case 1:
    serien.setStyle(""String_Node_Str"");
  break;
case 2:
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
break;
}
if (greenscreen) {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
creatGreenscreenButton();
}
 else {
if (buttonList.isEmpty()) {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
creatButtons();
}
 else {
titel=new Label(""String_Node_Str"" + profileservice.getAllPairCameraPositionOfProfile().get(index).getCamera().getId() + ""String_Node_Str"");
loadButton();
}
}
}
}
 catch (ServiceException e) {
LOGGER.debug(""String_Node_Str"",e);
}
}"
77980,"private void unmark(){
  try {
switch (currentMode[index]) {
case 0:
      singel.setStyle(""String_Node_Str"");
    break;
case 1:
  serien.setStyle(""String_Node_Str"");
break;
case 2:
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
break;
}
}
 catch (NullPointerException n) {
LOGGER.error(""String_Node_Str"",n);
}
}","private void unmark(){
  try {
    int i=currentMode[index];
switch (i) {
case 0:
      singel.setStyle(""String_Node_Str"");
    break;
case 1:
  serien.setStyle(""String_Node_Str"");
break;
case 2:
ontime.setStyle(""String_Node_Str"");
singel.setStyle(""String_Node_Str"");
break;
}
}
 catch (NullPointerException n) {
LOGGER.error(""String_Node_Str"",n);
}
}"
77981,"/** 
 * Insert test data into the database
 * @throws FileNotFoundException if the create-script is not found in the specified folder.
 * @throws SQLException if an error occurs while running the script on the database.
 */
private void insertData() throws FileNotFoundException, SQLException {
  try {
    String sqlFolder=this.getClass().getResource(fileSep + ""String_Node_Str"" + fileSep).getPath();
    ResultSet rs=RunScript.execute(connection,new FileReader(sqlFolder + ""String_Node_Str""));
    if (rs != null)     rs.close();
  }
 catch (  FileNotFoundException|SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw e;
  }
}","/** 
 * Insert test data into the database
 * @throws FileNotFoundException if the create-script is not found in the specified folder.
 * @throws SQLException if an error occurs while running the script on the database.
 */
private void insertData() throws FileNotFoundException, SQLException {
  try {
    String insertPath=this.getClass().getResource(""String_Node_Str"").getPath();
    ResultSet rs=RunScript.execute(connection,new FileReader(insertPath));
    if (rs != null)     rs.close();
  }
 catch (  FileNotFoundException|SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw e;
  }
}"
77982,"private void setUpDefaultImgs() throws PersistenceException {
  String fSep=File.separator;
  String destPath=System.getProperty(""String_Node_Str"") + fSep + ""String_Node_Str""+ fSep+ ""String_Node_Str""+ fSep;
  String dummiesDir=this.getClass().getResource(fSep + ""String_Node_Str"" + fSep+ ""String_Node_Str""+ fSep).getPath();
  String logoDir=this.getClass().getResource(fSep + ""String_Node_Str"" + fSep+ ""String_Node_Str""+ fSep).getPath();
  String image1=""String_Node_Str"";
  String image2=""String_Node_Str"";
  String logo1=""String_Node_Str"";
  String logo2=""String_Node_Str"";
  LOGGER.info(""String_Node_Str"" + dummiesDir);
  Path img1Source=Paths.get(dummiesDir + image1);
  Path img2Source=Paths.get(dummiesDir + image2);
  Path logo1Source=Paths.get(logoDir + logo1);
  Path logo2Source=Paths.get(logoDir + logo2);
  Path img1Dest=Paths.get(destPath + image1);
  Path img2Dest=Paths.get(destPath + image2);
  Path logo1Dest=Paths.get(destPath + logo1);
  Path logo2Dest=Paths.get(destPath + logo2);
  PreparedStatement stmt=null;
  try {
    if (!img1Dest.getParent().toFile().exists()) {
      Files.createDirectory(img1Dest.getParent());
    }
    Files.copy(img1Source,img1Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(img2Source,img2Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(logo1Source,logo1Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(logo2Source,logo2Dest,StandardCopyOption.REPLACE_EXISTING);
    stmt=connection.prepareStatement(""String_Node_Str"");
    stmt.setString(1,destPath + image1);
    stmt.setInt(2,1);
    stmt.execute();
    stmt.setString(1,destPath + image2);
    stmt.setInt(2,2);
    stmt.execute();
    stmt.close();
    stmt=connection.prepareStatement(""String_Node_Str"");
    stmt.setString(1,destPath + logo1);
    stmt.setString(2,""String_Node_Str"");
    stmt.setInt(3,1);
    stmt.execute();
    stmt.setString(1,destPath + logo2);
    stmt.setString(2,""String_Node_Str"");
    stmt.setInt(3,2);
    stmt.execute();
  }
 catch (  IOException|SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"",e);
        throw new PersistenceException(e);
      }
    }
  }
}","private void setUpDefaultImgs() throws PersistenceException {
  String destPath=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  String image1=this.getClass().getResource(""String_Node_Str"").getPath();
  String image2=this.getClass().getResource(""String_Node_Str"").getPath();
  String logo1=this.getClass().getResource(""String_Node_Str"").getPath();
  String logo2=this.getClass().getResource(""String_Node_Str"").getPath();
  Path img1Source=Paths.get(image1);
  Path img2Source=Paths.get(image2);
  Path logo1Source=Paths.get(logo1);
  Path logo2Source=Paths.get(logo2);
  Path img1Dest=Paths.get(destPath + ""String_Node_Str"");
  Path img2Dest=Paths.get(destPath + ""String_Node_Str"");
  Path logo1Dest=Paths.get(destPath + ""String_Node_Str"");
  Path logo2Dest=Paths.get(destPath + ""String_Node_Str"");
  PreparedStatement stmt=null;
  try {
    if (!img1Dest.getParent().toFile().exists()) {
      Files.createDirectory(img1Dest.getParent());
    }
    Files.copy(img1Source,img1Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(img2Source,img2Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(logo1Source,logo1Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(logo2Source,logo2Dest,StandardCopyOption.REPLACE_EXISTING);
    stmt=connection.prepareStatement(""String_Node_Str"");
    stmt.setString(1,destPath + image1);
    stmt.setInt(2,1);
    stmt.execute();
    stmt.setString(1,destPath + image2);
    stmt.setInt(2,2);
    stmt.execute();
    stmt.close();
    stmt=connection.prepareStatement(""String_Node_Str"");
    stmt.setString(1,destPath + logo1);
    stmt.setString(2,""String_Node_Str"");
    stmt.setInt(3,1);
    stmt.execute();
    stmt.setString(1,destPath + logo2);
    stmt.setString(2,""String_Node_Str"");
    stmt.setInt(3,2);
    stmt.execute();
  }
 catch (  IOException|SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"",e);
        throw new PersistenceException(e);
      }
    }
  }
}"
77983,"/** 
 * Runs the create.sql-script on the database.
 * @throws FileNotFoundException if the create-script is not found in the specified folder.
 * @throws SQLException if an error occurs while running the script on the database.
 */
private void firstStartup() throws FileNotFoundException, SQLException, PersistenceException {
  try {
    String sqlFolder=this.getClass().getResource(fileSep + ""String_Node_Str"" + fileSep).getPath();
    ResultSet rs=RunScript.execute(connection,new FileReader(sqlFolder + ""String_Node_Str""));
    if (rs != null)     rs.close();
    if (!testState)     rs=RunScript.execute(connection,new FileReader(sqlFolder + ""String_Node_Str""));
    if (rs != null)     rs.close();
  }
 catch (  FileNotFoundException|SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw e;
  }
  if (!testState) {
    insertData();
    setUpDefaultImgs();
    LOGGER.info(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"");
}","/** 
 * Runs the create.sql-script on the database.
 * @throws FileNotFoundException if the create-script is not found in the specified folder.
 * @throws SQLException if an error occurs while running the script on the database.
 */
private void firstStartup() throws FileNotFoundException, SQLException, PersistenceException {
  try {
    String createPath=this.getClass().getResource(""String_Node_Str"").getPath();
    String initPath=this.getClass().getResource(""String_Node_Str"").getPath();
    ResultSet rs=RunScript.execute(connection,new FileReader(createPath));
    if (rs != null)     rs.close();
    if (!testState)     rs=RunScript.execute(connection,new FileReader(initPath));
    if (rs != null)     rs.close();
  }
 catch (  FileNotFoundException|SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw e;
  }
  if (!testState) {
    insertData();
    setUpDefaultImgs();
    LOGGER.info(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"");
}"
77984,"@Before public void setUp() throws Exception {
  when(mockH2Handler.getConnection()).thenReturn(mockConnection);
  when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
  when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
  when(mockStatement.executeUpdate(anyString())).thenReturn(1);
  when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
  when(mockConnection.prepareStatement(anyString(),anyInt())).thenReturn(mockPreparedStatement);
  when(mockConnection.createStatement()).thenReturn(mockStatement);
  when(mockPreparedStatement.getGeneratedKeys()).thenReturn(mockResultSet);
  when(mockResultSet.next()).thenReturn(Boolean.TRUE,Boolean.FALSE);
  mockLogoDAO=new JDBCLogoDAO(mockH2Handler);
  mockCameraDAO=new JDBCCameraDAO(mockH2Handler);
  mockPositionDAO=new JDBCPositionDAO(mockH2Handler);
  mockPairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(mockH2Handler);
  mockPairCameraPositionDAO=new JDCBPairCameraPositionDAO(mockH2Handler);
  mockProfileDAO=new JDBCProfileDAO(mockH2Handler);
  mockImageDAO=new JDBCImageDAO(mockH2Handler);
  mockShootingDAO=new JDBCShootingDAO(mockH2Handler);
  this.con=H2EmbeddedHandler.getInstance().getTestConnection();
  logoDAO=new JDBCLogoDAO(H2EmbeddedHandler.getInstance());
  cameraDAO=new JDBCCameraDAO(H2EmbeddedHandler.getInstance());
  positionDAO=new JDBCPositionDAO(H2EmbeddedHandler.getInstance());
  pairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(H2EmbeddedHandler.getInstance());
  pairCameraPositionDAO=new JDCBPairCameraPositionDAO(H2EmbeddedHandler.getInstance());
  profileDAO=new JDBCProfileDAO(H2EmbeddedHandler.getInstance());
  imageDAO=new JDBCImageDAO(H2EmbeddedHandler.getInstance());
  shootingDAO=new JDBCShootingDAO(H2EmbeddedHandler.getInstance());
  adminUserDAO=new JDBCAdminUserDAO(H2EmbeddedHandler.getInstance());
  profileService=new ProfileServiceImpl(new JDBCProfileDAO(H2EmbeddedHandler.getInstance()),new JDBCPositionDAO(H2EmbeddedHandler.getInstance()),new JDBCLogoDAO(H2EmbeddedHandler.getInstance()),new JDBCCameraDAO(H2EmbeddedHandler.getInstance()),new ShootingServiceImpl());
  try {
    con.setAutoCommit(false);
    LOGGER.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
  String sqlFolder=this.getClass().getResource(File.separator + ""String_Node_Str"" + File.separator).getPath();
  ResultSet rs=RunScript.execute(con,new FileReader(sqlFolder + ""String_Node_Str""));
  if (rs != null && !rs.isClosed())   rs.close();
  rs=RunScript.execute(con,new FileReader(sqlFolder + ""String_Node_Str""));
  if (rs != null && !rs.isClosed())   rs.close();
  cameraA=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  positionA=new Position(""String_Node_Str"",""String_Node_Str"");
  logoA=new Logo(""String_Node_Str"",""String_Node_Str"");
  camera1=cameraDAO.read(1);
  camera2=cameraDAO.read(2);
  position1=positionDAO.read(1);
  position2=positionDAO.read(2);
  logo1=logoDAO.read(1);
  logo2=logoDAO.read(2);
  relativeRectangleA=new RelativeRectangle(10.1,10.2,30.3,30.4);
  relativeRectangleB=new RelativeRectangle(80.1,80.2,10.3,10.4);
  relativeRectangleC=new RelativeRectangle(1,2,3,4);
  pairCameraPositions=new ArrayList<>();
  pairCameraPositionA=new Profile.PairCameraPosition(camera1,position1,true);
  pairCameraPositionB=new Profile.PairCameraPosition(camera2,position2,false);
  pairCameraPositionC=new Profile.PairCameraPosition(cameraA,positionA,true);
  pairCameraPositions.add(pairCameraPositionA);
  pairCameraPositions.add(pairCameraPositionB);
  pairLogoRelativeRectangles=new ArrayList<>();
  pairLogoRelativeRectangleA=new Profile.PairLogoRelativeRectangle(logo1,relativeRectangleA);
  pairLogoRelativeRectangleB=new Profile.PairLogoRelativeRectangle(logo2,relativeRectangleB);
  pairLogoRelativeRectangleC=new Profile.PairLogoRelativeRectangle(logoA,relativeRectangleC);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleA);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleB);
  profileA=new Profile(""String_Node_Str"");
  profileB=new Profile(""String_Node_Str"",true,true,true,true,""String_Node_Str"");
  profileC=new Profile(20,""String_Node_Str"",pairCameraPositions,pairLogoRelativeRectangles,true,true,true,true,""String_Node_Str"",false);
}","@Before public void setUp() throws Exception {
  this.con=H2EmbeddedHandler.getInstance().getTestConnection();
  when(mockH2Handler.getConnection()).thenReturn(mockConnection);
  when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
  when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
  when(mockStatement.executeUpdate(anyString())).thenReturn(1);
  when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
  when(mockConnection.prepareStatement(anyString(),anyInt())).thenReturn(mockPreparedStatement);
  when(mockConnection.createStatement()).thenReturn(mockStatement);
  when(mockPreparedStatement.getGeneratedKeys()).thenReturn(mockResultSet);
  when(mockResultSet.next()).thenReturn(Boolean.TRUE,Boolean.FALSE);
  mockLogoDAO=new JDBCLogoDAO(mockH2Handler);
  mockCameraDAO=new JDBCCameraDAO(mockH2Handler);
  mockPositionDAO=new JDBCPositionDAO(mockH2Handler);
  mockPairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(mockH2Handler);
  mockPairCameraPositionDAO=new JDCBPairCameraPositionDAO(mockH2Handler);
  mockProfileDAO=new JDBCProfileDAO(mockH2Handler);
  mockImageDAO=new JDBCImageDAO(mockH2Handler);
  mockShootingDAO=new JDBCShootingDAO(mockH2Handler);
  logoDAO=new JDBCLogoDAO(H2EmbeddedHandler.getInstance());
  cameraDAO=new JDBCCameraDAO(H2EmbeddedHandler.getInstance());
  positionDAO=new JDBCPositionDAO(H2EmbeddedHandler.getInstance());
  pairLogoRelativeRectangleDAO=new JDCBPairLogoRelativeRectangleDAO(H2EmbeddedHandler.getInstance());
  pairCameraPositionDAO=new JDCBPairCameraPositionDAO(H2EmbeddedHandler.getInstance());
  profileDAO=new JDBCProfileDAO(H2EmbeddedHandler.getInstance());
  imageDAO=new JDBCImageDAO(H2EmbeddedHandler.getInstance());
  shootingDAO=new JDBCShootingDAO(H2EmbeddedHandler.getInstance());
  adminUserDAO=new JDBCAdminUserDAO(H2EmbeddedHandler.getInstance());
  profileService=new ProfileServiceImpl(new JDBCProfileDAO(H2EmbeddedHandler.getInstance()),new JDBCPositionDAO(H2EmbeddedHandler.getInstance()),new JDBCLogoDAO(H2EmbeddedHandler.getInstance()),new JDBCCameraDAO(H2EmbeddedHandler.getInstance()),new ShootingServiceImpl());
  try {
    con.setAutoCommit(false);
    LOGGER.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new PersistenceException(""String_Node_Str"" + e);
  }
  String deletePath=this.getClass().getResource(""String_Node_Str"").getPath();
  String insertPath=this.getClass().getResource(""String_Node_Str"").getPath();
  ResultSet rs=RunScript.execute(con,new FileReader(deletePath));
  if (rs != null && !rs.isClosed())   rs.close();
  rs=RunScript.execute(con,new FileReader(insertPath));
  if (rs != null && !rs.isClosed())   rs.close();
  cameraA=new Camera(Integer.MIN_VALUE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  positionA=new Position(""String_Node_Str"",""String_Node_Str"");
  logoA=new Logo(""String_Node_Str"",""String_Node_Str"");
  camera1=cameraDAO.read(1);
  camera2=cameraDAO.read(2);
  position1=positionDAO.read(1);
  position2=positionDAO.read(2);
  logo1=logoDAO.read(1);
  logo2=logoDAO.read(2);
  relativeRectangleA=new RelativeRectangle(10.1,10.2,30.3,30.4);
  relativeRectangleB=new RelativeRectangle(80.1,80.2,10.3,10.4);
  relativeRectangleC=new RelativeRectangle(1,2,3,4);
  pairCameraPositions=new ArrayList<>();
  pairCameraPositionA=new Profile.PairCameraPosition(camera1,position1,true);
  pairCameraPositionB=new Profile.PairCameraPosition(camera2,position2,false);
  pairCameraPositionC=new Profile.PairCameraPosition(cameraA,positionA,true);
  pairCameraPositions.add(pairCameraPositionA);
  pairCameraPositions.add(pairCameraPositionB);
  pairLogoRelativeRectangles=new ArrayList<>();
  pairLogoRelativeRectangleA=new Profile.PairLogoRelativeRectangle(logo1,relativeRectangleA);
  pairLogoRelativeRectangleB=new Profile.PairLogoRelativeRectangle(logo2,relativeRectangleB);
  pairLogoRelativeRectangleC=new Profile.PairLogoRelativeRectangle(logoA,relativeRectangleC);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleA);
  pairLogoRelativeRectangles.add(pairLogoRelativeRectangleB);
  profileA=new Profile(""String_Node_Str"");
  profileB=new Profile(""String_Node_Str"",true,true,true,true,""String_Node_Str"");
  profileC=new Profile(20,""String_Node_Str"",pairCameraPositions,pairLogoRelativeRectangles,true,true,true,true,""String_Node_Str"",false);
}"
77985,"private void setUpDefaultImgs() throws PersistenceException {
  String destPath=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  String image1=this.getClass().getResource(""String_Node_Str"").getPath();
  String image2=this.getClass().getResource(""String_Node_Str"").getPath();
  String logo1=this.getClass().getResource(""String_Node_Str"").getPath();
  String logo2=this.getClass().getResource(""String_Node_Str"").getPath();
  Path img1Source=Paths.get(image1);
  Path img2Source=Paths.get(image2);
  Path logo1Source=Paths.get(logo1);
  Path logo2Source=Paths.get(logo2);
  Path img1Dest=Paths.get(destPath + ""String_Node_Str"");
  Path img2Dest=Paths.get(destPath + ""String_Node_Str"");
  Path logo1Dest=Paths.get(destPath + ""String_Node_Str"");
  Path logo2Dest=Paths.get(destPath + ""String_Node_Str"");
  PreparedStatement stmt=null;
  try {
    if (!img1Dest.getParent().toFile().exists()) {
      Files.createDirectory(img1Dest.getParent());
    }
    Files.copy(img1Source,img1Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(img2Source,img2Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(logo1Source,logo1Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(logo2Source,logo2Dest,StandardCopyOption.REPLACE_EXISTING);
    stmt=connection.prepareStatement(""String_Node_Str"");
    stmt.setString(1,destPath + image1);
    stmt.setInt(2,1);
    stmt.execute();
    stmt.setString(1,destPath + image2);
    stmt.setInt(2,2);
    stmt.execute();
    stmt.close();
    stmt=connection.prepareStatement(""String_Node_Str"");
    stmt.setString(1,destPath + logo1);
    stmt.setString(2,""String_Node_Str"");
    stmt.setInt(3,1);
    stmt.execute();
    stmt.setString(1,destPath + logo2);
    stmt.setString(2,""String_Node_Str"");
    stmt.setInt(3,2);
    stmt.execute();
  }
 catch (  IOException|SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"",e);
        throw new PersistenceException(e);
      }
    }
  }
}","private void setUpDefaultImgs() throws PersistenceException {
  String destPath=System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
  String image1=this.getClass().getResource(""String_Node_Str"").getPath();
  String image2=this.getClass().getResource(""String_Node_Str"").getPath();
  String logo1=this.getClass().getResource(""String_Node_Str"").getPath();
  String logo2=this.getClass().getResource(""String_Node_Str"").getPath();
  Path img1Source=Paths.get(image1);
  Path img2Source=Paths.get(image2);
  Path logo1Source=Paths.get(logo1);
  Path logo2Source=Paths.get(logo2);
  Path img1Dest=Paths.get(destPath + ""String_Node_Str"");
  Path img2Dest=Paths.get(destPath + ""String_Node_Str"");
  Path logo1Dest=Paths.get(destPath + ""String_Node_Str"");
  Path logo2Dest=Paths.get(destPath + ""String_Node_Str"");
  PreparedStatement stmt=null;
  try {
    if (!img1Dest.getParent().getParent().toFile().exists()) {
      Files.createDirectory(img1Dest.getParent().getParent());
    }
    if (!img1Dest.getParent().toFile().exists()) {
      Files.createDirectory(img1Dest.getParent());
    }
    Files.copy(img1Source,img1Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(img2Source,img2Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(logo1Source,logo1Dest,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(logo2Source,logo2Dest,StandardCopyOption.REPLACE_EXISTING);
    stmt=connection.prepareStatement(""String_Node_Str"");
    stmt.setString(1,destPath + ""String_Node_Str"");
    stmt.setInt(2,1);
    stmt.execute();
    stmt.setString(1,destPath + ""String_Node_Str"");
    stmt.setInt(2,2);
    stmt.execute();
    stmt.close();
    stmt=connection.prepareStatement(""String_Node_Str"");
    stmt.setString(1,destPath + ""String_Node_Str"");
    stmt.setString(2,""String_Node_Str"");
    stmt.setInt(3,1);
    stmt.execute();
    stmt.setString(1,destPath + ""String_Node_Str"");
    stmt.setString(2,""String_Node_Str"");
    stmt.setInt(3,2);
    stmt.execute();
  }
 catch (  IOException|SQLException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new PersistenceException(e);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException e) {
        LOGGER.error(""String_Node_Str"",e);
        throw new PersistenceException(e);
      }
    }
  }
}"
77986,"public void deletePreviews(String imgPath){
  String[] parts=imgPath.split(""String_Node_Str"");
  String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"");
  if (new File(activeShooting.getStorageDir() + imgFilterName).isFile())   new File(activeShooting.getStorageDir() + imgFilterName).delete();
}","/** 
 * deleting created mini preview images in filesystem
 * @param imgPath imagepath to delete
 */
public void deletePreviews(String imgPath){
  LOGGER.info(""String_Node_Str"" + imgPath);
  String[] parts=imgPath.split(""String_Node_Str"");
  String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"");
  if (new File(activeShooting.getStorageDir() + imgFilterName).isFile())   new File(activeShooting.getStorageDir() + imgFilterName).delete();
}"
77987,"/** 
 * saves the filtered image in database...
 */
@FXML public void saveFilteredImg(){
  try {
    LOGGER.info(""String_Node_Str"");
    activeFilterImageView.setFitHeight(80);
    activeFilterImageView.setPreserveRatio(false);
    activeFilterImageView=null;
    saveFilteredButton.setVisible(false);
    ivfullscreenImage.setId(filteredImgPath);
    at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.create(new at.ac.tuwien.sepm.ws16.qse01.entities.Image(filteredImgPath,activeShooting.getId()));
    refreshManager.notifyMiniatureFrameOfAdd(newImage);
    if ((currentIndex + 1) >= imageList.size())     imageList.add(newImage);
 else {
      imageList.add(currentIndex + 1,newImage);
      currentIndex=currentIndex + 1;
    }
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * saves the filtered image in database...
 */
@FXML public void saveFilteredImg(){
  LOGGER.info(""String_Node_Str"" + filteredImgPath);
  try {
    activeFilterImageView.setFitHeight(80);
    activeFilterImageView.setPreserveRatio(false);
    saveFilteredButton.setVisible(false);
    File outputfile=null;
    System.out.println(""String_Node_Str"" + activeShooting.getStorageDir());
    try {
      BufferedImage bi=filterService.filter(activeFilterImageView.getId(),ivfullscreenImage.getId());
      String[] parts=ivfullscreenImage.getId().split(""String_Node_Str"");
      String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"" + activeFilterImageView.getId() + ""String_Node_Str"");
      outputfile=new File(activeShooting.getStorageDir() + ""String_Node_Str"" + imgFilterName);
      ImageIO.write(bi,""String_Node_Str"",outputfile);
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    activeFilterImageView=null;
    at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.create(new at.ac.tuwien.sepm.ws16.qse01.entities.Image(outputfile.getAbsolutePath(),activeShooting.getId()));
    refreshManager.notifyMiniatureFrameOfAdd(newImage);
    if ((currentIndex + 1) >= imageList.size())     imageList.add(newImage);
 else {
      imageList.add(currentIndex + 1,newImage);
    }
    currentIndex=currentIndex + 1;
    button4.setVisible(true);
    LOGGER.info(""String_Node_Str"");
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
  }
}"
77988,"/** 
 * prepares filter-imageViews by getting all filters from service and showing the filter in small preview imageviews
 * @param imgOriginalPath path of the image to show
 */
public void makePreviewFilter(String imgOriginalPath){
  LOGGER.info(""String_Node_Str"" + imgOriginalPath);
  try {
    String imgPath=filterService.resize(imgOriginalPath,80,80);
    int counter=1;
    List<String> allfilters=filterService.getExistingFilters();
    double imageFilterConstraint=(Screen.getPrimary().getBounds().getWidth() - (allfilters.size() * 100)) / 2;
    planbottom.getChildren().clear();
    if (!constraintInitialized) {
      ColumnConstraints con=new ColumnConstraints();
      con.setPrefWidth(imageFilterConstraint);
      planbottom.getColumnConstraints().add(con);
    }
    for (    String filter : allfilters) {
      ImageView imageView=new ImageView(SwingFXUtils.toFXImage(filterService.filter(filter,imgPath),null));
      if (counter == 1) {
        imageView.setFitHeight(100);
        original=imageView;
        activeFilterImageView=original;
      }
      imageView.setId(filter);
      imageView.setOnMouseClicked(e -> {
        Image filteredImage;
        ImageView imgView=(ImageView)e.getSource();
        try {
          filteredImage=SwingFXUtils.toFXImage(filterService.filter(imgView.getId(),ivfullscreenImage.getId()),null);
          if (changeActiveFilter(imgView)) {
            ivfullscreenImage.setImage(filteredImage);
            ivfullscreenImage.setFitHeight(base.getHeight());
            ivfullscreenImage.setFitWidth(base.getWidth());
          }
        }
 catch (        ServiceException e2) {
          LOGGER.error(""String_Node_Str"" + e2.getMessage());
        }
      }
);
      planbottom.add(imageView,counter,0);
      if (!constraintInitialized) {
        ColumnConstraints con=new ColumnConstraints();
        con.setPrefWidth(100);
        planbottom.getColumnConstraints().add(con);
      }
      counter++;
    }
    if (!constraintInitialized) {
      ColumnConstraints con=new ColumnConstraints();
      con.setPrefWidth(imageFilterConstraint);
      planbottom.getColumnConstraints().add(con);
      constraintInitialized=true;
    }
    mainPane.add(planbottom,0,2);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * prepares filter-imageViews by getting all filters from service and showing the filter in small preview imageviews
 * @param imgOriginalPath path of the image to show
 */
public void makePreviewFilter(String imgOriginalPath){
  LOGGER.info(""String_Node_Str"" + imgOriginalPath);
  try {
    String imgPath=filterService.resize(imgOriginalPath,80,80);
    int counter=1;
    List<String> allfilters=filterService.getExistingFilters();
    double imageFilterConstraint=(Screen.getPrimary().getBounds().getWidth() - (allfilters.size() * 100)) / 2;
    planbottom.getChildren().clear();
    if (!constraintInitialized) {
      ColumnConstraints con=new ColumnConstraints();
      con.setPrefWidth(imageFilterConstraint);
      planbottom.getColumnConstraints().add(con);
    }
    for (    String filter : allfilters) {
      ImageView imageView=new ImageView(SwingFXUtils.toFXImage(filterService.filter(filter,imgPath),null));
      if (counter == 1) {
        imageView.setFitHeight(100);
        original=imageView;
        activeFilterImageView=original;
      }
      imageView.setId(filter);
      imageView.setOnMouseClicked(e -> {
        Image filteredImage;
        ImageView imgView=(ImageView)e.getSource();
        try {
          filteredImage=SwingFXUtils.toFXImage(filterService.filter(imgView.getId(),ivfullscreenImage.getId()),null);
          if (changeActiveFilter(imgView)) {
            ivfullscreenImage.setImage(filteredImage);
            filteredImage=null;
            filterService.clear();
            ivfullscreenImage.setFitHeight(base.getHeight());
            ivfullscreenImage.setFitWidth(base.getWidth());
          }
        }
 catch (        ServiceException e2) {
          LOGGER.error(""String_Node_Str"" + e2.getMessage());
        }
      }
);
      planbottom.add(imageView,counter,0);
      if (!constraintInitialized) {
        ColumnConstraints con=new ColumnConstraints();
        con.setPrefWidth(100);
        planbottom.getColumnConstraints().add(con);
      }
      counter++;
    }
    if (!constraintInitialized) {
      ColumnConstraints con=new ColumnConstraints();
      con.setPrefWidth(imageFilterConstraint);
      planbottom.getColumnConstraints().add(con);
      constraintInitialized=true;
    }
    mainPane.add(planbottom,0,2);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77989,"private void prepareHBox(at.ac.tuwien.sepm.ws16.qse01.entities.Image img){
  HBox hBox=new HBox();
  hBox.setSpacing(120);
  hBox.setVisible(false);
  hBox.setStyle(""String_Node_Str"");
  ImageView fullscreen=new ImageView(new Image(""String_Node_Str""));
  fullscreen.setFitHeight(30);
  fullscreen.setFitWidth(30);
  fullscreen.setOnMouseClicked(mouseEvent -> {
    ImageView imageView=(ImageView)((VBox)(((ImageView)mouseEvent.getSource()).getParent().getParent())).getChildren().get(0);
    LOGGER.debug(""String_Node_Str"" + imageView.getId());
    windowManager.showFullscreenImage(Integer.parseInt(imageView.getId()));
  }
);
  ImageView delete=new ImageView(getClass().getResource(""String_Node_Str"").toExternalForm());
  delete.setFitHeight(30);
  delete.setFitWidth(30);
  delete.setOnMouseClicked((  MouseEvent mouseEvent) -> {
    LOGGER.debug(""String_Node_Str"");
    Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
    alert.setHeaderText(""String_Node_Str"");
    alert.setContentText(""String_Node_Str"");
    alert.initModality(Modality.WINDOW_MODAL);
    alert.initOwner(this.stage);
    Optional<ButtonType> result=alert.showAndWait();
    if (result.isPresent() && result.get() == ButtonType.OK) {
      ImageView imageView=(ImageView)((VBox)(((ImageView)mouseEvent.getSource()).getParent().getParent())).getChildren().get(0);
      LOGGER.debug(""String_Node_Str"" + imageView.getId());
      try {
        imageService.delete(Integer.parseInt(imageView.getId()));
        tile.getChildren().remove(imageView.getParent());
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"" + e.getMessage());
      }
    }
  }
);
  hBox.getChildren().addAll(fullscreen,delete);
  ImageView imageView=null;
  try {
    if (new File(img.getImagepath()).isFile()) {
      imageView=createImageView(new File(img.getImagepath()));
    }
 else     if (new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + img.getImagepath()).isFile()) {
      img.setImagepath(System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + img.getImagepath());
      imageService.update(img);
      imageView=createImageView(new File(img.getImagepath()));
    }
 else {
      LOGGER.debug(""String_Node_Str"" + img.toString());
      imageService.delete(img.getImageID());
    }
    if (imageView != null) {
      VBox vBox=new VBox();
      LOGGER.debug(""String_Node_Str"" + img.getImageID());
      imageView.setId(String.valueOf(img.getImageID()));
      imageView.setUserData(img.getImagepath());
      vBox.getChildren().addAll(imageView,hBox);
      tile.getChildren().add(vBox);
    }
  }
 catch (  Exception e) {
    LOGGER.debug(""String_Node_Str"" + e.getMessage());
  }
}","private void prepareHBox(at.ac.tuwien.sepm.ws16.qse01.entities.Image img){
  HBox hBox=new HBox();
  hBox.setSpacing(120);
  hBox.setVisible(false);
  hBox.setStyle(""String_Node_Str"");
  ImageView fullscreen=new ImageView(new Image(""String_Node_Str""));
  fullscreen.setFitHeight(30);
  fullscreen.setFitWidth(30);
  fullscreen.setOnMouseClicked(mouseEvent -> {
    ImageView imageView=(ImageView)((VBox)(((ImageView)mouseEvent.getSource()).getParent().getParent())).getChildren().get(0);
    LOGGER.debug(""String_Node_Str"" + imageView.getId());
    windowManager.showFullscreenImage(Integer.parseInt(imageView.getId()));
  }
);
  ImageView delete=new ImageView(getClass().getResource(""String_Node_Str"").toExternalForm());
  delete.setFitHeight(30);
  delete.setFitWidth(30);
  delete.setOnMouseClicked((  MouseEvent mouseEvent) -> {
    LOGGER.debug(""String_Node_Str"");
    Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
    alert.setHeaderText(""String_Node_Str"");
    alert.setContentText(""String_Node_Str"");
    alert.initModality(Modality.WINDOW_MODAL);
    alert.initOwner(this.stage);
    Optional<ButtonType> result=alert.showAndWait();
    if (result.isPresent() && result.get() == ButtonType.OK) {
      ImageView imageView=(ImageView)((VBox)(((ImageView)mouseEvent.getSource()).getParent().getParent())).getChildren().get(0);
      LOGGER.debug(""String_Node_Str"" + imageView.getId());
      try {
        imageService.delete(Integer.parseInt(imageView.getId()));
        tile.getChildren().remove(imageView.getParent());
      }
 catch (      ServiceException e) {
        LOGGER.debug(""String_Node_Str"" + e.getMessage());
      }
    }
  }
);
  hBox.getChildren().addAll(fullscreen,delete);
  ImageView imageView=null;
  try {
    if (new File(img.getImagepath()).isFile()) {
      imageView=createImageView(new File(img.getImagepath()));
    }
 else {
      LOGGER.debug(""String_Node_Str"" + img.toString());
      imageService.delete(img.getImageID());
    }
    if (imageView != null) {
      VBox vBox=new VBox();
      LOGGER.debug(""String_Node_Str"" + img.getImageID());
      imageView.setId(String.valueOf(img.getImageID()));
      imageView.setUserData(img.getImagepath());
      vBox.getChildren().addAll(imageView,hBox);
      tile.getChildren().add(vBox);
    }
  }
 catch (  Exception e) {
    LOGGER.debug(""String_Node_Str"" + e.getMessage());
  }
}"
77990,"/** 
 * changes given image with GAUSSIAN filter
 * @param imgPath the path of image to filter
 * @return BufferedImage filtered image
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public BufferedImage filterGaussian(String imgPath){
  LOGGER.info(""String_Node_Str"" + imgPath);
  Mat source=Imgcodecs.imread(imgPath,Imgcodecs.CV_LOAD_IMAGE_COLOR);
  Mat destination=new Mat(source.rows(),source.cols(),source.type());
  Imgproc.GaussianBlur(source,destination,new Size(15,15),0);
  return getBufferedImage(destination);
}","/** 
 * changes given image with GAUSSIAN filter
 * @param imgPath the path of image to filter
 * @return BufferedImage filtered image
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public BufferedImage filterGaussian(String imgPath){
  LOGGER.info(""String_Node_Str"" + imgPath);
  Mat source=Imgcodecs.imread(imgPath,Imgcodecs.CV_LOAD_IMAGE_COLOR);
  Mat destination=new Mat(source.rows(),source.cols(),source.type());
  Imgproc.GaussianBlur(source,destination,new Size(25,25),0);
  return getBufferedImage(destination);
}"
77991,"/** 
 * checks if storage directory of active shooting exists. If it doesnt exist, then it will create a storage directory.
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public void checkStorageDir() throws ServiceException {
  if (new File(activeShooting.getStorageDir()).isDirectory())   storageDir=activeShooting.getStorageDir() + ""String_Node_Str"";
}","/** 
 * checks if storage directory of active shooting exists. If it doesnt exist, then it will create a storage directory.
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public void checkStorageDir() throws ServiceException {
  if (new File(activeShooting.getStorageDir()).isDirectory())   storageDir=activeShooting.getStorageDir() + ""String_Node_Str"";
 else   throw new ServiceException(""String_Node_Str"" + activeShooting.getStorageDir());
}"
77992,"/** 
 * converts given mat object to buffered image
 * @param m - a mat object to convert buffered image
 * @return BufferedImage converted buffered image
 */
public BufferedImage getBufferedImage(Mat m){
  int type=BufferedImage.TYPE_BYTE_GRAY;
  if (m.channels() > 1) {
    type=BufferedImage.TYPE_3BYTE_BGR;
  }
  BufferedImage image=new BufferedImage(m.cols(),m.rows(),type);
  m.get(0,0,((DataBufferByte)image.getRaster().getDataBuffer()).getData());
  return image;
}","/** 
 * converts given mat object to buffered image
 * @param m - a mat object to convert buffered image
 * @return BufferedImage converted buffered image
 */
public BufferedImage getBufferedImage(Mat m){
  int type=BufferedImage.TYPE_BYTE_GRAY;
  if (m.channels() > 1) {
    type=BufferedImage.TYPE_3BYTE_BGR;
  }
  bufferedImage=new BufferedImage(m.cols(),m.rows(),type);
  m.get(0,0,((DataBufferByte)bufferedImage.getRaster().getDataBuffer()).getData());
  m.release();
  return bufferedImage;
}"
77993,"/** 
 * changes given image with COLORSPACE filter
 * @param imgPath the path of image to filter
 * @return BufferedImage filtered image
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public BufferedImage filterColorSpace(String imgPath){
  LOGGER.info(""String_Node_Str"" + imgPath);
  try {
    File input=new File(imgPath);
    BufferedImage image=ImageIO.read(input);
    byte[] data=((DataBufferByte)image.getRaster().getDataBuffer()).getData();
    Mat mat=new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC3);
    mat.put(0,0,data);
    Mat mat1=new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC3);
    Imgproc.cvtColor(mat,mat1,Imgproc.COLOR_RGB2HSV);
    byte[] data1=new byte[mat1.rows() * mat1.cols() * (int)(mat1.elemSize())];
    mat1.get(0,0,data1);
    BufferedImage image1=new BufferedImage(mat1.cols(),mat1.rows(),5);
    image1.getRaster().setDataElements(0,0,mat1.cols(),mat1.rows(),data1);
    return image1;
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
  }
  return null;
}","/** 
 * changes given image with COLORSPACE filter
 * @param imgPath the path of image to filter
 * @return BufferedImage filtered image
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public BufferedImage filterColorSpace(String imgPath){
  LOGGER.info(""String_Node_Str"" + imgPath);
  try {
    File input=new File(imgPath);
    BufferedImage image=ImageIO.read(input);
    byte[] data=((DataBufferByte)image.getRaster().getDataBuffer()).getData();
    Mat mat=new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC3);
    mat.put(0,0,data);
    Mat mat1=new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC3);
    Imgproc.cvtColor(mat,mat1,Imgproc.COLOR_RGB2HSV);
    byte[] data1=new byte[mat1.rows() * mat1.cols() * (int)(mat1.elemSize())];
    mat1.get(0,0,data1);
    bufferedImage=new BufferedImage(mat1.cols(),mat1.rows(),5);
    bufferedImage.getRaster().setDataElements(0,0,mat1.cols(),mat1.rows(),data1);
    return bufferedImage;
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
  }
  return null;
}"
77994,"/** 
 * changes given image with GRAYSCALE filter
 * @param imgPath the path of image to filter
 * @return BufferedImage filtered image
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public BufferedImage filterGrayScale(String imgPath){
  LOGGER.info(""String_Node_Str"" + imgPath);
  try {
    File input=new File(imgPath);
    BufferedImage image=ImageIO.read(input);
    byte[] data=((DataBufferByte)image.getRaster().getDataBuffer()).getData();
    Mat mat=new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC3);
    mat.put(0,0,data);
    Mat mat1=new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC1);
    Imgproc.cvtColor(mat,mat1,Imgproc.COLOR_RGB2GRAY);
    byte[] data1=new byte[mat1.rows() * mat1.cols() * (int)(mat1.elemSize())];
    mat1.get(0,0,data1);
    BufferedImage image1=new BufferedImage(mat1.cols(),mat1.rows(),BufferedImage.TYPE_BYTE_GRAY);
    image1.getRaster().setDataElements(0,0,mat1.cols(),mat1.rows(),data1);
    return image1;
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
  }
  return null;
}","/** 
 * changes given image with GRAYSCALE filter
 * @param imgPath the path of image to filter
 * @return BufferedImage filtered image
 * @throws ServiceException if an error occurs then it throws a ServiceException
 */
public BufferedImage filterGrayScale(String imgPath){
  LOGGER.info(""String_Node_Str"" + imgPath);
  try {
    File input=new File(imgPath);
    BufferedImage image=ImageIO.read(input);
    byte[] data=((DataBufferByte)image.getRaster().getDataBuffer()).getData();
    Mat mat=new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC3);
    mat.put(0,0,data);
    Mat mat1=new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC1);
    Imgproc.cvtColor(mat,mat1,Imgproc.COLOR_RGB2GRAY);
    byte[] data1=new byte[mat1.rows() * mat1.cols() * (int)(mat1.elemSize())];
    mat1.get(0,0,data1);
    bufferedImage=new BufferedImage(mat1.cols(),mat1.rows(),BufferedImage.TYPE_BYTE_GRAY);
    bufferedImage.getRaster().setDataElements(0,0,mat1.cols(),mat1.rows(),data1);
    return bufferedImage;
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return null;
}"
77995,"@Autowired public FullScreenImageController(WindowManager windowManager,ShootingService shootingService,FilterService filterService,ImageService imageService,ImagePrinter imagePrinter,RefreshManager refreshManager) throws ServiceException {
  this.filterService=filterService;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.windowManager=windowManager;
  this.imagePrinter=imagePrinter;
  this.refreshManager=refreshManager;
  this.activeShooting=shootingService.searchIsActive();
}","@Autowired public FullScreenImageController(WindowManager windowManager,ShootingService shootingService,FilterService filterService,ImageService imageService,ImagePrinter imagePrinter,ImageHelper imageHelper,RefreshManager refreshManager) throws ServiceException {
  this.filterService=filterService;
  this.imageService=imageService;
  this.shootingService=shootingService;
  this.windowManager=windowManager;
  this.imagePrinter=imagePrinter;
  this.refreshManager=refreshManager;
  this.imageHelper=imageHelper;
  this.activeShooting=shootingService.searchIsActive();
}"
77996,"/** 
 * saves the filtered image in database...
 */
@FXML public void saveFilteredImg(){
  LOGGER.info(""String_Node_Str"" + filteredImgPath);
  try {
    activeFilterImageView.setFitHeight(80);
    activeFilterImageView.setPreserveRatio(false);
    saveFilteredButton.setVisible(false);
    File outputfile=null;
    System.out.println(""String_Node_Str"" + activeShooting.getStorageDir());
    try {
      BufferedImage bi=filterService.filter(activeFilterImageView.getId(),ivfullscreenImage.getId());
      String[] parts=ivfullscreenImage.getId().split(""String_Node_Str"");
      String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"" + activeFilterImageView.getId() + ""String_Node_Str"");
      outputfile=new File(activeShooting.getStorageDir() + ""String_Node_Str"" + imgFilterName);
      ImageIO.write(bi,""String_Node_Str"",outputfile);
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    activeFilterImageView=null;
    at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.create(new at.ac.tuwien.sepm.ws16.qse01.entities.Image(outputfile.getAbsolutePath(),activeShooting.getId()));
    refreshManager.notifyMiniatureFrameOfAdd(newImage);
    if ((currentIndex + 1) >= imageList.size())     imageList.add(newImage);
 else {
      imageList.add(currentIndex + 1,newImage);
    }
    currentIndex=currentIndex + 1;
    button4.setVisible(true);
    LOGGER.info(""String_Node_Str"");
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * saves the filtered image in database...
 */
@FXML public void saveFilteredImg(){
  LOGGER.info(""String_Node_Str"" + filteredImgPath);
  try {
    activeFilterImageView.setFitHeight(80);
    activeFilterImageView.setPreserveRatio(false);
    saveFilteredButton.setVisible(false);
    String[] parts=ivfullscreenImage.getId().split(""String_Node_Str"");
    String imgFilterName=parts[parts.length - 1].replace(""String_Node_Str"",""String_Node_Str"" + activeFilterImageView.getId() + ""String_Node_Str"");
    String destPath=activeShooting.getStorageDir() + ""String_Node_Str"" + imgFilterName;
    imageHelper.saveImage(filterService.filter(activeFilterImageView.getId(),ivfullscreenImage.getId()),destPath);
    activeFilterImageView=null;
    at.ac.tuwien.sepm.ws16.qse01.entities.Image newImage=imageService.create(new at.ac.tuwien.sepm.ws16.qse01.entities.Image(destPath,activeShooting.getId()));
    refreshManager.notifyMiniatureFrameOfAdd(newImage);
    if ((currentIndex + 1) >= imageList.size())     imageList.add(newImage);
 else {
      imageList.add(currentIndex + 1,newImage);
    }
    currentIndex=currentIndex + 1;
    button4.setVisible(true);
    LOGGER.info(""String_Node_Str"");
  }
 catch (  ServiceException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
  }
}"
77997,"/** 
 * prepares filter-imageViews by getting all filters from service and showing the filter in small preview imageviews
 * @param imgOriginalPath path of the image to show
 */
public void makePreviewFilter(String imgOriginalPath){
  LOGGER.info(""String_Node_Str"" + imgOriginalPath);
  try {
    String imgPath=filterService.resize(imgOriginalPath,80,80);
    int counter=1;
    List<String> allfilters=filterService.getExistingFilters();
    double imageFilterConstraint=(Screen.getPrimary().getBounds().getWidth() - (allfilters.size() * 100)) / 2;
    planbottom.getChildren().clear();
    if (!constraintInitialized) {
      ColumnConstraints con=new ColumnConstraints();
      con.setPrefWidth(imageFilterConstraint);
      planbottom.getColumnConstraints().add(con);
    }
    for (    String filter : allfilters) {
      ImageView imageView=new ImageView(SwingFXUtils.toFXImage(filterService.filter(filter,imgPath),null));
      if (counter == 1) {
        imageView.setFitHeight(100);
        original=imageView;
        activeFilterImageView=original;
      }
      imageView.setId(filter);
      imageView.setOnMouseClicked(e -> {
        Image filteredImage;
        ImageView imgView=(ImageView)e.getSource();
        try {
          filteredImage=SwingFXUtils.toFXImage(filterService.filter(imgView.getId(),ivfullscreenImage.getId()),null);
          if (changeActiveFilter(imgView)) {
            ivfullscreenImage.setImage(filteredImage);
            filteredImage=null;
            filterService.clear();
            ivfullscreenImage.setFitHeight(base.getHeight());
            ivfullscreenImage.setFitWidth(base.getWidth());
          }
        }
 catch (        ServiceException e2) {
          LOGGER.error(""String_Node_Str"" + e2.getMessage());
        }
      }
);
      planbottom.add(imageView,counter,0);
      if (!constraintInitialized) {
        ColumnConstraints con=new ColumnConstraints();
        con.setPrefWidth(100);
        planbottom.getColumnConstraints().add(con);
      }
      counter++;
    }
    if (!constraintInitialized) {
      ColumnConstraints con=new ColumnConstraints();
      con.setPrefWidth(imageFilterConstraint);
      planbottom.getColumnConstraints().add(con);
      constraintInitialized=true;
    }
    mainPane.add(planbottom,0,2);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}","/** 
 * prepares filter-imageViews by getting all filters from service and showing the filter in small preview imageviews
 * @param imgOriginalPath path of the image to show
 */
public void makePreviewFilter(String imgOriginalPath){
  LOGGER.info(""String_Node_Str"" + imgOriginalPath);
  try {
    String imgPath=filterService.resize(imgOriginalPath,80,80);
    int counter=1;
    List<String> allfilters=filterService.getExistingFilters();
    double imageFilterConstraint=(Screen.getPrimary().getBounds().getWidth() - (allfilters.size() * 100)) / 2;
    planbottom.getChildren().clear();
    if (!constraintInitialized) {
      ColumnConstraints con=new ColumnConstraints();
      con.setPrefWidth(imageFilterConstraint);
      planbottom.getColumnConstraints().add(con);
    }
    for (    String filter : allfilters) {
      ImageView imageView=new ImageView(SwingFXUtils.toFXImage(filterService.filter(filter,imgPath),null));
      if (counter == 1) {
        imageView.setFitHeight(100);
        original=imageView;
        activeFilterImageView=original;
      }
      imageView.setId(filter);
      imageView.setOnMouseClicked(e -> {
        Image filteredImage;
        ImageView imgView=(ImageView)e.getSource();
        try {
          filteredImage=SwingFXUtils.toFXImage(filterService.filter(imgView.getId(),ivfullscreenImage.getId()),null);
          if (changeActiveFilter(imgView)) {
            ivfullscreenImage.setImage(filteredImage);
            filteredImage=null;
            filterService.clear();
            ivfullscreenImage.setFitHeight(base.getHeight());
            ivfullscreenImage.setFitWidth(base.getWidth());
          }
        }
 catch (        ServiceException e2) {
          LOGGER.error(""String_Node_Str"" + e2.getMessage());
        }
      }
);
      planbottom.add(imageView,counter,0);
      if (!constraintInitialized) {
        ColumnConstraints con=new ColumnConstraints();
        con.setPrefWidth(100);
        planbottom.getColumnConstraints().add(con);
      }
      counter++;
    }
    if (!constraintInitialized) {
      ColumnConstraints con=new ColumnConstraints();
      con.setPrefWidth(imageFilterConstraint);
      planbottom.getColumnConstraints().add(con);
      mainPane.add(planbottom,0,2);
      constraintInitialized=true;
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}"
77998,"@Override public void handle(TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
  try {
    Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (!t.getNewValue().isNaN()) {
      p.getRelativeRectangle().setHeight(t.getNewValue());
      pservice.editPairLogoRelativeRectangle(p);
    }
 else {
      refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
    }
  }
 catch (  ServiceException e) {
    try {
      refreshTableProfiles(pservice.getAllProfiles());
    }
 catch (    ServiceException e1) {
      LOGGER.debug(""String_Node_Str"" + e1.getMessage());
    }
  }
}","@Override public void handle(TableColumn.CellEditEvent<Background,String> t){
  try {
    Background p=((Background)t.getTableView().getItems().get(t.getTablePosition().getRow()));
    if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
      p.setName(t.getNewValue());
    }
 else {
      refreshTablePosition(pservice.getAllPositionsOfProfile(((Profile)profilList.getSelectionModel().getSelectedItem())));
    }
  }
 catch (  ServiceException e) {
  }
}"
77999,"@Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
  return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId());
}","@Override public TableCell<Background,Boolean> call(TableColumn<Background,Boolean> p){
  return new BackgroundButtonCell(backgroundList,pservice,windowManager.getStage());
}"
78000,"@FXML private void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice);
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          txLogoName.getEntries().addAll(logo2StringArray(pservice.getAllLogosOfProfile(selectedProfile)));
          txLogoName.getImgViews().putAll(logo2imgViews(pservice.getAllLogosOfProfile(selectedProfile)));
          txLogoName.setTxLogoPath(txLogoLogo);
        }
 catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
    tablePosition.setEditable(true);
    colPositionID.setCellValueFactory(new PropertyValueFactory<Position,Integer>(""String_Node_Str""));
    colPositionName.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
    colPositionName.setCellFactory(TextFieldTableCell.forTableColumn());
    colPositionName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Position,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Position,String> t){
        try {
          Position p=((Position)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.editPosition(p);
            refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          }
 else {
            refreshTablePosition(pservice.getAllPositionsOfProfile(((Profile)profilList.getSelectionModel().getSelectedItem())));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colPositionBild.setStyle(""String_Node_Str"");
    colPositionBild.setSortable(false);
    colPositionBild.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
    colPositionBild.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new PositionImgCell(posList,pservice);
      }
    }
);
    colPositionAktion.setStyle(""String_Node_Str"");
    colPositionAktion.setSortable(false);
    colPositionAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Position,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Position,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colPositionAktion.setCellFactory(new Callback<TableColumn<Position,Boolean>,TableCell<Position,Boolean>>(){
      @Override public TableCell<Position,Boolean> call(      TableColumn<Position,Boolean> p){
        return new PositionButtonCell(posList,kamPosList,selectedProfile.getId(),pservice,windowManager.getStage());
      }
    }
);
    tableKamPos.setEditable(true);
    colKamPosKamera.setCellValueFactory(new PropertyValueFactory<Profile.PairCameraPosition,String>(""String_Node_Str""));
    colKamPosPosition.setStyle(""String_Node_Str"");
    colKamPosPosition.setSortable(false);
    colKamPosPosition.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colKamPosPosition.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
      @Override public TableCell<Profile.PairCameraPosition,Boolean> call(      TableColumn<Profile.PairCameraPosition,Boolean> p){
        return new CamPosComboBoxCell(kamPosList,pservice,posList);
      }
    }
);
    tableLogo.setEditable(true);
    colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
    colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
    colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
      public ObservableValue<String> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
        String newLabel=""String_Node_Str"";
        if (p.getValue().getLogo() != null)         newLabel=p.getValue().getLogo().getLabel();
        return new ReadOnlyObjectWrapper(newLabel);
      }
    }
);
    colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
    colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            if (p.getLogo() == null) {
              Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
              p.setLogo(newLogo);
            }
 else             p.getLogo().setLabel(t.getNewValue());
            LOGGER.info(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
            pservice.editLogo(p.getLogo());
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
      public ObservableValue<Double> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
        return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
      }
    }
);
    colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
    colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (!t.getNewValue().isNaN()) {
            p.getRelativeRectangle().setX(t.getNewValue());
            pservice.editPairLogoRelativeRectangle(p);
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
      public ObservableValue<Double> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
        return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
      }
    }
);
    colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
    colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (!t.getNewValue().isNaN()) {
            p.getRelativeRectangle().setY(t.getNewValue());
            pservice.editPairLogoRelativeRectangle(p);
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
      public ObservableValue<Double> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
        return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getWidth());
      }
    }
);
    colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
    colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (!t.getNewValue().isNaN()) {
            p.getRelativeRectangle().setWidth(t.getNewValue());
            pservice.editPairLogoRelativeRectangle(p);
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
      public ObservableValue<Double> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
        return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
      }
    }
);
    colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
    colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (!t.getNewValue().isNaN()) {
            p.getRelativeRectangle().setHeight(t.getNewValue());
            pservice.editPairLogoRelativeRectangle(p);
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoLogo.setStyle(""String_Node_Str"");
    colLogoLogo.setSortable(false);
    colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
      public ObservableValue<String> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
        String logoPath=""String_Node_Str"";
        if (p.getValue().getLogo() != null)         logoPath=p.getValue().getLogo().getPath();
        return new ReadOnlyObjectWrapper(logoPath);
      }
    }
);
    colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new LogoImgCell(logoList,pservice);
      }
    }
);
    colLogoAktion.setStyle(""String_Node_Str"");
    colLogoAktion.setSortable(false);
    colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
      @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(      TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
        return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId());
      }
    }
);
    tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedLogo.getLogo().getPath());
        this.selectedLogo=selectedLogo;
        if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
          try {
            int width=Integer.parseInt(txPreviewWidth.getText());
            int height=Integer.parseInt(txPreviewHeight.getText());
            javafx.scene.image.Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
            previewLogo.setImage(image);
          }
 catch (          NumberFormatException e) {
            LOGGER.error(""String_Node_Str"");
          }
catch (          ServiceException e) {
            e.printStackTrace();
          }
        }
 else         LOGGER.info(""String_Node_Str"");
      }
    }
);
    txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
      if (selectedLogo != null) {
        try {
          int height=Integer.parseInt(newValue);
          int width=Integer.parseInt(txPreviewWidth.getText());
          javafx.scene.image.Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
    txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
      if (selectedLogo != null) {
        try {
          int width=Integer.parseInt(newValue);
          int height=Integer.parseInt(txPreviewHeight.getText());
          javafx.scene.image.Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}","@FXML private void initialize(){
  LOGGER.debug(""String_Node_Str"");
  try {
    tableProfil.setEditable(true);
    colProfilID.setCellValueFactory(new PropertyValueFactory<Profile,Integer>(""String_Node_Str""));
    colProfilName.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilName.setCellFactory(TextFieldTableCell.forTableColumn());
    colProfilName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile,String> t){
        try {
          Profile p=((Profile)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.edit(p);
          }
 else {
            refreshTableProfiles(pservice.getAllProfiles());
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colProfilMobil.setStyle(""String_Node_Str"");
    colProfilMobil.setSortable(false);
    colProfilMobil.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilMobil.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilGreen.setStyle(""String_Node_Str"");
    colProfilGreen.setSortable(false);
    colProfilGreen.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilGreen.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilFilter.setStyle(""String_Node_Str"");
    colProfilFilter.setSortable(false);
    colProfilFilter.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilFilter.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilDrucken.setStyle(""String_Node_Str"");
    colProfilDrucken.setSortable(false);
    colProfilDrucken.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilDrucken.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileCheckboxCell(profList,pservice,""String_Node_Str"");
      }
    }
);
    colProfilWatermark.setStyle(""String_Node_Str"");
    colProfilWatermark.setSortable(false);
    colProfilWatermark.setCellValueFactory(new PropertyValueFactory<Profile,String>(""String_Node_Str""));
    colProfilWatermark.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new ProfileImgCell(profList,pservice);
      }
    }
);
    colProfilAktion.setStyle(""String_Node_Str"");
    colProfilAktion.setSortable(false);
    colProfilAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colProfilAktion.setCellFactory(new Callback<TableColumn<Profile,Boolean>,TableCell<Profile,Boolean>>(){
      @Override public TableCell<Profile,Boolean> call(      TableColumn<Profile,Boolean> p){
        return new ProfileButtonCell(profList,pservice,windowManager.getStage());
      }
    }
);
    this.refreshTableProfiles(pservice.getAllProfiles());
    tableProfil.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        selectedProfile=(Profile)newSelection;
        try {
          refreshTablePosition(pservice.getAllPositions());
          refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(selectedProfile.getId()));
          txLogoName.getEntries().addAll(logo2StringArray(pservice.getAllLogosOfProfile(selectedProfile)));
          txLogoName.getImgViews().putAll(logo2imgViews(pservice.getAllLogosOfProfile(selectedProfile)));
          txLogoName.setTxLogoPath(txLogoLogo);
        }
 catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
    tablePosition.setEditable(true);
    colPositionID.setCellValueFactory(new PropertyValueFactory<Position,Integer>(""String_Node_Str""));
    colPositionName.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
    colPositionName.setCellFactory(TextFieldTableCell.forTableColumn());
    colPositionName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Position,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Position,String> t){
        try {
          Position p=((Position)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
            pservice.editPosition(p);
            refreshTableKameraPosition(pservice.getAllPairCameraPositionOfProfile(selectedProfile.getId()));
          }
 else {
            refreshTablePosition(pservice.getAllPositionsOfProfile(((Profile)profilList.getSelectionModel().getSelectedItem())));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colPositionBild.setStyle(""String_Node_Str"");
    colPositionBild.setSortable(false);
    colPositionBild.setCellValueFactory(new PropertyValueFactory<Position,String>(""String_Node_Str""));
    colPositionBild.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new PositionImgCell(posList,pservice);
      }
    }
);
    colPositionAktion.setStyle(""String_Node_Str"");
    colPositionAktion.setSortable(false);
    colPositionAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Position,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Position,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colPositionAktion.setCellFactory(new Callback<TableColumn<Position,Boolean>,TableCell<Position,Boolean>>(){
      @Override public TableCell<Position,Boolean> call(      TableColumn<Position,Boolean> p){
        return new PositionButtonCell(posList,kamPosList,selectedProfile.getId(),pservice,windowManager.getStage());
      }
    }
);
    tableKamPos.setEditable(true);
    colKamPosKamera.setCellValueFactory(new PropertyValueFactory<Profile.PairCameraPosition,String>(""String_Node_Str""));
    colKamPosPosition.setStyle(""String_Node_Str"");
    colKamPosPosition.setSortable(false);
    colKamPosPosition.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile.PairCameraPosition,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colKamPosPosition.setCellFactory(new Callback<TableColumn<Profile.PairCameraPosition,Boolean>,TableCell<Profile.PairCameraPosition,Boolean>>(){
      @Override public TableCell<Profile.PairCameraPosition,Boolean> call(      TableColumn<Profile.PairCameraPosition,Boolean> p){
        return new CamPosComboBoxCell(kamPosList,pservice,posList);
      }
    }
);
    tableLogo.setEditable(true);
    colLogoID.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Integer>(""String_Node_Str""));
    colLogoName.setCellValueFactory(new PropertyValueFactory<Profile.PairLogoRelativeRectangle,Logo>(""String_Node_Str""));
    colLogoName.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
      public ObservableValue<String> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
        String newLabel=""String_Node_Str"";
        if (p.getValue().getLogo() != null)         newLabel=p.getValue().getLogo().getLabel();
        return new ReadOnlyObjectWrapper(newLabel);
      }
    }
);
    colLogoName.setCellFactory(TextFieldTableCell.forTableColumn());
    colLogoName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,String> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            if (p.getLogo() == null) {
              Logo newLogo=pservice.addLogo(new Logo(t.getNewValue(),""String_Node_Str""));
              p.setLogo(newLogo);
            }
 else             p.getLogo().setLabel(t.getNewValue());
            LOGGER.info(""String_Node_Str"" + p.getLogo().getId() + ""String_Node_Str""+ p.getLogo().getLabel()+ ""String_Node_Str""+ p.getLogo().getPath());
            pservice.editLogo(p.getLogo());
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoX.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
      public ObservableValue<Double> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
        return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getX());
      }
    }
);
    colLogoX.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
    colLogoX.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (!t.getNewValue().isNaN()) {
            p.getRelativeRectangle().setX(t.getNewValue());
            pservice.editPairLogoRelativeRectangle(p);
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoY.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
      public ObservableValue<Double> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
        return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getY());
      }
    }
);
    colLogoY.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
    colLogoY.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (!t.getNewValue().isNaN()) {
            p.getRelativeRectangle().setY(t.getNewValue());
            pservice.editPairLogoRelativeRectangle(p);
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoBreite.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
      public ObservableValue<Double> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
        return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getWidth());
      }
    }
);
    colLogoBreite.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
    colLogoBreite.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (!t.getNewValue().isNaN()) {
            p.getRelativeRectangle().setWidth(t.getNewValue());
            pservice.editPairLogoRelativeRectangle(p);
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoHoehe.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double>,ObservableValue<Double>>(){
      public ObservableValue<Double> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Double> p){
        return new ReadOnlyObjectWrapper(p.getValue().getRelativeRectangle().getHeight());
      }
    }
);
    colLogoHoehe.setCellFactory(TextFieldTableCell.forTableColumn(new Double2String(""String_Node_Str"")));
    colLogoHoehe.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Profile.PairLogoRelativeRectangle,Double> t){
        try {
          Profile.PairLogoRelativeRectangle p=((Profile.PairLogoRelativeRectangle)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (!t.getNewValue().isNaN()) {
            p.getRelativeRectangle().setHeight(t.getNewValue());
            pservice.editPairLogoRelativeRectangle(p);
          }
 else {
            refreshTableLogo(pservice.getAllPairLogoRelativeRectangle(((Profile)profilList.getSelectionModel().getSelectedItem()).getId()));
          }
        }
 catch (        ServiceException e) {
          try {
            refreshTableProfiles(pservice.getAllProfiles());
          }
 catch (          ServiceException e1) {
            LOGGER.debug(""String_Node_Str"" + e1.getMessage());
          }
        }
      }
    }
);
    colLogoLogo.setStyle(""String_Node_Str"");
    colLogoLogo.setSortable(false);
    colLogoLogo.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String>,ObservableValue<String>>(){
      public ObservableValue<String> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,String> p){
        String logoPath=""String_Node_Str"";
        if (p.getValue().getLogo() != null)         logoPath=p.getValue().getLogo().getPath();
        return new ReadOnlyObjectWrapper(logoPath);
      }
    }
);
    colLogoLogo.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new LogoImgCell(logoList,pservice);
      }
    }
);
    colLogoAktion.setStyle(""String_Node_Str"");
    colLogoAktion.setSortable(false);
    colLogoAktion.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Profile.PairLogoRelativeRectangle,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colLogoAktion.setCellFactory(new Callback<TableColumn<Profile.PairLogoRelativeRectangle,Boolean>,TableCell<Profile.PairLogoRelativeRectangle,Boolean>>(){
      @Override public TableCell<Profile.PairLogoRelativeRectangle,Boolean> call(      TableColumn<Profile.PairLogoRelativeRectangle,Boolean> p){
        return new LogoButtonCell(logoList,pservice,windowManager.getStage(),selectedProfile.getId());
      }
    }
);
    tableLogo.getSelectionModel().selectedItemProperty().addListener((obs,oldSelection,newSelection) -> {
      if (newSelection != null) {
        Profile.PairLogoRelativeRectangle selectedLogo=(Profile.PairLogoRelativeRectangle)newSelection;
        LOGGER.info(""String_Node_Str"" + selectedLogo.getLogo().getPath());
        this.selectedLogo=selectedLogo;
        if (!selectedLogo.getLogo().getPath().isEmpty() && !selectedLogo.getLogo().getPath().equals(""String_Node_Str"") && new File(selectedLogo.getLogo().getPath()).isFile()) {
          try {
            int width=Integer.parseInt(txPreviewWidth.getText());
            int height=Integer.parseInt(txPreviewHeight.getText());
            javafx.scene.image.Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
            previewLogo.setImage(image);
          }
 catch (          NumberFormatException e) {
            LOGGER.error(""String_Node_Str"");
          }
catch (          ServiceException e) {
            e.printStackTrace();
          }
        }
 else         LOGGER.info(""String_Node_Str"");
      }
    }
);
    txPreviewHeight.textProperty().addListener((observable,oldValue,newValue) -> {
      if (selectedLogo != null) {
        try {
          int height=Integer.parseInt(newValue);
          int width=Integer.parseInt(txPreviewWidth.getText());
          javafx.scene.image.Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
    txPreviewWidth.textProperty().addListener((observable,oldValue,newValue) -> {
      if (selectedLogo != null) {
        try {
          int width=Integer.parseInt(newValue);
          int height=Integer.parseInt(txPreviewHeight.getText());
          javafx.scene.image.Image image=SwingFXUtils.toFXImage(logoService.getPreviewForLogo(selectedLogo.getLogo(),selectedLogo.getRelativeRectangle(),width,height),null);
          previewLogo.setImage(image);
        }
 catch (        NumberFormatException e) {
          LOGGER.error(""String_Node_Str"");
        }
catch (        ServiceException e) {
          e.printStackTrace();
        }
      }
    }
);
    tableBackground.setEditable(true);
    colBackgroundID.setCellValueFactory(new PropertyValueFactory<Background,Integer>(""String_Node_Str""));
    colBackgroundName.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
    colBackgroundName.setCellFactory(TextFieldTableCell.forTableColumn());
    colBackgroundName.setOnEditCommit(new EventHandler<TableColumn.CellEditEvent<Background,String>>(){
      @Override public void handle(      TableColumn.CellEditEvent<Background,String> t){
        try {
          Background p=((Background)t.getTableView().getItems().get(t.getTablePosition().getRow()));
          if (t.getNewValue().compareTo(""String_Node_Str"") != 0) {
            p.setName(t.getNewValue());
          }
 else {
            refreshTablePosition(pservice.getAllPositionsOfProfile(((Profile)profilList.getSelectionModel().getSelectedItem())));
          }
        }
 catch (        ServiceException e) {
        }
      }
    }
);
    colBackgroundPath.setStyle(""String_Node_Str"");
    colBackgroundPath.setSortable(false);
    colBackgroundPath.setCellValueFactory(new PropertyValueFactory<Background,String>(""String_Node_Str""));
    colBackgroundPath.setCellFactory(new Callback<TableColumn,TableCell>(){
      @Override public TableCell call(      TableColumn p){
        return new BackgroundImgCell(backgroundList,pservice);
      }
    }
);
    colBackgroundAction.setStyle(""String_Node_Str"");
    colBackgroundAction.setSortable(false);
    colBackgroundAction.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Background,Boolean>,ObservableValue<Boolean>>(){
      @Override public ObservableValue<Boolean> call(      TableColumn.CellDataFeatures<Background,Boolean> p){
        return new SimpleBooleanProperty(p.getValue() != null);
      }
    }
);
    colBackgroundAction.setCellFactory(new Callback<TableColumn<Background,Boolean>,TableCell<Background,Boolean>>(){
      @Override public TableCell<Background,Boolean> call(      TableColumn<Background,Boolean> p){
        return new BackgroundButtonCell(backgroundList,pservice,windowManager.getStage());
      }
    }
);
    greenscreenCategory.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>(){
      @Override public void changed(      ObservableValue<? extends String> selected,      String oldCat,      String newCat){
        LOGGER.info(""String_Node_Str"" + newCat);
      }
    }
);
  }
 catch (  ServiceException e) {
    e.printStackTrace();
  }
}"
